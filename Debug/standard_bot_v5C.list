
standard_bot_v5C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002153c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  080216d0  080216d0  000316d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022538  08022538  000402e0  2**0
                  CONTENTS
  4 .ARM          00000008  08022538  08022538  00032538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022540  08022540  000402e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022540  08022540  00032540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022544  08022544  00032544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08022548  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e6cc  200002e0  08022828  000402e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000e9ac  08022828  0004e9ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ef1a  00000000  00000000  00040310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a48b  00000000  00000000  0007f22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c78  00000000  00000000  000896b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002808  00000000  00000000  0008c330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036cda  00000000  00000000  0008eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004ad32  00000000  00000000  000c5812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f484d  00000000  00000000  00110544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00204d91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cd58  00000000  00000000  00204de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00211b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00211c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080216b4 	.word	0x080216b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	080216b4 	.word	0x080216b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <get_CRC8_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      ucCRC8:��ʼCRC8
  * @retval         �������CRC8
  */
uint8_t get_CRC8_check_sum(unsigned char *pch_message,unsigned int dw_length,unsigned char ucCRC8)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	4613      	mov	r3, r2
 8001004:	71fb      	strb	r3, [r7, #7]
    unsigned char uc_index;
    while (dw_length--)
 8001006:	e00a      	b.n	800101e <get_CRC8_check_sum+0x26>
    {
        uc_index = ucCRC8^(*pch_message++);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60fa      	str	r2, [r7, #12]
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4053      	eors	r3, r2
 8001014:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <get_CRC8_check_sum+0x40>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	71fb      	strb	r3, [r7, #7]
    while (dw_length--)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	60ba      	str	r2, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ef      	bne.n	8001008 <get_CRC8_check_sum+0x10>
    }
    return(ucCRC8);
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	08021834 	.word	0x08021834

0800103c <verify_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
    unsigned char ucExpected = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <verify_CRC8_check_sum+0x1a>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d801      	bhi.n	800105a <verify_CRC8_check_sum+0x1e>
    {
        return 0;
 8001056:	2300      	movs	r3, #0
 8001058:	e013      	b.n	8001082 <verify_CRC8_check_sum+0x46>
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3b01      	subs	r3, #1
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffc8 	bl	8000ff8 <get_CRC8_check_sum>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
    return ( ucExpected == pch_message[dw_length - 1] );
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	429a      	cmp	r2, r3
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <append_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
    unsigned char ucCRC = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d012      	beq.n	80010c4 <append_CRC8_check_sum+0x3a>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d90f      	bls.n	80010c4 <append_CRC8_check_sum+0x3a>
    {
        return;
    }
    ucCRC = get_CRC8_check_sum((unsigned char *)pch_message, dw_length - 1, CRC8_INIT);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	22ff      	movs	r2, #255	; 0xff
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ffa3 	bl	8000ff8 <get_CRC8_check_sum>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
    pch_message[dw_length - 1] = ucCRC;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e000      	b.n	80010c6 <append_CRC8_check_sum+0x3c>
        return;
 80010c4:	bf00      	nop
}
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <get_CRC16_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      wCRC:��ʼCRC16
  * @retval         �������CRC16
  */
uint16_t get_CRC16_check_sum(uint8_t *pch_message,uint32_t dw_length,uint16_t wCRC)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d113      	bne.n	8001108 <get_CRC16_check_sum+0x3c>
    {
        return 0xFFFF;
 80010e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e4:	e016      	b.n	8001114 <get_CRC16_check_sum+0x48>
    }
    while(dw_length--)
    {
        chData = *pch_message++;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	60fa      	str	r2, [r7, #12]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	88f9      	ldrh	r1, [r7, #6]
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	404b      	eors	r3, r1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <get_CRC16_check_sum+0x54>)
 8001100:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001104:	4053      	eors	r3, r2
 8001106:	80fb      	strh	r3, [r7, #6]
    while(dw_length--)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1e9      	bne.n	80010e6 <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 8001112:	88fb      	ldrh	r3, [r7, #6]
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	08021934 	.word	0x08021934

08001124 <verify_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <verify_CRC16_check_sum+0x1a>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d801      	bhi.n	8001142 <verify_CRC16_check_sum+0x1e>
    {
        return 0;
 800113e:	2300      	movs	r3, #0
 8001140:	e020      	b.n	8001184 <verify_CRC16_check_sum+0x60>
    }
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3b02      	subs	r3, #2
 8001146:	4a11      	ldr	r2, [pc, #68]	; (800118c <verify_CRC16_check_sum+0x68>)
 8001148:	8812      	ldrh	r2, [r2, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffbd 	bl	80010cc <get_CRC16_check_sum>
 8001152:	4603      	mov	r3, r0
 8001154:	81fb      	strh	r3, [r7, #14]
    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 8001156:	89fb      	ldrh	r3, [r7, #14]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	3a02      	subs	r2, #2
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	440a      	add	r2, r1
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	4293      	cmp	r3, r2
 8001166:	d10c      	bne.n	8001182 <verify_CRC16_check_sum+0x5e>
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b29b      	uxth	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	3a01      	subs	r2, #1
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	440a      	add	r2, r1
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <verify_CRC16_check_sum+0x5e>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <verify_CRC16_check_sum+0x60>
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000

08001190 <append_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC16_check_sum(uint8_t * pchMessage,uint32_t dwLength)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01d      	beq.n	80011e0 <append_CRC16_check_sum+0x50>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d91a      	bls.n	80011e0 <append_CRC16_check_sum+0x50>
    {
        return;
    }
    wCRC = get_CRC16_check_sum ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3b02      	subs	r3, #2
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <append_CRC16_check_sum+0x58>)
 80011b0:	8812      	ldrh	r2, [r2, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff89 	bl	80010cc <get_CRC16_check_sum>
 80011ba:	4603      	mov	r3, r0
 80011bc:	81fb      	strh	r3, [r7, #14]
    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3b02      	subs	r3, #2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	89fa      	ldrh	r2, [r7, #14]
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b299      	uxth	r1, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e000      	b.n	80011e2 <append_CRC16_check_sum+0x52>
        return;
 80011e0:	bf00      	nop
}
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000

080011ec <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d104      	bne.n	8001206 <buzzer+0x1a>
	{
		htim4.Instance->CCR3 = 0;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <buzzer+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2200      	movs	r2, #0
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
		htim4.Instance->CCR3 = 500;
	}
}
 8001204:	e00c      	b.n	8001220 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	f24a 4210 	movw	r2, #42000	; 0xa410
 800120c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <buzzer+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
		htim4.Instance->CCR3 = 500;
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <buzzer+0x40>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	20001528 	.word	0x20001528

08001230 <buzzer_init>:


void buzzer_init()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001234:	2108      	movs	r1, #8
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <buzzer_init+0x18>)
 8001238:	f010 fa30 	bl	801169c <HAL_TIM_PWM_Start>
	  htim4.Instance->CCR3 = 0;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <buzzer_init+0x18>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2200      	movs	r2, #0
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20001528 	.word	0x20001528

0800124c <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f003 fde7 	bl	8004e28 <can_ISR>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f003 fddc 	bl	8004e28 <can_ISR>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	2100      	movs	r1, #0
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f00a fcc3 	bl	800bc16 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	2101      	movs	r1, #1
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f00a fcb2 	bl	800bc16 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	2228      	movs	r2, #40	; 0x28
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f019 ff2e 	bl	801b132 <memset>
    can_filter_st.FilterActivation = ENABLE;
 80012d6:	2301      	movs	r3, #1
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80012de:	2301      	movs	r3, #1
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	0c1b      	lsrs	r3, r3, #16
 80012f2:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <can_start+0xa4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d111      	bne.n	8001328 <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f00a fa80 	bl	800b818 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f00a fb5d 	bl	800b9d8 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800131e:	2102      	movs	r1, #2
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f00a fd8a 	bl	800be3a <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 8001326:	e017      	b.n	8001358 <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <can_start+0xa8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d112      	bne.n	8001358 <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 8001332:	2301      	movs	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 8001336:	230e      	movs	r3, #14
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
		can_filter_st.FilterBank = 14;
 800133a:	230e      	movs	r3, #14
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f00a fa67 	bl	800b818 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f00a fb44 	bl	800b9d8 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 8001350:	2110      	movs	r1, #16
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f00a fd71 	bl	800be3a <HAL_CAN_ActivateNotification>
}
 8001358:	bf00      	nop
 800135a:	3738      	adds	r7, #56	; 0x38
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40006400 	.word	0x40006400
 8001364:	40006800 	.word	0x40006800

08001368 <dbus_remote_ISR>:

uint8_t remote_raw_data[REMOTE_DATA_SIZE] = {0};
remote_cmd_t remote_cmd = { 0 };


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 8001370:	4b71      	ldr	r3, [pc, #452]	; (8001538 <dbus_remote_ISR+0x1d0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b70      	ldr	r3, [pc, #448]	; (8001538 <dbus_remote_ISR+0x1d0>)
 8001378:	785b      	ldrb	r3, [r3, #1]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21b      	sxth	r3, r3
 8001382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b6c      	ldr	r3, [pc, #432]	; (800153c <dbus_remote_ISR+0x1d4>)
 800138a:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 800138c:	4b6b      	ldr	r3, [pc, #428]	; (800153c <dbus_remote_ISR+0x1d4>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	b29b      	uxth	r3, r3
 8001394:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001398:	b29b      	uxth	r3, r3
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b67      	ldr	r3, [pc, #412]	; (800153c <dbus_remote_ISR+0x1d4>)
 800139e:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 80013a0:	4b65      	ldr	r3, [pc, #404]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80013ac:	789b      	ldrb	r3, [r3, #2]
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b5f      	ldr	r3, [pc, #380]	; (800153c <dbus_remote_ISR+0x1d4>)
 80013be:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 80013c0:	4b5e      	ldr	r3, [pc, #376]	; (800153c <dbus_remote_ISR+0x1d4>)
 80013c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b5a      	ldr	r3, [pc, #360]	; (800153c <dbus_remote_ISR+0x1d4>)
 80013d2:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 80013d4:	4b58      	ldr	r3, [pc, #352]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	099b      	lsrs	r3, r3, #6
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b21a      	sxth	r2, r3
 80013de:	4b56      	ldr	r3, [pc, #344]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80013e0:	78db      	ldrb	r3, [r3, #3]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 80013ea:	4b53      	ldr	r3, [pc, #332]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80013ec:	791b      	ldrb	r3, [r3, #4]
 80013ee:	029b      	lsls	r3, r3, #10
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013fa:	b21a      	sxth	r2, r3
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 80013fc:	4b4f      	ldr	r3, [pc, #316]	; (800153c <dbus_remote_ISR+0x1d4>)
 80013fe:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 8001400:	4b4e      	ldr	r3, [pc, #312]	; (800153c <dbus_remote_ISR+0x1d4>)
 8001402:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001406:	b29b      	uxth	r3, r3
 8001408:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800140c:	b29b      	uxth	r3, r3
 800140e:	b21a      	sxth	r2, r3
 8001410:	4b4a      	ldr	r3, [pc, #296]	; (800153c <dbus_remote_ISR+0x1d4>)
 8001412:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 8001414:	4b48      	ldr	r3, [pc, #288]	; (8001538 <dbus_remote_ISR+0x1d0>)
 8001416:	791b      	ldrb	r3, [r3, #4]
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b46      	ldr	r3, [pc, #280]	; (8001538 <dbus_remote_ISR+0x1d0>)
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	01db      	lsls	r3, r3, #7
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21b      	sxth	r3, r3
 800142a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142e:	b21a      	sxth	r2, r3
 8001430:	4b42      	ldr	r3, [pc, #264]	; (800153c <dbus_remote_ISR+0x1d4>)
 8001432:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 8001434:	4b41      	ldr	r3, [pc, #260]	; (800153c <dbus_remote_ISR+0x1d4>)
 8001436:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800143a:	b29b      	uxth	r3, r3
 800143c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001440:	b29b      	uxth	r3, r3
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b3d      	ldr	r3, [pc, #244]	; (800153c <dbus_remote_ISR+0x1d4>)
 8001446:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 8001448:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <dbus_remote_ISR+0x1d0>)
 800144a:	795b      	ldrb	r3, [r3, #5]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	b2db      	uxtb	r3, r3
 8001450:	109b      	asrs	r3, r3, #2
 8001452:	b25b      	sxtb	r3, r3
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	b25a      	sxtb	r2, r3
 800145a:	4b38      	ldr	r3, [pc, #224]	; (800153c <dbus_remote_ISR+0x1d4>)
 800145c:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <dbus_remote_ISR+0x1d0>)
 8001460:	795b      	ldrb	r3, [r3, #5]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	b2db      	uxtb	r3, r3
 8001466:	b25b      	sxtb	r3, r3
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	b25a      	sxtb	r2, r3
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <dbus_remote_ISR+0x1d4>)
 8001470:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <dbus_remote_ISR+0x1d0>)
 8001474:	799b      	ldrb	r3, [r3, #6]
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <dbus_remote_ISR+0x1d0>)
 800147a:	79db      	ldrb	r3, [r3, #7]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <dbus_remote_ISR+0x1d4>)
 8001486:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <dbus_remote_ISR+0x1d0>)
 800148a:	7a1b      	ldrb	r3, [r3, #8]
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <dbus_remote_ISR+0x1d0>)
 8001490:	7a5b      	ldrb	r3, [r3, #9]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <dbus_remote_ISR+0x1d4>)
 800149c:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80014a0:	7a9b      	ldrb	r3, [r3, #10]
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80014a6:	7adb      	ldrb	r3, [r3, #11]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <dbus_remote_ISR+0x1d4>)
 80014b2:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80014b6:	7b1b      	ldrb	r3, [r3, #12]
 80014b8:	b25a      	sxtb	r2, r3
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <dbus_remote_ISR+0x1d4>)
 80014bc:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80014c0:	7b5b      	ldrb	r3, [r3, #13]
 80014c2:	b25a      	sxtb	r2, r3
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <dbus_remote_ISR+0x1d4>)
 80014c6:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80014ca:	7b9b      	ldrb	r3, [r3, #14]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <dbus_remote_ISR+0x1d4>)
 80014d0:	835a      	strh	r2, [r3, #26]
	remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80014d4:	7c1b      	ldrb	r3, [r3, #16]
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <dbus_remote_ISR+0x1d0>)
 80014da:	7c5b      	ldrb	r3, [r3, #17]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <dbus_remote_ISR+0x1d4>)
 80014e6:	839a      	strh	r2, [r3, #28]
	remote_cmd.side_dial -= JOYSTICK_OFFSET;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <dbus_remote_ISR+0x1d4>)
 80014ea:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <dbus_remote_ISR+0x1d4>)
 80014fa:	839a      	strh	r2, [r3, #28]
	remote_cmd.last_time = HAL_GetTick();
 80014fc:	f009 fdfe 	bl	800b0fc <HAL_GetTick>
 8001500:	4603      	mov	r3, r0
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <dbus_remote_ISR+0x1d4>)
 8001504:	6213      	str	r3, [r2, #32]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <dbus_remote_ISR+0x1d8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f017 fef7 	bl	8019308 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <dbus_remote_ISR+0x1c8>
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <dbus_remote_ISR+0x1dc>)
 8001522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	f3bf 8f6f 	isb	sy
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200002fc 	.word	0x200002fc
 800153c:	20000310 	.word	0x20000310
 8001540:	2000044c 	.word	0x2000044c
 8001544:	e000ed04 	.word	0xe000ed04

08001548 <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	; 0x30
 800154c:	af00      	add	r7, sp, #0
	uint8_t *pData = remote_raw_data;
 800154e:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <dbus_remote_start+0x13c>)
 8001550:	60fb      	str	r3, [r7, #12]
	UART_HandleTypeDef *huart = &DBUS_UART;
 8001552:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <dbus_remote_start+0x140>)
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b20      	cmp	r3, #32
 8001560:	f040 808b 	bne.w	800167a <dbus_remote_start+0x132>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <dbus_remote_start+0x26>
			return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e086      	b.n	800167c <dbus_remote_start+0x134>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <dbus_remote_start+0x34>
 8001578:	2302      	movs	r3, #2
 800157a:	e07f      	b.n	800167c <dbus_remote_start+0x134>
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	2201      	movs	r2, #1
 8001580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	2201      	movs	r2, #1
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
		huart->pRxBuffPtr = pData;
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	2212      	movs	r2, #18
 8001594:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	2200      	movs	r2, #0
 800159a:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	2222      	movs	r2, #34	; 0x22
 80015a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a8:	4a38      	ldr	r2, [pc, #224]	; (800168c <dbus_remote_start+0x144>)
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b0:	2200      	movs	r2, #0
 80015b2:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 80015ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3304      	adds	r3, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2312      	movs	r3, #18
 80015cc:	f00b f838 	bl	800c640 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80015ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015fc:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
		in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800161c:	615a      	str	r2, [r3, #20]

		if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	2b01      	cmp	r3, #1
 8001624:	d125      	bne.n	8001672 <dbus_remote_start+0x12a>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	330c      	adds	r3, #12
 8001642:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	e853 3f00 	ldrex	r3, [r3]
 800164a:	613b      	str	r3, [r7, #16]
   return(result);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	330c      	adds	r3, #12
 800165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165c:	623a      	str	r2, [r7, #32]
 800165e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001660:	69f9      	ldr	r1, [r7, #28]
 8001662:	6a3a      	ldr	r2, [r7, #32]
 8001664:	e841 2300 	strex	r3, r2, [r1]
 8001668:	61bb      	str	r3, [r7, #24]
   return(result);
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e5      	bne.n	800163c <dbus_remote_start+0xf4>
 8001670:	e001      	b.n	8001676 <dbus_remote_start+0x12e>
		{
			/* In case of errors already pending when reception is started,
			   Interrupts may have already been raised and lead to reception abortion.
			   (Overrun error for instance).
			   In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
			return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e002      	b.n	800167c <dbus_remote_start+0x134>
		}
		return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <dbus_remote_start+0x134>
	} else {
		return HAL_BUSY;
 800167a:	2302      	movs	r3, #2
	}
}
 800167c:	4618      	mov	r0, r3
 800167e:	3730      	adds	r7, #48	; 0x30
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002fc 	.word	0x200002fc
 8001688:	20001644 	.word	0x20001644
 800168c:	08001369 	.word	0x08001369

08001690 <laser_on>:
 */
#include "board_lib.h"
#include "bsp_gpio.h"

void laser_on()
{ //set to reset for open day
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169a:	4802      	ldr	r0, [pc, #8]	; (80016a4 <laser_on+0x14>)
 800169c:	f00b fccc 	bl	800d038 <HAL_GPIO_WritePin>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020800 	.word	0x40020800

080016a8 <laser_off>:

void laser_off()
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b2:	4802      	ldr	r0, [pc, #8]	; (80016bc <laser_off+0x14>)
 80016b4:	f00b fcc0 	bl	800d038 <HAL_GPIO_WritePin>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40020800 	.word	0x40020800

080016c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80016c4:	f3bf 8f4f 	dsb	sy
}
 80016c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <__NVIC_SystemReset+0x24>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016d2:	4904      	ldr	r1, [pc, #16]	; (80016e4 <__NVIC_SystemReset+0x24>)
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_SystemReset+0x28>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016da:	f3bf 8f4f 	dsb	sy
}
 80016de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <__NVIC_SystemReset+0x20>
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	05fa0004 	.word	0x05fa0004

080016ec <inv_sqrt>:
 * @brief  fast inverse square-root, to calculate 1/Sqrt(x)
 * @param  x: the number need to be calculated
 * @retval 1/Sqrt(x)
 * @usage  call in imu_ahrs_update() function
 */
float inv_sqrt(float x) {
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80016f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001702:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]

	i = 0x5f3759df - (i >> 1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	105a      	asrs	r2, r3, #1
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <inv_sqrt+0x74>)
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001724:	ed97 7a04 	vldr	s14, [r7, #16]
 8001728:	edd7 7a05 	vldr	s15, [r7, #20]
 800172c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001730:	edd7 7a04 	vldr	s15, [r7, #16]
 8001734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001738:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800173c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001740:	edd7 7a04 	vldr	s15, [r7, #16]
 8001744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001748:	edc7 7a04 	vstr	s15, [r7, #16]

	return y;
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	ee07 3a90 	vmov	s15, r3
}
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	5f3759df 	.word	0x5f3759df

08001764 <gyro_write_byte>:

void gyro_write_byte(uint8_t const reg, uint8_t const data) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af02      	add	r7, sp, #8
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]
	BMI_GYRO_NSS_LOW;
 8001774:	2200      	movs	r2, #0
 8001776:	2101      	movs	r1, #1
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <gyro_write_byte+0x5c>)
 800177a:	f00b fc5d 	bl	800d038 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg;
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001782:	f107 020e 	add.w	r2, r7, #14
 8001786:	f107 010f 	add.w	r1, r7, #15
 800178a:	2364      	movs	r3, #100	; 0x64
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <gyro_write_byte+0x60>)
 8001792:	f00f fae1 	bl	8010d58 <HAL_SPI_TransmitReceive>
	tx = data;
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800179a:	f107 020e 	add.w	r2, r7, #14
 800179e:	f107 010f 	add.w	r1, r7, #15
 80017a2:	2364      	movs	r3, #100	; 0x64
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2301      	movs	r3, #1
 80017a8:	4806      	ldr	r0, [pc, #24]	; (80017c4 <gyro_write_byte+0x60>)
 80017aa:	f00f fad5 	bl	8010d58 <HAL_SPI_TransmitReceive>
	BMI_GYRO_NSS_HIGH;
 80017ae:	2201      	movs	r2, #1
 80017b0:	2101      	movs	r1, #1
 80017b2:	4803      	ldr	r0, [pc, #12]	; (80017c0 <gyro_write_byte+0x5c>)
 80017b4:	f00b fc40 	bl	800d038 <HAL_GPIO_WritePin>
	return;
 80017b8:	bf00      	nop
}
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40020400 	.word	0x40020400
 80017c4:	20001338 	.word	0x20001338

080017c8 <gyro_read_byte>:

uint8_t gyro_read_byte(uint8_t const reg) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	BMI_GYRO_NSS_LOW;
 80017d2:	2200      	movs	r2, #0
 80017d4:	2101      	movs	r1, #1
 80017d6:	4811      	ldr	r0, [pc, #68]	; (800181c <gyro_read_byte+0x54>)
 80017d8:	f00b fc2e 	bl	800d038 <HAL_GPIO_WritePin>
	uint8_t rx, tx;
	tx = reg | 0x80;
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80017e6:	f107 020f 	add.w	r2, r7, #15
 80017ea:	f107 010e 	add.w	r1, r7, #14
 80017ee:	2364      	movs	r3, #100	; 0x64
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	480a      	ldr	r0, [pc, #40]	; (8001820 <gyro_read_byte+0x58>)
 80017f6:	f00f faaf 	bl	8010d58 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 80017fa:	f107 010f 	add.w	r1, r7, #15
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	2201      	movs	r2, #1
 8001802:	4807      	ldr	r0, [pc, #28]	; (8001820 <gyro_read_byte+0x58>)
 8001804:	f00f f997 	bl	8010b36 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 8001808:	2201      	movs	r2, #1
 800180a:	2101      	movs	r1, #1
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <gyro_read_byte+0x54>)
 800180e:	f00b fc13 	bl	800d038 <HAL_GPIO_WritePin>
	return rx;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40020400 	.word	0x40020400
 8001820:	20001338 	.word	0x20001338

08001824 <gyro_read_bytes>:

uint8_t gyro_read_bytes(uint8_t const reg, uint8_t *pData, uint8_t len) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af02      	add	r7, sp, #8
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	4613      	mov	r3, r2
 8001832:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_GYRO_NSS_LOW;
 8001834:	2200      	movs	r2, #0
 8001836:	2101      	movs	r1, #1
 8001838:	4811      	ldr	r0, [pc, #68]	; (8001880 <gyro_read_bytes+0x5c>)
 800183a:	f00b fbfd 	bl	800d038 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001844:	b2db      	uxtb	r3, r3
 8001846:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001848:	f107 020e 	add.w	r2, r7, #14
 800184c:	f107 010f 	add.w	r1, r7, #15
 8001850:	2364      	movs	r3, #100	; 0x64
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2301      	movs	r3, #1
 8001856:	480b      	ldr	r0, [pc, #44]	; (8001884 <gyro_read_bytes+0x60>)
 8001858:	f00f fa7e 	bl	8010d58 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	b29a      	uxth	r2, r3
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <gyro_read_bytes+0x60>)
 8001866:	f00f f966 	bl	8010b36 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 800186a:	2201      	movs	r2, #1
 800186c:	2101      	movs	r1, #1
 800186e:	4804      	ldr	r0, [pc, #16]	; (8001880 <gyro_read_bytes+0x5c>)
 8001870:	f00b fbe2 	bl	800d038 <HAL_GPIO_WritePin>
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020400 	.word	0x40020400
 8001884:	20001338 	.word	0x20001338

08001888 <accel_write_byte>:
		return 1;
	}
	return 0;
}

void accel_write_byte(uint8_t const reg, uint8_t const data) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af02      	add	r7, sp, #8
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 8001898:	2200      	movs	r2, #0
 800189a:	2110      	movs	r1, #16
 800189c:	4811      	ldr	r0, [pc, #68]	; (80018e4 <accel_write_byte+0x5c>)
 800189e:	f00b fbcb 	bl	800d038 <HAL_GPIO_WritePin>
	tx = reg;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018a6:	f107 020e 	add.w	r2, r7, #14
 80018aa:	f107 010f 	add.w	r1, r7, #15
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <accel_write_byte+0x60>)
 80018b6:	f00f fa4f 	bl	8010d58 <HAL_SPI_TransmitReceive>
	tx = data;
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018be:	f107 020e 	add.w	r2, r7, #14
 80018c2:	f107 010f 	add.w	r1, r7, #15
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <accel_write_byte+0x60>)
 80018ce:	f00f fa43 	bl	8010d58 <HAL_SPI_TransmitReceive>
	BMI_ACCEL_NSS_HIGH;
 80018d2:	2201      	movs	r2, #1
 80018d4:	2110      	movs	r1, #16
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <accel_write_byte+0x5c>)
 80018d8:	f00b fbae 	bl	800d038 <HAL_GPIO_WritePin>
	return;
 80018dc:	bf00      	nop
}
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40020000 	.word	0x40020000
 80018e8:	20001338 	.word	0x20001338

080018ec <accel_read_byte>:

uint8_t accel_read_byte(uint8_t const reg) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 80018f6:	2200      	movs	r2, #0
 80018f8:	2110      	movs	r1, #16
 80018fa:	4816      	ldr	r0, [pc, #88]	; (8001954 <accel_read_byte+0x68>)
 80018fc:	f00b fb9c 	bl	800d038 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001906:	b2db      	uxtb	r3, r3
 8001908:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800190a:	f107 020e 	add.w	r2, r7, #14
 800190e:	f107 010f 	add.w	r1, r7, #15
 8001912:	2364      	movs	r3, #100	; 0x64
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	480f      	ldr	r0, [pc, #60]	; (8001958 <accel_read_byte+0x6c>)
 800191a:	f00f fa1d 	bl	8010d58 <HAL_SPI_TransmitReceive>
	tx = 0x55;
 800191e:	2355      	movs	r3, #85	; 0x55
 8001920:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001922:	f107 010e 	add.w	r1, r7, #14
 8001926:	2364      	movs	r3, #100	; 0x64
 8001928:	2201      	movs	r2, #1
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <accel_read_byte+0x6c>)
 800192c:	f00f f903 	bl	8010b36 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001930:	f107 010e 	add.w	r1, r7, #14
 8001934:	2364      	movs	r3, #100	; 0x64
 8001936:	2201      	movs	r2, #1
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <accel_read_byte+0x6c>)
 800193a:	f00f f8fc 	bl	8010b36 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 800193e:	2201      	movs	r2, #1
 8001940:	2110      	movs	r1, #16
 8001942:	4804      	ldr	r0, [pc, #16]	; (8001954 <accel_read_byte+0x68>)
 8001944:	f00b fb78 	bl	800d038 <HAL_GPIO_WritePin>
	return rx;
 8001948:	7bbb      	ldrb	r3, [r7, #14]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40020000 	.word	0x40020000
 8001958:	20001338 	.word	0x20001338

0800195c <accel_read_bytes>:

uint8_t accel_read_bytes(uint8_t reg, uint8_t pData[], uint8_t len) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	4613      	mov	r3, r2
 800196a:	71bb      	strb	r3, [r7, #6]
	BMI_ACCEL_NSS_LOW;
 800196c:	2200      	movs	r2, #0
 800196e:	2110      	movs	r1, #16
 8001970:	4814      	ldr	r0, [pc, #80]	; (80019c4 <accel_read_bytes+0x68>)
 8001972:	f00b fb61 	bl	800d038 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg | 0x80;
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800197c:	b2db      	uxtb	r3, r3
 800197e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001980:	f107 020e 	add.w	r2, r7, #14
 8001984:	f107 010f 	add.w	r1, r7, #15
 8001988:	2364      	movs	r3, #100	; 0x64
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2301      	movs	r3, #1
 800198e:	480e      	ldr	r0, [pc, #56]	; (80019c8 <accel_read_bytes+0x6c>)
 8001990:	f00f f9e2 	bl	8010d58 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001994:	f107 010e 	add.w	r1, r7, #14
 8001998:	2364      	movs	r3, #100	; 0x64
 800199a:	2201      	movs	r2, #1
 800199c:	480a      	ldr	r0, [pc, #40]	; (80019c8 <accel_read_bytes+0x6c>)
 800199e:	f00f f8ca 	bl	8010b36 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <accel_read_bytes+0x6c>)
 80019ac:	f00f f8c3 	bl	8010b36 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 80019b0:	2201      	movs	r2, #1
 80019b2:	2110      	movs	r1, #16
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <accel_read_bytes+0x68>)
 80019b6:	f00b fb3f 	bl	800d038 <HAL_GPIO_WritePin>
	return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40020000 	.word	0x40020000
 80019c8:	20001338 	.word	0x20001338

080019cc <gyro_init>:
		return 1;
	}
	return 0;
}

uint8_t gyro_init() {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80019d2:	21b6      	movs	r1, #182	; 0xb6
 80019d4:	2014      	movs	r0, #20
 80019d6:	f7ff fec5 	bl	8001764 <gyro_write_byte>
	HAL_Delay(10);
 80019da:	200a      	movs	r0, #10
 80019dc:	f009 fb9a 	bl	800b114 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE);
 80019e0:	2100      	movs	r1, #0
 80019e2:	2011      	movs	r0, #17
 80019e4:	f7ff febe 	bl	8001764 <gyro_write_byte>
	HAL_Delay(2);
 80019e8:	2002      	movs	r0, #2
 80019ea:	f009 fb93 	bl	800b114 <HAL_Delay>
	int16_t gyro_id = gyro_read_byte(BMI088_GYRO_CHIP_ID);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff feea 	bl	80017c8 <gyro_read_byte>
 80019f4:	4603      	mov	r3, r0
 80019f6:	80fb      	strh	r3, [r7, #6]
	if (gyro_id != BMI088_GYRO_CHIP_ID_VALUE) {
 80019f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d001      	beq.n	8001a04 <gyro_init+0x38>
		NVIC_SystemReset();
 8001a00:	f7ff fe5e 	bl	80016c0 <__NVIC_SystemReset>
		return 1;
	}
	HAL_Delay(2);
 8001a04:	2002      	movs	r0, #2
 8001a06:	f009 fb85 	bl	800b114 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_RANGE, BMI088_GYRO_500);
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	200f      	movs	r0, #15
 8001a0e:	f7ff fea9 	bl	8001764 <gyro_write_byte>
	HAL_Delay(2);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f009 fb7e 	bl	800b114 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_BANDWIDTH,
 8001a18:	2182      	movs	r1, #130	; 0x82
 8001a1a:	2010      	movs	r0, #16
 8001a1c:	f7ff fea2 	bl	8001764 <gyro_write_byte>
			(BMI088_GYRO_BANDWIDTH_MUST_Set | BMI088_GYRO_1000_116_HZ));
	HAL_Delay(2);
 8001a20:	2002      	movs	r0, #2
 8001a22:	f009 fb77 	bl	800b114 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_CONF,
 8001a26:	2101      	movs	r1, #1
 8001a28:	2016      	movs	r0, #22
 8001a2a:	f7ff fe9b 	bl	8001764 <gyro_write_byte>
			(BMI088_GYRO_INT3_GPIO_HIGH | BMI088_GYRO_INT3_GPIO_PP));
	HAL_Delay(2);
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f009 fb70 	bl	800b114 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3);
 8001a34:	2101      	movs	r1, #1
 8001a36:	2018      	movs	r0, #24
 8001a38:	f7ff fe94 	bl	8001764 <gyro_write_byte>
	HAL_Delay(2);
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f009 fb69 	bl	800b114 <HAL_Delay>

	return 0;
 8001a42:	2300      	movs	r3, #0
	//blah
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <accel_init>:

uint8_t accel_init() {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	uint8_t accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff ff4a 	bl	80018ec <accel_read_byte>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f009 fb59 	bl	800b114 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff ff42 	bl	80018ec <accel_read_byte>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f009 fb51 	bl	800b114 <HAL_Delay>
	accel_write_byte(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001a72:	21b6      	movs	r1, #182	; 0xb6
 8001a74:	207e      	movs	r0, #126	; 0x7e
 8001a76:	f7ff ff07 	bl	8001888 <accel_write_byte>
	HAL_Delay(10);
 8001a7a:	200a      	movs	r0, #10
 8001a7c:	f009 fb4a 	bl	800b114 <HAL_Delay>

	//Attempt to read...twice because once doesn't cause it to initiate
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff ff33 	bl	80018ec <accel_read_byte>
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f009 fb42 	bl	800b114 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff ff2b 	bl	80018ec <accel_read_byte>
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f009 fb3a 	bl	800b114 <HAL_Delay>
	if (accel_id != BMI088_ACC_CHIP_ID_VALUE) {
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b1e      	cmp	r3, #30
 8001aa4:	d001      	beq.n	8001aaa <accel_init+0x5e>
		//add in an error code for this someday
		return 1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e023      	b.n	8001af2 <accel_init+0xa6>
	}

	accel_write_byte(BMI088_ACC_PWR_CTRL, BMI088_ACC_ENABLE_ACC_ON);
 8001aaa:	2104      	movs	r1, #4
 8001aac:	207d      	movs	r0, #125	; 0x7d
 8001aae:	f7ff feeb 	bl	8001888 <accel_write_byte>
	HAL_Delay(2);
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f009 fb2e 	bl	800b114 <HAL_Delay>
	accel_write_byte(BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	207c      	movs	r0, #124	; 0x7c
 8001abc:	f7ff fee4 	bl	8001888 <accel_write_byte>
	HAL_Delay(2);
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f009 fb27 	bl	800b114 <HAL_Delay>

	//set accelerometer to normal from suspend
	accel_write_byte(BMI088_ACC_CONF,
 8001ac6:	21a8      	movs	r1, #168	; 0xa8
 8001ac8:	2040      	movs	r0, #64	; 0x40
 8001aca:	f7ff fedd 	bl	8001888 <accel_write_byte>
			(BMI088_ACC_NORMAL | BMI088_ACC_100_HZ | BMI088_ACC_CONF_MUST_Set));
	HAL_Delay(2);
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f009 fb20 	bl	800b114 <HAL_Delay>

	accel_write_byte(BMI088_ACC_RANGE, BMI088_ACC_RANGE_6G);
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2041      	movs	r0, #65	; 0x41
 8001ad8:	f7ff fed6 	bl	8001888 <accel_write_byte>
	HAL_Delay(2);
 8001adc:	2002      	movs	r0, #2
 8001ade:	f009 fb19 	bl	800b114 <HAL_Delay>

	accel_write_byte(BMI088_INT1_IO_CTRL,
 8001ae2:	2108      	movs	r1, #8
 8001ae4:	2053      	movs	r0, #83	; 0x53
 8001ae6:	f7ff fecf 	bl	8001888 <accel_write_byte>
			(BMI088_ACC_INT1_IO_ENABLE | BMI088_ACC_INT1_GPIO_PP | BMI088_ACC_INT1_GPIO_LOW));
	HAL_Delay(2);
 8001aea:	2002      	movs	r0, #2
 8001aec:	f009 fb12 	bl	800b114 <HAL_Delay>
	return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <mag_read_single_reg>:
	}
	float temperature = temp_int11 * 0.125 / temp_buff[1] + 23;
	return temperature;
}

uint8_t mag_read_single_reg(uint8_t reg) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af04      	add	r7, sp, #16
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	2305      	movs	r3, #5
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f107 030f 	add.w	r3, r7, #15
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	211c      	movs	r1, #28
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <mag_read_single_reg+0x34>)
 8001b22:	f00b fcf9 	bl	800d518 <HAL_I2C_Mem_Read>
	return data;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20001214 	.word	0x20001214

08001b34 <mag_write_single_reg>:

void mag_write_single_reg(uint8_t reg, uint8_t data) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af04      	add	r7, sp, #16
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	2305      	movs	r3, #5
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	1dbb      	adds	r3, r7, #6
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2301      	movs	r3, #1
 8001b56:	211c      	movs	r1, #28
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <mag_write_single_reg+0x34>)
 8001b5a:	f00b fbe3 	bl	800d324 <HAL_I2C_Mem_Write>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20001214 	.word	0x20001214

08001b6c <mag_read_multi_reg_dma>:

void mag_read_multi_reg(uint8_t reg, uint16_t len, uint8_t *data) {
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 10);
}

void mag_read_multi_reg_dma(uint8_t reg, uint16_t len, uint8_t *data) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	4603      	mov	r3, r0
 8001b74:	603a      	str	r2, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c3, IST8310_ADDRESS << 1, reg,
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	88bb      	ldrh	r3, [r7, #4]
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	211c      	movs	r1, #28
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <mag_read_multi_reg_dma+0x30>)
 8001b8e:	f00b fee9 	bl	800d964 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, data, len);
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20001214 	.word	0x20001214

08001ba0 <imu_init>:
	imu_data.gy_offset = gyro_y_total / 100;
	imu_data.gz_offset = gyro_z_total / 100;

}

void imu_init() {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	//trigger NSS low and high for both to initialise both gyro and accel into SPI mode
	BMI_ACCEL_NSS_LOW;
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	480e      	ldr	r0, [pc, #56]	; (8001be4 <imu_init+0x44>)
 8001baa:	f00b fa45 	bl	800d038 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_LOW;
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	480d      	ldr	r0, [pc, #52]	; (8001be8 <imu_init+0x48>)
 8001bb4:	f00b fa40 	bl	800d038 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001bb8:	2064      	movs	r0, #100	; 0x64
 8001bba:	f009 faab 	bl	800b114 <HAL_Delay>
	BMI_ACCEL_NSS_HIGH;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4808      	ldr	r0, [pc, #32]	; (8001be4 <imu_init+0x44>)
 8001bc4:	f00b fa38 	bl	800d038 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_HIGH;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <imu_init+0x48>)
 8001bce:	f00b fa33 	bl	800d038 <HAL_GPIO_WritePin>
	gyro_init();
 8001bd2:	f7ff fefb 	bl	80019cc <gyro_init>
	accel_init();
 8001bd6:	f7ff ff39 	bl	8001a4c <accel_init>
	ist8310_init();
 8001bda:	f000 f905 	bl	8001de8 <ist8310_init>
//	gyro_offset_cali();

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400

08001bec <imu_start_ints>:

void imu_start_ints() {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_CTRL, BMI088_DRDY_ON);
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	2015      	movs	r0, #21
 8001bf4:	f7ff fdb6 	bl	8001764 <gyro_write_byte>
	vTaskDelay(10);
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f016 fd29 	bl	8018650 <vTaskDelay>
	accel_write_byte(BMI088_INT_MAP_DATA, BMI088_ACC_INT1_DRDY_INTERRUPT);
 8001bfe:	2104      	movs	r1, #4
 8001c00:	2058      	movs	r0, #88	; 0x58
 8001c02:	f7ff fe41 	bl	8001888 <accel_write_byte>
	vTaskDelay(10);
 8001c06:	200a      	movs	r0, #10
 8001c08:	f016 fd22 	bl	8018650 <vTaskDelay>
	mag_write_single_reg(0x0B, 0x08); //enable drdy pin, pull to low on drdy
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	200b      	movs	r0, #11
 8001c10:	f7ff ff90 	bl	8001b34 <mag_write_single_reg>
	imu_init_status = 1;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <imu_start_ints+0x34>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000384 	.word	0x20000384

08001c24 <accel_get_data>:

void accel_get_data() {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	accel_read_bytes(BMI088_ACCEL_XOUT_L, accel_buff, 6);
 8001c28:	2206      	movs	r2, #6
 8001c2a:	4903      	ldr	r1, [pc, #12]	; (8001c38 <accel_get_data+0x14>)
 8001c2c:	2012      	movs	r0, #18
 8001c2e:	f7ff fe95 	bl	800195c <accel_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		accel_rx = 1;
//	}
	//imu_data.temp = get_bmi_temp();
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000334 	.word	0x20000334

08001c3c <accel_process_data>:

void accel_process_data() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
	int16_t accel_data;
	accel_data = (accel_buff[1] << 8 | accel_buff[0]);
 8001c42:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <accel_process_data+0xa8>)
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <accel_process_data+0xa8>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ax = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c60:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ce8 <accel_process_data+0xac>
 8001c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <accel_process_data+0xb0>)
 8001c6a:	edc3 7a04 	vstr	s15, [r3, #16]
	accel_data = (accel_buff[3] << 8 | accel_buff[2]);
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <accel_process_data+0xa8>)
 8001c70:	78db      	ldrb	r3, [r3, #3]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <accel_process_data+0xa8>)
 8001c78:	789b      	ldrb	r3, [r3, #2]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ay = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ce8 <accel_process_data+0xac>
 8001c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <accel_process_data+0xb0>)
 8001c96:	edc3 7a05 	vstr	s15, [r3, #20]
	accel_data = (accel_buff[5] << 8 | accel_buff[4]);
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <accel_process_data+0xa8>)
 8001c9c:	795b      	ldrb	r3, [r3, #5]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <accel_process_data+0xa8>)
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.az = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ce8 <accel_process_data+0xac>
 8001cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <accel_process_data+0xb0>)
 8001cc2:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_data.accel_data.last_accel_update = HAL_GetTick();
 8001cc6:	f009 fa19 	bl	800b0fc <HAL_GetTick>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <accel_process_data+0xb0>)
 8001cce:	61d3      	str	r3, [r2, #28]

	//send data into the imu processing task
	accel_data_ready(imu_data.accel_data);
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <accel_process_data+0xb0>)
 8001cd2:	3310      	adds	r3, #16
 8001cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd6:	f005 f943 	bl	8006f60 <accel_data_ready>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000334 	.word	0x20000334
 8001ce8:	3aeb3333 	.word	0x3aeb3333
 8001cec:	2000034c 	.word	0x2000034c

08001cf0 <gyro_get_data>:

void gyro_get_data() {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001cf4:	2206      	movs	r2, #6
 8001cf6:	4903      	ldr	r1, [pc, #12]	; (8001d04 <gyro_get_data+0x14>)
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f7ff fd93 	bl	8001824 <gyro_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		gyro_rx = 1;
//	}
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000033c 	.word	0x2000033c

08001d08 <gyro_process_data>:

void gyro_process_data() {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
	int16_t gyro_data;
	gyro_data = (gyro_buff[1] << 8 | gyro_buff[0]);
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <gyro_process_data+0xd4>)
 8001d10:	785b      	ldrb	r3, [r3, #1]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <gyro_process_data+0xd4>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gx_offset;
 8001d20:	88fa      	ldrh	r2, [r7, #6]
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <gyro_process_data+0xd8>)
 8001d24:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	80fb      	strh	r3, [r7, #6]
	//convert raw data into radians/s
	imu_data.gyro_data.gx = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001de4 <gyro_process_data+0xdc>
 8001d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <gyro_process_data+0xd8>)
 8001d46:	edc3 7a00 	vstr	s15, [r3]
	gyro_data = (gyro_buff[3] << 8 | gyro_buff[2]);
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <gyro_process_data+0xd4>)
 8001d4c:	78db      	ldrb	r3, [r3, #3]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <gyro_process_data+0xd4>)
 8001d54:	789b      	ldrb	r3, [r3, #2]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gy_offset;
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <gyro_process_data+0xd8>)
 8001d60:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gy = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d78:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001de4 <gyro_process_data+0xdc>
 8001d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <gyro_process_data+0xd8>)
 8001d82:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_data = (gyro_buff[5] << 8 | gyro_buff[4]);
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <gyro_process_data+0xd4>)
 8001d88:	795b      	ldrb	r3, [r3, #5]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <gyro_process_data+0xd4>)
 8001d90:	791b      	ldrb	r3, [r3, #4]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gz_offset;
 8001d98:	88fa      	ldrh	r2, [r7, #6]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <gyro_process_data+0xd8>)
 8001d9c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gz = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001de4 <gyro_process_data+0xdc>
 8001db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <gyro_process_data+0xd8>)
 8001dbe:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.gyro_data.last_gyro_update = HAL_GetTick();
 8001dc2:	f009 f99b 	bl	800b0fc <HAL_GetTick>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <gyro_process_data+0xd8>)
 8001dca:	60d3      	str	r3, [r2, #12]
	//send data into the imu processing task
	gyro_data_ready(imu_data.gyro_data);
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <gyro_process_data+0xd8>)
 8001dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd0:	f005 f89a 	bl	8006f08 <gyro_data_ready>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000033c 	.word	0x2000033c
 8001de0:	2000034c 	.word	0x2000034c
 8001de4:	398ba058 	.word	0x398ba058

08001de8 <ist8310_init>:

uint8_t ist8310_init() {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2140      	movs	r1, #64	; 0x40
 8001df2:	481d      	ldr	r0, [pc, #116]	; (8001e68 <ist8310_init+0x80>)
 8001df4:	f00b f920 	bl	800d038 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f009 f98b 	bl	800b114 <HAL_Delay>
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_SET);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	4819      	ldr	r0, [pc, #100]	; (8001e68 <ist8310_init+0x80>)
 8001e04:	f00b f918 	bl	800d038 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f009 f983 	bl	800b114 <HAL_Delay>

	uint8_t ist_id = mag_read_single_reg(IST8310_WHO_AM_I);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff fe74 	bl	8001afc <mag_read_single_reg>
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
	if (ist_id != IST8310_DEVICE_ID_A) {
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d00a      	beq.n	8001e34 <ist8310_init+0x4c>
		//reset mag values
		imu_data.mag_data.mx = 0;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <ist8310_init+0x84>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	841a      	strh	r2, [r3, #32]
		imu_data.mag_data.my = 0;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <ist8310_init+0x84>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	845a      	strh	r2, [r3, #34]	; 0x22
		imu_data.mag_data.mz = 0;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <ist8310_init+0x84>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	849a      	strh	r2, [r3, #36]	; 0x24
		return 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e015      	b.n	8001e60 <ist8310_init+0x78>
	}
	HAL_Delay(2);
 8001e34:	2002      	movs	r0, #2
 8001e36:	f009 f96d 	bl	800b114 <HAL_Delay>
	mag_write_single_reg(0x41, 0x09); //average over 2 data
 8001e3a:	2109      	movs	r1, #9
 8001e3c:	2041      	movs	r0, #65	; 0x41
 8001e3e:	f7ff fe79 	bl	8001b34 <mag_write_single_reg>
	HAL_Delay(2);
 8001e42:	2002      	movs	r0, #2
 8001e44:	f009 f966 	bl	800b114 <HAL_Delay>
	mag_write_single_reg(0x42, 0xC0); //set to C0
 8001e48:	21c0      	movs	r1, #192	; 0xc0
 8001e4a:	2042      	movs	r0, #66	; 0x42
 8001e4c:	f7ff fe72 	bl	8001b34 <mag_write_single_reg>
	HAL_Delay(2);
 8001e50:	2002      	movs	r0, #2
 8001e52:	f009 f95f 	bl	800b114 <HAL_Delay>
	mag_write_single_reg(0x0A, 0x0B); //100Hz
 8001e56:	210b      	movs	r1, #11
 8001e58:	200a      	movs	r0, #10
 8001e5a:	f7ff fe6b 	bl	8001b34 <mag_write_single_reg>
	//mag_en_flag = 1;

	return 0;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021800 	.word	0x40021800
 8001e6c:	2000034c 	.word	0x2000034c

08001e70 <ist8310_get_data>:

void ist8310_get_data() {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	//fun
	mag_read_multi_reg_dma(IST8310_R_XL, 5, ist_read_buffer);
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <ist8310_get_data+0x1c>)
 8001e76:	2105      	movs	r1, #5
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f7ff fe77 	bl	8001b6c <mag_read_multi_reg_dma>
	imu_data.mag_data.last_mag_update = HAL_GetTick();
 8001e7e:	f009 f93d 	bl	800b0fc <HAL_GetTick>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a02      	ldr	r2, [pc, #8]	; (8001e90 <ist8310_get_data+0x20>)
 8001e86:	6293      	str	r3, [r2, #40]	; 0x28

}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000344 	.word	0x20000344
 8001e90:	2000034c 	.word	0x2000034c

08001e94 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1) {
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_GPIO_EXTI_Callback+0x58>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d11e      	bne.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x50>
		if (hspi1.State == HAL_SPI_STATE_READY) {
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10d      	bne.n	8001ece <HAL_GPIO_EXTI_Callback+0x3a>
			if (GPIO_Pin == GYRO_INT_Pin) {
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d103      	bne.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x2c>
				gyro_get_data();
 8001eb8:	f7ff ff1a 	bl	8001cf0 <gyro_get_data>
				gyro_process_data();
 8001ebc:	f7ff ff24 	bl	8001d08 <gyro_process_data>
				//ist8310_get_data();
			}
			if (GPIO_Pin == ACC_INT_Pin) {
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d103      	bne.n	8001ece <HAL_GPIO_EXTI_Callback+0x3a>
				accel_get_data();
 8001ec6:	f7ff fead 	bl	8001c24 <accel_get_data>
				accel_process_data();
 8001eca:	f7ff feb7 	bl	8001c3c <accel_process_data>
			}
		}
		if (GPIO_Pin == IST_INT_Pin) {
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d107      	bne.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x50>
			if (hi2c3.State == HAL_I2C_STATE_READY) {
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d101      	bne.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x50>
				ist8310_get_data();
 8001ee0:	f7ff ffc6 	bl	8001e70 <ist8310_get_data>
			}
		}
	}
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000384 	.word	0x20000384
 8001ef0:	20001338 	.word	0x20001338
 8001ef4:	20001214 	.word	0x20001214

08001ef8 <HAL_I2C_MemRxCpltCallback>:
	spi_rdy = 1;
	spi_timeout = HAL_GetTick();
}
*/

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	int16_t mag_buffer[3];
	mag_buffer[0] = ist_read_buffer[1] << 8 | ist_read_buffer[0];
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	813b      	strh	r3, [r7, #8]
	mag_buffer[1] = ist_read_buffer[3] << 8 | ist_read_buffer[2];
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f16:	78db      	ldrb	r3, [r3, #3]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f1e:	789b      	ldrb	r3, [r3, #2]
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	817b      	strh	r3, [r7, #10]
	mag_buffer[2] = ist_read_buffer[5] << 8 | ist_read_buffer[4];
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f2a:	795b      	ldrb	r3, [r3, #5]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f32:	791b      	ldrb	r3, [r3, #4]
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	4313      	orrs	r3, r2
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	81bb      	strh	r3, [r7, #12]

	imu_data.mag_data.mx = mag_buffer[0];
 8001f3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f42:	841a      	strh	r2, [r3, #32]
	imu_data.mag_data.my = mag_buffer[1];
 8001f44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f4a:	845a      	strh	r2, [r3, #34]	; 0x22
	imu_data.mag_data.mz = mag_buffer[2];
 8001f4c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f52:	849a      	strh	r2, [r3, #36]	; 0x24
	mag_data_ready(imu_data.mag_data);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f56:	3320      	adds	r3, #32
 8001f58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f5c:	f005 f82c 	bl	8006fb8 <mag_data_ready>
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000344 	.word	0x20000344
 8001f6c:	2000034c 	.word	0x2000034c

08001f70 <led_green_off>:


/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	htim5.Instance->CCR2 = 0;
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <led_green_off+0x18>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20001570 	.word	0x20001570

08001f8c <led_on>:
	htim5.Instance->CCR3 = 0;
	htim5.Instance->CCR2 = 0;
	htim5.Instance->CCR1 = 0;
}

void led_on(void){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001f90:	2100      	movs	r1, #0
 8001f92:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <led_on+0x38>)
 8001f94:	f00f fb82 	bl	801169c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001f98:	2104      	movs	r1, #4
 8001f9a:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <led_on+0x38>)
 8001f9c:	f00f fb7e 	bl	801169c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <led_on+0x38>)
 8001fa4:	f00f fb7a 	bl	801169c <HAL_TIM_PWM_Start>
	htim5.Instance->CCR3 = 255;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <led_on+0x38>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	22ff      	movs	r2, #255	; 0xff
 8001fae:	63da      	str	r2, [r3, #60]	; 0x3c
	htim5.Instance->CCR2 = 255;
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <led_on+0x38>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	22ff      	movs	r2, #255	; 0xff
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
	htim5.Instance->CCR1 = 255;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <led_on+0x38>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	22ff      	movs	r2, #255	; 0xff
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20001570 	.word	0x20001570

08001fc8 <led_toggle>:
void led_toggle(void){
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	80fb      	strh	r3, [r7, #6]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));
	if (led_state == on_led)
 8001fe8:	797b      	ldrb	r3, [r7, #5]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 808f 	bne.w	800210e <status_led+0x136>
	{
	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
		switch(led_no)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	f200 808c 	bhi.w	8002112 <status_led+0x13a>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <status_led+0x28>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	08002025 	.word	0x08002025
 8002004:	0800203f 	.word	0x0800203f
 8002008:	08002059 	.word	0x08002059
 800200c:	08002073 	.word	0x08002073
 8002010:	0800208d 	.word	0x0800208d
 8002014:	080020a7 	.word	0x080020a7
 8002018:	080020c1 	.word	0x080020c1
 800201c:	080020db 	.word	0x080020db
 8002020:	080020f5 	.word	0x080020f5
		{
		case 1:
			htim5.Instance->CCR3 = 255;//(0x94);
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <status_led+0x148>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	22ff      	movs	r2, #255	; 0xff
 800202a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0xe1);
 800202c:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <status_led+0x148>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;///(0xa0);
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <status_led+0x148>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2200      	movs	r2, #0
 800203a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800203c:	e06a      	b.n	8002114 <status_led+0x13c>
		case 2:
			htim5.Instance->CCR3 = 0;//(0x25);
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <status_led+0x148>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 255;//(0x25);
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <status_led+0x148>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	22ff      	movs	r2, #255	; 0xff
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;//(0x64);
 800204e:	4b34      	ldr	r3, [pc, #208]	; (8002120 <status_led+0x148>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002056:	e05d      	b.n	8002114 <status_led+0x13c>
		case 3:
			htim5.Instance->CCR3 = 0;//(0x52);
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <status_led+0x148>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x0c);
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <status_led+0x148>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xcf);
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <status_led+0x148>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	22ff      	movs	r2, #255	; 0xff
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002070:	e050      	b.n	8002114 <status_led+0x13c>
		case 4:
			htim5.Instance->CCR3 = 255;//(0x6e);
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <status_led+0x148>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	22ff      	movs	r2, #255	; 0xff
 8002078:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x7a);
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <status_led+0x148>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2200      	movs	r2, #0
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xf4);
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <status_led+0x148>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	22ff      	movs	r2, #255	; 0xff
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800208a:	e043      	b.n	8002114 <status_led+0x13c>
		case 5:
			htim5.Instance->CCR3 = 0;
 800208c:	4b24      	ldr	r3, [pc, #144]	; (8002120 <status_led+0x148>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2200      	movs	r2, #0
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <status_led+0x148>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <status_led+0x148>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80020a4:	e036      	b.n	8002114 <status_led+0x13c>
		case 6:
			htim5.Instance->CCR3 = 0;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <status_led+0x148>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <status_led+0x148>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <status_led+0x148>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80020be:	e029      	b.n	8002114 <status_led+0x13c>
		case 7:
			htim5.Instance->CCR3 = 0;
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <status_led+0x148>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <status_led+0x148>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <status_led+0x148>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80020d8:	e01c      	b.n	8002114 <status_led+0x13c>
		case 8:
			htim5.Instance->CCR3 = 0;
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <status_led+0x148>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <status_led+0x148>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <status_led+0x148>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80020f2:	e00f      	b.n	8002114 <status_led+0x13c>
		case 9:
			htim5.Instance->CCR3 = 0;
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <status_led+0x148>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <status_led+0x148>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <status_led+0x148>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800210c:	e002      	b.n	8002114 <status_led+0x13c>

		default:
			break;
		}
	}
 800210e:	bf00      	nop
 8002110:	e000      	b.n	8002114 <status_led+0x13c>
			break;
 8002112:	bf00      	nop

}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	20001570 	.word	0x20001570

08002124 <micros_tick>:
#include "robot_config.h"

uint32_t gv_curr_micros = 0;
uint32_t gv_overflow_times = 0;

void micros_tick(){
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
	if (gv_curr_micros == 4294967295) //2^32 - 1
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <micros_tick+0x2c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d104      	bne.n	800213c <micros_tick+0x18>
		gv_overflow_times ++;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <micros_tick+0x30>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <micros_tick+0x30>)
 800213a:	6013      	str	r3, [r2, #0]
	gv_curr_micros ++;
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <micros_tick+0x2c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	4a03      	ldr	r2, [pc, #12]	; (8002150 <micros_tick+0x2c>)
 8002144:	6013      	str	r3, [r2, #0]
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	20000388 	.word	0x20000388
 8002154:	2000038c 	.word	0x2000038c

08002158 <start_micros_timer>:

void start_micros_timer()
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	configASSERT(TIMER_FREQ <= 1000000);
	__HAL_TIM_SET_AUTORELOAD(&htim3, (999999/TIMER_FREQ) + 1);
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <start_micros_timer+0x2c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2264      	movs	r2, #100	; 0x64
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <start_micros_timer+0x2c>)
 8002166:	2264      	movs	r2, #100	; 0x64
 8002168:	60da      	str	r2, [r3, #12]
	htim3.Instance->DIER |= TIM_DIER_UIE; //enable update interrupt
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <start_micros_timer+0x2c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <start_micros_timer+0x2c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim3);
 800217a:	4802      	ldr	r0, [pc, #8]	; (8002184 <start_micros_timer+0x2c>)
 800217c:	f00f f90e 	bl	801139c <HAL_TIM_Base_Start>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200014e0 	.word	0x200014e0

08002188 <get_microseconds>:



uint32_t get_microseconds()
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
	return gv_curr_micros;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <get_microseconds+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000388 	.word	0x20000388

080021a0 <queue_init>:
#include "bsp_queue.h"
#include <string.h>



QueueOpStat_t queue_init(queue_t* queue){
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	723b      	strb	r3, [r7, #8]
	if (queue == NULL){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d104      	bne.n	80021bc <queue_init+0x1c>
		op_stat.op_status = Q_INVALID;
 80021b2:	2304      	movs	r3, #4
 80021b4:	723b      	strb	r3, [r7, #8]
		return op_stat;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e015      	b.n	80021e8 <queue_init+0x48>
	}
	queue->curr_byte_pos = 0;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	queue->last_byte_pos=0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	queue->last_proc = 0;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	queue->last_time=0;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	queue->stored_bytes=0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	return op_stat;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60fb      	str	r3, [r7, #12]
}
 80021e8:	2300      	movs	r3, #0
 80021ea:	89ba      	ldrh	r2, [r7, #12]
 80021ec:	f362 030f 	bfi	r3, r2, #0, #16
 80021f0:	89fa      	ldrh	r2, [r7, #14]
 80021f2:	f362 431f 	bfi	r3, r2, #16, #16
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <queue_append_byte>:

/*
 * Adds a byte to the end of the byte_queue
 * Add one byte at a time!
 */
QueueOpStat_t queue_append_byte(queue_t* queue, uint8_t data){
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	723b      	strb	r3, [r7, #8]
	queue->last_time = HAL_GetTick();
 8002212:	f008 ff73 	bl	800b0fc <HAL_GetTick>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	queue->queue[queue->last_byte_pos] = data;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002226:	4619      	mov	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	545a      	strb	r2, [r3, r1]
	op_stat.bytes_appended = 1;
 800222e:	2301      	movs	r3, #1
 8002230:	817b      	strh	r3, [r7, #10]
	queue->last_byte_pos = (queue->last_byte_pos >= TQUEUE_SIZE-1) ? 0 : queue->last_byte_pos + 1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002238:	2bfe      	cmp	r3, #254	; 0xfe
 800223a:	d805      	bhi.n	8002248 <queue_append_byte+0x46>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002242:	3301      	adds	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	e000      	b.n	800224a <queue_append_byte+0x48>
 8002248:	2200      	movs	r2, #0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	if (queue->stored_bytes > TQUEUE_SIZE) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225a:	d918      	bls.n	800228e <queue_append_byte+0x8c>
		queue->stored_bytes = TQUEUE_SIZE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002262:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		queue->curr_byte_pos = (queue->curr_byte_pos == TQUEUE_SIZE-1) ? 0 : queue->curr_byte_pos+1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800226c:	2bff      	cmp	r3, #255	; 0xff
 800226e:	d005      	beq.n	800227c <queue_append_byte+0x7a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002276:	3301      	adds	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	e000      	b.n	800227e <queue_append_byte+0x7c>
 800227c:	2200      	movs	r2, #0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		op_stat.op_status = Q_FULL;
 8002284:	2301      	movs	r3, #1
 8002286:	723b      	strb	r3, [r7, #8]
		return op_stat;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e009      	b.n	80022a2 <queue_append_byte+0xa0>
	}
	queue->stored_bytes+=1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002294:	3301      	adds	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	return op_stat;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	60fb      	str	r3, [r7, #12]
}
 80022a2:	2300      	movs	r3, #0
 80022a4:	89ba      	ldrh	r2, [r7, #12]
 80022a6:	f362 030f 	bfi	r3, r2, #0, #16
 80022aa:	89fa      	ldrh	r2, [r7, #14]
 80022ac:	f362 431f 	bfi	r3, r2, #16, #16
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <queue_pop_element>:
	}
	op_stat.bytes_appended = len;
	return op_stat;
}

uint8_t queue_pop_element(queue_t* queue){
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

	if (queue->stored_bytes == 0){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <queue_pop_element+0x16>
		return 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e024      	b.n	8002318 <queue_pop_element+0x60>
	} else {
		uint8_t temp =queue->queue[queue->curr_byte_pos];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80022d4:	461a      	mov	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	5c9b      	ldrb	r3, [r3, r2]
 80022da:	73fb      	strb	r3, [r7, #15]
		queue->curr_byte_pos +=1;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80022e2:	3301      	adds	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80022f2:	2bff      	cmp	r3, #255	; 0xff
 80022f4:	d803      	bhi.n	80022fe <queue_pop_element+0x46>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80022fc:	e000      	b.n	8002300 <queue_pop_element+0x48>
 80022fe:	2200      	movs	r2, #0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
				0:queue->curr_byte_pos;
		queue->stored_bytes -= 1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		return temp;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <queue_pop_elements>:


QueueOpStat_t queue_pop_elements(queue_t* queue, uint8_t* data, uint16_t len){
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
		QueueOpStat_t op_stat;

		op_stat = queue_peek_number(queue, data, len);
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	461a      	mov	r2, r3
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f82d 	bl	8002398 <queue_peek_number>
 800233e:	4603      	mov	r3, r0
 8002340:	61bb      	str	r3, [r7, #24]
		QueueOpStat_t remove_stat;
		remove_stat = queue_remove_number(queue, op_stat.bytes_appended);
 8002342:	8b7b      	ldrh	r3, [r7, #26]
 8002344:	4619      	mov	r1, r3
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f87c 	bl	8002444 <queue_remove_number>
 800234c:	4603      	mov	r3, r0
 800234e:	617b      	str	r3, [r7, #20]
	return op_stat;
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	2300      	movs	r3, #0
 8002356:	8bba      	ldrh	r2, [r7, #28]
 8002358:	f362 030f 	bfi	r3, r2, #0, #16
 800235c:	8bfa      	ldrh	r2, [r7, #30]
 800235e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <queue_peek>:

uint8_t queue_peek(queue_t* queue){
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
	if (queue->stored_bytes>0){
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <queue_peek+0x20>
		return queue->queue[queue->curr_byte_pos];
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	5c9b      	ldrb	r3, [r3, r2]
 8002388:	e000      	b.n	800238c <queue_peek+0x22>
	}
	else{
		return 0;
 800238a:	2300      	movs	r3, #0
	}
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <queue_peek_number>:

QueueOpStat_t queue_peek_number(queue_t* queue, uint8_t* buffer,uint16_t size){
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
	QueueOpStat_t op_stat;
	queue->last_time = HAL_GetTick();
 80023a6:	f008 fea9 	bl	800b0fc <HAL_GetTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	op_stat.op_status = Q_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	753b      	strb	r3, [r7, #20]
	uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023be:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80023c2:	83fb      	strh	r3, [r7, #30]
	if (queue->stored_bytes < size){
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d905      	bls.n	80023dc <queue_peek_number+0x44>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80023d0:	2303      	movs	r3, #3
 80023d2:	753b      	strb	r3, [r7, #20]
		size = queue->stored_bytes;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023da:	80fb      	strh	r3, [r7, #6]
	}

	if (bytes_to_end >= size){
 80023dc:	8bfa      	ldrh	r2, [r7, #30]
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d30b      	bcc.n	80023fc <queue_peek_number+0x64>
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], size);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	4619      	mov	r1, r3
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f018 fe8e 	bl	801b116 <memcpy>
 80023fa:	e014      	b.n	8002426 <queue_peek_number+0x8e>
	} else {
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	8bfa      	ldrh	r2, [r7, #30]
 800240a:	4619      	mov	r1, r3
 800240c:	68b8      	ldr	r0, [r7, #8]
 800240e:	f018 fe82 	bl	801b116 <memcpy>
		memcpy(buffer+bytes_to_end, queue->queue,size-bytes_to_end);
 8002412:	8bfb      	ldrh	r3, [r7, #30]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	18d0      	adds	r0, r2, r3
 8002418:	68f9      	ldr	r1, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	8bfb      	ldrh	r3, [r7, #30]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	461a      	mov	r2, r3
 8002422:	f018 fe78 	bl	801b116 <memcpy>
	}
	op_stat.bytes_appended = size;
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	82fb      	strh	r3, [r7, #22]
	return op_stat;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	2300      	movs	r3, #0
 8002430:	8b3a      	ldrh	r2, [r7, #24]
 8002432:	f362 030f 	bfi	r3, r2, #0, #16
 8002436:	8b7a      	ldrh	r2, [r7, #26]
 8002438:	f362 431f 	bfi	r3, r2, #16, #16
}
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <queue_remove_number>:

QueueOpStat_t queue_remove_number(queue_t* queue, uint16_t size){
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
//	queue_sanity_check(queue);
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	723b      	strb	r3, [r7, #8]
	if (queue->stored_bytes < size){
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	429a      	cmp	r2, r3
 800245e:	d905      	bls.n	800246c <queue_remove_number+0x28>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 8002460:	2303      	movs	r3, #3
 8002462:	723b      	strb	r3, [r7, #8]
		size = queue->stored_bytes;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800246a:	807b      	strh	r3, [r7, #2]
	}

	queue->curr_byte_pos += size;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	4413      	add	r3, r2
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	queue->stored_bytes -= size;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	b29a      	uxth	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002496:	2bff      	cmp	r3, #255	; 0xff
 8002498:	d906      	bls.n	80024a8 <queue_remove_number+0x64>
			queue->curr_byte_pos-TQUEUE_SIZE : queue->curr_byte_pos;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
	queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 80024a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	e002      	b.n	80024ae <queue_remove_number+0x6a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
	op_stat.bytes_appended = size;
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	817b      	strh	r3, [r7, #10]
	return op_stat;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	2300      	movs	r3, #0
 80024be:	89ba      	ldrh	r2, [r7, #12]
 80024c0:	f362 030f 	bfi	r3, r2, #0, #16
 80024c4:	89fa      	ldrh	r2, [r7, #14]
 80024c6:	f362 431f 	bfi	r3, r2, #16, #16
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <queue_get_size>:

uint16_t queue_get_size(queue_t* queue){
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	return queue->stored_bytes;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <ref_process_data>:
	HEADER,
	DATA
};


ref_processing_status_t ref_process_data(queue_t *uart_queue, ref_msg_t *proc_msg){
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b097      	sub	sp, #92	; 0x5c
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6578      	str	r0, [r7, #84]	; 0x54
 80024f8:	6539      	str	r1, [r7, #80]	; 0x50
	static uint8_t state = 0;
	static ref_frame_header_t header;
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 80024fa:	e064      	b.n	80025c6 <ref_process_data+0xd6>
		switch(state){
 80024fc:	4b37      	ldr	r3, [pc, #220]	; (80025dc <ref_process_data+0xec>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <ref_process_data+0x1a>
 8002504:	2b01      	cmp	r3, #1
 8002506:	d037      	beq.n	8002578 <ref_process_data+0x88>
 8002508:	e05d      	b.n	80025c6 <ref_process_data+0xd6>
			case HEADER:
				if (queue_get_size(uart_queue)< REF_HEADER_SIZE+2 ){
 800250a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800250c:	f7ff ffe3 	bl	80024d6 <queue_get_size>
 8002510:	4603      	mov	r3, r0
 8002512:	2b06      	cmp	r3, #6
 8002514:	d801      	bhi.n	800251a <ref_process_data+0x2a>
					return INSUFFICIENT_DATA;
 8002516:	2302      	movs	r3, #2
 8002518:	e05c      	b.n	80025d4 <ref_process_data+0xe4>
				}
				if (queue_peek(uart_queue) != 0xA5){
 800251a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800251c:	f7ff ff25 	bl	800236a <queue_peek>
 8002520:	4603      	mov	r3, r0
 8002522:	2ba5      	cmp	r3, #165	; 0xa5
 8002524:	d003      	beq.n	800252e <ref_process_data+0x3e>
					queue_pop_element(uart_queue);
 8002526:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002528:	f7ff fec6 	bl	80022b8 <queue_pop_element>
 800252c:	e04b      	b.n	80025c6 <ref_process_data+0xd6>
				}else {
					if (queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 800252e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002530:	f7ff ffd1 	bl	80024d6 <queue_get_size>
 8002534:	4603      	mov	r3, r0
 8002536:	2b07      	cmp	r3, #7
 8002538:	d91c      	bls.n	8002574 <ref_process_data+0x84>
						header = ref_get_header(uart_queue);
 800253a:	4c29      	ldr	r4, [pc, #164]	; (80025e0 <ref_process_data+0xf0>)
 800253c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f84e 	bl	80025e4 <ref_get_header>
 8002548:	4622      	mov	r2, r4
 800254a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	6010      	str	r0, [r2, #0]
 8002552:	8899      	ldrh	r1, [r3, #4]
 8002554:	799b      	ldrb	r3, [r3, #6]
 8002556:	8091      	strh	r1, [r2, #4]
 8002558:	7193      	strb	r3, [r2, #6]
						if (header.cmd_id == 0xFFFF){
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <ref_process_data+0xf0>)
 800255c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002566:	4293      	cmp	r3, r2
 8002568:	d100      	bne.n	800256c <ref_process_data+0x7c>
							//invalid data, continue checking
							break;
 800256a:	e02c      	b.n	80025c6 <ref_process_data+0xd6>
						}
						//header is valid, remove header bytes and start finding data
						state = DATA;
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <ref_process_data+0xec>)
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e028      	b.n	80025c6 <ref_process_data+0xd6>
					} else {
						return INSUFFICIENT_DATA;
 8002574:	2302      	movs	r3, #2
 8002576:	e02d      	b.n	80025d4 <ref_process_data+0xe4>
					}
				}
				break;
			case DATA:
				//wait until enough data to fill data
				if (queue_get_size(uart_queue) > header.data_length+4+REF_HEADER_SIZE){
 8002578:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800257a:	f7ff ffac 	bl	80024d6 <queue_get_size>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <ref_process_data+0xf0>)
 8002584:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002588:	b29b      	uxth	r3, r3
 800258a:	3309      	adds	r3, #9
 800258c:	429a      	cmp	r2, r3
 800258e:	dd18      	ble.n	80025c2 <ref_process_data+0xd2>
					state = HEADER;
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <ref_process_data+0xec>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
					*proc_msg = ref_get_msg(header,uart_queue);
 8002596:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002598:	4638      	mov	r0, r7
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <ref_process_data+0xf0>)
 800259c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259e:	ca06      	ldmia	r2, {r1, r2}
 80025a0:	f000 f898 	bl	80026d4 <ref_get_msg>
 80025a4:	4620      	mov	r0, r4
 80025a6:	463b      	mov	r3, r7
 80025a8:	2242      	movs	r2, #66	; 0x42
 80025aa:	4619      	mov	r1, r3
 80025ac:	f018 fdb3 	bl	801b116 <memcpy>
					if (proc_msg->cmd_id!= 0xFFFF){
 80025b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d003      	beq.n	80025c6 <ref_process_data+0xd6>
						return PROCESS_SUCCESS;
 80025be:	2300      	movs	r3, #0
 80025c0:	e008      	b.n	80025d4 <ref_process_data+0xe4>
					} else {
						break;
					}
				} else{
					return INSUFFICIENT_DATA;
 80025c2:	2302      	movs	r3, #2
 80025c4:	e006      	b.n	80025d4 <ref_process_data+0xe4>
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 80025c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025c8:	f7ff ff85 	bl	80024d6 <queue_get_size>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d894      	bhi.n	80024fc <ref_process_data+0xc>
				}
				break;
			}
	}
	return INSUFFICIENT_DATA;
 80025d2:	2302      	movs	r3, #2
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	375c      	adds	r7, #92	; 0x5c
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	20000390 	.word	0x20000390
 80025e0:	20000394 	.word	0x20000394

080025e4 <ref_get_header>:

ref_frame_header_t ref_get_header(queue_t *data_buffer){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	ref_frame_header_t ret_header;
	//+2 for cmd ID
	uint8_t temp_data[REF_HEADER_SIZE+2];
	queue_peek_number(data_buffer, temp_data, 7);
 80025ee:	f107 030c 	add.w	r3, r7, #12
 80025f2:	2207      	movs	r2, #7
 80025f4:	4619      	mov	r1, r3
 80025f6:	6838      	ldr	r0, [r7, #0]
 80025f8:	f7ff fece 	bl	8002398 <queue_peek_number>
	ret_header.start_frame = temp_data[0];
 80025fc:	7b3b      	ldrb	r3, [r7, #12]
 80025fe:	753b      	strb	r3, [r7, #20]
	if (ret_header.start_frame!= 0xA5){
 8002600:	7d3b      	ldrb	r3, [r7, #20]
 8002602:	2ba5      	cmp	r3, #165	; 0xa5
 8002604:	d013      	beq.n	800262e <ref_get_header+0x4a>
		queue_pop_element(data_buffer);
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	f7ff fe56 	bl	80022b8 <queue_pop_element>
		ret_header.cmd_id=0xFFFF;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	767b      	strb	r3, [r7, #25]
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	76bb      	strb	r3, [r7, #26]
		return ret_header;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	461a      	mov	r2, r3
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	6010      	str	r0, [r2, #0]
 8002624:	8899      	ldrh	r1, [r3, #4]
 8002626:	799b      	ldrb	r3, [r3, #6]
 8002628:	8091      	strh	r1, [r2, #4]
 800262a:	7193      	strb	r3, [r2, #6]
 800262c:	e04d      	b.n	80026ca <ref_get_header+0xe6>
	}

	ret_header.data_length = ((uint16_t) temp_data[2] << 8 | temp_data[1]);
 800262e:	7bbb      	ldrb	r3, [r7, #14]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	b21a      	sxth	r2, r3
 8002634:	7b7b      	ldrb	r3, [r7, #13]
 8002636:	b21b      	sxth	r3, r3
 8002638:	4313      	orrs	r3, r2
 800263a:	b21b      	sxth	r3, r3
 800263c:	b29b      	uxth	r3, r3
 800263e:	f8a7 3015 	strh.w	r3, [r7, #21]
	ret_header.seq = temp_data[3];
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	75fb      	strb	r3, [r7, #23]
	ret_header.crc = temp_data[4];
 8002646:	7c3b      	ldrb	r3, [r7, #16]
 8002648:	763b      	strb	r3, [r7, #24]
	int crc_check = verify_CRC8_check_sum(temp_data, 5);
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	2105      	movs	r1, #5
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fcf3 	bl	800103c <verify_CRC8_check_sum>
 8002656:	4603      	mov	r3, r0
 8002658:	61fb      	str	r3, [r7, #28]
	ret_header.cmd_id = (temp_data[6]) << 8 | temp_data[5];
 800265a:	7cbb      	ldrb	r3, [r7, #18]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	b21a      	sxth	r2, r3
 8002660:	7c7b      	ldrb	r3, [r7, #17]
 8002662:	b21b      	sxth	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b21b      	sxth	r3, r3
 8002668:	b29b      	uxth	r3, r3
 800266a:	f8a7 3019 	strh.w	r3, [r7, #25]
	if (!crc_check || ret_header.data_length > TQUEUE_SIZE || ret_header.cmd_id > 0x305) {
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00c      	beq.n	800268e <ref_get_header+0xaa>
 8002674:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267e:	d806      	bhi.n	800268e <ref_get_header+0xaa>
 8002680:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f240 3205 	movw	r2, #773	; 0x305
 800268a:	4293      	cmp	r3, r2
 800268c:	d913      	bls.n	80026b6 <ref_get_header+0xd2>
		ret_header.cmd_id=0xFFFF;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	767b      	strb	r3, [r7, #25]
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
 8002698:	76bb      	strb	r3, [r7, #26]
		queue_pop_element(data_buffer);
 800269a:	6838      	ldr	r0, [r7, #0]
 800269c:	f7ff fe0c 	bl	80022b8 <queue_pop_element>
		return ret_header;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	6010      	str	r0, [r2, #0]
 80026ac:	8899      	ldrh	r1, [r3, #4]
 80026ae:	799b      	ldrb	r3, [r3, #6]
 80026b0:	8091      	strh	r1, [r2, #4]
 80026b2:	7193      	strb	r3, [r2, #6]
 80026b4:	e009      	b.n	80026ca <ref_get_header+0xe6>
	}
//	queue_remove_number(data_buffer, REF_HEADER_SIZE);
	return ret_header;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	461a      	mov	r2, r3
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	6010      	str	r0, [r2, #0]
 80026c2:	8899      	ldrh	r1, [r3, #4]
 80026c4:	799b      	ldrb	r3, [r3, #6]
 80026c6:	8091      	strh	r1, [r2, #4]
 80026c8:	7193      	strb	r3, [r2, #6]
}
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <ref_get_msg>:



ref_msg_t ref_get_msg(ref_frame_header_t header,queue_t *uart_queue) {
 80026d4:	b5b0      	push	{r4, r5, r7, lr}
 80026d6:	b0d8      	sub	sp, #352	; 0x160
 80026d8:	af00      	add	r7, sp, #0
 80026da:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 80026de:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 80026e2:	6020      	str	r0, [r4, #0]
 80026e4:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 80026e8:	f5a0 70ae 	sub.w	r0, r0, #348	; 0x15c
 80026ec:	e880 0006 	stmia.w	r0, {r1, r2}
 80026f0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80026f4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80026f8:	6013      	str	r3, [r2, #0]
	uint8_t temp_buffer[TQUEUE_SIZE];
	ref_msg_t buffer_msg;
	//+ 2 for CRC16
	queue_pop_elements(uart_queue, temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 80026fa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026fe:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002702:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002706:	b29b      	uxth	r3, r3
 8002708:	3309      	adds	r3, #9
 800270a:	b29a      	uxth	r2, r3
 800270c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002710:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002714:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	f7ff fe03 	bl	8002324 <queue_pop_elements>

	uint32_t crc_test = verify_CRC16_check_sum(temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 800271e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002722:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002726:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800272a:	b29b      	uxth	r3, r3
 800272c:	3309      	adds	r3, #9
 800272e:	461a      	mov	r2, r3
 8002730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fcf4 	bl	8001124 <verify_CRC16_check_sum>
 800273c:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	if (!crc_test){
 8002740:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d116      	bne.n	8002776 <ref_get_msg+0xa2>
		buffer_msg.cmd_id = 0xFFFF;
 8002748:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800274c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002754:	801a      	strh	r2, [r3, #0]
		return buffer_msg;
 8002756:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800275a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002764:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	2342      	movs	r3, #66	; 0x42
 800276e:	461a      	mov	r2, r3
 8002770:	f018 fcd1 	bl	801b116 <memcpy>
 8002774:	e19f      	b.n	8002ab6 <ref_get_msg+0x3e2>
	}
	//shift 2 bytes to the right to get pointer to the actual start of data
	uint8_t* data_buffer = temp_buffer+2+REF_HEADER_SIZE;
 8002776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800277a:	3307      	adds	r3, #7
 800277c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	buffer_msg.cmd_id = header.cmd_id;
 8002780:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002784:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002788:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800278c:	b29a      	uxth	r2, r3
 800278e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002792:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002796:	801a      	strh	r2, [r3, #0]
	switch (header.cmd_id) {
 8002798:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800279c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80027a0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f240 3202 	movw	r2, #770	; 0x302
 80027aa:	4293      	cmp	r3, r2
 80027ac:	f000 815c 	beq.w	8002a68 <ref_get_msg+0x394>
 80027b0:	f240 3202 	movw	r2, #770	; 0x302
 80027b4:	4293      	cmp	r3, r2
 80027b6:	f300 8167 	bgt.w	8002a88 <ref_get_msg+0x3b4>
 80027ba:	f240 3201 	movw	r2, #769	; 0x301
 80027be:	4293      	cmp	r3, r2
 80027c0:	f000 8146 	beq.w	8002a50 <ref_get_msg+0x37c>
 80027c4:	f240 3201 	movw	r2, #769	; 0x301
 80027c8:	4293      	cmp	r3, r2
 80027ca:	f300 815d 	bgt.w	8002a88 <ref_get_msg+0x3b4>
 80027ce:	f240 220a 	movw	r2, #522	; 0x20a
 80027d2:	4293      	cmp	r3, r2
 80027d4:	f300 8158 	bgt.w	8002a88 <ref_get_msg+0x3b4>
 80027d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027dc:	dc04      	bgt.n	80027e8 <ref_get_msg+0x114>
 80027de:	2b04      	cmp	r3, #4
 80027e0:	dc40      	bgt.n	8002864 <ref_get_msg+0x190>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	dc2e      	bgt.n	8002844 <ref_get_msg+0x170>
 80027e6:	e14f      	b.n	8002a88 <ref_get_msg+0x3b4>
 80027e8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80027ec:	2b09      	cmp	r3, #9
 80027ee:	f200 814b 	bhi.w	8002a88 <ref_get_msg+0x3b4>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <ref_get_msg+0x124>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	0800294d 	.word	0x0800294d
 80027fc:	0800297d 	.word	0x0800297d
 8002800:	0800299d 	.word	0x0800299d
 8002804:	080029bd 	.word	0x080029bd
 8002808:	080029cf 	.word	0x080029cf
 800280c:	080029e1 	.word	0x080029e1
 8002810:	080029f3 	.word	0x080029f3
 8002814:	08002a0f 	.word	0x08002a0f
 8002818:	08002a27 	.word	0x08002a27
 800281c:	08002a3d 	.word	0x08002a3d
 8002820:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002824:	2b04      	cmp	r3, #4
 8002826:	f200 812f 	bhi.w	8002a88 <ref_get_msg+0x3b4>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <ref_get_msg+0x15c>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	080028e3 	.word	0x080028e3
 8002834:	080028f9 	.word	0x080028f9
 8002838:	0800290f 	.word	0x0800290f
 800283c:	08002927 	.word	0x08002927
 8002840:	0800293b 	.word	0x0800293b
 8002844:	3b01      	subs	r3, #1
 8002846:	2b03      	cmp	r3, #3
 8002848:	f200 811e 	bhi.w	8002a88 <ref_get_msg+0x3b4>
 800284c:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <ref_get_msg+0x180>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002875 	.word	0x08002875
 8002858:	0800288d 	.word	0x0800288d
 800285c:	0800289f 	.word	0x0800289f
 8002860:	080028cb 	.word	0x080028cb
 8002864:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002868:	f280 810e 	bge.w	8002a88 <ref_get_msg+0x3b4>
 800286c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002870:	dcd6      	bgt.n	8002820 <ref_get_msg+0x14c>
 8002872:	e109      	b.n	8002a88 <ref_get_msg+0x3b4>
	case REF_GAME_STATE_CMD_ID:
		memcpy(&buffer_msg.data.game_state, 	(data_buffer), sizeof(ref_game_state_t));
 8002874:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002878:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800287c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002880:	3302      	adds	r3, #2
 8002882:	8811      	ldrh	r1, [r2, #0]
 8002884:	7892      	ldrb	r2, [r2, #2]
 8002886:	8019      	strh	r1, [r3, #0]
 8002888:	709a      	strb	r2, [r3, #2]
		break;
 800288a:	e105      	b.n	8002a98 <ref_get_msg+0x3c4>
 800288c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002890:	781a      	ldrb	r2, [r3, #0]
	case REF_GAME_RESULT_ID:
		memcpy(&buffer_msg.data.game_result, 	(data_buffer), sizeof(ref_game_result_t));
 8002892:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002896:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800289a:	709a      	strb	r2, [r3, #2]
		break;
 800289c:	e0fc      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_ROBOT_HP_CMD_ID:
		memcpy(&buffer_msg.data.robot_hp, 		(data_buffer), sizeof(ref_game_robot_HP_t));
 800289e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028a6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80028aa:	3302      	adds	r3, #2
 80028ac:	6814      	ldr	r4, [r2, #0]
 80028ae:	6850      	ldr	r0, [r2, #4]
 80028b0:	6891      	ldr	r1, [r2, #8]
 80028b2:	68d5      	ldr	r5, [r2, #12]
 80028b4:	601c      	str	r4, [r3, #0]
 80028b6:	6058      	str	r0, [r3, #4]
 80028b8:	6099      	str	r1, [r3, #8]
 80028ba:	60dd      	str	r5, [r3, #12]
 80028bc:	6914      	ldr	r4, [r2, #16]
 80028be:	6950      	ldr	r0, [r2, #20]
 80028c0:	6991      	ldr	r1, [r2, #24]
 80028c2:	611c      	str	r4, [r3, #16]
 80028c4:	6158      	str	r0, [r3, #20]
 80028c6:	6199      	str	r1, [r3, #24]
		break;
 80028c8:	e0e6      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_DART_LAUNCH_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_status, 	(data_buffer), sizeof(ref_dart_status_t));
 80028ca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028d2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80028d6:	3302      	adds	r3, #2
 80028d8:	8811      	ldrh	r1, [r2, #0]
 80028da:	7892      	ldrb	r2, [r2, #2]
 80028dc:	8019      	strh	r1, [r3, #0]
 80028de:	709a      	strb	r2, [r3, #2]
		break;
 80028e0:	e0da      	b.n	8002a98 <ref_get_msg+0x3c4>
 80028e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
	case REF_GAME_EVENT_CMD_ID:
		memcpy(&buffer_msg.data.game_event, 	(data_buffer), sizeof(ref_game_event_data_t));
 80028ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028f2:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 80028f6:	e0cf      	b.n	8002a98 <ref_get_msg+0x3c4>
 80028f8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
	case REF_SUPPLIER_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_state, (data_buffer),sizeof(ref_supply_projectile_data_t));
 8002900:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002904:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002908:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 800290c:	e0c4      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_SUPPLIER_BOOKING_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_queue, (data_buffer),sizeof(ref_supply_projectile_booking_t));
 800290e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002912:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002916:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800291a:	3302      	adds	r3, #2
 800291c:	8811      	ldrh	r1, [r2, #0]
 800291e:	7892      	ldrb	r2, [r2, #2]
 8002920:	8019      	strh	r1, [r3, #0]
 8002922:	709a      	strb	r2, [r3, #2]
		break;
 8002924:	e0b8      	b.n	8002a98 <ref_get_msg+0x3c4>
 8002926:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29a      	uxth	r2, r3
	case REF_FOUL_CMD_ID:
		memcpy(&buffer_msg.data.referee_warning,(data_buffer), sizeof(ref_referee_warning_t));
 800292e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002932:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002936:	805a      	strh	r2, [r3, #2]
		break;
 8002938:	e0ae      	b.n	8002a98 <ref_get_msg+0x3c4>
 800293a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800293e:	781a      	ldrb	r2, [r3, #0]
	case REF_DART_COOLDOWN_CMD_ID:
		memcpy(&buffer_msg.data.dart_cooldown, 	(data_buffer), sizeof(ref_dart_cooldown_t));
 8002940:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002944:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002948:	709a      	strb	r2, [r3, #2]
		break;
 800294a:	e0a5      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_ROBOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_state, 	(data_buffer), sizeof(ref_game_robot_data_t));
 800294c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002950:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002954:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002958:	3302      	adds	r3, #2
 800295a:	6810      	ldr	r0, [r2, #0]
 800295c:	6851      	ldr	r1, [r2, #4]
 800295e:	6895      	ldr	r5, [r2, #8]
 8002960:	68d4      	ldr	r4, [r2, #12]
 8002962:	6018      	str	r0, [r3, #0]
 8002964:	6059      	str	r1, [r3, #4]
 8002966:	609d      	str	r5, [r3, #8]
 8002968:	60dc      	str	r4, [r3, #12]
 800296a:	6910      	ldr	r0, [r2, #16]
 800296c:	6951      	ldr	r1, [r2, #20]
 800296e:	6118      	str	r0, [r3, #16]
 8002970:	6159      	str	r1, [r3, #20]
 8002972:	8b11      	ldrh	r1, [r2, #24]
 8002974:	7e92      	ldrb	r2, [r2, #26]
 8002976:	8319      	strh	r1, [r3, #24]
 8002978:	769a      	strb	r2, [r3, #26]
		break;
 800297a:	e08d      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_ROBOT_POWER_DATA_CMD_ID:
		memcpy(&buffer_msg.data.power_data, 	(data_buffer), sizeof(ref_robot_power_data_t));
 800297c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002980:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002984:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002988:	3302      	adds	r3, #2
 800298a:	6814      	ldr	r4, [r2, #0]
 800298c:	6850      	ldr	r0, [r2, #4]
 800298e:	6891      	ldr	r1, [r2, #8]
 8002990:	601c      	str	r4, [r3, #0]
 8002992:	6058      	str	r0, [r3, #4]
 8002994:	6099      	str	r1, [r3, #8]
 8002996:	8992      	ldrh	r2, [r2, #12]
 8002998:	819a      	strh	r2, [r3, #12]
		break;
 800299a:	e07d      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_ROBOT_POS_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_pos, 		(data_buffer), sizeof(ref_game_robot_pos_t));
 800299c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029a4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80029a8:	3302      	adds	r3, #2
 80029aa:	6814      	ldr	r4, [r2, #0]
 80029ac:	6850      	ldr	r0, [r2, #4]
 80029ae:	6891      	ldr	r1, [r2, #8]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	601c      	str	r4, [r3, #0]
 80029b4:	6058      	str	r0, [r3, #4]
 80029b6:	6099      	str	r1, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
		break;
 80029ba:	e06d      	b.n	8002a98 <ref_get_msg+0x3c4>
 80029bc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029c0:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_buff, 	(data_buffer), sizeof(ref_buff_data_t));
 80029c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029ca:	709a      	strb	r2, [r3, #2]
		break;
 80029cc:	e064      	b.n	8002a98 <ref_get_msg+0x3c4>
 80029ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029d2:	781a      	ldrb	r2, [r3, #0]
	case REF_AERIAL_ENERGY_DATA_CMD_ID:
		memcpy(&buffer_msg.data.aerial_energy, 	(data_buffer), sizeof(ref_aerial_robot_energy_t));
 80029d4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029dc:	709a      	strb	r2, [r3, #2]
		break;
 80029de:	e05b      	b.n	8002a98 <ref_get_msg+0x3c4>
 80029e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029e4:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_DMG_DATA_CMD_ID:
		memcpy(&buffer_msg.data.damage_data, 	(data_buffer), sizeof(ref_robot_dmg_t));
 80029e6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029ee:	709a      	strb	r2, [r3, #2]
		break;
 80029f0:	e052      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_ROBOT_SHOOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.shooting_data, 	(data_buffer), sizeof(ref_shoot_data_t));
 80029f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029fa:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80029fe:	3302      	adds	r3, #2
 8002a00:	6811      	ldr	r1, [r2, #0]
 8002a02:	6019      	str	r1, [r3, #0]
 8002a04:	8891      	ldrh	r1, [r2, #4]
 8002a06:	7992      	ldrb	r2, [r2, #6]
 8002a08:	8099      	strh	r1, [r3, #4]
 8002a0a:	719a      	strb	r2, [r3, #6]
		break;
 8002a0c:	e044      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_ROBOT_MAGAZINE_DATA_CMD_ID:
		memcpy(&buffer_msg.data.magazine_data, 	(data_buffer), sizeof(ref_magazine_data_t));
 8002a0e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a16:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	6811      	ldr	r1, [r2, #0]
 8002a1e:	6019      	str	r1, [r3, #0]
 8002a20:	8892      	ldrh	r2, [r2, #4]
 8002a22:	809a      	strh	r2, [r3, #4]
		break;
 8002a24:	e038      	b.n	8002a98 <ref_get_msg+0x3c4>
 8002a26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
	case REF_ROBOT_RFID_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.rfid_buff, 		(data_buffer), sizeof(ref_rfid_status_t));
 8002a2e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a36:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002a3a:	e02d      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_DART_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_cmd, 		(data_buffer), sizeof(ref_dart_status_t));
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	3302      	adds	r3, #2
 8002a42:	2203      	movs	r2, #3
 8002a44:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f018 fb64 	bl	801b116 <memcpy>
		break;
 8002a4e:	e023      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_ROBOT_COMMS_CMD_ID:
		memcpy(&buffer_msg.data.robot_comms, 	(data_buffer), sizeof(ref_inter_robot_data_t));
 8002a50:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a54:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a58:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	6811      	ldr	r1, [r2, #0]
 8002a60:	6019      	str	r1, [r3, #0]
 8002a62:	8892      	ldrh	r2, [r2, #4]
 8002a64:	809a      	strh	r2, [r3, #4]
		break;
 8002a66:	e017      	b.n	8002a98 <ref_get_msg+0x3c4>
	case REF_CUSTOM_DATA_CMD_ID:
		memcpy(&buffer_msg.data.custom_data, 	(data_buffer), sizeof(ref_custom_data_t));
 8002a68:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a6c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a70:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a74:	3302      	adds	r3, #2
 8002a76:	6814      	ldr	r4, [r2, #0]
 8002a78:	6850      	ldr	r0, [r2, #4]
 8002a7a:	6891      	ldr	r1, [r2, #8]
 8002a7c:	601c      	str	r4, [r3, #0]
 8002a7e:	6058      	str	r0, [r3, #4]
 8002a80:	6099      	str	r1, [r3, #8]
 8002a82:	7b12      	ldrb	r2, [r2, #12]
 8002a84:	731a      	strb	r2, [r3, #12]
		break;
 8002a86:	e007      	b.n	8002a98 <ref_get_msg+0x3c4>
	default:
		buffer_msg.cmd_id = 0xFFFF;
 8002a88:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a94:	801a      	strh	r2, [r3, #0]
		break;
 8002a96:	bf00      	nop
	}
	//remove cmd id + data
	return buffer_msg;
 8002a98:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a9c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002aa6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	2342      	movs	r3, #66	; 0x42
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f018 fb30 	bl	801b116 <memcpy>
}
 8002ab6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002aba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bdb0      	pop	{r4, r5, r7, pc}

08002ac8 <init_xvr_usart>:

static queue_t *xvr_UART_queue;
static queue_t *ref_UART_queue;


void init_xvr_usart(uint8_t *pData){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	xvr_usart_start(&SBC_UART, pData, 15, NULL);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4803      	ldr	r0, [pc, #12]	; (8002ae4 <init_xvr_usart+0x1c>)
 8002ad8:	f000 f810 	bl	8002afc <xvr_usart_start>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20001600 	.word	0x20001600

08002ae8 <xvr_full_cplt_isr>:
		queue_append_byte(xvr_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
//	} else {
//		queue_append_byte(xvr_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
void xvr_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	sbc_process_data();
 8002af0:	f008 f8f6 	bl	800ace0 <sbc_process_data>
};
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <xvr_usart_start>:

HAL_StatusTypeDef xvr_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	xvr_UART_queue = uart_queue;
 8002b0c:	4a3a      	ldr	r2, [pc, #232]	; (8002bf8 <xvr_usart_start+0xfc>)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6013      	str	r3, [r2, #0]
	queue_init(xvr_UART_queue);
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <xvr_usart_start+0xfc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fb42 	bl	80021a0 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d161      	bne.n	8002bec <xvr_usart_start+0xf0>
		if ((pData == NULL) || (Size == 0U))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <xvr_usart_start+0x38>
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <xvr_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e05a      	b.n	8002bee <xvr_usart_start+0xf2>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <xvr_usart_start+0x4a>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e053      	b.n	8002bee <xvr_usart_start+0xf2>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2222      	movs	r2, #34	; 0x22
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = xvr_full_cplt_isr;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <xvr_usart_start+0x100>)
 8002b74:	63da      	str	r2, [r3, #60]	; 0x3c
//		huart->hdmarx->XferHalfCpltCallback = xvr_half_cplt_isr;


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	f009 fd53 	bl	800c640 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc6:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be6:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <xvr_usart_start+0xf2>
	} else {
		return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
	}
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000039c 	.word	0x2000039c
 8002bfc:	08002ae9 	.word	0x08002ae9

08002c00 <ref_usart_start>:
HAL_StatusTypeDef ref_usart_send(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size){
	return HAL_UART_Transmit_DMA(huart, pData, Size);
}

HAL_StatusTypeDef ref_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	ref_UART_queue = uart_queue;
 8002c10:	4a3a      	ldr	r2, [pc, #232]	; (8002cfc <ref_usart_start+0xfc>)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6013      	str	r3, [r2, #0]
	queue_init(ref_UART_queue);
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <ref_usart_start+0xfc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fac0 	bl	80021a0 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d162      	bne.n	8002cf2 <ref_usart_start+0xf2>
		if ((pData == NULL) || (Size == 0U))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <ref_usart_start+0x38>
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <ref_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e05b      	b.n	8002cf4 <ref_usart_start+0xf4>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <ref_usart_start+0x4a>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e054      	b.n	8002cf4 <ref_usart_start+0xf4>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2222      	movs	r2, #34	; 0x22
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback 	= ref_full_cplt_isr;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <ref_usart_start+0x100>)
 8002c72:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = ref_half_cplt_isr;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <ref_usart_start+0x104>)
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	2200      	movs	r2, #0
 8002c82:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002c84:	f107 0308 	add.w	r3, r7, #8
 8002c88:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	f009 fcd0 	bl	800c640 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ccc:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cec:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <ref_usart_start+0xf4>
	} else {
		return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
	}
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200003a0 	.word	0x200003a0
 8002d00:	08002d31 	.word	0x08002d31
 8002d04:	08002d09 	.word	0x08002d09

08002d08 <ref_half_cplt_isr>:


void ref_half_cplt_isr(DMA_HandleTypeDef *hdma){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <ref_half_cplt_isr+0x24>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f7ff fa6f 	bl	8002202 <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200003a0 	.word	0x200003a0

08002d30 <ref_full_cplt_isr>:

void ref_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M0AR+1));
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <ref_full_cplt_isr+0x28>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	3301      	adds	r3, #1
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f7ff fa5a 	bl	8002202 <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M1AR+1));
//	}
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200003a0 	.word	0x200003a0

08002d5c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d62:	463b      	mov	r3, r7
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002d70:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <MX_ADC3_Init+0x9c>)
 8002d72:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002d76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d7a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002d8e:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002d9e:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <MX_ADC3_Init+0xa0>)
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002dbc:	480d      	ldr	r0, [pc, #52]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002dbe:	f008 f9cd 	bl	800b15c <HAL_ADC_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002dc8:	f000 fe39 	bl	8003a3e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002dcc:	2308      	movs	r3, #8
 8002dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002dd8:	463b      	mov	r3, r7
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_ADC3_Init+0x98>)
 8002dde:	f008 fa01 	bl	800b1e4 <HAL_ADC_ConfigChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002de8:	f000 fe29 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	200003a4 	.word	0x200003a4
 8002df8:	40012200 	.word	0x40012200
 8002dfc:	0f000001 	.word	0x0f000001

08002e00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	; 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_ADC_MspInit+0x7c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d128      	bne.n	8002e74 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e48:	f043 0320 	orr.w	r3, r3, #32
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e60:	2303      	movs	r3, #3
 8002e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4805      	ldr	r0, [pc, #20]	; (8002e84 <HAL_ADC_MspInit+0x84>)
 8002e70:	f009 ff46 	bl	800cd00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40012200 	.word	0x40012200
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40021400 	.word	0x40021400

08002e88 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <MX_CAN1_Init+0x64>)
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <MX_CAN1_Init+0x68>)
 8002e90:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <MX_CAN1_Init+0x64>)
 8002e94:	2203      	movs	r2, #3
 8002e96:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <MX_CAN1_Init+0x64>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <MX_CAN1_Init+0x64>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <MX_CAN1_Init+0x64>)
 8002ea6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002eaa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <MX_CAN1_Init+0x64>)
 8002eae:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002eb2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <MX_CAN1_Init+0x64>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <MX_CAN1_Init+0x64>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <MX_CAN1_Init+0x64>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <MX_CAN1_Init+0x64>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002ecc:	4b07      	ldr	r3, [pc, #28]	; (8002eec <MX_CAN1_Init+0x64>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <MX_CAN1_Init+0x64>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002ed8:	4804      	ldr	r0, [pc, #16]	; (8002eec <MX_CAN1_Init+0x64>)
 8002eda:	f008 fba1 	bl	800b620 <HAL_CAN_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002ee4:	f000 fdab 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200003ec 	.word	0x200003ec
 8002ef0:	40006400 	.word	0x40006400

08002ef4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002efa:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <MX_CAN2_Init+0x68>)
 8002efc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f00:	2203      	movs	r2, #3
 8002f02:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f16:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f1a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002f1e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002f44:	4804      	ldr	r0, [pc, #16]	; (8002f58 <MX_CAN2_Init+0x64>)
 8002f46:	f008 fb6b 	bl	800b620 <HAL_CAN_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002f50:	f000 fd75 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000414 	.word	0x20000414
 8002f5c:	40006800 	.word	0x40006800

08002f60 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08c      	sub	sp, #48	; 0x30
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a52      	ldr	r2, [pc, #328]	; (80030c8 <HAL_CAN_MspInit+0x168>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d145      	bne.n	800300e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f82:	4b52      	ldr	r3, [pc, #328]	; (80030cc <HAL_CAN_MspInit+0x16c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a50      	ldr	r2, [pc, #320]	; (80030cc <HAL_CAN_MspInit+0x16c>)
 8002f8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f8c:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <HAL_CAN_MspInit+0x16c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10d      	bne.n	8002fb0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8002f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa4:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	4a45      	ldr	r2, [pc, #276]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc0:	4b43      	ldr	r3, [pc, #268]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002fdc:	2309      	movs	r3, #9
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fe0:	f107 031c 	add.w	r3, r7, #28
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	483b      	ldr	r0, [pc, #236]	; (80030d4 <HAL_CAN_MspInit+0x174>)
 8002fe8:	f009 fe8a 	bl	800cd00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002fec:	2200      	movs	r2, #0
 8002fee:	2105      	movs	r1, #5
 8002ff0:	2014      	movs	r0, #20
 8002ff2:	f009 fa4d 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002ff6:	2014      	movs	r0, #20
 8002ff8:	f009 fa66 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2105      	movs	r1, #5
 8003000:	2015      	movs	r0, #21
 8003002:	f009 fa45 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003006:	2015      	movs	r0, #21
 8003008:	f009 fa5e 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800300c:	e057      	b.n	80030be <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a31      	ldr	r2, [pc, #196]	; (80030d8 <HAL_CAN_MspInit+0x178>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d152      	bne.n	80030be <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	4a2b      	ldr	r2, [pc, #172]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8003022:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003026:	6413      	str	r3, [r2, #64]	; 0x40
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003034:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_CAN_MspInit+0x16c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a24      	ldr	r2, [pc, #144]	; (80030cc <HAL_CAN_MspInit+0x16c>)
 800303c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800303e:	4b23      	ldr	r3, [pc, #140]	; (80030cc <HAL_CAN_MspInit+0x16c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10d      	bne.n	8003062 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8003050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_CAN_MspInit+0x170>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800307e:	2360      	movs	r3, #96	; 0x60
 8003080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800308e:	2309      	movs	r3, #9
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003092:	f107 031c 	add.w	r3, r7, #28
 8003096:	4619      	mov	r1, r3
 8003098:	4810      	ldr	r0, [pc, #64]	; (80030dc <HAL_CAN_MspInit+0x17c>)
 800309a:	f009 fe31 	bl	800cd00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2105      	movs	r1, #5
 80030a2:	2040      	movs	r0, #64	; 0x40
 80030a4:	f009 f9f4 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80030a8:	2040      	movs	r0, #64	; 0x40
 80030aa:	f009 fa0d 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2105      	movs	r1, #5
 80030b2:	2041      	movs	r0, #65	; 0x41
 80030b4:	f009 f9ec 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80030b8:	2041      	movs	r0, #65	; 0x41
 80030ba:	f009 fa05 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
}
 80030be:	bf00      	nop
 80030c0:	3730      	adds	r7, #48	; 0x30
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40006400 	.word	0x40006400
 80030cc:	2000043c 	.word	0x2000043c
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	40006800 	.word	0x40006800
 80030dc:	40020400 	.word	0x40020400

080030e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <MX_DMA_Init+0xc8>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a2e      	ldr	r2, [pc, #184]	; (80031a8 <MX_DMA_Init+0xc8>)
 80030f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <MX_DMA_Init+0xc8>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <MX_DMA_Init+0xc8>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <MX_DMA_Init+0xc8>)
 800310c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <MX_DMA_Init+0xc8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2105      	movs	r1, #5
 8003122:	200c      	movs	r0, #12
 8003124:	f009 f9b4 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003128:	200c      	movs	r0, #12
 800312a:	f009 f9cd 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2105      	movs	r1, #5
 8003132:	200d      	movs	r0, #13
 8003134:	f009 f9ac 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003138:	200d      	movs	r0, #13
 800313a:	f009 f9c5 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2105      	movs	r1, #5
 8003142:	200f      	movs	r0, #15
 8003144:	f009 f9a4 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003148:	200f      	movs	r0, #15
 800314a:	f009 f9bd 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2105      	movs	r1, #5
 8003152:	2038      	movs	r0, #56	; 0x38
 8003154:	f009 f99c 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003158:	2038      	movs	r0, #56	; 0x38
 800315a:	f009 f9b5 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2105      	movs	r1, #5
 8003162:	2039      	movs	r0, #57	; 0x39
 8003164:	f009 f994 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003168:	2039      	movs	r0, #57	; 0x39
 800316a:	f009 f9ad 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2105      	movs	r1, #5
 8003172:	203b      	movs	r0, #59	; 0x3b
 8003174:	f009 f98c 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003178:	203b      	movs	r0, #59	; 0x3b
 800317a:	f009 f9a5 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2105      	movs	r1, #5
 8003182:	2044      	movs	r0, #68	; 0x44
 8003184:	f009 f984 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003188:	2044      	movs	r0, #68	; 0x44
 800318a:	f009 f99d 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2105      	movs	r1, #5
 8003192:	2045      	movs	r0, #69	; 0x45
 8003194:	f009 f97c 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003198:	2045      	movs	r0, #69	; 0x45
 800319a:	f009 f995 	bl	800c4c8 <HAL_NVIC_EnableIRQ>

}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0

}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
	return 0;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a07      	ldr	r2, [pc, #28]	; (800320c <vApplicationGetIdleTaskMemory+0x2c>)
 80031f0:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4a06      	ldr	r2, [pc, #24]	; (8003210 <vApplicationGetIdleTaskMemory+0x30>)
 80031f6:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031fe:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	20000494 	.word	0x20000494
 8003210:	20000554 	.word	0x20000554

08003214 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <vApplicationGetTimerTaskMemory+0x2c>)
 8003224:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <vApplicationGetTimerTaskMemory+0x30>)
 800322a:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003232:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	20000954 	.word	0x20000954
 8003244:	20000a14 	.word	0x20000a14

08003248 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003248:	b5b0      	push	{r4, r5, r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af02      	add	r7, sp, #8
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	gimbal_event_group = xEventGroupCreate();
 800324e:	f013 ff72 	bl	8017136 <xEventGroupCreate>
 8003252:	4603      	mov	r3, r0
 8003254:	4a6c      	ldr	r2, [pc, #432]	; (8003408 <MX_FREERTOS_Init+0x1c0>)
 8003256:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 8003258:	f013 ff6d 	bl	8017136 <xEventGroupCreate>
 800325c:	4603      	mov	r3, r0
 800325e:	4a6b      	ldr	r2, [pc, #428]	; (800340c <MX_FREERTOS_Init+0x1c4>)
 8003260:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 8003262:	f013 ff68 	bl	8017136 <xEventGroupCreate>
 8003266:	4603      	mov	r3, r0
 8003268:	4a69      	ldr	r2, [pc, #420]	; (8003410 <MX_FREERTOS_Init+0x1c8>)
 800326a:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 800326c:	2203      	movs	r2, #3
 800326e:	2100      	movs	r1, #0
 8003270:	2001      	movs	r0, #1
 8003272:	f014 fae3 	bl	801783c <xQueueGenericCreate>
 8003276:	4603      	mov	r3, r0
 8003278:	4a66      	ldr	r2, [pc, #408]	; (8003414 <MX_FREERTOS_Init+0x1cc>)
 800327a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 800327c:	2200      	movs	r2, #0
 800327e:	2110      	movs	r1, #16
 8003280:	2005      	movs	r0, #5
 8003282:	f014 fadb 	bl	801783c <xQueueGenericCreate>
 8003286:	4603      	mov	r3, r0
 8003288:	4a63      	ldr	r2, [pc, #396]	; (8003418 <MX_FREERTOS_Init+0x1d0>)
 800328a:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 800328c:	2200      	movs	r2, #0
 800328e:	2110      	movs	r1, #16
 8003290:	2005      	movs	r0, #5
 8003292:	f014 fad3 	bl	801783c <xQueueGenericCreate>
 8003296:	4603      	mov	r3, r0
 8003298:	4a60      	ldr	r2, [pc, #384]	; (800341c <MX_FREERTOS_Init+0x1d4>)
 800329a:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 800329c:	2200      	movs	r2, #0
 800329e:	210c      	movs	r1, #12
 80032a0:	2005      	movs	r0, #5
 80032a2:	f014 facb 	bl	801783c <xQueueGenericCreate>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a5d      	ldr	r2, [pc, #372]	; (8003420 <MX_FREERTOS_Init+0x1d8>)
 80032aa:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	buzzing_task_msg = xQueueCreate(48, sizeof(uint8_t));
 80032ac:	2200      	movs	r2, #0
 80032ae:	2101      	movs	r1, #1
 80032b0:	2030      	movs	r0, #48	; 0x30
 80032b2:	f014 fac3 	bl	801783c <xQueueGenericCreate>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4a5a      	ldr	r2, [pc, #360]	; (8003424 <MX_FREERTOS_Init+0x1dc>)
 80032ba:	6013      	str	r3, [r2, #0]
	uart_data_queue = xQueueCreate(5, sizeof(ref_msg_t));
 80032bc:	2200      	movs	r2, #0
 80032be:	2142      	movs	r1, #66	; 0x42
 80032c0:	2005      	movs	r0, #5
 80032c2:	f014 fabb 	bl	801783c <xQueueGenericCreate>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4a57      	ldr	r2, [pc, #348]	; (8003428 <MX_FREERTOS_Init+0x1e0>)
 80032ca:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80032cc:	4b57      	ldr	r3, [pc, #348]	; (800342c <MX_FREERTOS_Init+0x1e4>)
 80032ce:	1d3c      	adds	r4, r7, #4
 80032d0:	461d      	mov	r5, r3
 80032d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f013 fec7 	bl	8017076 <osThreadCreate>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a51      	ldr	r2, [pc, #324]	; (8003430 <MX_FREERTOS_Init+0x1e8>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//todo: adjust priorities
	//Threads creation
	xTaskCreate(imu_processing_task, "IMU_task",
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <MX_FREERTOS_Init+0x1ec>)
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	230f      	movs	r3, #15
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2301      	movs	r3, #1
 80032f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032fc:	494e      	ldr	r1, [pc, #312]	; (8003438 <MX_FREERTOS_Init+0x1f0>)
 80032fe:	484f      	ldr	r0, [pc, #316]	; (800343c <MX_FREERTOS_Init+0x1f4>)
 8003300:	f014 ffcb 	bl	801829a <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 15,
			&imu_processing_task_handle);

	xTaskCreate(motor_calib_task, "motor_calib_task",
 8003304:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <MX_FREERTOS_Init+0x1f8>)
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	2309      	movs	r3, #9
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2301      	movs	r3, #1
 800330e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003312:	494c      	ldr	r1, [pc, #304]	; (8003444 <MX_FREERTOS_Init+0x1fc>)
 8003314:	484c      	ldr	r0, [pc, #304]	; (8003448 <MX_FREERTOS_Init+0x200>)
 8003316:	f014 ffc0 	bl	801829a <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 9,
			&motor_calib_task_handle);

	if (gimbal_event_group == NULL) {
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <MX_FREERTOS_Init+0x1c0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <MX_FREERTOS_Init+0xf0>
		//error handler implement next time!
	} else {
		xTaskCreate(gimbal_control_task, "gimbal_task",
 8003322:	4b4a      	ldr	r3, [pc, #296]	; (800344c <MX_FREERTOS_Init+0x204>)
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	2307      	movs	r3, #7
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2301      	movs	r3, #1
 800332c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003330:	4947      	ldr	r1, [pc, #284]	; (8003450 <MX_FREERTOS_Init+0x208>)
 8003332:	4848      	ldr	r0, [pc, #288]	; (8003454 <MX_FREERTOS_Init+0x20c>)
 8003334:	f014 ffb1 	bl	801829a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 7,
				&gimbal_control_task_handle);

	}

	if (chassis_event_group == NULL) {
 8003338:	4b34      	ldr	r3, [pc, #208]	; (800340c <MX_FREERTOS_Init+0x1c4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <MX_FREERTOS_Init+0x10e>
		//error handler
	} else {
		xTaskCreate(movement_control_task, "chassis_task",
 8003340:	4b45      	ldr	r3, [pc, #276]	; (8003458 <MX_FREERTOS_Init+0x210>)
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	2304      	movs	r3, #4
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2301      	movs	r3, #1
 800334a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334e:	4943      	ldr	r1, [pc, #268]	; (800345c <MX_FREERTOS_Init+0x214>)
 8003350:	4843      	ldr	r0, [pc, #268]	; (8003460 <MX_FREERTOS_Init+0x218>)
 8003352:	f014 ffa2 	bl	801829a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&movement_control_task_handle);
	}

	if (launcher_event_group == NULL) {
 8003356:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <MX_FREERTOS_Init+0x1c8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <MX_FREERTOS_Init+0x12c>
		//error handler
	} else {
		xTaskCreate(launcher_control_task, "launcher_task",
 800335e:	4b41      	ldr	r3, [pc, #260]	; (8003464 <MX_FREERTOS_Init+0x21c>)
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	2304      	movs	r3, #4
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2301      	movs	r3, #1
 8003368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800336c:	493e      	ldr	r1, [pc, #248]	; (8003468 <MX_FREERTOS_Init+0x220>)
 800336e:	483f      	ldr	r0, [pc, #252]	; (800346c <MX_FREERTOS_Init+0x224>)
 8003370:	f014 ff93 	bl	801829a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&launcher_control_task_handle);
	}

	xTaskCreate(control_input_task, "RC_task",
 8003374:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <MX_FREERTOS_Init+0x228>)
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	2304      	movs	r3, #4
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2301      	movs	r3, #1
 800337e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003382:	493c      	ldr	r1, [pc, #240]	; (8003474 <MX_FREERTOS_Init+0x22c>)
 8003384:	483c      	ldr	r0, [pc, #240]	; (8003478 <MX_FREERTOS_Init+0x230>)
 8003386:	f014 ff88 	bl	801829a <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 4,
			&control_input_task_handle);
	xTaskCreate(referee_processing_task, "referee_task", 2048, (void*) 1,
 800338a:	4b3c      	ldr	r3, [pc, #240]	; (800347c <MX_FREERTOS_Init+0x234>)
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	2302      	movs	r3, #2
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2301      	movs	r3, #1
 8003394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003398:	4939      	ldr	r1, [pc, #228]	; (8003480 <MX_FREERTOS_Init+0x238>)
 800339a:	483a      	ldr	r0, [pc, #232]	; (8003484 <MX_FREERTOS_Init+0x23c>)
 800339c:	f014 ff7d 	bl	801829a <xTaskCreate>
			(UBaseType_t) 2, &referee_processing_task_handle);
	xTaskCreate(buzzing_task, "buzzer_task",
 80033a0:	4b39      	ldr	r3, [pc, #228]	; (8003488 <MX_FREERTOS_Init+0x240>)
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	2301      	movs	r3, #1
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2301      	movs	r3, #1
 80033aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ae:	4937      	ldr	r1, [pc, #220]	; (800348c <MX_FREERTOS_Init+0x244>)
 80033b0:	4837      	ldr	r0, [pc, #220]	; (8003490 <MX_FREERTOS_Init+0x248>)
 80033b2:	f014 ff72 	bl	801829a <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &buzzing_task_handle);
	if (usb_continue_semaphore == NULL) {
 80033b6:	4b17      	ldr	r3, [pc, #92]	; (8003414 <MX_FREERTOS_Init+0x1cc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <MX_FREERTOS_Init+0x18c>
		//error handler
	} else {
		xTaskCreate(usb_task, "usb_task",
 80033be:	4b35      	ldr	r3, [pc, #212]	; (8003494 <MX_FREERTOS_Init+0x24c>)
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	2301      	movs	r3, #1
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2301      	movs	r3, #1
 80033c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033cc:	4932      	ldr	r1, [pc, #200]	; (8003498 <MX_FREERTOS_Init+0x250>)
 80033ce:	4833      	ldr	r0, [pc, #204]	; (800349c <MX_FREERTOS_Init+0x254>)
 80033d0:	f014 ff63 	bl	801829a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &usb_task_handle);
	}

	xTaskCreate(telemetry_task, "telemetry_task", 700, (void*) 1,
 80033d4:	4b32      	ldr	r3, [pc, #200]	; (80034a0 <MX_FREERTOS_Init+0x258>)
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	2305      	movs	r3, #5
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2301      	movs	r3, #1
 80033de:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80033e2:	4930      	ldr	r1, [pc, #192]	; (80034a4 <MX_FREERTOS_Init+0x25c>)
 80033e4:	4830      	ldr	r0, [pc, #192]	; (80034a8 <MX_FREERTOS_Init+0x260>)
 80033e6:	f014 ff58 	bl	801829a <xTaskCreate>
			(UBaseType_t) 5, &telemetry_task_handle);
	xTaskCreate(hud_task, "hud_task", 500, (void*) 3,
 80033ea:	4b30      	ldr	r3, [pc, #192]	; (80034ac <MX_FREERTOS_Init+0x264>)
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2305      	movs	r3, #5
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2303      	movs	r3, #3
 80033f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033f8:	492d      	ldr	r1, [pc, #180]	; (80034b0 <MX_FREERTOS_Init+0x268>)
 80033fa:	482e      	ldr	r0, [pc, #184]	; (80034b4 <MX_FREERTOS_Init+0x26c>)
 80033fc:	f014 ff4d 	bl	801829a <xTaskCreate>
			(UBaseType_t) 5, &hud_task_handle);

  /* USER CODE END RTOS_THREADS */

}
 8003400:	bf00      	nop
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bdb0      	pop	{r4, r5, r7, pc}
 8003408:	2000046c 	.word	0x2000046c
 800340c:	20000470 	.word	0x20000470
 8003410:	20000474 	.word	0x20000474
 8003414:	20000478 	.word	0x20000478
 8003418:	2000047c 	.word	0x2000047c
 800341c:	20000480 	.word	0x20000480
 8003420:	20000484 	.word	0x20000484
 8003424:	20000488 	.word	0x20000488
 8003428:	2000048c 	.word	0x2000048c
 800342c:	08021774 	.word	0x08021774
 8003430:	20000490 	.word	0x20000490
 8003434:	20000460 	.word	0x20000460
 8003438:	080216dc 	.word	0x080216dc
 800343c:	08007005 	.word	0x08007005
 8003440:	20000458 	.word	0x20000458
 8003444:	080216e8 	.word	0x080216e8
 8003448:	08009179 	.word	0x08009179
 800344c:	20000440 	.word	0x20000440
 8003450:	080216fc 	.word	0x080216fc
 8003454:	08006391 	.word	0x08006391
 8003458:	20000444 	.word	0x20000444
 800345c:	08021708 	.word	0x08021708
 8003460:	08009f01 	.word	0x08009f01
 8003464:	20000450 	.word	0x20000450
 8003468:	08021718 	.word	0x08021718
 800346c:	08007cf1 	.word	0x08007cf1
 8003470:	2000044c 	.word	0x2000044c
 8003474:	08021728 	.word	0x08021728
 8003478:	080054e9 	.word	0x080054e9
 800347c:	20000448 	.word	0x20000448
 8003480:	08021730 	.word	0x08021730
 8003484:	0800a8b1 	.word	0x0800a8b1
 8003488:	20000454 	.word	0x20000454
 800348c:	08021740 	.word	0x08021740
 8003490:	08004b91 	.word	0x08004b91
 8003494:	2000045c 	.word	0x2000045c
 8003498:	0802174c 	.word	0x0802174c
 800349c:	0800b081 	.word	0x0800b081
 80034a0:	20000464 	.word	0x20000464
 80034a4:	08021758 	.word	0x08021758
 80034a8:	0800ad4d 	.word	0x0800ad4d
 80034ac:	20000468 	.word	0x20000468
 80034b0:	08021768 	.word	0x08021768
 80034b4:	08006739 	.word	0x08006739

080034b8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80034c0:	f016 ffc4 	bl	801a44c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f013 fe22 	bl	801710e <osDelay>
 80034ca:	e7fb      	b.n	80034c4 <StartDefaultTask+0xc>

080034cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08e      	sub	sp, #56	; 0x38
 80034d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	60da      	str	r2, [r3, #12]
 80034e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	623b      	str	r3, [r7, #32]
 80034e6:	4b79      	ldr	r3, [pc, #484]	; (80036cc <MX_GPIO_Init+0x200>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4a78      	ldr	r2, [pc, #480]	; (80036cc <MX_GPIO_Init+0x200>)
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
 80034f2:	4b76      	ldr	r3, [pc, #472]	; (80036cc <MX_GPIO_Init+0x200>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	623b      	str	r3, [r7, #32]
 80034fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	4b72      	ldr	r3, [pc, #456]	; (80036cc <MX_GPIO_Init+0x200>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a71      	ldr	r2, [pc, #452]	; (80036cc <MX_GPIO_Init+0x200>)
 8003508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <MX_GPIO_Init+0x200>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	4b6b      	ldr	r3, [pc, #428]	; (80036cc <MX_GPIO_Init+0x200>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4a6a      	ldr	r2, [pc, #424]	; (80036cc <MX_GPIO_Init+0x200>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4b68      	ldr	r3, [pc, #416]	; (80036cc <MX_GPIO_Init+0x200>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	4b64      	ldr	r3, [pc, #400]	; (80036cc <MX_GPIO_Init+0x200>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a63      	ldr	r2, [pc, #396]	; (80036cc <MX_GPIO_Init+0x200>)
 8003540:	f043 0308 	orr.w	r3, r3, #8
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b61      	ldr	r3, [pc, #388]	; (80036cc <MX_GPIO_Init+0x200>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	4b5d      	ldr	r3, [pc, #372]	; (80036cc <MX_GPIO_Init+0x200>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a5c      	ldr	r2, [pc, #368]	; (80036cc <MX_GPIO_Init+0x200>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b5a      	ldr	r3, [pc, #360]	; (80036cc <MX_GPIO_Init+0x200>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b56      	ldr	r3, [pc, #344]	; (80036cc <MX_GPIO_Init+0x200>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a55      	ldr	r2, [pc, #340]	; (80036cc <MX_GPIO_Init+0x200>)
 8003578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b53      	ldr	r3, [pc, #332]	; (80036cc <MX_GPIO_Init+0x200>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	4b4f      	ldr	r3, [pc, #316]	; (80036cc <MX_GPIO_Init+0x200>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a4e      	ldr	r2, [pc, #312]	; (80036cc <MX_GPIO_Init+0x200>)
 8003594:	f043 0320 	orr.w	r3, r3, #32
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <MX_GPIO_Init+0x200>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	4b48      	ldr	r3, [pc, #288]	; (80036cc <MX_GPIO_Init+0x200>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a47      	ldr	r2, [pc, #284]	; (80036cc <MX_GPIO_Init+0x200>)
 80035b0:	f043 0310 	orr.w	r3, r3, #16
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b45      	ldr	r3, [pc, #276]	; (80036cc <MX_GPIO_Init+0x200>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 80035c2:	2200      	movs	r2, #0
 80035c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035c8:	4841      	ldr	r0, [pc, #260]	; (80036d0 <MX_GPIO_Init+0x204>)
 80035ca:	f009 fd35 	bl	800d038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	4840      	ldr	r0, [pc, #256]	; (80036d4 <MX_GPIO_Init+0x208>)
 80035d4:	f009 fd30 	bl	800d038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80035d8:	2201      	movs	r2, #1
 80035da:	2110      	movs	r1, #16
 80035dc:	483e      	ldr	r0, [pc, #248]	; (80036d8 <MX_GPIO_Init+0x20c>)
 80035de:	f009 fd2b 	bl	800d038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80035e2:	2201      	movs	r2, #1
 80035e4:	2101      	movs	r1, #1
 80035e6:	483d      	ldr	r0, [pc, #244]	; (80036dc <MX_GPIO_Init+0x210>)
 80035e8:	f009 fd26 	bl	800d038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_GPIO_Pin;
 80035ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f2:	2301      	movs	r3, #1
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LASER_GPIO_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003602:	4619      	mov	r1, r3
 8003604:	4832      	ldr	r0, [pc, #200]	; (80036d0 <MX_GPIO_Init+0x204>)
 8003606:	f009 fb7b 	bl	800cd00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_RST_Pin;
 800360a:	2340      	movs	r3, #64	; 0x40
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360e:	2301      	movs	r3, #1
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IST_RST_GPIO_Port, &GPIO_InitStruct);
 800361a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361e:	4619      	mov	r1, r3
 8003620:	482c      	ldr	r0, [pc, #176]	; (80036d4 <MX_GPIO_Init+0x208>)
 8003622:	f009 fb6d 	bl	800cd00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 8003626:	2308      	movs	r3, #8
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800362a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003630:	2301      	movs	r3, #1
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 8003634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003638:	4619      	mov	r1, r3
 800363a:	4826      	ldr	r0, [pc, #152]	; (80036d4 <MX_GPIO_Init+0x208>)
 800363c:	f009 fb60 	bl	800cd00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003640:	2310      	movs	r3, #16
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003644:	2301      	movs	r3, #1
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364c:	2300      	movs	r3, #0
 800364e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003654:	4619      	mov	r1, r3
 8003656:	4820      	ldr	r0, [pc, #128]	; (80036d8 <MX_GPIO_Init+0x20c>)
 8003658:	f009 fb52 	bl	800cd00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin|GYRO_INT_Pin;
 800365c:	2330      	movs	r3, #48	; 0x30
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003660:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003666:	2301      	movs	r3, #1
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366e:	4619      	mov	r1, r3
 8003670:	4817      	ldr	r0, [pc, #92]	; (80036d0 <MX_GPIO_Init+0x204>)
 8003672:	f009 fb45 	bl	800cd00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003676:	2301      	movs	r3, #1
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368a:	4619      	mov	r1, r3
 800368c:	4813      	ldr	r0, [pc, #76]	; (80036dc <MX_GPIO_Init+0x210>)
 800368e:	f009 fb37 	bl	800cd00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	2105      	movs	r1, #5
 8003696:	2009      	movs	r0, #9
 8003698:	f008 fefa 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800369c:	2009      	movs	r0, #9
 800369e:	f008 ff13 	bl	800c4c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2105      	movs	r1, #5
 80036a6:	200a      	movs	r0, #10
 80036a8:	f008 fef2 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80036ac:	200a      	movs	r0, #10
 80036ae:	f008 ff0b 	bl	800c4c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2105      	movs	r1, #5
 80036b6:	2017      	movs	r0, #23
 80036b8:	f008 feea 	bl	800c490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036bc:	2017      	movs	r0, #23
 80036be:	f008 ff03 	bl	800c4c8 <HAL_NVIC_EnableIRQ>

}
 80036c2:	bf00      	nop
 80036c4:	3738      	adds	r7, #56	; 0x38
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020800 	.word	0x40020800
 80036d4:	40021800 	.word	0x40021800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	40020400 	.word	0x40020400

080036e0 <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <MX_I2C3_Init+0x50>)
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <MX_I2C3_Init+0x54>)
 80036e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <MX_I2C3_Init+0x50>)
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <MX_I2C3_Init+0x58>)
 80036ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <MX_I2C3_Init+0x50>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <MX_I2C3_Init+0x50>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <MX_I2C3_Init+0x50>)
 80036fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003702:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <MX_I2C3_Init+0x50>)
 8003706:	2200      	movs	r2, #0
 8003708:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <MX_I2C3_Init+0x50>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <MX_I2C3_Init+0x50>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <MX_I2C3_Init+0x50>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800371c:	4804      	ldr	r0, [pc, #16]	; (8003730 <MX_I2C3_Init+0x50>)
 800371e:	f009 fcbd 	bl	800d09c <HAL_I2C_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003728:	f000 f989 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20001214 	.word	0x20001214
 8003734:	40005c00 	.word	0x40005c00
 8003738:	00061a80 	.word	0x00061a80

0800373c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5b      	ldr	r2, [pc, #364]	; (80038c8 <HAL_I2C_MspInit+0x18c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	f040 80b0 	bne.w	80038c0 <HAL_I2C_MspInit+0x184>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	4b59      	ldr	r3, [pc, #356]	; (80038cc <HAL_I2C_MspInit+0x190>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	4a58      	ldr	r2, [pc, #352]	; (80038cc <HAL_I2C_MspInit+0x190>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6313      	str	r3, [r2, #48]	; 0x30
 8003770:	4b56      	ldr	r3, [pc, #344]	; (80038cc <HAL_I2C_MspInit+0x190>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	4b52      	ldr	r3, [pc, #328]	; (80038cc <HAL_I2C_MspInit+0x190>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	4a51      	ldr	r2, [pc, #324]	; (80038cc <HAL_I2C_MspInit+0x190>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6313      	str	r3, [r2, #48]	; 0x30
 800378c:	4b4f      	ldr	r3, [pc, #316]	; (80038cc <HAL_I2C_MspInit+0x190>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800379c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800379e:	2312      	movs	r3, #18
 80037a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a6:	2303      	movs	r3, #3
 80037a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037aa:	2304      	movs	r3, #4
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ae:	f107 0314 	add.w	r3, r7, #20
 80037b2:	4619      	mov	r1, r3
 80037b4:	4846      	ldr	r0, [pc, #280]	; (80038d0 <HAL_I2C_MspInit+0x194>)
 80037b6:	f009 faa3 	bl	800cd00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037c0:	2312      	movs	r3, #18
 80037c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037c4:	2301      	movs	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c8:	2303      	movs	r3, #3
 80037ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037cc:	2304      	movs	r3, #4
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4619      	mov	r1, r3
 80037d6:	483f      	ldr	r0, [pc, #252]	; (80038d4 <HAL_I2C_MspInit+0x198>)
 80037d8:	f009 fa92 	bl	800cd00 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_I2C_MspInit+0x190>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	4a39      	ldr	r2, [pc, #228]	; (80038cc <HAL_I2C_MspInit+0x190>)
 80037e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037ea:	6413      	str	r3, [r2, #64]	; 0x40
 80037ec:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_I2C_MspInit+0x190>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 80037f8:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 80037fa:	4a38      	ldr	r2, [pc, #224]	; (80038dc <HAL_I2C_MspInit+0x1a0>)
 80037fc:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 80037fe:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 8003800:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003804:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003806:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 8003808:	2200      	movs	r2, #0
 800380a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800380c:	4b32      	ldr	r3, [pc, #200]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 800380e:	2200      	movs	r2, #0
 8003810:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003812:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 8003814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003818:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800381a:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 800381c:	2200      	movs	r2, #0
 800381e:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003820:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 8003822:	2200      	movs	r2, #0
 8003824:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8003826:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 8003828:	2200      	movs	r2, #0
 800382a:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800382c:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 800382e:	2200      	movs	r2, #0
 8003830:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003832:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 8003834:	2200      	movs	r2, #0
 8003836:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8003838:	4827      	ldr	r0, [pc, #156]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 800383a:	f008 fe53 	bl	800c4e4 <HAL_DMA_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8003844:	f000 f8fb 	bl	8003a3e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a23      	ldr	r2, [pc, #140]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
 800384e:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <HAL_I2C_MspInit+0x19c>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8003854:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 8003856:	4a23      	ldr	r2, [pc, #140]	; (80038e4 <HAL_I2C_MspInit+0x1a8>)
 8003858:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800385a:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 800385c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003860:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003862:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003868:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800386e:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 8003870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003874:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003876:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 8003878:	2200      	movs	r2, #0
 800387a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8003882:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 8003884:	2200      	movs	r2, #0
 8003886:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 800388a:	2200      	movs	r2, #0
 800388c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800388e:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 8003890:	2200      	movs	r2, #0
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8003894:	4812      	ldr	r0, [pc, #72]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 8003896:	f008 fe25 	bl	800c4e4 <HAL_DMA_Init>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80038a0:	f000 f8cd 	bl	8003a3e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 80038a8:	635a      	str	r2, [r3, #52]	; 0x34
 80038aa:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <HAL_I2C_MspInit+0x1a4>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80038b0:	2200      	movs	r2, #0
 80038b2:	2105      	movs	r1, #5
 80038b4:	2049      	movs	r0, #73	; 0x49
 80038b6:	f008 fdeb 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80038ba:	2049      	movs	r0, #73	; 0x49
 80038bc:	f008 fe04 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80038c0:	bf00      	nop
 80038c2:	3728      	adds	r7, #40	; 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40005c00 	.word	0x40005c00
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020800 	.word	0x40020800
 80038d4:	40020000 	.word	0x40020000
 80038d8:	20001268 	.word	0x20001268
 80038dc:	40026040 	.word	0x40026040
 80038e0:	200012c8 	.word	0x200012c8
 80038e4:	40026070 	.word	0x40026070

080038e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038ec:	f007 fbd0 	bl	800b090 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038f0:	f000 f82c 	bl	800394c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038f4:	f7ff fdea 	bl	80034cc <MX_GPIO_Init>
  MX_DMA_Init();
 80038f8:	f7ff fbf2 	bl	80030e0 <MX_DMA_Init>
  MX_CAN1_Init();
 80038fc:	f7ff fac4 	bl	8002e88 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003900:	f7ff faf8 	bl	8002ef4 <MX_CAN2_Init>
  MX_TIM5_Init();
 8003904:	f000 fcde 	bl	80042c4 <MX_TIM5_Init>
  MX_TIM10_Init();
 8003908:	f000 fd4c 	bl	80043a4 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 800390c:	f000 fed8 	bl	80046c0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003910:	f000 ff00 	bl	8004714 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003914:	f000 ff2a 	bl	800476c <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8003918:	f000 f8cc 	bl	8003ab4 <MX_SPI1_Init>
  MX_I2C3_Init();
 800391c:	f7ff fee0 	bl	80036e0 <MX_I2C3_Init>
  MX_ADC3_Init();
 8003920:	f7ff fa1c 	bl	8002d5c <MX_ADC3_Init>
  MX_TIM3_Init();
 8003924:	f000 fc02 	bl	800412c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003928:	f000 fc72 	bl	8004210 <MX_TIM4_Init>
  MX_TIM1_Init();
 800392c:	f000 fb6e 	bl	800400c <MX_TIM1_Init>
  MX_RNG_Init();
 8003930:	f000 f88a 	bl	8003a48 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  startup_task();
 8003934:	f007 f9c4 	bl	800acc0 <startup_task>
  HAL_TIM_Base_Start(&htim3); //start micros clock
 8003938:	4803      	ldr	r0, [pc, #12]	; (8003948 <main+0x60>)
 800393a:	f00d fd2f 	bl	801139c <HAL_TIM_Base_Start>
//  HAL_RNG_GenerateRandomNumber(hrng, random32bit)
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800393e:	f7ff fc83 	bl	8003248 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003942:	f013 fb91 	bl	8017068 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003946:	e7fe      	b.n	8003946 <main+0x5e>
 8003948:	200014e0 	.word	0x200014e0

0800394c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b094      	sub	sp, #80	; 0x50
 8003950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003952:	f107 0320 	add.w	r3, r7, #32
 8003956:	2230      	movs	r2, #48	; 0x30
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f017 fbe9 	bl	801b132 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003970:	2300      	movs	r3, #0
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <SystemClock_Config+0xcc>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	4a27      	ldr	r2, [pc, #156]	; (8003a18 <SystemClock_Config+0xcc>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	6413      	str	r3, [r2, #64]	; 0x40
 8003980:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <SystemClock_Config+0xcc>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800398c:	2300      	movs	r3, #0
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <SystemClock_Config+0xd0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a21      	ldr	r2, [pc, #132]	; (8003a1c <SystemClock_Config+0xd0>)
 8003996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <SystemClock_Config+0xd0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039a8:	2301      	movs	r3, #1
 80039aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039b2:	2302      	movs	r3, #2
 80039b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80039bc:	2306      	movs	r3, #6
 80039be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80039c0:	23a8      	movs	r3, #168	; 0xa8
 80039c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039c4:	2302      	movs	r3, #2
 80039c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80039c8:	2307      	movs	r3, #7
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039cc:	f107 0320 	add.w	r3, r7, #32
 80039d0:	4618      	mov	r0, r3
 80039d2:	f00c fb73 	bl	80100bc <HAL_RCC_OscConfig>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039dc:	f000 f82f 	bl	8003a3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039e0:	230f      	movs	r3, #15
 80039e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039e4:	2302      	movs	r3, #2
 80039e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	2105      	movs	r1, #5
 80039fe:	4618      	mov	r0, r3
 8003a00:	f00c fdd4 	bl	80105ac <HAL_RCC_ClockConfig>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a0a:	f000 f818 	bl	8003a3e <Error_Handler>
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3750      	adds	r7, #80	; 0x50
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000

08003a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a32:	f007 fb4f 	bl	800b0d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a42:	b672      	cpsid	i
}
 8003a44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a46:	e7fe      	b.n	8003a46 <Error_Handler+0x8>

08003a48 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <MX_RNG_Init+0x20>)
 8003a4e:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <MX_RNG_Init+0x24>)
 8003a50:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003a52:	4805      	ldr	r0, [pc, #20]	; (8003a68 <MX_RNG_Init+0x20>)
 8003a54:	f00c ffbc 	bl	80109d0 <HAL_RNG_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003a5e:	f7ff ffee 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20001328 	.word	0x20001328
 8003a6c:	50060800 	.word	0x50060800

08003a70 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_RNG_MspInit+0x3c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10d      	bne.n	8003a9e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_RNG_MspInit+0x40>)
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_RNG_MspInit+0x40>)
 8003a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a90:	6353      	str	r3, [r2, #52]	; 0x34
 8003a92:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <HAL_RNG_MspInit+0x40>)
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	50060800 	.word	0x50060800
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ab8:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003aba:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <MX_SPI1_Init+0x68>)
 8003abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ac6:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003ae8:	2228      	movs	r2, #40	; 0x28
 8003aea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af8:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003b00:	220a      	movs	r2, #10
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b04:	4804      	ldr	r0, [pc, #16]	; (8003b18 <MX_SPI1_Init+0x64>)
 8003b06:	f00c ff8d 	bl	8010a24 <HAL_SPI_Init>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b10:	f7ff ff95 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20001338 	.word	0x20001338
 8003b1c:	40013000 	.word	0x40013000

08003b20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 0314 	add.w	r3, r7, #20
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a56      	ldr	r2, [pc, #344]	; (8003c98 <HAL_SPI_MspInit+0x178>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	f040 80a6 	bne.w	8003c90 <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	4b54      	ldr	r3, [pc, #336]	; (8003c9c <HAL_SPI_MspInit+0x17c>)
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	4a53      	ldr	r2, [pc, #332]	; (8003c9c <HAL_SPI_MspInit+0x17c>)
 8003b4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b52:	6453      	str	r3, [r2, #68]	; 0x44
 8003b54:	4b51      	ldr	r3, [pc, #324]	; (8003c9c <HAL_SPI_MspInit+0x17c>)
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <HAL_SPI_MspInit+0x17c>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_SPI_MspInit+0x17c>)
 8003b6a:	f043 0302 	orr.w	r3, r3, #2
 8003b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b70:	4b4a      	ldr	r3, [pc, #296]	; (8003c9c <HAL_SPI_MspInit+0x17c>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <HAL_SPI_MspInit+0x17c>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	4a45      	ldr	r2, [pc, #276]	; (8003c9c <HAL_SPI_MspInit+0x17c>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8c:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <HAL_SPI_MspInit+0x17c>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003b98:	2318      	movs	r3, #24
 8003b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ba8:	2305      	movs	r3, #5
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	483b      	ldr	r0, [pc, #236]	; (8003ca0 <HAL_SPI_MspInit+0x180>)
 8003bb4:	f009 f8a4 	bl	800cd00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bc8:	2305      	movs	r3, #5
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4834      	ldr	r0, [pc, #208]	; (8003ca4 <HAL_SPI_MspInit+0x184>)
 8003bd4:	f009 f894 	bl	800cd00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003bd8:	4b33      	ldr	r3, [pc, #204]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003bda:	4a34      	ldr	r2, [pc, #208]	; (8003cac <HAL_SPI_MspInit+0x18c>)
 8003bdc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003bde:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003be0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003be4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003be6:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bec:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bf2:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bf8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c00:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003c06:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c0c:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c12:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003c18:	4823      	ldr	r0, [pc, #140]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003c1a:	f008 fc63 	bl	800c4e4 <HAL_DMA_Init>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8003c24:	f7ff ff0b 	bl	8003a3e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003c2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <HAL_SPI_MspInit+0x188>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c36:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <HAL_SPI_MspInit+0x194>)
 8003c38:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c3c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003c40:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c44:	2240      	movs	r2, #64	; 0x40
 8003c46:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c4e:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c54:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c56:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003c62:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003c74:	480e      	ldr	r0, [pc, #56]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c76:	f008 fc35 	bl	800c4e4 <HAL_DMA_Init>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8003c80:	f7ff fedd 	bl	8003a3e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c88:	649a      	str	r2, [r3, #72]	; 0x48
 8003c8a:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <HAL_SPI_MspInit+0x190>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c90:	bf00      	nop
 8003c92:	3728      	adds	r7, #40	; 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40013000 	.word	0x40013000
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40020400 	.word	0x40020400
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	20001390 	.word	0x20001390
 8003cac:	40026410 	.word	0x40026410
 8003cb0:	200013f0 	.word	0x200013f0
 8003cb4:	40026458 	.word	0x40026458

08003cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_MspInit+0x54>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <HAL_MspInit+0x54>)
 8003cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <HAL_MspInit+0x54>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_MspInit+0x54>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <HAL_MspInit+0x54>)
 8003ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cea:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <HAL_MspInit+0x54>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	210f      	movs	r1, #15
 8003cfa:	f06f 0001 	mvn.w	r0, #1
 8003cfe:	f008 fbc7 	bl	800c490 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800

08003d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08e      	sub	sp, #56	; 0x38
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_InitTick+0xe8>)
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	4a33      	ldr	r2, [pc, #204]	; (8003df8 <HAL_InitTick+0xe8>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d30:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_InitTick+0xe8>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d3c:	f107 0210 	add.w	r2, r7, #16
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f00c fe10 	bl	801096c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d56:	f00c fde1 	bl	801091c <HAL_RCC_GetPCLK1Freq>
 8003d5a:	6378      	str	r0, [r7, #52]	; 0x34
 8003d5c:	e004      	b.n	8003d68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d5e:	f00c fddd 	bl	801091c <HAL_RCC_GetPCLK1Freq>
 8003d62:	4603      	mov	r3, r0
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <HAL_InitTick+0xec>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	0c9b      	lsrs	r3, r3, #18
 8003d72:	3b01      	subs	r3, #1
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <HAL_InitTick+0xf0>)
 8003d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003d7e:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <HAL_InitTick+0xf0>)
 8003d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d84:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003d86:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <HAL_InitTick+0xf0>)
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003d8c:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <HAL_InitTick+0xf0>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d92:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_InitTick+0xf0>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <HAL_InitTick+0xf0>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003d9e:	4818      	ldr	r0, [pc, #96]	; (8003e00 <HAL_InitTick+0xf0>)
 8003da0:	f00d faac 	bl	80112fc <HAL_TIM_Base_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003daa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d11b      	bne.n	8003dea <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003db2:	4813      	ldr	r0, [pc, #76]	; (8003e00 <HAL_InitTick+0xf0>)
 8003db4:	f00d fb5a 	bl	801146c <HAL_TIM_Base_Start_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003dbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d111      	bne.n	8003dea <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003dc6:	201c      	movs	r0, #28
 8003dc8:	f008 fb7e 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	d808      	bhi.n	8003de4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	201c      	movs	r0, #28
 8003dd8:	f008 fb5a 	bl	800c490 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ddc:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <HAL_InitTick+0xf4>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e002      	b.n	8003dea <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003dea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3738      	adds	r7, #56	; 0x38
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	431bde83 	.word	0x431bde83
 8003e00:	20001450 	.word	0x20001450
 8003e04:	20000010 	.word	0x20000010

08003e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e0c:	e7fe      	b.n	8003e0c <NMI_Handler+0x4>

08003e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e12:	e7fe      	b.n	8003e12 <HardFault_Handler+0x4>

08003e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e18:	e7fe      	b.n	8003e18 <MemManage_Handler+0x4>

08003e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e1e:	e7fe      	b.n	8003e1e <BusFault_Handler+0x4>

08003e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e24:	e7fe      	b.n	8003e24 <UsageFault_Handler+0x4>

08003e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8003e38:	2008      	movs	r0, #8
 8003e3a:	f009 f917 	bl	800d06c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8003e46:	2010      	movs	r0, #16
 8003e48:	f009 f910 	bl	800d06c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <DMA1_Stream1_IRQHandler+0x10>)
 8003e56:	f008 fcdd 	bl	800c814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	2000172c 	.word	0x2000172c

08003e64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <DMA1_Stream2_IRQHandler+0x10>)
 8003e6a:	f008 fcd3 	bl	800c814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20001268 	.word	0x20001268

08003e78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <DMA1_Stream4_IRQHandler+0x10>)
 8003e7e:	f008 fcc9 	bl	800c814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200012c8 	.word	0x200012c8

08003e8c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e90:	4802      	ldr	r0, [pc, #8]	; (8003e9c <CAN1_RX0_IRQHandler+0x10>)
 8003e92:	f008 f81f 	bl	800bed4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200003ec 	.word	0x200003ec

08003ea0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ea4:	4802      	ldr	r0, [pc, #8]	; (8003eb0 <CAN1_RX1_IRQHandler+0x10>)
 8003ea6:	f008 f815 	bl	800bed4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	200003ec 	.word	0x200003ec

08003eb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8003eb8:	2020      	movs	r0, #32
 8003eba:	f009 f8d7 	bl	800d06c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <TIM2_IRQHandler+0x10>)
 8003eca:	f00d fcaf 	bl	801182c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20001450 	.word	0x20001450

08003ed8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003edc:	4803      	ldr	r0, [pc, #12]	; (8003eec <TIM3_IRQHandler+0x14>)
 8003ede:	f00d fca5 	bl	801182c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  if (__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_UPDATE) == 1){
	  micros_tick();
 8003ee2:	f7fe f91f 	bl	8002124 <micros_tick>
//  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200014e0 	.word	0x200014e0

08003ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <USART1_IRQHandler+0x10>)
 8003ef6:	f00e fd31 	bl	801295c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20001600 	.word	0x20001600

08003f04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f08:	4802      	ldr	r0, [pc, #8]	; (8003f14 <USART3_IRQHandler+0x10>)
 8003f0a:	f00e fd27 	bl	801295c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20001644 	.word	0x20001644

08003f18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <DMA2_Stream0_IRQHandler+0x10>)
 8003f1e:	f008 fc79 	bl	800c814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20001390 	.word	0x20001390

08003f2c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <DMA2_Stream1_IRQHandler+0x10>)
 8003f32:	f008 fc6f 	bl	800c814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	2000178c 	.word	0x2000178c

08003f40 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <DMA2_Stream3_IRQHandler+0x10>)
 8003f46:	f008 fc65 	bl	800c814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200013f0 	.word	0x200013f0

08003f54 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003f58:	4802      	ldr	r0, [pc, #8]	; (8003f64 <CAN2_RX0_IRQHandler+0x10>)
 8003f5a:	f007 ffbb 	bl	800bed4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000414 	.word	0x20000414

08003f68 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003f6c:	4802      	ldr	r0, [pc, #8]	; (8003f78 <CAN2_RX1_IRQHandler+0x10>)
 8003f6e:	f007 ffb1 	bl	800bed4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000414 	.word	0x20000414

08003f7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003f80:	4802      	ldr	r0, [pc, #8]	; (8003f8c <OTG_FS_IRQHandler+0x10>)
 8003f82:	f00a ff6e 	bl	800ee62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2000e26c 	.word	0x2000e26c

08003f90 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f94:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <DMA2_Stream5_IRQHandler+0x10>)
 8003f96:	f008 fc3d 	bl	800c814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200016cc 	.word	0x200016cc

08003fa4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003fa8:	4802      	ldr	r0, [pc, #8]	; (8003fb4 <DMA2_Stream6_IRQHandler+0x10>)
 8003faa:	f008 fc33 	bl	800c814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200017ec 	.word	0x200017ec

08003fb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003fbc:	4802      	ldr	r0, [pc, #8]	; (8003fc8 <USART6_IRQHandler+0x10>)
 8003fbe:	f00e fccd 	bl	801295c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20001688 	.word	0x20001688

08003fcc <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003fd0:	4802      	ldr	r0, [pc, #8]	; (8003fdc <I2C3_ER_IRQHandler+0x10>)
 8003fd2:	f009 fe5b 	bl	800dc8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20001214 	.word	0x20001214

08003fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fe4:	4b08      	ldr	r3, [pc, #32]	; (8004008 <SystemInit+0x28>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	4a07      	ldr	r2, [pc, #28]	; (8004008 <SystemInit+0x28>)
 8003fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ff4:	4b04      	ldr	r3, [pc, #16]	; (8004008 <SystemInit+0x28>)
 8003ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ffa:	609a      	str	r2, [r3, #8]
#endif
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b092      	sub	sp, #72	; 0x48
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004012:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800401c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
 800402c:	615a      	str	r2, [r3, #20]
 800402e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	2220      	movs	r2, #32
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f017 f87b 	bl	801b132 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800403c:	4b39      	ldr	r3, [pc, #228]	; (8004124 <MX_TIM1_Init+0x118>)
 800403e:	4a3a      	ldr	r2, [pc, #232]	; (8004128 <MX_TIM1_Init+0x11c>)
 8004040:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <MX_TIM1_Init+0x118>)
 8004044:	22a7      	movs	r2, #167	; 0xa7
 8004046:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <MX_TIM1_Init+0x118>)
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800404e:	4b35      	ldr	r3, [pc, #212]	; (8004124 <MX_TIM1_Init+0x118>)
 8004050:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004054:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004056:	4b33      	ldr	r3, [pc, #204]	; (8004124 <MX_TIM1_Init+0x118>)
 8004058:	2200      	movs	r2, #0
 800405a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800405c:	4b31      	ldr	r3, [pc, #196]	; (8004124 <MX_TIM1_Init+0x118>)
 800405e:	2200      	movs	r2, #0
 8004060:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004062:	4b30      	ldr	r3, [pc, #192]	; (8004124 <MX_TIM1_Init+0x118>)
 8004064:	2200      	movs	r2, #0
 8004066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004068:	482e      	ldr	r0, [pc, #184]	; (8004124 <MX_TIM1_Init+0x118>)
 800406a:	f00d fac8 	bl	80115fe <HAL_TIM_PWM_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004074:	f7ff fce3 	bl	8003a3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004078:	2300      	movs	r3, #0
 800407a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407c:	2300      	movs	r3, #0
 800407e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004080:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004084:	4619      	mov	r1, r3
 8004086:	4827      	ldr	r0, [pc, #156]	; (8004124 <MX_TIM1_Init+0x118>)
 8004088:	f00e f9f6 	bl	8012478 <HAL_TIMEx_MasterConfigSynchronization>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004092:	f7ff fcd4 	bl	8003a3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004096:	2360      	movs	r3, #96	; 0x60
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040a2:	2300      	movs	r3, #0
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040ae:	2300      	movs	r3, #0
 80040b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b6:	2200      	movs	r2, #0
 80040b8:	4619      	mov	r1, r3
 80040ba:	481a      	ldr	r0, [pc, #104]	; (8004124 <MX_TIM1_Init+0x118>)
 80040bc:	f00d fd1a 	bl	8011af4 <HAL_TIM_PWM_ConfigChannel>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80040c6:	f7ff fcba 	bl	8003a3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ce:	2204      	movs	r2, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4814      	ldr	r0, [pc, #80]	; (8004124 <MX_TIM1_Init+0x118>)
 80040d4:	f00d fd0e 	bl	8011af4 <HAL_TIM_PWM_ConfigChannel>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80040de:	f7ff fcae 	bl	8003a3e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4807      	ldr	r0, [pc, #28]	; (8004124 <MX_TIM1_Init+0x118>)
 8004106:	f00e fa33 	bl	8012570 <HAL_TIMEx_ConfigBreakDeadTime>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8004110:	f7ff fc95 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004114:	4803      	ldr	r0, [pc, #12]	; (8004124 <MX_TIM1_Init+0x118>)
 8004116:	f000 fa1f 	bl	8004558 <HAL_TIM_MspPostInit>

}
 800411a:	bf00      	nop
 800411c:	3748      	adds	r7, #72	; 0x48
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20001498 	.word	0x20001498
 8004128:	40010000 	.word	0x40010000

0800412c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	; 0x38
 8004130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	609a      	str	r2, [r3, #8]
 800413e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004140:	f107 0320 	add.w	r3, r7, #32
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
 8004158:	615a      	str	r2, [r3, #20]
 800415a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <MX_TIM3_Init+0xdc>)
 800415e:	4a2b      	ldr	r2, [pc, #172]	; (800420c <MX_TIM3_Init+0xe0>)
 8004160:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 8004162:	4b29      	ldr	r3, [pc, #164]	; (8004208 <MX_TIM3_Init+0xdc>)
 8004164:	22a7      	movs	r2, #167	; 0xa7
 8004166:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <MX_TIM3_Init+0xdc>)
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 800416e:	4b26      	ldr	r3, [pc, #152]	; (8004208 <MX_TIM3_Init+0xdc>)
 8004170:	2201      	movs	r2, #1
 8004172:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004174:	4b24      	ldr	r3, [pc, #144]	; (8004208 <MX_TIM3_Init+0xdc>)
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800417a:	4b23      	ldr	r3, [pc, #140]	; (8004208 <MX_TIM3_Init+0xdc>)
 800417c:	2200      	movs	r2, #0
 800417e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004180:	4821      	ldr	r0, [pc, #132]	; (8004208 <MX_TIM3_Init+0xdc>)
 8004182:	f00d f8bb 	bl	80112fc <HAL_TIM_Base_Init>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800418c:	f7ff fc57 	bl	8003a3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800419a:	4619      	mov	r1, r3
 800419c:	481a      	ldr	r0, [pc, #104]	; (8004208 <MX_TIM3_Init+0xdc>)
 800419e:	f00d fd6b 	bl	8011c78 <HAL_TIM_ConfigClockSource>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80041a8:	f7ff fc49 	bl	8003a3e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80041ac:	4816      	ldr	r0, [pc, #88]	; (8004208 <MX_TIM3_Init+0xdc>)
 80041ae:	f00d f9cd 	bl	801154c <HAL_TIM_OC_Init>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80041b8:	f7ff fc41 	bl	8003a3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041bc:	2300      	movs	r3, #0
 80041be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041c4:	f107 0320 	add.w	r3, r7, #32
 80041c8:	4619      	mov	r1, r3
 80041ca:	480f      	ldr	r0, [pc, #60]	; (8004208 <MX_TIM3_Init+0xdc>)
 80041cc:	f00e f954 	bl	8012478 <HAL_TIMEx_MasterConfigSynchronization>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80041d6:	f7ff fc32 	bl	8003a3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	2200      	movs	r2, #0
 80041ee:	4619      	mov	r1, r3
 80041f0:	4805      	ldr	r0, [pc, #20]	; (8004208 <MX_TIM3_Init+0xdc>)
 80041f2:	f00d fc23 	bl	8011a3c <HAL_TIM_OC_ConfigChannel>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80041fc:	f7ff fc1f 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004200:	bf00      	nop
 8004202:	3738      	adds	r7, #56	; 0x38
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200014e0 	.word	0x200014e0
 800420c:	40000400 	.word	0x40000400

08004210 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004216:	f107 0320 	add.w	r3, r7, #32
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004220:	1d3b      	adds	r3, r7, #4
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	609a      	str	r2, [r3, #8]
 800422a:	60da      	str	r2, [r3, #12]
 800422c:	611a      	str	r2, [r3, #16]
 800422e:	615a      	str	r2, [r3, #20]
 8004230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004232:	4b22      	ldr	r3, [pc, #136]	; (80042bc <MX_TIM4_Init+0xac>)
 8004234:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <MX_TIM4_Init+0xb0>)
 8004236:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <MX_TIM4_Init+0xac>)
 800423a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800423e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <MX_TIM4_Init+0xac>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004246:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <MX_TIM4_Init+0xac>)
 8004248:	f240 32e7 	movw	r2, #999	; 0x3e7
 800424c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <MX_TIM4_Init+0xac>)
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <MX_TIM4_Init+0xac>)
 8004256:	2200      	movs	r2, #0
 8004258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800425a:	4818      	ldr	r0, [pc, #96]	; (80042bc <MX_TIM4_Init+0xac>)
 800425c:	f00d f9cf 	bl	80115fe <HAL_TIM_PWM_Init>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8004266:	f7ff fbea 	bl	8003a3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426e:	2300      	movs	r3, #0
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004272:	f107 0320 	add.w	r3, r7, #32
 8004276:	4619      	mov	r1, r3
 8004278:	4810      	ldr	r0, [pc, #64]	; (80042bc <MX_TIM4_Init+0xac>)
 800427a:	f00e f8fd 	bl	8012478 <HAL_TIMEx_MasterConfigSynchronization>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004284:	f7ff fbdb 	bl	8003a3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004288:	2360      	movs	r3, #96	; 0x60
 800428a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	2208      	movs	r2, #8
 800429c:	4619      	mov	r1, r3
 800429e:	4807      	ldr	r0, [pc, #28]	; (80042bc <MX_TIM4_Init+0xac>)
 80042a0:	f00d fc28 	bl	8011af4 <HAL_TIM_PWM_ConfigChannel>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80042aa:	f7ff fbc8 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80042ae:	4803      	ldr	r0, [pc, #12]	; (80042bc <MX_TIM4_Init+0xac>)
 80042b0:	f000 f952 	bl	8004558 <HAL_TIM_MspPostInit>

}
 80042b4:	bf00      	nop
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20001528 	.word	0x20001528
 80042c0:	40000800 	.word	0x40000800

080042c4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ca:	f107 0320 	add.w	r3, r7, #32
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	611a      	str	r2, [r3, #16]
 80042e2:	615a      	str	r2, [r3, #20]
 80042e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80042e6:	4b2d      	ldr	r3, [pc, #180]	; (800439c <MX_TIM5_Init+0xd8>)
 80042e8:	4a2d      	ldr	r2, [pc, #180]	; (80043a0 <MX_TIM5_Init+0xdc>)
 80042ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1317;
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <MX_TIM5_Init+0xd8>)
 80042ee:	f240 5225 	movw	r2, #1317	; 0x525
 80042f2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <MX_TIM5_Init+0xd8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 80042fa:	4b28      	ldr	r3, [pc, #160]	; (800439c <MX_TIM5_Init+0xd8>)
 80042fc:	22ff      	movs	r2, #255	; 0xff
 80042fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004300:	4b26      	ldr	r3, [pc, #152]	; (800439c <MX_TIM5_Init+0xd8>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <MX_TIM5_Init+0xd8>)
 8004308:	2280      	movs	r2, #128	; 0x80
 800430a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800430c:	4823      	ldr	r0, [pc, #140]	; (800439c <MX_TIM5_Init+0xd8>)
 800430e:	f00d f976 	bl	80115fe <HAL_TIM_PWM_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8004318:	f7ff fb91 	bl	8003a3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800431c:	2300      	movs	r3, #0
 800431e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004324:	f107 0320 	add.w	r3, r7, #32
 8004328:	4619      	mov	r1, r3
 800432a:	481c      	ldr	r0, [pc, #112]	; (800439c <MX_TIM5_Init+0xd8>)
 800432c:	f00e f8a4 	bl	8012478 <HAL_TIMEx_MasterConfigSynchronization>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8004336:	f7ff fb82 	bl	8003a3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800433a:	2360      	movs	r3, #96	; 0x60
 800433c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004342:	2302      	movs	r3, #2
 8004344:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004346:	2304      	movs	r3, #4
 8004348:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	2200      	movs	r2, #0
 800434e:	4619      	mov	r1, r3
 8004350:	4812      	ldr	r0, [pc, #72]	; (800439c <MX_TIM5_Init+0xd8>)
 8004352:	f00d fbcf 	bl	8011af4 <HAL_TIM_PWM_ConfigChannel>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800435c:	f7ff fb6f 	bl	8003a3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004360:	1d3b      	adds	r3, r7, #4
 8004362:	2204      	movs	r2, #4
 8004364:	4619      	mov	r1, r3
 8004366:	480d      	ldr	r0, [pc, #52]	; (800439c <MX_TIM5_Init+0xd8>)
 8004368:	f00d fbc4 	bl	8011af4 <HAL_TIM_PWM_ConfigChannel>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8004372:	f7ff fb64 	bl	8003a3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	2208      	movs	r2, #8
 800437a:	4619      	mov	r1, r3
 800437c:	4807      	ldr	r0, [pc, #28]	; (800439c <MX_TIM5_Init+0xd8>)
 800437e:	f00d fbb9 	bl	8011af4 <HAL_TIM_PWM_ConfigChannel>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8004388:	f7ff fb59 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <MX_TIM5_Init+0xd8>)
 800438e:	f000 f8e3 	bl	8004558 <HAL_TIM_MspPostInit>

}
 8004392:	bf00      	nop
 8004394:	3728      	adds	r7, #40	; 0x28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20001570 	.word	0x20001570
 80043a0:	40000c00 	.word	0x40000c00

080043a4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	611a      	str	r2, [r3, #16]
 80043b8:	615a      	str	r2, [r3, #20]
 80043ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80043bc:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <MX_TIM10_Init+0x94>)
 80043be:	4a1f      	ldr	r2, [pc, #124]	; (800443c <MX_TIM10_Init+0x98>)
 80043c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <MX_TIM10_Init+0x94>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <MX_TIM10_Init+0x94>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <MX_TIM10_Init+0x94>)
 80043d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <MX_TIM10_Init+0x94>)
 80043d8:	2200      	movs	r2, #0
 80043da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043dc:	4b16      	ldr	r3, [pc, #88]	; (8004438 <MX_TIM10_Init+0x94>)
 80043de:	2200      	movs	r2, #0
 80043e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80043e2:	4815      	ldr	r0, [pc, #84]	; (8004438 <MX_TIM10_Init+0x94>)
 80043e4:	f00c ff8a 	bl	80112fc <HAL_TIM_Base_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80043ee:	f7ff fb26 	bl	8003a3e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80043f2:	4811      	ldr	r0, [pc, #68]	; (8004438 <MX_TIM10_Init+0x94>)
 80043f4:	f00d f903 	bl	80115fe <HAL_TIM_PWM_Init>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80043fe:	f7ff fb1e 	bl	8003a3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004402:	2360      	movs	r3, #96	; 0x60
 8004404:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	2200      	movs	r2, #0
 8004416:	4619      	mov	r1, r3
 8004418:	4807      	ldr	r0, [pc, #28]	; (8004438 <MX_TIM10_Init+0x94>)
 800441a:	f00d fb6b 	bl	8011af4 <HAL_TIM_PWM_ConfigChannel>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004424:	f7ff fb0b 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004428:	4803      	ldr	r0, [pc, #12]	; (8004438 <MX_TIM10_Init+0x94>)
 800442a:	f000 f895 	bl	8004558 <HAL_TIM_MspPostInit>

}
 800442e:	bf00      	nop
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	200015b8 	.word	0x200015b8
 800443c:	40014400 	.word	0x40014400

08004440 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_TIM_PWM_MspInit+0x8c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_TIM_PWM_MspInit+0x90>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <HAL_TIM_PWM_MspInit+0x90>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6453      	str	r3, [r2, #68]	; 0x44
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <HAL_TIM_PWM_MspInit+0x90>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800446e:	e026      	b.n	80044be <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a17      	ldr	r2, [pc, #92]	; (80044d4 <HAL_TIM_PWM_MspInit+0x94>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <HAL_TIM_PWM_MspInit+0x90>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <HAL_TIM_PWM_MspInit+0x90>)
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	6413      	str	r3, [r2, #64]	; 0x40
 800448a:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HAL_TIM_PWM_MspInit+0x90>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
}
 8004496:	e012      	b.n	80044be <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a0e      	ldr	r2, [pc, #56]	; (80044d8 <HAL_TIM_PWM_MspInit+0x98>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10d      	bne.n	80044be <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HAL_TIM_PWM_MspInit+0x90>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <HAL_TIM_PWM_MspInit+0x90>)
 80044ac:	f043 0308 	orr.w	r3, r3, #8
 80044b0:	6413      	str	r3, [r2, #64]	; 0x40
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <HAL_TIM_PWM_MspInit+0x90>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00

080044dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_TIM_Base_MspInit+0x70>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d116      	bne.n	800451c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	4b17      	ldr	r3, [pc, #92]	; (8004550 <HAL_TIM_Base_MspInit+0x74>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_TIM_Base_MspInit+0x74>)
 80044f8:	f043 0302 	orr.w	r3, r3, #2
 80044fc:	6413      	str	r3, [r2, #64]	; 0x40
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <HAL_TIM_Base_MspInit+0x74>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800450a:	2200      	movs	r2, #0
 800450c:	2105      	movs	r1, #5
 800450e:	201d      	movs	r0, #29
 8004510:	f007 ffbe 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004514:	201d      	movs	r0, #29
 8004516:	f007 ffd7 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800451a:	e012      	b.n	8004542 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <HAL_TIM_Base_MspInit+0x78>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10d      	bne.n	8004542 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_TIM_Base_MspInit+0x74>)
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	4a08      	ldr	r2, [pc, #32]	; (8004550 <HAL_TIM_Base_MspInit+0x74>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	6453      	str	r3, [r2, #68]	; 0x44
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_TIM_Base_MspInit+0x74>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40000400 	.word	0x40000400
 8004550:	40023800 	.word	0x40023800
 8004554:	40014400 	.word	0x40014400

08004558 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08c      	sub	sp, #48	; 0x30
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a49      	ldr	r2, [pc, #292]	; (800469c <HAL_TIM_MspPostInit+0x144>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d11f      	bne.n	80045ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	4b48      	ldr	r3, [pc, #288]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	4a47      	ldr	r2, [pc, #284]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 8004584:	f043 0310 	orr.w	r3, r3, #16
 8004588:	6313      	str	r3, [r2, #48]	; 0x30
 800458a:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004596:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800459a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a4:	2300      	movs	r3, #0
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045a8:	2301      	movs	r3, #1
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045ac:	f107 031c 	add.w	r3, r7, #28
 80045b0:	4619      	mov	r1, r3
 80045b2:	483c      	ldr	r0, [pc, #240]	; (80046a4 <HAL_TIM_MspPostInit+0x14c>)
 80045b4:	f008 fba4 	bl	800cd00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80045b8:	e06c      	b.n	8004694 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <HAL_TIM_MspPostInit+0x150>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d11f      	bne.n	8004604 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	4a34      	ldr	r2, [pc, #208]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 80045ce:	f043 0308 	orr.w	r3, r3, #8
 80045d2:	6313      	str	r3, [r2, #48]	; 0x30
 80045d4:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80045e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e6:	2302      	movs	r3, #2
 80045e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ee:	2300      	movs	r3, #0
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045f2:	2302      	movs	r3, #2
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80045f6:	f107 031c 	add.w	r3, r7, #28
 80045fa:	4619      	mov	r1, r3
 80045fc:	482b      	ldr	r0, [pc, #172]	; (80046ac <HAL_TIM_MspPostInit+0x154>)
 80045fe:	f008 fb7f 	bl	800cd00 <HAL_GPIO_Init>
}
 8004602:	e047      	b.n	8004694 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM5)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <HAL_TIM_MspPostInit+0x158>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d11f      	bne.n	800464e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	4a22      	ldr	r2, [pc, #136]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 8004618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461c:	6313      	str	r3, [r2, #48]	; 0x30
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GREEN_LED_TIM_Pin|RED_LED_TIM_Pin|BLUE_LED_TIM_Pin;
 800462a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800462e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004630:	2302      	movs	r3, #2
 8004632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004638:	2300      	movs	r3, #0
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800463c:	2302      	movs	r3, #2
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004640:	f107 031c 	add.w	r3, r7, #28
 8004644:	4619      	mov	r1, r3
 8004646:	481b      	ldr	r0, [pc, #108]	; (80046b4 <HAL_TIM_MspPostInit+0x15c>)
 8004648:	f008 fb5a 	bl	800cd00 <HAL_GPIO_Init>
}
 800464c:	e022      	b.n	8004694 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM10)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <HAL_TIM_MspPostInit+0x160>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d11d      	bne.n	8004694 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 8004662:	f043 0320 	orr.w	r3, r3, #32
 8004666:	6313      	str	r3, [r2, #48]	; 0x30
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <HAL_TIM_MspPostInit+0x148>)
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_HEAT_TIM_Pin;
 8004674:	2340      	movs	r3, #64	; 0x40
 8004676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004678:	2302      	movs	r3, #2
 800467a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467c:	2300      	movs	r3, #0
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004680:	2300      	movs	r3, #0
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004684:	2303      	movs	r3, #3
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMU_HEAT_TIM_GPIO_Port, &GPIO_InitStruct);
 8004688:	f107 031c 	add.w	r3, r7, #28
 800468c:	4619      	mov	r1, r3
 800468e:	480b      	ldr	r0, [pc, #44]	; (80046bc <HAL_TIM_MspPostInit+0x164>)
 8004690:	f008 fb36 	bl	800cd00 <HAL_GPIO_Init>
}
 8004694:	bf00      	nop
 8004696:	3730      	adds	r7, #48	; 0x30
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40010000 	.word	0x40010000
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40020c00 	.word	0x40020c00
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40021c00 	.word	0x40021c00
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40021400 	.word	0x40021400

080046c0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <MX_USART1_UART_Init+0x4c>)
 80046c6:	4a12      	ldr	r2, [pc, #72]	; (8004710 <MX_USART1_UART_Init+0x50>)
 80046c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <MX_USART1_UART_Init+0x4c>)
 80046cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80046d2:	4b0e      	ldr	r3, [pc, #56]	; (800470c <MX_USART1_UART_Init+0x4c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80046d8:	4b0c      	ldr	r3, [pc, #48]	; (800470c <MX_USART1_UART_Init+0x4c>)
 80046da:	2200      	movs	r2, #0
 80046dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <MX_USART1_UART_Init+0x4c>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <MX_USART1_UART_Init+0x4c>)
 80046e6:	220c      	movs	r2, #12
 80046e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <MX_USART1_UART_Init+0x4c>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <MX_USART1_UART_Init+0x4c>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80046f6:	4805      	ldr	r0, [pc, #20]	; (800470c <MX_USART1_UART_Init+0x4c>)
 80046f8:	f00d ffa0 	bl	801263c <HAL_UART_Init>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004702:	f7ff f99c 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004706:	bf00      	nop
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20001600 	.word	0x20001600
 8004710:	40011000 	.word	0x40011000

08004714 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004718:	4b11      	ldr	r3, [pc, #68]	; (8004760 <MX_USART3_UART_Init+0x4c>)
 800471a:	4a12      	ldr	r2, [pc, #72]	; (8004764 <MX_USART3_UART_Init+0x50>)
 800471c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800471e:	4b10      	ldr	r3, [pc, #64]	; (8004760 <MX_USART3_UART_Init+0x4c>)
 8004720:	4a11      	ldr	r2, [pc, #68]	; (8004768 <MX_USART3_UART_Init+0x54>)
 8004722:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <MX_USART3_UART_Init+0x4c>)
 8004726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800472a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <MX_USART3_UART_Init+0x4c>)
 800472e:	2200      	movs	r2, #0
 8004730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <MX_USART3_UART_Init+0x4c>)
 8004734:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004738:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800473a:	4b09      	ldr	r3, [pc, #36]	; (8004760 <MX_USART3_UART_Init+0x4c>)
 800473c:	220c      	movs	r2, #12
 800473e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <MX_USART3_UART_Init+0x4c>)
 8004742:	2200      	movs	r2, #0
 8004744:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <MX_USART3_UART_Init+0x4c>)
 8004748:	2200      	movs	r2, #0
 800474a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800474c:	4804      	ldr	r0, [pc, #16]	; (8004760 <MX_USART3_UART_Init+0x4c>)
 800474e:	f00d ff75 	bl	801263c <HAL_UART_Init>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8004758:	f7ff f971 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800475c:	bf00      	nop
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20001644 	.word	0x20001644
 8004764:	40004800 	.word	0x40004800
 8004768:	000186a0 	.word	0x000186a0

0800476c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004770:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <MX_USART6_UART_Init+0x4c>)
 8004772:	4a12      	ldr	r2, [pc, #72]	; (80047bc <MX_USART6_UART_Init+0x50>)
 8004774:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <MX_USART6_UART_Init+0x4c>)
 8004778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800477c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800477e:	4b0e      	ldr	r3, [pc, #56]	; (80047b8 <MX_USART6_UART_Init+0x4c>)
 8004780:	2200      	movs	r2, #0
 8004782:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <MX_USART6_UART_Init+0x4c>)
 8004786:	2200      	movs	r2, #0
 8004788:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800478a:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <MX_USART6_UART_Init+0x4c>)
 800478c:	2200      	movs	r2, #0
 800478e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <MX_USART6_UART_Init+0x4c>)
 8004792:	220c      	movs	r2, #12
 8004794:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <MX_USART6_UART_Init+0x4c>)
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <MX_USART6_UART_Init+0x4c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80047a2:	4805      	ldr	r0, [pc, #20]	; (80047b8 <MX_USART6_UART_Init+0x4c>)
 80047a4:	f00d ff4a 	bl	801263c <HAL_UART_Init>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80047ae:	f7ff f946 	bl	8003a3e <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80047b2:	bf00      	nop
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20001688 	.word	0x20001688
 80047bc:	40011400 	.word	0x40011400

080047c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	; 0x38
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a78      	ldr	r2, [pc, #480]	; (80049c0 <HAL_UART_MspInit+0x200>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	f040 8083 	bne.w	80048ea <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047e4:	2300      	movs	r3, #0
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	4b76      	ldr	r3, [pc, #472]	; (80049c4 <HAL_UART_MspInit+0x204>)
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	4a75      	ldr	r2, [pc, #468]	; (80049c4 <HAL_UART_MspInit+0x204>)
 80047ee:	f043 0310 	orr.w	r3, r3, #16
 80047f2:	6453      	str	r3, [r2, #68]	; 0x44
 80047f4:	4b73      	ldr	r3, [pc, #460]	; (80049c4 <HAL_UART_MspInit+0x204>)
 80047f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	4b6f      	ldr	r3, [pc, #444]	; (80049c4 <HAL_UART_MspInit+0x204>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	4a6e      	ldr	r2, [pc, #440]	; (80049c4 <HAL_UART_MspInit+0x204>)
 800480a:	f043 0302 	orr.w	r3, r3, #2
 800480e:	6313      	str	r3, [r2, #48]	; 0x30
 8004810:	4b6c      	ldr	r3, [pc, #432]	; (80049c4 <HAL_UART_MspInit+0x204>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	4b68      	ldr	r3, [pc, #416]	; (80049c4 <HAL_UART_MspInit+0x204>)
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	4a67      	ldr	r2, [pc, #412]	; (80049c4 <HAL_UART_MspInit+0x204>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6313      	str	r3, [r2, #48]	; 0x30
 800482c:	4b65      	ldr	r3, [pc, #404]	; (80049c4 <HAL_UART_MspInit+0x204>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2302      	movs	r3, #2
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	2300      	movs	r3, #0
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004844:	2303      	movs	r3, #3
 8004846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004848:	2307      	movs	r3, #7
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800484c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004850:	4619      	mov	r1, r3
 8004852:	485d      	ldr	r0, [pc, #372]	; (80049c8 <HAL_UART_MspInit+0x208>)
 8004854:	f008 fa54 	bl	800cd00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485e:	2302      	movs	r3, #2
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004862:	2300      	movs	r3, #0
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004866:	2303      	movs	r3, #3
 8004868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800486a:	2307      	movs	r3, #7
 800486c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800486e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004872:	4619      	mov	r1, r3
 8004874:	4855      	ldr	r0, [pc, #340]	; (80049cc <HAL_UART_MspInit+0x20c>)
 8004876:	f008 fa43 	bl	800cd00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800487a:	4b55      	ldr	r3, [pc, #340]	; (80049d0 <HAL_UART_MspInit+0x210>)
 800487c:	4a55      	ldr	r2, [pc, #340]	; (80049d4 <HAL_UART_MspInit+0x214>)
 800487e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004880:	4b53      	ldr	r3, [pc, #332]	; (80049d0 <HAL_UART_MspInit+0x210>)
 8004882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004886:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004888:	4b51      	ldr	r3, [pc, #324]	; (80049d0 <HAL_UART_MspInit+0x210>)
 800488a:	2200      	movs	r2, #0
 800488c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800488e:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <HAL_UART_MspInit+0x210>)
 8004890:	2200      	movs	r2, #0
 8004892:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004894:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <HAL_UART_MspInit+0x210>)
 8004896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800489a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800489c:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <HAL_UART_MspInit+0x210>)
 800489e:	2200      	movs	r2, #0
 80048a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048a2:	4b4b      	ldr	r3, [pc, #300]	; (80049d0 <HAL_UART_MspInit+0x210>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80048a8:	4b49      	ldr	r3, [pc, #292]	; (80049d0 <HAL_UART_MspInit+0x210>)
 80048aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048b0:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_UART_MspInit+0x210>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048b6:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <HAL_UART_MspInit+0x210>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80048bc:	4844      	ldr	r0, [pc, #272]	; (80049d0 <HAL_UART_MspInit+0x210>)
 80048be:	f007 fe11 	bl	800c4e4 <HAL_DMA_Init>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80048c8:	f7ff f8b9 	bl	8003a3e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a40      	ldr	r2, [pc, #256]	; (80049d0 <HAL_UART_MspInit+0x210>)
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
 80048d2:	4a3f      	ldr	r2, [pc, #252]	; (80049d0 <HAL_UART_MspInit+0x210>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80048d8:	2200      	movs	r2, #0
 80048da:	2105      	movs	r1, #5
 80048dc:	2025      	movs	r0, #37	; 0x25
 80048de:	f007 fdd7 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80048e2:	2025      	movs	r0, #37	; 0x25
 80048e4:	f007 fdf0 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80048e8:	e116      	b.n	8004b18 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART3)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <HAL_UART_MspInit+0x218>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d179      	bne.n	80049e8 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	4b32      	ldr	r3, [pc, #200]	; (80049c4 <HAL_UART_MspInit+0x204>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <HAL_UART_MspInit+0x204>)
 80048fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004902:	6413      	str	r3, [r2, #64]	; 0x40
 8004904:	4b2f      	ldr	r3, [pc, #188]	; (80049c4 <HAL_UART_MspInit+0x204>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <HAL_UART_MspInit+0x204>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <HAL_UART_MspInit+0x204>)
 800491a:	f043 0304 	orr.w	r3, r3, #4
 800491e:	6313      	str	r3, [r2, #48]	; 0x30
 8004920:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <HAL_UART_MspInit+0x204>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800492c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004932:	2302      	movs	r3, #2
 8004934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004936:	2300      	movs	r3, #0
 8004938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493a:	2303      	movs	r3, #3
 800493c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800493e:	2307      	movs	r3, #7
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004946:	4619      	mov	r1, r3
 8004948:	4824      	ldr	r0, [pc, #144]	; (80049dc <HAL_UART_MspInit+0x21c>)
 800494a:	f008 f9d9 	bl	800cd00 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800494e:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <HAL_UART_MspInit+0x220>)
 8004950:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <HAL_UART_MspInit+0x224>)
 8004952:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <HAL_UART_MspInit+0x220>)
 8004956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800495a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800495c:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <HAL_UART_MspInit+0x220>)
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004962:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <HAL_UART_MspInit+0x220>)
 8004964:	2200      	movs	r2, #0
 8004966:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <HAL_UART_MspInit+0x220>)
 800496a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800496e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_UART_MspInit+0x220>)
 8004972:	2200      	movs	r2, #0
 8004974:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <HAL_UART_MspInit+0x220>)
 8004978:	2200      	movs	r2, #0
 800497a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800497c:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <HAL_UART_MspInit+0x220>)
 800497e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004982:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <HAL_UART_MspInit+0x220>)
 8004986:	2200      	movs	r2, #0
 8004988:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800498a:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <HAL_UART_MspInit+0x220>)
 800498c:	2200      	movs	r2, #0
 800498e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004990:	4813      	ldr	r0, [pc, #76]	; (80049e0 <HAL_UART_MspInit+0x220>)
 8004992:	f007 fda7 	bl	800c4e4 <HAL_DMA_Init>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 800499c:	f7ff f84f 	bl	8003a3e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a0f      	ldr	r2, [pc, #60]	; (80049e0 <HAL_UART_MspInit+0x220>)
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
 80049a6:	4a0e      	ldr	r2, [pc, #56]	; (80049e0 <HAL_UART_MspInit+0x220>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80049ac:	2200      	movs	r2, #0
 80049ae:	2105      	movs	r1, #5
 80049b0:	2027      	movs	r0, #39	; 0x27
 80049b2:	f007 fd6d 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80049b6:	2027      	movs	r0, #39	; 0x27
 80049b8:	f007 fd86 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
}
 80049bc:	e0ac      	b.n	8004b18 <HAL_UART_MspInit+0x358>
 80049be:	bf00      	nop
 80049c0:	40011000 	.word	0x40011000
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020400 	.word	0x40020400
 80049cc:	40020000 	.word	0x40020000
 80049d0:	200016cc 	.word	0x200016cc
 80049d4:	40026488 	.word	0x40026488
 80049d8:	40004800 	.word	0x40004800
 80049dc:	40020800 	.word	0x40020800
 80049e0:	2000172c 	.word	0x2000172c
 80049e4:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a4c      	ldr	r2, [pc, #304]	; (8004b20 <HAL_UART_MspInit+0x360>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f040 8092 	bne.w	8004b18 <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	4b4a      	ldr	r3, [pc, #296]	; (8004b24 <HAL_UART_MspInit+0x364>)
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	4a49      	ldr	r2, [pc, #292]	; (8004b24 <HAL_UART_MspInit+0x364>)
 80049fe:	f043 0320 	orr.w	r3, r3, #32
 8004a02:	6453      	str	r3, [r2, #68]	; 0x44
 8004a04:	4b47      	ldr	r3, [pc, #284]	; (8004b24 <HAL_UART_MspInit+0x364>)
 8004a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a10:	2300      	movs	r3, #0
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	4b43      	ldr	r3, [pc, #268]	; (8004b24 <HAL_UART_MspInit+0x364>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	4a42      	ldr	r2, [pc, #264]	; (8004b24 <HAL_UART_MspInit+0x364>)
 8004a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a20:	4b40      	ldr	r3, [pc, #256]	; (8004b24 <HAL_UART_MspInit+0x364>)
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004a2c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a32:	2302      	movs	r3, #2
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004a3e:	2308      	movs	r3, #8
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a46:	4619      	mov	r1, r3
 8004a48:	4837      	ldr	r0, [pc, #220]	; (8004b28 <HAL_UART_MspInit+0x368>)
 8004a4a:	f008 f959 	bl	800cd00 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a50:	4a37      	ldr	r2, [pc, #220]	; (8004b30 <HAL_UART_MspInit+0x370>)
 8004a52:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004a54:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a56:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004a5a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a5c:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a62:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a68:	4b30      	ldr	r3, [pc, #192]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a6e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a70:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a76:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004a7c:	4b2b      	ldr	r3, [pc, #172]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a82:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a84:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a8a:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004a90:	4826      	ldr	r0, [pc, #152]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004a92:	f007 fd27 	bl	800c4e4 <HAL_DMA_Init>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8004a9c:	f7fe ffcf 	bl	8003a3e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8004aa6:	4a21      	ldr	r2, [pc, #132]	; (8004b2c <HAL_UART_MspInit+0x36c>)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004aac:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004aae:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <HAL_UART_MspInit+0x378>)
 8004ab0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004ab2:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004ab4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004ab8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004aba:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ac0:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004acc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ace:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ad4:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004ada:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ae0:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004aec:	4811      	ldr	r0, [pc, #68]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004aee:	f007 fcf9 	bl	800c4e4 <HAL_DMA_Init>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8004af8:	f7fe ffa1 	bl	8003a3e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0d      	ldr	r2, [pc, #52]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34
 8004b02:	4a0c      	ldr	r2, [pc, #48]	; (8004b34 <HAL_UART_MspInit+0x374>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2105      	movs	r1, #5
 8004b0c:	2047      	movs	r0, #71	; 0x47
 8004b0e:	f007 fcbf 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004b12:	2047      	movs	r0, #71	; 0x47
 8004b14:	f007 fcd8 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
}
 8004b18:	bf00      	nop
 8004b1a:	3738      	adds	r7, #56	; 0x38
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40011400 	.word	0x40011400
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40021800 	.word	0x40021800
 8004b2c:	2000178c 	.word	0x2000178c
 8004b30:	40026428 	.word	0x40026428
 8004b34:	200017ec 	.word	0x200017ec
 8004b38:	400264a0 	.word	0x400264a0

08004b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
////////////////////////////////////////////////////////////////..
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b74 <LoopFillZerobss+0x14>


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b42:	e003      	b.n	8004b4c <LoopCopyDataInit>

08004b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b4a:	3104      	adds	r1, #4

08004b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b4c:	480b      	ldr	r0, [pc, #44]	; (8004b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b54:	d3f6      	bcc.n	8004b44 <CopyDataInit>
  ldr  r2, =_sbss
 8004b56:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b58:	e002      	b.n	8004b60 <LoopFillZerobss>

08004b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b5c:	f842 3b04 	str.w	r3, [r2], #4

08004b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b64:	d3f9      	bcc.n	8004b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b66:	f7ff fa3b 	bl	8003fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b6a:	f016 faad 	bl	801b0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b6e:	f7fe febb 	bl	80038e8 <main>
  bx  lr    
 8004b72:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004b74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004b78:	08022548 	.word	0x08022548
  ldr  r0, =_sdata
 8004b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b80:	200002e0 	.word	0x200002e0
  ldr  r2, =_sbss
 8004b84:	200002e0 	.word	0x200002e0
  ldr  r3, = _ebss
 8004b88:	2000e9ac 	.word	0x2000e9ac

08004b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b8c:	e7fe      	b.n	8004b8c <ADC_IRQHandler>
	...

08004b90 <buzzing_task>:
 4, 3, 1, 8
 };
*/

//fun
void buzzing_task(void *argument) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000.0 / (4 * TEMPO);
 8004b98:	4b9f      	ldr	r3, [pc, #636]	; (8004e18 <buzzing_task+0x288>)
 8004b9a:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004b9c:	4b9f      	ldr	r3, [pc, #636]	; (8004e1c <buzzing_task+0x28c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f107 010d 	add.w	r1, r7, #13
 8004ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f013 f8cb 	bl	8017d44 <xQueueReceive>
		switch (buzzing_type) {
 8004bae:	7b7b      	ldrb	r3, [r7, #13]
 8004bb0:	2b0a      	cmp	r3, #10
 8004bb2:	f200 8120 	bhi.w	8004df6 <buzzing_task+0x266>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <buzzing_task+0x2c>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004c8f 	.word	0x08004c8f
 8004bc4:	08004cc1 	.word	0x08004cc1
 8004bc8:	08004d45 	.word	0x08004d45
 8004bcc:	08004d13 	.word	0x08004d13
 8004bd0:	08004d7d 	.word	0x08004d7d
 8004bd4:	08004dd7 	.word	0x08004dd7
 8004bd8:	08004de7 	.word	0x08004de7
 8004bdc:	08004da9 	.word	0x08004da9
 8004be0:	08004db9 	.word	0x08004db9
 8004be4:	08004dc9 	.word	0x08004dc9
		case song:
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004be8:	2300      	movs	r3, #0
 8004bea:	82fb      	strh	r3, [r7, #22]
 8004bec:	e04b      	b.n	8004c86 <buzzing_task+0xf6>
				last_wake_time = xTaskGetTickCount();
 8004bee:	f013 fe7f 	bl	80188f0 <xTaskGetTickCount>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 8004bf6:	8afb      	ldrh	r3, [r7, #22]
 8004bf8:	4a89      	ldr	r2, [pc, #548]	; (8004e20 <buzzing_task+0x290>)
 8004bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fc faf4 	bl	80011ec <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 8004c04:	8afb      	ldrh	r3, [r7, #22]
 8004c06:	4a87      	ldr	r2, [pc, #540]	; (8004e24 <buzzing_task+0x294>)
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	ed93 7a00 	vldr	s14, [r3]
 8004c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1c:	ee17 3a90 	vmov	r3, s15
 8004c20:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time*0.95);
 8004c22:	89fb      	ldrh	r3, [r7, #14]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fb fc7d 	bl	8000524 <__aeabi_i2d>
 8004c2a:	a377      	add	r3, pc, #476	; (adr r3, 8004e08 <buzzing_task+0x278>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fce2 	bl	80005f8 <__aeabi_dmul>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f7fb ffb4 	bl	8000ba8 <__aeabi_d2uiz>
 8004c40:	4602      	mov	r2, r0
 8004c42:	f107 0308 	add.w	r3, r7, #8
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f013 fc83 	bl	8018554 <vTaskDelayUntil>
				buzzer(0);
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7fc facc 	bl	80011ec <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time*0.05);
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb fc64 	bl	8000524 <__aeabi_i2d>
 8004c5c:	a36c      	add	r3, pc, #432	; (adr r3, 8004e10 <buzzing_task+0x280>)
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f7fb fcc9 	bl	80005f8 <__aeabi_dmul>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f7fb ff9b 	bl	8000ba8 <__aeabi_d2uiz>
 8004c72:	4602      	mov	r2, r0
 8004c74:	f107 0308 	add.w	r3, r7, #8
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f013 fc6a 	bl	8018554 <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004c80:	8afb      	ldrh	r3, [r7, #22]
 8004c82:	3301      	adds	r3, #1
 8004c84:	82fb      	strh	r3, [r7, #22]
 8004c86:	8afb      	ldrh	r3, [r7, #22]
 8004c88:	2b7c      	cmp	r3, #124	; 0x7c
 8004c8a:	d9b0      	bls.n	8004bee <buzzing_task+0x5e>
			}
			break;
 8004c8c:	e0b3      	b.n	8004df6 <buzzing_task+0x266>
		case ok:
			last_wake_time = xTaskGetTickCount();
 8004c8e:	f013 fe2f 	bl	80188f0 <xTaskGetTickCount>
 8004c92:	4603      	mov	r3, r0
 8004c94:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004c96:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004c9a:	f7fc faa7 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c9e:	2064      	movs	r0, #100	; 0x64
 8004ca0:	f013 fcd6 	bl	8018650 <vTaskDelay>
			buzzer(0);
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7fc faa1 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004caa:	2032      	movs	r0, #50	; 0x32
 8004cac:	f013 fcd0 	bl	8018650 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004cb0:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004cb4:	f7fc fa9a 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004cb8:	2064      	movs	r0, #100	; 0x64
 8004cba:	f013 fcc9 	bl	8018650 <vTaskDelay>
			break;
 8004cbe:	e09a      	b.n	8004df6 <buzzing_task+0x266>
		case not_ok:
			last_wake_time = xTaskGetTickCount();
 8004cc0:	f013 fe16 	bl	80188f0 <xTaskGetTickCount>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004cc8:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004ccc:	f7fc fa8e 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004cd0:	2064      	movs	r0, #100	; 0x64
 8004cd2:	f013 fcbd 	bl	8018650 <vTaskDelay>
			buzzer(0);
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f7fc fa88 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004cdc:	2032      	movs	r0, #50	; 0x32
 8004cde:	f013 fcb7 	bl	8018650 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004ce2:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004ce6:	f7fc fa81 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004cea:	2064      	movs	r0, #100	; 0x64
 8004cec:	f013 fcb0 	bl	8018650 <vTaskDelay>
			buzzer(0);
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f7fc fa7b 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004cf6:	2032      	movs	r0, #50	; 0x32
 8004cf8:	f013 fcaa 	bl	8018650 <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8004cfc:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004d00:	f7fc fa74 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d04:	2064      	movs	r0, #100	; 0x64
 8004d06:	f013 fca3 	bl	8018650 <vTaskDelay>
			buzzer(0);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7fc fa6e 	bl	80011ec <buzzer>
			break;
 8004d10:	e071      	b.n	8004df6 <buzzing_task+0x266>
		case control_control:
			last_wake_time = xTaskGetTickCount();
 8004d12:	f013 fded 	bl	80188f0 <xTaskGetTickCount>
 8004d16:	4603      	mov	r3, r0
 8004d18:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 8004d1a:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004d1e:	f7fc fa65 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d22:	2064      	movs	r0, #100	; 0x64
 8004d24:	f013 fc94 	bl	8018650 <vTaskDelay>
			buzzer(0);
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7fc fa5f 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004d2e:	2032      	movs	r0, #50	; 0x32
 8004d30:	f013 fc8e 	bl	8018650 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004d34:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004d38:	f7fc fa58 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d3c:	2064      	movs	r0, #100	; 0x64
 8004d3e:	f013 fc87 	bl	8018650 <vTaskDelay>
			break;
 8004d42:	e058      	b.n	8004df6 <buzzing_task+0x266>
		case control_keyboard:
			last_wake_time = xTaskGetTickCount();
 8004d44:	f013 fdd4 	bl	80188f0 <xTaskGetTickCount>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004d4c:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004d50:	f7fc fa4c 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d54:	2064      	movs	r0, #100	; 0x64
 8004d56:	f013 fc7b 	bl	8018650 <vTaskDelay>
			buzzer(0);
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f7fc fa46 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004d60:	2032      	movs	r0, #50	; 0x32
 8004d62:	f013 fc75 	bl	8018650 <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8004d66:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004d6a:	f7fc fa3f 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d6e:	2064      	movs	r0, #100	; 0x64
 8004d70:	f013 fc6e 	bl	8018650 <vTaskDelay>
			buzzer(BUZZ_TIME);
 8004d74:	2064      	movs	r0, #100	; 0x64
 8004d76:	f7fc fa39 	bl	80011ec <buzzer>
			break;
 8004d7a:	e03c      	b.n	8004df6 <buzzing_task+0x266>

		case control_sbc:
			buzzer(BUZZER_LOW);
 8004d7c:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004d80:	f7fc fa34 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d84:	2064      	movs	r0, #100	; 0x64
 8004d86:	f013 fc63 	bl	8018650 <vTaskDelay>
			buzzer((BUZZER_HIGH+BUZZER_LOW)/2);
 8004d8a:	f240 404c 	movw	r0, #1100	; 0x44c
 8004d8e:	f7fc fa2d 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d92:	2064      	movs	r0, #100	; 0x64
 8004d94:	f013 fc5c 	bl	8018650 <vTaskDelay>
			buzzer(BUZZER_HIGH);;
 8004d98:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004d9c:	f7fc fa26 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004da0:	2064      	movs	r0, #100	; 0x64
 8004da2:	f013 fc55 	bl	8018650 <vTaskDelay>
			break;
 8004da6:	e026      	b.n	8004df6 <buzzing_task+0x266>


		case bz_debug_low:
			buzzer(DEBUG_LOW_FREQ);
 8004da8:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8004dac:	f7fc fa1e 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004db0:	2064      	movs	r0, #100	; 0x64
 8004db2:	f013 fc4d 	bl	8018650 <vTaskDelay>
			break;
 8004db6:	e01e      	b.n	8004df6 <buzzing_task+0x266>

		case bz_debug_high:
			buzzer(DEBUG_HIGH_FREQ);
 8004db8:	f640 1082 	movw	r0, #2434	; 0x982
 8004dbc:	f7fc fa16 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004dc0:	2064      	movs	r0, #100	; 0x64
 8004dc2:	f013 fc45 	bl	8018650 <vTaskDelay>
			break;
 8004dc6:	e016      	b.n	8004df6 <buzzing_task+0x266>

		case bz_debug_rest:
			buzzer(0);
 8004dc8:	2000      	movs	r0, #0
 8004dca:	f7fc fa0f 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004dce:	2032      	movs	r0, #50	; 0x32
 8004dd0:	f013 fc3e 	bl	8018650 <vTaskDelay>
			break;
 8004dd4:	e00f      	b.n	8004df6 <buzzing_task+0x266>
		case bz_high:
			buzzer(BUZZER_HIGH);
 8004dd6:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004dda:	f7fc fa07 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004dde:	2064      	movs	r0, #100	; 0x64
 8004de0:	f013 fc36 	bl	8018650 <vTaskDelay>
			break;
 8004de4:	e007      	b.n	8004df6 <buzzing_task+0x266>
		case bz_low:
			buzzer(BUZZER_LOW);
 8004de6:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004dea:	f7fc f9ff 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004dee:	2064      	movs	r0, #100	; 0x64
 8004df0:	f013 fc2e 	bl	8018650 <vTaskDelay>
			break;
 8004df4:	bf00      	nop
		}
		buzzer(0);
 8004df6:	2000      	movs	r0, #0
 8004df8:	f7fc f9f8 	bl	80011ec <buzzer>
		vTaskDelay(GAP_TIME);
 8004dfc:	2032      	movs	r0, #50	; 0x32
 8004dfe:	f013 fc27 	bl	8018650 <vTaskDelay>
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004e02:	e6cb      	b.n	8004b9c <buzzing_task+0xc>
 8004e04:	f3af 8000 	nop.w
 8004e08:	66666666 	.word	0x66666666
 8004e0c:	3fee6666 	.word	0x3fee6666
 8004e10:	9999999a 	.word	0x9999999a
 8004e14:	3fa99999 	.word	0x3fa99999
 8004e18:	42fa0000 	.word	0x42fa0000
 8004e1c:	20000488 	.word	0x20000488
 8004e20:	08021b4c 	.word	0x08021b4c
 8004e24:	08021c48 	.word	0x08021c48

08004e28 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08c      	sub	sp, #48	; 0x30
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	//check which CAN bus received it
	//required because the 2 canbuses use seperate FIFOs for receive
	if (hcan->Instance == CAN1) {
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <can_ISR+0x8c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d118      	bne.n	8004e6c <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 8004e3a:	210e      	movs	r1, #14
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f007 f822 	bl	800be86 <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 8004e42:	f107 020c 	add.w	r2, r7, #12
 8004e46:	f107 0314 	add.w	r3, r7, #20
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	481a      	ldr	r0, [pc, #104]	; (8004eb8 <can_ISR+0x90>)
 8004e4e:	f7fc fa13 	bl	8001278 <can1_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId, rx_buffer);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f107 020c 	add.w	r2, r7, #12
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4817      	ldr	r0, [pc, #92]	; (8004ebc <can_ISR+0x94>)
 8004e5e:	f000 f833 	bl	8004ec8 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004e62:	210e      	movs	r1, #14
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f006 ffe8 	bl	800be3a <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 8004e6a:	e01e      	b.n	8004eaa <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <can_ISR+0x98>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d119      	bne.n	8004eaa <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 8004e76:	2170      	movs	r1, #112	; 0x70
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f007 f804 	bl	800be86 <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8004e7e:	f107 020c 	add.w	r2, r7, #12
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	4619      	mov	r1, r3
 8004e88:	480e      	ldr	r0, [pc, #56]	; (8004ec4 <can_ISR+0x9c>)
 8004e8a:	f7fc fa06 	bl	800129a <can2_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId + 12, rx_buffer);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	330c      	adds	r3, #12
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f107 020c 	add.w	r2, r7, #12
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4807      	ldr	r0, [pc, #28]	; (8004ebc <can_ISR+0x94>)
 8004e9e:	f000 f813 	bl	8004ec8 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004ea2:	2170      	movs	r1, #112	; 0x70
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f006 ffc8 	bl	800be3a <HAL_CAN_ActivateNotification>
}
 8004eaa:	bf00      	nop
 8004eac:	3730      	adds	r7, #48	; 0x30
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40006400 	.word	0x40006400
 8004eb8:	200003ec 	.word	0x200003ec
 8004ebc:	2000184c 	.word	0x2000184c
 8004ec0:	40006800 	.word	0x40006800
 8004ec4:	20000414 	.word	0x20000414

08004ec8 <convert_raw_can_data>:
 * in the struct for the motor.
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id, uint8_t *rx_buffer) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	817b      	strh	r3, [r7, #10]
	uint16_t idnum = motor_id - 0x201;
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8004edc:	847b      	strh	r3, [r7, #34]	; 0x22

	//if idnum > 24, it's not a DJI motor. Add in a seperate processing function if other CAN devices are added
	if (idnum > 24)
 8004ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ee0:	2b18      	cmp	r3, #24
 8004ee2:	f200 814c 	bhi.w	800517e <convert_raw_can_data+0x2b6>
	{
		return;
	}
	motor_data_t* curr_motor = &can_motor_data[idnum];
 8004ee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ee8:	22a4      	movs	r2, #164	; 0xa4
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]
	//motor must be initialised in motor_config.c first
	if (curr_motor->motor_type > 0) {
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	789b      	ldrb	r3, [r3, #2]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 813d 	beq.w	8005178 <convert_raw_can_data+0x2b0>
		//convert the raw data back into the respective values
		curr_motor->id 				= motor_id;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	897a      	ldrh	r2, [r7, #10]
 8004f02:	801a      	strh	r2, [r3, #0]
		curr_motor->raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	b21a      	sxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	b21b      	sxth	r3, r3
 8004f14:	4313      	orrs	r3, r2
 8004f16:	b21a      	sxth	r2, r3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm						=(rx_buffer[2] << 8) | rx_buffer[3];
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3302      	adds	r3, #2
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	b21a      	sxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3303      	adds	r3, #3
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	833b      	strh	r3, [r7, #24]
		curr_motor->raw_data.rpm 		= curr_motor->raw_data.rpm * SPEED_LPF + temp_rpm * (1-SPEED_LPF);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	8b3a      	ldrh	r2, [r7, #24]
 8004f36:	811a      	strh	r2, [r3, #8]
		curr_motor->raw_data.torque 	= (rx_buffer[4] << 8) | rx_buffer[5];
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	b21a      	sxth	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3305      	adds	r3, #5
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b21b      	sxth	r3, r3
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	b21a      	sxth	r2, r3
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	815a      	strh	r2, [r3, #10]
		curr_motor->raw_data.temp 	= (rx_buffer[6]);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	799a      	ldrb	r2, [r3, #6]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	731a      	strb	r2, [r3, #12]
		curr_motor->last_time[1] 		= curr_motor->last_time[0];
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		curr_motor->last_time[0]	 	= get_microseconds();
 8004f66:	f7fd f90f 	bl	8002188 <get_microseconds>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		float rds_passed = (float)(curr_motor->raw_data.angle[0] - curr_motor->raw_data.angle[1]) /8192;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f8a:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8005188 <convert_raw_can_data+0x2c0>
 8004f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f92:	edc7 7a05 	vstr	s15, [r7, #20]
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 8004f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f9a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800518c <convert_raw_can_data+0x2c4>
 8004f9e:	ee67 6a87 	vmul.f32	s13, s15, s14
				/ curr_motor->last_time[0] - curr_motor->last_time[1]) * 60;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fa8:	ee07 3a90 	vmov	s15, r3
 8004fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fc6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8005190 <convert_raw_can_data+0x2c8>
 8004fca:	ee67 7a87 	vmul.f32	s15, s15, s14
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
		//process the angle data differently depending on the motor type to get radians in the
		//adj_angle value
		switch (curr_motor->motor_type) {
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	789b      	ldrb	r3, [r3, #2]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d83b      	bhi.n	8005056 <convert_raw_can_data+0x18e>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <convert_raw_can_data+0x11c>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005057 	.word	0x08005057
 8004fec:	08005057 	.word	0x08005057
 8004ff0:	08005057 	.word	0x08005057
 8004ff4:	0800501b 	.word	0x0800501b
 8004ff8:	0800501b 	.word	0x0800501b
 8004ffc:	08005031 	.word	0x08005031
 8005000:	08005031 	.word	0x08005031
 8005004:	08005031 	.word	0x08005031
		case TYPE_GM6020:
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	1d1a      	adds	r2, r3, #4
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	3370      	adds	r3, #112	; 0x70
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 f8c6 	bl	80051a4 <angle_offset>
			break;
 8005018:	e01e      	b.n	8005058 <convert_raw_can_data+0x190>
		case TYPE_M2006:
		case TYPE_M3508:
			break;
		case TYPE_M2006_STEPS:
		case TYPE_M3508_STEPS:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	1d18      	adds	r0, r3, #4
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f103 0170 	add.w	r1, r3, #112	; 0x70
					curr_motor->last_time);
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	339c      	adds	r3, #156	; 0x9c
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8005028:	461a      	mov	r2, r3
 800502a:	f000 f977 	bl	800531c <motor_calc_odometry>
			break;
 800502e:	e013      	b.n	8005058 <convert_raw_can_data+0x190>
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	1d18      	adds	r0, r3, #4
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f103 0170 	add.w	r1, r3, #112	; 0x70
					curr_motor->last_time);
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	339c      	adds	r3, #156	; 0x9c
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 800503e:	461a      	mov	r2, r3
 8005040:	f000 f96c 	bl	800531c <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	1d1a      	adds	r2, r3, #4
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	3370      	adds	r3, #112	; 0x70
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f000 f8a8 	bl	80051a4 <angle_offset>
			break;
 8005054:	e000      	b.n	8005058 <convert_raw_can_data+0x190>
		default:
			break;
 8005056:	bf00      	nop

		}

		//initialise task switching variables
		BaseType_t xHigherPriorityTaskWoken, xResult;
		xHigherPriorityTaskWoken = pdFALSE;
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]

		//set event group bits so that the tasks and PIDs only trigger upon updated data
		//also checks if the respective tasks are set to ready
		switch (idnum + 1) {
 800505c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800505e:	3301      	adds	r3, #1
 8005060:	3b05      	subs	r3, #5
 8005062:	2b0d      	cmp	r3, #13
 8005064:	d878      	bhi.n	8005158 <convert_raw_can_data+0x290>
 8005066:	a201      	add	r2, pc, #4	; (adr r2, 800506c <convert_raw_can_data+0x1a4>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	080050f5 	.word	0x080050f5
 8005070:	08005109 	.word	0x08005109
 8005074:	0800511d 	.word	0x0800511d
 8005078:	08005159 	.word	0x08005159
 800507c:	08005159 	.word	0x08005159
 8005080:	08005159 	.word	0x08005159
 8005084:	08005159 	.word	0x08005159
 8005088:	08005159 	.word	0x08005159
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050a5 	.word	0x080050a5
 8005094:	080050e1 	.word	0x080050e1
 8005098:	080050cd 	.word	0x080050cd
 800509c:	08005131 	.word	0x08005131
 80050a0:	08005145 	.word	0x08005145
		#ifndef CHASSIS_MCU
				case FR_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 80050a4:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <convert_raw_can_data+0x2cc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f107 0210 	add.w	r2, r7, #16
 80050ac:	2108      	movs	r1, #8
 80050ae:	4618      	mov	r0, r3
 80050b0:	f012 fa1c 	bl	80174ec <xEventGroupSetBitsFromISR>
 80050b4:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 80050b6:	e050      	b.n	800515a <convert_raw_can_data+0x292>
				case FL_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 80050b8:	4b36      	ldr	r3, [pc, #216]	; (8005194 <convert_raw_can_data+0x2cc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f107 0210 	add.w	r2, r7, #16
 80050c0:	2104      	movs	r1, #4
 80050c2:	4618      	mov	r0, r3
 80050c4:	f012 fa12 	bl	80174ec <xEventGroupSetBitsFromISR>
 80050c8:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 80050ca:	e046      	b.n	800515a <convert_raw_can_data+0x292>
				case BL_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0010,
 80050cc:	4b31      	ldr	r3, [pc, #196]	; (8005194 <convert_raw_can_data+0x2cc>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f107 0210 	add.w	r2, r7, #16
 80050d4:	2102      	movs	r1, #2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f012 fa08 	bl	80174ec <xEventGroupSetBitsFromISR>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 80050de:	e03c      	b.n	800515a <convert_raw_can_data+0x292>
				case BR_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
 80050e0:	4b2c      	ldr	r3, [pc, #176]	; (8005194 <convert_raw_can_data+0x2cc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f107 0210 	add.w	r2, r7, #16
 80050e8:	2101      	movs	r1, #1
 80050ea:	4618      	mov	r0, r3
 80050ec:	f012 f9fe 	bl	80174ec <xEventGroupSetBitsFromISR>
 80050f0:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 80050f2:	e032      	b.n	800515a <convert_raw_can_data+0x292>
		#endif
				case LFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 80050f4:	4b28      	ldr	r3, [pc, #160]	; (8005198 <convert_raw_can_data+0x2d0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f107 0210 	add.w	r2, r7, #16
 80050fc:	2102      	movs	r1, #2
 80050fe:	4618      	mov	r0, r3
 8005100:	f012 f9f4 	bl	80174ec <xEventGroupSetBitsFromISR>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005106:	e028      	b.n	800515a <convert_raw_can_data+0x292>
				case RFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 8005108:	4b23      	ldr	r3, [pc, #140]	; (8005198 <convert_raw_can_data+0x2d0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f107 0210 	add.w	r2, r7, #16
 8005110:	2101      	movs	r1, #1
 8005112:	4618      	mov	r0, r3
 8005114:	f012 f9ea 	bl	80174ec <xEventGroupSetBitsFromISR>
 8005118:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800511a:	e01e      	b.n	800515a <convert_raw_can_data+0x292>
				case FEEDER_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 800511c:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <convert_raw_can_data+0x2d0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f107 0210 	add.w	r2, r7, #16
 8005124:	2104      	movs	r1, #4
 8005126:	4618      	mov	r0, r3
 8005128:	f012 f9e0 	bl	80174ec <xEventGroupSetBitsFromISR>
 800512c:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800512e:	e014      	b.n	800515a <convert_raw_can_data+0x292>
				case PITCH_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 8005130:	4b1a      	ldr	r3, [pc, #104]	; (800519c <convert_raw_can_data+0x2d4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f107 0210 	add.w	r2, r7, #16
 8005138:	2101      	movs	r1, #1
 800513a:	4618      	mov	r0, r3
 800513c:	f012 f9d6 	bl	80174ec <xEventGroupSetBitsFromISR>
 8005140:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005142:	e00a      	b.n	800515a <convert_raw_can_data+0x292>
				case YAW_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 8005144:	4b15      	ldr	r3, [pc, #84]	; (800519c <convert_raw_can_data+0x2d4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f107 0210 	add.w	r2, r7, #16
 800514c:	2102      	movs	r1, #2
 800514e:	4618      	mov	r0, r3
 8005150:	f012 f9cc 	bl	80174ec <xEventGroupSetBitsFromISR>
 8005154:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005156:	e000      	b.n	800515a <convert_raw_can_data+0x292>
				default:
					idnum = idnum;
					//error handler
					break;
 8005158:	bf00      	nop
				}

				//switches tasks if a higher priority task is ready.
				//required because the function is in an ISR
				if (xResult != pdFAIL) {
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00f      	beq.n	8005180 <convert_raw_can_data+0x2b8>
					portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <convert_raw_can_data+0x2b8>
 8005166:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <convert_raw_can_data+0x2d8>)
 8005168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	e003      	b.n	8005180 <convert_raw_can_data+0x2b8>
				}
			} else {
				//this is a useless statement so that it is possible to set a breakpoint here lol
				uint8_t stopper = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	76fb      	strb	r3, [r7, #27]
 800517c:	e000      	b.n	8005180 <convert_raw_can_data+0x2b8>
		return;
 800517e:	bf00      	nop
				//error handler
		}
}
 8005180:	3728      	adds	r7, #40	; 0x28
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	46000000 	.word	0x46000000
 800518c:	461c4000 	.word	0x461c4000
 8005190:	42700000 	.word	0x42700000
 8005194:	20000470 	.word	0x20000470
 8005198:	20000474 	.word	0x20000474
 800519c:	2000046c 	.word	0x2000046c
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]

	//if there's a gearbox, use the ticks after the gearbox.
	//make sure center angle is properly set with respect to the zero-ing angle
	//YOUR ROBOT MUST HAVE A WAY TO ZERO THIS ANGLE AND IMPLEMENT A ZEROING FUNCTION AT STARTUP
	//IF NOT IT WON'T WORK 							-wx
	if (angle_data->gearbox_ratio > 0) {
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80051b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	dd69      	ble.n	8005296 <angle_offset+0xf2>
		temp_ang = angle_data->ticks - angle_data->center_ang;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	60fb      	str	r3, [r7, #12]
		if (temp_ang > (4096 * angle_data->gearbox_ratio)) {
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	edd3 7a06 	vldr	s15, [r3, #24]
 80051de:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8005308 <angle_offset+0x164>
 80051e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ee:	dd13      	ble.n	8005218 <angle_offset+0x74>
			temp_ang -= (8192 * angle_data->gearbox_ratio);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8005200:	eddf 6a42 	vldr	s13, [pc, #264]	; 800530c <angle_offset+0x168>
 8005204:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800520c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005210:	ee17 3a90 	vmov	r3, s15
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	e023      	b.n	8005260 <angle_offset+0xbc>
		} else if (temp_ang < (-4096 * angle_data->gearbox_ratio)) {
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	edd3 7a06 	vldr	s15, [r3, #24]
 8005228:	eddf 6a39 	vldr	s13, [pc, #228]	; 8005310 <angle_offset+0x16c>
 800522c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005238:	d512      	bpl.n	8005260 <angle_offset+0xbc>
			temp_ang += 8192 * angle_data->gearbox_ratio;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	edd3 7a06 	vldr	s15, [r3, #24]
 800524a:	eddf 6a30 	vldr	s13, [pc, #192]	; 800530c <angle_offset+0x168>
 800524e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800525a:	ee17 3a90 	vmov	r3, s15
 800525e:	60fb      	str	r3, [r7, #12]
		}
		angle_data->ticks = temp_ang;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	601a      	str	r2, [r3, #0]
		angle_data->adj_ang = (float) temp_ang * 2 *PI / (8192 * angle_data->gearbox_ratio);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	ee07 3a90 	vmov	s15, r3
 800526c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005270:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005274:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005314 <angle_offset+0x170>
 8005278:	ee67 6a87 	vmul.f32	s13, s15, s14
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005282:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800530c <angle_offset+0x168>
 8005286:	ee27 7a87 	vmul.f32	s14, s15, s14
 800528a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	edc3 7a07 	vstr	s15, [r3, #28]
		} else if (temp_ang < -4096) {
			temp_ang += 8192;
		}
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
	}
}
 8005294:	e031      	b.n	80052fa <angle_offset+0x156>
		temp_ang = (int32_t) (motor_data->angle[0]) - angle_data->center_ang;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800529c:	461a      	mov	r2, r3
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	60fb      	str	r3, [r7, #12]
		if (temp_ang > 4096) {
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ac:	dd04      	ble.n	80052b8 <angle_offset+0x114>
			temp_ang -= 8192;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e007      	b.n	80052c8 <angle_offset+0x124>
		} else if (temp_ang < -4096) {
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80052be:	da03      	bge.n	80052c8 <angle_offset+0x124>
			temp_ang += 8192;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052c6:	60fb      	str	r3, [r7, #12]
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80052ce:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005318 <angle_offset+0x174>
 80052d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005314 <angle_offset+0x170>
 80052e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80052e8:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8005308 <angle_offset+0x164>
 80052ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80052f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	45800000 	.word	0x45800000
 800530c:	46000000 	.word	0x46000000
 8005310:	c5800000 	.word	0xc5800000
 8005314:	40490fdb 	.word	0x40490fdb
 8005318:	00000000 	.word	0x00000000

0800531c <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data,
		angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 800531c:	b480      	push	{r7}
 800531e:	b089      	sub	sp, #36	; 0x24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
	int8_t int_round_passed = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	77fb      	strb	r3, [r7, #31]
	//check to make sure it's not the same data point
	if (feedback_times[0] - feedback_times[1] >= 1) {
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3304      	adds	r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d02e      	beq.n	8005398 <motor_calc_odometry+0x7c>
		float rounds_passed = (((float)(feedback_times[0] - feedback_times[1]) * motor_data->rpm)/(60 * TIMER_FREQ));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3304      	adds	r3, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005354:	ee07 3a90 	vmov	s15, r3
 8005358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800535c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005360:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80054d4 <motor_calc_odometry+0x1b8>
 8005364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005368:	edc7 7a06 	vstr	s15, [r7, #24]
		if (fabs(rounds_passed) >= 1) {
 800536c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005370:	eef0 7ae7 	vabs.f32	s15, s15
 8005374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005380:	db08      	blt.n	8005394 <motor_calc_odometry+0x78>
			int_round_passed = rounds_passed;
 8005382:	edd7 7a06 	vldr	s15, [r7, #24]
 8005386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800538a:	edc7 7a00 	vstr	s15, [r7]
 800538e:	783b      	ldrb	r3, [r7, #0]
 8005390:	77fb      	strb	r3, [r7, #31]
 8005392:	e001      	b.n	8005398 <motor_calc_odometry+0x7c>
		} else {
			int_round_passed = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	77fb      	strb	r3, [r7, #31]
		}
	}
	int16_t abs_angle_diff;
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	83bb      	strh	r3, [r7, #28]
	//generally the motor won't exceed half a turn between each feedback
	if (abs_angle_diff > 4096) {
 80053ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	dd05      	ble.n	80053c4 <motor_calc_odometry+0xa8>
		abs_angle_diff -= 8192;
 80053b8:	8bbb      	ldrh	r3, [r7, #28]
 80053ba:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80053be:	b29b      	uxth	r3, r3
 80053c0:	83bb      	strh	r3, [r7, #28]
 80053c2:	e009      	b.n	80053d8 <motor_calc_odometry+0xbc>
	} else if (abs_angle_diff < -4096) {
 80053c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80053c8:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80053cc:	da04      	bge.n	80053d8 <motor_calc_odometry+0xbc>
		abs_angle_diff += 8192;
 80053ce:	8bbb      	ldrh	r3, [r7, #28]
 80053d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	83bb      	strh	r3, [r7, #28]
	 } else {
	 abs_angle_diff = (8192-motor_data->angle[0]) - motor_data->angle[1];
	 }
	 }
	 */
	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	edd3 7a06 	vldr	s15, [r3, #24]
 80053de:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80054d8 <motor_calc_odometry+0x1bc>
 80053e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ea:	ee17 3a90 	vmov	r3, s15
 80053ee:	82fb      	strh	r3, [r7, #22]
	angle_data->ticks += (int_round_passed * 8192) + abs_angle_diff;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80053f8:	0359      	lsls	r1, r3, #13
 80053fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80053fe:	440b      	add	r3, r1
 8005400:	441a      	add	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	601a      	str	r2, [r3, #0]
	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005418:	ee67 6a27 	vmul.f32	s13, s14, s15
 800541c:	8afb      	ldrh	r3, [r7, #22]
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	edc3 7a08 	vstr	s15, [r3, #32]
	angle_data->adj_ang = (float) (angle_data->ticks % gear_ticks ) * 2*PI/gear_ticks;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	8afa      	ldrh	r2, [r7, #22]
 8005436:	fb93 f1f2 	sdiv	r1, r3, r2
 800543a:	fb01 f202 	mul.w	r2, r1, r2
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005448:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800544c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80054dc <motor_calc_odometry+0x1c0>
 8005450:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005454:	8afb      	ldrh	r3, [r7, #22]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800545e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_data->adj_ang = (angle_data->adj_ang > PI) ? (angle_data->adj_ang - 2*PI) : (angle_data->adj_ang < -PI) ? angle_data->adj_ang+2*PI : angle_data->adj_ang;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	edd3 7a07 	vldr	s15, [r3, #28]
 800546e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80054dc <motor_calc_odometry+0x1c0>
 8005472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547a:	dd07      	ble.n	800548c <motor_calc_odometry+0x170>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005482:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80054e0 <motor_calc_odometry+0x1c4>
 8005486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800548a:	e014      	b.n	80054b6 <motor_calc_odometry+0x19a>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005492:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80054e4 <motor_calc_odometry+0x1c8>
 8005496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800549a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549e:	d507      	bpl.n	80054b0 <motor_calc_odometry+0x194>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80054a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80054e0 <motor_calc_odometry+0x1c4>
 80054aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054ae:	e002      	b.n	80054b6 <motor_calc_odometry+0x19a>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	edc3 7a07 	vstr	s15, [r3, #28]
	motor_data->angle[1] = motor_data->angle[0];
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	805a      	strh	r2, [r3, #2]
}
 80054c6:	bf00      	nop
 80054c8:	3724      	adds	r7, #36	; 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	49127c00 	.word	0x49127c00
 80054d8:	46000000 	.word	0x46000000
 80054dc:	40490fdb 	.word	0x40490fdb
 80054e0:	40c90fdb 	.word	0x40c90fdb
 80054e4:	c0490fdb 	.word	0xc0490fdb

080054e8 <control_input_task>:
uint8_t safety_toggle = ARM_SWITCH;
uint8_t launcher_safety_toggle = ARM_SWITCH;



void control_input_task(void *argument) {
 80054e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054ec:	b088      	sub	sp, #32
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
	TickType_t start_time;
	control_reset();
 80054f2:	f000 f983 	bl	80057fc <control_reset>
	chassis_yaw_pid_init();
 80054f6:	f000 fb7d 	bl	8005bf4 <chassis_yaw_pid_init>
	gimbal_ctrl_data.imu_mode = GIMBAL_MODE;
 80054fa:	4b89      	ldr	r3, [pc, #548]	; (8005720 <control_input_task+0x238>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	721a      	strb	r2, [r3, #8]
	aimbot_pid_init();
 8005500:	f000 ff08 	bl	8006314 <aimbot_pid_init>
	dbus_remote_start();
 8005504:	f7fc f820 	bl	8001548 <dbus_remote_start>
	gear_speed.curr_gear = 3;
 8005508:	4b86      	ldr	r3, [pc, #536]	; (8005724 <control_input_task+0x23c>)
 800550a:	2203      	movs	r2, #3
 800550c:	701a      	strb	r2, [r3, #0]
	gear_speed.spin_mult = GEAR3_YAW_MULT;
 800550e:	4b85      	ldr	r3, [pc, #532]	; (8005724 <control_input_task+0x23c>)
 8005510:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005514:	605a      	str	r2, [r3, #4]
	gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005516:	4b83      	ldr	r3, [pc, #524]	; (8005724 <control_input_task+0x23c>)
 8005518:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800551c:	609a      	str	r2, [r3, #8]
	gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 800551e:	4b81      	ldr	r3, [pc, #516]	; (8005724 <control_input_task+0x23c>)
 8005520:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005524:	60da      	str	r2, [r3, #12]
	safety_toggle = 1;
 8005526:	4b80      	ldr	r3, [pc, #512]	; (8005728 <control_input_task+0x240>)
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
	vTaskDelay(100);
 800552c:	2064      	movs	r0, #100	; 0x64
 800552e:	f013 f88f 	bl	8018650 <vTaskDelay>
	uint8_t rc_check;
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50 || fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50){
 8005532:	e01a      	b.n	800556a <control_input_task+0x82>
		uint8_t temp_msg;
		temp_msg = not_ok;
 8005534:	2302      	movs	r3, #2
 8005536:	74fb      	strb	r3, [r7, #19]
		xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005538:	4b7c      	ldr	r3, [pc, #496]	; (800572c <control_input_task+0x244>)
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	f107 0113 	add.w	r1, r7, #19
 8005540:	2300      	movs	r3, #0
 8005542:	2200      	movs	r2, #0
 8005544:	f012 f9d8 	bl	80178f8 <xQueueGenericSend>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 8005548:	21c8      	movs	r1, #200	; 0xc8
 800554a:	2001      	movs	r0, #1
 800554c:	f013 fe90 	bl	8019270 <ulTaskNotifyTake>
 8005550:	4603      	mov	r3, r0
 8005552:	76fb      	strb	r3, [r7, #27]
		HAL_UART_DMAStop(&DBUS_UART);
 8005554:	4876      	ldr	r0, [pc, #472]	; (8005730 <control_input_task+0x248>)
 8005556:	f00d f981 	bl	801285c <HAL_UART_DMAStop>
		dbus_remote_start();
 800555a:	f7fb fff5 	bl	8001548 <dbus_remote_start>
		if (rc_check){
 800555e:	7efb      	ldrb	r3, [r7, #27]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <control_input_task+0x82>
			vTaskDelay(200);
 8005564:	20c8      	movs	r0, #200	; 0xc8
 8005566:	f013 f873 	bl	8018650 <vTaskDelay>
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50 || fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50){
 800556a:	4b72      	ldr	r3, [pc, #456]	; (8005734 <control_input_task+0x24c>)
 800556c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005570:	4618      	mov	r0, r3
 8005572:	f7fa ffd7 	bl	8000524 <__aeabi_i2d>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4690      	mov	r8, r2
 800557c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	4b6c      	ldr	r3, [pc, #432]	; (8005738 <control_input_task+0x250>)
 8005586:	4640      	mov	r0, r8
 8005588:	4649      	mov	r1, r9
 800558a:	f7fb fac5 	bl	8000b18 <__aeabi_dcmpgt>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1cf      	bne.n	8005534 <control_input_task+0x4c>
 8005594:	4b67      	ldr	r3, [pc, #412]	; (8005734 <control_input_task+0x24c>)
 8005596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fa ffc2 	bl	8000524 <__aeabi_i2d>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4692      	mov	sl, r2
 80055a6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	4b62      	ldr	r3, [pc, #392]	; (8005738 <control_input_task+0x250>)
 80055b0:	4650      	mov	r0, sl
 80055b2:	4659      	mov	r1, fp
 80055b4:	f7fb fab0 	bl	8000b18 <__aeabi_dcmpgt>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ba      	bne.n	8005534 <control_input_task+0x4c>
 80055be:	4b5d      	ldr	r3, [pc, #372]	; (8005734 <control_input_task+0x24c>)
 80055c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fa ffad 	bl	8000524 <__aeabi_i2d>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	603a      	str	r2, [r7, #0]
 80055d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055d4:	607b      	str	r3, [r7, #4]
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	4b57      	ldr	r3, [pc, #348]	; (8005738 <control_input_task+0x250>)
 80055dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055e0:	f7fb fa9a 	bl	8000b18 <__aeabi_dcmpgt>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1a4      	bne.n	8005534 <control_input_task+0x4c>
 80055ea:	4b52      	ldr	r3, [pc, #328]	; (8005734 <control_input_task+0x24c>)
 80055ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fa ff97 	bl	8000524 <__aeabi_i2d>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4614      	mov	r4, r2
 80055fc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	4b4c      	ldr	r3, [pc, #304]	; (8005738 <control_input_task+0x250>)
 8005606:	4620      	mov	r0, r4
 8005608:	4629      	mov	r1, r5
 800560a:	f7fb fa85 	bl	8000b18 <__aeabi_dcmpgt>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d18f      	bne.n	8005534 <control_input_task+0x4c>
		}
	}
	safety_toggle = ARM_SWITCH;
 8005614:	4b44      	ldr	r3, [pc, #272]	; (8005728 <control_input_task+0x240>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]

	uint32_t last_song = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
	while (1) {
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800561e:	21c8      	movs	r1, #200	; 0xc8
 8005620:	2001      	movs	r0, #1
 8005622:	f013 fe25 	bl	8019270 <ulTaskNotifyTake>
 8005626:	4603      	mov	r3, r0
 8005628:	76fb      	strb	r3, [r7, #27]
		if (rc_check) {
 800562a:	7efb      	ldrb	r3, [r7, #27]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d054      	beq.n	80056da <control_input_task+0x1f2>
			status_led(1, on_led);
 8005630:	2100      	movs	r1, #0
 8005632:	2001      	movs	r0, #1
 8005634:	f7fc fcd0 	bl	8001fd8 <status_led>
			start_time = xTaskGetTickCount();
 8005638:	f013 f95a 	bl	80188f0 <xTaskGetTickCount>
 800563c:	4603      	mov	r3, r0
 800563e:	617b      	str	r3, [r7, #20]
			if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005640:	4b3c      	ldr	r3, [pc, #240]	; (8005734 <control_input_task+0x24c>)
 8005642:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d12b      	bne.n	80056a2 <control_input_task+0x1ba>

				if ((remote_cmd.left_switch == ge_LSW_UNSAFE) && (HAL_GetTick() - last_song > 5000)){
 800564a:	4b3a      	ldr	r3, [pc, #232]	; (8005734 <control_input_task+0x24c>)
 800564c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d115      	bne.n	8005680 <control_input_task+0x198>
 8005654:	f005 fd52 	bl	800b0fc <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d90c      	bls.n	8005680 <control_input_task+0x198>
					uint8_t temp_msg;
					last_song = HAL_GetTick();
 8005666:	f005 fd49 	bl	800b0fc <HAL_GetTick>
 800566a:	61f8      	str	r0, [r7, #28]
					temp_msg = song;
 800566c:	2300      	movs	r3, #0
 800566e:	74bb      	strb	r3, [r7, #18]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005670:	4b2e      	ldr	r3, [pc, #184]	; (800572c <control_input_task+0x244>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	f107 0112 	add.w	r1, r7, #18
 8005678:	2300      	movs	r3, #0
 800567a:	2200      	movs	r2, #0
 800567c:	f012 f93c 	bl	80178f8 <xQueueGenericSend>
				}
				laser_on();
 8005680:	f7fc f806 	bl	8001690 <laser_on>
				control_mode_change(remote_cmd.side_dial);
 8005684:	4b2b      	ldr	r3, [pc, #172]	; (8005734 <control_input_task+0x24c>)
 8005686:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f8ec 	bl	8005868 <control_mode_change>
				safety_toggle = 0;
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <control_input_task+0x240>)
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
				launcher_safety_toggle = 0;
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <control_input_task+0x254>)
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
				control_reset();
 800569c:	f000 f8ae 	bl	80057fc <control_reset>
 80056a0:	e037      	b.n	8005712 <control_input_task+0x22a>
			} else {

				switch (control_mode) {
 80056a2:	4b27      	ldr	r3, [pc, #156]	; (8005740 <control_input_task+0x258>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d002      	beq.n	80056b0 <control_input_task+0x1c8>
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d008      	beq.n	80056c0 <control_input_task+0x1d8>
					sbc_control_input();
					break;
#endif HAS_SBC

				default:
					break;
 80056ae:	e00f      	b.n	80056d0 <control_input_task+0x1e8>
					keyboard_gear_shifter(&gear_speed);
 80056b0:	481c      	ldr	r0, [pc, #112]	; (8005724 <control_input_task+0x23c>)
 80056b2:	f000 fac3 	bl	8005c3c <keyboard_gear_shifter>
					set_gear();
 80056b6:	f000 fa1f 	bl	8005af8 <set_gear>
					keyboard_control_input();
 80056ba:	f000 fab5 	bl	8005c28 <keyboard_control_input>
					break;
 80056be:	e007      	b.n	80056d0 <control_input_task+0x1e8>
					remote_gear_shifter(&gear_speed);
 80056c0:	4818      	ldr	r0, [pc, #96]	; (8005724 <control_input_task+0x23c>)
 80056c2:	f000 fca3 	bl	800600c <remote_gear_shifter>
					set_gear();
 80056c6:	f000 fa17 	bl	8005af8 <set_gear>
					remote_control_input();
 80056ca:	f000 fc95 	bl	8005ff8 <remote_control_input>
					break;
 80056ce:	bf00      	nop

				}
				status_led(1, off_led);
 80056d0:	2101      	movs	r1, #1
 80056d2:	2001      	movs	r0, #1
 80056d4:	f7fc fc80 	bl	8001fd8 <status_led>
 80056d8:	e01b      	b.n	8005712 <control_input_task+0x22a>
			}
		} else {
			//restart remote uart
			if (HAL_GetTick() - remote_cmd.last_time > 100) {
 80056da:	f005 fd0f 	bl	800b0fc <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	4b14      	ldr	r3, [pc, #80]	; (8005734 <control_input_task+0x24c>)
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b64      	cmp	r3, #100	; 0x64
 80056e8:	d909      	bls.n	80056fe <control_input_task+0x216>
				HAL_UART_DMAStop(&DBUS_UART);
 80056ea:	4811      	ldr	r0, [pc, #68]	; (8005730 <control_input_task+0x248>)
 80056ec:	f00d f8b6 	bl	801285c <HAL_UART_DMAStop>
				dbus_remote_start();
 80056f0:	f7fb ff2a 	bl	8001548 <dbus_remote_start>
				remote_cmd.last_time = HAL_GetTick();
 80056f4:	f005 fd02 	bl	800b0fc <HAL_GetTick>
 80056f8:	4603      	mov	r3, r0
 80056fa:	4a0e      	ldr	r2, [pc, #56]	; (8005734 <control_input_task+0x24c>)
 80056fc:	6213      	str	r3, [r2, #32]
			}
			kill_can();
 80056fe:	f004 fbab 	bl	8009e58 <kill_can>
			control_reset();
 8005702:	f000 f87b 	bl	80057fc <control_reset>
			launcher_safety_toggle = LAUNCHER_SAFETY;
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <control_input_task+0x254>)
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
			safety_toggle = ARM_SWITCH;
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <control_input_task+0x240>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 8005712:	f107 0314 	add.w	r3, r7, #20
 8005716:	2102      	movs	r1, #2
 8005718:	4618      	mov	r0, r3
 800571a:	f012 ff1b 	bl	8018554 <vTaskDelayUntil>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800571e:	e77e      	b.n	800561e <control_input_task+0x136>
 8005720:	200027cc 	.word	0x200027cc
 8005724:	20002808 	.word	0x20002808
 8005728:	2000281c 	.word	0x2000281c
 800572c:	20000488 	.word	0x20000488
 8005730:	20001644 	.word	0x20001644
 8005734:	20000310 	.word	0x20000310
 8005738:	40490000 	.word	0x40490000
 800573c:	2000281d 	.word	0x2000281d
 8005740:	20000008 	.word	0x20000008
 8005744:	00000000 	.word	0x00000000

08005748 <chassis_center_yaw>:
	}
	osThreadTerminate(NULL);
}

float chassis_center_yaw() {
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
	speed_pid(0, can_motors[YAW_MOTOR_ID - 1].angle_data.adj_ang,
 800574c:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <chassis_center_yaw+0x40>)
 800574e:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f7fa fef7 	bl	8000548 <__aeabi_f2d>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	480b      	ldr	r0, [pc, #44]	; (800578c <chassis_center_yaw+0x44>)
 8005760:	ec43 2b11 	vmov	d1, r2, r3
 8005764:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8005780 <chassis_center_yaw+0x38>
 8005768:	f004 f828 	bl	80097bc <speed_pid>
			&yaw_pid_data);
	return yaw_pid_data.output;
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <chassis_center_yaw+0x44>)
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	ee07 3a90 	vmov	s15, r3
}
 8005774:	eeb0 0a67 	vmov.f32	s0, s15
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w
	...
 8005788:	2000184c 	.word	0x2000184c
 800578c:	200027d8 	.word	0x200027d8

08005790 <chassis_set_ctrl>:

void chassis_set_ctrl(float forward, float horizontal, float yaw){
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	ed87 0a03 	vstr	s0, [r7, #12]
 800579a:	edc7 0a02 	vstr	s1, [r7, #8]
 800579e:	ed87 1a01 	vstr	s2, [r7, #4]
	chassis_ctrl_data.enabled = 1;
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <chassis_set_ctrl+0x38>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.horizontal = horizontal;
 80057a8:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <chassis_set_ctrl+0x38>)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6053      	str	r3, [r2, #4]
	chassis_ctrl_data.forward = forward;
 80057ae:	4a06      	ldr	r2, [pc, #24]	; (80057c8 <chassis_set_ctrl+0x38>)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6013      	str	r3, [r2, #0]
	chassis_ctrl_data.yaw = yaw;
 80057b4:	4a04      	ldr	r2, [pc, #16]	; (80057c8 <chassis_set_ctrl+0x38>)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6093      	str	r3, [r2, #8]
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	200027ac 	.word	0x200027ac

080057cc <chassis_kill_ctrl>:

void chassis_kill_ctrl(){
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
	chassis_ctrl_data.enabled = 0;
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <chassis_kill_ctrl+0x2c>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.forward = 0;
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <chassis_kill_ctrl+0x2c>)
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <chassis_kill_ctrl+0x2c>)
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 80057e6:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <chassis_kill_ctrl+0x2c>)
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	609a      	str	r2, [r3, #8]
}
 80057ee:	bf00      	nop
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	200027ac 	.word	0x200027ac

080057fc <control_reset>:
		}
	}
	return 0;
}

void control_reset() {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 8005800:	4b14      	ldr	r3, [pc, #80]	; (8005854 <control_reset+0x58>)
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8005808:	4b12      	ldr	r3, [pc, #72]	; (8005854 <control_reset+0x58>)
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 8005810:	4b10      	ldr	r3, [pc, #64]	; (8005854 <control_reset+0x58>)
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 8005818:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <control_reset+0x58>)
 800581a:	2200      	movs	r2, #0
 800581c:	751a      	strb	r2, [r3, #20]
	gimbal_ctrl_data.pitch = 0;
 800581e:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <control_reset+0x5c>)
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
	gimbal_ctrl_data.yaw = imu_heading.yaw;
 8005826:	4b0d      	ldr	r3, [pc, #52]	; (800585c <control_reset+0x60>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	4a0b      	ldr	r2, [pc, #44]	; (8005858 <control_reset+0x5c>)
 800582c:	6053      	str	r3, [r2, #4]
	gimbal_ctrl_data.enabled = 0;
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <control_reset+0x5c>)
 8005830:	2200      	movs	r2, #0
 8005832:	725a      	strb	r2, [r3, #9]
	launcher_ctrl_data.gun_feeding_speed = 0;
 8005834:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <control_reset+0x64>)
 8005836:	2200      	movs	r2, #0
 8005838:	805a      	strh	r2, [r3, #2]
	launcher_ctrl_data.projectile_speed = 0;
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <control_reset+0x64>)
 800583c:	2200      	movs	r2, #0
 800583e:	801a      	strh	r2, [r3, #0]
	launcher_ctrl_data.enabled = 0;
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <control_reset+0x64>)
 8005842:	2200      	movs	r2, #0
 8005844:	715a      	strb	r2, [r3, #5]
	g_spinspin_mode = 0;
 8005846:	4b07      	ldr	r3, [pc, #28]	; (8005864 <control_reset+0x68>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
	laser_off();
 800584c:	f7fb ff2c 	bl	80016a8 <laser_off>
}
 8005850:	bf00      	nop
 8005852:	bd80      	pop	{r7, pc}
 8005854:	200027ac 	.word	0x200027ac
 8005858:	200027cc 	.word	0x200027cc
 800585c:	20002a28 	.word	0x20002a28
 8005860:	200027c4 	.word	0x200027c4
 8005864:	20002818 	.word	0x20002818

08005868 <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	80fb      	strh	r3, [r7, #6]
//assume already in shutdown mode here
	static uint32_t last_trig_time;
	uint8_t temp_msg;
	if (remote_cmd.left_switch == ge_LSW_CONFIG) {
 8005872:	4b6f      	ldr	r3, [pc, #444]	; (8005a30 <control_mode_change+0x1c8>)
 8005874:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d133      	bne.n	80058e4 <control_mode_change+0x7c>
		if (left_dial_input > 330 || left_dial_input < -330) {
 800587c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005880:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8005884:	dc04      	bgt.n	8005890 <control_mode_change+0x28>
 8005886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800588a:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 800588e:	da23      	bge.n	80058d8 <control_mode_change+0x70>
			if (HAL_GetTick() - last_trig_time > 1000) {
 8005890:	f005 fc34 	bl	800b0fc <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	4b67      	ldr	r3, [pc, #412]	; (8005a34 <control_mode_change+0x1cc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a0:	d918      	bls.n	80058d4 <control_mode_change+0x6c>
				switch (control_mode) {
 80058a2:	4b65      	ldr	r3, [pc, #404]	; (8005a38 <control_mode_change+0x1d0>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d80d      	bhi.n	80058c8 <control_mode_change+0x60>
				case KEYBOARD_CTRL_MODE:
				case REMOTE_CTRL_MODE:
					control_mode = SBC_CTRL_MODE;
 80058ac:	4b62      	ldr	r3, [pc, #392]	; (8005a38 <control_mode_change+0x1d0>)
 80058ae:	2203      	movs	r2, #3
 80058b0:	701a      	strb	r2, [r3, #0]
					temp_msg = control_sbc;
 80058b2:	2305      	movs	r3, #5
 80058b4:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80058b6:	4b61      	ldr	r3, [pc, #388]	; (8005a3c <control_mode_change+0x1d4>)
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	f107 010f 	add.w	r1, r7, #15
 80058be:	2300      	movs	r3, #0
 80058c0:	2200      	movs	r2, #0
 80058c2:	f012 f819 	bl	80178f8 <xQueueGenericSend>
					break;
 80058c6:	e006      	b.n	80058d6 <control_mode_change+0x6e>
				default:
					last_trig_time = HAL_GetTick();
 80058c8:	f005 fc18 	bl	800b0fc <HAL_GetTick>
 80058cc:	4603      	mov	r3, r0
 80058ce:	4a59      	ldr	r2, [pc, #356]	; (8005a34 <control_mode_change+0x1cc>)
 80058d0:	6013      	str	r3, [r2, #0]
					break;
 80058d2:	e000      	b.n	80058d6 <control_mode_change+0x6e>
				}
			}
 80058d4:	bf00      	nop
			if (HAL_GetTick() - last_trig_time > 1000) {
 80058d6:	e0a7      	b.n	8005a28 <control_mode_change+0x1c0>
		} else {
			last_trig_time = HAL_GetTick();
 80058d8:	f005 fc10 	bl	800b0fc <HAL_GetTick>
 80058dc:	4603      	mov	r3, r0
 80058de:	4a55      	ldr	r2, [pc, #340]	; (8005a34 <control_mode_change+0x1cc>)
 80058e0:	6013      	str	r3, [r2, #0]
			break;
		default:
			break;
		}
	}
}
 80058e2:	e0a1      	b.n	8005a28 <control_mode_change+0x1c0>
		switch (control_mode) {
 80058e4:	4b54      	ldr	r3, [pc, #336]	; (8005a38 <control_mode_change+0x1d0>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d052      	beq.n	8005992 <control_mode_change+0x12a>
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	f300 8094 	bgt.w	8005a1a <control_mode_change+0x1b2>
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d002      	beq.n	80058fc <control_mode_change+0x94>
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d026      	beq.n	8005948 <control_mode_change+0xe0>
			break;
 80058fa:	e08e      	b.n	8005a1a <control_mode_change+0x1b2>
			if (left_dial_input < -330) {
 80058fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005900:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 8005904:	da1a      	bge.n	800593c <control_mode_change+0xd4>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8005906:	f005 fbf9 	bl	800b0fc <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	4b49      	ldr	r3, [pc, #292]	; (8005a34 <control_mode_change+0x1cc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005916:	f240 8082 	bls.w	8005a1e <control_mode_change+0x1b6>
					control_mode = REMOTE_CTRL_MODE;
 800591a:	4b47      	ldr	r3, [pc, #284]	; (8005a38 <control_mode_change+0x1d0>)
 800591c:	2202      	movs	r2, #2
 800591e:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 8005920:	2304      	movs	r3, #4
 8005922:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005924:	4b45      	ldr	r3, [pc, #276]	; (8005a3c <control_mode_change+0x1d4>)
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	f107 010f 	add.w	r1, r7, #15
 800592c:	2300      	movs	r3, #0
 800592e:	2200      	movs	r2, #0
 8005930:	f011 ffe2 	bl	80178f8 <xQueueGenericSend>
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8005934:	4b42      	ldr	r3, [pc, #264]	; (8005a40 <control_mode_change+0x1d8>)
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
			break;
 800593a:	e070      	b.n	8005a1e <control_mode_change+0x1b6>
				last_trig_time = HAL_GetTick();
 800593c:	f005 fbde 	bl	800b0fc <HAL_GetTick>
 8005940:	4603      	mov	r3, r0
 8005942:	4a3c      	ldr	r2, [pc, #240]	; (8005a34 <control_mode_change+0x1cc>)
 8005944:	6013      	str	r3, [r2, #0]
			break;
 8005946:	e06a      	b.n	8005a1e <control_mode_change+0x1b6>
			if (left_dial_input > 330) {
 8005948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800594c:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8005950:	dd19      	ble.n	8005986 <control_mode_change+0x11e>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8005952:	f005 fbd3 	bl	800b0fc <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <control_mode_change+0x1cc>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005962:	d95e      	bls.n	8005a22 <control_mode_change+0x1ba>
					control_mode = KEYBOARD_CTRL_MODE;
 8005964:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <control_mode_change+0x1d0>)
 8005966:	2201      	movs	r2, #1
 8005968:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 800596a:	2303      	movs	r3, #3
 800596c:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 800596e:	4b34      	ldr	r3, [pc, #208]	; (8005a40 <control_mode_change+0x1d8>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005974:	4b31      	ldr	r3, [pc, #196]	; (8005a3c <control_mode_change+0x1d4>)
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	f107 010f 	add.w	r1, r7, #15
 800597c:	2300      	movs	r3, #0
 800597e:	2200      	movs	r2, #0
 8005980:	f011 ffba 	bl	80178f8 <xQueueGenericSend>
			break;
 8005984:	e04d      	b.n	8005a22 <control_mode_change+0x1ba>
				last_trig_time = HAL_GetTick();
 8005986:	f005 fbb9 	bl	800b0fc <HAL_GetTick>
 800598a:	4603      	mov	r3, r0
 800598c:	4a29      	ldr	r2, [pc, #164]	; (8005a34 <control_mode_change+0x1cc>)
 800598e:	6013      	str	r3, [r2, #0]
			break;
 8005990:	e047      	b.n	8005a22 <control_mode_change+0x1ba>
			if (left_dial_input < -330) {
 8005992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005996:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 800599a:	da19      	bge.n	80059d0 <control_mode_change+0x168>
				if (HAL_GetTick() - last_trig_time > 1000) {
 800599c:	f005 fbae 	bl	800b0fc <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <control_mode_change+0x1cc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ac:	d93b      	bls.n	8005a26 <control_mode_change+0x1be>
					control_mode = REMOTE_CTRL_MODE;
 80059ae:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <control_mode_change+0x1d0>)
 80059b0:	2202      	movs	r2, #2
 80059b2:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 80059b4:	2304      	movs	r3, #4
 80059b6:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 80059b8:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <control_mode_change+0x1d8>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80059be:	4b1f      	ldr	r3, [pc, #124]	; (8005a3c <control_mode_change+0x1d4>)
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	f107 010f 	add.w	r1, r7, #15
 80059c6:	2300      	movs	r3, #0
 80059c8:	2200      	movs	r2, #0
 80059ca:	f011 ff95 	bl	80178f8 <xQueueGenericSend>
			break;
 80059ce:	e02a      	b.n	8005a26 <control_mode_change+0x1be>
			} else if (left_dial_input > 330) {
 80059d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059d4:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80059d8:	dd19      	ble.n	8005a0e <control_mode_change+0x1a6>
				if (HAL_GetTick() - last_trig_time > 1000) {
 80059da:	f005 fb8f 	bl	800b0fc <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	4b14      	ldr	r3, [pc, #80]	; (8005a34 <control_mode_change+0x1cc>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ea:	d91c      	bls.n	8005a26 <control_mode_change+0x1be>
					control_mode = KEYBOARD_CTRL_MODE;
 80059ec:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <control_mode_change+0x1d0>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 80059f2:	2303      	movs	r3, #3
 80059f4:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 80059f6:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <control_mode_change+0x1d8>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <control_mode_change+0x1d4>)
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	f107 010f 	add.w	r1, r7, #15
 8005a04:	2300      	movs	r3, #0
 8005a06:	2200      	movs	r2, #0
 8005a08:	f011 ff76 	bl	80178f8 <xQueueGenericSend>
			break;
 8005a0c:	e00b      	b.n	8005a26 <control_mode_change+0x1be>
				last_trig_time = HAL_GetTick();
 8005a0e:	f005 fb75 	bl	800b0fc <HAL_GetTick>
 8005a12:	4603      	mov	r3, r0
 8005a14:	4a07      	ldr	r2, [pc, #28]	; (8005a34 <control_mode_change+0x1cc>)
 8005a16:	6013      	str	r3, [r2, #0]
			break;
 8005a18:	e005      	b.n	8005a26 <control_mode_change+0x1be>
			break;
 8005a1a:	bf00      	nop
 8005a1c:	e004      	b.n	8005a28 <control_mode_change+0x1c0>
			break;
 8005a1e:	bf00      	nop
 8005a20:	e002      	b.n	8005a28 <control_mode_change+0x1c0>
			break;
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <control_mode_change+0x1c0>
			break;
 8005a26:	bf00      	nop
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000310 	.word	0x20000310
 8005a34:	20002820 	.word	0x20002820
 8005a38:	20000008 	.word	0x20000008
 8005a3c:	20000488 	.word	0x20000488
 8005a40:	2000281d 	.word	0x2000281d

08005a44 <gimbal_turn_ang>:

//ADDs angle to gimbal ctrl
void gimbal_turn_ang(float pit_radians, float yaw_radians) {
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a4e:	edc7 0a00 	vstr	s1, [r7]
	yaw_radians += gimbal_ctrl_data.yaw += yaw_radians;
 8005a52:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <gimbal_turn_ang+0xa4>)
 8005a54:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a58:	edd7 7a00 	vldr	s15, [r7]
 8005a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <gimbal_turn_ang+0xa4>)
 8005a62:	edc3 7a01 	vstr	s15, [r3, #4]
 8005a66:	4b20      	ldr	r3, [pc, #128]	; (8005ae8 <gimbal_turn_ang+0xa4>)
 8005a68:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a6c:	ed97 7a00 	vldr	s14, [r7]
 8005a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a74:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 8005a78:	e007      	b.n	8005a8a <gimbal_turn_ang+0x46>
		yaw_radians -= 2 * PI;
 8005a7a:	edd7 7a00 	vldr	s15, [r7]
 8005a7e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005aec <gimbal_turn_ang+0xa8>
 8005a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a86:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 8005a8a:	edd7 7a00 	vldr	s15, [r7]
 8005a8e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005af0 <gimbal_turn_ang+0xac>
 8005a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9a:	dcee      	bgt.n	8005a7a <gimbal_turn_ang+0x36>
	}
	while (yaw_radians < -PI) {
 8005a9c:	e007      	b.n	8005aae <gimbal_turn_ang+0x6a>
		yaw_radians += 2 * PI;
 8005a9e:	edd7 7a00 	vldr	s15, [r7]
 8005aa2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005aec <gimbal_turn_ang+0xa8>
 8005aa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005aaa:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians < -PI) {
 8005aae:	edd7 7a00 	vldr	s15, [r7]
 8005ab2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005af4 <gimbal_turn_ang+0xb0>
 8005ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005abe:	d4ee      	bmi.n	8005a9e <gimbal_turn_ang+0x5a>
	}
	gimbal_ctrl_data.pitch += pit_radians;
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <gimbal_turn_ang+0xa4>)
 8005ac2:	ed93 7a00 	vldr	s14, [r3]
 8005ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ace:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <gimbal_turn_ang+0xa4>)
 8005ad0:	edc3 7a00 	vstr	s15, [r3]
	gimbal_ctrl_data.yaw = yaw_radians;
 8005ad4:	4a04      	ldr	r2, [pc, #16]	; (8005ae8 <gimbal_turn_ang+0xa4>)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6053      	str	r3, [r2, #4]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	200027cc 	.word	0x200027cc
 8005aec:	40c90fdb 	.word	0x40c90fdb
 8005af0:	40490fdb 	.word	0x40490fdb
 8005af4:	c0490fdb 	.word	0xc0490fdb

08005af8 <set_gear>:
	}
	gimbal_ctrl_data.pitch = pit_radians;
	gimbal_ctrl_data.yaw = yaw_radians;
}

void set_gear() {
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
	switch (gear_speed.curr_gear) {
 8005afc:	4b35      	ldr	r3, [pc, #212]	; (8005bd4 <set_gear+0xdc>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	2b05      	cmp	r3, #5
 8005b04:	d854      	bhi.n	8005bb0 <set_gear+0xb8>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <set_gear+0x14>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b25 	.word	0x08005b25
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b55 	.word	0x08005b55
 8005b18:	08005b6f 	.word	0x08005b6f
 8005b1c:	08005b83 	.word	0x08005b83
 8005b20:	08005b9d 	.word	0x08005b9d
	case 1:
		gear_speed.spin_mult = GEAR1_YAW_MULT;
 8005b24:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <set_gear+0xdc>)
 8005b26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b2a:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR1_SPEED_MULT;
 8005b2c:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <set_gear+0xdc>)
 8005b2e:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <set_gear+0xe0>)
 8005b30:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR1_ACCEL_MULT;
 8005b32:	4b28      	ldr	r3, [pc, #160]	; (8005bd4 <set_gear+0xdc>)
 8005b34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b38:	60da      	str	r2, [r3, #12]
		break;
 8005b3a:	e046      	b.n	8005bca <set_gear+0xd2>
	case 2:
		gear_speed.spin_mult = GEAR2_YAW_MULT;
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <set_gear+0xdc>)
 8005b3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b42:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR2_SPEED_MULT;
 8005b44:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <set_gear+0xdc>)
 8005b46:	4a25      	ldr	r2, [pc, #148]	; (8005bdc <set_gear+0xe4>)
 8005b48:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR2_ACCEL_MULT;
 8005b4a:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <set_gear+0xdc>)
 8005b4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b50:	60da      	str	r2, [r3, #12]
		break;
 8005b52:	e03a      	b.n	8005bca <set_gear+0xd2>
	case 3:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8005b54:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <set_gear+0xdc>)
 8005b56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b5a:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005b5c:	4b1d      	ldr	r3, [pc, #116]	; (8005bd4 <set_gear+0xdc>)
 8005b5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b62:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8005b64:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <set_gear+0xdc>)
 8005b66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b6a:	60da      	str	r2, [r3, #12]
		break;
 8005b6c:	e02d      	b.n	8005bca <set_gear+0xd2>
	case 4:
		gear_speed.spin_mult = GEAR4_YAW_MULT;
 8005b6e:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <set_gear+0xdc>)
 8005b70:	4a1b      	ldr	r2, [pc, #108]	; (8005be0 <set_gear+0xe8>)
 8005b72:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR4_SPEED_MULT;
 8005b74:	4b17      	ldr	r3, [pc, #92]	; (8005bd4 <set_gear+0xdc>)
 8005b76:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <set_gear+0xec>)
 8005b78:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR4_ACCEL_MULT;
 8005b7a:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <set_gear+0xdc>)
 8005b7c:	4a18      	ldr	r2, [pc, #96]	; (8005be0 <set_gear+0xe8>)
 8005b7e:	60da      	str	r2, [r3, #12]
		break;
 8005b80:	e023      	b.n	8005bca <set_gear+0xd2>
	case 5:
		gear_speed.spin_mult = GEAR5_YAW_MULT;
 8005b82:	4b14      	ldr	r3, [pc, #80]	; (8005bd4 <set_gear+0xdc>)
 8005b84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b88:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR5_SPEED_MULT;
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <set_gear+0xdc>)
 8005b8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b90:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR5_ACCEL_MULT;
 8005b92:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <set_gear+0xdc>)
 8005b94:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005b98:	60da      	str	r2, [r3, #12]
		break;
 8005b9a:	e016      	b.n	8005bca <set_gear+0xd2>
	case 6:
		gear_speed.spin_mult = GEAR6_YAW_MULT;
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <set_gear+0xdc>)
 8005b9e:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <set_gear+0xf0>)
 8005ba0:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR6_SPEED_MULT;
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <set_gear+0xdc>)
 8005ba4:	4a11      	ldr	r2, [pc, #68]	; (8005bec <set_gear+0xf4>)
 8005ba6:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR6_ACCEL_MULT;
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <set_gear+0xdc>)
 8005baa:	4a11      	ldr	r2, [pc, #68]	; (8005bf0 <set_gear+0xf8>)
 8005bac:	60da      	str	r2, [r3, #12]
		break;
 8005bae:	e00c      	b.n	8005bca <set_gear+0xd2>
	default:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8005bb0:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <set_gear+0xdc>)
 8005bb2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005bb6:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <set_gear+0xdc>)
 8005bba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005bbe:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8005bc0:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <set_gear+0xdc>)
 8005bc2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005bc6:	60da      	str	r2, [r3, #12]
		break;
 8005bc8:	bf00      	nop
	}

}
 8005bca:	bf00      	nop
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	20002808 	.word	0x20002808
 8005bd8:	3ecccccd 	.word	0x3ecccccd
 8005bdc:	3f333333 	.word	0x3f333333
 8005be0:	3f99999a 	.word	0x3f99999a
 8005be4:	3fb33333 	.word	0x3fb33333
 8005be8:	40400000 	.word	0x40400000
 8005bec:	40a00000 	.word	0x40a00000
 8005bf0:	41200000 	.word	0x41200000

08005bf4 <chassis_yaw_pid_init>:

void chassis_yaw_pid_init() {
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
	yaw_pid_data.kp = CHASSIS_YAW_KP;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <chassis_yaw_pid_init+0x30>)
 8005bfa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005bfe:	601a      	str	r2, [r3, #0]
	yaw_pid_data.ki = CHASSIS_YAW_KI;
 8005c00:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <chassis_yaw_pid_init+0x30>)
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	605a      	str	r2, [r3, #4]
	yaw_pid_data.kd = CHASSIS_YAW_KD;
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <chassis_yaw_pid_init+0x30>)
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	609a      	str	r2, [r3, #8]
	yaw_pid_data.max_out = CHASSIS_YAW_MAX_RPM;
 8005c10:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <chassis_yaw_pid_init+0x30>)
 8005c12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005c16:	61da      	str	r2, [r3, #28]
}
 8005c18:	bf00      	nop
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	200027d8 	.word	0x200027d8

08005c28 <keyboard_control_input>:

extern int g_spinspin_mode;



void keyboard_control_input() {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
	mouse_gimbal_input();
 8005c2c:	f000 f918 	bl	8005e60 <mouse_gimbal_input>
	keyboard_chassis_input();
 8005c30:	f000 f86a 	bl	8005d08 <keyboard_chassis_input>
	mouse_launcher_control_input();
 8005c34:	f000 f984 	bl	8005f40 <mouse_launcher_control_input>
}
 8005c38:	bf00      	nop
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <keyboard_gear_shifter>:

void keyboard_gear_shifter(speed_shift_t *gear_speed) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	uint8_t temp_msg;
	if ((remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT)
 8005c44:	4b2c      	ldr	r3, [pc, #176]	; (8005cf8 <keyboard_gear_shifter+0xbc>)
 8005c46:	8b5b      	ldrh	r3, [r3, #26]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d013      	beq.n	8005c78 <keyboard_gear_shifter+0x3c>
			&& (remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)) {
 8005c50:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <keyboard_gear_shifter+0xbc>)
 8005c52:	8b5b      	ldrh	r3, [r3, #26]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00d      	beq.n	8005c78 <keyboard_gear_shifter+0x3c>
		gear_speed->curr_gear = 3;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2203      	movs	r2, #3
 8005c60:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8005c62:	f005 fa4b 	bl	800b0fc <HAL_GetTick>
 8005c66:	4603      	mov	r3, r0
 8005c68:	4a24      	ldr	r2, [pc, #144]	; (8005cfc <keyboard_gear_shifter+0xc0>)
 8005c6a:	6013      	str	r3, [r2, #0]
		ctrl_press_time = HAL_GetTick();
 8005c6c:	f005 fa46 	bl	800b0fc <HAL_GetTick>
 8005c70:	4603      	mov	r3, r0
 8005c72:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <keyboard_gear_shifter+0xc4>)
 8005c74:	6013      	str	r3, [r2, #0]
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
		}
		ctrl_press_time = HAL_GetTick();
	}

}
 8005c76:	e03a      	b.n	8005cee <keyboard_gear_shifter+0xb2>
	else if (remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT) {
 8005c78:	4b1f      	ldr	r3, [pc, #124]	; (8005cf8 <keyboard_gear_shifter+0xbc>)
 8005c7a:	8b5b      	ldrh	r3, [r3, #26]
 8005c7c:	f003 0310 	and.w	r3, r3, #16
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d017      	beq.n	8005cb4 <keyboard_gear_shifter+0x78>
		if (HAL_GetTick() - shift_press_time > 100) {
 8005c84:	f005 fa3a 	bl	800b0fc <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <keyboard_gear_shifter+0xc0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b64      	cmp	r3, #100	; 0x64
 8005c92:	d909      	bls.n	8005ca8 <keyboard_gear_shifter+0x6c>
					(gear_speed->curr_gear < 5) ? gear_speed->curr_gear + 1 : 5;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	bf28      	it	cs
 8005c9c:	2304      	movcs	r3, #4
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8005ca8:	f005 fa28 	bl	800b0fc <HAL_GetTick>
 8005cac:	4603      	mov	r3, r0
 8005cae:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <keyboard_gear_shifter+0xc0>)
 8005cb0:	6013      	str	r3, [r2, #0]
}
 8005cb2:	e01c      	b.n	8005cee <keyboard_gear_shifter+0xb2>
	else if (remote_cmd.keyboard_keys & KEY_OFFSET_CTRL) {
 8005cb4:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <keyboard_gear_shifter+0xbc>)
 8005cb6:	8b5b      	ldrh	r3, [r3, #26]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d016      	beq.n	8005cee <keyboard_gear_shifter+0xb2>
		if (HAL_GetTick() - ctrl_press_time > 100) {
 8005cc0:	f005 fa1c 	bl	800b0fc <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <keyboard_gear_shifter+0xc4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b64      	cmp	r3, #100	; 0x64
 8005cce:	d909      	bls.n	8005ce4 <keyboard_gear_shifter+0xa8>
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	bf38      	it	cc
 8005cd8:	2302      	movcc	r3, #2
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	701a      	strb	r2, [r3, #0]
		ctrl_press_time = HAL_GetTick();
 8005ce4:	f005 fa0a 	bl	800b0fc <HAL_GetTick>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	4a05      	ldr	r2, [pc, #20]	; (8005d00 <keyboard_gear_shifter+0xc4>)
 8005cec:	6013      	str	r3, [r2, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000310 	.word	0x20000310
 8005cfc:	20002824 	.word	0x20002824
 8005d00:	20002828 	.word	0x20002828
 8005d04:	00000000 	.word	0x00000000

08005d08 <keyboard_chassis_input>:

void keyboard_chassis_input() {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8005d0e:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <keyboard_chassis_input+0x148>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <keyboard_chassis_input+0x18>
 8005d16:	4b4f      	ldr	r3, [pc, #316]	; (8005e54 <keyboard_chassis_input+0x14c>)
 8005d18:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d00f      	beq.n	8005d40 <keyboard_chassis_input+0x38>
		chassis_ctrl_data.enabled = 0;
 8005d20:	4b4d      	ldr	r3, [pc, #308]	; (8005e58 <keyboard_chassis_input+0x150>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	751a      	strb	r2, [r3, #20]
		chassis_ctrl_data.horizontal = 0;
 8005d26:	4b4c      	ldr	r3, [pc, #304]	; (8005e58 <keyboard_chassis_input+0x150>)
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	605a      	str	r2, [r3, #4]
		chassis_ctrl_data.forward = 0;
 8005d2e:	4b4a      	ldr	r3, [pc, #296]	; (8005e58 <keyboard_chassis_input+0x150>)
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
		chassis_ctrl_data.yaw = 0;
 8005d36:	4b48      	ldr	r3, [pc, #288]	; (8005e58 <keyboard_chassis_input+0x150>)
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	609a      	str	r2, [r3, #8]
			chassis_ctrl_data.horizontal = horizontal_input;
			chassis_ctrl_data.forward = forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 8005d3e:	e07f      	b.n	8005e40 <keyboard_chassis_input+0x138>
		if (remote_cmd.right_switch == ge_RSW_ALL_ON) {
 8005d40:	4b44      	ldr	r3, [pc, #272]	; (8005e54 <keyboard_chassis_input+0x14c>)
 8005d42:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d17a      	bne.n	8005e40 <keyboard_chassis_input+0x138>
			chassis_ctrl_data.enabled = 1;
 8005d4a:	4b43      	ldr	r3, [pc, #268]	; (8005e58 <keyboard_chassis_input+0x150>)
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	607b      	str	r3, [r7, #4]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_Q) {
 8005d62:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <keyboard_chassis_input+0x14c>)
 8005d64:	8b5b      	ldrh	r3, [r3, #26]
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <keyboard_chassis_input+0x6e>
				g_spinspin_mode = 1;
 8005d6e:	4b3b      	ldr	r3, [pc, #236]	; (8005e5c <keyboard_chassis_input+0x154>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e008      	b.n	8005d88 <keyboard_chassis_input+0x80>
			} else if (remote_cmd.keyboard_keys & KEY_OFFSET_E) {
 8005d76:	4b37      	ldr	r3, [pc, #220]	; (8005e54 <keyboard_chassis_input+0x14c>)
 8005d78:	8b5b      	ldrh	r3, [r3, #26]
 8005d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <keyboard_chassis_input+0x80>
				g_spinspin_mode = 0;
 8005d82:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <keyboard_chassis_input+0x154>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_W) {
 8005d88:	4b32      	ldr	r3, [pc, #200]	; (8005e54 <keyboard_chassis_input+0x14c>)
 8005d8a:	8b5b      	ldrh	r3, [r3, #26]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <keyboard_chassis_input+0x9c>
				forward_input += KEYBD_MAX_SPD;
 8005d94:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005da0:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_S) {
 8005da4:	4b2b      	ldr	r3, [pc, #172]	; (8005e54 <keyboard_chassis_input+0x14c>)
 8005da6:	8b5b      	ldrh	r3, [r3, #26]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <keyboard_chassis_input+0xb8>
				forward_input -= KEYBD_MAX_SPD;
 8005db0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005db8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dbc:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_A) {
 8005dc0:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <keyboard_chassis_input+0x14c>)
 8005dc2:	8b5b      	ldrh	r3, [r3, #26]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <keyboard_chassis_input+0xd4>
				horizontal_input -= KEYBD_MAX_SPD;
 8005dcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dd8:	edc7 7a03 	vstr	s15, [r7, #12]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_D) {
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <keyboard_chassis_input+0x14c>)
 8005dde:	8b5b      	ldrh	r3, [r3, #26]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <keyboard_chassis_input+0xf0>
				horizontal_input += KEYBD_MAX_SPD;
 8005de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005df4:	edc7 7a03 	vstr	s15, [r7, #12]
			if (g_spinspin_mode) {
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <keyboard_chassis_input+0x154>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d012      	beq.n	8005e26 <keyboard_chassis_input+0x11e>
				yaw_input = g_spinspin_mode * CHASSIS_SPINSPIN_MAX;
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <keyboard_chassis_input+0x154>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fa fb8d 	bl	8000524 <__aeabi_i2d>
 8005e0a:	a30f      	add	r3, pc, #60	; (adr r3, 8005e48 <keyboard_chassis_input+0x140>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f7fa fbf2 	bl	80005f8 <__aeabi_dmul>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f7fa fee4 	bl	8000be8 <__aeabi_d2f>
 8005e20:	4603      	mov	r3, r0
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	e003      	b.n	8005e2e <keyboard_chassis_input+0x126>
				yaw_input = chassis_center_yaw();
 8005e26:	f7ff fc8f 	bl	8005748 <chassis_center_yaw>
 8005e2a:	ed87 0a01 	vstr	s0, [r7, #4]
			chassis_ctrl_data.horizontal = horizontal_input;
 8005e2e:	4a0a      	ldr	r2, [pc, #40]	; (8005e58 <keyboard_chassis_input+0x150>)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6053      	str	r3, [r2, #4]
			chassis_ctrl_data.forward = forward_input;
 8005e34:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <keyboard_chassis_input+0x150>)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 8005e3a:	4a07      	ldr	r2, [pc, #28]	; (8005e58 <keyboard_chassis_input+0x150>)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6093      	str	r3, [r2, #8]
}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	cccccccd 	.word	0xcccccccd
 8005e4c:	3feccccc 	.word	0x3feccccc
 8005e50:	2000281c 	.word	0x2000281c
 8005e54:	20000310 	.word	0x20000310
 8005e58:	200027ac 	.word	0x200027ac
 8005e5c:	20002818 	.word	0x20002818

08005e60 <mouse_gimbal_input>:

void mouse_gimbal_input() {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005e66:	4b30      	ldr	r3, [pc, #192]	; (8005f28 <mouse_gimbal_input+0xc8>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <mouse_gimbal_input+0x18>
 8005e6e:	4b2f      	ldr	r3, [pc, #188]	; (8005f2c <mouse_gimbal_input+0xcc>)
 8005e70:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d103      	bne.n	8005e80 <mouse_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8005e78:	4b2d      	ldr	r3, [pc, #180]	; (8005f30 <mouse_gimbal_input+0xd0>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	725a      	strb	r2, [r3, #9]
 8005e7e:	e04e      	b.n	8005f1e <mouse_gimbal_input+0xbe>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8005e80:	4b2b      	ldr	r3, [pc, #172]	; (8005f30 <mouse_gimbal_input+0xd0>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	725a      	strb	r2, [r3, #9]
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 8005e86:	4b29      	ldr	r3, [pc, #164]	; (8005f2c <mouse_gimbal_input+0xcc>)
 8005e88:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e94:	ee17 0a90 	vmov	r0, s15
 8005e98:	f7fa fb56 	bl	8000548 <__aeabi_f2d>
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <mouse_gimbal_input+0xd4>)
 8005ea2:	f7fa fba9 	bl	80005f8 <__aeabi_dmul>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <mouse_gimbal_input+0xd8>)
 8005eb4:	f7fa fcca 	bl	800084c <__aeabi_ddiv>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	f7fa fe92 	bl	8000be8 <__aeabi_d2f>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	607b      	str	r3, [r7, #4]
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 8005ec8:	4b18      	ldr	r3, [pc, #96]	; (8005f2c <mouse_gimbal_input+0xcc>)
 8005eca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;
 8005ed6:	eef1 7a67 	vneg.f32	s15, s15
 8005eda:	ee17 3a90 	vmov	r3, s15
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fa fb32 	bl	8000548 <__aeabi_f2d>
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <mouse_gimbal_input+0xdc>)
 8005eea:	f7fa fb85 	bl	80005f8 <__aeabi_dmul>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <mouse_gimbal_input+0xd8>)
 8005efc:	f7fa fca6 	bl	800084c <__aeabi_ddiv>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	f7fa fe6e 	bl	8000be8 <__aeabi_d2f>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_mouse, yaw_mouse);
 8005f10:	edd7 0a00 	vldr	s1, [r7]
 8005f14:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f18:	f7ff fd94 	bl	8005a44 <gimbal_turn_ang>
	}
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	2000281c 	.word	0x2000281c
 8005f2c:	20000310 	.word	0x20000310
 8005f30:	200027cc 	.word	0x200027cc
 8005f34:	40240000 	.word	0x40240000
 8005f38:	40e00000 	.word	0x40e00000
 8005f3c:	40340000 	.word	0x40340000

08005f40 <mouse_launcher_control_input>:

void mouse_launcher_control_input() {
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
	if (safety_toggle || launcher_safety_toggle
 8005f44:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <mouse_launcher_control_input+0xa8>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10d      	bne.n	8005f68 <mouse_launcher_control_input+0x28>
 8005f4c:	4b27      	ldr	r3, [pc, #156]	; (8005fec <mouse_launcher_control_input+0xac>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <mouse_launcher_control_input+0x28>
			|| remote_cmd.right_switch == ge_RSW_SHUTDOWN
 8005f54:	4b26      	ldr	r3, [pc, #152]	; (8005ff0 <mouse_launcher_control_input+0xb0>)
 8005f56:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d004      	beq.n	8005f68 <mouse_launcher_control_input+0x28>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <mouse_launcher_control_input+0xb0>)
 8005f60:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d016      	beq.n	8005f96 <mouse_launcher_control_input+0x56>
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005f68:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <mouse_launcher_control_input+0xb0>)
 8005f6a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d102      	bne.n	8005f78 <mouse_launcher_control_input+0x38>
			launcher_ctrl_data.enabled = 0;
 8005f72:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <mouse_launcher_control_input+0xb4>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	715a      	strb	r2, [r3, #5]
		}
		launcher_ctrl_data.gun_feeding_speed = 0;
 8005f78:	4b1e      	ldr	r3, [pc, #120]	; (8005ff4 <mouse_launcher_control_input+0xb4>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8005f7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <mouse_launcher_control_input+0xb4>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005f84:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <mouse_launcher_control_input+0xb0>)
 8005f86:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d027      	beq.n	8005fde <mouse_launcher_control_input+0x9e>
			launcher_safety_toggle = 0;
 8005f8e:	4b17      	ldr	r3, [pc, #92]	; (8005fec <mouse_launcher_control_input+0xac>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005f94:	e023      	b.n	8005fde <mouse_launcher_control_input+0x9e>
		}
	} else {
		launcher_ctrl_data.enabled = 1;
 8005f96:	4b17      	ldr	r3, [pc, #92]	; (8005ff4 <mouse_launcher_control_input+0xb4>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 8005f9c:	4b15      	ldr	r3, [pc, #84]	; (8005ff4 <mouse_launcher_control_input+0xb4>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <mouse_launcher_control_input+0xb0>)
 8005fa4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d10b      	bne.n	8005fc4 <mouse_launcher_control_input+0x84>
			if (remote_cmd.mouse_right) {
 8005fac:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <mouse_launcher_control_input+0xb0>)
 8005fae:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <mouse_launcher_control_input+0x7e>
				launcher_ctrl_data.override = 1;
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <mouse_launcher_control_input+0xb4>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	711a      	strb	r2, [r3, #4]
 8005fbc:	e002      	b.n	8005fc4 <mouse_launcher_control_input+0x84>
			} else {
				launcher_ctrl_data.override = 0;
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <mouse_launcher_control_input+0xb4>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	711a      	strb	r2, [r3, #4]
			}
		}
		if (remote_cmd.mouse_left) {
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <mouse_launcher_control_input+0xb0>)
 8005fc6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <mouse_launcher_control_input+0x96>
			launcher_ctrl_data.gun_feeding_speed =1;
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <mouse_launcher_control_input+0xb4>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	805a      	strh	r2, [r3, #2]

		} else {
			launcher_ctrl_data.gun_feeding_speed = 0;
		}
	}
}
 8005fd4:	e003      	b.n	8005fde <mouse_launcher_control_input+0x9e>
			launcher_ctrl_data.gun_feeding_speed = 0;
 8005fd6:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <mouse_launcher_control_input+0xb4>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	805a      	strh	r2, [r3, #2]
}
 8005fdc:	e7ff      	b.n	8005fde <mouse_launcher_control_input+0x9e>
 8005fde:	bf00      	nop
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	2000281c 	.word	0x2000281c
 8005fec:	2000281d 	.word	0x2000281d
 8005ff0:	20000310 	.word	0x20000310
 8005ff4:	200027c4 	.word	0x200027c4

08005ff8 <remote_control_input>:
extern gimbal_control_t gimbal_ctrl_data;
extern uint8_t safety_toggle;
extern uint8_t launcher_safety_toggle;


void remote_control_input() {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
	remote_gimbal_input();
 8005ffc:	f000 f8dc 	bl	80061b8 <remote_gimbal_input>
	remote_chassis_input();
 8006000:	f000 f880 	bl	8006104 <remote_chassis_input>
	remote_launcher_control_input();
 8006004:	f000 f940 	bl	8006288 <remote_launcher_control_input>
}
 8006008:	bf00      	nop
 800600a:	bd80      	pop	{r7, pc}

0800600c <remote_gear_shifter>:
void remote_gear_shifter(speed_shift_t* gear_speed){
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	uint8_t temp_msg;
	if (remote_cmd.left_switch == ge_LSW_CONFIG) {
 8006014:	4b37      	ldr	r3, [pc, #220]	; (80060f4 <remote_gear_shifter+0xe8>)
 8006016:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d166      	bne.n	80060ec <remote_gear_shifter+0xe0>
		if (remote_cmd.side_dial > 330) {
 800601e:	4b35      	ldr	r3, [pc, #212]	; (80060f4 <remote_gear_shifter+0xe8>)
 8006020:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006024:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8006028:	dd2d      	ble.n	8006086 <remote_gear_shifter+0x7a>
			if (HAL_GetTick() - shift_press_time > 100) {
 800602a:	f005 f867 	bl	800b0fc <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	4b31      	ldr	r3, [pc, #196]	; (80060f8 <remote_gear_shifter+0xec>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d91f      	bls.n	800607a <remote_gear_shifter+0x6e>
				gear_speed->curr_gear =
						(gear_speed->curr_gear < 6) ?
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 800603e:	2b05      	cmp	r3, #5
 8006040:	bf28      	it	cs
 8006042:	2305      	movcs	r3, #5
 8006044:	b2db      	uxtb	r3, r3
 8006046:	3301      	adds	r3, #1
 8006048:	b2da      	uxtb	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	701a      	strb	r2, [r3, #0]
								gear_speed->curr_gear + 1 : 6;
				temp_msg = bz_high;
 800604e:	2306      	movs	r3, #6
 8006050:	73fb      	strb	r3, [r7, #15]
				for (uint i = 0; i < gear_speed->curr_gear; i++) {
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	e00a      	b.n	800606e <remote_gear_shifter+0x62>
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8006058:	4b28      	ldr	r3, [pc, #160]	; (80060fc <remote_gear_shifter+0xf0>)
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	f107 010f 	add.w	r1, r7, #15
 8006060:	2300      	movs	r3, #0
 8006062:	2200      	movs	r2, #0
 8006064:	f011 fc48 	bl	80178f8 <xQueueGenericSend>
				for (uint i = 0; i < gear_speed->curr_gear; i++) {
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3301      	adds	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	4293      	cmp	r3, r2
 8006078:	d3ee      	bcc.n	8006058 <remote_gear_shifter+0x4c>
				}
			}
			shift_press_time = HAL_GetTick();
 800607a:	f005 f83f 	bl	800b0fc <HAL_GetTick>
 800607e:	4603      	mov	r3, r0
 8006080:	4a1d      	ldr	r2, [pc, #116]	; (80060f8 <remote_gear_shifter+0xec>)
 8006082:	6013      	str	r3, [r2, #0]
				}
			}
			ctrl_press_time = HAL_GetTick();
		}
	}
}
 8006084:	e032      	b.n	80060ec <remote_gear_shifter+0xe0>
		else if (remote_cmd.side_dial < -330) {
 8006086:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <remote_gear_shifter+0xe8>)
 8006088:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800608c:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 8006090:	da2c      	bge.n	80060ec <remote_gear_shifter+0xe0>
			if (HAL_GetTick() - ctrl_press_time > 100) {
 8006092:	f005 f833 	bl	800b0fc <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	4b19      	ldr	r3, [pc, #100]	; (8006100 <remote_gear_shifter+0xf4>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b64      	cmp	r3, #100	; 0x64
 80060a0:	d91f      	bls.n	80060e2 <remote_gear_shifter+0xd6>
						(gear_speed->curr_gear > 1) ?
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	bf38      	it	cc
 80060aa:	2302      	movcc	r3, #2
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	701a      	strb	r2, [r3, #0]
				temp_msg = bz_low;
 80060b6:	2307      	movs	r3, #7
 80060b8:	73fb      	strb	r3, [r7, #15]
				for (uint i = 0; i < gear_speed->curr_gear; i++) {
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	e00a      	b.n	80060d6 <remote_gear_shifter+0xca>
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80060c0:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <remote_gear_shifter+0xf0>)
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	f107 010f 	add.w	r1, r7, #15
 80060c8:	2300      	movs	r3, #0
 80060ca:	2200      	movs	r2, #0
 80060cc:	f011 fc14 	bl	80178f8 <xQueueGenericSend>
				for (uint i = 0; i < gear_speed->curr_gear; i++) {
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3301      	adds	r3, #1
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4293      	cmp	r3, r2
 80060e0:	d3ee      	bcc.n	80060c0 <remote_gear_shifter+0xb4>
			ctrl_press_time = HAL_GetTick();
 80060e2:	f005 f80b 	bl	800b0fc <HAL_GetTick>
 80060e6:	4603      	mov	r3, r0
 80060e8:	4a05      	ldr	r2, [pc, #20]	; (8006100 <remote_gear_shifter+0xf4>)
 80060ea:	6013      	str	r3, [r2, #0]
}
 80060ec:	bf00      	nop
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000310 	.word	0x20000310
 80060f8:	2000282c 	.word	0x2000282c
 80060fc:	20000488 	.word	0x20000488
 8006100:	20002830 	.word	0x20002830

08006104 <remote_chassis_input>:

void remote_chassis_input() {
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 800610a:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <remote_chassis_input+0xa0>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d104      	bne.n	800611c <remote_chassis_input+0x18>
 8006112:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <remote_chassis_input+0xa4>)
 8006114:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d002      	beq.n	8006122 <remote_chassis_input+0x1e>
//		chassis_ctrl_data.enabled = 0;
		chassis_kill_ctrl();
 800611c:	f7ff fb56 	bl	80057cc <chassis_kill_ctrl>
 8006120:	e03b      	b.n	800619a <remote_chassis_input+0x96>
	} else {
			chassis_ctrl_data.enabled = 1;
 8006122:	4b22      	ldr	r3, [pc, #136]	; (80061ac <remote_chassis_input+0xa8>)
 8006124:	2201      	movs	r2, #1
 8006126:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8006128:	f04f 0300 	mov.w	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	607b      	str	r3, [r7, #4]

			forward_input = (float) remote_cmd.left_y / RC_LIMITS;
 800613a:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <remote_chassis_input+0xa4>)
 800613c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006148:	eddf 6a19 	vldr	s13, [pc, #100]	; 80061b0 <remote_chassis_input+0xac>
 800614c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006150:	edc7 7a02 	vstr	s15, [r7, #8]
			horizontal_input = (float) remote_cmd.left_x / RC_LIMITS;
 8006154:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <remote_chassis_input+0xa4>)
 8006156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006162:	eddf 6a13 	vldr	s13, [pc, #76]	; 80061b0 <remote_chassis_input+0xac>
 8006166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800616a:	edc7 7a03 	vstr	s15, [r7, #12]
//			yaw_input = chassis_center_yaw();
yaw_input = (float) remote_cmd.right_x * CHASSIS_YAW_MAX_RPM /RC_LIMITS;
 800616e:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <remote_chassis_input+0xa4>)
 8006170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800617c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80061b0 <remote_chassis_input+0xac>
 8006180:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006184:	edc7 7a01 	vstr	s15, [r7, #4]
			chassis_set_ctrl(forward_input, horizontal_input, yaw_input);
 8006188:	ed97 1a01 	vldr	s2, [r7, #4]
 800618c:	edd7 0a03 	vldr	s1, [r7, #12]
 8006190:	ed97 0a02 	vldr	s0, [r7, #8]
 8006194:	f7ff fafc 	bl	8005790 <chassis_set_ctrl>
	}
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	2000281c 	.word	0x2000281c
 80061a8:	20000310 	.word	0x20000310
 80061ac:	200027ac 	.word	0x200027ac
 80061b0:	44250000 	.word	0x44250000
 80061b4:	00000000 	.word	0x00000000

080061b8 <remote_gimbal_input>:

void remote_gimbal_input() {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 80061be:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <remote_gimbal_input+0xc0>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <remote_gimbal_input+0x18>
 80061c6:	4b2d      	ldr	r3, [pc, #180]	; (800627c <remote_gimbal_input+0xc4>)
 80061c8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d103      	bne.n	80061d8 <remote_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 80061d0:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <remote_gimbal_input+0xc8>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	725a      	strb	r2, [r3, #9]
 80061d6:	e047      	b.n	8006268 <remote_gimbal_input+0xb0>
	} else {
		gimbal_ctrl_data.enabled = 1;
 80061d8:	4b29      	ldr	r3, [pc, #164]	; (8006280 <remote_gimbal_input+0xc8>)
 80061da:	2201      	movs	r2, #1
 80061dc:	725a      	strb	r2, [r3, #9]
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 80061de:	4b27      	ldr	r3, [pc, #156]	; (800627c <remote_gimbal_input+0xc4>)
 80061e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006284 <remote_gimbal_input+0xcc>
 80061f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061f4:	eef1 7a67 	vneg.f32	s15, s15
 80061f8:	ee17 3a90 	vmov	r3, s15
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fa f9a3 	bl	8000548 <__aeabi_f2d>
				* REMOTE_PITCH_SPEED;
 8006202:	a31b      	add	r3, pc, #108	; (adr r3, 8006270 <remote_gimbal_input+0xb8>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f7fa f9f6 	bl	80005f8 <__aeabi_dmul>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 8006210:	4610      	mov	r0, r2
 8006212:	4619      	mov	r1, r3
 8006214:	f7fa fce8 	bl	8000be8 <__aeabi_d2f>
 8006218:	4603      	mov	r3, r0
 800621a:	607b      	str	r3, [r7, #4]
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 800621c:	4b17      	ldr	r3, [pc, #92]	; (800627c <remote_gimbal_input+0xc4>)
 800621e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800622a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8006284 <remote_gimbal_input+0xcc>
 800622e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006232:	eef1 7a67 	vneg.f32	s15, s15
 8006236:	ee17 3a90 	vmov	r3, s15
 800623a:	4618      	mov	r0, r3
 800623c:	f7fa f984 	bl	8000548 <__aeabi_f2d>
				* REMOTE_YAW_SPEED;
 8006240:	a30b      	add	r3, pc, #44	; (adr r3, 8006270 <remote_gimbal_input+0xb8>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	f7fa fcc9 	bl	8000be8 <__aeabi_d2f>
 8006256:	4603      	mov	r3, r0
 8006258:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_remote, yaw_remote);
 800625a:	edd7 0a00 	vldr	s1, [r7]
 800625e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006262:	f7ff fbef 	bl	8005a44 <gimbal_turn_ang>
	}
}
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	9999999a 	.word	0x9999999a
 8006274:	3fa99999 	.word	0x3fa99999
 8006278:	2000281c 	.word	0x2000281c
 800627c:	20000310 	.word	0x20000310
 8006280:	200027cc 	.word	0x200027cc
 8006284:	44250000 	.word	0x44250000

08006288 <remote_launcher_control_input>:


void remote_launcher_control_input() {
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN
 800628c:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <remote_launcher_control_input+0x7c>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <remote_launcher_control_input+0x20>
 8006294:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <remote_launcher_control_input+0x80>)
 8006296:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d004      	beq.n	80062a8 <remote_launcher_control_input+0x20>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 800629e:	4b1a      	ldr	r3, [pc, #104]	; (8006308 <remote_launcher_control_input+0x80>)
 80062a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d016      	beq.n	80062d6 <remote_launcher_control_input+0x4e>
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 80062a8:	4b17      	ldr	r3, [pc, #92]	; (8006308 <remote_launcher_control_input+0x80>)
 80062aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d002      	beq.n	80062b8 <remote_launcher_control_input+0x30>
			launcher_safety_toggle = 0;
 80062b2:	4b16      	ldr	r3, [pc, #88]	; (800630c <remote_launcher_control_input+0x84>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
		}
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <remote_launcher_control_input+0x80>)
 80062ba:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d102      	bne.n	80062c8 <remote_launcher_control_input+0x40>
							launcher_ctrl_data.enabled = 0;
 80062c2:	4b13      	ldr	r3, [pc, #76]	; (8006310 <remote_launcher_control_input+0x88>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	715a      	strb	r2, [r3, #5]
				}
//		launcher_ctrl_data.enabled = 0;
		launcher_ctrl_data.gun_feeding_speed = 0;
 80062c8:	4b11      	ldr	r3, [pc, #68]	; (8006310 <remote_launcher_control_input+0x88>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 80062ce:	4b10      	ldr	r3, [pc, #64]	; (8006310 <remote_launcher_control_input+0x88>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	801a      	strh	r2, [r3, #0]
		} else {
			launcher_ctrl_data.gun_feeding_speed = 0;
		}
	}

}
 80062d4:	e011      	b.n	80062fa <remote_launcher_control_input+0x72>
		launcher_ctrl_data.enabled = 1;
 80062d6:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <remote_launcher_control_input+0x88>)
 80062d8:	2201      	movs	r2, #1
 80062da:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 80062dc:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <remote_launcher_control_input+0x88>)
 80062de:	2201      	movs	r2, #1
 80062e0:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <remote_launcher_control_input+0x80>)
 80062e4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d103      	bne.n	80062f4 <remote_launcher_control_input+0x6c>
			launcher_ctrl_data.gun_feeding_speed = 1;
 80062ec:	4b08      	ldr	r3, [pc, #32]	; (8006310 <remote_launcher_control_input+0x88>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	805a      	strh	r2, [r3, #2]
}
 80062f2:	e002      	b.n	80062fa <remote_launcher_control_input+0x72>
			launcher_ctrl_data.gun_feeding_speed = 0;
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <remote_launcher_control_input+0x88>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	805a      	strh	r2, [r3, #2]
}
 80062fa:	bf00      	nop
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	2000281c 	.word	0x2000281c
 8006308:	20000310 	.word	0x20000310
 800630c:	2000281d 	.word	0x2000281d
 8006310:	200027c4 	.word	0x200027c4

08006314 <aimbot_pid_init>:
		sbc_new_data = 0;
		control_reset();
	}
}

void aimbot_pid_init() {
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
	aimbot_offset.y_offset = 0;
 8006318:	4b1a      	ldr	r3, [pc, #104]	; (8006384 <aimbot_pid_init+0x70>)
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	605a      	str	r2, [r3, #4]
	aimbot_offset.x_offset = 0;
 8006320:	4b18      	ldr	r3, [pc, #96]	; (8006384 <aimbot_pid_init+0x70>)
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.kp = AIMBOT_X_KP;
 8006328:	4b17      	ldr	r3, [pc, #92]	; (8006388 <aimbot_pid_init+0x74>)
 800632a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800632e:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.ki = AIMBOT_X_KI;
 8006330:	4b15      	ldr	r3, [pc, #84]	; (8006388 <aimbot_pid_init+0x74>)
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	605a      	str	r2, [r3, #4]
	aimbot_x_pid.kd = AIMBOT_X_KD;
 8006338:	4b13      	ldr	r3, [pc, #76]	; (8006388 <aimbot_pid_init+0x74>)
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	609a      	str	r2, [r3, #8]
	aimbot_x_pid.max_out = 1.5;
 8006340:	4b11      	ldr	r3, [pc, #68]	; (8006388 <aimbot_pid_init+0x74>)
 8006342:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8006346:	61da      	str	r2, [r3, #28]
	aimbot_x_pid.int_max = AIMBOT_KI_MAX;
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <aimbot_pid_init+0x74>)
 800634a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800634e:	619a      	str	r2, [r3, #24]

	aimbot_y_pid.kp = AIMBOT_Y_KP;
 8006350:	4b0e      	ldr	r3, [pc, #56]	; (800638c <aimbot_pid_init+0x78>)
 8006352:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006356:	601a      	str	r2, [r3, #0]
	aimbot_y_pid.ki = AIMBOT_Y_KI;
 8006358:	4b0c      	ldr	r3, [pc, #48]	; (800638c <aimbot_pid_init+0x78>)
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	605a      	str	r2, [r3, #4]
	aimbot_y_pid.kd = AIMBOT_Y_KD;
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <aimbot_pid_init+0x78>)
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	609a      	str	r2, [r3, #8]
	aimbot_y_pid.max_out = 1.5;
 8006368:	4b08      	ldr	r3, [pc, #32]	; (800638c <aimbot_pid_init+0x78>)
 800636a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800636e:	61da      	str	r2, [r3, #28]
	aimbot_y_pid.int_max = AIMBOT_KI_MAX;
 8006370:	4b06      	ldr	r3, [pc, #24]	; (800638c <aimbot_pid_init+0x78>)
 8006372:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006376:	619a      	str	r2, [r3, #24]
}
 8006378:	bf00      	nop
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20002898 	.word	0x20002898
 8006388:	20002864 	.word	0x20002864
 800638c:	20002834 	.word	0x20002834

08006390 <gimbal_control_task>:
 *
 * FreeRTOS task for gimbal controls
 * Has HIGH2 priority
 *
 */
void gimbal_control_task(void *argument) {
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af02      	add	r7, sp, #8
 8006396:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdTRUE,
 8006398:	4b24      	ldr	r3, [pc, #144]	; (800642c <gimbal_control_task+0x9c>)
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	f04f 33ff 	mov.w	r3, #4294967295
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	2301      	movs	r3, #1
 80063a4:	2201      	movs	r2, #1
 80063a6:	2103      	movs	r1, #3
 80063a8:	f010 fee0 	bl	801716c <xEventGroupWaitBits>
		portMAX_DELAY);
		start_time = xTaskGetTickCount();
 80063ac:	f012 faa0 	bl	80188f0 <xTaskGetTickCount>
 80063b0:	4603      	mov	r3, r0
 80063b2:	60fb      	str	r3, [r7, #12]
		if (gimbal_ctrl_data.enabled) {
 80063b4:	4b1e      	ldr	r3, [pc, #120]	; (8006430 <gimbal_control_task+0xa0>)
 80063b6:	7a5b      	ldrb	r3, [r3, #9]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d011      	beq.n	80063e0 <gimbal_control_task+0x50>
			if (gimbal_ctrl_data.imu_mode) {
 80063bc:	4b1c      	ldr	r3, [pc, #112]	; (8006430 <gimbal_control_task+0xa0>)
 80063be:	7a1b      	ldrb	r3, [r3, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d006      	beq.n	80063d2 <gimbal_control_task+0x42>
				gimbal_control(can_motors + PITCH_MOTOR_ID - 1,
 80063c4:	4b1b      	ldr	r3, [pc, #108]	; (8006434 <gimbal_control_task+0xa4>)
 80063c6:	4a1c      	ldr	r2, [pc, #112]	; (8006438 <gimbal_control_task+0xa8>)
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f838 	bl	8006440 <gimbal_control>
 80063d0:	e01a      	b.n	8006408 <gimbal_control_task+0x78>
						can_motors + YAW_MOTOR_ID - 1);
			} else {
				gimbal_angle_control(can_motors + PITCH_MOTOR_ID - 1,
 80063d2:	4b18      	ldr	r3, [pc, #96]	; (8006434 <gimbal_control_task+0xa4>)
 80063d4:	4a18      	ldr	r2, [pc, #96]	; (8006438 <gimbal_control_task+0xa8>)
 80063d6:	4611      	mov	r1, r2
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 f92f 	bl	800663c <gimbal_angle_control>
 80063de:	e013      	b.n	8006408 <gimbal_control_task+0x78>
						can_motors + YAW_MOTOR_ID - 1);
			}
		} else {
			can_motors[PITCH_MOTOR_ID - 1].rpm_pid.output = 0;
 80063e0:	4b16      	ldr	r3, [pc, #88]	; (800643c <gimbal_control_task+0xac>)
 80063e2:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
			can_motors[YAW_MOTOR_ID - 1].rpm_pid.output = 0;
 80063ec:	4b13      	ldr	r3, [pc, #76]	; (800643c <gimbal_control_task+0xac>)
 80063ee:	f603 3314 	addw	r3, r3, #2836	; 0xb14
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
			motor_send_can(can_motors, PITCH_MOTOR_ID, YAW_MOTOR_ID, 0, 0);
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2300      	movs	r3, #0
 80063fe:	2212      	movs	r2, #18
 8006400:	2111      	movs	r1, #17
 8006402:	480e      	ldr	r0, [pc, #56]	; (800643c <gimbal_control_task+0xac>)
 8006404:	f003 fa9c 	bl	8009940 <motor_send_can>
		}
		status_led(2, off_led);
 8006408:	2101      	movs	r1, #1
 800640a:	2002      	movs	r0, #2
 800640c:	f7fb fde4 	bl	8001fd8 <status_led>
		xEventGroupClearBits(gimbal_event_group, 0b11);
 8006410:	4b06      	ldr	r3, [pc, #24]	; (800642c <gimbal_control_task+0x9c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2103      	movs	r1, #3
 8006416:	4618      	mov	r0, r3
 8006418:	f010 ff76 	bl	8017308 <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, GIMBAL_DELAY);
 800641c:	f107 030c 	add.w	r3, r7, #12
 8006420:	2105      	movs	r1, #5
 8006422:	4618      	mov	r0, r3
 8006424:	f012 f896 	bl	8018554 <vTaskDelayUntil>
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdTRUE,
 8006428:	e7b6      	b.n	8006398 <gimbal_control_task+0x8>
 800642a:	bf00      	nop
 800642c:	2000046c 	.word	0x2000046c
 8006430:	200027cc 	.word	0x200027cc
 8006434:	2000228c 	.word	0x2000228c
 8006438:	20002330 	.word	0x20002330
 800643c:	2000184c 	.word	0x2000184c

08006440 <gimbal_control>:
 * 			yaw_motor		Pointer to yaw motor struct
 * @note both pitch and yaw are currently on CAN2 with ID5 and 6.
 * Need to check if having ID4 (i.e. 0x208) + having the launcher motors (ID 1-3, 0x201 to 0x203)
 * still provides a fast enough response
 */
void gimbal_control(motor_data_t *pitch_motor, motor_data_t *yaw_motor) {
 8006440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006444:	b088      	sub	sp, #32
 8006446:	af02      	add	r7, sp, #8
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
	static float prev_pit;
	static float prev_yaw;
	//todo: add in roll compensation
	uint8_t pit_lim = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	75fb      	strb	r3, [r7, #23]
	uint8_t yaw_lim = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	75bb      	strb	r3, [r7, #22]
#ifndef PITCH_ARM			// for robots that do not have a 4 bar linkage on the pitch motor to the pitch assembly
	float rel_pitch_angle = pitch_motor->angle_data.adj_ang
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
			+ gimbal_ctrl_data.pitch - imu_heading.pit;
 800645a:	4b70      	ldr	r3, [pc, #448]	; (800661c <gimbal_control+0x1dc>)
 800645c:	edd3 7a00 	vldr	s15, [r3]
 8006460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006464:	4b6e      	ldr	r3, [pc, #440]	; (8006620 <gimbal_control+0x1e0>)
 8006466:	edd3 7a00 	vldr	s15, [r3]
	float rel_pitch_angle = pitch_motor->angle_data.adj_ang
 800646a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800646e:	edc7 7a04 	vstr	s15, [r7, #16]
	if (rel_pitch_angle > pitch_motor->angle_data.max_ang) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8006478:	ed97 7a04 	vldr	s14, [r7, #16]
 800647c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006484:	dd04      	ble.n	8006490 <gimbal_control+0x50>
		rel_pitch_angle = pitch_motor->angle_data.max_ang;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648a:	613b      	str	r3, [r7, #16]
		pit_lim = 1;
 800648c:	2301      	movs	r3, #1
 800648e:	75fb      	strb	r3, [r7, #23]
	}
	if (rel_pitch_angle < pitch_motor->angle_data.min_ang) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8006496:	ed97 7a04 	vldr	s14, [r7, #16]
 800649a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800649e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a2:	d504      	bpl.n	80064ae <gimbal_control+0x6e>
		rel_pitch_angle = pitch_motor->angle_data.min_ang;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064a8:	613b      	str	r3, [r7, #16]
		pit_lim = 1;
 80064aa:	2301      	movs	r3, #1
 80064ac:	75fb      	strb	r3, [r7, #23]
	}
	if (pit_lim == 1) {
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d10e      	bne.n	80064d2 <gimbal_control+0x92>
		gimbal_ctrl_data.pitch = rel_pitch_angle + imu_heading.pit
 80064b4:	4b5a      	ldr	r3, [pc, #360]	; (8006620 <gimbal_control+0x1e0>)
 80064b6:	ed93 7a00 	vldr	s14, [r3]
 80064ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80064be:	ee37 7a27 	vadd.f32	s14, s14, s15
				- pitch_motor->angle_data.adj_ang;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80064c8:	ee77 7a67 	vsub.f32	s15, s14, s15
		gimbal_ctrl_data.pitch = rel_pitch_angle + imu_heading.pit
 80064cc:	4b53      	ldr	r3, [pc, #332]	; (800661c <gimbal_control+0x1dc>)
 80064ce:	edc3 7a00 	vstr	s15, [r3]
	}

	yangle_pid(gimbal_ctrl_data.pitch,imu_heading.pit, pitch_motor,
 80064d2:	4b52      	ldr	r3, [pc, #328]	; (800661c <gimbal_control+0x1dc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fa f836 	bl	8000548 <__aeabi_f2d>
 80064dc:	4604      	mov	r4, r0
 80064de:	460d      	mov	r5, r1
 80064e0:	4b4f      	ldr	r3, [pc, #316]	; (8006620 <gimbal_control+0x1e0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fa f82f 	bl	8000548 <__aeabi_f2d>
 80064ea:	4680      	mov	r8, r0
 80064ec:	4689      	mov	r9, r1
 80064ee:	4b4c      	ldr	r3, [pc, #304]	; (8006620 <gimbal_control+0x1e0>)
 80064f0:	edd3 7a00 	vldr	s15, [r3]
 80064f4:	494b      	ldr	r1, [pc, #300]	; (8006624 <gimbal_control+0x1e4>)
 80064f6:	eeb0 2a67 	vmov.f32	s4, s15
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	ec49 8b11 	vmov	d1, r8, r9
 8006500:	ec45 4b10 	vmov	d0, r4, r5
 8006504:	f002 ff40 	bl	8009388 <yangle_pid>
		rel_pitch_angle = pitch_motor->angle_data.min_ang;
	}
	angle_pid(gimbal_ctrl_data.pitch, pitch_motor->angle_data.adj_ang, pitch_motor);
#endif

	float rel_yaw_angle = yaw_motor->angle_data.adj_ang + gimbal_ctrl_data.yaw
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800650e:	4b43      	ldr	r3, [pc, #268]	; (800661c <gimbal_control+0x1dc>)
 8006510:	edd3 7a01 	vldr	s15, [r3, #4]
 8006514:	ee37 7a27 	vadd.f32	s14, s14, s15
			- imu_heading.yaw;
 8006518:	4b41      	ldr	r3, [pc, #260]	; (8006620 <gimbal_control+0x1e0>)
 800651a:	edd3 7a02 	vldr	s15, [r3, #8]
	float rel_yaw_angle = yaw_motor->angle_data.adj_ang + gimbal_ctrl_data.yaw
 800651e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006522:	edc7 7a03 	vstr	s15, [r7, #12]

	//if yaw has overflowed (i.e. goes to the next round) move it back into pi to -pi range
	if (rel_yaw_angle > PI) {
 8006526:	edd7 7a03 	vldr	s15, [r7, #12]
 800652a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006628 <gimbal_control+0x1e8>
 800652e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006536:	dd07      	ble.n	8006548 <gimbal_control+0x108>
		rel_yaw_angle -= 2 * PI;
 8006538:	edd7 7a03 	vldr	s15, [r7, #12]
 800653c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800662c <gimbal_control+0x1ec>
 8006540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006544:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if (rel_yaw_angle < -PI) {
 8006548:	edd7 7a03 	vldr	s15, [r7, #12]
 800654c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006630 <gimbal_control+0x1f0>
 8006550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006558:	d507      	bpl.n	800656a <gimbal_control+0x12a>
		rel_yaw_angle += 2 * PI;
 800655a:	edd7 7a03 	vldr	s15, [r7, #12]
 800655e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800662c <gimbal_control+0x1ec>
 8006562:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006566:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	//check limits
	if (rel_yaw_angle > yaw_motor->angle_data.max_ang) {
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8006570:	ed97 7a03 	vldr	s14, [r7, #12]
 8006574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657c:	dd04      	ble.n	8006588 <gimbal_control+0x148>
		rel_yaw_angle = yaw_motor->angle_data.max_ang;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006582:	60fb      	str	r3, [r7, #12]
		yaw_lim = 1;
 8006584:	2301      	movs	r3, #1
 8006586:	75bb      	strb	r3, [r7, #22]
	}
	if (rel_yaw_angle < yaw_motor->angle_data.min_ang) {
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800658e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659a:	d504      	bpl.n	80065a6 <gimbal_control+0x166>
		rel_yaw_angle = yaw_motor->angle_data.min_ang;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a0:	60fb      	str	r3, [r7, #12]
		yaw_lim = 1;
 80065a2:	2301      	movs	r3, #1
 80065a4:	75bb      	strb	r3, [r7, #22]
	}
	if (yaw_lim == 1) {
 80065a6:	7dbb      	ldrb	r3, [r7, #22]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10e      	bne.n	80065ca <gimbal_control+0x18a>
		gimbal_ctrl_data.yaw = rel_yaw_angle + imu_heading.yaw
 80065ac:	4b1c      	ldr	r3, [pc, #112]	; (8006620 <gimbal_control+0x1e0>)
 80065ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80065b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80065b6:	ee37 7a27 	vadd.f32	s14, s14, s15
				- yaw_motor->angle_data.adj_ang;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80065c0:	ee77 7a67 	vsub.f32	s15, s14, s15
		gimbal_ctrl_data.yaw = rel_yaw_angle + imu_heading.yaw
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <gimbal_control+0x1dc>)
 80065c6:	edc3 7a01 	vstr	s15, [r3, #4]

	}

//	yangle_pid(rel_yaw_angle, yaw_motor->angle_data.adj_ang, yaw_motor,
//			imu_heading.yaw, &prev_yaw);
	yangle_pid(gimbal_ctrl_data.yaw, imu_heading.yaw, yaw_motor,
 80065ca:	4b14      	ldr	r3, [pc, #80]	; (800661c <gimbal_control+0x1dc>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7f9 ffba 	bl	8000548 <__aeabi_f2d>
 80065d4:	4604      	mov	r4, r0
 80065d6:	460d      	mov	r5, r1
 80065d8:	4b11      	ldr	r3, [pc, #68]	; (8006620 <gimbal_control+0x1e0>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7f9 ffb3 	bl	8000548 <__aeabi_f2d>
 80065e2:	4680      	mov	r8, r0
 80065e4:	4689      	mov	r9, r1
 80065e6:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <gimbal_control+0x1e0>)
 80065e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80065ec:	4911      	ldr	r1, [pc, #68]	; (8006634 <gimbal_control+0x1f4>)
 80065ee:	eeb0 2a67 	vmov.f32	s4, s15
 80065f2:	6838      	ldr	r0, [r7, #0]
 80065f4:	ec49 8b11 	vmov	d1, r8, r9
 80065f8:	ec45 4b10 	vmov	d0, r4, r5
 80065fc:	f002 fec4 	bl	8009388 <yangle_pid>
//	float chassis_yaw_speed = g_chassis_yaw * FR_DIST * 2 * PI * chassis_rpm / 19.2;
//	oangle_pid(gimbal_ctrl_data.yaw, imu_heading.yaw, yaw_motor,chassis_yaw_speed);
//	angle_pid(rel_yaw_angle, yaw_motor->angle_data.adj_ang, yaw_motor);
//	angle_pid(gimbal_ctrl_data.yaw, imu_heading.yaw, yaw_motor);

	motor_send_can(can_motors, PITCH_MOTOR_ID, YAW_MOTOR_ID, 0, 0);
 8006600:	2300      	movs	r3, #0
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	2212      	movs	r2, #18
 8006608:	2111      	movs	r1, #17
 800660a:	480b      	ldr	r0, [pc, #44]	; (8006638 <gimbal_control+0x1f8>)
 800660c:	f003 f998 	bl	8009940 <motor_send_can>


}
 8006610:	bf00      	nop
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800661a:	bf00      	nop
 800661c:	200027cc 	.word	0x200027cc
 8006620:	20002a28 	.word	0x20002a28
 8006624:	200028a0 	.word	0x200028a0
 8006628:	40490fdb 	.word	0x40490fdb
 800662c:	40c90fdb 	.word	0x40c90fdb
 8006630:	c0490fdb 	.word	0xc0490fdb
 8006634:	200028a4 	.word	0x200028a4
 8006638:	2000184c 	.word	0x2000184c

0800663c <gimbal_angle_control>:

void gimbal_angle_control(motor_data_t *pitch_motor, motor_data_t *yaw_motor) {
 800663c:	b5b0      	push	{r4, r5, r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af02      	add	r7, sp, #8
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]

	if (gimbal_ctrl_data.pitch > pitch_motor->angle_data.max_ang) {
 8006646:	4b3a      	ldr	r3, [pc, #232]	; (8006730 <gimbal_angle_control+0xf4>)
 8006648:	ed93 7a00 	vldr	s14, [r3]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8006652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665a:	dd03      	ble.n	8006664 <gimbal_angle_control+0x28>
		gimbal_ctrl_data.pitch = pitch_motor->angle_data.max_ang;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006660:	4a33      	ldr	r2, [pc, #204]	; (8006730 <gimbal_angle_control+0xf4>)
 8006662:	6013      	str	r3, [r2, #0]
	}
	if (gimbal_ctrl_data.pitch < pitch_motor->angle_data.min_ang) {
 8006664:	4b32      	ldr	r3, [pc, #200]	; (8006730 <gimbal_angle_control+0xf4>)
 8006666:	ed93 7a00 	vldr	s14, [r3]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8006670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006678:	d503      	bpl.n	8006682 <gimbal_angle_control+0x46>
		gimbal_ctrl_data.pitch = pitch_motor->angle_data.min_ang;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800667e:	4a2c      	ldr	r2, [pc, #176]	; (8006730 <gimbal_angle_control+0xf4>)
 8006680:	6013      	str	r3, [r2, #0]
	}

	if (gimbal_ctrl_data.yaw > yaw_motor->angle_data.max_ang) {
 8006682:	4b2b      	ldr	r3, [pc, #172]	; (8006730 <gimbal_angle_control+0xf4>)
 8006684:	ed93 7a01 	vldr	s14, [r3, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800668e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006696:	dd03      	ble.n	80066a0 <gimbal_angle_control+0x64>
		gimbal_ctrl_data.yaw = yaw_motor->angle_data.max_ang;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669c:	4a24      	ldr	r2, [pc, #144]	; (8006730 <gimbal_angle_control+0xf4>)
 800669e:	6053      	str	r3, [r2, #4]
	}
	if (gimbal_ctrl_data.yaw < yaw_motor->angle_data.min_ang) {
 80066a0:	4b23      	ldr	r3, [pc, #140]	; (8006730 <gimbal_angle_control+0xf4>)
 80066a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80066ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b4:	d503      	bpl.n	80066be <gimbal_angle_control+0x82>
		gimbal_ctrl_data.yaw = yaw_motor->angle_data.min_ang;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ba:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <gimbal_angle_control+0xf4>)
 80066bc:	6053      	str	r3, [r2, #4]
	}
	angle_pid(gimbal_ctrl_data.pitch, pitch_motor->angle_data.adj_ang,
 80066be:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <gimbal_angle_control+0xf4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7f9 ff40 	bl	8000548 <__aeabi_f2d>
 80066c8:	4604      	mov	r4, r0
 80066ca:	460d      	mov	r5, r1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7f9 ff38 	bl	8000548 <__aeabi_f2d>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	ec43 2b11 	vmov	d1, r2, r3
 80066e2:	ec45 4b10 	vmov	d0, r4, r5
 80066e6:	f002 ff97 	bl	8009618 <angle_pid>
			pitch_motor);
	angle_pid(gimbal_ctrl_data.yaw, yaw_motor->angle_data.adj_ang, yaw_motor);
 80066ea:	4b11      	ldr	r3, [pc, #68]	; (8006730 <gimbal_angle_control+0xf4>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7f9 ff2a 	bl	8000548 <__aeabi_f2d>
 80066f4:	4604      	mov	r4, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066fe:	4618      	mov	r0, r3
 8006700:	f7f9 ff22 	bl	8000548 <__aeabi_f2d>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	6838      	ldr	r0, [r7, #0]
 800670a:	ec43 2b11 	vmov	d1, r2, r3
 800670e:	ec45 4b10 	vmov	d0, r4, r5
 8006712:	f002 ff81 	bl	8009618 <angle_pid>
	motor_send_can(can_motors, PITCH_MOTOR_ID, YAW_MOTOR_ID, 0, 0);
 8006716:	2300      	movs	r3, #0
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	2300      	movs	r3, #0
 800671c:	2212      	movs	r2, #18
 800671e:	2111      	movs	r1, #17
 8006720:	4804      	ldr	r0, [pc, #16]	; (8006734 <gimbal_angle_control+0xf8>)
 8006722:	f003 f90d 	bl	8009940 <motor_send_can>
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bdb0      	pop	{r4, r5, r7, pc}
 800672e:	bf00      	nop
 8006730:	200027cc 	.word	0x200027cc
 8006734:	2000184c 	.word	0x2000184c

08006738 <hud_task>:
ref_inter_robot_data_t graphic_header;
graphic_data_struct_t graphic_data;
ref_frame_header_t send_header;
uint8_t char_buffer[30];

void hud_task(void *argument) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]

	enum drawings {
		spinspin, gearing, robot_state, motor_fault, refresh

	};
	while (ref_robot_data.robot_id == 0) {
 8006740:	e002      	b.n	8006748 <hud_task+0x10>
		vTaskDelay(10);
 8006742:	200a      	movs	r0, #10
 8006744:	f011 ff84 	bl	8018650 <vTaskDelay>
	while (ref_robot_data.robot_id == 0) {
 8006748:	4b69      	ldr	r3, [pc, #420]	; (80068f0 <hud_task+0x1b8>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f8      	beq.n	8006742 <hud_task+0xa>
	}
	uint32_t refresh_timer = HAL_GetTick();
 8006750:	f004 fcd4 	bl	800b0fc <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

	uint8_t draw_state = spinspin;
 8006756:	2300      	movs	r3, #0
 8006758:	72fb      	strb	r3, [r7, #11]
	//draw all images
	vTaskDelay(1000);
 800675a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800675e:	f011 ff77 	bl	8018650 <vTaskDelay>
	clear_hud();
 8006762:	f000 fb29 	bl	8006db8 <clear_hud>
	vTaskDelay(150);
 8006766:	2096      	movs	r0, #150	; 0x96
 8006768:	f011 ff72 	bl	8018650 <vTaskDelay>
	draw_spinspin(0);
 800676c:	2000      	movs	r0, #0
 800676e:	f000 f8c3 	bl	80068f8 <draw_spinspin>
	vTaskDelay(150);
 8006772:	2096      	movs	r0, #150	; 0x96
 8006774:	f011 ff6c 	bl	8018650 <vTaskDelay>
	draw_gearing(0);
 8006778:	2000      	movs	r0, #0
 800677a:	f000 f9f5 	bl	8006b68 <draw_gearing>
	vTaskDelay(150);
 800677e:	2096      	movs	r0, #150	; 0x96
 8006780:	f011 ff66 	bl	8018650 <vTaskDelay>
	while (1) {
		if (HAL_GetTick() - refresh_timer > 5000){
 8006784:	f004 fcba 	bl	800b0fc <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006792:	4293      	cmp	r3, r2
 8006794:	d904      	bls.n	80067a0 <hud_task+0x68>
			draw_state = refresh;
 8006796:	2304      	movs	r3, #4
 8006798:	72fb      	strb	r3, [r7, #11]
			refresh_timer = HAL_GetTick();
 800679a:	f004 fcaf 	bl	800b0fc <HAL_GetTick>
 800679e:	60f8      	str	r0, [r7, #12]
		}
		switch (ref_robot_data.robot_id) {
 80067a0:	4b53      	ldr	r3, [pc, #332]	; (80068f0 <hud_task+0x1b8>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b06      	cmp	r3, #6
 80067a6:	dc27      	bgt.n	80067f8 <hud_task+0xc0>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dc13      	bgt.n	80067d4 <hud_task+0x9c>
 80067ac:	e065      	b.n	800687a <hud_task+0x142>
 80067ae:	3b65      	subs	r3, #101	; 0x65
 80067b0:	2b05      	cmp	r3, #5
 80067b2:	d862      	bhi.n	800687a <hud_task+0x142>
 80067b4:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <hud_task+0x84>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	0800683f 	.word	0x0800683f
 80067c0:	08006849 	.word	0x08006849
 80067c4:	08006853 	.word	0x08006853
 80067c8:	0800685d 	.word	0x0800685d
 80067cc:	08006867 	.word	0x08006867
 80067d0:	08006871 	.word	0x08006871
 80067d4:	3b01      	subs	r3, #1
 80067d6:	2b05      	cmp	r3, #5
 80067d8:	d84f      	bhi.n	800687a <hud_task+0x142>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <hud_task+0xa8>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006803 	.word	0x08006803
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	08006817 	.word	0x08006817
 80067ec:	08006821 	.word	0x08006821
 80067f0:	0800682b 	.word	0x0800682b
 80067f4:	08006835 	.word	0x08006835
 80067f8:	2b6a      	cmp	r3, #106	; 0x6a
 80067fa:	dc3e      	bgt.n	800687a <hud_task+0x142>
 80067fc:	2b65      	cmp	r3, #101	; 0x65
 80067fe:	dad6      	bge.n	80067ae <hud_task+0x76>
 8006800:	e03b      	b.n	800687a <hud_task+0x142>
		case 1:
			g_client_id = 0x101;
 8006802:	4b3c      	ldr	r3, [pc, #240]	; (80068f4 <hud_task+0x1bc>)
 8006804:	f240 1201 	movw	r2, #257	; 0x101
 8006808:	801a      	strh	r2, [r3, #0]
			break;
 800680a:	e03a      	b.n	8006882 <hud_task+0x14a>
		case 2:
			g_client_id = 0x102;
 800680c:	4b39      	ldr	r3, [pc, #228]	; (80068f4 <hud_task+0x1bc>)
 800680e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006812:	801a      	strh	r2, [r3, #0]
			break;
 8006814:	e035      	b.n	8006882 <hud_task+0x14a>
		case 3:
			g_client_id = 0x103;
 8006816:	4b37      	ldr	r3, [pc, #220]	; (80068f4 <hud_task+0x1bc>)
 8006818:	f240 1203 	movw	r2, #259	; 0x103
 800681c:	801a      	strh	r2, [r3, #0]
			break;
 800681e:	e030      	b.n	8006882 <hud_task+0x14a>
		case 4:
			g_client_id = 0x104;
 8006820:	4b34      	ldr	r3, [pc, #208]	; (80068f4 <hud_task+0x1bc>)
 8006822:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006826:	801a      	strh	r2, [r3, #0]
			break;
 8006828:	e02b      	b.n	8006882 <hud_task+0x14a>
		case 5:
			g_client_id = 0x105;
 800682a:	4b32      	ldr	r3, [pc, #200]	; (80068f4 <hud_task+0x1bc>)
 800682c:	f240 1205 	movw	r2, #261	; 0x105
 8006830:	801a      	strh	r2, [r3, #0]
			break;
 8006832:	e026      	b.n	8006882 <hud_task+0x14a>
		case 6:
			g_client_id = 0x106;
 8006834:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <hud_task+0x1bc>)
 8006836:	f44f 7283 	mov.w	r2, #262	; 0x106
 800683a:	801a      	strh	r2, [r3, #0]
			break;
 800683c:	e021      	b.n	8006882 <hud_task+0x14a>

		case 101:
			g_client_id = 0x165;
 800683e:	4b2d      	ldr	r3, [pc, #180]	; (80068f4 <hud_task+0x1bc>)
 8006840:	f240 1265 	movw	r2, #357	; 0x165
 8006844:	801a      	strh	r2, [r3, #0]
			break;
 8006846:	e01c      	b.n	8006882 <hud_task+0x14a>
		case 102:
			g_client_id = 0x166;
 8006848:	4b2a      	ldr	r3, [pc, #168]	; (80068f4 <hud_task+0x1bc>)
 800684a:	f44f 72b3 	mov.w	r2, #358	; 0x166
 800684e:	801a      	strh	r2, [r3, #0]
			break;
 8006850:	e017      	b.n	8006882 <hud_task+0x14a>
		case 103:
			g_client_id = 0x167;
 8006852:	4b28      	ldr	r3, [pc, #160]	; (80068f4 <hud_task+0x1bc>)
 8006854:	f240 1267 	movw	r2, #359	; 0x167
 8006858:	801a      	strh	r2, [r3, #0]
			break;
 800685a:	e012      	b.n	8006882 <hud_task+0x14a>
		case 104:
			g_client_id = 0x168;
 800685c:	4b25      	ldr	r3, [pc, #148]	; (80068f4 <hud_task+0x1bc>)
 800685e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8006862:	801a      	strh	r2, [r3, #0]
			break;
 8006864:	e00d      	b.n	8006882 <hud_task+0x14a>
		case 105:
			g_client_id = 0x169;
 8006866:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <hud_task+0x1bc>)
 8006868:	f240 1269 	movw	r2, #361	; 0x169
 800686c:	801a      	strh	r2, [r3, #0]
			break;
 800686e:	e008      	b.n	8006882 <hud_task+0x14a>
		case 106:
			g_client_id = 0x16A;
 8006870:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <hud_task+0x1bc>)
 8006872:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006876:	801a      	strh	r2, [r3, #0]
			break;
 8006878:	e003      	b.n	8006882 <hud_task+0x14a>
		default:
			g_client_id = 0;
 800687a:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <hud_task+0x1bc>)
 800687c:	2200      	movs	r2, #0
 800687e:	801a      	strh	r2, [r3, #0]
			break;
 8006880:	bf00      	nop

		}



		switch (draw_state) {
 8006882:	7afb      	ldrb	r3, [r7, #11]
 8006884:	2b04      	cmp	r3, #4
 8006886:	d82d      	bhi.n	80068e4 <hud_task+0x1ac>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <hud_task+0x158>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068a5 	.word	0x080068a5
 8006894:	080068b1 	.word	0x080068b1
 8006898:	080068e5 	.word	0x080068e5
 800689c:	080068e5 	.word	0x080068e5
 80068a0:	080068bd 	.word	0x080068bd
		case spinspin:
			draw_spinspin(1);
 80068a4:	2001      	movs	r0, #1
 80068a6:	f000 f827 	bl	80068f8 <draw_spinspin>
			draw_state = gearing;
 80068aa:	2301      	movs	r3, #1
 80068ac:	72fb      	strb	r3, [r7, #11]
			break;
 80068ae:	e01a      	b.n	80068e6 <hud_task+0x1ae>
		case gearing:
			draw_gearing(1);
 80068b0:	2001      	movs	r0, #1
 80068b2:	f000 f959 	bl	8006b68 <draw_gearing>
			draw_state = spinspin;
 80068b6:	2300      	movs	r3, #0
 80068b8:	72fb      	strb	r3, [r7, #11]
			break;
 80068ba:	e014      	b.n	80068e6 <hud_task+0x1ae>
		case robot_state:
			break;
		case motor_fault:
			break;
		case refresh:
			clear_hud();
 80068bc:	f000 fa7c 	bl	8006db8 <clear_hud>
			vTaskDelay(150);
 80068c0:	2096      	movs	r0, #150	; 0x96
 80068c2:	f011 fec5 	bl	8018650 <vTaskDelay>
			draw_spinspin(0);
 80068c6:	2000      	movs	r0, #0
 80068c8:	f000 f816 	bl	80068f8 <draw_spinspin>
			vTaskDelay(150);
 80068cc:	2096      	movs	r0, #150	; 0x96
 80068ce:	f011 febf 	bl	8018650 <vTaskDelay>
			draw_gearing(0);
 80068d2:	2000      	movs	r0, #0
 80068d4:	f000 f948 	bl	8006b68 <draw_gearing>
			vTaskDelay(150);
 80068d8:	2096      	movs	r0, #150	; 0x96
 80068da:	f011 feb9 	bl	8018650 <vTaskDelay>
			draw_state = spinspin;
 80068de:	2300      	movs	r3, #0
 80068e0:	72fb      	strb	r3, [r7, #11]
			break;
 80068e2:	e000      	b.n	80068e6 <hud_task+0x1ae>
		default:
			break;
 80068e4:	bf00      	nop
		}
		vTaskDelay(150);
 80068e6:	2096      	movs	r0, #150	; 0x96
 80068e8:	f011 feb2 	bl	8018650 <vTaskDelay>
		if (HAL_GetTick() - refresh_timer > 5000){
 80068ec:	e74a      	b.n	8006784 <hud_task+0x4c>
 80068ee:	bf00      	nop
 80068f0:	20002b30 	.word	0x20002b30
 80068f4:	200028a8 	.word	0x200028a8

080068f8 <draw_spinspin>:
	}
}

void draw_spinspin(uint8_t modify) {
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]
	uint8_t char_len = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
	curr_pos = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
	if (g_spinspin_mode == 0) {
 800690e:	4b8a      	ldr	r3, [pc, #552]	; (8006b38 <draw_spinspin+0x240>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10d      	bne.n	8006932 <draw_spinspin+0x3a>
		graphic_data.color = 4; //orange
 8006916:	4a89      	ldr	r2, [pc, #548]	; (8006b3c <draw_spinspin+0x244>)
 8006918:	7913      	ldrb	r3, [r2, #4]
 800691a:	2104      	movs	r1, #4
 800691c:	f361 0385 	bfi	r3, r1, #2, #4
 8006920:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN OFF");
 8006922:	4a87      	ldr	r2, [pc, #540]	; (8006b40 <draw_spinspin+0x248>)
 8006924:	211e      	movs	r1, #30
 8006926:	4887      	ldr	r0, [pc, #540]	; (8006b44 <draw_spinspin+0x24c>)
 8006928:	f015 fb9a 	bl	801c060 <sniprintf>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]
 8006930:	e00c      	b.n	800694c <draw_spinspin+0x54>
	} else {
		graphic_data.color = 3; //orange
 8006932:	4a82      	ldr	r2, [pc, #520]	; (8006b3c <draw_spinspin+0x244>)
 8006934:	7913      	ldrb	r3, [r2, #4]
 8006936:	2103      	movs	r1, #3
 8006938:	f361 0385 	bfi	r3, r1, #2, #4
 800693c:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN ON");
 800693e:	4a82      	ldr	r2, [pc, #520]	; (8006b48 <draw_spinspin+0x250>)
 8006940:	211e      	movs	r1, #30
 8006942:	4880      	ldr	r0, [pc, #512]	; (8006b44 <draw_spinspin+0x24c>)
 8006944:	f015 fb8c 	bl	801c060 <sniprintf>
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]
	}
	send_header.start_frame = 0xA5;
 800694c:	4b7f      	ldr	r3, [pc, #508]	; (8006b4c <draw_spinspin+0x254>)
 800694e:	22a5      	movs	r2, #165	; 0xa5
 8006950:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8006952:	4b7e      	ldr	r3, [pc, #504]	; (8006b4c <draw_spinspin+0x254>)
 8006954:	2200      	movs	r2, #0
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	715a      	strb	r2, [r3, #5]
 800695c:	2200      	movs	r2, #0
 800695e:	f042 0203 	orr.w	r2, r2, #3
 8006962:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8006964:	4b7a      	ldr	r3, [pc, #488]	; (8006b50 <draw_spinspin+0x258>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	b2d1      	uxtb	r1, r2
 800696c:	4a78      	ldr	r2, [pc, #480]	; (8006b50 <draw_spinspin+0x258>)
 800696e:	7011      	strb	r1, [r2, #0]
 8006970:	4a76      	ldr	r2, [pc, #472]	; (8006b4c <draw_spinspin+0x254>)
 8006972:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	b29b      	uxth	r3, r3
 8006978:	3315      	adds	r3, #21
 800697a:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 800697c:	4b73      	ldr	r3, [pc, #460]	; (8006b4c <draw_spinspin+0x254>)
 800697e:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 8006982:	4b73      	ldr	r3, [pc, #460]	; (8006b50 <draw_spinspin+0x258>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	b2d1      	uxtb	r1, r2
 800698a:	4a71      	ldr	r2, [pc, #452]	; (8006b50 <draw_spinspin+0x258>)
 800698c:	7011      	strb	r1, [r2, #0]
 800698e:	4a6f      	ldr	r2, [pc, #444]	; (8006b4c <draw_spinspin+0x254>)
 8006990:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4a6f      	ldr	r2, [pc, #444]	; (8006b54 <draw_spinspin+0x25c>)
 8006996:	4413      	add	r3, r2
 8006998:	4a6c      	ldr	r2, [pc, #432]	; (8006b4c <draw_spinspin+0x254>)
 800699a:	6810      	ldr	r0, [r2, #0]
 800699c:	6018      	str	r0, [r3, #0]
 800699e:	8891      	ldrh	r1, [r2, #4]
 80069a0:	7992      	ldrb	r2, [r2, #6]
 80069a2:	8099      	strh	r1, [r3, #4]
 80069a4:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	3307      	adds	r3, #7
 80069aa:	60bb      	str	r3, [r7, #8]
	append_CRC8_check_sum(tx_buffer, 5);
 80069ac:	2105      	movs	r1, #5
 80069ae:	4869      	ldr	r0, [pc, #420]	; (8006b54 <draw_spinspin+0x25c>)
 80069b0:	f7fa fb6b 	bl	800108a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 80069b4:	4b68      	ldr	r3, [pc, #416]	; (8006b58 <draw_spinspin+0x260>)
 80069b6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80069ba:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 80069bc:	4b67      	ldr	r3, [pc, #412]	; (8006b5c <draw_spinspin+0x264>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	4b65      	ldr	r3, [pc, #404]	; (8006b58 <draw_spinspin+0x260>)
 80069c4:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 80069c6:	4b66      	ldr	r3, [pc, #408]	; (8006b60 <draw_spinspin+0x268>)
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	4b63      	ldr	r3, [pc, #396]	; (8006b58 <draw_spinspin+0x260>)
 80069cc:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4a60      	ldr	r2, [pc, #384]	; (8006b54 <draw_spinspin+0x25c>)
 80069d2:	4413      	add	r3, r2
 80069d4:	4a60      	ldr	r2, [pc, #384]	; (8006b58 <draw_spinspin+0x260>)
 80069d6:	6810      	ldr	r0, [r2, #0]
 80069d8:	6018      	str	r0, [r3, #0]
 80069da:	8892      	ldrh	r2, [r2, #4]
 80069dc:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	3306      	adds	r3, #6
 80069e2:	60bb      	str	r3, [r7, #8]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 80069e4:	4b55      	ldr	r3, [pc, #340]	; (8006b3c <draw_spinspin+0x244>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 80069ea:	4b54      	ldr	r3, [pc, #336]	; (8006b3c <draw_spinspin+0x244>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 1;
 80069f0:	4b52      	ldr	r3, [pc, #328]	; (8006b3c <draw_spinspin+0x244>)
 80069f2:	2201      	movs	r2, #1
 80069f4:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 80069f6:	4b51      	ldr	r3, [pc, #324]	; (8006b3c <draw_spinspin+0x244>)
 80069f8:	78da      	ldrb	r2, [r3, #3]
 80069fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80069fe:	70da      	strb	r2, [r3, #3]
 8006a00:	791a      	ldrb	r2, [r3, #4]
 8006a02:	f022 0203 	bic.w	r2, r2, #3
 8006a06:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d106      	bne.n	8006a1c <draw_spinspin+0x124>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006a0e:	4a4b      	ldr	r2, [pc, #300]	; (8006b3c <draw_spinspin+0x244>)
 8006a10:	78d3      	ldrb	r3, [r2, #3]
 8006a12:	2102      	movs	r1, #2
 8006a14:	f361 0302 	bfi	r3, r1, #0, #3
 8006a18:	70d3      	strb	r3, [r2, #3]
 8006a1a:	e005      	b.n	8006a28 <draw_spinspin+0x130>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006a1c:	4a47      	ldr	r2, [pc, #284]	; (8006b3c <draw_spinspin+0x244>)
 8006a1e:	78d3      	ldrb	r3, [r2, #3]
 8006a20:	2101      	movs	r1, #1
 8006a22:	f361 0302 	bfi	r3, r1, #0, #3
 8006a26:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 8006a28:	4a44      	ldr	r2, [pc, #272]	; (8006b3c <draw_spinspin+0x244>)
 8006a2a:	78d3      	ldrb	r3, [r2, #3]
 8006a2c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006a30:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 8006a32:	4b42      	ldr	r3, [pc, #264]	; (8006b3c <draw_spinspin+0x244>)
 8006a34:	791a      	ldrb	r2, [r3, #4]
 8006a36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a3e:	711a      	strb	r2, [r3, #4]
 8006a40:	795a      	ldrb	r2, [r3, #5]
 8006a42:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006a46:	f042 0207 	orr.w	r2, r2, #7
 8006a4a:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	4b39      	ldr	r3, [pc, #228]	; (8006b3c <draw_spinspin+0x244>)
 8006a56:	f002 0101 	and.w	r1, r2, #1
 8006a5a:	01cc      	lsls	r4, r1, #7
 8006a5c:	7959      	ldrb	r1, [r3, #5]
 8006a5e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006a62:	4608      	mov	r0, r1
 8006a64:	4621      	mov	r1, r4
 8006a66:	4301      	orrs	r1, r0
 8006a68:	7159      	strb	r1, [r3, #5]
 8006a6a:	0852      	lsrs	r2, r2, #1
 8006a6c:	b292      	uxth	r2, r2
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	2100      	movs	r1, #0
 8006a72:	430a      	orrs	r2, r1
 8006a74:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 8006a76:	4b31      	ldr	r3, [pc, #196]	; (8006b3c <draw_spinspin+0x244>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f042 0207 	orr.w	r2, r2, #7
 8006a7e:	71da      	strb	r2, [r3, #7]
 8006a80:	7a1a      	ldrb	r2, [r3, #8]
 8006a82:	f022 0203 	bic.w	r2, r2, #3
 8006a86:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 8006a88:	4b2c      	ldr	r3, [pc, #176]	; (8006b3c <draw_spinspin+0x244>)
 8006a8a:	78da      	ldrb	r2, [r3, #3]
 8006a8c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006a90:	70da      	strb	r2, [r3, #3]
 8006a92:	791a      	ldrb	r2, [r3, #4]
 8006a94:	f022 0203 	bic.w	r2, r2, #3
 8006a98:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 8006a9a:	4b28      	ldr	r3, [pc, #160]	; (8006b3c <draw_spinspin+0x244>)
 8006a9c:	7a1a      	ldrb	r2, [r3, #8]
 8006a9e:	f002 0203 	and.w	r2, r2, #3
 8006aa2:	f062 0237 	orn	r2, r2, #55	; 0x37
 8006aa6:	721a      	strb	r2, [r3, #8]
 8006aa8:	7a5a      	ldrb	r2, [r3, #9]
 8006aaa:	f022 021f 	bic.w	r2, r2, #31
 8006aae:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 600;
 8006ab0:	4b22      	ldr	r3, [pc, #136]	; (8006b3c <draw_spinspin+0x244>)
 8006ab2:	7a5a      	ldrb	r2, [r3, #9]
 8006ab4:	f002 021f 	and.w	r2, r2, #31
 8006ab8:	725a      	strb	r2, [r3, #9]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8006ac0:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	4a23      	ldr	r2, [pc, #140]	; (8006b54 <draw_spinspin+0x25c>)
 8006ac6:	4413      	add	r3, r2
 8006ac8:	4a1c      	ldr	r2, [pc, #112]	; (8006b3c <draw_spinspin+0x244>)
 8006aca:	461c      	mov	r4, r3
 8006acc:	4613      	mov	r3, r2
 8006ace:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ad0:	6020      	str	r0, [r4, #0]
 8006ad2:	6061      	str	r1, [r4, #4]
 8006ad4:	60a2      	str	r2, [r4, #8]
 8006ad6:	881a      	ldrh	r2, [r3, #0]
 8006ad8:	789b      	ldrb	r3, [r3, #2]
 8006ada:	81a2      	strh	r2, [r4, #12]
 8006adc:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	330f      	adds	r3, #15
 8006ae2:	60bb      	str	r3, [r7, #8]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <draw_spinspin+0x25c>)
 8006ae8:	4413      	add	r3, r2
 8006aea:	7bfa      	ldrb	r2, [r7, #15]
 8006aec:	4915      	ldr	r1, [pc, #84]	; (8006b44 <draw_spinspin+0x24c>)
 8006aee:	4618      	mov	r0, r3
 8006af0:	f014 fb11 	bl	801b116 <memcpy>
	curr_pos += char_len;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	4413      	add	r3, r2
 8006afa:	60bb      	str	r3, [r7, #8]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	3302      	adds	r3, #2
 8006b00:	4619      	mov	r1, r3
 8006b02:	4814      	ldr	r0, [pc, #80]	; (8006b54 <draw_spinspin+0x25c>)
 8006b04:	f7fa fb44 	bl	8001190 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006b08:	e002      	b.n	8006b10 <draw_spinspin+0x218>
		vTaskDelay(1);
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	f011 fda0 	bl	8018650 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006b10:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <draw_spinspin+0x26c>)
 8006b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d1f6      	bne.n	8006b0a <draw_spinspin+0x212>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3302      	adds	r3, #2
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	490b      	ldr	r1, [pc, #44]	; (8006b54 <draw_spinspin+0x25c>)
 8006b28:	480e      	ldr	r0, [pc, #56]	; (8006b64 <draw_spinspin+0x26c>)
 8006b2a:	f00b fe19 	bl	8012760 <HAL_UART_Transmit_DMA>
}
 8006b2e:	bf00      	nop
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd90      	pop	{r4, r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20002818 	.word	0x20002818
 8006b3c:	200029b4 	.word	0x200029b4
 8006b40:	08021790 	.word	0x08021790
 8006b44:	200029cc 	.word	0x200029cc
 8006b48:	0802179c 	.word	0x0802179c
 8006b4c:	200029c4 	.word	0x200029c4
 8006b50:	20002b98 	.word	0x20002b98
 8006b54:	200028ac 	.word	0x200028ac
 8006b58:	200029ac 	.word	0x200029ac
 8006b5c:	20002b30 	.word	0x20002b30
 8006b60:	200028a8 	.word	0x200028a8
 8006b64:	20001688 	.word	0x20001688

08006b68 <draw_gearing>:

void draw_gearing(uint8_t modify) {
 8006b68:	b590      	push	{r4, r7, lr}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
	uint8_t char_len = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	72fb      	strb	r3, [r7, #11]
	curr_pos = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
	graphic_data.color = 6; //CYAN
 8006b7e:	4a83      	ldr	r2, [pc, #524]	; (8006d8c <draw_gearing+0x224>)
 8006b80:	7913      	ldrb	r3, [r2, #4]
 8006b82:	2106      	movs	r1, #6
 8006b84:	f361 0385 	bfi	r3, r1, #2, #4
 8006b88:	7113      	strb	r3, [r2, #4]
	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);
 8006b8a:	4b81      	ldr	r3, [pc, #516]	; (8006d90 <draw_gearing+0x228>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	4a81      	ldr	r2, [pc, #516]	; (8006d94 <draw_gearing+0x22c>)
 8006b90:	211e      	movs	r1, #30
 8006b92:	4881      	ldr	r0, [pc, #516]	; (8006d98 <draw_gearing+0x230>)
 8006b94:	f015 fa64 	bl	801c060 <sniprintf>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	72fb      	strb	r3, [r7, #11]
	send_header.start_frame = 0xA5;
 8006b9c:	4b7f      	ldr	r3, [pc, #508]	; (8006d9c <draw_gearing+0x234>)
 8006b9e:	22a5      	movs	r2, #165	; 0xa5
 8006ba0:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8006ba2:	4b7e      	ldr	r3, [pc, #504]	; (8006d9c <draw_gearing+0x234>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	715a      	strb	r2, [r3, #5]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f042 0203 	orr.w	r2, r2, #3
 8006bb2:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8006bb4:	4b7a      	ldr	r3, [pc, #488]	; (8006da0 <draw_gearing+0x238>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	b2d1      	uxtb	r1, r2
 8006bbc:	4a78      	ldr	r2, [pc, #480]	; (8006da0 <draw_gearing+0x238>)
 8006bbe:	7011      	strb	r1, [r2, #0]
 8006bc0:	4a76      	ldr	r2, [pc, #472]	; (8006d9c <draw_gearing+0x234>)
 8006bc2:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3315      	adds	r3, #21
 8006bca:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 8006bcc:	4b73      	ldr	r3, [pc, #460]	; (8006d9c <draw_gearing+0x234>)
 8006bce:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 8006bd2:	4b73      	ldr	r3, [pc, #460]	; (8006da0 <draw_gearing+0x238>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	b2d1      	uxtb	r1, r2
 8006bda:	4a71      	ldr	r2, [pc, #452]	; (8006da0 <draw_gearing+0x238>)
 8006bdc:	7011      	strb	r1, [r2, #0]
 8006bde:	4a6f      	ldr	r2, [pc, #444]	; (8006d9c <draw_gearing+0x234>)
 8006be0:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a6f      	ldr	r2, [pc, #444]	; (8006da4 <draw_gearing+0x23c>)
 8006be6:	4413      	add	r3, r2
 8006be8:	4a6c      	ldr	r2, [pc, #432]	; (8006d9c <draw_gearing+0x234>)
 8006bea:	6810      	ldr	r0, [r2, #0]
 8006bec:	6018      	str	r0, [r3, #0]
 8006bee:	8891      	ldrh	r1, [r2, #4]
 8006bf0:	7992      	ldrb	r2, [r2, #6]
 8006bf2:	8099      	strh	r1, [r3, #4]
 8006bf4:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3307      	adds	r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]
	append_CRC8_check_sum(tx_buffer, 5);
 8006bfc:	2105      	movs	r1, #5
 8006bfe:	4869      	ldr	r0, [pc, #420]	; (8006da4 <draw_gearing+0x23c>)
 8006c00:	f7fa fa43 	bl	800108a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 8006c04:	4b68      	ldr	r3, [pc, #416]	; (8006da8 <draw_gearing+0x240>)
 8006c06:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006c0a:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 8006c0c:	4b67      	ldr	r3, [pc, #412]	; (8006dac <draw_gearing+0x244>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	4b65      	ldr	r3, [pc, #404]	; (8006da8 <draw_gearing+0x240>)
 8006c14:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 8006c16:	4b66      	ldr	r3, [pc, #408]	; (8006db0 <draw_gearing+0x248>)
 8006c18:	881a      	ldrh	r2, [r3, #0]
 8006c1a:	4b63      	ldr	r3, [pc, #396]	; (8006da8 <draw_gearing+0x240>)
 8006c1c:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a60      	ldr	r2, [pc, #384]	; (8006da4 <draw_gearing+0x23c>)
 8006c22:	4413      	add	r3, r2
 8006c24:	4a60      	ldr	r2, [pc, #384]	; (8006da8 <draw_gearing+0x240>)
 8006c26:	6810      	ldr	r0, [r2, #0]
 8006c28:	6018      	str	r0, [r3, #0]
 8006c2a:	8892      	ldrh	r2, [r2, #4]
 8006c2c:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3306      	adds	r3, #6
 8006c32:	60fb      	str	r3, [r7, #12]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 8006c34:	4b55      	ldr	r3, [pc, #340]	; (8006d8c <draw_gearing+0x224>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 8006c3a:	4b54      	ldr	r3, [pc, #336]	; (8006d8c <draw_gearing+0x224>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 2;
 8006c40:	4b52      	ldr	r3, [pc, #328]	; (8006d8c <draw_gearing+0x224>)
 8006c42:	2202      	movs	r2, #2
 8006c44:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 8006c46:	4b51      	ldr	r3, [pc, #324]	; (8006d8c <draw_gearing+0x224>)
 8006c48:	78da      	ldrb	r2, [r3, #3]
 8006c4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006c4e:	70da      	strb	r2, [r3, #3]
 8006c50:	791a      	ldrb	r2, [r3, #4]
 8006c52:	f022 0203 	bic.w	r2, r2, #3
 8006c56:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d106      	bne.n	8006c6c <draw_gearing+0x104>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006c5e:	4a4b      	ldr	r2, [pc, #300]	; (8006d8c <draw_gearing+0x224>)
 8006c60:	78d3      	ldrb	r3, [r2, #3]
 8006c62:	2102      	movs	r1, #2
 8006c64:	f361 0302 	bfi	r3, r1, #0, #3
 8006c68:	70d3      	strb	r3, [r2, #3]
 8006c6a:	e005      	b.n	8006c78 <draw_gearing+0x110>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006c6c:	4a47      	ldr	r2, [pc, #284]	; (8006d8c <draw_gearing+0x224>)
 8006c6e:	78d3      	ldrb	r3, [r2, #3]
 8006c70:	2101      	movs	r1, #1
 8006c72:	f361 0302 	bfi	r3, r1, #0, #3
 8006c76:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 8006c78:	4a44      	ldr	r2, [pc, #272]	; (8006d8c <draw_gearing+0x224>)
 8006c7a:	78d3      	ldrb	r3, [r2, #3]
 8006c7c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006c80:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 8006c82:	4b42      	ldr	r3, [pc, #264]	; (8006d8c <draw_gearing+0x224>)
 8006c84:	791a      	ldrb	r2, [r3, #4]
 8006c86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c8e:	711a      	strb	r2, [r3, #4]
 8006c90:	795a      	ldrb	r2, [r3, #5]
 8006c92:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006c96:	f042 0207 	orr.w	r2, r2, #7
 8006c9a:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	4b39      	ldr	r3, [pc, #228]	; (8006d8c <draw_gearing+0x224>)
 8006ca6:	f002 0101 	and.w	r1, r2, #1
 8006caa:	01cc      	lsls	r4, r1, #7
 8006cac:	7959      	ldrb	r1, [r3, #5]
 8006cae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4301      	orrs	r1, r0
 8006cb8:	7159      	strb	r1, [r3, #5]
 8006cba:	0852      	lsrs	r2, r2, #1
 8006cbc:	b292      	uxth	r2, r2
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 8006cc6:	4b31      	ldr	r3, [pc, #196]	; (8006d8c <draw_gearing+0x224>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f042 0207 	orr.w	r2, r2, #7
 8006cce:	71da      	strb	r2, [r3, #7]
 8006cd0:	7a1a      	ldrb	r2, [r3, #8]
 8006cd2:	f022 0203 	bic.w	r2, r2, #3
 8006cd6:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 8006cd8:	4b2c      	ldr	r3, [pc, #176]	; (8006d8c <draw_gearing+0x224>)
 8006cda:	78da      	ldrb	r2, [r3, #3]
 8006cdc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006ce0:	70da      	strb	r2, [r3, #3]
 8006ce2:	791a      	ldrb	r2, [r3, #4]
 8006ce4:	f022 0203 	bic.w	r2, r2, #3
 8006ce8:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 8006cea:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <draw_gearing+0x224>)
 8006cec:	7a1a      	ldrb	r2, [r3, #8]
 8006cee:	f002 0203 	and.w	r2, r2, #3
 8006cf2:	f062 0237 	orn	r2, r2, #55	; 0x37
 8006cf6:	721a      	strb	r2, [r3, #8]
 8006cf8:	7a5a      	ldrb	r2, [r3, #9]
 8006cfa:	f022 021f 	bic.w	r2, r2, #31
 8006cfe:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 650;
 8006d00:	4b22      	ldr	r3, [pc, #136]	; (8006d8c <draw_gearing+0x224>)
 8006d02:	7a5a      	ldrb	r2, [r3, #9]
 8006d04:	f002 021f 	and.w	r2, r2, #31
 8006d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d0c:	725a      	strb	r2, [r3, #9]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 8006d14:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <draw_gearing+0x23c>)
 8006d1a:	4413      	add	r3, r2
 8006d1c:	4a1b      	ldr	r2, [pc, #108]	; (8006d8c <draw_gearing+0x224>)
 8006d1e:	461c      	mov	r4, r3
 8006d20:	4613      	mov	r3, r2
 8006d22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d24:	6020      	str	r0, [r4, #0]
 8006d26:	6061      	str	r1, [r4, #4]
 8006d28:	60a2      	str	r2, [r4, #8]
 8006d2a:	881a      	ldrh	r2, [r3, #0]
 8006d2c:	789b      	ldrb	r3, [r3, #2]
 8006d2e:	81a2      	strh	r2, [r4, #12]
 8006d30:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	330f      	adds	r3, #15
 8006d36:	60fb      	str	r3, [r7, #12]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <draw_gearing+0x23c>)
 8006d3c:	4413      	add	r3, r2
 8006d3e:	7afa      	ldrb	r2, [r7, #11]
 8006d40:	4915      	ldr	r1, [pc, #84]	; (8006d98 <draw_gearing+0x230>)
 8006d42:	4618      	mov	r0, r3
 8006d44:	f014 f9e7 	bl	801b116 <memcpy>
	curr_pos += char_len;
 8006d48:	7afb      	ldrb	r3, [r7, #11]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3302      	adds	r3, #2
 8006d54:	4619      	mov	r1, r3
 8006d56:	4813      	ldr	r0, [pc, #76]	; (8006da4 <draw_gearing+0x23c>)
 8006d58:	f7fa fa1a 	bl	8001190 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006d5c:	e002      	b.n	8006d64 <draw_gearing+0x1fc>
		vTaskDelay(1);
 8006d5e:	2001      	movs	r0, #1
 8006d60:	f011 fc76 	bl	8018650 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006d64:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <draw_gearing+0x24c>)
 8006d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d1f6      	bne.n	8006d5e <draw_gearing+0x1f6>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3302      	adds	r3, #2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	490a      	ldr	r1, [pc, #40]	; (8006da4 <draw_gearing+0x23c>)
 8006d7c:	480d      	ldr	r0, [pc, #52]	; (8006db4 <draw_gearing+0x24c>)
 8006d7e:	f00b fcef 	bl	8012760 <HAL_UART_Transmit_DMA>
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd90      	pop	{r4, r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200029b4 	.word	0x200029b4
 8006d90:	20002808 	.word	0x20002808
 8006d94:	080217a4 	.word	0x080217a4
 8006d98:	200029cc 	.word	0x200029cc
 8006d9c:	200029c4 	.word	0x200029c4
 8006da0:	20002b98 	.word	0x20002b98
 8006da4:	200028ac 	.word	0x200028ac
 8006da8:	200029ac 	.word	0x200029ac
 8006dac:	20002b30 	.word	0x20002b30
 8006db0:	200028a8 	.word	0x200028a8
 8006db4:	20001688 	.word	0x20001688

08006db8 <clear_hud>:


void clear_hud(){
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
	uint32_t curr_pos = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
	uint8_t char_len = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	72fb      	strb	r3, [r7, #11]
	curr_pos = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);
 8006dca:	4b34      	ldr	r3, [pc, #208]	; (8006e9c <clear_hud+0xe4>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	4a34      	ldr	r2, [pc, #208]	; (8006ea0 <clear_hud+0xe8>)
 8006dd0:	211e      	movs	r1, #30
 8006dd2:	4834      	ldr	r0, [pc, #208]	; (8006ea4 <clear_hud+0xec>)
 8006dd4:	f015 f944 	bl	801c060 <sniprintf>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	72fb      	strb	r3, [r7, #11]

	send_header.start_frame = 0xA5;
 8006ddc:	4b32      	ldr	r3, [pc, #200]	; (8006ea8 <clear_hud+0xf0>)
 8006dde:	22a5      	movs	r2, #165	; 0xa5
 8006de0:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8006de2:	4b31      	ldr	r3, [pc, #196]	; (8006ea8 <clear_hud+0xf0>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	715a      	strb	r2, [r3, #5]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f042 0203 	orr.w	r2, r2, #3
 8006df2:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8006df4:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <clear_hud+0xf4>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	b2d1      	uxtb	r1, r2
 8006dfc:	4a2b      	ldr	r2, [pc, #172]	; (8006eac <clear_hud+0xf4>)
 8006dfe:	7011      	strb	r1, [r2, #0]
 8006e00:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <clear_hud+0xf0>)
 8006e02:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_delete_graphic_t);
 8006e04:	4b28      	ldr	r3, [pc, #160]	; (8006ea8 <clear_hud+0xf0>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	f042 0208 	orr.w	r2, r2, #8
 8006e0c:	705a      	strb	r2, [r3, #1]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	709a      	strb	r2, [r3, #2]
	send_header.seq = g_ref_tx_seq++;
 8006e12:	4b26      	ldr	r3, [pc, #152]	; (8006eac <clear_hud+0xf4>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	b2d1      	uxtb	r1, r2
 8006e1a:	4a24      	ldr	r2, [pc, #144]	; (8006eac <clear_hud+0xf4>)
 8006e1c:	7011      	strb	r1, [r2, #0]
 8006e1e:	4a22      	ldr	r2, [pc, #136]	; (8006ea8 <clear_hud+0xf0>)
 8006e20:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <clear_hud+0xf8>)
 8006e26:	4413      	add	r3, r2
 8006e28:	4a1f      	ldr	r2, [pc, #124]	; (8006ea8 <clear_hud+0xf0>)
 8006e2a:	6810      	ldr	r0, [r2, #0]
 8006e2c:	6018      	str	r0, [r3, #0]
 8006e2e:	8891      	ldrh	r1, [r2, #4]
 8006e30:	7992      	ldrb	r2, [r2, #6]
 8006e32:	8099      	strh	r1, [r3, #4]
 8006e34:	719a      	strb	r2, [r3, #6]
	ref_delete_graphic_t ref_delete;
	ref_delete.cmd_ID = 0x100;
 8006e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e3a:	803b      	strh	r3, [r7, #0]
	ref_delete.graphic_layer = 9;
 8006e3c:	2309      	movs	r3, #9
 8006e3e:	71fb      	strb	r3, [r7, #7]
	ref_delete.graphic_operation = 2;
 8006e40:	2302      	movs	r3, #2
 8006e42:	71bb      	strb	r3, [r7, #6]
	ref_delete.receiver_ID = g_client_id;
 8006e44:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <clear_hud+0xfc>)
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	80bb      	strh	r3, [r7, #4]
	ref_delete.send_ID = ref_robot_data.robot_id;
 8006e4a:	4b1b      	ldr	r3, [pc, #108]	; (8006eb8 <clear_hud+0x100>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	807b      	strh	r3, [r7, #2]
	memcpy(tx_buffer + curr_pos, &ref_delete, sizeof(ref_delete_graphic_t));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4a16      	ldr	r2, [pc, #88]	; (8006eb0 <clear_hud+0xf8>)
 8006e56:	4413      	add	r3, r2
 8006e58:	461a      	mov	r2, r3
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	cb03      	ldmia	r3!, {r0, r1}
 8006e5e:	6010      	str	r0, [r2, #0]
 8006e60:	6051      	str	r1, [r2, #4]
	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3302      	adds	r3, #2
 8006e66:	4619      	mov	r1, r3
 8006e68:	4811      	ldr	r0, [pc, #68]	; (8006eb0 <clear_hud+0xf8>)
 8006e6a:	f7fa f991 	bl	8001190 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006e6e:	e002      	b.n	8006e76 <clear_hud+0xbe>
		vTaskDelay(1);
 8006e70:	2001      	movs	r0, #1
 8006e72:	f011 fbed 	bl	8018650 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006e76:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <clear_hud+0x104>)
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d1f6      	bne.n	8006e70 <clear_hud+0xb8>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3302      	adds	r3, #2
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	4908      	ldr	r1, [pc, #32]	; (8006eb0 <clear_hud+0xf8>)
 8006e8e:	480b      	ldr	r0, [pc, #44]	; (8006ebc <clear_hud+0x104>)
 8006e90:	f00b fc66 	bl	8012760 <HAL_UART_Transmit_DMA>

}
 8006e94:	bf00      	nop
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20002808 	.word	0x20002808
 8006ea0:	080217a4 	.word	0x080217a4
 8006ea4:	200029cc 	.word	0x200029cc
 8006ea8:	200029c4 	.word	0x200029c4
 8006eac:	20002b98 	.word	0x20002b98
 8006eb0:	200028ac 	.word	0x200028ac
 8006eb4:	200028a8 	.word	0x200028a8
 8006eb8:	20002b30 	.word	0x20002b30
 8006ebc:	20001688 	.word	0x20001688

08006ec0 <imu_proc_task_notif>:
extern QueueHandle_t mag_data_queue;
extern TaskHandle_t imu_processing_task_handle;
static uint32_t last_proc_times[2];
static uint8_t update_flag = 0;

void imu_proc_task_notif() {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 8006ec6:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <imu_proc_task_notif+0x3c>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <imu_proc_task_notif+0x40>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	1d3a      	adds	r2, r7, #4
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f012 fa15 	bl	8019308 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d007      	beq.n	8006ef4 <imu_proc_task_notif+0x34>
 8006ee4:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <imu_proc_task_notif+0x44>)
 8006ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	f3bf 8f6f 	isb	sy
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20002a68 	.word	0x20002a68
 8006f00:	20000460 	.word	0x20000460
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	463c      	mov	r4, r7
 8006f10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gyro_proc_data.gx = gyro_data.gx;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	4a10      	ldr	r2, [pc, #64]	; (8006f58 <gyro_data_ready+0x50>)
 8006f18:	6013      	str	r3, [r2, #0]
	gyro_proc_data.gy = gyro_data.gy;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a0e      	ldr	r2, [pc, #56]	; (8006f58 <gyro_data_ready+0x50>)
 8006f1e:	6053      	str	r3, [r2, #4]
	gyro_proc_data.gz = gyro_data.gz;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4a0d      	ldr	r2, [pc, #52]	; (8006f58 <gyro_data_ready+0x50>)
 8006f24:	6093      	str	r3, [r2, #8]
	if (IMU_ORIENTATION == 2) {		// swap gyro inputs for vertically mounted devboard
		gyro_proc_data.gx = gyro_data.gz;
		gyro_proc_data.gy = gyro_data.gy;
		gyro_proc_data.gz = -gyro_data.gx;
	}
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4a0b      	ldr	r2, [pc, #44]	; (8006f58 <gyro_data_ready+0x50>)
 8006f2a:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 8006f2c:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <gyro_data_ready+0x54>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <gyro_data_ready+0x54>)
 8006f38:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if (update_flag == 0b111|| update_flag == 0b011) {
 8006f3a:	4b08      	ldr	r3, [pc, #32]	; (8006f5c <gyro_data_ready+0x54>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b07      	cmp	r3, #7
 8006f40:	d003      	beq.n	8006f4a <gyro_data_ready+0x42>
 8006f42:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <gyro_data_ready+0x54>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d101      	bne.n	8006f4e <gyro_data_ready+0x46>
		imu_proc_task_notif();
 8006f4a:	f7ff ffb9 	bl	8006ec0 <imu_proc_task_notif>
	}
}
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd90      	pop	{r4, r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20002a44 	.word	0x20002a44
 8006f5c:	20002a68 	.word	0x20002a68

08006f60 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 8006f60:	b590      	push	{r4, r7, lr}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	463c      	mov	r4, r7
 8006f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	accel_proc_data.ax = accel_data.ax;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	4a10      	ldr	r2, [pc, #64]	; (8006fb0 <accel_data_ready+0x50>)
 8006f70:	6013      	str	r3, [r2, #0]
	accel_proc_data.ay = accel_data.ay;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a0e      	ldr	r2, [pc, #56]	; (8006fb0 <accel_data_ready+0x50>)
 8006f76:	6053      	str	r3, [r2, #4]
	accel_proc_data.az = accel_data.az;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a0d      	ldr	r2, [pc, #52]	; (8006fb0 <accel_data_ready+0x50>)
 8006f7c:	6093      	str	r3, [r2, #8]
		accel_proc_data.ax = accel_data.az;
		accel_proc_data.ay = accel_data.ay;
		accel_proc_data.az = -accel_data.ax;
	}

	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <accel_data_ready+0x50>)
 8006f82:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 8006f84:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <accel_data_ready+0x54>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f043 0302 	orr.w	r3, r3, #2
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <accel_data_ready+0x54>)
 8006f90:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if (update_flag == 0b111 || update_flag == 0b011) {
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <accel_data_ready+0x54>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b07      	cmp	r3, #7
 8006f98:	d003      	beq.n	8006fa2 <accel_data_ready+0x42>
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <accel_data_ready+0x54>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d101      	bne.n	8006fa6 <accel_data_ready+0x46>
		imu_proc_task_notif();
 8006fa2:	f7ff ff8d 	bl	8006ec0 <imu_proc_task_notif>
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20002a34 	.word	0x20002a34
 8006fb4:	20002a68 	.word	0x20002a68

08006fb8 <mag_data_ready>:

void mag_data_ready(mag_data_t mag_data) {
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	1d3b      	adds	r3, r7, #4
 8006fc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mag_proc_data.mx = mag_data.mx;
 8006fc4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <mag_data_ready+0x44>)
 8006fca:	801a      	strh	r2, [r3, #0]
	mag_proc_data.my = mag_data.my;
 8006fcc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <mag_data_ready+0x44>)
 8006fd2:	805a      	strh	r2, [r3, #2]
	mag_proc_data.mz = mag_data.mz;
 8006fd4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006fd8:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <mag_data_ready+0x44>)
 8006fda:	809a      	strh	r2, [r3, #4]
	mag_proc_data.last_mag_update = mag_data.last_mag_update;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4a07      	ldr	r2, [pc, #28]	; (8006ffc <mag_data_ready+0x44>)
 8006fe0:	6093      	str	r3, [r2, #8]

	update_flag |= 1 << 2;
 8006fe2:	4b07      	ldr	r3, [pc, #28]	; (8007000 <mag_data_ready+0x48>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	f043 0304 	orr.w	r3, r3, #4
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <mag_data_ready+0x48>)
 8006fee:	701a      	strb	r2, [r3, #0]
	if (update_flag == 0b111) {
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	20002a54 	.word	0x20002a54
 8007000:	20002a68 	.word	0x20002a68

08007004 <imu_processing_task>:

void imu_processing_task(void *argument) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	imu_start_ints();
 800700c:	f7fa fdee 	bl	8001bec <imu_start_ints>
	init_quaternion();
 8007010:	f000 f80a 	bl	8007028 <init_quaternion>
	while (1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007014:	f04f 31ff 	mov.w	r1, #4294967295
 8007018:	2001      	movs	r0, #1
 800701a:	f012 f929 	bl	8019270 <ulTaskNotifyTake>
		imu_ahrs_update();
 800701e:	f000 f93f 	bl	80072a0 <imu_ahrs_update>
		imu_attitude_update();
 8007022:	f000 fd91 	bl	8007b48 <imu_attitude_update>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007026:	e7f5      	b.n	8007014 <imu_processing_task+0x10>

08007028 <init_quaternion>:
	}
}

void init_quaternion(void) {
 8007028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
	int16_t hx, hy; //hz;

	hx = mag_proc_data.mx;
 8007030:	4b79      	ldr	r3, [pc, #484]	; (8007218 <init_quaternion+0x1f0>)
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	81fb      	strh	r3, [r7, #14]
	hy = mag_proc_data.my;
 8007036:	4b78      	ldr	r3, [pc, #480]	; (8007218 <init_quaternion+0x1f0>)
 8007038:	885b      	ldrh	r3, [r3, #2]
 800703a:	81bb      	strh	r3, [r7, #12]
			q2 = -0.56;
			q3 = 0.0045;
		}
	}
	#else
	if (hx < 0 && hy < 0) {
 800703c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007040:	2b00      	cmp	r3, #0
 8007042:	da36      	bge.n	80070b2 <init_quaternion+0x8a>
 8007044:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	da32      	bge.n	80070b2 <init_quaternion+0x8a>
		if (fabs(hx / hy) >= 1) {
 800704c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007050:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007054:	fb92 f3f3 	sdiv	r3, r2, r3
 8007058:	4618      	mov	r0, r3
 800705a:	f7f9 fa63 	bl	8000524 <__aeabi_i2d>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	603a      	str	r2, [r7, #0]
 8007064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007068:	607b      	str	r3, [r7, #4]
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	4b6b      	ldr	r3, [pc, #428]	; (800721c <init_quaternion+0x1f4>)
 8007070:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007074:	f7f9 fd46 	bl	8000b04 <__aeabi_dcmpge>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <init_quaternion+0x70>
			q0 = 0.195;
 800707e:	4b68      	ldr	r3, [pc, #416]	; (8007220 <init_quaternion+0x1f8>)
 8007080:	4a68      	ldr	r2, [pc, #416]	; (8007224 <init_quaternion+0x1fc>)
 8007082:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8007084:	4b68      	ldr	r3, [pc, #416]	; (8007228 <init_quaternion+0x200>)
 8007086:	4a69      	ldr	r2, [pc, #420]	; (800722c <init_quaternion+0x204>)
 8007088:	601a      	str	r2, [r3, #0]
			q2 = 0.0043;
 800708a:	4b69      	ldr	r3, [pc, #420]	; (8007230 <init_quaternion+0x208>)
 800708c:	4a69      	ldr	r2, [pc, #420]	; (8007234 <init_quaternion+0x20c>)
 800708e:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8007090:	4b69      	ldr	r3, [pc, #420]	; (8007238 <init_quaternion+0x210>)
 8007092:	4a6a      	ldr	r2, [pc, #424]	; (800723c <init_quaternion+0x214>)
 8007094:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8007096:	e0ba      	b.n	800720e <init_quaternion+0x1e6>
		} else {
			q0 = 0.555;
 8007098:	4b61      	ldr	r3, [pc, #388]	; (8007220 <init_quaternion+0x1f8>)
 800709a:	4a69      	ldr	r2, [pc, #420]	; (8007240 <init_quaternion+0x218>)
 800709c:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 800709e:	4b62      	ldr	r3, [pc, #392]	; (8007228 <init_quaternion+0x200>)
 80070a0:	4a62      	ldr	r2, [pc, #392]	; (800722c <init_quaternion+0x204>)
 80070a2:	601a      	str	r2, [r3, #0]
			q2 = 0.006;
 80070a4:	4b62      	ldr	r3, [pc, #392]	; (8007230 <init_quaternion+0x208>)
 80070a6:	4a67      	ldr	r2, [pc, #412]	; (8007244 <init_quaternion+0x21c>)
 80070a8:	601a      	str	r2, [r3, #0]
			q3 = 0.829;
 80070aa:	4b63      	ldr	r3, [pc, #396]	; (8007238 <init_quaternion+0x210>)
 80070ac:	4a66      	ldr	r2, [pc, #408]	; (8007248 <init_quaternion+0x220>)
 80070ae:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80070b0:	e0ad      	b.n	800720e <init_quaternion+0x1e6>
		}

	} else if (hx < 0 && hy > 0) {
 80070b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da35      	bge.n	8007126 <init_quaternion+0xfe>
 80070ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	dd31      	ble.n	8007126 <init_quaternion+0xfe>
		if (fabs(hx / hy) >= 1) {
 80070c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80070c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7f9 fa28 	bl	8000524 <__aeabi_i2d>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4692      	mov	sl, r2
 80070da:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	4b4e      	ldr	r3, [pc, #312]	; (800721c <init_quaternion+0x1f4>)
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 fd0c 	bl	8000b04 <__aeabi_dcmpge>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00c      	beq.n	800710c <init_quaternion+0xe4>
			q0 = -0.193;
 80070f2:	4b4b      	ldr	r3, [pc, #300]	; (8007220 <init_quaternion+0x1f8>)
 80070f4:	4a55      	ldr	r2, [pc, #340]	; (800724c <init_quaternion+0x224>)
 80070f6:	601a      	str	r2, [r3, #0]
			q1 = -0.009;
 80070f8:	4b4b      	ldr	r3, [pc, #300]	; (8007228 <init_quaternion+0x200>)
 80070fa:	4a55      	ldr	r2, [pc, #340]	; (8007250 <init_quaternion+0x228>)
 80070fc:	601a      	str	r2, [r3, #0]
			q2 = -0.006;
 80070fe:	4b4c      	ldr	r3, [pc, #304]	; (8007230 <init_quaternion+0x208>)
 8007100:	4a54      	ldr	r2, [pc, #336]	; (8007254 <init_quaternion+0x22c>)
 8007102:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8007104:	4b4c      	ldr	r3, [pc, #304]	; (8007238 <init_quaternion+0x210>)
 8007106:	4a4d      	ldr	r2, [pc, #308]	; (800723c <init_quaternion+0x214>)
 8007108:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800710a:	e080      	b.n	800720e <init_quaternion+0x1e6>
		} else {
			q0 = -0.552;
 800710c:	4b44      	ldr	r3, [pc, #272]	; (8007220 <init_quaternion+0x1f8>)
 800710e:	4a52      	ldr	r2, [pc, #328]	; (8007258 <init_quaternion+0x230>)
 8007110:	601a      	str	r2, [r3, #0]
			q1 = -0.0048;
 8007112:	4b45      	ldr	r3, [pc, #276]	; (8007228 <init_quaternion+0x200>)
 8007114:	4a51      	ldr	r2, [pc, #324]	; (800725c <init_quaternion+0x234>)
 8007116:	601a      	str	r2, [r3, #0]
			q2 = -0.0115;
 8007118:	4b45      	ldr	r3, [pc, #276]	; (8007230 <init_quaternion+0x208>)
 800711a:	4a51      	ldr	r2, [pc, #324]	; (8007260 <init_quaternion+0x238>)
 800711c:	601a      	str	r2, [r3, #0]
			q3 = 0.8313;
 800711e:	4b46      	ldr	r3, [pc, #280]	; (8007238 <init_quaternion+0x210>)
 8007120:	4a50      	ldr	r2, [pc, #320]	; (8007264 <init_quaternion+0x23c>)
 8007122:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8007124:	e073      	b.n	800720e <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy > 0) {
 8007126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800712a:	2b00      	cmp	r3, #0
 800712c:	dd35      	ble.n	800719a <init_quaternion+0x172>
 800712e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	dd31      	ble.n	800719a <init_quaternion+0x172>
		if (fabs(hx / hy) >= 1) {
 8007136:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800713a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800713e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007142:	4618      	mov	r0, r3
 8007144:	f7f9 f9ee 	bl	8000524 <__aeabi_i2d>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4690      	mov	r8, r2
 800714e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	4b31      	ldr	r3, [pc, #196]	; (800721c <init_quaternion+0x1f4>)
 8007158:	4640      	mov	r0, r8
 800715a:	4649      	mov	r1, r9
 800715c:	f7f9 fcd2 	bl	8000b04 <__aeabi_dcmpge>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00c      	beq.n	8007180 <init_quaternion+0x158>
			q0 = -0.9785;
 8007166:	4b2e      	ldr	r3, [pc, #184]	; (8007220 <init_quaternion+0x1f8>)
 8007168:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <init_quaternion+0x240>)
 800716a:	601a      	str	r2, [r3, #0]
			q1 = 0.008;
 800716c:	4b2e      	ldr	r3, [pc, #184]	; (8007228 <init_quaternion+0x200>)
 800716e:	4a3f      	ldr	r2, [pc, #252]	; (800726c <init_quaternion+0x244>)
 8007170:	601a      	str	r2, [r3, #0]
			q2 = -0.02;
 8007172:	4b2f      	ldr	r3, [pc, #188]	; (8007230 <init_quaternion+0x208>)
 8007174:	4a3e      	ldr	r2, [pc, #248]	; (8007270 <init_quaternion+0x248>)
 8007176:	601a      	str	r2, [r3, #0]
			q3 = 0.195;
 8007178:	4b2f      	ldr	r3, [pc, #188]	; (8007238 <init_quaternion+0x210>)
 800717a:	4a2a      	ldr	r2, [pc, #168]	; (8007224 <init_quaternion+0x1fc>)
 800717c:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800717e:	e046      	b.n	800720e <init_quaternion+0x1e6>
		} else {
			q0 = -0.9828;
 8007180:	4b27      	ldr	r3, [pc, #156]	; (8007220 <init_quaternion+0x1f8>)
 8007182:	4a3c      	ldr	r2, [pc, #240]	; (8007274 <init_quaternion+0x24c>)
 8007184:	601a      	str	r2, [r3, #0]
			q1 = 0.002;
 8007186:	4b28      	ldr	r3, [pc, #160]	; (8007228 <init_quaternion+0x200>)
 8007188:	4a3b      	ldr	r2, [pc, #236]	; (8007278 <init_quaternion+0x250>)
 800718a:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 800718c:	4b28      	ldr	r3, [pc, #160]	; (8007230 <init_quaternion+0x208>)
 800718e:	4a3b      	ldr	r2, [pc, #236]	; (800727c <init_quaternion+0x254>)
 8007190:	601a      	str	r2, [r3, #0]
			q3 = 0.5557;
 8007192:	4b29      	ldr	r3, [pc, #164]	; (8007238 <init_quaternion+0x210>)
 8007194:	4a3a      	ldr	r2, [pc, #232]	; (8007280 <init_quaternion+0x258>)
 8007196:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8007198:	e039      	b.n	800720e <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy < 0) {
 800719a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dd35      	ble.n	800720e <init_quaternion+0x1e6>
 80071a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	da31      	bge.n	800720e <init_quaternion+0x1e6>
		if (fabs(hx / hy) >= 1) {
 80071aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80071ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7f9 f9b4 	bl	8000524 <__aeabi_i2d>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4614      	mov	r4, r2
 80071c2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	4b14      	ldr	r3, [pc, #80]	; (800721c <init_quaternion+0x1f4>)
 80071cc:	4620      	mov	r0, r4
 80071ce:	4629      	mov	r1, r5
 80071d0:	f7f9 fc98 	bl	8000b04 <__aeabi_dcmpge>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00c      	beq.n	80071f4 <init_quaternion+0x1cc>
			q0 = -0.979;
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <init_quaternion+0x1f8>)
 80071dc:	4a29      	ldr	r2, [pc, #164]	; (8007284 <init_quaternion+0x25c>)
 80071de:	601a      	str	r2, [r3, #0]
			q1 = 0.0116;
 80071e0:	4b11      	ldr	r3, [pc, #68]	; (8007228 <init_quaternion+0x200>)
 80071e2:	4a29      	ldr	r2, [pc, #164]	; (8007288 <init_quaternion+0x260>)
 80071e4:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 80071e6:	4b12      	ldr	r3, [pc, #72]	; (8007230 <init_quaternion+0x208>)
 80071e8:	4a24      	ldr	r2, [pc, #144]	; (800727c <init_quaternion+0x254>)
 80071ea:	601a      	str	r2, [r3, #0]
			q3 = -0.195;
 80071ec:	4b12      	ldr	r3, [pc, #72]	; (8007238 <init_quaternion+0x210>)
 80071ee:	4a27      	ldr	r2, [pc, #156]	; (800728c <init_quaternion+0x264>)
 80071f0:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
			q3 = -0.556;
		}
	}
#endif
}
 80071f2:	e00c      	b.n	800720e <init_quaternion+0x1e6>
			q0 = -0.83;
 80071f4:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <init_quaternion+0x1f8>)
 80071f6:	4a26      	ldr	r2, [pc, #152]	; (8007290 <init_quaternion+0x268>)
 80071f8:	601a      	str	r2, [r3, #0]
			q1 = 0.014;
 80071fa:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <init_quaternion+0x200>)
 80071fc:	4a25      	ldr	r2, [pc, #148]	; (8007294 <init_quaternion+0x26c>)
 80071fe:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <init_quaternion+0x208>)
 8007202:	4a25      	ldr	r2, [pc, #148]	; (8007298 <init_quaternion+0x270>)
 8007204:	601a      	str	r2, [r3, #0]
			q3 = -0.556;
 8007206:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <init_quaternion+0x210>)
 8007208:	4a24      	ldr	r2, [pc, #144]	; (800729c <init_quaternion+0x274>)
 800720a:	601a      	str	r2, [r3, #0]
}
 800720c:	e7ff      	b.n	800720e <init_quaternion+0x1e6>
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007218:	20002a54 	.word	0x20002a54
 800721c:	3ff00000 	.word	0x3ff00000
 8007220:	2000000c 	.word	0x2000000c
 8007224:	3e47ae14 	.word	0x3e47ae14
 8007228:	200029ec 	.word	0x200029ec
 800722c:	bc75c28f 	.word	0xbc75c28f
 8007230:	200029f0 	.word	0x200029f0
 8007234:	3b8ce704 	.word	0x3b8ce704
 8007238:	200029f4 	.word	0x200029f4
 800723c:	3f7a9fbe 	.word	0x3f7a9fbe
 8007240:	3f0e147b 	.word	0x3f0e147b
 8007244:	3bc49ba6 	.word	0x3bc49ba6
 8007248:	3f543958 	.word	0x3f543958
 800724c:	be45a1cb 	.word	0xbe45a1cb
 8007250:	bc1374bc 	.word	0xbc1374bc
 8007254:	bbc49ba6 	.word	0xbbc49ba6
 8007258:	bf0d4fdf 	.word	0xbf0d4fdf
 800725c:	bb9d4952 	.word	0xbb9d4952
 8007260:	bc3c6a7f 	.word	0xbc3c6a7f
 8007264:	3f54d014 	.word	0x3f54d014
 8007268:	bf7a7efa 	.word	0xbf7a7efa
 800726c:	3c03126f 	.word	0x3c03126f
 8007270:	bca3d70a 	.word	0xbca3d70a
 8007274:	bf7b98c8 	.word	0xbf7b98c8
 8007278:	3b03126f 	.word	0x3b03126f
 800727c:	bc88ce70 	.word	0xbc88ce70
 8007280:	3f0e425b 	.word	0x3f0e425b
 8007284:	bf7a9fbe 	.word	0xbf7a9fbe
 8007288:	3c3e0ded 	.word	0x3c3e0ded
 800728c:	be47ae14 	.word	0xbe47ae14
 8007290:	bf547ae1 	.word	0xbf547ae1
 8007294:	3c656042 	.word	0x3c656042
 8007298:	bc449ba6 	.word	0xbc449ba6
 800729c:	bf0e5604 	.word	0xbf0e5604

080072a0 <imu_ahrs_update>:
	q1 = tempq1 * norm;
	q2 = tempq2 * norm;
	q3 = tempq3 * norm;
}

void imu_ahrs_update(void) {
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b09e      	sub	sp, #120	; 0x78
 80072a4:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0, tempq1, tempq2, tempq3;

	float q0q0 = q0 * q0;
 80072a6:	4bd3      	ldr	r3, [pc, #844]	; (80075f4 <imu_ahrs_update+0x354>)
 80072a8:	ed93 7a00 	vldr	s14, [r3]
 80072ac:	4bd1      	ldr	r3, [pc, #836]	; (80075f4 <imu_ahrs_update+0x354>)
 80072ae:	edd3 7a00 	vldr	s15, [r3]
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0 * q1;
 80072ba:	4bce      	ldr	r3, [pc, #824]	; (80075f4 <imu_ahrs_update+0x354>)
 80072bc:	ed93 7a00 	vldr	s14, [r3]
 80072c0:	4bcd      	ldr	r3, [pc, #820]	; (80075f8 <imu_ahrs_update+0x358>)
 80072c2:	edd3 7a00 	vldr	s15, [r3]
 80072c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ca:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0 * q2;
 80072ce:	4bc9      	ldr	r3, [pc, #804]	; (80075f4 <imu_ahrs_update+0x354>)
 80072d0:	ed93 7a00 	vldr	s14, [r3]
 80072d4:	4bc9      	ldr	r3, [pc, #804]	; (80075fc <imu_ahrs_update+0x35c>)
 80072d6:	edd3 7a00 	vldr	s15, [r3]
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0 * q3;
 80072e2:	4bc4      	ldr	r3, [pc, #784]	; (80075f4 <imu_ahrs_update+0x354>)
 80072e4:	ed93 7a00 	vldr	s14, [r3]
 80072e8:	4bc5      	ldr	r3, [pc, #788]	; (8007600 <imu_ahrs_update+0x360>)
 80072ea:	edd3 7a00 	vldr	s15, [r3]
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1 * q1;
 80072f6:	4bc0      	ldr	r3, [pc, #768]	; (80075f8 <imu_ahrs_update+0x358>)
 80072f8:	ed93 7a00 	vldr	s14, [r3]
 80072fc:	4bbe      	ldr	r3, [pc, #760]	; (80075f8 <imu_ahrs_update+0x358>)
 80072fe:	edd3 7a00 	vldr	s15, [r3]
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1 * q2;
 800730a:	4bbb      	ldr	r3, [pc, #748]	; (80075f8 <imu_ahrs_update+0x358>)
 800730c:	ed93 7a00 	vldr	s14, [r3]
 8007310:	4bba      	ldr	r3, [pc, #744]	; (80075fc <imu_ahrs_update+0x35c>)
 8007312:	edd3 7a00 	vldr	s15, [r3]
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1 * q3;
 800731e:	4bb6      	ldr	r3, [pc, #728]	; (80075f8 <imu_ahrs_update+0x358>)
 8007320:	ed93 7a00 	vldr	s14, [r3]
 8007324:	4bb6      	ldr	r3, [pc, #728]	; (8007600 <imu_ahrs_update+0x360>)
 8007326:	edd3 7a00 	vldr	s15, [r3]
 800732a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2 * q2;
 8007332:	4bb2      	ldr	r3, [pc, #712]	; (80075fc <imu_ahrs_update+0x35c>)
 8007334:	ed93 7a00 	vldr	s14, [r3]
 8007338:	4bb0      	ldr	r3, [pc, #704]	; (80075fc <imu_ahrs_update+0x35c>)
 800733a:	edd3 7a00 	vldr	s15, [r3]
 800733e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007342:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2 * q3;
 8007346:	4bad      	ldr	r3, [pc, #692]	; (80075fc <imu_ahrs_update+0x35c>)
 8007348:	ed93 7a00 	vldr	s14, [r3]
 800734c:	4bac      	ldr	r3, [pc, #688]	; (8007600 <imu_ahrs_update+0x360>)
 800734e:	edd3 7a00 	vldr	s15, [r3]
 8007352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007356:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3 * q3;
 800735a:	4ba9      	ldr	r3, [pc, #676]	; (8007600 <imu_ahrs_update+0x360>)
 800735c:	ed93 7a00 	vldr	s14, [r3]
 8007360:	4ba7      	ldr	r3, [pc, #668]	; (8007600 <imu_ahrs_update+0x360>)
 8007362:	edd3 7a00 	vldr	s15, [r3]
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = gyro_proc_data.gx;
 800736e:	4ba5      	ldr	r3, [pc, #660]	; (8007604 <imu_ahrs_update+0x364>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4aa5      	ldr	r2, [pc, #660]	; (8007608 <imu_ahrs_update+0x368>)
 8007374:	6013      	str	r3, [r2, #0]
	gy = gyro_proc_data.gy;
 8007376:	4ba3      	ldr	r3, [pc, #652]	; (8007604 <imu_ahrs_update+0x364>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	4aa4      	ldr	r2, [pc, #656]	; (800760c <imu_ahrs_update+0x36c>)
 800737c:	6013      	str	r3, [r2, #0]
	gz = gyro_proc_data.gz;
 800737e:	4ba1      	ldr	r3, [pc, #644]	; (8007604 <imu_ahrs_update+0x364>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	4aa3      	ldr	r2, [pc, #652]	; (8007610 <imu_ahrs_update+0x370>)
 8007384:	6013      	str	r3, [r2, #0]
	ax = accel_proc_data.ax;
 8007386:	4ba3      	ldr	r3, [pc, #652]	; (8007614 <imu_ahrs_update+0x374>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4aa3      	ldr	r2, [pc, #652]	; (8007618 <imu_ahrs_update+0x378>)
 800738c:	6013      	str	r3, [r2, #0]
	ay = accel_proc_data.ay;
 800738e:	4ba1      	ldr	r3, [pc, #644]	; (8007614 <imu_ahrs_update+0x374>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	4aa2      	ldr	r2, [pc, #648]	; (800761c <imu_ahrs_update+0x37c>)
 8007394:	6013      	str	r3, [r2, #0]
	az = accel_proc_data.az;
 8007396:	4b9f      	ldr	r3, [pc, #636]	; (8007614 <imu_ahrs_update+0x374>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	4aa1      	ldr	r2, [pc, #644]	; (8007620 <imu_ahrs_update+0x380>)
 800739c:	6013      	str	r3, [r2, #0]
	mx = mag_proc_data.mx;
 800739e:	4ba1      	ldr	r3, [pc, #644]	; (8007624 <imu_ahrs_update+0x384>)
 80073a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073a4:	ee07 3a90 	vmov	s15, r3
 80073a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073ac:	4b9e      	ldr	r3, [pc, #632]	; (8007628 <imu_ahrs_update+0x388>)
 80073ae:	edc3 7a00 	vstr	s15, [r3]
	my = mag_proc_data.my;
 80073b2:	4b9c      	ldr	r3, [pc, #624]	; (8007624 <imu_ahrs_update+0x384>)
 80073b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80073b8:	ee07 3a90 	vmov	s15, r3
 80073bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073c0:	4b9a      	ldr	r3, [pc, #616]	; (800762c <imu_ahrs_update+0x38c>)
 80073c2:	edc3 7a00 	vstr	s15, [r3]
	mz = mag_proc_data.mz;
 80073c6:	4b97      	ldr	r3, [pc, #604]	; (8007624 <imu_ahrs_update+0x384>)
 80073c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073d4:	4b96      	ldr	r3, [pc, #600]	; (8007630 <imu_ahrs_update+0x390>)
 80073d6:	edc3 7a00 	vstr	s15, [r3]

	last_proc_times[0] = HAL_GetTick(); //ms
 80073da:	f003 fe8f 	bl	800b0fc <HAL_GetTick>
 80073de:	4603      	mov	r3, r0
 80073e0:	4a94      	ldr	r2, [pc, #592]	; (8007634 <imu_ahrs_update+0x394>)
 80073e2:	6013      	str	r3, [r2, #0]
	halfT = ((float) (last_proc_times[0] - last_proc_times[1]) / 2000.0f);
 80073e4:	4b93      	ldr	r3, [pc, #588]	; (8007634 <imu_ahrs_update+0x394>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	4b92      	ldr	r3, [pc, #584]	; (8007634 <imu_ahrs_update+0x394>)
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073f6:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007638 <imu_ahrs_update+0x398>
 80073fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073fe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_proc_times[1] = last_proc_times[0];
 8007402:	4b8c      	ldr	r3, [pc, #560]	; (8007634 <imu_ahrs_update+0x394>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a8b      	ldr	r2, [pc, #556]	; (8007634 <imu_ahrs_update+0x394>)
 8007408:	6053      	str	r3, [r2, #4]

	/* Fast inverse square-root */
	norm = inv_sqrt(ax * ax + ay * ay + az * az);
 800740a:	4b83      	ldr	r3, [pc, #524]	; (8007618 <imu_ahrs_update+0x378>)
 800740c:	ed93 7a00 	vldr	s14, [r3]
 8007410:	4b81      	ldr	r3, [pc, #516]	; (8007618 <imu_ahrs_update+0x378>)
 8007412:	edd3 7a00 	vldr	s15, [r3]
 8007416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800741a:	4b80      	ldr	r3, [pc, #512]	; (800761c <imu_ahrs_update+0x37c>)
 800741c:	edd3 6a00 	vldr	s13, [r3]
 8007420:	4b7e      	ldr	r3, [pc, #504]	; (800761c <imu_ahrs_update+0x37c>)
 8007422:	edd3 7a00 	vldr	s15, [r3]
 8007426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800742a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800742e:	4b7c      	ldr	r3, [pc, #496]	; (8007620 <imu_ahrs_update+0x380>)
 8007430:	edd3 6a00 	vldr	s13, [r3]
 8007434:	4b7a      	ldr	r3, [pc, #488]	; (8007620 <imu_ahrs_update+0x380>)
 8007436:	edd3 7a00 	vldr	s15, [r3]
 800743a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800743e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007442:	eeb0 0a67 	vmov.f32	s0, s15
 8007446:	f7fa f951 	bl	80016ec <inv_sqrt>
 800744a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 800744e:	4b72      	ldr	r3, [pc, #456]	; (8007618 <imu_ahrs_update+0x378>)
 8007450:	ed93 7a00 	vldr	s14, [r3]
 8007454:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745c:	4b6e      	ldr	r3, [pc, #440]	; (8007618 <imu_ahrs_update+0x378>)
 800745e:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 8007462:	4b6e      	ldr	r3, [pc, #440]	; (800761c <imu_ahrs_update+0x37c>)
 8007464:	ed93 7a00 	vldr	s14, [r3]
 8007468:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800746c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007470:	4b6a      	ldr	r3, [pc, #424]	; (800761c <imu_ahrs_update+0x37c>)
 8007472:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 8007476:	4b6a      	ldr	r3, [pc, #424]	; (8007620 <imu_ahrs_update+0x380>)
 8007478:	ed93 7a00 	vldr	s14, [r3]
 800747c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007484:	4b66      	ldr	r3, [pc, #408]	; (8007620 <imu_ahrs_update+0x380>)
 8007486:	edc3 7a00 	vstr	s15, [r3]
		norm = inv_sqrt(mx*mx + my*my + mz*mz);
		mx = mx * norm;
		my = my * norm;
		mz = mz * norm;
	#else
	mx = 0;
 800748a:	4b67      	ldr	r3, [pc, #412]	; (8007628 <imu_ahrs_update+0x388>)
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	601a      	str	r2, [r3, #0]
	my = 0;
 8007492:	4b66      	ldr	r3, [pc, #408]	; (800762c <imu_ahrs_update+0x38c>)
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
	mz = 0;
 800749a:	4b65      	ldr	r3, [pc, #404]	; (8007630 <imu_ahrs_update+0x390>)
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
#endif
	/* compute reference direction of flux */
	hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 80074a2:	4b61      	ldr	r3, [pc, #388]	; (8007628 <imu_ahrs_update+0x388>)
 80074a4:	edd3 7a00 	vldr	s15, [r3]
 80074a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80074ac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80074b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80074b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80074b8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80074bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80074c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074c4:	4b59      	ldr	r3, [pc, #356]	; (800762c <imu_ahrs_update+0x38c>)
 80074c6:	edd3 7a00 	vldr	s15, [r3]
 80074ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80074ce:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80074d2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80074d6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80074da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074e2:	4b53      	ldr	r3, [pc, #332]	; (8007630 <imu_ahrs_update+0x390>)
 80074e4:	edd3 7a00 	vldr	s15, [r3]
 80074e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80074ec:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80074f0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80074f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80074f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007500:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 8007504:	4b48      	ldr	r3, [pc, #288]	; (8007628 <imu_ahrs_update+0x388>)
 8007506:	edd3 7a00 	vldr	s15, [r3]
 800750a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800750e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8007512:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800751e:	4b43      	ldr	r3, [pc, #268]	; (800762c <imu_ahrs_update+0x38c>)
 8007520:	edd3 7a00 	vldr	s15, [r3]
 8007524:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007528:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800752c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007530:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007534:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007538:	ee76 7a67 	vsub.f32	s15, s12, s15
 800753c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007544:	4b3a      	ldr	r3, [pc, #232]	; (8007630 <imu_ahrs_update+0x390>)
 8007546:	edd3 7a00 	vldr	s15, [r3]
 800754a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800754e:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8007552:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007556:	ee76 7a67 	vsub.f32	s15, s12, s15
 800755a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800755e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007562:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 8007566:	4b30      	ldr	r3, [pc, #192]	; (8007628 <imu_ahrs_update+0x388>)
 8007568:	edd3 7a00 	vldr	s15, [r3]
 800756c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007570:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8007574:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007578:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800757c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007580:	4b2a      	ldr	r3, [pc, #168]	; (800762c <imu_ahrs_update+0x38c>)
 8007582:	edd3 7a00 	vldr	s15, [r3]
 8007586:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800758a:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800758e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007592:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800759a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800759e:	4b24      	ldr	r3, [pc, #144]	; (8007630 <imu_ahrs_update+0x390>)
 80075a0:	edd3 7a00 	vldr	s15, [r3]
 80075a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80075a8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80075ac:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80075b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80075b4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80075b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80075bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx * hx) + (hy * hy));
 80075c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80075cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80075d0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80075d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80075d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075dc:	ee17 0a90 	vmov	r0, s15
 80075e0:	f7f8 ffb2 	bl	8000548 <__aeabi_f2d>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	ec43 2b10 	vmov	d0, r2, r3
 80075ec:	f018 fa9a 	bl	801fb24 <sqrt>
 80075f0:	e024      	b.n	800763c <imu_ahrs_update+0x39c>
 80075f2:	bf00      	nop
 80075f4:	2000000c 	.word	0x2000000c
 80075f8:	200029ec 	.word	0x200029ec
 80075fc:	200029f0 	.word	0x200029f0
 8007600:	200029f4 	.word	0x200029f4
 8007604:	20002a44 	.word	0x20002a44
 8007608:	20002a04 	.word	0x20002a04
 800760c:	20002a08 	.word	0x20002a08
 8007610:	20002a0c 	.word	0x20002a0c
 8007614:	20002a34 	.word	0x20002a34
 8007618:	20002a10 	.word	0x20002a10
 800761c:	20002a14 	.word	0x20002a14
 8007620:	20002a18 	.word	0x20002a18
 8007624:	20002a54 	.word	0x20002a54
 8007628:	20002a1c 	.word	0x20002a1c
 800762c:	20002a20 	.word	0x20002a20
 8007630:	20002a24 	.word	0x20002a24
 8007634:	20002a60 	.word	0x20002a60
 8007638:	44fa0000 	.word	0x44fa0000
 800763c:	ec53 2b10 	vmov	r2, r3, d0
 8007640:	4610      	mov	r0, r2
 8007642:	4619      	mov	r1, r3
 8007644:	f7f9 fad0 	bl	8000be8 <__aeabi_d2f>
 8007648:	4603      	mov	r3, r0
 800764a:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz;
 800764c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764e:	637b      	str	r3, [r7, #52]	; 0x34

	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f * (q1q3 - q0q2);
 8007650:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007654:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800765c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007660:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f * (q0q1 + q2q3);
 8007664:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8007668:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800766c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007670:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007674:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8007678:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800767c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007684:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800768c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007694:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 8007698:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800769c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80076a0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80076a4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80076a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80076ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80076b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80076b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80076bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80076c0:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80076c4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80076c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80076cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 80076d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80076dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80076e0:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80076e4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80076e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80076ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80076f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80076f8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80076fc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007700:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800770c:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 8007710:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007714:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007718:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800771c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007728:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800772c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007730:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007734:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007738:	ee36 6a67 	vsub.f32	s12, s12, s15
 800773c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007740:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800774c:	edc7 7a07 	vstr	s15, [r7, #28]

	/*
	 * error is sum of cross product between reference direction
	 * of fields and direction measured by sensors
	 */
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8007750:	4bde      	ldr	r3, [pc, #888]	; (8007acc <imu_ahrs_update+0x82c>)
 8007752:	ed93 7a00 	vldr	s14, [r3]
 8007756:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800775a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800775e:	4bdc      	ldr	r3, [pc, #880]	; (8007ad0 <imu_ahrs_update+0x830>)
 8007760:	edd3 6a00 	vldr	s13, [r3]
 8007764:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800776c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007770:	4bd8      	ldr	r3, [pc, #864]	; (8007ad4 <imu_ahrs_update+0x834>)
 8007772:	edd3 6a00 	vldr	s13, [r3]
 8007776:	edd7 7a07 	vldr	s15, [r7, #28]
 800777a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800777e:	4bd6      	ldr	r3, [pc, #856]	; (8007ad8 <imu_ahrs_update+0x838>)
 8007780:	ed93 6a00 	vldr	s12, [r3]
 8007784:	edd7 7a08 	vldr	s15, [r7, #32]
 8007788:	ee66 7a27 	vmul.f32	s15, s12, s15
 800778c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007794:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8007798:	4bcd      	ldr	r3, [pc, #820]	; (8007ad0 <imu_ahrs_update+0x830>)
 800779a:	ed93 7a00 	vldr	s14, [r3]
 800779e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80077a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077a6:	4bcd      	ldr	r3, [pc, #820]	; (8007adc <imu_ahrs_update+0x83c>)
 80077a8:	edd3 6a00 	vldr	s13, [r3]
 80077ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80077b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077b8:	4bc7      	ldr	r3, [pc, #796]	; (8007ad8 <imu_ahrs_update+0x838>)
 80077ba:	edd3 6a00 	vldr	s13, [r3]
 80077be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80077c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80077c6:	4bc6      	ldr	r3, [pc, #792]	; (8007ae0 <imu_ahrs_update+0x840>)
 80077c8:	ed93 6a00 	vldr	s12, [r3]
 80077cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80077d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80077d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80077d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077dc:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80077e0:	4bbe      	ldr	r3, [pc, #760]	; (8007adc <imu_ahrs_update+0x83c>)
 80077e2:	ed93 7a00 	vldr	s14, [r3]
 80077e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80077ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077ee:	4bb7      	ldr	r3, [pc, #732]	; (8007acc <imu_ahrs_update+0x82c>)
 80077f0:	edd3 6a00 	vldr	s13, [r3]
 80077f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80077f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007800:	4bb7      	ldr	r3, [pc, #732]	; (8007ae0 <imu_ahrs_update+0x840>)
 8007802:	edd3 6a00 	vldr	s13, [r3]
 8007806:	edd7 7a08 	vldr	s15, [r7, #32]
 800780a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800780e:	4bb1      	ldr	r3, [pc, #708]	; (8007ad4 <imu_ahrs_update+0x834>)
 8007810:	ed93 6a00 	vldr	s12, [r3]
 8007814:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007818:	ee66 7a27 	vmul.f32	s15, s12, s15
 800781c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007824:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if (ex != 0.0f && ey != 0.0f && ez != 0.0f) {
 8007828:	edd7 7a06 	vldr	s15, [r7, #24]
 800782c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007834:	d07c      	beq.n	8007930 <imu_ahrs_update+0x690>
 8007836:	edd7 7a05 	vldr	s15, [r7, #20]
 800783a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007842:	d075      	beq.n	8007930 <imu_ahrs_update+0x690>
 8007844:	edd7 7a04 	vldr	s15, [r7, #16]
 8007848:	eef5 7a40 	vcmp.f32	s15, #0.0
 800784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007850:	d06e      	beq.n	8007930 <imu_ahrs_update+0x690>
		exInt = exInt + ex * AHRSKi * halfT;
 8007852:	edd7 7a06 	vldr	s15, [r7, #24]
 8007856:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8007ae4 <imu_ahrs_update+0x844>
 800785a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800785e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007866:	4ba0      	ldr	r3, [pc, #640]	; (8007ae8 <imu_ahrs_update+0x848>)
 8007868:	edd3 7a00 	vldr	s15, [r3]
 800786c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007870:	4b9d      	ldr	r3, [pc, #628]	; (8007ae8 <imu_ahrs_update+0x848>)
 8007872:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * AHRSKi * halfT;
 8007876:	edd7 7a05 	vldr	s15, [r7, #20]
 800787a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8007ae4 <imu_ahrs_update+0x844>
 800787e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007882:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800788a:	4b98      	ldr	r3, [pc, #608]	; (8007aec <imu_ahrs_update+0x84c>)
 800788c:	edd3 7a00 	vldr	s15, [r3]
 8007890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007894:	4b95      	ldr	r3, [pc, #596]	; (8007aec <imu_ahrs_update+0x84c>)
 8007896:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * AHRSKi * halfT;
 800789a:	edd7 7a04 	vldr	s15, [r7, #16]
 800789e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8007ae4 <imu_ahrs_update+0x844>
 80078a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078a6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80078aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078ae:	4b90      	ldr	r3, [pc, #576]	; (8007af0 <imu_ahrs_update+0x850>)
 80078b0:	edd3 7a00 	vldr	s15, [r3]
 80078b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078b8:	4b8d      	ldr	r3, [pc, #564]	; (8007af0 <imu_ahrs_update+0x850>)
 80078ba:	edc3 7a00 	vstr	s15, [r3]

		gx = gx + AHRSKp * ex + exInt;
 80078be:	edd7 7a06 	vldr	s15, [r7, #24]
 80078c2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007af4 <imu_ahrs_update+0x854>
 80078c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078ca:	4b8b      	ldr	r3, [pc, #556]	; (8007af8 <imu_ahrs_update+0x858>)
 80078cc:	edd3 7a00 	vldr	s15, [r3]
 80078d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078d4:	4b84      	ldr	r3, [pc, #528]	; (8007ae8 <imu_ahrs_update+0x848>)
 80078d6:	edd3 7a00 	vldr	s15, [r3]
 80078da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078de:	4b86      	ldr	r3, [pc, #536]	; (8007af8 <imu_ahrs_update+0x858>)
 80078e0:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + AHRSKp * ey + eyInt;
 80078e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80078e8:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8007af4 <imu_ahrs_update+0x854>
 80078ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078f0:	4b82      	ldr	r3, [pc, #520]	; (8007afc <imu_ahrs_update+0x85c>)
 80078f2:	edd3 7a00 	vldr	s15, [r3]
 80078f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078fa:	4b7c      	ldr	r3, [pc, #496]	; (8007aec <imu_ahrs_update+0x84c>)
 80078fc:	edd3 7a00 	vldr	s15, [r3]
 8007900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007904:	4b7d      	ldr	r3, [pc, #500]	; (8007afc <imu_ahrs_update+0x85c>)
 8007906:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + AHRSKp * ez + ezInt;
 800790a:	edd7 7a04 	vldr	s15, [r7, #16]
 800790e:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8007af4 <imu_ahrs_update+0x854>
 8007912:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007916:	4b7a      	ldr	r3, [pc, #488]	; (8007b00 <imu_ahrs_update+0x860>)
 8007918:	edd3 7a00 	vldr	s15, [r3]
 800791c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007920:	4b73      	ldr	r3, [pc, #460]	; (8007af0 <imu_ahrs_update+0x850>)
 8007922:	edd3 7a00 	vldr	s15, [r3]
 8007926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800792a:	4b75      	ldr	r3, [pc, #468]	; (8007b00 <imu_ahrs_update+0x860>)
 800792c:	edc3 7a00 	vstr	s15, [r3]
	}

	tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 8007930:	4b74      	ldr	r3, [pc, #464]	; (8007b04 <imu_ahrs_update+0x864>)
 8007932:	edd3 7a00 	vldr	s15, [r3]
 8007936:	eeb1 7a67 	vneg.f32	s14, s15
 800793a:	4b6f      	ldr	r3, [pc, #444]	; (8007af8 <imu_ahrs_update+0x858>)
 800793c:	edd3 7a00 	vldr	s15, [r3]
 8007940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007944:	4b70      	ldr	r3, [pc, #448]	; (8007b08 <imu_ahrs_update+0x868>)
 8007946:	edd3 6a00 	vldr	s13, [r3]
 800794a:	4b6c      	ldr	r3, [pc, #432]	; (8007afc <imu_ahrs_update+0x85c>)
 800794c:	edd3 7a00 	vldr	s15, [r3]
 8007950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007954:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007958:	4b6c      	ldr	r3, [pc, #432]	; (8007b0c <imu_ahrs_update+0x86c>)
 800795a:	edd3 6a00 	vldr	s13, [r3]
 800795e:	4b68      	ldr	r3, [pc, #416]	; (8007b00 <imu_ahrs_update+0x860>)
 8007960:	edd3 7a00 	vldr	s15, [r3]
 8007964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800796c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007974:	4b66      	ldr	r3, [pc, #408]	; (8007b10 <imu_ahrs_update+0x870>)
 8007976:	edd3 7a00 	vldr	s15, [r3]
 800797a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800797e:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 8007982:	4b63      	ldr	r3, [pc, #396]	; (8007b10 <imu_ahrs_update+0x870>)
 8007984:	ed93 7a00 	vldr	s14, [r3]
 8007988:	4b5b      	ldr	r3, [pc, #364]	; (8007af8 <imu_ahrs_update+0x858>)
 800798a:	edd3 7a00 	vldr	s15, [r3]
 800798e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007992:	4b5d      	ldr	r3, [pc, #372]	; (8007b08 <imu_ahrs_update+0x868>)
 8007994:	edd3 6a00 	vldr	s13, [r3]
 8007998:	4b59      	ldr	r3, [pc, #356]	; (8007b00 <imu_ahrs_update+0x860>)
 800799a:	edd3 7a00 	vldr	s15, [r3]
 800799e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079a6:	4b59      	ldr	r3, [pc, #356]	; (8007b0c <imu_ahrs_update+0x86c>)
 80079a8:	edd3 6a00 	vldr	s13, [r3]
 80079ac:	4b53      	ldr	r3, [pc, #332]	; (8007afc <imu_ahrs_update+0x85c>)
 80079ae:	edd3 7a00 	vldr	s15, [r3]
 80079b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079ba:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80079be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80079c2:	4b50      	ldr	r3, [pc, #320]	; (8007b04 <imu_ahrs_update+0x864>)
 80079c4:	edd3 7a00 	vldr	s15, [r3]
 80079c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079cc:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 80079d0:	4b4f      	ldr	r3, [pc, #316]	; (8007b10 <imu_ahrs_update+0x870>)
 80079d2:	ed93 7a00 	vldr	s14, [r3]
 80079d6:	4b49      	ldr	r3, [pc, #292]	; (8007afc <imu_ahrs_update+0x85c>)
 80079d8:	edd3 7a00 	vldr	s15, [r3]
 80079dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80079e0:	4b48      	ldr	r3, [pc, #288]	; (8007b04 <imu_ahrs_update+0x864>)
 80079e2:	edd3 6a00 	vldr	s13, [r3]
 80079e6:	4b46      	ldr	r3, [pc, #280]	; (8007b00 <imu_ahrs_update+0x860>)
 80079e8:	edd3 7a00 	vldr	s15, [r3]
 80079ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079f4:	4b45      	ldr	r3, [pc, #276]	; (8007b0c <imu_ahrs_update+0x86c>)
 80079f6:	edd3 6a00 	vldr	s13, [r3]
 80079fa:	4b3f      	ldr	r3, [pc, #252]	; (8007af8 <imu_ahrs_update+0x858>)
 80079fc:	edd3 7a00 	vldr	s15, [r3]
 8007a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a08:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a10:	4b3d      	ldr	r3, [pc, #244]	; (8007b08 <imu_ahrs_update+0x868>)
 8007a12:	edd3 7a00 	vldr	s15, [r3]
 8007a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a1a:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 8007a1e:	4b3c      	ldr	r3, [pc, #240]	; (8007b10 <imu_ahrs_update+0x870>)
 8007a20:	ed93 7a00 	vldr	s14, [r3]
 8007a24:	4b36      	ldr	r3, [pc, #216]	; (8007b00 <imu_ahrs_update+0x860>)
 8007a26:	edd3 7a00 	vldr	s15, [r3]
 8007a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a2e:	4b35      	ldr	r3, [pc, #212]	; (8007b04 <imu_ahrs_update+0x864>)
 8007a30:	edd3 6a00 	vldr	s13, [r3]
 8007a34:	4b31      	ldr	r3, [pc, #196]	; (8007afc <imu_ahrs_update+0x85c>)
 8007a36:	edd3 7a00 	vldr	s15, [r3]
 8007a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a42:	4b31      	ldr	r3, [pc, #196]	; (8007b08 <imu_ahrs_update+0x868>)
 8007a44:	edd3 6a00 	vldr	s13, [r3]
 8007a48:	4b2b      	ldr	r3, [pc, #172]	; (8007af8 <imu_ahrs_update+0x858>)
 8007a4a:	edd3 7a00 	vldr	s15, [r3]
 8007a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a56:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a5e:	4b2b      	ldr	r3, [pc, #172]	; (8007b0c <imu_ahrs_update+0x86c>)
 8007a60:	edd3 7a00 	vldr	s15, [r3]
 8007a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a68:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 8007a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a70:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007a74:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a80:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a8c:	edd7 7a00 	vldr	s15, [r7]
 8007a90:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a98:	eeb0 0a67 	vmov.f32	s0, s15
 8007a9c:	f7f9 fe26 	bl	80016ec <inv_sqrt>
 8007aa0:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 8007aa4:	ed97 7a03 	vldr	s14, [r7, #12]
 8007aa8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab0:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <imu_ahrs_update+0x870>)
 8007ab2:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 8007ab6:	ed97 7a02 	vldr	s14, [r7, #8]
 8007aba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac2:	4b10      	ldr	r3, [pc, #64]	; (8007b04 <imu_ahrs_update+0x864>)
 8007ac4:	edc3 7a00 	vstr	s15, [r3]
 8007ac8:	e024      	b.n	8007b14 <imu_ahrs_update+0x874>
 8007aca:	bf00      	nop
 8007acc:	20002a14 	.word	0x20002a14
 8007ad0:	20002a18 	.word	0x20002a18
 8007ad4:	20002a20 	.word	0x20002a20
 8007ad8:	20002a24 	.word	0x20002a24
 8007adc:	20002a10 	.word	0x20002a10
 8007ae0:	20002a1c 	.word	0x20002a1c
 8007ae4:	00000000 	.word	0x00000000
 8007ae8:	200029f8 	.word	0x200029f8
 8007aec:	200029fc 	.word	0x200029fc
 8007af0:	20002a00 	.word	0x20002a00
 8007af4:	3e19999a 	.word	0x3e19999a
 8007af8:	20002a04 	.word	0x20002a04
 8007afc:	20002a08 	.word	0x20002a08
 8007b00:	20002a0c 	.word	0x20002a0c
 8007b04:	200029ec 	.word	0x200029ec
 8007b08:	200029f0 	.word	0x200029f0
 8007b0c:	200029f4 	.word	0x200029f4
 8007b10:	2000000c 	.word	0x2000000c
	q2 = tempq2 * norm;
 8007b14:	ed97 7a01 	vldr	s14, [r7, #4]
 8007b18:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <imu_ahrs_update+0x8a0>)
 8007b22:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 8007b26:	ed97 7a00 	vldr	s14, [r7]
 8007b2a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b32:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <imu_ahrs_update+0x8a4>)
 8007b34:	edc3 7a00 	vstr	s15, [r3]
}
 8007b38:	bf00      	nop
 8007b3a:	3778      	adds	r7, #120	; 0x78
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	200029f0 	.word	0x200029f0
 8007b44:	200029f4 	.word	0x200029f4

08007b48 <imu_attitude_update>:

void imu_attitude_update(void) {
 8007b48:	b5b0      	push	{r4, r5, r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
	if (IMU_ORIENTATION == 0) {
		/* yaw    -pi----pi */
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8007b4c:	4b63      	ldr	r3, [pc, #396]	; (8007cdc <imu_attitude_update+0x194>)
 8007b4e:	edd3 7a00 	vldr	s15, [r3]
 8007b52:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007b56:	4b62      	ldr	r3, [pc, #392]	; (8007ce0 <imu_attitude_update+0x198>)
 8007b58:	edd3 7a00 	vldr	s15, [r3]
 8007b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b60:	4b60      	ldr	r3, [pc, #384]	; (8007ce4 <imu_attitude_update+0x19c>)
 8007b62:	edd3 7a00 	vldr	s15, [r3]
 8007b66:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007b6a:	4b5f      	ldr	r3, [pc, #380]	; (8007ce8 <imu_attitude_update+0x1a0>)
 8007b6c:	edd3 7a00 	vldr	s15, [r3]
 8007b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b74:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q2 * q2 - 2 * q3 * q3 + 1) * IMU_YAW_INVERT;
 8007b78:	ee17 0a90 	vmov	r0, s15
 8007b7c:	f7f8 fce4 	bl	8000548 <__aeabi_f2d>
 8007b80:	4604      	mov	r4, r0
 8007b82:	460d      	mov	r5, r1
 8007b84:	4b56      	ldr	r3, [pc, #344]	; (8007ce0 <imu_attitude_update+0x198>)
 8007b86:	edd3 7a00 	vldr	s15, [r3]
 8007b8a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8007b8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007b92:	4b53      	ldr	r3, [pc, #332]	; (8007ce0 <imu_attitude_update+0x198>)
 8007b94:	edd3 7a00 	vldr	s15, [r3]
 8007b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b9c:	4b52      	ldr	r3, [pc, #328]	; (8007ce8 <imu_attitude_update+0x1a0>)
 8007b9e:	edd3 7a00 	vldr	s15, [r3]
 8007ba2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007ba6:	4b50      	ldr	r3, [pc, #320]	; (8007ce8 <imu_attitude_update+0x1a0>)
 8007ba8:	edd3 7a00 	vldr	s15, [r3]
 8007bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bbc:	ee17 0a90 	vmov	r0, s15
 8007bc0:	f7f8 fcc2 	bl	8000548 <__aeabi_f2d>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	ec43 2b11 	vmov	d1, r2, r3
 8007bcc:	ec45 4b10 	vmov	d0, r4, r5
 8007bd0:	f017 ffa6 	bl	801fb20 <atan2>
 8007bd4:	ec53 2b10 	vmov	r2, r3, d0
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4619      	mov	r1, r3
 8007bdc:	f7f9 f804 	bl	8000be8 <__aeabi_d2f>
 8007be0:	4603      	mov	r3, r0
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8007be2:	4a42      	ldr	r2, [pc, #264]	; (8007cec <imu_attitude_update+0x1a4>)
 8007be4:	6093      	str	r3, [r2, #8]
		/* pitch  -pi/2----pi/2 */
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
 8007be6:	4b3d      	ldr	r3, [pc, #244]	; (8007cdc <imu_attitude_update+0x194>)
 8007be8:	edd3 7a00 	vldr	s15, [r3]
 8007bec:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8007bf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007bf4:	4b3c      	ldr	r3, [pc, #240]	; (8007ce8 <imu_attitude_update+0x1a0>)
 8007bf6:	edd3 7a00 	vldr	s15, [r3]
 8007bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bfe:	4b39      	ldr	r3, [pc, #228]	; (8007ce4 <imu_attitude_update+0x19c>)
 8007c00:	edd3 7a00 	vldr	s15, [r3]
 8007c04:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007c08:	4b35      	ldr	r3, [pc, #212]	; (8007ce0 <imu_attitude_update+0x198>)
 8007c0a:	edd3 7a00 	vldr	s15, [r3]
 8007c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c16:	ee17 0a90 	vmov	r0, s15
 8007c1a:	f7f8 fc95 	bl	8000548 <__aeabi_f2d>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	ec43 2b10 	vmov	d0, r2, r3
 8007c26:	f017 ff47 	bl	801fab8 <asin>
 8007c2a:	ec53 2b10 	vmov	r2, r3, d0
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4619      	mov	r1, r3
 8007c32:	f7f8 ffd9 	bl	8000be8 <__aeabi_d2f>
 8007c36:	4603      	mov	r3, r0
 8007c38:	4a2c      	ldr	r2, [pc, #176]	; (8007cec <imu_attitude_update+0x1a4>)
 8007c3a:	6013      	str	r3, [r2, #0]
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8007c3c:	4b28      	ldr	r3, [pc, #160]	; (8007ce0 <imu_attitude_update+0x198>)
 8007c3e:	edd3 7a00 	vldr	s15, [r3]
 8007c42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007c46:	4b28      	ldr	r3, [pc, #160]	; (8007ce8 <imu_attitude_update+0x1a0>)
 8007c48:	edd3 7a00 	vldr	s15, [r3]
 8007c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c50:	4b24      	ldr	r3, [pc, #144]	; (8007ce4 <imu_attitude_update+0x19c>)
 8007c52:	edd3 7a00 	vldr	s15, [r3]
 8007c56:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007c5a:	4b20      	ldr	r3, [pc, #128]	; (8007cdc <imu_attitude_update+0x194>)
 8007c5c:	edd3 7a00 	vldr	s15, [r3]
 8007c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c64:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
 8007c68:	ee17 0a90 	vmov	r0, s15
 8007c6c:	f7f8 fc6c 	bl	8000548 <__aeabi_f2d>
 8007c70:	4604      	mov	r4, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <imu_attitude_update+0x194>)
 8007c76:	edd3 7a00 	vldr	s15, [r3]
 8007c7a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8007c7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007c82:	4b16      	ldr	r3, [pc, #88]	; (8007cdc <imu_attitude_update+0x194>)
 8007c84:	edd3 7a00 	vldr	s15, [r3]
 8007c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c8c:	4b14      	ldr	r3, [pc, #80]	; (8007ce0 <imu_attitude_update+0x198>)
 8007c8e:	edd3 7a00 	vldr	s15, [r3]
 8007c92:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007c96:	4b12      	ldr	r3, [pc, #72]	; (8007ce0 <imu_attitude_update+0x198>)
 8007c98:	edd3 7a00 	vldr	s15, [r3]
 8007c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cac:	ee17 0a90 	vmov	r0, s15
 8007cb0:	f7f8 fc4a 	bl	8000548 <__aeabi_f2d>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	ec43 2b11 	vmov	d1, r2, r3
 8007cbc:	ec45 4b10 	vmov	d0, r4, r5
 8007cc0:	f017 ff2e 	bl	801fb20 <atan2>
 8007cc4:	ec53 2b10 	vmov	r2, r3, d0
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	f7f8 ff8c 	bl	8000be8 <__aeabi_d2f>
 8007cd0:	4603      	mov	r3, r0
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8007cd2:	4a06      	ldr	r2, [pc, #24]	; (8007cec <imu_attitude_update+0x1a4>)
 8007cd4:	6053      	str	r3, [r2, #4]
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	200029ec 	.word	0x200029ec
 8007ce0:	200029f0 	.word	0x200029f0
 8007ce4:	2000000c 	.word	0x2000000c
 8007ce8:	200029f4 	.word	0x200029f4
 8007cec:	20002a28 	.word	0x20002a28

08007cf0 <launcher_control_task>:
extern ref_magazine_data_t ref_mag_data;
extern uint32_t ref_mag_data_txno;
static uint32_t prev_power_data_no = 0;
static uint32_t prev_mag_data_no = 0;

void launcher_control_task(void *argument) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		//event flags!
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8007cf8:	4b22      	ldr	r3, [pc, #136]	; (8007d84 <launcher_control_task+0x94>)
 8007cfa:	6818      	ldr	r0, [r3, #0]
 8007cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	2301      	movs	r3, #1
 8007d04:	2201      	movs	r2, #1
 8007d06:	2107      	movs	r1, #7
 8007d08:	f00f fa30 	bl	801716c <xEventGroupWaitBits>
		portMAX_DELAY);
		status_led(4, on_led);
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	2004      	movs	r0, #4
 8007d10:	f7fa f962 	bl	8001fd8 <status_led>
		start_time = xTaskGetTickCount();
 8007d14:	f010 fdec 	bl	80188f0 <xTaskGetTickCount>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	60fb      	str	r3, [r7, #12]

		if (launcher_ctrl_data.enabled) {
 8007d1c:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <launcher_control_task+0x98>)
 8007d1e:	795b      	ldrb	r3, [r3, #5]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d006      	beq.n	8007d32 <launcher_control_task+0x42>
			launcher_control(can_motors + LFRICTION_MOTOR_ID - 1,
 8007d24:	4b19      	ldr	r3, [pc, #100]	; (8007d8c <launcher_control_task+0x9c>)
 8007d26:	491a      	ldr	r1, [pc, #104]	; (8007d90 <launcher_control_task+0xa0>)
 8007d28:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <launcher_control_task+0xa4>)
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 f838 	bl	8007da0 <launcher_control>
 8007d30:	e017      	b.n	8007d62 <launcher_control_task+0x72>
					can_motors + RFRICTION_MOTOR_ID - 1,
					can_motors + FEEDER_MOTOR_ID - 1);

		} else {
			can_motors[LFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8007d32:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <launcher_control_task+0xa8>)
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
			can_motors[RFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8007d3c:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <launcher_control_task+0xa8>)
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
			can_motors[FEEDER_MOTOR_ID - 1].rpm_pid.output = 0;
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <launcher_control_task+0xa8>)
 8007d48:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d4c:	f04f 0200 	mov.w	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
			motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,
 8007d52:	2300      	movs	r3, #0
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2306      	movs	r3, #6
 8007d58:	2205      	movs	r2, #5
 8007d5a:	2107      	movs	r1, #7
 8007d5c:	480e      	ldr	r0, [pc, #56]	; (8007d98 <launcher_control_task+0xa8>)
 8007d5e:	f001 fdef 	bl	8009940 <motor_send_can>
			RFRICTION_MOTOR_ID, 0);
		}
		status_led(4, off_led);
 8007d62:	2101      	movs	r1, #1
 8007d64:	2004      	movs	r0, #4
 8007d66:	f7fa f937 	bl	8001fd8 <status_led>
		//vTaskDelay(CHASSIS_DELAY);
		xEventGroupClearBits(launcher_event_group, 0b111);
 8007d6a:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <launcher_control_task+0x94>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2107      	movs	r1, #7
 8007d70:	4618      	mov	r0, r3
 8007d72:	f00f fac9 	bl	8017308 <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 8007d76:	f107 030c 	add.w	r3, r7, #12
 8007d7a:	210a      	movs	r1, #10
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f010 fbe9 	bl	8018554 <vTaskDelayUntil>
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8007d82:	e7b9      	b.n	8007cf8 <launcher_control_task+0x8>
 8007d84:	20000474 	.word	0x20000474
 8007d88:	200027c4 	.word	0x200027c4
 8007d8c:	20001adc 	.word	0x20001adc
 8007d90:	20001b80 	.word	0x20001b80
 8007d94:	20001c24 	.word	0x20001c24
 8007d98:	2000184c 	.word	0x2000184c
 8007d9c:	00000000 	.word	0x00000000

08007da0 <launcher_control>:
	}

}

void launcher_control(motor_data_t *left_friction_motor,
		motor_data_t *right_friction_motor, motor_data_t *feeder) {
 8007da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da4:	b094      	sub	sp, #80	; 0x50
 8007da6:	af02      	add	r7, sp, #8
 8007da8:	6378      	str	r0, [r7, #52]	; 0x34
 8007daa:	6339      	str	r1, [r7, #48]	; 0x30
 8007dac:	62fa      	str	r2, [r7, #44]	; 0x2c

	int16_t feeder_output = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static uint32_t overheat_time;
	static float target_ang;
	uint32_t curr_time = HAL_GetTick();
 8007db4:	f003 f9a2 	bl	800b0fc <HAL_GetTick>
 8007db8:	63f8      	str	r0, [r7, #60]	; 0x3c
	static uint32_t overheat_start;
	static uint32_t last_fire;
	static uint8_t fired;
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8007dba:	4bb5      	ldr	r3, [pc, #724]	; (8008090 <launcher_control+0x2f0>)
 8007dbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007dc0:	461a      	mov	r2, r3
			* referee_limiters.feeding_speed / FEEDER_SPEED_RATIO;
 8007dc2:	4bb4      	ldr	r3, [pc, #720]	; (8008094 <launcher_control+0x2f4>)
 8007dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dc8:	fb02 f303 	mul.w	r3, r2, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	da00      	bge.n	8007dd2 <launcher_control+0x32>
 8007dd0:	3307      	adds	r3, #7
 8007dd2:	10db      	asrs	r3, r3, #3
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8007dd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	if (launcher_ctrl_data.gun_feeding_speed == 0) {
 8007dd8:	4bad      	ldr	r3, [pc, #692]	; (8008090 <launcher_control+0x2f0>)
 8007dda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f040 80e7 	bne.w	8007fb2 <launcher_control+0x212>
		feeder_output = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if (launcher_ctrl_data.override == 1) {
 8007dea:	4ba9      	ldr	r3, [pc, #676]	; (8008090 <launcher_control+0x2f0>)
 8007dec:	791b      	ldrb	r3, [r3, #4]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d13b      	bne.n	8007e6a <launcher_control+0xca>
			speed_pid(
					referee_limiters.projectile_speed * FRICTION_INVERT
 8007df2:	4ba8      	ldr	r3, [pc, #672]	; (8008094 <launcher_control+0x2f4>)
 8007df4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007df8:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8007dfa:	4ba7      	ldr	r3, [pc, #668]	; (8008098 <launcher_control+0x2f8>)
 8007dfc:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7f8 fb8f 	bl	8000524 <__aeabi_i2d>
 8007e06:	4604      	mov	r4, r0
 8007e08:	460d      	mov	r5, r1
					left_friction_motor->raw_data.rpm,
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7f8 fb87 	bl	8000524 <__aeabi_i2d>
 8007e16:	4680      	mov	r8, r0
 8007e18:	4689      	mov	r9, r1
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1c:	3310      	adds	r3, #16
 8007e1e:	4618      	mov	r0, r3
 8007e20:	ec49 8b11 	vmov	d1, r8, r9
 8007e24:	ec45 4b10 	vmov	d0, r4, r5
 8007e28:	f001 fcc8 	bl	80097bc <speed_pid>
					&left_friction_motor->rpm_pid);
			speed_pid(
					-referee_limiters.projectile_speed * FRICTION_INVERT
 8007e2c:	4b99      	ldr	r3, [pc, #612]	; (8008094 <launcher_control+0x2f4>)
 8007e2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007e32:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8007e34:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7f8 fb71 	bl	8000524 <__aeabi_i2d>
 8007e42:	4604      	mov	r4, r0
 8007e44:	460d      	mov	r5, r1
					right_friction_motor->raw_data.rpm,
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7f8 fb69 	bl	8000524 <__aeabi_i2d>
 8007e52:	4680      	mov	r8, r0
 8007e54:	4689      	mov	r9, r1
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	3310      	adds	r3, #16
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	ec49 8b11 	vmov	d1, r8, r9
 8007e60:	ec45 4b10 	vmov	d0, r4, r5
 8007e64:	f001 fcaa 	bl	80097bc <speed_pid>
 8007e68:	e09a      	b.n	8007fa0 <launcher_control+0x200>
					&right_friction_motor->rpm_pid);

		} else if (clear_time + CLEAR_DELAY > HAL_GetTick()) {
 8007e6a:	4b8c      	ldr	r3, [pc, #560]	; (800809c <launcher_control+0x2fc>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8007e72:	f003 f943 	bl	800b0fc <HAL_GetTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	d95f      	bls.n	8007f3c <launcher_control+0x19c>
			speed_pid(
					referee_limiters.projectile_speed * FRICTION_INVERT
 8007e7c:	4b85      	ldr	r3, [pc, #532]	; (8008094 <launcher_control+0x2f4>)
 8007e7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007e82:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8007e84:	4b84      	ldr	r3, [pc, #528]	; (8008098 <launcher_control+0x2f8>)
 8007e86:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7f8 fb4a 	bl	8000524 <__aeabi_i2d>
 8007e90:	4604      	mov	r4, r0
 8007e92:	460d      	mov	r5, r1
					left_friction_motor->raw_data.rpm,
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7f8 fb42 	bl	8000524 <__aeabi_i2d>
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	4689      	mov	r9, r1
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea6:	3310      	adds	r3, #16
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	ec49 8b11 	vmov	d1, r8, r9
 8007eae:	ec45 4b10 	vmov	d0, r4, r5
 8007eb2:	f001 fc83 	bl	80097bc <speed_pid>
					&left_friction_motor->rpm_pid);
			speed_pid(
					-referee_limiters.projectile_speed * FRICTION_INVERT
 8007eb6:	4b77      	ldr	r3, [pc, #476]	; (8008094 <launcher_control+0x2f4>)
 8007eb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007ebc:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8007ebe:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7f8 fb2c 	bl	8000524 <__aeabi_i2d>
 8007ecc:	4604      	mov	r4, r0
 8007ece:	460d      	mov	r5, r1
					right_friction_motor->raw_data.rpm,
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7f8 fb24 	bl	8000524 <__aeabi_i2d>
 8007edc:	4680      	mov	r8, r0
 8007ede:	4689      	mov	r9, r1
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	3310      	adds	r3, #16
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	ec49 8b11 	vmov	d1, r8, r9
 8007eea:	ec45 4b10 	vmov	d0, r4, r5
 8007eee:	f001 fc65 	bl	80097bc <speed_pid>
					&right_friction_motor->rpm_pid);
			if (unjamming == 1) { // if unjam time reached, or jam on reverse torque
 8007ef2:	4b6b      	ldr	r3, [pc, #428]	; (80080a0 <launcher_control+0x300>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d11b      	bne.n	8007f32 <launcher_control+0x192>
				if ((start_time + FEEDER_UNJAM_TIME < HAL_GetTick())
 8007efa:	4b6a      	ldr	r3, [pc, #424]	; (80080a4 <launcher_control+0x304>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8007f02:	f003 f8fb 	bl	800b0fc <HAL_GetTick>
 8007f06:	4603      	mov	r3, r0
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	d305      	bcc.n	8007f18 <launcher_control+0x178>
						|| (feeder->raw_data.torque < -FEEDER_JAM_TORQUE)) {
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8007f12:	4a65      	ldr	r2, [pc, #404]	; (80080a8 <launcher_control+0x308>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	da07      	bge.n	8007f28 <launcher_control+0x188>
					unjamming = 0;
 8007f18:	4b61      	ldr	r3, [pc, #388]	; (80080a0 <launcher_control+0x300>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
#ifndef ANGLE_FEEDER
					feeder_output = firing_speed;
 8007f1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007f26:	e03b      	b.n	8007fa0 <launcher_control+0x200>
#endif
				} else {
					feeder_output = FEEDER_UNJAM_SPD;
 8007f28:	f64f 73c4 	movw	r3, #65476	; 0xffc4
 8007f2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007f30:	e036      	b.n	8007fa0 <launcher_control+0x200>
				}
			} else {
#ifndef ANGLE_FEEDER
				feeder_output = firing_speed;
 8007f32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007f3a:	e031      	b.n	8007fa0 <launcher_control+0x200>
;
#endif
			}

		} else if (ref_game_state.game_progress == 4){
 8007f3c:	4b5b      	ldr	r3, [pc, #364]	; (80080ac <launcher_control+0x30c>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f023 030f 	bic.w	r3, r3, #15
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d122      	bne.n	8007f90 <launcher_control+0x1f0>

			speed_pid(FRICTION_SB_SPIN * FRICTION_INVERT,
					left_friction_motor->raw_data.rpm,
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(FRICTION_SB_SPIN * FRICTION_INVERT,
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7f8 fae7 	bl	8000524 <__aeabi_i2d>
 8007f56:	4604      	mov	r4, r0
 8007f58:	460d      	mov	r5, r1
 8007f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5c:	3310      	adds	r3, #16
 8007f5e:	4618      	mov	r0, r3
 8007f60:	ec45 4b11 	vmov	d1, r4, r5
 8007f64:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8008080 <launcher_control+0x2e0>
 8007f68:	f001 fc28 	bl	80097bc <speed_pid>
					&left_friction_motor->rpm_pid);
			speed_pid(
					-FRICTION_SB_SPIN * FRICTION_INVERT,
					right_friction_motor->raw_data.rpm,
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7f8 fad6 	bl	8000524 <__aeabi_i2d>
 8007f78:	4604      	mov	r4, r0
 8007f7a:	460d      	mov	r5, r1
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	3310      	adds	r3, #16
 8007f80:	4618      	mov	r0, r3
 8007f82:	ec45 4b11 	vmov	d1, r4, r5
 8007f86:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8008088 <launcher_control+0x2e8>
 8007f8a:	f001 fc17 	bl	80097bc <speed_pid>
 8007f8e:	e007      	b.n	8007fa0 <launcher_control+0x200>
					&right_friction_motor->rpm_pid);

		}else {
			left_friction_motor->rpm_pid.output = 0;
 8007f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	631a      	str	r2, [r3, #48]	; 0x30
			right_friction_motor->rpm_pid.output = 0;
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	631a      	str	r2, [r3, #48]	; 0x30
		}
		overheat_time = curr_time + 1000;
 8007fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8007fa6:	4a42      	ldr	r2, [pc, #264]	; (80080b0 <launcher_control+0x310>)
 8007fa8:	6013      	str	r3, [r2, #0]
		overheat = 0;
 8007faa:	4b42      	ldr	r3, [pc, #264]	; (80080b4 <launcher_control+0x314>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e1fe      	b.n	80083b0 <launcher_control+0x610>
	} else {

#ifdef OVERHEAT_PROTECTION
		if (overheat == 1) {
 8007fb2:	4b40      	ldr	r3, [pc, #256]	; (80080b4 <launcher_control+0x314>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d108      	bne.n	8007fcc <launcher_control+0x22c>
			if (curr_time - overheat_start >= OVERHEAT_TIME) {
 8007fba:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <launcher_control+0x318>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b63      	cmp	r3, #99	; 0x63
 8007fc4:	d902      	bls.n	8007fcc <launcher_control+0x22c>
				overheat = 0;
 8007fc6:	4a3b      	ldr	r2, [pc, #236]	; (80080b4 <launcher_control+0x314>)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	7013      	strb	r3, [r2, #0]
			}
		}
		if (prev_power_data_no != ref_power_data_txno) {
 8007fcc:	4b3b      	ldr	r3, [pc, #236]	; (80080bc <launcher_control+0x31c>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	4b3b      	ldr	r3, [pc, #236]	; (80080c0 <launcher_control+0x320>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	f000 80c9 	beq.w	800816c <launcher_control+0x3cc>
			prev_power_data_no = ref_power_data_txno;
 8007fda:	4b39      	ldr	r3, [pc, #228]	; (80080c0 <launcher_control+0x320>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a37      	ldr	r2, [pc, #220]	; (80080bc <launcher_control+0x31c>)
 8007fe0:	6013      	str	r3, [r2, #0]
//			int16_t cur_fire_rate = fabs(launcher_ctrl_data.gun_feeding_speed* referee_limiters.feeding_speed);
			int16_t ammo_remaining;

#ifdef BULLET_17
			uint8_t active_feeder = 2;
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			if (ref_robot_data.shooter17_heat1_cooling_limit == 0
 8007fe8:	4b36      	ldr	r3, [pc, #216]	; (80080c4 <launcher_control+0x324>)
 8007fea:	89db      	ldrh	r3, [r3, #14]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d108      	bne.n	8008004 <launcher_control+0x264>
					&& ref_robot_data.shooter17_heat0_cooling_limit == 0) {
 8007ff2:	4b34      	ldr	r3, [pc, #208]	; (80080c4 <launcher_control+0x324>)
 8007ff4:	891b      	ldrh	r3, [r3, #8]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d103      	bne.n	8008004 <launcher_control+0x264>
				active_feeder = 3;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008002:	e010      	b.n	8008026 <launcher_control+0x286>
			} else if (ref_robot_data.shooter17_heat0_cooling_limit == 0) {
 8008004:	4b2f      	ldr	r3, [pc, #188]	; (80080c4 <launcher_control+0x324>)
 8008006:	891b      	ldrh	r3, [r3, #8]
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <launcher_control+0x276>
				active_feeder = 1;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008014:	e007      	b.n	8008026 <launcher_control+0x286>
			} else if (ref_robot_data.shooter17_heat1_cooling_limit == 0) {
 8008016:	4b2b      	ldr	r3, [pc, #172]	; (80080c4 <launcher_control+0x324>)
 8008018:	89db      	ldrh	r3, [r3, #14]
 800801a:	b29b      	uxth	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d102      	bne.n	8008026 <launcher_control+0x286>
				active_feeder = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			}

			if (active_feeder == 2) {
 8008026:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800802a:	2b02      	cmp	r3, #2
 800802c:	d10e      	bne.n	800804c <launcher_control+0x2ac>
				if (ref_power_data.shooter_heat0
 800802e:	4b26      	ldr	r3, [pc, #152]	; (80080c8 <launcher_control+0x328>)
 8008030:	895b      	ldrh	r3, [r3, #10]
 8008032:	b29a      	uxth	r2, r3
						>= ref_power_data.shooter_heat1) {
 8008034:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <launcher_control+0x328>)
 8008036:	899b      	ldrh	r3, [r3, #12]
 8008038:	b29b      	uxth	r3, r3
				if (ref_power_data.shooter_heat0
 800803a:	429a      	cmp	r2, r3
 800803c:	d303      	bcc.n	8008046 <launcher_control+0x2a6>
					active_feeder = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008044:	e002      	b.n	800804c <launcher_control+0x2ac>
				} else {
					active_feeder = 1;
 8008046:	2301      	movs	r3, #1
 8008048:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				}

			}

			if (active_feeder == 0) {
 800804c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008050:	2b00      	cmp	r3, #0
 8008052:	d13d      	bne.n	80080d0 <launcher_control+0x330>
				ammo_remaining =
						((((int16_t) ref_robot_data.shooter17_heat0_cooling_limit
 8008054:	4b1b      	ldr	r3, [pc, #108]	; (80080c4 <launcher_control+0x324>)
 8008056:	891b      	ldrh	r3, [r3, #8]
 8008058:	b29b      	uxth	r3, r3
 800805a:	b21b      	sxth	r3, r3
 800805c:	461a      	mov	r2, r3
								- (int16_t) ref_power_data.shooter_heat0))
 800805e:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <launcher_control+0x328>)
 8008060:	895b      	ldrh	r3, [r3, #10]
 8008062:	b29b      	uxth	r3, r3
 8008064:	b21b      	sxth	r3, r3
 8008066:	1ad1      	subs	r1, r2, r3
								/ BULLET_17_HEAT) - 2;
 8008068:	4b18      	ldr	r3, [pc, #96]	; (80080cc <launcher_control+0x32c>)
 800806a:	fb83 2301 	smull	r2, r3, r3, r1
 800806e:	109a      	asrs	r2, r3, #2
 8008070:	17cb      	asrs	r3, r1, #31
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	b29b      	uxth	r3, r3
 8008076:	3b02      	subs	r3, #2
 8008078:	b29b      	uxth	r3, r3
				ammo_remaining =
 800807a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800807e:	e040      	b.n	8008102 <launcher_control+0x362>
 8008080:	00000000 	.word	0x00000000
 8008084:	c08f4000 	.word	0xc08f4000
 8008088:	00000000 	.word	0x00000000
 800808c:	408f4000 	.word	0x408f4000
 8008090:	200027c4 	.word	0x200027c4
 8008094:	20002aac 	.word	0x20002aac
 8008098:	fffffe98 	.word	0xfffffe98
 800809c:	20002a70 	.word	0x20002a70
 80080a0:	20002a74 	.word	0x20002a74
 80080a4:	20002a6c 	.word	0x20002a6c
 80080a8:	ffffd9b8 	.word	0xffffd9b8
 80080ac:	20002b08 	.word	0x20002b08
 80080b0:	20002a7c 	.word	0x20002a7c
 80080b4:	20002a75 	.word	0x20002a75
 80080b8:	20002a80 	.word	0x20002a80
 80080bc:	20002a78 	.word	0x20002a78
 80080c0:	20002b60 	.word	0x20002b60
 80080c4:	20002b30 	.word	0x20002b30
 80080c8:	20002b50 	.word	0x20002b50
 80080cc:	66666667 	.word	0x66666667
			} else if (active_feeder == 1) {
 80080d0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d114      	bne.n	8008102 <launcher_control+0x362>
				ammo_remaining =
						((((int16_t) ref_robot_data.shooter17_heat1_cooling_limit
 80080d8:	4ba5      	ldr	r3, [pc, #660]	; (8008370 <launcher_control+0x5d0>)
 80080da:	89db      	ldrh	r3, [r3, #14]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	b21b      	sxth	r3, r3
 80080e0:	461a      	mov	r2, r3
								- (int16_t) ref_power_data.shooter_heat1))
 80080e2:	4ba4      	ldr	r3, [pc, #656]	; (8008374 <launcher_control+0x5d4>)
 80080e4:	899b      	ldrh	r3, [r3, #12]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	b21b      	sxth	r3, r3
 80080ea:	1ad1      	subs	r1, r2, r3
								/ BULLET_17_HEAT) - 2;
 80080ec:	4ba2      	ldr	r3, [pc, #648]	; (8008378 <launcher_control+0x5d8>)
 80080ee:	fb83 2301 	smull	r2, r3, r3, r1
 80080f2:	109a      	asrs	r2, r3, #2
 80080f4:	17cb      	asrs	r3, r1, #31
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	3b02      	subs	r3, #2
 80080fc:	b29b      	uxth	r3, r3
				ammo_remaining =
 80080fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			}
			if (active_feeder == 3) {
 8008102:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008106:	2b03      	cmp	r3, #3
 8008108:	d103      	bne.n	8008112 <launcher_control+0x372>
				ammo_remaining = 1000;
 800810a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800810e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			}
#endif

#endif

			if (ammo_remaining < 3) {
 8008112:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8008116:	2b02      	cmp	r3, #2
 8008118:	dc06      	bgt.n	8008128 <launcher_control+0x388>
				overheat = 1;
 800811a:	4a98      	ldr	r2, [pc, #608]	; (800837c <launcher_control+0x5dc>)
 800811c:	2301      	movs	r3, #1
 800811e:	7013      	strb	r3, [r2, #0]
				overheat_start = curr_time;
 8008120:	4a97      	ldr	r2, [pc, #604]	; (8008380 <launcher_control+0x5e0>)
 8008122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	e011      	b.n	800814c <launcher_control+0x3ac>
			} else {
				if (ammo_remaining < 10){
 8008128:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800812c:	2b09      	cmp	r3, #9
 800812e:	dc0d      	bgt.n	800814c <launcher_control+0x3ac>
					firing_speed = firing_speed * ammo_remaining/10;
 8008130:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008134:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8008138:	fb02 f103 	mul.w	r1, r2, r3
 800813c:	4b8e      	ldr	r3, [pc, #568]	; (8008378 <launcher_control+0x5d8>)
 800813e:	fb83 2301 	smull	r2, r3, r3, r1
 8008142:	109a      	asrs	r2, r3, #2
 8008144:	17cb      	asrs	r3, r1, #31
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				}
			}
			overheat_time = curr_time
					+ (ammo_remaining * 60 * 1000) / (firing_speed) - 50;
 800814c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8008150:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008154:	fb03 f202 	mul.w	r2, r3, r2
 8008158:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800815c:	fb92 f3f3 	sdiv	r3, r2, r3
 8008160:	461a      	mov	r2, r3
 8008162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008164:	4413      	add	r3, r2
 8008166:	3b32      	subs	r3, #50	; 0x32
			overheat_time = curr_time
 8008168:	4a86      	ldr	r2, [pc, #536]	; (8008384 <launcher_control+0x5e4>)
 800816a:	6013      	str	r3, [r2, #0]
		}
#endif

		//TODO: add in speed checks and shtuffasdwqwe
		clear_time = HAL_GetTick();
 800816c:	f002 ffc6 	bl	800b0fc <HAL_GetTick>
 8008170:	4603      	mov	r3, r0
 8008172:	4a85      	ldr	r2, [pc, #532]	; (8008388 <launcher_control+0x5e8>)
 8008174:	6013      	str	r3, [r2, #0]
		speed_pid(
				referee_limiters.projectile_speed * FRICTION_INVERT
 8008176:	4b85      	ldr	r3, [pc, #532]	; (800838c <launcher_control+0x5ec>)
 8008178:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800817c:	461a      	mov	r2, r3
						* PROJECTILE_SPEED_RATIO,
 800817e:	4b84      	ldr	r3, [pc, #528]	; (8008390 <launcher_control+0x5f0>)
 8008180:	fb02 f303 	mul.w	r3, r2, r3
		speed_pid(
 8008184:	4618      	mov	r0, r3
 8008186:	f7f8 f9cd 	bl	8000524 <__aeabi_i2d>
 800818a:	4680      	mov	r8, r0
 800818c:	4689      	mov	r9, r1
				left_friction_motor->raw_data.rpm,
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(
 8008194:	4618      	mov	r0, r3
 8008196:	f7f8 f9c5 	bl	8000524 <__aeabi_i2d>
 800819a:	4604      	mov	r4, r0
 800819c:	460d      	mov	r5, r1
 800819e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a0:	3310      	adds	r3, #16
 80081a2:	4618      	mov	r0, r3
 80081a4:	ec45 4b11 	vmov	d1, r4, r5
 80081a8:	ec49 8b10 	vmov	d0, r8, r9
 80081ac:	f001 fb06 	bl	80097bc <speed_pid>
				&left_friction_motor->rpm_pid);
		speed_pid(
				-referee_limiters.projectile_speed * FRICTION_INVERT
 80081b0:	4b76      	ldr	r3, [pc, #472]	; (800838c <launcher_control+0x5ec>)
 80081b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80081b6:	461a      	mov	r2, r3
						* PROJECTILE_SPEED_RATIO,
 80081b8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80081bc:	fb02 f303 	mul.w	r3, r2, r3
		speed_pid(
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7f8 f9af 	bl	8000524 <__aeabi_i2d>
 80081c6:	4680      	mov	r8, r0
 80081c8:	4689      	mov	r9, r1
				right_friction_motor->raw_data.rpm,
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7f8 f9a7 	bl	8000524 <__aeabi_i2d>
 80081d6:	4604      	mov	r4, r0
 80081d8:	460d      	mov	r5, r1
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	3310      	adds	r3, #16
 80081de:	4618      	mov	r0, r3
 80081e0:	ec45 4b11 	vmov	d1, r4, r5
 80081e4:	ec49 8b10 	vmov	d0, r8, r9
 80081e8:	f001 fae8 	bl	80097bc <speed_pid>

		}
		last_fire = curr_time;
#endif

		if (((((fabs(left_friction_motor->raw_data.rpm)
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7f8 f996 	bl	8000524 <__aeabi_i2d>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4692      	mov	sl, r2
 80081fe:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
				- fabs(
						(launcher_ctrl_data.projectile_speed
 8008202:	4b64      	ldr	r3, [pc, #400]	; (8008394 <launcher_control+0x5f4>)
 8008204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008208:	461a      	mov	r2, r3
								* PROJECTILE_SPEED_RATIO
								* referee_limiters.projectile_speed))
 800820a:	4b60      	ldr	r3, [pc, #384]	; (800838c <launcher_control+0x5ec>)
 800820c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008210:	fb02 f303 	mul.w	r3, r2, r3
 8008214:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008218:	fb02 f303 	mul.w	r3, r2, r3
				- fabs(
 800821c:	4618      	mov	r0, r3
 800821e:	f7f8 f981 	bl	8000524 <__aeabi_i2d>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	623a      	str	r2, [r7, #32]
 8008228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
 800822e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008232:	4650      	mov	r0, sl
 8008234:	4659      	mov	r1, fp
 8008236:	f7f8 f827 	bl	8000288 <__aeabi_dsub>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4610      	mov	r0, r2
 8008240:	4619      	mov	r1, r3
		if (((((fabs(left_friction_motor->raw_data.rpm)
 8008242:	f04f 0200 	mov.w	r2, #0
 8008246:	4b54      	ldr	r3, [pc, #336]	; (8008398 <launcher_control+0x5f8>)
 8008248:	f7f8 fc48 	bl	8000adc <__aeabi_dcmplt>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80ae 	beq.w	80083b0 <launcher_control+0x610>
				< LAUNCHER_MARGIN)))
				&& ((fabs(right_friction_motor->raw_data.rpm)
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800825a:	4618      	mov	r0, r3
 800825c:	f7f8 f962 	bl	8000524 <__aeabi_i2d>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	61ba      	str	r2, [r7, #24]
 8008266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800826a:	61fb      	str	r3, [r7, #28]
						- fabs(
								(launcher_ctrl_data.projectile_speed
 800826c:	4b49      	ldr	r3, [pc, #292]	; (8008394 <launcher_control+0x5f4>)
 800826e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008272:	461a      	mov	r2, r3
										* PROJECTILE_SPEED_RATIO
										* referee_limiters.projectile_speed))
 8008274:	4b45      	ldr	r3, [pc, #276]	; (800838c <launcher_control+0x5ec>)
 8008276:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008282:	fb02 f303 	mul.w	r3, r2, r3
						- fabs(
 8008286:	4618      	mov	r0, r3
 8008288:	f7f8 f94c 	bl	8000524 <__aeabi_i2d>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	613a      	str	r2, [r7, #16]
 8008292:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800829c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80082a0:	f7f7 fff2 	bl	8000288 <__aeabi_dsub>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4610      	mov	r0, r2
 80082aa:	4619      	mov	r1, r3
				&& ((fabs(right_friction_motor->raw_data.rpm)
 80082ac:	f04f 0200 	mov.w	r2, #0
 80082b0:	4b39      	ldr	r3, [pc, #228]	; (8008398 <launcher_control+0x5f8>)
 80082b2:	f7f8 fc13 	bl	8000adc <__aeabi_dcmplt>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d079      	beq.n	80083b0 <launcher_control+0x610>
						< LAUNCHER_MARGIN)))
				&& ((fabs(right_friction_motor->raw_data.rpm)
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f8 f92e 	bl	8000524 <__aeabi_i2d>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	60ba      	str	r2, [r7, #8]
 80082ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082d2:	60fb      	str	r3, [r7, #12]
						- fabs(left_friction_motor->raw_data.rpm))
 80082d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80082da:	4618      	mov	r0, r3
 80082dc:	f7f8 f922 	bl	8000524 <__aeabi_i2d>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	603a      	str	r2, [r7, #0]
 80082e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082ea:	607b      	str	r3, [r7, #4]
 80082ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082f4:	f7f7 ffc8 	bl	8000288 <__aeabi_dsub>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4610      	mov	r0, r2
 80082fe:	4619      	mov	r1, r3
				&& ((fabs(right_friction_motor->raw_data.rpm)
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	4b24      	ldr	r3, [pc, #144]	; (8008398 <launcher_control+0x5f8>)
 8008306:	f7f8 fbe9 	bl	8000adc <__aeabi_dcmplt>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d04f      	beq.n	80083b0 <launcher_control+0x610>
						< LAUNCHER_DIFF_MARGIN)) {

			if ((feeder->raw_data.torque > FEEDER_JAM_TORQUE)) {
 8008310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008312:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008316:	f242 6248 	movw	r2, #9800	; 0x2648
 800831a:	4293      	cmp	r3, r2
 800831c:	dd07      	ble.n	800832e <launcher_control+0x58e>
				unjamming = 1;
 800831e:	4b1f      	ldr	r3, [pc, #124]	; (800839c <launcher_control+0x5fc>)
 8008320:	2201      	movs	r2, #1
 8008322:	701a      	strb	r2, [r3, #0]
				start_time = HAL_GetTick();
 8008324:	f002 feea 	bl	800b0fc <HAL_GetTick>
 8008328:	4603      	mov	r3, r0
 800832a:	4a1d      	ldr	r2, [pc, #116]	; (80083a0 <launcher_control+0x600>)
 800832c:	6013      	str	r3, [r2, #0]
			}

			if (unjamming == 1) { // if unjam time reached, or jam on reverse torque
 800832e:	4b1b      	ldr	r3, [pc, #108]	; (800839c <launcher_control+0x5fc>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d138      	bne.n	80083a8 <launcher_control+0x608>
				if ((start_time + FEEDER_UNJAM_TIME < HAL_GetTick())
 8008336:	4b1a      	ldr	r3, [pc, #104]	; (80083a0 <launcher_control+0x600>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800833e:	f002 fedd 	bl	800b0fc <HAL_GetTick>
 8008342:	4603      	mov	r3, r0
 8008344:	429c      	cmp	r4, r3
 8008346:	d305      	bcc.n	8008354 <launcher_control+0x5b4>
						|| (feeder->raw_data.torque < -FEEDER_JAM_TORQUE)) {
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800834e:	4a15      	ldr	r2, [pc, #84]	; (80083a4 <launcher_control+0x604>)
 8008350:	4293      	cmp	r3, r2
 8008352:	da07      	bge.n	8008364 <launcher_control+0x5c4>
					unjamming = 0;
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <launcher_control+0x5fc>)
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
#ifndef ANGLE_FEEDER
					feeder_output = firing_speed;
 800835a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800835e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008362:	e025      	b.n	80083b0 <launcher_control+0x610>
#endif
				} else {
					feeder_output = FEEDER_UNJAM_SPD;
 8008364:	f64f 73c4 	movw	r3, #65476	; 0xffc4
 8008368:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800836c:	e020      	b.n	80083b0 <launcher_control+0x610>
 800836e:	bf00      	nop
 8008370:	20002b30 	.word	0x20002b30
 8008374:	20002b50 	.word	0x20002b50
 8008378:	66666667 	.word	0x66666667
 800837c:	20002a75 	.word	0x20002a75
 8008380:	20002a80 	.word	0x20002a80
 8008384:	20002a7c 	.word	0x20002a7c
 8008388:	20002a70 	.word	0x20002a70
 800838c:	20002aac 	.word	0x20002aac
 8008390:	fffffe98 	.word	0xfffffe98
 8008394:	200027c4 	.word	0x200027c4
 8008398:	40590000 	.word	0x40590000
 800839c:	20002a74 	.word	0x20002a74
 80083a0:	20002a6c 	.word	0x20002a6c
 80083a4:	ffffd9b8 	.word	0xffffd9b8
				}
			} else {
#ifndef ANGLE_FEEDER
				feeder_output = firing_speed;
 80083a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80083ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			}

		}
	}

	if ((overheat == 1) && launcher_ctrl_data.override == 0) {
 80083b0:	4b35      	ldr	r3, [pc, #212]	; (8008488 <launcher_control+0x6e8>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d106      	bne.n	80083c6 <launcher_control+0x626>
 80083b8:	4b34      	ldr	r3, [pc, #208]	; (800848c <launcher_control+0x6ec>)
 80083ba:	791b      	ldrb	r3, [r3, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <launcher_control+0x626>
		feeder_output = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	}

	if (unjamming == 1) { // if unjam time reached, or jam on reverse torque
 80083c6:	4b32      	ldr	r3, [pc, #200]	; (8008490 <launcher_control+0x6f0>)
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d111      	bne.n	80083f2 <launcher_control+0x652>
		if ((start_time + FEEDER_UNJAM_TIME < HAL_GetTick())
 80083ce:	4b31      	ldr	r3, [pc, #196]	; (8008494 <launcher_control+0x6f4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 80083d6:	f002 fe91 	bl	800b0fc <HAL_GetTick>
 80083da:	4603      	mov	r3, r0
 80083dc:	429c      	cmp	r4, r3
 80083de:	d305      	bcc.n	80083ec <launcher_control+0x64c>
				|| (feeder->raw_data.torque < -FEEDER_JAM_TORQUE)) {
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80083e6:	4a2c      	ldr	r2, [pc, #176]	; (8008498 <launcher_control+0x6f8>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	da02      	bge.n	80083f2 <launcher_control+0x652>
			unjamming = 0;
 80083ec:	4b28      	ldr	r3, [pc, #160]	; (8008490 <launcher_control+0x6f0>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	701a      	strb	r2, [r3, #0]
				(feeder_output < -FEEDER_MAX_RPM) ?
						-FEEDER_MAX_RPM : feeder_output;
	}
#endif

	if (feeder_output == 0) {
 80083f2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d111      	bne.n	800841e <launcher_control+0x67e>
//		feeder->rpm_pid.output = 0;
		speed_pid(0, feeder->raw_data.rpm, &feeder->rpm_pid);
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008400:	4618      	mov	r0, r3
 8008402:	f7f8 f88f 	bl	8000524 <__aeabi_i2d>
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	3310      	adds	r3, #16
 800840e:	4618      	mov	r0, r3
 8008410:	ec45 4b11 	vmov	d1, r4, r5
 8008414:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008480 <launcher_control+0x6e0>
 8008418:	f001 f9d0 	bl	80097bc <speed_pid>
 800841c:	e021      	b.n	8008462 <launcher_control+0x6c2>
	} else {
		speed_pid(feeder_output * feeder->angle_data.gearbox_ratio,
 800841e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8008430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008434:	ee17 0a90 	vmov	r0, s15
 8008438:	f7f8 f886 	bl	8000548 <__aeabi_f2d>
 800843c:	4604      	mov	r4, r0
 800843e:	460d      	mov	r5, r1
				feeder->raw_data.rpm, &feeder->rpm_pid);
 8008440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008442:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(feeder_output * feeder->angle_data.gearbox_ratio,
 8008446:	4618      	mov	r0, r3
 8008448:	f7f8 f86c 	bl	8000524 <__aeabi_i2d>
 800844c:	4680      	mov	r8, r0
 800844e:	4689      	mov	r9, r1
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	3310      	adds	r3, #16
 8008454:	4618      	mov	r0, r3
 8008456:	ec49 8b11 	vmov	d1, r8, r9
 800845a:	ec45 4b10 	vmov	d0, r4, r5
 800845e:	f001 f9ad 	bl	80097bc <speed_pid>
		//speed_pid(feeder_output * 36,feeder->raw_data.rpm, &feeder->rpm_pid);
	}

	motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,
 8008462:	2300      	movs	r3, #0
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	2306      	movs	r3, #6
 8008468:	2205      	movs	r2, #5
 800846a:	2107      	movs	r1, #7
 800846c:	480b      	ldr	r0, [pc, #44]	; (800849c <launcher_control+0x6fc>)
 800846e:	f001 fa67 	bl	8009940 <motor_send_can>
	RFRICTION_MOTOR_ID, 0);
}
 8008472:	bf00      	nop
 8008474:	3748      	adds	r7, #72	; 0x48
 8008476:	46bd      	mov	sp, r7
 8008478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800847c:	f3af 8000 	nop.w
	...
 8008488:	20002a75 	.word	0x20002a75
 800848c:	200027c4 	.word	0x200027c4
 8008490:	20002a74 	.word	0x20002a74
 8008494:	20002a6c 	.word	0x20002a6c
 8008498:	ffffd9b8 	.word	0xffffd9b8
 800849c:	2000184c 	.word	0x2000184c

080084a0 <set_motor_config>:
#include "motor_config.h"

extern QueueHandle_t buzzing_task_msg;
uint16_t g_motor_fault;

void set_motor_config(motor_data_t* motor){
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
	//general config:
		switch(motor->motor_type){
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	789b      	ldrb	r3, [r3, #2]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	d845      	bhi.n	800853e <set_motor_config+0x9e>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <set_motor_config+0x18>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	0800850f 	.word	0x0800850f
 80084bc:	08008527 	.word	0x08008527
 80084c0:	080084dd 	.word	0x080084dd
 80084c4:	080084f5 	.word	0x080084f5
 80084c8:	080084dd 	.word	0x080084dd
 80084cc:	08008527 	.word	0x08008527
 80084d0:	08008527 	.word	0x08008527
 80084d4:	080084dd 	.word	0x080084dd
 80084d8:	0800850f 	.word	0x0800850f
		case TYPE_M3508_ANGLE:
		case TYPE_M3508_STEPS:
		case TYPE_M3508:
			motor->angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a1b      	ldr	r2, [pc, #108]	; (800854c <set_motor_config+0xac>)
 80084e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a1a      	ldr	r2, [pc, #104]	; (8008550 <set_motor_config+0xb0>)
 80084e8:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80084f0:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80084f2:	e025      	b.n	8008540 <set_motor_config+0xa0>
		case TYPE_M3508_NGEARBOX:
			motor->angle_data.gearbox_ratio = 1;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80084fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a13      	ldr	r2, [pc, #76]	; (8008550 <set_motor_config+0xb0>)
 8008502:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800850a:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 800850c:	e018      	b.n	8008540 <set_motor_config+0xa0>
		case TYPE_GM6020:
		case TYPE_GM6020_720:
			motor->angle_data.gearbox_ratio = 0;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = GM6020_MAX_RPM;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a0e      	ldr	r2, [pc, #56]	; (8008554 <set_motor_config+0xb4>)
 800851c:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a0d      	ldr	r2, [pc, #52]	; (8008558 <set_motor_config+0xb8>)
 8008522:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8008524:	e00c      	b.n	8008540 <set_motor_config+0xa0>
		case TYPE_M2006:
		case TYPE_M2006_STEPS:
		case TYPE_M2006_ANGLE:
			motor->angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a0c      	ldr	r2, [pc, #48]	; (800855c <set_motor_config+0xbc>)
 800852a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = M2006_MAX_RPM;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a0b      	ldr	r2, [pc, #44]	; (8008560 <set_motor_config+0xc0>)
 8008532:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = M2006_MAX_OUTPUT;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800853a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800853c:	e000      	b.n	8008540 <set_motor_config+0xa0>
		default:
			break;
 800853e:	bf00      	nop
		}

}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	4199999a 	.word	0x4199999a
 8008550:	460ca000 	.word	0x460ca000
 8008554:	43c80000 	.word	0x43c80000
 8008558:	469c4000 	.word	0x469c4000
 800855c:	42100000 	.word	0x42100000
 8008560:	466a6000 	.word	0x466a6000

08008564 <config_motors>:

extern motor_data_t can_motors[24];
void config_motors() {
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= 24; i++) {
 800856a:	2300      	movs	r3, #0
 800856c:	71fb      	strb	r3, [r7, #7]
 800856e:	e03c      	b.n	80085ea <config_motors+0x86>
		//reset all the values to 0
		can_motors[i].motor_type = 0;
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	4abb      	ldr	r2, [pc, #748]	; (8008860 <config_motors+0x2fc>)
 8008574:	21a4      	movs	r1, #164	; 0xa4
 8008576:	fb01 f303 	mul.w	r3, r1, r3
 800857a:	4413      	add	r3, r2
 800857c:	3302      	adds	r3, #2
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]
		can_motors[i].rpm_pid.output = 0;
 8008582:	79fb      	ldrb	r3, [r7, #7]
 8008584:	4ab6      	ldr	r2, [pc, #728]	; (8008860 <config_motors+0x2fc>)
 8008586:	21a4      	movs	r1, #164	; 0xa4
 8008588:	fb01 f303 	mul.w	r3, r1, r3
 800858c:	4413      	add	r3, r2
 800858e:	3330      	adds	r3, #48	; 0x30
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	601a      	str	r2, [r3, #0]
		can_motors[i].rpm_pid.integral = 0;
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	4ab1      	ldr	r2, [pc, #708]	; (8008860 <config_motors+0x2fc>)
 800859a:	21a4      	movs	r1, #164	; 0xa4
 800859c:	fb01 f303 	mul.w	r3, r1, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	3324      	adds	r3, #36	; 0x24
 80085a4:	f04f 0200 	mov.w	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.output = 0;
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	4aac      	ldr	r2, [pc, #688]	; (8008860 <config_motors+0x2fc>)
 80085ae:	21a4      	movs	r1, #164	; 0xa4
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	4413      	add	r3, r2
 80085b6:	3360      	adds	r3, #96	; 0x60
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.integral = 0;
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	4aa7      	ldr	r2, [pc, #668]	; (8008860 <config_motors+0x2fc>)
 80085c2:	21a4      	movs	r1, #164	; 0xa4
 80085c4:	fb01 f303 	mul.w	r3, r1, r3
 80085c8:	4413      	add	r3, r2
 80085ca:	3354      	adds	r3, #84	; 0x54
 80085cc:	f04f 0200 	mov.w	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_data.ticks = 0;
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	4aa2      	ldr	r2, [pc, #648]	; (8008860 <config_motors+0x2fc>)
 80085d6:	21a4      	movs	r1, #164	; 0xa4
 80085d8:	fb01 f303 	mul.w	r3, r1, r3
 80085dc:	4413      	add	r3, r2
 80085de:	3370      	adds	r3, #112	; 0x70
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i <= 24; i++) {
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	3301      	adds	r3, #1
 80085e8:	71fb      	strb	r3, [r7, #7]
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	2b18      	cmp	r3, #24
 80085ee:	d9bf      	bls.n	8008570 <config_motors+0xc>
	}

	//initialise motor data
#ifdef FR_MOTOR_ID
	uint8_t motor_id = FR_MOTOR_ID - 1;
 80085f0:	230d      	movs	r3, #13
 80085f2:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_STEPS;
 80085f4:	79bb      	ldrb	r3, [r7, #6]
 80085f6:	4a9a      	ldr	r2, [pc, #616]	; (8008860 <config_motors+0x2fc>)
 80085f8:	21a4      	movs	r1, #164	; 0xa4
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	4413      	add	r3, r2
 8008600:	3302      	adds	r3, #2
 8008602:	2205      	movs	r2, #5
 8008604:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8008606:	79bb      	ldrb	r3, [r7, #6]
 8008608:	22a4      	movs	r2, #164	; 0xa4
 800860a:	fb02 f303 	mul.w	r3, r2, r3
 800860e:	4a94      	ldr	r2, [pc, #592]	; (8008860 <config_motors+0x2fc>)
 8008610:	4413      	add	r3, r2
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff ff44 	bl	80084a0 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 8008618:	79bb      	ldrb	r3, [r7, #6]
 800861a:	4a91      	ldr	r2, [pc, #580]	; (8008860 <config_motors+0x2fc>)
 800861c:	21a4      	movs	r1, #164	; 0xa4
 800861e:	fb01 f303 	mul.w	r3, r1, r3
 8008622:	4413      	add	r3, r2
 8008624:	3374      	adds	r3, #116	; 0x74
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 800862a:	79bb      	ldrb	r3, [r7, #6]
 800862c:	4a8c      	ldr	r2, [pc, #560]	; (8008860 <config_motors+0x2fc>)
 800862e:	21a4      	movs	r1, #164	; 0xa4
 8008630:	fb01 f303 	mul.w	r3, r1, r3
 8008634:	4413      	add	r3, r2
 8008636:	337c      	adds	r3, #124	; 0x7c
 8008638:	f04f 0200 	mov.w	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 800863e:	79bb      	ldrb	r3, [r7, #6]
 8008640:	4a87      	ldr	r2, [pc, #540]	; (8008860 <config_motors+0x2fc>)
 8008642:	21a4      	movs	r1, #164	; 0xa4
 8008644:	fb01 f303 	mul.w	r3, r1, r3
 8008648:	4413      	add	r3, r2
 800864a:	3378      	adds	r3, #120	; 0x78
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 8008652:	79bb      	ldrb	r3, [r7, #6]
 8008654:	4a82      	ldr	r2, [pc, #520]	; (8008860 <config_motors+0x2fc>)
 8008656:	21a4      	movs	r1, #164	; 0xa4
 8008658:	fb01 f303 	mul.w	r3, r1, r3
 800865c:	4413      	add	r3, r2
 800865e:	3310      	adds	r3, #16
 8008660:	4a80      	ldr	r2, [pc, #512]	; (8008864 <config_motors+0x300>)
 8008662:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8008664:	79bb      	ldrb	r3, [r7, #6]
 8008666:	4a7e      	ldr	r2, [pc, #504]	; (8008860 <config_motors+0x2fc>)
 8008668:	21a4      	movs	r1, #164	; 0xa4
 800866a:	fb01 f303 	mul.w	r3, r1, r3
 800866e:	4413      	add	r3, r2
 8008670:	3314      	adds	r3, #20
 8008672:	4a7d      	ldr	r2, [pc, #500]	; (8008868 <config_motors+0x304>)
 8008674:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8008676:	79bb      	ldrb	r3, [r7, #6]
 8008678:	4a79      	ldr	r2, [pc, #484]	; (8008860 <config_motors+0x2fc>)
 800867a:	21a4      	movs	r1, #164	; 0xa4
 800867c:	fb01 f303 	mul.w	r3, r1, r3
 8008680:	4413      	add	r3, r2
 8008682:	3318      	adds	r3, #24
 8008684:	4a79      	ldr	r2, [pc, #484]	; (800886c <config_motors+0x308>)
 8008686:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 8008688:	79bb      	ldrb	r3, [r7, #6]
 800868a:	4a75      	ldr	r2, [pc, #468]	; (8008860 <config_motors+0x2fc>)
 800868c:	21a4      	movs	r1, #164	; 0xa4
 800868e:	fb01 f303 	mul.w	r3, r1, r3
 8008692:	4413      	add	r3, r2
 8008694:	3394      	adds	r3, #148	; 0x94
 8008696:	4a76      	ldr	r2, [pc, #472]	; (8008870 <config_motors+0x30c>)
 8008698:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800869a:	79bb      	ldrb	r3, [r7, #6]
 800869c:	4a70      	ldr	r2, [pc, #448]	; (8008860 <config_motors+0x2fc>)
 800869e:	21a4      	movs	r1, #164	; 0xa4
 80086a0:	fb01 f303 	mul.w	r3, r1, r3
 80086a4:	4413      	add	r3, r2
 80086a6:	3328      	adds	r3, #40	; 0x28
 80086a8:	4a72      	ldr	r2, [pc, #456]	; (8008874 <config_motors+0x310>)
 80086aa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 80086ac:	79bb      	ldrb	r3, [r7, #6]
 80086ae:	4a6c      	ldr	r2, [pc, #432]	; (8008860 <config_motors+0x2fc>)
 80086b0:	21a4      	movs	r1, #164	; 0xa4
 80086b2:	fb01 f303 	mul.w	r3, r1, r3
 80086b6:	4413      	add	r3, r2
 80086b8:	332c      	adds	r3, #44	; 0x2c
 80086ba:	4a6f      	ldr	r2, [pc, #444]	; (8008878 <config_motors+0x314>)
 80086bc:	601a      	str	r2, [r3, #0]
#endif

#ifdef FL_MOTOR_ID
	motor_id = FL_MOTOR_ID - 1;
 80086be:	230c      	movs	r3, #12
 80086c0:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 80086c2:	79bb      	ldrb	r3, [r7, #6]
 80086c4:	4a66      	ldr	r2, [pc, #408]	; (8008860 <config_motors+0x2fc>)
 80086c6:	21a4      	movs	r1, #164	; 0xa4
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	4413      	add	r3, r2
 80086ce:	3302      	adds	r3, #2
 80086d0:	2203      	movs	r2, #3
 80086d2:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80086d4:	79bb      	ldrb	r3, [r7, #6]
 80086d6:	22a4      	movs	r2, #164	; 0xa4
 80086d8:	fb02 f303 	mul.w	r3, r2, r3
 80086dc:	4a60      	ldr	r2, [pc, #384]	; (8008860 <config_motors+0x2fc>)
 80086de:	4413      	add	r3, r2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fedd 	bl	80084a0 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 80086e6:	79bb      	ldrb	r3, [r7, #6]
 80086e8:	4a5d      	ldr	r2, [pc, #372]	; (8008860 <config_motors+0x2fc>)
 80086ea:	21a4      	movs	r1, #164	; 0xa4
 80086ec:	fb01 f303 	mul.w	r3, r1, r3
 80086f0:	4413      	add	r3, r2
 80086f2:	3374      	adds	r3, #116	; 0x74
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 80086f8:	79bb      	ldrb	r3, [r7, #6]
 80086fa:	4a59      	ldr	r2, [pc, #356]	; (8008860 <config_motors+0x2fc>)
 80086fc:	21a4      	movs	r1, #164	; 0xa4
 80086fe:	fb01 f303 	mul.w	r3, r1, r3
 8008702:	4413      	add	r3, r2
 8008704:	337c      	adds	r3, #124	; 0x7c
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 800870c:	79bb      	ldrb	r3, [r7, #6]
 800870e:	4a54      	ldr	r2, [pc, #336]	; (8008860 <config_motors+0x2fc>)
 8008710:	21a4      	movs	r1, #164	; 0xa4
 8008712:	fb01 f303 	mul.w	r3, r1, r3
 8008716:	4413      	add	r3, r2
 8008718:	3378      	adds	r3, #120	; 0x78
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8008720:	79bb      	ldrb	r3, [r7, #6]
 8008722:	4a4f      	ldr	r2, [pc, #316]	; (8008860 <config_motors+0x2fc>)
 8008724:	21a4      	movs	r1, #164	; 0xa4
 8008726:	fb01 f303 	mul.w	r3, r1, r3
 800872a:	4413      	add	r3, r2
 800872c:	3384      	adds	r3, #132	; 0x84
 800872e:	4a53      	ldr	r2, [pc, #332]	; (800887c <config_motors+0x318>)
 8008730:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8008732:	79bb      	ldrb	r3, [r7, #6]
 8008734:	4a4a      	ldr	r2, [pc, #296]	; (8008860 <config_motors+0x2fc>)
 8008736:	21a4      	movs	r1, #164	; 0xa4
 8008738:	fb01 f303 	mul.w	r3, r1, r3
 800873c:	4413      	add	r3, r2
 800873e:	3380      	adds	r3, #128	; 0x80
 8008740:	4a4f      	ldr	r2, [pc, #316]	; (8008880 <config_motors+0x31c>)
 8008742:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 8008744:	79bb      	ldrb	r3, [r7, #6]
 8008746:	4a46      	ldr	r2, [pc, #280]	; (8008860 <config_motors+0x2fc>)
 8008748:	21a4      	movs	r1, #164	; 0xa4
 800874a:	fb01 f303 	mul.w	r3, r1, r3
 800874e:	4413      	add	r3, r2
 8008750:	3394      	adds	r3, #148	; 0x94
 8008752:	4a47      	ldr	r2, [pc, #284]	; (8008870 <config_motors+0x30c>)
 8008754:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 8008756:	79bb      	ldrb	r3, [r7, #6]
 8008758:	4a41      	ldr	r2, [pc, #260]	; (8008860 <config_motors+0x2fc>)
 800875a:	21a4      	movs	r1, #164	; 0xa4
 800875c:	fb01 f303 	mul.w	r3, r1, r3
 8008760:	4413      	add	r3, r2
 8008762:	3310      	adds	r3, #16
 8008764:	4a3f      	ldr	r2, [pc, #252]	; (8008864 <config_motors+0x300>)
 8008766:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8008768:	79bb      	ldrb	r3, [r7, #6]
 800876a:	4a3d      	ldr	r2, [pc, #244]	; (8008860 <config_motors+0x2fc>)
 800876c:	21a4      	movs	r1, #164	; 0xa4
 800876e:	fb01 f303 	mul.w	r3, r1, r3
 8008772:	4413      	add	r3, r2
 8008774:	3314      	adds	r3, #20
 8008776:	4a3c      	ldr	r2, [pc, #240]	; (8008868 <config_motors+0x304>)
 8008778:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800877a:	79bb      	ldrb	r3, [r7, #6]
 800877c:	4a38      	ldr	r2, [pc, #224]	; (8008860 <config_motors+0x2fc>)
 800877e:	21a4      	movs	r1, #164	; 0xa4
 8008780:	fb01 f303 	mul.w	r3, r1, r3
 8008784:	4413      	add	r3, r2
 8008786:	3318      	adds	r3, #24
 8008788:	4a38      	ldr	r2, [pc, #224]	; (800886c <config_motors+0x308>)
 800878a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800878c:	79bb      	ldrb	r3, [r7, #6]
 800878e:	4a34      	ldr	r2, [pc, #208]	; (8008860 <config_motors+0x2fc>)
 8008790:	21a4      	movs	r1, #164	; 0xa4
 8008792:	fb01 f303 	mul.w	r3, r1, r3
 8008796:	4413      	add	r3, r2
 8008798:	3328      	adds	r3, #40	; 0x28
 800879a:	4a36      	ldr	r2, [pc, #216]	; (8008874 <config_motors+0x310>)
 800879c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800879e:	79bb      	ldrb	r3, [r7, #6]
 80087a0:	4a2f      	ldr	r2, [pc, #188]	; (8008860 <config_motors+0x2fc>)
 80087a2:	21a4      	movs	r1, #164	; 0xa4
 80087a4:	fb01 f303 	mul.w	r3, r1, r3
 80087a8:	4413      	add	r3, r2
 80087aa:	332c      	adds	r3, #44	; 0x2c
 80087ac:	4a32      	ldr	r2, [pc, #200]	; (8008878 <config_motors+0x314>)
 80087ae:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID - 1;
 80087b0:	230f      	movs	r3, #15
 80087b2:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 80087b4:	79bb      	ldrb	r3, [r7, #6]
 80087b6:	4a2a      	ldr	r2, [pc, #168]	; (8008860 <config_motors+0x2fc>)
 80087b8:	21a4      	movs	r1, #164	; 0xa4
 80087ba:	fb01 f303 	mul.w	r3, r1, r3
 80087be:	4413      	add	r3, r2
 80087c0:	3302      	adds	r3, #2
 80087c2:	2203      	movs	r2, #3
 80087c4:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80087c6:	79bb      	ldrb	r3, [r7, #6]
 80087c8:	22a4      	movs	r2, #164	; 0xa4
 80087ca:	fb02 f303 	mul.w	r3, r2, r3
 80087ce:	4a24      	ldr	r2, [pc, #144]	; (8008860 <config_motors+0x2fc>)
 80087d0:	4413      	add	r3, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff fe64 	bl	80084a0 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 80087d8:	79bb      	ldrb	r3, [r7, #6]
 80087da:	4a21      	ldr	r2, [pc, #132]	; (8008860 <config_motors+0x2fc>)
 80087dc:	21a4      	movs	r1, #164	; 0xa4
 80087de:	fb01 f303 	mul.w	r3, r1, r3
 80087e2:	4413      	add	r3, r2
 80087e4:	3374      	adds	r3, #116	; 0x74
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 80087ea:	79bb      	ldrb	r3, [r7, #6]
 80087ec:	4a1c      	ldr	r2, [pc, #112]	; (8008860 <config_motors+0x2fc>)
 80087ee:	21a4      	movs	r1, #164	; 0xa4
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	4413      	add	r3, r2
 80087f6:	337c      	adds	r3, #124	; 0x7c
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 80087fe:	79bb      	ldrb	r3, [r7, #6]
 8008800:	4a17      	ldr	r2, [pc, #92]	; (8008860 <config_motors+0x2fc>)
 8008802:	21a4      	movs	r1, #164	; 0xa4
 8008804:	fb01 f303 	mul.w	r3, r1, r3
 8008808:	4413      	add	r3, r2
 800880a:	3378      	adds	r3, #120	; 0x78
 800880c:	f04f 0200 	mov.w	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8008812:	79bb      	ldrb	r3, [r7, #6]
 8008814:	4a12      	ldr	r2, [pc, #72]	; (8008860 <config_motors+0x2fc>)
 8008816:	21a4      	movs	r1, #164	; 0xa4
 8008818:	fb01 f303 	mul.w	r3, r1, r3
 800881c:	4413      	add	r3, r2
 800881e:	3384      	adds	r3, #132	; 0x84
 8008820:	4a16      	ldr	r2, [pc, #88]	; (800887c <config_motors+0x318>)
 8008822:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8008824:	79bb      	ldrb	r3, [r7, #6]
 8008826:	4a0e      	ldr	r2, [pc, #56]	; (8008860 <config_motors+0x2fc>)
 8008828:	21a4      	movs	r1, #164	; 0xa4
 800882a:	fb01 f303 	mul.w	r3, r1, r3
 800882e:	4413      	add	r3, r2
 8008830:	3380      	adds	r3, #128	; 0x80
 8008832:	4a13      	ldr	r2, [pc, #76]	; (8008880 <config_motors+0x31c>)
 8008834:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 8008836:	79bb      	ldrb	r3, [r7, #6]
 8008838:	4a09      	ldr	r2, [pc, #36]	; (8008860 <config_motors+0x2fc>)
 800883a:	21a4      	movs	r1, #164	; 0xa4
 800883c:	fb01 f303 	mul.w	r3, r1, r3
 8008840:	4413      	add	r3, r2
 8008842:	3394      	adds	r3, #148	; 0x94
 8008844:	4a0a      	ldr	r2, [pc, #40]	; (8008870 <config_motors+0x30c>)
 8008846:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 8008848:	79bb      	ldrb	r3, [r7, #6]
 800884a:	4a05      	ldr	r2, [pc, #20]	; (8008860 <config_motors+0x2fc>)
 800884c:	21a4      	movs	r1, #164	; 0xa4
 800884e:	fb01 f303 	mul.w	r3, r1, r3
 8008852:	4413      	add	r3, r2
 8008854:	3340      	adds	r3, #64	; 0x40
 8008856:	f04f 0200 	mov.w	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 800885c:	79bb      	ldrb	r3, [r7, #6]
 800885e:	e011      	b.n	8008884 <config_motors+0x320>
 8008860:	2000184c 	.word	0x2000184c
 8008864:	41200000 	.word	0x41200000
 8008868:	3dcccccd 	.word	0x3dcccccd
 800886c:	40a00000 	.word	0x40a00000
 8008870:	40f40000 	.word	0x40f40000
 8008874:	461c4000 	.word	0x461c4000
 8008878:	457a0000 	.word	0x457a0000
 800887c:	40c90fdb 	.word	0x40c90fdb
 8008880:	c0c90fdb 	.word	0xc0c90fdb
 8008884:	4abc      	ldr	r2, [pc, #752]	; (8008b78 <config_motors+0x614>)
 8008886:	21a4      	movs	r1, #164	; 0xa4
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	4413      	add	r3, r2
 800888e:	3344      	adds	r3, #68	; 0x44
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 8008896:	79bb      	ldrb	r3, [r7, #6]
 8008898:	4ab7      	ldr	r2, [pc, #732]	; (8008b78 <config_motors+0x614>)
 800889a:	21a4      	movs	r1, #164	; 0xa4
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	4413      	add	r3, r2
 80088a2:	3348      	adds	r3, #72	; 0x48
 80088a4:	f04f 0200 	mov.w	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 80088aa:	79bb      	ldrb	r3, [r7, #6]
 80088ac:	4ab2      	ldr	r2, [pc, #712]	; (8008b78 <config_motors+0x614>)
 80088ae:	21a4      	movs	r1, #164	; 0xa4
 80088b0:	fb01 f303 	mul.w	r3, r1, r3
 80088b4:	4413      	add	r3, r2
 80088b6:	3358      	adds	r3, #88	; 0x58
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 80088be:	79bb      	ldrb	r3, [r7, #6]
 80088c0:	4aad      	ldr	r2, [pc, #692]	; (8008b78 <config_motors+0x614>)
 80088c2:	21a4      	movs	r1, #164	; 0xa4
 80088c4:	fb01 f303 	mul.w	r3, r1, r3
 80088c8:	4413      	add	r3, r2
 80088ca:	335c      	adds	r3, #92	; 0x5c
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 80088d2:	79bb      	ldrb	r3, [r7, #6]
 80088d4:	4aa8      	ldr	r2, [pc, #672]	; (8008b78 <config_motors+0x614>)
 80088d6:	21a4      	movs	r1, #164	; 0xa4
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	4413      	add	r3, r2
 80088de:	3310      	adds	r3, #16
 80088e0:	4aa6      	ldr	r2, [pc, #664]	; (8008b7c <config_motors+0x618>)
 80088e2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 80088e4:	79bb      	ldrb	r3, [r7, #6]
 80088e6:	4aa4      	ldr	r2, [pc, #656]	; (8008b78 <config_motors+0x614>)
 80088e8:	21a4      	movs	r1, #164	; 0xa4
 80088ea:	fb01 f303 	mul.w	r3, r1, r3
 80088ee:	4413      	add	r3, r2
 80088f0:	3314      	adds	r3, #20
 80088f2:	4aa3      	ldr	r2, [pc, #652]	; (8008b80 <config_motors+0x61c>)
 80088f4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 80088f6:	79bb      	ldrb	r3, [r7, #6]
 80088f8:	4a9f      	ldr	r2, [pc, #636]	; (8008b78 <config_motors+0x614>)
 80088fa:	21a4      	movs	r1, #164	; 0xa4
 80088fc:	fb01 f303 	mul.w	r3, r1, r3
 8008900:	4413      	add	r3, r2
 8008902:	3318      	adds	r3, #24
 8008904:	4a9f      	ldr	r2, [pc, #636]	; (8008b84 <config_motors+0x620>)
 8008906:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 8008908:	79bb      	ldrb	r3, [r7, #6]
 800890a:	4a9b      	ldr	r2, [pc, #620]	; (8008b78 <config_motors+0x614>)
 800890c:	21a4      	movs	r1, #164	; 0xa4
 800890e:	fb01 f303 	mul.w	r3, r1, r3
 8008912:	4413      	add	r3, r2
 8008914:	3328      	adds	r3, #40	; 0x28
 8008916:	4a9c      	ldr	r2, [pc, #624]	; (8008b88 <config_motors+0x624>)
 8008918:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800891a:	79bb      	ldrb	r3, [r7, #6]
 800891c:	4a96      	ldr	r2, [pc, #600]	; (8008b78 <config_motors+0x614>)
 800891e:	21a4      	movs	r1, #164	; 0xa4
 8008920:	fb01 f303 	mul.w	r3, r1, r3
 8008924:	4413      	add	r3, r2
 8008926:	332c      	adds	r3, #44	; 0x2c
 8008928:	4a98      	ldr	r2, [pc, #608]	; (8008b8c <config_motors+0x628>)
 800892a:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID - 1;
 800892c:	230e      	movs	r3, #14
 800892e:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8008930:	79bb      	ldrb	r3, [r7, #6]
 8008932:	4a91      	ldr	r2, [pc, #580]	; (8008b78 <config_motors+0x614>)
 8008934:	21a4      	movs	r1, #164	; 0xa4
 8008936:	fb01 f303 	mul.w	r3, r1, r3
 800893a:	4413      	add	r3, r2
 800893c:	3302      	adds	r3, #2
 800893e:	2203      	movs	r2, #3
 8008940:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8008942:	79bb      	ldrb	r3, [r7, #6]
 8008944:	22a4      	movs	r2, #164	; 0xa4
 8008946:	fb02 f303 	mul.w	r3, r2, r3
 800894a:	4a8b      	ldr	r2, [pc, #556]	; (8008b78 <config_motors+0x614>)
 800894c:	4413      	add	r3, r2
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff fda6 	bl	80084a0 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 8008954:	79bb      	ldrb	r3, [r7, #6]
 8008956:	4a88      	ldr	r2, [pc, #544]	; (8008b78 <config_motors+0x614>)
 8008958:	21a4      	movs	r1, #164	; 0xa4
 800895a:	fb01 f303 	mul.w	r3, r1, r3
 800895e:	4413      	add	r3, r2
 8008960:	3374      	adds	r3, #116	; 0x74
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 8008966:	79bb      	ldrb	r3, [r7, #6]
 8008968:	4a83      	ldr	r2, [pc, #524]	; (8008b78 <config_motors+0x614>)
 800896a:	21a4      	movs	r1, #164	; 0xa4
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	4413      	add	r3, r2
 8008972:	337c      	adds	r3, #124	; 0x7c
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 800897a:	79bb      	ldrb	r3, [r7, #6]
 800897c:	4a7e      	ldr	r2, [pc, #504]	; (8008b78 <config_motors+0x614>)
 800897e:	21a4      	movs	r1, #164	; 0xa4
 8008980:	fb01 f303 	mul.w	r3, r1, r3
 8008984:	4413      	add	r3, r2
 8008986:	3378      	adds	r3, #120	; 0x78
 8008988:	f04f 0200 	mov.w	r2, #0
 800898c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800898e:	79bb      	ldrb	r3, [r7, #6]
 8008990:	4a79      	ldr	r2, [pc, #484]	; (8008b78 <config_motors+0x614>)
 8008992:	21a4      	movs	r1, #164	; 0xa4
 8008994:	fb01 f303 	mul.w	r3, r1, r3
 8008998:	4413      	add	r3, r2
 800899a:	3384      	adds	r3, #132	; 0x84
 800899c:	4a7c      	ldr	r2, [pc, #496]	; (8008b90 <config_motors+0x62c>)
 800899e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 80089a0:	79bb      	ldrb	r3, [r7, #6]
 80089a2:	4a75      	ldr	r2, [pc, #468]	; (8008b78 <config_motors+0x614>)
 80089a4:	21a4      	movs	r1, #164	; 0xa4
 80089a6:	fb01 f303 	mul.w	r3, r1, r3
 80089aa:	4413      	add	r3, r2
 80089ac:	3380      	adds	r3, #128	; 0x80
 80089ae:	4a79      	ldr	r2, [pc, #484]	; (8008b94 <config_motors+0x630>)
 80089b0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 80089b2:	79bb      	ldrb	r3, [r7, #6]
 80089b4:	4a70      	ldr	r2, [pc, #448]	; (8008b78 <config_motors+0x614>)
 80089b6:	21a4      	movs	r1, #164	; 0xa4
 80089b8:	fb01 f303 	mul.w	r3, r1, r3
 80089bc:	4413      	add	r3, r2
 80089be:	3394      	adds	r3, #148	; 0x94
 80089c0:	4a75      	ldr	r2, [pc, #468]	; (8008b98 <config_motors+0x634>)
 80089c2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 80089c4:	79bb      	ldrb	r3, [r7, #6]
 80089c6:	4a6c      	ldr	r2, [pc, #432]	; (8008b78 <config_motors+0x614>)
 80089c8:	21a4      	movs	r1, #164	; 0xa4
 80089ca:	fb01 f303 	mul.w	r3, r1, r3
 80089ce:	4413      	add	r3, r2
 80089d0:	3340      	adds	r3, #64	; 0x40
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 80089d8:	79bb      	ldrb	r3, [r7, #6]
 80089da:	4a67      	ldr	r2, [pc, #412]	; (8008b78 <config_motors+0x614>)
 80089dc:	21a4      	movs	r1, #164	; 0xa4
 80089de:	fb01 f303 	mul.w	r3, r1, r3
 80089e2:	4413      	add	r3, r2
 80089e4:	3344      	adds	r3, #68	; 0x44
 80089e6:	f04f 0200 	mov.w	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 80089ec:	79bb      	ldrb	r3, [r7, #6]
 80089ee:	4a62      	ldr	r2, [pc, #392]	; (8008b78 <config_motors+0x614>)
 80089f0:	21a4      	movs	r1, #164	; 0xa4
 80089f2:	fb01 f303 	mul.w	r3, r1, r3
 80089f6:	4413      	add	r3, r2
 80089f8:	3348      	adds	r3, #72	; 0x48
 80089fa:	f04f 0200 	mov.w	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 8008a00:	79bb      	ldrb	r3, [r7, #6]
 8008a02:	4a5d      	ldr	r2, [pc, #372]	; (8008b78 <config_motors+0x614>)
 8008a04:	21a4      	movs	r1, #164	; 0xa4
 8008a06:	fb01 f303 	mul.w	r3, r1, r3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3358      	adds	r3, #88	; 0x58
 8008a0e:	f04f 0200 	mov.w	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 8008a14:	79bb      	ldrb	r3, [r7, #6]
 8008a16:	4a58      	ldr	r2, [pc, #352]	; (8008b78 <config_motors+0x614>)
 8008a18:	21a4      	movs	r1, #164	; 0xa4
 8008a1a:	fb01 f303 	mul.w	r3, r1, r3
 8008a1e:	4413      	add	r3, r2
 8008a20:	335c      	adds	r3, #92	; 0x5c
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 8008a28:	79bb      	ldrb	r3, [r7, #6]
 8008a2a:	4a53      	ldr	r2, [pc, #332]	; (8008b78 <config_motors+0x614>)
 8008a2c:	21a4      	movs	r1, #164	; 0xa4
 8008a2e:	fb01 f303 	mul.w	r3, r1, r3
 8008a32:	4413      	add	r3, r2
 8008a34:	3310      	adds	r3, #16
 8008a36:	4a51      	ldr	r2, [pc, #324]	; (8008b7c <config_motors+0x618>)
 8008a38:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8008a3a:	79bb      	ldrb	r3, [r7, #6]
 8008a3c:	4a4e      	ldr	r2, [pc, #312]	; (8008b78 <config_motors+0x614>)
 8008a3e:	21a4      	movs	r1, #164	; 0xa4
 8008a40:	fb01 f303 	mul.w	r3, r1, r3
 8008a44:	4413      	add	r3, r2
 8008a46:	3314      	adds	r3, #20
 8008a48:	4a4d      	ldr	r2, [pc, #308]	; (8008b80 <config_motors+0x61c>)
 8008a4a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8008a4c:	79bb      	ldrb	r3, [r7, #6]
 8008a4e:	4a4a      	ldr	r2, [pc, #296]	; (8008b78 <config_motors+0x614>)
 8008a50:	21a4      	movs	r1, #164	; 0xa4
 8008a52:	fb01 f303 	mul.w	r3, r1, r3
 8008a56:	4413      	add	r3, r2
 8008a58:	3318      	adds	r3, #24
 8008a5a:	4a4a      	ldr	r2, [pc, #296]	; (8008b84 <config_motors+0x620>)
 8008a5c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 8008a5e:	79bb      	ldrb	r3, [r7, #6]
 8008a60:	4a45      	ldr	r2, [pc, #276]	; (8008b78 <config_motors+0x614>)
 8008a62:	21a4      	movs	r1, #164	; 0xa4
 8008a64:	fb01 f303 	mul.w	r3, r1, r3
 8008a68:	4413      	add	r3, r2
 8008a6a:	3328      	adds	r3, #40	; 0x28
 8008a6c:	4a46      	ldr	r2, [pc, #280]	; (8008b88 <config_motors+0x624>)
 8008a6e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 8008a70:	79bb      	ldrb	r3, [r7, #6]
 8008a72:	4a41      	ldr	r2, [pc, #260]	; (8008b78 <config_motors+0x614>)
 8008a74:	21a4      	movs	r1, #164	; 0xa4
 8008a76:	fb01 f303 	mul.w	r3, r1, r3
 8008a7a:	4413      	add	r3, r2
 8008a7c:	332c      	adds	r3, #44	; 0x2c
 8008a7e:	4a43      	ldr	r2, [pc, #268]	; (8008b8c <config_motors+0x628>)
 8008a80:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID - 1;
 8008a82:	2304      	movs	r3, #4
 8008a84:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 8008a86:	79bb      	ldrb	r3, [r7, #6]
 8008a88:	4a3b      	ldr	r2, [pc, #236]	; (8008b78 <config_motors+0x614>)
 8008a8a:	21a4      	movs	r1, #164	; 0xa4
 8008a8c:	fb01 f303 	mul.w	r3, r1, r3
 8008a90:	4413      	add	r3, r2
 8008a92:	3302      	adds	r3, #2
 8008a94:	2204      	movs	r2, #4
 8008a96:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8008a98:	79bb      	ldrb	r3, [r7, #6]
 8008a9a:	22a4      	movs	r2, #164	; 0xa4
 8008a9c:	fb02 f303 	mul.w	r3, r2, r3
 8008aa0:	4a35      	ldr	r2, [pc, #212]	; (8008b78 <config_motors+0x614>)
 8008aa2:	4413      	add	r3, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff fcfb 	bl	80084a0 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8008aaa:	79bb      	ldrb	r3, [r7, #6]
 8008aac:	4a32      	ldr	r2, [pc, #200]	; (8008b78 <config_motors+0x614>)
 8008aae:	21a4      	movs	r1, #164	; 0xa4
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	3388      	adds	r3, #136	; 0x88
 8008ab8:	4a38      	ldr	r2, [pc, #224]	; (8008b9c <config_motors+0x638>)
 8008aba:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 8008abc:	79bb      	ldrb	r3, [r7, #6]
 8008abe:	4a2e      	ldr	r2, [pc, #184]	; (8008b78 <config_motors+0x614>)
 8008ac0:	21a4      	movs	r1, #164	; 0xa4
 8008ac2:	fb01 f303 	mul.w	r3, r1, r3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3364      	adds	r3, #100	; 0x64
 8008aca:	4a35      	ldr	r2, [pc, #212]	; (8008ba0 <config_motors+0x63c>)
 8008acc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 8008ace:	79bb      	ldrb	r3, [r7, #6]
 8008ad0:	4a29      	ldr	r2, [pc, #164]	; (8008b78 <config_motors+0x614>)
 8008ad2:	21a4      	movs	r1, #164	; 0xa4
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	3310      	adds	r3, #16
 8008adc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8008ae0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 8008ae2:	79bb      	ldrb	r3, [r7, #6]
 8008ae4:	4a24      	ldr	r2, [pc, #144]	; (8008b78 <config_motors+0x614>)
 8008ae6:	21a4      	movs	r1, #164	; 0xa4
 8008ae8:	fb01 f303 	mul.w	r3, r1, r3
 8008aec:	4413      	add	r3, r2
 8008aee:	3314      	adds	r3, #20
 8008af0:	4a2c      	ldr	r2, [pc, #176]	; (8008ba4 <config_motors+0x640>)
 8008af2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 8008af4:	79bb      	ldrb	r3, [r7, #6]
 8008af6:	4a20      	ldr	r2, [pc, #128]	; (8008b78 <config_motors+0x614>)
 8008af8:	21a4      	movs	r1, #164	; 0xa4
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	4413      	add	r3, r2
 8008b00:	3318      	adds	r3, #24
 8008b02:	f04f 0200 	mov.w	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 8008b08:	79bb      	ldrb	r3, [r7, #6]
 8008b0a:	4a1b      	ldr	r2, [pc, #108]	; (8008b78 <config_motors+0x614>)
 8008b0c:	21a4      	movs	r1, #164	; 0xa4
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	4413      	add	r3, r2
 8008b14:	3328      	adds	r3, #40	; 0x28
 8008b16:	4a1c      	ldr	r2, [pc, #112]	; (8008b88 <config_motors+0x624>)
 8008b18:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 8008b1a:	79bb      	ldrb	r3, [r7, #6]
 8008b1c:	4a16      	ldr	r2, [pc, #88]	; (8008b78 <config_motors+0x614>)
 8008b1e:	21a4      	movs	r1, #164	; 0xa4
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	4413      	add	r3, r2
 8008b26:	332c      	adds	r3, #44	; 0x2c
 8008b28:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8008b2c:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID - 1;
 8008b2e:	2305      	movs	r3, #5
 8008b30:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 8008b32:	79bb      	ldrb	r3, [r7, #6]
 8008b34:	4a10      	ldr	r2, [pc, #64]	; (8008b78 <config_motors+0x614>)
 8008b36:	21a4      	movs	r1, #164	; 0xa4
 8008b38:	fb01 f303 	mul.w	r3, r1, r3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	3302      	adds	r3, #2
 8008b40:	2204      	movs	r2, #4
 8008b42:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 8008b44:	79bb      	ldrb	r3, [r7, #6]
 8008b46:	4a0c      	ldr	r2, [pc, #48]	; (8008b78 <config_motors+0x614>)
 8008b48:	21a4      	movs	r1, #164	; 0xa4
 8008b4a:	fb01 f303 	mul.w	r3, r1, r3
 8008b4e:	4413      	add	r3, r2
 8008b50:	3364      	adds	r3, #100	; 0x64
 8008b52:	4a13      	ldr	r2, [pc, #76]	; (8008ba0 <config_motors+0x63c>)
 8008b54:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 8008b56:	79bb      	ldrb	r3, [r7, #6]
 8008b58:	4a07      	ldr	r2, [pc, #28]	; (8008b78 <config_motors+0x614>)
 8008b5a:	21a4      	movs	r1, #164	; 0xa4
 8008b5c:	fb01 f303 	mul.w	r3, r1, r3
 8008b60:	4413      	add	r3, r2
 8008b62:	3310      	adds	r3, #16
 8008b64:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8008b68:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 8008b6a:	79bb      	ldrb	r3, [r7, #6]
 8008b6c:	4a02      	ldr	r2, [pc, #8]	; (8008b78 <config_motors+0x614>)
 8008b6e:	21a4      	movs	r1, #164	; 0xa4
 8008b70:	fb01 f303 	mul.w	r3, r1, r3
 8008b74:	4413      	add	r3, r2
 8008b76:	e017      	b.n	8008ba8 <config_motors+0x644>
 8008b78:	2000184c 	.word	0x2000184c
 8008b7c:	41200000 	.word	0x41200000
 8008b80:	3dcccccd 	.word	0x3dcccccd
 8008b84:	40a00000 	.word	0x40a00000
 8008b88:	461c4000 	.word	0x461c4000
 8008b8c:	457a0000 	.word	0x457a0000
 8008b90:	40c90fdb 	.word	0x40c90fdb
 8008b94:	c0c90fdb 	.word	0xc0c90fdb
 8008b98:	40f40000 	.word	0x40f40000
 8008b9c:	4199999a 	.word	0x4199999a
 8008ba0:	460ca000 	.word	0x460ca000
 8008ba4:	3b03126f 	.word	0x3b03126f
 8008ba8:	3314      	adds	r3, #20
 8008baa:	4aba      	ldr	r2, [pc, #744]	; (8008e94 <config_motors+0x930>)
 8008bac:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 8008bae:	79bb      	ldrb	r3, [r7, #6]
 8008bb0:	4ab9      	ldr	r2, [pc, #740]	; (8008e98 <config_motors+0x934>)
 8008bb2:	21a4      	movs	r1, #164	; 0xa4
 8008bb4:	fb01 f303 	mul.w	r3, r1, r3
 8008bb8:	4413      	add	r3, r2
 8008bba:	3318      	adds	r3, #24
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 8008bc2:	79bb      	ldrb	r3, [r7, #6]
 8008bc4:	4ab4      	ldr	r2, [pc, #720]	; (8008e98 <config_motors+0x934>)
 8008bc6:	21a4      	movs	r1, #164	; 0xa4
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	4413      	add	r3, r2
 8008bce:	3328      	adds	r3, #40	; 0x28
 8008bd0:	4ab2      	ldr	r2, [pc, #712]	; (8008e9c <config_motors+0x938>)
 8008bd2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 8008bd4:	79bb      	ldrb	r3, [r7, #6]
 8008bd6:	4ab0      	ldr	r2, [pc, #704]	; (8008e98 <config_motors+0x934>)
 8008bd8:	21a4      	movs	r1, #164	; 0xa4
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	332c      	adds	r3, #44	; 0x2c
 8008be2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8008be6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8008be8:	79bb      	ldrb	r3, [r7, #6]
 8008bea:	4aab      	ldr	r2, [pc, #684]	; (8008e98 <config_motors+0x934>)
 8008bec:	21a4      	movs	r1, #164	; 0xa4
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	3334      	adds	r3, #52	; 0x34
 8008bf6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8008bfa:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID - 1;
 8008bfc:	2306      	movs	r3, #6
 8008bfe:	71bb      	strb	r3, [r7, #6]
#ifdef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M3508_ANGLE;
#endif
#ifndef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M2006;
 8008c00:	79bb      	ldrb	r3, [r7, #6]
 8008c02:	4aa5      	ldr	r2, [pc, #660]	; (8008e98 <config_motors+0x934>)
 8008c04:	21a4      	movs	r1, #164	; 0xa4
 8008c06:	fb01 f303 	mul.w	r3, r1, r3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	2202      	movs	r2, #2
 8008c10:	701a      	strb	r2, [r3, #0]
#endif
	set_motor_config(&can_motors[motor_id]);
 8008c12:	79bb      	ldrb	r3, [r7, #6]
 8008c14:	22a4      	movs	r2, #164	; 0xa4
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	4a9f      	ldr	r2, [pc, #636]	; (8008e98 <config_motors+0x934>)
 8008c1c:	4413      	add	r3, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fc3e 	bl	80084a0 <set_motor_config>
	can_motors[motor_id].angle_data.max_ang = PI * 5000; //so it can rotate 5000 times oops
 8008c24:	79bb      	ldrb	r3, [r7, #6]
 8008c26:	4a9c      	ldr	r2, [pc, #624]	; (8008e98 <config_motors+0x934>)
 8008c28:	21a4      	movs	r1, #164	; 0xa4
 8008c2a:	fb01 f303 	mul.w	r3, r1, r3
 8008c2e:	4413      	add	r3, r2
 8008c30:	337c      	adds	r3, #124	; 0x7c
 8008c32:	4a9b      	ldr	r2, [pc, #620]	; (8008ea0 <config_motors+0x93c>)
 8008c34:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = -PI * 5000;
 8008c36:	79bb      	ldrb	r3, [r7, #6]
 8008c38:	4a97      	ldr	r2, [pc, #604]	; (8008e98 <config_motors+0x934>)
 8008c3a:	21a4      	movs	r1, #164	; 0xa4
 8008c3c:	fb01 f303 	mul.w	r3, r1, r3
 8008c40:	4413      	add	r3, r2
 8008c42:	3378      	adds	r3, #120	; 0x78
 8008c44:	4a97      	ldr	r2, [pc, #604]	; (8008ea4 <config_motors+0x940>)
 8008c46:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8008c48:	79bb      	ldrb	r3, [r7, #6]
 8008c4a:	4a93      	ldr	r2, [pc, #588]	; (8008e98 <config_motors+0x934>)
 8008c4c:	21a4      	movs	r1, #164	; 0xa4
 8008c4e:	fb01 f303 	mul.w	r3, r1, r3
 8008c52:	4413      	add	r3, r2
 8008c54:	3384      	adds	r3, #132	; 0x84
 8008c56:	4a94      	ldr	r2, [pc, #592]	; (8008ea8 <config_motors+0x944>)
 8008c58:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8008c5a:	79bb      	ldrb	r3, [r7, #6]
 8008c5c:	4a8e      	ldr	r2, [pc, #568]	; (8008e98 <config_motors+0x934>)
 8008c5e:	21a4      	movs	r1, #164	; 0xa4
 8008c60:	fb01 f303 	mul.w	r3, r1, r3
 8008c64:	4413      	add	r3, r2
 8008c66:	3380      	adds	r3, #128	; 0x80
 8008c68:	4a90      	ldr	r2, [pc, #576]	; (8008eac <config_motors+0x948>)
 8008c6a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8008c6c:	79bb      	ldrb	r3, [r7, #6]
 8008c6e:	4a8a      	ldr	r2, [pc, #552]	; (8008e98 <config_motors+0x934>)
 8008c70:	21a4      	movs	r1, #164	; 0xa4
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	3394      	adds	r3, #148	; 0x94
 8008c7a:	f04f 0200 	mov.w	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = FEEDER_ANGLE_KP;
 8008c80:	79bb      	ldrb	r3, [r7, #6]
 8008c82:	4a85      	ldr	r2, [pc, #532]	; (8008e98 <config_motors+0x934>)
 8008c84:	21a4      	movs	r1, #164	; 0xa4
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3340      	adds	r3, #64	; 0x40
 8008c8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008c92:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = FEEDER_ANGLE_KI;
 8008c94:	79bb      	ldrb	r3, [r7, #6]
 8008c96:	4a80      	ldr	r2, [pc, #512]	; (8008e98 <config_motors+0x934>)
 8008c98:	21a4      	movs	r1, #164	; 0xa4
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3344      	adds	r3, #68	; 0x44
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = FEEDER_ANGLE_KD;
 8008ca8:	79bb      	ldrb	r3, [r7, #6]
 8008caa:	4a7b      	ldr	r2, [pc, #492]	; (8008e98 <config_motors+0x934>)
 8008cac:	21a4      	movs	r1, #164	; 0xa4
 8008cae:	fb01 f303 	mul.w	r3, r1, r3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	3348      	adds	r3, #72	; 0x48
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = FEEDER_ANGLE_INT_MAX;
 8008cbc:	79bb      	ldrb	r3, [r7, #6]
 8008cbe:	4a76      	ldr	r2, [pc, #472]	; (8008e98 <config_motors+0x934>)
 8008cc0:	21a4      	movs	r1, #164	; 0xa4
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3358      	adds	r3, #88	; 0x58
 8008cca:	f04f 0200 	mov.w	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = FEEDER_MAX_RPM;
 8008cd0:	79bb      	ldrb	r3, [r7, #6]
 8008cd2:	4a71      	ldr	r2, [pc, #452]	; (8008e98 <config_motors+0x934>)
 8008cd4:	21a4      	movs	r1, #164	; 0xa4
 8008cd6:	fb01 f303 	mul.w	r3, r1, r3
 8008cda:	4413      	add	r3, r2
 8008cdc:	335c      	adds	r3, #92	; 0x5c
 8008cde:	4a74      	ldr	r2, [pc, #464]	; (8008eb0 <config_motors+0x94c>)
 8008ce0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FEEDER_KP;
 8008ce2:	79bb      	ldrb	r3, [r7, #6]
 8008ce4:	4a6c      	ldr	r2, [pc, #432]	; (8008e98 <config_motors+0x934>)
 8008ce6:	21a4      	movs	r1, #164	; 0xa4
 8008ce8:	fb01 f303 	mul.w	r3, r1, r3
 8008cec:	4413      	add	r3, r2
 8008cee:	3310      	adds	r3, #16
 8008cf0:	4a70      	ldr	r2, [pc, #448]	; (8008eb4 <config_motors+0x950>)
 8008cf2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FEEDER_KI;
 8008cf4:	79bb      	ldrb	r3, [r7, #6]
 8008cf6:	4a68      	ldr	r2, [pc, #416]	; (8008e98 <config_motors+0x934>)
 8008cf8:	21a4      	movs	r1, #164	; 0xa4
 8008cfa:	fb01 f303 	mul.w	r3, r1, r3
 8008cfe:	4413      	add	r3, r2
 8008d00:	3314      	adds	r3, #20
 8008d02:	4a6d      	ldr	r2, [pc, #436]	; (8008eb8 <config_motors+0x954>)
 8008d04:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FEEDER_KD;
 8008d06:	79bb      	ldrb	r3, [r7, #6]
 8008d08:	4a63      	ldr	r2, [pc, #396]	; (8008e98 <config_motors+0x934>)
 8008d0a:	21a4      	movs	r1, #164	; 0xa4
 8008d0c:	fb01 f303 	mul.w	r3, r1, r3
 8008d10:	4413      	add	r3, r2
 8008d12:	3318      	adds	r3, #24
 8008d14:	4a69      	ldr	r2, [pc, #420]	; (8008ebc <config_motors+0x958>)
 8008d16:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FEEDER_MAX_INT;
 8008d18:	79bb      	ldrb	r3, [r7, #6]
 8008d1a:	4a5f      	ldr	r2, [pc, #380]	; (8008e98 <config_motors+0x934>)
 8008d1c:	21a4      	movs	r1, #164	; 0xa4
 8008d1e:	fb01 f303 	mul.w	r3, r1, r3
 8008d22:	4413      	add	r3, r2
 8008d24:	3328      	adds	r3, #40	; 0x28
 8008d26:	4a5d      	ldr	r2, [pc, #372]	; (8008e9c <config_motors+0x938>)
 8008d28:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FEEDER_MAX_CURRENT;
 8008d2a:	79bb      	ldrb	r3, [r7, #6]
 8008d2c:	4a5a      	ldr	r2, [pc, #360]	; (8008e98 <config_motors+0x934>)
 8008d2e:	21a4      	movs	r1, #164	; 0xa4
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	4413      	add	r3, r2
 8008d36:	332c      	adds	r3, #44	; 0x2c
 8008d38:	4a58      	ldr	r2, [pc, #352]	; (8008e9c <config_motors+0x938>)
 8008d3a:	601a      	str	r2, [r3, #0]
#endif

#ifdef PITCH_MOTOR_ID
	motor_id = PITCH_MOTOR_ID - 1;
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8008d40:	79bb      	ldrb	r3, [r7, #6]
 8008d42:	4a55      	ldr	r2, [pc, #340]	; (8008e98 <config_motors+0x934>)
 8008d44:	21a4      	movs	r1, #164	; 0xa4
 8008d46:	fb01 f303 	mul.w	r3, r1, r3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	3302      	adds	r3, #2
 8008d4e:	2201      	movs	r2, #1
 8008d50:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8008d52:	79bb      	ldrb	r3, [r7, #6]
 8008d54:	22a4      	movs	r2, #164	; 0xa4
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	4a4f      	ldr	r2, [pc, #316]	; (8008e98 <config_motors+0x934>)
 8008d5c:	4413      	add	r3, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff fb9e 	bl	80084a0 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 8008d64:	79bb      	ldrb	r3, [r7, #6]
 8008d66:	4a4c      	ldr	r2, [pc, #304]	; (8008e98 <config_motors+0x934>)
 8008d68:	21a4      	movs	r1, #164	; 0xa4
 8008d6a:	fb01 f303 	mul.w	r3, r1, r3
 8008d6e:	4413      	add	r3, r2
 8008d70:	3388      	adds	r3, #136	; 0x88
 8008d72:	f04f 0200 	mov.w	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = PITCH_CENTER;
 8008d78:	79bb      	ldrb	r3, [r7, #6]
 8008d7a:	4a47      	ldr	r2, [pc, #284]	; (8008e98 <config_motors+0x934>)
 8008d7c:	21a4      	movs	r1, #164	; 0xa4
 8008d7e:	fb01 f303 	mul.w	r3, r1, r3
 8008d82:	4413      	add	r3, r2
 8008d84:	3374      	adds	r3, #116	; 0x74
 8008d86:	f641 62dc 	movw	r2, #7900	; 0x1edc
 8008d8a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = PITCH_MAX_ANG;
 8008d8c:	79bb      	ldrb	r3, [r7, #6]
 8008d8e:	4a42      	ldr	r2, [pc, #264]	; (8008e98 <config_motors+0x934>)
 8008d90:	21a4      	movs	r1, #164	; 0xa4
 8008d92:	fb01 f303 	mul.w	r3, r1, r3
 8008d96:	4413      	add	r3, r2
 8008d98:	337c      	adds	r3, #124	; 0x7c
 8008d9a:	4a49      	ldr	r2, [pc, #292]	; (8008ec0 <config_motors+0x95c>)
 8008d9c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = PITCH_MIN_ANG;
 8008d9e:	79bb      	ldrb	r3, [r7, #6]
 8008da0:	4a3d      	ldr	r2, [pc, #244]	; (8008e98 <config_motors+0x934>)
 8008da2:	21a4      	movs	r1, #164	; 0xa4
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	4413      	add	r3, r2
 8008daa:	3378      	adds	r3, #120	; 0x78
 8008dac:	4a45      	ldr	r2, [pc, #276]	; (8008ec4 <config_motors+0x960>)
 8008dae:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8008db0:	79bb      	ldrb	r3, [r7, #6]
 8008db2:	4a39      	ldr	r2, [pc, #228]	; (8008e98 <config_motors+0x934>)
 8008db4:	21a4      	movs	r1, #164	; 0xa4
 8008db6:	fb01 f303 	mul.w	r3, r1, r3
 8008dba:	4413      	add	r3, r2
 8008dbc:	3384      	adds	r3, #132	; 0x84
 8008dbe:	4a3a      	ldr	r2, [pc, #232]	; (8008ea8 <config_motors+0x944>)
 8008dc0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8008dc2:	79bb      	ldrb	r3, [r7, #6]
 8008dc4:	4a34      	ldr	r2, [pc, #208]	; (8008e98 <config_motors+0x934>)
 8008dc6:	21a4      	movs	r1, #164	; 0xa4
 8008dc8:	fb01 f303 	mul.w	r3, r1, r3
 8008dcc:	4413      	add	r3, r2
 8008dce:	3380      	adds	r3, #128	; 0x80
 8008dd0:	4a36      	ldr	r2, [pc, #216]	; (8008eac <config_motors+0x948>)
 8008dd2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8008dd4:	79bb      	ldrb	r3, [r7, #6]
 8008dd6:	4a30      	ldr	r2, [pc, #192]	; (8008e98 <config_motors+0x934>)
 8008dd8:	21a4      	movs	r1, #164	; 0xa4
 8008dda:	fb01 f303 	mul.w	r3, r1, r3
 8008dde:	4413      	add	r3, r2
 8008de0:	3394      	adds	r3, #148	; 0x94
 8008de2:	f04f 0200 	mov.w	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 8008de8:	79bb      	ldrb	r3, [r7, #6]
 8008dea:	4a2b      	ldr	r2, [pc, #172]	; (8008e98 <config_motors+0x934>)
 8008dec:	21a4      	movs	r1, #164	; 0xa4
 8008dee:	fb01 f303 	mul.w	r3, r1, r3
 8008df2:	4413      	add	r3, r2
 8008df4:	3340      	adds	r3, #64	; 0x40
 8008df6:	4a34      	ldr	r2, [pc, #208]	; (8008ec8 <config_motors+0x964>)
 8008df8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 8008dfa:	79bb      	ldrb	r3, [r7, #6]
 8008dfc:	4a26      	ldr	r2, [pc, #152]	; (8008e98 <config_motors+0x934>)
 8008dfe:	21a4      	movs	r1, #164	; 0xa4
 8008e00:	fb01 f303 	mul.w	r3, r1, r3
 8008e04:	4413      	add	r3, r2
 8008e06:	3344      	adds	r3, #68	; 0x44
 8008e08:	f04f 0200 	mov.w	r2, #0
 8008e0c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 8008e0e:	79bb      	ldrb	r3, [r7, #6]
 8008e10:	4a21      	ldr	r2, [pc, #132]	; (8008e98 <config_motors+0x934>)
 8008e12:	21a4      	movs	r1, #164	; 0xa4
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	4413      	add	r3, r2
 8008e1a:	3348      	adds	r3, #72	; 0x48
 8008e1c:	f04f 0200 	mov.w	r2, #0
 8008e20:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 8008e22:	79bb      	ldrb	r3, [r7, #6]
 8008e24:	4a1c      	ldr	r2, [pc, #112]	; (8008e98 <config_motors+0x934>)
 8008e26:	21a4      	movs	r1, #164	; 0xa4
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3358      	adds	r3, #88	; 0x58
 8008e30:	4a26      	ldr	r2, [pc, #152]	; (8008ecc <config_motors+0x968>)
 8008e32:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 8008e34:	79bb      	ldrb	r3, [r7, #6]
 8008e36:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <config_motors+0x934>)
 8008e38:	21a4      	movs	r1, #164	; 0xa4
 8008e3a:	fb01 f303 	mul.w	r3, r1, r3
 8008e3e:	4413      	add	r3, r2
 8008e40:	335c      	adds	r3, #92	; 0x5c
 8008e42:	4a21      	ldr	r2, [pc, #132]	; (8008ec8 <config_motors+0x964>)
 8008e44:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 8008e46:	79bb      	ldrb	r3, [r7, #6]
 8008e48:	4a13      	ldr	r2, [pc, #76]	; (8008e98 <config_motors+0x934>)
 8008e4a:	21a4      	movs	r1, #164	; 0xa4
 8008e4c:	fb01 f303 	mul.w	r3, r1, r3
 8008e50:	4413      	add	r3, r2
 8008e52:	3310      	adds	r3, #16
 8008e54:	4a1c      	ldr	r2, [pc, #112]	; (8008ec8 <config_motors+0x964>)
 8008e56:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 8008e58:	79bb      	ldrb	r3, [r7, #6]
 8008e5a:	4a0f      	ldr	r2, [pc, #60]	; (8008e98 <config_motors+0x934>)
 8008e5c:	21a4      	movs	r1, #164	; 0xa4
 8008e5e:	fb01 f303 	mul.w	r3, r1, r3
 8008e62:	4413      	add	r3, r2
 8008e64:	3314      	adds	r3, #20
 8008e66:	4a1a      	ldr	r2, [pc, #104]	; (8008ed0 <config_motors+0x96c>)
 8008e68:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 8008e6a:	79bb      	ldrb	r3, [r7, #6]
 8008e6c:	4a0a      	ldr	r2, [pc, #40]	; (8008e98 <config_motors+0x934>)
 8008e6e:	21a4      	movs	r1, #164	; 0xa4
 8008e70:	fb01 f303 	mul.w	r3, r1, r3
 8008e74:	4413      	add	r3, r2
 8008e76:	3318      	adds	r3, #24
 8008e78:	f04f 0200 	mov.w	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 8008e7e:	79bb      	ldrb	r3, [r7, #6]
 8008e80:	4a05      	ldr	r2, [pc, #20]	; (8008e98 <config_motors+0x934>)
 8008e82:	21a4      	movs	r1, #164	; 0xa4
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	3328      	adds	r3, #40	; 0x28
 8008e8c:	4a03      	ldr	r2, [pc, #12]	; (8008e9c <config_motors+0x938>)
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	e020      	b.n	8008ed4 <config_motors+0x970>
 8008e92:	bf00      	nop
 8008e94:	3b03126f 	.word	0x3b03126f
 8008e98:	2000184c 	.word	0x2000184c
 8008e9c:	461c4000 	.word	0x461c4000
 8008ea0:	46756fdb 	.word	0x46756fdb
 8008ea4:	c6756fdb 	.word	0xc6756fdb
 8008ea8:	40c90fdb 	.word	0x40c90fdb
 8008eac:	c0c90fdb 	.word	0xc0c90fdb
 8008eb0:	42c80000 	.word	0x42c80000
 8008eb4:	40e00000 	.word	0x40e00000
 8008eb8:	3ca3d70a 	.word	0x3ca3d70a
 8008ebc:	40400000 	.word	0x40400000
 8008ec0:	3f19999a 	.word	0x3f19999a
 8008ec4:	becccccd 	.word	0xbecccccd
 8008ec8:	43480000 	.word	0x43480000
 8008ecc:	447a0000 	.word	0x447a0000
 8008ed0:	3dcccccd 	.word	0x3dcccccd
	can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 8008ed4:	79bb      	ldrb	r3, [r7, #6]
 8008ed6:	4a5f      	ldr	r2, [pc, #380]	; (8009054 <config_motors+0xaf0>)
 8008ed8:	21a4      	movs	r1, #164	; 0xa4
 8008eda:	fb01 f303 	mul.w	r3, r1, r3
 8008ede:	4413      	add	r3, r2
 8008ee0:	332c      	adds	r3, #44	; 0x2c
 8008ee2:	4a5d      	ldr	r2, [pc, #372]	; (8009058 <config_motors+0xaf4>)
 8008ee4:	601a      	str	r2, [r3, #0]
#endif

#ifdef YAW_MOTOR_ID
	motor_id = YAW_MOTOR_ID - 1;
 8008ee6:	2311      	movs	r3, #17
 8008ee8:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8008eea:	79bb      	ldrb	r3, [r7, #6]
 8008eec:	4a59      	ldr	r2, [pc, #356]	; (8009054 <config_motors+0xaf0>)
 8008eee:	21a4      	movs	r1, #164	; 0xa4
 8008ef0:	fb01 f303 	mul.w	r3, r1, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	2201      	movs	r2, #1
 8008efa:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8008efc:	79bb      	ldrb	r3, [r7, #6]
 8008efe:	22a4      	movs	r2, #164	; 0xa4
 8008f00:	fb02 f303 	mul.w	r3, r2, r3
 8008f04:	4a53      	ldr	r2, [pc, #332]	; (8009054 <config_motors+0xaf0>)
 8008f06:	4413      	add	r3, r2
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff fac9 	bl	80084a0 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;	//1;
 8008f0e:	79bb      	ldrb	r3, [r7, #6]
 8008f10:	4a50      	ldr	r2, [pc, #320]	; (8009054 <config_motors+0xaf0>)
 8008f12:	21a4      	movs	r1, #164	; 0xa4
 8008f14:	fb01 f303 	mul.w	r3, r1, r3
 8008f18:	4413      	add	r3, r2
 8008f1a:	3388      	adds	r3, #136	; 0x88
 8008f1c:	f04f 0200 	mov.w	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = YAW_CENTER;
 8008f22:	79bb      	ldrb	r3, [r7, #6]
 8008f24:	4a4b      	ldr	r2, [pc, #300]	; (8009054 <config_motors+0xaf0>)
 8008f26:	21a4      	movs	r1, #164	; 0xa4
 8008f28:	fb01 f303 	mul.w	r3, r1, r3
 8008f2c:	4413      	add	r3, r2
 8008f2e:	3374      	adds	r3, #116	; 0x74
 8008f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f34:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = YAW_MAX_ANG;
 8008f36:	79bb      	ldrb	r3, [r7, #6]
 8008f38:	4a46      	ldr	r2, [pc, #280]	; (8009054 <config_motors+0xaf0>)
 8008f3a:	21a4      	movs	r1, #164	; 0xa4
 8008f3c:	fb01 f303 	mul.w	r3, r1, r3
 8008f40:	4413      	add	r3, r2
 8008f42:	337c      	adds	r3, #124	; 0x7c
 8008f44:	4a45      	ldr	r2, [pc, #276]	; (800905c <config_motors+0xaf8>)
 8008f46:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = YAW_MIN_ANG;
 8008f48:	79bb      	ldrb	r3, [r7, #6]
 8008f4a:	4a42      	ldr	r2, [pc, #264]	; (8009054 <config_motors+0xaf0>)
 8008f4c:	21a4      	movs	r1, #164	; 0xa4
 8008f4e:	fb01 f303 	mul.w	r3, r1, r3
 8008f52:	4413      	add	r3, r2
 8008f54:	3378      	adds	r3, #120	; 0x78
 8008f56:	4a42      	ldr	r2, [pc, #264]	; (8009060 <config_motors+0xafc>)
 8008f58:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8008f5a:	79bb      	ldrb	r3, [r7, #6]
 8008f5c:	4a3d      	ldr	r2, [pc, #244]	; (8009054 <config_motors+0xaf0>)
 8008f5e:	21a4      	movs	r1, #164	; 0xa4
 8008f60:	fb01 f303 	mul.w	r3, r1, r3
 8008f64:	4413      	add	r3, r2
 8008f66:	3384      	adds	r3, #132	; 0x84
 8008f68:	4a3e      	ldr	r2, [pc, #248]	; (8009064 <config_motors+0xb00>)
 8008f6a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI; //angle before it overflows
 8008f6c:	79bb      	ldrb	r3, [r7, #6]
 8008f6e:	4a39      	ldr	r2, [pc, #228]	; (8009054 <config_motors+0xaf0>)
 8008f70:	21a4      	movs	r1, #164	; 0xa4
 8008f72:	fb01 f303 	mul.w	r3, r1, r3
 8008f76:	4413      	add	r3, r2
 8008f78:	3380      	adds	r3, #128	; 0x80
 8008f7a:	4a3b      	ldr	r2, [pc, #236]	; (8009068 <config_motors+0xb04>)
 8008f7c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8008f7e:	79bb      	ldrb	r3, [r7, #6]
 8008f80:	4a34      	ldr	r2, [pc, #208]	; (8009054 <config_motors+0xaf0>)
 8008f82:	21a4      	movs	r1, #164	; 0xa4
 8008f84:	fb01 f303 	mul.w	r3, r1, r3
 8008f88:	4413      	add	r3, r2
 8008f8a:	3394      	adds	r3, #148	; 0x94
 8008f8c:	f04f 0200 	mov.w	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = YAW_ANGLE_KP;
 8008f92:	79bb      	ldrb	r3, [r7, #6]
 8008f94:	4a2f      	ldr	r2, [pc, #188]	; (8009054 <config_motors+0xaf0>)
 8008f96:	21a4      	movs	r1, #164	; 0xa4
 8008f98:	fb01 f303 	mul.w	r3, r1, r3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	3340      	adds	r3, #64	; 0x40
 8008fa0:	4a32      	ldr	r2, [pc, #200]	; (800906c <config_motors+0xb08>)
 8008fa2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = YAW_ANGLE_KI;
 8008fa4:	79bb      	ldrb	r3, [r7, #6]
 8008fa6:	4a2b      	ldr	r2, [pc, #172]	; (8009054 <config_motors+0xaf0>)
 8008fa8:	21a4      	movs	r1, #164	; 0xa4
 8008faa:	fb01 f303 	mul.w	r3, r1, r3
 8008fae:	4413      	add	r3, r2
 8008fb0:	3344      	adds	r3, #68	; 0x44
 8008fb2:	f04f 0200 	mov.w	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = YAW_ANGLE_KD;
 8008fb8:	79bb      	ldrb	r3, [r7, #6]
 8008fba:	4a26      	ldr	r2, [pc, #152]	; (8009054 <config_motors+0xaf0>)
 8008fbc:	21a4      	movs	r1, #164	; 0xa4
 8008fbe:	fb01 f303 	mul.w	r3, r1, r3
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3348      	adds	r3, #72	; 0x48
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = YAW_ANGLE_INT_MAX;
 8008fcc:	79bb      	ldrb	r3, [r7, #6]
 8008fce:	4a21      	ldr	r2, [pc, #132]	; (8009054 <config_motors+0xaf0>)
 8008fd0:	21a4      	movs	r1, #164	; 0xa4
 8008fd2:	fb01 f303 	mul.w	r3, r1, r3
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3358      	adds	r3, #88	; 0x58
 8008fda:	4a25      	ldr	r2, [pc, #148]	; (8009070 <config_motors+0xb0c>)
 8008fdc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = YAW_MAX_RPM;
 8008fde:	79bb      	ldrb	r3, [r7, #6]
 8008fe0:	4a1c      	ldr	r2, [pc, #112]	; (8009054 <config_motors+0xaf0>)
 8008fe2:	21a4      	movs	r1, #164	; 0xa4
 8008fe4:	fb01 f303 	mul.w	r3, r1, r3
 8008fe8:	4413      	add	r3, r2
 8008fea:	335c      	adds	r3, #92	; 0x5c
 8008fec:	4a21      	ldr	r2, [pc, #132]	; (8009074 <config_motors+0xb10>)
 8008fee:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = YAWRPM_KP;
 8008ff0:	79bb      	ldrb	r3, [r7, #6]
 8008ff2:	4a18      	ldr	r2, [pc, #96]	; (8009054 <config_motors+0xaf0>)
 8008ff4:	21a4      	movs	r1, #164	; 0xa4
 8008ff6:	fb01 f303 	mul.w	r3, r1, r3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3310      	adds	r3, #16
 8008ffe:	4a1c      	ldr	r2, [pc, #112]	; (8009070 <config_motors+0xb0c>)
 8009000:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = YAWRPM_KI;
 8009002:	79bb      	ldrb	r3, [r7, #6]
 8009004:	4a13      	ldr	r2, [pc, #76]	; (8009054 <config_motors+0xaf0>)
 8009006:	21a4      	movs	r1, #164	; 0xa4
 8009008:	fb01 f303 	mul.w	r3, r1, r3
 800900c:	4413      	add	r3, r2
 800900e:	3314      	adds	r3, #20
 8009010:	4a19      	ldr	r2, [pc, #100]	; (8009078 <config_motors+0xb14>)
 8009012:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = YAWRPM_KD;
 8009014:	79bb      	ldrb	r3, [r7, #6]
 8009016:	4a0f      	ldr	r2, [pc, #60]	; (8009054 <config_motors+0xaf0>)
 8009018:	21a4      	movs	r1, #164	; 0xa4
 800901a:	fb01 f303 	mul.w	r3, r1, r3
 800901e:	4413      	add	r3, r2
 8009020:	3318      	adds	r3, #24
 8009022:	4a13      	ldr	r2, [pc, #76]	; (8009070 <config_motors+0xb0c>)
 8009024:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = YAWRPM_INT_MAX;
 8009026:	79bb      	ldrb	r3, [r7, #6]
 8009028:	4a0a      	ldr	r2, [pc, #40]	; (8009054 <config_motors+0xaf0>)
 800902a:	21a4      	movs	r1, #164	; 0xa4
 800902c:	fb01 f303 	mul.w	r3, r1, r3
 8009030:	4413      	add	r3, r2
 8009032:	3328      	adds	r3, #40	; 0x28
 8009034:	4a11      	ldr	r2, [pc, #68]	; (800907c <config_motors+0xb18>)
 8009036:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = YAW_MAX_CURRENT;
 8009038:	79bb      	ldrb	r3, [r7, #6]
 800903a:	4a06      	ldr	r2, [pc, #24]	; (8009054 <config_motors+0xaf0>)
 800903c:	21a4      	movs	r1, #164	; 0xa4
 800903e:	fb01 f303 	mul.w	r3, r1, r3
 8009042:	4413      	add	r3, r2
 8009044:	332c      	adds	r3, #44	; 0x2c
 8009046:	4a04      	ldr	r2, [pc, #16]	; (8009058 <config_motors+0xaf4>)
 8009048:	601a      	str	r2, [r3, #0]
#endif
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	2000184c 	.word	0x2000184c
 8009058:	469c4000 	.word	0x469c4000
 800905c:	40190fdb 	.word	0x40190fdb
 8009060:	c0190fdb 	.word	0xc0190fdb
 8009064:	40c90fdb 	.word	0x40c90fdb
 8009068:	c0c90fdb 	.word	0xc0c90fdb
 800906c:	43480000 	.word	0x43480000
 8009070:	42c80000 	.word	0x42c80000
 8009074:	43c80000 	.word	0x43c80000
 8009078:	3ba3d70a 	.word	0x3ba3d70a
 800907c:	459c4000 	.word	0x459c4000

08009080 <check_motors>:
	}
	temp_msg = bz_debug_rest;
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
}

uint16_t check_motors() {
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
	uint16_t error = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	80fb      	strh	r3, [r7, #6]
	uint32_t curr_time = get_microseconds();
 800908a:	f7f9 f87d 	bl	8002188 <get_microseconds>
 800908e:	6038      	str	r0, [r7, #0]
	if (curr_time - can_motors[FR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8009090:	4b38      	ldr	r3, [pc, #224]	; (8009174 <check_motors+0xf4>)
 8009092:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800909e:	d903      	bls.n	80090a8 <check_motors+0x28>
		error |= 1 << (0);
 80090a0:	88fb      	ldrh	r3, [r7, #6]
 80090a2:	f043 0301 	orr.w	r3, r3, #1
 80090a6:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[FL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 80090a8:	4b32      	ldr	r3, [pc, #200]	; (8009174 <check_motors+0xf4>)
 80090aa:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090b6:	d903      	bls.n	80090c0 <check_motors+0x40>
		error |= 1 << (1);
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	f043 0302 	orr.w	r3, r3, #2
 80090be:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 80090c0:	4b2c      	ldr	r3, [pc, #176]	; (8009174 <check_motors+0xf4>)
 80090c2:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ce:	d903      	bls.n	80090d8 <check_motors+0x58>
		error |= 1 << (2);
 80090d0:	88fb      	ldrh	r3, [r7, #6]
 80090d2:	f043 0304 	orr.w	r3, r3, #4
 80090d6:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 80090d8:	4b26      	ldr	r3, [pc, #152]	; (8009174 <check_motors+0xf4>)
 80090da:	f8d3 3994 	ldr.w	r3, [r3, #2452]	; 0x994
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090e6:	d903      	bls.n	80090f0 <check_motors+0x70>
		error |= 1 << (3);
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	f043 0308 	orr.w	r3, r3, #8
 80090ee:	80fb      	strh	r3, [r7, #6]
	}

	if (curr_time - can_motors[LFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 80090f0:	4b20      	ldr	r3, [pc, #128]	; (8009174 <check_motors+0xf4>)
 80090f2:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090fe:	d903      	bls.n	8009108 <check_motors+0x88>
		error |= 1 << (4);
 8009100:	88fb      	ldrh	r3, [r7, #6]
 8009102:	f043 0310 	orr.w	r3, r3, #16
 8009106:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[RFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8009108:	4b1a      	ldr	r3, [pc, #104]	; (8009174 <check_motors+0xf4>)
 800910a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009116:	d903      	bls.n	8009120 <check_motors+0xa0>
		error |= 1 << (5);
 8009118:	88fb      	ldrh	r3, [r7, #6]
 800911a:	f043 0320 	orr.w	r3, r3, #32
 800911e:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[FEEDER_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8009120:	4b14      	ldr	r3, [pc, #80]	; (8009174 <check_motors+0xf4>)
 8009122:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800912e:	d903      	bls.n	8009138 <check_motors+0xb8>
		error |= 1 << 6;
 8009130:	88fb      	ldrh	r3, [r7, #6]
 8009132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009136:	80fb      	strh	r3, [r7, #6]

	}

	if (curr_time - can_motors[PITCH_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8009138:	4b0e      	ldr	r3, [pc, #56]	; (8009174 <check_motors+0xf4>)
 800913a:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	; 0xadc
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009146:	d903      	bls.n	8009150 <check_motors+0xd0>
		error |= 1 << 7;
 8009148:	88fb      	ldrh	r3, [r7, #6]
 800914a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914e:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[YAW_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8009150:	4b08      	ldr	r3, [pc, #32]	; (8009174 <check_motors+0xf4>)
 8009152:	f8d3 3b80 	ldr.w	r3, [r3, #2944]	; 0xb80
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800915e:	d903      	bls.n	8009168 <check_motors+0xe8>
		error |= 1 << 8;
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009166:	80fb      	strh	r3, [r7, #6]

	}
	return error;
 8009168:	88fb      	ldrh	r3, [r7, #6]

}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	2000184c 	.word	0x2000184c

08009178 <motor_calib_task>:

void motor_calib_task(void *argument) {
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 8009180:	2200      	movs	r2, #0
 8009182:	2100      	movs	r1, #0
 8009184:	4817      	ldr	r0, [pc, #92]	; (80091e4 <motor_calib_task+0x6c>)
 8009186:	f7f8 f899 	bl	80012bc <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 800918a:	2200      	movs	r2, #0
 800918c:	2100      	movs	r1, #0
 800918e:	4816      	ldr	r0, [pc, #88]	; (80091e8 <motor_calib_task+0x70>)
 8009190:	f7f8 f894 	bl	80012bc <can_start>
	config_motors();
 8009194:	f7ff f9e6 	bl	8008564 <config_motors>
	//insert can tester?
	uint16_t error = 0b111111111;
 8009198:	f240 13ff 	movw	r3, #511	; 0x1ff
 800919c:	81fb      	strh	r3, [r7, #14]
	vTaskDelay(50);
 800919e:	2032      	movs	r0, #50	; 0x32
 80091a0:	f00f fa56 	bl	8018650 <vTaskDelay>
	uint8_t startup = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	737b      	strb	r3, [r7, #13]
			vTaskDelay(500);
		}
	}

	uint8_t temp_msg;
	if (error == 0){
 80091a8:	89fb      	ldrh	r3, [r7, #14]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d102      	bne.n	80091b4 <motor_calib_task+0x3c>
		temp_msg = ok;
 80091ae:	2301      	movs	r3, #1
 80091b0:	733b      	strb	r3, [r7, #12]
 80091b2:	e001      	b.n	80091b8 <motor_calib_task+0x40>
	} else {
		temp_msg = not_ok;
 80091b4:	2302      	movs	r3, #2
 80091b6:	733b      	strb	r3, [r7, #12]
	}
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80091b8:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <motor_calib_task+0x74>)
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	f107 010c 	add.w	r1, r7, #12
 80091c0:	2300      	movs	r3, #0
 80091c2:	2200      	movs	r2, #0
 80091c4:	f00e fb98 	bl	80178f8 <xQueueGenericSend>

	while (1) {
		error = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	81fb      	strh	r3, [r7, #14]

		error = check_motors();
 80091cc:	f7ff ff58 	bl	8009080 <check_motors>
 80091d0:	4603      	mov	r3, r0
 80091d2:	81fb      	strh	r3, [r7, #14]
		g_motor_fault = error;
 80091d4:	4a06      	ldr	r2, [pc, #24]	; (80091f0 <motor_calib_task+0x78>)
 80091d6:	89fb      	ldrh	r3, [r7, #14]
 80091d8:	8013      	strh	r3, [r2, #0]
			bz_buzzer(0, 2);
			vTaskDelay(5000);
			continue;
			}
		}
		vTaskDelay(10000);
 80091da:	f242 7010 	movw	r0, #10000	; 0x2710
 80091de:	f00f fa37 	bl	8018650 <vTaskDelay>
		error = 0;
 80091e2:	e7f1      	b.n	80091c8 <motor_calib_task+0x50>
 80091e4:	200003ec 	.word	0x200003ec
 80091e8:	20000414 	.word	0x20000414
 80091ec:	20000488 	.word	0x20000488
 80091f0:	20002a84 	.word	0x20002a84

080091f4 <yaw_pid>:
#include "board_lib.h"
#include "motor_control.h"
#include "robot_config.h"

//todo: clean this place
void yaw_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08e      	sub	sp, #56	; 0x38
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80091fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8009202:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->last_time[0] = get_microseconds();
 800920c:	f7f8 ffbc 	bl	8002188 <get_microseconds>
 8009210:	4602      	mov	r2, r0
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	629a      	str	r2, [r3, #40]	; 0x28
	if (pid->last_time[1]>= pid->last_time[0]) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921e:	429a      	cmp	r2, r3
 8009220:	f080 80ac 	bcs.w	800937c <yaw_pid+0x188>
		return;
	}
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 8009224:	2301      	movs	r3, #1
 8009226:	637b      	str	r3, [r7, #52]	; 0x34
	double Pout = 0;
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	f04f 0300 	mov.w	r3, #0
 8009230:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8009234:	f04f 0200 	mov.w	r2, #0
 8009238:	f04f 0300 	mov.w	r3, #0
 800923c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8009240:	f04f 0200 	mov.w	r2, #0
 8009244:	f04f 0300 	mov.w	r3, #0
 8009248:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[1] = pid->error[0];
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 8009254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009258:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800925c:	f7f7 f814 	bl	8000288 <__aeabi_dsub>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4610      	mov	r0, r2
 8009266:	4619      	mov	r1, r3
 8009268:	f7f7 fcbe 	bl	8000be8 <__aeabi_d2f>
 800926c:	4602      	mov	r2, r0
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	ed93 7a03 	vldr	s14, [r3, #12]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	edd3 7a00 	vldr	s15, [r3]
 800927e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009284:	ee07 3a90 	vmov	s15, r3
 8009288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009290:	ee17 0a90 	vmov	r0, s15
 8009294:	f7f7 f958 	bl	8000548 <__aeabi_f2d>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd * time_mult;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80092ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80092b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c8:	ee17 0a90 	vmov	r0, s15
 80092cc:	f7f7 f93c 	bl	8000548 <__aeabi_f2d>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->integral += pid->error[0] * pid->ki * time_mult;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	ed93 7a05 	vldr	s14, [r3, #20]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80092ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80092ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f0:	ee07 3a90 	vmov	s15, r3
 80092f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	edc3 7a05 	vstr	s15, [r3, #20]
	float_minmax(&pid->integral, pid->int_max, 0);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f103 0214 	add.w	r2, r3, #20
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	edd3 7a06 	vldr	s15, [r3, #24]
 8009312:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009384 <yaw_pid+0x190>
 8009316:	eeb0 0a67 	vmov.f32	s0, s15
 800931a:	4610      	mov	r0, r2
 800931c:	f000 fdaf 	bl	8009e7e <float_minmax>
	Iout = pid->integral;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	4618      	mov	r0, r3
 8009326:	f7f7 f90f 	bl	8000548 <__aeabi_f2d>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout + Dout;
 8009332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009336:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800933a:	f7f6 ffa7 	bl	800028c <__adddf3>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4610      	mov	r0, r2
 8009344:	4619      	mov	r1, r3
 8009346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800934a:	f7f6 ff9f 	bl	800028c <__adddf3>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4610      	mov	r0, r2
 8009354:	4619      	mov	r1, r3
 8009356:	f7f7 fc47 	bl	8000be8 <__aeabi_d2f>
 800935a:	4602      	mov	r2, r0
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	621a      	str	r2, [r3, #32]
	float_minmax(&pid->output, pid->max_out, 0);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f103 0220 	add.w	r2, r3, #32
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	edd3 7a07 	vldr	s15, [r3, #28]
 800936c:	eddf 0a05 	vldr	s1, [pc, #20]	; 8009384 <yaw_pid+0x190>
 8009370:	eeb0 0a67 	vmov.f32	s0, s15
 8009374:	4610      	mov	r0, r2
 8009376:	f000 fd82 	bl	8009e7e <float_minmax>
 800937a:	e000      	b.n	800937e <yaw_pid+0x18a>
		return;
 800937c:	bf00      	nop
}
 800937e:	3738      	adds	r7, #56	; 0x38
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	00000000 	.word	0x00000000

08009388 <yangle_pid>:
 * @param *motor pointer to the struct that contain the data
 * for target motor
 *
 */

void yangle_pid(double setpoint, double curr_pt, motor_data_t *motor, float imu_data, float *prev_imu_data) {
 8009388:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800938c:	b090      	sub	sp, #64	; 0x40
 800938e:	af00      	add	r7, sp, #0
 8009390:	ed87 0b06 	vstr	d0, [r7, #24]
 8009394:	ed87 1b04 	vstr	d1, [r7, #16]
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	ed87 2a02 	vstr	s4, [r7, #8]
 800939e:	6079      	str	r1, [r7, #4]
	double ang_diff = (setpoint - curr_pt);
 80093a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093a8:	f7f6 ff6e 	bl	8000288 <__aeabi_dsub>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if (ang_diff > PI) {
 80093b4:	a391      	add	r3, pc, #580	; (adr r3, 80095fc <yangle_pid+0x274>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80093be:	f7f7 fbab 	bl	8000b18 <__aeabi_dcmpgt>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <yangle_pid+0x58>
		ang_diff -= 2 * PI;
 80093c8:	a38e      	add	r3, pc, #568	; (adr r3, 8009604 <yangle_pid+0x27c>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80093d2:	f7f6 ff59 	bl	8000288 <__aeabi_dsub>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80093de:	e014      	b.n	800940a <yangle_pid+0x82>
	} else if (ang_diff < -PI) {
 80093e0:	a38a      	add	r3, pc, #552	; (adr r3, 800960c <yangle_pid+0x284>)
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80093ea:	f7f7 fb77 	bl	8000adc <__aeabi_dcmplt>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <yangle_pid+0x82>
		ang_diff += 2 * PI;
 80093f4:	a383      	add	r3, pc, #524	; (adr r3, 8009604 <yangle_pid+0x27c>)
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80093fe:	f7f6 ff45 	bl	800028c <__adddf3>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	if (*prev_imu_data == imu_data) {
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	edd3 7a00 	vldr	s15, [r3]
 8009410:	ed97 7a02 	vldr	s14, [r7, #8]
 8009414:	eeb4 7a67 	vcmp.f32	s14, s15
 8009418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941c:	f000 80dc 	beq.w	80095d8 <yangle_pid+0x250>
		return;}
	motor->angle_pid.last_time[1] = motor->angle_pid.last_time[0];
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	66da      	str	r2, [r3, #108]	; 0x6c
	motor->angle_pid.last_time[0] = get_microseconds();
 8009428:	f7f8 feae 	bl	8002188 <get_microseconds>
 800942c:	4602      	mov	r2, r0
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	669a      	str	r2, [r3, #104]	; 0x68

	uint32_t time_mult = TIMER_FREQ * 60 /
			(float) (motor->angle_pid.last_time[0] - motor->angle_pid.last_time[1]);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	uint32_t time_mult = TIMER_FREQ * 60 /
 8009444:	eddf 6a68 	vldr	s13, [pc, #416]	; 80095e8 <yangle_pid+0x260>
 8009448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800944c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009450:	ee17 3a90 	vmov	r3, s15
 8009454:	637b      	str	r3, [r7, #52]	; 0x34
	motor->angle_pid.error[1] = motor->angle_pid.error[0];
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	651a      	str	r2, [r3, #80]	; 0x50
	motor->angle_pid.error[0] = ang_diff;
 800945e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009462:	f7f7 fbc1 	bl	8000be8 <__aeabi_d2f>
 8009466:	4602      	mov	r2, r0
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	64da      	str	r2, [r3, #76]	; 0x4c
	float rpm_pOut = motor->angle_pid.kp * ang_diff;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009470:	4618      	mov	r0, r3
 8009472:	f7f7 f869 	bl	8000548 <__aeabi_f2d>
 8009476:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800947a:	f7f7 f8bd 	bl	80005f8 <__aeabi_dmul>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	4610      	mov	r0, r2
 8009484:	4619      	mov	r1, r3
 8009486:	f7f7 fbaf 	bl	8000be8 <__aeabi_d2f>
 800948a:	4603      	mov	r3, r0
 800948c:	633b      	str	r3, [r7, #48]	; 0x30
	float rpm_dOut = motor->angle_pid.kd * (motor->angle_pid.error[0] - motor->angle_pid.error[1]);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80094a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80094a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float imu_ang_diff = imu_data - *prev_imu_data;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	edd3 7a00 	vldr	s15, [r3]
 80094b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80094b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	imu_ang_diff = (imu_ang_diff > PI) ? imu_ang_diff - (2 * PI) :
 80094be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80094c2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80095ec <yangle_pid+0x264>
 80094c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ce:	dd06      	ble.n	80094de <yangle_pid+0x156>
 80094d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80094d4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80095f0 <yangle_pid+0x268>
 80094d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094dc:	e011      	b.n	8009502 <yangle_pid+0x17a>
			((imu_ang_diff < -PI) ? imu_ang_diff + (2*PI) : imu_ang_diff);
 80094de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80094e2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80095f4 <yangle_pid+0x26c>
 80094e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ee:	d506      	bpl.n	80094fe <yangle_pid+0x176>
 80094f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80094f4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80095f0 <yangle_pid+0x268>
 80094f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094fc:	e001      	b.n	8009502 <yangle_pid+0x17a>
 80094fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
	imu_ang_diff = (imu_ang_diff > PI) ? imu_ang_diff - (2 * PI) :
 8009502:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float imu_rpm = ((imu_data - *prev_imu_data)  * time_mult)/(2 * PI);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	edd3 7a00 	vldr	s15, [r3]
 800950c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009510:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009522:	eddf 6a33 	vldr	s13, [pc, #204]	; 80095f0 <yangle_pid+0x268>
 8009526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800952a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	*prev_imu_data = imu_data;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	601a      	str	r2, [r3, #0]
	motor->angle_pid.integral += motor->angle_pid.error[0];
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	float_minmax(&motor->angle_pid.integral, motor->angle_pid.int_max, 0);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009556:	eddf 0a28 	vldr	s1, [pc, #160]	; 80095f8 <yangle_pid+0x270>
 800955a:	eeb0 0a67 	vmov.f32	s0, s15
 800955e:	4610      	mov	r0, r2
 8009560:	f000 fc8d 	bl	8009e7e <float_minmax>
	float rpm_iOut = motor->angle_pid.ki * motor->angle_pid.integral;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009574:	edc7 7a08 	vstr	s15, [r7, #32]

	motor->angle_pid.output = rpm_pOut + rpm_dOut + rpm_iOut;
 8009578:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800957c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009584:	edd7 7a08 	vldr	s15, [r7, #32]
 8009588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	float_minmax(&motor->angle_pid.output, motor->angle_pid.max_out,0);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800959e:	eddf 0a16 	vldr	s1, [pc, #88]	; 80095f8 <yangle_pid+0x270>
 80095a2:	eeb0 0a67 	vmov.f32	s0, s15
 80095a6:	4610      	mov	r0, r2
 80095a8:	f000 fc69 	bl	8009e7e <float_minmax>
	yaw_pid(motor->angle_pid.output, imu_rpm, &motor->rpm_pid);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7f6 ffc9 	bl	8000548 <__aeabi_f2d>
 80095b6:	4604      	mov	r4, r0
 80095b8:	460d      	mov	r5, r1
 80095ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095bc:	f7f6 ffc4 	bl	8000548 <__aeabi_f2d>
 80095c0:	4680      	mov	r8, r0
 80095c2:	4689      	mov	r9, r1
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3310      	adds	r3, #16
 80095c8:	4618      	mov	r0, r3
 80095ca:	ec49 8b11 	vmov	d1, r8, r9
 80095ce:	ec45 4b10 	vmov	d0, r4, r5
 80095d2:	f7ff fe0f 	bl	80091f4 <yaw_pid>
 80095d6:	e000      	b.n	80095da <yangle_pid+0x252>
		return;}
 80095d8:	bf00      	nop
}
 80095da:	3740      	adds	r7, #64	; 0x40
 80095dc:	46bd      	mov	sp, r7
 80095de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80095e2:	bf00      	nop
 80095e4:	f3af 8000 	nop.w
 80095e8:	49127c00 	.word	0x49127c00
 80095ec:	40490fdb 	.word	0x40490fdb
 80095f0:	40c90fdb 	.word	0x40c90fdb
 80095f4:	c0490fdb 	.word	0xc0490fdb
 80095f8:	00000000 	.word	0x00000000
 80095fc:	60000000 	.word	0x60000000
 8009600:	400921fb 	.word	0x400921fb
 8009604:	60000000 	.word	0x60000000
 8009608:	401921fb 	.word	0x401921fb
 800960c:	60000000 	.word	0x60000000
 8009610:	c00921fb 	.word	0xc00921fb
 8009614:	00000000 	.word	0x00000000

08009618 <angle_pid>:
 * @param curr_pt current angle
 * @param *motor pointer to the struct that contain the data
 * for target motor
 *
 */
void angle_pid(double setpoint, double curr_pt, motor_data_t *motor) {
 8009618:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800961c:	b08c      	sub	sp, #48	; 0x30
 800961e:	af00      	add	r7, sp, #0
 8009620:	ed87 0b04 	vstr	d0, [r7, #16]
 8009624:	ed87 1b02 	vstr	d1, [r7, #8]
 8009628:	6078      	str	r0, [r7, #4]
	double ang_diff = (setpoint - curr_pt);
 800962a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800962e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009632:	f7f6 fe29 	bl	8000288 <__aeabi_dsub>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (ang_diff > PI) {
 800963e:	a359      	add	r3, pc, #356	; (adr r3, 80097a4 <angle_pid+0x18c>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009648:	f7f7 fa66 	bl	8000b18 <__aeabi_dcmpgt>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00b      	beq.n	800966a <angle_pid+0x52>
		ang_diff -= 2 * PI;
 8009652:	a356      	add	r3, pc, #344	; (adr r3, 80097ac <angle_pid+0x194>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800965c:	f7f6 fe14 	bl	8000288 <__aeabi_dsub>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009668:	e014      	b.n	8009694 <angle_pid+0x7c>
	} else if (ang_diff < -PI) {
 800966a:	a352      	add	r3, pc, #328	; (adr r3, 80097b4 <angle_pid+0x19c>)
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009674:	f7f7 fa32 	bl	8000adc <__aeabi_dcmplt>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <angle_pid+0x7c>
		ang_diff += 2 * PI;
 800967e:	a34b      	add	r3, pc, #300	; (adr r3, 80097ac <angle_pid+0x194>)
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009688:	f7f6 fe00 	bl	800028c <__adddf3>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	motor->angle_pid.error[1] = motor->angle_pid.error[0];
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	651a      	str	r2, [r3, #80]	; 0x50
	motor->angle_pid.error[0] = ang_diff;
 800969c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80096a0:	f7f7 faa2 	bl	8000be8 <__aeabi_d2f>
 80096a4:	4602      	mov	r2, r0
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	64da      	str	r2, [r3, #76]	; 0x4c
	float rpm_pOut = motor->angle_pid.kp * ang_diff;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7f6 ff4a 	bl	8000548 <__aeabi_f2d>
 80096b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096b8:	f7f6 ff9e 	bl	80005f8 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4610      	mov	r0, r2
 80096c2:	4619      	mov	r1, r3
 80096c4:	f7f7 fa90 	bl	8000be8 <__aeabi_d2f>
 80096c8:	4603      	mov	r3, r0
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
	float rpm_dOut = motor->angle_pid.kd * (motor->angle_pid.error[0] - motor->angle_pid.error[1]);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80096de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80096e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e6:	edc7 7a08 	vstr	s15, [r7, #32]

	motor->angle_pid.integral += motor->angle_pid.error[0];
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80096f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	float_minmax(&motor->angle_pid.integral, motor->angle_pid.int_max, 0);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800970c:	eddf 0a24 	vldr	s1, [pc, #144]	; 80097a0 <angle_pid+0x188>
 8009710:	eeb0 0a67 	vmov.f32	s0, s15
 8009714:	4610      	mov	r0, r2
 8009716:	f000 fbb2 	bl	8009e7e <float_minmax>
	float rpm_iOut = motor->angle_pid.ki * motor->angle_pid.integral;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972a:	edc7 7a07 	vstr	s15, [r7, #28]
	motor->angle_pid.output = rpm_pOut + rpm_dOut + rpm_iOut;
 800972e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009732:	edd7 7a08 	vldr	s15, [r7, #32]
 8009736:	ee37 7a27 	vadd.f32	s14, s14, s15
 800973a:	edd7 7a07 	vldr	s15, [r7, #28]
 800973e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	float_minmax(&motor->angle_pid.output, motor->angle_pid.max_out,0);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8009754:	eddf 0a12 	vldr	s1, [pc, #72]	; 80097a0 <angle_pid+0x188>
 8009758:	eeb0 0a67 	vmov.f32	s0, s15
 800975c:	4610      	mov	r0, r2
 800975e:	f000 fb8e 	bl	8009e7e <float_minmax>
	speed_pid(motor->angle_pid.output, motor->raw_data.rpm, &motor->rpm_pid);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009766:	4618      	mov	r0, r3
 8009768:	f7f6 feee 	bl	8000548 <__aeabi_f2d>
 800976c:	4604      	mov	r4, r0
 800976e:	460d      	mov	r5, r1
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009776:	4618      	mov	r0, r3
 8009778:	f7f6 fed4 	bl	8000524 <__aeabi_i2d>
 800977c:	4680      	mov	r8, r0
 800977e:	4689      	mov	r9, r1
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3310      	adds	r3, #16
 8009784:	4618      	mov	r0, r3
 8009786:	ec49 8b11 	vmov	d1, r8, r9
 800978a:	ec45 4b10 	vmov	d0, r4, r5
 800978e:	f000 f815 	bl	80097bc <speed_pid>
}
 8009792:	bf00      	nop
 8009794:	3730      	adds	r7, #48	; 0x30
 8009796:	46bd      	mov	sp, r7
 8009798:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800979c:	f3af 8000 	nop.w
 80097a0:	00000000 	.word	0x00000000
 80097a4:	60000000 	.word	0x60000000
 80097a8:	400921fb 	.word	0x400921fb
 80097ac:	60000000 	.word	0x60000000
 80097b0:	401921fb 	.word	0x401921fb
 80097b4:	60000000 	.word	0x60000000
 80097b8:	c00921fb 	.word	0xc00921fb

080097bc <speed_pid>:
 *
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */
void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08e      	sub	sp, #56	; 0x38
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	ed87 0b04 	vstr	d0, [r7, #16]
 80097c6:	ed87 1b02 	vstr	d1, [r7, #8]
 80097ca:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->last_time[0] = get_microseconds();
 80097d4:	f7f8 fcd8 	bl	8002188 <get_microseconds>
 80097d8:	4602      	mov	r2, r0
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	629a      	str	r2, [r3, #40]	; 0x28
	/*
	if (pid->last_time[1]>= pid->last_time[0]) {
		return;
	} */
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 80097de:	2301      	movs	r3, #1
 80097e0:	637b      	str	r3, [r7, #52]	; 0x34
	double Pout = 0;
 80097e2:	f04f 0200 	mov.w	r2, #0
 80097e6:	f04f 0300 	mov.w	r3, #0
 80097ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 80097ee:	f04f 0200 	mov.w	r2, #0
 80097f2:	f04f 0300 	mov.w	r3, #0
 80097f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 80097fa:	f04f 0200 	mov.w	r2, #0
 80097fe:	f04f 0300 	mov.w	r3, #0
 8009802:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[1] = pid->error[0];
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 800980e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009812:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009816:	f7f6 fd37 	bl	8000288 <__aeabi_dsub>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4610      	mov	r0, r2
 8009820:	4619      	mov	r1, r3
 8009822:	f7f7 f9e1 	bl	8000be8 <__aeabi_d2f>
 8009826:	4602      	mov	r2, r0
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	ed93 7a03 	vldr	s14, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	edd3 7a00 	vldr	s15, [r3]
 8009838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800983c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983e:	ee07 3a90 	vmov	s15, r3
 8009842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	ee17 0a90 	vmov	r0, s15
 800984e:	f7f6 fe7b 	bl	8000548 <__aeabi_f2d>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd * time_mult;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	edd3 7a04 	vldr	s15, [r3, #16]
 8009866:	ee37 7a67 	vsub.f32	s14, s14, s15
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009882:	ee17 0a90 	vmov	r0, s15
 8009886:	f7f6 fe5f 	bl	8000548 <__aeabi_f2d>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->integral += pid->error[0] * pid->ki * time_mult;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	ed93 7a05 	vldr	s14, [r3, #20]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	edd3 6a03 	vldr	s13, [r3, #12]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80098a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80098a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	edc3 7a05 	vstr	s15, [r3, #20]
	float_minmax(&pid->integral, pid->int_max, 0);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f103 0214 	add.w	r2, r3, #20
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80098cc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800993c <speed_pid+0x180>
 80098d0:	eeb0 0a67 	vmov.f32	s0, s15
 80098d4:	4610      	mov	r0, r2
 80098d6:	f000 fad2 	bl	8009e7e <float_minmax>
	Iout = pid->integral;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7f6 fe32 	bl	8000548 <__aeabi_f2d>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout + Dout;
 80098ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80098f4:	f7f6 fcca 	bl	800028c <__adddf3>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4610      	mov	r0, r2
 80098fe:	4619      	mov	r1, r3
 8009900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009904:	f7f6 fcc2 	bl	800028c <__adddf3>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4610      	mov	r0, r2
 800990e:	4619      	mov	r1, r3
 8009910:	f7f7 f96a 	bl	8000be8 <__aeabi_d2f>
 8009914:	4602      	mov	r2, r0
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	621a      	str	r2, [r3, #32]
	float_minmax(&pid->output, pid->max_out, 0);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f103 0220 	add.w	r2, r3, #32
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	edd3 7a07 	vldr	s15, [r3, #28]
 8009926:	eddf 0a05 	vldr	s1, [pc, #20]	; 800993c <speed_pid+0x180>
 800992a:	eeb0 0a67 	vmov.f32	s0, s15
 800992e:	4610      	mov	r0, r2
 8009930:	f000 faa5 	bl	8009e7e <float_minmax>
}
 8009934:	bf00      	nop
 8009936:	3738      	adds	r7, #56	; 0x38
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	00000000 	.word	0x00000000

08009940 <motor_send_can>:
 */
void motor_send_can(motor_data_t motor_all[],
		uint8_t id_one,
		uint8_t id_two,
		uint8_t id_three,
		uint8_t id_four) {
 8009940:	b580      	push	{r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	4608      	mov	r0, r1
 800994a:	4611      	mov	r1, r2
 800994c:	461a      	mov	r2, r3
 800994e:	4603      	mov	r3, r0
 8009950:	70fb      	strb	r3, [r7, #3]
 8009952:	460b      	mov	r3, r1
 8009954:	70bb      	strb	r3, [r7, #2]
 8009956:	4613      	mov	r3, r2
 8009958:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	uint32_t temp_checker = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 800995e:	2300      	movs	r3, #0
 8009960:	623b      	str	r3, [r7, #32]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 8009962:	2300      	movs	r3, #0
 8009964:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_tx_message.DLC = 0x08;
 8009966:	2308      	movs	r3, #8
 8009968:	62bb      	str	r3, [r7, #40]	; 0x28
	if (id_one < 25 && id_one > 0) {
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	2b18      	cmp	r3, #24
 800996e:	d80b      	bhi.n	8009988 <motor_send_can+0x48>
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d008      	beq.n	8009988 <motor_send_can+0x48>
		temp_checker = temp_checker | 1 << (id_one - 1);
 8009976:	78fb      	ldrb	r3, [r7, #3]
 8009978:	3b01      	subs	r3, #1
 800997a:	2201      	movs	r2, #1
 800997c:	fa02 f303 	lsl.w	r3, r2, r3
 8009980:	461a      	mov	r2, r3
 8009982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009984:	4313      	orrs	r3, r2
 8009986:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_two < 25 && id_two > 0) {
 8009988:	78bb      	ldrb	r3, [r7, #2]
 800998a:	2b18      	cmp	r3, #24
 800998c:	d80b      	bhi.n	80099a6 <motor_send_can+0x66>
 800998e:	78bb      	ldrb	r3, [r7, #2]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <motor_send_can+0x66>
		temp_checker = temp_checker | 1 << (id_two - 1);
 8009994:	78bb      	ldrb	r3, [r7, #2]
 8009996:	3b01      	subs	r3, #1
 8009998:	2201      	movs	r2, #1
 800999a:	fa02 f303 	lsl.w	r3, r2, r3
 800999e:	461a      	mov	r2, r3
 80099a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a2:	4313      	orrs	r3, r2
 80099a4:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_three < 25 && id_three > 0) {
 80099a6:	787b      	ldrb	r3, [r7, #1]
 80099a8:	2b18      	cmp	r3, #24
 80099aa:	d80b      	bhi.n	80099c4 <motor_send_can+0x84>
 80099ac:	787b      	ldrb	r3, [r7, #1]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d008      	beq.n	80099c4 <motor_send_can+0x84>
		temp_checker = temp_checker | 1 << (id_three - 1);
 80099b2:	787b      	ldrb	r3, [r7, #1]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	2201      	movs	r2, #1
 80099b8:	fa02 f303 	lsl.w	r3, r2, r3
 80099bc:	461a      	mov	r2, r3
 80099be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c0:	4313      	orrs	r3, r2
 80099c2:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_four < 25 && id_four > 0) {
 80099c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80099c8:	2b18      	cmp	r3, #24
 80099ca:	d80d      	bhi.n	80099e8 <motor_send_can+0xa8>
 80099cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d009      	beq.n	80099e8 <motor_send_can+0xa8>
		temp_checker = temp_checker | 1 << (id_four - 1);
 80099d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80099d8:	3b01      	subs	r3, #1
 80099da:	2201      	movs	r2, #1
 80099dc:	fa02 f303 	lsl.w	r3, r2, r3
 80099e0:	461a      	mov	r2, r3
 80099e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e4:	4313      	orrs	r3, r2
 80099e6:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (temp_checker & 0x00000F) {
 80099e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ea:	f003 030f 	and.w	r3, r3, #15
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d054      	beq.n	8009a9c <motor_send_can+0x15c>
		CAN_tx_message.StdId = 0x200;
 80099f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099f6:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0].rpm_pid.output;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80099fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a02:	ee17 3a90 	vmov	r3, s15
 8009a06:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8009a08:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009a0c:	121b      	asrs	r3, r3, #8
 8009a0e:	b21b      	sxth	r3, r3
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8009a14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1].rpm_pid.output;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	33a4      	adds	r3, #164	; 0xa4
 8009a1e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009a22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a26:	ee17 3a90 	vmov	r3, s15
 8009a2a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8009a2c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009a30:	121b      	asrs	r3, r3, #8
 8009a32:	b21b      	sxth	r3, r3
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8009a38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2].rpm_pid.output;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8009a44:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a4c:	ee17 3a90 	vmov	r3, s15
 8009a50:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8009a52:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009a56:	121b      	asrs	r3, r3, #8
 8009a58:	b21b      	sxth	r3, r3
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8009a5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3].rpm_pid.output;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009a6a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a72:	ee17 3a90 	vmov	r3, s15
 8009a76:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8009a78:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009a7c:	121b      	asrs	r3, r3, #8
 8009a7e:	b21b      	sxth	r3, r3
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8009a84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8009a8a:	f107 030c 	add.w	r3, r7, #12
 8009a8e:	f107 0210 	add.w	r2, r7, #16
 8009a92:	f107 0118 	add.w	r1, r7, #24
 8009a96:	48bc      	ldr	r0, [pc, #752]	; (8009d88 <motor_send_can+0x448>)
 8009a98:	f001 ffe2 	bl	800ba60 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0000F0) {
 8009a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d057      	beq.n	8009b56 <motor_send_can+0x216>
		CAN_tx_message.StdId = 0x1FF;
 8009aa6:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009aaa:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4].rpm_pid.output;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009ab2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009aba:	ee17 3a90 	vmov	r3, s15
 8009abe:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8009ac0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009ac4:	121b      	asrs	r3, r3, #8
 8009ac6:	b21b      	sxth	r3, r3
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8009acc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5].rpm_pid.output;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009ad8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ae0:	ee17 3a90 	vmov	r3, s15
 8009ae4:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8009ae6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009aea:	121b      	asrs	r3, r3, #8
 8009aec:	b21b      	sxth	r3, r3
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8009af2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6].rpm_pid.output;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8009afe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b06:	ee17 3a90 	vmov	r3, s15
 8009b0a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8009b0c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009b10:	121b      	asrs	r3, r3, #8
 8009b12:	b21b      	sxth	r3, r3
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8009b18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7].rpm_pid.output;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8009b24:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b2c:	ee17 3a90 	vmov	r3, s15
 8009b30:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8009b32:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009b36:	121b      	asrs	r3, r3, #8
 8009b38:	b21b      	sxth	r3, r3
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8009b3e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8009b44:	f107 030c 	add.w	r3, r7, #12
 8009b48:	f107 0210 	add.w	r2, r7, #16
 8009b4c:	f107 0118 	add.w	r1, r7, #24
 8009b50:	488d      	ldr	r0, [pc, #564]	; (8009d88 <motor_send_can+0x448>)
 8009b52:	f001 ff85 	bl	800ba60 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x000F00) {
 8009b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d057      	beq.n	8009c10 <motor_send_can+0x2d0>
		CAN_tx_message.StdId = 0x2FF;
 8009b60:	f240 23ff 	movw	r3, #767	; 0x2ff
 8009b64:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8].rpm_pid.output;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8009b6c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b74:	ee17 3a90 	vmov	r3, s15
 8009b78:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8009b7a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009b7e:	121b      	asrs	r3, r3, #8
 8009b80:	b21b      	sxth	r3, r3
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8009b86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9].rpm_pid.output;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 8009b92:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b9a:	ee17 3a90 	vmov	r3, s15
 8009b9e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8009ba0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009ba4:	121b      	asrs	r3, r3, #8
 8009ba6:	b21b      	sxth	r3, r3
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8009bac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA].rpm_pid.output;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8009bb8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bc0:	ee17 3a90 	vmov	r3, s15
 8009bc4:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8009bc6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009bca:	121b      	asrs	r3, r3, #8
 8009bcc:	b21b      	sxth	r3, r3
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8009bd2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB].rpm_pid.output;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8009bde:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009be6:	ee17 3a90 	vmov	r3, s15
 8009bea:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8009bec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009bf0:	121b      	asrs	r3, r3, #8
 8009bf2:	b21b      	sxth	r3, r3
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8009bf8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8009bfe:	f107 030c 	add.w	r3, r7, #12
 8009c02:	f107 0210 	add.w	r2, r7, #16
 8009c06:	f107 0118 	add.w	r1, r7, #24
 8009c0a:	485f      	ldr	r0, [pc, #380]	; (8009d88 <motor_send_can+0x448>)
 8009c0c:	f001 ff28 	bl	800ba60 <HAL_CAN_AddTxMessage>
	}
#ifndef CHASSIS_MCU
	if (temp_checker & 0x00F000) {
 8009c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d057      	beq.n	8009cca <motor_send_can+0x38a>
		CAN_tx_message.StdId = 0x200;
 8009c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c1e:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0 + 12].rpm_pid.output;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8009c26:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c2e:	ee17 3a90 	vmov	r3, s15
 8009c32:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8009c34:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009c38:	121b      	asrs	r3, r3, #8
 8009c3a:	b21b      	sxth	r3, r3
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8009c40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1 + 12].rpm_pid.output;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8009c4c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c54:	ee17 3a90 	vmov	r3, s15
 8009c58:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8009c5a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009c5e:	121b      	asrs	r3, r3, #8
 8009c60:	b21b      	sxth	r3, r3
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8009c66:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2 + 12].rpm_pid.output;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f603 03f8 	addw	r3, r3, #2296	; 0x8f8
 8009c72:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c7a:	ee17 3a90 	vmov	r3, s15
 8009c7e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8009c80:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009c84:	121b      	asrs	r3, r3, #8
 8009c86:	b21b      	sxth	r3, r3
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8009c8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3 + 12].rpm_pid.output;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8009c98:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ca0:	ee17 3a90 	vmov	r3, s15
 8009ca4:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8009ca6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009caa:	121b      	asrs	r3, r3, #8
 8009cac:	b21b      	sxth	r3, r3
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8009cb2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8009cb8:	f107 030c 	add.w	r3, r7, #12
 8009cbc:	f107 0210 	add.w	r2, r7, #16
 8009cc0:	f107 0118 	add.w	r1, r7, #24
 8009cc4:	4831      	ldr	r0, [pc, #196]	; (8009d8c <motor_send_can+0x44c>)
 8009cc6:	f001 fecb 	bl	800ba60 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0F0000) {
 8009cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ccc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d05d      	beq.n	8009d90 <motor_send_can+0x450>
		CAN_tx_message.StdId = 0x1FF;
 8009cd4:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009cd8:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4 + 12].rpm_pid.output;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8009ce0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ce8:	ee17 3a90 	vmov	r3, s15
 8009cec:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8009cee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009cf2:	121b      	asrs	r3, r3, #8
 8009cf4:	b21b      	sxth	r3, r3
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8009cfa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5 + 12].rpm_pid.output;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f603 23e4 	addw	r3, r3, #2788	; 0xae4
 8009d06:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d0e:	ee17 3a90 	vmov	r3, s15
 8009d12:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8009d14:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009d18:	121b      	asrs	r3, r3, #8
 8009d1a:	b21b      	sxth	r3, r3
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8009d20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6 + 12].rpm_pid.output;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8009d2c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d34:	ee17 3a90 	vmov	r3, s15
 8009d38:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8009d3a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009d3e:	121b      	asrs	r3, r3, #8
 8009d40:	b21b      	sxth	r3, r3
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8009d46:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7 + 12].rpm_pid.output;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8009d52:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d5a:	ee17 3a90 	vmov	r3, s15
 8009d5e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8009d60:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009d64:	121b      	asrs	r3, r3, #8
 8009d66:	b21b      	sxth	r3, r3
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8009d6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8009d72:	f107 030c 	add.w	r3, r7, #12
 8009d76:	f107 0210 	add.w	r2, r7, #16
 8009d7a:	f107 0118 	add.w	r1, r7, #24
 8009d7e:	4803      	ldr	r0, [pc, #12]	; (8009d8c <motor_send_can+0x44c>)
 8009d80:	f001 fe6e 	bl	800ba60 <HAL_CAN_AddTxMessage>
 8009d84:	e004      	b.n	8009d90 <motor_send_can+0x450>
 8009d86:	bf00      	nop
 8009d88:	200003ec 	.word	0x200003ec
 8009d8c:	20000414 	.word	0x20000414
	}
	if (temp_checker & 0xF00000) {
 8009d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d057      	beq.n	8009e4a <motor_send_can+0x50a>
		CAN_tx_message.StdId = 0x2FF;
 8009d9a:	f240 23ff 	movw	r3, #767	; 0x2ff
 8009d9e:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8 + 12].rpm_pid.output;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 8009da6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dae:	ee17 3a90 	vmov	r3, s15
 8009db2:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8009db4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009db8:	121b      	asrs	r3, r3, #8
 8009dba:	b21b      	sxth	r3, r3
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8009dc0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9 + 12].rpm_pid.output;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f603 5374 	addw	r3, r3, #3444	; 0xd74
 8009dcc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dd4:	ee17 3a90 	vmov	r3, s15
 8009dd8:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8009dda:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009dde:	121b      	asrs	r3, r3, #8
 8009de0:	b21b      	sxth	r3, r3
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8009de6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA + 12].rpm_pid.output;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f603 6318 	addw	r3, r3, #3608	; 0xe18
 8009df2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dfa:	ee17 3a90 	vmov	r3, s15
 8009dfe:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8009e00:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009e04:	121b      	asrs	r3, r3, #8
 8009e06:	b21b      	sxth	r3, r3
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8009e0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB + 12].rpm_pid.output;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f603 63bc 	addw	r3, r3, #3772	; 0xebc
 8009e18:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e20:	ee17 3a90 	vmov	r3, s15
 8009e24:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8009e26:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009e2a:	121b      	asrs	r3, r3, #8
 8009e2c:	b21b      	sxth	r3, r3
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8009e32:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8009e38:	f107 030c 	add.w	r3, r7, #12
 8009e3c:	f107 0210 	add.w	r2, r7, #16
 8009e40:	f107 0118 	add.w	r1, r7, #24
 8009e44:	4803      	ldr	r0, [pc, #12]	; (8009e54 <motor_send_can+0x514>)
 8009e46:	f001 fe0b 	bl	800ba60 <HAL_CAN_AddTxMessage>
	}
#endif
}
 8009e4a:	bf00      	nop
 8009e4c:	3738      	adds	r7, #56	; 0x38
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000414 	.word	0x20000414

08009e58 <kill_can>:

void kill_can() {
 8009e58:	b480      	push	{r7}
 8009e5a:	b089      	sub	sp, #36	; 0x24
 8009e5c:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8] = { 0, };
 8009e5e:	2300      	movs	r3, #0
 8009e60:	603b      	str	r3, [r7, #0]
 8009e62:	2300      	movs	r3, #0
 8009e64:	607b      	str	r3, [r7, #4]
	uint32_t send_mail_box;
	CAN_tx_message.IDE = CAN_ID_STD;
 8009e66:	2300      	movs	r3, #0
 8009e68:	613b      	str	r3, [r7, #16]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]
	CAN_tx_message.DLC = 0x08;
 8009e6e:	2308      	movs	r3, #8
 8009e70:	61bb      	str	r3, [r7, #24]
//	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
//	CAN_tx_message.StdId = 0x2FF;
//	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
//
//#endif
}
 8009e72:	bf00      	nop
 8009e74:	3724      	adds	r7, #36	; 0x24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <float_minmax>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_minmax(float *motor_in, float motor_max, float motor_min) {
 8009e7e:	b480      	push	{r7}
 8009e80:	b085      	sub	sp, #20
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	ed87 0a02 	vstr	s0, [r7, #8]
 8009e8a:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	edd3 7a00 	vldr	s15, [r3]
 8009e94:	ed97 7a02 	vldr	s14, [r7, #8]
 8009e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea0:	d503      	bpl.n	8009eaa <float_minmax+0x2c>
		*motor_in = motor_max;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	e012      	b.n	8009ed0 <float_minmax+0x52>
	} else if (*motor_in < -motor_max) {
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	ed93 7a00 	vldr	s14, [r3]
 8009eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8009eb4:	eef1 7a67 	vneg.f32	s15, s15
 8009eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec0:	d506      	bpl.n	8009ed0 <float_minmax+0x52>
		*motor_in = -motor_max;
 8009ec2:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ec6:	eef1 7a67 	vneg.f32	s15, s15
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	edc3 7a00 	vstr	s15, [r3]
	}

	if (fabs(*motor_in) < motor_min) {
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	edd3 7a00 	vldr	s15, [r3]
 8009ed6:	eef0 7ae7 	vabs.f32	s15, s15
 8009eda:	ed97 7a01 	vldr	s14, [r7, #4]
 8009ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee6:	dc00      	bgt.n	8009eea <float_minmax+0x6c>
		*motor_in = 0;
	}

}
 8009ee8:	e003      	b.n	8009ef2 <float_minmax+0x74>
		*motor_in = 0;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
}
 8009ef2:	bf00      	nop
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
	...

08009f00 <movement_control_task>:

float motor_yaw_mult[4];

extern QueueHandle_t telem_motor_queue;

void movement_control_task(void *argument) {
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af02      	add	r7, sp, #8
 8009f06:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	//initialise in an array so it's possible to for-loop it later
	motor_yaw_mult[0] = FR_YAW_MULT;
 8009f08:	4b43      	ldr	r3, [pc, #268]	; (800a018 <movement_control_task+0x118>)
 8009f0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009f0e:	601a      	str	r2, [r3, #0]
	motor_yaw_mult[1] = FL_YAW_MULT;
 8009f10:	4b41      	ldr	r3, [pc, #260]	; (800a018 <movement_control_task+0x118>)
 8009f12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009f16:	605a      	str	r2, [r3, #4]
	motor_yaw_mult[2] = BL_YAW_MULT;
 8009f18:	4b3f      	ldr	r3, [pc, #252]	; (800a018 <movement_control_task+0x118>)
 8009f1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009f1e:	609a      	str	r2, [r3, #8]
	motor_yaw_mult[3] = BR_YAW_MULT;
 8009f20:	4b3d      	ldr	r3, [pc, #244]	; (800a018 <movement_control_task+0x118>)
 8009f22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009f26:	60da      	str	r2, [r3, #12]

#ifndef CHASSIS_MCU

		EventBits_t motor_bits;
		//wait for all motors to have updated data before PID is allowed to run
		motor_bits = xEventGroupWaitBits(chassis_event_group, 0b1111, pdTRUE,
 8009f28:	4b3c      	ldr	r3, [pc, #240]	; (800a01c <movement_control_task+0x11c>)
 8009f2a:	6818      	ldr	r0, [r3, #0]
 8009f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	2301      	movs	r3, #1
 8009f34:	2201      	movs	r2, #1
 8009f36:	210f      	movs	r1, #15
 8009f38:	f00d f918 	bl	801716c <xEventGroupWaitBits>
 8009f3c:	60f8      	str	r0, [r7, #12]
				pdTRUE,
				portMAX_DELAY);
		if (motor_bits == 0b1111) {
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b0f      	cmp	r3, #15
 8009f42:	d13b      	bne.n	8009fbc <movement_control_task+0xbc>
			status_led(3, on_led);
 8009f44:	2100      	movs	r1, #0
 8009f46:	2003      	movs	r0, #3
 8009f48:	f7f8 f846 	bl	8001fd8 <status_led>
			start_time = xTaskGetTickCount();
 8009f4c:	f00e fcd0 	bl	80188f0 <xTaskGetTickCount>
 8009f50:	4603      	mov	r3, r0
 8009f52:	60bb      	str	r3, [r7, #8]
			if (chassis_ctrl_data.enabled) {
 8009f54:	4b32      	ldr	r3, [pc, #200]	; (800a020 <movement_control_task+0x120>)
 8009f56:	7d1b      	ldrb	r3, [r3, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d006      	beq.n	8009f6a <movement_control_task+0x6a>
				chassis_motion_control(can_motors + FR_MOTOR_ID - 1,
 8009f5c:	4831      	ldr	r0, [pc, #196]	; (800a024 <movement_control_task+0x124>)
 8009f5e:	4932      	ldr	r1, [pc, #200]	; (800a028 <movement_control_task+0x128>)
 8009f60:	4a32      	ldr	r2, [pc, #200]	; (800a02c <movement_control_task+0x12c>)
 8009f62:	4b33      	ldr	r3, [pc, #204]	; (800a030 <movement_control_task+0x130>)
 8009f64:	f000 f86a 	bl	800a03c <chassis_motion_control>
 8009f68:	e023      	b.n	8009fb2 <movement_control_task+0xb2>
						can_motors + FL_MOTOR_ID - 1,
						can_motors + BL_MOTOR_ID - 1,
						can_motors + BR_MOTOR_ID - 1);
			} else {
				can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;
 8009f6a:	4b32      	ldr	r3, [pc, #200]	; (800a034 <movement_control_task+0x134>)
 8009f6c:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8009f70:	f04f 0200 	mov.w	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
				can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;
 8009f76:	4b2f      	ldr	r3, [pc, #188]	; (800a034 <movement_control_task+0x134>)
 8009f78:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]
				can_motors[BL_MOTOR_ID - 1].rpm_pid.output = 0;
 8009f82:	4b2c      	ldr	r3, [pc, #176]	; (800a034 <movement_control_task+0x134>)
 8009f84:	f603 13cc 	addw	r3, r3, #2508	; 0x9cc
 8009f88:	f04f 0200 	mov.w	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]
				can_motors[BR_MOTOR_ID - 1].rpm_pid.output = 0;
 8009f8e:	4b29      	ldr	r3, [pc, #164]	; (800a034 <movement_control_task+0x134>)
 8009f90:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
				g_chassis_yaw = 0;
 8009f9a:	4b27      	ldr	r3, [pc, #156]	; (800a038 <movement_control_task+0x138>)
 8009f9c:	f04f 0200 	mov.w	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]

				//change CAN messages to a seperate task? so it doesn't fill up CAN transmitter
				motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID,
 8009fa2:	230f      	movs	r3, #15
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	2310      	movs	r3, #16
 8009fa8:	220d      	movs	r2, #13
 8009faa:	210e      	movs	r1, #14
 8009fac:	4821      	ldr	r0, [pc, #132]	; (800a034 <movement_control_task+0x134>)
 8009fae:	f7ff fcc7 	bl	8009940 <motor_send_can>
						BR_MOTOR_ID);
			}
#else
		chassis_MCU_send_CAN();
#endif
			status_led(3, off_led);
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	2003      	movs	r0, #3
 8009fb6:	f7f8 f80f 	bl	8001fd8 <status_led>
 8009fba:	e01f      	b.n	8009ffc <movement_control_task+0xfc>
		} else {
			//motor timed out
			can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;
 8009fbc:	4b1d      	ldr	r3, [pc, #116]	; (800a034 <movement_control_task+0x134>)
 8009fbe:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]
			can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;
 8009fc8:	4b1a      	ldr	r3, [pc, #104]	; (800a034 <movement_control_task+0x134>)
 8009fca:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8009fce:	f04f 0200 	mov.w	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]
			can_motors[BL_MOTOR_ID - 1].rpm_pid.output = 0;
 8009fd4:	4b17      	ldr	r3, [pc, #92]	; (800a034 <movement_control_task+0x134>)
 8009fd6:	f603 13cc 	addw	r3, r3, #2508	; 0x9cc
 8009fda:	f04f 0200 	mov.w	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]
			can_motors[BR_MOTOR_ID - 1].rpm_pid.output = 0;
 8009fe0:	4b14      	ldr	r3, [pc, #80]	; (800a034 <movement_control_task+0x134>)
 8009fe2:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8009fe6:	f04f 0200 	mov.w	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
			motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, BL_MOTOR_ID,
 8009fec:	230f      	movs	r3, #15
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	220d      	movs	r2, #13
 8009ff4:	210e      	movs	r1, #14
 8009ff6:	480f      	ldr	r0, [pc, #60]	; (800a034 <movement_control_task+0x134>)
 8009ff8:	f7ff fca2 	bl	8009940 <motor_send_can>
					BR_MOTOR_ID);
		}
		//clear bits if it's not already cleared
		xEventGroupClearBits(chassis_event_group, 0b1111);
 8009ffc:	4b07      	ldr	r3, [pc, #28]	; (800a01c <movement_control_task+0x11c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	210f      	movs	r1, #15
 800a002:	4618      	mov	r0, r3
 800a004:	f00d f980 	bl	8017308 <xEventGroupClearBits>
		//delays task for other tasks to run
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 800a008:	f107 0308 	add.w	r3, r7, #8
 800a00c:	210a      	movs	r1, #10
 800a00e:	4618      	mov	r0, r3
 800a010:	f00e faa0 	bl	8018554 <vTaskDelayUntil>
	while (1) {
 800a014:	e788      	b.n	8009f28 <movement_control_task+0x28>
 800a016:	bf00      	nop
 800a018:	20002a8c 	.word	0x20002a8c
 800a01c:	20000470 	.word	0x20000470
 800a020:	200027ac 	.word	0x200027ac
 800a024:	200020a0 	.word	0x200020a0
 800a028:	20001ffc 	.word	0x20001ffc
 800a02c:	200021e8 	.word	0x200021e8
 800a030:	20002144 	.word	0x20002144
 800a034:	2000184c 	.word	0x2000184c
 800a038:	20002a88 	.word	0x20002a88

0800a03c <chassis_motion_control>:
				&send_mail_box);
	}
}

void chassis_motion_control(motor_data_t *motorfr, motor_data_t *motorfl,
		motor_data_t *motorbl, motor_data_t *motorbr) {
 800a03c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a040:	b0a2      	sub	sp, #136	; 0x88
 800a042:	af02      	add	r7, sp, #8
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	603b      	str	r3, [r7, #0]
	static uint32_t prev_time;
	//get the angle between the gun and the chassis
	//so that movement is relative to gun, not chassis
	float rel_angle = can_motors[YAW_MOTOR_ID - 1].angle_data.adj_ang;
 800a04c:	4b18      	ldr	r3, [pc, #96]	; (800a0b0 <chassis_motion_control+0x74>)
 800a04e:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	65fb      	str	r3, [r7, #92]	; 0x5c
	float translation_rpm[4] = { 0, };
 800a056:	f107 0320 	add.w	r3, r7, #32
 800a05a:	2200      	movs	r2, #0
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	605a      	str	r2, [r3, #4]
 800a060:	609a      	str	r2, [r3, #8]
 800a062:	60da      	str	r2, [r3, #12]
	;
	float yaw_rpm[4] = { 0, };
 800a064:	f107 0310 	add.w	r3, r7, #16
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	605a      	str	r2, [r3, #4]
 800a06e:	609a      	str	r2, [r3, #8]
 800a070:	60da      	str	r2, [r3, #12]
	float total_power = 0;
 800a072:	f04f 0300 	mov.w	r3, #0
 800a076:	65bb      	str	r3, [r7, #88]	; 0x58
	int32_t chassis_rpm = LV1_MAX_SPEED;
 800a078:	f241 1394 	movw	r3, #4500	; 0x1194
 800a07c:	67fb      	str	r3, [r7, #124]	; 0x7c
	int32_t chassis_current = LV1_MAX_CURRENT;
 800a07e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a082:	67bb      	str	r3, [r7, #120]	; 0x78
	if (referee_limiters.robot_level == 1) {
 800a084:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <chassis_motion_control+0x78>)
 800a086:	7b1b      	ldrb	r3, [r3, #12]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d106      	bne.n	800a09a <chassis_motion_control+0x5e>
		chassis_rpm = LV1_MAX_SPEED;
 800a08c:	f241 1394 	movw	r3, #4500	; 0x1194
 800a090:	67fb      	str	r3, [r7, #124]	; 0x7c
		chassis_current = LV1_MAX_CURRENT;
 800a092:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a096:	67bb      	str	r3, [r7, #120]	; 0x78
 800a098:	e018      	b.n	800a0cc <chassis_motion_control+0x90>
	} else if (referee_limiters.robot_level == 2) {
 800a09a:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <chassis_motion_control+0x78>)
 800a09c:	7b1b      	ldrb	r3, [r3, #12]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d10a      	bne.n	800a0b8 <chassis_motion_control+0x7c>
		chassis_rpm = LV2_MAX_SPEED;
 800a0a2:	f241 7370 	movw	r3, #6000	; 0x1770
 800a0a6:	67fb      	str	r3, [r7, #124]	; 0x7c
		chassis_current = LV2_MAX_CURRENT;
 800a0a8:	f241 3388 	movw	r3, #5000	; 0x1388
 800a0ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0ae:	e00d      	b.n	800a0cc <chassis_motion_control+0x90>
 800a0b0:	2000184c 	.word	0x2000184c
 800a0b4:	20002aac 	.word	0x20002aac
	} else if (referee_limiters.robot_level == 3) {
 800a0b8:	4bd7      	ldr	r3, [pc, #860]	; (800a418 <chassis_motion_control+0x3dc>)
 800a0ba:	7b1b      	ldrb	r3, [r3, #12]
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d105      	bne.n	800a0cc <chassis_motion_control+0x90>
		chassis_rpm = LV3_MAX_SPEED;
 800a0c0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a0c4:	67fb      	str	r3, [r7, #124]	; 0x7c
		chassis_current = LV3_MAX_CURRENT;
 800a0c6:	f241 537c 	movw	r3, #5500	; 0x157c
 800a0ca:	67bb      	str	r3, [r7, #120]	; 0x78
	}
	chassis_current *= referee_limiters.wheel_power_limit
 800a0cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ce:	ee07 3a90 	vmov	s15, r3
 800a0d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a0d6:	4bd0      	ldr	r3, [pc, #832]	; (800a418 <chassis_motion_control+0x3dc>)
 800a0d8:	edd3 6a01 	vldr	s13, [r3, #4]
			* referee_limiters.wheel_buffer_limit * gear_speed.accel_mult;
 800a0dc:	4bce      	ldr	r3, [pc, #824]	; (800a418 <chassis_motion_control+0x3dc>)
 800a0de:	edd3 7a02 	vldr	s15, [r3, #8]
 800a0e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a0e6:	4bcd      	ldr	r3, [pc, #820]	; (800a41c <chassis_motion_control+0x3e0>)
 800a0e8:	edd3 7a03 	vldr	s15, [r3, #12]
 800a0ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
	chassis_current *= referee_limiters.wheel_power_limit
 800a0f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a0f8:	ee17 3a90 	vmov	r3, s15
 800a0fc:	67bb      	str	r3, [r7, #120]	; 0x78
	chassis_current =
 800a0fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a104:	bfa8      	it	ge
 800a106:	f44f 4380 	movge.w	r3, #16384	; 0x4000
 800a10a:	67bb      	str	r3, [r7, #120]	; 0x78
			(chassis_current > M3508_MAX_OUTPUT) ?
					M3508_MAX_OUTPUT : chassis_current;
	chassis_rpm = (chassis_rpm > M3508_MAX_RPM) ? M3508_MAX_RPM : chassis_rpm;
 800a10c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a10e:	f242 3228 	movw	r2, #9000	; 0x2328
 800a112:	4293      	cmp	r3, r2
 800a114:	bfa8      	it	ge
 800a116:	4613      	movge	r3, r2
 800a118:	67fb      	str	r3, [r7, #124]	; 0x7c
	//rotate angle of the movement :)
	//MA1513/MA1508E is useful!!

	uint32_t micros_time_diff = get_microseconds() - prev_time;
 800a11a:	f7f8 f835 	bl	8002188 <get_microseconds>
 800a11e:	4602      	mov	r2, r0
 800a120:	4bbf      	ldr	r3, [pc, #764]	; (800a420 <chassis_motion_control+0x3e4>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	657b      	str	r3, [r7, #84]	; 0x54
	prev_time = get_microseconds();
 800a128:	f7f8 f82e 	bl	8002188 <get_microseconds>
 800a12c:	4603      	mov	r3, r0
 800a12e:	4abc      	ldr	r2, [pc, #752]	; (800a420 <chassis_motion_control+0x3e4>)
 800a130:	6013      	str	r3, [r2, #0]
	float yaw_max_accel =  (float)micros_time_diff / (TIMER_FREQ * CHASSIS_MAX_YAW_ACCEL );
 800a132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a13c:	eddf 6ab9 	vldr	s13, [pc, #740]	; 800a424 <chassis_motion_control+0x3e8>
 800a140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a144:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float lin_max_accel = (float)micros_time_diff / (TIMER_FREQ * CHASSIS_MAX_ACCEL) ;
 800a148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a152:	eddf 6ab5 	vldr	s13, [pc, #724]	; 800a428 <chassis_motion_control+0x3ec>
 800a156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a15a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	static float prev_fwd;
	static float prev_horz;
	static float prev_yaw;
	float act_forward = chassis_ctrl_data.forward * gear_speed.trans_mult;
 800a15e:	4bb3      	ldr	r3, [pc, #716]	; (800a42c <chassis_motion_control+0x3f0>)
 800a160:	ed93 7a00 	vldr	s14, [r3]
 800a164:	4bad      	ldr	r3, [pc, #692]	; (800a41c <chassis_motion_control+0x3e0>)
 800a166:	edd3 7a02 	vldr	s15, [r3, #8]
 800a16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float act_horizontal = chassis_ctrl_data.horizontal * gear_speed.trans_mult;
 800a172:	4bae      	ldr	r3, [pc, #696]	; (800a42c <chassis_motion_control+0x3f0>)
 800a174:	ed93 7a01 	vldr	s14, [r3, #4]
 800a178:	4ba8      	ldr	r3, [pc, #672]	; (800a41c <chassis_motion_control+0x3e0>)
 800a17a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a182:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float act_yaw = chassis_ctrl_data.yaw * gear_speed.spin_mult;
 800a186:	4ba9      	ldr	r3, [pc, #676]	; (800a42c <chassis_motion_control+0x3f0>)
 800a188:	ed93 7a02 	vldr	s14, [r3, #8]
 800a18c:	4ba3      	ldr	r3, [pc, #652]	; (800a41c <chassis_motion_control+0x3e0>)
 800a18e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a196:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	if (act_forward - prev_fwd > lin_max_accel) {
 800a19a:	4ba5      	ldr	r3, [pc, #660]	; (800a430 <chassis_motion_control+0x3f4>)
 800a19c:	edd3 7a00 	vldr	s15, [r3]
 800a1a0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a1a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a1ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b4:	d508      	bpl.n	800a1c8 <chassis_motion_control+0x18c>
		act_forward = prev_fwd + lin_max_accel;
 800a1b6:	4b9e      	ldr	r3, [pc, #632]	; (800a430 <chassis_motion_control+0x3f4>)
 800a1b8:	edd3 7a00 	vldr	s15, [r3]
 800a1bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a1c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1c4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	}
	if (act_forward - prev_fwd < -lin_max_accel) {
 800a1c8:	4b99      	ldr	r3, [pc, #612]	; (800a430 <chassis_motion_control+0x3f4>)
 800a1ca:	edd3 7a00 	vldr	s15, [r3]
 800a1ce:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a1d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1d6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a1da:	eef1 7a67 	vneg.f32	s15, s15
 800a1de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e6:	d508      	bpl.n	800a1fa <chassis_motion_control+0x1be>
		act_forward = prev_fwd - lin_max_accel;
 800a1e8:	4b91      	ldr	r3, [pc, #580]	; (800a430 <chassis_motion_control+0x3f4>)
 800a1ea:	ed93 7a00 	vldr	s14, [r3]
 800a1ee:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a1f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1f6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	}

	if (act_horizontal - prev_horz > lin_max_accel) {
 800a1fa:	4b8e      	ldr	r3, [pc, #568]	; (800a434 <chassis_motion_control+0x3f8>)
 800a1fc:	edd3 7a00 	vldr	s15, [r3]
 800a200:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a204:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a208:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a20c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a214:	d508      	bpl.n	800a228 <chassis_motion_control+0x1ec>
		act_horizontal = prev_horz +  lin_max_accel;
 800a216:	4b87      	ldr	r3, [pc, #540]	; (800a434 <chassis_motion_control+0x3f8>)
 800a218:	edd3 7a00 	vldr	s15, [r3]
 800a21c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a220:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a224:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	}
	if (act_horizontal - prev_horz < -lin_max_accel) {
 800a228:	4b82      	ldr	r3, [pc, #520]	; (800a434 <chassis_motion_control+0x3f8>)
 800a22a:	edd3 7a00 	vldr	s15, [r3]
 800a22e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a232:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a236:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a23a:	eef1 7a67 	vneg.f32	s15, s15
 800a23e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a246:	d508      	bpl.n	800a25a <chassis_motion_control+0x21e>
		act_horizontal = prev_horz - lin_max_accel;
 800a248:	4b7a      	ldr	r3, [pc, #488]	; (800a434 <chassis_motion_control+0x3f8>)
 800a24a:	ed93 7a00 	vldr	s14, [r3]
 800a24e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a252:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a256:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	}

	if (act_yaw - prev_yaw > yaw_max_accel) {
 800a25a:	4b77      	ldr	r3, [pc, #476]	; (800a438 <chassis_motion_control+0x3fc>)
 800a25c:	edd3 7a00 	vldr	s15, [r3]
 800a260:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a264:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a268:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a26c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a274:	d508      	bpl.n	800a288 <chassis_motion_control+0x24c>
		act_yaw = prev_yaw + yaw_max_accel;
 800a276:	4b70      	ldr	r3, [pc, #448]	; (800a438 <chassis_motion_control+0x3fc>)
 800a278:	edd3 7a00 	vldr	s15, [r3]
 800a27c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a280:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a284:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	}
	if (act_yaw - prev_yaw < -yaw_max_accel) {
 800a288:	4b6b      	ldr	r3, [pc, #428]	; (800a438 <chassis_motion_control+0x3fc>)
 800a28a:	edd3 7a00 	vldr	s15, [r3]
 800a28e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a292:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a296:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a29a:	eef1 7a67 	vneg.f32	s15, s15
 800a29e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a6:	d508      	bpl.n	800a2ba <chassis_motion_control+0x27e>
		act_yaw = prev_yaw - yaw_max_accel;
 800a2a8:	4b63      	ldr	r3, [pc, #396]	; (800a438 <chassis_motion_control+0x3fc>)
 800a2aa:	ed93 7a00 	vldr	s14, [r3]
 800a2ae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a2b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2b6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	}

	prev_fwd = act_forward;
 800a2ba:	4a5d      	ldr	r2, [pc, #372]	; (800a430 <chassis_motion_control+0x3f4>)
 800a2bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2be:	6013      	str	r3, [r2, #0]
	prev_horz = act_horizontal;
 800a2c0:	4a5c      	ldr	r2, [pc, #368]	; (800a434 <chassis_motion_control+0x3f8>)
 800a2c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2c4:	6013      	str	r3, [r2, #0]
	prev_yaw = act_yaw;
 800a2c6:	4a5c      	ldr	r2, [pc, #368]	; (800a438 <chassis_motion_control+0x3fc>)
 800a2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ca:	6013      	str	r3, [r2, #0]

	float rel_forward = ((-act_horizontal * sin(-rel_angle))
 800a2cc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a2d0:	eef1 7a67 	vneg.f32	s15, s15
 800a2d4:	ee17 3a90 	vmov	r3, s15
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f6 f935 	bl	8000548 <__aeabi_f2d>
 800a2de:	4604      	mov	r4, r0
 800a2e0:	460d      	mov	r5, r1
 800a2e2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a2e6:	eef1 7a67 	vneg.f32	s15, s15
 800a2ea:	ee17 3a90 	vmov	r3, s15
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f6 f92a 	bl	8000548 <__aeabi_f2d>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	ec43 2b10 	vmov	d0, r2, r3
 800a2fc:	f015 fb84 	bl	801fa08 <sin>
 800a300:	ec53 2b10 	vmov	r2, r3, d0
 800a304:	4620      	mov	r0, r4
 800a306:	4629      	mov	r1, r5
 800a308:	f7f6 f976 	bl	80005f8 <__aeabi_dmul>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4690      	mov	r8, r2
 800a312:	4699      	mov	r9, r3
			+ (act_forward * cos(-rel_angle)));
 800a314:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a316:	f7f6 f917 	bl	8000548 <__aeabi_f2d>
 800a31a:	4604      	mov	r4, r0
 800a31c:	460d      	mov	r5, r1
 800a31e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a322:	eef1 7a67 	vneg.f32	s15, s15
 800a326:	ee17 3a90 	vmov	r3, s15
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7f6 f90c 	bl	8000548 <__aeabi_f2d>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	ec43 2b10 	vmov	d0, r2, r3
 800a338:	f015 fb12 	bl	801f960 <cos>
 800a33c:	ec53 2b10 	vmov	r2, r3, d0
 800a340:	4620      	mov	r0, r4
 800a342:	4629      	mov	r1, r5
 800a344:	f7f6 f958 	bl	80005f8 <__aeabi_dmul>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	f7f5 ff9c 	bl	800028c <__adddf3>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
	float rel_forward = ((-act_horizontal * sin(-rel_angle))
 800a358:	4610      	mov	r0, r2
 800a35a:	4619      	mov	r1, r3
 800a35c:	f7f6 fc44 	bl	8000be8 <__aeabi_d2f>
 800a360:	4603      	mov	r3, r0
 800a362:	64bb      	str	r3, [r7, #72]	; 0x48
	float rel_horizontal = ((-act_horizontal * cos(-rel_angle))
 800a364:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a368:	eef1 7a67 	vneg.f32	s15, s15
 800a36c:	ee17 3a90 	vmov	r3, s15
 800a370:	4618      	mov	r0, r3
 800a372:	f7f6 f8e9 	bl	8000548 <__aeabi_f2d>
 800a376:	4604      	mov	r4, r0
 800a378:	460d      	mov	r5, r1
 800a37a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a37e:	eef1 7a67 	vneg.f32	s15, s15
 800a382:	ee17 3a90 	vmov	r3, s15
 800a386:	4618      	mov	r0, r3
 800a388:	f7f6 f8de 	bl	8000548 <__aeabi_f2d>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	ec43 2b10 	vmov	d0, r2, r3
 800a394:	f015 fae4 	bl	801f960 <cos>
 800a398:	ec53 2b10 	vmov	r2, r3, d0
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f6 f92a 	bl	80005f8 <__aeabi_dmul>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4690      	mov	r8, r2
 800a3aa:	4699      	mov	r9, r3
			+ (act_forward * -sin(-rel_angle)));
 800a3ac:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a3ae:	f7f6 f8cb 	bl	8000548 <__aeabi_f2d>
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	460d      	mov	r5, r1
 800a3b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a3b8:	f7f6 f8c6 	bl	8000548 <__aeabi_f2d>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	ec43 2b10 	vmov	d0, r2, r3
 800a3c4:	f015 fb20 	bl	801fa08 <sin>
 800a3c8:	ec53 2b10 	vmov	r2, r3, d0
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	f7f6 f912 	bl	80005f8 <__aeabi_dmul>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4640      	mov	r0, r8
 800a3da:	4649      	mov	r1, r9
 800a3dc:	f7f5 ff56 	bl	800028c <__adddf3>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
	float rel_horizontal = ((-act_horizontal * cos(-rel_angle))
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	f7f6 fbfe 	bl	8000be8 <__aeabi_d2f>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	647b      	str	r3, [r7, #68]	; 0x44
	float rel_yaw = act_yaw;
 800a3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3f2:	643b      	str	r3, [r7, #64]	; 0x40



	translation_rpm[0] = ((rel_forward * FR_VY_MULT)
 800a3f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a3f8:	eeb1 7a67 	vneg.f32	s14, s15
			+ (rel_horizontal * FR_VX_MULT));
 800a3fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a400:	ee77 7a67 	vsub.f32	s15, s14, s15
	translation_rpm[0] = ((rel_forward * FR_VY_MULT)
 800a404:	edc7 7a08 	vstr	s15, [r7, #32]
	yaw_rpm[0] =
			rel_yaw * motor_yaw_mult[0] * CHASSIS_YAW_MAX_RPM;
 800a408:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <chassis_motion_control+0x400>)
 800a40a:	ed93 7a00 	vldr	s14, [r3]
 800a40e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800a412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a416:	e013      	b.n	800a440 <chassis_motion_control+0x404>
 800a418:	20002aac 	.word	0x20002aac
 800a41c:	20002808 	.word	0x20002808
 800a420:	20002a9c 	.word	0x20002a9c
 800a424:	447a0000 	.word	0x447a0000
 800a428:	457a0000 	.word	0x457a0000
 800a42c:	200027ac 	.word	0x200027ac
 800a430:	20002aa0 	.word	0x20002aa0
 800a434:	20002aa4 	.word	0x20002aa4
 800a438:	20002aa8 	.word	0x20002aa8
 800a43c:	20002a8c 	.word	0x20002a8c
	yaw_rpm[0] =
 800a440:	edc7 7a04 	vstr	s15, [r7, #16]
	translation_rpm[1] = ((rel_forward * FL_VY_MULT)
			+ (rel_horizontal * FL_VX_MULT));
 800a444:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a448:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a44c:	ee77 7a67 	vsub.f32	s15, s14, s15
	translation_rpm[1] = ((rel_forward * FL_VY_MULT)
 800a450:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	yaw_rpm[1] =
			rel_yaw * motor_yaw_mult[1] * CHASSIS_YAW_MAX_RPM;
 800a454:	4b8d      	ldr	r3, [pc, #564]	; (800a68c <chassis_motion_control+0x650>)
 800a456:	ed93 7a01 	vldr	s14, [r3, #4]
 800a45a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800a45e:	ee67 7a27 	vmul.f32	s15, s14, s15
	yaw_rpm[1] =
 800a462:	edc7 7a05 	vstr	s15, [r7, #20]
	translation_rpm[2] = ((rel_forward * BL_VY_MULT)
			+ (rel_horizontal * BL_VX_MULT));
 800a466:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a46a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a46e:	ee77 7a27 	vadd.f32	s15, s14, s15
	translation_rpm[2] = ((rel_forward * BL_VY_MULT)
 800a472:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	yaw_rpm[2] =
			rel_yaw * motor_yaw_mult[2] * CHASSIS_YAW_MAX_RPM;
 800a476:	4b85      	ldr	r3, [pc, #532]	; (800a68c <chassis_motion_control+0x650>)
 800a478:	ed93 7a02 	vldr	s14, [r3, #8]
 800a47c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800a480:	ee67 7a27 	vmul.f32	s15, s14, s15
	yaw_rpm[2] =
 800a484:	edc7 7a06 	vstr	s15, [r7, #24]
	translation_rpm[3] = ((rel_forward * BR_VY_MULT)
			+ (rel_horizontal * BR_VX_MULT));
 800a488:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a48c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a490:	ee77 7a67 	vsub.f32	s15, s14, s15
	translation_rpm[3] = ((rel_forward * BR_VY_MULT)
 800a494:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	yaw_rpm[3] =
			rel_yaw * motor_yaw_mult[3] * CHASSIS_YAW_MAX_RPM;
 800a498:	4b7c      	ldr	r3, [pc, #496]	; (800a68c <chassis_motion_control+0x650>)
 800a49a:	ed93 7a03 	vldr	s14, [r3, #12]
 800a49e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800a4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
	yaw_rpm[3] =
 800a4a6:	edc7 7a07 	vstr	s15, [r7, #28]

	float rpm_mult = 0.0;
 800a4aa:	f04f 0300 	mov.w	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	float yaw_scale = 1;
 800a4b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a4b4:	66bb      	str	r3, [r7, #104]	; 0x68
	float trans_scale = 1;
 800a4b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a4ba:	667b      	str	r3, [r7, #100]	; 0x64
	for (uint8_t i = 0; i < 4; i++) {
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800a4c2:	e0d6      	b.n	800a672 <chassis_motion_control+0x636>
		float abs_total = fabs(translation_rpm[i] + yaw_rpm[i]);
 800a4c4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	3380      	adds	r3, #128	; 0x80
 800a4cc:	443b      	add	r3, r7
 800a4ce:	3b60      	subs	r3, #96	; 0x60
 800a4d0:	ed93 7a00 	vldr	s14, [r3]
 800a4d4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	3380      	adds	r3, #128	; 0x80
 800a4dc:	443b      	add	r3, r7
 800a4de:	3b70      	subs	r3, #112	; 0x70
 800a4e0:	edd3 7a00 	vldr	s15, [r3]
 800a4e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4e8:	eef0 7ae7 	vabs.f32	s15, s15
 800a4ec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		float abs_yaw = fabs(yaw_rpm[i]);
 800a4f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	3380      	adds	r3, #128	; 0x80
 800a4f8:	443b      	add	r3, r7
 800a4fa:	3b70      	subs	r3, #112	; 0x70
 800a4fc:	edd3 7a00 	vldr	s15, [r3]
 800a500:	eef0 7ae7 	vabs.f32	s15, s15
 800a504:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		float abs_trans = fabs(translation_rpm[i]);
 800a508:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	3380      	adds	r3, #128	; 0x80
 800a510:	443b      	add	r3, r7
 800a512:	3b60      	subs	r3, #96	; 0x60
 800a514:	edd3 7a00 	vldr	s15, [r3]
 800a518:	eef0 7ae7 	vabs.f32	s15, s15
 800a51c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		if (abs_total > 1) {
 800a520:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a530:	f340 809a 	ble.w	800a668 <chassis_motion_control+0x62c>
			if (abs_trans < CHASSIS_TRANS_PRIO) {
 800a534:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a538:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a53c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a544:	d51a      	bpl.n	800a57c <chassis_motion_control+0x540>
				if (1 - abs_trans < yaw_scale) {
 800a546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a54a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a54e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a552:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55e:	f340 8083 	ble.w	800a668 <chassis_motion_control+0x62c>
					yaw_scale = (1 - abs_trans) / abs_yaw;
 800a562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a566:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a56a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a56e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a576:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800a57a:	e075      	b.n	800a668 <chassis_motion_control+0x62c>
				}
			} else if (abs_yaw < CHASSIS_YAW_PRIO) {
 800a57c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a580:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a584:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58c:	d519      	bpl.n	800a5c2 <chassis_motion_control+0x586>
				if ((1 - abs_yaw) < trans_scale) {
 800a58e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a592:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a59a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800a59e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a6:	dd5f      	ble.n	800a668 <chassis_motion_control+0x62c>
					trans_scale = (1 - abs_yaw) / abs_trans;
 800a5a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a5b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a5b4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a5b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5bc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 800a5c0:	e052      	b.n	800a668 <chassis_motion_control+0x62c>
				}
			} else {
				if ((CHASSIS_YAW_PRIO / abs_yaw) < yaw_scale) {
 800a5c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a5c4:	f7f5 ffc0 	bl	8000548 <__aeabi_f2d>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	f04f 0000 	mov.w	r0, #0
 800a5d0:	492f      	ldr	r1, [pc, #188]	; (800a690 <chassis_motion_control+0x654>)
 800a5d2:	f7f6 f93b 	bl	800084c <__aeabi_ddiv>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4614      	mov	r4, r2
 800a5dc:	461d      	mov	r5, r3
 800a5de:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a5e0:	f7f5 ffb2 	bl	8000548 <__aeabi_f2d>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	f7f6 fa76 	bl	8000adc <__aeabi_dcmplt>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d007      	beq.n	800a606 <chassis_motion_control+0x5ca>
					yaw_scale = CHASSIS_YAW_PRIO / abs_yaw;
 800a5f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a5fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a5fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a602:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				}
				if (translation_rpm[i] > CHASSIS_TRANS_PRIO) {
 800a606:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	3380      	adds	r3, #128	; 0x80
 800a60e:	443b      	add	r3, r7
 800a610:	3b60      	subs	r3, #96	; 0x60
 800a612:	edd3 7a00 	vldr	s15, [r3]
 800a616:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a61a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a622:	dd21      	ble.n	800a668 <chassis_motion_control+0x62c>
					if (CHASSIS_TRANS_PRIO / abs_trans < trans_scale) {
 800a624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a626:	f7f5 ff8f 	bl	8000548 <__aeabi_f2d>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	f04f 0000 	mov.w	r0, #0
 800a632:	4917      	ldr	r1, [pc, #92]	; (800a690 <chassis_motion_control+0x654>)
 800a634:	f7f6 f90a 	bl	800084c <__aeabi_ddiv>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4614      	mov	r4, r2
 800a63e:	461d      	mov	r5, r3
 800a640:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a642:	f7f5 ff81 	bl	8000548 <__aeabi_f2d>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	4620      	mov	r0, r4
 800a64c:	4629      	mov	r1, r5
 800a64e:	f7f6 fa45 	bl	8000adc <__aeabi_dcmplt>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d007      	beq.n	800a668 <chassis_motion_control+0x62c>
						trans_scale = CHASSIS_TRANS_PRIO / abs_trans;
 800a658:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a65c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a664:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	for (uint8_t i = 0; i < 4; i++) {
 800a668:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a66c:	3301      	adds	r3, #1
 800a66e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800a672:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a676:	2b03      	cmp	r3, #3
 800a678:	f67f af24 	bls.w	800a4c4 <chassis_motion_control+0x488>
					}
				}
			}
		}
	}
	g_chassis_yaw = yaw_scale;
 800a67c:	4a05      	ldr	r2, [pc, #20]	; (800a694 <chassis_motion_control+0x658>)
 800a67e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a680:	6013      	str	r3, [r2, #0]

	for (uint8_t j = 0; j < 4; j++) {
 800a682:	2300      	movs	r3, #0
 800a684:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800a688:	e034      	b.n	800a6f4 <chassis_motion_control+0x6b8>
 800a68a:	bf00      	nop
 800a68c:	20002a8c 	.word	0x20002a8c
 800a690:	3fe00000 	.word	0x3fe00000
 800a694:	20002a88 	.word	0x20002a88
		translation_rpm[j] = (translation_rpm[j] * trans_scale
 800a698:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	3380      	adds	r3, #128	; 0x80
 800a6a0:	443b      	add	r3, r7
 800a6a2:	3b60      	subs	r3, #96	; 0x60
 800a6a4:	ed93 7a00 	vldr	s14, [r3]
 800a6a8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a6ac:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ yaw_rpm[j] * yaw_scale ) * chassis_rpm;
 800a6b0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	3380      	adds	r3, #128	; 0x80
 800a6b8:	443b      	add	r3, r7
 800a6ba:	3b70      	subs	r3, #112	; 0x70
 800a6bc:	edd3 6a00 	vldr	s13, [r3]
 800a6c0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a6c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6ce:	ee07 3a90 	vmov	s15, r3
 800a6d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		translation_rpm[j] = (translation_rpm[j] * trans_scale
 800a6d6:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
				+ yaw_rpm[j] * yaw_scale ) * chassis_rpm;
 800a6da:	ee67 7a27 	vmul.f32	s15, s14, s15
		translation_rpm[j] = (translation_rpm[j] * trans_scale
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	3380      	adds	r3, #128	; 0x80
 800a6e2:	443b      	add	r3, r7
 800a6e4:	3b60      	subs	r3, #96	; 0x60
 800a6e6:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t j = 0; j < 4; j++) {
 800a6ea:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800a6f4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d9cd      	bls.n	800a698 <chassis_motion_control+0x65c>
	}

	motorfr->rpm_pid.max_out = chassis_current;
 800a6fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motorfl->rpm_pid.max_out = chassis_current;
 800a70c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a70e:	ee07 3a90 	vmov	s15, r3
 800a712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motorbl->rpm_pid.max_out = chassis_current;
 800a71c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motorbr->rpm_pid.max_out = chassis_current;
 800a72c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	speed_pid(translation_rpm[0], motorfr->raw_data.rpm,
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	4618      	mov	r0, r3
 800a740:	f7f5 ff02 	bl	8000548 <__aeabi_f2d>
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7f5 fee8 	bl	8000524 <__aeabi_i2d>
 800a754:	4680      	mov	r8, r0
 800a756:	4689      	mov	r9, r1
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	3310      	adds	r3, #16
 800a75c:	4618      	mov	r0, r3
 800a75e:	ec49 8b11 	vmov	d1, r8, r9
 800a762:	ec45 4b10 	vmov	d0, r4, r5
 800a766:	f7ff f829 	bl	80097bc <speed_pid>
			&motorfr->rpm_pid);
	total_power += fabs(motorfr->rpm_pid.output);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a770:	eef0 7ae7 	vabs.f32	s15, s15
 800a774:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a77c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	speed_pid(translation_rpm[1], motorfl->raw_data.rpm,
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	4618      	mov	r0, r3
 800a784:	f7f5 fee0 	bl	8000548 <__aeabi_f2d>
 800a788:	4604      	mov	r4, r0
 800a78a:	460d      	mov	r5, r1
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a792:	4618      	mov	r0, r3
 800a794:	f7f5 fec6 	bl	8000524 <__aeabi_i2d>
 800a798:	4680      	mov	r8, r0
 800a79a:	4689      	mov	r9, r1
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	3310      	adds	r3, #16
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	ec49 8b11 	vmov	d1, r8, r9
 800a7a6:	ec45 4b10 	vmov	d0, r4, r5
 800a7aa:	f7ff f807 	bl	80097bc <speed_pid>
			&motorfl->rpm_pid);
	total_power += fabs(motorfl->rpm_pid.output);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a7b4:	eef0 7ae7 	vabs.f32	s15, s15
 800a7b8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a7bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7c0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	speed_pid(translation_rpm[2], motorbl->raw_data.rpm,
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7f5 febe 	bl	8000548 <__aeabi_f2d>
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7f5 fea4 	bl	8000524 <__aeabi_i2d>
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4689      	mov	r9, r1
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3310      	adds	r3, #16
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	ec49 8b11 	vmov	d1, r8, r9
 800a7ea:	ec45 4b10 	vmov	d0, r4, r5
 800a7ee:	f7fe ffe5 	bl	80097bc <speed_pid>
			&motorbl->rpm_pid);
	total_power += fabs(motorbl->rpm_pid.output);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a7f8:	eef0 7ae7 	vabs.f32	s15, s15
 800a7fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a800:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a804:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	speed_pid(translation_rpm[3], motorbr->raw_data.rpm,
 800a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7f5 fe9c 	bl	8000548 <__aeabi_f2d>
 800a810:	4604      	mov	r4, r0
 800a812:	460d      	mov	r5, r1
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7f5 fe82 	bl	8000524 <__aeabi_i2d>
 800a820:	4680      	mov	r8, r0
 800a822:	4689      	mov	r9, r1
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	3310      	adds	r3, #16
 800a828:	4618      	mov	r0, r3
 800a82a:	ec49 8b11 	vmov	d1, r8, r9
 800a82e:	ec45 4b10 	vmov	d0, r4, r5
 800a832:	f7fe ffc3 	bl	80097bc <speed_pid>
			&motorbr->rpm_pid);
	total_power += fabs(motorbr->rpm_pid.output);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a83c:	eef0 7ae7 	vabs.f32	s15, s15
 800a840:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a844:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a848:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
//		motorfl->rpm_pid.output *= power_ratio;
//		motorbl->rpm_pid.output *= power_ratio;
//		motorbr->rpm_pid.output *= power_ratio;
//	}

	motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, BL_MOTOR_ID,
 800a84c:	230f      	movs	r3, #15
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	2310      	movs	r3, #16
 800a852:	220d      	movs	r2, #13
 800a854:	210e      	movs	r1, #14
 800a856:	4804      	ldr	r0, [pc, #16]	; (800a868 <chassis_motion_control+0x82c>)
 800a858:	f7ff f872 	bl	8009940 <motor_send_can>
	BR_MOTOR_ID);
}
 800a85c:	bf00      	nop
 800a85e:	3780      	adds	r7, #128	; 0x80
 800a860:	46bd      	mov	sp, r7
 800a862:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a866:	bf00      	nop
 800a868:	2000184c 	.word	0x2000184c

0800a86c <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	ed87 0a01 	vstr	s0, [r7, #4]
 800a876:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 800a878:	edd7 7a01 	vldr	s15, [r7, #4]
 800a87c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a884:	db0a      	blt.n	800a89c <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800a886:	ed97 0a01 	vldr	s0, [r7, #4]
 800a88a:	f015 f977 	bl	801fb7c <sqrtf>
 800a88e:	eef0 7a40 	vmov.f32	s15, s0
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800a898:	2300      	movs	r3, #0
 800a89a:	e005      	b.n	800a8a8 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	f04f 0200 	mov.w	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800a8a4:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <referee_processing_task>:
ref_magazine_data_t ref_mag_data;
uint32_t ref_mag_data_txno = 0;
uint8_t g_ref_tx_seq = 0;


void referee_processing_task(void *argument) {
 800a8b0:	b5b0      	push	{r4, r5, r7, lr}
 800a8b2:	b0ca      	sub	sp, #296	; 0x128
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800a8ba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800a8be:	6018      	str	r0, [r3, #0]
	referee_limiters.robot_level = 0;
 800a8c0:	4ba0      	ldr	r3, [pc, #640]	; (800ab44 <referee_processing_task+0x294>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	731a      	strb	r2, [r3, #12]
	queue_t referee_uart_q;
	uint8_t ref_buffer[2];
	ref_processing_status_t proc_status;
	referee_limiters.feeding_speed = LV1_FEEDER;
 800a8c6:	4b9f      	ldr	r3, [pc, #636]	; (800ab44 <referee_processing_task+0x294>)
 800a8c8:	f44f 7252 	mov.w	r2, #840	; 0x348
 800a8cc:	801a      	strh	r2, [r3, #0]
	referee_limiters.projectile_speed = LV1_PROJECTILE;
 800a8ce:	4b9d      	ldr	r3, [pc, #628]	; (800ab44 <referee_processing_task+0x294>)
 800a8d0:	220d      	movs	r2, #13
 800a8d2:	805a      	strh	r2, [r3, #2]
	referee_limiters.wheel_power_limit = LV1_POWER * CHASSIS_POWER_MULT;
 800a8d4:	4b9b      	ldr	r3, [pc, #620]	; (800ab44 <referee_processing_task+0x294>)
 800a8d6:	4a9c      	ldr	r2, [pc, #624]	; (800ab48 <referee_processing_task+0x298>)
 800a8d8:	605a      	str	r2, [r3, #4]
	referee_limiters.robot_level = 1;
 800a8da:	4b9a      	ldr	r3, [pc, #616]	; (800ab44 <referee_processing_task+0x294>)
 800a8dc:	2201      	movs	r2, #1
 800a8de:	731a      	strb	r2, [r3, #12]
	status_led(7, on_led);
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	2007      	movs	r0, #7
 800a8e4:	f7f7 fb78 	bl	8001fd8 <status_led>
	status_led(8, off_led);
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	2008      	movs	r0, #8
 800a8ec:	f7f7 fb74 	bl	8001fd8 <status_led>
	uint8_t graphic_sent = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	ref_robot_data.robot_id = 0;
 800a8f6:	4b95      	ldr	r3, [pc, #596]	; (800ab4c <referee_processing_task+0x29c>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
	ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800a8fc:	f107 030c 	add.w	r3, r7, #12
 800a900:	f107 0108 	add.w	r1, r7, #8
 800a904:	2202      	movs	r2, #2
 800a906:	4892      	ldr	r0, [pc, #584]	; (800ab50 <referee_processing_task+0x2a0>)
 800a908:	f7f8 f97a 	bl	8002c00 <ref_usart_start>
	while (1) {
//			uint32_t ref_check = ulTaskNotifyTake(pdTRUE, 5);
		status_led(5, on_led);
 800a90c:	2100      	movs	r1, #0
 800a90e:	2005      	movs	r0, #5
 800a910:	f7f7 fb62 	bl	8001fd8 <status_led>
		if (queue_get_size(&referee_uart_q) > 7) {
 800a914:	f107 030c 	add.w	r3, r7, #12
 800a918:	4618      	mov	r0, r3
 800a91a:	f7f7 fddc 	bl	80024d6 <queue_get_size>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b07      	cmp	r3, #7
 800a922:	f240 80c1 	bls.w	800aaa8 <referee_processing_task+0x1f8>
			while (queue_get_size(&referee_uart_q) > 7) {
 800a926:	e0b4      	b.n	800aa92 <referee_processing_task+0x1e2>
				proc_status = ref_process_data(&referee_uart_q, &msg_buffer);
 800a928:	f107 030c 	add.w	r3, r7, #12
 800a92c:	4989      	ldr	r1, [pc, #548]	; (800ab54 <referee_processing_task+0x2a4>)
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f7 fdde 	bl	80024f0 <ref_process_data>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				if (proc_status == PROCESS_SUCCESS) {
 800a93a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f040 80a3 	bne.w	800aa8a <referee_processing_task+0x1da>
					switch (msg_buffer.cmd_id) {
 800a944:	4b83      	ldr	r3, [pc, #524]	; (800ab54 <referee_processing_task+0x2a4>)
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800a94c:	f300 809b 	bgt.w	800aa86 <referee_processing_task+0x1d6>
 800a950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a954:	dc04      	bgt.n	800a960 <referee_processing_task+0xb0>
 800a956:	2b01      	cmp	r3, #1
 800a958:	d029      	beq.n	800a9ae <referee_processing_task+0xfe>
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d073      	beq.n	800aa46 <referee_processing_task+0x196>
								sizeof(ref_magazine_data_t));
						ref_mag_data_txno++;
						//add in the memcpys here
						break;
					default:
						break;
 800a95e:	e092      	b.n	800aa86 <referee_processing_task+0x1d6>
					switch (msg_buffer.cmd_id) {
 800a960:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800a964:	2b07      	cmp	r3, #7
 800a966:	f200 808e 	bhi.w	800aa86 <referee_processing_task+0x1d6>
 800a96a:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <referee_processing_task+0xc0>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a9c9 	.word	0x0800a9c9
 800a974:	0800aa15 	.word	0x0800aa15
 800a978:	0800a9f7 	.word	0x0800a9f7
 800a97c:	0800aa87 	.word	0x0800aa87
 800a980:	0800aa87 	.word	0x0800aa87
 800a984:	0800aa33 	.word	0x0800aa33
 800a988:	0800a991 	.word	0x0800a991
 800a98c:	0800aa6d 	.word	0x0800aa6d
						memcpy(&ref_shoot_data, &msg_buffer.data,
 800a990:	4a71      	ldr	r2, [pc, #452]	; (800ab58 <referee_processing_task+0x2a8>)
 800a992:	4b70      	ldr	r3, [pc, #448]	; (800ab54 <referee_processing_task+0x2a4>)
 800a994:	3302      	adds	r3, #2
 800a996:	6818      	ldr	r0, [r3, #0]
 800a998:	6010      	str	r0, [r2, #0]
 800a99a:	8899      	ldrh	r1, [r3, #4]
 800a99c:	799b      	ldrb	r3, [r3, #6]
 800a99e:	8091      	strh	r1, [r2, #4]
 800a9a0:	7193      	strb	r3, [r2, #6]
						ref_shoot_data_txno++;
 800a9a2:	4b6e      	ldr	r3, [pc, #440]	; (800ab5c <referee_processing_task+0x2ac>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	4a6c      	ldr	r2, [pc, #432]	; (800ab5c <referee_processing_task+0x2ac>)
 800a9aa:	6013      	str	r3, [r2, #0]
						break;
 800a9ac:	e071      	b.n	800aa92 <referee_processing_task+0x1e2>
							memcpy(&ref_game_state, &msg_buffer.data,
 800a9ae:	4a6c      	ldr	r2, [pc, #432]	; (800ab60 <referee_processing_task+0x2b0>)
 800a9b0:	4b68      	ldr	r3, [pc, #416]	; (800ab54 <referee_processing_task+0x2a4>)
 800a9b2:	3302      	adds	r3, #2
 800a9b4:	8819      	ldrh	r1, [r3, #0]
 800a9b6:	789b      	ldrb	r3, [r3, #2]
 800a9b8:	8011      	strh	r1, [r2, #0]
 800a9ba:	7093      	strb	r3, [r2, #2]
							ref_game_state_txno++;
 800a9bc:	4b69      	ldr	r3, [pc, #420]	; (800ab64 <referee_processing_task+0x2b4>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	4a68      	ldr	r2, [pc, #416]	; (800ab64 <referee_processing_task+0x2b4>)
 800a9c4:	6013      	str	r3, [r2, #0]
							break;
 800a9c6:	e064      	b.n	800aa92 <referee_processing_task+0x1e2>
						memcpy(&ref_robot_data, &msg_buffer.data,
 800a9c8:	4a60      	ldr	r2, [pc, #384]	; (800ab4c <referee_processing_task+0x29c>)
 800a9ca:	4b62      	ldr	r3, [pc, #392]	; (800ab54 <referee_processing_task+0x2a4>)
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	1c9d      	adds	r5, r3, #2
 800a9d0:	6828      	ldr	r0, [r5, #0]
 800a9d2:	6869      	ldr	r1, [r5, #4]
 800a9d4:	68aa      	ldr	r2, [r5, #8]
 800a9d6:	68eb      	ldr	r3, [r5, #12]
 800a9d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9da:	6928      	ldr	r0, [r5, #16]
 800a9dc:	6969      	ldr	r1, [r5, #20]
 800a9de:	c403      	stmia	r4!, {r0, r1}
 800a9e0:	8b2b      	ldrh	r3, [r5, #24]
 800a9e2:	7eaa      	ldrb	r2, [r5, #26]
 800a9e4:	8023      	strh	r3, [r4, #0]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	70a3      	strb	r3, [r4, #2]
						ref_robot_data_txno++;
 800a9ea:	4b5f      	ldr	r3, [pc, #380]	; (800ab68 <referee_processing_task+0x2b8>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	4a5d      	ldr	r2, [pc, #372]	; (800ab68 <referee_processing_task+0x2b8>)
 800a9f2:	6013      	str	r3, [r2, #0]
						break;
 800a9f4:	e04d      	b.n	800aa92 <referee_processing_task+0x1e2>
						memcpy(&ref_robot_pos, &msg_buffer.data,
 800a9f6:	4a5d      	ldr	r2, [pc, #372]	; (800ab6c <referee_processing_task+0x2bc>)
 800a9f8:	4b56      	ldr	r3, [pc, #344]	; (800ab54 <referee_processing_task+0x2a4>)
 800a9fa:	4614      	mov	r4, r2
 800a9fc:	3302      	adds	r3, #2
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	6859      	ldr	r1, [r3, #4]
 800aa02:	689a      	ldr	r2, [r3, #8]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
						ref_robot_pos_txno++;
 800aa08:	4b59      	ldr	r3, [pc, #356]	; (800ab70 <referee_processing_task+0x2c0>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	4a58      	ldr	r2, [pc, #352]	; (800ab70 <referee_processing_task+0x2c0>)
 800aa10:	6013      	str	r3, [r2, #0]
						break;
 800aa12:	e03e      	b.n	800aa92 <referee_processing_task+0x1e2>
						memcpy(&ref_power_data, &msg_buffer.data,
 800aa14:	4b57      	ldr	r3, [pc, #348]	; (800ab74 <referee_processing_task+0x2c4>)
 800aa16:	4a4f      	ldr	r2, [pc, #316]	; (800ab54 <referee_processing_task+0x2a4>)
 800aa18:	1c94      	adds	r4, r2, #2
 800aa1a:	6820      	ldr	r0, [r4, #0]
 800aa1c:	6861      	ldr	r1, [r4, #4]
 800aa1e:	68a2      	ldr	r2, [r4, #8]
 800aa20:	c307      	stmia	r3!, {r0, r1, r2}
 800aa22:	89a2      	ldrh	r2, [r4, #12]
 800aa24:	801a      	strh	r2, [r3, #0]
						ref_power_data_txno++;
 800aa26:	4b54      	ldr	r3, [pc, #336]	; (800ab78 <referee_processing_task+0x2c8>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	4a52      	ldr	r2, [pc, #328]	; (800ab78 <referee_processing_task+0x2c8>)
 800aa2e:	6013      	str	r3, [r2, #0]
						break;
 800aa30:	e02f      	b.n	800aa92 <referee_processing_task+0x1e2>
 800aa32:	4b48      	ldr	r3, [pc, #288]	; (800ab54 <referee_processing_task+0x2a4>)
 800aa34:	789a      	ldrb	r2, [r3, #2]
						memcpy(&ref_dmg_data, &msg_buffer.data,
 800aa36:	4b51      	ldr	r3, [pc, #324]	; (800ab7c <referee_processing_task+0x2cc>)
 800aa38:	701a      	strb	r2, [r3, #0]
						ref_dmg_data_txno++;
 800aa3a:	4b51      	ldr	r3, [pc, #324]	; (800ab80 <referee_processing_task+0x2d0>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	4a4f      	ldr	r2, [pc, #316]	; (800ab80 <referee_processing_task+0x2d0>)
 800aa42:	6013      	str	r3, [r2, #0]
						break;
 800aa44:	e025      	b.n	800aa92 <referee_processing_task+0x1e2>
						memcpy(&ref_robot_hp, &msg_buffer.data,
 800aa46:	4a4f      	ldr	r2, [pc, #316]	; (800ab84 <referee_processing_task+0x2d4>)
 800aa48:	4b42      	ldr	r3, [pc, #264]	; (800ab54 <referee_processing_task+0x2a4>)
 800aa4a:	4614      	mov	r4, r2
 800aa4c:	1c9d      	adds	r5, r3, #2
 800aa4e:	6828      	ldr	r0, [r5, #0]
 800aa50:	6869      	ldr	r1, [r5, #4]
 800aa52:	68aa      	ldr	r2, [r5, #8]
 800aa54:	68eb      	ldr	r3, [r5, #12]
 800aa56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa58:	6928      	ldr	r0, [r5, #16]
 800aa5a:	6969      	ldr	r1, [r5, #20]
 800aa5c:	69aa      	ldr	r2, [r5, #24]
 800aa5e:	c407      	stmia	r4!, {r0, r1, r2}
						ref_robot_hp_txno++;
 800aa60:	4b49      	ldr	r3, [pc, #292]	; (800ab88 <referee_processing_task+0x2d8>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3301      	adds	r3, #1
 800aa66:	4a48      	ldr	r2, [pc, #288]	; (800ab88 <referee_processing_task+0x2d8>)
 800aa68:	6013      	str	r3, [r2, #0]
						break;
 800aa6a:	e012      	b.n	800aa92 <referee_processing_task+0x1e2>
						memcpy(&ref_mag_data, &msg_buffer.data,
 800aa6c:	4a47      	ldr	r2, [pc, #284]	; (800ab8c <referee_processing_task+0x2dc>)
 800aa6e:	4b39      	ldr	r3, [pc, #228]	; (800ab54 <referee_processing_task+0x2a4>)
 800aa70:	3302      	adds	r3, #2
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	6010      	str	r0, [r2, #0]
 800aa76:	889b      	ldrh	r3, [r3, #4]
 800aa78:	8093      	strh	r3, [r2, #4]
						ref_mag_data_txno++;
 800aa7a:	4b45      	ldr	r3, [pc, #276]	; (800ab90 <referee_processing_task+0x2e0>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	4a43      	ldr	r2, [pc, #268]	; (800ab90 <referee_processing_task+0x2e0>)
 800aa82:	6013      	str	r3, [r2, #0]
						break;
 800aa84:	e005      	b.n	800aa92 <referee_processing_task+0x1e2>
						break;
 800aa86:	bf00      	nop
 800aa88:	e003      	b.n	800aa92 <referee_processing_task+0x1e2>
					}
//						if (msg_buffer.cmd_id == REF_ROBOT_SHOOT_DATA_CMD_ID){
//							xQueueSend(uart_data_queue, &msg_buffer, 0);
//						}
				} else if (proc_status == INSUFFICIENT_DATA) {
 800aa8a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d009      	beq.n	800aaa6 <referee_processing_task+0x1f6>
			while (queue_get_size(&referee_uart_q) > 7) {
 800aa92:	f107 030c 	add.w	r3, r7, #12
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7f7 fd1d 	bl	80024d6 <queue_get_size>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b07      	cmp	r3, #7
 800aaa0:	f63f af42 	bhi.w	800a928 <referee_processing_task+0x78>
 800aaa4:	e000      	b.n	800aaa8 <referee_processing_task+0x1f8>
					break;
 800aaa6:	bf00      	nop
				}
			}
		}

		status_led(5, off_led);
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	2005      	movs	r0, #5
 800aaac:	f7f7 fa94 	bl	8001fd8 <status_led>
		static uint32_t last_sent;

		status_led(5, on_led);
 800aab0:	2100      	movs	r1, #0
 800aab2:	2005      	movs	r0, #5
 800aab4:	f7f7 fa90 	bl	8001fd8 <status_led>
		if (ref_robot_data.robot_level == 1) {
 800aab8:	4b24      	ldr	r3, [pc, #144]	; (800ab4c <referee_processing_task+0x29c>)
 800aaba:	785b      	ldrb	r3, [r3, #1]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d112      	bne.n	800aae6 <referee_processing_task+0x236>
			referee_limiters.feeding_speed = LV1_FEEDER;
 800aac0:	4b20      	ldr	r3, [pc, #128]	; (800ab44 <referee_processing_task+0x294>)
 800aac2:	f44f 7252 	mov.w	r2, #840	; 0x348
 800aac6:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 800aac8:	4b1e      	ldr	r3, [pc, #120]	; (800ab44 <referee_processing_task+0x294>)
 800aaca:	220d      	movs	r2, #13
 800aacc:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 1;
 800aace:	4b1d      	ldr	r3, [pc, #116]	; (800ab44 <referee_processing_task+0x294>)
 800aad0:	2201      	movs	r2, #1
 800aad2:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800aad4:	2100      	movs	r1, #0
 800aad6:	2007      	movs	r0, #7
 800aad8:	f7f7 fa7e 	bl	8001fd8 <status_led>
			status_led(8, off_led);
 800aadc:	2101      	movs	r1, #1
 800aade:	2008      	movs	r0, #8
 800aae0:	f7f7 fa7a 	bl	8001fd8 <status_led>
 800aae4:	e05d      	b.n	800aba2 <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 2) {
 800aae6:	4b19      	ldr	r3, [pc, #100]	; (800ab4c <referee_processing_task+0x29c>)
 800aae8:	785b      	ldrb	r3, [r3, #1]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d112      	bne.n	800ab14 <referee_processing_task+0x264>
			referee_limiters.feeding_speed = LV2_FEEDER;
 800aaee:	4b15      	ldr	r3, [pc, #84]	; (800ab44 <referee_processing_task+0x294>)
 800aaf0:	f44f 7252 	mov.w	r2, #840	; 0x348
 800aaf4:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV2_PROJECTILE;
 800aaf6:	4b13      	ldr	r3, [pc, #76]	; (800ab44 <referee_processing_task+0x294>)
 800aaf8:	220d      	movs	r2, #13
 800aafa:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 2;
 800aafc:	4b11      	ldr	r3, [pc, #68]	; (800ab44 <referee_processing_task+0x294>)
 800aafe:	2202      	movs	r2, #2
 800ab00:	731a      	strb	r2, [r3, #12]
			status_led(7, off_led);
 800ab02:	2101      	movs	r1, #1
 800ab04:	2007      	movs	r0, #7
 800ab06:	f7f7 fa67 	bl	8001fd8 <status_led>
			status_led(8, on_led);
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	2008      	movs	r0, #8
 800ab0e:	f7f7 fa63 	bl	8001fd8 <status_led>
 800ab12:	e046      	b.n	800aba2 <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 3) {
 800ab14:	4b0d      	ldr	r3, [pc, #52]	; (800ab4c <referee_processing_task+0x29c>)
 800ab16:	785b      	ldrb	r3, [r3, #1]
 800ab18:	2b03      	cmp	r3, #3
 800ab1a:	d13b      	bne.n	800ab94 <referee_processing_task+0x2e4>
			referee_limiters.feeding_speed = LV3_FEEDER;
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <referee_processing_task+0x294>)
 800ab1e:	f44f 7252 	mov.w	r2, #840	; 0x348
 800ab22:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV3_PROJECTILE;
 800ab24:	4b07      	ldr	r3, [pc, #28]	; (800ab44 <referee_processing_task+0x294>)
 800ab26:	220d      	movs	r2, #13
 800ab28:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 3;
 800ab2a:	4b06      	ldr	r3, [pc, #24]	; (800ab44 <referee_processing_task+0x294>)
 800ab2c:	2203      	movs	r2, #3
 800ab2e:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800ab30:	2100      	movs	r1, #0
 800ab32:	2007      	movs	r0, #7
 800ab34:	f7f7 fa50 	bl	8001fd8 <status_led>
			status_led(8, on_led);
 800ab38:	2100      	movs	r1, #0
 800ab3a:	2008      	movs	r0, #8
 800ab3c:	f7f7 fa4c 	bl	8001fd8 <status_led>
 800ab40:	e02f      	b.n	800aba2 <referee_processing_task+0x2f2>
 800ab42:	bf00      	nop
 800ab44:	20002aac 	.word	0x20002aac
 800ab48:	42700000 	.word	0x42700000
 800ab4c:	20002b30 	.word	0x20002b30
 800ab50:	20001688 	.word	0x20001688
 800ab54:	20002ac4 	.word	0x20002ac4
 800ab58:	20002b80 	.word	0x20002b80
 800ab5c:	20002b88 	.word	0x20002b88
 800ab60:	20002b08 	.word	0x20002b08
 800ab64:	20002b0c 	.word	0x20002b0c
 800ab68:	20002b4c 	.word	0x20002b4c
 800ab6c:	20002b64 	.word	0x20002b64
 800ab70:	20002b74 	.word	0x20002b74
 800ab74:	20002b50 	.word	0x20002b50
 800ab78:	20002b60 	.word	0x20002b60
 800ab7c:	20002b78 	.word	0x20002b78
 800ab80:	20002b7c 	.word	0x20002b7c
 800ab84:	20002b10 	.word	0x20002b10
 800ab88:	20002b2c 	.word	0x20002b2c
 800ab8c:	20002b8c 	.word	0x20002b8c
 800ab90:	20002b94 	.word	0x20002b94
		} else {
			referee_limiters.feeding_speed = LV1_FEEDER;
 800ab94:	4b44      	ldr	r3, [pc, #272]	; (800aca8 <referee_processing_task+0x3f8>)
 800ab96:	f44f 7252 	mov.w	r2, #840	; 0x348
 800ab9a:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 800ab9c:	4b42      	ldr	r3, [pc, #264]	; (800aca8 <referee_processing_task+0x3f8>)
 800ab9e:	220d      	movs	r2, #13
 800aba0:	805a      	strh	r2, [r3, #2]
		}
		if (ref_robot_data.robot_level != 0) {
 800aba2:	4b42      	ldr	r3, [pc, #264]	; (800acac <referee_processing_task+0x3fc>)
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d06e      	beq.n	800ac88 <referee_processing_task+0x3d8>
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 800abaa:	4b41      	ldr	r3, [pc, #260]	; (800acb0 <referee_processing_task+0x400>)
 800abac:	891b      	ldrh	r3, [r3, #8]
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
					/ 40) + 0.01);
 800abb6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800acb4 <referee_processing_task+0x404>
 800abba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800abbe:	ee16 0a90 	vmov	r0, s13
 800abc2:	f7f5 fcc1 	bl	8000548 <__aeabi_f2d>
 800abc6:	a336      	add	r3, pc, #216	; (adr r3, 800aca0 <referee_processing_task+0x3f0>)
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	f7f5 fb5e 	bl	800028c <__adddf3>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 800abd4:	4610      	mov	r0, r2
 800abd6:	4619      	mov	r1, r3
 800abd8:	f7f6 f806 	bl	8000be8 <__aeabi_d2f>
 800abdc:	4603      	mov	r3, r0
 800abde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			temp_buffer = (temp_buffer > 1) ? 1 : temp_buffer;
 800abe2:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800abe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf2:	dd02      	ble.n	800abfa <referee_processing_task+0x34a>
 800abf4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800abf8:	e001      	b.n	800abfe <referee_processing_task+0x34e>
 800abfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800abfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			referee_limiters.wheel_buffer_limit = temp_buffer * temp_buffer;
 800ac02:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800ac06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac0a:	4b27      	ldr	r3, [pc, #156]	; (800aca8 <referee_processing_task+0x3f8>)
 800ac0c:	edc3 7a02 	vstr	s15, [r3, #8]
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 800ac10:	4b27      	ldr	r3, [pc, #156]	; (800acb0 <referee_processing_task+0x400>)
 800ac12:	ed93 7a01 	vldr	s14, [r3, #4]
 800ac16:	4b25      	ldr	r3, [pc, #148]	; (800acac <referee_processing_task+0x3fc>)
 800ac18:	8b1b      	ldrh	r3, [r3, #24]
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ac26:	ee16 0a90 	vmov	r0, s13
 800ac2a:	f7f5 fc8d 	bl	8000548 <__aeabi_f2d>
					) * 0.5) + 0.5;
 800ac2e:	f04f 0200 	mov.w	r2, #0
 800ac32:	4b21      	ldr	r3, [pc, #132]	; (800acb8 <referee_processing_task+0x408>)
 800ac34:	f7f5 fce0 	bl	80005f8 <__aeabi_dmul>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4619      	mov	r1, r3
 800ac40:	f04f 0200 	mov.w	r2, #0
 800ac44:	4b1c      	ldr	r3, [pc, #112]	; (800acb8 <referee_processing_task+0x408>)
 800ac46:	f7f5 fb21 	bl	800028c <__adddf3>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 800ac4e:	4610      	mov	r0, r2
 800ac50:	4619      	mov	r1, r3
 800ac52:	f7f5 ffc9 	bl	8000be8 <__aeabi_d2f>
 800ac56:	4603      	mov	r3, r0
 800ac58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			temp_power = (temp_power > 1) ? 1 : temp_power;
 800ac5c:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800ac60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac6c:	dd02      	ble.n	800ac74 <referee_processing_task+0x3c4>
 800ac6e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ac72:	e001      	b.n	800ac78 <referee_processing_task+0x3c8>
 800ac74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ac78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			arm_sqrt_f32(temp_power, &referee_limiters.wheel_power_limit);
 800ac7c:	480f      	ldr	r0, [pc, #60]	; (800acbc <referee_processing_task+0x40c>)
 800ac7e:	ed97 0a47 	vldr	s0, [r7, #284]	; 0x11c
 800ac82:	f7ff fdf3 	bl	800a86c <arm_sqrt_f32>
 800ac86:	e007      	b.n	800ac98 <referee_processing_task+0x3e8>
		} else {
			referee_limiters.wheel_buffer_limit = 1;
 800ac88:	4b07      	ldr	r3, [pc, #28]	; (800aca8 <referee_processing_task+0x3f8>)
 800ac8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ac8e:	609a      	str	r2, [r3, #8]
			referee_limiters.wheel_power_limit = 1;
 800ac90:	4b05      	ldr	r3, [pc, #20]	; (800aca8 <referee_processing_task+0x3f8>)
 800ac92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ac96:	605a      	str	r2, [r3, #4]

		}
		vTaskDelay(10);
 800ac98:	200a      	movs	r0, #10
 800ac9a:	f00d fcd9 	bl	8018650 <vTaskDelay>
	while (1) {
 800ac9e:	e635      	b.n	800a90c <referee_processing_task+0x5c>
 800aca0:	47ae147b 	.word	0x47ae147b
 800aca4:	3f847ae1 	.word	0x3f847ae1
 800aca8:	20002aac 	.word	0x20002aac
 800acac:	20002b30 	.word	0x20002b30
 800acb0:	20002b50 	.word	0x20002b50
 800acb4:	42200000 	.word	0x42200000
 800acb8:	3fe00000 	.word	0x3fe00000
 800acbc:	20002ab0 	.word	0x20002ab0

0800acc0 <startup_task>:
extern remote_cmd_t remote_cmd;
extern float pitch;
extern float yaw;
uint16_t error = 0b111111111;

void startup_task() {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	af00      	add	r7, sp, #0
	//todo: shift all to an actual task, reimplement motor not connected errors
	led_on();
 800acc4:	f7f7 f962 	bl	8001f8c <led_on>
	buzzer_init();
 800acc8:	f7f6 fab2 	bl	8001230 <buzzer_init>
	imu_init();
 800accc:	f7f6 ff68 	bl	8001ba0 <imu_init>
	led_green_off();
 800acd0:	f7f7 f94e 	bl	8001f70 <led_green_off>
	start_micros_timer();
 800acd4:	f7f7 fa40 	bl	8002158 <start_micros_timer>
	led_toggle();
 800acd8:	f7f7 f976 	bl	8001fc8 <led_toggle>

}
 800acdc:	bf00      	nop
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <sbc_process_data>:
sbc_data_t sbc_data;
uint8_t sbc_new_data = 0;
uint8_t sbc_dma_buffer[20];
static uint8_t sbc_error;

void sbc_process_data() {
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
	if (sbc_dma_buffer[0] == 0xa5 && sbc_dma_buffer[14] == 0x5a){
 800ace4:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <sbc_process_data+0x54>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2ba5      	cmp	r3, #165	; 0xa5
 800acea:	d119      	bne.n	800ad20 <sbc_process_data+0x40>
 800acec:	4b11      	ldr	r3, [pc, #68]	; (800ad34 <sbc_process_data+0x54>)
 800acee:	7b9b      	ldrb	r3, [r3, #14]
 800acf0:	2b5a      	cmp	r3, #90	; 0x5a
 800acf2:	d115      	bne.n	800ad20 <sbc_process_data+0x40>
		sbc_data.cmd_id = sbc_dma_buffer[1];
 800acf4:	4b0f      	ldr	r3, [pc, #60]	; (800ad34 <sbc_process_data+0x54>)
 800acf6:	785a      	ldrb	r2, [r3, #1]
 800acf8:	4b0f      	ldr	r3, [pc, #60]	; (800ad38 <sbc_process_data+0x58>)
 800acfa:	701a      	strb	r2, [r3, #0]
		memcpy(&sbc_data.data, sbc_dma_buffer+2,12);
 800acfc:	4a0f      	ldr	r2, [pc, #60]	; (800ad3c <sbc_process_data+0x5c>)
 800acfe:	4b0e      	ldr	r3, [pc, #56]	; (800ad38 <sbc_process_data+0x58>)
 800ad00:	3301      	adds	r3, #1
 800ad02:	6810      	ldr	r0, [r2, #0]
 800ad04:	6851      	ldr	r1, [r2, #4]
 800ad06:	6892      	ldr	r2, [r2, #8]
 800ad08:	6018      	str	r0, [r3, #0]
 800ad0a:	6059      	str	r1, [r3, #4]
 800ad0c:	609a      	str	r2, [r3, #8]
		sbc_new_data = 1;
 800ad0e:	4b0c      	ldr	r3, [pc, #48]	; (800ad40 <sbc_process_data+0x60>)
 800ad10:	2201      	movs	r2, #1
 800ad12:	701a      	strb	r2, [r3, #0]
		sbc_last_time = HAL_GetTick();
 800ad14:	f000 f9f2 	bl	800b0fc <HAL_GetTick>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	4a0a      	ldr	r2, [pc, #40]	; (800ad44 <sbc_process_data+0x64>)
 800ad1c:	6013      	str	r3, [r2, #0]
 800ad1e:	e006      	b.n	800ad2e <sbc_process_data+0x4e>
	} else {
		sbc_error +=1;
 800ad20:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <sbc_process_data+0x68>)
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	3301      	adds	r3, #1
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	4b07      	ldr	r3, [pc, #28]	; (800ad48 <sbc_process_data+0x68>)
 800ad2a:	701a      	strb	r2, [r3, #0]
//	queue_append_bytes(&g_sbc_queue, sbc_dma_buffer, 15);
//	BaseType_t xHigherPriorityTaskWoken;
//	xHigherPriorityTaskWoken = pdFALSE;
//	vTaskNotifyGiveFromISR(telemetry_task_handle, &xHigherPriorityTaskWoken);
//	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
 800ad2c:	bf00      	nop
 800ad2e:	bf00      	nop
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20002cbc 	.word	0x20002cbc
 800ad38:	20002cac 	.word	0x20002cac
 800ad3c:	20002cbe 	.word	0x20002cbe
 800ad40:	20002cb9 	.word	0x20002cb9
 800ad44:	20002894 	.word	0x20002894
 800ad48:	20002cd0 	.word	0x20002cd0

0800ad4c <telemetry_task>:

//lol more stuff to add
void telemetry_task(void *argument) {
 800ad4c:	b590      	push	{r4, r7, lr}
 800ad4e:	b0d3      	sub	sp, #332	; 0x14c
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ad5a:	6018      	str	r0, [r3, #0]

	uint8_t send_buffer[256];
	uint32_t curr_time = HAL_GetTick();
 800ad5c:	f000 f9ce 	bl	800b0fc <HAL_GetTick>
 800ad60:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	uint32_t game_data_time = curr_time;
 800ad64:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ad68:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint32_t imu_data_time = curr_time;
 800ad6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ad70:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	sbc_game_data_t sbc_game_tx;
	queue_init(&g_sbc_queue);
 800ad74:	4888      	ldr	r0, [pc, #544]	; (800af98 <telemetry_task+0x24c>)
 800ad76:	f7f7 fa13 	bl	80021a0 <queue_init>

	sbc_game_tx.header = 0xA5;
 800ad7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ad82:	22a5      	movs	r2, #165	; 0xa5
 800ad84:	701a      	strb	r2, [r3, #0]
	sbc_game_tx.cmd_id = 0x80;
 800ad86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ad8e:	2280      	movs	r2, #128	; 0x80
 800ad90:	705a      	strb	r2, [r3, #1]
	sbc_game_tx.team = 1;
 800ad92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	709a      	strb	r2, [r3, #2]
	sbc_game_tx.robot_id = 1;
 800ad9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ada2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ada6:	2201      	movs	r2, #1
 800ada8:	70da      	strb	r2, [r3, #3]
	sbc_game_tx.robot_level = 1;
 800adaa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800adae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800adb2:	2201      	movs	r2, #1
 800adb4:	711a      	strb	r2, [r3, #4]
	sbc_game_tx.remaining_time = 1000;
 800adb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800adba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800adbe:	2200      	movs	r2, #0
 800adc0:	f062 0217 	orn	r2, r2, #23
 800adc4:	715a      	strb	r2, [r3, #5]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f042 0203 	orr.w	r2, r2, #3
 800adcc:	719a      	strb	r2, [r3, #6]
	sbc_game_tx.ammo = 10;
 800adce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800add2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800add6:	2200      	movs	r2, #0
 800add8:	f042 020a 	orr.w	r2, r2, #10
 800addc:	71da      	strb	r2, [r3, #7]
 800adde:	2200      	movs	r2, #0
 800ade0:	721a      	strb	r2, [r3, #8]
	sbc_game_tx.end_byte = 0x5A;
 800ade2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ade6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800adea:	225a      	movs	r2, #90	; 0x5a
 800adec:	739a      	strb	r2, [r3, #14]
	sbc_game_tx.padding[0] = 0;
 800adee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800adf2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800adf6:	2200      	movs	r2, #0
 800adf8:	725a      	strb	r2, [r3, #9]
	sbc_game_tx.padding[1] = 0;
 800adfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800adfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ae02:	2200      	movs	r2, #0
 800ae04:	729a      	strb	r2, [r3, #10]
	sbc_game_tx.padding[2] = 0;
 800ae06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ae0e:	2200      	movs	r2, #0
 800ae10:	72da      	strb	r2, [r3, #11]
	sbc_game_tx.padding[3] = 0;
 800ae12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	731a      	strb	r2, [r3, #12]
	sbc_game_tx.padding[4] = 0;
 800ae1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ae26:	2200      	movs	r2, #0
 800ae28:	735a      	strb	r2, [r3, #13]

	//insert sbc control here, end byte 0x5B
	sbc_imu_data_t sbc_imu_tx;
	sbc_imu_tx.cmd_id = 0x82;
 800ae2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae32:	2282      	movs	r2, #130	; 0x82
 800ae34:	705a      	strb	r2, [r3, #1]
	sbc_imu_tx.end_byte = 0x5C;
 800ae36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae3e:	225c      	movs	r2, #92	; 0x5c
 800ae40:	739a      	strb	r2, [r3, #14]
	sbc_imu_tx.header = 0xA5;
 800ae42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae4a:	22a5      	movs	r2, #165	; 0xa5
 800ae4c:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buffer[15];;
				init_xvr_usart(sbc_dma_buffer);
 800ae4e:	4853      	ldr	r0, [pc, #332]	; (800af9c <telemetry_task+0x250>)
 800ae50:	f7f7 fe3a 	bl	8002ac8 <init_xvr_usart>
//					break;
//				}
//			}
//		}

		if (ref_robot_data.robot_id != 0){
 800ae54:	4b52      	ldr	r3, [pc, #328]	; (800afa0 <telemetry_task+0x254>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d047      	beq.n	800aeec <telemetry_task+0x1a0>
			sbc_game_tx.team = (ref_robot_data.robot_id < 100) ? 1 : 0;
 800ae5c:	4b50      	ldr	r3, [pc, #320]	; (800afa0 <telemetry_task+0x254>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	2b63      	cmp	r3, #99	; 0x63
 800ae62:	bf94      	ite	ls
 800ae64:	2301      	movls	r3, #1
 800ae66:	2300      	movhi	r3, #0
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ae74:	709a      	strb	r2, [r3, #2]
			sbc_game_tx.robot_id = ref_robot_data.robot_id;
 800ae76:	4b4a      	ldr	r3, [pc, #296]	; (800afa0 <telemetry_task+0x254>)
 800ae78:	781a      	ldrb	r2, [r3, #0]
 800ae7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ae82:	70da      	strb	r2, [r3, #3]
			sbc_game_tx.remaining_time = ref_game_state.stage_remain_time;
 800ae84:	4b47      	ldr	r3, [pc, #284]	; (800afa4 <telemetry_task+0x258>)
 800ae86:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ae94:	f8a3 2005 	strh.w	r2, [r3, #5]
			sbc_game_tx.ammo = ref_mag_data.magazine_17mm;
 800ae98:	4b43      	ldr	r3, [pc, #268]	; (800afa8 <telemetry_task+0x25c>)
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aea2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aea6:	f8a3 2007 	strh.w	r2, [r3, #7]
			memcpy(send_buffer, &sbc_game_tx, 15);
 800aeaa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aeae:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800aeb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aeb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aeba:	4614      	mov	r4, r2
 800aebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aebe:	c407      	stmia	r4!, {r0, r1, r2}
 800aec0:	8023      	strh	r3, [r4, #0]
 800aec2:	3402      	adds	r4, #2
 800aec4:	0c1b      	lsrs	r3, r3, #16
 800aec6:	7023      	strb	r3, [r4, #0]
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800aec8:	e002      	b.n	800aed0 <telemetry_task+0x184>
				vTaskDelay(1);
 800aeca:	2001      	movs	r0, #1
 800aecc:	f00d fbc0 	bl	8018650 <vTaskDelay>
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800aed0:	4b36      	ldr	r3, [pc, #216]	; (800afac <telemetry_task+0x260>)
 800aed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b21      	cmp	r3, #33	; 0x21
 800aeda:	d0f6      	beq.n	800aeca <telemetry_task+0x17e>
			}
			HAL_UART_Transmit_IT(&SBC_UART, send_buffer, 15);
 800aedc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aee0:	220f      	movs	r2, #15
 800aee2:	4619      	mov	r1, r3
 800aee4:	4831      	ldr	r0, [pc, #196]	; (800afac <telemetry_task+0x260>)
 800aee6:	f007 fbf6 	bl	80126d6 <HAL_UART_Transmit_IT>
 800aeea:	e043      	b.n	800af74 <telemetry_task+0x228>
		} else {
			sbc_game_tx.team = 1;
 800aeec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aef0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aef4:	2201      	movs	r2, #1
 800aef6:	709a      	strb	r2, [r3, #2]
			sbc_game_tx.robot_id = 0;
 800aef8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aefc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800af00:	2200      	movs	r2, #0
 800af02:	70da      	strb	r2, [r3, #3]
			sbc_game_tx.remaining_time = 999;
 800af04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800af0c:	2200      	movs	r2, #0
 800af0e:	f062 0218 	orn	r2, r2, #24
 800af12:	715a      	strb	r2, [r3, #5]
 800af14:	2200      	movs	r2, #0
 800af16:	f042 0203 	orr.w	r2, r2, #3
 800af1a:	719a      	strb	r2, [r3, #6]
			sbc_game_tx.ammo = 999;
 800af1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800af24:	2200      	movs	r2, #0
 800af26:	f062 0218 	orn	r2, r2, #24
 800af2a:	71da      	strb	r2, [r3, #7]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f042 0203 	orr.w	r2, r2, #3
 800af32:	721a      	strb	r2, [r3, #8]
			memcpy(send_buffer, &sbc_game_tx, 15);
 800af34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af38:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800af3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800af44:	4614      	mov	r4, r2
 800af46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800af48:	c407      	stmia	r4!, {r0, r1, r2}
 800af4a:	8023      	strh	r3, [r4, #0]
 800af4c:	3402      	adds	r4, #2
 800af4e:	0c1b      	lsrs	r3, r3, #16
 800af50:	7023      	strb	r3, [r4, #0]
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800af52:	e002      	b.n	800af5a <telemetry_task+0x20e>
				vTaskDelay(1);
 800af54:	2001      	movs	r0, #1
 800af56:	f00d fb7b 	bl	8018650 <vTaskDelay>
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800af5a:	4b14      	ldr	r3, [pc, #80]	; (800afac <telemetry_task+0x260>)
 800af5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b21      	cmp	r3, #33	; 0x21
 800af64:	d0f6      	beq.n	800af54 <telemetry_task+0x208>
			}
			HAL_UART_Transmit_IT(&SBC_UART, send_buffer, 15);
 800af66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af6a:	220f      	movs	r2, #15
 800af6c:	4619      	mov	r1, r3
 800af6e:	480f      	ldr	r0, [pc, #60]	; (800afac <telemetry_task+0x260>)
 800af70:	f007 fbb1 	bl	80126d6 <HAL_UART_Transmit_IT>
		}

		if (sbc_error >= 1){
 800af74:	4b0e      	ldr	r3, [pc, #56]	; (800afb0 <telemetry_task+0x264>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d008      	beq.n	800af8e <telemetry_task+0x242>
			HAL_UART_DMAStop(&SBC_UART);
 800af7c:	480b      	ldr	r0, [pc, #44]	; (800afac <telemetry_task+0x260>)
 800af7e:	f007 fc6d 	bl	801285c <HAL_UART_DMAStop>
			init_xvr_usart(sbc_dma_buffer);
 800af82:	4806      	ldr	r0, [pc, #24]	; (800af9c <telemetry_task+0x250>)
 800af84:	f7f7 fda0 	bl	8002ac8 <init_xvr_usart>
			sbc_error = 0;
 800af88:	4b09      	ldr	r3, [pc, #36]	; (800afb0 <telemetry_task+0x264>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(1000);
 800af8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800af92:	f00d fb5d 	bl	8018650 <vTaskDelay>
		if (ref_robot_data.robot_id != 0){
 800af96:	e75d      	b.n	800ae54 <telemetry_task+0x108>
 800af98:	20002b9c 	.word	0x20002b9c
 800af9c:	20002cbc 	.word	0x20002cbc
 800afa0:	20002b30 	.word	0x20002b30
 800afa4:	20002b08 	.word	0x20002b08
 800afa8:	20002b8c 	.word	0x20002b8c
 800afac:	20001600 	.word	0x20001600
 800afb0:	20002cd0 	.word	0x20002cd0

0800afb4 <usb_vcp_processing>:
uint8_t usb_waiting = 0;

//#define DATA_OUTPUT_MODE
#define USB_CONFIG_MODE

void usb_vcp_processing(uint8_t *buffer, uint32_t *len) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b0c4      	sub	sp, #272	; 0x110
 800afb8:	af00      	add	r7, sp, #0
 800afba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800afc2:	6018      	str	r0, [r3, #0]
 800afc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800afcc:	6019      	str	r1, [r3, #0]
	uint8_t blank_buffer[MAX_CHAR_SIZE] = { 0 };
 800afce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afd2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	3304      	adds	r3, #4
 800afdc:	22fc      	movs	r2, #252	; 0xfc
 800afde:	2100      	movs	r1, #0
 800afe0:	4618      	mov	r0, r3
 800afe2:	f010 f8a6 	bl	801b132 <memset>
	memcpy(blank_buffer, buffer, *len);
 800afe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aff6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800affa:	f107 0010 	add.w	r0, r7, #16
 800affe:	6819      	ldr	r1, [r3, #0]
 800b000:	f010 f889 	bl	801b116 <memcpy>
	memcpy(usb_input_buffer, blank_buffer, MAX_CHAR_SIZE);
 800b004:	4a1a      	ldr	r2, [pc, #104]	; (800b070 <usb_vcp_processing+0xbc>)
 800b006:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b00a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b00e:	4610      	mov	r0, r2
 800b010:	4619      	mov	r1, r3
 800b012:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b016:	461a      	mov	r2, r3
 800b018:	f010 f87d 	bl	801b116 <memcpy>
	usb_input_len = *len;
 800b01c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b020:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a12      	ldr	r2, [pc, #72]	; (800b074 <usb_vcp_processing+0xc0>)
 800b02a:	6013      	str	r3, [r2, #0]

	//Check if the currently running task needs to yield
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b02c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b034:	2200      	movs	r2, #0
 800b036:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR(usb_continue_semaphore, &xHigherPriorityTaskWoken);
 800b038:	4b0f      	ldr	r3, [pc, #60]	; (800b078 <usb_vcp_processing+0xc4>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f107 020c 	add.w	r2, r7, #12
 800b040:	4611      	mov	r1, r2
 800b042:	4618      	mov	r0, r3
 800b044:	f00c fdf1 	bl	8017c2a <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800b048:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b04c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d007      	beq.n	800b066 <usb_vcp_processing+0xb2>
 800b056:	4b09      	ldr	r3, [pc, #36]	; (800b07c <usb_vcp_processing+0xc8>)
 800b058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	f3bf 8f6f 	isb	sy
}
 800b066:	bf00      	nop
 800b068:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20002cd4 	.word	0x20002cd4
 800b074:	20002dd4 	.word	0x20002dd4
 800b078:	20000478 	.word	0x20000478
 800b07c:	e000ed04 	.word	0xe000ed04

0800b080 <usb_task>:
	return 0;

}


void usb_task(void *argument) {
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
//						CDC_Transmit_FS(usb_input_buffer, len);
//					}
//				}
//			}
//		}
		vTaskDelay(100);
 800b088:	2064      	movs	r0, #100	; 0x64
 800b08a:	f00d fae1 	bl	8018650 <vTaskDelay>
 800b08e:	e7fb      	b.n	800b088 <usb_task+0x8>

0800b090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b094:	4b0e      	ldr	r3, [pc, #56]	; (800b0d0 <HAL_Init+0x40>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a0d      	ldr	r2, [pc, #52]	; (800b0d0 <HAL_Init+0x40>)
 800b09a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b09e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b0a0:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <HAL_Init+0x40>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a0a      	ldr	r2, [pc, #40]	; (800b0d0 <HAL_Init+0x40>)
 800b0a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b0ac:	4b08      	ldr	r3, [pc, #32]	; (800b0d0 <HAL_Init+0x40>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a07      	ldr	r2, [pc, #28]	; (800b0d0 <HAL_Init+0x40>)
 800b0b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b0b8:	2003      	movs	r0, #3
 800b0ba:	f001 f9de 	bl	800c47a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b0be:	2000      	movs	r0, #0
 800b0c0:	f7f8 fe26 	bl	8003d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b0c4:	f7f8 fdf8 	bl	8003cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	40023c00 	.word	0x40023c00

0800b0d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b0d8:	4b06      	ldr	r3, [pc, #24]	; (800b0f4 <HAL_IncTick+0x20>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <HAL_IncTick+0x24>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	4a04      	ldr	r2, [pc, #16]	; (800b0f8 <HAL_IncTick+0x24>)
 800b0e6:	6013      	str	r3, [r2, #0]
}
 800b0e8:	bf00      	nop
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	20000014 	.word	0x20000014
 800b0f8:	20002dd8 	.word	0x20002dd8

0800b0fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	af00      	add	r7, sp, #0
  return uwTick;
 800b100:	4b03      	ldr	r3, [pc, #12]	; (800b110 <HAL_GetTick+0x14>)
 800b102:	681b      	ldr	r3, [r3, #0]
}
 800b104:	4618      	mov	r0, r3
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	20002dd8 	.word	0x20002dd8

0800b114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b11c:	f7ff ffee 	bl	800b0fc <HAL_GetTick>
 800b120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b12c:	d005      	beq.n	800b13a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b12e:	4b0a      	ldr	r3, [pc, #40]	; (800b158 <HAL_Delay+0x44>)
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	4413      	add	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b13a:	bf00      	nop
 800b13c:	f7ff ffde 	bl	800b0fc <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d8f7      	bhi.n	800b13c <HAL_Delay+0x28>
  {
  }
}
 800b14c:	bf00      	nop
 800b14e:	bf00      	nop
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20000014 	.word	0x20000014

0800b15c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e033      	b.n	800b1da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	d109      	bne.n	800b18e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7f7 fe40 	bl	8002e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b192:	f003 0310 	and.w	r3, r3, #16
 800b196:	2b00      	cmp	r3, #0
 800b198:	d118      	bne.n	800b1cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b1a2:	f023 0302 	bic.w	r3, r3, #2
 800b1a6:	f043 0202 	orr.w	r2, r3, #2
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f93a 	bl	800b428 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1be:	f023 0303 	bic.w	r3, r3, #3
 800b1c2:	f043 0201 	orr.w	r2, r3, #1
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	641a      	str	r2, [r3, #64]	; 0x40
 800b1ca:	e001      	b.n	800b1d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
	...

0800b1e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d101      	bne.n	800b200 <HAL_ADC_ConfigChannel+0x1c>
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	e105      	b.n	800b40c <HAL_ADC_ConfigChannel+0x228>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b09      	cmp	r3, #9
 800b20e:	d925      	bls.n	800b25c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68d9      	ldr	r1, [r3, #12]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	461a      	mov	r2, r3
 800b21e:	4613      	mov	r3, r2
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	4413      	add	r3, r2
 800b224:	3b1e      	subs	r3, #30
 800b226:	2207      	movs	r2, #7
 800b228:	fa02 f303 	lsl.w	r3, r2, r3
 800b22c:	43da      	mvns	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	400a      	ands	r2, r1
 800b234:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68d9      	ldr	r1, [r3, #12]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	689a      	ldr	r2, [r3, #8]
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	b29b      	uxth	r3, r3
 800b246:	4618      	mov	r0, r3
 800b248:	4603      	mov	r3, r0
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	4403      	add	r3, r0
 800b24e:	3b1e      	subs	r3, #30
 800b250:	409a      	lsls	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	430a      	orrs	r2, r1
 800b258:	60da      	str	r2, [r3, #12]
 800b25a:	e022      	b.n	800b2a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6919      	ldr	r1, [r3, #16]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	b29b      	uxth	r3, r3
 800b268:	461a      	mov	r2, r3
 800b26a:	4613      	mov	r3, r2
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	4413      	add	r3, r2
 800b270:	2207      	movs	r2, #7
 800b272:	fa02 f303 	lsl.w	r3, r2, r3
 800b276:	43da      	mvns	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	400a      	ands	r2, r1
 800b27e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6919      	ldr	r1, [r3, #16]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	689a      	ldr	r2, [r3, #8]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	4618      	mov	r0, r3
 800b292:	4603      	mov	r3, r0
 800b294:	005b      	lsls	r3, r3, #1
 800b296:	4403      	add	r3, r0
 800b298:	409a      	lsls	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	430a      	orrs	r2, r1
 800b2a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	2b06      	cmp	r3, #6
 800b2a8:	d824      	bhi.n	800b2f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	3b05      	subs	r3, #5
 800b2bc:	221f      	movs	r2, #31
 800b2be:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c2:	43da      	mvns	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	400a      	ands	r2, r1
 800b2ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	4618      	mov	r0, r3
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	3b05      	subs	r3, #5
 800b2e6:	fa00 f203 	lsl.w	r2, r0, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	635a      	str	r2, [r3, #52]	; 0x34
 800b2f2:	e04c      	b.n	800b38e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	2b0c      	cmp	r3, #12
 800b2fa:	d824      	bhi.n	800b346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	4613      	mov	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	3b23      	subs	r3, #35	; 0x23
 800b30e:	221f      	movs	r2, #31
 800b310:	fa02 f303 	lsl.w	r3, r2, r3
 800b314:	43da      	mvns	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	400a      	ands	r2, r1
 800b31c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	4618      	mov	r0, r3
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	685a      	ldr	r2, [r3, #4]
 800b330:	4613      	mov	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	3b23      	subs	r3, #35	; 0x23
 800b338:	fa00 f203 	lsl.w	r2, r0, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	631a      	str	r2, [r3, #48]	; 0x30
 800b344:	e023      	b.n	800b38e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	685a      	ldr	r2, [r3, #4]
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	3b41      	subs	r3, #65	; 0x41
 800b358:	221f      	movs	r2, #31
 800b35a:	fa02 f303 	lsl.w	r3, r2, r3
 800b35e:	43da      	mvns	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	400a      	ands	r2, r1
 800b366:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	b29b      	uxth	r3, r3
 800b374:	4618      	mov	r0, r3
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	4613      	mov	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	3b41      	subs	r3, #65	; 0x41
 800b382:	fa00 f203 	lsl.w	r2, r0, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	430a      	orrs	r2, r1
 800b38c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b38e:	4b22      	ldr	r3, [pc, #136]	; (800b418 <HAL_ADC_ConfigChannel+0x234>)
 800b390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a21      	ldr	r2, [pc, #132]	; (800b41c <HAL_ADC_ConfigChannel+0x238>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d109      	bne.n	800b3b0 <HAL_ADC_ConfigChannel+0x1cc>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b12      	cmp	r3, #18
 800b3a2:	d105      	bne.n	800b3b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a19      	ldr	r2, [pc, #100]	; (800b41c <HAL_ADC_ConfigChannel+0x238>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d123      	bne.n	800b402 <HAL_ADC_ConfigChannel+0x21e>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b10      	cmp	r3, #16
 800b3c0:	d003      	beq.n	800b3ca <HAL_ADC_ConfigChannel+0x1e6>
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b11      	cmp	r3, #17
 800b3c8:	d11b      	bne.n	800b402 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b10      	cmp	r3, #16
 800b3dc:	d111      	bne.n	800b402 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b3de:	4b10      	ldr	r3, [pc, #64]	; (800b420 <HAL_ADC_ConfigChannel+0x23c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a10      	ldr	r2, [pc, #64]	; (800b424 <HAL_ADC_ConfigChannel+0x240>)
 800b3e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e8:	0c9a      	lsrs	r2, r3, #18
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4413      	add	r3, r2
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b3f4:	e002      	b.n	800b3fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1f9      	bne.n	800b3f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	40012300 	.word	0x40012300
 800b41c:	40012000 	.word	0x40012000
 800b420:	20000004 	.word	0x20000004
 800b424:	431bde83 	.word	0x431bde83

0800b428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b430:	4b79      	ldr	r3, [pc, #484]	; (800b618 <ADC_Init+0x1f0>)
 800b432:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	431a      	orrs	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	685a      	ldr	r2, [r3, #4]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b45c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6859      	ldr	r1, [r3, #4]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	021a      	lsls	r2, r3, #8
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	430a      	orrs	r2, r1
 800b470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	6859      	ldr	r1, [r3, #4]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	430a      	orrs	r2, r1
 800b492:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6899      	ldr	r1, [r3, #8]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ba:	4a58      	ldr	r2, [pc, #352]	; (800b61c <ADC_Init+0x1f4>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d022      	beq.n	800b506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	689a      	ldr	r2, [r3, #8]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b4ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6899      	ldr	r1, [r3, #8]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689a      	ldr	r2, [r3, #8]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b4f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6899      	ldr	r1, [r3, #8]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	430a      	orrs	r2, r1
 800b502:	609a      	str	r2, [r3, #8]
 800b504:	e00f      	b.n	800b526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	689a      	ldr	r2, [r3, #8]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689a      	ldr	r2, [r3, #8]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b524:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f022 0202 	bic.w	r2, r2, #2
 800b534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	6899      	ldr	r1, [r3, #8]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	7e1b      	ldrb	r3, [r3, #24]
 800b540:	005a      	lsls	r2, r3, #1
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	430a      	orrs	r2, r1
 800b548:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01b      	beq.n	800b58c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b562:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	685a      	ldr	r2, [r3, #4]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6859      	ldr	r1, [r3, #4]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57e:	3b01      	subs	r3, #1
 800b580:	035a      	lsls	r2, r3, #13
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	605a      	str	r2, [r3, #4]
 800b58a:	e007      	b.n	800b59c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b59a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b5aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	051a      	lsls	r2, r3, #20
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	689a      	ldr	r2, [r3, #8]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b5d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6899      	ldr	r1, [r3, #8]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5de:	025a      	lsls	r2, r3, #9
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	430a      	orrs	r2, r1
 800b5e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	689a      	ldr	r2, [r3, #8]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6899      	ldr	r1, [r3, #8]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	695b      	ldr	r3, [r3, #20]
 800b602:	029a      	lsls	r2, r3, #10
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	430a      	orrs	r2, r1
 800b60a:	609a      	str	r2, [r3, #8]
}
 800b60c:	bf00      	nop
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	40012300 	.word	0x40012300
 800b61c:	0f000001 	.word	0x0f000001

0800b620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e0ed      	b.n	800b80e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d102      	bne.n	800b644 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7f7 fc8e 	bl	8002f60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f042 0201 	orr.w	r2, r2, #1
 800b652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b654:	f7ff fd52 	bl	800b0fc <HAL_GetTick>
 800b658:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b65a:	e012      	b.n	800b682 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b65c:	f7ff fd4e 	bl	800b0fc <HAL_GetTick>
 800b660:	4602      	mov	r2, r0
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	2b0a      	cmp	r3, #10
 800b668:	d90b      	bls.n	800b682 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2205      	movs	r2, #5
 800b67a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e0c5      	b.n	800b80e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d0e5      	beq.n	800b65c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f022 0202 	bic.w	r2, r2, #2
 800b69e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6a0:	f7ff fd2c 	bl	800b0fc <HAL_GetTick>
 800b6a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b6a6:	e012      	b.n	800b6ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b6a8:	f7ff fd28 	bl	800b0fc <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	2b0a      	cmp	r3, #10
 800b6b4:	d90b      	bls.n	800b6ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2205      	movs	r2, #5
 800b6c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e09f      	b.n	800b80e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	f003 0302 	and.w	r3, r3, #2
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1e5      	bne.n	800b6a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	7e1b      	ldrb	r3, [r3, #24]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d108      	bne.n	800b6f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	e007      	b.n	800b706 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b704:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	7e5b      	ldrb	r3, [r3, #25]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d108      	bne.n	800b720 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	e007      	b.n	800b730 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b72e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	7e9b      	ldrb	r3, [r3, #26]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d108      	bne.n	800b74a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f042 0220 	orr.w	r2, r2, #32
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	e007      	b.n	800b75a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f022 0220 	bic.w	r2, r2, #32
 800b758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7edb      	ldrb	r3, [r3, #27]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d108      	bne.n	800b774 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f022 0210 	bic.w	r2, r2, #16
 800b770:	601a      	str	r2, [r3, #0]
 800b772:	e007      	b.n	800b784 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f042 0210 	orr.w	r2, r2, #16
 800b782:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	7f1b      	ldrb	r3, [r3, #28]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d108      	bne.n	800b79e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f042 0208 	orr.w	r2, r2, #8
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	e007      	b.n	800b7ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f022 0208 	bic.w	r2, r2, #8
 800b7ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	7f5b      	ldrb	r3, [r3, #29]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d108      	bne.n	800b7c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f042 0204 	orr.w	r2, r2, #4
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	e007      	b.n	800b7d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f022 0204 	bic.w	r2, r2, #4
 800b7d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	689a      	ldr	r2, [r3, #8]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	ea42 0103 	orr.w	r1, r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	1e5a      	subs	r2, r3, #1
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
	...

0800b818 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b82e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b830:	7cfb      	ldrb	r3, [r7, #19]
 800b832:	2b01      	cmp	r3, #1
 800b834:	d003      	beq.n	800b83e <HAL_CAN_ConfigFilter+0x26>
 800b836:	7cfb      	ldrb	r3, [r7, #19]
 800b838:	2b02      	cmp	r3, #2
 800b83a:	f040 80be 	bne.w	800b9ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800b83e:	4b65      	ldr	r3, [pc, #404]	; (800b9d4 <HAL_CAN_ConfigFilter+0x1bc>)
 800b840:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b848:	f043 0201 	orr.w	r2, r3, #1
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b858:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	021b      	lsls	r3, r3, #8
 800b86e:	431a      	orrs	r2, r3
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	695b      	ldr	r3, [r3, #20]
 800b87a:	f003 031f 	and.w	r3, r3, #31
 800b87e:	2201      	movs	r2, #1
 800b880:	fa02 f303 	lsl.w	r3, r2, r3
 800b884:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	43db      	mvns	r3, r3
 800b890:	401a      	ands	r2, r3
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	69db      	ldr	r3, [r3, #28]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d123      	bne.n	800b8e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	43db      	mvns	r3, r3
 800b8aa:	401a      	ands	r2, r3
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b8c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	3248      	adds	r2, #72	; 0x48
 800b8c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b8dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b8de:	6979      	ldr	r1, [r7, #20]
 800b8e0:	3348      	adds	r3, #72	; 0x48
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	440b      	add	r3, r1
 800b8e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d122      	bne.n	800b936 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	431a      	orrs	r2, r3
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b910:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	3248      	adds	r2, #72	; 0x48
 800b916:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b92a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b92c:	6979      	ldr	r1, [r7, #20]
 800b92e:	3348      	adds	r3, #72	; 0x48
 800b930:	00db      	lsls	r3, r3, #3
 800b932:	440b      	add	r3, r1
 800b934:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d109      	bne.n	800b952 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	43db      	mvns	r3, r3
 800b948:	401a      	ands	r2, r3
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b950:	e007      	b.n	800b962 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	431a      	orrs	r2, r3
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d109      	bne.n	800b97e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	43db      	mvns	r3, r3
 800b974:	401a      	ands	r2, r3
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b97c:	e007      	b.n	800b98e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	431a      	orrs	r2, r3
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d107      	bne.n	800b9a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	431a      	orrs	r2, r3
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b9ac:	f023 0201 	bic.w	r2, r3, #1
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	e006      	b.n	800b9c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
  }
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	371c      	adds	r7, #28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	40006400 	.word	0x40006400

0800b9d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d12e      	bne.n	800ba4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f022 0201 	bic.w	r2, r2, #1
 800ba02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba04:	f7ff fb7a 	bl	800b0fc <HAL_GetTick>
 800ba08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ba0a:	e012      	b.n	800ba32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ba0c:	f7ff fb76 	bl	800b0fc <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	2b0a      	cmp	r3, #10
 800ba18:	d90b      	bls.n	800ba32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2205      	movs	r2, #5
 800ba2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e012      	b.n	800ba58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e5      	bne.n	800ba0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e006      	b.n	800ba58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
  }
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b089      	sub	sp, #36	; 0x24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba74:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800ba7e:	7ffb      	ldrb	r3, [r7, #31]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d003      	beq.n	800ba8c <HAL_CAN_AddTxMessage+0x2c>
 800ba84:	7ffb      	ldrb	r3, [r7, #31]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	f040 80b8 	bne.w	800bbfc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10a      	bne.n	800baac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d105      	bne.n	800baac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 80a0 	beq.w	800bbec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	0e1b      	lsrs	r3, r3, #24
 800bab0:	f003 0303 	and.w	r3, r3, #3
 800bab4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d907      	bls.n	800bacc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e09e      	b.n	800bc0a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800bacc:	2201      	movs	r2, #1
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	409a      	lsls	r2, r3
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10d      	bne.n	800bafa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bae8:	68f9      	ldr	r1, [r7, #12]
 800baea:	6809      	ldr	r1, [r1, #0]
 800baec:	431a      	orrs	r2, r3
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	3318      	adds	r3, #24
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	440b      	add	r3, r1
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	e00f      	b.n	800bb1a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb04:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb0a:	68f9      	ldr	r1, [r7, #12]
 800bb0c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800bb0e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	3318      	adds	r3, #24
 800bb14:	011b      	lsls	r3, r3, #4
 800bb16:	440b      	add	r3, r1
 800bb18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6819      	ldr	r1, [r3, #0]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	691a      	ldr	r2, [r3, #16]
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	3318      	adds	r3, #24
 800bb26:	011b      	lsls	r3, r3, #4
 800bb28:	440b      	add	r3, r1
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	7d1b      	ldrb	r3, [r3, #20]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d111      	bne.n	800bb5a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	3318      	adds	r3, #24
 800bb3e:	011b      	lsls	r3, r3, #4
 800bb40:	4413      	add	r3, r2
 800bb42:	3304      	adds	r3, #4
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	6811      	ldr	r1, [r2, #0]
 800bb4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	3318      	adds	r3, #24
 800bb52:	011b      	lsls	r3, r3, #4
 800bb54:	440b      	add	r3, r1
 800bb56:	3304      	adds	r3, #4
 800bb58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	3307      	adds	r3, #7
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	061a      	lsls	r2, r3, #24
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3306      	adds	r3, #6
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	041b      	lsls	r3, r3, #16
 800bb6a:	431a      	orrs	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	3305      	adds	r3, #5
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	021b      	lsls	r3, r3, #8
 800bb74:	4313      	orrs	r3, r2
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	3204      	adds	r2, #4
 800bb7a:	7812      	ldrb	r2, [r2, #0]
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	6811      	ldr	r1, [r2, #0]
 800bb82:	ea43 0200 	orr.w	r2, r3, r0
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	011b      	lsls	r3, r3, #4
 800bb8a:	440b      	add	r3, r1
 800bb8c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800bb90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	3303      	adds	r3, #3
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	061a      	lsls	r2, r3, #24
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	3302      	adds	r3, #2
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	041b      	lsls	r3, r3, #16
 800bba2:	431a      	orrs	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	3301      	adds	r3, #1
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	021b      	lsls	r3, r3, #8
 800bbac:	4313      	orrs	r3, r2
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	7812      	ldrb	r2, [r2, #0]
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	6811      	ldr	r1, [r2, #0]
 800bbb8:	ea43 0200 	orr.w	r2, r3, r0
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	011b      	lsls	r3, r3, #4
 800bbc0:	440b      	add	r3, r1
 800bbc2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800bbc6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	3318      	adds	r3, #24
 800bbd0:	011b      	lsls	r3, r3, #4
 800bbd2:	4413      	add	r3, r2
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	6811      	ldr	r1, [r2, #0]
 800bbda:	f043 0201 	orr.w	r2, r3, #1
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	3318      	adds	r3, #24
 800bbe2:	011b      	lsls	r3, r3, #4
 800bbe4:	440b      	add	r3, r1
 800bbe6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	e00e      	b.n	800bc0a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e006      	b.n	800bc0a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
  }
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3724      	adds	r7, #36	; 0x24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800bc16:	b480      	push	{r7}
 800bc18:	b087      	sub	sp, #28
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	60f8      	str	r0, [r7, #12]
 800bc1e:	60b9      	str	r1, [r7, #8]
 800bc20:	607a      	str	r2, [r7, #4]
 800bc22:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc2a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d003      	beq.n	800bc3a <HAL_CAN_GetRxMessage+0x24>
 800bc32:	7dfb      	ldrb	r3, [r7, #23]
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	f040 80f3 	bne.w	800be20 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10e      	bne.n	800bc5e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	f003 0303 	and.w	r3, r3, #3
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d116      	bne.n	800bc7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e0e7      	b.n	800be2e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	f003 0303 	and.w	r3, r3, #3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d107      	bne.n	800bc7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e0d8      	b.n	800be2e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	331b      	adds	r3, #27
 800bc84:	011b      	lsls	r3, r3, #4
 800bc86:	4413      	add	r3, r2
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 0204 	and.w	r2, r3, #4
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10c      	bne.n	800bcb4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	331b      	adds	r3, #27
 800bca2:	011b      	lsls	r3, r3, #4
 800bca4:	4413      	add	r3, r2
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	0d5b      	lsrs	r3, r3, #21
 800bcaa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	e00b      	b.n	800bccc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	331b      	adds	r3, #27
 800bcbc:	011b      	lsls	r3, r3, #4
 800bcbe:	4413      	add	r3, r2
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	08db      	lsrs	r3, r3, #3
 800bcc4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	331b      	adds	r3, #27
 800bcd4:	011b      	lsls	r3, r3, #4
 800bcd6:	4413      	add	r3, r2
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 0202 	and.w	r2, r3, #2
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	331b      	adds	r3, #27
 800bcea:	011b      	lsls	r3, r3, #4
 800bcec:	4413      	add	r3, r2
 800bcee:	3304      	adds	r3, #4
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 020f 	and.w	r2, r3, #15
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	331b      	adds	r3, #27
 800bd02:	011b      	lsls	r3, r3, #4
 800bd04:	4413      	add	r3, r2
 800bd06:	3304      	adds	r3, #4
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	0a1b      	lsrs	r3, r3, #8
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	331b      	adds	r3, #27
 800bd1a:	011b      	lsls	r3, r3, #4
 800bd1c:	4413      	add	r3, r2
 800bd1e:	3304      	adds	r3, #4
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	0c1b      	lsrs	r3, r3, #16
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	011b      	lsls	r3, r3, #4
 800bd32:	4413      	add	r3, r2
 800bd34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	011b      	lsls	r3, r3, #4
 800bd48:	4413      	add	r3, r2
 800bd4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	0a1a      	lsrs	r2, r3, #8
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	3301      	adds	r3, #1
 800bd56:	b2d2      	uxtb	r2, r2
 800bd58:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	011b      	lsls	r3, r3, #4
 800bd62:	4413      	add	r3, r2
 800bd64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	0c1a      	lsrs	r2, r3, #16
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	3302      	adds	r3, #2
 800bd70:	b2d2      	uxtb	r2, r2
 800bd72:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	0e1a      	lsrs	r2, r3, #24
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	3303      	adds	r3, #3
 800bd8a:	b2d2      	uxtb	r2, r2
 800bd8c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	011b      	lsls	r3, r3, #4
 800bd96:	4413      	add	r3, r2
 800bd98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	3304      	adds	r3, #4
 800bda2:	b2d2      	uxtb	r2, r2
 800bda4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	011b      	lsls	r3, r3, #4
 800bdae:	4413      	add	r3, r2
 800bdb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	0a1a      	lsrs	r2, r3, #8
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	3305      	adds	r3, #5
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	011b      	lsls	r3, r3, #4
 800bdc8:	4413      	add	r3, r2
 800bdca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	0c1a      	lsrs	r2, r3, #16
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	3306      	adds	r3, #6
 800bdd6:	b2d2      	uxtb	r2, r2
 800bdd8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	011b      	lsls	r3, r3, #4
 800bde2:	4413      	add	r3, r2
 800bde4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	0e1a      	lsrs	r2, r3, #24
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	3307      	adds	r3, #7
 800bdf0:	b2d2      	uxtb	r2, r2
 800bdf2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d108      	bne.n	800be0c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68da      	ldr	r2, [r3, #12]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f042 0220 	orr.w	r2, r2, #32
 800be08:	60da      	str	r2, [r3, #12]
 800be0a:	e007      	b.n	800be1c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	691a      	ldr	r2, [r3, #16]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f042 0220 	orr.w	r2, r2, #32
 800be1a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	e006      	b.n	800be2e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
  }
}
 800be2e:	4618      	mov	r0, r3
 800be30:	371c      	adds	r7, #28
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b085      	sub	sp, #20
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be4a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d002      	beq.n	800be58 <HAL_CAN_ActivateNotification+0x1e>
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d109      	bne.n	800be6c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6959      	ldr	r1, [r3, #20]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	430a      	orrs	r2, r1
 800be66:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800be68:	2300      	movs	r3, #0
 800be6a:	e006      	b.n	800be7a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800be78:	2301      	movs	r3, #1
  }
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800be86:	b480      	push	{r7}
 800be88:	b085      	sub	sp, #20
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be96:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d002      	beq.n	800bea4 <HAL_CAN_DeactivateNotification+0x1e>
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d10a      	bne.n	800beba <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6959      	ldr	r1, [r3, #20]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	43da      	mvns	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	400a      	ands	r2, r1
 800beb4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	e006      	b.n	800bec8 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
  }
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08a      	sub	sp, #40	; 0x28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800bedc:	2300      	movs	r3, #0
 800bede:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	695b      	ldr	r3, [r3, #20]
 800bee6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d07c      	beq.n	800c014 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	f003 0301 	and.w	r3, r3, #1
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d023      	beq.n	800bf6c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	f003 0302 	and.w	r3, r3, #2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f983 	bl	800c242 <HAL_CAN_TxMailbox0CompleteCallback>
 800bf3c:	e016      	b.n	800bf6c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	f003 0304 	and.w	r3, r3, #4
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d004      	beq.n	800bf52 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf4e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf50:	e00c      	b.n	800bf6c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	f003 0308 	and.w	r3, r3, #8
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d004      	beq.n	800bf66 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf62:	627b      	str	r3, [r7, #36]	; 0x24
 800bf64:	e002      	b.n	800bf6c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f989 	bl	800c27e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d024      	beq.n	800bfc0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d003      	beq.n	800bf92 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f963 	bl	800c256 <HAL_CAN_TxMailbox1CompleteCallback>
 800bf90:	e016      	b.n	800bfc0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d004      	beq.n	800bfa6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfa4:	e00c      	b.n	800bfc0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d004      	beq.n	800bfba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfb8:	e002      	b.n	800bfc0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f969 	bl	800c292 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d024      	beq.n	800c014 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bfd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f943 	bl	800c26a <HAL_CAN_TxMailbox2CompleteCallback>
 800bfe4:	e016      	b.n	800c014 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d004      	beq.n	800bffa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24
 800bff8:	e00c      	b.n	800c014 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c000:	2b00      	cmp	r3, #0
 800c002:	d004      	beq.n	800c00e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c00a:	627b      	str	r3, [r7, #36]	; 0x24
 800c00c:	e002      	b.n	800c014 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f949 	bl	800c2a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	f003 0308 	and.w	r3, r3, #8
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00c      	beq.n	800c038 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	f003 0310 	and.w	r3, r3, #16
 800c024:	2b00      	cmp	r3, #0
 800c026:	d007      	beq.n	800c038 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c02e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2210      	movs	r2, #16
 800c036:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	f003 0304 	and.w	r3, r3, #4
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00b      	beq.n	800c05a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	f003 0308 	and.w	r3, r3, #8
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d006      	beq.n	800c05a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2208      	movs	r2, #8
 800c052:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f930 	bl	800c2ba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	f003 0302 	and.w	r3, r3, #2
 800c060:	2b00      	cmp	r3, #0
 800c062:	d009      	beq.n	800c078 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	f003 0303 	and.w	r3, r3, #3
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d002      	beq.n	800c078 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7f5 f8ea 	bl	800124c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00c      	beq.n	800c09c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f003 0310 	and.w	r3, r3, #16
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d007      	beq.n	800c09c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c092:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2210      	movs	r2, #16
 800c09a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800c09c:	6a3b      	ldr	r3, [r7, #32]
 800c09e:	f003 0320 	and.w	r3, r3, #32
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00b      	beq.n	800c0be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f003 0308 	and.w	r3, r3, #8
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d006      	beq.n	800c0be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2208      	movs	r2, #8
 800c0b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f908 	bl	800c2ce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	f003 0310 	and.w	r3, r3, #16
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d009      	beq.n	800c0dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	f003 0303 	and.w	r3, r3, #3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7f5 f8c3 	bl	8001262 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00b      	beq.n	800c0fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	f003 0310 	and.w	r3, r3, #16
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d006      	beq.n	800c0fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2210      	movs	r2, #16
 800c0f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f8f2 	bl	800c2e2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800c0fe:	6a3b      	ldr	r3, [r7, #32]
 800c100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00b      	beq.n	800c120 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	f003 0308 	and.w	r3, r3, #8
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d006      	beq.n	800c120 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2208      	movs	r2, #8
 800c118:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 f8eb 	bl	800c2f6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800c120:	6a3b      	ldr	r3, [r7, #32]
 800c122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c126:	2b00      	cmp	r3, #0
 800c128:	d07b      	beq.n	800c222 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	f003 0304 	and.w	r3, r3, #4
 800c130:	2b00      	cmp	r3, #0
 800c132:	d072      	beq.n	800c21a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c134:	6a3b      	ldr	r3, [r7, #32]
 800c136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d008      	beq.n	800c150 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c144:	2b00      	cmp	r3, #0
 800c146:	d003      	beq.n	800c150 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	f043 0301 	orr.w	r3, r3, #1
 800c14e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c156:	2b00      	cmp	r3, #0
 800c158:	d008      	beq.n	800c16c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c160:	2b00      	cmp	r3, #0
 800c162:	d003      	beq.n	800c16c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	f043 0302 	orr.w	r3, r3, #2
 800c16a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c172:	2b00      	cmp	r3, #0
 800c174:	d008      	beq.n	800c188 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d003      	beq.n	800c188 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	f043 0304 	orr.w	r3, r3, #4
 800c186:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d043      	beq.n	800c21a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d03e      	beq.n	800c21a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1a2:	2b60      	cmp	r3, #96	; 0x60
 800c1a4:	d02b      	beq.n	800c1fe <HAL_CAN_IRQHandler+0x32a>
 800c1a6:	2b60      	cmp	r3, #96	; 0x60
 800c1a8:	d82e      	bhi.n	800c208 <HAL_CAN_IRQHandler+0x334>
 800c1aa:	2b50      	cmp	r3, #80	; 0x50
 800c1ac:	d022      	beq.n	800c1f4 <HAL_CAN_IRQHandler+0x320>
 800c1ae:	2b50      	cmp	r3, #80	; 0x50
 800c1b0:	d82a      	bhi.n	800c208 <HAL_CAN_IRQHandler+0x334>
 800c1b2:	2b40      	cmp	r3, #64	; 0x40
 800c1b4:	d019      	beq.n	800c1ea <HAL_CAN_IRQHandler+0x316>
 800c1b6:	2b40      	cmp	r3, #64	; 0x40
 800c1b8:	d826      	bhi.n	800c208 <HAL_CAN_IRQHandler+0x334>
 800c1ba:	2b30      	cmp	r3, #48	; 0x30
 800c1bc:	d010      	beq.n	800c1e0 <HAL_CAN_IRQHandler+0x30c>
 800c1be:	2b30      	cmp	r3, #48	; 0x30
 800c1c0:	d822      	bhi.n	800c208 <HAL_CAN_IRQHandler+0x334>
 800c1c2:	2b10      	cmp	r3, #16
 800c1c4:	d002      	beq.n	800c1cc <HAL_CAN_IRQHandler+0x2f8>
 800c1c6:	2b20      	cmp	r3, #32
 800c1c8:	d005      	beq.n	800c1d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800c1ca:	e01d      	b.n	800c208 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	f043 0308 	orr.w	r3, r3, #8
 800c1d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c1d4:	e019      	b.n	800c20a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	f043 0310 	orr.w	r3, r3, #16
 800c1dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c1de:	e014      	b.n	800c20a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	f043 0320 	orr.w	r3, r3, #32
 800c1e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c1e8:	e00f      	b.n	800c20a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c1f2:	e00a      	b.n	800c20a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c1fc:	e005      	b.n	800c20a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c204:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c206:	e000      	b.n	800c20a <HAL_CAN_IRQHandler+0x336>
            break;
 800c208:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	699a      	ldr	r2, [r3, #24]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c218:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2204      	movs	r2, #4
 800c220:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	2b00      	cmp	r3, #0
 800c226:	d008      	beq.n	800c23a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	431a      	orrs	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f868 	bl	800c30a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800c23a:	bf00      	nop
 800c23c:	3728      	adds	r7, #40	; 0x28
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c242:	b480      	push	{r7}
 800c244:	b083      	sub	sp, #12
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800c24a:	bf00      	nop
 800c24c:	370c      	adds	r7, #12
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c256:	b480      	push	{r7}
 800c258:	b083      	sub	sp, #12
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800c25e:	bf00      	nop
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b083      	sub	sp, #12
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800c272:	bf00      	nop
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr

0800c27e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c27e:	b480      	push	{r7}
 800c280:	b083      	sub	sp, #12
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800c286:	bf00      	nop
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c292:	b480      	push	{r7}
 800c294:	b083      	sub	sp, #12
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800c29a:	bf00      	nop
 800c29c:	370c      	adds	r7, #12
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr

0800c2a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c2a6:	b480      	push	{r7}
 800c2a8:	b083      	sub	sp, #12
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800c2ae:	bf00      	nop
 800c2b0:	370c      	adds	r7, #12
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr

0800c2ba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	b083      	sub	sp, #12
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800c2c2:	bf00      	nop
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b083      	sub	sp, #12
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800c2d6:	bf00      	nop
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800c2e2:	b480      	push	{r7}
 800c2e4:	b083      	sub	sp, #12
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800c2ea:	bf00      	nop
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800c2fe:	bf00      	nop
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b083      	sub	sp, #12
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800c312:	bf00      	nop
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
	...

0800c320 <__NVIC_SetPriorityGrouping>:
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f003 0307 	and.w	r3, r3, #7
 800c32e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c330:	4b0c      	ldr	r3, [pc, #48]	; (800c364 <__NVIC_SetPriorityGrouping+0x44>)
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c33c:	4013      	ands	r3, r2
 800c33e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c34c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c352:	4a04      	ldr	r2, [pc, #16]	; (800c364 <__NVIC_SetPriorityGrouping+0x44>)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	60d3      	str	r3, [r2, #12]
}
 800c358:	bf00      	nop
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	e000ed00 	.word	0xe000ed00

0800c368 <__NVIC_GetPriorityGrouping>:
{
 800c368:	b480      	push	{r7}
 800c36a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c36c:	4b04      	ldr	r3, [pc, #16]	; (800c380 <__NVIC_GetPriorityGrouping+0x18>)
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	0a1b      	lsrs	r3, r3, #8
 800c372:	f003 0307 	and.w	r3, r3, #7
}
 800c376:	4618      	mov	r0, r3
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	e000ed00 	.word	0xe000ed00

0800c384 <__NVIC_EnableIRQ>:
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	4603      	mov	r3, r0
 800c38c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c38e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c392:	2b00      	cmp	r3, #0
 800c394:	db0b      	blt.n	800c3ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	f003 021f 	and.w	r2, r3, #31
 800c39c:	4907      	ldr	r1, [pc, #28]	; (800c3bc <__NVIC_EnableIRQ+0x38>)
 800c39e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3a2:	095b      	lsrs	r3, r3, #5
 800c3a4:	2001      	movs	r0, #1
 800c3a6:	fa00 f202 	lsl.w	r2, r0, r2
 800c3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c3ae:	bf00      	nop
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	e000e100 	.word	0xe000e100

0800c3c0 <__NVIC_SetPriority>:
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	6039      	str	r1, [r7, #0]
 800c3ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	db0a      	blt.n	800c3ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	490c      	ldr	r1, [pc, #48]	; (800c40c <__NVIC_SetPriority+0x4c>)
 800c3da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3de:	0112      	lsls	r2, r2, #4
 800c3e0:	b2d2      	uxtb	r2, r2
 800c3e2:	440b      	add	r3, r1
 800c3e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c3e8:	e00a      	b.n	800c400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	4908      	ldr	r1, [pc, #32]	; (800c410 <__NVIC_SetPriority+0x50>)
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	f003 030f 	and.w	r3, r3, #15
 800c3f6:	3b04      	subs	r3, #4
 800c3f8:	0112      	lsls	r2, r2, #4
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	440b      	add	r3, r1
 800c3fe:	761a      	strb	r2, [r3, #24]
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	e000e100 	.word	0xe000e100
 800c410:	e000ed00 	.word	0xe000ed00

0800c414 <NVIC_EncodePriority>:
{
 800c414:	b480      	push	{r7}
 800c416:	b089      	sub	sp, #36	; 0x24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f003 0307 	and.w	r3, r3, #7
 800c426:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	f1c3 0307 	rsb	r3, r3, #7
 800c42e:	2b04      	cmp	r3, #4
 800c430:	bf28      	it	cs
 800c432:	2304      	movcs	r3, #4
 800c434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	3304      	adds	r3, #4
 800c43a:	2b06      	cmp	r3, #6
 800c43c:	d902      	bls.n	800c444 <NVIC_EncodePriority+0x30>
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	3b03      	subs	r3, #3
 800c442:	e000      	b.n	800c446 <NVIC_EncodePriority+0x32>
 800c444:	2300      	movs	r3, #0
 800c446:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c448:	f04f 32ff 	mov.w	r2, #4294967295
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	fa02 f303 	lsl.w	r3, r2, r3
 800c452:	43da      	mvns	r2, r3
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	401a      	ands	r2, r3
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c45c:	f04f 31ff 	mov.w	r1, #4294967295
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	fa01 f303 	lsl.w	r3, r1, r3
 800c466:	43d9      	mvns	r1, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c46c:	4313      	orrs	r3, r2
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3724      	adds	r7, #36	; 0x24
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b082      	sub	sp, #8
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff ff4c 	bl	800c320 <__NVIC_SetPriorityGrouping>
}
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	4603      	mov	r3, r0
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c4a2:	f7ff ff61 	bl	800c368 <__NVIC_GetPriorityGrouping>
 800c4a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	68b9      	ldr	r1, [r7, #8]
 800c4ac:	6978      	ldr	r0, [r7, #20]
 800c4ae:	f7ff ffb1 	bl	800c414 <NVIC_EncodePriority>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7ff ff80 	bl	800c3c0 <__NVIC_SetPriority>
}
 800c4c0:	bf00      	nop
 800c4c2:	3718      	adds	r7, #24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c4d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff ff54 	bl	800c384 <__NVIC_EnableIRQ>
}
 800c4dc:	bf00      	nop
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c4f0:	f7fe fe04 	bl	800b0fc <HAL_GetTick>
 800c4f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d101      	bne.n	800c500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e099      	b.n	800c634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2202      	movs	r2, #2
 800c504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f022 0201 	bic.w	r2, r2, #1
 800c51e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c520:	e00f      	b.n	800c542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c522:	f7fe fdeb 	bl	800b0fc <HAL_GetTick>
 800c526:	4602      	mov	r2, r0
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	2b05      	cmp	r3, #5
 800c52e:	d908      	bls.n	800c542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2220      	movs	r2, #32
 800c534:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2203      	movs	r2, #3
 800c53a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c53e:	2303      	movs	r3, #3
 800c540:	e078      	b.n	800c634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1e8      	bne.n	800c522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	4b38      	ldr	r3, [pc, #224]	; (800c63c <HAL_DMA_Init+0x158>)
 800c55c:	4013      	ands	r3, r2
 800c55e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c56e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c57a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a1b      	ldr	r3, [r3, #32]
 800c58c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	4313      	orrs	r3, r2
 800c592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c598:	2b04      	cmp	r3, #4
 800c59a:	d107      	bne.n	800c5ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	f023 0307 	bic.w	r3, r3, #7
 800c5c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c8:	697a      	ldr	r2, [r7, #20]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	d117      	bne.n	800c606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00e      	beq.n	800c606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fb0d 	bl	800cc08 <DMA_CheckFifoParam>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d008      	beq.n	800c606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2240      	movs	r2, #64	; 0x40
 800c5f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c602:	2301      	movs	r3, #1
 800c604:	e016      	b.n	800c634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fac4 	bl	800cb9c <DMA_CalcBaseAndBitshift>
 800c614:	4603      	mov	r3, r0
 800c616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c61c:	223f      	movs	r2, #63	; 0x3f
 800c61e:	409a      	lsls	r2, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2201      	movs	r2, #1
 800c62e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	f010803f 	.word	0xf010803f

0800c640 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c656:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d101      	bne.n	800c666 <HAL_DMA_Start_IT+0x26>
 800c662:	2302      	movs	r3, #2
 800c664:	e040      	b.n	800c6e8 <HAL_DMA_Start_IT+0xa8>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2201      	movs	r2, #1
 800c66a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b01      	cmp	r3, #1
 800c678:	d12f      	bne.n	800c6da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2202      	movs	r2, #2
 800c67e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	68b9      	ldr	r1, [r7, #8]
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f000 fa56 	bl	800cb40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c698:	223f      	movs	r2, #63	; 0x3f
 800c69a:	409a      	lsls	r2, r3
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f042 0216 	orr.w	r2, r2, #22
 800c6ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d007      	beq.n	800c6c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f042 0208 	orr.w	r2, r2, #8
 800c6c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f042 0201 	orr.w	r2, r2, #1
 800c6d6:	601a      	str	r2, [r3, #0]
 800c6d8:	e005      	b.n	800c6e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3718      	adds	r7, #24
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c6fe:	f7fe fcfd 	bl	800b0fc <HAL_GetTick>
 800c702:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d008      	beq.n	800c722 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2280      	movs	r2, #128	; 0x80
 800c714:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	e052      	b.n	800c7c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f022 0216 	bic.w	r2, r2, #22
 800c730:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	695a      	ldr	r2, [r3, #20]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c740:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c746:	2b00      	cmp	r3, #0
 800c748:	d103      	bne.n	800c752 <HAL_DMA_Abort+0x62>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d007      	beq.n	800c762 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f022 0208 	bic.w	r2, r2, #8
 800c760:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f022 0201 	bic.w	r2, r2, #1
 800c770:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c772:	e013      	b.n	800c79c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c774:	f7fe fcc2 	bl	800b0fc <HAL_GetTick>
 800c778:	4602      	mov	r2, r0
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	2b05      	cmp	r3, #5
 800c780:	d90c      	bls.n	800c79c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2220      	movs	r2, #32
 800c786:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2203      	movs	r2, #3
 800c78c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800c798:	2303      	movs	r3, #3
 800c79a:	e015      	b.n	800c7c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 0301 	and.w	r3, r3, #1
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1e4      	bne.n	800c774 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ae:	223f      	movs	r2, #63	; 0x3f
 800c7b0:	409a      	lsls	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d004      	beq.n	800c7ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2280      	movs	r2, #128	; 0x80
 800c7e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e00c      	b.n	800c808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2205      	movs	r2, #5
 800c7f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f022 0201 	bic.w	r2, r2, #1
 800c804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c806:	2300      	movs	r3, #0
}
 800c808:	4618      	mov	r0, r3
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c81c:	2300      	movs	r3, #0
 800c81e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c820:	4b8e      	ldr	r3, [pc, #568]	; (800ca5c <HAL_DMA_IRQHandler+0x248>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a8e      	ldr	r2, [pc, #568]	; (800ca60 <HAL_DMA_IRQHandler+0x24c>)
 800c826:	fba2 2303 	umull	r2, r3, r2, r3
 800c82a:	0a9b      	lsrs	r3, r3, #10
 800c82c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c83e:	2208      	movs	r2, #8
 800c840:	409a      	lsls	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	4013      	ands	r3, r2
 800c846:	2b00      	cmp	r3, #0
 800c848:	d01a      	beq.n	800c880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0304 	and.w	r3, r3, #4
 800c854:	2b00      	cmp	r3, #0
 800c856:	d013      	beq.n	800c880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f022 0204 	bic.w	r2, r2, #4
 800c866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c86c:	2208      	movs	r2, #8
 800c86e:	409a      	lsls	r2, r3
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c878:	f043 0201 	orr.w	r2, r3, #1
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c884:	2201      	movs	r2, #1
 800c886:	409a      	lsls	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	4013      	ands	r3, r2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d012      	beq.n	800c8b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00b      	beq.n	800c8b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	409a      	lsls	r2, r3
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ae:	f043 0202 	orr.w	r2, r3, #2
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8ba:	2204      	movs	r2, #4
 800c8bc:	409a      	lsls	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	4013      	ands	r3, r2
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d012      	beq.n	800c8ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f003 0302 	and.w	r3, r3, #2
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00b      	beq.n	800c8ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8d8:	2204      	movs	r2, #4
 800c8da:	409a      	lsls	r2, r3
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e4:	f043 0204 	orr.w	r2, r3, #4
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8f0:	2210      	movs	r2, #16
 800c8f2:	409a      	lsls	r2, r3
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d043      	beq.n	800c984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f003 0308 	and.w	r3, r3, #8
 800c906:	2b00      	cmp	r3, #0
 800c908:	d03c      	beq.n	800c984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c90e:	2210      	movs	r2, #16
 800c910:	409a      	lsls	r2, r3
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c920:	2b00      	cmp	r3, #0
 800c922:	d018      	beq.n	800c956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d108      	bne.n	800c944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c936:	2b00      	cmp	r3, #0
 800c938:	d024      	beq.n	800c984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	4798      	blx	r3
 800c942:	e01f      	b.n	800c984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d01b      	beq.n	800c984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	4798      	blx	r3
 800c954:	e016      	b.n	800c984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c960:	2b00      	cmp	r3, #0
 800c962:	d107      	bne.n	800c974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f022 0208 	bic.w	r2, r2, #8
 800c972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d003      	beq.n	800c984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c988:	2220      	movs	r2, #32
 800c98a:	409a      	lsls	r2, r3
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	4013      	ands	r3, r2
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 808f 	beq.w	800cab4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0310 	and.w	r3, r3, #16
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f000 8087 	beq.w	800cab4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9aa:	2220      	movs	r2, #32
 800c9ac:	409a      	lsls	r2, r3
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b05      	cmp	r3, #5
 800c9bc:	d136      	bne.n	800ca2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f022 0216 	bic.w	r2, r2, #22
 800c9cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	695a      	ldr	r2, [r3, #20]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d103      	bne.n	800c9ee <HAL_DMA_IRQHandler+0x1da>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d007      	beq.n	800c9fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f022 0208 	bic.w	r2, r2, #8
 800c9fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca02:	223f      	movs	r2, #63	; 0x3f
 800ca04:	409a      	lsls	r2, r3
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d07e      	beq.n	800cb20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	4798      	blx	r3
        }
        return;
 800ca2a:	e079      	b.n	800cb20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d01d      	beq.n	800ca76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10d      	bne.n	800ca64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d031      	beq.n	800cab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	4798      	blx	r3
 800ca58:	e02c      	b.n	800cab4 <HAL_DMA_IRQHandler+0x2a0>
 800ca5a:	bf00      	nop
 800ca5c:	20000004 	.word	0x20000004
 800ca60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d023      	beq.n	800cab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	4798      	blx	r3
 800ca74:	e01e      	b.n	800cab4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10f      	bne.n	800caa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f022 0210 	bic.w	r2, r2, #16
 800ca92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d003      	beq.n	800cab4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d032      	beq.n	800cb22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d022      	beq.n	800cb0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2205      	movs	r2, #5
 800cacc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f022 0201 	bic.w	r2, r2, #1
 800cade:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	3301      	adds	r3, #1
 800cae4:	60bb      	str	r3, [r7, #8]
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d307      	bcc.n	800cafc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f003 0301 	and.w	r3, r3, #1
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1f2      	bne.n	800cae0 <HAL_DMA_IRQHandler+0x2cc>
 800cafa:	e000      	b.n	800cafe <HAL_DMA_IRQHandler+0x2ea>
          break;
 800cafc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d005      	beq.n	800cb22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	4798      	blx	r3
 800cb1e:	e000      	b.n	800cb22 <HAL_DMA_IRQHandler+0x30e>
        return;
 800cb20:	bf00      	nop
    }
  }
}
 800cb22:	3718      	adds	r7, #24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
 800cb4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cb5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	2b40      	cmp	r3, #64	; 0x40
 800cb6c:	d108      	bne.n	800cb80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800cb7e:	e007      	b.n	800cb90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	60da      	str	r2, [r3, #12]
}
 800cb90:	bf00      	nop
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	3b10      	subs	r3, #16
 800cbac:	4a14      	ldr	r2, [pc, #80]	; (800cc00 <DMA_CalcBaseAndBitshift+0x64>)
 800cbae:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb2:	091b      	lsrs	r3, r3, #4
 800cbb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cbb6:	4a13      	ldr	r2, [pc, #76]	; (800cc04 <DMA_CalcBaseAndBitshift+0x68>)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4413      	add	r3, r2
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	d909      	bls.n	800cbde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800cbd2:	f023 0303 	bic.w	r3, r3, #3
 800cbd6:	1d1a      	adds	r2, r3, #4
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	659a      	str	r2, [r3, #88]	; 0x58
 800cbdc:	e007      	b.n	800cbee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800cbe6:	f023 0303 	bic.w	r3, r3, #3
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3714      	adds	r7, #20
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	aaaaaaab 	.word	0xaaaaaaab
 800cc04:	08021e3c 	.word	0x08021e3c

0800cc08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc10:	2300      	movs	r3, #0
 800cc12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	699b      	ldr	r3, [r3, #24]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d11f      	bne.n	800cc62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	d856      	bhi.n	800ccd6 <DMA_CheckFifoParam+0xce>
 800cc28:	a201      	add	r2, pc, #4	; (adr r2, 800cc30 <DMA_CheckFifoParam+0x28>)
 800cc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2e:	bf00      	nop
 800cc30:	0800cc41 	.word	0x0800cc41
 800cc34:	0800cc53 	.word	0x0800cc53
 800cc38:	0800cc41 	.word	0x0800cc41
 800cc3c:	0800ccd7 	.word	0x0800ccd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d046      	beq.n	800ccda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc50:	e043      	b.n	800ccda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cc5a:	d140      	bne.n	800ccde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc60:	e03d      	b.n	800ccde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc6a:	d121      	bne.n	800ccb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	2b03      	cmp	r3, #3
 800cc70:	d837      	bhi.n	800cce2 <DMA_CheckFifoParam+0xda>
 800cc72:	a201      	add	r2, pc, #4	; (adr r2, 800cc78 <DMA_CheckFifoParam+0x70>)
 800cc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc78:	0800cc89 	.word	0x0800cc89
 800cc7c:	0800cc8f 	.word	0x0800cc8f
 800cc80:	0800cc89 	.word	0x0800cc89
 800cc84:	0800cca1 	.word	0x0800cca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc8c:	e030      	b.n	800ccf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d025      	beq.n	800cce6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc9e:	e022      	b.n	800cce6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cca8:	d11f      	bne.n	800ccea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ccae:	e01c      	b.n	800ccea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b02      	cmp	r3, #2
 800ccb4:	d903      	bls.n	800ccbe <DMA_CheckFifoParam+0xb6>
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	2b03      	cmp	r3, #3
 800ccba:	d003      	beq.n	800ccc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ccbc:	e018      	b.n	800ccf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	73fb      	strb	r3, [r7, #15]
      break;
 800ccc2:	e015      	b.n	800ccf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00e      	beq.n	800ccee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	73fb      	strb	r3, [r7, #15]
      break;
 800ccd4:	e00b      	b.n	800ccee <DMA_CheckFifoParam+0xe6>
      break;
 800ccd6:	bf00      	nop
 800ccd8:	e00a      	b.n	800ccf0 <DMA_CheckFifoParam+0xe8>
      break;
 800ccda:	bf00      	nop
 800ccdc:	e008      	b.n	800ccf0 <DMA_CheckFifoParam+0xe8>
      break;
 800ccde:	bf00      	nop
 800cce0:	e006      	b.n	800ccf0 <DMA_CheckFifoParam+0xe8>
      break;
 800cce2:	bf00      	nop
 800cce4:	e004      	b.n	800ccf0 <DMA_CheckFifoParam+0xe8>
      break;
 800cce6:	bf00      	nop
 800cce8:	e002      	b.n	800ccf0 <DMA_CheckFifoParam+0xe8>
      break;   
 800ccea:	bf00      	nop
 800ccec:	e000      	b.n	800ccf0 <DMA_CheckFifoParam+0xe8>
      break;
 800ccee:	bf00      	nop
    }
  } 
  
  return status; 
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop

0800cd00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b089      	sub	sp, #36	; 0x24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cd12:	2300      	movs	r3, #0
 800cd14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cd16:	2300      	movs	r3, #0
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	e16b      	b.n	800cff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	fa02 f303 	lsl.w	r3, r2, r3
 800cd24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	f040 815a 	bne.w	800cfee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	f003 0303 	and.w	r3, r3, #3
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d005      	beq.n	800cd52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cd4e:	2b02      	cmp	r3, #2
 800cd50:	d130      	bne.n	800cdb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	2203      	movs	r2, #3
 800cd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd62:	43db      	mvns	r3, r3
 800cd64:	69ba      	ldr	r2, [r7, #24]
 800cd66:	4013      	ands	r3, r2
 800cd68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	68da      	ldr	r2, [r3, #12]
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	fa02 f303 	lsl.w	r3, r2, r3
 800cd76:	69ba      	ldr	r2, [r7, #24]
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	69ba      	ldr	r2, [r7, #24]
 800cd80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cd88:	2201      	movs	r2, #1
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd90:	43db      	mvns	r3, r3
 800cd92:	69ba      	ldr	r2, [r7, #24]
 800cd94:	4013      	ands	r3, r2
 800cd96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	091b      	lsrs	r3, r3, #4
 800cd9e:	f003 0201 	and.w	r2, r3, #1
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	fa02 f303 	lsl.w	r3, r2, r3
 800cda8:	69ba      	ldr	r2, [r7, #24]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	69ba      	ldr	r2, [r7, #24]
 800cdb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	f003 0303 	and.w	r3, r3, #3
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d017      	beq.n	800cdf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	2203      	movs	r2, #3
 800cdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd0:	43db      	mvns	r3, r3
 800cdd2:	69ba      	ldr	r2, [r7, #24]
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	689a      	ldr	r2, [r3, #8]
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	fa02 f303 	lsl.w	r3, r2, r3
 800cde4:	69ba      	ldr	r2, [r7, #24]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	69ba      	ldr	r2, [r7, #24]
 800cdee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	f003 0303 	and.w	r3, r3, #3
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	d123      	bne.n	800ce44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	08da      	lsrs	r2, r3, #3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3208      	adds	r2, #8
 800ce04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	f003 0307 	and.w	r3, r3, #7
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	220f      	movs	r2, #15
 800ce14:	fa02 f303 	lsl.w	r3, r2, r3
 800ce18:	43db      	mvns	r3, r3
 800ce1a:	69ba      	ldr	r2, [r7, #24]
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	691a      	ldr	r2, [r3, #16]
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce30:	69ba      	ldr	r2, [r7, #24]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	08da      	lsrs	r2, r3, #3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	3208      	adds	r2, #8
 800ce3e:	69b9      	ldr	r1, [r7, #24]
 800ce40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	2203      	movs	r2, #3
 800ce50:	fa02 f303 	lsl.w	r3, r2, r3
 800ce54:	43db      	mvns	r3, r3
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	4013      	ands	r3, r2
 800ce5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	f003 0203 	and.w	r2, r3, #3
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6c:	69ba      	ldr	r2, [r7, #24]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 80b4 	beq.w	800cfee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ce86:	2300      	movs	r3, #0
 800ce88:	60fb      	str	r3, [r7, #12]
 800ce8a:	4b60      	ldr	r3, [pc, #384]	; (800d00c <HAL_GPIO_Init+0x30c>)
 800ce8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce8e:	4a5f      	ldr	r2, [pc, #380]	; (800d00c <HAL_GPIO_Init+0x30c>)
 800ce90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce94:	6453      	str	r3, [r2, #68]	; 0x44
 800ce96:	4b5d      	ldr	r3, [pc, #372]	; (800d00c <HAL_GPIO_Init+0x30c>)
 800ce98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce9e:	60fb      	str	r3, [r7, #12]
 800cea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cea2:	4a5b      	ldr	r2, [pc, #364]	; (800d010 <HAL_GPIO_Init+0x310>)
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	089b      	lsrs	r3, r3, #2
 800cea8:	3302      	adds	r3, #2
 800ceaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	f003 0303 	and.w	r3, r3, #3
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	220f      	movs	r2, #15
 800ceba:	fa02 f303 	lsl.w	r3, r2, r3
 800cebe:	43db      	mvns	r3, r3
 800cec0:	69ba      	ldr	r2, [r7, #24]
 800cec2:	4013      	ands	r3, r2
 800cec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a52      	ldr	r2, [pc, #328]	; (800d014 <HAL_GPIO_Init+0x314>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d02b      	beq.n	800cf26 <HAL_GPIO_Init+0x226>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4a51      	ldr	r2, [pc, #324]	; (800d018 <HAL_GPIO_Init+0x318>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d025      	beq.n	800cf22 <HAL_GPIO_Init+0x222>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4a50      	ldr	r2, [pc, #320]	; (800d01c <HAL_GPIO_Init+0x31c>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d01f      	beq.n	800cf1e <HAL_GPIO_Init+0x21e>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4a4f      	ldr	r2, [pc, #316]	; (800d020 <HAL_GPIO_Init+0x320>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d019      	beq.n	800cf1a <HAL_GPIO_Init+0x21a>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4a4e      	ldr	r2, [pc, #312]	; (800d024 <HAL_GPIO_Init+0x324>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d013      	beq.n	800cf16 <HAL_GPIO_Init+0x216>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a4d      	ldr	r2, [pc, #308]	; (800d028 <HAL_GPIO_Init+0x328>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d00d      	beq.n	800cf12 <HAL_GPIO_Init+0x212>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a4c      	ldr	r2, [pc, #304]	; (800d02c <HAL_GPIO_Init+0x32c>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d007      	beq.n	800cf0e <HAL_GPIO_Init+0x20e>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a4b      	ldr	r2, [pc, #300]	; (800d030 <HAL_GPIO_Init+0x330>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d101      	bne.n	800cf0a <HAL_GPIO_Init+0x20a>
 800cf06:	2307      	movs	r3, #7
 800cf08:	e00e      	b.n	800cf28 <HAL_GPIO_Init+0x228>
 800cf0a:	2308      	movs	r3, #8
 800cf0c:	e00c      	b.n	800cf28 <HAL_GPIO_Init+0x228>
 800cf0e:	2306      	movs	r3, #6
 800cf10:	e00a      	b.n	800cf28 <HAL_GPIO_Init+0x228>
 800cf12:	2305      	movs	r3, #5
 800cf14:	e008      	b.n	800cf28 <HAL_GPIO_Init+0x228>
 800cf16:	2304      	movs	r3, #4
 800cf18:	e006      	b.n	800cf28 <HAL_GPIO_Init+0x228>
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	e004      	b.n	800cf28 <HAL_GPIO_Init+0x228>
 800cf1e:	2302      	movs	r3, #2
 800cf20:	e002      	b.n	800cf28 <HAL_GPIO_Init+0x228>
 800cf22:	2301      	movs	r3, #1
 800cf24:	e000      	b.n	800cf28 <HAL_GPIO_Init+0x228>
 800cf26:	2300      	movs	r3, #0
 800cf28:	69fa      	ldr	r2, [r7, #28]
 800cf2a:	f002 0203 	and.w	r2, r2, #3
 800cf2e:	0092      	lsls	r2, r2, #2
 800cf30:	4093      	lsls	r3, r2
 800cf32:	69ba      	ldr	r2, [r7, #24]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cf38:	4935      	ldr	r1, [pc, #212]	; (800d010 <HAL_GPIO_Init+0x310>)
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	089b      	lsrs	r3, r3, #2
 800cf3e:	3302      	adds	r3, #2
 800cf40:	69ba      	ldr	r2, [r7, #24]
 800cf42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cf46:	4b3b      	ldr	r3, [pc, #236]	; (800d034 <HAL_GPIO_Init+0x334>)
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	43db      	mvns	r3, r3
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	4013      	ands	r3, r2
 800cf54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d003      	beq.n	800cf6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800cf62:	69ba      	ldr	r2, [r7, #24]
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cf6a:	4a32      	ldr	r2, [pc, #200]	; (800d034 <HAL_GPIO_Init+0x334>)
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cf70:	4b30      	ldr	r3, [pc, #192]	; (800d034 <HAL_GPIO_Init+0x334>)
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	43db      	mvns	r3, r3
 800cf7a:	69ba      	ldr	r2, [r7, #24]
 800cf7c:	4013      	ands	r3, r2
 800cf7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d003      	beq.n	800cf94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800cf8c:	69ba      	ldr	r2, [r7, #24]
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cf94:	4a27      	ldr	r2, [pc, #156]	; (800d034 <HAL_GPIO_Init+0x334>)
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cf9a:	4b26      	ldr	r3, [pc, #152]	; (800d034 <HAL_GPIO_Init+0x334>)
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	43db      	mvns	r3, r3
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d003      	beq.n	800cfbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800cfb6:	69ba      	ldr	r2, [r7, #24]
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cfbe:	4a1d      	ldr	r2, [pc, #116]	; (800d034 <HAL_GPIO_Init+0x334>)
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cfc4:	4b1b      	ldr	r3, [pc, #108]	; (800d034 <HAL_GPIO_Init+0x334>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	43db      	mvns	r3, r3
 800cfce:	69ba      	ldr	r2, [r7, #24]
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d003      	beq.n	800cfe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800cfe0:	69ba      	ldr	r2, [r7, #24]
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cfe8:	4a12      	ldr	r2, [pc, #72]	; (800d034 <HAL_GPIO_Init+0x334>)
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	3301      	adds	r3, #1
 800cff2:	61fb      	str	r3, [r7, #28]
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	2b0f      	cmp	r3, #15
 800cff8:	f67f ae90 	bls.w	800cd1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cffc:	bf00      	nop
 800cffe:	bf00      	nop
 800d000:	3724      	adds	r7, #36	; 0x24
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	40023800 	.word	0x40023800
 800d010:	40013800 	.word	0x40013800
 800d014:	40020000 	.word	0x40020000
 800d018:	40020400 	.word	0x40020400
 800d01c:	40020800 	.word	0x40020800
 800d020:	40020c00 	.word	0x40020c00
 800d024:	40021000 	.word	0x40021000
 800d028:	40021400 	.word	0x40021400
 800d02c:	40021800 	.word	0x40021800
 800d030:	40021c00 	.word	0x40021c00
 800d034:	40013c00 	.word	0x40013c00

0800d038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	807b      	strh	r3, [r7, #2]
 800d044:	4613      	mov	r3, r2
 800d046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d048:	787b      	ldrb	r3, [r7, #1]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d003      	beq.n	800d056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d04e:	887a      	ldrh	r2, [r7, #2]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d054:	e003      	b.n	800d05e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d056:	887b      	ldrh	r3, [r7, #2]
 800d058:	041a      	lsls	r2, r3, #16
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	619a      	str	r2, [r3, #24]
}
 800d05e:	bf00      	nop
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
	...

0800d06c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	4603      	mov	r3, r0
 800d074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d076:	4b08      	ldr	r3, [pc, #32]	; (800d098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d078:	695a      	ldr	r2, [r3, #20]
 800d07a:	88fb      	ldrh	r3, [r7, #6]
 800d07c:	4013      	ands	r3, r2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d006      	beq.n	800d090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d082:	4a05      	ldr	r2, [pc, #20]	; (800d098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d084:	88fb      	ldrh	r3, [r7, #6]
 800d086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d088:	88fb      	ldrh	r3, [r7, #6]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7f4 ff02 	bl	8001e94 <HAL_GPIO_EXTI_Callback>
  }
}
 800d090:	bf00      	nop
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	40013c00 	.word	0x40013c00

0800d09c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e12b      	b.n	800d306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d106      	bne.n	800d0c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7f6 fb3a 	bl	800373c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2224      	movs	r2, #36	; 0x24
 800d0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f022 0201 	bic.w	r2, r2, #1
 800d0de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d0ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d100:	f003 fc0c 	bl	801091c <HAL_RCC_GetPCLK1Freq>
 800d104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	4a81      	ldr	r2, [pc, #516]	; (800d310 <HAL_I2C_Init+0x274>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d807      	bhi.n	800d120 <HAL_I2C_Init+0x84>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	4a80      	ldr	r2, [pc, #512]	; (800d314 <HAL_I2C_Init+0x278>)
 800d114:	4293      	cmp	r3, r2
 800d116:	bf94      	ite	ls
 800d118:	2301      	movls	r3, #1
 800d11a:	2300      	movhi	r3, #0
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	e006      	b.n	800d12e <HAL_I2C_Init+0x92>
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	4a7d      	ldr	r2, [pc, #500]	; (800d318 <HAL_I2C_Init+0x27c>)
 800d124:	4293      	cmp	r3, r2
 800d126:	bf94      	ite	ls
 800d128:	2301      	movls	r3, #1
 800d12a:	2300      	movhi	r3, #0
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	e0e7      	b.n	800d306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	4a78      	ldr	r2, [pc, #480]	; (800d31c <HAL_I2C_Init+0x280>)
 800d13a:	fba2 2303 	umull	r2, r3, r2, r3
 800d13e:	0c9b      	lsrs	r3, r3, #18
 800d140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	430a      	orrs	r2, r1
 800d154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6a1b      	ldr	r3, [r3, #32]
 800d15c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	4a6a      	ldr	r2, [pc, #424]	; (800d310 <HAL_I2C_Init+0x274>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d802      	bhi.n	800d170 <HAL_I2C_Init+0xd4>
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	3301      	adds	r3, #1
 800d16e:	e009      	b.n	800d184 <HAL_I2C_Init+0xe8>
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d176:	fb02 f303 	mul.w	r3, r2, r3
 800d17a:	4a69      	ldr	r2, [pc, #420]	; (800d320 <HAL_I2C_Init+0x284>)
 800d17c:	fba2 2303 	umull	r2, r3, r2, r3
 800d180:	099b      	lsrs	r3, r3, #6
 800d182:	3301      	adds	r3, #1
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	6812      	ldr	r2, [r2, #0]
 800d188:	430b      	orrs	r3, r1
 800d18a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	69db      	ldr	r3, [r3, #28]
 800d192:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d196:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	495c      	ldr	r1, [pc, #368]	; (800d310 <HAL_I2C_Init+0x274>)
 800d1a0:	428b      	cmp	r3, r1
 800d1a2:	d819      	bhi.n	800d1d8 <HAL_I2C_Init+0x13c>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	1e59      	subs	r1, r3, #1
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	005b      	lsls	r3, r3, #1
 800d1ae:	fbb1 f3f3 	udiv	r3, r1, r3
 800d1b2:	1c59      	adds	r1, r3, #1
 800d1b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d1b8:	400b      	ands	r3, r1
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00a      	beq.n	800d1d4 <HAL_I2C_Init+0x138>
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	1e59      	subs	r1, r3, #1
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	fbb1 f3f3 	udiv	r3, r1, r3
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d1d2:	e051      	b.n	800d278 <HAL_I2C_Init+0x1dc>
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	e04f      	b.n	800d278 <HAL_I2C_Init+0x1dc>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d111      	bne.n	800d204 <HAL_I2C_Init+0x168>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	1e58      	subs	r0, r3, #1
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6859      	ldr	r1, [r3, #4]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	005b      	lsls	r3, r3, #1
 800d1ec:	440b      	add	r3, r1
 800d1ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	bf0c      	ite	eq
 800d1fc:	2301      	moveq	r3, #1
 800d1fe:	2300      	movne	r3, #0
 800d200:	b2db      	uxtb	r3, r3
 800d202:	e012      	b.n	800d22a <HAL_I2C_Init+0x18e>
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	1e58      	subs	r0, r3, #1
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6859      	ldr	r1, [r3, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	440b      	add	r3, r1
 800d212:	0099      	lsls	r1, r3, #2
 800d214:	440b      	add	r3, r1
 800d216:	fbb0 f3f3 	udiv	r3, r0, r3
 800d21a:	3301      	adds	r3, #1
 800d21c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d220:	2b00      	cmp	r3, #0
 800d222:	bf0c      	ite	eq
 800d224:	2301      	moveq	r3, #1
 800d226:	2300      	movne	r3, #0
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d001      	beq.n	800d232 <HAL_I2C_Init+0x196>
 800d22e:	2301      	movs	r3, #1
 800d230:	e022      	b.n	800d278 <HAL_I2C_Init+0x1dc>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10e      	bne.n	800d258 <HAL_I2C_Init+0x1bc>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	1e58      	subs	r0, r3, #1
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6859      	ldr	r1, [r3, #4]
 800d242:	460b      	mov	r3, r1
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	440b      	add	r3, r1
 800d248:	fbb0 f3f3 	udiv	r3, r0, r3
 800d24c:	3301      	adds	r3, #1
 800d24e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d256:	e00f      	b.n	800d278 <HAL_I2C_Init+0x1dc>
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	1e58      	subs	r0, r3, #1
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6859      	ldr	r1, [r3, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	440b      	add	r3, r1
 800d266:	0099      	lsls	r1, r3, #2
 800d268:	440b      	add	r3, r1
 800d26a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d26e:	3301      	adds	r3, #1
 800d270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d278:	6879      	ldr	r1, [r7, #4]
 800d27a:	6809      	ldr	r1, [r1, #0]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	69da      	ldr	r2, [r3, #28]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	431a      	orrs	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	430a      	orrs	r2, r1
 800d29a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d2a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	6911      	ldr	r1, [r2, #16]
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	68d2      	ldr	r2, [r2, #12]
 800d2b2:	4311      	orrs	r1, r2
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	6812      	ldr	r2, [r2, #0]
 800d2b8:	430b      	orrs	r3, r1
 800d2ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	695a      	ldr	r2, [r3, #20]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	699b      	ldr	r3, [r3, #24]
 800d2ce:	431a      	orrs	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	430a      	orrs	r2, r1
 800d2d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f042 0201 	orr.w	r2, r2, #1
 800d2e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2220      	movs	r2, #32
 800d2f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	000186a0 	.word	0x000186a0
 800d314:	001e847f 	.word	0x001e847f
 800d318:	003d08ff 	.word	0x003d08ff
 800d31c:	431bde83 	.word	0x431bde83
 800d320:	10624dd3 	.word	0x10624dd3

0800d324 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b088      	sub	sp, #32
 800d328:	af02      	add	r7, sp, #8
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	4608      	mov	r0, r1
 800d32e:	4611      	mov	r1, r2
 800d330:	461a      	mov	r2, r3
 800d332:	4603      	mov	r3, r0
 800d334:	817b      	strh	r3, [r7, #10]
 800d336:	460b      	mov	r3, r1
 800d338:	813b      	strh	r3, [r7, #8]
 800d33a:	4613      	mov	r3, r2
 800d33c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d33e:	f7fd fedd 	bl	800b0fc <HAL_GetTick>
 800d342:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	2b20      	cmp	r3, #32
 800d34e:	f040 80d9 	bne.w	800d504 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	9300      	str	r3, [sp, #0]
 800d356:	2319      	movs	r3, #25
 800d358:	2201      	movs	r2, #1
 800d35a:	496d      	ldr	r1, [pc, #436]	; (800d510 <HAL_I2C_Mem_Write+0x1ec>)
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	f001 fa53 	bl	800e808 <I2C_WaitOnFlagUntilTimeout>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d001      	beq.n	800d36c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d368:	2302      	movs	r3, #2
 800d36a:	e0cc      	b.n	800d506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d372:	2b01      	cmp	r3, #1
 800d374:	d101      	bne.n	800d37a <HAL_I2C_Mem_Write+0x56>
 800d376:	2302      	movs	r3, #2
 800d378:	e0c5      	b.n	800d506 <HAL_I2C_Mem_Write+0x1e2>
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2201      	movs	r2, #1
 800d37e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f003 0301 	and.w	r3, r3, #1
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d007      	beq.n	800d3a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f042 0201 	orr.w	r2, r2, #1
 800d39e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2221      	movs	r2, #33	; 0x21
 800d3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2240      	movs	r2, #64	; 0x40
 800d3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6a3a      	ldr	r2, [r7, #32]
 800d3ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4a4d      	ldr	r2, [pc, #308]	; (800d514 <HAL_I2C_Mem_Write+0x1f0>)
 800d3e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d3e2:	88f8      	ldrh	r0, [r7, #6]
 800d3e4:	893a      	ldrh	r2, [r7, #8]
 800d3e6:	8979      	ldrh	r1, [r7, #10]
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	9301      	str	r3, [sp, #4]
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	f000 fed0 	bl	800e198 <I2C_RequestMemoryWrite>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d052      	beq.n	800d4a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d3fe:	2301      	movs	r3, #1
 800d400:	e081      	b.n	800d506 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f001 fad4 	bl	800e9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00d      	beq.n	800d42e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d416:	2b04      	cmp	r3, #4
 800d418:	d107      	bne.n	800d42a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e06b      	b.n	800d506 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d432:	781a      	ldrb	r2, [r3, #0]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d448:	3b01      	subs	r3, #1
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d454:	b29b      	uxth	r3, r3
 800d456:	3b01      	subs	r3, #1
 800d458:	b29a      	uxth	r2, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	695b      	ldr	r3, [r3, #20]
 800d464:	f003 0304 	and.w	r3, r3, #4
 800d468:	2b04      	cmp	r3, #4
 800d46a:	d11b      	bne.n	800d4a4 <HAL_I2C_Mem_Write+0x180>
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d470:	2b00      	cmp	r3, #0
 800d472:	d017      	beq.n	800d4a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d478:	781a      	ldrb	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d484:	1c5a      	adds	r2, r3, #1
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d48e:	3b01      	subs	r3, #1
 800d490:	b29a      	uxth	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	3b01      	subs	r3, #1
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1aa      	bne.n	800d402 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4ac:	697a      	ldr	r2, [r7, #20]
 800d4ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f001 fac0 	bl	800ea36 <I2C_WaitOnBTFFlagUntilTimeout>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00d      	beq.n	800d4d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c0:	2b04      	cmp	r3, #4
 800d4c2:	d107      	bne.n	800d4d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e016      	b.n	800d506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2220      	movs	r2, #32
 800d4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	e000      	b.n	800d506 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d504:	2302      	movs	r3, #2
  }
}
 800d506:	4618      	mov	r0, r3
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	00100002 	.word	0x00100002
 800d514:	ffff0000 	.word	0xffff0000

0800d518 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b08c      	sub	sp, #48	; 0x30
 800d51c:	af02      	add	r7, sp, #8
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	4608      	mov	r0, r1
 800d522:	4611      	mov	r1, r2
 800d524:	461a      	mov	r2, r3
 800d526:	4603      	mov	r3, r0
 800d528:	817b      	strh	r3, [r7, #10]
 800d52a:	460b      	mov	r3, r1
 800d52c:	813b      	strh	r3, [r7, #8]
 800d52e:	4613      	mov	r3, r2
 800d530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d532:	f7fd fde3 	bl	800b0fc <HAL_GetTick>
 800d536:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	2b20      	cmp	r3, #32
 800d542:	f040 8208 	bne.w	800d956 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	2319      	movs	r3, #25
 800d54c:	2201      	movs	r2, #1
 800d54e:	497b      	ldr	r1, [pc, #492]	; (800d73c <HAL_I2C_Mem_Read+0x224>)
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f001 f959 	bl	800e808 <I2C_WaitOnFlagUntilTimeout>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d001      	beq.n	800d560 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d55c:	2302      	movs	r3, #2
 800d55e:	e1fb      	b.n	800d958 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d566:	2b01      	cmp	r3, #1
 800d568:	d101      	bne.n	800d56e <HAL_I2C_Mem_Read+0x56>
 800d56a:	2302      	movs	r3, #2
 800d56c:	e1f4      	b.n	800d958 <HAL_I2C_Mem_Read+0x440>
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f003 0301 	and.w	r3, r3, #1
 800d580:	2b01      	cmp	r3, #1
 800d582:	d007      	beq.n	800d594 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f042 0201 	orr.w	r2, r2, #1
 800d592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d5a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2222      	movs	r2, #34	; 0x22
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2240      	movs	r2, #64	; 0x40
 800d5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d5c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	4a5b      	ldr	r2, [pc, #364]	; (800d740 <HAL_I2C_Mem_Read+0x228>)
 800d5d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d5d6:	88f8      	ldrh	r0, [r7, #6]
 800d5d8:	893a      	ldrh	r2, [r7, #8]
 800d5da:	8979      	ldrh	r1, [r7, #10]
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	9301      	str	r3, [sp, #4]
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e2:	9300      	str	r3, [sp, #0]
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f000 fe6c 	bl	800e2c4 <I2C_RequestMemoryRead>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d001      	beq.n	800d5f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e1b0      	b.n	800d958 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d113      	bne.n	800d626 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5fe:	2300      	movs	r3, #0
 800d600:	623b      	str	r3, [r7, #32]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	695b      	ldr	r3, [r3, #20]
 800d608:	623b      	str	r3, [r7, #32]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	623b      	str	r3, [r7, #32]
 800d612:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	e184      	b.n	800d930 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d11b      	bne.n	800d666 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d63c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d63e:	2300      	movs	r3, #0
 800d640:	61fb      	str	r3, [r7, #28]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	695b      	ldr	r3, [r3, #20]
 800d648:	61fb      	str	r3, [r7, #28]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	699b      	ldr	r3, [r3, #24]
 800d650:	61fb      	str	r3, [r7, #28]
 800d652:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	e164      	b.n	800d930 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d11b      	bne.n	800d6a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d67c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d68c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d68e:	2300      	movs	r3, #0
 800d690:	61bb      	str	r3, [r7, #24]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	695b      	ldr	r3, [r3, #20]
 800d698:	61bb      	str	r3, [r7, #24]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	61bb      	str	r3, [r7, #24]
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	e144      	b.n	800d930 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	617b      	str	r3, [r7, #20]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	695b      	ldr	r3, [r3, #20]
 800d6b0:	617b      	str	r3, [r7, #20]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	617b      	str	r3, [r7, #20]
 800d6ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d6bc:	e138      	b.n	800d930 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6c2:	2b03      	cmp	r3, #3
 800d6c4:	f200 80f1 	bhi.w	800d8aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d123      	bne.n	800d718 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f001 f9ef 	bl	800eab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e139      	b.n	800d958 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	691a      	ldr	r2, [r3, #16]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ee:	b2d2      	uxtb	r2, r2
 800d6f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f6:	1c5a      	adds	r2, r3, #1
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d700:	3b01      	subs	r3, #1
 800d702:	b29a      	uxth	r2, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	3b01      	subs	r3, #1
 800d710:	b29a      	uxth	r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d716:	e10b      	b.n	800d930 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d14e      	bne.n	800d7be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d726:	2200      	movs	r2, #0
 800d728:	4906      	ldr	r1, [pc, #24]	; (800d744 <HAL_I2C_Mem_Read+0x22c>)
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f001 f86c 	bl	800e808 <I2C_WaitOnFlagUntilTimeout>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d008      	beq.n	800d748 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d736:	2301      	movs	r3, #1
 800d738:	e10e      	b.n	800d958 <HAL_I2C_Mem_Read+0x440>
 800d73a:	bf00      	nop
 800d73c:	00100002 	.word	0x00100002
 800d740:	ffff0000 	.word	0xffff0000
 800d744:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	691a      	ldr	r2, [r3, #16]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d762:	b2d2      	uxtb	r2, r2
 800d764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d774:	3b01      	subs	r3, #1
 800d776:	b29a      	uxth	r2, r3
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d780:	b29b      	uxth	r3, r3
 800d782:	3b01      	subs	r3, #1
 800d784:	b29a      	uxth	r2, r3
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	691a      	ldr	r2, [r3, #16]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d794:	b2d2      	uxtb	r2, r2
 800d796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79c:	1c5a      	adds	r2, r3, #1
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d7bc:	e0b8      	b.n	800d930 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	4966      	ldr	r1, [pc, #408]	; (800d960 <HAL_I2C_Mem_Read+0x448>)
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f001 f81d 	bl	800e808 <I2C_WaitOnFlagUntilTimeout>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	e0bf      	b.n	800d958 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	691a      	ldr	r2, [r3, #16]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	b2d2      	uxtb	r2, r2
 800d7f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	1c5a      	adds	r2, r3, #1
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d804:	3b01      	subs	r3, #1
 800d806:	b29a      	uxth	r2, r3
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d810:	b29b      	uxth	r3, r3
 800d812:	3b01      	subs	r3, #1
 800d814:	b29a      	uxth	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d820:	2200      	movs	r2, #0
 800d822:	494f      	ldr	r1, [pc, #316]	; (800d960 <HAL_I2C_Mem_Read+0x448>)
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f000 ffef 	bl	800e808 <I2C_WaitOnFlagUntilTimeout>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d001      	beq.n	800d834 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	e091      	b.n	800d958 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	691a      	ldr	r2, [r3, #16]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84e:	b2d2      	uxtb	r2, r2
 800d850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d856:	1c5a      	adds	r2, r3, #1
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d860:	3b01      	subs	r3, #1
 800d862:	b29a      	uxth	r2, r3
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	3b01      	subs	r3, #1
 800d870:	b29a      	uxth	r2, r3
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	691a      	ldr	r2, [r3, #16]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d880:	b2d2      	uxtb	r2, r2
 800d882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d888:	1c5a      	adds	r2, r3, #1
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d892:	3b01      	subs	r3, #1
 800d894:	b29a      	uxth	r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d8a8:	e042      	b.n	800d930 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f001 f902 	bl	800eab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e04c      	b.n	800d958 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	691a      	ldr	r2, [r3, #16]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	b2d2      	uxtb	r2, r2
 800d8ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d0:	1c5a      	adds	r2, r3, #1
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	695b      	ldr	r3, [r3, #20]
 800d8f6:	f003 0304 	and.w	r3, r3, #4
 800d8fa:	2b04      	cmp	r3, #4
 800d8fc:	d118      	bne.n	800d930 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	691a      	ldr	r2, [r3, #16]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d908:	b2d2      	uxtb	r2, r2
 800d90a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d91a:	3b01      	subs	r3, #1
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d926:	b29b      	uxth	r3, r3
 800d928:	3b01      	subs	r3, #1
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d934:	2b00      	cmp	r3, #0
 800d936:	f47f aec2 	bne.w	800d6be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2220      	movs	r2, #32
 800d93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d952:	2300      	movs	r3, #0
 800d954:	e000      	b.n	800d958 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d956:	2302      	movs	r3, #2
  }
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3728      	adds	r7, #40	; 0x28
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	00010004 	.word	0x00010004

0800d964 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08c      	sub	sp, #48	; 0x30
 800d968:	af02      	add	r7, sp, #8
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	4608      	mov	r0, r1
 800d96e:	4611      	mov	r1, r2
 800d970:	461a      	mov	r2, r3
 800d972:	4603      	mov	r3, r0
 800d974:	817b      	strh	r3, [r7, #10]
 800d976:	460b      	mov	r3, r1
 800d978:	813b      	strh	r3, [r7, #8]
 800d97a:	4613      	mov	r3, r2
 800d97c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d97e:	f7fd fbbd 	bl	800b0fc <HAL_GetTick>
 800d982:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800d984:	2300      	movs	r3, #0
 800d986:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	2b20      	cmp	r3, #32
 800d992:	f040 8176 	bne.w	800dc82 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d996:	4b95      	ldr	r3, [pc, #596]	; (800dbec <HAL_I2C_Mem_Read_DMA+0x288>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	08db      	lsrs	r3, r3, #3
 800d99c:	4a94      	ldr	r2, [pc, #592]	; (800dbf0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800d99e:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a2:	0a1a      	lsrs	r2, r3, #8
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	4413      	add	r3, r2
 800d9aa:	009a      	lsls	r2, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d116      	bne.n	800d9ea <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2220      	movs	r2, #32
 800d9c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d6:	f043 0220 	orr.w	r2, r3, #32
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e14c      	b.n	800dc84 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	699b      	ldr	r3, [r3, #24]
 800d9f0:	f003 0302 	and.w	r3, r3, #2
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d0db      	beq.n	800d9b0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d101      	bne.n	800da06 <HAL_I2C_Mem_Read_DMA+0xa2>
 800da02:	2302      	movs	r3, #2
 800da04:	e13e      	b.n	800dc84 <HAL_I2C_Mem_Read_DMA+0x320>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 0301 	and.w	r3, r3, #1
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d007      	beq.n	800da2c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f042 0201 	orr.w	r2, r2, #1
 800da2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2222      	movs	r2, #34	; 0x22
 800da40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2240      	movs	r2, #64	; 0x40
 800da48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800da5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da62:	b29a      	uxth	r2, r3
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	4a62      	ldr	r2, [pc, #392]	; (800dbf4 <HAL_I2C_Mem_Read_DMA+0x290>)
 800da6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800da6e:	897a      	ldrh	r2, [r7, #10]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800da74:	893a      	ldrh	r2, [r7, #8]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800da7a:	88fa      	ldrh	r2, [r7, #6]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2200      	movs	r2, #0
 800da84:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 80cc 	beq.w	800dc28 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da94:	2b00      	cmp	r3, #0
 800da96:	d02d      	beq.n	800daf4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da9c:	4a56      	ldr	r2, [pc, #344]	; (800dbf8 <HAL_I2C_Mem_Read_DMA+0x294>)
 800da9e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa4:	4a55      	ldr	r2, [pc, #340]	; (800dbfc <HAL_I2C_Mem_Read_DMA+0x298>)
 800daa6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daac:	2200      	movs	r2, #0
 800daae:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab4:	2200      	movs	r2, #0
 800dab6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dabc:	2200      	movs	r2, #0
 800dabe:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac4:	2200      	movs	r2, #0
 800dac6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	3310      	adds	r3, #16
 800dad2:	4619      	mov	r1, r3
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad8:	461a      	mov	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dade:	f7fe fdaf 	bl	800c640 <HAL_DMA_Start_IT>
 800dae2:	4603      	mov	r3, r0
 800dae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800dae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800daec:	2b00      	cmp	r3, #0
 800daee:	f040 8087 	bne.w	800dc00 <HAL_I2C_Mem_Read_DMA+0x29c>
 800daf2:	e013      	b.n	800db1c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2220      	movs	r2, #32
 800daf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2200      	movs	r2, #0
 800db00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2200      	movs	r2, #0
 800db14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e0b3      	b.n	800dc84 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800db1c:	88f8      	ldrh	r0, [r7, #6]
 800db1e:	893a      	ldrh	r2, [r7, #8]
 800db20:	8979      	ldrh	r1, [r7, #10]
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	2323      	movs	r3, #35	; 0x23
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	4603      	mov	r3, r0
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f000 fbc9 	bl	800e2c4 <I2C_RequestMemoryRead>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d023      	beq.n	800db80 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fe fe47 	bl	800c7d0 <HAL_DMA_Abort_IT>
 800db42:	4603      	mov	r3, r0
 800db44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db4c:	2200      	movs	r2, #0
 800db4e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db5e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2200      	movs	r2, #0
 800db64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f022 0201 	bic.w	r2, r2, #1
 800db7a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800db7c:	2301      	movs	r3, #1
 800db7e:	e081      	b.n	800dc84 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db84:	2b01      	cmp	r3, #1
 800db86:	d108      	bne.n	800db9a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db96:	601a      	str	r2, [r3, #0]
 800db98:	e007      	b.n	800dbaa <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	685a      	ldr	r2, [r3, #4]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dba8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbaa:	2300      	movs	r3, #0
 800dbac:	61bb      	str	r3, [r7, #24]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	695b      	ldr	r3, [r3, #20]
 800dbb4:	61bb      	str	r3, [r7, #24]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	699b      	ldr	r3, [r3, #24]
 800dbbc:	61bb      	str	r3, [r7, #24]
 800dbbe:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	685a      	ldr	r2, [r3, #4]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dbd6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	685a      	ldr	r2, [r3, #4]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbe6:	605a      	str	r2, [r3, #4]
 800dbe8:	e049      	b.n	800dc7e <HAL_I2C_Mem_Read_DMA+0x31a>
 800dbea:	bf00      	nop
 800dbec:	20000004 	.word	0x20000004
 800dbf0:	14f8b589 	.word	0x14f8b589
 800dbf4:	ffff0000 	.word	0xffff0000
 800dbf8:	0800e495 	.word	0x0800e495
 800dbfc:	0800e63f 	.word	0x0800e63f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2220      	movs	r2, #32
 800dc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc14:	f043 0210 	orr.w	r2, r3, #16
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e02d      	b.n	800dc84 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800dc28:	88f8      	ldrh	r0, [r7, #6]
 800dc2a:	893a      	ldrh	r2, [r7, #8]
 800dc2c:	8979      	ldrh	r1, [r7, #10]
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc30:	9301      	str	r3, [sp, #4]
 800dc32:	2323      	movs	r3, #35	; 0x23
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	4603      	mov	r3, r0
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f000 fb43 	bl	800e2c4 <I2C_RequestMemoryRead>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d001      	beq.n	800dc48 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 800dc44:	2301      	movs	r3, #1
 800dc46:	e01d      	b.n	800dc84 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc48:	2300      	movs	r3, #0
 800dc4a:	617b      	str	r3, [r7, #20]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	695b      	ldr	r3, [r3, #20]
 800dc52:	617b      	str	r3, [r7, #20]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	699b      	ldr	r3, [r3, #24]
 800dc5a:	617b      	str	r3, [r7, #20]
 800dc5c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc6c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2220      	movs	r2, #32
 800dc72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e000      	b.n	800dc84 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800dc82:	2302      	movs	r3, #2
  }
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3728      	adds	r7, #40	; 0x28
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08a      	sub	sp, #40	; 0x28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	695b      	ldr	r3, [r3, #20]
 800dc9a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800dca4:	2300      	movs	r3, #0
 800dca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dcae:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	0a1b      	lsrs	r3, r3, #8
 800dcb4:	f003 0301 	and.w	r3, r3, #1
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00e      	beq.n	800dcda <HAL_I2C_ER_IRQHandler+0x4e>
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	0a1b      	lsrs	r3, r3, #8
 800dcc0:	f003 0301 	and.w	r3, r3, #1
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d008      	beq.n	800dcda <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800dcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcca:	f043 0301 	orr.w	r3, r3, #1
 800dcce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dcd8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dcda:	6a3b      	ldr	r3, [r7, #32]
 800dcdc:	0a5b      	lsrs	r3, r3, #9
 800dcde:	f003 0301 	and.w	r3, r3, #1
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00e      	beq.n	800dd04 <HAL_I2C_ER_IRQHandler+0x78>
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	0a1b      	lsrs	r3, r3, #8
 800dcea:	f003 0301 	and.w	r3, r3, #1
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d008      	beq.n	800dd04 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	f043 0302 	orr.w	r3, r3, #2
 800dcf8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800dd02:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dd04:	6a3b      	ldr	r3, [r7, #32]
 800dd06:	0a9b      	lsrs	r3, r3, #10
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d03f      	beq.n	800dd90 <HAL_I2C_ER_IRQHandler+0x104>
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	0a1b      	lsrs	r3, r3, #8
 800dd14:	f003 0301 	and.w	r3, r3, #1
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d039      	beq.n	800dd90 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800dd1c:	7efb      	ldrb	r3, [r7, #27]
 800dd1e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd2e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd34:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800dd36:	7ebb      	ldrb	r3, [r7, #26]
 800dd38:	2b20      	cmp	r3, #32
 800dd3a:	d112      	bne.n	800dd62 <HAL_I2C_ER_IRQHandler+0xd6>
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d10f      	bne.n	800dd62 <HAL_I2C_ER_IRQHandler+0xd6>
 800dd42:	7cfb      	ldrb	r3, [r7, #19]
 800dd44:	2b21      	cmp	r3, #33	; 0x21
 800dd46:	d008      	beq.n	800dd5a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800dd48:	7cfb      	ldrb	r3, [r7, #19]
 800dd4a:	2b29      	cmp	r3, #41	; 0x29
 800dd4c:	d005      	beq.n	800dd5a <HAL_I2C_ER_IRQHandler+0xce>
 800dd4e:	7cfb      	ldrb	r3, [r7, #19]
 800dd50:	2b28      	cmp	r3, #40	; 0x28
 800dd52:	d106      	bne.n	800dd62 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b21      	cmp	r3, #33	; 0x21
 800dd58:	d103      	bne.n	800dd62 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f87a 	bl	800de54 <I2C_Slave_AF>
 800dd60:	e016      	b.n	800dd90 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dd6a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6e:	f043 0304 	orr.w	r3, r3, #4
 800dd72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800dd74:	7efb      	ldrb	r3, [r7, #27]
 800dd76:	2b10      	cmp	r3, #16
 800dd78:	d002      	beq.n	800dd80 <HAL_I2C_ER_IRQHandler+0xf4>
 800dd7a:	7efb      	ldrb	r3, [r7, #27]
 800dd7c:	2b40      	cmp	r3, #64	; 0x40
 800dd7e:	d107      	bne.n	800dd90 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd8e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dd90:	6a3b      	ldr	r3, [r7, #32]
 800dd92:	0adb      	lsrs	r3, r3, #11
 800dd94:	f003 0301 	and.w	r3, r3, #1
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d00e      	beq.n	800ddba <HAL_I2C_ER_IRQHandler+0x12e>
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	0a1b      	lsrs	r3, r3, #8
 800dda0:	f003 0301 	and.w	r3, r3, #1
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d008      	beq.n	800ddba <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	f043 0308 	orr.w	r3, r3, #8
 800ddae:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800ddb8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800ddba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d008      	beq.n	800ddd2 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc6:	431a      	orrs	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f8b1 	bl	800df34 <I2C_ITError>
  }
}
 800ddd2:	bf00      	nop
 800ddd4:	3728      	adds	r7, #40	; 0x28
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ddda:	b480      	push	{r7}
 800dddc:	b083      	sub	sp, #12
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800dde2:	bf00      	nop
 800dde4:	370c      	adds	r7, #12
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr

0800ddee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ddee:	b480      	push	{r7}
 800ddf0:	b083      	sub	sp, #12
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ddf6:	bf00      	nop
 800ddf8:	370c      	adds	r7, #12
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr

0800de02 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800de02:	b480      	push	{r7}
 800de04:	b083      	sub	sp, #12
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800de0a:	bf00      	nop
 800de0c:	370c      	adds	r7, #12
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr

0800de16 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800de16:	b480      	push	{r7}
 800de18:	b083      	sub	sp, #12
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800de1e:	bf00      	nop
 800de20:	370c      	adds	r7, #12
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr

0800de2a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800de2a:	b480      	push	{r7}
 800de2c:	b083      	sub	sp, #12
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800de32:	bf00      	nop
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800de3e:	b480      	push	{r7}
 800de40:	b083      	sub	sp, #12
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800de46:	bf00      	nop
 800de48:	370c      	adds	r7, #12
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr
	...

0800de54 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de62:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de68:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	2b08      	cmp	r3, #8
 800de6e:	d002      	beq.n	800de76 <I2C_Slave_AF+0x22>
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	2b20      	cmp	r3, #32
 800de74:	d129      	bne.n	800deca <I2C_Slave_AF+0x76>
 800de76:	7bfb      	ldrb	r3, [r7, #15]
 800de78:	2b28      	cmp	r3, #40	; 0x28
 800de7a:	d126      	bne.n	800deca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	4a2c      	ldr	r2, [pc, #176]	; (800df30 <I2C_Slave_AF+0xdc>)
 800de80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	685a      	ldr	r2, [r3, #4]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800de90:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800de9a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deaa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2220      	movs	r2, #32
 800deb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff ffa7 	bl	800de16 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800dec8:	e02e      	b.n	800df28 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	2b21      	cmp	r3, #33	; 0x21
 800dece:	d126      	bne.n	800df1e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a17      	ldr	r2, [pc, #92]	; (800df30 <I2C_Slave_AF+0xdc>)
 800ded4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2221      	movs	r2, #33	; 0x21
 800deda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2220      	movs	r2, #32
 800dee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	685a      	ldr	r2, [r3, #4]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800defa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800df04:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df14:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7ff ff69 	bl	800ddee <HAL_I2C_SlaveTxCpltCallback>
}
 800df1c:	e004      	b.n	800df28 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800df26:	615a      	str	r2, [r3, #20]
}
 800df28:	bf00      	nop
 800df2a:	3710      	adds	r7, #16
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	ffff0000 	.word	0xffff0000

0800df34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800df4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800df4c:	7bbb      	ldrb	r3, [r7, #14]
 800df4e:	2b10      	cmp	r3, #16
 800df50:	d002      	beq.n	800df58 <I2C_ITError+0x24>
 800df52:	7bbb      	ldrb	r3, [r7, #14]
 800df54:	2b40      	cmp	r3, #64	; 0x40
 800df56:	d10a      	bne.n	800df6e <I2C_ITError+0x3a>
 800df58:	7bfb      	ldrb	r3, [r7, #15]
 800df5a:	2b22      	cmp	r3, #34	; 0x22
 800df5c:	d107      	bne.n	800df6e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df6c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800df6e:	7bfb      	ldrb	r3, [r7, #15]
 800df70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800df74:	2b28      	cmp	r3, #40	; 0x28
 800df76:	d107      	bne.n	800df88 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2228      	movs	r2, #40	; 0x28
 800df82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800df86:	e015      	b.n	800dfb4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df96:	d00a      	beq.n	800dfae <I2C_ITError+0x7a>
 800df98:	7bfb      	ldrb	r3, [r7, #15]
 800df9a:	2b60      	cmp	r3, #96	; 0x60
 800df9c:	d007      	beq.n	800dfae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2220      	movs	r2, #32
 800dfa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfc2:	d162      	bne.n	800e08a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	685a      	ldr	r2, [r3, #4]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfd2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d020      	beq.n	800e024 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfe6:	4a6a      	ldr	r2, [pc, #424]	; (800e190 <I2C_ITError+0x25c>)
 800dfe8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fe fbee 	bl	800c7d0 <HAL_DMA_Abort_IT>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	f000 8089 	beq.w	800e10e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f022 0201 	bic.w	r2, r2, #1
 800e00a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2220      	movs	r2, #32
 800e010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e01e:	4610      	mov	r0, r2
 800e020:	4798      	blx	r3
 800e022:	e074      	b.n	800e10e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e028:	4a59      	ldr	r2, [pc, #356]	; (800e190 <I2C_ITError+0x25c>)
 800e02a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe fbcd 	bl	800c7d0 <HAL_DMA_Abort_IT>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d068      	beq.n	800e10e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	695b      	ldr	r3, [r3, #20]
 800e042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e046:	2b40      	cmp	r3, #64	; 0x40
 800e048:	d10b      	bne.n	800e062 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	691a      	ldr	r2, [r3, #16]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e054:	b2d2      	uxtb	r2, r2
 800e056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05c:	1c5a      	adds	r2, r3, #1
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f022 0201 	bic.w	r2, r2, #1
 800e070:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2220      	movs	r2, #32
 800e076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e084:	4610      	mov	r0, r2
 800e086:	4798      	blx	r3
 800e088:	e041      	b.n	800e10e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e090:	b2db      	uxtb	r3, r3
 800e092:	2b60      	cmp	r3, #96	; 0x60
 800e094:	d125      	bne.n	800e0e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2220      	movs	r2, #32
 800e09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ae:	2b40      	cmp	r3, #64	; 0x40
 800e0b0:	d10b      	bne.n	800e0ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	691a      	ldr	r2, [r3, #16]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0bc:	b2d2      	uxtb	r2, r2
 800e0be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c4:	1c5a      	adds	r2, r3, #1
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f022 0201 	bic.w	r2, r2, #1
 800e0d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7ff feaf 	bl	800de3e <HAL_I2C_AbortCpltCallback>
 800e0e0:	e015      	b.n	800e10e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	695b      	ldr	r3, [r3, #20]
 800e0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ec:	2b40      	cmp	r3, #64	; 0x40
 800e0ee:	d10b      	bne.n	800e108 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	691a      	ldr	r2, [r3, #16]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff fe8e 	bl	800de2a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e112:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10e      	bne.n	800e13c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e124:	2b00      	cmp	r3, #0
 800e126:	d109      	bne.n	800e13c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d104      	bne.n	800e13c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d007      	beq.n	800e14c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	685a      	ldr	r2, [r3, #4]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e14a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e152:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e158:	f003 0304 	and.w	r3, r3, #4
 800e15c:	2b04      	cmp	r3, #4
 800e15e:	d113      	bne.n	800e188 <I2C_ITError+0x254>
 800e160:	7bfb      	ldrb	r3, [r7, #15]
 800e162:	2b28      	cmp	r3, #40	; 0x28
 800e164:	d110      	bne.n	800e188 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a0a      	ldr	r2, [pc, #40]	; (800e194 <I2C_ITError+0x260>)
 800e16a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2220      	movs	r2, #32
 800e176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff fe47 	bl	800de16 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e188:	bf00      	nop
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	0800e6b9 	.word	0x0800e6b9
 800e194:	ffff0000 	.word	0xffff0000

0800e198 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b088      	sub	sp, #32
 800e19c:	af02      	add	r7, sp, #8
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	4608      	mov	r0, r1
 800e1a2:	4611      	mov	r1, r2
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	817b      	strh	r3, [r7, #10]
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	813b      	strh	r3, [r7, #8]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	6a3b      	ldr	r3, [r7, #32]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 fb1a 	bl	800e808 <I2C_WaitOnFlagUntilTimeout>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00d      	beq.n	800e1f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1e8:	d103      	bne.n	800e1f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e1f2:	2303      	movs	r3, #3
 800e1f4:	e05f      	b.n	800e2b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e1f6:	897b      	ldrh	r3, [r7, #10]
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e204:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e208:	6a3a      	ldr	r2, [r7, #32]
 800e20a:	492d      	ldr	r1, [pc, #180]	; (800e2c0 <I2C_RequestMemoryWrite+0x128>)
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f000 fb52 	bl	800e8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	e04c      	b.n	800e2b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e21c:	2300      	movs	r3, #0
 800e21e:	617b      	str	r3, [r7, #20]
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	695b      	ldr	r3, [r3, #20]
 800e226:	617b      	str	r3, [r7, #20]
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	617b      	str	r3, [r7, #20]
 800e230:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e234:	6a39      	ldr	r1, [r7, #32]
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f000 fbbc 	bl	800e9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00d      	beq.n	800e25e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e246:	2b04      	cmp	r3, #4
 800e248:	d107      	bne.n	800e25a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e258:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e02b      	b.n	800e2b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e25e:	88fb      	ldrh	r3, [r7, #6]
 800e260:	2b01      	cmp	r3, #1
 800e262:	d105      	bne.n	800e270 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e264:	893b      	ldrh	r3, [r7, #8]
 800e266:	b2da      	uxtb	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	611a      	str	r2, [r3, #16]
 800e26e:	e021      	b.n	800e2b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e270:	893b      	ldrh	r3, [r7, #8]
 800e272:	0a1b      	lsrs	r3, r3, #8
 800e274:	b29b      	uxth	r3, r3
 800e276:	b2da      	uxtb	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e280:	6a39      	ldr	r1, [r7, #32]
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f000 fb96 	bl	800e9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00d      	beq.n	800e2aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e292:	2b04      	cmp	r3, #4
 800e294:	d107      	bne.n	800e2a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e005      	b.n	800e2b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e2aa:	893b      	ldrh	r3, [r7, #8]
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3718      	adds	r7, #24
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	00010002 	.word	0x00010002

0800e2c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b088      	sub	sp, #32
 800e2c8:	af02      	add	r7, sp, #8
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	4608      	mov	r0, r1
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	817b      	strh	r3, [r7, #10]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	813b      	strh	r3, [r7, #8]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	6a3b      	ldr	r3, [r7, #32]
 800e304:	2200      	movs	r2, #0
 800e306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f000 fa7c 	bl	800e808 <I2C_WaitOnFlagUntilTimeout>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00d      	beq.n	800e332 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e324:	d103      	bne.n	800e32e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e32c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e32e:	2303      	movs	r3, #3
 800e330:	e0aa      	b.n	800e488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e332:	897b      	ldrh	r3, [r7, #10]
 800e334:	b2db      	uxtb	r3, r3
 800e336:	461a      	mov	r2, r3
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e344:	6a3a      	ldr	r2, [r7, #32]
 800e346:	4952      	ldr	r1, [pc, #328]	; (800e490 <I2C_RequestMemoryRead+0x1cc>)
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f000 fab4 	bl	800e8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d001      	beq.n	800e358 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e354:	2301      	movs	r3, #1
 800e356:	e097      	b.n	800e488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e358:	2300      	movs	r3, #0
 800e35a:	617b      	str	r3, [r7, #20]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	695b      	ldr	r3, [r3, #20]
 800e362:	617b      	str	r3, [r7, #20]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	699b      	ldr	r3, [r3, #24]
 800e36a:	617b      	str	r3, [r7, #20]
 800e36c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e370:	6a39      	ldr	r1, [r7, #32]
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f000 fb1e 	bl	800e9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00d      	beq.n	800e39a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e382:	2b04      	cmp	r3, #4
 800e384:	d107      	bne.n	800e396 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e396:	2301      	movs	r3, #1
 800e398:	e076      	b.n	800e488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e39a:	88fb      	ldrh	r3, [r7, #6]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d105      	bne.n	800e3ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e3a0:	893b      	ldrh	r3, [r7, #8]
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	611a      	str	r2, [r3, #16]
 800e3aa:	e021      	b.n	800e3f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e3ac:	893b      	ldrh	r3, [r7, #8]
 800e3ae:	0a1b      	lsrs	r3, r3, #8
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3bc:	6a39      	ldr	r1, [r7, #32]
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 faf8 	bl	800e9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00d      	beq.n	800e3e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ce:	2b04      	cmp	r3, #4
 800e3d0:	d107      	bne.n	800e3e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	e050      	b.n	800e488 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e3e6:	893b      	ldrh	r3, [r7, #8]
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3f2:	6a39      	ldr	r1, [r7, #32]
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f000 fadd 	bl	800e9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d00d      	beq.n	800e41c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e404:	2b04      	cmp	r3, #4
 800e406:	d107      	bne.n	800e418 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e416:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e418:	2301      	movs	r3, #1
 800e41a:	e035      	b.n	800e488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e42a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	6a3b      	ldr	r3, [r7, #32]
 800e432:	2200      	movs	r2, #0
 800e434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f000 f9e5 	bl	800e808 <I2C_WaitOnFlagUntilTimeout>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00d      	beq.n	800e460 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e452:	d103      	bne.n	800e45c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e45a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e45c:	2303      	movs	r3, #3
 800e45e:	e013      	b.n	800e488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e460:	897b      	ldrh	r3, [r7, #10]
 800e462:	b2db      	uxtb	r3, r3
 800e464:	f043 0301 	orr.w	r3, r3, #1
 800e468:	b2da      	uxtb	r2, r3
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	6a3a      	ldr	r2, [r7, #32]
 800e474:	4906      	ldr	r1, [pc, #24]	; (800e490 <I2C_RequestMemoryRead+0x1cc>)
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f000 fa1d 	bl	800e8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e482:	2301      	movs	r3, #1
 800e484:	e000      	b.n	800e488 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e486:	2300      	movs	r3, #0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3718      	adds	r7, #24
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	00010002 	.word	0x00010002

0800e494 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b086      	sub	sp, #24
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4a8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e4b0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	685a      	ldr	r2, [r3, #4]
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e4c6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d003      	beq.n	800e4d8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d003      	beq.n	800e4e8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800e4e8:	7cfb      	ldrb	r3, [r7, #19]
 800e4ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800e4ee:	2b21      	cmp	r3, #33	; 0x21
 800e4f0:	d007      	beq.n	800e502 <I2C_DMAXferCplt+0x6e>
 800e4f2:	7cfb      	ldrb	r3, [r7, #19]
 800e4f4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e4f8:	2b22      	cmp	r3, #34	; 0x22
 800e4fa:	d131      	bne.n	800e560 <I2C_DMAXferCplt+0xcc>
 800e4fc:	7cbb      	ldrb	r3, [r7, #18]
 800e4fe:	2b20      	cmp	r3, #32
 800e500:	d12e      	bne.n	800e560 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	685a      	ldr	r2, [r3, #4]
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e510:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	2200      	movs	r2, #0
 800e516:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e518:	7cfb      	ldrb	r3, [r7, #19]
 800e51a:	2b29      	cmp	r3, #41	; 0x29
 800e51c:	d10a      	bne.n	800e534 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	2221      	movs	r2, #33	; 0x21
 800e522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	2228      	movs	r2, #40	; 0x28
 800e528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e52c:	6978      	ldr	r0, [r7, #20]
 800e52e:	f7ff fc5e 	bl	800ddee <HAL_I2C_SlaveTxCpltCallback>
 800e532:	e00c      	b.n	800e54e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e534:	7cfb      	ldrb	r3, [r7, #19]
 800e536:	2b2a      	cmp	r3, #42	; 0x2a
 800e538:	d109      	bne.n	800e54e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2222      	movs	r2, #34	; 0x22
 800e53e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	2228      	movs	r2, #40	; 0x28
 800e544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e548:	6978      	ldr	r0, [r7, #20]
 800e54a:	f7ff fc5a 	bl	800de02 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e55c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800e55e:	e06a      	b.n	800e636 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e566:	b2db      	uxtb	r3, r3
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d064      	beq.n	800e636 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e570:	b29b      	uxth	r3, r3
 800e572:	2b01      	cmp	r3, #1
 800e574:	d107      	bne.n	800e586 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e584:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e594:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e59c:	d009      	beq.n	800e5b2 <I2C_DMAXferCplt+0x11e>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2b08      	cmp	r3, #8
 800e5a2:	d006      	beq.n	800e5b2 <I2C_DMAXferCplt+0x11e>
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e5aa:	d002      	beq.n	800e5b2 <I2C_DMAXferCplt+0x11e>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2b20      	cmp	r3, #32
 800e5b0:	d107      	bne.n	800e5c2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5c0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	685a      	ldr	r2, [r3, #4]
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e5d0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	685a      	ldr	r2, [r3, #4]
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5e0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d003      	beq.n	800e5f8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800e5f0:	6978      	ldr	r0, [r7, #20]
 800e5f2:	f7ff fc1a 	bl	800de2a <HAL_I2C_ErrorCallback>
}
 800e5f6:	e01e      	b.n	800e636 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	2220      	movs	r2, #32
 800e5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e606:	b2db      	uxtb	r3, r3
 800e608:	2b40      	cmp	r3, #64	; 0x40
 800e60a:	d10a      	bne.n	800e622 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	2200      	movs	r2, #0
 800e618:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800e61a:	6978      	ldr	r0, [r7, #20]
 800e61c:	f7f3 fc6c 	bl	8001ef8 <HAL_I2C_MemRxCpltCallback>
}
 800e620:	e009      	b.n	800e636 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	2200      	movs	r2, #0
 800e626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	2212      	movs	r2, #18
 800e62e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800e630:	6978      	ldr	r0, [r7, #20]
 800e632:	f7ff fbd2 	bl	800ddda <HAL_I2C_MasterRxCpltCallback>
}
 800e636:	bf00      	nop
 800e638:	3718      	adds	r7, #24
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e650:	2b00      	cmp	r3, #0
 800e652:	d003      	beq.n	800e65c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e658:	2200      	movs	r2, #0
 800e65a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e660:	2b00      	cmp	r3, #0
 800e662:	d003      	beq.n	800e66c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e668:	2200      	movs	r2, #0
 800e66a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7fe fa5b 	bl	800cb28 <HAL_DMA_GetError>
 800e672:	4603      	mov	r3, r0
 800e674:	2b02      	cmp	r3, #2
 800e676:	d01b      	beq.n	800e6b0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e686:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2200      	movs	r2, #0
 800e68c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2220      	movs	r2, #32
 800e692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a2:	f043 0210 	orr.w	r2, r3, #16
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f7ff fbbd 	bl	800de2a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e6b0:	bf00      	nop
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e6d2:	4b4b      	ldr	r3, [pc, #300]	; (800e800 <I2C_DMAAbort+0x148>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	08db      	lsrs	r3, r3, #3
 800e6d8:	4a4a      	ldr	r2, [pc, #296]	; (800e804 <I2C_DMAAbort+0x14c>)
 800e6da:	fba2 2303 	umull	r2, r3, r2, r3
 800e6de:	0a1a      	lsrs	r2, r3, #8
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	00da      	lsls	r2, r3, #3
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d106      	bne.n	800e700 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6f6:	f043 0220 	orr.w	r2, r3, #32
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e6fe:	e00a      	b.n	800e716 <I2C_DMAAbort+0x5e>
    }
    count--;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	3b01      	subs	r3, #1
 800e704:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e714:	d0ea      	beq.n	800e6ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d003      	beq.n	800e726 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e722:	2200      	movs	r2, #0
 800e724:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d003      	beq.n	800e736 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e732:	2200      	movs	r2, #0
 800e734:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e744:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	2200      	movs	r2, #0
 800e74a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e750:	2b00      	cmp	r3, #0
 800e752:	d003      	beq.n	800e75c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e758:	2200      	movs	r2, #0
 800e75a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e760:	2b00      	cmp	r3, #0
 800e762:	d003      	beq.n	800e76c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e768:	2200      	movs	r2, #0
 800e76a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f022 0201 	bic.w	r2, r2, #1
 800e77a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e782:	b2db      	uxtb	r3, r3
 800e784:	2b60      	cmp	r3, #96	; 0x60
 800e786:	d10e      	bne.n	800e7a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	2220      	movs	r2, #32
 800e78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	2200      	movs	r2, #0
 800e794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	2200      	movs	r2, #0
 800e79c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e79e:	6978      	ldr	r0, [r7, #20]
 800e7a0:	f7ff fb4d 	bl	800de3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e7a4:	e027      	b.n	800e7f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e7a6:	7cfb      	ldrb	r3, [r7, #19]
 800e7a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e7ac:	2b28      	cmp	r3, #40	; 0x28
 800e7ae:	d117      	bne.n	800e7e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f042 0201 	orr.w	r2, r2, #1
 800e7be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e7ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2228      	movs	r2, #40	; 0x28
 800e7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e7de:	e007      	b.n	800e7f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2220      	movs	r2, #32
 800e7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e7f0:	6978      	ldr	r0, [r7, #20]
 800e7f2:	f7ff fb1a 	bl	800de2a <HAL_I2C_ErrorCallback>
}
 800e7f6:	bf00      	nop
 800e7f8:	3718      	adds	r7, #24
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20000004 	.word	0x20000004
 800e804:	14f8b589 	.word	0x14f8b589

0800e808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	603b      	str	r3, [r7, #0]
 800e814:	4613      	mov	r3, r2
 800e816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e818:	e025      	b.n	800e866 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e820:	d021      	beq.n	800e866 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e822:	f7fc fc6b 	bl	800b0fc <HAL_GetTick>
 800e826:	4602      	mov	r2, r0
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	683a      	ldr	r2, [r7, #0]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d302      	bcc.n	800e838 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d116      	bne.n	800e866 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2220      	movs	r2, #32
 800e842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2200      	movs	r2, #0
 800e84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e852:	f043 0220 	orr.w	r2, r3, #32
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	e023      	b.n	800e8ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	0c1b      	lsrs	r3, r3, #16
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d10d      	bne.n	800e88c <I2C_WaitOnFlagUntilTimeout+0x84>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	695b      	ldr	r3, [r3, #20]
 800e876:	43da      	mvns	r2, r3
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	4013      	ands	r3, r2
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	bf0c      	ite	eq
 800e882:	2301      	moveq	r3, #1
 800e884:	2300      	movne	r3, #0
 800e886:	b2db      	uxtb	r3, r3
 800e888:	461a      	mov	r2, r3
 800e88a:	e00c      	b.n	800e8a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	699b      	ldr	r3, [r3, #24]
 800e892:	43da      	mvns	r2, r3
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	4013      	ands	r3, r2
 800e898:	b29b      	uxth	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	bf0c      	ite	eq
 800e89e:	2301      	moveq	r3, #1
 800e8a0:	2300      	movne	r3, #0
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	79fb      	ldrb	r3, [r7, #7]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d0b6      	beq.n	800e81a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b084      	sub	sp, #16
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	60f8      	str	r0, [r7, #12]
 800e8be:	60b9      	str	r1, [r7, #8]
 800e8c0:	607a      	str	r2, [r7, #4]
 800e8c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e8c4:	e051      	b.n	800e96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	695b      	ldr	r3, [r3, #20]
 800e8cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8d4:	d123      	bne.n	800e91e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e8ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2220      	movs	r2, #32
 800e8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e90a:	f043 0204 	orr.w	r2, r3, #4
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e91a:	2301      	movs	r3, #1
 800e91c:	e046      	b.n	800e9ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e924:	d021      	beq.n	800e96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e926:	f7fc fbe9 	bl	800b0fc <HAL_GetTick>
 800e92a:	4602      	mov	r2, r0
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	429a      	cmp	r2, r3
 800e934:	d302      	bcc.n	800e93c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d116      	bne.n	800e96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2200      	movs	r2, #0
 800e940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2220      	movs	r2, #32
 800e946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e956:	f043 0220 	orr.w	r2, r3, #32
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2200      	movs	r2, #0
 800e962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e966:	2301      	movs	r3, #1
 800e968:	e020      	b.n	800e9ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	0c1b      	lsrs	r3, r3, #16
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	2b01      	cmp	r3, #1
 800e972:	d10c      	bne.n	800e98e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	695b      	ldr	r3, [r3, #20]
 800e97a:	43da      	mvns	r2, r3
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	4013      	ands	r3, r2
 800e980:	b29b      	uxth	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	bf14      	ite	ne
 800e986:	2301      	movne	r3, #1
 800e988:	2300      	moveq	r3, #0
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	e00b      	b.n	800e9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	43da      	mvns	r2, r3
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	4013      	ands	r3, r2
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	bf14      	ite	ne
 800e9a0:	2301      	movne	r3, #1
 800e9a2:	2300      	moveq	r3, #0
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d18d      	bne.n	800e8c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e9c0:	e02d      	b.n	800ea1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f000 f8ce 	bl	800eb64 <I2C_IsAcknowledgeFailed>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d001      	beq.n	800e9d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e02d      	b.n	800ea2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d8:	d021      	beq.n	800ea1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9da:	f7fc fb8f 	bl	800b0fc <HAL_GetTick>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	68ba      	ldr	r2, [r7, #8]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d302      	bcc.n	800e9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d116      	bne.n	800ea1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2220      	movs	r2, #32
 800e9fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2200      	movs	r2, #0
 800ea02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea0a:	f043 0220 	orr.w	r2, r3, #32
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e007      	b.n	800ea2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	695b      	ldr	r3, [r3, #20]
 800ea24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea28:	2b80      	cmp	r3, #128	; 0x80
 800ea2a:	d1ca      	bne.n	800e9c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b084      	sub	sp, #16
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	60f8      	str	r0, [r7, #12]
 800ea3e:	60b9      	str	r1, [r7, #8]
 800ea40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ea42:	e02d      	b.n	800eaa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f000 f88d 	bl	800eb64 <I2C_IsAcknowledgeFailed>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d001      	beq.n	800ea54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ea50:	2301      	movs	r3, #1
 800ea52:	e02d      	b.n	800eab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea5a:	d021      	beq.n	800eaa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea5c:	f7fc fb4e 	bl	800b0fc <HAL_GetTick>
 800ea60:	4602      	mov	r2, r0
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d302      	bcc.n	800ea72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d116      	bne.n	800eaa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2200      	movs	r2, #0
 800ea76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2220      	movs	r2, #32
 800ea7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2200      	movs	r2, #0
 800ea84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea8c:	f043 0220 	orr.w	r2, r3, #32
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e007      	b.n	800eab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	695b      	ldr	r3, [r3, #20]
 800eaa6:	f003 0304 	and.w	r3, r3, #4
 800eaaa:	2b04      	cmp	r3, #4
 800eaac:	d1ca      	bne.n	800ea44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800eaae:	2300      	movs	r3, #0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800eac4:	e042      	b.n	800eb4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	695b      	ldr	r3, [r3, #20]
 800eacc:	f003 0310 	and.w	r3, r3, #16
 800ead0:	2b10      	cmp	r3, #16
 800ead2:	d119      	bne.n	800eb08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f06f 0210 	mvn.w	r2, #16
 800eadc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2200      	movs	r2, #0
 800eae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2220      	movs	r2, #32
 800eae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e029      	b.n	800eb5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb08:	f7fc faf8 	bl	800b0fc <HAL_GetTick>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	1ad3      	subs	r3, r2, r3
 800eb12:	68ba      	ldr	r2, [r7, #8]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d302      	bcc.n	800eb1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d116      	bne.n	800eb4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2220      	movs	r2, #32
 800eb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb38:	f043 0220 	orr.w	r2, r3, #32
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	e007      	b.n	800eb5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb56:	2b40      	cmp	r3, #64	; 0x40
 800eb58:	d1b5      	bne.n	800eac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb7a:	d11b      	bne.n	800ebb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800eb84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2220      	movs	r2, #32
 800eb90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eba0:	f043 0204 	orr.w	r2, r3, #4
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e000      	b.n	800ebb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	370c      	adds	r7, #12
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ebc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebc4:	b08f      	sub	sp, #60	; 0x3c
 800ebc6:	af0a      	add	r7, sp, #40	; 0x28
 800ebc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d101      	bne.n	800ebd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e10f      	b.n	800edf4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d106      	bne.n	800ebf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f00b fe54 	bl	801a89c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2203      	movs	r2, #3
 800ebf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d102      	bne.n	800ec0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f004 ff55 	bl	8013ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	603b      	str	r3, [r7, #0]
 800ec1e:	687e      	ldr	r6, [r7, #4]
 800ec20:	466d      	mov	r5, sp
 800ec22:	f106 0410 	add.w	r4, r6, #16
 800ec26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ec32:	e885 0003 	stmia.w	r5, {r0, r1}
 800ec36:	1d33      	adds	r3, r6, #4
 800ec38:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ec3a:	6838      	ldr	r0, [r7, #0]
 800ec3c:	f004 fe2c 	bl	8013898 <USB_CoreInit>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d005      	beq.n	800ec52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2202      	movs	r2, #2
 800ec4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e0d0      	b.n	800edf4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2100      	movs	r1, #0
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f004 ff43 	bl	8013ae4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ec5e:	2300      	movs	r3, #0
 800ec60:	73fb      	strb	r3, [r7, #15]
 800ec62:	e04a      	b.n	800ecfa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ec64:	7bfa      	ldrb	r2, [r7, #15]
 800ec66:	6879      	ldr	r1, [r7, #4]
 800ec68:	4613      	mov	r3, r2
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	4413      	add	r3, r2
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	440b      	add	r3, r1
 800ec72:	333d      	adds	r3, #61	; 0x3d
 800ec74:	2201      	movs	r2, #1
 800ec76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ec78:	7bfa      	ldrb	r2, [r7, #15]
 800ec7a:	6879      	ldr	r1, [r7, #4]
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	00db      	lsls	r3, r3, #3
 800ec80:	4413      	add	r3, r2
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	440b      	add	r3, r1
 800ec86:	333c      	adds	r3, #60	; 0x3c
 800ec88:	7bfa      	ldrb	r2, [r7, #15]
 800ec8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ec8c:	7bfa      	ldrb	r2, [r7, #15]
 800ec8e:	7bfb      	ldrb	r3, [r7, #15]
 800ec90:	b298      	uxth	r0, r3
 800ec92:	6879      	ldr	r1, [r7, #4]
 800ec94:	4613      	mov	r3, r2
 800ec96:	00db      	lsls	r3, r3, #3
 800ec98:	4413      	add	r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	440b      	add	r3, r1
 800ec9e:	3344      	adds	r3, #68	; 0x44
 800eca0:	4602      	mov	r2, r0
 800eca2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800eca4:	7bfa      	ldrb	r2, [r7, #15]
 800eca6:	6879      	ldr	r1, [r7, #4]
 800eca8:	4613      	mov	r3, r2
 800ecaa:	00db      	lsls	r3, r3, #3
 800ecac:	4413      	add	r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	440b      	add	r3, r1
 800ecb2:	3340      	adds	r3, #64	; 0x40
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ecb8:	7bfa      	ldrb	r2, [r7, #15]
 800ecba:	6879      	ldr	r1, [r7, #4]
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	00db      	lsls	r3, r3, #3
 800ecc0:	4413      	add	r3, r2
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	440b      	add	r3, r1
 800ecc6:	3348      	adds	r3, #72	; 0x48
 800ecc8:	2200      	movs	r2, #0
 800ecca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800eccc:	7bfa      	ldrb	r2, [r7, #15]
 800ecce:	6879      	ldr	r1, [r7, #4]
 800ecd0:	4613      	mov	r3, r2
 800ecd2:	00db      	lsls	r3, r3, #3
 800ecd4:	4413      	add	r3, r2
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	440b      	add	r3, r1
 800ecda:	334c      	adds	r3, #76	; 0x4c
 800ecdc:	2200      	movs	r2, #0
 800ecde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ece0:	7bfa      	ldrb	r2, [r7, #15]
 800ece2:	6879      	ldr	r1, [r7, #4]
 800ece4:	4613      	mov	r3, r2
 800ece6:	00db      	lsls	r3, r3, #3
 800ece8:	4413      	add	r3, r2
 800ecea:	009b      	lsls	r3, r3, #2
 800ecec:	440b      	add	r3, r1
 800ecee:	3354      	adds	r3, #84	; 0x54
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ecf4:	7bfb      	ldrb	r3, [r7, #15]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	73fb      	strb	r3, [r7, #15]
 800ecfa:	7bfa      	ldrb	r2, [r7, #15]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d3af      	bcc.n	800ec64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ed04:	2300      	movs	r3, #0
 800ed06:	73fb      	strb	r3, [r7, #15]
 800ed08:	e044      	b.n	800ed94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ed0a:	7bfa      	ldrb	r2, [r7, #15]
 800ed0c:	6879      	ldr	r1, [r7, #4]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	00db      	lsls	r3, r3, #3
 800ed12:	4413      	add	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	440b      	add	r3, r1
 800ed18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ed20:	7bfa      	ldrb	r2, [r7, #15]
 800ed22:	6879      	ldr	r1, [r7, #4]
 800ed24:	4613      	mov	r3, r2
 800ed26:	00db      	lsls	r3, r3, #3
 800ed28:	4413      	add	r3, r2
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	440b      	add	r3, r1
 800ed2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800ed32:	7bfa      	ldrb	r2, [r7, #15]
 800ed34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ed36:	7bfa      	ldrb	r2, [r7, #15]
 800ed38:	6879      	ldr	r1, [r7, #4]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	00db      	lsls	r3, r3, #3
 800ed3e:	4413      	add	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	440b      	add	r3, r1
 800ed44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ed48:	2200      	movs	r2, #0
 800ed4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ed4c:	7bfa      	ldrb	r2, [r7, #15]
 800ed4e:	6879      	ldr	r1, [r7, #4]
 800ed50:	4613      	mov	r3, r2
 800ed52:	00db      	lsls	r3, r3, #3
 800ed54:	4413      	add	r3, r2
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	440b      	add	r3, r1
 800ed5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ed5e:	2200      	movs	r2, #0
 800ed60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ed62:	7bfa      	ldrb	r2, [r7, #15]
 800ed64:	6879      	ldr	r1, [r7, #4]
 800ed66:	4613      	mov	r3, r2
 800ed68:	00db      	lsls	r3, r3, #3
 800ed6a:	4413      	add	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	440b      	add	r3, r1
 800ed70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ed78:	7bfa      	ldrb	r2, [r7, #15]
 800ed7a:	6879      	ldr	r1, [r7, #4]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	4413      	add	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	440b      	add	r3, r1
 800ed86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ed8e:	7bfb      	ldrb	r3, [r7, #15]
 800ed90:	3301      	adds	r3, #1
 800ed92:	73fb      	strb	r3, [r7, #15]
 800ed94:	7bfa      	ldrb	r2, [r7, #15]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d3b5      	bcc.n	800ed0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	603b      	str	r3, [r7, #0]
 800eda4:	687e      	ldr	r6, [r7, #4]
 800eda6:	466d      	mov	r5, sp
 800eda8:	f106 0410 	add.w	r4, r6, #16
 800edac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800edb8:	e885 0003 	stmia.w	r5, {r0, r1}
 800edbc:	1d33      	adds	r3, r6, #4
 800edbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800edc0:	6838      	ldr	r0, [r7, #0]
 800edc2:	f004 fedb 	bl	8013b7c <USB_DevInit>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d005      	beq.n	800edd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2202      	movs	r2, #2
 800edd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800edd4:	2301      	movs	r3, #1
 800edd6:	e00d      	b.n	800edf4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4618      	mov	r0, r3
 800edee:	f006 f82a 	bl	8014e46 <USB_DevDisconnect>

  return HAL_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3714      	adds	r7, #20
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800edfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d101      	bne.n	800ee18 <HAL_PCD_Start+0x1c>
 800ee14:	2302      	movs	r3, #2
 800ee16:	e020      	b.n	800ee5a <HAL_PCD_Start+0x5e>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d109      	bne.n	800ee3c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d005      	beq.n	800ee3c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f004 fe2d 	bl	8013aa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f005 ffda 	bl	8014e04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ee58:	2300      	movs	r3, #0
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ee62:	b590      	push	{r4, r7, lr}
 800ee64:	b08d      	sub	sp, #52	; 0x34
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee70:	6a3b      	ldr	r3, [r7, #32]
 800ee72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f006 f898 	bl	8014fae <USB_GetMode>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f040 848a 	bne.w	800f79a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f005 fffc 	bl	8014e88 <USB_ReadInterrupts>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f000 8480 	beq.w	800f798 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee9e:	689b      	ldr	r3, [r3, #8]
 800eea0:	0a1b      	lsrs	r3, r3, #8
 800eea2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f005 ffe9 	bl	8014e88 <USB_ReadInterrupts>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	f003 0302 	and.w	r3, r3, #2
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	d107      	bne.n	800eed0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	695a      	ldr	r2, [r3, #20]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f002 0202 	and.w	r2, r2, #2
 800eece:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f005 ffd7 	bl	8014e88 <USB_ReadInterrupts>
 800eeda:	4603      	mov	r3, r0
 800eedc:	f003 0310 	and.w	r3, r3, #16
 800eee0:	2b10      	cmp	r3, #16
 800eee2:	d161      	bne.n	800efa8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	699a      	ldr	r2, [r3, #24]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f022 0210 	bic.w	r2, r2, #16
 800eef2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800eef4:	6a3b      	ldr	r3, [r7, #32]
 800eef6:	6a1b      	ldr	r3, [r3, #32]
 800eef8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	f003 020f 	and.w	r2, r3, #15
 800ef00:	4613      	mov	r3, r2
 800ef02:	00db      	lsls	r3, r3, #3
 800ef04:	4413      	add	r3, r2
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	4413      	add	r3, r2
 800ef10:	3304      	adds	r3, #4
 800ef12:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	0c5b      	lsrs	r3, r3, #17
 800ef18:	f003 030f 	and.w	r3, r3, #15
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d124      	bne.n	800ef6a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ef20:	69ba      	ldr	r2, [r7, #24]
 800ef22:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ef26:	4013      	ands	r3, r2
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d035      	beq.n	800ef98 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	091b      	lsrs	r3, r3, #4
 800ef34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ef36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	6a38      	ldr	r0, [r7, #32]
 800ef40:	f005 fe0e 	bl	8014b60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	691a      	ldr	r2, [r3, #16]
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	091b      	lsrs	r3, r3, #4
 800ef4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef50:	441a      	add	r2, r3
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	6a1a      	ldr	r2, [r3, #32]
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	091b      	lsrs	r3, r3, #4
 800ef5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef62:	441a      	add	r2, r3
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	621a      	str	r2, [r3, #32]
 800ef68:	e016      	b.n	800ef98 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	0c5b      	lsrs	r3, r3, #17
 800ef6e:	f003 030f 	and.w	r3, r3, #15
 800ef72:	2b06      	cmp	r3, #6
 800ef74:	d110      	bne.n	800ef98 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ef7c:	2208      	movs	r2, #8
 800ef7e:	4619      	mov	r1, r3
 800ef80:	6a38      	ldr	r0, [r7, #32]
 800ef82:	f005 fded 	bl	8014b60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	6a1a      	ldr	r2, [r3, #32]
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	091b      	lsrs	r3, r3, #4
 800ef8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef92:	441a      	add	r2, r3
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	699a      	ldr	r2, [r3, #24]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f042 0210 	orr.w	r2, r2, #16
 800efa6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4618      	mov	r0, r3
 800efae:	f005 ff6b 	bl	8014e88 <USB_ReadInterrupts>
 800efb2:	4603      	mov	r3, r0
 800efb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800efb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800efbc:	f040 80a7 	bne.w	800f10e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800efc0:	2300      	movs	r3, #0
 800efc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4618      	mov	r0, r3
 800efca:	f005 ff70 	bl	8014eae <USB_ReadDevAllOutEpInterrupt>
 800efce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800efd0:	e099      	b.n	800f106 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800efd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd4:	f003 0301 	and.w	r3, r3, #1
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f000 808e 	beq.w	800f0fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe4:	b2d2      	uxtb	r2, r2
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f005 ff94 	bl	8014f16 <USB_ReadDevOutEPInterrupt>
 800efee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	f003 0301 	and.w	r3, r3, #1
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00c      	beq.n	800f014 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800effa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effc:	015a      	lsls	r2, r3, #5
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	4413      	add	r3, r2
 800f002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f006:	461a      	mov	r2, r3
 800f008:	2301      	movs	r3, #1
 800f00a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800f00c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fec2 	bl	800fd98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	f003 0308 	and.w	r3, r3, #8
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00c      	beq.n	800f038 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800f01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f020:	015a      	lsls	r2, r3, #5
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	4413      	add	r3, r2
 800f026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f02a:	461a      	mov	r2, r3
 800f02c:	2308      	movs	r3, #8
 800f02e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800f030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 ff98 	bl	800ff68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	f003 0310 	and.w	r3, r3, #16
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d008      	beq.n	800f054 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f044:	015a      	lsls	r2, r3, #5
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	4413      	add	r3, r2
 800f04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f04e:	461a      	mov	r2, r3
 800f050:	2310      	movs	r3, #16
 800f052:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	f003 0302 	and.w	r3, r3, #2
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d030      	beq.n	800f0c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800f05e:	6a3b      	ldr	r3, [r7, #32]
 800f060:	695b      	ldr	r3, [r3, #20]
 800f062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f066:	2b80      	cmp	r3, #128	; 0x80
 800f068:	d109      	bne.n	800f07e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800f06a:	69fb      	ldr	r3, [r7, #28]
 800f06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	69fa      	ldr	r2, [r7, #28]
 800f074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f07c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800f07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f080:	4613      	mov	r3, r2
 800f082:	00db      	lsls	r3, r3, #3
 800f084:	4413      	add	r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	4413      	add	r3, r2
 800f090:	3304      	adds	r3, #4
 800f092:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	78db      	ldrb	r3, [r3, #3]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d108      	bne.n	800f0ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f00b fd09 	bl	801aac0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800f0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b0:	015a      	lsls	r2, r3, #5
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	2302      	movs	r3, #2
 800f0be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	f003 0320 	and.w	r3, r3, #32
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d008      	beq.n	800f0dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0cc:	015a      	lsls	r2, r3, #5
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	2320      	movs	r3, #32
 800f0da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d009      	beq.n	800f0fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e8:	015a      	lsls	r2, r3, #5
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f0f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	085b      	lsrs	r3, r3, #1
 800f104:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f47f af62 	bne.w	800efd2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4618      	mov	r0, r3
 800f114:	f005 feb8 	bl	8014e88 <USB_ReadInterrupts>
 800f118:	4603      	mov	r3, r0
 800f11a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f11e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f122:	f040 80db 	bne.w	800f2dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f005 fed9 	bl	8014ee2 <USB_ReadDevAllInEpInterrupt>
 800f130:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f132:	2300      	movs	r3, #0
 800f134:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f136:	e0cd      	b.n	800f2d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	f003 0301 	and.w	r3, r3, #1
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f000 80c2 	beq.w	800f2c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f14a:	b2d2      	uxtb	r2, r2
 800f14c:	4611      	mov	r1, r2
 800f14e:	4618      	mov	r0, r3
 800f150:	f005 feff 	bl	8014f52 <USB_ReadDevInEPInterrupt>
 800f154:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	f003 0301 	and.w	r3, r3, #1
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d057      	beq.n	800f210 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	f003 030f 	and.w	r3, r3, #15
 800f166:	2201      	movs	r2, #1
 800f168:	fa02 f303 	lsl.w	r3, r2, r3
 800f16c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	43db      	mvns	r3, r3
 800f17a:	69f9      	ldr	r1, [r7, #28]
 800f17c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f180:	4013      	ands	r3, r2
 800f182:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800f184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f186:	015a      	lsls	r2, r3, #5
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	4413      	add	r3, r2
 800f18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f190:	461a      	mov	r2, r3
 800f192:	2301      	movs	r3, #1
 800f194:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	691b      	ldr	r3, [r3, #16]
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d132      	bne.n	800f204 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800f19e:	6879      	ldr	r1, [r7, #4]
 800f1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	4413      	add	r3, r2
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	440b      	add	r3, r1
 800f1ac:	334c      	adds	r3, #76	; 0x4c
 800f1ae:	6819      	ldr	r1, [r3, #0]
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	00db      	lsls	r3, r3, #3
 800f1b8:	4413      	add	r3, r2
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	4403      	add	r3, r0
 800f1be:	3348      	adds	r3, #72	; 0x48
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4419      	add	r1, r3
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	00db      	lsls	r3, r3, #3
 800f1cc:	4413      	add	r3, r2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	4403      	add	r3, r0
 800f1d2:	334c      	adds	r3, #76	; 0x4c
 800f1d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800f1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d113      	bne.n	800f204 <HAL_PCD_IRQHandler+0x3a2>
 800f1dc:	6879      	ldr	r1, [r7, #4]
 800f1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1e0:	4613      	mov	r3, r2
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	4413      	add	r3, r2
 800f1e6:	009b      	lsls	r3, r3, #2
 800f1e8:	440b      	add	r3, r1
 800f1ea:	3354      	adds	r3, #84	; 0x54
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d108      	bne.n	800f204 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6818      	ldr	r0, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	2101      	movs	r1, #1
 800f200:	f005 ff06 	bl	8015010 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f206:	b2db      	uxtb	r3, r3
 800f208:	4619      	mov	r1, r3
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f00b fbc7 	bl	801a99e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	f003 0308 	and.w	r3, r3, #8
 800f216:	2b00      	cmp	r3, #0
 800f218:	d008      	beq.n	800f22c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800f21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21c:	015a      	lsls	r2, r3, #5
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	4413      	add	r3, r2
 800f222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f226:	461a      	mov	r2, r3
 800f228:	2308      	movs	r3, #8
 800f22a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	f003 0310 	and.w	r3, r3, #16
 800f232:	2b00      	cmp	r3, #0
 800f234:	d008      	beq.n	800f248 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800f236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f238:	015a      	lsls	r2, r3, #5
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	4413      	add	r3, r2
 800f23e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f242:	461a      	mov	r2, r3
 800f244:	2310      	movs	r3, #16
 800f246:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d008      	beq.n	800f264 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800f252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f254:	015a      	lsls	r2, r3, #5
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	4413      	add	r3, r2
 800f25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f25e:	461a      	mov	r2, r3
 800f260:	2340      	movs	r3, #64	; 0x40
 800f262:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	f003 0302 	and.w	r3, r3, #2
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d023      	beq.n	800f2b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800f26e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f270:	6a38      	ldr	r0, [r7, #32]
 800f272:	f004 fde7 	bl	8013e44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800f276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f278:	4613      	mov	r3, r2
 800f27a:	00db      	lsls	r3, r3, #3
 800f27c:	4413      	add	r3, r2
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	3338      	adds	r3, #56	; 0x38
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	4413      	add	r3, r2
 800f286:	3304      	adds	r3, #4
 800f288:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	78db      	ldrb	r3, [r3, #3]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d108      	bne.n	800f2a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	2200      	movs	r2, #0
 800f296:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800f298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f00b fc20 	bl	801aae4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800f2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a6:	015a      	lsls	r2, r3, #5
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	2302      	movs	r3, #2
 800f2b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d003      	beq.n	800f2c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800f2c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 fcdb 	bl	800fc7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	085b      	lsrs	r3, r3, #1
 800f2d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f47f af2e 	bne.w	800f138 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f005 fdd1 	bl	8014e88 <USB_ReadInterrupts>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2f0:	d122      	bne.n	800f338 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	69fa      	ldr	r2, [r7, #28]
 800f2fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f300:	f023 0301 	bic.w	r3, r3, #1
 800f304:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d108      	bne.n	800f322 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f318:	2100      	movs	r1, #0
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fec2 	bl	80100a4 <HAL_PCDEx_LPM_Callback>
 800f320:	e002      	b.n	800f328 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f00b fbb8 	bl	801aa98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	695a      	ldr	r2, [r3, #20]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4618      	mov	r0, r3
 800f33e:	f005 fda3 	bl	8014e88 <USB_ReadInterrupts>
 800f342:	4603      	mov	r3, r0
 800f344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f34c:	d112      	bne.n	800f374 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	f003 0301 	and.w	r3, r3, #1
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d102      	bne.n	800f364 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f00b fb6e 	bl	801aa40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	695a      	ldr	r2, [r3, #20]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f372:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4618      	mov	r0, r3
 800f37a:	f005 fd85 	bl	8014e88 <USB_ReadInterrupts>
 800f37e:	4603      	mov	r3, r0
 800f380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f388:	f040 80b7 	bne.w	800f4fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	69fa      	ldr	r2, [r7, #28]
 800f396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f39a:	f023 0301 	bic.w	r3, r3, #1
 800f39e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2110      	movs	r1, #16
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f004 fd4c 	bl	8013e44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3b0:	e046      	b.n	800f440 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	015a      	lsls	r2, r3, #5
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3be:	461a      	mov	r2, r3
 800f3c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f3c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c8:	015a      	lsls	r2, r3, #5
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3d6:	0151      	lsls	r1, r2, #5
 800f3d8:	69fa      	ldr	r2, [r7, #28]
 800f3da:	440a      	add	r2, r1
 800f3dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e8:	015a      	lsls	r2, r3, #5
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f3f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	015a      	lsls	r2, r3, #5
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	4413      	add	r3, r2
 800f402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f40a:	0151      	lsls	r1, r2, #5
 800f40c:	69fa      	ldr	r2, [r7, #28]
 800f40e:	440a      	add	r2, r1
 800f410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f414:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f418:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41c:	015a      	lsls	r2, r3, #5
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	4413      	add	r3, r2
 800f422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f42a:	0151      	lsls	r1, r2, #5
 800f42c:	69fa      	ldr	r2, [r7, #28]
 800f42e:	440a      	add	r2, r1
 800f430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f434:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f438:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43c:	3301      	adds	r3, #1
 800f43e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f446:	429a      	cmp	r2, r3
 800f448:	d3b3      	bcc.n	800f3b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f450:	69db      	ldr	r3, [r3, #28]
 800f452:	69fa      	ldr	r2, [r7, #28]
 800f454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f458:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f45c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f462:	2b00      	cmp	r3, #0
 800f464:	d016      	beq.n	800f494 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f46c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f470:	69fa      	ldr	r2, [r7, #28]
 800f472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f476:	f043 030b 	orr.w	r3, r3, #11
 800f47a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f486:	69fa      	ldr	r2, [r7, #28]
 800f488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f48c:	f043 030b 	orr.w	r3, r3, #11
 800f490:	6453      	str	r3, [r2, #68]	; 0x44
 800f492:	e015      	b.n	800f4c0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f49a:	695b      	ldr	r3, [r3, #20]
 800f49c:	69fa      	ldr	r2, [r7, #28]
 800f49e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f4a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800f4aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	69fa      	ldr	r2, [r7, #28]
 800f4b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4ba:	f043 030b 	orr.w	r3, r3, #11
 800f4be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	69fa      	ldr	r2, [r7, #28]
 800f4ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f4d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6818      	ldr	r0, [r3, #0]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	691b      	ldr	r3, [r3, #16]
 800f4dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	f005 fd93 	bl	8015010 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	695a      	ldr	r2, [r3, #20]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f4f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f005 fcc2 	bl	8014e88 <USB_ReadInterrupts>
 800f504:	4603      	mov	r3, r0
 800f506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f50a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f50e:	d124      	bne.n	800f55a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4618      	mov	r0, r3
 800f516:	f005 fd58 	bl	8014fca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	4618      	mov	r0, r3
 800f520:	f004 fd0d 	bl	8013f3e <USB_GetDevSpeed>
 800f524:	4603      	mov	r3, r0
 800f526:	461a      	mov	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681c      	ldr	r4, [r3, #0]
 800f530:	f001 f9e8 	bl	8010904 <HAL_RCC_GetHCLKFreq>
 800f534:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	461a      	mov	r2, r3
 800f53e:	4620      	mov	r0, r4
 800f540:	f004 fa0c 	bl	801395c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f00b fa52 	bl	801a9ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	695a      	ldr	r2, [r3, #20]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800f558:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4618      	mov	r0, r3
 800f560:	f005 fc92 	bl	8014e88 <USB_ReadInterrupts>
 800f564:	4603      	mov	r3, r0
 800f566:	f003 0308 	and.w	r3, r3, #8
 800f56a:	2b08      	cmp	r3, #8
 800f56c:	d10a      	bne.n	800f584 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f00b fa2f 	bl	801a9d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	695a      	ldr	r2, [r3, #20]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f002 0208 	and.w	r2, r2, #8
 800f582:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4618      	mov	r0, r3
 800f58a:	f005 fc7d 	bl	8014e88 <USB_ReadInterrupts>
 800f58e:	4603      	mov	r3, r0
 800f590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f594:	2b80      	cmp	r3, #128	; 0x80
 800f596:	d122      	bne.n	800f5de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800f598:	6a3b      	ldr	r3, [r7, #32]
 800f59a:	699b      	ldr	r3, [r3, #24]
 800f59c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f5a0:	6a3b      	ldr	r3, [r7, #32]
 800f5a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f5a8:	e014      	b.n	800f5d4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800f5aa:	6879      	ldr	r1, [r7, #4]
 800f5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	00db      	lsls	r3, r3, #3
 800f5b2:	4413      	add	r3, r2
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	440b      	add	r3, r1
 800f5b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d105      	bne.n	800f5ce <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800f5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 fb27 	bl	800fc1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	627b      	str	r3, [r7, #36]	; 0x24
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d3e5      	bcc.n	800f5aa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f005 fc50 	bl	8014e88 <USB_ReadInterrupts>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f5ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5f2:	d13b      	bne.n	800f66c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f5f8:	e02b      	b.n	800f652 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	015a      	lsls	r2, r3, #5
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	4413      	add	r3, r2
 800f602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800f60a:	6879      	ldr	r1, [r7, #4]
 800f60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f60e:	4613      	mov	r3, r2
 800f610:	00db      	lsls	r3, r3, #3
 800f612:	4413      	add	r3, r2
 800f614:	009b      	lsls	r3, r3, #2
 800f616:	440b      	add	r3, r1
 800f618:	3340      	adds	r3, #64	; 0x40
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d115      	bne.n	800f64c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800f620:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800f622:	2b00      	cmp	r3, #0
 800f624:	da12      	bge.n	800f64c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800f626:	6879      	ldr	r1, [r7, #4]
 800f628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f62a:	4613      	mov	r3, r2
 800f62c:	00db      	lsls	r3, r3, #3
 800f62e:	4413      	add	r3, r2
 800f630:	009b      	lsls	r3, r3, #2
 800f632:	440b      	add	r3, r1
 800f634:	333f      	adds	r3, #63	; 0x3f
 800f636:	2201      	movs	r2, #1
 800f638:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800f63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f642:	b2db      	uxtb	r3, r3
 800f644:	4619      	mov	r1, r3
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 fae8 	bl	800fc1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64e:	3301      	adds	r3, #1
 800f650:	627b      	str	r3, [r7, #36]	; 0x24
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f658:	429a      	cmp	r2, r3
 800f65a:	d3ce      	bcc.n	800f5fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	695a      	ldr	r2, [r3, #20]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800f66a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4618      	mov	r0, r3
 800f672:	f005 fc09 	bl	8014e88 <USB_ReadInterrupts>
 800f676:	4603      	mov	r3, r0
 800f678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f67c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f680:	d155      	bne.n	800f72e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f682:	2301      	movs	r3, #1
 800f684:	627b      	str	r3, [r7, #36]	; 0x24
 800f686:	e045      	b.n	800f714 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800f688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68a:	015a      	lsls	r2, r3, #5
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	4413      	add	r3, r2
 800f690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800f698:	6879      	ldr	r1, [r7, #4]
 800f69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f69c:	4613      	mov	r3, r2
 800f69e:	00db      	lsls	r3, r3, #3
 800f6a0:	4413      	add	r3, r2
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	440b      	add	r3, r1
 800f6a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d12e      	bne.n	800f70e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800f6b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	da2b      	bge.n	800f70e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800f6c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d121      	bne.n	800f70e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800f6ca:	6879      	ldr	r1, [r7, #4]
 800f6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	00db      	lsls	r3, r3, #3
 800f6d2:	4413      	add	r3, r2
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	440b      	add	r3, r1
 800f6d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800f6dc:	2201      	movs	r2, #1
 800f6de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800f6e0:	6a3b      	ldr	r3, [r7, #32]
 800f6e2:	699b      	ldr	r3, [r3, #24]
 800f6e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f6e8:	6a3b      	ldr	r3, [r7, #32]
 800f6ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800f6ec:	6a3b      	ldr	r3, [r7, #32]
 800f6ee:	695b      	ldr	r3, [r3, #20]
 800f6f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d10a      	bne.n	800f70e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	69fa      	ldr	r2, [r7, #28]
 800f702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f70a:	6053      	str	r3, [r2, #4]
            break;
 800f70c:	e007      	b.n	800f71e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f710:	3301      	adds	r3, #1
 800f712:	627b      	str	r3, [r7, #36]	; 0x24
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d3b4      	bcc.n	800f688 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	695a      	ldr	r2, [r3, #20]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800f72c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	4618      	mov	r0, r3
 800f734:	f005 fba8 	bl	8014e88 <USB_ReadInterrupts>
 800f738:	4603      	mov	r3, r0
 800f73a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f73e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f742:	d10a      	bne.n	800f75a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f00b f9df 	bl	801ab08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	695a      	ldr	r2, [r3, #20]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800f758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4618      	mov	r0, r3
 800f760:	f005 fb92 	bl	8014e88 <USB_ReadInterrupts>
 800f764:	4603      	mov	r3, r0
 800f766:	f003 0304 	and.w	r3, r3, #4
 800f76a:	2b04      	cmp	r3, #4
 800f76c:	d115      	bne.n	800f79a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800f776:	69bb      	ldr	r3, [r7, #24]
 800f778:	f003 0304 	and.w	r3, r3, #4
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d002      	beq.n	800f786 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f00b f9cf 	bl	801ab24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	6859      	ldr	r1, [r3, #4]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	69ba      	ldr	r2, [r7, #24]
 800f792:	430a      	orrs	r2, r1
 800f794:	605a      	str	r2, [r3, #4]
 800f796:	e000      	b.n	800f79a <HAL_PCD_IRQHandler+0x938>
      return;
 800f798:	bf00      	nop
    }
  }
}
 800f79a:	3734      	adds	r7, #52	; 0x34
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd90      	pop	{r4, r7, pc}

0800f7a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d101      	bne.n	800f7ba <HAL_PCD_SetAddress+0x1a>
 800f7b6:	2302      	movs	r3, #2
 800f7b8:	e013      	b.n	800f7e2 <HAL_PCD_SetAddress+0x42>
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2201      	movs	r2, #1
 800f7be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	78fa      	ldrb	r2, [r7, #3]
 800f7c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	78fa      	ldrb	r2, [r7, #3]
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f005 faf0 	bl	8014db8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3708      	adds	r7, #8
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b084      	sub	sp, #16
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	4608      	mov	r0, r1
 800f7f4:	4611      	mov	r1, r2
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	70fb      	strb	r3, [r7, #3]
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	803b      	strh	r3, [r7, #0]
 800f800:	4613      	mov	r3, r2
 800f802:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800f804:	2300      	movs	r3, #0
 800f806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	da0f      	bge.n	800f830 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f810:	78fb      	ldrb	r3, [r7, #3]
 800f812:	f003 020f 	and.w	r2, r3, #15
 800f816:	4613      	mov	r3, r2
 800f818:	00db      	lsls	r3, r3, #3
 800f81a:	4413      	add	r3, r2
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	3338      	adds	r3, #56	; 0x38
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	4413      	add	r3, r2
 800f824:	3304      	adds	r3, #4
 800f826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2201      	movs	r2, #1
 800f82c:	705a      	strb	r2, [r3, #1]
 800f82e:	e00f      	b.n	800f850 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f830:	78fb      	ldrb	r3, [r7, #3]
 800f832:	f003 020f 	and.w	r2, r3, #15
 800f836:	4613      	mov	r3, r2
 800f838:	00db      	lsls	r3, r3, #3
 800f83a:	4413      	add	r3, r2
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	4413      	add	r3, r2
 800f846:	3304      	adds	r3, #4
 800f848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2200      	movs	r2, #0
 800f84e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800f850:	78fb      	ldrb	r3, [r7, #3]
 800f852:	f003 030f 	and.w	r3, r3, #15
 800f856:	b2da      	uxtb	r2, r3
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800f85c:	883a      	ldrh	r2, [r7, #0]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	78ba      	ldrb	r2, [r7, #2]
 800f866:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	785b      	ldrb	r3, [r3, #1]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d004      	beq.n	800f87a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	b29a      	uxth	r2, r3
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800f87a:	78bb      	ldrb	r3, [r7, #2]
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	d102      	bne.n	800f886 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2200      	movs	r2, #0
 800f884:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d101      	bne.n	800f894 <HAL_PCD_EP_Open+0xaa>
 800f890:	2302      	movs	r3, #2
 800f892:	e00e      	b.n	800f8b2 <HAL_PCD_EP_Open+0xc8>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68f9      	ldr	r1, [r7, #12]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f004 fb70 	bl	8013f88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800f8b0:	7afb      	ldrb	r3, [r7, #11]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3710      	adds	r7, #16
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b084      	sub	sp, #16
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f8c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	da0f      	bge.n	800f8ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f8ce:	78fb      	ldrb	r3, [r7, #3]
 800f8d0:	f003 020f 	and.w	r2, r3, #15
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	00db      	lsls	r3, r3, #3
 800f8d8:	4413      	add	r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	3338      	adds	r3, #56	; 0x38
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	3304      	adds	r3, #4
 800f8e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	705a      	strb	r2, [r3, #1]
 800f8ec:	e00f      	b.n	800f90e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f8ee:	78fb      	ldrb	r3, [r7, #3]
 800f8f0:	f003 020f 	and.w	r2, r3, #15
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	00db      	lsls	r3, r3, #3
 800f8f8:	4413      	add	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	4413      	add	r3, r2
 800f904:	3304      	adds	r3, #4
 800f906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2200      	movs	r2, #0
 800f90c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800f90e:	78fb      	ldrb	r3, [r7, #3]
 800f910:	f003 030f 	and.w	r3, r3, #15
 800f914:	b2da      	uxtb	r2, r3
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f920:	2b01      	cmp	r3, #1
 800f922:	d101      	bne.n	800f928 <HAL_PCD_EP_Close+0x6e>
 800f924:	2302      	movs	r3, #2
 800f926:	e00e      	b.n	800f946 <HAL_PCD_EP_Close+0x8c>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2201      	movs	r2, #1
 800f92c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68f9      	ldr	r1, [r7, #12]
 800f936:	4618      	mov	r0, r3
 800f938:	f004 fbae 	bl	8014098 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b086      	sub	sp, #24
 800f952:	af00      	add	r7, sp, #0
 800f954:	60f8      	str	r0, [r7, #12]
 800f956:	607a      	str	r2, [r7, #4]
 800f958:	603b      	str	r3, [r7, #0]
 800f95a:	460b      	mov	r3, r1
 800f95c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f95e:	7afb      	ldrb	r3, [r7, #11]
 800f960:	f003 020f 	and.w	r2, r3, #15
 800f964:	4613      	mov	r3, r2
 800f966:	00db      	lsls	r3, r3, #3
 800f968:	4413      	add	r3, r2
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	4413      	add	r3, r2
 800f974:	3304      	adds	r3, #4
 800f976:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	683a      	ldr	r2, [r7, #0]
 800f982:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	2200      	movs	r2, #0
 800f988:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	2200      	movs	r2, #0
 800f98e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f990:	7afb      	ldrb	r3, [r7, #11]
 800f992:	f003 030f 	and.w	r3, r3, #15
 800f996:	b2da      	uxtb	r2, r3
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	691b      	ldr	r3, [r3, #16]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d102      	bne.n	800f9aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f9aa:	7afb      	ldrb	r3, [r7, #11]
 800f9ac:	f003 030f 	and.w	r3, r3, #15
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d109      	bne.n	800f9c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6818      	ldr	r0, [r3, #0]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	461a      	mov	r2, r3
 800f9c0:	6979      	ldr	r1, [r7, #20]
 800f9c2:	f004 fe8d 	bl	80146e0 <USB_EP0StartXfer>
 800f9c6:	e008      	b.n	800f9da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6818      	ldr	r0, [r3, #0]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	691b      	ldr	r3, [r3, #16]
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	6979      	ldr	r1, [r7, #20]
 800f9d6:	f004 fc3b 	bl	8014250 <USB_EPStartXfer>
  }

  return HAL_OK;
 800f9da:	2300      	movs	r3, #0
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3718      	adds	r7, #24
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800f9f0:	78fb      	ldrb	r3, [r7, #3]
 800f9f2:	f003 020f 	and.w	r2, r3, #15
 800f9f6:	6879      	ldr	r1, [r7, #4]
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	4413      	add	r3, r2
 800f9fe:	009b      	lsls	r3, r3, #2
 800fa00:	440b      	add	r3, r1
 800fa02:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800fa06:	681b      	ldr	r3, [r3, #0]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b086      	sub	sp, #24
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	607a      	str	r2, [r7, #4]
 800fa1e:	603b      	str	r3, [r7, #0]
 800fa20:	460b      	mov	r3, r1
 800fa22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fa24:	7afb      	ldrb	r3, [r7, #11]
 800fa26:	f003 020f 	and.w	r2, r3, #15
 800fa2a:	4613      	mov	r3, r2
 800fa2c:	00db      	lsls	r3, r3, #3
 800fa2e:	4413      	add	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	3338      	adds	r3, #56	; 0x38
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	4413      	add	r3, r2
 800fa38:	3304      	adds	r3, #4
 800fa3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	683a      	ldr	r2, [r7, #0]
 800fa46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	2201      	movs	r2, #1
 800fa52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fa54:	7afb      	ldrb	r3, [r7, #11]
 800fa56:	f003 030f 	and.w	r3, r3, #15
 800fa5a:	b2da      	uxtb	r2, r3
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	691b      	ldr	r3, [r3, #16]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d102      	bne.n	800fa6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800fa68:	687a      	ldr	r2, [r7, #4]
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fa6e:	7afb      	ldrb	r3, [r7, #11]
 800fa70:	f003 030f 	and.w	r3, r3, #15
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d109      	bne.n	800fa8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6818      	ldr	r0, [r3, #0]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	691b      	ldr	r3, [r3, #16]
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	461a      	mov	r2, r3
 800fa84:	6979      	ldr	r1, [r7, #20]
 800fa86:	f004 fe2b 	bl	80146e0 <USB_EP0StartXfer>
 800fa8a:	e008      	b.n	800fa9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6818      	ldr	r0, [r3, #0]
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	461a      	mov	r2, r3
 800fa98:	6979      	ldr	r1, [r7, #20]
 800fa9a:	f004 fbd9 	bl	8014250 <USB_EPStartXfer>
  }

  return HAL_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3718      	adds	r7, #24
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	460b      	mov	r3, r1
 800fab2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800fab4:	78fb      	ldrb	r3, [r7, #3]
 800fab6:	f003 020f 	and.w	r2, r3, #15
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d901      	bls.n	800fac6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800fac2:	2301      	movs	r3, #1
 800fac4:	e050      	b.n	800fb68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800faca:	2b00      	cmp	r3, #0
 800facc:	da0f      	bge.n	800faee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800face:	78fb      	ldrb	r3, [r7, #3]
 800fad0:	f003 020f 	and.w	r2, r3, #15
 800fad4:	4613      	mov	r3, r2
 800fad6:	00db      	lsls	r3, r3, #3
 800fad8:	4413      	add	r3, r2
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	3338      	adds	r3, #56	; 0x38
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	4413      	add	r3, r2
 800fae2:	3304      	adds	r3, #4
 800fae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2201      	movs	r2, #1
 800faea:	705a      	strb	r2, [r3, #1]
 800faec:	e00d      	b.n	800fb0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800faee:	78fa      	ldrb	r2, [r7, #3]
 800faf0:	4613      	mov	r3, r2
 800faf2:	00db      	lsls	r3, r3, #3
 800faf4:	4413      	add	r3, r2
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	4413      	add	r3, r2
 800fb00:	3304      	adds	r3, #4
 800fb02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2200      	movs	r2, #0
 800fb08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fb10:	78fb      	ldrb	r3, [r7, #3]
 800fb12:	f003 030f 	and.w	r3, r3, #15
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d101      	bne.n	800fb2a <HAL_PCD_EP_SetStall+0x82>
 800fb26:	2302      	movs	r3, #2
 800fb28:	e01e      	b.n	800fb68 <HAL_PCD_EP_SetStall+0xc0>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	68f9      	ldr	r1, [r7, #12]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f005 f869 	bl	8014c10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fb3e:	78fb      	ldrb	r3, [r7, #3]
 800fb40:	f003 030f 	and.w	r3, r3, #15
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d10a      	bne.n	800fb5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6818      	ldr	r0, [r3, #0]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	b2d9      	uxtb	r1, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fb58:	461a      	mov	r2, r3
 800fb5a:	f005 fa59 	bl	8015010 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800fb7c:	78fb      	ldrb	r3, [r7, #3]
 800fb7e:	f003 020f 	and.w	r2, r3, #15
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d901      	bls.n	800fb8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	e042      	b.n	800fc14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fb8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	da0f      	bge.n	800fbb6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fb96:	78fb      	ldrb	r3, [r7, #3]
 800fb98:	f003 020f 	and.w	r2, r3, #15
 800fb9c:	4613      	mov	r3, r2
 800fb9e:	00db      	lsls	r3, r3, #3
 800fba0:	4413      	add	r3, r2
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	3338      	adds	r3, #56	; 0x38
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	4413      	add	r3, r2
 800fbaa:	3304      	adds	r3, #4
 800fbac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	705a      	strb	r2, [r3, #1]
 800fbb4:	e00f      	b.n	800fbd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fbb6:	78fb      	ldrb	r3, [r7, #3]
 800fbb8:	f003 020f 	and.w	r2, r3, #15
 800fbbc:	4613      	mov	r3, r2
 800fbbe:	00db      	lsls	r3, r3, #3
 800fbc0:	4413      	add	r3, r2
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fbc8:	687a      	ldr	r2, [r7, #4]
 800fbca:	4413      	add	r3, r2
 800fbcc:	3304      	adds	r3, #4
 800fbce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fbdc:	78fb      	ldrb	r3, [r7, #3]
 800fbde:	f003 030f 	and.w	r3, r3, #15
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d101      	bne.n	800fbf6 <HAL_PCD_EP_ClrStall+0x86>
 800fbf2:	2302      	movs	r3, #2
 800fbf4:	e00e      	b.n	800fc14 <HAL_PCD_EP_ClrStall+0xa4>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68f9      	ldr	r1, [r7, #12]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f005 f871 	bl	8014cec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b084      	sub	sp, #16
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	460b      	mov	r3, r1
 800fc26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800fc28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	da0c      	bge.n	800fc4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc30:	78fb      	ldrb	r3, [r7, #3]
 800fc32:	f003 020f 	and.w	r2, r3, #15
 800fc36:	4613      	mov	r3, r2
 800fc38:	00db      	lsls	r3, r3, #3
 800fc3a:	4413      	add	r3, r2
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	3338      	adds	r3, #56	; 0x38
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	4413      	add	r3, r2
 800fc44:	3304      	adds	r3, #4
 800fc46:	60fb      	str	r3, [r7, #12]
 800fc48:	e00c      	b.n	800fc64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fc4a:	78fb      	ldrb	r3, [r7, #3]
 800fc4c:	f003 020f 	and.w	r2, r3, #15
 800fc50:	4613      	mov	r3, r2
 800fc52:	00db      	lsls	r3, r3, #3
 800fc54:	4413      	add	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	4413      	add	r3, r2
 800fc60:	3304      	adds	r3, #4
 800fc62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	68f9      	ldr	r1, [r7, #12]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f004 fe90 	bl	8014990 <USB_EPStopXfer>
 800fc70:	4603      	mov	r3, r0
 800fc72:	72fb      	strb	r3, [r7, #11]

  return ret;
 800fc74:	7afb      	ldrb	r3, [r7, #11]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b08a      	sub	sp, #40	; 0x28
 800fc82:	af02      	add	r7, sp, #8
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800fc92:	683a      	ldr	r2, [r7, #0]
 800fc94:	4613      	mov	r3, r2
 800fc96:	00db      	lsls	r3, r3, #3
 800fc98:	4413      	add	r3, r2
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	3338      	adds	r3, #56	; 0x38
 800fc9e:	687a      	ldr	r2, [r7, #4]
 800fca0:	4413      	add	r3, r2
 800fca2:	3304      	adds	r3, #4
 800fca4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	6a1a      	ldr	r2, [r3, #32]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	699b      	ldr	r3, [r3, #24]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d901      	bls.n	800fcb6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e06c      	b.n	800fd90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	699a      	ldr	r2, [r3, #24]
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6a1b      	ldr	r3, [r3, #32]
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	69fa      	ldr	r2, [r7, #28]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d902      	bls.n	800fcd2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	3303      	adds	r3, #3
 800fcd6:	089b      	lsrs	r3, r3, #2
 800fcd8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800fcda:	e02b      	b.n	800fd34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	699a      	ldr	r2, [r3, #24]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	6a1b      	ldr	r3, [r3, #32]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	69fa      	ldr	r2, [r7, #28]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d902      	bls.n	800fcf8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	3303      	adds	r3, #3
 800fcfc:	089b      	lsrs	r3, r3, #2
 800fcfe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6919      	ldr	r1, [r3, #16]
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	b2da      	uxtb	r2, r3
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	4603      	mov	r3, r0
 800fd16:	6978      	ldr	r0, [r7, #20]
 800fd18:	f004 fee4 	bl	8014ae4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	691a      	ldr	r2, [r3, #16]
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	441a      	add	r2, r3
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	6a1a      	ldr	r2, [r3, #32]
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	441a      	add	r2, r3
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	015a      	lsls	r2, r3, #5
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd40:	699b      	ldr	r3, [r3, #24]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	69ba      	ldr	r2, [r7, #24]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d809      	bhi.n	800fd5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	6a1a      	ldr	r2, [r3, #32]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d203      	bcs.n	800fd5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	699b      	ldr	r3, [r3, #24]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d1be      	bne.n	800fcdc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	699a      	ldr	r2, [r3, #24]
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	6a1b      	ldr	r3, [r3, #32]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d811      	bhi.n	800fd8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	f003 030f 	and.w	r3, r3, #15
 800fd70:	2201      	movs	r2, #1
 800fd72:	fa02 f303 	lsl.w	r3, r2, r3
 800fd76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	43db      	mvns	r3, r3
 800fd84:	6939      	ldr	r1, [r7, #16]
 800fd86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd8a:	4013      	ands	r3, r2
 800fd8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800fd8e:	2300      	movs	r3, #0
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3720      	adds	r7, #32
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b088      	sub	sp, #32
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	333c      	adds	r3, #60	; 0x3c
 800fdb0:	3304      	adds	r3, #4
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	015a      	lsls	r2, r3, #5
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	691b      	ldr	r3, [r3, #16]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d17b      	bne.n	800fec6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	f003 0308 	and.w	r3, r3, #8
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d015      	beq.n	800fe04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	4a61      	ldr	r2, [pc, #388]	; (800ff60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	f240 80b9 	bls.w	800ff54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 80b3 	beq.w	800ff54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	015a      	lsls	r2, r3, #5
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe00:	6093      	str	r3, [r2, #8]
 800fe02:	e0a7      	b.n	800ff54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	f003 0320 	and.w	r3, r3, #32
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d009      	beq.n	800fe22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	015a      	lsls	r2, r3, #5
 800fe12:	69bb      	ldr	r3, [r7, #24]
 800fe14:	4413      	add	r3, r2
 800fe16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	2320      	movs	r3, #32
 800fe1e:	6093      	str	r3, [r2, #8]
 800fe20:	e098      	b.n	800ff54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f040 8093 	bne.w	800ff54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	4a4b      	ldr	r2, [pc, #300]	; (800ff60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d90f      	bls.n	800fe56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00a      	beq.n	800fe56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	015a      	lsls	r2, r3, #5
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	4413      	add	r3, r2
 800fe48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe52:	6093      	str	r3, [r2, #8]
 800fe54:	e07e      	b.n	800ff54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800fe56:	683a      	ldr	r2, [r7, #0]
 800fe58:	4613      	mov	r3, r2
 800fe5a:	00db      	lsls	r3, r3, #3
 800fe5c:	4413      	add	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	4413      	add	r3, r2
 800fe68:	3304      	adds	r3, #4
 800fe6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	69da      	ldr	r2, [r3, #28]
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	0159      	lsls	r1, r3, #5
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	440b      	add	r3, r1
 800fe78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe82:	1ad2      	subs	r2, r2, r3
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d114      	bne.n	800feb8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	699b      	ldr	r3, [r3, #24]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d109      	bne.n	800feaa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6818      	ldr	r0, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fea0:	461a      	mov	r2, r3
 800fea2:	2101      	movs	r1, #1
 800fea4:	f005 f8b4 	bl	8015010 <USB_EP0_OutStart>
 800fea8:	e006      	b.n	800feb8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	691a      	ldr	r2, [r3, #16]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	6a1b      	ldr	r3, [r3, #32]
 800feb2:	441a      	add	r2, r3
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	b2db      	uxtb	r3, r3
 800febc:	4619      	mov	r1, r3
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f00a fd52 	bl	801a968 <HAL_PCD_DataOutStageCallback>
 800fec4:	e046      	b.n	800ff54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	4a26      	ldr	r2, [pc, #152]	; (800ff64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d124      	bne.n	800ff18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d00a      	beq.n	800feee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	015a      	lsls	r2, r3, #5
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	4413      	add	r3, r2
 800fee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee4:	461a      	mov	r2, r3
 800fee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800feea:	6093      	str	r3, [r2, #8]
 800feec:	e032      	b.n	800ff54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	f003 0320 	and.w	r3, r3, #32
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d008      	beq.n	800ff0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	015a      	lsls	r2, r3, #5
 800fefc:	69bb      	ldr	r3, [r7, #24]
 800fefe:	4413      	add	r3, r2
 800ff00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff04:	461a      	mov	r2, r3
 800ff06:	2320      	movs	r3, #32
 800ff08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	4619      	mov	r1, r3
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f00a fd29 	bl	801a968 <HAL_PCD_DataOutStageCallback>
 800ff16:	e01d      	b.n	800ff54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d114      	bne.n	800ff48 <PCD_EP_OutXfrComplete_int+0x1b0>
 800ff1e:	6879      	ldr	r1, [r7, #4]
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	4613      	mov	r3, r2
 800ff24:	00db      	lsls	r3, r3, #3
 800ff26:	4413      	add	r3, r2
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	440b      	add	r3, r1
 800ff2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d108      	bne.n	800ff48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6818      	ldr	r0, [r3, #0]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ff40:	461a      	mov	r2, r3
 800ff42:	2100      	movs	r1, #0
 800ff44:	f005 f864 	bl	8015010 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f00a fd0a 	bl	801a968 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3720      	adds	r7, #32
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	4f54300a 	.word	0x4f54300a
 800ff64:	4f54310a 	.word	0x4f54310a

0800ff68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b086      	sub	sp, #24
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	333c      	adds	r3, #60	; 0x3c
 800ff80:	3304      	adds	r3, #4
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	015a      	lsls	r2, r3, #5
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff92:	689b      	ldr	r3, [r3, #8]
 800ff94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	4a15      	ldr	r2, [pc, #84]	; (800fff0 <PCD_EP_OutSetupPacket_int+0x88>)
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d90e      	bls.n	800ffbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d009      	beq.n	800ffbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	015a      	lsls	r2, r3, #5
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	4413      	add	r3, r2
 800ffb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f00a fcc1 	bl	801a944 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	4a0a      	ldr	r2, [pc, #40]	; (800fff0 <PCD_EP_OutSetupPacket_int+0x88>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d90c      	bls.n	800ffe4 <PCD_EP_OutSetupPacket_int+0x7c>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	691b      	ldr	r3, [r3, #16]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d108      	bne.n	800ffe4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6818      	ldr	r0, [r3, #0]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ffdc:	461a      	mov	r2, r3
 800ffde:	2101      	movs	r1, #1
 800ffe0:	f005 f816 	bl	8015010 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	4f54300a 	.word	0x4f54300a

0800fff4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b085      	sub	sp, #20
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	460b      	mov	r3, r1
 800fffe:	70fb      	strb	r3, [r7, #3]
 8010000:	4613      	mov	r3, r2
 8010002:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801000c:	78fb      	ldrb	r3, [r7, #3]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d107      	bne.n	8010022 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8010012:	883b      	ldrh	r3, [r7, #0]
 8010014:	0419      	lsls	r1, r3, #16
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	68ba      	ldr	r2, [r7, #8]
 801001c:	430a      	orrs	r2, r1
 801001e:	629a      	str	r2, [r3, #40]	; 0x28
 8010020:	e028      	b.n	8010074 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010028:	0c1b      	lsrs	r3, r3, #16
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	4413      	add	r3, r2
 801002e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8010030:	2300      	movs	r3, #0
 8010032:	73fb      	strb	r3, [r7, #15]
 8010034:	e00d      	b.n	8010052 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	7bfb      	ldrb	r3, [r7, #15]
 801003c:	3340      	adds	r3, #64	; 0x40
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	4413      	add	r3, r2
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	0c1b      	lsrs	r3, r3, #16
 8010046:	68ba      	ldr	r2, [r7, #8]
 8010048:	4413      	add	r3, r2
 801004a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801004c:	7bfb      	ldrb	r3, [r7, #15]
 801004e:	3301      	adds	r3, #1
 8010050:	73fb      	strb	r3, [r7, #15]
 8010052:	7bfa      	ldrb	r2, [r7, #15]
 8010054:	78fb      	ldrb	r3, [r7, #3]
 8010056:	3b01      	subs	r3, #1
 8010058:	429a      	cmp	r2, r3
 801005a:	d3ec      	bcc.n	8010036 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801005c:	883b      	ldrh	r3, [r7, #0]
 801005e:	0418      	lsls	r0, r3, #16
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6819      	ldr	r1, [r3, #0]
 8010064:	78fb      	ldrb	r3, [r7, #3]
 8010066:	3b01      	subs	r3, #1
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	4302      	orrs	r2, r0
 801006c:	3340      	adds	r3, #64	; 0x40
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	440b      	add	r3, r1
 8010072:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010074:	2300      	movs	r3, #0
}
 8010076:	4618      	mov	r0, r3
 8010078:	3714      	adds	r7, #20
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8010082:	b480      	push	{r7}
 8010084:	b083      	sub	sp, #12
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	460b      	mov	r3, r1
 801008c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	887a      	ldrh	r2, [r7, #2]
 8010094:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8010096:	2300      	movs	r3, #0
}
 8010098:	4618      	mov	r0, r3
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	460b      	mov	r3, r1
 80100ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80100b0:	bf00      	nop
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b086      	sub	sp, #24
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d101      	bne.n	80100ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80100ca:	2301      	movs	r3, #1
 80100cc:	e267      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f003 0301 	and.w	r3, r3, #1
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d075      	beq.n	80101c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80100da:	4b88      	ldr	r3, [pc, #544]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f003 030c 	and.w	r3, r3, #12
 80100e2:	2b04      	cmp	r3, #4
 80100e4:	d00c      	beq.n	8010100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80100e6:	4b85      	ldr	r3, [pc, #532]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80100ee:	2b08      	cmp	r3, #8
 80100f0:	d112      	bne.n	8010118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80100f2:	4b82      	ldr	r3, [pc, #520]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100fe:	d10b      	bne.n	8010118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010100:	4b7e      	ldr	r3, [pc, #504]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010108:	2b00      	cmp	r3, #0
 801010a:	d05b      	beq.n	80101c4 <HAL_RCC_OscConfig+0x108>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d157      	bne.n	80101c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010114:	2301      	movs	r3, #1
 8010116:	e242      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010120:	d106      	bne.n	8010130 <HAL_RCC_OscConfig+0x74>
 8010122:	4b76      	ldr	r3, [pc, #472]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a75      	ldr	r2, [pc, #468]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801012c:	6013      	str	r3, [r2, #0]
 801012e:	e01d      	b.n	801016c <HAL_RCC_OscConfig+0xb0>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010138:	d10c      	bne.n	8010154 <HAL_RCC_OscConfig+0x98>
 801013a:	4b70      	ldr	r3, [pc, #448]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	4a6f      	ldr	r2, [pc, #444]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010144:	6013      	str	r3, [r2, #0]
 8010146:	4b6d      	ldr	r3, [pc, #436]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a6c      	ldr	r2, [pc, #432]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 801014c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010150:	6013      	str	r3, [r2, #0]
 8010152:	e00b      	b.n	801016c <HAL_RCC_OscConfig+0xb0>
 8010154:	4b69      	ldr	r3, [pc, #420]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a68      	ldr	r2, [pc, #416]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 801015a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801015e:	6013      	str	r3, [r2, #0]
 8010160:	4b66      	ldr	r3, [pc, #408]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a65      	ldr	r2, [pc, #404]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801016a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d013      	beq.n	801019c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010174:	f7fa ffc2 	bl	800b0fc <HAL_GetTick>
 8010178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801017a:	e008      	b.n	801018e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801017c:	f7fa ffbe 	bl	800b0fc <HAL_GetTick>
 8010180:	4602      	mov	r2, r0
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	1ad3      	subs	r3, r2, r3
 8010186:	2b64      	cmp	r3, #100	; 0x64
 8010188:	d901      	bls.n	801018e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801018a:	2303      	movs	r3, #3
 801018c:	e207      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801018e:	4b5b      	ldr	r3, [pc, #364]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010196:	2b00      	cmp	r3, #0
 8010198:	d0f0      	beq.n	801017c <HAL_RCC_OscConfig+0xc0>
 801019a:	e014      	b.n	80101c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801019c:	f7fa ffae 	bl	800b0fc <HAL_GetTick>
 80101a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80101a2:	e008      	b.n	80101b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80101a4:	f7fa ffaa 	bl	800b0fc <HAL_GetTick>
 80101a8:	4602      	mov	r2, r0
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	1ad3      	subs	r3, r2, r3
 80101ae:	2b64      	cmp	r3, #100	; 0x64
 80101b0:	d901      	bls.n	80101b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80101b2:	2303      	movs	r3, #3
 80101b4:	e1f3      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80101b6:	4b51      	ldr	r3, [pc, #324]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1f0      	bne.n	80101a4 <HAL_RCC_OscConfig+0xe8>
 80101c2:	e000      	b.n	80101c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80101c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f003 0302 	and.w	r3, r3, #2
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d063      	beq.n	801029a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80101d2:	4b4a      	ldr	r3, [pc, #296]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	f003 030c 	and.w	r3, r3, #12
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00b      	beq.n	80101f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80101de:	4b47      	ldr	r3, [pc, #284]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80101e6:	2b08      	cmp	r3, #8
 80101e8:	d11c      	bne.n	8010224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80101ea:	4b44      	ldr	r3, [pc, #272]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d116      	bne.n	8010224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80101f6:	4b41      	ldr	r3, [pc, #260]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f003 0302 	and.w	r3, r3, #2
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d005      	beq.n	801020e <HAL_RCC_OscConfig+0x152>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	2b01      	cmp	r3, #1
 8010208:	d001      	beq.n	801020e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801020a:	2301      	movs	r3, #1
 801020c:	e1c7      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801020e:	4b3b      	ldr	r3, [pc, #236]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	00db      	lsls	r3, r3, #3
 801021c:	4937      	ldr	r1, [pc, #220]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 801021e:	4313      	orrs	r3, r2
 8010220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010222:	e03a      	b.n	801029a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d020      	beq.n	801026e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801022c:	4b34      	ldr	r3, [pc, #208]	; (8010300 <HAL_RCC_OscConfig+0x244>)
 801022e:	2201      	movs	r2, #1
 8010230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010232:	f7fa ff63 	bl	800b0fc <HAL_GetTick>
 8010236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010238:	e008      	b.n	801024c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801023a:	f7fa ff5f 	bl	800b0fc <HAL_GetTick>
 801023e:	4602      	mov	r2, r0
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	2b02      	cmp	r3, #2
 8010246:	d901      	bls.n	801024c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010248:	2303      	movs	r3, #3
 801024a:	e1a8      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801024c:	4b2b      	ldr	r3, [pc, #172]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f003 0302 	and.w	r3, r3, #2
 8010254:	2b00      	cmp	r3, #0
 8010256:	d0f0      	beq.n	801023a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010258:	4b28      	ldr	r3, [pc, #160]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	691b      	ldr	r3, [r3, #16]
 8010264:	00db      	lsls	r3, r3, #3
 8010266:	4925      	ldr	r1, [pc, #148]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010268:	4313      	orrs	r3, r2
 801026a:	600b      	str	r3, [r1, #0]
 801026c:	e015      	b.n	801029a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801026e:	4b24      	ldr	r3, [pc, #144]	; (8010300 <HAL_RCC_OscConfig+0x244>)
 8010270:	2200      	movs	r2, #0
 8010272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010274:	f7fa ff42 	bl	800b0fc <HAL_GetTick>
 8010278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801027a:	e008      	b.n	801028e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801027c:	f7fa ff3e 	bl	800b0fc <HAL_GetTick>
 8010280:	4602      	mov	r2, r0
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	2b02      	cmp	r3, #2
 8010288:	d901      	bls.n	801028e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801028a:	2303      	movs	r3, #3
 801028c:	e187      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801028e:	4b1b      	ldr	r3, [pc, #108]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f003 0302 	and.w	r3, r3, #2
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1f0      	bne.n	801027c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f003 0308 	and.w	r3, r3, #8
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d036      	beq.n	8010314 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	695b      	ldr	r3, [r3, #20]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d016      	beq.n	80102dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80102ae:	4b15      	ldr	r3, [pc, #84]	; (8010304 <HAL_RCC_OscConfig+0x248>)
 80102b0:	2201      	movs	r2, #1
 80102b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102b4:	f7fa ff22 	bl	800b0fc <HAL_GetTick>
 80102b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80102ba:	e008      	b.n	80102ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80102bc:	f7fa ff1e 	bl	800b0fc <HAL_GetTick>
 80102c0:	4602      	mov	r2, r0
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	d901      	bls.n	80102ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80102ca:	2303      	movs	r3, #3
 80102cc:	e167      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80102ce:	4b0b      	ldr	r3, [pc, #44]	; (80102fc <HAL_RCC_OscConfig+0x240>)
 80102d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102d2:	f003 0302 	and.w	r3, r3, #2
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d0f0      	beq.n	80102bc <HAL_RCC_OscConfig+0x200>
 80102da:	e01b      	b.n	8010314 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80102dc:	4b09      	ldr	r3, [pc, #36]	; (8010304 <HAL_RCC_OscConfig+0x248>)
 80102de:	2200      	movs	r2, #0
 80102e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80102e2:	f7fa ff0b 	bl	800b0fc <HAL_GetTick>
 80102e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80102e8:	e00e      	b.n	8010308 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80102ea:	f7fa ff07 	bl	800b0fc <HAL_GetTick>
 80102ee:	4602      	mov	r2, r0
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	2b02      	cmp	r3, #2
 80102f6:	d907      	bls.n	8010308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80102f8:	2303      	movs	r3, #3
 80102fa:	e150      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
 80102fc:	40023800 	.word	0x40023800
 8010300:	42470000 	.word	0x42470000
 8010304:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010308:	4b88      	ldr	r3, [pc, #544]	; (801052c <HAL_RCC_OscConfig+0x470>)
 801030a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801030c:	f003 0302 	and.w	r3, r3, #2
 8010310:	2b00      	cmp	r3, #0
 8010312:	d1ea      	bne.n	80102ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f003 0304 	and.w	r3, r3, #4
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 8097 	beq.w	8010450 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010322:	2300      	movs	r3, #0
 8010324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010326:	4b81      	ldr	r3, [pc, #516]	; (801052c <HAL_RCC_OscConfig+0x470>)
 8010328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801032a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801032e:	2b00      	cmp	r3, #0
 8010330:	d10f      	bne.n	8010352 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010332:	2300      	movs	r3, #0
 8010334:	60bb      	str	r3, [r7, #8]
 8010336:	4b7d      	ldr	r3, [pc, #500]	; (801052c <HAL_RCC_OscConfig+0x470>)
 8010338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801033a:	4a7c      	ldr	r2, [pc, #496]	; (801052c <HAL_RCC_OscConfig+0x470>)
 801033c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010340:	6413      	str	r3, [r2, #64]	; 0x40
 8010342:	4b7a      	ldr	r3, [pc, #488]	; (801052c <HAL_RCC_OscConfig+0x470>)
 8010344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801034a:	60bb      	str	r3, [r7, #8]
 801034c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801034e:	2301      	movs	r3, #1
 8010350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010352:	4b77      	ldr	r3, [pc, #476]	; (8010530 <HAL_RCC_OscConfig+0x474>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801035a:	2b00      	cmp	r3, #0
 801035c:	d118      	bne.n	8010390 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801035e:	4b74      	ldr	r3, [pc, #464]	; (8010530 <HAL_RCC_OscConfig+0x474>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4a73      	ldr	r2, [pc, #460]	; (8010530 <HAL_RCC_OscConfig+0x474>)
 8010364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801036a:	f7fa fec7 	bl	800b0fc <HAL_GetTick>
 801036e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010370:	e008      	b.n	8010384 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010372:	f7fa fec3 	bl	800b0fc <HAL_GetTick>
 8010376:	4602      	mov	r2, r0
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	2b02      	cmp	r3, #2
 801037e:	d901      	bls.n	8010384 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8010380:	2303      	movs	r3, #3
 8010382:	e10c      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010384:	4b6a      	ldr	r3, [pc, #424]	; (8010530 <HAL_RCC_OscConfig+0x474>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801038c:	2b00      	cmp	r3, #0
 801038e:	d0f0      	beq.n	8010372 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	689b      	ldr	r3, [r3, #8]
 8010394:	2b01      	cmp	r3, #1
 8010396:	d106      	bne.n	80103a6 <HAL_RCC_OscConfig+0x2ea>
 8010398:	4b64      	ldr	r3, [pc, #400]	; (801052c <HAL_RCC_OscConfig+0x470>)
 801039a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801039c:	4a63      	ldr	r2, [pc, #396]	; (801052c <HAL_RCC_OscConfig+0x470>)
 801039e:	f043 0301 	orr.w	r3, r3, #1
 80103a2:	6713      	str	r3, [r2, #112]	; 0x70
 80103a4:	e01c      	b.n	80103e0 <HAL_RCC_OscConfig+0x324>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	2b05      	cmp	r3, #5
 80103ac:	d10c      	bne.n	80103c8 <HAL_RCC_OscConfig+0x30c>
 80103ae:	4b5f      	ldr	r3, [pc, #380]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80103b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103b2:	4a5e      	ldr	r2, [pc, #376]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80103b4:	f043 0304 	orr.w	r3, r3, #4
 80103b8:	6713      	str	r3, [r2, #112]	; 0x70
 80103ba:	4b5c      	ldr	r3, [pc, #368]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80103bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103be:	4a5b      	ldr	r2, [pc, #364]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80103c0:	f043 0301 	orr.w	r3, r3, #1
 80103c4:	6713      	str	r3, [r2, #112]	; 0x70
 80103c6:	e00b      	b.n	80103e0 <HAL_RCC_OscConfig+0x324>
 80103c8:	4b58      	ldr	r3, [pc, #352]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80103ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103cc:	4a57      	ldr	r2, [pc, #348]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80103ce:	f023 0301 	bic.w	r3, r3, #1
 80103d2:	6713      	str	r3, [r2, #112]	; 0x70
 80103d4:	4b55      	ldr	r3, [pc, #340]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80103d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103d8:	4a54      	ldr	r2, [pc, #336]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80103da:	f023 0304 	bic.w	r3, r3, #4
 80103de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d015      	beq.n	8010414 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80103e8:	f7fa fe88 	bl	800b0fc <HAL_GetTick>
 80103ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80103ee:	e00a      	b.n	8010406 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80103f0:	f7fa fe84 	bl	800b0fc <HAL_GetTick>
 80103f4:	4602      	mov	r2, r0
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80103fe:	4293      	cmp	r3, r2
 8010400:	d901      	bls.n	8010406 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8010402:	2303      	movs	r3, #3
 8010404:	e0cb      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010406:	4b49      	ldr	r3, [pc, #292]	; (801052c <HAL_RCC_OscConfig+0x470>)
 8010408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801040a:	f003 0302 	and.w	r3, r3, #2
 801040e:	2b00      	cmp	r3, #0
 8010410:	d0ee      	beq.n	80103f0 <HAL_RCC_OscConfig+0x334>
 8010412:	e014      	b.n	801043e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010414:	f7fa fe72 	bl	800b0fc <HAL_GetTick>
 8010418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801041a:	e00a      	b.n	8010432 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801041c:	f7fa fe6e 	bl	800b0fc <HAL_GetTick>
 8010420:	4602      	mov	r2, r0
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	1ad3      	subs	r3, r2, r3
 8010426:	f241 3288 	movw	r2, #5000	; 0x1388
 801042a:	4293      	cmp	r3, r2
 801042c:	d901      	bls.n	8010432 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801042e:	2303      	movs	r3, #3
 8010430:	e0b5      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010432:	4b3e      	ldr	r3, [pc, #248]	; (801052c <HAL_RCC_OscConfig+0x470>)
 8010434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010436:	f003 0302 	and.w	r3, r3, #2
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1ee      	bne.n	801041c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801043e:	7dfb      	ldrb	r3, [r7, #23]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d105      	bne.n	8010450 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010444:	4b39      	ldr	r3, [pc, #228]	; (801052c <HAL_RCC_OscConfig+0x470>)
 8010446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010448:	4a38      	ldr	r2, [pc, #224]	; (801052c <HAL_RCC_OscConfig+0x470>)
 801044a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801044e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	699b      	ldr	r3, [r3, #24]
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 80a1 	beq.w	801059c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801045a:	4b34      	ldr	r3, [pc, #208]	; (801052c <HAL_RCC_OscConfig+0x470>)
 801045c:	689b      	ldr	r3, [r3, #8]
 801045e:	f003 030c 	and.w	r3, r3, #12
 8010462:	2b08      	cmp	r3, #8
 8010464:	d05c      	beq.n	8010520 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	699b      	ldr	r3, [r3, #24]
 801046a:	2b02      	cmp	r3, #2
 801046c:	d141      	bne.n	80104f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801046e:	4b31      	ldr	r3, [pc, #196]	; (8010534 <HAL_RCC_OscConfig+0x478>)
 8010470:	2200      	movs	r2, #0
 8010472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010474:	f7fa fe42 	bl	800b0fc <HAL_GetTick>
 8010478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801047a:	e008      	b.n	801048e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801047c:	f7fa fe3e 	bl	800b0fc <HAL_GetTick>
 8010480:	4602      	mov	r2, r0
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	1ad3      	subs	r3, r2, r3
 8010486:	2b02      	cmp	r3, #2
 8010488:	d901      	bls.n	801048e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801048a:	2303      	movs	r3, #3
 801048c:	e087      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801048e:	4b27      	ldr	r3, [pc, #156]	; (801052c <HAL_RCC_OscConfig+0x470>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010496:	2b00      	cmp	r3, #0
 8010498:	d1f0      	bne.n	801047c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	69da      	ldr	r2, [r3, #28]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	431a      	orrs	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a8:	019b      	lsls	r3, r3, #6
 80104aa:	431a      	orrs	r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104b0:	085b      	lsrs	r3, r3, #1
 80104b2:	3b01      	subs	r3, #1
 80104b4:	041b      	lsls	r3, r3, #16
 80104b6:	431a      	orrs	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104bc:	061b      	lsls	r3, r3, #24
 80104be:	491b      	ldr	r1, [pc, #108]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80104c0:	4313      	orrs	r3, r2
 80104c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80104c4:	4b1b      	ldr	r3, [pc, #108]	; (8010534 <HAL_RCC_OscConfig+0x478>)
 80104c6:	2201      	movs	r2, #1
 80104c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104ca:	f7fa fe17 	bl	800b0fc <HAL_GetTick>
 80104ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80104d0:	e008      	b.n	80104e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104d2:	f7fa fe13 	bl	800b0fc <HAL_GetTick>
 80104d6:	4602      	mov	r2, r0
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	1ad3      	subs	r3, r2, r3
 80104dc:	2b02      	cmp	r3, #2
 80104de:	d901      	bls.n	80104e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80104e0:	2303      	movs	r3, #3
 80104e2:	e05c      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80104e4:	4b11      	ldr	r3, [pc, #68]	; (801052c <HAL_RCC_OscConfig+0x470>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d0f0      	beq.n	80104d2 <HAL_RCC_OscConfig+0x416>
 80104f0:	e054      	b.n	801059c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80104f2:	4b10      	ldr	r3, [pc, #64]	; (8010534 <HAL_RCC_OscConfig+0x478>)
 80104f4:	2200      	movs	r2, #0
 80104f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104f8:	f7fa fe00 	bl	800b0fc <HAL_GetTick>
 80104fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80104fe:	e008      	b.n	8010512 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010500:	f7fa fdfc 	bl	800b0fc <HAL_GetTick>
 8010504:	4602      	mov	r2, r0
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	2b02      	cmp	r3, #2
 801050c:	d901      	bls.n	8010512 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801050e:	2303      	movs	r3, #3
 8010510:	e045      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010512:	4b06      	ldr	r3, [pc, #24]	; (801052c <HAL_RCC_OscConfig+0x470>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801051a:	2b00      	cmp	r3, #0
 801051c:	d1f0      	bne.n	8010500 <HAL_RCC_OscConfig+0x444>
 801051e:	e03d      	b.n	801059c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	699b      	ldr	r3, [r3, #24]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d107      	bne.n	8010538 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8010528:	2301      	movs	r3, #1
 801052a:	e038      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
 801052c:	40023800 	.word	0x40023800
 8010530:	40007000 	.word	0x40007000
 8010534:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010538:	4b1b      	ldr	r3, [pc, #108]	; (80105a8 <HAL_RCC_OscConfig+0x4ec>)
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	699b      	ldr	r3, [r3, #24]
 8010542:	2b01      	cmp	r3, #1
 8010544:	d028      	beq.n	8010598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010550:	429a      	cmp	r2, r3
 8010552:	d121      	bne.n	8010598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801055e:	429a      	cmp	r2, r3
 8010560:	d11a      	bne.n	8010598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010568:	4013      	ands	r3, r2
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801056e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010570:	4293      	cmp	r3, r2
 8010572:	d111      	bne.n	8010598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801057e:	085b      	lsrs	r3, r3, #1
 8010580:	3b01      	subs	r3, #1
 8010582:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010584:	429a      	cmp	r2, r3
 8010586:	d107      	bne.n	8010598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010592:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010594:	429a      	cmp	r2, r3
 8010596:	d001      	beq.n	801059c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8010598:	2301      	movs	r3, #1
 801059a:	e000      	b.n	801059e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801059c:	2300      	movs	r3, #0
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3718      	adds	r7, #24
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	40023800 	.word	0x40023800

080105ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d101      	bne.n	80105c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80105bc:	2301      	movs	r3, #1
 80105be:	e0cc      	b.n	801075a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80105c0:	4b68      	ldr	r3, [pc, #416]	; (8010764 <HAL_RCC_ClockConfig+0x1b8>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f003 0307 	and.w	r3, r3, #7
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d90c      	bls.n	80105e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80105ce:	4b65      	ldr	r3, [pc, #404]	; (8010764 <HAL_RCC_ClockConfig+0x1b8>)
 80105d0:	683a      	ldr	r2, [r7, #0]
 80105d2:	b2d2      	uxtb	r2, r2
 80105d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80105d6:	4b63      	ldr	r3, [pc, #396]	; (8010764 <HAL_RCC_ClockConfig+0x1b8>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	f003 0307 	and.w	r3, r3, #7
 80105de:	683a      	ldr	r2, [r7, #0]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d001      	beq.n	80105e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80105e4:	2301      	movs	r3, #1
 80105e6:	e0b8      	b.n	801075a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f003 0302 	and.w	r3, r3, #2
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d020      	beq.n	8010636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f003 0304 	and.w	r3, r3, #4
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d005      	beq.n	801060c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010600:	4b59      	ldr	r3, [pc, #356]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	4a58      	ldr	r2, [pc, #352]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 8010606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801060a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f003 0308 	and.w	r3, r3, #8
 8010614:	2b00      	cmp	r3, #0
 8010616:	d005      	beq.n	8010624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010618:	4b53      	ldr	r3, [pc, #332]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	4a52      	ldr	r2, [pc, #328]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 801061e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010624:	4b50      	ldr	r3, [pc, #320]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 8010626:	689b      	ldr	r3, [r3, #8]
 8010628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	494d      	ldr	r1, [pc, #308]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 8010632:	4313      	orrs	r3, r2
 8010634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f003 0301 	and.w	r3, r3, #1
 801063e:	2b00      	cmp	r3, #0
 8010640:	d044      	beq.n	80106cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	2b01      	cmp	r3, #1
 8010648:	d107      	bne.n	801065a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801064a:	4b47      	ldr	r3, [pc, #284]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010652:	2b00      	cmp	r3, #0
 8010654:	d119      	bne.n	801068a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010656:	2301      	movs	r3, #1
 8010658:	e07f      	b.n	801075a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	2b02      	cmp	r3, #2
 8010660:	d003      	beq.n	801066a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010666:	2b03      	cmp	r3, #3
 8010668:	d107      	bne.n	801067a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801066a:	4b3f      	ldr	r3, [pc, #252]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010672:	2b00      	cmp	r3, #0
 8010674:	d109      	bne.n	801068a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010676:	2301      	movs	r3, #1
 8010678:	e06f      	b.n	801075a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801067a:	4b3b      	ldr	r3, [pc, #236]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f003 0302 	and.w	r3, r3, #2
 8010682:	2b00      	cmp	r3, #0
 8010684:	d101      	bne.n	801068a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010686:	2301      	movs	r3, #1
 8010688:	e067      	b.n	801075a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801068a:	4b37      	ldr	r3, [pc, #220]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	f023 0203 	bic.w	r2, r3, #3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	4934      	ldr	r1, [pc, #208]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 8010698:	4313      	orrs	r3, r2
 801069a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801069c:	f7fa fd2e 	bl	800b0fc <HAL_GetTick>
 80106a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80106a2:	e00a      	b.n	80106ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80106a4:	f7fa fd2a 	bl	800b0fc <HAL_GetTick>
 80106a8:	4602      	mov	r2, r0
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	1ad3      	subs	r3, r2, r3
 80106ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d901      	bls.n	80106ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80106b6:	2303      	movs	r3, #3
 80106b8:	e04f      	b.n	801075a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80106ba:	4b2b      	ldr	r3, [pc, #172]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 80106bc:	689b      	ldr	r3, [r3, #8]
 80106be:	f003 020c 	and.w	r2, r3, #12
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	009b      	lsls	r3, r3, #2
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d1eb      	bne.n	80106a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80106cc:	4b25      	ldr	r3, [pc, #148]	; (8010764 <HAL_RCC_ClockConfig+0x1b8>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f003 0307 	and.w	r3, r3, #7
 80106d4:	683a      	ldr	r2, [r7, #0]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d20c      	bcs.n	80106f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80106da:	4b22      	ldr	r3, [pc, #136]	; (8010764 <HAL_RCC_ClockConfig+0x1b8>)
 80106dc:	683a      	ldr	r2, [r7, #0]
 80106de:	b2d2      	uxtb	r2, r2
 80106e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80106e2:	4b20      	ldr	r3, [pc, #128]	; (8010764 <HAL_RCC_ClockConfig+0x1b8>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f003 0307 	and.w	r3, r3, #7
 80106ea:	683a      	ldr	r2, [r7, #0]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d001      	beq.n	80106f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80106f0:	2301      	movs	r3, #1
 80106f2:	e032      	b.n	801075a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f003 0304 	and.w	r3, r3, #4
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d008      	beq.n	8010712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010700:	4b19      	ldr	r3, [pc, #100]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	4916      	ldr	r1, [pc, #88]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 801070e:	4313      	orrs	r3, r2
 8010710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f003 0308 	and.w	r3, r3, #8
 801071a:	2b00      	cmp	r3, #0
 801071c:	d009      	beq.n	8010732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801071e:	4b12      	ldr	r3, [pc, #72]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 8010720:	689b      	ldr	r3, [r3, #8]
 8010722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	691b      	ldr	r3, [r3, #16]
 801072a:	00db      	lsls	r3, r3, #3
 801072c:	490e      	ldr	r1, [pc, #56]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 801072e:	4313      	orrs	r3, r2
 8010730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010732:	f000 f821 	bl	8010778 <HAL_RCC_GetSysClockFreq>
 8010736:	4602      	mov	r2, r0
 8010738:	4b0b      	ldr	r3, [pc, #44]	; (8010768 <HAL_RCC_ClockConfig+0x1bc>)
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	091b      	lsrs	r3, r3, #4
 801073e:	f003 030f 	and.w	r3, r3, #15
 8010742:	490a      	ldr	r1, [pc, #40]	; (801076c <HAL_RCC_ClockConfig+0x1c0>)
 8010744:	5ccb      	ldrb	r3, [r1, r3]
 8010746:	fa22 f303 	lsr.w	r3, r2, r3
 801074a:	4a09      	ldr	r2, [pc, #36]	; (8010770 <HAL_RCC_ClockConfig+0x1c4>)
 801074c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801074e:	4b09      	ldr	r3, [pc, #36]	; (8010774 <HAL_RCC_ClockConfig+0x1c8>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4618      	mov	r0, r3
 8010754:	f7f3 fadc 	bl	8003d10 <HAL_InitTick>

  return HAL_OK;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	40023c00 	.word	0x40023c00
 8010768:	40023800 	.word	0x40023800
 801076c:	08021b34 	.word	0x08021b34
 8010770:	20000004 	.word	0x20000004
 8010774:	20000010 	.word	0x20000010

08010778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801077c:	b090      	sub	sp, #64	; 0x40
 801077e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010780:	2300      	movs	r3, #0
 8010782:	637b      	str	r3, [r7, #52]	; 0x34
 8010784:	2300      	movs	r3, #0
 8010786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010788:	2300      	movs	r3, #0
 801078a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 801078c:	2300      	movs	r3, #0
 801078e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010790:	4b59      	ldr	r3, [pc, #356]	; (80108f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8010792:	689b      	ldr	r3, [r3, #8]
 8010794:	f003 030c 	and.w	r3, r3, #12
 8010798:	2b08      	cmp	r3, #8
 801079a:	d00d      	beq.n	80107b8 <HAL_RCC_GetSysClockFreq+0x40>
 801079c:	2b08      	cmp	r3, #8
 801079e:	f200 80a1 	bhi.w	80108e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d002      	beq.n	80107ac <HAL_RCC_GetSysClockFreq+0x34>
 80107a6:	2b04      	cmp	r3, #4
 80107a8:	d003      	beq.n	80107b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80107aa:	e09b      	b.n	80108e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80107ac:	4b53      	ldr	r3, [pc, #332]	; (80108fc <HAL_RCC_GetSysClockFreq+0x184>)
 80107ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80107b0:	e09b      	b.n	80108ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80107b2:	4b53      	ldr	r3, [pc, #332]	; (8010900 <HAL_RCC_GetSysClockFreq+0x188>)
 80107b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80107b6:	e098      	b.n	80108ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80107b8:	4b4f      	ldr	r3, [pc, #316]	; (80108f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80107c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80107c2:	4b4d      	ldr	r3, [pc, #308]	; (80108f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d028      	beq.n	8010820 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80107ce:	4b4a      	ldr	r3, [pc, #296]	; (80108f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	099b      	lsrs	r3, r3, #6
 80107d4:	2200      	movs	r2, #0
 80107d6:	623b      	str	r3, [r7, #32]
 80107d8:	627a      	str	r2, [r7, #36]	; 0x24
 80107da:	6a3b      	ldr	r3, [r7, #32]
 80107dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80107e0:	2100      	movs	r1, #0
 80107e2:	4b47      	ldr	r3, [pc, #284]	; (8010900 <HAL_RCC_GetSysClockFreq+0x188>)
 80107e4:	fb03 f201 	mul.w	r2, r3, r1
 80107e8:	2300      	movs	r3, #0
 80107ea:	fb00 f303 	mul.w	r3, r0, r3
 80107ee:	4413      	add	r3, r2
 80107f0:	4a43      	ldr	r2, [pc, #268]	; (8010900 <HAL_RCC_GetSysClockFreq+0x188>)
 80107f2:	fba0 1202 	umull	r1, r2, r0, r2
 80107f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80107f8:	460a      	mov	r2, r1
 80107fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80107fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107fe:	4413      	add	r3, r2
 8010800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010804:	2200      	movs	r2, #0
 8010806:	61bb      	str	r3, [r7, #24]
 8010808:	61fa      	str	r2, [r7, #28]
 801080a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801080e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010812:	f7f0 fa39 	bl	8000c88 <__aeabi_uldivmod>
 8010816:	4602      	mov	r2, r0
 8010818:	460b      	mov	r3, r1
 801081a:	4613      	mov	r3, r2
 801081c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801081e:	e053      	b.n	80108c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010820:	4b35      	ldr	r3, [pc, #212]	; (80108f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	099b      	lsrs	r3, r3, #6
 8010826:	2200      	movs	r2, #0
 8010828:	613b      	str	r3, [r7, #16]
 801082a:	617a      	str	r2, [r7, #20]
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8010832:	f04f 0b00 	mov.w	fp, #0
 8010836:	4652      	mov	r2, sl
 8010838:	465b      	mov	r3, fp
 801083a:	f04f 0000 	mov.w	r0, #0
 801083e:	f04f 0100 	mov.w	r1, #0
 8010842:	0159      	lsls	r1, r3, #5
 8010844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010848:	0150      	lsls	r0, r2, #5
 801084a:	4602      	mov	r2, r0
 801084c:	460b      	mov	r3, r1
 801084e:	ebb2 080a 	subs.w	r8, r2, sl
 8010852:	eb63 090b 	sbc.w	r9, r3, fp
 8010856:	f04f 0200 	mov.w	r2, #0
 801085a:	f04f 0300 	mov.w	r3, #0
 801085e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8010862:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8010866:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801086a:	ebb2 0408 	subs.w	r4, r2, r8
 801086e:	eb63 0509 	sbc.w	r5, r3, r9
 8010872:	f04f 0200 	mov.w	r2, #0
 8010876:	f04f 0300 	mov.w	r3, #0
 801087a:	00eb      	lsls	r3, r5, #3
 801087c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010880:	00e2      	lsls	r2, r4, #3
 8010882:	4614      	mov	r4, r2
 8010884:	461d      	mov	r5, r3
 8010886:	eb14 030a 	adds.w	r3, r4, sl
 801088a:	603b      	str	r3, [r7, #0]
 801088c:	eb45 030b 	adc.w	r3, r5, fp
 8010890:	607b      	str	r3, [r7, #4]
 8010892:	f04f 0200 	mov.w	r2, #0
 8010896:	f04f 0300 	mov.w	r3, #0
 801089a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801089e:	4629      	mov	r1, r5
 80108a0:	028b      	lsls	r3, r1, #10
 80108a2:	4621      	mov	r1, r4
 80108a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80108a8:	4621      	mov	r1, r4
 80108aa:	028a      	lsls	r2, r1, #10
 80108ac:	4610      	mov	r0, r2
 80108ae:	4619      	mov	r1, r3
 80108b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b2:	2200      	movs	r2, #0
 80108b4:	60bb      	str	r3, [r7, #8]
 80108b6:	60fa      	str	r2, [r7, #12]
 80108b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80108bc:	f7f0 f9e4 	bl	8000c88 <__aeabi_uldivmod>
 80108c0:	4602      	mov	r2, r0
 80108c2:	460b      	mov	r3, r1
 80108c4:	4613      	mov	r3, r2
 80108c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80108c8:	4b0b      	ldr	r3, [pc, #44]	; (80108f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	0c1b      	lsrs	r3, r3, #16
 80108ce:	f003 0303 	and.w	r3, r3, #3
 80108d2:	3301      	adds	r3, #1
 80108d4:	005b      	lsls	r3, r3, #1
 80108d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80108d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80108e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80108e2:	e002      	b.n	80108ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80108e4:	4b05      	ldr	r3, [pc, #20]	; (80108fc <HAL_RCC_GetSysClockFreq+0x184>)
 80108e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80108e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80108ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3740      	adds	r7, #64	; 0x40
 80108f0:	46bd      	mov	sp, r7
 80108f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108f6:	bf00      	nop
 80108f8:	40023800 	.word	0x40023800
 80108fc:	00f42400 	.word	0x00f42400
 8010900:	00b71b00 	.word	0x00b71b00

08010904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010904:	b480      	push	{r7}
 8010906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010908:	4b03      	ldr	r3, [pc, #12]	; (8010918 <HAL_RCC_GetHCLKFreq+0x14>)
 801090a:	681b      	ldr	r3, [r3, #0]
}
 801090c:	4618      	mov	r0, r3
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	20000004 	.word	0x20000004

0801091c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010920:	f7ff fff0 	bl	8010904 <HAL_RCC_GetHCLKFreq>
 8010924:	4602      	mov	r2, r0
 8010926:	4b05      	ldr	r3, [pc, #20]	; (801093c <HAL_RCC_GetPCLK1Freq+0x20>)
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	0a9b      	lsrs	r3, r3, #10
 801092c:	f003 0307 	and.w	r3, r3, #7
 8010930:	4903      	ldr	r1, [pc, #12]	; (8010940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010932:	5ccb      	ldrb	r3, [r1, r3]
 8010934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010938:	4618      	mov	r0, r3
 801093a:	bd80      	pop	{r7, pc}
 801093c:	40023800 	.word	0x40023800
 8010940:	08021b44 	.word	0x08021b44

08010944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010948:	f7ff ffdc 	bl	8010904 <HAL_RCC_GetHCLKFreq>
 801094c:	4602      	mov	r2, r0
 801094e:	4b05      	ldr	r3, [pc, #20]	; (8010964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010950:	689b      	ldr	r3, [r3, #8]
 8010952:	0b5b      	lsrs	r3, r3, #13
 8010954:	f003 0307 	and.w	r3, r3, #7
 8010958:	4903      	ldr	r1, [pc, #12]	; (8010968 <HAL_RCC_GetPCLK2Freq+0x24>)
 801095a:	5ccb      	ldrb	r3, [r1, r3]
 801095c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010960:	4618      	mov	r0, r3
 8010962:	bd80      	pop	{r7, pc}
 8010964:	40023800 	.word	0x40023800
 8010968:	08021b44 	.word	0x08021b44

0801096c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	220f      	movs	r2, #15
 801097a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801097c:	4b12      	ldr	r3, [pc, #72]	; (80109c8 <HAL_RCC_GetClockConfig+0x5c>)
 801097e:	689b      	ldr	r3, [r3, #8]
 8010980:	f003 0203 	and.w	r2, r3, #3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010988:	4b0f      	ldr	r3, [pc, #60]	; (80109c8 <HAL_RCC_GetClockConfig+0x5c>)
 801098a:	689b      	ldr	r3, [r3, #8]
 801098c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010994:	4b0c      	ldr	r3, [pc, #48]	; (80109c8 <HAL_RCC_GetClockConfig+0x5c>)
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80109a0:	4b09      	ldr	r3, [pc, #36]	; (80109c8 <HAL_RCC_GetClockConfig+0x5c>)
 80109a2:	689b      	ldr	r3, [r3, #8]
 80109a4:	08db      	lsrs	r3, r3, #3
 80109a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80109ae:	4b07      	ldr	r3, [pc, #28]	; (80109cc <HAL_RCC_GetClockConfig+0x60>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f003 0207 	and.w	r2, r3, #7
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	601a      	str	r2, [r3, #0]
}
 80109ba:	bf00      	nop
 80109bc:	370c      	adds	r7, #12
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr
 80109c6:	bf00      	nop
 80109c8:	40023800 	.word	0x40023800
 80109cc:	40023c00 	.word	0x40023c00

080109d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d101      	bne.n	80109e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80109de:	2301      	movs	r3, #1
 80109e0:	e01c      	b.n	8010a1c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	795b      	ldrb	r3, [r3, #5]
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d105      	bne.n	80109f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2200      	movs	r2, #0
 80109f0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7f3 f83c 	bl	8003a70 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2202      	movs	r2, #2
 80109fc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f042 0204 	orr.w	r2, r2, #4
 8010a0c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2201      	movs	r2, #1
 8010a12:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2200      	movs	r2, #0
 8010a18:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8010a1a:	2300      	movs	r3, #0
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3708      	adds	r7, #8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d101      	bne.n	8010a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010a32:	2301      	movs	r3, #1
 8010a34:	e07b      	b.n	8010b2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d108      	bne.n	8010a50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	685b      	ldr	r3, [r3, #4]
 8010a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010a46:	d009      	beq.n	8010a5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	61da      	str	r2, [r3, #28]
 8010a4e:	e005      	b.n	8010a5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d106      	bne.n	8010a7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2200      	movs	r2, #0
 8010a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7f3 f852 	bl	8003b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2202      	movs	r2, #2
 8010a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	689b      	ldr	r3, [r3, #8]
 8010aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010aa4:	431a      	orrs	r2, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010aae:	431a      	orrs	r2, r3
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	f003 0302 	and.w	r3, r3, #2
 8010ab8:	431a      	orrs	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	695b      	ldr	r3, [r3, #20]
 8010abe:	f003 0301 	and.w	r3, r3, #1
 8010ac2:	431a      	orrs	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	699b      	ldr	r3, [r3, #24]
 8010ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010acc:	431a      	orrs	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	69db      	ldr	r3, [r3, #28]
 8010ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ad6:	431a      	orrs	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6a1b      	ldr	r3, [r3, #32]
 8010adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ae0:	ea42 0103 	orr.w	r1, r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ae8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	430a      	orrs	r2, r1
 8010af2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	699b      	ldr	r3, [r3, #24]
 8010af8:	0c1b      	lsrs	r3, r3, #16
 8010afa:	f003 0104 	and.w	r1, r3, #4
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b02:	f003 0210 	and.w	r2, r3, #16
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	430a      	orrs	r2, r1
 8010b0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	69da      	ldr	r2, [r3, #28]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010b1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2201      	movs	r2, #1
 8010b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b088      	sub	sp, #32
 8010b3a:	af02      	add	r7, sp, #8
 8010b3c:	60f8      	str	r0, [r7, #12]
 8010b3e:	60b9      	str	r1, [r7, #8]
 8010b40:	603b      	str	r3, [r7, #0]
 8010b42:	4613      	mov	r3, r2
 8010b44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010b52:	d112      	bne.n	8010b7a <HAL_SPI_Receive+0x44>
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	689b      	ldr	r3, [r3, #8]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10e      	bne.n	8010b7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2204      	movs	r2, #4
 8010b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010b64:	88fa      	ldrh	r2, [r7, #6]
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	68b9      	ldr	r1, [r7, #8]
 8010b70:	68f8      	ldr	r0, [r7, #12]
 8010b72:	f000 f8f1 	bl	8010d58 <HAL_SPI_TransmitReceive>
 8010b76:	4603      	mov	r3, r0
 8010b78:	e0ea      	b.n	8010d50 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d101      	bne.n	8010b88 <HAL_SPI_Receive+0x52>
 8010b84:	2302      	movs	r3, #2
 8010b86:	e0e3      	b.n	8010d50 <HAL_SPI_Receive+0x21a>
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010b90:	f7fa fab4 	bl	800b0fc <HAL_GetTick>
 8010b94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d002      	beq.n	8010ba8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8010ba2:	2302      	movs	r3, #2
 8010ba4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010ba6:	e0ca      	b.n	8010d3e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d002      	beq.n	8010bb4 <HAL_SPI_Receive+0x7e>
 8010bae:	88fb      	ldrh	r3, [r7, #6]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d102      	bne.n	8010bba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010bb8:	e0c1      	b.n	8010d3e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2204      	movs	r2, #4
 8010bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	88fa      	ldrh	r2, [r7, #6]
 8010bd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	88fa      	ldrh	r2, [r7, #6]
 8010bd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2200      	movs	r2, #0
 8010be4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2200      	movs	r2, #0
 8010bea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c00:	d10f      	bne.n	8010c22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010c20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c2c:	2b40      	cmp	r3, #64	; 0x40
 8010c2e:	d007      	beq.n	8010c40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	68db      	ldr	r3, [r3, #12]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d162      	bne.n	8010d0e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010c48:	e02e      	b.n	8010ca8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	689b      	ldr	r3, [r3, #8]
 8010c50:	f003 0301 	and.w	r3, r3, #1
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d115      	bne.n	8010c84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f103 020c 	add.w	r2, r3, #12
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c64:	7812      	ldrb	r2, [r2, #0]
 8010c66:	b2d2      	uxtb	r2, r2
 8010c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c6e:	1c5a      	adds	r2, r3, #1
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	3b01      	subs	r3, #1
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010c82:	e011      	b.n	8010ca8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c84:	f7fa fa3a 	bl	800b0fc <HAL_GetTick>
 8010c88:	4602      	mov	r2, r0
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	1ad3      	subs	r3, r2, r3
 8010c8e:	683a      	ldr	r2, [r7, #0]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d803      	bhi.n	8010c9c <HAL_SPI_Receive+0x166>
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c9a:	d102      	bne.n	8010ca2 <HAL_SPI_Receive+0x16c>
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d102      	bne.n	8010ca8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8010ca2:	2303      	movs	r3, #3
 8010ca4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010ca6:	e04a      	b.n	8010d3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1cb      	bne.n	8010c4a <HAL_SPI_Receive+0x114>
 8010cb2:	e031      	b.n	8010d18 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	689b      	ldr	r3, [r3, #8]
 8010cba:	f003 0301 	and.w	r3, r3, #1
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	d113      	bne.n	8010cea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	68da      	ldr	r2, [r3, #12]
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ccc:	b292      	uxth	r2, r2
 8010cce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cd4:	1c9a      	adds	r2, r3, #2
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	3b01      	subs	r3, #1
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010ce8:	e011      	b.n	8010d0e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010cea:	f7fa fa07 	bl	800b0fc <HAL_GetTick>
 8010cee:	4602      	mov	r2, r0
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	1ad3      	subs	r3, r2, r3
 8010cf4:	683a      	ldr	r2, [r7, #0]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d803      	bhi.n	8010d02 <HAL_SPI_Receive+0x1cc>
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d00:	d102      	bne.n	8010d08 <HAL_SPI_Receive+0x1d2>
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d102      	bne.n	8010d0e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8010d08:	2303      	movs	r3, #3
 8010d0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010d0c:	e017      	b.n	8010d3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d1cd      	bne.n	8010cb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010d18:	693a      	ldr	r2, [r7, #16]
 8010d1a:	6839      	ldr	r1, [r7, #0]
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f000 fa45 	bl	80111ac <SPI_EndRxTransaction>
 8010d22:	4603      	mov	r3, r0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d002      	beq.n	8010d2e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	2220      	movs	r2, #32
 8010d2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d002      	beq.n	8010d3c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8010d36:	2301      	movs	r3, #1
 8010d38:	75fb      	strb	r3, [r7, #23]
 8010d3a:	e000      	b.n	8010d3e <HAL_SPI_Receive+0x208>
  }

error :
 8010d3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2201      	movs	r2, #1
 8010d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	3718      	adds	r7, #24
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b08c      	sub	sp, #48	; 0x30
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	60f8      	str	r0, [r7, #12]
 8010d60:	60b9      	str	r1, [r7, #8]
 8010d62:	607a      	str	r2, [r7, #4]
 8010d64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010d66:	2301      	movs	r3, #1
 8010d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d101      	bne.n	8010d7e <HAL_SPI_TransmitReceive+0x26>
 8010d7a:	2302      	movs	r3, #2
 8010d7c:	e18a      	b.n	8011094 <HAL_SPI_TransmitReceive+0x33c>
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2201      	movs	r2, #1
 8010d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010d86:	f7fa f9b9 	bl	800b0fc <HAL_GetTick>
 8010d8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010d9c:	887b      	ldrh	r3, [r7, #2]
 8010d9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d00f      	beq.n	8010dc8 <HAL_SPI_TransmitReceive+0x70>
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010dae:	d107      	bne.n	8010dc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	689b      	ldr	r3, [r3, #8]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d103      	bne.n	8010dc0 <HAL_SPI_TransmitReceive+0x68>
 8010db8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010dbc:	2b04      	cmp	r3, #4
 8010dbe:	d003      	beq.n	8010dc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010dc0:	2302      	movs	r3, #2
 8010dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010dc6:	e15b      	b.n	8011080 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d005      	beq.n	8010dda <HAL_SPI_TransmitReceive+0x82>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d002      	beq.n	8010dda <HAL_SPI_TransmitReceive+0x82>
 8010dd4:	887b      	ldrh	r3, [r7, #2]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d103      	bne.n	8010de2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010dda:	2301      	movs	r3, #1
 8010ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010de0:	e14e      	b.n	8011080 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	2b04      	cmp	r3, #4
 8010dec:	d003      	beq.n	8010df6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	2205      	movs	r2, #5
 8010df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	887a      	ldrh	r2, [r7, #2]
 8010e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	887a      	ldrh	r2, [r7, #2]
 8010e0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	68ba      	ldr	r2, [r7, #8]
 8010e12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	887a      	ldrh	r2, [r7, #2]
 8010e18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	887a      	ldrh	r2, [r7, #2]
 8010e1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2200      	movs	r2, #0
 8010e24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e36:	2b40      	cmp	r3, #64	; 0x40
 8010e38:	d007      	beq.n	8010e4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e52:	d178      	bne.n	8010f46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d002      	beq.n	8010e62 <HAL_SPI_TransmitReceive+0x10a>
 8010e5c:	8b7b      	ldrh	r3, [r7, #26]
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d166      	bne.n	8010f30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e66:	881a      	ldrh	r2, [r3, #0]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e72:	1c9a      	adds	r2, r3, #2
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	3b01      	subs	r3, #1
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010e86:	e053      	b.n	8010f30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	689b      	ldr	r3, [r3, #8]
 8010e8e:	f003 0302 	and.w	r3, r3, #2
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	d11b      	bne.n	8010ece <HAL_SPI_TransmitReceive+0x176>
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d016      	beq.n	8010ece <HAL_SPI_TransmitReceive+0x176>
 8010ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	d113      	bne.n	8010ece <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eaa:	881a      	ldrh	r2, [r3, #0]
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eb6:	1c9a      	adds	r2, r3, #2
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	3b01      	subs	r3, #1
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	689b      	ldr	r3, [r3, #8]
 8010ed4:	f003 0301 	and.w	r3, r3, #1
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d119      	bne.n	8010f10 <HAL_SPI_TransmitReceive+0x1b8>
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d014      	beq.n	8010f10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	68da      	ldr	r2, [r3, #12]
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef0:	b292      	uxth	r2, r2
 8010ef2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef8:	1c9a      	adds	r2, r3, #2
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	3b01      	subs	r3, #1
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010f10:	f7fa f8f4 	bl	800b0fc <HAL_GetTick>
 8010f14:	4602      	mov	r2, r0
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d807      	bhi.n	8010f30 <HAL_SPI_TransmitReceive+0x1d8>
 8010f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f26:	d003      	beq.n	8010f30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010f28:	2303      	movs	r3, #3
 8010f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010f2e:	e0a7      	b.n	8011080 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1a6      	bne.n	8010e88 <HAL_SPI_TransmitReceive+0x130>
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1a1      	bne.n	8010e88 <HAL_SPI_TransmitReceive+0x130>
 8010f44:	e07c      	b.n	8011040 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d002      	beq.n	8010f54 <HAL_SPI_TransmitReceive+0x1fc>
 8010f4e:	8b7b      	ldrh	r3, [r7, #26]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d16b      	bne.n	801102c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	330c      	adds	r3, #12
 8010f5e:	7812      	ldrb	r2, [r2, #0]
 8010f60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f66:	1c5a      	adds	r2, r3, #1
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	3b01      	subs	r3, #1
 8010f74:	b29a      	uxth	r2, r3
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010f7a:	e057      	b.n	801102c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	f003 0302 	and.w	r3, r3, #2
 8010f86:	2b02      	cmp	r3, #2
 8010f88:	d11c      	bne.n	8010fc4 <HAL_SPI_TransmitReceive+0x26c>
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d017      	beq.n	8010fc4 <HAL_SPI_TransmitReceive+0x26c>
 8010f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d114      	bne.n	8010fc4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	330c      	adds	r3, #12
 8010fa4:	7812      	ldrb	r2, [r2, #0]
 8010fa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fac:	1c5a      	adds	r2, r3, #1
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	689b      	ldr	r3, [r3, #8]
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	2b01      	cmp	r3, #1
 8010fd0:	d119      	bne.n	8011006 <HAL_SPI_TransmitReceive+0x2ae>
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d014      	beq.n	8011006 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	68da      	ldr	r2, [r3, #12]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe6:	b2d2      	uxtb	r2, r2
 8010fe8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fee:	1c5a      	adds	r2, r3, #1
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	3b01      	subs	r3, #1
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011002:	2301      	movs	r3, #1
 8011004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011006:	f7fa f879 	bl	800b0fc <HAL_GetTick>
 801100a:	4602      	mov	r2, r0
 801100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100e:	1ad3      	subs	r3, r2, r3
 8011010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011012:	429a      	cmp	r2, r3
 8011014:	d803      	bhi.n	801101e <HAL_SPI_TransmitReceive+0x2c6>
 8011016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801101c:	d102      	bne.n	8011024 <HAL_SPI_TransmitReceive+0x2cc>
 801101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011020:	2b00      	cmp	r3, #0
 8011022:	d103      	bne.n	801102c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8011024:	2303      	movs	r3, #3
 8011026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801102a:	e029      	b.n	8011080 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011030:	b29b      	uxth	r3, r3
 8011032:	2b00      	cmp	r3, #0
 8011034:	d1a2      	bne.n	8010f7c <HAL_SPI_TransmitReceive+0x224>
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801103a:	b29b      	uxth	r3, r3
 801103c:	2b00      	cmp	r3, #0
 801103e:	d19d      	bne.n	8010f7c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011042:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011044:	68f8      	ldr	r0, [r7, #12]
 8011046:	f000 f917 	bl	8011278 <SPI_EndRxTxTransaction>
 801104a:	4603      	mov	r3, r0
 801104c:	2b00      	cmp	r3, #0
 801104e:	d006      	beq.n	801105e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011050:	2301      	movs	r3, #1
 8011052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2220      	movs	r2, #32
 801105a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801105c:	e010      	b.n	8011080 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d10b      	bne.n	801107e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011066:	2300      	movs	r3, #0
 8011068:	617b      	str	r3, [r7, #20]
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	617b      	str	r3, [r7, #20]
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	689b      	ldr	r3, [r3, #8]
 8011078:	617b      	str	r3, [r7, #20]
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	e000      	b.n	8011080 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801107e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2201      	movs	r2, #1
 8011084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2200      	movs	r2, #0
 801108c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011090:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011094:	4618      	mov	r0, r3
 8011096:	3730      	adds	r7, #48	; 0x30
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b088      	sub	sp, #32
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	603b      	str	r3, [r7, #0]
 80110a8:	4613      	mov	r3, r2
 80110aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80110ac:	f7fa f826 	bl	800b0fc <HAL_GetTick>
 80110b0:	4602      	mov	r2, r0
 80110b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b4:	1a9b      	subs	r3, r3, r2
 80110b6:	683a      	ldr	r2, [r7, #0]
 80110b8:	4413      	add	r3, r2
 80110ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80110bc:	f7fa f81e 	bl	800b0fc <HAL_GetTick>
 80110c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80110c2:	4b39      	ldr	r3, [pc, #228]	; (80111a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	015b      	lsls	r3, r3, #5
 80110c8:	0d1b      	lsrs	r3, r3, #20
 80110ca:	69fa      	ldr	r2, [r7, #28]
 80110cc:	fb02 f303 	mul.w	r3, r2, r3
 80110d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80110d2:	e054      	b.n	801117e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110da:	d050      	beq.n	801117e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80110dc:	f7fa f80e 	bl	800b0fc <HAL_GetTick>
 80110e0:	4602      	mov	r2, r0
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	1ad3      	subs	r3, r2, r3
 80110e6:	69fa      	ldr	r2, [r7, #28]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d902      	bls.n	80110f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d13d      	bne.n	801116e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	685a      	ldr	r2, [r3, #4]
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011100:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801110a:	d111      	bne.n	8011130 <SPI_WaitFlagStateUntilTimeout+0x94>
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	689b      	ldr	r3, [r3, #8]
 8011110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011114:	d004      	beq.n	8011120 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801111e:	d107      	bne.n	8011130 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801112e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011138:	d10f      	bne.n	801115a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011148:	601a      	str	r2, [r3, #0]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011158:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2201      	movs	r2, #1
 801115e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2200      	movs	r2, #0
 8011166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801116a:	2303      	movs	r3, #3
 801116c:	e017      	b.n	801119e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d101      	bne.n	8011178 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011174:	2300      	movs	r3, #0
 8011176:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	3b01      	subs	r3, #1
 801117c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	689a      	ldr	r2, [r3, #8]
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	4013      	ands	r3, r2
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	429a      	cmp	r2, r3
 801118c:	bf0c      	ite	eq
 801118e:	2301      	moveq	r3, #1
 8011190:	2300      	movne	r3, #0
 8011192:	b2db      	uxtb	r3, r3
 8011194:	461a      	mov	r2, r3
 8011196:	79fb      	ldrb	r3, [r7, #7]
 8011198:	429a      	cmp	r2, r3
 801119a:	d19b      	bne.n	80110d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801119c:	2300      	movs	r3, #0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3720      	adds	r7, #32
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	20000004 	.word	0x20000004

080111ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b086      	sub	sp, #24
 80111b0:	af02      	add	r7, sp, #8
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	60b9      	str	r1, [r7, #8]
 80111b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80111c0:	d111      	bne.n	80111e6 <SPI_EndRxTransaction+0x3a>
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	689b      	ldr	r3, [r3, #8]
 80111c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80111ca:	d004      	beq.n	80111d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	689b      	ldr	r3, [r3, #8]
 80111d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80111d4:	d107      	bne.n	80111e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80111e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80111ee:	d12a      	bne.n	8011246 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	689b      	ldr	r3, [r3, #8]
 80111f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80111f8:	d012      	beq.n	8011220 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	2200      	movs	r2, #0
 8011202:	2180      	movs	r1, #128	; 0x80
 8011204:	68f8      	ldr	r0, [r7, #12]
 8011206:	f7ff ff49 	bl	801109c <SPI_WaitFlagStateUntilTimeout>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d02d      	beq.n	801126c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011214:	f043 0220 	orr.w	r2, r3, #32
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801121c:	2303      	movs	r3, #3
 801121e:	e026      	b.n	801126e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	9300      	str	r3, [sp, #0]
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	2200      	movs	r2, #0
 8011228:	2101      	movs	r1, #1
 801122a:	68f8      	ldr	r0, [r7, #12]
 801122c:	f7ff ff36 	bl	801109c <SPI_WaitFlagStateUntilTimeout>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d01a      	beq.n	801126c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801123a:	f043 0220 	orr.w	r2, r3, #32
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011242:	2303      	movs	r3, #3
 8011244:	e013      	b.n	801126e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	9300      	str	r3, [sp, #0]
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	2200      	movs	r2, #0
 801124e:	2101      	movs	r1, #1
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f7ff ff23 	bl	801109c <SPI_WaitFlagStateUntilTimeout>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	d007      	beq.n	801126c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011260:	f043 0220 	orr.w	r2, r3, #32
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011268:	2303      	movs	r3, #3
 801126a:	e000      	b.n	801126e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801126c:	2300      	movs	r3, #0
}
 801126e:	4618      	mov	r0, r3
 8011270:	3710      	adds	r7, #16
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
	...

08011278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b088      	sub	sp, #32
 801127c:	af02      	add	r7, sp, #8
 801127e:	60f8      	str	r0, [r7, #12]
 8011280:	60b9      	str	r1, [r7, #8]
 8011282:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011284:	4b1b      	ldr	r3, [pc, #108]	; (80112f4 <SPI_EndRxTxTransaction+0x7c>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4a1b      	ldr	r2, [pc, #108]	; (80112f8 <SPI_EndRxTxTransaction+0x80>)
 801128a:	fba2 2303 	umull	r2, r3, r2, r3
 801128e:	0d5b      	lsrs	r3, r3, #21
 8011290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011294:	fb02 f303 	mul.w	r3, r2, r3
 8011298:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80112a2:	d112      	bne.n	80112ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	9300      	str	r3, [sp, #0]
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	2200      	movs	r2, #0
 80112ac:	2180      	movs	r1, #128	; 0x80
 80112ae:	68f8      	ldr	r0, [r7, #12]
 80112b0:	f7ff fef4 	bl	801109c <SPI_WaitFlagStateUntilTimeout>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d016      	beq.n	80112e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112be:	f043 0220 	orr.w	r2, r3, #32
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80112c6:	2303      	movs	r3, #3
 80112c8:	e00f      	b.n	80112ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d00a      	beq.n	80112e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	3b01      	subs	r3, #1
 80112d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	689b      	ldr	r3, [r3, #8]
 80112dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112e0:	2b80      	cmp	r3, #128	; 0x80
 80112e2:	d0f2      	beq.n	80112ca <SPI_EndRxTxTransaction+0x52>
 80112e4:	e000      	b.n	80112e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80112e6:	bf00      	nop
  }

  return HAL_OK;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3718      	adds	r7, #24
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	20000004 	.word	0x20000004
 80112f8:	165e9f81 	.word	0x165e9f81

080112fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d101      	bne.n	801130e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801130a:	2301      	movs	r3, #1
 801130c:	e041      	b.n	8011392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011314:	b2db      	uxtb	r3, r3
 8011316:	2b00      	cmp	r3, #0
 8011318:	d106      	bne.n	8011328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2200      	movs	r2, #0
 801131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f7f3 f8da 	bl	80044dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2202      	movs	r2, #2
 801132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	3304      	adds	r3, #4
 8011338:	4619      	mov	r1, r3
 801133a:	4610      	mov	r0, r2
 801133c:	f000 fd8c 	bl	8011e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2201      	movs	r2, #1
 8011344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2201      	movs	r2, #1
 801134c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2201      	movs	r2, #1
 8011354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2201      	movs	r2, #1
 801135c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2201      	movs	r2, #1
 8011364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2201      	movs	r2, #1
 801136c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2201      	movs	r2, #1
 8011374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2201      	movs	r2, #1
 801137c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2201      	movs	r2, #1
 8011384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2201      	movs	r2, #1
 801138c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011390:	2300      	movs	r3, #0
}
 8011392:	4618      	mov	r0, r3
 8011394:	3708      	adds	r7, #8
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
	...

0801139c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801139c:	b480      	push	{r7}
 801139e:	b085      	sub	sp, #20
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	2b01      	cmp	r3, #1
 80113ae:	d001      	beq.n	80113b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80113b0:	2301      	movs	r3, #1
 80113b2:	e046      	b.n	8011442 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2202      	movs	r2, #2
 80113b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a23      	ldr	r2, [pc, #140]	; (8011450 <HAL_TIM_Base_Start+0xb4>)
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d022      	beq.n	801140c <HAL_TIM_Base_Start+0x70>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113ce:	d01d      	beq.n	801140c <HAL_TIM_Base_Start+0x70>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	4a1f      	ldr	r2, [pc, #124]	; (8011454 <HAL_TIM_Base_Start+0xb8>)
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d018      	beq.n	801140c <HAL_TIM_Base_Start+0x70>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	4a1e      	ldr	r2, [pc, #120]	; (8011458 <HAL_TIM_Base_Start+0xbc>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d013      	beq.n	801140c <HAL_TIM_Base_Start+0x70>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4a1c      	ldr	r2, [pc, #112]	; (801145c <HAL_TIM_Base_Start+0xc0>)
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d00e      	beq.n	801140c <HAL_TIM_Base_Start+0x70>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	4a1b      	ldr	r2, [pc, #108]	; (8011460 <HAL_TIM_Base_Start+0xc4>)
 80113f4:	4293      	cmp	r3, r2
 80113f6:	d009      	beq.n	801140c <HAL_TIM_Base_Start+0x70>
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a19      	ldr	r2, [pc, #100]	; (8011464 <HAL_TIM_Base_Start+0xc8>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d004      	beq.n	801140c <HAL_TIM_Base_Start+0x70>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a18      	ldr	r2, [pc, #96]	; (8011468 <HAL_TIM_Base_Start+0xcc>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d111      	bne.n	8011430 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	689b      	ldr	r3, [r3, #8]
 8011412:	f003 0307 	and.w	r3, r3, #7
 8011416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2b06      	cmp	r3, #6
 801141c:	d010      	beq.n	8011440 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	681a      	ldr	r2, [r3, #0]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f042 0201 	orr.w	r2, r2, #1
 801142c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801142e:	e007      	b.n	8011440 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f042 0201 	orr.w	r2, r2, #1
 801143e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011440:	2300      	movs	r3, #0
}
 8011442:	4618      	mov	r0, r3
 8011444:	3714      	adds	r7, #20
 8011446:	46bd      	mov	sp, r7
 8011448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144c:	4770      	bx	lr
 801144e:	bf00      	nop
 8011450:	40010000 	.word	0x40010000
 8011454:	40000400 	.word	0x40000400
 8011458:	40000800 	.word	0x40000800
 801145c:	40000c00 	.word	0x40000c00
 8011460:	40010400 	.word	0x40010400
 8011464:	40014000 	.word	0x40014000
 8011468:	40001800 	.word	0x40001800

0801146c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801146c:	b480      	push	{r7}
 801146e:	b085      	sub	sp, #20
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b01      	cmp	r3, #1
 801147e:	d001      	beq.n	8011484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011480:	2301      	movs	r3, #1
 8011482:	e04e      	b.n	8011522 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2202      	movs	r2, #2
 8011488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	68da      	ldr	r2, [r3, #12]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f042 0201 	orr.w	r2, r2, #1
 801149a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4a23      	ldr	r2, [pc, #140]	; (8011530 <HAL_TIM_Base_Start_IT+0xc4>)
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d022      	beq.n	80114ec <HAL_TIM_Base_Start_IT+0x80>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114ae:	d01d      	beq.n	80114ec <HAL_TIM_Base_Start_IT+0x80>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4a1f      	ldr	r2, [pc, #124]	; (8011534 <HAL_TIM_Base_Start_IT+0xc8>)
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d018      	beq.n	80114ec <HAL_TIM_Base_Start_IT+0x80>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	4a1e      	ldr	r2, [pc, #120]	; (8011538 <HAL_TIM_Base_Start_IT+0xcc>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d013      	beq.n	80114ec <HAL_TIM_Base_Start_IT+0x80>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4a1c      	ldr	r2, [pc, #112]	; (801153c <HAL_TIM_Base_Start_IT+0xd0>)
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d00e      	beq.n	80114ec <HAL_TIM_Base_Start_IT+0x80>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4a1b      	ldr	r2, [pc, #108]	; (8011540 <HAL_TIM_Base_Start_IT+0xd4>)
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d009      	beq.n	80114ec <HAL_TIM_Base_Start_IT+0x80>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	4a19      	ldr	r2, [pc, #100]	; (8011544 <HAL_TIM_Base_Start_IT+0xd8>)
 80114de:	4293      	cmp	r3, r2
 80114e0:	d004      	beq.n	80114ec <HAL_TIM_Base_Start_IT+0x80>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	4a18      	ldr	r2, [pc, #96]	; (8011548 <HAL_TIM_Base_Start_IT+0xdc>)
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d111      	bne.n	8011510 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	689b      	ldr	r3, [r3, #8]
 80114f2:	f003 0307 	and.w	r3, r3, #7
 80114f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2b06      	cmp	r3, #6
 80114fc:	d010      	beq.n	8011520 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	681a      	ldr	r2, [r3, #0]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	f042 0201 	orr.w	r2, r2, #1
 801150c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801150e:	e007      	b.n	8011520 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f042 0201 	orr.w	r2, r2, #1
 801151e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3714      	adds	r7, #20
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop
 8011530:	40010000 	.word	0x40010000
 8011534:	40000400 	.word	0x40000400
 8011538:	40000800 	.word	0x40000800
 801153c:	40000c00 	.word	0x40000c00
 8011540:	40010400 	.word	0x40010400
 8011544:	40014000 	.word	0x40014000
 8011548:	40001800 	.word	0x40001800

0801154c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b082      	sub	sp, #8
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d101      	bne.n	801155e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801155a:	2301      	movs	r3, #1
 801155c:	e041      	b.n	80115e2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011564:	b2db      	uxtb	r3, r3
 8011566:	2b00      	cmp	r3, #0
 8011568:	d106      	bne.n	8011578 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2200      	movs	r2, #0
 801156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 f839 	bl	80115ea <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2202      	movs	r2, #2
 801157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	3304      	adds	r3, #4
 8011588:	4619      	mov	r1, r3
 801158a:	4610      	mov	r0, r2
 801158c:	f000 fc64 	bl	8011e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2201      	movs	r2, #1
 8011594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2201      	movs	r2, #1
 801159c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2201      	movs	r2, #1
 80115a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2201      	movs	r2, #1
 80115ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2201      	movs	r2, #1
 80115b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2201      	movs	r2, #1
 80115bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2201      	movs	r2, #1
 80115c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2201      	movs	r2, #1
 80115cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2201      	movs	r2, #1
 80115d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2201      	movs	r2, #1
 80115dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80115e0:	2300      	movs	r3, #0
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3708      	adds	r7, #8
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}

080115ea <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80115ea:	b480      	push	{r7}
 80115ec:	b083      	sub	sp, #12
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80115f2:	bf00      	nop
 80115f4:	370c      	adds	r7, #12
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr

080115fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b082      	sub	sp, #8
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d101      	bne.n	8011610 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801160c:	2301      	movs	r3, #1
 801160e:	e041      	b.n	8011694 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011616:	b2db      	uxtb	r3, r3
 8011618:	2b00      	cmp	r3, #0
 801161a:	d106      	bne.n	801162a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2200      	movs	r2, #0
 8011620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7f2 ff0b 	bl	8004440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2202      	movs	r2, #2
 801162e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	3304      	adds	r3, #4
 801163a:	4619      	mov	r1, r3
 801163c:	4610      	mov	r0, r2
 801163e:	f000 fc0b 	bl	8011e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2201      	movs	r2, #1
 801164e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2201      	movs	r2, #1
 8011656:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2201      	movs	r2, #1
 801165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2201      	movs	r2, #1
 8011666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2201      	movs	r2, #1
 801166e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2201      	movs	r2, #1
 8011676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2201      	movs	r2, #1
 801167e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2201      	movs	r2, #1
 8011686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2201      	movs	r2, #1
 801168e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011692:	2300      	movs	r3, #0
}
 8011694:	4618      	mov	r0, r3
 8011696:	3708      	adds	r7, #8
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d109      	bne.n	80116c0 <HAL_TIM_PWM_Start+0x24>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	bf14      	ite	ne
 80116b8:	2301      	movne	r3, #1
 80116ba:	2300      	moveq	r3, #0
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	e022      	b.n	8011706 <HAL_TIM_PWM_Start+0x6a>
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	2b04      	cmp	r3, #4
 80116c4:	d109      	bne.n	80116da <HAL_TIM_PWM_Start+0x3e>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	bf14      	ite	ne
 80116d2:	2301      	movne	r3, #1
 80116d4:	2300      	moveq	r3, #0
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	e015      	b.n	8011706 <HAL_TIM_PWM_Start+0x6a>
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	2b08      	cmp	r3, #8
 80116de:	d109      	bne.n	80116f4 <HAL_TIM_PWM_Start+0x58>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	bf14      	ite	ne
 80116ec:	2301      	movne	r3, #1
 80116ee:	2300      	moveq	r3, #0
 80116f0:	b2db      	uxtb	r3, r3
 80116f2:	e008      	b.n	8011706 <HAL_TIM_PWM_Start+0x6a>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	bf14      	ite	ne
 8011700:	2301      	movne	r3, #1
 8011702:	2300      	moveq	r3, #0
 8011704:	b2db      	uxtb	r3, r3
 8011706:	2b00      	cmp	r3, #0
 8011708:	d001      	beq.n	801170e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801170a:	2301      	movs	r3, #1
 801170c:	e07c      	b.n	8011808 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d104      	bne.n	801171e <HAL_TIM_PWM_Start+0x82>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2202      	movs	r2, #2
 8011718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801171c:	e013      	b.n	8011746 <HAL_TIM_PWM_Start+0xaa>
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	2b04      	cmp	r3, #4
 8011722:	d104      	bne.n	801172e <HAL_TIM_PWM_Start+0x92>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2202      	movs	r2, #2
 8011728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801172c:	e00b      	b.n	8011746 <HAL_TIM_PWM_Start+0xaa>
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	2b08      	cmp	r3, #8
 8011732:	d104      	bne.n	801173e <HAL_TIM_PWM_Start+0xa2>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2202      	movs	r2, #2
 8011738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801173c:	e003      	b.n	8011746 <HAL_TIM_PWM_Start+0xaa>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2202      	movs	r2, #2
 8011742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2201      	movs	r2, #1
 801174c:	6839      	ldr	r1, [r7, #0]
 801174e:	4618      	mov	r0, r3
 8011750:	f000 fe6c 	bl	801242c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	4a2d      	ldr	r2, [pc, #180]	; (8011810 <HAL_TIM_PWM_Start+0x174>)
 801175a:	4293      	cmp	r3, r2
 801175c:	d004      	beq.n	8011768 <HAL_TIM_PWM_Start+0xcc>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4a2c      	ldr	r2, [pc, #176]	; (8011814 <HAL_TIM_PWM_Start+0x178>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d101      	bne.n	801176c <HAL_TIM_PWM_Start+0xd0>
 8011768:	2301      	movs	r3, #1
 801176a:	e000      	b.n	801176e <HAL_TIM_PWM_Start+0xd2>
 801176c:	2300      	movs	r3, #0
 801176e:	2b00      	cmp	r3, #0
 8011770:	d007      	beq.n	8011782 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011780:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	4a22      	ldr	r2, [pc, #136]	; (8011810 <HAL_TIM_PWM_Start+0x174>)
 8011788:	4293      	cmp	r3, r2
 801178a:	d022      	beq.n	80117d2 <HAL_TIM_PWM_Start+0x136>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011794:	d01d      	beq.n	80117d2 <HAL_TIM_PWM_Start+0x136>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	4a1f      	ldr	r2, [pc, #124]	; (8011818 <HAL_TIM_PWM_Start+0x17c>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d018      	beq.n	80117d2 <HAL_TIM_PWM_Start+0x136>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	4a1d      	ldr	r2, [pc, #116]	; (801181c <HAL_TIM_PWM_Start+0x180>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d013      	beq.n	80117d2 <HAL_TIM_PWM_Start+0x136>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	4a1c      	ldr	r2, [pc, #112]	; (8011820 <HAL_TIM_PWM_Start+0x184>)
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d00e      	beq.n	80117d2 <HAL_TIM_PWM_Start+0x136>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	4a16      	ldr	r2, [pc, #88]	; (8011814 <HAL_TIM_PWM_Start+0x178>)
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d009      	beq.n	80117d2 <HAL_TIM_PWM_Start+0x136>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	4a18      	ldr	r2, [pc, #96]	; (8011824 <HAL_TIM_PWM_Start+0x188>)
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d004      	beq.n	80117d2 <HAL_TIM_PWM_Start+0x136>
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4a16      	ldr	r2, [pc, #88]	; (8011828 <HAL_TIM_PWM_Start+0x18c>)
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d111      	bne.n	80117f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	689b      	ldr	r3, [r3, #8]
 80117d8:	f003 0307 	and.w	r3, r3, #7
 80117dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	2b06      	cmp	r3, #6
 80117e2:	d010      	beq.n	8011806 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	f042 0201 	orr.w	r2, r2, #1
 80117f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80117f4:	e007      	b.n	8011806 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f042 0201 	orr.w	r2, r2, #1
 8011804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011806:	2300      	movs	r3, #0
}
 8011808:	4618      	mov	r0, r3
 801180a:	3710      	adds	r7, #16
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}
 8011810:	40010000 	.word	0x40010000
 8011814:	40010400 	.word	0x40010400
 8011818:	40000400 	.word	0x40000400
 801181c:	40000800 	.word	0x40000800
 8011820:	40000c00 	.word	0x40000c00
 8011824:	40014000 	.word	0x40014000
 8011828:	40001800 	.word	0x40001800

0801182c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	691b      	ldr	r3, [r3, #16]
 801183a:	f003 0302 	and.w	r3, r3, #2
 801183e:	2b02      	cmp	r3, #2
 8011840:	d122      	bne.n	8011888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	f003 0302 	and.w	r3, r3, #2
 801184c:	2b02      	cmp	r3, #2
 801184e:	d11b      	bne.n	8011888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f06f 0202 	mvn.w	r2, #2
 8011858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2201      	movs	r2, #1
 801185e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	699b      	ldr	r3, [r3, #24]
 8011866:	f003 0303 	and.w	r3, r3, #3
 801186a:	2b00      	cmp	r3, #0
 801186c:	d003      	beq.n	8011876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f000 fad3 	bl	8011e1a <HAL_TIM_IC_CaptureCallback>
 8011874:	e005      	b.n	8011882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 fac5 	bl	8011e06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f000 fad6 	bl	8011e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2200      	movs	r2, #0
 8011886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	691b      	ldr	r3, [r3, #16]
 801188e:	f003 0304 	and.w	r3, r3, #4
 8011892:	2b04      	cmp	r3, #4
 8011894:	d122      	bne.n	80118dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	f003 0304 	and.w	r3, r3, #4
 80118a0:	2b04      	cmp	r3, #4
 80118a2:	d11b      	bne.n	80118dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f06f 0204 	mvn.w	r2, #4
 80118ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2202      	movs	r2, #2
 80118b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	699b      	ldr	r3, [r3, #24]
 80118ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d003      	beq.n	80118ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 faa9 	bl	8011e1a <HAL_TIM_IC_CaptureCallback>
 80118c8:	e005      	b.n	80118d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f000 fa9b 	bl	8011e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f000 faac 	bl	8011e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	691b      	ldr	r3, [r3, #16]
 80118e2:	f003 0308 	and.w	r3, r3, #8
 80118e6:	2b08      	cmp	r3, #8
 80118e8:	d122      	bne.n	8011930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	68db      	ldr	r3, [r3, #12]
 80118f0:	f003 0308 	and.w	r3, r3, #8
 80118f4:	2b08      	cmp	r3, #8
 80118f6:	d11b      	bne.n	8011930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	f06f 0208 	mvn.w	r2, #8
 8011900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2204      	movs	r2, #4
 8011906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	69db      	ldr	r3, [r3, #28]
 801190e:	f003 0303 	and.w	r3, r3, #3
 8011912:	2b00      	cmp	r3, #0
 8011914:	d003      	beq.n	801191e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 fa7f 	bl	8011e1a <HAL_TIM_IC_CaptureCallback>
 801191c:	e005      	b.n	801192a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f000 fa71 	bl	8011e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 fa82 	bl	8011e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	691b      	ldr	r3, [r3, #16]
 8011936:	f003 0310 	and.w	r3, r3, #16
 801193a:	2b10      	cmp	r3, #16
 801193c:	d122      	bne.n	8011984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	f003 0310 	and.w	r3, r3, #16
 8011948:	2b10      	cmp	r3, #16
 801194a:	d11b      	bne.n	8011984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f06f 0210 	mvn.w	r2, #16
 8011954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2208      	movs	r2, #8
 801195a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	69db      	ldr	r3, [r3, #28]
 8011962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011966:	2b00      	cmp	r3, #0
 8011968:	d003      	beq.n	8011972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 fa55 	bl	8011e1a <HAL_TIM_IC_CaptureCallback>
 8011970:	e005      	b.n	801197e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f000 fa47 	bl	8011e06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 fa58 	bl	8011e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2200      	movs	r2, #0
 8011982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	691b      	ldr	r3, [r3, #16]
 801198a:	f003 0301 	and.w	r3, r3, #1
 801198e:	2b01      	cmp	r3, #1
 8011990:	d10e      	bne.n	80119b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	f003 0301 	and.w	r3, r3, #1
 801199c:	2b01      	cmp	r3, #1
 801199e:	d107      	bne.n	80119b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f06f 0201 	mvn.w	r2, #1
 80119a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f7f2 f838 	bl	8003a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	691b      	ldr	r3, [r3, #16]
 80119b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119ba:	2b80      	cmp	r3, #128	; 0x80
 80119bc:	d10e      	bne.n	80119dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	68db      	ldr	r3, [r3, #12]
 80119c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119c8:	2b80      	cmp	r3, #128	; 0x80
 80119ca:	d107      	bne.n	80119dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80119d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f000 fe26 	bl	8012628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	691b      	ldr	r3, [r3, #16]
 80119e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119e6:	2b40      	cmp	r3, #64	; 0x40
 80119e8:	d10e      	bne.n	8011a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119f4:	2b40      	cmp	r3, #64	; 0x40
 80119f6:	d107      	bne.n	8011a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 fa1d 	bl	8011e42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	691b      	ldr	r3, [r3, #16]
 8011a0e:	f003 0320 	and.w	r3, r3, #32
 8011a12:	2b20      	cmp	r3, #32
 8011a14:	d10e      	bne.n	8011a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	68db      	ldr	r3, [r3, #12]
 8011a1c:	f003 0320 	and.w	r3, r3, #32
 8011a20:	2b20      	cmp	r3, #32
 8011a22:	d107      	bne.n	8011a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	f06f 0220 	mvn.w	r2, #32
 8011a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f000 fdf0 	bl	8012614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011a34:	bf00      	nop
 8011a36:	3708      	adds	r7, #8
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b086      	sub	sp, #24
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a52:	2b01      	cmp	r3, #1
 8011a54:	d101      	bne.n	8011a5a <HAL_TIM_OC_ConfigChannel+0x1e>
 8011a56:	2302      	movs	r3, #2
 8011a58:	e048      	b.n	8011aec <HAL_TIM_OC_ConfigChannel+0xb0>
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2b0c      	cmp	r3, #12
 8011a66:	d839      	bhi.n	8011adc <HAL_TIM_OC_ConfigChannel+0xa0>
 8011a68:	a201      	add	r2, pc, #4	; (adr r2, 8011a70 <HAL_TIM_OC_ConfigChannel+0x34>)
 8011a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a6e:	bf00      	nop
 8011a70:	08011aa5 	.word	0x08011aa5
 8011a74:	08011add 	.word	0x08011add
 8011a78:	08011add 	.word	0x08011add
 8011a7c:	08011add 	.word	0x08011add
 8011a80:	08011ab3 	.word	0x08011ab3
 8011a84:	08011add 	.word	0x08011add
 8011a88:	08011add 	.word	0x08011add
 8011a8c:	08011add 	.word	0x08011add
 8011a90:	08011ac1 	.word	0x08011ac1
 8011a94:	08011add 	.word	0x08011add
 8011a98:	08011add 	.word	0x08011add
 8011a9c:	08011add 	.word	0x08011add
 8011aa0:	08011acf 	.word	0x08011acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	68b9      	ldr	r1, [r7, #8]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f000 fa74 	bl	8011f98 <TIM_OC1_SetConfig>
      break;
 8011ab0:	e017      	b.n	8011ae2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	68b9      	ldr	r1, [r7, #8]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f000 fadd 	bl	8012078 <TIM_OC2_SetConfig>
      break;
 8011abe:	e010      	b.n	8011ae2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	68b9      	ldr	r1, [r7, #8]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f000 fb4c 	bl	8012164 <TIM_OC3_SetConfig>
      break;
 8011acc:	e009      	b.n	8011ae2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	68b9      	ldr	r1, [r7, #8]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f000 fbb9 	bl	801224c <TIM_OC4_SetConfig>
      break;
 8011ada:	e002      	b.n	8011ae2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8011adc:	2301      	movs	r3, #1
 8011ade:	75fb      	strb	r3, [r7, #23]
      break;
 8011ae0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3718      	adds	r7, #24
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b086      	sub	sp, #24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	60f8      	str	r0, [r7, #12]
 8011afc:	60b9      	str	r1, [r7, #8]
 8011afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011b00:	2300      	movs	r3, #0
 8011b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011b0a:	2b01      	cmp	r3, #1
 8011b0c:	d101      	bne.n	8011b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011b0e:	2302      	movs	r3, #2
 8011b10:	e0ae      	b.n	8011c70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	2201      	movs	r2, #1
 8011b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2b0c      	cmp	r3, #12
 8011b1e:	f200 809f 	bhi.w	8011c60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8011b22:	a201      	add	r2, pc, #4	; (adr r2, 8011b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b28:	08011b5d 	.word	0x08011b5d
 8011b2c:	08011c61 	.word	0x08011c61
 8011b30:	08011c61 	.word	0x08011c61
 8011b34:	08011c61 	.word	0x08011c61
 8011b38:	08011b9d 	.word	0x08011b9d
 8011b3c:	08011c61 	.word	0x08011c61
 8011b40:	08011c61 	.word	0x08011c61
 8011b44:	08011c61 	.word	0x08011c61
 8011b48:	08011bdf 	.word	0x08011bdf
 8011b4c:	08011c61 	.word	0x08011c61
 8011b50:	08011c61 	.word	0x08011c61
 8011b54:	08011c61 	.word	0x08011c61
 8011b58:	08011c1f 	.word	0x08011c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	68b9      	ldr	r1, [r7, #8]
 8011b62:	4618      	mov	r0, r3
 8011b64:	f000 fa18 	bl	8011f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	699a      	ldr	r2, [r3, #24]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f042 0208 	orr.w	r2, r2, #8
 8011b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	699a      	ldr	r2, [r3, #24]
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f022 0204 	bic.w	r2, r2, #4
 8011b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	6999      	ldr	r1, [r3, #24]
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	691a      	ldr	r2, [r3, #16]
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	430a      	orrs	r2, r1
 8011b98:	619a      	str	r2, [r3, #24]
      break;
 8011b9a:	e064      	b.n	8011c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	68b9      	ldr	r1, [r7, #8]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f000 fa68 	bl	8012078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	699a      	ldr	r2, [r3, #24]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	699a      	ldr	r2, [r3, #24]
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	6999      	ldr	r1, [r3, #24]
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	691b      	ldr	r3, [r3, #16]
 8011bd2:	021a      	lsls	r2, r3, #8
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	430a      	orrs	r2, r1
 8011bda:	619a      	str	r2, [r3, #24]
      break;
 8011bdc:	e043      	b.n	8011c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	68b9      	ldr	r1, [r7, #8]
 8011be4:	4618      	mov	r0, r3
 8011be6:	f000 fabd 	bl	8012164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	69da      	ldr	r2, [r3, #28]
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f042 0208 	orr.w	r2, r2, #8
 8011bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	69da      	ldr	r2, [r3, #28]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f022 0204 	bic.w	r2, r2, #4
 8011c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	69d9      	ldr	r1, [r3, #28]
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	691a      	ldr	r2, [r3, #16]
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	430a      	orrs	r2, r1
 8011c1a:	61da      	str	r2, [r3, #28]
      break;
 8011c1c:	e023      	b.n	8011c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	68b9      	ldr	r1, [r7, #8]
 8011c24:	4618      	mov	r0, r3
 8011c26:	f000 fb11 	bl	801224c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	69da      	ldr	r2, [r3, #28]
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	69da      	ldr	r2, [r3, #28]
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	69d9      	ldr	r1, [r3, #28]
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	691b      	ldr	r3, [r3, #16]
 8011c54:	021a      	lsls	r2, r3, #8
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	430a      	orrs	r2, r1
 8011c5c:	61da      	str	r2, [r3, #28]
      break;
 8011c5e:	e002      	b.n	8011c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8011c60:	2301      	movs	r3, #1
 8011c62:	75fb      	strb	r3, [r7, #23]
      break;
 8011c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3718      	adds	r7, #24
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c82:	2300      	movs	r3, #0
 8011c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d101      	bne.n	8011c94 <HAL_TIM_ConfigClockSource+0x1c>
 8011c90:	2302      	movs	r3, #2
 8011c92:	e0b4      	b.n	8011dfe <HAL_TIM_ConfigClockSource+0x186>
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2201      	movs	r2, #1
 8011c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2202      	movs	r2, #2
 8011ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	68ba      	ldr	r2, [r7, #8]
 8011cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ccc:	d03e      	beq.n	8011d4c <HAL_TIM_ConfigClockSource+0xd4>
 8011cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011cd2:	f200 8087 	bhi.w	8011de4 <HAL_TIM_ConfigClockSource+0x16c>
 8011cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011cda:	f000 8086 	beq.w	8011dea <HAL_TIM_ConfigClockSource+0x172>
 8011cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ce2:	d87f      	bhi.n	8011de4 <HAL_TIM_ConfigClockSource+0x16c>
 8011ce4:	2b70      	cmp	r3, #112	; 0x70
 8011ce6:	d01a      	beq.n	8011d1e <HAL_TIM_ConfigClockSource+0xa6>
 8011ce8:	2b70      	cmp	r3, #112	; 0x70
 8011cea:	d87b      	bhi.n	8011de4 <HAL_TIM_ConfigClockSource+0x16c>
 8011cec:	2b60      	cmp	r3, #96	; 0x60
 8011cee:	d050      	beq.n	8011d92 <HAL_TIM_ConfigClockSource+0x11a>
 8011cf0:	2b60      	cmp	r3, #96	; 0x60
 8011cf2:	d877      	bhi.n	8011de4 <HAL_TIM_ConfigClockSource+0x16c>
 8011cf4:	2b50      	cmp	r3, #80	; 0x50
 8011cf6:	d03c      	beq.n	8011d72 <HAL_TIM_ConfigClockSource+0xfa>
 8011cf8:	2b50      	cmp	r3, #80	; 0x50
 8011cfa:	d873      	bhi.n	8011de4 <HAL_TIM_ConfigClockSource+0x16c>
 8011cfc:	2b40      	cmp	r3, #64	; 0x40
 8011cfe:	d058      	beq.n	8011db2 <HAL_TIM_ConfigClockSource+0x13a>
 8011d00:	2b40      	cmp	r3, #64	; 0x40
 8011d02:	d86f      	bhi.n	8011de4 <HAL_TIM_ConfigClockSource+0x16c>
 8011d04:	2b30      	cmp	r3, #48	; 0x30
 8011d06:	d064      	beq.n	8011dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8011d08:	2b30      	cmp	r3, #48	; 0x30
 8011d0a:	d86b      	bhi.n	8011de4 <HAL_TIM_ConfigClockSource+0x16c>
 8011d0c:	2b20      	cmp	r3, #32
 8011d0e:	d060      	beq.n	8011dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8011d10:	2b20      	cmp	r3, #32
 8011d12:	d867      	bhi.n	8011de4 <HAL_TIM_ConfigClockSource+0x16c>
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d05c      	beq.n	8011dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8011d18:	2b10      	cmp	r3, #16
 8011d1a:	d05a      	beq.n	8011dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8011d1c:	e062      	b.n	8011de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6818      	ldr	r0, [r3, #0]
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	6899      	ldr	r1, [r3, #8]
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	685a      	ldr	r2, [r3, #4]
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	f000 fb5d 	bl	80123ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	689b      	ldr	r3, [r3, #8]
 8011d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	68ba      	ldr	r2, [r7, #8]
 8011d48:	609a      	str	r2, [r3, #8]
      break;
 8011d4a:	e04f      	b.n	8011dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6818      	ldr	r0, [r3, #0]
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	6899      	ldr	r1, [r3, #8]
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	685a      	ldr	r2, [r3, #4]
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	f000 fb46 	bl	80123ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	689a      	ldr	r2, [r3, #8]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011d6e:	609a      	str	r2, [r3, #8]
      break;
 8011d70:	e03c      	b.n	8011dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6818      	ldr	r0, [r3, #0]
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	6859      	ldr	r1, [r3, #4]
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	461a      	mov	r2, r3
 8011d80:	f000 faba 	bl	80122f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	2150      	movs	r1, #80	; 0x50
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f000 fb13 	bl	80123b6 <TIM_ITRx_SetConfig>
      break;
 8011d90:	e02c      	b.n	8011dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6818      	ldr	r0, [r3, #0]
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	6859      	ldr	r1, [r3, #4]
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	461a      	mov	r2, r3
 8011da0:	f000 fad9 	bl	8012356 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	2160      	movs	r1, #96	; 0x60
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 fb03 	bl	80123b6 <TIM_ITRx_SetConfig>
      break;
 8011db0:	e01c      	b.n	8011dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6818      	ldr	r0, [r3, #0]
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	6859      	ldr	r1, [r3, #4]
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	68db      	ldr	r3, [r3, #12]
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	f000 fa9a 	bl	80122f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	2140      	movs	r1, #64	; 0x40
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f000 faf3 	bl	80123b6 <TIM_ITRx_SetConfig>
      break;
 8011dd0:	e00c      	b.n	8011dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681a      	ldr	r2, [r3, #0]
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	4619      	mov	r1, r3
 8011ddc:	4610      	mov	r0, r2
 8011dde:	f000 faea 	bl	80123b6 <TIM_ITRx_SetConfig>
      break;
 8011de2:	e003      	b.n	8011dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8011de4:	2301      	movs	r3, #1
 8011de6:	73fb      	strb	r3, [r7, #15]
      break;
 8011de8:	e000      	b.n	8011dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8011dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2201      	movs	r2, #1
 8011df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2200      	movs	r2, #0
 8011df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3710      	adds	r7, #16
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011e06:	b480      	push	{r7}
 8011e08:	b083      	sub	sp, #12
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011e0e:	bf00      	nop
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr

08011e1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011e1a:	b480      	push	{r7}
 8011e1c:	b083      	sub	sp, #12
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011e22:	bf00      	nop
 8011e24:	370c      	adds	r7, #12
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr

08011e2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011e2e:	b480      	push	{r7}
 8011e30:	b083      	sub	sp, #12
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011e36:	bf00      	nop
 8011e38:	370c      	adds	r7, #12
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e40:	4770      	bx	lr

08011e42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011e42:	b480      	push	{r7}
 8011e44:	b083      	sub	sp, #12
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011e4a:	bf00      	nop
 8011e4c:	370c      	adds	r7, #12
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr
	...

08011e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b085      	sub	sp, #20
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	4a40      	ldr	r2, [pc, #256]	; (8011f6c <TIM_Base_SetConfig+0x114>)
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d013      	beq.n	8011e98 <TIM_Base_SetConfig+0x40>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e76:	d00f      	beq.n	8011e98 <TIM_Base_SetConfig+0x40>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	4a3d      	ldr	r2, [pc, #244]	; (8011f70 <TIM_Base_SetConfig+0x118>)
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	d00b      	beq.n	8011e98 <TIM_Base_SetConfig+0x40>
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	4a3c      	ldr	r2, [pc, #240]	; (8011f74 <TIM_Base_SetConfig+0x11c>)
 8011e84:	4293      	cmp	r3, r2
 8011e86:	d007      	beq.n	8011e98 <TIM_Base_SetConfig+0x40>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	4a3b      	ldr	r2, [pc, #236]	; (8011f78 <TIM_Base_SetConfig+0x120>)
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	d003      	beq.n	8011e98 <TIM_Base_SetConfig+0x40>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	4a3a      	ldr	r2, [pc, #232]	; (8011f7c <TIM_Base_SetConfig+0x124>)
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d108      	bne.n	8011eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	4313      	orrs	r3, r2
 8011ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	4a2f      	ldr	r2, [pc, #188]	; (8011f6c <TIM_Base_SetConfig+0x114>)
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	d02b      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011eb8:	d027      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	4a2c      	ldr	r2, [pc, #176]	; (8011f70 <TIM_Base_SetConfig+0x118>)
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	d023      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4a2b      	ldr	r2, [pc, #172]	; (8011f74 <TIM_Base_SetConfig+0x11c>)
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d01f      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	4a2a      	ldr	r2, [pc, #168]	; (8011f78 <TIM_Base_SetConfig+0x120>)
 8011ece:	4293      	cmp	r3, r2
 8011ed0:	d01b      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	4a29      	ldr	r2, [pc, #164]	; (8011f7c <TIM_Base_SetConfig+0x124>)
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	d017      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	4a28      	ldr	r2, [pc, #160]	; (8011f80 <TIM_Base_SetConfig+0x128>)
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	d013      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	4a27      	ldr	r2, [pc, #156]	; (8011f84 <TIM_Base_SetConfig+0x12c>)
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d00f      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	4a26      	ldr	r2, [pc, #152]	; (8011f88 <TIM_Base_SetConfig+0x130>)
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d00b      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	4a25      	ldr	r2, [pc, #148]	; (8011f8c <TIM_Base_SetConfig+0x134>)
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	d007      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	4a24      	ldr	r2, [pc, #144]	; (8011f90 <TIM_Base_SetConfig+0x138>)
 8011efe:	4293      	cmp	r3, r2
 8011f00:	d003      	beq.n	8011f0a <TIM_Base_SetConfig+0xb2>
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	4a23      	ldr	r2, [pc, #140]	; (8011f94 <TIM_Base_SetConfig+0x13c>)
 8011f06:	4293      	cmp	r3, r2
 8011f08:	d108      	bne.n	8011f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	68fa      	ldr	r2, [r7, #12]
 8011f18:	4313      	orrs	r3, r2
 8011f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	695b      	ldr	r3, [r3, #20]
 8011f26:	4313      	orrs	r3, r2
 8011f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	68fa      	ldr	r2, [r7, #12]
 8011f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	689a      	ldr	r2, [r3, #8]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	4a0a      	ldr	r2, [pc, #40]	; (8011f6c <TIM_Base_SetConfig+0x114>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d003      	beq.n	8011f50 <TIM_Base_SetConfig+0xf8>
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	4a0c      	ldr	r2, [pc, #48]	; (8011f7c <TIM_Base_SetConfig+0x124>)
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	d103      	bne.n	8011f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	691a      	ldr	r2, [r3, #16]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	615a      	str	r2, [r3, #20]
}
 8011f5e:	bf00      	nop
 8011f60:	3714      	adds	r7, #20
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	40010000 	.word	0x40010000
 8011f70:	40000400 	.word	0x40000400
 8011f74:	40000800 	.word	0x40000800
 8011f78:	40000c00 	.word	0x40000c00
 8011f7c:	40010400 	.word	0x40010400
 8011f80:	40014000 	.word	0x40014000
 8011f84:	40014400 	.word	0x40014400
 8011f88:	40014800 	.word	0x40014800
 8011f8c:	40001800 	.word	0x40001800
 8011f90:	40001c00 	.word	0x40001c00
 8011f94:	40002000 	.word	0x40002000

08011f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b087      	sub	sp, #28
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6a1b      	ldr	r3, [r3, #32]
 8011fa6:	f023 0201 	bic.w	r2, r3, #1
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6a1b      	ldr	r3, [r3, #32]
 8011fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	699b      	ldr	r3, [r3, #24]
 8011fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	f023 0303 	bic.w	r3, r3, #3
 8011fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	68fa      	ldr	r2, [r7, #12]
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	f023 0302 	bic.w	r3, r3, #2
 8011fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	697a      	ldr	r2, [r7, #20]
 8011fe8:	4313      	orrs	r3, r2
 8011fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	4a20      	ldr	r2, [pc, #128]	; (8012070 <TIM_OC1_SetConfig+0xd8>)
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d003      	beq.n	8011ffc <TIM_OC1_SetConfig+0x64>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	4a1f      	ldr	r2, [pc, #124]	; (8012074 <TIM_OC1_SetConfig+0xdc>)
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d10c      	bne.n	8012016 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	f023 0308 	bic.w	r3, r3, #8
 8012002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	697a      	ldr	r2, [r7, #20]
 801200a:	4313      	orrs	r3, r2
 801200c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	f023 0304 	bic.w	r3, r3, #4
 8012014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	4a15      	ldr	r2, [pc, #84]	; (8012070 <TIM_OC1_SetConfig+0xd8>)
 801201a:	4293      	cmp	r3, r2
 801201c:	d003      	beq.n	8012026 <TIM_OC1_SetConfig+0x8e>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4a14      	ldr	r2, [pc, #80]	; (8012074 <TIM_OC1_SetConfig+0xdc>)
 8012022:	4293      	cmp	r3, r2
 8012024:	d111      	bne.n	801204a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801202c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	695b      	ldr	r3, [r3, #20]
 801203a:	693a      	ldr	r2, [r7, #16]
 801203c:	4313      	orrs	r3, r2
 801203e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	693a      	ldr	r2, [r7, #16]
 8012046:	4313      	orrs	r3, r2
 8012048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	693a      	ldr	r2, [r7, #16]
 801204e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	68fa      	ldr	r2, [r7, #12]
 8012054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	685a      	ldr	r2, [r3, #4]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	697a      	ldr	r2, [r7, #20]
 8012062:	621a      	str	r2, [r3, #32]
}
 8012064:	bf00      	nop
 8012066:	371c      	adds	r7, #28
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr
 8012070:	40010000 	.word	0x40010000
 8012074:	40010400 	.word	0x40010400

08012078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012078:	b480      	push	{r7}
 801207a:	b087      	sub	sp, #28
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6a1b      	ldr	r3, [r3, #32]
 8012086:	f023 0210 	bic.w	r2, r3, #16
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6a1b      	ldr	r3, [r3, #32]
 8012092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	699b      	ldr	r3, [r3, #24]
 801209e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80120a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80120ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	021b      	lsls	r3, r3, #8
 80120b6:	68fa      	ldr	r2, [r7, #12]
 80120b8:	4313      	orrs	r3, r2
 80120ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	f023 0320 	bic.w	r3, r3, #32
 80120c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	689b      	ldr	r3, [r3, #8]
 80120c8:	011b      	lsls	r3, r3, #4
 80120ca:	697a      	ldr	r2, [r7, #20]
 80120cc:	4313      	orrs	r3, r2
 80120ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	4a22      	ldr	r2, [pc, #136]	; (801215c <TIM_OC2_SetConfig+0xe4>)
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d003      	beq.n	80120e0 <TIM_OC2_SetConfig+0x68>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	4a21      	ldr	r2, [pc, #132]	; (8012160 <TIM_OC2_SetConfig+0xe8>)
 80120dc:	4293      	cmp	r3, r2
 80120de:	d10d      	bne.n	80120fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80120e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	011b      	lsls	r3, r3, #4
 80120ee:	697a      	ldr	r2, [r7, #20]
 80120f0:	4313      	orrs	r3, r2
 80120f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80120fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	4a17      	ldr	r2, [pc, #92]	; (801215c <TIM_OC2_SetConfig+0xe4>)
 8012100:	4293      	cmp	r3, r2
 8012102:	d003      	beq.n	801210c <TIM_OC2_SetConfig+0x94>
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	4a16      	ldr	r2, [pc, #88]	; (8012160 <TIM_OC2_SetConfig+0xe8>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d113      	bne.n	8012134 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801211a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	695b      	ldr	r3, [r3, #20]
 8012120:	009b      	lsls	r3, r3, #2
 8012122:	693a      	ldr	r2, [r7, #16]
 8012124:	4313      	orrs	r3, r2
 8012126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	699b      	ldr	r3, [r3, #24]
 801212c:	009b      	lsls	r3, r3, #2
 801212e:	693a      	ldr	r2, [r7, #16]
 8012130:	4313      	orrs	r3, r2
 8012132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	693a      	ldr	r2, [r7, #16]
 8012138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	68fa      	ldr	r2, [r7, #12]
 801213e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	685a      	ldr	r2, [r3, #4]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	697a      	ldr	r2, [r7, #20]
 801214c:	621a      	str	r2, [r3, #32]
}
 801214e:	bf00      	nop
 8012150:	371c      	adds	r7, #28
 8012152:	46bd      	mov	sp, r7
 8012154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012158:	4770      	bx	lr
 801215a:	bf00      	nop
 801215c:	40010000 	.word	0x40010000
 8012160:	40010400 	.word	0x40010400

08012164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012164:	b480      	push	{r7}
 8012166:	b087      	sub	sp, #28
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6a1b      	ldr	r3, [r3, #32]
 8012172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6a1b      	ldr	r3, [r3, #32]
 801217e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	69db      	ldr	r3, [r3, #28]
 801218a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	f023 0303 	bic.w	r3, r3, #3
 801219a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	68fa      	ldr	r2, [r7, #12]
 80121a2:	4313      	orrs	r3, r2
 80121a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80121ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	689b      	ldr	r3, [r3, #8]
 80121b2:	021b      	lsls	r3, r3, #8
 80121b4:	697a      	ldr	r2, [r7, #20]
 80121b6:	4313      	orrs	r3, r2
 80121b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	4a21      	ldr	r2, [pc, #132]	; (8012244 <TIM_OC3_SetConfig+0xe0>)
 80121be:	4293      	cmp	r3, r2
 80121c0:	d003      	beq.n	80121ca <TIM_OC3_SetConfig+0x66>
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	4a20      	ldr	r2, [pc, #128]	; (8012248 <TIM_OC3_SetConfig+0xe4>)
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d10d      	bne.n	80121e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80121d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	021b      	lsls	r3, r3, #8
 80121d8:	697a      	ldr	r2, [r7, #20]
 80121da:	4313      	orrs	r3, r2
 80121dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80121e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	4a16      	ldr	r2, [pc, #88]	; (8012244 <TIM_OC3_SetConfig+0xe0>)
 80121ea:	4293      	cmp	r3, r2
 80121ec:	d003      	beq.n	80121f6 <TIM_OC3_SetConfig+0x92>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	4a15      	ldr	r2, [pc, #84]	; (8012248 <TIM_OC3_SetConfig+0xe4>)
 80121f2:	4293      	cmp	r3, r2
 80121f4:	d113      	bne.n	801221e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80121f6:	693b      	ldr	r3, [r7, #16]
 80121f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	695b      	ldr	r3, [r3, #20]
 801220a:	011b      	lsls	r3, r3, #4
 801220c:	693a      	ldr	r2, [r7, #16]
 801220e:	4313      	orrs	r3, r2
 8012210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	699b      	ldr	r3, [r3, #24]
 8012216:	011b      	lsls	r3, r3, #4
 8012218:	693a      	ldr	r2, [r7, #16]
 801221a:	4313      	orrs	r3, r2
 801221c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	693a      	ldr	r2, [r7, #16]
 8012222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	68fa      	ldr	r2, [r7, #12]
 8012228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	685a      	ldr	r2, [r3, #4]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	697a      	ldr	r2, [r7, #20]
 8012236:	621a      	str	r2, [r3, #32]
}
 8012238:	bf00      	nop
 801223a:	371c      	adds	r7, #28
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr
 8012244:	40010000 	.word	0x40010000
 8012248:	40010400 	.word	0x40010400

0801224c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801224c:	b480      	push	{r7}
 801224e:	b087      	sub	sp, #28
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6a1b      	ldr	r3, [r3, #32]
 801225a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6a1b      	ldr	r3, [r3, #32]
 8012266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	69db      	ldr	r3, [r3, #28]
 8012272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801227a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	021b      	lsls	r3, r3, #8
 801228a:	68fa      	ldr	r2, [r7, #12]
 801228c:	4313      	orrs	r3, r2
 801228e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	689b      	ldr	r3, [r3, #8]
 801229c:	031b      	lsls	r3, r3, #12
 801229e:	693a      	ldr	r2, [r7, #16]
 80122a0:	4313      	orrs	r3, r2
 80122a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	4a12      	ldr	r2, [pc, #72]	; (80122f0 <TIM_OC4_SetConfig+0xa4>)
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d003      	beq.n	80122b4 <TIM_OC4_SetConfig+0x68>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	4a11      	ldr	r2, [pc, #68]	; (80122f4 <TIM_OC4_SetConfig+0xa8>)
 80122b0:	4293      	cmp	r3, r2
 80122b2:	d109      	bne.n	80122c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80122ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	695b      	ldr	r3, [r3, #20]
 80122c0:	019b      	lsls	r3, r3, #6
 80122c2:	697a      	ldr	r2, [r7, #20]
 80122c4:	4313      	orrs	r3, r2
 80122c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	697a      	ldr	r2, [r7, #20]
 80122cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	68fa      	ldr	r2, [r7, #12]
 80122d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	685a      	ldr	r2, [r3, #4]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	693a      	ldr	r2, [r7, #16]
 80122e0:	621a      	str	r2, [r3, #32]
}
 80122e2:	bf00      	nop
 80122e4:	371c      	adds	r7, #28
 80122e6:	46bd      	mov	sp, r7
 80122e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ec:	4770      	bx	lr
 80122ee:	bf00      	nop
 80122f0:	40010000 	.word	0x40010000
 80122f4:	40010400 	.word	0x40010400

080122f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b087      	sub	sp, #28
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	6a1b      	ldr	r3, [r3, #32]
 8012308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	6a1b      	ldr	r3, [r3, #32]
 801230e:	f023 0201 	bic.w	r2, r3, #1
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	699b      	ldr	r3, [r3, #24]
 801231a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	011b      	lsls	r3, r3, #4
 8012328:	693a      	ldr	r2, [r7, #16]
 801232a:	4313      	orrs	r3, r2
 801232c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	f023 030a 	bic.w	r3, r3, #10
 8012334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012336:	697a      	ldr	r2, [r7, #20]
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	4313      	orrs	r3, r2
 801233c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	693a      	ldr	r2, [r7, #16]
 8012342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	697a      	ldr	r2, [r7, #20]
 8012348:	621a      	str	r2, [r3, #32]
}
 801234a:	bf00      	nop
 801234c:	371c      	adds	r7, #28
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr

08012356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012356:	b480      	push	{r7}
 8012358:	b087      	sub	sp, #28
 801235a:	af00      	add	r7, sp, #0
 801235c:	60f8      	str	r0, [r7, #12]
 801235e:	60b9      	str	r1, [r7, #8]
 8012360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	6a1b      	ldr	r3, [r3, #32]
 8012366:	f023 0210 	bic.w	r2, r3, #16
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	699b      	ldr	r3, [r3, #24]
 8012372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	6a1b      	ldr	r3, [r3, #32]
 8012378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	031b      	lsls	r3, r3, #12
 8012386:	697a      	ldr	r2, [r7, #20]
 8012388:	4313      	orrs	r3, r2
 801238a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	011b      	lsls	r3, r3, #4
 8012398:	693a      	ldr	r2, [r7, #16]
 801239a:	4313      	orrs	r3, r2
 801239c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	697a      	ldr	r2, [r7, #20]
 80123a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	693a      	ldr	r2, [r7, #16]
 80123a8:	621a      	str	r2, [r3, #32]
}
 80123aa:	bf00      	nop
 80123ac:	371c      	adds	r7, #28
 80123ae:	46bd      	mov	sp, r7
 80123b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b4:	4770      	bx	lr

080123b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80123b6:	b480      	push	{r7}
 80123b8:	b085      	sub	sp, #20
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	6078      	str	r0, [r7, #4]
 80123be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	689b      	ldr	r3, [r3, #8]
 80123c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80123ce:	683a      	ldr	r2, [r7, #0]
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	4313      	orrs	r3, r2
 80123d4:	f043 0307 	orr.w	r3, r3, #7
 80123d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	68fa      	ldr	r2, [r7, #12]
 80123de:	609a      	str	r2, [r3, #8]
}
 80123e0:	bf00      	nop
 80123e2:	3714      	adds	r7, #20
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b087      	sub	sp, #28
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
 80123f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	689b      	ldr	r3, [r3, #8]
 80123fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	021a      	lsls	r2, r3, #8
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	431a      	orrs	r2, r3
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	4313      	orrs	r3, r2
 8012414:	697a      	ldr	r2, [r7, #20]
 8012416:	4313      	orrs	r3, r2
 8012418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	697a      	ldr	r2, [r7, #20]
 801241e:	609a      	str	r2, [r3, #8]
}
 8012420:	bf00      	nop
 8012422:	371c      	adds	r7, #28
 8012424:	46bd      	mov	sp, r7
 8012426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242a:	4770      	bx	lr

0801242c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801242c:	b480      	push	{r7}
 801242e:	b087      	sub	sp, #28
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	f003 031f 	and.w	r3, r3, #31
 801243e:	2201      	movs	r2, #1
 8012440:	fa02 f303 	lsl.w	r3, r2, r3
 8012444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	6a1a      	ldr	r2, [r3, #32]
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	43db      	mvns	r3, r3
 801244e:	401a      	ands	r2, r3
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6a1a      	ldr	r2, [r3, #32]
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	f003 031f 	and.w	r3, r3, #31
 801245e:	6879      	ldr	r1, [r7, #4]
 8012460:	fa01 f303 	lsl.w	r3, r1, r3
 8012464:	431a      	orrs	r2, r3
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	621a      	str	r2, [r3, #32]
}
 801246a:	bf00      	nop
 801246c:	371c      	adds	r7, #28
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr
	...

08012478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012478:	b480      	push	{r7}
 801247a:	b085      	sub	sp, #20
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012488:	2b01      	cmp	r3, #1
 801248a:	d101      	bne.n	8012490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801248c:	2302      	movs	r3, #2
 801248e:	e05a      	b.n	8012546 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2201      	movs	r2, #1
 8012494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2202      	movs	r2, #2
 801249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	689b      	ldr	r3, [r3, #8]
 80124ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80124b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	68fa      	ldr	r2, [r7, #12]
 80124be:	4313      	orrs	r3, r2
 80124c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	68fa      	ldr	r2, [r7, #12]
 80124c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	4a21      	ldr	r2, [pc, #132]	; (8012554 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80124d0:	4293      	cmp	r3, r2
 80124d2:	d022      	beq.n	801251a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124dc:	d01d      	beq.n	801251a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	4a1d      	ldr	r2, [pc, #116]	; (8012558 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80124e4:	4293      	cmp	r3, r2
 80124e6:	d018      	beq.n	801251a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	4a1b      	ldr	r2, [pc, #108]	; (801255c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80124ee:	4293      	cmp	r3, r2
 80124f0:	d013      	beq.n	801251a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4a1a      	ldr	r2, [pc, #104]	; (8012560 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d00e      	beq.n	801251a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	4a18      	ldr	r2, [pc, #96]	; (8012564 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012502:	4293      	cmp	r3, r2
 8012504:	d009      	beq.n	801251a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	4a17      	ldr	r2, [pc, #92]	; (8012568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d004      	beq.n	801251a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a15      	ldr	r2, [pc, #84]	; (801256c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012516:	4293      	cmp	r3, r2
 8012518:	d10c      	bne.n	8012534 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	68ba      	ldr	r2, [r7, #8]
 8012528:	4313      	orrs	r3, r2
 801252a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	68ba      	ldr	r2, [r7, #8]
 8012532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2201      	movs	r2, #1
 8012538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2200      	movs	r2, #0
 8012540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012544:	2300      	movs	r3, #0
}
 8012546:	4618      	mov	r0, r3
 8012548:	3714      	adds	r7, #20
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	40010000 	.word	0x40010000
 8012558:	40000400 	.word	0x40000400
 801255c:	40000800 	.word	0x40000800
 8012560:	40000c00 	.word	0x40000c00
 8012564:	40010400 	.word	0x40010400
 8012568:	40014000 	.word	0x40014000
 801256c:	40001800 	.word	0x40001800

08012570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012570:	b480      	push	{r7}
 8012572:	b085      	sub	sp, #20
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801257a:	2300      	movs	r3, #0
 801257c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012584:	2b01      	cmp	r3, #1
 8012586:	d101      	bne.n	801258c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012588:	2302      	movs	r3, #2
 801258a:	e03d      	b.n	8012608 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2201      	movs	r2, #1
 8012590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	4313      	orrs	r3, r2
 80125a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	689b      	ldr	r3, [r3, #8]
 80125ac:	4313      	orrs	r3, r2
 80125ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	4313      	orrs	r3, r2
 80125bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	4313      	orrs	r3, r2
 80125ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	691b      	ldr	r3, [r3, #16]
 80125d6:	4313      	orrs	r3, r2
 80125d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	695b      	ldr	r3, [r3, #20]
 80125e4:	4313      	orrs	r3, r2
 80125e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	69db      	ldr	r3, [r3, #28]
 80125f2:	4313      	orrs	r3, r2
 80125f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	68fa      	ldr	r2, [r7, #12]
 80125fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2200      	movs	r2, #0
 8012602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012606:	2300      	movs	r3, #0
}
 8012608:	4618      	mov	r0, r3
 801260a:	3714      	adds	r7, #20
 801260c:	46bd      	mov	sp, r7
 801260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012612:	4770      	bx	lr

08012614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012614:	b480      	push	{r7}
 8012616:	b083      	sub	sp, #12
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801261c:	bf00      	nop
 801261e:	370c      	adds	r7, #12
 8012620:	46bd      	mov	sp, r7
 8012622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012626:	4770      	bx	lr

08012628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012628:	b480      	push	{r7}
 801262a:	b083      	sub	sp, #12
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012630:	bf00      	nop
 8012632:	370c      	adds	r7, #12
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr

0801263c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d101      	bne.n	801264e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801264a:	2301      	movs	r3, #1
 801264c:	e03f      	b.n	80126ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012654:	b2db      	uxtb	r3, r3
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2200      	movs	r2, #0
 801265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f7f2 f8ac 	bl	80047c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2224      	movs	r2, #36	; 0x24
 801266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	68da      	ldr	r2, [r3, #12]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801267e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f000 fe95 	bl	80133b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	691a      	ldr	r2, [r3, #16]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	695a      	ldr	r2, [r3, #20]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80126a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	68da      	ldr	r2, [r3, #12]
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80126b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2200      	movs	r2, #0
 80126ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2220      	movs	r2, #32
 80126c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2220      	movs	r2, #32
 80126c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80126cc:	2300      	movs	r3, #0
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3708      	adds	r7, #8
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}

080126d6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80126d6:	b480      	push	{r7}
 80126d8:	b085      	sub	sp, #20
 80126da:	af00      	add	r7, sp, #0
 80126dc:	60f8      	str	r0, [r7, #12]
 80126de:	60b9      	str	r1, [r7, #8]
 80126e0:	4613      	mov	r3, r2
 80126e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	2b20      	cmp	r3, #32
 80126ee:	d130      	bne.n	8012752 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d002      	beq.n	80126fc <HAL_UART_Transmit_IT+0x26>
 80126f6:	88fb      	ldrh	r3, [r7, #6]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d101      	bne.n	8012700 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80126fc:	2301      	movs	r3, #1
 80126fe:	e029      	b.n	8012754 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012706:	2b01      	cmp	r3, #1
 8012708:	d101      	bne.n	801270e <HAL_UART_Transmit_IT+0x38>
 801270a:	2302      	movs	r3, #2
 801270c:	e022      	b.n	8012754 <HAL_UART_Transmit_IT+0x7e>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	2201      	movs	r2, #1
 8012712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	68ba      	ldr	r2, [r7, #8]
 801271a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	88fa      	ldrh	r2, [r7, #6]
 8012720:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	88fa      	ldrh	r2, [r7, #6]
 8012726:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	2200      	movs	r2, #0
 801272c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2221      	movs	r2, #33	; 0x21
 8012732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	2200      	movs	r2, #0
 801273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	68da      	ldr	r2, [r3, #12]
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801274c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801274e:	2300      	movs	r3, #0
 8012750:	e000      	b.n	8012754 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8012752:	2302      	movs	r3, #2
  }
}
 8012754:	4618      	mov	r0, r3
 8012756:	3714      	adds	r7, #20
 8012758:	46bd      	mov	sp, r7
 801275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275e:	4770      	bx	lr

08012760 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b08c      	sub	sp, #48	; 0x30
 8012764:	af00      	add	r7, sp, #0
 8012766:	60f8      	str	r0, [r7, #12]
 8012768:	60b9      	str	r1, [r7, #8]
 801276a:	4613      	mov	r3, r2
 801276c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012774:	b2db      	uxtb	r3, r3
 8012776:	2b20      	cmp	r3, #32
 8012778:	d165      	bne.n	8012846 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d002      	beq.n	8012786 <HAL_UART_Transmit_DMA+0x26>
 8012780:	88fb      	ldrh	r3, [r7, #6]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d101      	bne.n	801278a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8012786:	2301      	movs	r3, #1
 8012788:	e05e      	b.n	8012848 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012790:	2b01      	cmp	r3, #1
 8012792:	d101      	bne.n	8012798 <HAL_UART_Transmit_DMA+0x38>
 8012794:	2302      	movs	r3, #2
 8012796:	e057      	b.n	8012848 <HAL_UART_Transmit_DMA+0xe8>
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	2201      	movs	r2, #1
 801279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80127a0:	68ba      	ldr	r2, [r7, #8]
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	88fa      	ldrh	r2, [r7, #6]
 80127aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	88fa      	ldrh	r2, [r7, #6]
 80127b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2200      	movs	r2, #0
 80127b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	2221      	movs	r2, #33	; 0x21
 80127bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127c4:	4a22      	ldr	r2, [pc, #136]	; (8012850 <HAL_UART_Transmit_DMA+0xf0>)
 80127c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127cc:	4a21      	ldr	r2, [pc, #132]	; (8012854 <HAL_UART_Transmit_DMA+0xf4>)
 80127ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d4:	4a20      	ldr	r2, [pc, #128]	; (8012858 <HAL_UART_Transmit_DMA+0xf8>)
 80127d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127dc:	2200      	movs	r2, #0
 80127de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80127e0:	f107 0308 	add.w	r3, r7, #8
 80127e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80127ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ec:	6819      	ldr	r1, [r3, #0]
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	3304      	adds	r3, #4
 80127f4:	461a      	mov	r2, r3
 80127f6:	88fb      	ldrh	r3, [r7, #6]
 80127f8:	f7f9 ff22 	bl	800c640 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012804:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	2200      	movs	r2, #0
 801280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	3314      	adds	r3, #20
 8012814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012816:	69bb      	ldr	r3, [r7, #24]
 8012818:	e853 3f00 	ldrex	r3, [r3]
 801281c:	617b      	str	r3, [r7, #20]
   return(result);
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012824:	62bb      	str	r3, [r7, #40]	; 0x28
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	3314      	adds	r3, #20
 801282c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801282e:	627a      	str	r2, [r7, #36]	; 0x24
 8012830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012832:	6a39      	ldr	r1, [r7, #32]
 8012834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012836:	e841 2300 	strex	r3, r2, [r1]
 801283a:	61fb      	str	r3, [r7, #28]
   return(result);
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d1e5      	bne.n	801280e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8012842:	2300      	movs	r3, #0
 8012844:	e000      	b.n	8012848 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8012846:	2302      	movs	r3, #2
  }
}
 8012848:	4618      	mov	r0, r3
 801284a:	3730      	adds	r7, #48	; 0x30
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	08012ee1 	.word	0x08012ee1
 8012854:	08012f7b 	.word	0x08012f7b
 8012858:	08012f97 	.word	0x08012f97

0801285c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b090      	sub	sp, #64	; 0x40
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8012864:	2300      	movs	r3, #0
 8012866:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	695b      	ldr	r3, [r3, #20]
 801286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012872:	2b80      	cmp	r3, #128	; 0x80
 8012874:	bf0c      	ite	eq
 8012876:	2301      	moveq	r3, #1
 8012878:	2300      	movne	r3, #0
 801287a:	b2db      	uxtb	r3, r3
 801287c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012884:	b2db      	uxtb	r3, r3
 8012886:	2b21      	cmp	r3, #33	; 0x21
 8012888:	d128      	bne.n	80128dc <HAL_UART_DMAStop+0x80>
 801288a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801288c:	2b00      	cmp	r3, #0
 801288e:	d025      	beq.n	80128dc <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	3314      	adds	r3, #20
 8012896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289a:	e853 3f00 	ldrex	r3, [r3]
 801289e:	623b      	str	r3, [r7, #32]
   return(result);
 80128a0:	6a3b      	ldr	r3, [r7, #32]
 80128a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	3314      	adds	r3, #20
 80128ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128b0:	633a      	str	r2, [r7, #48]	; 0x30
 80128b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128b8:	e841 2300 	strex	r3, r2, [r1]
 80128bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80128be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d1e5      	bne.n	8012890 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d004      	beq.n	80128d6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7f9 ff0d 	bl	800c6f0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f000 fba7 	bl	801302a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	695b      	ldr	r3, [r3, #20]
 80128e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128e6:	2b40      	cmp	r3, #64	; 0x40
 80128e8:	bf0c      	ite	eq
 80128ea:	2301      	moveq	r3, #1
 80128ec:	2300      	movne	r3, #0
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	2b22      	cmp	r3, #34	; 0x22
 80128fc:	d128      	bne.n	8012950 <HAL_UART_DMAStop+0xf4>
 80128fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012900:	2b00      	cmp	r3, #0
 8012902:	d025      	beq.n	8012950 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	3314      	adds	r3, #20
 801290a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	e853 3f00 	ldrex	r3, [r3]
 8012912:	60fb      	str	r3, [r7, #12]
   return(result);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801291a:	637b      	str	r3, [r7, #52]	; 0x34
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	3314      	adds	r3, #20
 8012922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012924:	61fa      	str	r2, [r7, #28]
 8012926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012928:	69b9      	ldr	r1, [r7, #24]
 801292a:	69fa      	ldr	r2, [r7, #28]
 801292c:	e841 2300 	strex	r3, r2, [r1]
 8012930:	617b      	str	r3, [r7, #20]
   return(result);
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d1e5      	bne.n	8012904 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801293c:	2b00      	cmp	r3, #0
 801293e:	d004      	beq.n	801294a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012944:	4618      	mov	r0, r3
 8012946:	f7f9 fed3 	bl	800c6f0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 fb95 	bl	801307a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8012950:	2300      	movs	r3, #0
}
 8012952:	4618      	mov	r0, r3
 8012954:	3740      	adds	r7, #64	; 0x40
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
	...

0801295c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b0ba      	sub	sp, #232	; 0xe8
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	695b      	ldr	r3, [r3, #20]
 801297e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8012982:	2300      	movs	r3, #0
 8012984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8012988:	2300      	movs	r3, #0
 801298a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012992:	f003 030f 	and.w	r3, r3, #15
 8012996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801299a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d10f      	bne.n	80129c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80129a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129a6:	f003 0320 	and.w	r3, r3, #32
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d009      	beq.n	80129c2 <HAL_UART_IRQHandler+0x66>
 80129ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80129b2:	f003 0320 	and.w	r3, r3, #32
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d003      	beq.n	80129c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 fc3c 	bl	8013238 <UART_Receive_IT>
      return;
 80129c0:	e256      	b.n	8012e70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80129c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	f000 80de 	beq.w	8012b88 <HAL_UART_IRQHandler+0x22c>
 80129cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80129d0:	f003 0301 	and.w	r3, r3, #1
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d106      	bne.n	80129e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80129d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80129dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	f000 80d1 	beq.w	8012b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80129e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129ea:	f003 0301 	and.w	r3, r3, #1
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d00b      	beq.n	8012a0a <HAL_UART_IRQHandler+0xae>
 80129f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80129f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d005      	beq.n	8012a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a02:	f043 0201 	orr.w	r2, r3, #1
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a0e:	f003 0304 	and.w	r3, r3, #4
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00b      	beq.n	8012a2e <HAL_UART_IRQHandler+0xd2>
 8012a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012a1a:	f003 0301 	and.w	r3, r3, #1
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d005      	beq.n	8012a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a26:	f043 0202 	orr.w	r2, r3, #2
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a32:	f003 0302 	and.w	r3, r3, #2
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d00b      	beq.n	8012a52 <HAL_UART_IRQHandler+0xf6>
 8012a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012a3e:	f003 0301 	and.w	r3, r3, #1
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d005      	beq.n	8012a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a4a:	f043 0204 	orr.w	r2, r3, #4
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8012a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a56:	f003 0308 	and.w	r3, r3, #8
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d011      	beq.n	8012a82 <HAL_UART_IRQHandler+0x126>
 8012a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a62:	f003 0320 	and.w	r3, r3, #32
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d105      	bne.n	8012a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8012a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012a6e:	f003 0301 	and.w	r3, r3, #1
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d005      	beq.n	8012a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7a:	f043 0208 	orr.w	r2, r3, #8
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	f000 81ed 	beq.w	8012e66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a90:	f003 0320 	and.w	r3, r3, #32
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d008      	beq.n	8012aaa <HAL_UART_IRQHandler+0x14e>
 8012a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a9c:	f003 0320 	and.w	r3, r3, #32
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d002      	beq.n	8012aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f000 fbc7 	bl	8013238 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	695b      	ldr	r3, [r3, #20]
 8012ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ab4:	2b40      	cmp	r3, #64	; 0x40
 8012ab6:	bf0c      	ite	eq
 8012ab8:	2301      	moveq	r3, #1
 8012aba:	2300      	movne	r3, #0
 8012abc:	b2db      	uxtb	r3, r3
 8012abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ac6:	f003 0308 	and.w	r3, r3, #8
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d103      	bne.n	8012ad6 <HAL_UART_IRQHandler+0x17a>
 8012ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d04f      	beq.n	8012b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f000 facf 	bl	801307a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	695b      	ldr	r3, [r3, #20]
 8012ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ae6:	2b40      	cmp	r3, #64	; 0x40
 8012ae8:	d141      	bne.n	8012b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	3314      	adds	r3, #20
 8012af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012af8:	e853 3f00 	ldrex	r3, [r3]
 8012afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	3314      	adds	r3, #20
 8012b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012b26:	e841 2300 	strex	r3, r2, [r1]
 8012b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d1d9      	bne.n	8012aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d013      	beq.n	8012b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b42:	4a7d      	ldr	r2, [pc, #500]	; (8012d38 <HAL_UART_IRQHandler+0x3dc>)
 8012b44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7f9 fe40 	bl	800c7d0 <HAL_DMA_Abort_IT>
 8012b50:	4603      	mov	r3, r0
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d016      	beq.n	8012b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012b60:	4610      	mov	r0, r2
 8012b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b64:	e00e      	b.n	8012b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f000 f9a4 	bl	8012eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b6c:	e00a      	b.n	8012b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f000 f9a0 	bl	8012eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b74:	e006      	b.n	8012b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f000 f99c 	bl	8012eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8012b82:	e170      	b.n	8012e66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b84:	bf00      	nop
    return;
 8012b86:	e16e      	b.n	8012e66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b8c:	2b01      	cmp	r3, #1
 8012b8e:	f040 814a 	bne.w	8012e26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8012b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b96:	f003 0310 	and.w	r3, r3, #16
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f000 8143 	beq.w	8012e26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8012ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ba4:	f003 0310 	and.w	r3, r3, #16
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	f000 813c 	beq.w	8012e26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012bae:	2300      	movs	r3, #0
 8012bb0:	60bb      	str	r3, [r7, #8]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	60bb      	str	r3, [r7, #8]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	60bb      	str	r3, [r7, #8]
 8012bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	695b      	ldr	r3, [r3, #20]
 8012bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bce:	2b40      	cmp	r3, #64	; 0x40
 8012bd0:	f040 80b4 	bne.w	8012d3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	f000 8140 	beq.w	8012e6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	f080 8139 	bcs.w	8012e6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c04:	69db      	ldr	r3, [r3, #28]
 8012c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c0a:	f000 8088 	beq.w	8012d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	330c      	adds	r3, #12
 8012c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012c1c:	e853 3f00 	ldrex	r3, [r3]
 8012c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	330c      	adds	r3, #12
 8012c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8012c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8012c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012c4a:	e841 2300 	strex	r3, r2, [r1]
 8012c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d1d9      	bne.n	8012c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	3314      	adds	r3, #20
 8012c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c64:	e853 3f00 	ldrex	r3, [r3]
 8012c68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c6c:	f023 0301 	bic.w	r3, r3, #1
 8012c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	3314      	adds	r3, #20
 8012c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012c7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012c82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012c8a:	e841 2300 	strex	r3, r2, [r1]
 8012c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d1e1      	bne.n	8012c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	3314      	adds	r3, #20
 8012c9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ca0:	e853 3f00 	ldrex	r3, [r3]
 8012ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	3314      	adds	r3, #20
 8012cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012cc2:	e841 2300 	strex	r3, r2, [r1]
 8012cc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d1e3      	bne.n	8012c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2220      	movs	r2, #32
 8012cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	330c      	adds	r3, #12
 8012ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ce6:	e853 3f00 	ldrex	r3, [r3]
 8012cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cee:	f023 0310 	bic.w	r3, r3, #16
 8012cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	330c      	adds	r3, #12
 8012cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8012d00:	65ba      	str	r2, [r7, #88]	; 0x58
 8012d02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d08:	e841 2300 	strex	r3, r2, [r1]
 8012d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d1e3      	bne.n	8012cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7f9 fce9 	bl	800c6f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f000 f8ca 	bl	8012ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8012d34:	e099      	b.n	8012e6a <HAL_UART_IRQHandler+0x50e>
 8012d36:	bf00      	nop
 8012d38:	08013141 	.word	0x08013141
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	1ad3      	subs	r3, r2, r3
 8012d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f000 808b 	beq.w	8012e6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8012d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	f000 8086 	beq.w	8012e6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	330c      	adds	r3, #12
 8012d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6c:	e853 3f00 	ldrex	r3, [r3]
 8012d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	330c      	adds	r3, #12
 8012d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8012d86:	647a      	str	r2, [r7, #68]	; 0x44
 8012d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d8e:	e841 2300 	strex	r3, r2, [r1]
 8012d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d1e3      	bne.n	8012d62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	3314      	adds	r3, #20
 8012da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da4:	e853 3f00 	ldrex	r3, [r3]
 8012da8:	623b      	str	r3, [r7, #32]
   return(result);
 8012daa:	6a3b      	ldr	r3, [r7, #32]
 8012dac:	f023 0301 	bic.w	r3, r3, #1
 8012db0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	3314      	adds	r3, #20
 8012dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012dbe:	633a      	str	r2, [r7, #48]	; 0x30
 8012dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dc6:	e841 2300 	strex	r3, r2, [r1]
 8012dca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d1e3      	bne.n	8012d9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2220      	movs	r2, #32
 8012dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	330c      	adds	r3, #12
 8012de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	e853 3f00 	ldrex	r3, [r3]
 8012dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	f023 0310 	bic.w	r3, r3, #16
 8012df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	330c      	adds	r3, #12
 8012e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8012e04:	61fa      	str	r2, [r7, #28]
 8012e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e08:	69b9      	ldr	r1, [r7, #24]
 8012e0a:	69fa      	ldr	r2, [r7, #28]
 8012e0c:	e841 2300 	strex	r3, r2, [r1]
 8012e10:	617b      	str	r3, [r7, #20]
   return(result);
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d1e3      	bne.n	8012de0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f000 f852 	bl	8012ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8012e24:	e023      	b.n	8012e6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d009      	beq.n	8012e46 <HAL_UART_IRQHandler+0x4ea>
 8012e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d003      	beq.n	8012e46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f000 f992 	bl	8013168 <UART_Transmit_IT>
    return;
 8012e44:	e014      	b.n	8012e70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00e      	beq.n	8012e70 <HAL_UART_IRQHandler+0x514>
 8012e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d008      	beq.n	8012e70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f000 f9d2 	bl	8013208 <UART_EndTransmit_IT>
    return;
 8012e64:	e004      	b.n	8012e70 <HAL_UART_IRQHandler+0x514>
    return;
 8012e66:	bf00      	nop
 8012e68:	e002      	b.n	8012e70 <HAL_UART_IRQHandler+0x514>
      return;
 8012e6a:	bf00      	nop
 8012e6c:	e000      	b.n	8012e70 <HAL_UART_IRQHandler+0x514>
      return;
 8012e6e:	bf00      	nop
  }
}
 8012e70:	37e8      	adds	r7, #232	; 0xe8
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop

08012e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b083      	sub	sp, #12
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8012e80:	bf00      	nop
 8012e82:	370c      	adds	r7, #12
 8012e84:	46bd      	mov	sp, r7
 8012e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8a:	4770      	bx	lr

08012e8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b083      	sub	sp, #12
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8012e94:	bf00      	nop
 8012e96:	370c      	adds	r7, #12
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9e:	4770      	bx	lr

08012ea0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8012ea8:	bf00      	nop
 8012eaa:	370c      	adds	r7, #12
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr

08012eb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b083      	sub	sp, #12
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8012ebc:	bf00      	nop
 8012ebe:	370c      	adds	r7, #12
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec6:	4770      	bx	lr

08012ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	460b      	mov	r3, r1
 8012ed2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012ed4:	bf00      	nop
 8012ed6:	370c      	adds	r7, #12
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b090      	sub	sp, #64	; 0x40
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d137      	bne.n	8012f6c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8012efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012efe:	2200      	movs	r2, #0
 8012f00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	3314      	adds	r3, #20
 8012f08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0c:	e853 3f00 	ldrex	r3, [r3]
 8012f10:	623b      	str	r3, [r7, #32]
   return(result);
 8012f12:	6a3b      	ldr	r3, [r7, #32]
 8012f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8012f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	3314      	adds	r3, #20
 8012f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f22:	633a      	str	r2, [r7, #48]	; 0x30
 8012f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f2a:	e841 2300 	strex	r3, r2, [r1]
 8012f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d1e5      	bne.n	8012f02 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	330c      	adds	r3, #12
 8012f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	e853 3f00 	ldrex	r3, [r3]
 8012f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8012f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	330c      	adds	r3, #12
 8012f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f56:	61fa      	str	r2, [r7, #28]
 8012f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f5a:	69b9      	ldr	r1, [r7, #24]
 8012f5c:	69fa      	ldr	r2, [r7, #28]
 8012f5e:	e841 2300 	strex	r3, r2, [r1]
 8012f62:	617b      	str	r3, [r7, #20]
   return(result);
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d1e5      	bne.n	8012f36 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012f6a:	e002      	b.n	8012f72 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8012f6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012f6e:	f7ff ff83 	bl	8012e78 <HAL_UART_TxCpltCallback>
}
 8012f72:	bf00      	nop
 8012f74:	3740      	adds	r7, #64	; 0x40
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}

08012f7a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012f7a:	b580      	push	{r7, lr}
 8012f7c:	b084      	sub	sp, #16
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f7ff ff7f 	bl	8012e8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012f8e:	bf00      	nop
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012f96:	b580      	push	{r7, lr}
 8012f98:	b084      	sub	sp, #16
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fa6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	695b      	ldr	r3, [r3, #20]
 8012fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fb2:	2b80      	cmp	r3, #128	; 0x80
 8012fb4:	bf0c      	ite	eq
 8012fb6:	2301      	moveq	r3, #1
 8012fb8:	2300      	movne	r3, #0
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	2b21      	cmp	r3, #33	; 0x21
 8012fc8:	d108      	bne.n	8012fdc <UART_DMAError+0x46>
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d005      	beq.n	8012fdc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8012fd6:	68b8      	ldr	r0, [r7, #8]
 8012fd8:	f000 f827 	bl	801302a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	695b      	ldr	r3, [r3, #20]
 8012fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fe6:	2b40      	cmp	r3, #64	; 0x40
 8012fe8:	bf0c      	ite	eq
 8012fea:	2301      	moveq	r3, #1
 8012fec:	2300      	movne	r3, #0
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012ff8:	b2db      	uxtb	r3, r3
 8012ffa:	2b22      	cmp	r3, #34	; 0x22
 8012ffc:	d108      	bne.n	8013010 <UART_DMAError+0x7a>
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d005      	beq.n	8013010 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	2200      	movs	r2, #0
 8013008:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801300a:	68b8      	ldr	r0, [r7, #8]
 801300c:	f000 f835 	bl	801307a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013014:	f043 0210 	orr.w	r2, r3, #16
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801301c:	68b8      	ldr	r0, [r7, #8]
 801301e:	f7ff ff49 	bl	8012eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013022:	bf00      	nop
 8013024:	3710      	adds	r7, #16
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}

0801302a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801302a:	b480      	push	{r7}
 801302c:	b089      	sub	sp, #36	; 0x24
 801302e:	af00      	add	r7, sp, #0
 8013030:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	330c      	adds	r3, #12
 8013038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	e853 3f00 	ldrex	r3, [r3]
 8013040:	60bb      	str	r3, [r7, #8]
   return(result);
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8013048:	61fb      	str	r3, [r7, #28]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	330c      	adds	r3, #12
 8013050:	69fa      	ldr	r2, [r7, #28]
 8013052:	61ba      	str	r2, [r7, #24]
 8013054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013056:	6979      	ldr	r1, [r7, #20]
 8013058:	69ba      	ldr	r2, [r7, #24]
 801305a:	e841 2300 	strex	r3, r2, [r1]
 801305e:	613b      	str	r3, [r7, #16]
   return(result);
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d1e5      	bne.n	8013032 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2220      	movs	r2, #32
 801306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801306e:	bf00      	nop
 8013070:	3724      	adds	r7, #36	; 0x24
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr

0801307a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801307a:	b480      	push	{r7}
 801307c:	b095      	sub	sp, #84	; 0x54
 801307e:	af00      	add	r7, sp, #0
 8013080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	330c      	adds	r3, #12
 8013088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801308c:	e853 3f00 	ldrex	r3, [r3]
 8013090:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013098:	64fb      	str	r3, [r7, #76]	; 0x4c
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	330c      	adds	r3, #12
 80130a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80130a2:	643a      	str	r2, [r7, #64]	; 0x40
 80130a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80130a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130aa:	e841 2300 	strex	r3, r2, [r1]
 80130ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80130b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d1e5      	bne.n	8013082 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	3314      	adds	r3, #20
 80130bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130be:	6a3b      	ldr	r3, [r7, #32]
 80130c0:	e853 3f00 	ldrex	r3, [r3]
 80130c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80130c6:	69fb      	ldr	r3, [r7, #28]
 80130c8:	f023 0301 	bic.w	r3, r3, #1
 80130cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	3314      	adds	r3, #20
 80130d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80130d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80130d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80130dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130de:	e841 2300 	strex	r3, r2, [r1]
 80130e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80130e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d1e5      	bne.n	80130b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d119      	bne.n	8013126 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	330c      	adds	r3, #12
 80130f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	e853 3f00 	ldrex	r3, [r3]
 8013100:	60bb      	str	r3, [r7, #8]
   return(result);
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	f023 0310 	bic.w	r3, r3, #16
 8013108:	647b      	str	r3, [r7, #68]	; 0x44
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	330c      	adds	r3, #12
 8013110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013112:	61ba      	str	r2, [r7, #24]
 8013114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013116:	6979      	ldr	r1, [r7, #20]
 8013118:	69ba      	ldr	r2, [r7, #24]
 801311a:	e841 2300 	strex	r3, r2, [r1]
 801311e:	613b      	str	r3, [r7, #16]
   return(result);
 8013120:	693b      	ldr	r3, [r7, #16]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d1e5      	bne.n	80130f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2220      	movs	r2, #32
 801312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2200      	movs	r2, #0
 8013132:	631a      	str	r2, [r3, #48]	; 0x30
}
 8013134:	bf00      	nop
 8013136:	3754      	adds	r7, #84	; 0x54
 8013138:	46bd      	mov	sp, r7
 801313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313e:	4770      	bx	lr

08013140 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b084      	sub	sp, #16
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801314c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	2200      	movs	r2, #0
 8013152:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	2200      	movs	r2, #0
 8013158:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801315a:	68f8      	ldr	r0, [r7, #12]
 801315c:	f7ff feaa 	bl	8012eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013160:	bf00      	nop
 8013162:	3710      	adds	r7, #16
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8013168:	b480      	push	{r7}
 801316a:	b085      	sub	sp, #20
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013176:	b2db      	uxtb	r3, r3
 8013178:	2b21      	cmp	r3, #33	; 0x21
 801317a:	d13e      	bne.n	80131fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	689b      	ldr	r3, [r3, #8]
 8013180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013184:	d114      	bne.n	80131b0 <UART_Transmit_IT+0x48>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	691b      	ldr	r3, [r3, #16]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d110      	bne.n	80131b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6a1b      	ldr	r3, [r3, #32]
 8013192:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	881b      	ldrh	r3, [r3, #0]
 8013198:	461a      	mov	r2, r3
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80131a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6a1b      	ldr	r3, [r3, #32]
 80131a8:	1c9a      	adds	r2, r3, #2
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	621a      	str	r2, [r3, #32]
 80131ae:	e008      	b.n	80131c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6a1b      	ldr	r3, [r3, #32]
 80131b4:	1c59      	adds	r1, r3, #1
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	6211      	str	r1, [r2, #32]
 80131ba:	781a      	ldrb	r2, [r3, #0]
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80131c6:	b29b      	uxth	r3, r3
 80131c8:	3b01      	subs	r3, #1
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	687a      	ldr	r2, [r7, #4]
 80131ce:	4619      	mov	r1, r3
 80131d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d10f      	bne.n	80131f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	68da      	ldr	r2, [r3, #12]
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80131e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	68da      	ldr	r2, [r3, #12]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80131f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80131f6:	2300      	movs	r3, #0
 80131f8:	e000      	b.n	80131fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80131fa:	2302      	movs	r3, #2
  }
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	3714      	adds	r7, #20
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr

08013208 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	68da      	ldr	r2, [r3, #12]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801321e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2220      	movs	r2, #32
 8013224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f7ff fe25 	bl	8012e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801322e:	2300      	movs	r3, #0
}
 8013230:	4618      	mov	r0, r3
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b08c      	sub	sp, #48	; 0x30
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013246:	b2db      	uxtb	r3, r3
 8013248:	2b22      	cmp	r3, #34	; 0x22
 801324a:	f040 80ab 	bne.w	80133a4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	689b      	ldr	r3, [r3, #8]
 8013252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013256:	d117      	bne.n	8013288 <UART_Receive_IT+0x50>
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	691b      	ldr	r3, [r3, #16]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d113      	bne.n	8013288 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8013260:	2300      	movs	r3, #0
 8013262:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013268:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	685b      	ldr	r3, [r3, #4]
 8013270:	b29b      	uxth	r3, r3
 8013272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013276:	b29a      	uxth	r2, r3
 8013278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801327a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013280:	1c9a      	adds	r2, r3, #2
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	629a      	str	r2, [r3, #40]	; 0x28
 8013286:	e026      	b.n	80132d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801328c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801328e:	2300      	movs	r3, #0
 8013290:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	689b      	ldr	r3, [r3, #8]
 8013296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801329a:	d007      	beq.n	80132ac <UART_Receive_IT+0x74>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	689b      	ldr	r3, [r3, #8]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d10a      	bne.n	80132ba <UART_Receive_IT+0x82>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	691b      	ldr	r3, [r3, #16]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d106      	bne.n	80132ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	b2da      	uxtb	r2, r3
 80132b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b6:	701a      	strb	r2, [r3, #0]
 80132b8:	e008      	b.n	80132cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	685b      	ldr	r3, [r3, #4]
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132c6:	b2da      	uxtb	r2, r3
 80132c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132d0:	1c5a      	adds	r2, r3, #1
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80132da:	b29b      	uxth	r3, r3
 80132dc:	3b01      	subs	r3, #1
 80132de:	b29b      	uxth	r3, r3
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	4619      	mov	r1, r3
 80132e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d15a      	bne.n	80133a0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	68da      	ldr	r2, [r3, #12]
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	f022 0220 	bic.w	r2, r2, #32
 80132f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	68da      	ldr	r2, [r3, #12]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013308:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	695a      	ldr	r2, [r3, #20]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f022 0201 	bic.w	r2, r2, #1
 8013318:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2220      	movs	r2, #32
 801331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013326:	2b01      	cmp	r3, #1
 8013328:	d135      	bne.n	8013396 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2200      	movs	r2, #0
 801332e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	330c      	adds	r3, #12
 8013336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	e853 3f00 	ldrex	r3, [r3]
 801333e:	613b      	str	r3, [r7, #16]
   return(result);
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	f023 0310 	bic.w	r3, r3, #16
 8013346:	627b      	str	r3, [r7, #36]	; 0x24
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	330c      	adds	r3, #12
 801334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013350:	623a      	str	r2, [r7, #32]
 8013352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013354:	69f9      	ldr	r1, [r7, #28]
 8013356:	6a3a      	ldr	r2, [r7, #32]
 8013358:	e841 2300 	strex	r3, r2, [r1]
 801335c:	61bb      	str	r3, [r7, #24]
   return(result);
 801335e:	69bb      	ldr	r3, [r7, #24]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d1e5      	bne.n	8013330 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	f003 0310 	and.w	r3, r3, #16
 801336e:	2b10      	cmp	r3, #16
 8013370:	d10a      	bne.n	8013388 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8013372:	2300      	movs	r3, #0
 8013374:	60fb      	str	r3, [r7, #12]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	60fb      	str	r3, [r7, #12]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	685b      	ldr	r3, [r3, #4]
 8013384:	60fb      	str	r3, [r7, #12]
 8013386:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801338c:	4619      	mov	r1, r3
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f7ff fd9a 	bl	8012ec8 <HAL_UARTEx_RxEventCallback>
 8013394:	e002      	b.n	801339c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f7ff fd82 	bl	8012ea0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801339c:	2300      	movs	r3, #0
 801339e:	e002      	b.n	80133a6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80133a0:	2300      	movs	r3, #0
 80133a2:	e000      	b.n	80133a6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80133a4:	2302      	movs	r3, #2
  }
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3730      	adds	r7, #48	; 0x30
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
	...

080133b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80133b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80133b4:	b0c0      	sub	sp, #256	; 0x100
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80133bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	691b      	ldr	r3, [r3, #16]
 80133c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80133c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80133cc:	68d9      	ldr	r1, [r3, #12]
 80133ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	ea40 0301 	orr.w	r3, r0, r1
 80133d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80133da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80133de:	689a      	ldr	r2, [r3, #8]
 80133e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80133e4:	691b      	ldr	r3, [r3, #16]
 80133e6:	431a      	orrs	r2, r3
 80133e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80133ec:	695b      	ldr	r3, [r3, #20]
 80133ee:	431a      	orrs	r2, r3
 80133f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80133f4:	69db      	ldr	r3, [r3, #28]
 80133f6:	4313      	orrs	r3, r2
 80133f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80133fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8013408:	f021 010c 	bic.w	r1, r1, #12
 801340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013416:	430b      	orrs	r3, r1
 8013418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	695b      	ldr	r3, [r3, #20]
 8013422:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8013426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801342a:	6999      	ldr	r1, [r3, #24]
 801342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013430:	681a      	ldr	r2, [r3, #0]
 8013432:	ea40 0301 	orr.w	r3, r0, r1
 8013436:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	4b8f      	ldr	r3, [pc, #572]	; (801367c <UART_SetConfig+0x2cc>)
 8013440:	429a      	cmp	r2, r3
 8013442:	d005      	beq.n	8013450 <UART_SetConfig+0xa0>
 8013444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013448:	681a      	ldr	r2, [r3, #0]
 801344a:	4b8d      	ldr	r3, [pc, #564]	; (8013680 <UART_SetConfig+0x2d0>)
 801344c:	429a      	cmp	r2, r3
 801344e:	d104      	bne.n	801345a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013450:	f7fd fa78 	bl	8010944 <HAL_RCC_GetPCLK2Freq>
 8013454:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8013458:	e003      	b.n	8013462 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801345a:	f7fd fa5f 	bl	801091c <HAL_RCC_GetPCLK1Freq>
 801345e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013466:	69db      	ldr	r3, [r3, #28]
 8013468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801346c:	f040 810c 	bne.w	8013688 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013474:	2200      	movs	r2, #0
 8013476:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801347a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801347e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8013482:	4622      	mov	r2, r4
 8013484:	462b      	mov	r3, r5
 8013486:	1891      	adds	r1, r2, r2
 8013488:	65b9      	str	r1, [r7, #88]	; 0x58
 801348a:	415b      	adcs	r3, r3
 801348c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801348e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8013492:	4621      	mov	r1, r4
 8013494:	eb12 0801 	adds.w	r8, r2, r1
 8013498:	4629      	mov	r1, r5
 801349a:	eb43 0901 	adc.w	r9, r3, r1
 801349e:	f04f 0200 	mov.w	r2, #0
 80134a2:	f04f 0300 	mov.w	r3, #0
 80134a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80134aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80134ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80134b2:	4690      	mov	r8, r2
 80134b4:	4699      	mov	r9, r3
 80134b6:	4623      	mov	r3, r4
 80134b8:	eb18 0303 	adds.w	r3, r8, r3
 80134bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80134c0:	462b      	mov	r3, r5
 80134c2:	eb49 0303 	adc.w	r3, r9, r3
 80134c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80134ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	2200      	movs	r2, #0
 80134d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80134d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80134da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80134de:	460b      	mov	r3, r1
 80134e0:	18db      	adds	r3, r3, r3
 80134e2:	653b      	str	r3, [r7, #80]	; 0x50
 80134e4:	4613      	mov	r3, r2
 80134e6:	eb42 0303 	adc.w	r3, r2, r3
 80134ea:	657b      	str	r3, [r7, #84]	; 0x54
 80134ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80134f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80134f4:	f7ed fbc8 	bl	8000c88 <__aeabi_uldivmod>
 80134f8:	4602      	mov	r2, r0
 80134fa:	460b      	mov	r3, r1
 80134fc:	4b61      	ldr	r3, [pc, #388]	; (8013684 <UART_SetConfig+0x2d4>)
 80134fe:	fba3 2302 	umull	r2, r3, r3, r2
 8013502:	095b      	lsrs	r3, r3, #5
 8013504:	011c      	lsls	r4, r3, #4
 8013506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801350a:	2200      	movs	r2, #0
 801350c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013510:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8013514:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8013518:	4642      	mov	r2, r8
 801351a:	464b      	mov	r3, r9
 801351c:	1891      	adds	r1, r2, r2
 801351e:	64b9      	str	r1, [r7, #72]	; 0x48
 8013520:	415b      	adcs	r3, r3
 8013522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8013528:	4641      	mov	r1, r8
 801352a:	eb12 0a01 	adds.w	sl, r2, r1
 801352e:	4649      	mov	r1, r9
 8013530:	eb43 0b01 	adc.w	fp, r3, r1
 8013534:	f04f 0200 	mov.w	r2, #0
 8013538:	f04f 0300 	mov.w	r3, #0
 801353c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8013540:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8013544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013548:	4692      	mov	sl, r2
 801354a:	469b      	mov	fp, r3
 801354c:	4643      	mov	r3, r8
 801354e:	eb1a 0303 	adds.w	r3, sl, r3
 8013552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013556:	464b      	mov	r3, r9
 8013558:	eb4b 0303 	adc.w	r3, fp, r3
 801355c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801356c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8013570:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8013574:	460b      	mov	r3, r1
 8013576:	18db      	adds	r3, r3, r3
 8013578:	643b      	str	r3, [r7, #64]	; 0x40
 801357a:	4613      	mov	r3, r2
 801357c:	eb42 0303 	adc.w	r3, r2, r3
 8013580:	647b      	str	r3, [r7, #68]	; 0x44
 8013582:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013586:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801358a:	f7ed fb7d 	bl	8000c88 <__aeabi_uldivmod>
 801358e:	4602      	mov	r2, r0
 8013590:	460b      	mov	r3, r1
 8013592:	4611      	mov	r1, r2
 8013594:	4b3b      	ldr	r3, [pc, #236]	; (8013684 <UART_SetConfig+0x2d4>)
 8013596:	fba3 2301 	umull	r2, r3, r3, r1
 801359a:	095b      	lsrs	r3, r3, #5
 801359c:	2264      	movs	r2, #100	; 0x64
 801359e:	fb02 f303 	mul.w	r3, r2, r3
 80135a2:	1acb      	subs	r3, r1, r3
 80135a4:	00db      	lsls	r3, r3, #3
 80135a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80135aa:	4b36      	ldr	r3, [pc, #216]	; (8013684 <UART_SetConfig+0x2d4>)
 80135ac:	fba3 2302 	umull	r2, r3, r3, r2
 80135b0:	095b      	lsrs	r3, r3, #5
 80135b2:	005b      	lsls	r3, r3, #1
 80135b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80135b8:	441c      	add	r4, r3
 80135ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80135be:	2200      	movs	r2, #0
 80135c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80135c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80135c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80135cc:	4642      	mov	r2, r8
 80135ce:	464b      	mov	r3, r9
 80135d0:	1891      	adds	r1, r2, r2
 80135d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80135d4:	415b      	adcs	r3, r3
 80135d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80135d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80135dc:	4641      	mov	r1, r8
 80135de:	1851      	adds	r1, r2, r1
 80135e0:	6339      	str	r1, [r7, #48]	; 0x30
 80135e2:	4649      	mov	r1, r9
 80135e4:	414b      	adcs	r3, r1
 80135e6:	637b      	str	r3, [r7, #52]	; 0x34
 80135e8:	f04f 0200 	mov.w	r2, #0
 80135ec:	f04f 0300 	mov.w	r3, #0
 80135f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80135f4:	4659      	mov	r1, fp
 80135f6:	00cb      	lsls	r3, r1, #3
 80135f8:	4651      	mov	r1, sl
 80135fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80135fe:	4651      	mov	r1, sl
 8013600:	00ca      	lsls	r2, r1, #3
 8013602:	4610      	mov	r0, r2
 8013604:	4619      	mov	r1, r3
 8013606:	4603      	mov	r3, r0
 8013608:	4642      	mov	r2, r8
 801360a:	189b      	adds	r3, r3, r2
 801360c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013610:	464b      	mov	r3, r9
 8013612:	460a      	mov	r2, r1
 8013614:	eb42 0303 	adc.w	r3, r2, r3
 8013618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	2200      	movs	r2, #0
 8013624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013628:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801362c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8013630:	460b      	mov	r3, r1
 8013632:	18db      	adds	r3, r3, r3
 8013634:	62bb      	str	r3, [r7, #40]	; 0x28
 8013636:	4613      	mov	r3, r2
 8013638:	eb42 0303 	adc.w	r3, r2, r3
 801363c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801363e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013642:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013646:	f7ed fb1f 	bl	8000c88 <__aeabi_uldivmod>
 801364a:	4602      	mov	r2, r0
 801364c:	460b      	mov	r3, r1
 801364e:	4b0d      	ldr	r3, [pc, #52]	; (8013684 <UART_SetConfig+0x2d4>)
 8013650:	fba3 1302 	umull	r1, r3, r3, r2
 8013654:	095b      	lsrs	r3, r3, #5
 8013656:	2164      	movs	r1, #100	; 0x64
 8013658:	fb01 f303 	mul.w	r3, r1, r3
 801365c:	1ad3      	subs	r3, r2, r3
 801365e:	00db      	lsls	r3, r3, #3
 8013660:	3332      	adds	r3, #50	; 0x32
 8013662:	4a08      	ldr	r2, [pc, #32]	; (8013684 <UART_SetConfig+0x2d4>)
 8013664:	fba2 2303 	umull	r2, r3, r2, r3
 8013668:	095b      	lsrs	r3, r3, #5
 801366a:	f003 0207 	and.w	r2, r3, #7
 801366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	4422      	add	r2, r4
 8013676:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013678:	e105      	b.n	8013886 <UART_SetConfig+0x4d6>
 801367a:	bf00      	nop
 801367c:	40011000 	.word	0x40011000
 8013680:	40011400 	.word	0x40011400
 8013684:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801368c:	2200      	movs	r2, #0
 801368e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013692:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013696:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801369a:	4642      	mov	r2, r8
 801369c:	464b      	mov	r3, r9
 801369e:	1891      	adds	r1, r2, r2
 80136a0:	6239      	str	r1, [r7, #32]
 80136a2:	415b      	adcs	r3, r3
 80136a4:	627b      	str	r3, [r7, #36]	; 0x24
 80136a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80136aa:	4641      	mov	r1, r8
 80136ac:	1854      	adds	r4, r2, r1
 80136ae:	4649      	mov	r1, r9
 80136b0:	eb43 0501 	adc.w	r5, r3, r1
 80136b4:	f04f 0200 	mov.w	r2, #0
 80136b8:	f04f 0300 	mov.w	r3, #0
 80136bc:	00eb      	lsls	r3, r5, #3
 80136be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80136c2:	00e2      	lsls	r2, r4, #3
 80136c4:	4614      	mov	r4, r2
 80136c6:	461d      	mov	r5, r3
 80136c8:	4643      	mov	r3, r8
 80136ca:	18e3      	adds	r3, r4, r3
 80136cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80136d0:	464b      	mov	r3, r9
 80136d2:	eb45 0303 	adc.w	r3, r5, r3
 80136d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80136da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	2200      	movs	r2, #0
 80136e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80136e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80136ea:	f04f 0200 	mov.w	r2, #0
 80136ee:	f04f 0300 	mov.w	r3, #0
 80136f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80136f6:	4629      	mov	r1, r5
 80136f8:	008b      	lsls	r3, r1, #2
 80136fa:	4621      	mov	r1, r4
 80136fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013700:	4621      	mov	r1, r4
 8013702:	008a      	lsls	r2, r1, #2
 8013704:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013708:	f7ed fabe 	bl	8000c88 <__aeabi_uldivmod>
 801370c:	4602      	mov	r2, r0
 801370e:	460b      	mov	r3, r1
 8013710:	4b60      	ldr	r3, [pc, #384]	; (8013894 <UART_SetConfig+0x4e4>)
 8013712:	fba3 2302 	umull	r2, r3, r3, r2
 8013716:	095b      	lsrs	r3, r3, #5
 8013718:	011c      	lsls	r4, r3, #4
 801371a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801371e:	2200      	movs	r2, #0
 8013720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013724:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013728:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801372c:	4642      	mov	r2, r8
 801372e:	464b      	mov	r3, r9
 8013730:	1891      	adds	r1, r2, r2
 8013732:	61b9      	str	r1, [r7, #24]
 8013734:	415b      	adcs	r3, r3
 8013736:	61fb      	str	r3, [r7, #28]
 8013738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801373c:	4641      	mov	r1, r8
 801373e:	1851      	adds	r1, r2, r1
 8013740:	6139      	str	r1, [r7, #16]
 8013742:	4649      	mov	r1, r9
 8013744:	414b      	adcs	r3, r1
 8013746:	617b      	str	r3, [r7, #20]
 8013748:	f04f 0200 	mov.w	r2, #0
 801374c:	f04f 0300 	mov.w	r3, #0
 8013750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013754:	4659      	mov	r1, fp
 8013756:	00cb      	lsls	r3, r1, #3
 8013758:	4651      	mov	r1, sl
 801375a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801375e:	4651      	mov	r1, sl
 8013760:	00ca      	lsls	r2, r1, #3
 8013762:	4610      	mov	r0, r2
 8013764:	4619      	mov	r1, r3
 8013766:	4603      	mov	r3, r0
 8013768:	4642      	mov	r2, r8
 801376a:	189b      	adds	r3, r3, r2
 801376c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013770:	464b      	mov	r3, r9
 8013772:	460a      	mov	r2, r1
 8013774:	eb42 0303 	adc.w	r3, r2, r3
 8013778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	2200      	movs	r2, #0
 8013784:	67bb      	str	r3, [r7, #120]	; 0x78
 8013786:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013788:	f04f 0200 	mov.w	r2, #0
 801378c:	f04f 0300 	mov.w	r3, #0
 8013790:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8013794:	4649      	mov	r1, r9
 8013796:	008b      	lsls	r3, r1, #2
 8013798:	4641      	mov	r1, r8
 801379a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801379e:	4641      	mov	r1, r8
 80137a0:	008a      	lsls	r2, r1, #2
 80137a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80137a6:	f7ed fa6f 	bl	8000c88 <__aeabi_uldivmod>
 80137aa:	4602      	mov	r2, r0
 80137ac:	460b      	mov	r3, r1
 80137ae:	4b39      	ldr	r3, [pc, #228]	; (8013894 <UART_SetConfig+0x4e4>)
 80137b0:	fba3 1302 	umull	r1, r3, r3, r2
 80137b4:	095b      	lsrs	r3, r3, #5
 80137b6:	2164      	movs	r1, #100	; 0x64
 80137b8:	fb01 f303 	mul.w	r3, r1, r3
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	011b      	lsls	r3, r3, #4
 80137c0:	3332      	adds	r3, #50	; 0x32
 80137c2:	4a34      	ldr	r2, [pc, #208]	; (8013894 <UART_SetConfig+0x4e4>)
 80137c4:	fba2 2303 	umull	r2, r3, r2, r3
 80137c8:	095b      	lsrs	r3, r3, #5
 80137ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80137ce:	441c      	add	r4, r3
 80137d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80137d4:	2200      	movs	r2, #0
 80137d6:	673b      	str	r3, [r7, #112]	; 0x70
 80137d8:	677a      	str	r2, [r7, #116]	; 0x74
 80137da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80137de:	4642      	mov	r2, r8
 80137e0:	464b      	mov	r3, r9
 80137e2:	1891      	adds	r1, r2, r2
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	415b      	adcs	r3, r3
 80137e8:	60fb      	str	r3, [r7, #12]
 80137ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80137ee:	4641      	mov	r1, r8
 80137f0:	1851      	adds	r1, r2, r1
 80137f2:	6039      	str	r1, [r7, #0]
 80137f4:	4649      	mov	r1, r9
 80137f6:	414b      	adcs	r3, r1
 80137f8:	607b      	str	r3, [r7, #4]
 80137fa:	f04f 0200 	mov.w	r2, #0
 80137fe:	f04f 0300 	mov.w	r3, #0
 8013802:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013806:	4659      	mov	r1, fp
 8013808:	00cb      	lsls	r3, r1, #3
 801380a:	4651      	mov	r1, sl
 801380c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013810:	4651      	mov	r1, sl
 8013812:	00ca      	lsls	r2, r1, #3
 8013814:	4610      	mov	r0, r2
 8013816:	4619      	mov	r1, r3
 8013818:	4603      	mov	r3, r0
 801381a:	4642      	mov	r2, r8
 801381c:	189b      	adds	r3, r3, r2
 801381e:	66bb      	str	r3, [r7, #104]	; 0x68
 8013820:	464b      	mov	r3, r9
 8013822:	460a      	mov	r2, r1
 8013824:	eb42 0303 	adc.w	r3, r2, r3
 8013828:	66fb      	str	r3, [r7, #108]	; 0x6c
 801382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	2200      	movs	r2, #0
 8013832:	663b      	str	r3, [r7, #96]	; 0x60
 8013834:	667a      	str	r2, [r7, #100]	; 0x64
 8013836:	f04f 0200 	mov.w	r2, #0
 801383a:	f04f 0300 	mov.w	r3, #0
 801383e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8013842:	4649      	mov	r1, r9
 8013844:	008b      	lsls	r3, r1, #2
 8013846:	4641      	mov	r1, r8
 8013848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801384c:	4641      	mov	r1, r8
 801384e:	008a      	lsls	r2, r1, #2
 8013850:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013854:	f7ed fa18 	bl	8000c88 <__aeabi_uldivmod>
 8013858:	4602      	mov	r2, r0
 801385a:	460b      	mov	r3, r1
 801385c:	4b0d      	ldr	r3, [pc, #52]	; (8013894 <UART_SetConfig+0x4e4>)
 801385e:	fba3 1302 	umull	r1, r3, r3, r2
 8013862:	095b      	lsrs	r3, r3, #5
 8013864:	2164      	movs	r1, #100	; 0x64
 8013866:	fb01 f303 	mul.w	r3, r1, r3
 801386a:	1ad3      	subs	r3, r2, r3
 801386c:	011b      	lsls	r3, r3, #4
 801386e:	3332      	adds	r3, #50	; 0x32
 8013870:	4a08      	ldr	r2, [pc, #32]	; (8013894 <UART_SetConfig+0x4e4>)
 8013872:	fba2 2303 	umull	r2, r3, r2, r3
 8013876:	095b      	lsrs	r3, r3, #5
 8013878:	f003 020f 	and.w	r2, r3, #15
 801387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	4422      	add	r2, r4
 8013884:	609a      	str	r2, [r3, #8]
}
 8013886:	bf00      	nop
 8013888:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801388c:	46bd      	mov	sp, r7
 801388e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013892:	bf00      	nop
 8013894:	51eb851f 	.word	0x51eb851f

08013898 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013898:	b084      	sub	sp, #16
 801389a:	b580      	push	{r7, lr}
 801389c:	b084      	sub	sp, #16
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
 80138a2:	f107 001c 	add.w	r0, r7, #28
 80138a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80138aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	d122      	bne.n	80138f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	68db      	ldr	r3, [r3, #12]
 80138c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80138c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	68db      	ldr	r3, [r3, #12]
 80138d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80138d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138da:	2b01      	cmp	r3, #1
 80138dc:	d105      	bne.n	80138ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f001 fbee 	bl	80150cc <USB_CoreReset>
 80138f0:	4603      	mov	r3, r0
 80138f2:	73fb      	strb	r3, [r7, #15]
 80138f4:	e01a      	b.n	801392c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	68db      	ldr	r3, [r3, #12]
 80138fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f001 fbe2 	bl	80150cc <USB_CoreReset>
 8013908:	4603      	mov	r3, r0
 801390a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801390c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801390e:	2b00      	cmp	r3, #0
 8013910:	d106      	bne.n	8013920 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013916:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	639a      	str	r2, [r3, #56]	; 0x38
 801391e:	e005      	b.n	801392c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392e:	2b01      	cmp	r3, #1
 8013930:	d10b      	bne.n	801394a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	689b      	ldr	r3, [r3, #8]
 8013936:	f043 0206 	orr.w	r2, r3, #6
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	689b      	ldr	r3, [r3, #8]
 8013942:	f043 0220 	orr.w	r2, r3, #32
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801394a:	7bfb      	ldrb	r3, [r7, #15]
}
 801394c:	4618      	mov	r0, r3
 801394e:	3710      	adds	r7, #16
 8013950:	46bd      	mov	sp, r7
 8013952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013956:	b004      	add	sp, #16
 8013958:	4770      	bx	lr
	...

0801395c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801395c:	b480      	push	{r7}
 801395e:	b087      	sub	sp, #28
 8013960:	af00      	add	r7, sp, #0
 8013962:	60f8      	str	r0, [r7, #12]
 8013964:	60b9      	str	r1, [r7, #8]
 8013966:	4613      	mov	r3, r2
 8013968:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801396a:	79fb      	ldrb	r3, [r7, #7]
 801396c:	2b02      	cmp	r3, #2
 801396e:	d165      	bne.n	8013a3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	4a41      	ldr	r2, [pc, #260]	; (8013a78 <USB_SetTurnaroundTime+0x11c>)
 8013974:	4293      	cmp	r3, r2
 8013976:	d906      	bls.n	8013986 <USB_SetTurnaroundTime+0x2a>
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	4a40      	ldr	r2, [pc, #256]	; (8013a7c <USB_SetTurnaroundTime+0x120>)
 801397c:	4293      	cmp	r3, r2
 801397e:	d202      	bcs.n	8013986 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013980:	230f      	movs	r3, #15
 8013982:	617b      	str	r3, [r7, #20]
 8013984:	e062      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	4a3c      	ldr	r2, [pc, #240]	; (8013a7c <USB_SetTurnaroundTime+0x120>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d306      	bcc.n	801399c <USB_SetTurnaroundTime+0x40>
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	4a3b      	ldr	r2, [pc, #236]	; (8013a80 <USB_SetTurnaroundTime+0x124>)
 8013992:	4293      	cmp	r3, r2
 8013994:	d202      	bcs.n	801399c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013996:	230e      	movs	r3, #14
 8013998:	617b      	str	r3, [r7, #20]
 801399a:	e057      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	4a38      	ldr	r2, [pc, #224]	; (8013a80 <USB_SetTurnaroundTime+0x124>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d306      	bcc.n	80139b2 <USB_SetTurnaroundTime+0x56>
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	4a37      	ldr	r2, [pc, #220]	; (8013a84 <USB_SetTurnaroundTime+0x128>)
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d202      	bcs.n	80139b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80139ac:	230d      	movs	r3, #13
 80139ae:	617b      	str	r3, [r7, #20]
 80139b0:	e04c      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	4a33      	ldr	r2, [pc, #204]	; (8013a84 <USB_SetTurnaroundTime+0x128>)
 80139b6:	4293      	cmp	r3, r2
 80139b8:	d306      	bcc.n	80139c8 <USB_SetTurnaroundTime+0x6c>
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	4a32      	ldr	r2, [pc, #200]	; (8013a88 <USB_SetTurnaroundTime+0x12c>)
 80139be:	4293      	cmp	r3, r2
 80139c0:	d802      	bhi.n	80139c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80139c2:	230c      	movs	r3, #12
 80139c4:	617b      	str	r3, [r7, #20]
 80139c6:	e041      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	4a2f      	ldr	r2, [pc, #188]	; (8013a88 <USB_SetTurnaroundTime+0x12c>)
 80139cc:	4293      	cmp	r3, r2
 80139ce:	d906      	bls.n	80139de <USB_SetTurnaroundTime+0x82>
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	4a2e      	ldr	r2, [pc, #184]	; (8013a8c <USB_SetTurnaroundTime+0x130>)
 80139d4:	4293      	cmp	r3, r2
 80139d6:	d802      	bhi.n	80139de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80139d8:	230b      	movs	r3, #11
 80139da:	617b      	str	r3, [r7, #20]
 80139dc:	e036      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	4a2a      	ldr	r2, [pc, #168]	; (8013a8c <USB_SetTurnaroundTime+0x130>)
 80139e2:	4293      	cmp	r3, r2
 80139e4:	d906      	bls.n	80139f4 <USB_SetTurnaroundTime+0x98>
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	4a29      	ldr	r2, [pc, #164]	; (8013a90 <USB_SetTurnaroundTime+0x134>)
 80139ea:	4293      	cmp	r3, r2
 80139ec:	d802      	bhi.n	80139f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80139ee:	230a      	movs	r3, #10
 80139f0:	617b      	str	r3, [r7, #20]
 80139f2:	e02b      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	4a26      	ldr	r2, [pc, #152]	; (8013a90 <USB_SetTurnaroundTime+0x134>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d906      	bls.n	8013a0a <USB_SetTurnaroundTime+0xae>
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	4a25      	ldr	r2, [pc, #148]	; (8013a94 <USB_SetTurnaroundTime+0x138>)
 8013a00:	4293      	cmp	r3, r2
 8013a02:	d202      	bcs.n	8013a0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013a04:	2309      	movs	r3, #9
 8013a06:	617b      	str	r3, [r7, #20]
 8013a08:	e020      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	4a21      	ldr	r2, [pc, #132]	; (8013a94 <USB_SetTurnaroundTime+0x138>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d306      	bcc.n	8013a20 <USB_SetTurnaroundTime+0xc4>
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	4a20      	ldr	r2, [pc, #128]	; (8013a98 <USB_SetTurnaroundTime+0x13c>)
 8013a16:	4293      	cmp	r3, r2
 8013a18:	d802      	bhi.n	8013a20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013a1a:	2308      	movs	r3, #8
 8013a1c:	617b      	str	r3, [r7, #20]
 8013a1e:	e015      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	4a1d      	ldr	r2, [pc, #116]	; (8013a98 <USB_SetTurnaroundTime+0x13c>)
 8013a24:	4293      	cmp	r3, r2
 8013a26:	d906      	bls.n	8013a36 <USB_SetTurnaroundTime+0xda>
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	4a1c      	ldr	r2, [pc, #112]	; (8013a9c <USB_SetTurnaroundTime+0x140>)
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d202      	bcs.n	8013a36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013a30:	2307      	movs	r3, #7
 8013a32:	617b      	str	r3, [r7, #20]
 8013a34:	e00a      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013a36:	2306      	movs	r3, #6
 8013a38:	617b      	str	r3, [r7, #20]
 8013a3a:	e007      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013a3c:	79fb      	ldrb	r3, [r7, #7]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d102      	bne.n	8013a48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013a42:	2309      	movs	r3, #9
 8013a44:	617b      	str	r3, [r7, #20]
 8013a46:	e001      	b.n	8013a4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013a48:	2309      	movs	r3, #9
 8013a4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	68db      	ldr	r3, [r3, #12]
 8013a50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	68da      	ldr	r2, [r3, #12]
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	029b      	lsls	r3, r3, #10
 8013a60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013a64:	431a      	orrs	r2, r3
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013a6a:	2300      	movs	r3, #0
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	371c      	adds	r7, #28
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr
 8013a78:	00d8acbf 	.word	0x00d8acbf
 8013a7c:	00e4e1c0 	.word	0x00e4e1c0
 8013a80:	00f42400 	.word	0x00f42400
 8013a84:	01067380 	.word	0x01067380
 8013a88:	011a499f 	.word	0x011a499f
 8013a8c:	01312cff 	.word	0x01312cff
 8013a90:	014ca43f 	.word	0x014ca43f
 8013a94:	016e3600 	.word	0x016e3600
 8013a98:	01a6ab1f 	.word	0x01a6ab1f
 8013a9c:	01e84800 	.word	0x01e84800

08013aa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	b083      	sub	sp, #12
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	689b      	ldr	r3, [r3, #8]
 8013aac:	f043 0201 	orr.w	r2, r3, #1
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013ab4:	2300      	movs	r3, #0
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	370c      	adds	r7, #12
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr

08013ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ac2:	b480      	push	{r7}
 8013ac4:	b083      	sub	sp, #12
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	689b      	ldr	r3, [r3, #8]
 8013ace:	f023 0201 	bic.w	r2, r3, #1
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013ad6:	2300      	movs	r3, #0
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	370c      	adds	r7, #12
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr

08013ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b084      	sub	sp, #16
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	460b      	mov	r3, r1
 8013aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013af0:	2300      	movs	r3, #0
 8013af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013b00:	78fb      	ldrb	r3, [r7, #3]
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	d115      	bne.n	8013b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013b12:	2001      	movs	r0, #1
 8013b14:	f7f7 fafe 	bl	800b114 <HAL_Delay>
      ms++;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f001 fa45 	bl	8014fae <USB_GetMode>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d01e      	beq.n	8013b68 <USB_SetCurrentMode+0x84>
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2b31      	cmp	r3, #49	; 0x31
 8013b2e:	d9f0      	bls.n	8013b12 <USB_SetCurrentMode+0x2e>
 8013b30:	e01a      	b.n	8013b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013b32:	78fb      	ldrb	r3, [r7, #3]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d115      	bne.n	8013b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013b44:	2001      	movs	r0, #1
 8013b46:	f7f7 fae5 	bl	800b114 <HAL_Delay>
      ms++;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f001 fa2c 	bl	8014fae <USB_GetMode>
 8013b56:	4603      	mov	r3, r0
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d005      	beq.n	8013b68 <USB_SetCurrentMode+0x84>
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2b31      	cmp	r3, #49	; 0x31
 8013b60:	d9f0      	bls.n	8013b44 <USB_SetCurrentMode+0x60>
 8013b62:	e001      	b.n	8013b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013b64:	2301      	movs	r3, #1
 8013b66:	e005      	b.n	8013b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	2b32      	cmp	r3, #50	; 0x32
 8013b6c:	d101      	bne.n	8013b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013b6e:	2301      	movs	r3, #1
 8013b70:	e000      	b.n	8013b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013b72:	2300      	movs	r3, #0
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3710      	adds	r7, #16
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013b7c:	b084      	sub	sp, #16
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b086      	sub	sp, #24
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
 8013b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013b96:	2300      	movs	r3, #0
 8013b98:	613b      	str	r3, [r7, #16]
 8013b9a:	e009      	b.n	8013bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	3340      	adds	r3, #64	; 0x40
 8013ba2:	009b      	lsls	r3, r3, #2
 8013ba4:	4413      	add	r3, r2
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	3301      	adds	r3, #1
 8013bae:	613b      	str	r3, [r7, #16]
 8013bb0:	693b      	ldr	r3, [r7, #16]
 8013bb2:	2b0e      	cmp	r3, #14
 8013bb4:	d9f2      	bls.n	8013b9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d11c      	bne.n	8013bf6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	68fa      	ldr	r2, [r7, #12]
 8013bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bca:	f043 0302 	orr.w	r3, r3, #2
 8013bce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013be0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8013bf4:	e00b      	b.n	8013c0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c14:	461a      	mov	r2, r3
 8013c16:	2300      	movs	r3, #0
 8013c18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c20:	4619      	mov	r1, r3
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c28:	461a      	mov	r2, r3
 8013c2a:	680b      	ldr	r3, [r1, #0]
 8013c2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d10c      	bne.n	8013c4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d104      	bne.n	8013c44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013c3a:	2100      	movs	r1, #0
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f000 f965 	bl	8013f0c <USB_SetDevSpeed>
 8013c42:	e008      	b.n	8013c56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013c44:	2101      	movs	r1, #1
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f000 f960 	bl	8013f0c <USB_SetDevSpeed>
 8013c4c:	e003      	b.n	8013c56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013c4e:	2103      	movs	r1, #3
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f000 f95b 	bl	8013f0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013c56:	2110      	movs	r1, #16
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f000 f8f3 	bl	8013e44 <USB_FlushTxFifo>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d001      	beq.n	8013c68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8013c64:	2301      	movs	r3, #1
 8013c66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f000 f91f 	bl	8013eac <USB_FlushRxFifo>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d001      	beq.n	8013c78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8013c74:	2301      	movs	r3, #1
 8013c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c7e:	461a      	mov	r2, r3
 8013c80:	2300      	movs	r3, #0
 8013c82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c96:	461a      	mov	r2, r3
 8013c98:	2300      	movs	r3, #0
 8013c9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	613b      	str	r3, [r7, #16]
 8013ca0:	e043      	b.n	8013d2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013ca2:	693b      	ldr	r3, [r7, #16]
 8013ca4:	015a      	lsls	r2, r3, #5
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	4413      	add	r3, r2
 8013caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cb8:	d118      	bne.n	8013cec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8013cba:	693b      	ldr	r3, [r7, #16]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d10a      	bne.n	8013cd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	015a      	lsls	r2, r3, #5
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ccc:	461a      	mov	r2, r3
 8013cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013cd2:	6013      	str	r3, [r2, #0]
 8013cd4:	e013      	b.n	8013cfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013cd6:	693b      	ldr	r3, [r7, #16]
 8013cd8:	015a      	lsls	r2, r3, #5
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	4413      	add	r3, r2
 8013cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013ce8:	6013      	str	r3, [r2, #0]
 8013cea:	e008      	b.n	8013cfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	015a      	lsls	r2, r3, #5
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	4413      	add	r3, r2
 8013cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cf8:	461a      	mov	r2, r3
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	015a      	lsls	r2, r3, #5
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	4413      	add	r3, r2
 8013d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	015a      	lsls	r2, r3, #5
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	4413      	add	r3, r2
 8013d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	3301      	adds	r3, #1
 8013d28:	613b      	str	r3, [r7, #16]
 8013d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2c:	693a      	ldr	r2, [r7, #16]
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d3b7      	bcc.n	8013ca2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d32:	2300      	movs	r3, #0
 8013d34:	613b      	str	r3, [r7, #16]
 8013d36:	e043      	b.n	8013dc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	015a      	lsls	r2, r3, #5
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	4413      	add	r3, r2
 8013d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d4e:	d118      	bne.n	8013d82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d10a      	bne.n	8013d6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	015a      	lsls	r2, r3, #5
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d62:	461a      	mov	r2, r3
 8013d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013d68:	6013      	str	r3, [r2, #0]
 8013d6a:	e013      	b.n	8013d94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	015a      	lsls	r2, r3, #5
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	4413      	add	r3, r2
 8013d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d78:	461a      	mov	r2, r3
 8013d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013d7e:	6013      	str	r3, [r2, #0]
 8013d80:	e008      	b.n	8013d94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	015a      	lsls	r2, r3, #5
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	4413      	add	r3, r2
 8013d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d8e:	461a      	mov	r2, r3
 8013d90:	2300      	movs	r3, #0
 8013d92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013d94:	693b      	ldr	r3, [r7, #16]
 8013d96:	015a      	lsls	r2, r3, #5
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	4413      	add	r3, r2
 8013d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013da0:	461a      	mov	r2, r3
 8013da2:	2300      	movs	r3, #0
 8013da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	015a      	lsls	r2, r3, #5
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	4413      	add	r3, r2
 8013dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013db2:	461a      	mov	r2, r3
 8013db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013db8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	613b      	str	r3, [r7, #16]
 8013dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc2:	693a      	ldr	r2, [r7, #16]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d3b7      	bcc.n	8013d38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dce:	691b      	ldr	r3, [r3, #16]
 8013dd0:	68fa      	ldr	r2, [r7, #12]
 8013dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013dda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013de8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d105      	bne.n	8013dfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	699b      	ldr	r3, [r3, #24]
 8013df4:	f043 0210 	orr.w	r2, r3, #16
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	699a      	ldr	r2, [r3, #24]
 8013e00:	4b0f      	ldr	r3, [pc, #60]	; (8013e40 <USB_DevInit+0x2c4>)
 8013e02:	4313      	orrs	r3, r2
 8013e04:	687a      	ldr	r2, [r7, #4]
 8013e06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d005      	beq.n	8013e1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	699b      	ldr	r3, [r3, #24]
 8013e12:	f043 0208 	orr.w	r2, r3, #8
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e1c:	2b01      	cmp	r3, #1
 8013e1e:	d107      	bne.n	8013e30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	699b      	ldr	r3, [r3, #24]
 8013e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e28:	f043 0304 	orr.w	r3, r3, #4
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3718      	adds	r7, #24
 8013e36:	46bd      	mov	sp, r7
 8013e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013e3c:	b004      	add	sp, #16
 8013e3e:	4770      	bx	lr
 8013e40:	803c3800 	.word	0x803c3800

08013e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013e44:	b480      	push	{r7}
 8013e46:	b085      	sub	sp, #20
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	3301      	adds	r3, #1
 8013e56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	4a13      	ldr	r2, [pc, #76]	; (8013ea8 <USB_FlushTxFifo+0x64>)
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	d901      	bls.n	8013e64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013e60:	2303      	movs	r3, #3
 8013e62:	e01b      	b.n	8013e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	691b      	ldr	r3, [r3, #16]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	daf2      	bge.n	8013e52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	019b      	lsls	r3, r3, #6
 8013e74:	f043 0220 	orr.w	r2, r3, #32
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	3301      	adds	r3, #1
 8013e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	4a08      	ldr	r2, [pc, #32]	; (8013ea8 <USB_FlushTxFifo+0x64>)
 8013e86:	4293      	cmp	r3, r2
 8013e88:	d901      	bls.n	8013e8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013e8a:	2303      	movs	r3, #3
 8013e8c:	e006      	b.n	8013e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	691b      	ldr	r3, [r3, #16]
 8013e92:	f003 0320 	and.w	r3, r3, #32
 8013e96:	2b20      	cmp	r3, #32
 8013e98:	d0f0      	beq.n	8013e7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013e9a:	2300      	movs	r3, #0
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3714      	adds	r7, #20
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr
 8013ea8:	00030d40 	.word	0x00030d40

08013eac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013eac:	b480      	push	{r7}
 8013eae:	b085      	sub	sp, #20
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	3301      	adds	r3, #1
 8013ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	4a11      	ldr	r2, [pc, #68]	; (8013f08 <USB_FlushRxFifo+0x5c>)
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	d901      	bls.n	8013eca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013ec6:	2303      	movs	r3, #3
 8013ec8:	e018      	b.n	8013efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	691b      	ldr	r3, [r3, #16]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	daf2      	bge.n	8013eb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2210      	movs	r2, #16
 8013eda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	3301      	adds	r3, #1
 8013ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	4a08      	ldr	r2, [pc, #32]	; (8013f08 <USB_FlushRxFifo+0x5c>)
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d901      	bls.n	8013eee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013eea:	2303      	movs	r3, #3
 8013eec:	e006      	b.n	8013efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	691b      	ldr	r3, [r3, #16]
 8013ef2:	f003 0310 	and.w	r3, r3, #16
 8013ef6:	2b10      	cmp	r3, #16
 8013ef8:	d0f0      	beq.n	8013edc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013efa:	2300      	movs	r3, #0
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3714      	adds	r7, #20
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr
 8013f08:	00030d40 	.word	0x00030d40

08013f0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b085      	sub	sp, #20
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	460b      	mov	r3, r1
 8013f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	78fb      	ldrb	r3, [r7, #3]
 8013f26:	68f9      	ldr	r1, [r7, #12]
 8013f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f2c:	4313      	orrs	r3, r2
 8013f2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013f30:	2300      	movs	r3, #0
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	3714      	adds	r7, #20
 8013f36:	46bd      	mov	sp, r7
 8013f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3c:	4770      	bx	lr

08013f3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013f3e:	b480      	push	{r7}
 8013f40:	b087      	sub	sp, #28
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f50:	689b      	ldr	r3, [r3, #8]
 8013f52:	f003 0306 	and.w	r3, r3, #6
 8013f56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d102      	bne.n	8013f64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	75fb      	strb	r3, [r7, #23]
 8013f62:	e00a      	b.n	8013f7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2b02      	cmp	r3, #2
 8013f68:	d002      	beq.n	8013f70 <USB_GetDevSpeed+0x32>
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2b06      	cmp	r3, #6
 8013f6e:	d102      	bne.n	8013f76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013f70:	2302      	movs	r3, #2
 8013f72:	75fb      	strb	r3, [r7, #23]
 8013f74:	e001      	b.n	8013f7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013f76:	230f      	movs	r3, #15
 8013f78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	371c      	adds	r7, #28
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr

08013f88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f88:	b480      	push	{r7}
 8013f8a:	b085      	sub	sp, #20
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	785b      	ldrb	r3, [r3, #1]
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	d13a      	bne.n	801401a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013faa:	69da      	ldr	r2, [r3, #28]
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	f003 030f 	and.w	r3, r3, #15
 8013fb4:	2101      	movs	r1, #1
 8013fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	68f9      	ldr	r1, [r7, #12]
 8013fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013fc2:	4313      	orrs	r3, r2
 8013fc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	015a      	lsls	r2, r3, #5
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	4413      	add	r3, r2
 8013fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d155      	bne.n	8014088 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	015a      	lsls	r2, r3, #5
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	4413      	add	r3, r2
 8013fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fe8:	681a      	ldr	r2, [r3, #0]
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	791b      	ldrb	r3, [r3, #4]
 8013ff6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013ff8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	059b      	lsls	r3, r3, #22
 8013ffe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014000:	4313      	orrs	r3, r2
 8014002:	68ba      	ldr	r2, [r7, #8]
 8014004:	0151      	lsls	r1, r2, #5
 8014006:	68fa      	ldr	r2, [r7, #12]
 8014008:	440a      	add	r2, r1
 801400a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014016:	6013      	str	r3, [r2, #0]
 8014018:	e036      	b.n	8014088 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014020:	69da      	ldr	r2, [r3, #28]
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	f003 030f 	and.w	r3, r3, #15
 801402a:	2101      	movs	r1, #1
 801402c:	fa01 f303 	lsl.w	r3, r1, r3
 8014030:	041b      	lsls	r3, r3, #16
 8014032:	68f9      	ldr	r1, [r7, #12]
 8014034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014038:	4313      	orrs	r3, r2
 801403a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	015a      	lsls	r2, r3, #5
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	4413      	add	r3, r2
 8014044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801404e:	2b00      	cmp	r3, #0
 8014050:	d11a      	bne.n	8014088 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	015a      	lsls	r2, r3, #5
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	4413      	add	r3, r2
 801405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	68db      	ldr	r3, [r3, #12]
 8014064:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	791b      	ldrb	r3, [r3, #4]
 801406c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801406e:	430b      	orrs	r3, r1
 8014070:	4313      	orrs	r3, r2
 8014072:	68ba      	ldr	r2, [r7, #8]
 8014074:	0151      	lsls	r1, r2, #5
 8014076:	68fa      	ldr	r2, [r7, #12]
 8014078:	440a      	add	r2, r1
 801407a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801407e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014086:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014088:	2300      	movs	r3, #0
}
 801408a:	4618      	mov	r0, r3
 801408c:	3714      	adds	r7, #20
 801408e:	46bd      	mov	sp, r7
 8014090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014094:	4770      	bx	lr
	...

08014098 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014098:	b480      	push	{r7}
 801409a:	b085      	sub	sp, #20
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
 80140a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	785b      	ldrb	r3, [r3, #1]
 80140b0:	2b01      	cmp	r3, #1
 80140b2:	d161      	bne.n	8014178 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	015a      	lsls	r2, r3, #5
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	4413      	add	r3, r2
 80140bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80140ca:	d11f      	bne.n	801410c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	015a      	lsls	r2, r3, #5
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	4413      	add	r3, r2
 80140d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	68ba      	ldr	r2, [r7, #8]
 80140dc:	0151      	lsls	r1, r2, #5
 80140de:	68fa      	ldr	r2, [r7, #12]
 80140e0:	440a      	add	r2, r1
 80140e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80140ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	015a      	lsls	r2, r3, #5
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	4413      	add	r3, r2
 80140f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	68ba      	ldr	r2, [r7, #8]
 80140fc:	0151      	lsls	r1, r2, #5
 80140fe:	68fa      	ldr	r2, [r7, #12]
 8014100:	440a      	add	r2, r1
 8014102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801410a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014114:	683b      	ldr	r3, [r7, #0]
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	f003 030f 	and.w	r3, r3, #15
 801411c:	2101      	movs	r1, #1
 801411e:	fa01 f303 	lsl.w	r3, r1, r3
 8014122:	b29b      	uxth	r3, r3
 8014124:	43db      	mvns	r3, r3
 8014126:	68f9      	ldr	r1, [r7, #12]
 8014128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801412c:	4013      	ands	r3, r2
 801412e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014136:	69da      	ldr	r2, [r3, #28]
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	f003 030f 	and.w	r3, r3, #15
 8014140:	2101      	movs	r1, #1
 8014142:	fa01 f303 	lsl.w	r3, r1, r3
 8014146:	b29b      	uxth	r3, r3
 8014148:	43db      	mvns	r3, r3
 801414a:	68f9      	ldr	r1, [r7, #12]
 801414c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014150:	4013      	ands	r3, r2
 8014152:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	015a      	lsls	r2, r3, #5
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	4413      	add	r3, r2
 801415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	0159      	lsls	r1, r3, #5
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	440b      	add	r3, r1
 801416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801416e:	4619      	mov	r1, r3
 8014170:	4b35      	ldr	r3, [pc, #212]	; (8014248 <USB_DeactivateEndpoint+0x1b0>)
 8014172:	4013      	ands	r3, r2
 8014174:	600b      	str	r3, [r1, #0]
 8014176:	e060      	b.n	801423a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	015a      	lsls	r2, r3, #5
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	4413      	add	r3, r2
 8014180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801418a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801418e:	d11f      	bne.n	80141d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	015a      	lsls	r2, r3, #5
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	4413      	add	r3, r2
 8014198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	68ba      	ldr	r2, [r7, #8]
 80141a0:	0151      	lsls	r1, r2, #5
 80141a2:	68fa      	ldr	r2, [r7, #12]
 80141a4:	440a      	add	r2, r1
 80141a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80141ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	015a      	lsls	r2, r3, #5
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	4413      	add	r3, r2
 80141b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	68ba      	ldr	r2, [r7, #8]
 80141c0:	0151      	lsls	r1, r2, #5
 80141c2:	68fa      	ldr	r2, [r7, #12]
 80141c4:	440a      	add	r2, r1
 80141c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80141ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	f003 030f 	and.w	r3, r3, #15
 80141e0:	2101      	movs	r1, #1
 80141e2:	fa01 f303 	lsl.w	r3, r1, r3
 80141e6:	041b      	lsls	r3, r3, #16
 80141e8:	43db      	mvns	r3, r3
 80141ea:	68f9      	ldr	r1, [r7, #12]
 80141ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141f0:	4013      	ands	r3, r2
 80141f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141fa:	69da      	ldr	r2, [r3, #28]
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	f003 030f 	and.w	r3, r3, #15
 8014204:	2101      	movs	r1, #1
 8014206:	fa01 f303 	lsl.w	r3, r1, r3
 801420a:	041b      	lsls	r3, r3, #16
 801420c:	43db      	mvns	r3, r3
 801420e:	68f9      	ldr	r1, [r7, #12]
 8014210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014214:	4013      	ands	r3, r2
 8014216:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	015a      	lsls	r2, r3, #5
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	4413      	add	r3, r2
 8014220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014224:	681a      	ldr	r2, [r3, #0]
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	0159      	lsls	r1, r3, #5
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	440b      	add	r3, r1
 801422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014232:	4619      	mov	r1, r3
 8014234:	4b05      	ldr	r3, [pc, #20]	; (801424c <USB_DeactivateEndpoint+0x1b4>)
 8014236:	4013      	ands	r3, r2
 8014238:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801423a:	2300      	movs	r3, #0
}
 801423c:	4618      	mov	r0, r3
 801423e:	3714      	adds	r7, #20
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr
 8014248:	ec337800 	.word	0xec337800
 801424c:	eff37800 	.word	0xeff37800

08014250 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b08a      	sub	sp, #40	; 0x28
 8014254:	af02      	add	r7, sp, #8
 8014256:	60f8      	str	r0, [r7, #12]
 8014258:	60b9      	str	r1, [r7, #8]
 801425a:	4613      	mov	r3, r2
 801425c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	785b      	ldrb	r3, [r3, #1]
 801426c:	2b01      	cmp	r3, #1
 801426e:	f040 815c 	bne.w	801452a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	699b      	ldr	r3, [r3, #24]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d132      	bne.n	80142e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801427a:	69bb      	ldr	r3, [r7, #24]
 801427c:	015a      	lsls	r2, r3, #5
 801427e:	69fb      	ldr	r3, [r7, #28]
 8014280:	4413      	add	r3, r2
 8014282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014286:	691b      	ldr	r3, [r3, #16]
 8014288:	69ba      	ldr	r2, [r7, #24]
 801428a:	0151      	lsls	r1, r2, #5
 801428c:	69fa      	ldr	r2, [r7, #28]
 801428e:	440a      	add	r2, r1
 8014290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801429c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801429e:	69bb      	ldr	r3, [r7, #24]
 80142a0:	015a      	lsls	r2, r3, #5
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	4413      	add	r3, r2
 80142a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142aa:	691b      	ldr	r3, [r3, #16]
 80142ac:	69ba      	ldr	r2, [r7, #24]
 80142ae:	0151      	lsls	r1, r2, #5
 80142b0:	69fa      	ldr	r2, [r7, #28]
 80142b2:	440a      	add	r2, r1
 80142b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80142bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80142be:	69bb      	ldr	r3, [r7, #24]
 80142c0:	015a      	lsls	r2, r3, #5
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	4413      	add	r3, r2
 80142c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142ca:	691b      	ldr	r3, [r3, #16]
 80142cc:	69ba      	ldr	r2, [r7, #24]
 80142ce:	0151      	lsls	r1, r2, #5
 80142d0:	69fa      	ldr	r2, [r7, #28]
 80142d2:	440a      	add	r2, r1
 80142d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142d8:	0cdb      	lsrs	r3, r3, #19
 80142da:	04db      	lsls	r3, r3, #19
 80142dc:	6113      	str	r3, [r2, #16]
 80142de:	e074      	b.n	80143ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80142e0:	69bb      	ldr	r3, [r7, #24]
 80142e2:	015a      	lsls	r2, r3, #5
 80142e4:	69fb      	ldr	r3, [r7, #28]
 80142e6:	4413      	add	r3, r2
 80142e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142ec:	691b      	ldr	r3, [r3, #16]
 80142ee:	69ba      	ldr	r2, [r7, #24]
 80142f0:	0151      	lsls	r1, r2, #5
 80142f2:	69fa      	ldr	r2, [r7, #28]
 80142f4:	440a      	add	r2, r1
 80142f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142fa:	0cdb      	lsrs	r3, r3, #19
 80142fc:	04db      	lsls	r3, r3, #19
 80142fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	015a      	lsls	r2, r3, #5
 8014304:	69fb      	ldr	r3, [r7, #28]
 8014306:	4413      	add	r3, r2
 8014308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801430c:	691b      	ldr	r3, [r3, #16]
 801430e:	69ba      	ldr	r2, [r7, #24]
 8014310:	0151      	lsls	r1, r2, #5
 8014312:	69fa      	ldr	r2, [r7, #28]
 8014314:	440a      	add	r2, r1
 8014316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801431a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801431e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014324:	69bb      	ldr	r3, [r7, #24]
 8014326:	015a      	lsls	r2, r3, #5
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	4413      	add	r3, r2
 801432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014330:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	6999      	ldr	r1, [r3, #24]
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	68db      	ldr	r3, [r3, #12]
 801433a:	440b      	add	r3, r1
 801433c:	1e59      	subs	r1, r3, #1
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	68db      	ldr	r3, [r3, #12]
 8014342:	fbb1 f3f3 	udiv	r3, r1, r3
 8014346:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014348:	4b9d      	ldr	r3, [pc, #628]	; (80145c0 <USB_EPStartXfer+0x370>)
 801434a:	400b      	ands	r3, r1
 801434c:	69b9      	ldr	r1, [r7, #24]
 801434e:	0148      	lsls	r0, r1, #5
 8014350:	69f9      	ldr	r1, [r7, #28]
 8014352:	4401      	add	r1, r0
 8014354:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014358:	4313      	orrs	r3, r2
 801435a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	015a      	lsls	r2, r3, #5
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	4413      	add	r3, r2
 8014364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014368:	691a      	ldr	r2, [r3, #16]
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	699b      	ldr	r3, [r3, #24]
 801436e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014372:	69b9      	ldr	r1, [r7, #24]
 8014374:	0148      	lsls	r0, r1, #5
 8014376:	69f9      	ldr	r1, [r7, #28]
 8014378:	4401      	add	r1, r0
 801437a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801437e:	4313      	orrs	r3, r2
 8014380:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	791b      	ldrb	r3, [r3, #4]
 8014386:	2b01      	cmp	r3, #1
 8014388:	d11f      	bne.n	80143ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801438a:	69bb      	ldr	r3, [r7, #24]
 801438c:	015a      	lsls	r2, r3, #5
 801438e:	69fb      	ldr	r3, [r7, #28]
 8014390:	4413      	add	r3, r2
 8014392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014396:	691b      	ldr	r3, [r3, #16]
 8014398:	69ba      	ldr	r2, [r7, #24]
 801439a:	0151      	lsls	r1, r2, #5
 801439c:	69fa      	ldr	r2, [r7, #28]
 801439e:	440a      	add	r2, r1
 80143a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80143a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	015a      	lsls	r2, r3, #5
 80143ae:	69fb      	ldr	r3, [r7, #28]
 80143b0:	4413      	add	r3, r2
 80143b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143b6:	691b      	ldr	r3, [r3, #16]
 80143b8:	69ba      	ldr	r2, [r7, #24]
 80143ba:	0151      	lsls	r1, r2, #5
 80143bc:	69fa      	ldr	r2, [r7, #28]
 80143be:	440a      	add	r2, r1
 80143c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80143c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80143ca:	79fb      	ldrb	r3, [r7, #7]
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d14b      	bne.n	8014468 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	695b      	ldr	r3, [r3, #20]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d009      	beq.n	80143ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80143d8:	69bb      	ldr	r3, [r7, #24]
 80143da:	015a      	lsls	r2, r3, #5
 80143dc:	69fb      	ldr	r3, [r7, #28]
 80143de:	4413      	add	r3, r2
 80143e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143e4:	461a      	mov	r2, r3
 80143e6:	68bb      	ldr	r3, [r7, #8]
 80143e8:	695b      	ldr	r3, [r3, #20]
 80143ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	791b      	ldrb	r3, [r3, #4]
 80143f0:	2b01      	cmp	r3, #1
 80143f2:	d128      	bne.n	8014446 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80143f4:	69fb      	ldr	r3, [r7, #28]
 80143f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143fa:	689b      	ldr	r3, [r3, #8]
 80143fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014400:	2b00      	cmp	r3, #0
 8014402:	d110      	bne.n	8014426 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014404:	69bb      	ldr	r3, [r7, #24]
 8014406:	015a      	lsls	r2, r3, #5
 8014408:	69fb      	ldr	r3, [r7, #28]
 801440a:	4413      	add	r3, r2
 801440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	69ba      	ldr	r2, [r7, #24]
 8014414:	0151      	lsls	r1, r2, #5
 8014416:	69fa      	ldr	r2, [r7, #28]
 8014418:	440a      	add	r2, r1
 801441a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801441e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014422:	6013      	str	r3, [r2, #0]
 8014424:	e00f      	b.n	8014446 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014426:	69bb      	ldr	r3, [r7, #24]
 8014428:	015a      	lsls	r2, r3, #5
 801442a:	69fb      	ldr	r3, [r7, #28]
 801442c:	4413      	add	r3, r2
 801442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	69ba      	ldr	r2, [r7, #24]
 8014436:	0151      	lsls	r1, r2, #5
 8014438:	69fa      	ldr	r2, [r7, #28]
 801443a:	440a      	add	r2, r1
 801443c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014444:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	015a      	lsls	r2, r3, #5
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	4413      	add	r3, r2
 801444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	69ba      	ldr	r2, [r7, #24]
 8014456:	0151      	lsls	r1, r2, #5
 8014458:	69fa      	ldr	r2, [r7, #28]
 801445a:	440a      	add	r2, r1
 801445c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014464:	6013      	str	r3, [r2, #0]
 8014466:	e133      	b.n	80146d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014468:	69bb      	ldr	r3, [r7, #24]
 801446a:	015a      	lsls	r2, r3, #5
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	4413      	add	r3, r2
 8014470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	69ba      	ldr	r2, [r7, #24]
 8014478:	0151      	lsls	r1, r2, #5
 801447a:	69fa      	ldr	r2, [r7, #28]
 801447c:	440a      	add	r2, r1
 801447e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014482:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014486:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	791b      	ldrb	r3, [r3, #4]
 801448c:	2b01      	cmp	r3, #1
 801448e:	d015      	beq.n	80144bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014490:	68bb      	ldr	r3, [r7, #8]
 8014492:	699b      	ldr	r3, [r3, #24]
 8014494:	2b00      	cmp	r3, #0
 8014496:	f000 811b 	beq.w	80146d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801449a:	69fb      	ldr	r3, [r7, #28]
 801449c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	f003 030f 	and.w	r3, r3, #15
 80144aa:	2101      	movs	r1, #1
 80144ac:	fa01 f303 	lsl.w	r3, r1, r3
 80144b0:	69f9      	ldr	r1, [r7, #28]
 80144b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80144b6:	4313      	orrs	r3, r2
 80144b8:	634b      	str	r3, [r1, #52]	; 0x34
 80144ba:	e109      	b.n	80146d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144c2:	689b      	ldr	r3, [r3, #8]
 80144c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d110      	bne.n	80144ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80144cc:	69bb      	ldr	r3, [r7, #24]
 80144ce:	015a      	lsls	r2, r3, #5
 80144d0:	69fb      	ldr	r3, [r7, #28]
 80144d2:	4413      	add	r3, r2
 80144d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	69ba      	ldr	r2, [r7, #24]
 80144dc:	0151      	lsls	r1, r2, #5
 80144de:	69fa      	ldr	r2, [r7, #28]
 80144e0:	440a      	add	r2, r1
 80144e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80144ea:	6013      	str	r3, [r2, #0]
 80144ec:	e00f      	b.n	801450e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80144ee:	69bb      	ldr	r3, [r7, #24]
 80144f0:	015a      	lsls	r2, r3, #5
 80144f2:	69fb      	ldr	r3, [r7, #28]
 80144f4:	4413      	add	r3, r2
 80144f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	69ba      	ldr	r2, [r7, #24]
 80144fe:	0151      	lsls	r1, r2, #5
 8014500:	69fa      	ldr	r2, [r7, #28]
 8014502:	440a      	add	r2, r1
 8014504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801450c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	6919      	ldr	r1, [r3, #16]
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	781a      	ldrb	r2, [r3, #0]
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	699b      	ldr	r3, [r3, #24]
 801451a:	b298      	uxth	r0, r3
 801451c:	79fb      	ldrb	r3, [r7, #7]
 801451e:	9300      	str	r3, [sp, #0]
 8014520:	4603      	mov	r3, r0
 8014522:	68f8      	ldr	r0, [r7, #12]
 8014524:	f000 fade 	bl	8014ae4 <USB_WritePacket>
 8014528:	e0d2      	b.n	80146d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801452a:	69bb      	ldr	r3, [r7, #24]
 801452c:	015a      	lsls	r2, r3, #5
 801452e:	69fb      	ldr	r3, [r7, #28]
 8014530:	4413      	add	r3, r2
 8014532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014536:	691b      	ldr	r3, [r3, #16]
 8014538:	69ba      	ldr	r2, [r7, #24]
 801453a:	0151      	lsls	r1, r2, #5
 801453c:	69fa      	ldr	r2, [r7, #28]
 801453e:	440a      	add	r2, r1
 8014540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014544:	0cdb      	lsrs	r3, r3, #19
 8014546:	04db      	lsls	r3, r3, #19
 8014548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801454a:	69bb      	ldr	r3, [r7, #24]
 801454c:	015a      	lsls	r2, r3, #5
 801454e:	69fb      	ldr	r3, [r7, #28]
 8014550:	4413      	add	r3, r2
 8014552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014556:	691b      	ldr	r3, [r3, #16]
 8014558:	69ba      	ldr	r2, [r7, #24]
 801455a:	0151      	lsls	r1, r2, #5
 801455c:	69fa      	ldr	r2, [r7, #28]
 801455e:	440a      	add	r2, r1
 8014560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801456c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	699b      	ldr	r3, [r3, #24]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d126      	bne.n	80145c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	015a      	lsls	r2, r3, #5
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	4413      	add	r3, r2
 801457e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014582:	691a      	ldr	r2, [r3, #16]
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	68db      	ldr	r3, [r3, #12]
 8014588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801458c:	69b9      	ldr	r1, [r7, #24]
 801458e:	0148      	lsls	r0, r1, #5
 8014590:	69f9      	ldr	r1, [r7, #28]
 8014592:	4401      	add	r1, r0
 8014594:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014598:	4313      	orrs	r3, r2
 801459a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801459c:	69bb      	ldr	r3, [r7, #24]
 801459e:	015a      	lsls	r2, r3, #5
 80145a0:	69fb      	ldr	r3, [r7, #28]
 80145a2:	4413      	add	r3, r2
 80145a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145a8:	691b      	ldr	r3, [r3, #16]
 80145aa:	69ba      	ldr	r2, [r7, #24]
 80145ac:	0151      	lsls	r1, r2, #5
 80145ae:	69fa      	ldr	r2, [r7, #28]
 80145b0:	440a      	add	r2, r1
 80145b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80145ba:	6113      	str	r3, [r2, #16]
 80145bc:	e03a      	b.n	8014634 <USB_EPStartXfer+0x3e4>
 80145be:	bf00      	nop
 80145c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	699a      	ldr	r2, [r3, #24]
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	68db      	ldr	r3, [r3, #12]
 80145cc:	4413      	add	r3, r2
 80145ce:	1e5a      	subs	r2, r3, #1
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80145d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	8afa      	ldrh	r2, [r7, #22]
 80145e0:	fb03 f202 	mul.w	r2, r3, r2
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	015a      	lsls	r2, r3, #5
 80145ec:	69fb      	ldr	r3, [r7, #28]
 80145ee:	4413      	add	r3, r2
 80145f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145f4:	691a      	ldr	r2, [r3, #16]
 80145f6:	8afb      	ldrh	r3, [r7, #22]
 80145f8:	04d9      	lsls	r1, r3, #19
 80145fa:	4b38      	ldr	r3, [pc, #224]	; (80146dc <USB_EPStartXfer+0x48c>)
 80145fc:	400b      	ands	r3, r1
 80145fe:	69b9      	ldr	r1, [r7, #24]
 8014600:	0148      	lsls	r0, r1, #5
 8014602:	69f9      	ldr	r1, [r7, #28]
 8014604:	4401      	add	r1, r0
 8014606:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801460a:	4313      	orrs	r3, r2
 801460c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801460e:	69bb      	ldr	r3, [r7, #24]
 8014610:	015a      	lsls	r2, r3, #5
 8014612:	69fb      	ldr	r3, [r7, #28]
 8014614:	4413      	add	r3, r2
 8014616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801461a:	691a      	ldr	r2, [r3, #16]
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	69db      	ldr	r3, [r3, #28]
 8014620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014624:	69b9      	ldr	r1, [r7, #24]
 8014626:	0148      	lsls	r0, r1, #5
 8014628:	69f9      	ldr	r1, [r7, #28]
 801462a:	4401      	add	r1, r0
 801462c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014630:	4313      	orrs	r3, r2
 8014632:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014634:	79fb      	ldrb	r3, [r7, #7]
 8014636:	2b01      	cmp	r3, #1
 8014638:	d10d      	bne.n	8014656 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	691b      	ldr	r3, [r3, #16]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d009      	beq.n	8014656 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	6919      	ldr	r1, [r3, #16]
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	015a      	lsls	r2, r3, #5
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	4413      	add	r3, r2
 801464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014652:	460a      	mov	r2, r1
 8014654:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	791b      	ldrb	r3, [r3, #4]
 801465a:	2b01      	cmp	r3, #1
 801465c:	d128      	bne.n	80146b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801465e:	69fb      	ldr	r3, [r7, #28]
 8014660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014664:	689b      	ldr	r3, [r3, #8]
 8014666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801466a:	2b00      	cmp	r3, #0
 801466c:	d110      	bne.n	8014690 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801466e:	69bb      	ldr	r3, [r7, #24]
 8014670:	015a      	lsls	r2, r3, #5
 8014672:	69fb      	ldr	r3, [r7, #28]
 8014674:	4413      	add	r3, r2
 8014676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	69ba      	ldr	r2, [r7, #24]
 801467e:	0151      	lsls	r1, r2, #5
 8014680:	69fa      	ldr	r2, [r7, #28]
 8014682:	440a      	add	r2, r1
 8014684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801468c:	6013      	str	r3, [r2, #0]
 801468e:	e00f      	b.n	80146b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	015a      	lsls	r2, r3, #5
 8014694:	69fb      	ldr	r3, [r7, #28]
 8014696:	4413      	add	r3, r2
 8014698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	69ba      	ldr	r2, [r7, #24]
 80146a0:	0151      	lsls	r1, r2, #5
 80146a2:	69fa      	ldr	r2, [r7, #28]
 80146a4:	440a      	add	r2, r1
 80146a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	015a      	lsls	r2, r3, #5
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	4413      	add	r3, r2
 80146b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	69ba      	ldr	r2, [r7, #24]
 80146c0:	0151      	lsls	r1, r2, #5
 80146c2:	69fa      	ldr	r2, [r7, #28]
 80146c4:	440a      	add	r2, r1
 80146c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80146ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80146d0:	2300      	movs	r3, #0
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	3720      	adds	r7, #32
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
 80146da:	bf00      	nop
 80146dc:	1ff80000 	.word	0x1ff80000

080146e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80146e0:	b480      	push	{r7}
 80146e2:	b087      	sub	sp, #28
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	60f8      	str	r0, [r7, #12]
 80146e8:	60b9      	str	r1, [r7, #8]
 80146ea:	4613      	mov	r3, r2
 80146ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	781b      	ldrb	r3, [r3, #0]
 80146f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	785b      	ldrb	r3, [r3, #1]
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	f040 80ce 	bne.w	801489e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	699b      	ldr	r3, [r3, #24]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d132      	bne.n	8014770 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	015a      	lsls	r2, r3, #5
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	4413      	add	r3, r2
 8014712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014716:	691b      	ldr	r3, [r3, #16]
 8014718:	693a      	ldr	r2, [r7, #16]
 801471a:	0151      	lsls	r1, r2, #5
 801471c:	697a      	ldr	r2, [r7, #20]
 801471e:	440a      	add	r2, r1
 8014720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014724:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014728:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801472c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	015a      	lsls	r2, r3, #5
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	4413      	add	r3, r2
 8014736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801473a:	691b      	ldr	r3, [r3, #16]
 801473c:	693a      	ldr	r2, [r7, #16]
 801473e:	0151      	lsls	r1, r2, #5
 8014740:	697a      	ldr	r2, [r7, #20]
 8014742:	440a      	add	r2, r1
 8014744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801474c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	015a      	lsls	r2, r3, #5
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	4413      	add	r3, r2
 8014756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801475a:	691b      	ldr	r3, [r3, #16]
 801475c:	693a      	ldr	r2, [r7, #16]
 801475e:	0151      	lsls	r1, r2, #5
 8014760:	697a      	ldr	r2, [r7, #20]
 8014762:	440a      	add	r2, r1
 8014764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014768:	0cdb      	lsrs	r3, r3, #19
 801476a:	04db      	lsls	r3, r3, #19
 801476c:	6113      	str	r3, [r2, #16]
 801476e:	e04e      	b.n	801480e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	015a      	lsls	r2, r3, #5
 8014774:	697b      	ldr	r3, [r7, #20]
 8014776:	4413      	add	r3, r2
 8014778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801477c:	691b      	ldr	r3, [r3, #16]
 801477e:	693a      	ldr	r2, [r7, #16]
 8014780:	0151      	lsls	r1, r2, #5
 8014782:	697a      	ldr	r2, [r7, #20]
 8014784:	440a      	add	r2, r1
 8014786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801478a:	0cdb      	lsrs	r3, r3, #19
 801478c:	04db      	lsls	r3, r3, #19
 801478e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	015a      	lsls	r2, r3, #5
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	4413      	add	r3, r2
 8014798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801479c:	691b      	ldr	r3, [r3, #16]
 801479e:	693a      	ldr	r2, [r7, #16]
 80147a0:	0151      	lsls	r1, r2, #5
 80147a2:	697a      	ldr	r2, [r7, #20]
 80147a4:	440a      	add	r2, r1
 80147a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80147ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80147b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	699a      	ldr	r2, [r3, #24]
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	68db      	ldr	r3, [r3, #12]
 80147bc:	429a      	cmp	r2, r3
 80147be:	d903      	bls.n	80147c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	68da      	ldr	r2, [r3, #12]
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	015a      	lsls	r2, r3, #5
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	4413      	add	r3, r2
 80147d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147d4:	691b      	ldr	r3, [r3, #16]
 80147d6:	693a      	ldr	r2, [r7, #16]
 80147d8:	0151      	lsls	r1, r2, #5
 80147da:	697a      	ldr	r2, [r7, #20]
 80147dc:	440a      	add	r2, r1
 80147de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80147e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	015a      	lsls	r2, r3, #5
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	4413      	add	r3, r2
 80147f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147f4:	691a      	ldr	r2, [r3, #16]
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	699b      	ldr	r3, [r3, #24]
 80147fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80147fe:	6939      	ldr	r1, [r7, #16]
 8014800:	0148      	lsls	r0, r1, #5
 8014802:	6979      	ldr	r1, [r7, #20]
 8014804:	4401      	add	r1, r0
 8014806:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801480a:	4313      	orrs	r3, r2
 801480c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801480e:	79fb      	ldrb	r3, [r7, #7]
 8014810:	2b01      	cmp	r3, #1
 8014812:	d11e      	bne.n	8014852 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	695b      	ldr	r3, [r3, #20]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d009      	beq.n	8014830 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	015a      	lsls	r2, r3, #5
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	4413      	add	r3, r2
 8014824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014828:	461a      	mov	r2, r3
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	695b      	ldr	r3, [r3, #20]
 801482e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	015a      	lsls	r2, r3, #5
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	4413      	add	r3, r2
 8014838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	693a      	ldr	r2, [r7, #16]
 8014840:	0151      	lsls	r1, r2, #5
 8014842:	697a      	ldr	r2, [r7, #20]
 8014844:	440a      	add	r2, r1
 8014846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801484a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801484e:	6013      	str	r3, [r2, #0]
 8014850:	e097      	b.n	8014982 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	015a      	lsls	r2, r3, #5
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	4413      	add	r3, r2
 801485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	693a      	ldr	r2, [r7, #16]
 8014862:	0151      	lsls	r1, r2, #5
 8014864:	697a      	ldr	r2, [r7, #20]
 8014866:	440a      	add	r2, r1
 8014868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801486c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014870:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	699b      	ldr	r3, [r3, #24]
 8014876:	2b00      	cmp	r3, #0
 8014878:	f000 8083 	beq.w	8014982 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	f003 030f 	and.w	r3, r3, #15
 801488c:	2101      	movs	r1, #1
 801488e:	fa01 f303 	lsl.w	r3, r1, r3
 8014892:	6979      	ldr	r1, [r7, #20]
 8014894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014898:	4313      	orrs	r3, r2
 801489a:	634b      	str	r3, [r1, #52]	; 0x34
 801489c:	e071      	b.n	8014982 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	015a      	lsls	r2, r3, #5
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	4413      	add	r3, r2
 80148a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148aa:	691b      	ldr	r3, [r3, #16]
 80148ac:	693a      	ldr	r2, [r7, #16]
 80148ae:	0151      	lsls	r1, r2, #5
 80148b0:	697a      	ldr	r2, [r7, #20]
 80148b2:	440a      	add	r2, r1
 80148b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148b8:	0cdb      	lsrs	r3, r3, #19
 80148ba:	04db      	lsls	r3, r3, #19
 80148bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	015a      	lsls	r2, r3, #5
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	4413      	add	r3, r2
 80148c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148ca:	691b      	ldr	r3, [r3, #16]
 80148cc:	693a      	ldr	r2, [r7, #16]
 80148ce:	0151      	lsls	r1, r2, #5
 80148d0:	697a      	ldr	r2, [r7, #20]
 80148d2:	440a      	add	r2, r1
 80148d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80148dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80148e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	699b      	ldr	r3, [r3, #24]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d003      	beq.n	80148f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	68da      	ldr	r2, [r3, #12]
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	68da      	ldr	r2, [r3, #12]
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80148fa:	693b      	ldr	r3, [r7, #16]
 80148fc:	015a      	lsls	r2, r3, #5
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	4413      	add	r3, r2
 8014902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014906:	691b      	ldr	r3, [r3, #16]
 8014908:	693a      	ldr	r2, [r7, #16]
 801490a:	0151      	lsls	r1, r2, #5
 801490c:	697a      	ldr	r2, [r7, #20]
 801490e:	440a      	add	r2, r1
 8014910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	015a      	lsls	r2, r3, #5
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	4413      	add	r3, r2
 8014922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014926:	691a      	ldr	r2, [r3, #16]
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	69db      	ldr	r3, [r3, #28]
 801492c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014930:	6939      	ldr	r1, [r7, #16]
 8014932:	0148      	lsls	r0, r1, #5
 8014934:	6979      	ldr	r1, [r7, #20]
 8014936:	4401      	add	r1, r0
 8014938:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801493c:	4313      	orrs	r3, r2
 801493e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8014940:	79fb      	ldrb	r3, [r7, #7]
 8014942:	2b01      	cmp	r3, #1
 8014944:	d10d      	bne.n	8014962 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	691b      	ldr	r3, [r3, #16]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d009      	beq.n	8014962 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	6919      	ldr	r1, [r3, #16]
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	015a      	lsls	r2, r3, #5
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	4413      	add	r3, r2
 801495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801495e:	460a      	mov	r2, r1
 8014960:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	015a      	lsls	r2, r3, #5
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	4413      	add	r3, r2
 801496a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	693a      	ldr	r2, [r7, #16]
 8014972:	0151      	lsls	r1, r2, #5
 8014974:	697a      	ldr	r2, [r7, #20]
 8014976:	440a      	add	r2, r1
 8014978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801497c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014980:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014982:	2300      	movs	r3, #0
}
 8014984:	4618      	mov	r0, r3
 8014986:	371c      	adds	r7, #28
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr

08014990 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014990:	b480      	push	{r7}
 8014992:	b087      	sub	sp, #28
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801499a:	2300      	movs	r3, #0
 801499c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801499e:	2300      	movs	r3, #0
 80149a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	785b      	ldrb	r3, [r3, #1]
 80149aa:	2b01      	cmp	r3, #1
 80149ac:	d14a      	bne.n	8014a44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	015a      	lsls	r2, r3, #5
 80149b4:	693b      	ldr	r3, [r7, #16]
 80149b6:	4413      	add	r3, r2
 80149b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80149c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80149c6:	f040 8086 	bne.w	8014ad6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	781b      	ldrb	r3, [r3, #0]
 80149ce:	015a      	lsls	r2, r3, #5
 80149d0:	693b      	ldr	r3, [r7, #16]
 80149d2:	4413      	add	r3, r2
 80149d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	683a      	ldr	r2, [r7, #0]
 80149dc:	7812      	ldrb	r2, [r2, #0]
 80149de:	0151      	lsls	r1, r2, #5
 80149e0:	693a      	ldr	r2, [r7, #16]
 80149e2:	440a      	add	r2, r1
 80149e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80149e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80149ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	015a      	lsls	r2, r3, #5
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	4413      	add	r3, r2
 80149f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	683a      	ldr	r2, [r7, #0]
 8014a00:	7812      	ldrb	r2, [r2, #0]
 8014a02:	0151      	lsls	r1, r2, #5
 8014a04:	693a      	ldr	r2, [r7, #16]
 8014a06:	440a      	add	r2, r1
 8014a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014a10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	3301      	adds	r3, #1
 8014a16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8014a1e:	4293      	cmp	r3, r2
 8014a20:	d902      	bls.n	8014a28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014a22:	2301      	movs	r3, #1
 8014a24:	75fb      	strb	r3, [r7, #23]
          break;
 8014a26:	e056      	b.n	8014ad6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	015a      	lsls	r2, r3, #5
 8014a2e:	693b      	ldr	r3, [r7, #16]
 8014a30:	4413      	add	r3, r2
 8014a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a40:	d0e7      	beq.n	8014a12 <USB_EPStopXfer+0x82>
 8014a42:	e048      	b.n	8014ad6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	015a      	lsls	r2, r3, #5
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a5c:	d13b      	bne.n	8014ad6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	015a      	lsls	r2, r3, #5
 8014a64:	693b      	ldr	r3, [r7, #16]
 8014a66:	4413      	add	r3, r2
 8014a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	683a      	ldr	r2, [r7, #0]
 8014a70:	7812      	ldrb	r2, [r2, #0]
 8014a72:	0151      	lsls	r1, r2, #5
 8014a74:	693a      	ldr	r2, [r7, #16]
 8014a76:	440a      	add	r2, r1
 8014a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014a80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	015a      	lsls	r2, r3, #5
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	4413      	add	r3, r2
 8014a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	683a      	ldr	r2, [r7, #0]
 8014a94:	7812      	ldrb	r2, [r2, #0]
 8014a96:	0151      	lsls	r1, r2, #5
 8014a98:	693a      	ldr	r2, [r7, #16]
 8014a9a:	440a      	add	r2, r1
 8014a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014aa4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	f242 7210 	movw	r2, #10000	; 0x2710
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	d902      	bls.n	8014abc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8014aba:	e00c      	b.n	8014ad6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	015a      	lsls	r2, r3, #5
 8014ac2:	693b      	ldr	r3, [r7, #16]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ad4:	d0e7      	beq.n	8014aa6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	371c      	adds	r7, #28
 8014adc:	46bd      	mov	sp, r7
 8014ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae2:	4770      	bx	lr

08014ae4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b089      	sub	sp, #36	; 0x24
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	60f8      	str	r0, [r7, #12]
 8014aec:	60b9      	str	r1, [r7, #8]
 8014aee:	4611      	mov	r1, r2
 8014af0:	461a      	mov	r2, r3
 8014af2:	460b      	mov	r3, r1
 8014af4:	71fb      	strb	r3, [r7, #7]
 8014af6:	4613      	mov	r3, r2
 8014af8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d123      	bne.n	8014b52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014b0a:	88bb      	ldrh	r3, [r7, #4]
 8014b0c:	3303      	adds	r3, #3
 8014b0e:	089b      	lsrs	r3, r3, #2
 8014b10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014b12:	2300      	movs	r3, #0
 8014b14:	61bb      	str	r3, [r7, #24]
 8014b16:	e018      	b.n	8014b4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014b18:	79fb      	ldrb	r3, [r7, #7]
 8014b1a:	031a      	lsls	r2, r3, #12
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	4413      	add	r3, r2
 8014b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b24:	461a      	mov	r2, r3
 8014b26:	69fb      	ldr	r3, [r7, #28]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	3301      	adds	r3, #1
 8014b30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	3301      	adds	r3, #1
 8014b36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	3301      	adds	r3, #1
 8014b42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	3301      	adds	r3, #1
 8014b48:	61bb      	str	r3, [r7, #24]
 8014b4a:	69ba      	ldr	r2, [r7, #24]
 8014b4c:	693b      	ldr	r3, [r7, #16]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d3e2      	bcc.n	8014b18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014b52:	2300      	movs	r3, #0
}
 8014b54:	4618      	mov	r0, r3
 8014b56:	3724      	adds	r7, #36	; 0x24
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5e:	4770      	bx	lr

08014b60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014b60:	b480      	push	{r7}
 8014b62:	b08b      	sub	sp, #44	; 0x2c
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	60f8      	str	r0, [r7, #12]
 8014b68:	60b9      	str	r1, [r7, #8]
 8014b6a:	4613      	mov	r3, r2
 8014b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014b76:	88fb      	ldrh	r3, [r7, #6]
 8014b78:	089b      	lsrs	r3, r3, #2
 8014b7a:	b29b      	uxth	r3, r3
 8014b7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014b7e:	88fb      	ldrh	r3, [r7, #6]
 8014b80:	f003 0303 	and.w	r3, r3, #3
 8014b84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014b86:	2300      	movs	r3, #0
 8014b88:	623b      	str	r3, [r7, #32]
 8014b8a:	e014      	b.n	8014bb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014b8c:	69bb      	ldr	r3, [r7, #24]
 8014b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b92:	681a      	ldr	r2, [r3, #0]
 8014b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b96:	601a      	str	r2, [r3, #0]
    pDest++;
 8014b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bac:	3301      	adds	r3, #1
 8014bae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014bb0:	6a3b      	ldr	r3, [r7, #32]
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	623b      	str	r3, [r7, #32]
 8014bb6:	6a3a      	ldr	r2, [r7, #32]
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d3e6      	bcc.n	8014b8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014bbe:	8bfb      	ldrh	r3, [r7, #30]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d01e      	beq.n	8014c02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014bc8:	69bb      	ldr	r3, [r7, #24]
 8014bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014bce:	461a      	mov	r2, r3
 8014bd0:	f107 0310 	add.w	r3, r7, #16
 8014bd4:	6812      	ldr	r2, [r2, #0]
 8014bd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014bd8:	693a      	ldr	r2, [r7, #16]
 8014bda:	6a3b      	ldr	r3, [r7, #32]
 8014bdc:	b2db      	uxtb	r3, r3
 8014bde:	00db      	lsls	r3, r3, #3
 8014be0:	fa22 f303 	lsr.w	r3, r2, r3
 8014be4:	b2da      	uxtb	r2, r3
 8014be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be8:	701a      	strb	r2, [r3, #0]
      i++;
 8014bea:	6a3b      	ldr	r3, [r7, #32]
 8014bec:	3301      	adds	r3, #1
 8014bee:	623b      	str	r3, [r7, #32]
      pDest++;
 8014bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014bf6:	8bfb      	ldrh	r3, [r7, #30]
 8014bf8:	3b01      	subs	r3, #1
 8014bfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014bfc:	8bfb      	ldrh	r3, [r7, #30]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d1ea      	bne.n	8014bd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014c04:	4618      	mov	r0, r3
 8014c06:	372c      	adds	r7, #44	; 0x2c
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr

08014c10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014c10:	b480      	push	{r7}
 8014c12:	b085      	sub	sp, #20
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	781b      	ldrb	r3, [r3, #0]
 8014c22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	785b      	ldrb	r3, [r3, #1]
 8014c28:	2b01      	cmp	r3, #1
 8014c2a:	d12c      	bne.n	8014c86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	015a      	lsls	r2, r3, #5
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	4413      	add	r3, r2
 8014c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	db12      	blt.n	8014c64 <USB_EPSetStall+0x54>
 8014c3e:	68bb      	ldr	r3, [r7, #8]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d00f      	beq.n	8014c64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	015a      	lsls	r2, r3, #5
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	68ba      	ldr	r2, [r7, #8]
 8014c54:	0151      	lsls	r1, r2, #5
 8014c56:	68fa      	ldr	r2, [r7, #12]
 8014c58:	440a      	add	r2, r1
 8014c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014c62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	015a      	lsls	r2, r3, #5
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	4413      	add	r3, r2
 8014c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	68ba      	ldr	r2, [r7, #8]
 8014c74:	0151      	lsls	r1, r2, #5
 8014c76:	68fa      	ldr	r2, [r7, #12]
 8014c78:	440a      	add	r2, r1
 8014c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014c82:	6013      	str	r3, [r2, #0]
 8014c84:	e02b      	b.n	8014cde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	015a      	lsls	r2, r3, #5
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	db12      	blt.n	8014cbe <USB_EPSetStall+0xae>
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d00f      	beq.n	8014cbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	015a      	lsls	r2, r3, #5
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	4413      	add	r3, r2
 8014ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	68ba      	ldr	r2, [r7, #8]
 8014cae:	0151      	lsls	r1, r2, #5
 8014cb0:	68fa      	ldr	r2, [r7, #12]
 8014cb2:	440a      	add	r2, r1
 8014cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014cbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	015a      	lsls	r2, r3, #5
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	4413      	add	r3, r2
 8014cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	68ba      	ldr	r2, [r7, #8]
 8014cce:	0151      	lsls	r1, r2, #5
 8014cd0:	68fa      	ldr	r2, [r7, #12]
 8014cd2:	440a      	add	r2, r1
 8014cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014cdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014cde:	2300      	movs	r3, #0
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3714      	adds	r7, #20
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr

08014cec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014cec:	b480      	push	{r7}
 8014cee:	b085      	sub	sp, #20
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	785b      	ldrb	r3, [r3, #1]
 8014d04:	2b01      	cmp	r3, #1
 8014d06:	d128      	bne.n	8014d5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	015a      	lsls	r2, r3, #5
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	4413      	add	r3, r2
 8014d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	68ba      	ldr	r2, [r7, #8]
 8014d18:	0151      	lsls	r1, r2, #5
 8014d1a:	68fa      	ldr	r2, [r7, #12]
 8014d1c:	440a      	add	r2, r1
 8014d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014d26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	791b      	ldrb	r3, [r3, #4]
 8014d2c:	2b03      	cmp	r3, #3
 8014d2e:	d003      	beq.n	8014d38 <USB_EPClearStall+0x4c>
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	791b      	ldrb	r3, [r3, #4]
 8014d34:	2b02      	cmp	r3, #2
 8014d36:	d138      	bne.n	8014daa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	015a      	lsls	r2, r3, #5
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	4413      	add	r3, r2
 8014d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	68ba      	ldr	r2, [r7, #8]
 8014d48:	0151      	lsls	r1, r2, #5
 8014d4a:	68fa      	ldr	r2, [r7, #12]
 8014d4c:	440a      	add	r2, r1
 8014d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014d56:	6013      	str	r3, [r2, #0]
 8014d58:	e027      	b.n	8014daa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	015a      	lsls	r2, r3, #5
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	4413      	add	r3, r2
 8014d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	68ba      	ldr	r2, [r7, #8]
 8014d6a:	0151      	lsls	r1, r2, #5
 8014d6c:	68fa      	ldr	r2, [r7, #12]
 8014d6e:	440a      	add	r2, r1
 8014d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014d78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	791b      	ldrb	r3, [r3, #4]
 8014d7e:	2b03      	cmp	r3, #3
 8014d80:	d003      	beq.n	8014d8a <USB_EPClearStall+0x9e>
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	791b      	ldrb	r3, [r3, #4]
 8014d86:	2b02      	cmp	r3, #2
 8014d88:	d10f      	bne.n	8014daa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	015a      	lsls	r2, r3, #5
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	4413      	add	r3, r2
 8014d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	68ba      	ldr	r2, [r7, #8]
 8014d9a:	0151      	lsls	r1, r2, #5
 8014d9c:	68fa      	ldr	r2, [r7, #12]
 8014d9e:	440a      	add	r2, r1
 8014da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014da8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014daa:	2300      	movs	r3, #0
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3714      	adds	r7, #20
 8014db0:	46bd      	mov	sp, r7
 8014db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db6:	4770      	bx	lr

08014db8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014db8:	b480      	push	{r7}
 8014dba:	b085      	sub	sp, #20
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	460b      	mov	r3, r1
 8014dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	68fa      	ldr	r2, [r7, #12]
 8014dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014dd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014dda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014de2:	681a      	ldr	r2, [r3, #0]
 8014de4:	78fb      	ldrb	r3, [r7, #3]
 8014de6:	011b      	lsls	r3, r3, #4
 8014de8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014dec:	68f9      	ldr	r1, [r7, #12]
 8014dee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014df2:	4313      	orrs	r3, r2
 8014df4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014df6:	2300      	movs	r3, #0
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3714      	adds	r7, #20
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr

08014e04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b085      	sub	sp, #20
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	68fa      	ldr	r2, [r7, #12]
 8014e1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014e1e:	f023 0303 	bic.w	r3, r3, #3
 8014e22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	68fa      	ldr	r2, [r7, #12]
 8014e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e32:	f023 0302 	bic.w	r3, r3, #2
 8014e36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014e38:	2300      	movs	r3, #0
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3714      	adds	r7, #20
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e44:	4770      	bx	lr

08014e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014e46:	b480      	push	{r7}
 8014e48:	b085      	sub	sp, #20
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	68fa      	ldr	r2, [r7, #12]
 8014e5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014e60:	f023 0303 	bic.w	r3, r3, #3
 8014e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e6c:	685b      	ldr	r3, [r3, #4]
 8014e6e:	68fa      	ldr	r2, [r7, #12]
 8014e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e74:	f043 0302 	orr.w	r3, r3, #2
 8014e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014e7a:	2300      	movs	r3, #0
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3714      	adds	r7, #20
 8014e80:	46bd      	mov	sp, r7
 8014e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e86:	4770      	bx	lr

08014e88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014e88:	b480      	push	{r7}
 8014e8a:	b085      	sub	sp, #20
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	695b      	ldr	r3, [r3, #20]
 8014e94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	699b      	ldr	r3, [r3, #24]
 8014e9a:	68fa      	ldr	r2, [r7, #12]
 8014e9c:	4013      	ands	r3, r2
 8014e9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3714      	adds	r7, #20
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr

08014eae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014eae:	b480      	push	{r7}
 8014eb0:	b085      	sub	sp, #20
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ec0:	699b      	ldr	r3, [r3, #24]
 8014ec2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014eca:	69db      	ldr	r3, [r3, #28]
 8014ecc:	68ba      	ldr	r2, [r7, #8]
 8014ece:	4013      	ands	r3, r2
 8014ed0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	0c1b      	lsrs	r3, r3, #16
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3714      	adds	r7, #20
 8014eda:	46bd      	mov	sp, r7
 8014edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee0:	4770      	bx	lr

08014ee2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ee2:	b480      	push	{r7}
 8014ee4:	b085      	sub	sp, #20
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ef4:	699b      	ldr	r3, [r3, #24]
 8014ef6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014efe:	69db      	ldr	r3, [r3, #28]
 8014f00:	68ba      	ldr	r2, [r7, #8]
 8014f02:	4013      	ands	r3, r2
 8014f04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	b29b      	uxth	r3, r3
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3714      	adds	r7, #20
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f14:	4770      	bx	lr

08014f16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014f16:	b480      	push	{r7}
 8014f18:	b085      	sub	sp, #20
 8014f1a:	af00      	add	r7, sp, #0
 8014f1c:	6078      	str	r0, [r7, #4]
 8014f1e:	460b      	mov	r3, r1
 8014f20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014f26:	78fb      	ldrb	r3, [r7, #3]
 8014f28:	015a      	lsls	r2, r3, #5
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f32:	689b      	ldr	r3, [r3, #8]
 8014f34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f3c:	695b      	ldr	r3, [r3, #20]
 8014f3e:	68ba      	ldr	r2, [r7, #8]
 8014f40:	4013      	ands	r3, r2
 8014f42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014f44:	68bb      	ldr	r3, [r7, #8]
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3714      	adds	r7, #20
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f50:	4770      	bx	lr

08014f52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014f52:	b480      	push	{r7}
 8014f54:	b087      	sub	sp, #28
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	6078      	str	r0, [r7, #4]
 8014f5a:	460b      	mov	r3, r1
 8014f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f68:	691b      	ldr	r3, [r3, #16]
 8014f6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014f76:	78fb      	ldrb	r3, [r7, #3]
 8014f78:	f003 030f 	and.w	r3, r3, #15
 8014f7c:	68fa      	ldr	r2, [r7, #12]
 8014f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8014f82:	01db      	lsls	r3, r3, #7
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	693a      	ldr	r2, [r7, #16]
 8014f88:	4313      	orrs	r3, r2
 8014f8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014f8c:	78fb      	ldrb	r3, [r7, #3]
 8014f8e:	015a      	lsls	r2, r3, #5
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	4413      	add	r3, r2
 8014f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f98:	689b      	ldr	r3, [r3, #8]
 8014f9a:	693a      	ldr	r2, [r7, #16]
 8014f9c:	4013      	ands	r3, r2
 8014f9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014fa0:	68bb      	ldr	r3, [r7, #8]
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	371c      	adds	r7, #28
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fac:	4770      	bx	lr

08014fae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014fae:	b480      	push	{r7}
 8014fb0:	b083      	sub	sp, #12
 8014fb2:	af00      	add	r7, sp, #0
 8014fb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	695b      	ldr	r3, [r3, #20]
 8014fba:	f003 0301 	and.w	r3, r3, #1
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	370c      	adds	r7, #12
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc8:	4770      	bx	lr

08014fca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014fca:	b480      	push	{r7}
 8014fcc:	b085      	sub	sp, #20
 8014fce:	af00      	add	r7, sp, #0
 8014fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014fe4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014fe8:	f023 0307 	bic.w	r3, r3, #7
 8014fec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ff4:	685b      	ldr	r3, [r3, #4]
 8014ff6:	68fa      	ldr	r2, [r7, #12]
 8014ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015002:	2300      	movs	r3, #0
}
 8015004:	4618      	mov	r0, r3
 8015006:	3714      	adds	r7, #20
 8015008:	46bd      	mov	sp, r7
 801500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500e:	4770      	bx	lr

08015010 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8015010:	b480      	push	{r7}
 8015012:	b087      	sub	sp, #28
 8015014:	af00      	add	r7, sp, #0
 8015016:	60f8      	str	r0, [r7, #12]
 8015018:	460b      	mov	r3, r1
 801501a:	607a      	str	r2, [r7, #4]
 801501c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	333c      	adds	r3, #60	; 0x3c
 8015026:	3304      	adds	r3, #4
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	4a26      	ldr	r2, [pc, #152]	; (80150c8 <USB_EP0_OutStart+0xb8>)
 8015030:	4293      	cmp	r3, r2
 8015032:	d90a      	bls.n	801504a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015044:	d101      	bne.n	801504a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8015046:	2300      	movs	r3, #0
 8015048:	e037      	b.n	80150ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801504a:	697b      	ldr	r3, [r7, #20]
 801504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015050:	461a      	mov	r2, r3
 8015052:	2300      	movs	r3, #0
 8015054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801505c:	691b      	ldr	r3, [r3, #16]
 801505e:	697a      	ldr	r2, [r7, #20]
 8015060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015064:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015070:	691b      	ldr	r3, [r3, #16]
 8015072:	697a      	ldr	r2, [r7, #20]
 8015074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015078:	f043 0318 	orr.w	r3, r3, #24
 801507c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015084:	691b      	ldr	r3, [r3, #16]
 8015086:	697a      	ldr	r2, [r7, #20]
 8015088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801508c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8015090:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015092:	7afb      	ldrb	r3, [r7, #11]
 8015094:	2b01      	cmp	r3, #1
 8015096:	d10f      	bne.n	80150b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801509e:	461a      	mov	r2, r3
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	697a      	ldr	r2, [r7, #20]
 80150ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80150b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80150b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80150b8:	2300      	movs	r3, #0
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	371c      	adds	r7, #28
 80150be:	46bd      	mov	sp, r7
 80150c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c4:	4770      	bx	lr
 80150c6:	bf00      	nop
 80150c8:	4f54300a 	.word	0x4f54300a

080150cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80150cc:	b480      	push	{r7}
 80150ce:	b085      	sub	sp, #20
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80150d4:	2300      	movs	r3, #0
 80150d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	3301      	adds	r3, #1
 80150dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	4a13      	ldr	r2, [pc, #76]	; (8015130 <USB_CoreReset+0x64>)
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d901      	bls.n	80150ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80150e6:	2303      	movs	r3, #3
 80150e8:	e01b      	b.n	8015122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	691b      	ldr	r3, [r3, #16]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	daf2      	bge.n	80150d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80150f2:	2300      	movs	r3, #0
 80150f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	691b      	ldr	r3, [r3, #16]
 80150fa:	f043 0201 	orr.w	r2, r3, #1
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	3301      	adds	r3, #1
 8015106:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	4a09      	ldr	r2, [pc, #36]	; (8015130 <USB_CoreReset+0x64>)
 801510c:	4293      	cmp	r3, r2
 801510e:	d901      	bls.n	8015114 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015110:	2303      	movs	r3, #3
 8015112:	e006      	b.n	8015122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	691b      	ldr	r3, [r3, #16]
 8015118:	f003 0301 	and.w	r3, r3, #1
 801511c:	2b01      	cmp	r3, #1
 801511e:	d0f0      	beq.n	8015102 <USB_CoreReset+0x36>

  return HAL_OK;
 8015120:	2300      	movs	r3, #0
}
 8015122:	4618      	mov	r0, r3
 8015124:	3714      	adds	r7, #20
 8015126:	46bd      	mov	sp, r7
 8015128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512c:	4770      	bx	lr
 801512e:	bf00      	nop
 8015130:	00030d40 	.word	0x00030d40

08015134 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	460b      	mov	r3, r1
 801513e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015140:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015144:	f005 fe86 	bl	801ae54 <USBD_static_malloc>
 8015148:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d109      	bne.n	8015164 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	32b0      	adds	r2, #176	; 0xb0
 801515a:	2100      	movs	r1, #0
 801515c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015160:	2302      	movs	r3, #2
 8015162:	e0d4      	b.n	801530e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015164:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8015168:	2100      	movs	r1, #0
 801516a:	68f8      	ldr	r0, [r7, #12]
 801516c:	f005 ffe1 	bl	801b132 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	32b0      	adds	r2, #176	; 0xb0
 801517a:	68f9      	ldr	r1, [r7, #12]
 801517c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	32b0      	adds	r2, #176	; 0xb0
 801518a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	7c1b      	ldrb	r3, [r3, #16]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d138      	bne.n	801520e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801519c:	4b5e      	ldr	r3, [pc, #376]	; (8015318 <USBD_CDC_Init+0x1e4>)
 801519e:	7819      	ldrb	r1, [r3, #0]
 80151a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80151a4:	2202      	movs	r2, #2
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f005 fd31 	bl	801ac0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80151ac:	4b5a      	ldr	r3, [pc, #360]	; (8015318 <USBD_CDC_Init+0x1e4>)
 80151ae:	781b      	ldrb	r3, [r3, #0]
 80151b0:	f003 020f 	and.w	r2, r3, #15
 80151b4:	6879      	ldr	r1, [r7, #4]
 80151b6:	4613      	mov	r3, r2
 80151b8:	009b      	lsls	r3, r3, #2
 80151ba:	4413      	add	r3, r2
 80151bc:	009b      	lsls	r3, r3, #2
 80151be:	440b      	add	r3, r1
 80151c0:	3324      	adds	r3, #36	; 0x24
 80151c2:	2201      	movs	r2, #1
 80151c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80151c6:	4b55      	ldr	r3, [pc, #340]	; (801531c <USBD_CDC_Init+0x1e8>)
 80151c8:	7819      	ldrb	r1, [r3, #0]
 80151ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80151ce:	2202      	movs	r2, #2
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f005 fd1c 	bl	801ac0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80151d6:	4b51      	ldr	r3, [pc, #324]	; (801531c <USBD_CDC_Init+0x1e8>)
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	f003 020f 	and.w	r2, r3, #15
 80151de:	6879      	ldr	r1, [r7, #4]
 80151e0:	4613      	mov	r3, r2
 80151e2:	009b      	lsls	r3, r3, #2
 80151e4:	4413      	add	r3, r2
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	440b      	add	r3, r1
 80151ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80151ee:	2201      	movs	r2, #1
 80151f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80151f2:	4b4b      	ldr	r3, [pc, #300]	; (8015320 <USBD_CDC_Init+0x1ec>)
 80151f4:	781b      	ldrb	r3, [r3, #0]
 80151f6:	f003 020f 	and.w	r2, r3, #15
 80151fa:	6879      	ldr	r1, [r7, #4]
 80151fc:	4613      	mov	r3, r2
 80151fe:	009b      	lsls	r3, r3, #2
 8015200:	4413      	add	r3, r2
 8015202:	009b      	lsls	r3, r3, #2
 8015204:	440b      	add	r3, r1
 8015206:	3326      	adds	r3, #38	; 0x26
 8015208:	2210      	movs	r2, #16
 801520a:	801a      	strh	r2, [r3, #0]
 801520c:	e035      	b.n	801527a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801520e:	4b42      	ldr	r3, [pc, #264]	; (8015318 <USBD_CDC_Init+0x1e4>)
 8015210:	7819      	ldrb	r1, [r3, #0]
 8015212:	2340      	movs	r3, #64	; 0x40
 8015214:	2202      	movs	r2, #2
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f005 fcf9 	bl	801ac0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801521c:	4b3e      	ldr	r3, [pc, #248]	; (8015318 <USBD_CDC_Init+0x1e4>)
 801521e:	781b      	ldrb	r3, [r3, #0]
 8015220:	f003 020f 	and.w	r2, r3, #15
 8015224:	6879      	ldr	r1, [r7, #4]
 8015226:	4613      	mov	r3, r2
 8015228:	009b      	lsls	r3, r3, #2
 801522a:	4413      	add	r3, r2
 801522c:	009b      	lsls	r3, r3, #2
 801522e:	440b      	add	r3, r1
 8015230:	3324      	adds	r3, #36	; 0x24
 8015232:	2201      	movs	r2, #1
 8015234:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015236:	4b39      	ldr	r3, [pc, #228]	; (801531c <USBD_CDC_Init+0x1e8>)
 8015238:	7819      	ldrb	r1, [r3, #0]
 801523a:	2340      	movs	r3, #64	; 0x40
 801523c:	2202      	movs	r2, #2
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	f005 fce5 	bl	801ac0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015244:	4b35      	ldr	r3, [pc, #212]	; (801531c <USBD_CDC_Init+0x1e8>)
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	f003 020f 	and.w	r2, r3, #15
 801524c:	6879      	ldr	r1, [r7, #4]
 801524e:	4613      	mov	r3, r2
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	4413      	add	r3, r2
 8015254:	009b      	lsls	r3, r3, #2
 8015256:	440b      	add	r3, r1
 8015258:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801525c:	2201      	movs	r2, #1
 801525e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015260:	4b2f      	ldr	r3, [pc, #188]	; (8015320 <USBD_CDC_Init+0x1ec>)
 8015262:	781b      	ldrb	r3, [r3, #0]
 8015264:	f003 020f 	and.w	r2, r3, #15
 8015268:	6879      	ldr	r1, [r7, #4]
 801526a:	4613      	mov	r3, r2
 801526c:	009b      	lsls	r3, r3, #2
 801526e:	4413      	add	r3, r2
 8015270:	009b      	lsls	r3, r3, #2
 8015272:	440b      	add	r3, r1
 8015274:	3326      	adds	r3, #38	; 0x26
 8015276:	2210      	movs	r2, #16
 8015278:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801527a:	4b29      	ldr	r3, [pc, #164]	; (8015320 <USBD_CDC_Init+0x1ec>)
 801527c:	7819      	ldrb	r1, [r3, #0]
 801527e:	2308      	movs	r3, #8
 8015280:	2203      	movs	r2, #3
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f005 fcc3 	bl	801ac0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015288:	4b25      	ldr	r3, [pc, #148]	; (8015320 <USBD_CDC_Init+0x1ec>)
 801528a:	781b      	ldrb	r3, [r3, #0]
 801528c:	f003 020f 	and.w	r2, r3, #15
 8015290:	6879      	ldr	r1, [r7, #4]
 8015292:	4613      	mov	r3, r2
 8015294:	009b      	lsls	r3, r3, #2
 8015296:	4413      	add	r3, r2
 8015298:	009b      	lsls	r3, r3, #2
 801529a:	440b      	add	r3, r1
 801529c:	3324      	adds	r3, #36	; 0x24
 801529e:	2201      	movs	r2, #1
 80152a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	2200      	movs	r2, #0
 80152a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	33b0      	adds	r3, #176	; 0xb0
 80152b4:	009b      	lsls	r3, r3, #2
 80152b6:	4413      	add	r3, r2
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	2200      	movs	r2, #0
 80152c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	2200      	movs	r2, #0
 80152ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d101      	bne.n	80152dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80152d8:	2302      	movs	r3, #2
 80152da:	e018      	b.n	801530e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	7c1b      	ldrb	r3, [r3, #16]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d10a      	bne.n	80152fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80152e4:	4b0d      	ldr	r3, [pc, #52]	; (801531c <USBD_CDC_Init+0x1e8>)
 80152e6:	7819      	ldrb	r1, [r3, #0]
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80152ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	f005 fd7a 	bl	801adec <USBD_LL_PrepareReceive>
 80152f8:	e008      	b.n	801530c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80152fa:	4b08      	ldr	r3, [pc, #32]	; (801531c <USBD_CDC_Init+0x1e8>)
 80152fc:	7819      	ldrb	r1, [r3, #0]
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015304:	2340      	movs	r3, #64	; 0x40
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f005 fd70 	bl	801adec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801530c:	2300      	movs	r3, #0
}
 801530e:	4618      	mov	r0, r3
 8015310:	3710      	adds	r7, #16
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	2000009f 	.word	0x2000009f
 801531c:	200000a0 	.word	0x200000a0
 8015320:	200000a1 	.word	0x200000a1

08015324 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	460b      	mov	r3, r1
 801532e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015330:	4b3a      	ldr	r3, [pc, #232]	; (801541c <USBD_CDC_DeInit+0xf8>)
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	4619      	mov	r1, r3
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f005 fc8f 	bl	801ac5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801533c:	4b37      	ldr	r3, [pc, #220]	; (801541c <USBD_CDC_DeInit+0xf8>)
 801533e:	781b      	ldrb	r3, [r3, #0]
 8015340:	f003 020f 	and.w	r2, r3, #15
 8015344:	6879      	ldr	r1, [r7, #4]
 8015346:	4613      	mov	r3, r2
 8015348:	009b      	lsls	r3, r3, #2
 801534a:	4413      	add	r3, r2
 801534c:	009b      	lsls	r3, r3, #2
 801534e:	440b      	add	r3, r1
 8015350:	3324      	adds	r3, #36	; 0x24
 8015352:	2200      	movs	r2, #0
 8015354:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015356:	4b32      	ldr	r3, [pc, #200]	; (8015420 <USBD_CDC_DeInit+0xfc>)
 8015358:	781b      	ldrb	r3, [r3, #0]
 801535a:	4619      	mov	r1, r3
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f005 fc7c 	bl	801ac5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015362:	4b2f      	ldr	r3, [pc, #188]	; (8015420 <USBD_CDC_DeInit+0xfc>)
 8015364:	781b      	ldrb	r3, [r3, #0]
 8015366:	f003 020f 	and.w	r2, r3, #15
 801536a:	6879      	ldr	r1, [r7, #4]
 801536c:	4613      	mov	r3, r2
 801536e:	009b      	lsls	r3, r3, #2
 8015370:	4413      	add	r3, r2
 8015372:	009b      	lsls	r3, r3, #2
 8015374:	440b      	add	r3, r1
 8015376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801537a:	2200      	movs	r2, #0
 801537c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801537e:	4b29      	ldr	r3, [pc, #164]	; (8015424 <USBD_CDC_DeInit+0x100>)
 8015380:	781b      	ldrb	r3, [r3, #0]
 8015382:	4619      	mov	r1, r3
 8015384:	6878      	ldr	r0, [r7, #4]
 8015386:	f005 fc68 	bl	801ac5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801538a:	4b26      	ldr	r3, [pc, #152]	; (8015424 <USBD_CDC_DeInit+0x100>)
 801538c:	781b      	ldrb	r3, [r3, #0]
 801538e:	f003 020f 	and.w	r2, r3, #15
 8015392:	6879      	ldr	r1, [r7, #4]
 8015394:	4613      	mov	r3, r2
 8015396:	009b      	lsls	r3, r3, #2
 8015398:	4413      	add	r3, r2
 801539a:	009b      	lsls	r3, r3, #2
 801539c:	440b      	add	r3, r1
 801539e:	3324      	adds	r3, #36	; 0x24
 80153a0:	2200      	movs	r2, #0
 80153a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80153a4:	4b1f      	ldr	r3, [pc, #124]	; (8015424 <USBD_CDC_DeInit+0x100>)
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	f003 020f 	and.w	r2, r3, #15
 80153ac:	6879      	ldr	r1, [r7, #4]
 80153ae:	4613      	mov	r3, r2
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	4413      	add	r3, r2
 80153b4:	009b      	lsls	r3, r3, #2
 80153b6:	440b      	add	r3, r1
 80153b8:	3326      	adds	r3, #38	; 0x26
 80153ba:	2200      	movs	r2, #0
 80153bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	32b0      	adds	r2, #176	; 0xb0
 80153c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d01f      	beq.n	8015410 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80153d6:	687a      	ldr	r2, [r7, #4]
 80153d8:	33b0      	adds	r3, #176	; 0xb0
 80153da:	009b      	lsls	r3, r3, #2
 80153dc:	4413      	add	r3, r2
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	32b0      	adds	r2, #176	; 0xb0
 80153ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153f2:	4618      	mov	r0, r3
 80153f4:	f005 fd3c 	bl	801ae70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	32b0      	adds	r2, #176	; 0xb0
 8015402:	2100      	movs	r1, #0
 8015404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2200      	movs	r2, #0
 801540c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015410:	2300      	movs	r3, #0
}
 8015412:	4618      	mov	r0, r3
 8015414:	3708      	adds	r7, #8
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	2000009f 	.word	0x2000009f
 8015420:	200000a0 	.word	0x200000a0
 8015424:	200000a1 	.word	0x200000a1

08015428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b086      	sub	sp, #24
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	32b0      	adds	r2, #176	; 0xb0
 801543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015440:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015442:	2300      	movs	r3, #0
 8015444:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015446:	2300      	movs	r3, #0
 8015448:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801544a:	2300      	movs	r3, #0
 801544c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801544e:	693b      	ldr	r3, [r7, #16]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d101      	bne.n	8015458 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015454:	2303      	movs	r3, #3
 8015456:	e0bf      	b.n	80155d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015460:	2b00      	cmp	r3, #0
 8015462:	d050      	beq.n	8015506 <USBD_CDC_Setup+0xde>
 8015464:	2b20      	cmp	r3, #32
 8015466:	f040 80af 	bne.w	80155c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	88db      	ldrh	r3, [r3, #6]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d03a      	beq.n	80154e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015472:	683b      	ldr	r3, [r7, #0]
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	b25b      	sxtb	r3, r3
 8015478:	2b00      	cmp	r3, #0
 801547a:	da1b      	bge.n	80154b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015482:	687a      	ldr	r2, [r7, #4]
 8015484:	33b0      	adds	r3, #176	; 0xb0
 8015486:	009b      	lsls	r3, r3, #2
 8015488:	4413      	add	r3, r2
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	689b      	ldr	r3, [r3, #8]
 801548e:	683a      	ldr	r2, [r7, #0]
 8015490:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015492:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015494:	683a      	ldr	r2, [r7, #0]
 8015496:	88d2      	ldrh	r2, [r2, #6]
 8015498:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	88db      	ldrh	r3, [r3, #6]
 801549e:	2b07      	cmp	r3, #7
 80154a0:	bf28      	it	cs
 80154a2:	2307      	movcs	r3, #7
 80154a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	89fa      	ldrh	r2, [r7, #14]
 80154aa:	4619      	mov	r1, r3
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f001 fd43 	bl	8016f38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80154b2:	e090      	b.n	80155d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	785a      	ldrb	r2, [r3, #1]
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	88db      	ldrh	r3, [r3, #6]
 80154c2:	2b3f      	cmp	r3, #63	; 0x3f
 80154c4:	d803      	bhi.n	80154ce <USBD_CDC_Setup+0xa6>
 80154c6:	683b      	ldr	r3, [r7, #0]
 80154c8:	88db      	ldrh	r3, [r3, #6]
 80154ca:	b2da      	uxtb	r2, r3
 80154cc:	e000      	b.n	80154d0 <USBD_CDC_Setup+0xa8>
 80154ce:	2240      	movs	r2, #64	; 0x40
 80154d0:	693b      	ldr	r3, [r7, #16]
 80154d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80154d6:	6939      	ldr	r1, [r7, #16]
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80154de:	461a      	mov	r2, r3
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f001 fd55 	bl	8016f90 <USBD_CtlPrepareRx>
      break;
 80154e6:	e076      	b.n	80155d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80154ee:	687a      	ldr	r2, [r7, #4]
 80154f0:	33b0      	adds	r3, #176	; 0xb0
 80154f2:	009b      	lsls	r3, r3, #2
 80154f4:	4413      	add	r3, r2
 80154f6:	685b      	ldr	r3, [r3, #4]
 80154f8:	689b      	ldr	r3, [r3, #8]
 80154fa:	683a      	ldr	r2, [r7, #0]
 80154fc:	7850      	ldrb	r0, [r2, #1]
 80154fe:	2200      	movs	r2, #0
 8015500:	6839      	ldr	r1, [r7, #0]
 8015502:	4798      	blx	r3
      break;
 8015504:	e067      	b.n	80155d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	785b      	ldrb	r3, [r3, #1]
 801550a:	2b0b      	cmp	r3, #11
 801550c:	d851      	bhi.n	80155b2 <USBD_CDC_Setup+0x18a>
 801550e:	a201      	add	r2, pc, #4	; (adr r2, 8015514 <USBD_CDC_Setup+0xec>)
 8015510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015514:	08015545 	.word	0x08015545
 8015518:	080155c1 	.word	0x080155c1
 801551c:	080155b3 	.word	0x080155b3
 8015520:	080155b3 	.word	0x080155b3
 8015524:	080155b3 	.word	0x080155b3
 8015528:	080155b3 	.word	0x080155b3
 801552c:	080155b3 	.word	0x080155b3
 8015530:	080155b3 	.word	0x080155b3
 8015534:	080155b3 	.word	0x080155b3
 8015538:	080155b3 	.word	0x080155b3
 801553c:	0801556f 	.word	0x0801556f
 8015540:	08015599 	.word	0x08015599
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801554a:	b2db      	uxtb	r3, r3
 801554c:	2b03      	cmp	r3, #3
 801554e:	d107      	bne.n	8015560 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015550:	f107 030a 	add.w	r3, r7, #10
 8015554:	2202      	movs	r2, #2
 8015556:	4619      	mov	r1, r3
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f001 fced 	bl	8016f38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801555e:	e032      	b.n	80155c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015560:	6839      	ldr	r1, [r7, #0]
 8015562:	6878      	ldr	r0, [r7, #4]
 8015564:	f001 fc77 	bl	8016e56 <USBD_CtlError>
            ret = USBD_FAIL;
 8015568:	2303      	movs	r3, #3
 801556a:	75fb      	strb	r3, [r7, #23]
          break;
 801556c:	e02b      	b.n	80155c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015574:	b2db      	uxtb	r3, r3
 8015576:	2b03      	cmp	r3, #3
 8015578:	d107      	bne.n	801558a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801557a:	f107 030d 	add.w	r3, r7, #13
 801557e:	2201      	movs	r2, #1
 8015580:	4619      	mov	r1, r3
 8015582:	6878      	ldr	r0, [r7, #4]
 8015584:	f001 fcd8 	bl	8016f38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015588:	e01d      	b.n	80155c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801558a:	6839      	ldr	r1, [r7, #0]
 801558c:	6878      	ldr	r0, [r7, #4]
 801558e:	f001 fc62 	bl	8016e56 <USBD_CtlError>
            ret = USBD_FAIL;
 8015592:	2303      	movs	r3, #3
 8015594:	75fb      	strb	r3, [r7, #23]
          break;
 8015596:	e016      	b.n	80155c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801559e:	b2db      	uxtb	r3, r3
 80155a0:	2b03      	cmp	r3, #3
 80155a2:	d00f      	beq.n	80155c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80155a4:	6839      	ldr	r1, [r7, #0]
 80155a6:	6878      	ldr	r0, [r7, #4]
 80155a8:	f001 fc55 	bl	8016e56 <USBD_CtlError>
            ret = USBD_FAIL;
 80155ac:	2303      	movs	r3, #3
 80155ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80155b0:	e008      	b.n	80155c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80155b2:	6839      	ldr	r1, [r7, #0]
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f001 fc4e 	bl	8016e56 <USBD_CtlError>
          ret = USBD_FAIL;
 80155ba:	2303      	movs	r3, #3
 80155bc:	75fb      	strb	r3, [r7, #23]
          break;
 80155be:	e002      	b.n	80155c6 <USBD_CDC_Setup+0x19e>
          break;
 80155c0:	bf00      	nop
 80155c2:	e008      	b.n	80155d6 <USBD_CDC_Setup+0x1ae>
          break;
 80155c4:	bf00      	nop
      }
      break;
 80155c6:	e006      	b.n	80155d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80155c8:	6839      	ldr	r1, [r7, #0]
 80155ca:	6878      	ldr	r0, [r7, #4]
 80155cc:	f001 fc43 	bl	8016e56 <USBD_CtlError>
      ret = USBD_FAIL;
 80155d0:	2303      	movs	r3, #3
 80155d2:	75fb      	strb	r3, [r7, #23]
      break;
 80155d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80155d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3718      	adds	r7, #24
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b084      	sub	sp, #16
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	460b      	mov	r3, r1
 80155ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80155f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	32b0      	adds	r2, #176	; 0xb0
 80155fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d101      	bne.n	801560a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015606:	2303      	movs	r3, #3
 8015608:	e065      	b.n	80156d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	32b0      	adds	r2, #176	; 0xb0
 8015614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015618:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801561a:	78fb      	ldrb	r3, [r7, #3]
 801561c:	f003 020f 	and.w	r2, r3, #15
 8015620:	6879      	ldr	r1, [r7, #4]
 8015622:	4613      	mov	r3, r2
 8015624:	009b      	lsls	r3, r3, #2
 8015626:	4413      	add	r3, r2
 8015628:	009b      	lsls	r3, r3, #2
 801562a:	440b      	add	r3, r1
 801562c:	3318      	adds	r3, #24
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d02f      	beq.n	8015694 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015634:	78fb      	ldrb	r3, [r7, #3]
 8015636:	f003 020f 	and.w	r2, r3, #15
 801563a:	6879      	ldr	r1, [r7, #4]
 801563c:	4613      	mov	r3, r2
 801563e:	009b      	lsls	r3, r3, #2
 8015640:	4413      	add	r3, r2
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	440b      	add	r3, r1
 8015646:	3318      	adds	r3, #24
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	78fb      	ldrb	r3, [r7, #3]
 801564c:	f003 010f 	and.w	r1, r3, #15
 8015650:	68f8      	ldr	r0, [r7, #12]
 8015652:	460b      	mov	r3, r1
 8015654:	00db      	lsls	r3, r3, #3
 8015656:	440b      	add	r3, r1
 8015658:	009b      	lsls	r3, r3, #2
 801565a:	4403      	add	r3, r0
 801565c:	3348      	adds	r3, #72	; 0x48
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	fbb2 f1f3 	udiv	r1, r2, r3
 8015664:	fb01 f303 	mul.w	r3, r1, r3
 8015668:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801566a:	2b00      	cmp	r3, #0
 801566c:	d112      	bne.n	8015694 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801566e:	78fb      	ldrb	r3, [r7, #3]
 8015670:	f003 020f 	and.w	r2, r3, #15
 8015674:	6879      	ldr	r1, [r7, #4]
 8015676:	4613      	mov	r3, r2
 8015678:	009b      	lsls	r3, r3, #2
 801567a:	4413      	add	r3, r2
 801567c:	009b      	lsls	r3, r3, #2
 801567e:	440b      	add	r3, r1
 8015680:	3318      	adds	r3, #24
 8015682:	2200      	movs	r2, #0
 8015684:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015686:	78f9      	ldrb	r1, [r7, #3]
 8015688:	2300      	movs	r3, #0
 801568a:	2200      	movs	r2, #0
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f005 fb8c 	bl	801adaa <USBD_LL_Transmit>
 8015692:	e01f      	b.n	80156d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	2200      	movs	r2, #0
 8015698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156a2:	687a      	ldr	r2, [r7, #4]
 80156a4:	33b0      	adds	r3, #176	; 0xb0
 80156a6:	009b      	lsls	r3, r3, #2
 80156a8:	4413      	add	r3, r2
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	691b      	ldr	r3, [r3, #16]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d010      	beq.n	80156d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156b8:	687a      	ldr	r2, [r7, #4]
 80156ba:	33b0      	adds	r3, #176	; 0xb0
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	4413      	add	r3, r2
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	691b      	ldr	r3, [r3, #16]
 80156c4:	68ba      	ldr	r2, [r7, #8]
 80156c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80156ca:	68ba      	ldr	r2, [r7, #8]
 80156cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80156d0:	78fa      	ldrb	r2, [r7, #3]
 80156d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80156d4:	2300      	movs	r3, #0
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3710      	adds	r7, #16
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}

080156de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80156de:	b580      	push	{r7, lr}
 80156e0:	b084      	sub	sp, #16
 80156e2:	af00      	add	r7, sp, #0
 80156e4:	6078      	str	r0, [r7, #4]
 80156e6:	460b      	mov	r3, r1
 80156e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	32b0      	adds	r2, #176	; 0xb0
 80156f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	32b0      	adds	r2, #176	; 0xb0
 8015704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d101      	bne.n	8015710 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801570c:	2303      	movs	r3, #3
 801570e:	e01a      	b.n	8015746 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015710:	78fb      	ldrb	r3, [r7, #3]
 8015712:	4619      	mov	r1, r3
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f005 fb8a 	bl	801ae2e <USBD_LL_GetRxDataSize>
 801571a:	4602      	mov	r2, r0
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015728:	687a      	ldr	r2, [r7, #4]
 801572a:	33b0      	adds	r3, #176	; 0xb0
 801572c:	009b      	lsls	r3, r3, #2
 801572e:	4413      	add	r3, r2
 8015730:	685b      	ldr	r3, [r3, #4]
 8015732:	68db      	ldr	r3, [r3, #12]
 8015734:	68fa      	ldr	r2, [r7, #12]
 8015736:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801573a:	68fa      	ldr	r2, [r7, #12]
 801573c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015740:	4611      	mov	r1, r2
 8015742:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015744:	2300      	movs	r3, #0
}
 8015746:	4618      	mov	r0, r3
 8015748:	3710      	adds	r7, #16
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}

0801574e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801574e:	b580      	push	{r7, lr}
 8015750:	b084      	sub	sp, #16
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	32b0      	adds	r2, #176	; 0xb0
 8015760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015764:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d101      	bne.n	8015770 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801576c:	2303      	movs	r3, #3
 801576e:	e025      	b.n	80157bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015776:	687a      	ldr	r2, [r7, #4]
 8015778:	33b0      	adds	r3, #176	; 0xb0
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	4413      	add	r3, r2
 801577e:	685b      	ldr	r3, [r3, #4]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d01a      	beq.n	80157ba <USBD_CDC_EP0_RxReady+0x6c>
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801578a:	2bff      	cmp	r3, #255	; 0xff
 801578c:	d015      	beq.n	80157ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015794:	687a      	ldr	r2, [r7, #4]
 8015796:	33b0      	adds	r3, #176	; 0xb0
 8015798:	009b      	lsls	r3, r3, #2
 801579a:	4413      	add	r3, r2
 801579c:	685b      	ldr	r3, [r3, #4]
 801579e:	689b      	ldr	r3, [r3, #8]
 80157a0:	68fa      	ldr	r2, [r7, #12]
 80157a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80157a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80157a8:	68fa      	ldr	r2, [r7, #12]
 80157aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80157ae:	b292      	uxth	r2, r2
 80157b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	22ff      	movs	r2, #255	; 0xff
 80157b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80157ba:	2300      	movs	r3, #0
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3710      	adds	r7, #16
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}

080157c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b086      	sub	sp, #24
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80157cc:	2182      	movs	r1, #130	; 0x82
 80157ce:	4818      	ldr	r0, [pc, #96]	; (8015830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80157d0:	f000 fd09 	bl	80161e6 <USBD_GetEpDesc>
 80157d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80157d6:	2101      	movs	r1, #1
 80157d8:	4815      	ldr	r0, [pc, #84]	; (8015830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80157da:	f000 fd04 	bl	80161e6 <USBD_GetEpDesc>
 80157de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80157e0:	2181      	movs	r1, #129	; 0x81
 80157e2:	4813      	ldr	r0, [pc, #76]	; (8015830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80157e4:	f000 fcff 	bl	80161e6 <USBD_GetEpDesc>
 80157e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d002      	beq.n	80157f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	2210      	movs	r2, #16
 80157f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80157f6:	693b      	ldr	r3, [r7, #16]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d006      	beq.n	801580a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80157fc:	693b      	ldr	r3, [r7, #16]
 80157fe:	2200      	movs	r2, #0
 8015800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015804:	711a      	strb	r2, [r3, #4]
 8015806:	2200      	movs	r2, #0
 8015808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d006      	beq.n	801581e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	2200      	movs	r2, #0
 8015814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015818:	711a      	strb	r2, [r3, #4]
 801581a:	2200      	movs	r2, #0
 801581c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2243      	movs	r2, #67	; 0x43
 8015822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015824:	4b02      	ldr	r3, [pc, #8]	; (8015830 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015826:	4618      	mov	r0, r3
 8015828:	3718      	adds	r7, #24
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}
 801582e:	bf00      	nop
 8015830:	2000005c 	.word	0x2000005c

08015834 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b086      	sub	sp, #24
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801583c:	2182      	movs	r1, #130	; 0x82
 801583e:	4818      	ldr	r0, [pc, #96]	; (80158a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015840:	f000 fcd1 	bl	80161e6 <USBD_GetEpDesc>
 8015844:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015846:	2101      	movs	r1, #1
 8015848:	4815      	ldr	r0, [pc, #84]	; (80158a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801584a:	f000 fccc 	bl	80161e6 <USBD_GetEpDesc>
 801584e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015850:	2181      	movs	r1, #129	; 0x81
 8015852:	4813      	ldr	r0, [pc, #76]	; (80158a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015854:	f000 fcc7 	bl	80161e6 <USBD_GetEpDesc>
 8015858:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d002      	beq.n	8015866 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	2210      	movs	r2, #16
 8015864:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d006      	beq.n	801587a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801586c:	693b      	ldr	r3, [r7, #16]
 801586e:	2200      	movs	r2, #0
 8015870:	711a      	strb	r2, [r3, #4]
 8015872:	2200      	movs	r2, #0
 8015874:	f042 0202 	orr.w	r2, r2, #2
 8015878:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d006      	beq.n	801588e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	2200      	movs	r2, #0
 8015884:	711a      	strb	r2, [r3, #4]
 8015886:	2200      	movs	r2, #0
 8015888:	f042 0202 	orr.w	r2, r2, #2
 801588c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	2243      	movs	r2, #67	; 0x43
 8015892:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015894:	4b02      	ldr	r3, [pc, #8]	; (80158a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015896:	4618      	mov	r0, r3
 8015898:	3718      	adds	r7, #24
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	2000005c 	.word	0x2000005c

080158a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b086      	sub	sp, #24
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80158ac:	2182      	movs	r1, #130	; 0x82
 80158ae:	4818      	ldr	r0, [pc, #96]	; (8015910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80158b0:	f000 fc99 	bl	80161e6 <USBD_GetEpDesc>
 80158b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80158b6:	2101      	movs	r1, #1
 80158b8:	4815      	ldr	r0, [pc, #84]	; (8015910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80158ba:	f000 fc94 	bl	80161e6 <USBD_GetEpDesc>
 80158be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80158c0:	2181      	movs	r1, #129	; 0x81
 80158c2:	4813      	ldr	r0, [pc, #76]	; (8015910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80158c4:	f000 fc8f 	bl	80161e6 <USBD_GetEpDesc>
 80158c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d002      	beq.n	80158d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	2210      	movs	r2, #16
 80158d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d006      	beq.n	80158ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	2200      	movs	r2, #0
 80158e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80158e4:	711a      	strb	r2, [r3, #4]
 80158e6:	2200      	movs	r2, #0
 80158e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d006      	beq.n	80158fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	2200      	movs	r2, #0
 80158f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80158f8:	711a      	strb	r2, [r3, #4]
 80158fa:	2200      	movs	r2, #0
 80158fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	2243      	movs	r2, #67	; 0x43
 8015902:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015904:	4b02      	ldr	r3, [pc, #8]	; (8015910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015906:	4618      	mov	r0, r3
 8015908:	3718      	adds	r7, #24
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	2000005c 	.word	0x2000005c

08015914 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015914:	b480      	push	{r7}
 8015916:	b083      	sub	sp, #12
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	220a      	movs	r2, #10
 8015920:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015922:	4b03      	ldr	r3, [pc, #12]	; (8015930 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015924:	4618      	mov	r0, r3
 8015926:	370c      	adds	r7, #12
 8015928:	46bd      	mov	sp, r7
 801592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592e:	4770      	bx	lr
 8015930:	20000018 	.word	0x20000018

08015934 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015934:	b480      	push	{r7}
 8015936:	b083      	sub	sp, #12
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d101      	bne.n	8015948 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015944:	2303      	movs	r3, #3
 8015946:	e009      	b.n	801595c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801594e:	687a      	ldr	r2, [r7, #4]
 8015950:	33b0      	adds	r3, #176	; 0xb0
 8015952:	009b      	lsls	r3, r3, #2
 8015954:	4413      	add	r3, r2
 8015956:	683a      	ldr	r2, [r7, #0]
 8015958:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801595a:	2300      	movs	r3, #0
}
 801595c:	4618      	mov	r0, r3
 801595e:	370c      	adds	r7, #12
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015968:	b480      	push	{r7}
 801596a:	b087      	sub	sp, #28
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	32b0      	adds	r2, #176	; 0xb0
 801597e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015982:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d101      	bne.n	801598e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801598a:	2303      	movs	r3, #3
 801598c:	e008      	b.n	80159a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	68ba      	ldr	r2, [r7, #8]
 8015992:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	687a      	ldr	r2, [r7, #4]
 801599a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801599e:	2300      	movs	r3, #0
}
 80159a0:	4618      	mov	r0, r3
 80159a2:	371c      	adds	r7, #28
 80159a4:	46bd      	mov	sp, r7
 80159a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159aa:	4770      	bx	lr

080159ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80159ac:	b480      	push	{r7}
 80159ae:	b085      	sub	sp, #20
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	32b0      	adds	r2, #176	; 0xb0
 80159c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d101      	bne.n	80159d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80159cc:	2303      	movs	r3, #3
 80159ce:	e004      	b.n	80159da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	683a      	ldr	r2, [r7, #0]
 80159d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80159d8:	2300      	movs	r3, #0
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3714      	adds	r7, #20
 80159de:	46bd      	mov	sp, r7
 80159e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e4:	4770      	bx	lr
	...

080159e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b084      	sub	sp, #16
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	32b0      	adds	r2, #176	; 0xb0
 80159fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	32b0      	adds	r2, #176	; 0xb0
 8015a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d101      	bne.n	8015a16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015a12:	2303      	movs	r3, #3
 8015a14:	e018      	b.n	8015a48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	7c1b      	ldrb	r3, [r3, #16]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d10a      	bne.n	8015a34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015a1e:	4b0c      	ldr	r3, [pc, #48]	; (8015a50 <USBD_CDC_ReceivePacket+0x68>)
 8015a20:	7819      	ldrb	r1, [r3, #0]
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f005 f9dd 	bl	801adec <USBD_LL_PrepareReceive>
 8015a32:	e008      	b.n	8015a46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015a34:	4b06      	ldr	r3, [pc, #24]	; (8015a50 <USBD_CDC_ReceivePacket+0x68>)
 8015a36:	7819      	ldrb	r1, [r3, #0]
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015a3e:	2340      	movs	r3, #64	; 0x40
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f005 f9d3 	bl	801adec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015a46:	2300      	movs	r3, #0
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3710      	adds	r7, #16
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}
 8015a50:	200000a0 	.word	0x200000a0

08015a54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b086      	sub	sp, #24
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	60f8      	str	r0, [r7, #12]
 8015a5c:	60b9      	str	r1, [r7, #8]
 8015a5e:	4613      	mov	r3, r2
 8015a60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d101      	bne.n	8015a6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015a68:	2303      	movs	r3, #3
 8015a6a:	e01f      	b.n	8015aac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	2200      	movs	r2, #0
 8015a78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	2200      	movs	r2, #0
 8015a80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d003      	beq.n	8015a92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	68ba      	ldr	r2, [r7, #8]
 8015a8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2201      	movs	r2, #1
 8015a96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	79fa      	ldrb	r2, [r7, #7]
 8015a9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015aa0:	68f8      	ldr	r0, [r7, #12]
 8015aa2:	f005 f84d 	bl	801ab40 <USBD_LL_Init>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3718      	adds	r7, #24
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}

08015ab4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b084      	sub	sp, #16
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
 8015abc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d101      	bne.n	8015acc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015ac8:	2303      	movs	r3, #3
 8015aca:	e025      	b.n	8015b18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	683a      	ldr	r2, [r7, #0]
 8015ad0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	32ae      	adds	r2, #174	; 0xae
 8015ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d00f      	beq.n	8015b08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	32ae      	adds	r2, #174	; 0xae
 8015af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015af8:	f107 020e 	add.w	r2, r7, #14
 8015afc:	4610      	mov	r0, r2
 8015afe:	4798      	blx	r3
 8015b00:	4602      	mov	r2, r0
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015b0e:	1c5a      	adds	r2, r3, #1
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015b16:	2300      	movs	r3, #0
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3710      	adds	r7, #16
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}

08015b20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015b28:	6878      	ldr	r0, [r7, #4]
 8015b2a:	f005 f855 	bl	801abd8 <USBD_LL_Start>
 8015b2e:	4603      	mov	r3, r0
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015b40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015b42:	4618      	mov	r0, r3
 8015b44:	370c      	adds	r7, #12
 8015b46:	46bd      	mov	sp, r7
 8015b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4c:	4770      	bx	lr

08015b4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b4e:	b580      	push	{r7, lr}
 8015b50:	b084      	sub	sp, #16
 8015b52:	af00      	add	r7, sp, #0
 8015b54:	6078      	str	r0, [r7, #4]
 8015b56:	460b      	mov	r3, r1
 8015b58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d009      	beq.n	8015b7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	78fa      	ldrb	r2, [r7, #3]
 8015b72:	4611      	mov	r1, r2
 8015b74:	6878      	ldr	r0, [r7, #4]
 8015b76:	4798      	blx	r3
 8015b78:	4603      	mov	r3, r0
 8015b7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}

08015b86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b86:	b580      	push	{r7, lr}
 8015b88:	b084      	sub	sp, #16
 8015b8a:	af00      	add	r7, sp, #0
 8015b8c:	6078      	str	r0, [r7, #4]
 8015b8e:	460b      	mov	r3, r1
 8015b90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b92:	2300      	movs	r3, #0
 8015b94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	78fa      	ldrb	r2, [r7, #3]
 8015ba0:	4611      	mov	r1, r2
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	4798      	blx	r3
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d001      	beq.n	8015bb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015bac:	2303      	movs	r3, #3
 8015bae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	3710      	adds	r7, #16
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd80      	pop	{r7, pc}

08015bba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015bba:	b580      	push	{r7, lr}
 8015bbc:	b084      	sub	sp, #16
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
 8015bc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015bca:	6839      	ldr	r1, [r7, #0]
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f001 f908 	bl	8016de2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015be0:	461a      	mov	r2, r3
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015bee:	f003 031f 	and.w	r3, r3, #31
 8015bf2:	2b02      	cmp	r3, #2
 8015bf4:	d01a      	beq.n	8015c2c <USBD_LL_SetupStage+0x72>
 8015bf6:	2b02      	cmp	r3, #2
 8015bf8:	d822      	bhi.n	8015c40 <USBD_LL_SetupStage+0x86>
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d002      	beq.n	8015c04 <USBD_LL_SetupStage+0x4a>
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	d00a      	beq.n	8015c18 <USBD_LL_SetupStage+0x5e>
 8015c02:	e01d      	b.n	8015c40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f000 fb5f 	bl	80162d0 <USBD_StdDevReq>
 8015c12:	4603      	mov	r3, r0
 8015c14:	73fb      	strb	r3, [r7, #15]
      break;
 8015c16:	e020      	b.n	8015c5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015c1e:	4619      	mov	r1, r3
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f000 fbc7 	bl	80163b4 <USBD_StdItfReq>
 8015c26:	4603      	mov	r3, r0
 8015c28:	73fb      	strb	r3, [r7, #15]
      break;
 8015c2a:	e016      	b.n	8015c5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015c32:	4619      	mov	r1, r3
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f000 fc29 	bl	801648c <USBD_StdEPReq>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8015c3e:	e00c      	b.n	8015c5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015c46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015c4a:	b2db      	uxtb	r3, r3
 8015c4c:	4619      	mov	r1, r3
 8015c4e:	6878      	ldr	r0, [r7, #4]
 8015c50:	f005 f822 	bl	801ac98 <USBD_LL_StallEP>
 8015c54:	4603      	mov	r3, r0
 8015c56:	73fb      	strb	r3, [r7, #15]
      break;
 8015c58:	bf00      	nop
  }

  return ret;
 8015c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	3710      	adds	r7, #16
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd80      	pop	{r7, pc}

08015c64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b086      	sub	sp, #24
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	60f8      	str	r0, [r7, #12]
 8015c6c:	460b      	mov	r3, r1
 8015c6e:	607a      	str	r2, [r7, #4]
 8015c70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015c72:	2300      	movs	r3, #0
 8015c74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015c76:	7afb      	ldrb	r3, [r7, #11]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d16e      	bne.n	8015d5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015c82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015c8a:	2b03      	cmp	r3, #3
 8015c8c:	f040 8098 	bne.w	8015dc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	689a      	ldr	r2, [r3, #8]
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	68db      	ldr	r3, [r3, #12]
 8015c98:	429a      	cmp	r2, r3
 8015c9a:	d913      	bls.n	8015cc4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	689a      	ldr	r2, [r3, #8]
 8015ca0:	693b      	ldr	r3, [r7, #16]
 8015ca2:	68db      	ldr	r3, [r3, #12]
 8015ca4:	1ad2      	subs	r2, r2, r3
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	68da      	ldr	r2, [r3, #12]
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	689b      	ldr	r3, [r3, #8]
 8015cb2:	4293      	cmp	r3, r2
 8015cb4:	bf28      	it	cs
 8015cb6:	4613      	movcs	r3, r2
 8015cb8:	461a      	mov	r2, r3
 8015cba:	6879      	ldr	r1, [r7, #4]
 8015cbc:	68f8      	ldr	r0, [r7, #12]
 8015cbe:	f001 f984 	bl	8016fca <USBD_CtlContinueRx>
 8015cc2:	e07d      	b.n	8015dc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015cca:	f003 031f 	and.w	r3, r3, #31
 8015cce:	2b02      	cmp	r3, #2
 8015cd0:	d014      	beq.n	8015cfc <USBD_LL_DataOutStage+0x98>
 8015cd2:	2b02      	cmp	r3, #2
 8015cd4:	d81d      	bhi.n	8015d12 <USBD_LL_DataOutStage+0xae>
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d002      	beq.n	8015ce0 <USBD_LL_DataOutStage+0x7c>
 8015cda:	2b01      	cmp	r3, #1
 8015cdc:	d003      	beq.n	8015ce6 <USBD_LL_DataOutStage+0x82>
 8015cde:	e018      	b.n	8015d12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	75bb      	strb	r3, [r7, #22]
            break;
 8015ce4:	e018      	b.n	8015d18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	4619      	mov	r1, r3
 8015cf0:	68f8      	ldr	r0, [r7, #12]
 8015cf2:	f000 fa5e 	bl	80161b2 <USBD_CoreFindIF>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	75bb      	strb	r3, [r7, #22]
            break;
 8015cfa:	e00d      	b.n	8015d18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015d02:	b2db      	uxtb	r3, r3
 8015d04:	4619      	mov	r1, r3
 8015d06:	68f8      	ldr	r0, [r7, #12]
 8015d08:	f000 fa60 	bl	80161cc <USBD_CoreFindEP>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	75bb      	strb	r3, [r7, #22]
            break;
 8015d10:	e002      	b.n	8015d18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015d12:	2300      	movs	r3, #0
 8015d14:	75bb      	strb	r3, [r7, #22]
            break;
 8015d16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015d18:	7dbb      	ldrb	r3, [r7, #22]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d119      	bne.n	8015d52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d24:	b2db      	uxtb	r3, r3
 8015d26:	2b03      	cmp	r3, #3
 8015d28:	d113      	bne.n	8015d52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015d2a:	7dba      	ldrb	r2, [r7, #22]
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	32ae      	adds	r2, #174	; 0xae
 8015d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d34:	691b      	ldr	r3, [r3, #16]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d00b      	beq.n	8015d52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015d3a:	7dba      	ldrb	r2, [r7, #22]
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015d42:	7dba      	ldrb	r2, [r7, #22]
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	32ae      	adds	r2, #174	; 0xae
 8015d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d4c:	691b      	ldr	r3, [r3, #16]
 8015d4e:	68f8      	ldr	r0, [r7, #12]
 8015d50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015d52:	68f8      	ldr	r0, [r7, #12]
 8015d54:	f001 f94a 	bl	8016fec <USBD_CtlSendStatus>
 8015d58:	e032      	b.n	8015dc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015d5a:	7afb      	ldrb	r3, [r7, #11]
 8015d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d60:	b2db      	uxtb	r3, r3
 8015d62:	4619      	mov	r1, r3
 8015d64:	68f8      	ldr	r0, [r7, #12]
 8015d66:	f000 fa31 	bl	80161cc <USBD_CoreFindEP>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d6e:	7dbb      	ldrb	r3, [r7, #22]
 8015d70:	2bff      	cmp	r3, #255	; 0xff
 8015d72:	d025      	beq.n	8015dc0 <USBD_LL_DataOutStage+0x15c>
 8015d74:	7dbb      	ldrb	r3, [r7, #22]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d122      	bne.n	8015dc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d80:	b2db      	uxtb	r3, r3
 8015d82:	2b03      	cmp	r3, #3
 8015d84:	d117      	bne.n	8015db6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015d86:	7dba      	ldrb	r2, [r7, #22]
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	32ae      	adds	r2, #174	; 0xae
 8015d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d90:	699b      	ldr	r3, [r3, #24]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d00f      	beq.n	8015db6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015d96:	7dba      	ldrb	r2, [r7, #22]
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015d9e:	7dba      	ldrb	r2, [r7, #22]
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	32ae      	adds	r2, #174	; 0xae
 8015da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015da8:	699b      	ldr	r3, [r3, #24]
 8015daa:	7afa      	ldrb	r2, [r7, #11]
 8015dac:	4611      	mov	r1, r2
 8015dae:	68f8      	ldr	r0, [r7, #12]
 8015db0:	4798      	blx	r3
 8015db2:	4603      	mov	r3, r0
 8015db4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015db6:	7dfb      	ldrb	r3, [r7, #23]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d001      	beq.n	8015dc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015dbc:	7dfb      	ldrb	r3, [r7, #23]
 8015dbe:	e000      	b.n	8015dc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015dc0:	2300      	movs	r3, #0
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	3718      	adds	r7, #24
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}

08015dca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015dca:	b580      	push	{r7, lr}
 8015dcc:	b086      	sub	sp, #24
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	60f8      	str	r0, [r7, #12]
 8015dd2:	460b      	mov	r3, r1
 8015dd4:	607a      	str	r2, [r7, #4]
 8015dd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015dd8:	7afb      	ldrb	r3, [r7, #11]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d16f      	bne.n	8015ebe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	3314      	adds	r3, #20
 8015de2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015dea:	2b02      	cmp	r3, #2
 8015dec:	d15a      	bne.n	8015ea4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	689a      	ldr	r2, [r3, #8]
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	68db      	ldr	r3, [r3, #12]
 8015df6:	429a      	cmp	r2, r3
 8015df8:	d914      	bls.n	8015e24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	689a      	ldr	r2, [r3, #8]
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	68db      	ldr	r3, [r3, #12]
 8015e02:	1ad2      	subs	r2, r2, r3
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	689b      	ldr	r3, [r3, #8]
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	6879      	ldr	r1, [r7, #4]
 8015e10:	68f8      	ldr	r0, [r7, #12]
 8015e12:	f001 f8ac 	bl	8016f6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e16:	2300      	movs	r3, #0
 8015e18:	2200      	movs	r2, #0
 8015e1a:	2100      	movs	r1, #0
 8015e1c:	68f8      	ldr	r0, [r7, #12]
 8015e1e:	f004 ffe5 	bl	801adec <USBD_LL_PrepareReceive>
 8015e22:	e03f      	b.n	8015ea4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	68da      	ldr	r2, [r3, #12]
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	689b      	ldr	r3, [r3, #8]
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d11c      	bne.n	8015e6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015e30:	693b      	ldr	r3, [r7, #16]
 8015e32:	685a      	ldr	r2, [r3, #4]
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d316      	bcc.n	8015e6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015e3c:	693b      	ldr	r3, [r7, #16]
 8015e3e:	685a      	ldr	r2, [r3, #4]
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d20f      	bcs.n	8015e6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	2100      	movs	r1, #0
 8015e4e:	68f8      	ldr	r0, [r7, #12]
 8015e50:	f001 f88d 	bl	8016f6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	2200      	movs	r2, #0
 8015e58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	2200      	movs	r2, #0
 8015e60:	2100      	movs	r1, #0
 8015e62:	68f8      	ldr	r0, [r7, #12]
 8015e64:	f004 ffc2 	bl	801adec <USBD_LL_PrepareReceive>
 8015e68:	e01c      	b.n	8015ea4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e70:	b2db      	uxtb	r3, r3
 8015e72:	2b03      	cmp	r3, #3
 8015e74:	d10f      	bne.n	8015e96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e7c:	68db      	ldr	r3, [r3, #12]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d009      	beq.n	8015e96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	2200      	movs	r2, #0
 8015e86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e90:	68db      	ldr	r3, [r3, #12]
 8015e92:	68f8      	ldr	r0, [r7, #12]
 8015e94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e96:	2180      	movs	r1, #128	; 0x80
 8015e98:	68f8      	ldr	r0, [r7, #12]
 8015e9a:	f004 fefd 	bl	801ac98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015e9e:	68f8      	ldr	r0, [r7, #12]
 8015ea0:	f001 f8b7 	bl	8017012 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d03a      	beq.n	8015f24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015eae:	68f8      	ldr	r0, [r7, #12]
 8015eb0:	f7ff fe42 	bl	8015b38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015ebc:	e032      	b.n	8015f24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015ebe:	7afb      	ldrb	r3, [r7, #11]
 8015ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015ec4:	b2db      	uxtb	r3, r3
 8015ec6:	4619      	mov	r1, r3
 8015ec8:	68f8      	ldr	r0, [r7, #12]
 8015eca:	f000 f97f 	bl	80161cc <USBD_CoreFindEP>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ed2:	7dfb      	ldrb	r3, [r7, #23]
 8015ed4:	2bff      	cmp	r3, #255	; 0xff
 8015ed6:	d025      	beq.n	8015f24 <USBD_LL_DataInStage+0x15a>
 8015ed8:	7dfb      	ldrb	r3, [r7, #23]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d122      	bne.n	8015f24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ee4:	b2db      	uxtb	r3, r3
 8015ee6:	2b03      	cmp	r3, #3
 8015ee8:	d11c      	bne.n	8015f24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015eea:	7dfa      	ldrb	r2, [r7, #23]
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	32ae      	adds	r2, #174	; 0xae
 8015ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ef4:	695b      	ldr	r3, [r3, #20]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d014      	beq.n	8015f24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015efa:	7dfa      	ldrb	r2, [r7, #23]
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015f02:	7dfa      	ldrb	r2, [r7, #23]
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	32ae      	adds	r2, #174	; 0xae
 8015f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f0c:	695b      	ldr	r3, [r3, #20]
 8015f0e:	7afa      	ldrb	r2, [r7, #11]
 8015f10:	4611      	mov	r1, r2
 8015f12:	68f8      	ldr	r0, [r7, #12]
 8015f14:	4798      	blx	r3
 8015f16:	4603      	mov	r3, r0
 8015f18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015f1a:	7dbb      	ldrb	r3, [r7, #22]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d001      	beq.n	8015f24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015f20:	7dbb      	ldrb	r3, [r7, #22]
 8015f22:	e000      	b.n	8015f26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015f24:	2300      	movs	r3, #0
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3718      	adds	r7, #24
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}

08015f2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015f2e:	b580      	push	{r7, lr}
 8015f30:	b084      	sub	sp, #16
 8015f32:	af00      	add	r7, sp, #0
 8015f34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f36:	2300      	movs	r3, #0
 8015f38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2201      	movs	r2, #1
 8015f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	2200      	movs	r2, #0
 8015f46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2200      	movs	r2, #0
 8015f54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d014      	beq.n	8015f94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f70:	685b      	ldr	r3, [r3, #4]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d00e      	beq.n	8015f94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f7c:	685b      	ldr	r3, [r3, #4]
 8015f7e:	687a      	ldr	r2, [r7, #4]
 8015f80:	6852      	ldr	r2, [r2, #4]
 8015f82:	b2d2      	uxtb	r2, r2
 8015f84:	4611      	mov	r1, r2
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	4798      	blx	r3
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d001      	beq.n	8015f94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015f90:	2303      	movs	r3, #3
 8015f92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015f94:	2340      	movs	r3, #64	; 0x40
 8015f96:	2200      	movs	r2, #0
 8015f98:	2100      	movs	r1, #0
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	f004 fe37 	bl	801ac0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2201      	movs	r2, #1
 8015fa4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2240      	movs	r2, #64	; 0x40
 8015fac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015fb0:	2340      	movs	r3, #64	; 0x40
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	2180      	movs	r1, #128	; 0x80
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	f004 fe29 	bl	801ac0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2201      	movs	r2, #1
 8015fc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2240      	movs	r2, #64	; 0x40
 8015fc6:	621a      	str	r2, [r3, #32]

  return ret;
 8015fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	3710      	adds	r7, #16
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bd80      	pop	{r7, pc}

08015fd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015fd2:	b480      	push	{r7}
 8015fd4:	b083      	sub	sp, #12
 8015fd6:	af00      	add	r7, sp, #0
 8015fd8:	6078      	str	r0, [r7, #4]
 8015fda:	460b      	mov	r3, r1
 8015fdc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	78fa      	ldrb	r2, [r7, #3]
 8015fe2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015fe4:	2300      	movs	r3, #0
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	370c      	adds	r7, #12
 8015fea:	46bd      	mov	sp, r7
 8015fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff0:	4770      	bx	lr

08015ff2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015ff2:	b480      	push	{r7}
 8015ff4:	b083      	sub	sp, #12
 8015ff6:	af00      	add	r7, sp, #0
 8015ff8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016000:	b2da      	uxtb	r2, r3
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2204      	movs	r2, #4
 801600c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016010:	2300      	movs	r3, #0
}
 8016012:	4618      	mov	r0, r3
 8016014:	370c      	adds	r7, #12
 8016016:	46bd      	mov	sp, r7
 8016018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601c:	4770      	bx	lr

0801601e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801601e:	b480      	push	{r7}
 8016020:	b083      	sub	sp, #12
 8016022:	af00      	add	r7, sp, #0
 8016024:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801602c:	b2db      	uxtb	r3, r3
 801602e:	2b04      	cmp	r3, #4
 8016030:	d106      	bne.n	8016040 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016038:	b2da      	uxtb	r2, r3
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016040:	2300      	movs	r3, #0
}
 8016042:	4618      	mov	r0, r3
 8016044:	370c      	adds	r7, #12
 8016046:	46bd      	mov	sp, r7
 8016048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604c:	4770      	bx	lr

0801604e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801604e:	b580      	push	{r7, lr}
 8016050:	b082      	sub	sp, #8
 8016052:	af00      	add	r7, sp, #0
 8016054:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801605c:	b2db      	uxtb	r3, r3
 801605e:	2b03      	cmp	r3, #3
 8016060:	d110      	bne.n	8016084 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016068:	2b00      	cmp	r3, #0
 801606a:	d00b      	beq.n	8016084 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016072:	69db      	ldr	r3, [r3, #28]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d005      	beq.n	8016084 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801607e:	69db      	ldr	r3, [r3, #28]
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016084:	2300      	movs	r3, #0
}
 8016086:	4618      	mov	r0, r3
 8016088:	3708      	adds	r7, #8
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801608e:	b580      	push	{r7, lr}
 8016090:	b082      	sub	sp, #8
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
 8016096:	460b      	mov	r3, r1
 8016098:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	32ae      	adds	r2, #174	; 0xae
 80160a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d101      	bne.n	80160b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80160ac:	2303      	movs	r3, #3
 80160ae:	e01c      	b.n	80160ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160b6:	b2db      	uxtb	r3, r3
 80160b8:	2b03      	cmp	r3, #3
 80160ba:	d115      	bne.n	80160e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	32ae      	adds	r2, #174	; 0xae
 80160c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160ca:	6a1b      	ldr	r3, [r3, #32]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d00b      	beq.n	80160e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	32ae      	adds	r2, #174	; 0xae
 80160da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160de:	6a1b      	ldr	r3, [r3, #32]
 80160e0:	78fa      	ldrb	r2, [r7, #3]
 80160e2:	4611      	mov	r1, r2
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80160e8:	2300      	movs	r3, #0
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	3708      	adds	r7, #8
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}

080160f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80160f2:	b580      	push	{r7, lr}
 80160f4:	b082      	sub	sp, #8
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	6078      	str	r0, [r7, #4]
 80160fa:	460b      	mov	r3, r1
 80160fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	32ae      	adds	r2, #174	; 0xae
 8016108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d101      	bne.n	8016114 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016110:	2303      	movs	r3, #3
 8016112:	e01c      	b.n	801614e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801611a:	b2db      	uxtb	r3, r3
 801611c:	2b03      	cmp	r3, #3
 801611e:	d115      	bne.n	801614c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	32ae      	adds	r2, #174	; 0xae
 801612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016130:	2b00      	cmp	r3, #0
 8016132:	d00b      	beq.n	801614c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	32ae      	adds	r2, #174	; 0xae
 801613e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016144:	78fa      	ldrb	r2, [r7, #3]
 8016146:	4611      	mov	r1, r2
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801614c:	2300      	movs	r3, #0
}
 801614e:	4618      	mov	r0, r3
 8016150:	3708      	adds	r7, #8
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016156:	b480      	push	{r7}
 8016158:	b083      	sub	sp, #12
 801615a:	af00      	add	r7, sp, #0
 801615c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801615e:	2300      	movs	r3, #0
}
 8016160:	4618      	mov	r0, r3
 8016162:	370c      	adds	r7, #12
 8016164:	46bd      	mov	sp, r7
 8016166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616a:	4770      	bx	lr

0801616c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b084      	sub	sp, #16
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016174:	2300      	movs	r3, #0
 8016176:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2201      	movs	r2, #1
 801617c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016186:	2b00      	cmp	r3, #0
 8016188:	d00e      	beq.n	80161a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	687a      	ldr	r2, [r7, #4]
 8016194:	6852      	ldr	r2, [r2, #4]
 8016196:	b2d2      	uxtb	r2, r2
 8016198:	4611      	mov	r1, r2
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	4798      	blx	r3
 801619e:	4603      	mov	r3, r0
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d001      	beq.n	80161a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80161a4:	2303      	movs	r3, #3
 80161a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80161a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3710      	adds	r7, #16
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}

080161b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80161b2:	b480      	push	{r7}
 80161b4:	b083      	sub	sp, #12
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
 80161ba:	460b      	mov	r3, r1
 80161bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80161be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80161c0:	4618      	mov	r0, r3
 80161c2:	370c      	adds	r7, #12
 80161c4:	46bd      	mov	sp, r7
 80161c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ca:	4770      	bx	lr

080161cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80161cc:	b480      	push	{r7}
 80161ce:	b083      	sub	sp, #12
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
 80161d4:	460b      	mov	r3, r1
 80161d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80161d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80161da:	4618      	mov	r0, r3
 80161dc:	370c      	adds	r7, #12
 80161de:	46bd      	mov	sp, r7
 80161e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e4:	4770      	bx	lr

080161e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80161e6:	b580      	push	{r7, lr}
 80161e8:	b086      	sub	sp, #24
 80161ea:	af00      	add	r7, sp, #0
 80161ec:	6078      	str	r0, [r7, #4]
 80161ee:	460b      	mov	r3, r1
 80161f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80161fa:	2300      	movs	r3, #0
 80161fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	885b      	ldrh	r3, [r3, #2]
 8016202:	b29a      	uxth	r2, r3
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	781b      	ldrb	r3, [r3, #0]
 8016208:	b29b      	uxth	r3, r3
 801620a:	429a      	cmp	r2, r3
 801620c:	d920      	bls.n	8016250 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	b29b      	uxth	r3, r3
 8016214:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016216:	e013      	b.n	8016240 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016218:	f107 030a 	add.w	r3, r7, #10
 801621c:	4619      	mov	r1, r3
 801621e:	6978      	ldr	r0, [r7, #20]
 8016220:	f000 f81b 	bl	801625a <USBD_GetNextDesc>
 8016224:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	785b      	ldrb	r3, [r3, #1]
 801622a:	2b05      	cmp	r3, #5
 801622c:	d108      	bne.n	8016240 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801622e:	697b      	ldr	r3, [r7, #20]
 8016230:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	789b      	ldrb	r3, [r3, #2]
 8016236:	78fa      	ldrb	r2, [r7, #3]
 8016238:	429a      	cmp	r2, r3
 801623a:	d008      	beq.n	801624e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801623c:	2300      	movs	r3, #0
 801623e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	885b      	ldrh	r3, [r3, #2]
 8016244:	b29a      	uxth	r2, r3
 8016246:	897b      	ldrh	r3, [r7, #10]
 8016248:	429a      	cmp	r2, r3
 801624a:	d8e5      	bhi.n	8016218 <USBD_GetEpDesc+0x32>
 801624c:	e000      	b.n	8016250 <USBD_GetEpDesc+0x6a>
          break;
 801624e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016250:	693b      	ldr	r3, [r7, #16]
}
 8016252:	4618      	mov	r0, r3
 8016254:	3718      	adds	r7, #24
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801625a:	b480      	push	{r7}
 801625c:	b085      	sub	sp, #20
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
 8016262:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	881a      	ldrh	r2, [r3, #0]
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	781b      	ldrb	r3, [r3, #0]
 8016270:	b29b      	uxth	r3, r3
 8016272:	4413      	add	r3, r2
 8016274:	b29a      	uxth	r2, r3
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	781b      	ldrb	r3, [r3, #0]
 801627e:	461a      	mov	r2, r3
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	4413      	add	r3, r2
 8016284:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016286:	68fb      	ldr	r3, [r7, #12]
}
 8016288:	4618      	mov	r0, r3
 801628a:	3714      	adds	r7, #20
 801628c:	46bd      	mov	sp, r7
 801628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016292:	4770      	bx	lr

08016294 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016294:	b480      	push	{r7}
 8016296:	b087      	sub	sp, #28
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	3301      	adds	r3, #1
 80162aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80162ac:	697b      	ldr	r3, [r7, #20]
 80162ae:	781b      	ldrb	r3, [r3, #0]
 80162b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80162b2:	8a3b      	ldrh	r3, [r7, #16]
 80162b4:	021b      	lsls	r3, r3, #8
 80162b6:	b21a      	sxth	r2, r3
 80162b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80162bc:	4313      	orrs	r3, r2
 80162be:	b21b      	sxth	r3, r3
 80162c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80162c2:	89fb      	ldrh	r3, [r7, #14]
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	371c      	adds	r7, #28
 80162c8:	46bd      	mov	sp, r7
 80162ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ce:	4770      	bx	lr

080162d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b084      	sub	sp, #16
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
 80162d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80162da:	2300      	movs	r3, #0
 80162dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80162de:	683b      	ldr	r3, [r7, #0]
 80162e0:	781b      	ldrb	r3, [r3, #0]
 80162e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80162e6:	2b40      	cmp	r3, #64	; 0x40
 80162e8:	d005      	beq.n	80162f6 <USBD_StdDevReq+0x26>
 80162ea:	2b40      	cmp	r3, #64	; 0x40
 80162ec:	d857      	bhi.n	801639e <USBD_StdDevReq+0xce>
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d00f      	beq.n	8016312 <USBD_StdDevReq+0x42>
 80162f2:	2b20      	cmp	r3, #32
 80162f4:	d153      	bne.n	801639e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	32ae      	adds	r2, #174	; 0xae
 8016300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016304:	689b      	ldr	r3, [r3, #8]
 8016306:	6839      	ldr	r1, [r7, #0]
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	4798      	blx	r3
 801630c:	4603      	mov	r3, r0
 801630e:	73fb      	strb	r3, [r7, #15]
      break;
 8016310:	e04a      	b.n	80163a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	785b      	ldrb	r3, [r3, #1]
 8016316:	2b09      	cmp	r3, #9
 8016318:	d83b      	bhi.n	8016392 <USBD_StdDevReq+0xc2>
 801631a:	a201      	add	r2, pc, #4	; (adr r2, 8016320 <USBD_StdDevReq+0x50>)
 801631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016320:	08016375 	.word	0x08016375
 8016324:	08016389 	.word	0x08016389
 8016328:	08016393 	.word	0x08016393
 801632c:	0801637f 	.word	0x0801637f
 8016330:	08016393 	.word	0x08016393
 8016334:	08016353 	.word	0x08016353
 8016338:	08016349 	.word	0x08016349
 801633c:	08016393 	.word	0x08016393
 8016340:	0801636b 	.word	0x0801636b
 8016344:	0801635d 	.word	0x0801635d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016348:	6839      	ldr	r1, [r7, #0]
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f000 fa3c 	bl	80167c8 <USBD_GetDescriptor>
          break;
 8016350:	e024      	b.n	801639c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016352:	6839      	ldr	r1, [r7, #0]
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f000 fba1 	bl	8016a9c <USBD_SetAddress>
          break;
 801635a:	e01f      	b.n	801639c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801635c:	6839      	ldr	r1, [r7, #0]
 801635e:	6878      	ldr	r0, [r7, #4]
 8016360:	f000 fbe0 	bl	8016b24 <USBD_SetConfig>
 8016364:	4603      	mov	r3, r0
 8016366:	73fb      	strb	r3, [r7, #15]
          break;
 8016368:	e018      	b.n	801639c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801636a:	6839      	ldr	r1, [r7, #0]
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f000 fc83 	bl	8016c78 <USBD_GetConfig>
          break;
 8016372:	e013      	b.n	801639c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016374:	6839      	ldr	r1, [r7, #0]
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f000 fcb4 	bl	8016ce4 <USBD_GetStatus>
          break;
 801637c:	e00e      	b.n	801639c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801637e:	6839      	ldr	r1, [r7, #0]
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f000 fce3 	bl	8016d4c <USBD_SetFeature>
          break;
 8016386:	e009      	b.n	801639c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016388:	6839      	ldr	r1, [r7, #0]
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f000 fd07 	bl	8016d9e <USBD_ClrFeature>
          break;
 8016390:	e004      	b.n	801639c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016392:	6839      	ldr	r1, [r7, #0]
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	f000 fd5e 	bl	8016e56 <USBD_CtlError>
          break;
 801639a:	bf00      	nop
      }
      break;
 801639c:	e004      	b.n	80163a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801639e:	6839      	ldr	r1, [r7, #0]
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f000 fd58 	bl	8016e56 <USBD_CtlError>
      break;
 80163a6:	bf00      	nop
  }

  return ret;
 80163a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3710      	adds	r7, #16
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop

080163b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b084      	sub	sp, #16
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
 80163bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80163be:	2300      	movs	r3, #0
 80163c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	781b      	ldrb	r3, [r3, #0]
 80163c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80163ca:	2b40      	cmp	r3, #64	; 0x40
 80163cc:	d005      	beq.n	80163da <USBD_StdItfReq+0x26>
 80163ce:	2b40      	cmp	r3, #64	; 0x40
 80163d0:	d852      	bhi.n	8016478 <USBD_StdItfReq+0xc4>
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d001      	beq.n	80163da <USBD_StdItfReq+0x26>
 80163d6:	2b20      	cmp	r3, #32
 80163d8:	d14e      	bne.n	8016478 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	3b01      	subs	r3, #1
 80163e4:	2b02      	cmp	r3, #2
 80163e6:	d840      	bhi.n	801646a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	889b      	ldrh	r3, [r3, #4]
 80163ec:	b2db      	uxtb	r3, r3
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	d836      	bhi.n	8016460 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	889b      	ldrh	r3, [r3, #4]
 80163f6:	b2db      	uxtb	r3, r3
 80163f8:	4619      	mov	r1, r3
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7ff fed9 	bl	80161b2 <USBD_CoreFindIF>
 8016400:	4603      	mov	r3, r0
 8016402:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016404:	7bbb      	ldrb	r3, [r7, #14]
 8016406:	2bff      	cmp	r3, #255	; 0xff
 8016408:	d01d      	beq.n	8016446 <USBD_StdItfReq+0x92>
 801640a:	7bbb      	ldrb	r3, [r7, #14]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d11a      	bne.n	8016446 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016410:	7bba      	ldrb	r2, [r7, #14]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	32ae      	adds	r2, #174	; 0xae
 8016416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801641a:	689b      	ldr	r3, [r3, #8]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d00f      	beq.n	8016440 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016420:	7bba      	ldrb	r2, [r7, #14]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016428:	7bba      	ldrb	r2, [r7, #14]
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	32ae      	adds	r2, #174	; 0xae
 801642e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016432:	689b      	ldr	r3, [r3, #8]
 8016434:	6839      	ldr	r1, [r7, #0]
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	4798      	blx	r3
 801643a:	4603      	mov	r3, r0
 801643c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801643e:	e004      	b.n	801644a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016440:	2303      	movs	r3, #3
 8016442:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016444:	e001      	b.n	801644a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016446:	2303      	movs	r3, #3
 8016448:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	88db      	ldrh	r3, [r3, #6]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d110      	bne.n	8016474 <USBD_StdItfReq+0xc0>
 8016452:	7bfb      	ldrb	r3, [r7, #15]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d10d      	bne.n	8016474 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f000 fdc7 	bl	8016fec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801645e:	e009      	b.n	8016474 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016460:	6839      	ldr	r1, [r7, #0]
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	f000 fcf7 	bl	8016e56 <USBD_CtlError>
          break;
 8016468:	e004      	b.n	8016474 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801646a:	6839      	ldr	r1, [r7, #0]
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f000 fcf2 	bl	8016e56 <USBD_CtlError>
          break;
 8016472:	e000      	b.n	8016476 <USBD_StdItfReq+0xc2>
          break;
 8016474:	bf00      	nop
      }
      break;
 8016476:	e004      	b.n	8016482 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016478:	6839      	ldr	r1, [r7, #0]
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f000 fceb 	bl	8016e56 <USBD_CtlError>
      break;
 8016480:	bf00      	nop
  }

  return ret;
 8016482:	7bfb      	ldrb	r3, [r7, #15]
}
 8016484:	4618      	mov	r0, r3
 8016486:	3710      	adds	r7, #16
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}

0801648c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b084      	sub	sp, #16
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016496:	2300      	movs	r3, #0
 8016498:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801649a:	683b      	ldr	r3, [r7, #0]
 801649c:	889b      	ldrh	r3, [r3, #4]
 801649e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80164a0:	683b      	ldr	r3, [r7, #0]
 80164a2:	781b      	ldrb	r3, [r3, #0]
 80164a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80164a8:	2b40      	cmp	r3, #64	; 0x40
 80164aa:	d007      	beq.n	80164bc <USBD_StdEPReq+0x30>
 80164ac:	2b40      	cmp	r3, #64	; 0x40
 80164ae:	f200 817f 	bhi.w	80167b0 <USBD_StdEPReq+0x324>
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d02a      	beq.n	801650c <USBD_StdEPReq+0x80>
 80164b6:	2b20      	cmp	r3, #32
 80164b8:	f040 817a 	bne.w	80167b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80164bc:	7bbb      	ldrb	r3, [r7, #14]
 80164be:	4619      	mov	r1, r3
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f7ff fe83 	bl	80161cc <USBD_CoreFindEP>
 80164c6:	4603      	mov	r3, r0
 80164c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80164ca:	7b7b      	ldrb	r3, [r7, #13]
 80164cc:	2bff      	cmp	r3, #255	; 0xff
 80164ce:	f000 8174 	beq.w	80167ba <USBD_StdEPReq+0x32e>
 80164d2:	7b7b      	ldrb	r3, [r7, #13]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	f040 8170 	bne.w	80167ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80164da:	7b7a      	ldrb	r2, [r7, #13]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80164e2:	7b7a      	ldrb	r2, [r7, #13]
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	32ae      	adds	r2, #174	; 0xae
 80164e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ec:	689b      	ldr	r3, [r3, #8]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	f000 8163 	beq.w	80167ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80164f4:	7b7a      	ldrb	r2, [r7, #13]
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	32ae      	adds	r2, #174	; 0xae
 80164fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164fe:	689b      	ldr	r3, [r3, #8]
 8016500:	6839      	ldr	r1, [r7, #0]
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	4798      	blx	r3
 8016506:	4603      	mov	r3, r0
 8016508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801650a:	e156      	b.n	80167ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	785b      	ldrb	r3, [r3, #1]
 8016510:	2b03      	cmp	r3, #3
 8016512:	d008      	beq.n	8016526 <USBD_StdEPReq+0x9a>
 8016514:	2b03      	cmp	r3, #3
 8016516:	f300 8145 	bgt.w	80167a4 <USBD_StdEPReq+0x318>
 801651a:	2b00      	cmp	r3, #0
 801651c:	f000 809b 	beq.w	8016656 <USBD_StdEPReq+0x1ca>
 8016520:	2b01      	cmp	r3, #1
 8016522:	d03c      	beq.n	801659e <USBD_StdEPReq+0x112>
 8016524:	e13e      	b.n	80167a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801652c:	b2db      	uxtb	r3, r3
 801652e:	2b02      	cmp	r3, #2
 8016530:	d002      	beq.n	8016538 <USBD_StdEPReq+0xac>
 8016532:	2b03      	cmp	r3, #3
 8016534:	d016      	beq.n	8016564 <USBD_StdEPReq+0xd8>
 8016536:	e02c      	b.n	8016592 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016538:	7bbb      	ldrb	r3, [r7, #14]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d00d      	beq.n	801655a <USBD_StdEPReq+0xce>
 801653e:	7bbb      	ldrb	r3, [r7, #14]
 8016540:	2b80      	cmp	r3, #128	; 0x80
 8016542:	d00a      	beq.n	801655a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016544:	7bbb      	ldrb	r3, [r7, #14]
 8016546:	4619      	mov	r1, r3
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f004 fba5 	bl	801ac98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801654e:	2180      	movs	r1, #128	; 0x80
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f004 fba1 	bl	801ac98 <USBD_LL_StallEP>
 8016556:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016558:	e020      	b.n	801659c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801655a:	6839      	ldr	r1, [r7, #0]
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f000 fc7a 	bl	8016e56 <USBD_CtlError>
              break;
 8016562:	e01b      	b.n	801659c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	885b      	ldrh	r3, [r3, #2]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d10e      	bne.n	801658a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801656c:	7bbb      	ldrb	r3, [r7, #14]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d00b      	beq.n	801658a <USBD_StdEPReq+0xfe>
 8016572:	7bbb      	ldrb	r3, [r7, #14]
 8016574:	2b80      	cmp	r3, #128	; 0x80
 8016576:	d008      	beq.n	801658a <USBD_StdEPReq+0xfe>
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	88db      	ldrh	r3, [r3, #6]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d104      	bne.n	801658a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016580:	7bbb      	ldrb	r3, [r7, #14]
 8016582:	4619      	mov	r1, r3
 8016584:	6878      	ldr	r0, [r7, #4]
 8016586:	f004 fb87 	bl	801ac98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801658a:	6878      	ldr	r0, [r7, #4]
 801658c:	f000 fd2e 	bl	8016fec <USBD_CtlSendStatus>

              break;
 8016590:	e004      	b.n	801659c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016592:	6839      	ldr	r1, [r7, #0]
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f000 fc5e 	bl	8016e56 <USBD_CtlError>
              break;
 801659a:	bf00      	nop
          }
          break;
 801659c:	e107      	b.n	80167ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165a4:	b2db      	uxtb	r3, r3
 80165a6:	2b02      	cmp	r3, #2
 80165a8:	d002      	beq.n	80165b0 <USBD_StdEPReq+0x124>
 80165aa:	2b03      	cmp	r3, #3
 80165ac:	d016      	beq.n	80165dc <USBD_StdEPReq+0x150>
 80165ae:	e04b      	b.n	8016648 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80165b0:	7bbb      	ldrb	r3, [r7, #14]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d00d      	beq.n	80165d2 <USBD_StdEPReq+0x146>
 80165b6:	7bbb      	ldrb	r3, [r7, #14]
 80165b8:	2b80      	cmp	r3, #128	; 0x80
 80165ba:	d00a      	beq.n	80165d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80165bc:	7bbb      	ldrb	r3, [r7, #14]
 80165be:	4619      	mov	r1, r3
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f004 fb69 	bl	801ac98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80165c6:	2180      	movs	r1, #128	; 0x80
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f004 fb65 	bl	801ac98 <USBD_LL_StallEP>
 80165ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80165d0:	e040      	b.n	8016654 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80165d2:	6839      	ldr	r1, [r7, #0]
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	f000 fc3e 	bl	8016e56 <USBD_CtlError>
              break;
 80165da:	e03b      	b.n	8016654 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	885b      	ldrh	r3, [r3, #2]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d136      	bne.n	8016652 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80165e4:	7bbb      	ldrb	r3, [r7, #14]
 80165e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d004      	beq.n	80165f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80165ee:	7bbb      	ldrb	r3, [r7, #14]
 80165f0:	4619      	mov	r1, r3
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f004 fb6f 	bl	801acd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f000 fcf7 	bl	8016fec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80165fe:	7bbb      	ldrb	r3, [r7, #14]
 8016600:	4619      	mov	r1, r3
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7ff fde2 	bl	80161cc <USBD_CoreFindEP>
 8016608:	4603      	mov	r3, r0
 801660a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801660c:	7b7b      	ldrb	r3, [r7, #13]
 801660e:	2bff      	cmp	r3, #255	; 0xff
 8016610:	d01f      	beq.n	8016652 <USBD_StdEPReq+0x1c6>
 8016612:	7b7b      	ldrb	r3, [r7, #13]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d11c      	bne.n	8016652 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016618:	7b7a      	ldrb	r2, [r7, #13]
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016620:	7b7a      	ldrb	r2, [r7, #13]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	32ae      	adds	r2, #174	; 0xae
 8016626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801662a:	689b      	ldr	r3, [r3, #8]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d010      	beq.n	8016652 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016630:	7b7a      	ldrb	r2, [r7, #13]
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	32ae      	adds	r2, #174	; 0xae
 8016636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801663a:	689b      	ldr	r3, [r3, #8]
 801663c:	6839      	ldr	r1, [r7, #0]
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	4798      	blx	r3
 8016642:	4603      	mov	r3, r0
 8016644:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016646:	e004      	b.n	8016652 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016648:	6839      	ldr	r1, [r7, #0]
 801664a:	6878      	ldr	r0, [r7, #4]
 801664c:	f000 fc03 	bl	8016e56 <USBD_CtlError>
              break;
 8016650:	e000      	b.n	8016654 <USBD_StdEPReq+0x1c8>
              break;
 8016652:	bf00      	nop
          }
          break;
 8016654:	e0ab      	b.n	80167ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801665c:	b2db      	uxtb	r3, r3
 801665e:	2b02      	cmp	r3, #2
 8016660:	d002      	beq.n	8016668 <USBD_StdEPReq+0x1dc>
 8016662:	2b03      	cmp	r3, #3
 8016664:	d032      	beq.n	80166cc <USBD_StdEPReq+0x240>
 8016666:	e097      	b.n	8016798 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016668:	7bbb      	ldrb	r3, [r7, #14]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d007      	beq.n	801667e <USBD_StdEPReq+0x1f2>
 801666e:	7bbb      	ldrb	r3, [r7, #14]
 8016670:	2b80      	cmp	r3, #128	; 0x80
 8016672:	d004      	beq.n	801667e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016674:	6839      	ldr	r1, [r7, #0]
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	f000 fbed 	bl	8016e56 <USBD_CtlError>
                break;
 801667c:	e091      	b.n	80167a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801667e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016682:	2b00      	cmp	r3, #0
 8016684:	da0b      	bge.n	801669e <USBD_StdEPReq+0x212>
 8016686:	7bbb      	ldrb	r3, [r7, #14]
 8016688:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801668c:	4613      	mov	r3, r2
 801668e:	009b      	lsls	r3, r3, #2
 8016690:	4413      	add	r3, r2
 8016692:	009b      	lsls	r3, r3, #2
 8016694:	3310      	adds	r3, #16
 8016696:	687a      	ldr	r2, [r7, #4]
 8016698:	4413      	add	r3, r2
 801669a:	3304      	adds	r3, #4
 801669c:	e00b      	b.n	80166b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801669e:	7bbb      	ldrb	r3, [r7, #14]
 80166a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80166a4:	4613      	mov	r3, r2
 80166a6:	009b      	lsls	r3, r3, #2
 80166a8:	4413      	add	r3, r2
 80166aa:	009b      	lsls	r3, r3, #2
 80166ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80166b0:	687a      	ldr	r2, [r7, #4]
 80166b2:	4413      	add	r3, r2
 80166b4:	3304      	adds	r3, #4
 80166b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	2200      	movs	r2, #0
 80166bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	2202      	movs	r2, #2
 80166c2:	4619      	mov	r1, r3
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f000 fc37 	bl	8016f38 <USBD_CtlSendData>
              break;
 80166ca:	e06a      	b.n	80167a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80166cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	da11      	bge.n	80166f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80166d4:	7bbb      	ldrb	r3, [r7, #14]
 80166d6:	f003 020f 	and.w	r2, r3, #15
 80166da:	6879      	ldr	r1, [r7, #4]
 80166dc:	4613      	mov	r3, r2
 80166de:	009b      	lsls	r3, r3, #2
 80166e0:	4413      	add	r3, r2
 80166e2:	009b      	lsls	r3, r3, #2
 80166e4:	440b      	add	r3, r1
 80166e6:	3324      	adds	r3, #36	; 0x24
 80166e8:	881b      	ldrh	r3, [r3, #0]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d117      	bne.n	801671e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80166ee:	6839      	ldr	r1, [r7, #0]
 80166f0:	6878      	ldr	r0, [r7, #4]
 80166f2:	f000 fbb0 	bl	8016e56 <USBD_CtlError>
                  break;
 80166f6:	e054      	b.n	80167a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80166f8:	7bbb      	ldrb	r3, [r7, #14]
 80166fa:	f003 020f 	and.w	r2, r3, #15
 80166fe:	6879      	ldr	r1, [r7, #4]
 8016700:	4613      	mov	r3, r2
 8016702:	009b      	lsls	r3, r3, #2
 8016704:	4413      	add	r3, r2
 8016706:	009b      	lsls	r3, r3, #2
 8016708:	440b      	add	r3, r1
 801670a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801670e:	881b      	ldrh	r3, [r3, #0]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d104      	bne.n	801671e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016714:	6839      	ldr	r1, [r7, #0]
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f000 fb9d 	bl	8016e56 <USBD_CtlError>
                  break;
 801671c:	e041      	b.n	80167a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801671e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016722:	2b00      	cmp	r3, #0
 8016724:	da0b      	bge.n	801673e <USBD_StdEPReq+0x2b2>
 8016726:	7bbb      	ldrb	r3, [r7, #14]
 8016728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801672c:	4613      	mov	r3, r2
 801672e:	009b      	lsls	r3, r3, #2
 8016730:	4413      	add	r3, r2
 8016732:	009b      	lsls	r3, r3, #2
 8016734:	3310      	adds	r3, #16
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	4413      	add	r3, r2
 801673a:	3304      	adds	r3, #4
 801673c:	e00b      	b.n	8016756 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801673e:	7bbb      	ldrb	r3, [r7, #14]
 8016740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016744:	4613      	mov	r3, r2
 8016746:	009b      	lsls	r3, r3, #2
 8016748:	4413      	add	r3, r2
 801674a:	009b      	lsls	r3, r3, #2
 801674c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016750:	687a      	ldr	r2, [r7, #4]
 8016752:	4413      	add	r3, r2
 8016754:	3304      	adds	r3, #4
 8016756:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016758:	7bbb      	ldrb	r3, [r7, #14]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d002      	beq.n	8016764 <USBD_StdEPReq+0x2d8>
 801675e:	7bbb      	ldrb	r3, [r7, #14]
 8016760:	2b80      	cmp	r3, #128	; 0x80
 8016762:	d103      	bne.n	801676c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016764:	68bb      	ldr	r3, [r7, #8]
 8016766:	2200      	movs	r2, #0
 8016768:	601a      	str	r2, [r3, #0]
 801676a:	e00e      	b.n	801678a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801676c:	7bbb      	ldrb	r3, [r7, #14]
 801676e:	4619      	mov	r1, r3
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f004 facf 	bl	801ad14 <USBD_LL_IsStallEP>
 8016776:	4603      	mov	r3, r0
 8016778:	2b00      	cmp	r3, #0
 801677a:	d003      	beq.n	8016784 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801677c:	68bb      	ldr	r3, [r7, #8]
 801677e:	2201      	movs	r2, #1
 8016780:	601a      	str	r2, [r3, #0]
 8016782:	e002      	b.n	801678a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016784:	68bb      	ldr	r3, [r7, #8]
 8016786:	2200      	movs	r2, #0
 8016788:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801678a:	68bb      	ldr	r3, [r7, #8]
 801678c:	2202      	movs	r2, #2
 801678e:	4619      	mov	r1, r3
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f000 fbd1 	bl	8016f38 <USBD_CtlSendData>
              break;
 8016796:	e004      	b.n	80167a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016798:	6839      	ldr	r1, [r7, #0]
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f000 fb5b 	bl	8016e56 <USBD_CtlError>
              break;
 80167a0:	bf00      	nop
          }
          break;
 80167a2:	e004      	b.n	80167ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80167a4:	6839      	ldr	r1, [r7, #0]
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f000 fb55 	bl	8016e56 <USBD_CtlError>
          break;
 80167ac:	bf00      	nop
      }
      break;
 80167ae:	e005      	b.n	80167bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80167b0:	6839      	ldr	r1, [r7, #0]
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	f000 fb4f 	bl	8016e56 <USBD_CtlError>
      break;
 80167b8:	e000      	b.n	80167bc <USBD_StdEPReq+0x330>
      break;
 80167ba:	bf00      	nop
  }

  return ret;
 80167bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
	...

080167c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
 80167d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80167d2:	2300      	movs	r3, #0
 80167d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80167d6:	2300      	movs	r3, #0
 80167d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80167da:	2300      	movs	r3, #0
 80167dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80167de:	683b      	ldr	r3, [r7, #0]
 80167e0:	885b      	ldrh	r3, [r3, #2]
 80167e2:	0a1b      	lsrs	r3, r3, #8
 80167e4:	b29b      	uxth	r3, r3
 80167e6:	3b01      	subs	r3, #1
 80167e8:	2b06      	cmp	r3, #6
 80167ea:	f200 8128 	bhi.w	8016a3e <USBD_GetDescriptor+0x276>
 80167ee:	a201      	add	r2, pc, #4	; (adr r2, 80167f4 <USBD_GetDescriptor+0x2c>)
 80167f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167f4:	08016811 	.word	0x08016811
 80167f8:	08016829 	.word	0x08016829
 80167fc:	08016869 	.word	0x08016869
 8016800:	08016a3f 	.word	0x08016a3f
 8016804:	08016a3f 	.word	0x08016a3f
 8016808:	080169df 	.word	0x080169df
 801680c:	08016a0b 	.word	0x08016a0b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	687a      	ldr	r2, [r7, #4]
 801681a:	7c12      	ldrb	r2, [r2, #16]
 801681c:	f107 0108 	add.w	r1, r7, #8
 8016820:	4610      	mov	r0, r2
 8016822:	4798      	blx	r3
 8016824:	60f8      	str	r0, [r7, #12]
      break;
 8016826:	e112      	b.n	8016a4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	7c1b      	ldrb	r3, [r3, #16]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d10d      	bne.n	801684c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016838:	f107 0208 	add.w	r2, r7, #8
 801683c:	4610      	mov	r0, r2
 801683e:	4798      	blx	r3
 8016840:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	3301      	adds	r3, #1
 8016846:	2202      	movs	r2, #2
 8016848:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801684a:	e100      	b.n	8016a4e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016854:	f107 0208 	add.w	r2, r7, #8
 8016858:	4610      	mov	r0, r2
 801685a:	4798      	blx	r3
 801685c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	3301      	adds	r3, #1
 8016862:	2202      	movs	r2, #2
 8016864:	701a      	strb	r2, [r3, #0]
      break;
 8016866:	e0f2      	b.n	8016a4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016868:	683b      	ldr	r3, [r7, #0]
 801686a:	885b      	ldrh	r3, [r3, #2]
 801686c:	b2db      	uxtb	r3, r3
 801686e:	2b05      	cmp	r3, #5
 8016870:	f200 80ac 	bhi.w	80169cc <USBD_GetDescriptor+0x204>
 8016874:	a201      	add	r2, pc, #4	; (adr r2, 801687c <USBD_GetDescriptor+0xb4>)
 8016876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801687a:	bf00      	nop
 801687c:	08016895 	.word	0x08016895
 8016880:	080168c9 	.word	0x080168c9
 8016884:	080168fd 	.word	0x080168fd
 8016888:	08016931 	.word	0x08016931
 801688c:	08016965 	.word	0x08016965
 8016890:	08016999 	.word	0x08016999
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d00b      	beq.n	80168b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168a6:	685b      	ldr	r3, [r3, #4]
 80168a8:	687a      	ldr	r2, [r7, #4]
 80168aa:	7c12      	ldrb	r2, [r2, #16]
 80168ac:	f107 0108 	add.w	r1, r7, #8
 80168b0:	4610      	mov	r0, r2
 80168b2:	4798      	blx	r3
 80168b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80168b6:	e091      	b.n	80169dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80168b8:	6839      	ldr	r1, [r7, #0]
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f000 facb 	bl	8016e56 <USBD_CtlError>
            err++;
 80168c0:	7afb      	ldrb	r3, [r7, #11]
 80168c2:	3301      	adds	r3, #1
 80168c4:	72fb      	strb	r3, [r7, #11]
          break;
 80168c6:	e089      	b.n	80169dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168ce:	689b      	ldr	r3, [r3, #8]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d00b      	beq.n	80168ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168da:	689b      	ldr	r3, [r3, #8]
 80168dc:	687a      	ldr	r2, [r7, #4]
 80168de:	7c12      	ldrb	r2, [r2, #16]
 80168e0:	f107 0108 	add.w	r1, r7, #8
 80168e4:	4610      	mov	r0, r2
 80168e6:	4798      	blx	r3
 80168e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80168ea:	e077      	b.n	80169dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80168ec:	6839      	ldr	r1, [r7, #0]
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f000 fab1 	bl	8016e56 <USBD_CtlError>
            err++;
 80168f4:	7afb      	ldrb	r3, [r7, #11]
 80168f6:	3301      	adds	r3, #1
 80168f8:	72fb      	strb	r3, [r7, #11]
          break;
 80168fa:	e06f      	b.n	80169dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016902:	68db      	ldr	r3, [r3, #12]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d00b      	beq.n	8016920 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801690e:	68db      	ldr	r3, [r3, #12]
 8016910:	687a      	ldr	r2, [r7, #4]
 8016912:	7c12      	ldrb	r2, [r2, #16]
 8016914:	f107 0108 	add.w	r1, r7, #8
 8016918:	4610      	mov	r0, r2
 801691a:	4798      	blx	r3
 801691c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801691e:	e05d      	b.n	80169dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016920:	6839      	ldr	r1, [r7, #0]
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f000 fa97 	bl	8016e56 <USBD_CtlError>
            err++;
 8016928:	7afb      	ldrb	r3, [r7, #11]
 801692a:	3301      	adds	r3, #1
 801692c:	72fb      	strb	r3, [r7, #11]
          break;
 801692e:	e055      	b.n	80169dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016936:	691b      	ldr	r3, [r3, #16]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d00b      	beq.n	8016954 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016942:	691b      	ldr	r3, [r3, #16]
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	7c12      	ldrb	r2, [r2, #16]
 8016948:	f107 0108 	add.w	r1, r7, #8
 801694c:	4610      	mov	r0, r2
 801694e:	4798      	blx	r3
 8016950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016952:	e043      	b.n	80169dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016954:	6839      	ldr	r1, [r7, #0]
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f000 fa7d 	bl	8016e56 <USBD_CtlError>
            err++;
 801695c:	7afb      	ldrb	r3, [r7, #11]
 801695e:	3301      	adds	r3, #1
 8016960:	72fb      	strb	r3, [r7, #11]
          break;
 8016962:	e03b      	b.n	80169dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801696a:	695b      	ldr	r3, [r3, #20]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d00b      	beq.n	8016988 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016976:	695b      	ldr	r3, [r3, #20]
 8016978:	687a      	ldr	r2, [r7, #4]
 801697a:	7c12      	ldrb	r2, [r2, #16]
 801697c:	f107 0108 	add.w	r1, r7, #8
 8016980:	4610      	mov	r0, r2
 8016982:	4798      	blx	r3
 8016984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016986:	e029      	b.n	80169dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016988:	6839      	ldr	r1, [r7, #0]
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f000 fa63 	bl	8016e56 <USBD_CtlError>
            err++;
 8016990:	7afb      	ldrb	r3, [r7, #11]
 8016992:	3301      	adds	r3, #1
 8016994:	72fb      	strb	r3, [r7, #11]
          break;
 8016996:	e021      	b.n	80169dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801699e:	699b      	ldr	r3, [r3, #24]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d00b      	beq.n	80169bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80169aa:	699b      	ldr	r3, [r3, #24]
 80169ac:	687a      	ldr	r2, [r7, #4]
 80169ae:	7c12      	ldrb	r2, [r2, #16]
 80169b0:	f107 0108 	add.w	r1, r7, #8
 80169b4:	4610      	mov	r0, r2
 80169b6:	4798      	blx	r3
 80169b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80169ba:	e00f      	b.n	80169dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80169bc:	6839      	ldr	r1, [r7, #0]
 80169be:	6878      	ldr	r0, [r7, #4]
 80169c0:	f000 fa49 	bl	8016e56 <USBD_CtlError>
            err++;
 80169c4:	7afb      	ldrb	r3, [r7, #11]
 80169c6:	3301      	adds	r3, #1
 80169c8:	72fb      	strb	r3, [r7, #11]
          break;
 80169ca:	e007      	b.n	80169dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80169cc:	6839      	ldr	r1, [r7, #0]
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f000 fa41 	bl	8016e56 <USBD_CtlError>
          err++;
 80169d4:	7afb      	ldrb	r3, [r7, #11]
 80169d6:	3301      	adds	r3, #1
 80169d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80169da:	bf00      	nop
      }
      break;
 80169dc:	e037      	b.n	8016a4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	7c1b      	ldrb	r3, [r3, #16]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d109      	bne.n	80169fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80169ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169ee:	f107 0208 	add.w	r2, r7, #8
 80169f2:	4610      	mov	r0, r2
 80169f4:	4798      	blx	r3
 80169f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80169f8:	e029      	b.n	8016a4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80169fa:	6839      	ldr	r1, [r7, #0]
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f000 fa2a 	bl	8016e56 <USBD_CtlError>
        err++;
 8016a02:	7afb      	ldrb	r3, [r7, #11]
 8016a04:	3301      	adds	r3, #1
 8016a06:	72fb      	strb	r3, [r7, #11]
      break;
 8016a08:	e021      	b.n	8016a4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	7c1b      	ldrb	r3, [r3, #16]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d10d      	bne.n	8016a2e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a1a:	f107 0208 	add.w	r2, r7, #8
 8016a1e:	4610      	mov	r0, r2
 8016a20:	4798      	blx	r3
 8016a22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	3301      	adds	r3, #1
 8016a28:	2207      	movs	r2, #7
 8016a2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016a2c:	e00f      	b.n	8016a4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016a2e:	6839      	ldr	r1, [r7, #0]
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f000 fa10 	bl	8016e56 <USBD_CtlError>
        err++;
 8016a36:	7afb      	ldrb	r3, [r7, #11]
 8016a38:	3301      	adds	r3, #1
 8016a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8016a3c:	e007      	b.n	8016a4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016a3e:	6839      	ldr	r1, [r7, #0]
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f000 fa08 	bl	8016e56 <USBD_CtlError>
      err++;
 8016a46:	7afb      	ldrb	r3, [r7, #11]
 8016a48:	3301      	adds	r3, #1
 8016a4a:	72fb      	strb	r3, [r7, #11]
      break;
 8016a4c:	bf00      	nop
  }

  if (err != 0U)
 8016a4e:	7afb      	ldrb	r3, [r7, #11]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d11e      	bne.n	8016a92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	88db      	ldrh	r3, [r3, #6]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d016      	beq.n	8016a8a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016a5c:	893b      	ldrh	r3, [r7, #8]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d00e      	beq.n	8016a80 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016a62:	683b      	ldr	r3, [r7, #0]
 8016a64:	88da      	ldrh	r2, [r3, #6]
 8016a66:	893b      	ldrh	r3, [r7, #8]
 8016a68:	4293      	cmp	r3, r2
 8016a6a:	bf28      	it	cs
 8016a6c:	4613      	movcs	r3, r2
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016a72:	893b      	ldrh	r3, [r7, #8]
 8016a74:	461a      	mov	r2, r3
 8016a76:	68f9      	ldr	r1, [r7, #12]
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f000 fa5d 	bl	8016f38 <USBD_CtlSendData>
 8016a7e:	e009      	b.n	8016a94 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016a80:	6839      	ldr	r1, [r7, #0]
 8016a82:	6878      	ldr	r0, [r7, #4]
 8016a84:	f000 f9e7 	bl	8016e56 <USBD_CtlError>
 8016a88:	e004      	b.n	8016a94 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	f000 faae 	bl	8016fec <USBD_CtlSendStatus>
 8016a90:	e000      	b.n	8016a94 <USBD_GetDescriptor+0x2cc>
    return;
 8016a92:	bf00      	nop
  }
}
 8016a94:	3710      	adds	r7, #16
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}
 8016a9a:	bf00      	nop

08016a9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b084      	sub	sp, #16
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	889b      	ldrh	r3, [r3, #4]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d131      	bne.n	8016b12 <USBD_SetAddress+0x76>
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	88db      	ldrh	r3, [r3, #6]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d12d      	bne.n	8016b12 <USBD_SetAddress+0x76>
 8016ab6:	683b      	ldr	r3, [r7, #0]
 8016ab8:	885b      	ldrh	r3, [r3, #2]
 8016aba:	2b7f      	cmp	r3, #127	; 0x7f
 8016abc:	d829      	bhi.n	8016b12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	885b      	ldrh	r3, [r3, #2]
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ac8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ad0:	b2db      	uxtb	r3, r3
 8016ad2:	2b03      	cmp	r3, #3
 8016ad4:	d104      	bne.n	8016ae0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016ad6:	6839      	ldr	r1, [r7, #0]
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f000 f9bc 	bl	8016e56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ade:	e01d      	b.n	8016b1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	7bfa      	ldrb	r2, [r7, #15]
 8016ae4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016ae8:	7bfb      	ldrb	r3, [r7, #15]
 8016aea:	4619      	mov	r1, r3
 8016aec:	6878      	ldr	r0, [r7, #4]
 8016aee:	f004 f93d 	bl	801ad6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016af2:	6878      	ldr	r0, [r7, #4]
 8016af4:	f000 fa7a 	bl	8016fec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016af8:	7bfb      	ldrb	r3, [r7, #15]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d004      	beq.n	8016b08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	2202      	movs	r2, #2
 8016b02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b06:	e009      	b.n	8016b1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	2201      	movs	r2, #1
 8016b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b10:	e004      	b.n	8016b1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016b12:	6839      	ldr	r1, [r7, #0]
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f000 f99e 	bl	8016e56 <USBD_CtlError>
  }
}
 8016b1a:	bf00      	nop
 8016b1c:	bf00      	nop
 8016b1e:	3710      	adds	r7, #16
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd80      	pop	{r7, pc}

08016b24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b084      	sub	sp, #16
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
 8016b2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016b32:	683b      	ldr	r3, [r7, #0]
 8016b34:	885b      	ldrh	r3, [r3, #2]
 8016b36:	b2da      	uxtb	r2, r3
 8016b38:	4b4e      	ldr	r3, [pc, #312]	; (8016c74 <USBD_SetConfig+0x150>)
 8016b3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016b3c:	4b4d      	ldr	r3, [pc, #308]	; (8016c74 <USBD_SetConfig+0x150>)
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	2b01      	cmp	r3, #1
 8016b42:	d905      	bls.n	8016b50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016b44:	6839      	ldr	r1, [r7, #0]
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	f000 f985 	bl	8016e56 <USBD_CtlError>
    return USBD_FAIL;
 8016b4c:	2303      	movs	r3, #3
 8016b4e:	e08c      	b.n	8016c6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b56:	b2db      	uxtb	r3, r3
 8016b58:	2b02      	cmp	r3, #2
 8016b5a:	d002      	beq.n	8016b62 <USBD_SetConfig+0x3e>
 8016b5c:	2b03      	cmp	r3, #3
 8016b5e:	d029      	beq.n	8016bb4 <USBD_SetConfig+0x90>
 8016b60:	e075      	b.n	8016c4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016b62:	4b44      	ldr	r3, [pc, #272]	; (8016c74 <USBD_SetConfig+0x150>)
 8016b64:	781b      	ldrb	r3, [r3, #0]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d020      	beq.n	8016bac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016b6a:	4b42      	ldr	r3, [pc, #264]	; (8016c74 <USBD_SetConfig+0x150>)
 8016b6c:	781b      	ldrb	r3, [r3, #0]
 8016b6e:	461a      	mov	r2, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016b74:	4b3f      	ldr	r3, [pc, #252]	; (8016c74 <USBD_SetConfig+0x150>)
 8016b76:	781b      	ldrb	r3, [r3, #0]
 8016b78:	4619      	mov	r1, r3
 8016b7a:	6878      	ldr	r0, [r7, #4]
 8016b7c:	f7fe ffe7 	bl	8015b4e <USBD_SetClassConfig>
 8016b80:	4603      	mov	r3, r0
 8016b82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016b84:	7bfb      	ldrb	r3, [r7, #15]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d008      	beq.n	8016b9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016b8a:	6839      	ldr	r1, [r7, #0]
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f000 f962 	bl	8016e56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	2202      	movs	r2, #2
 8016b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016b9a:	e065      	b.n	8016c68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	f000 fa25 	bl	8016fec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2203      	movs	r2, #3
 8016ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016baa:	e05d      	b.n	8016c68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f000 fa1d 	bl	8016fec <USBD_CtlSendStatus>
      break;
 8016bb2:	e059      	b.n	8016c68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016bb4:	4b2f      	ldr	r3, [pc, #188]	; (8016c74 <USBD_SetConfig+0x150>)
 8016bb6:	781b      	ldrb	r3, [r3, #0]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d112      	bne.n	8016be2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	2202      	movs	r2, #2
 8016bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016bc4:	4b2b      	ldr	r3, [pc, #172]	; (8016c74 <USBD_SetConfig+0x150>)
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	461a      	mov	r2, r3
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016bce:	4b29      	ldr	r3, [pc, #164]	; (8016c74 <USBD_SetConfig+0x150>)
 8016bd0:	781b      	ldrb	r3, [r3, #0]
 8016bd2:	4619      	mov	r1, r3
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f7fe ffd6 	bl	8015b86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f000 fa06 	bl	8016fec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016be0:	e042      	b.n	8016c68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016be2:	4b24      	ldr	r3, [pc, #144]	; (8016c74 <USBD_SetConfig+0x150>)
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	461a      	mov	r2, r3
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	685b      	ldr	r3, [r3, #4]
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d02a      	beq.n	8016c46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	685b      	ldr	r3, [r3, #4]
 8016bf4:	b2db      	uxtb	r3, r3
 8016bf6:	4619      	mov	r1, r3
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f7fe ffc4 	bl	8015b86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016bfe:	4b1d      	ldr	r3, [pc, #116]	; (8016c74 <USBD_SetConfig+0x150>)
 8016c00:	781b      	ldrb	r3, [r3, #0]
 8016c02:	461a      	mov	r2, r3
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016c08:	4b1a      	ldr	r3, [pc, #104]	; (8016c74 <USBD_SetConfig+0x150>)
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	f7fe ff9d 	bl	8015b4e <USBD_SetClassConfig>
 8016c14:	4603      	mov	r3, r0
 8016c16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016c18:	7bfb      	ldrb	r3, [r7, #15]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d00f      	beq.n	8016c3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016c1e:	6839      	ldr	r1, [r7, #0]
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f000 f918 	bl	8016e56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	685b      	ldr	r3, [r3, #4]
 8016c2a:	b2db      	uxtb	r3, r3
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f7fe ffa9 	bl	8015b86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2202      	movs	r2, #2
 8016c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016c3c:	e014      	b.n	8016c68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f000 f9d4 	bl	8016fec <USBD_CtlSendStatus>
      break;
 8016c44:	e010      	b.n	8016c68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f000 f9d0 	bl	8016fec <USBD_CtlSendStatus>
      break;
 8016c4c:	e00c      	b.n	8016c68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016c4e:	6839      	ldr	r1, [r7, #0]
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f000 f900 	bl	8016e56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016c56:	4b07      	ldr	r3, [pc, #28]	; (8016c74 <USBD_SetConfig+0x150>)
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	4619      	mov	r1, r3
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f7fe ff92 	bl	8015b86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016c62:	2303      	movs	r3, #3
 8016c64:	73fb      	strb	r3, [r7, #15]
      break;
 8016c66:	bf00      	nop
  }

  return ret;
 8016c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3710      	adds	r7, #16
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	20002ddc 	.word	0x20002ddc

08016c78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b082      	sub	sp, #8
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016c82:	683b      	ldr	r3, [r7, #0]
 8016c84:	88db      	ldrh	r3, [r3, #6]
 8016c86:	2b01      	cmp	r3, #1
 8016c88:	d004      	beq.n	8016c94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016c8a:	6839      	ldr	r1, [r7, #0]
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f000 f8e2 	bl	8016e56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016c92:	e023      	b.n	8016cdc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c9a:	b2db      	uxtb	r3, r3
 8016c9c:	2b02      	cmp	r3, #2
 8016c9e:	dc02      	bgt.n	8016ca6 <USBD_GetConfig+0x2e>
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	dc03      	bgt.n	8016cac <USBD_GetConfig+0x34>
 8016ca4:	e015      	b.n	8016cd2 <USBD_GetConfig+0x5a>
 8016ca6:	2b03      	cmp	r3, #3
 8016ca8:	d00b      	beq.n	8016cc2 <USBD_GetConfig+0x4a>
 8016caa:	e012      	b.n	8016cd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2200      	movs	r2, #0
 8016cb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	3308      	adds	r3, #8
 8016cb6:	2201      	movs	r2, #1
 8016cb8:	4619      	mov	r1, r3
 8016cba:	6878      	ldr	r0, [r7, #4]
 8016cbc:	f000 f93c 	bl	8016f38 <USBD_CtlSendData>
        break;
 8016cc0:	e00c      	b.n	8016cdc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	3304      	adds	r3, #4
 8016cc6:	2201      	movs	r2, #1
 8016cc8:	4619      	mov	r1, r3
 8016cca:	6878      	ldr	r0, [r7, #4]
 8016ccc:	f000 f934 	bl	8016f38 <USBD_CtlSendData>
        break;
 8016cd0:	e004      	b.n	8016cdc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016cd2:	6839      	ldr	r1, [r7, #0]
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f000 f8be 	bl	8016e56 <USBD_CtlError>
        break;
 8016cda:	bf00      	nop
}
 8016cdc:	bf00      	nop
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}

08016ce4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
 8016cec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016cf4:	b2db      	uxtb	r3, r3
 8016cf6:	3b01      	subs	r3, #1
 8016cf8:	2b02      	cmp	r3, #2
 8016cfa:	d81e      	bhi.n	8016d3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016cfc:	683b      	ldr	r3, [r7, #0]
 8016cfe:	88db      	ldrh	r3, [r3, #6]
 8016d00:	2b02      	cmp	r3, #2
 8016d02:	d004      	beq.n	8016d0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016d04:	6839      	ldr	r1, [r7, #0]
 8016d06:	6878      	ldr	r0, [r7, #4]
 8016d08:	f000 f8a5 	bl	8016e56 <USBD_CtlError>
        break;
 8016d0c:	e01a      	b.n	8016d44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2201      	movs	r2, #1
 8016d12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d005      	beq.n	8016d2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	68db      	ldr	r3, [r3, #12]
 8016d22:	f043 0202 	orr.w	r2, r3, #2
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	330c      	adds	r3, #12
 8016d2e:	2202      	movs	r2, #2
 8016d30:	4619      	mov	r1, r3
 8016d32:	6878      	ldr	r0, [r7, #4]
 8016d34:	f000 f900 	bl	8016f38 <USBD_CtlSendData>
      break;
 8016d38:	e004      	b.n	8016d44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016d3a:	6839      	ldr	r1, [r7, #0]
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f000 f88a 	bl	8016e56 <USBD_CtlError>
      break;
 8016d42:	bf00      	nop
  }
}
 8016d44:	bf00      	nop
 8016d46:	3708      	adds	r7, #8
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd80      	pop	{r7, pc}

08016d4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b082      	sub	sp, #8
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
 8016d54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	885b      	ldrh	r3, [r3, #2]
 8016d5a:	2b01      	cmp	r3, #1
 8016d5c:	d107      	bne.n	8016d6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	2201      	movs	r2, #1
 8016d62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f000 f940 	bl	8016fec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016d6c:	e013      	b.n	8016d96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	885b      	ldrh	r3, [r3, #2]
 8016d72:	2b02      	cmp	r3, #2
 8016d74:	d10b      	bne.n	8016d8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	889b      	ldrh	r3, [r3, #4]
 8016d7a:	0a1b      	lsrs	r3, r3, #8
 8016d7c:	b29b      	uxth	r3, r3
 8016d7e:	b2da      	uxtb	r2, r3
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016d86:	6878      	ldr	r0, [r7, #4]
 8016d88:	f000 f930 	bl	8016fec <USBD_CtlSendStatus>
}
 8016d8c:	e003      	b.n	8016d96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016d8e:	6839      	ldr	r1, [r7, #0]
 8016d90:	6878      	ldr	r0, [r7, #4]
 8016d92:	f000 f860 	bl	8016e56 <USBD_CtlError>
}
 8016d96:	bf00      	nop
 8016d98:	3708      	adds	r7, #8
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}

08016d9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d9e:	b580      	push	{r7, lr}
 8016da0:	b082      	sub	sp, #8
 8016da2:	af00      	add	r7, sp, #0
 8016da4:	6078      	str	r0, [r7, #4]
 8016da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016dae:	b2db      	uxtb	r3, r3
 8016db0:	3b01      	subs	r3, #1
 8016db2:	2b02      	cmp	r3, #2
 8016db4:	d80b      	bhi.n	8016dce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016db6:	683b      	ldr	r3, [r7, #0]
 8016db8:	885b      	ldrh	r3, [r3, #2]
 8016dba:	2b01      	cmp	r3, #1
 8016dbc:	d10c      	bne.n	8016dd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016dc6:	6878      	ldr	r0, [r7, #4]
 8016dc8:	f000 f910 	bl	8016fec <USBD_CtlSendStatus>
      }
      break;
 8016dcc:	e004      	b.n	8016dd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016dce:	6839      	ldr	r1, [r7, #0]
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f000 f840 	bl	8016e56 <USBD_CtlError>
      break;
 8016dd6:	e000      	b.n	8016dda <USBD_ClrFeature+0x3c>
      break;
 8016dd8:	bf00      	nop
  }
}
 8016dda:	bf00      	nop
 8016ddc:	3708      	adds	r7, #8
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}

08016de2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016de2:	b580      	push	{r7, lr}
 8016de4:	b084      	sub	sp, #16
 8016de6:	af00      	add	r7, sp, #0
 8016de8:	6078      	str	r0, [r7, #4]
 8016dea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016dec:	683b      	ldr	r3, [r7, #0]
 8016dee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	781a      	ldrb	r2, [r3, #0]
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	3301      	adds	r3, #1
 8016dfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	781a      	ldrb	r2, [r3, #0]
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	3301      	adds	r3, #1
 8016e0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016e0c:	68f8      	ldr	r0, [r7, #12]
 8016e0e:	f7ff fa41 	bl	8016294 <SWAPBYTE>
 8016e12:	4603      	mov	r3, r0
 8016e14:	461a      	mov	r2, r3
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	3301      	adds	r3, #1
 8016e1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	3301      	adds	r3, #1
 8016e24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016e26:	68f8      	ldr	r0, [r7, #12]
 8016e28:	f7ff fa34 	bl	8016294 <SWAPBYTE>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	461a      	mov	r2, r3
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	3301      	adds	r3, #1
 8016e38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	3301      	adds	r3, #1
 8016e3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016e40:	68f8      	ldr	r0, [r7, #12]
 8016e42:	f7ff fa27 	bl	8016294 <SWAPBYTE>
 8016e46:	4603      	mov	r3, r0
 8016e48:	461a      	mov	r2, r3
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	80da      	strh	r2, [r3, #6]
}
 8016e4e:	bf00      	nop
 8016e50:	3710      	adds	r7, #16
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}

08016e56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e56:	b580      	push	{r7, lr}
 8016e58:	b082      	sub	sp, #8
 8016e5a:	af00      	add	r7, sp, #0
 8016e5c:	6078      	str	r0, [r7, #4]
 8016e5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016e60:	2180      	movs	r1, #128	; 0x80
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f003 ff18 	bl	801ac98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016e68:	2100      	movs	r1, #0
 8016e6a:	6878      	ldr	r0, [r7, #4]
 8016e6c:	f003 ff14 	bl	801ac98 <USBD_LL_StallEP>
}
 8016e70:	bf00      	nop
 8016e72:	3708      	adds	r7, #8
 8016e74:	46bd      	mov	sp, r7
 8016e76:	bd80      	pop	{r7, pc}

08016e78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b086      	sub	sp, #24
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	60f8      	str	r0, [r7, #12]
 8016e80:	60b9      	str	r1, [r7, #8]
 8016e82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016e84:	2300      	movs	r3, #0
 8016e86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d036      	beq.n	8016efc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016e92:	6938      	ldr	r0, [r7, #16]
 8016e94:	f000 f836 	bl	8016f04 <USBD_GetLen>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	3301      	adds	r3, #1
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	005b      	lsls	r3, r3, #1
 8016ea0:	b29a      	uxth	r2, r3
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016ea6:	7dfb      	ldrb	r3, [r7, #23]
 8016ea8:	68ba      	ldr	r2, [r7, #8]
 8016eaa:	4413      	add	r3, r2
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	7812      	ldrb	r2, [r2, #0]
 8016eb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8016eb2:	7dfb      	ldrb	r3, [r7, #23]
 8016eb4:	3301      	adds	r3, #1
 8016eb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016eb8:	7dfb      	ldrb	r3, [r7, #23]
 8016eba:	68ba      	ldr	r2, [r7, #8]
 8016ebc:	4413      	add	r3, r2
 8016ebe:	2203      	movs	r2, #3
 8016ec0:	701a      	strb	r2, [r3, #0]
  idx++;
 8016ec2:	7dfb      	ldrb	r3, [r7, #23]
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016ec8:	e013      	b.n	8016ef2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016eca:	7dfb      	ldrb	r3, [r7, #23]
 8016ecc:	68ba      	ldr	r2, [r7, #8]
 8016ece:	4413      	add	r3, r2
 8016ed0:	693a      	ldr	r2, [r7, #16]
 8016ed2:	7812      	ldrb	r2, [r2, #0]
 8016ed4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	3301      	adds	r3, #1
 8016eda:	613b      	str	r3, [r7, #16]
    idx++;
 8016edc:	7dfb      	ldrb	r3, [r7, #23]
 8016ede:	3301      	adds	r3, #1
 8016ee0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016ee2:	7dfb      	ldrb	r3, [r7, #23]
 8016ee4:	68ba      	ldr	r2, [r7, #8]
 8016ee6:	4413      	add	r3, r2
 8016ee8:	2200      	movs	r2, #0
 8016eea:	701a      	strb	r2, [r3, #0]
    idx++;
 8016eec:	7dfb      	ldrb	r3, [r7, #23]
 8016eee:	3301      	adds	r3, #1
 8016ef0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016ef2:	693b      	ldr	r3, [r7, #16]
 8016ef4:	781b      	ldrb	r3, [r3, #0]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d1e7      	bne.n	8016eca <USBD_GetString+0x52>
 8016efa:	e000      	b.n	8016efe <USBD_GetString+0x86>
    return;
 8016efc:	bf00      	nop
  }
}
 8016efe:	3718      	adds	r7, #24
 8016f00:	46bd      	mov	sp, r7
 8016f02:	bd80      	pop	{r7, pc}

08016f04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016f04:	b480      	push	{r7}
 8016f06:	b085      	sub	sp, #20
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016f14:	e005      	b.n	8016f22 <USBD_GetLen+0x1e>
  {
    len++;
 8016f16:	7bfb      	ldrb	r3, [r7, #15]
 8016f18:	3301      	adds	r3, #1
 8016f1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	3301      	adds	r3, #1
 8016f20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016f22:	68bb      	ldr	r3, [r7, #8]
 8016f24:	781b      	ldrb	r3, [r3, #0]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d1f5      	bne.n	8016f16 <USBD_GetLen+0x12>
  }

  return len;
 8016f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3714      	adds	r7, #20
 8016f30:	46bd      	mov	sp, r7
 8016f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f36:	4770      	bx	lr

08016f38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	60f8      	str	r0, [r7, #12]
 8016f40:	60b9      	str	r1, [r7, #8]
 8016f42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	2202      	movs	r2, #2
 8016f48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	687a      	ldr	r2, [r7, #4]
 8016f50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	687a      	ldr	r2, [r7, #4]
 8016f56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	68ba      	ldr	r2, [r7, #8]
 8016f5c:	2100      	movs	r1, #0
 8016f5e:	68f8      	ldr	r0, [r7, #12]
 8016f60:	f003 ff23 	bl	801adaa <USBD_LL_Transmit>

  return USBD_OK;
 8016f64:	2300      	movs	r3, #0
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3710      	adds	r7, #16
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}

08016f6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016f6e:	b580      	push	{r7, lr}
 8016f70:	b084      	sub	sp, #16
 8016f72:	af00      	add	r7, sp, #0
 8016f74:	60f8      	str	r0, [r7, #12]
 8016f76:	60b9      	str	r1, [r7, #8]
 8016f78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	68ba      	ldr	r2, [r7, #8]
 8016f7e:	2100      	movs	r1, #0
 8016f80:	68f8      	ldr	r0, [r7, #12]
 8016f82:	f003 ff12 	bl	801adaa <USBD_LL_Transmit>

  return USBD_OK;
 8016f86:	2300      	movs	r3, #0
}
 8016f88:	4618      	mov	r0, r3
 8016f8a:	3710      	adds	r7, #16
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}

08016f90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b084      	sub	sp, #16
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	60f8      	str	r0, [r7, #12]
 8016f98:	60b9      	str	r1, [r7, #8]
 8016f9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	2203      	movs	r2, #3
 8016fa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	68ba      	ldr	r2, [r7, #8]
 8016fb8:	2100      	movs	r1, #0
 8016fba:	68f8      	ldr	r0, [r7, #12]
 8016fbc:	f003 ff16 	bl	801adec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016fc0:	2300      	movs	r3, #0
}
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	3710      	adds	r7, #16
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}

08016fca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016fca:	b580      	push	{r7, lr}
 8016fcc:	b084      	sub	sp, #16
 8016fce:	af00      	add	r7, sp, #0
 8016fd0:	60f8      	str	r0, [r7, #12]
 8016fd2:	60b9      	str	r1, [r7, #8]
 8016fd4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	68ba      	ldr	r2, [r7, #8]
 8016fda:	2100      	movs	r1, #0
 8016fdc:	68f8      	ldr	r0, [r7, #12]
 8016fde:	f003 ff05 	bl	801adec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016fe2:	2300      	movs	r3, #0
}
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	3710      	adds	r7, #16
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	bd80      	pop	{r7, pc}

08016fec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2204      	movs	r2, #4
 8016ff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	2200      	movs	r2, #0
 8017000:	2100      	movs	r1, #0
 8017002:	6878      	ldr	r0, [r7, #4]
 8017004:	f003 fed1 	bl	801adaa <USBD_LL_Transmit>

  return USBD_OK;
 8017008:	2300      	movs	r3, #0
}
 801700a:	4618      	mov	r0, r3
 801700c:	3708      	adds	r7, #8
 801700e:	46bd      	mov	sp, r7
 8017010:	bd80      	pop	{r7, pc}

08017012 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017012:	b580      	push	{r7, lr}
 8017014:	b082      	sub	sp, #8
 8017016:	af00      	add	r7, sp, #0
 8017018:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	2205      	movs	r2, #5
 801701e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017022:	2300      	movs	r3, #0
 8017024:	2200      	movs	r2, #0
 8017026:	2100      	movs	r1, #0
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f003 fedf 	bl	801adec <USBD_LL_PrepareReceive>

  return USBD_OK;
 801702e:	2300      	movs	r3, #0
}
 8017030:	4618      	mov	r0, r3
 8017032:	3708      	adds	r7, #8
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}

08017038 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8017038:	b480      	push	{r7}
 801703a:	b085      	sub	sp, #20
 801703c:	af00      	add	r7, sp, #0
 801703e:	4603      	mov	r3, r0
 8017040:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8017042:	2300      	movs	r3, #0
 8017044:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8017046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801704a:	2b84      	cmp	r3, #132	; 0x84
 801704c:	d005      	beq.n	801705a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801704e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	4413      	add	r3, r2
 8017056:	3303      	adds	r3, #3
 8017058:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801705a:	68fb      	ldr	r3, [r7, #12]
}
 801705c:	4618      	mov	r0, r3
 801705e:	3714      	adds	r7, #20
 8017060:	46bd      	mov	sp, r7
 8017062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017066:	4770      	bx	lr

08017068 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801706c:	f001 fb24 	bl	80186b8 <vTaskStartScheduler>
  
  return osOK;
 8017070:	2300      	movs	r3, #0
}
 8017072:	4618      	mov	r0, r3
 8017074:	bd80      	pop	{r7, pc}

08017076 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017078:	b089      	sub	sp, #36	; 0x24
 801707a:	af04      	add	r7, sp, #16
 801707c:	6078      	str	r0, [r7, #4]
 801707e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	695b      	ldr	r3, [r3, #20]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d020      	beq.n	80170ca <osThreadCreate+0x54>
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	699b      	ldr	r3, [r3, #24]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d01c      	beq.n	80170ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	685c      	ldr	r4, [r3, #4]
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	681d      	ldr	r5, [r3, #0]
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	691e      	ldr	r6, [r3, #16]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80170a2:	4618      	mov	r0, r3
 80170a4:	f7ff ffc8 	bl	8017038 <makeFreeRtosPriority>
 80170a8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	695b      	ldr	r3, [r3, #20]
 80170ae:	687a      	ldr	r2, [r7, #4]
 80170b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80170b2:	9202      	str	r2, [sp, #8]
 80170b4:	9301      	str	r3, [sp, #4]
 80170b6:	9100      	str	r1, [sp, #0]
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	4632      	mov	r2, r6
 80170bc:	4629      	mov	r1, r5
 80170be:	4620      	mov	r0, r4
 80170c0:	f001 f88e 	bl	80181e0 <xTaskCreateStatic>
 80170c4:	4603      	mov	r3, r0
 80170c6:	60fb      	str	r3, [r7, #12]
 80170c8:	e01c      	b.n	8017104 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	685c      	ldr	r4, [r3, #4]
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80170d6:	b29e      	uxth	r6, r3
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80170de:	4618      	mov	r0, r3
 80170e0:	f7ff ffaa 	bl	8017038 <makeFreeRtosPriority>
 80170e4:	4602      	mov	r2, r0
 80170e6:	f107 030c 	add.w	r3, r7, #12
 80170ea:	9301      	str	r3, [sp, #4]
 80170ec:	9200      	str	r2, [sp, #0]
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	4632      	mov	r2, r6
 80170f2:	4629      	mov	r1, r5
 80170f4:	4620      	mov	r0, r4
 80170f6:	f001 f8d0 	bl	801829a <xTaskCreate>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b01      	cmp	r3, #1
 80170fe:	d001      	beq.n	8017104 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8017100:	2300      	movs	r3, #0
 8017102:	e000      	b.n	8017106 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8017104:	68fb      	ldr	r3, [r7, #12]
}
 8017106:	4618      	mov	r0, r3
 8017108:	3714      	adds	r7, #20
 801710a:	46bd      	mov	sp, r7
 801710c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801710e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801710e:	b580      	push	{r7, lr}
 8017110:	b084      	sub	sp, #16
 8017112:	af00      	add	r7, sp, #0
 8017114:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d001      	beq.n	8017124 <osDelay+0x16>
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	e000      	b.n	8017126 <osDelay+0x18>
 8017124:	2301      	movs	r3, #1
 8017126:	4618      	mov	r0, r3
 8017128:	f001 fa92 	bl	8018650 <vTaskDelay>
  
  return osOK;
 801712c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801712e:	4618      	mov	r0, r3
 8017130:	3710      	adds	r7, #16
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}

08017136 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8017136:	b580      	push	{r7, lr}
 8017138:	b082      	sub	sp, #8
 801713a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801713c:	2020      	movs	r0, #32
 801713e:	f002 ff9b 	bl	801a078 <pvPortMalloc>
 8017142:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d00a      	beq.n	8017160 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2200      	movs	r2, #0
 801714e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	3304      	adds	r3, #4
 8017154:	4618      	mov	r0, r3
 8017156:	f000 f9dd 	bl	8017514 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	2200      	movs	r2, #0
 801715e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8017160:	687b      	ldr	r3, [r7, #4]
	}
 8017162:	4618      	mov	r0, r3
 8017164:	3708      	adds	r7, #8
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
	...

0801716c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b090      	sub	sp, #64	; 0x40
 8017170:	af00      	add	r7, sp, #0
 8017172:	60f8      	str	r0, [r7, #12]
 8017174:	60b9      	str	r1, [r7, #8]
 8017176:	607a      	str	r2, [r7, #4]
 8017178:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801717e:	2300      	movs	r3, #0
 8017180:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8017182:	2300      	movs	r3, #0
 8017184:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d10a      	bne.n	80171a2 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017190:	f383 8811 	msr	BASEPRI, r3
 8017194:	f3bf 8f6f 	isb	sy
 8017198:	f3bf 8f4f 	dsb	sy
 801719c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801719e:	bf00      	nop
 80171a0:	e7fe      	b.n	80171a0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d00a      	beq.n	80171c2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80171ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171b0:	f383 8811 	msr	BASEPRI, r3
 80171b4:	f3bf 8f6f 	isb	sy
 80171b8:	f3bf 8f4f 	dsb	sy
 80171bc:	61fb      	str	r3, [r7, #28]
}
 80171be:	bf00      	nop
 80171c0:	e7fe      	b.n	80171c0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80171c2:	68bb      	ldr	r3, [r7, #8]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d10a      	bne.n	80171de <xEventGroupWaitBits+0x72>
	__asm volatile
 80171c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171cc:	f383 8811 	msr	BASEPRI, r3
 80171d0:	f3bf 8f6f 	isb	sy
 80171d4:	f3bf 8f4f 	dsb	sy
 80171d8:	61bb      	str	r3, [r7, #24]
}
 80171da:	bf00      	nop
 80171dc:	e7fe      	b.n	80171dc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80171de:	f001 ff8b 	bl	80190f8 <xTaskGetSchedulerState>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d102      	bne.n	80171ee <xEventGroupWaitBits+0x82>
 80171e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d101      	bne.n	80171f2 <xEventGroupWaitBits+0x86>
 80171ee:	2301      	movs	r3, #1
 80171f0:	e000      	b.n	80171f4 <xEventGroupWaitBits+0x88>
 80171f2:	2300      	movs	r3, #0
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d10a      	bne.n	801720e <xEventGroupWaitBits+0xa2>
	__asm volatile
 80171f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171fc:	f383 8811 	msr	BASEPRI, r3
 8017200:	f3bf 8f6f 	isb	sy
 8017204:	f3bf 8f4f 	dsb	sy
 8017208:	617b      	str	r3, [r7, #20]
}
 801720a:	bf00      	nop
 801720c:	e7fe      	b.n	801720c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801720e:	f001 fac5 	bl	801879c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8017212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8017218:	683a      	ldr	r2, [r7, #0]
 801721a:	68b9      	ldr	r1, [r7, #8]
 801721c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801721e:	f000 f943 	bl	80174a8 <prvTestWaitCondition>
 8017222:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8017224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017226:	2b00      	cmp	r3, #0
 8017228:	d00e      	beq.n	8017248 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801722e:	2300      	movs	r3, #0
 8017230:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d028      	beq.n	801728a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801723a:	681a      	ldr	r2, [r3, #0]
 801723c:	68bb      	ldr	r3, [r7, #8]
 801723e:	43db      	mvns	r3, r3
 8017240:	401a      	ands	r2, r3
 8017242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017244:	601a      	str	r2, [r3, #0]
 8017246:	e020      	b.n	801728a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8017248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801724a:	2b00      	cmp	r3, #0
 801724c:	d104      	bne.n	8017258 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017250:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8017252:	2301      	movs	r3, #1
 8017254:	633b      	str	r3, [r7, #48]	; 0x30
 8017256:	e018      	b.n	801728a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d003      	beq.n	8017266 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017264:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d003      	beq.n	8017274 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801726e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017272:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017276:	1d18      	adds	r0, r3, #4
 8017278:	68ba      	ldr	r2, [r7, #8]
 801727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801727c:	4313      	orrs	r3, r2
 801727e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017280:	4619      	mov	r1, r3
 8017282:	f001 fcaf 	bl	8018be4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8017286:	2300      	movs	r3, #0
 8017288:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801728a:	f001 fa95 	bl	80187b8 <xTaskResumeAll>
 801728e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017292:	2b00      	cmp	r3, #0
 8017294:	d031      	beq.n	80172fa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8017296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017298:	2b00      	cmp	r3, #0
 801729a:	d107      	bne.n	80172ac <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801729c:	4b19      	ldr	r3, [pc, #100]	; (8017304 <xEventGroupWaitBits+0x198>)
 801729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172a2:	601a      	str	r2, [r3, #0]
 80172a4:	f3bf 8f4f 	dsb	sy
 80172a8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80172ac:	f001 ffc8 	bl	8019240 <uxTaskResetEventItemValue>
 80172b0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80172b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d11a      	bne.n	80172f2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80172bc:	f002 fdba 	bl	8019e34 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80172c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80172c6:	683a      	ldr	r2, [r7, #0]
 80172c8:	68b9      	ldr	r1, [r7, #8]
 80172ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80172cc:	f000 f8ec 	bl	80174a8 <prvTestWaitCondition>
 80172d0:	4603      	mov	r3, r0
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d009      	beq.n	80172ea <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d006      	beq.n	80172ea <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80172dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172de:	681a      	ldr	r2, [r3, #0]
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	43db      	mvns	r3, r3
 80172e4:	401a      	ands	r2, r3
 80172e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172e8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80172ea:	2301      	movs	r3, #1
 80172ec:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80172ee:	f002 fdd1 	bl	8019e94 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80172f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80172f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80172fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3740      	adds	r7, #64	; 0x40
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}
 8017304:	e000ed04 	.word	0xe000ed04

08017308 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b086      	sub	sp, #24
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
 8017310:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d10a      	bne.n	8017332 <xEventGroupClearBits+0x2a>
	__asm volatile
 801731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017320:	f383 8811 	msr	BASEPRI, r3
 8017324:	f3bf 8f6f 	isb	sy
 8017328:	f3bf 8f4f 	dsb	sy
 801732c:	60fb      	str	r3, [r7, #12]
}
 801732e:	bf00      	nop
 8017330:	e7fe      	b.n	8017330 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017338:	2b00      	cmp	r3, #0
 801733a:	d00a      	beq.n	8017352 <xEventGroupClearBits+0x4a>
	__asm volatile
 801733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017340:	f383 8811 	msr	BASEPRI, r3
 8017344:	f3bf 8f6f 	isb	sy
 8017348:	f3bf 8f4f 	dsb	sy
 801734c:	60bb      	str	r3, [r7, #8]
}
 801734e:	bf00      	nop
 8017350:	e7fe      	b.n	8017350 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8017352:	f002 fd6f 	bl	8019e34 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8017356:	697b      	ldr	r3, [r7, #20]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801735c:	697b      	ldr	r3, [r7, #20]
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	683b      	ldr	r3, [r7, #0]
 8017362:	43db      	mvns	r3, r3
 8017364:	401a      	ands	r2, r3
 8017366:	697b      	ldr	r3, [r7, #20]
 8017368:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801736a:	f002 fd93 	bl	8019e94 <vPortExitCritical>

	return uxReturn;
 801736e:	693b      	ldr	r3, [r7, #16]
}
 8017370:	4618      	mov	r0, r3
 8017372:	3718      	adds	r7, #24
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}

08017378 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b08e      	sub	sp, #56	; 0x38
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8017382:	2300      	movs	r3, #0
 8017384:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801738a:	2300      	movs	r3, #0
 801738c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d10a      	bne.n	80173aa <xEventGroupSetBits+0x32>
	__asm volatile
 8017394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017398:	f383 8811 	msr	BASEPRI, r3
 801739c:	f3bf 8f6f 	isb	sy
 80173a0:	f3bf 8f4f 	dsb	sy
 80173a4:	613b      	str	r3, [r7, #16]
}
 80173a6:	bf00      	nop
 80173a8:	e7fe      	b.n	80173a8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d00a      	beq.n	80173ca <xEventGroupSetBits+0x52>
	__asm volatile
 80173b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173b8:	f383 8811 	msr	BASEPRI, r3
 80173bc:	f3bf 8f6f 	isb	sy
 80173c0:	f3bf 8f4f 	dsb	sy
 80173c4:	60fb      	str	r3, [r7, #12]
}
 80173c6:	bf00      	nop
 80173c8:	e7fe      	b.n	80173c8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80173ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173cc:	3304      	adds	r3, #4
 80173ce:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80173d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d2:	3308      	adds	r3, #8
 80173d4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80173d6:	f001 f9e1 	bl	801879c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80173da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173dc:	68db      	ldr	r3, [r3, #12]
 80173de:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80173e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e2:	681a      	ldr	r2, [r3, #0]
 80173e4:	683b      	ldr	r3, [r7, #0]
 80173e6:	431a      	orrs	r2, r3
 80173e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ea:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80173ec:	e03c      	b.n	8017468 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80173ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173f0:	685b      	ldr	r3, [r3, #4]
 80173f2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80173f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80173fa:	2300      	movs	r3, #0
 80173fc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80173fe:	69bb      	ldr	r3, [r7, #24]
 8017400:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017404:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017406:	69bb      	ldr	r3, [r7, #24]
 8017408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801740c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801740e:	697b      	ldr	r3, [r7, #20]
 8017410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017414:	2b00      	cmp	r3, #0
 8017416:	d108      	bne.n	801742a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8017418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801741a:	681a      	ldr	r2, [r3, #0]
 801741c:	69bb      	ldr	r3, [r7, #24]
 801741e:	4013      	ands	r3, r2
 8017420:	2b00      	cmp	r3, #0
 8017422:	d00b      	beq.n	801743c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017424:	2301      	movs	r3, #1
 8017426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017428:	e008      	b.n	801743c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801742c:	681a      	ldr	r2, [r3, #0]
 801742e:	69bb      	ldr	r3, [r7, #24]
 8017430:	4013      	ands	r3, r2
 8017432:	69ba      	ldr	r2, [r7, #24]
 8017434:	429a      	cmp	r2, r3
 8017436:	d101      	bne.n	801743c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8017438:	2301      	movs	r3, #1
 801743a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801743e:	2b00      	cmp	r3, #0
 8017440:	d010      	beq.n	8017464 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8017442:	697b      	ldr	r3, [r7, #20]
 8017444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017448:	2b00      	cmp	r3, #0
 801744a:	d003      	beq.n	8017454 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801744c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801744e:	69bb      	ldr	r3, [r7, #24]
 8017450:	4313      	orrs	r3, r2
 8017452:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801745c:	4619      	mov	r1, r3
 801745e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017460:	f001 fc8a 	bl	8018d78 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8017464:	69fb      	ldr	r3, [r7, #28]
 8017466:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8017468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801746a:	6a3b      	ldr	r3, [r7, #32]
 801746c:	429a      	cmp	r2, r3
 801746e:	d1be      	bne.n	80173ee <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017472:	681a      	ldr	r2, [r3, #0]
 8017474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017476:	43db      	mvns	r3, r3
 8017478:	401a      	ands	r2, r3
 801747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801747c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801747e:	f001 f99b 	bl	80187b8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8017482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017484:	681b      	ldr	r3, [r3, #0]
}
 8017486:	4618      	mov	r0, r3
 8017488:	3738      	adds	r7, #56	; 0x38
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}

0801748e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801748e:	b580      	push	{r7, lr}
 8017490:	b082      	sub	sp, #8
 8017492:	af00      	add	r7, sp, #0
 8017494:	6078      	str	r0, [r7, #4]
 8017496:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017498:	6839      	ldr	r1, [r7, #0]
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f7ff ff6c 	bl	8017378 <xEventGroupSetBits>
}
 80174a0:	bf00      	nop
 80174a2:	3708      	adds	r7, #8
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd80      	pop	{r7, pc}

080174a8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80174a8:	b480      	push	{r7}
 80174aa:	b087      	sub	sp, #28
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	60f8      	str	r0, [r7, #12]
 80174b0:	60b9      	str	r1, [r7, #8]
 80174b2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80174b4:	2300      	movs	r3, #0
 80174b6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d107      	bne.n	80174ce <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80174be:	68fa      	ldr	r2, [r7, #12]
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	4013      	ands	r3, r2
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d00a      	beq.n	80174de <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80174c8:	2301      	movs	r3, #1
 80174ca:	617b      	str	r3, [r7, #20]
 80174cc:	e007      	b.n	80174de <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80174ce:	68fa      	ldr	r2, [r7, #12]
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	4013      	ands	r3, r2
 80174d4:	68ba      	ldr	r2, [r7, #8]
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d101      	bne.n	80174de <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80174da:	2301      	movs	r3, #1
 80174dc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80174de:	697b      	ldr	r3, [r7, #20]
}
 80174e0:	4618      	mov	r0, r3
 80174e2:	371c      	adds	r7, #28
 80174e4:	46bd      	mov	sp, r7
 80174e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ea:	4770      	bx	lr

080174ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b086      	sub	sp, #24
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	60f8      	str	r0, [r7, #12]
 80174f4:	60b9      	str	r1, [r7, #8]
 80174f6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	68ba      	ldr	r2, [r7, #8]
 80174fc:	68f9      	ldr	r1, [r7, #12]
 80174fe:	4804      	ldr	r0, [pc, #16]	; (8017510 <xEventGroupSetBitsFromISR+0x24>)
 8017500:	f002 fb4a 	bl	8019b98 <xTimerPendFunctionCallFromISR>
 8017504:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017506:	697b      	ldr	r3, [r7, #20]
	}
 8017508:	4618      	mov	r0, r3
 801750a:	3718      	adds	r7, #24
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}
 8017510:	0801748f 	.word	0x0801748f

08017514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f103 0208 	add.w	r2, r3, #8
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	f04f 32ff 	mov.w	r2, #4294967295
 801752c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	f103 0208 	add.w	r2, r3, #8
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f103 0208 	add.w	r2, r3, #8
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	2200      	movs	r2, #0
 8017546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017548:	bf00      	nop
 801754a:	370c      	adds	r7, #12
 801754c:	46bd      	mov	sp, r7
 801754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017552:	4770      	bx	lr

08017554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017554:	b480      	push	{r7}
 8017556:	b083      	sub	sp, #12
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	2200      	movs	r2, #0
 8017560:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017562:	bf00      	nop
 8017564:	370c      	adds	r7, #12
 8017566:	46bd      	mov	sp, r7
 8017568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756c:	4770      	bx	lr

0801756e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801756e:	b480      	push	{r7}
 8017570:	b085      	sub	sp, #20
 8017572:	af00      	add	r7, sp, #0
 8017574:	6078      	str	r0, [r7, #4]
 8017576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	685b      	ldr	r3, [r3, #4]
 801757c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	68fa      	ldr	r2, [r7, #12]
 8017582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	689a      	ldr	r2, [r3, #8]
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	689b      	ldr	r3, [r3, #8]
 8017590:	683a      	ldr	r2, [r7, #0]
 8017592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	683a      	ldr	r2, [r7, #0]
 8017598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	1c5a      	adds	r2, r3, #1
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	601a      	str	r2, [r3, #0]
}
 80175aa:	bf00      	nop
 80175ac:	3714      	adds	r7, #20
 80175ae:	46bd      	mov	sp, r7
 80175b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b4:	4770      	bx	lr

080175b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80175b6:	b480      	push	{r7}
 80175b8:	b085      	sub	sp, #20
 80175ba:	af00      	add	r7, sp, #0
 80175bc:	6078      	str	r0, [r7, #4]
 80175be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80175c0:	683b      	ldr	r3, [r7, #0]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175cc:	d103      	bne.n	80175d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	691b      	ldr	r3, [r3, #16]
 80175d2:	60fb      	str	r3, [r7, #12]
 80175d4:	e00c      	b.n	80175f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	3308      	adds	r3, #8
 80175da:	60fb      	str	r3, [r7, #12]
 80175dc:	e002      	b.n	80175e4 <vListInsert+0x2e>
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	685b      	ldr	r3, [r3, #4]
 80175e2:	60fb      	str	r3, [r7, #12]
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	685b      	ldr	r3, [r3, #4]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	68ba      	ldr	r2, [r7, #8]
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d2f6      	bcs.n	80175de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	685a      	ldr	r2, [r3, #4]
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	685b      	ldr	r3, [r3, #4]
 80175fc:	683a      	ldr	r2, [r7, #0]
 80175fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	68fa      	ldr	r2, [r7, #12]
 8017604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	683a      	ldr	r2, [r7, #0]
 801760a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	687a      	ldr	r2, [r7, #4]
 8017610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	1c5a      	adds	r2, r3, #1
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	601a      	str	r2, [r3, #0]
}
 801761c:	bf00      	nop
 801761e:	3714      	adds	r7, #20
 8017620:	46bd      	mov	sp, r7
 8017622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017626:	4770      	bx	lr

08017628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017628:	b480      	push	{r7}
 801762a:	b085      	sub	sp, #20
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	691b      	ldr	r3, [r3, #16]
 8017634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	6892      	ldr	r2, [r2, #8]
 801763e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	689b      	ldr	r3, [r3, #8]
 8017644:	687a      	ldr	r2, [r7, #4]
 8017646:	6852      	ldr	r2, [r2, #4]
 8017648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	687a      	ldr	r2, [r7, #4]
 8017650:	429a      	cmp	r2, r3
 8017652:	d103      	bne.n	801765c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	689a      	ldr	r2, [r3, #8]
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	2200      	movs	r2, #0
 8017660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	1e5a      	subs	r2, r3, #1
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	681b      	ldr	r3, [r3, #0]
}
 8017670:	4618      	mov	r0, r3
 8017672:	3714      	adds	r7, #20
 8017674:	46bd      	mov	sp, r7
 8017676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767a:	4770      	bx	lr

0801767c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b084      	sub	sp, #16
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d10a      	bne.n	80176a6 <xQueueGenericReset+0x2a>
	__asm volatile
 8017690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017694:	f383 8811 	msr	BASEPRI, r3
 8017698:	f3bf 8f6f 	isb	sy
 801769c:	f3bf 8f4f 	dsb	sy
 80176a0:	60bb      	str	r3, [r7, #8]
}
 80176a2:	bf00      	nop
 80176a4:	e7fe      	b.n	80176a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80176a6:	f002 fbc5 	bl	8019e34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	681a      	ldr	r2, [r3, #0]
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176b2:	68f9      	ldr	r1, [r7, #12]
 80176b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80176b6:	fb01 f303 	mul.w	r3, r1, r3
 80176ba:	441a      	add	r2, r3
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	2200      	movs	r2, #0
 80176c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	681a      	ldr	r2, [r3, #0]
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176d6:	3b01      	subs	r3, #1
 80176d8:	68f9      	ldr	r1, [r7, #12]
 80176da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80176dc:	fb01 f303 	mul.w	r3, r1, r3
 80176e0:	441a      	add	r2, r3
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	22ff      	movs	r2, #255	; 0xff
 80176ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	22ff      	movs	r2, #255	; 0xff
 80176f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d114      	bne.n	8017726 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	691b      	ldr	r3, [r3, #16]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d01a      	beq.n	801773a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	3310      	adds	r3, #16
 8017708:	4618      	mov	r0, r3
 801770a:	f001 fad3 	bl	8018cb4 <xTaskRemoveFromEventList>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d012      	beq.n	801773a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017714:	4b0c      	ldr	r3, [pc, #48]	; (8017748 <xQueueGenericReset+0xcc>)
 8017716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801771a:	601a      	str	r2, [r3, #0]
 801771c:	f3bf 8f4f 	dsb	sy
 8017720:	f3bf 8f6f 	isb	sy
 8017724:	e009      	b.n	801773a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3310      	adds	r3, #16
 801772a:	4618      	mov	r0, r3
 801772c:	f7ff fef2 	bl	8017514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	3324      	adds	r3, #36	; 0x24
 8017734:	4618      	mov	r0, r3
 8017736:	f7ff feed 	bl	8017514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801773a:	f002 fbab 	bl	8019e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801773e:	2301      	movs	r3, #1
}
 8017740:	4618      	mov	r0, r3
 8017742:	3710      	adds	r7, #16
 8017744:	46bd      	mov	sp, r7
 8017746:	bd80      	pop	{r7, pc}
 8017748:	e000ed04 	.word	0xe000ed04

0801774c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801774c:	b580      	push	{r7, lr}
 801774e:	b08e      	sub	sp, #56	; 0x38
 8017750:	af02      	add	r7, sp, #8
 8017752:	60f8      	str	r0, [r7, #12]
 8017754:	60b9      	str	r1, [r7, #8]
 8017756:	607a      	str	r2, [r7, #4]
 8017758:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d10a      	bne.n	8017776 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017764:	f383 8811 	msr	BASEPRI, r3
 8017768:	f3bf 8f6f 	isb	sy
 801776c:	f3bf 8f4f 	dsb	sy
 8017770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017772:	bf00      	nop
 8017774:	e7fe      	b.n	8017774 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017776:	683b      	ldr	r3, [r7, #0]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d10a      	bne.n	8017792 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017780:	f383 8811 	msr	BASEPRI, r3
 8017784:	f3bf 8f6f 	isb	sy
 8017788:	f3bf 8f4f 	dsb	sy
 801778c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801778e:	bf00      	nop
 8017790:	e7fe      	b.n	8017790 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d002      	beq.n	801779e <xQueueGenericCreateStatic+0x52>
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d001      	beq.n	80177a2 <xQueueGenericCreateStatic+0x56>
 801779e:	2301      	movs	r3, #1
 80177a0:	e000      	b.n	80177a4 <xQueueGenericCreateStatic+0x58>
 80177a2:	2300      	movs	r3, #0
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d10a      	bne.n	80177be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80177a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ac:	f383 8811 	msr	BASEPRI, r3
 80177b0:	f3bf 8f6f 	isb	sy
 80177b4:	f3bf 8f4f 	dsb	sy
 80177b8:	623b      	str	r3, [r7, #32]
}
 80177ba:	bf00      	nop
 80177bc:	e7fe      	b.n	80177bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d102      	bne.n	80177ca <xQueueGenericCreateStatic+0x7e>
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d101      	bne.n	80177ce <xQueueGenericCreateStatic+0x82>
 80177ca:	2301      	movs	r3, #1
 80177cc:	e000      	b.n	80177d0 <xQueueGenericCreateStatic+0x84>
 80177ce:	2300      	movs	r3, #0
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d10a      	bne.n	80177ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80177d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177d8:	f383 8811 	msr	BASEPRI, r3
 80177dc:	f3bf 8f6f 	isb	sy
 80177e0:	f3bf 8f4f 	dsb	sy
 80177e4:	61fb      	str	r3, [r7, #28]
}
 80177e6:	bf00      	nop
 80177e8:	e7fe      	b.n	80177e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80177ea:	2350      	movs	r3, #80	; 0x50
 80177ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	2b50      	cmp	r3, #80	; 0x50
 80177f2:	d00a      	beq.n	801780a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80177f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f8:	f383 8811 	msr	BASEPRI, r3
 80177fc:	f3bf 8f6f 	isb	sy
 8017800:	f3bf 8f4f 	dsb	sy
 8017804:	61bb      	str	r3, [r7, #24]
}
 8017806:	bf00      	nop
 8017808:	e7fe      	b.n	8017808 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801780a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017812:	2b00      	cmp	r3, #0
 8017814:	d00d      	beq.n	8017832 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017818:	2201      	movs	r2, #1
 801781a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801781e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017824:	9300      	str	r3, [sp, #0]
 8017826:	4613      	mov	r3, r2
 8017828:	687a      	ldr	r2, [r7, #4]
 801782a:	68b9      	ldr	r1, [r7, #8]
 801782c:	68f8      	ldr	r0, [r7, #12]
 801782e:	f000 f83f 	bl	80178b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017834:	4618      	mov	r0, r3
 8017836:	3730      	adds	r7, #48	; 0x30
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}

0801783c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801783c:	b580      	push	{r7, lr}
 801783e:	b08a      	sub	sp, #40	; 0x28
 8017840:	af02      	add	r7, sp, #8
 8017842:	60f8      	str	r0, [r7, #12]
 8017844:	60b9      	str	r1, [r7, #8]
 8017846:	4613      	mov	r3, r2
 8017848:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d10a      	bne.n	8017866 <xQueueGenericCreate+0x2a>
	__asm volatile
 8017850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017854:	f383 8811 	msr	BASEPRI, r3
 8017858:	f3bf 8f6f 	isb	sy
 801785c:	f3bf 8f4f 	dsb	sy
 8017860:	613b      	str	r3, [r7, #16]
}
 8017862:	bf00      	nop
 8017864:	e7fe      	b.n	8017864 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	68ba      	ldr	r2, [r7, #8]
 801786a:	fb02 f303 	mul.w	r3, r2, r3
 801786e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017870:	69fb      	ldr	r3, [r7, #28]
 8017872:	3350      	adds	r3, #80	; 0x50
 8017874:	4618      	mov	r0, r3
 8017876:	f002 fbff 	bl	801a078 <pvPortMalloc>
 801787a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801787c:	69bb      	ldr	r3, [r7, #24]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d011      	beq.n	80178a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017882:	69bb      	ldr	r3, [r7, #24]
 8017884:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	3350      	adds	r3, #80	; 0x50
 801788a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801788c:	69bb      	ldr	r3, [r7, #24]
 801788e:	2200      	movs	r2, #0
 8017890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017894:	79fa      	ldrb	r2, [r7, #7]
 8017896:	69bb      	ldr	r3, [r7, #24]
 8017898:	9300      	str	r3, [sp, #0]
 801789a:	4613      	mov	r3, r2
 801789c:	697a      	ldr	r2, [r7, #20]
 801789e:	68b9      	ldr	r1, [r7, #8]
 80178a0:	68f8      	ldr	r0, [r7, #12]
 80178a2:	f000 f805 	bl	80178b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80178a6:	69bb      	ldr	r3, [r7, #24]
	}
 80178a8:	4618      	mov	r0, r3
 80178aa:	3720      	adds	r7, #32
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}

080178b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	60f8      	str	r0, [r7, #12]
 80178b8:	60b9      	str	r1, [r7, #8]
 80178ba:	607a      	str	r2, [r7, #4]
 80178bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d103      	bne.n	80178cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80178c4:	69bb      	ldr	r3, [r7, #24]
 80178c6:	69ba      	ldr	r2, [r7, #24]
 80178c8:	601a      	str	r2, [r3, #0]
 80178ca:	e002      	b.n	80178d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80178cc:	69bb      	ldr	r3, [r7, #24]
 80178ce:	687a      	ldr	r2, [r7, #4]
 80178d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80178d2:	69bb      	ldr	r3, [r7, #24]
 80178d4:	68fa      	ldr	r2, [r7, #12]
 80178d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80178d8:	69bb      	ldr	r3, [r7, #24]
 80178da:	68ba      	ldr	r2, [r7, #8]
 80178dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80178de:	2101      	movs	r1, #1
 80178e0:	69b8      	ldr	r0, [r7, #24]
 80178e2:	f7ff fecb 	bl	801767c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80178e6:	69bb      	ldr	r3, [r7, #24]
 80178e8:	78fa      	ldrb	r2, [r7, #3]
 80178ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80178ee:	bf00      	nop
 80178f0:	3710      	adds	r7, #16
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
	...

080178f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b08e      	sub	sp, #56	; 0x38
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	60f8      	str	r0, [r7, #12]
 8017900:	60b9      	str	r1, [r7, #8]
 8017902:	607a      	str	r2, [r7, #4]
 8017904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017906:	2300      	movs	r3, #0
 8017908:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017910:	2b00      	cmp	r3, #0
 8017912:	d10a      	bne.n	801792a <xQueueGenericSend+0x32>
	__asm volatile
 8017914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017918:	f383 8811 	msr	BASEPRI, r3
 801791c:	f3bf 8f6f 	isb	sy
 8017920:	f3bf 8f4f 	dsb	sy
 8017924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017926:	bf00      	nop
 8017928:	e7fe      	b.n	8017928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801792a:	68bb      	ldr	r3, [r7, #8]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d103      	bne.n	8017938 <xQueueGenericSend+0x40>
 8017930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017934:	2b00      	cmp	r3, #0
 8017936:	d101      	bne.n	801793c <xQueueGenericSend+0x44>
 8017938:	2301      	movs	r3, #1
 801793a:	e000      	b.n	801793e <xQueueGenericSend+0x46>
 801793c:	2300      	movs	r3, #0
 801793e:	2b00      	cmp	r3, #0
 8017940:	d10a      	bne.n	8017958 <xQueueGenericSend+0x60>
	__asm volatile
 8017942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017946:	f383 8811 	msr	BASEPRI, r3
 801794a:	f3bf 8f6f 	isb	sy
 801794e:	f3bf 8f4f 	dsb	sy
 8017952:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017954:	bf00      	nop
 8017956:	e7fe      	b.n	8017956 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017958:	683b      	ldr	r3, [r7, #0]
 801795a:	2b02      	cmp	r3, #2
 801795c:	d103      	bne.n	8017966 <xQueueGenericSend+0x6e>
 801795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017962:	2b01      	cmp	r3, #1
 8017964:	d101      	bne.n	801796a <xQueueGenericSend+0x72>
 8017966:	2301      	movs	r3, #1
 8017968:	e000      	b.n	801796c <xQueueGenericSend+0x74>
 801796a:	2300      	movs	r3, #0
 801796c:	2b00      	cmp	r3, #0
 801796e:	d10a      	bne.n	8017986 <xQueueGenericSend+0x8e>
	__asm volatile
 8017970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017974:	f383 8811 	msr	BASEPRI, r3
 8017978:	f3bf 8f6f 	isb	sy
 801797c:	f3bf 8f4f 	dsb	sy
 8017980:	623b      	str	r3, [r7, #32]
}
 8017982:	bf00      	nop
 8017984:	e7fe      	b.n	8017984 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017986:	f001 fbb7 	bl	80190f8 <xTaskGetSchedulerState>
 801798a:	4603      	mov	r3, r0
 801798c:	2b00      	cmp	r3, #0
 801798e:	d102      	bne.n	8017996 <xQueueGenericSend+0x9e>
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d101      	bne.n	801799a <xQueueGenericSend+0xa2>
 8017996:	2301      	movs	r3, #1
 8017998:	e000      	b.n	801799c <xQueueGenericSend+0xa4>
 801799a:	2300      	movs	r3, #0
 801799c:	2b00      	cmp	r3, #0
 801799e:	d10a      	bne.n	80179b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80179a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179a4:	f383 8811 	msr	BASEPRI, r3
 80179a8:	f3bf 8f6f 	isb	sy
 80179ac:	f3bf 8f4f 	dsb	sy
 80179b0:	61fb      	str	r3, [r7, #28]
}
 80179b2:	bf00      	nop
 80179b4:	e7fe      	b.n	80179b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80179b6:	f002 fa3d 	bl	8019e34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80179ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80179be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179c2:	429a      	cmp	r2, r3
 80179c4:	d302      	bcc.n	80179cc <xQueueGenericSend+0xd4>
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	2b02      	cmp	r3, #2
 80179ca:	d129      	bne.n	8017a20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80179cc:	683a      	ldr	r2, [r7, #0]
 80179ce:	68b9      	ldr	r1, [r7, #8]
 80179d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179d2:	f000 fa97 	bl	8017f04 <prvCopyDataToQueue>
 80179d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80179d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d010      	beq.n	8017a02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80179e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e2:	3324      	adds	r3, #36	; 0x24
 80179e4:	4618      	mov	r0, r3
 80179e6:	f001 f965 	bl	8018cb4 <xTaskRemoveFromEventList>
 80179ea:	4603      	mov	r3, r0
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d013      	beq.n	8017a18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80179f0:	4b3f      	ldr	r3, [pc, #252]	; (8017af0 <xQueueGenericSend+0x1f8>)
 80179f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179f6:	601a      	str	r2, [r3, #0]
 80179f8:	f3bf 8f4f 	dsb	sy
 80179fc:	f3bf 8f6f 	isb	sy
 8017a00:	e00a      	b.n	8017a18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d007      	beq.n	8017a18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017a08:	4b39      	ldr	r3, [pc, #228]	; (8017af0 <xQueueGenericSend+0x1f8>)
 8017a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a0e:	601a      	str	r2, [r3, #0]
 8017a10:	f3bf 8f4f 	dsb	sy
 8017a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017a18:	f002 fa3c 	bl	8019e94 <vPortExitCritical>
				return pdPASS;
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	e063      	b.n	8017ae8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d103      	bne.n	8017a2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017a26:	f002 fa35 	bl	8019e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	e05c      	b.n	8017ae8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d106      	bne.n	8017a42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017a34:	f107 0314 	add.w	r3, r7, #20
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f001 f9ff 	bl	8018e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017a3e:	2301      	movs	r3, #1
 8017a40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017a42:	f002 fa27 	bl	8019e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017a46:	f000 fea9 	bl	801879c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017a4a:	f002 f9f3 	bl	8019e34 <vPortEnterCritical>
 8017a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017a54:	b25b      	sxtb	r3, r3
 8017a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a5a:	d103      	bne.n	8017a64 <xQueueGenericSend+0x16c>
 8017a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a5e:	2200      	movs	r2, #0
 8017a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017a6a:	b25b      	sxtb	r3, r3
 8017a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a70:	d103      	bne.n	8017a7a <xQueueGenericSend+0x182>
 8017a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a74:	2200      	movs	r2, #0
 8017a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017a7a:	f002 fa0b 	bl	8019e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017a7e:	1d3a      	adds	r2, r7, #4
 8017a80:	f107 0314 	add.w	r3, r7, #20
 8017a84:	4611      	mov	r1, r2
 8017a86:	4618      	mov	r0, r3
 8017a88:	f001 f9ee 	bl	8018e68 <xTaskCheckForTimeOut>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d124      	bne.n	8017adc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a94:	f000 fb2e 	bl	80180f4 <prvIsQueueFull>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d018      	beq.n	8017ad0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa0:	3310      	adds	r3, #16
 8017aa2:	687a      	ldr	r2, [r7, #4]
 8017aa4:	4611      	mov	r1, r2
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f001 f878 	bl	8018b9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017aae:	f000 fab9 	bl	8018024 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017ab2:	f000 fe81 	bl	80187b8 <xTaskResumeAll>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	f47f af7c 	bne.w	80179b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017abe:	4b0c      	ldr	r3, [pc, #48]	; (8017af0 <xQueueGenericSend+0x1f8>)
 8017ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ac4:	601a      	str	r2, [r3, #0]
 8017ac6:	f3bf 8f4f 	dsb	sy
 8017aca:	f3bf 8f6f 	isb	sy
 8017ace:	e772      	b.n	80179b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ad2:	f000 faa7 	bl	8018024 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017ad6:	f000 fe6f 	bl	80187b8 <xTaskResumeAll>
 8017ada:	e76c      	b.n	80179b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ade:	f000 faa1 	bl	8018024 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017ae2:	f000 fe69 	bl	80187b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3738      	adds	r7, #56	; 0x38
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}
 8017af0:	e000ed04 	.word	0xe000ed04

08017af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b090      	sub	sp, #64	; 0x40
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	60f8      	str	r0, [r7, #12]
 8017afc:	60b9      	str	r1, [r7, #8]
 8017afe:	607a      	str	r2, [r7, #4]
 8017b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d10a      	bne.n	8017b22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b10:	f383 8811 	msr	BASEPRI, r3
 8017b14:	f3bf 8f6f 	isb	sy
 8017b18:	f3bf 8f4f 	dsb	sy
 8017b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017b1e:	bf00      	nop
 8017b20:	e7fe      	b.n	8017b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b22:	68bb      	ldr	r3, [r7, #8]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d103      	bne.n	8017b30 <xQueueGenericSendFromISR+0x3c>
 8017b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d101      	bne.n	8017b34 <xQueueGenericSendFromISR+0x40>
 8017b30:	2301      	movs	r3, #1
 8017b32:	e000      	b.n	8017b36 <xQueueGenericSendFromISR+0x42>
 8017b34:	2300      	movs	r3, #0
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d10a      	bne.n	8017b50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b3e:	f383 8811 	msr	BASEPRI, r3
 8017b42:	f3bf 8f6f 	isb	sy
 8017b46:	f3bf 8f4f 	dsb	sy
 8017b4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017b4c:	bf00      	nop
 8017b4e:	e7fe      	b.n	8017b4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017b50:	683b      	ldr	r3, [r7, #0]
 8017b52:	2b02      	cmp	r3, #2
 8017b54:	d103      	bne.n	8017b5e <xQueueGenericSendFromISR+0x6a>
 8017b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b5a:	2b01      	cmp	r3, #1
 8017b5c:	d101      	bne.n	8017b62 <xQueueGenericSendFromISR+0x6e>
 8017b5e:	2301      	movs	r3, #1
 8017b60:	e000      	b.n	8017b64 <xQueueGenericSendFromISR+0x70>
 8017b62:	2300      	movs	r3, #0
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d10a      	bne.n	8017b7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b6c:	f383 8811 	msr	BASEPRI, r3
 8017b70:	f3bf 8f6f 	isb	sy
 8017b74:	f3bf 8f4f 	dsb	sy
 8017b78:	623b      	str	r3, [r7, #32]
}
 8017b7a:	bf00      	nop
 8017b7c:	e7fe      	b.n	8017b7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017b7e:	f002 fa3b 	bl	8019ff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017b82:	f3ef 8211 	mrs	r2, BASEPRI
 8017b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b8a:	f383 8811 	msr	BASEPRI, r3
 8017b8e:	f3bf 8f6f 	isb	sy
 8017b92:	f3bf 8f4f 	dsb	sy
 8017b96:	61fa      	str	r2, [r7, #28]
 8017b98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017b9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017b9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ba6:	429a      	cmp	r2, r3
 8017ba8:	d302      	bcc.n	8017bb0 <xQueueGenericSendFromISR+0xbc>
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	2b02      	cmp	r3, #2
 8017bae:	d12f      	bne.n	8017c10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017bc0:	683a      	ldr	r2, [r7, #0]
 8017bc2:	68b9      	ldr	r1, [r7, #8]
 8017bc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017bc6:	f000 f99d 	bl	8017f04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017bca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bd2:	d112      	bne.n	8017bfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d016      	beq.n	8017c0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bde:	3324      	adds	r3, #36	; 0x24
 8017be0:	4618      	mov	r0, r3
 8017be2:	f001 f867 	bl	8018cb4 <xTaskRemoveFromEventList>
 8017be6:	4603      	mov	r3, r0
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d00e      	beq.n	8017c0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d00b      	beq.n	8017c0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	2201      	movs	r2, #1
 8017bf6:	601a      	str	r2, [r3, #0]
 8017bf8:	e007      	b.n	8017c0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017bfe:	3301      	adds	r3, #1
 8017c00:	b2db      	uxtb	r3, r3
 8017c02:	b25a      	sxtb	r2, r3
 8017c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017c0a:	2301      	movs	r3, #1
 8017c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017c0e:	e001      	b.n	8017c14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017c10:	2300      	movs	r3, #0
 8017c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017c18:	697b      	ldr	r3, [r7, #20]
 8017c1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017c1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017c22:	4618      	mov	r0, r3
 8017c24:	3740      	adds	r7, #64	; 0x40
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}

08017c2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017c2a:	b580      	push	{r7, lr}
 8017c2c:	b08e      	sub	sp, #56	; 0x38
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	6078      	str	r0, [r7, #4]
 8017c32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d10a      	bne.n	8017c54 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8017c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c42:	f383 8811 	msr	BASEPRI, r3
 8017c46:	f3bf 8f6f 	isb	sy
 8017c4a:	f3bf 8f4f 	dsb	sy
 8017c4e:	623b      	str	r3, [r7, #32]
}
 8017c50:	bf00      	nop
 8017c52:	e7fe      	b.n	8017c52 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d00a      	beq.n	8017c72 <xQueueGiveFromISR+0x48>
	__asm volatile
 8017c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c60:	f383 8811 	msr	BASEPRI, r3
 8017c64:	f3bf 8f6f 	isb	sy
 8017c68:	f3bf 8f4f 	dsb	sy
 8017c6c:	61fb      	str	r3, [r7, #28]
}
 8017c6e:	bf00      	nop
 8017c70:	e7fe      	b.n	8017c70 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d103      	bne.n	8017c82 <xQueueGiveFromISR+0x58>
 8017c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c7c:	689b      	ldr	r3, [r3, #8]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d101      	bne.n	8017c86 <xQueueGiveFromISR+0x5c>
 8017c82:	2301      	movs	r3, #1
 8017c84:	e000      	b.n	8017c88 <xQueueGiveFromISR+0x5e>
 8017c86:	2300      	movs	r3, #0
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d10a      	bne.n	8017ca2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8017c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c90:	f383 8811 	msr	BASEPRI, r3
 8017c94:	f3bf 8f6f 	isb	sy
 8017c98:	f3bf 8f4f 	dsb	sy
 8017c9c:	61bb      	str	r3, [r7, #24]
}
 8017c9e:	bf00      	nop
 8017ca0:	e7fe      	b.n	8017ca0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017ca2:	f002 f9a9 	bl	8019ff8 <vPortValidateInterruptPriority>
	__asm volatile
 8017ca6:	f3ef 8211 	mrs	r2, BASEPRI
 8017caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cae:	f383 8811 	msr	BASEPRI, r3
 8017cb2:	f3bf 8f6f 	isb	sy
 8017cb6:	f3bf 8f4f 	dsb	sy
 8017cba:	617a      	str	r2, [r7, #20]
 8017cbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017cbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	d22b      	bcs.n	8017d2a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cde:	1c5a      	adds	r2, r3, #1
 8017ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017ce4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cec:	d112      	bne.n	8017d14 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d016      	beq.n	8017d24 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf8:	3324      	adds	r3, #36	; 0x24
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f000 ffda 	bl	8018cb4 <xTaskRemoveFromEventList>
 8017d00:	4603      	mov	r3, r0
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d00e      	beq.n	8017d24 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d00b      	beq.n	8017d24 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017d0c:	683b      	ldr	r3, [r7, #0]
 8017d0e:	2201      	movs	r2, #1
 8017d10:	601a      	str	r2, [r3, #0]
 8017d12:	e007      	b.n	8017d24 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d18:	3301      	adds	r3, #1
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	b25a      	sxtb	r2, r3
 8017d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017d24:	2301      	movs	r3, #1
 8017d26:	637b      	str	r3, [r7, #52]	; 0x34
 8017d28:	e001      	b.n	8017d2e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8017d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	f383 8811 	msr	BASEPRI, r3
}
 8017d38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	3738      	adds	r7, #56	; 0x38
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}

08017d44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b08c      	sub	sp, #48	; 0x30
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	60f8      	str	r0, [r7, #12]
 8017d4c:	60b9      	str	r1, [r7, #8]
 8017d4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017d50:	2300      	movs	r3, #0
 8017d52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d10a      	bne.n	8017d74 <xQueueReceive+0x30>
	__asm volatile
 8017d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d62:	f383 8811 	msr	BASEPRI, r3
 8017d66:	f3bf 8f6f 	isb	sy
 8017d6a:	f3bf 8f4f 	dsb	sy
 8017d6e:	623b      	str	r3, [r7, #32]
}
 8017d70:	bf00      	nop
 8017d72:	e7fe      	b.n	8017d72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017d74:	68bb      	ldr	r3, [r7, #8]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d103      	bne.n	8017d82 <xQueueReceive+0x3e>
 8017d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d101      	bne.n	8017d86 <xQueueReceive+0x42>
 8017d82:	2301      	movs	r3, #1
 8017d84:	e000      	b.n	8017d88 <xQueueReceive+0x44>
 8017d86:	2300      	movs	r3, #0
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d10a      	bne.n	8017da2 <xQueueReceive+0x5e>
	__asm volatile
 8017d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d90:	f383 8811 	msr	BASEPRI, r3
 8017d94:	f3bf 8f6f 	isb	sy
 8017d98:	f3bf 8f4f 	dsb	sy
 8017d9c:	61fb      	str	r3, [r7, #28]
}
 8017d9e:	bf00      	nop
 8017da0:	e7fe      	b.n	8017da0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017da2:	f001 f9a9 	bl	80190f8 <xTaskGetSchedulerState>
 8017da6:	4603      	mov	r3, r0
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d102      	bne.n	8017db2 <xQueueReceive+0x6e>
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d101      	bne.n	8017db6 <xQueueReceive+0x72>
 8017db2:	2301      	movs	r3, #1
 8017db4:	e000      	b.n	8017db8 <xQueueReceive+0x74>
 8017db6:	2300      	movs	r3, #0
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d10a      	bne.n	8017dd2 <xQueueReceive+0x8e>
	__asm volatile
 8017dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dc0:	f383 8811 	msr	BASEPRI, r3
 8017dc4:	f3bf 8f6f 	isb	sy
 8017dc8:	f3bf 8f4f 	dsb	sy
 8017dcc:	61bb      	str	r3, [r7, #24]
}
 8017dce:	bf00      	nop
 8017dd0:	e7fe      	b.n	8017dd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017dd2:	f002 f82f 	bl	8019e34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d01f      	beq.n	8017e22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017de2:	68b9      	ldr	r1, [r7, #8]
 8017de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017de6:	f000 f8f7 	bl	8017fd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dec:	1e5a      	subs	r2, r3, #1
 8017dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df4:	691b      	ldr	r3, [r3, #16]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d00f      	beq.n	8017e1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dfc:	3310      	adds	r3, #16
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f000 ff58 	bl	8018cb4 <xTaskRemoveFromEventList>
 8017e04:	4603      	mov	r3, r0
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d007      	beq.n	8017e1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017e0a:	4b3d      	ldr	r3, [pc, #244]	; (8017f00 <xQueueReceive+0x1bc>)
 8017e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e10:	601a      	str	r2, [r3, #0]
 8017e12:	f3bf 8f4f 	dsb	sy
 8017e16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017e1a:	f002 f83b 	bl	8019e94 <vPortExitCritical>
				return pdPASS;
 8017e1e:	2301      	movs	r3, #1
 8017e20:	e069      	b.n	8017ef6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d103      	bne.n	8017e30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017e28:	f002 f834 	bl	8019e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	e062      	b.n	8017ef6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d106      	bne.n	8017e44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017e36:	f107 0310 	add.w	r3, r7, #16
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f000 fffe 	bl	8018e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017e40:	2301      	movs	r3, #1
 8017e42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017e44:	f002 f826 	bl	8019e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017e48:	f000 fca8 	bl	801879c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017e4c:	f001 fff2 	bl	8019e34 <vPortEnterCritical>
 8017e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017e56:	b25b      	sxtb	r3, r3
 8017e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e5c:	d103      	bne.n	8017e66 <xQueueReceive+0x122>
 8017e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e60:	2200      	movs	r2, #0
 8017e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e6c:	b25b      	sxtb	r3, r3
 8017e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e72:	d103      	bne.n	8017e7c <xQueueReceive+0x138>
 8017e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e76:	2200      	movs	r2, #0
 8017e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017e7c:	f002 f80a 	bl	8019e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017e80:	1d3a      	adds	r2, r7, #4
 8017e82:	f107 0310 	add.w	r3, r7, #16
 8017e86:	4611      	mov	r1, r2
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f000 ffed 	bl	8018e68 <xTaskCheckForTimeOut>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d123      	bne.n	8017edc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e96:	f000 f917 	bl	80180c8 <prvIsQueueEmpty>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d017      	beq.n	8017ed0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea2:	3324      	adds	r3, #36	; 0x24
 8017ea4:	687a      	ldr	r2, [r7, #4]
 8017ea6:	4611      	mov	r1, r2
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f000 fe77 	bl	8018b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017eb0:	f000 f8b8 	bl	8018024 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017eb4:	f000 fc80 	bl	80187b8 <xTaskResumeAll>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d189      	bne.n	8017dd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017ebe:	4b10      	ldr	r3, [pc, #64]	; (8017f00 <xQueueReceive+0x1bc>)
 8017ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ec4:	601a      	str	r2, [r3, #0]
 8017ec6:	f3bf 8f4f 	dsb	sy
 8017eca:	f3bf 8f6f 	isb	sy
 8017ece:	e780      	b.n	8017dd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ed2:	f000 f8a7 	bl	8018024 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017ed6:	f000 fc6f 	bl	80187b8 <xTaskResumeAll>
 8017eda:	e77a      	b.n	8017dd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ede:	f000 f8a1 	bl	8018024 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017ee2:	f000 fc69 	bl	80187b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ee8:	f000 f8ee 	bl	80180c8 <prvIsQueueEmpty>
 8017eec:	4603      	mov	r3, r0
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	f43f af6f 	beq.w	8017dd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017ef4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	3730      	adds	r7, #48	; 0x30
 8017efa:	46bd      	mov	sp, r7
 8017efc:	bd80      	pop	{r7, pc}
 8017efe:	bf00      	nop
 8017f00:	e000ed04 	.word	0xe000ed04

08017f04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b086      	sub	sp, #24
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	60f8      	str	r0, [r7, #12]
 8017f0c:	60b9      	str	r1, [r7, #8]
 8017f0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017f10:	2300      	movs	r3, #0
 8017f12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d10d      	bne.n	8017f3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d14d      	bne.n	8017fc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	689b      	ldr	r3, [r3, #8]
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f001 f900 	bl	8019134 <xTaskPriorityDisinherit>
 8017f34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	2200      	movs	r2, #0
 8017f3a:	609a      	str	r2, [r3, #8]
 8017f3c:	e043      	b.n	8017fc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d119      	bne.n	8017f78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	6858      	ldr	r0, [r3, #4]
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	68b9      	ldr	r1, [r7, #8]
 8017f50:	f003 f8e1 	bl	801b116 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	685a      	ldr	r2, [r3, #4]
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f5c:	441a      	add	r2, r3
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	685a      	ldr	r2, [r3, #4]
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	689b      	ldr	r3, [r3, #8]
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d32b      	bcc.n	8017fc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	681a      	ldr	r2, [r3, #0]
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	605a      	str	r2, [r3, #4]
 8017f76:	e026      	b.n	8017fc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	68d8      	ldr	r0, [r3, #12]
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f80:	461a      	mov	r2, r3
 8017f82:	68b9      	ldr	r1, [r7, #8]
 8017f84:	f003 f8c7 	bl	801b116 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	68da      	ldr	r2, [r3, #12]
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f90:	425b      	negs	r3, r3
 8017f92:	441a      	add	r2, r3
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	68da      	ldr	r2, [r3, #12]
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d207      	bcs.n	8017fb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	689a      	ldr	r2, [r3, #8]
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fac:	425b      	negs	r3, r3
 8017fae:	441a      	add	r2, r3
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	2b02      	cmp	r3, #2
 8017fb8:	d105      	bne.n	8017fc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017fba:	693b      	ldr	r3, [r7, #16]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d002      	beq.n	8017fc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017fc0:	693b      	ldr	r3, [r7, #16]
 8017fc2:	3b01      	subs	r3, #1
 8017fc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017fc6:	693b      	ldr	r3, [r7, #16]
 8017fc8:	1c5a      	adds	r2, r3, #1
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017fce:	697b      	ldr	r3, [r7, #20]
}
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	3718      	adds	r7, #24
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bd80      	pop	{r7, pc}

08017fd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b082      	sub	sp, #8
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
 8017fe0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d018      	beq.n	801801c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	68da      	ldr	r2, [r3, #12]
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ff2:	441a      	add	r2, r3
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	68da      	ldr	r2, [r3, #12]
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	689b      	ldr	r3, [r3, #8]
 8018000:	429a      	cmp	r2, r3
 8018002:	d303      	bcc.n	801800c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	681a      	ldr	r2, [r3, #0]
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	68d9      	ldr	r1, [r3, #12]
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018014:	461a      	mov	r2, r3
 8018016:	6838      	ldr	r0, [r7, #0]
 8018018:	f003 f87d 	bl	801b116 <memcpy>
	}
}
 801801c:	bf00      	nop
 801801e:	3708      	adds	r7, #8
 8018020:	46bd      	mov	sp, r7
 8018022:	bd80      	pop	{r7, pc}

08018024 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018024:	b580      	push	{r7, lr}
 8018026:	b084      	sub	sp, #16
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801802c:	f001 ff02 	bl	8019e34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018036:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018038:	e011      	b.n	801805e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801803e:	2b00      	cmp	r3, #0
 8018040:	d012      	beq.n	8018068 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	3324      	adds	r3, #36	; 0x24
 8018046:	4618      	mov	r0, r3
 8018048:	f000 fe34 	bl	8018cb4 <xTaskRemoveFromEventList>
 801804c:	4603      	mov	r3, r0
 801804e:	2b00      	cmp	r3, #0
 8018050:	d001      	beq.n	8018056 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018052:	f000 ff6b 	bl	8018f2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018056:	7bfb      	ldrb	r3, [r7, #15]
 8018058:	3b01      	subs	r3, #1
 801805a:	b2db      	uxtb	r3, r3
 801805c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801805e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018062:	2b00      	cmp	r3, #0
 8018064:	dce9      	bgt.n	801803a <prvUnlockQueue+0x16>
 8018066:	e000      	b.n	801806a <prvUnlockQueue+0x46>
					break;
 8018068:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	22ff      	movs	r2, #255	; 0xff
 801806e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018072:	f001 ff0f 	bl	8019e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018076:	f001 fedd 	bl	8019e34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018080:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018082:	e011      	b.n	80180a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	691b      	ldr	r3, [r3, #16]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d012      	beq.n	80180b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	3310      	adds	r3, #16
 8018090:	4618      	mov	r0, r3
 8018092:	f000 fe0f 	bl	8018cb4 <xTaskRemoveFromEventList>
 8018096:	4603      	mov	r3, r0
 8018098:	2b00      	cmp	r3, #0
 801809a:	d001      	beq.n	80180a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801809c:	f000 ff46 	bl	8018f2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80180a0:	7bbb      	ldrb	r3, [r7, #14]
 80180a2:	3b01      	subs	r3, #1
 80180a4:	b2db      	uxtb	r3, r3
 80180a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80180a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	dce9      	bgt.n	8018084 <prvUnlockQueue+0x60>
 80180b0:	e000      	b.n	80180b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80180b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	22ff      	movs	r2, #255	; 0xff
 80180b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80180bc:	f001 feea 	bl	8019e94 <vPortExitCritical>
}
 80180c0:	bf00      	nop
 80180c2:	3710      	adds	r7, #16
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}

080180c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b084      	sub	sp, #16
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80180d0:	f001 feb0 	bl	8019e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d102      	bne.n	80180e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80180dc:	2301      	movs	r3, #1
 80180de:	60fb      	str	r3, [r7, #12]
 80180e0:	e001      	b.n	80180e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80180e2:	2300      	movs	r3, #0
 80180e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80180e6:	f001 fed5 	bl	8019e94 <vPortExitCritical>

	return xReturn;
 80180ea:	68fb      	ldr	r3, [r7, #12]
}
 80180ec:	4618      	mov	r0, r3
 80180ee:	3710      	adds	r7, #16
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bd80      	pop	{r7, pc}

080180f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b084      	sub	sp, #16
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80180fc:	f001 fe9a 	bl	8019e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018108:	429a      	cmp	r2, r3
 801810a:	d102      	bne.n	8018112 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801810c:	2301      	movs	r3, #1
 801810e:	60fb      	str	r3, [r7, #12]
 8018110:	e001      	b.n	8018116 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018112:	2300      	movs	r3, #0
 8018114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018116:	f001 febd 	bl	8019e94 <vPortExitCritical>

	return xReturn;
 801811a:	68fb      	ldr	r3, [r7, #12]
}
 801811c:	4618      	mov	r0, r3
 801811e:	3710      	adds	r7, #16
 8018120:	46bd      	mov	sp, r7
 8018122:	bd80      	pop	{r7, pc}

08018124 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018124:	b480      	push	{r7}
 8018126:	b085      	sub	sp, #20
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
 801812c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801812e:	2300      	movs	r3, #0
 8018130:	60fb      	str	r3, [r7, #12]
 8018132:	e014      	b.n	801815e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018134:	4a0f      	ldr	r2, [pc, #60]	; (8018174 <vQueueAddToRegistry+0x50>)
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d10b      	bne.n	8018158 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018140:	490c      	ldr	r1, [pc, #48]	; (8018174 <vQueueAddToRegistry+0x50>)
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	683a      	ldr	r2, [r7, #0]
 8018146:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801814a:	4a0a      	ldr	r2, [pc, #40]	; (8018174 <vQueueAddToRegistry+0x50>)
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	00db      	lsls	r3, r3, #3
 8018150:	4413      	add	r3, r2
 8018152:	687a      	ldr	r2, [r7, #4]
 8018154:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018156:	e006      	b.n	8018166 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	3301      	adds	r3, #1
 801815c:	60fb      	str	r3, [r7, #12]
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	2b07      	cmp	r3, #7
 8018162:	d9e7      	bls.n	8018134 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018164:	bf00      	nop
 8018166:	bf00      	nop
 8018168:	3714      	adds	r7, #20
 801816a:	46bd      	mov	sp, r7
 801816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018170:	4770      	bx	lr
 8018172:	bf00      	nop
 8018174:	20002de0 	.word	0x20002de0

08018178 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018178:	b580      	push	{r7, lr}
 801817a:	b086      	sub	sp, #24
 801817c:	af00      	add	r7, sp, #0
 801817e:	60f8      	str	r0, [r7, #12]
 8018180:	60b9      	str	r1, [r7, #8]
 8018182:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018188:	f001 fe54 	bl	8019e34 <vPortEnterCritical>
 801818c:	697b      	ldr	r3, [r7, #20]
 801818e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018192:	b25b      	sxtb	r3, r3
 8018194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018198:	d103      	bne.n	80181a2 <vQueueWaitForMessageRestricted+0x2a>
 801819a:	697b      	ldr	r3, [r7, #20]
 801819c:	2200      	movs	r2, #0
 801819e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80181a2:	697b      	ldr	r3, [r7, #20]
 80181a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80181a8:	b25b      	sxtb	r3, r3
 80181aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181ae:	d103      	bne.n	80181b8 <vQueueWaitForMessageRestricted+0x40>
 80181b0:	697b      	ldr	r3, [r7, #20]
 80181b2:	2200      	movs	r2, #0
 80181b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80181b8:	f001 fe6c 	bl	8019e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80181bc:	697b      	ldr	r3, [r7, #20]
 80181be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d106      	bne.n	80181d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80181c4:	697b      	ldr	r3, [r7, #20]
 80181c6:	3324      	adds	r3, #36	; 0x24
 80181c8:	687a      	ldr	r2, [r7, #4]
 80181ca:	68b9      	ldr	r1, [r7, #8]
 80181cc:	4618      	mov	r0, r3
 80181ce:	f000 fd45 	bl	8018c5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80181d2:	6978      	ldr	r0, [r7, #20]
 80181d4:	f7ff ff26 	bl	8018024 <prvUnlockQueue>
	}
 80181d8:	bf00      	nop
 80181da:	3718      	adds	r7, #24
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}

080181e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b08e      	sub	sp, #56	; 0x38
 80181e4:	af04      	add	r7, sp, #16
 80181e6:	60f8      	str	r0, [r7, #12]
 80181e8:	60b9      	str	r1, [r7, #8]
 80181ea:	607a      	str	r2, [r7, #4]
 80181ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80181ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d10a      	bne.n	801820a <xTaskCreateStatic+0x2a>
	__asm volatile
 80181f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181f8:	f383 8811 	msr	BASEPRI, r3
 80181fc:	f3bf 8f6f 	isb	sy
 8018200:	f3bf 8f4f 	dsb	sy
 8018204:	623b      	str	r3, [r7, #32]
}
 8018206:	bf00      	nop
 8018208:	e7fe      	b.n	8018208 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801820c:	2b00      	cmp	r3, #0
 801820e:	d10a      	bne.n	8018226 <xTaskCreateStatic+0x46>
	__asm volatile
 8018210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018214:	f383 8811 	msr	BASEPRI, r3
 8018218:	f3bf 8f6f 	isb	sy
 801821c:	f3bf 8f4f 	dsb	sy
 8018220:	61fb      	str	r3, [r7, #28]
}
 8018222:	bf00      	nop
 8018224:	e7fe      	b.n	8018224 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018226:	23c0      	movs	r3, #192	; 0xc0
 8018228:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801822a:	693b      	ldr	r3, [r7, #16]
 801822c:	2bc0      	cmp	r3, #192	; 0xc0
 801822e:	d00a      	beq.n	8018246 <xTaskCreateStatic+0x66>
	__asm volatile
 8018230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018234:	f383 8811 	msr	BASEPRI, r3
 8018238:	f3bf 8f6f 	isb	sy
 801823c:	f3bf 8f4f 	dsb	sy
 8018240:	61bb      	str	r3, [r7, #24]
}
 8018242:	bf00      	nop
 8018244:	e7fe      	b.n	8018244 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018246:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801824a:	2b00      	cmp	r3, #0
 801824c:	d01e      	beq.n	801828c <xTaskCreateStatic+0xac>
 801824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018250:	2b00      	cmp	r3, #0
 8018252:	d01b      	beq.n	801828c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018256:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801825a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801825c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018260:	2202      	movs	r2, #2
 8018262:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018266:	2300      	movs	r3, #0
 8018268:	9303      	str	r3, [sp, #12]
 801826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801826c:	9302      	str	r3, [sp, #8]
 801826e:	f107 0314 	add.w	r3, r7, #20
 8018272:	9301      	str	r3, [sp, #4]
 8018274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018276:	9300      	str	r3, [sp, #0]
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	687a      	ldr	r2, [r7, #4]
 801827c:	68b9      	ldr	r1, [r7, #8]
 801827e:	68f8      	ldr	r0, [r7, #12]
 8018280:	f000 f850 	bl	8018324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018286:	f000 f8f7 	bl	8018478 <prvAddNewTaskToReadyList>
 801828a:	e001      	b.n	8018290 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801828c:	2300      	movs	r3, #0
 801828e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018290:	697b      	ldr	r3, [r7, #20]
	}
 8018292:	4618      	mov	r0, r3
 8018294:	3728      	adds	r7, #40	; 0x28
 8018296:	46bd      	mov	sp, r7
 8018298:	bd80      	pop	{r7, pc}

0801829a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801829a:	b580      	push	{r7, lr}
 801829c:	b08c      	sub	sp, #48	; 0x30
 801829e:	af04      	add	r7, sp, #16
 80182a0:	60f8      	str	r0, [r7, #12]
 80182a2:	60b9      	str	r1, [r7, #8]
 80182a4:	603b      	str	r3, [r7, #0]
 80182a6:	4613      	mov	r3, r2
 80182a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80182aa:	88fb      	ldrh	r3, [r7, #6]
 80182ac:	009b      	lsls	r3, r3, #2
 80182ae:	4618      	mov	r0, r3
 80182b0:	f001 fee2 	bl	801a078 <pvPortMalloc>
 80182b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80182b6:	697b      	ldr	r3, [r7, #20]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d00e      	beq.n	80182da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80182bc:	20c0      	movs	r0, #192	; 0xc0
 80182be:	f001 fedb 	bl	801a078 <pvPortMalloc>
 80182c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80182c4:	69fb      	ldr	r3, [r7, #28]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d003      	beq.n	80182d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80182ca:	69fb      	ldr	r3, [r7, #28]
 80182cc:	697a      	ldr	r2, [r7, #20]
 80182ce:	631a      	str	r2, [r3, #48]	; 0x30
 80182d0:	e005      	b.n	80182de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80182d2:	6978      	ldr	r0, [r7, #20]
 80182d4:	f001 ff9c 	bl	801a210 <vPortFree>
 80182d8:	e001      	b.n	80182de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80182da:	2300      	movs	r3, #0
 80182dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80182de:	69fb      	ldr	r3, [r7, #28]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d017      	beq.n	8018314 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80182e4:	69fb      	ldr	r3, [r7, #28]
 80182e6:	2200      	movs	r2, #0
 80182e8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80182ec:	88fa      	ldrh	r2, [r7, #6]
 80182ee:	2300      	movs	r3, #0
 80182f0:	9303      	str	r3, [sp, #12]
 80182f2:	69fb      	ldr	r3, [r7, #28]
 80182f4:	9302      	str	r3, [sp, #8]
 80182f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182f8:	9301      	str	r3, [sp, #4]
 80182fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182fc:	9300      	str	r3, [sp, #0]
 80182fe:	683b      	ldr	r3, [r7, #0]
 8018300:	68b9      	ldr	r1, [r7, #8]
 8018302:	68f8      	ldr	r0, [r7, #12]
 8018304:	f000 f80e 	bl	8018324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018308:	69f8      	ldr	r0, [r7, #28]
 801830a:	f000 f8b5 	bl	8018478 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801830e:	2301      	movs	r3, #1
 8018310:	61bb      	str	r3, [r7, #24]
 8018312:	e002      	b.n	801831a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018314:	f04f 33ff 	mov.w	r3, #4294967295
 8018318:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801831a:	69bb      	ldr	r3, [r7, #24]
	}
 801831c:	4618      	mov	r0, r3
 801831e:	3720      	adds	r7, #32
 8018320:	46bd      	mov	sp, r7
 8018322:	bd80      	pop	{r7, pc}

08018324 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b088      	sub	sp, #32
 8018328:	af00      	add	r7, sp, #0
 801832a:	60f8      	str	r0, [r7, #12]
 801832c:	60b9      	str	r1, [r7, #8]
 801832e:	607a      	str	r2, [r7, #4]
 8018330:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018334:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	009b      	lsls	r3, r3, #2
 801833a:	461a      	mov	r2, r3
 801833c:	21a5      	movs	r1, #165	; 0xa5
 801833e:	f002 fef8 	bl	801b132 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801834c:	3b01      	subs	r3, #1
 801834e:	009b      	lsls	r3, r3, #2
 8018350:	4413      	add	r3, r2
 8018352:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018354:	69bb      	ldr	r3, [r7, #24]
 8018356:	f023 0307 	bic.w	r3, r3, #7
 801835a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801835c:	69bb      	ldr	r3, [r7, #24]
 801835e:	f003 0307 	and.w	r3, r3, #7
 8018362:	2b00      	cmp	r3, #0
 8018364:	d00a      	beq.n	801837c <prvInitialiseNewTask+0x58>
	__asm volatile
 8018366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801836a:	f383 8811 	msr	BASEPRI, r3
 801836e:	f3bf 8f6f 	isb	sy
 8018372:	f3bf 8f4f 	dsb	sy
 8018376:	617b      	str	r3, [r7, #20]
}
 8018378:	bf00      	nop
 801837a:	e7fe      	b.n	801837a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801837c:	68bb      	ldr	r3, [r7, #8]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d01f      	beq.n	80183c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018382:	2300      	movs	r3, #0
 8018384:	61fb      	str	r3, [r7, #28]
 8018386:	e012      	b.n	80183ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018388:	68ba      	ldr	r2, [r7, #8]
 801838a:	69fb      	ldr	r3, [r7, #28]
 801838c:	4413      	add	r3, r2
 801838e:	7819      	ldrb	r1, [r3, #0]
 8018390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018392:	69fb      	ldr	r3, [r7, #28]
 8018394:	4413      	add	r3, r2
 8018396:	3334      	adds	r3, #52	; 0x34
 8018398:	460a      	mov	r2, r1
 801839a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801839c:	68ba      	ldr	r2, [r7, #8]
 801839e:	69fb      	ldr	r3, [r7, #28]
 80183a0:	4413      	add	r3, r2
 80183a2:	781b      	ldrb	r3, [r3, #0]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d006      	beq.n	80183b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80183a8:	69fb      	ldr	r3, [r7, #28]
 80183aa:	3301      	adds	r3, #1
 80183ac:	61fb      	str	r3, [r7, #28]
 80183ae:	69fb      	ldr	r3, [r7, #28]
 80183b0:	2b0f      	cmp	r3, #15
 80183b2:	d9e9      	bls.n	8018388 <prvInitialiseNewTask+0x64>
 80183b4:	e000      	b.n	80183b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80183b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80183b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ba:	2200      	movs	r2, #0
 80183bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80183c0:	e003      	b.n	80183ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80183c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c4:	2200      	movs	r2, #0
 80183c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80183ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183cc:	2b0e      	cmp	r3, #14
 80183ce:	d901      	bls.n	80183d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80183d0:	230e      	movs	r3, #14
 80183d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80183d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80183da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80183e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e2:	2200      	movs	r2, #0
 80183e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80183e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e8:	3304      	adds	r3, #4
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7ff f8b2 	bl	8017554 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80183f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183f2:	3318      	adds	r3, #24
 80183f4:	4618      	mov	r0, r3
 80183f6:	f7ff f8ad 	bl	8017554 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80183fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018402:	f1c3 020f 	rsb	r2, r3, #15
 8018406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018408:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801840c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801840e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8018410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018412:	2200      	movs	r2, #0
 8018414:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018418:	2200      	movs	r2, #0
 801841a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018420:	2200      	movs	r2, #0
 8018422:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8018426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018428:	3358      	adds	r3, #88	; 0x58
 801842a:	2260      	movs	r2, #96	; 0x60
 801842c:	2100      	movs	r1, #0
 801842e:	4618      	mov	r0, r3
 8018430:	f002 fe7f 	bl	801b132 <memset>
 8018434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018436:	4a0d      	ldr	r2, [pc, #52]	; (801846c <prvInitialiseNewTask+0x148>)
 8018438:	65da      	str	r2, [r3, #92]	; 0x5c
 801843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801843c:	4a0c      	ldr	r2, [pc, #48]	; (8018470 <prvInitialiseNewTask+0x14c>)
 801843e:	661a      	str	r2, [r3, #96]	; 0x60
 8018440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018442:	4a0c      	ldr	r2, [pc, #48]	; (8018474 <prvInitialiseNewTask+0x150>)
 8018444:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018446:	683a      	ldr	r2, [r7, #0]
 8018448:	68f9      	ldr	r1, [r7, #12]
 801844a:	69b8      	ldr	r0, [r7, #24]
 801844c:	f001 fbc4 	bl	8019bd8 <pxPortInitialiseStack>
 8018450:	4602      	mov	r2, r0
 8018452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018458:	2b00      	cmp	r3, #0
 801845a:	d002      	beq.n	8018462 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801845e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018462:	bf00      	nop
 8018464:	3720      	adds	r7, #32
 8018466:	46bd      	mov	sp, r7
 8018468:	bd80      	pop	{r7, pc}
 801846a:	bf00      	nop
 801846c:	08021e64 	.word	0x08021e64
 8018470:	08021e84 	.word	0x08021e84
 8018474:	08021e44 	.word	0x08021e44

08018478 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b082      	sub	sp, #8
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018480:	f001 fcd8 	bl	8019e34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018484:	4b2c      	ldr	r3, [pc, #176]	; (8018538 <prvAddNewTaskToReadyList+0xc0>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	3301      	adds	r3, #1
 801848a:	4a2b      	ldr	r2, [pc, #172]	; (8018538 <prvAddNewTaskToReadyList+0xc0>)
 801848c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801848e:	4b2b      	ldr	r3, [pc, #172]	; (801853c <prvAddNewTaskToReadyList+0xc4>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d109      	bne.n	80184aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018496:	4a29      	ldr	r2, [pc, #164]	; (801853c <prvAddNewTaskToReadyList+0xc4>)
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801849c:	4b26      	ldr	r3, [pc, #152]	; (8018538 <prvAddNewTaskToReadyList+0xc0>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	2b01      	cmp	r3, #1
 80184a2:	d110      	bne.n	80184c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80184a4:	f000 fd66 	bl	8018f74 <prvInitialiseTaskLists>
 80184a8:	e00d      	b.n	80184c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80184aa:	4b25      	ldr	r3, [pc, #148]	; (8018540 <prvAddNewTaskToReadyList+0xc8>)
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d109      	bne.n	80184c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80184b2:	4b22      	ldr	r3, [pc, #136]	; (801853c <prvAddNewTaskToReadyList+0xc4>)
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184bc:	429a      	cmp	r2, r3
 80184be:	d802      	bhi.n	80184c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80184c0:	4a1e      	ldr	r2, [pc, #120]	; (801853c <prvAddNewTaskToReadyList+0xc4>)
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80184c6:	4b1f      	ldr	r3, [pc, #124]	; (8018544 <prvAddNewTaskToReadyList+0xcc>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	3301      	adds	r3, #1
 80184cc:	4a1d      	ldr	r2, [pc, #116]	; (8018544 <prvAddNewTaskToReadyList+0xcc>)
 80184ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80184d0:	4b1c      	ldr	r3, [pc, #112]	; (8018544 <prvAddNewTaskToReadyList+0xcc>)
 80184d2:	681a      	ldr	r2, [r3, #0]
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184dc:	2201      	movs	r2, #1
 80184de:	409a      	lsls	r2, r3
 80184e0:	4b19      	ldr	r3, [pc, #100]	; (8018548 <prvAddNewTaskToReadyList+0xd0>)
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	4313      	orrs	r3, r2
 80184e6:	4a18      	ldr	r2, [pc, #96]	; (8018548 <prvAddNewTaskToReadyList+0xd0>)
 80184e8:	6013      	str	r3, [r2, #0]
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184ee:	4613      	mov	r3, r2
 80184f0:	009b      	lsls	r3, r3, #2
 80184f2:	4413      	add	r3, r2
 80184f4:	009b      	lsls	r3, r3, #2
 80184f6:	4a15      	ldr	r2, [pc, #84]	; (801854c <prvAddNewTaskToReadyList+0xd4>)
 80184f8:	441a      	add	r2, r3
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	3304      	adds	r3, #4
 80184fe:	4619      	mov	r1, r3
 8018500:	4610      	mov	r0, r2
 8018502:	f7ff f834 	bl	801756e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018506:	f001 fcc5 	bl	8019e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801850a:	4b0d      	ldr	r3, [pc, #52]	; (8018540 <prvAddNewTaskToReadyList+0xc8>)
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d00e      	beq.n	8018530 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018512:	4b0a      	ldr	r3, [pc, #40]	; (801853c <prvAddNewTaskToReadyList+0xc4>)
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801851c:	429a      	cmp	r2, r3
 801851e:	d207      	bcs.n	8018530 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018520:	4b0b      	ldr	r3, [pc, #44]	; (8018550 <prvAddNewTaskToReadyList+0xd8>)
 8018522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018526:	601a      	str	r2, [r3, #0]
 8018528:	f3bf 8f4f 	dsb	sy
 801852c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018530:	bf00      	nop
 8018532:	3708      	adds	r7, #8
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}
 8018538:	20002fc0 	.word	0x20002fc0
 801853c:	20002e20 	.word	0x20002e20
 8018540:	20002fcc 	.word	0x20002fcc
 8018544:	20002fdc 	.word	0x20002fdc
 8018548:	20002fc8 	.word	0x20002fc8
 801854c:	20002e24 	.word	0x20002e24
 8018550:	e000ed04 	.word	0xe000ed04

08018554 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8018554:	b580      	push	{r7, lr}
 8018556:	b08a      	sub	sp, #40	; 0x28
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801855e:	2300      	movs	r3, #0
 8018560:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d10a      	bne.n	801857e <vTaskDelayUntil+0x2a>
	__asm volatile
 8018568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801856c:	f383 8811 	msr	BASEPRI, r3
 8018570:	f3bf 8f6f 	isb	sy
 8018574:	f3bf 8f4f 	dsb	sy
 8018578:	617b      	str	r3, [r7, #20]
}
 801857a:	bf00      	nop
 801857c:	e7fe      	b.n	801857c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d10a      	bne.n	801859a <vTaskDelayUntil+0x46>
	__asm volatile
 8018584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018588:	f383 8811 	msr	BASEPRI, r3
 801858c:	f3bf 8f6f 	isb	sy
 8018590:	f3bf 8f4f 	dsb	sy
 8018594:	613b      	str	r3, [r7, #16]
}
 8018596:	bf00      	nop
 8018598:	e7fe      	b.n	8018598 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801859a:	4b2a      	ldr	r3, [pc, #168]	; (8018644 <vTaskDelayUntil+0xf0>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d00a      	beq.n	80185b8 <vTaskDelayUntil+0x64>
	__asm volatile
 80185a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185a6:	f383 8811 	msr	BASEPRI, r3
 80185aa:	f3bf 8f6f 	isb	sy
 80185ae:	f3bf 8f4f 	dsb	sy
 80185b2:	60fb      	str	r3, [r7, #12]
}
 80185b4:	bf00      	nop
 80185b6:	e7fe      	b.n	80185b6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80185b8:	f000 f8f0 	bl	801879c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80185bc:	4b22      	ldr	r3, [pc, #136]	; (8018648 <vTaskDelayUntil+0xf4>)
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	683a      	ldr	r2, [r7, #0]
 80185c8:	4413      	add	r3, r2
 80185ca:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	6a3a      	ldr	r2, [r7, #32]
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d20b      	bcs.n	80185ee <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	69fa      	ldr	r2, [r7, #28]
 80185dc:	429a      	cmp	r2, r3
 80185de:	d211      	bcs.n	8018604 <vTaskDelayUntil+0xb0>
 80185e0:	69fa      	ldr	r2, [r7, #28]
 80185e2:	6a3b      	ldr	r3, [r7, #32]
 80185e4:	429a      	cmp	r2, r3
 80185e6:	d90d      	bls.n	8018604 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80185e8:	2301      	movs	r3, #1
 80185ea:	627b      	str	r3, [r7, #36]	; 0x24
 80185ec:	e00a      	b.n	8018604 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	69fa      	ldr	r2, [r7, #28]
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d303      	bcc.n	8018600 <vTaskDelayUntil+0xac>
 80185f8:	69fa      	ldr	r2, [r7, #28]
 80185fa:	6a3b      	ldr	r3, [r7, #32]
 80185fc:	429a      	cmp	r2, r3
 80185fe:	d901      	bls.n	8018604 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8018600:	2301      	movs	r3, #1
 8018602:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	69fa      	ldr	r2, [r7, #28]
 8018608:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801860c:	2b00      	cmp	r3, #0
 801860e:	d006      	beq.n	801861e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8018610:	69fa      	ldr	r2, [r7, #28]
 8018612:	6a3b      	ldr	r3, [r7, #32]
 8018614:	1ad3      	subs	r3, r2, r3
 8018616:	2100      	movs	r1, #0
 8018618:	4618      	mov	r0, r3
 801861a:	f000 ff09 	bl	8019430 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801861e:	f000 f8cb 	bl	80187b8 <xTaskResumeAll>
 8018622:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018624:	69bb      	ldr	r3, [r7, #24]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d107      	bne.n	801863a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801862a:	4b08      	ldr	r3, [pc, #32]	; (801864c <vTaskDelayUntil+0xf8>)
 801862c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018630:	601a      	str	r2, [r3, #0]
 8018632:	f3bf 8f4f 	dsb	sy
 8018636:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801863a:	bf00      	nop
 801863c:	3728      	adds	r7, #40	; 0x28
 801863e:	46bd      	mov	sp, r7
 8018640:	bd80      	pop	{r7, pc}
 8018642:	bf00      	nop
 8018644:	20002fe8 	.word	0x20002fe8
 8018648:	20002fc4 	.word	0x20002fc4
 801864c:	e000ed04 	.word	0xe000ed04

08018650 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018650:	b580      	push	{r7, lr}
 8018652:	b084      	sub	sp, #16
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018658:	2300      	movs	r3, #0
 801865a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d017      	beq.n	8018692 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018662:	4b13      	ldr	r3, [pc, #76]	; (80186b0 <vTaskDelay+0x60>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d00a      	beq.n	8018680 <vTaskDelay+0x30>
	__asm volatile
 801866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801866e:	f383 8811 	msr	BASEPRI, r3
 8018672:	f3bf 8f6f 	isb	sy
 8018676:	f3bf 8f4f 	dsb	sy
 801867a:	60bb      	str	r3, [r7, #8]
}
 801867c:	bf00      	nop
 801867e:	e7fe      	b.n	801867e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018680:	f000 f88c 	bl	801879c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018684:	2100      	movs	r1, #0
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f000 fed2 	bl	8019430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801868c:	f000 f894 	bl	80187b8 <xTaskResumeAll>
 8018690:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d107      	bne.n	80186a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018698:	4b06      	ldr	r3, [pc, #24]	; (80186b4 <vTaskDelay+0x64>)
 801869a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801869e:	601a      	str	r2, [r3, #0]
 80186a0:	f3bf 8f4f 	dsb	sy
 80186a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80186a8:	bf00      	nop
 80186aa:	3710      	adds	r7, #16
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}
 80186b0:	20002fe8 	.word	0x20002fe8
 80186b4:	e000ed04 	.word	0xe000ed04

080186b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b08a      	sub	sp, #40	; 0x28
 80186bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80186be:	2300      	movs	r3, #0
 80186c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80186c2:	2300      	movs	r3, #0
 80186c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80186c6:	463a      	mov	r2, r7
 80186c8:	1d39      	adds	r1, r7, #4
 80186ca:	f107 0308 	add.w	r3, r7, #8
 80186ce:	4618      	mov	r0, r3
 80186d0:	f7ea fd86 	bl	80031e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80186d4:	6839      	ldr	r1, [r7, #0]
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	68ba      	ldr	r2, [r7, #8]
 80186da:	9202      	str	r2, [sp, #8]
 80186dc:	9301      	str	r3, [sp, #4]
 80186de:	2300      	movs	r3, #0
 80186e0:	9300      	str	r3, [sp, #0]
 80186e2:	2300      	movs	r3, #0
 80186e4:	460a      	mov	r2, r1
 80186e6:	4925      	ldr	r1, [pc, #148]	; (801877c <vTaskStartScheduler+0xc4>)
 80186e8:	4825      	ldr	r0, [pc, #148]	; (8018780 <vTaskStartScheduler+0xc8>)
 80186ea:	f7ff fd79 	bl	80181e0 <xTaskCreateStatic>
 80186ee:	4603      	mov	r3, r0
 80186f0:	4a24      	ldr	r2, [pc, #144]	; (8018784 <vTaskStartScheduler+0xcc>)
 80186f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80186f4:	4b23      	ldr	r3, [pc, #140]	; (8018784 <vTaskStartScheduler+0xcc>)
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d002      	beq.n	8018702 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80186fc:	2301      	movs	r3, #1
 80186fe:	617b      	str	r3, [r7, #20]
 8018700:	e001      	b.n	8018706 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018702:	2300      	movs	r3, #0
 8018704:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018706:	697b      	ldr	r3, [r7, #20]
 8018708:	2b01      	cmp	r3, #1
 801870a:	d102      	bne.n	8018712 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801870c:	f000 fef6 	bl	80194fc <xTimerCreateTimerTask>
 8018710:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018712:	697b      	ldr	r3, [r7, #20]
 8018714:	2b01      	cmp	r3, #1
 8018716:	d11d      	bne.n	8018754 <vTaskStartScheduler+0x9c>
	__asm volatile
 8018718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801871c:	f383 8811 	msr	BASEPRI, r3
 8018720:	f3bf 8f6f 	isb	sy
 8018724:	f3bf 8f4f 	dsb	sy
 8018728:	613b      	str	r3, [r7, #16]
}
 801872a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801872c:	4b16      	ldr	r3, [pc, #88]	; (8018788 <vTaskStartScheduler+0xd0>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	3358      	adds	r3, #88	; 0x58
 8018732:	4a16      	ldr	r2, [pc, #88]	; (801878c <vTaskStartScheduler+0xd4>)
 8018734:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018736:	4b16      	ldr	r3, [pc, #88]	; (8018790 <vTaskStartScheduler+0xd8>)
 8018738:	f04f 32ff 	mov.w	r2, #4294967295
 801873c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801873e:	4b15      	ldr	r3, [pc, #84]	; (8018794 <vTaskStartScheduler+0xdc>)
 8018740:	2201      	movs	r2, #1
 8018742:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018744:	4b14      	ldr	r3, [pc, #80]	; (8018798 <vTaskStartScheduler+0xe0>)
 8018746:	2200      	movs	r2, #0
 8018748:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801874a:	f7ea fd2f 	bl	80031ac <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801874e:	f001 facf 	bl	8019cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018752:	e00e      	b.n	8018772 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018754:	697b      	ldr	r3, [r7, #20]
 8018756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801875a:	d10a      	bne.n	8018772 <vTaskStartScheduler+0xba>
	__asm volatile
 801875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018760:	f383 8811 	msr	BASEPRI, r3
 8018764:	f3bf 8f6f 	isb	sy
 8018768:	f3bf 8f4f 	dsb	sy
 801876c:	60fb      	str	r3, [r7, #12]
}
 801876e:	bf00      	nop
 8018770:	e7fe      	b.n	8018770 <vTaskStartScheduler+0xb8>
}
 8018772:	bf00      	nop
 8018774:	3718      	adds	r7, #24
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}
 801877a:	bf00      	nop
 801877c:	080217ac 	.word	0x080217ac
 8018780:	08018f45 	.word	0x08018f45
 8018784:	20002fe4 	.word	0x20002fe4
 8018788:	20002e20 	.word	0x20002e20
 801878c:	2000010c 	.word	0x2000010c
 8018790:	20002fe0 	.word	0x20002fe0
 8018794:	20002fcc 	.word	0x20002fcc
 8018798:	20002fc4 	.word	0x20002fc4

0801879c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801879c:	b480      	push	{r7}
 801879e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80187a0:	4b04      	ldr	r3, [pc, #16]	; (80187b4 <vTaskSuspendAll+0x18>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	3301      	adds	r3, #1
 80187a6:	4a03      	ldr	r2, [pc, #12]	; (80187b4 <vTaskSuspendAll+0x18>)
 80187a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80187aa:	bf00      	nop
 80187ac:	46bd      	mov	sp, r7
 80187ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b2:	4770      	bx	lr
 80187b4:	20002fe8 	.word	0x20002fe8

080187b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b084      	sub	sp, #16
 80187bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80187be:	2300      	movs	r3, #0
 80187c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80187c2:	2300      	movs	r3, #0
 80187c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80187c6:	4b41      	ldr	r3, [pc, #260]	; (80188cc <xTaskResumeAll+0x114>)
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d10a      	bne.n	80187e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80187ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187d2:	f383 8811 	msr	BASEPRI, r3
 80187d6:	f3bf 8f6f 	isb	sy
 80187da:	f3bf 8f4f 	dsb	sy
 80187de:	603b      	str	r3, [r7, #0]
}
 80187e0:	bf00      	nop
 80187e2:	e7fe      	b.n	80187e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80187e4:	f001 fb26 	bl	8019e34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80187e8:	4b38      	ldr	r3, [pc, #224]	; (80188cc <xTaskResumeAll+0x114>)
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	3b01      	subs	r3, #1
 80187ee:	4a37      	ldr	r2, [pc, #220]	; (80188cc <xTaskResumeAll+0x114>)
 80187f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80187f2:	4b36      	ldr	r3, [pc, #216]	; (80188cc <xTaskResumeAll+0x114>)
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d161      	bne.n	80188be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80187fa:	4b35      	ldr	r3, [pc, #212]	; (80188d0 <xTaskResumeAll+0x118>)
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d05d      	beq.n	80188be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018802:	e02e      	b.n	8018862 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018804:	4b33      	ldr	r3, [pc, #204]	; (80188d4 <xTaskResumeAll+0x11c>)
 8018806:	68db      	ldr	r3, [r3, #12]
 8018808:	68db      	ldr	r3, [r3, #12]
 801880a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	3318      	adds	r3, #24
 8018810:	4618      	mov	r0, r3
 8018812:	f7fe ff09 	bl	8017628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	3304      	adds	r3, #4
 801881a:	4618      	mov	r0, r3
 801881c:	f7fe ff04 	bl	8017628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018824:	2201      	movs	r2, #1
 8018826:	409a      	lsls	r2, r3
 8018828:	4b2b      	ldr	r3, [pc, #172]	; (80188d8 <xTaskResumeAll+0x120>)
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	4313      	orrs	r3, r2
 801882e:	4a2a      	ldr	r2, [pc, #168]	; (80188d8 <xTaskResumeAll+0x120>)
 8018830:	6013      	str	r3, [r2, #0]
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018836:	4613      	mov	r3, r2
 8018838:	009b      	lsls	r3, r3, #2
 801883a:	4413      	add	r3, r2
 801883c:	009b      	lsls	r3, r3, #2
 801883e:	4a27      	ldr	r2, [pc, #156]	; (80188dc <xTaskResumeAll+0x124>)
 8018840:	441a      	add	r2, r3
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	3304      	adds	r3, #4
 8018846:	4619      	mov	r1, r3
 8018848:	4610      	mov	r0, r2
 801884a:	f7fe fe90 	bl	801756e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018852:	4b23      	ldr	r3, [pc, #140]	; (80188e0 <xTaskResumeAll+0x128>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018858:	429a      	cmp	r2, r3
 801885a:	d302      	bcc.n	8018862 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801885c:	4b21      	ldr	r3, [pc, #132]	; (80188e4 <xTaskResumeAll+0x12c>)
 801885e:	2201      	movs	r2, #1
 8018860:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018862:	4b1c      	ldr	r3, [pc, #112]	; (80188d4 <xTaskResumeAll+0x11c>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d1cc      	bne.n	8018804 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d001      	beq.n	8018874 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018870:	f000 fc22 	bl	80190b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018874:	4b1c      	ldr	r3, [pc, #112]	; (80188e8 <xTaskResumeAll+0x130>)
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d010      	beq.n	80188a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018880:	f000 f846 	bl	8018910 <xTaskIncrementTick>
 8018884:	4603      	mov	r3, r0
 8018886:	2b00      	cmp	r3, #0
 8018888:	d002      	beq.n	8018890 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801888a:	4b16      	ldr	r3, [pc, #88]	; (80188e4 <xTaskResumeAll+0x12c>)
 801888c:	2201      	movs	r2, #1
 801888e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	3b01      	subs	r3, #1
 8018894:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d1f1      	bne.n	8018880 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801889c:	4b12      	ldr	r3, [pc, #72]	; (80188e8 <xTaskResumeAll+0x130>)
 801889e:	2200      	movs	r2, #0
 80188a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80188a2:	4b10      	ldr	r3, [pc, #64]	; (80188e4 <xTaskResumeAll+0x12c>)
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d009      	beq.n	80188be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80188aa:	2301      	movs	r3, #1
 80188ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80188ae:	4b0f      	ldr	r3, [pc, #60]	; (80188ec <xTaskResumeAll+0x134>)
 80188b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80188b4:	601a      	str	r2, [r3, #0]
 80188b6:	f3bf 8f4f 	dsb	sy
 80188ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80188be:	f001 fae9 	bl	8019e94 <vPortExitCritical>

	return xAlreadyYielded;
 80188c2:	68bb      	ldr	r3, [r7, #8]
}
 80188c4:	4618      	mov	r0, r3
 80188c6:	3710      	adds	r7, #16
 80188c8:	46bd      	mov	sp, r7
 80188ca:	bd80      	pop	{r7, pc}
 80188cc:	20002fe8 	.word	0x20002fe8
 80188d0:	20002fc0 	.word	0x20002fc0
 80188d4:	20002f80 	.word	0x20002f80
 80188d8:	20002fc8 	.word	0x20002fc8
 80188dc:	20002e24 	.word	0x20002e24
 80188e0:	20002e20 	.word	0x20002e20
 80188e4:	20002fd4 	.word	0x20002fd4
 80188e8:	20002fd0 	.word	0x20002fd0
 80188ec:	e000ed04 	.word	0xe000ed04

080188f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80188f0:	b480      	push	{r7}
 80188f2:	b083      	sub	sp, #12
 80188f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80188f6:	4b05      	ldr	r3, [pc, #20]	; (801890c <xTaskGetTickCount+0x1c>)
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80188fc:	687b      	ldr	r3, [r7, #4]
}
 80188fe:	4618      	mov	r0, r3
 8018900:	370c      	adds	r7, #12
 8018902:	46bd      	mov	sp, r7
 8018904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018908:	4770      	bx	lr
 801890a:	bf00      	nop
 801890c:	20002fc4 	.word	0x20002fc4

08018910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b086      	sub	sp, #24
 8018914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018916:	2300      	movs	r3, #0
 8018918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801891a:	4b4e      	ldr	r3, [pc, #312]	; (8018a54 <xTaskIncrementTick+0x144>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	2b00      	cmp	r3, #0
 8018920:	f040 808e 	bne.w	8018a40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018924:	4b4c      	ldr	r3, [pc, #304]	; (8018a58 <xTaskIncrementTick+0x148>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	3301      	adds	r3, #1
 801892a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801892c:	4a4a      	ldr	r2, [pc, #296]	; (8018a58 <xTaskIncrementTick+0x148>)
 801892e:	693b      	ldr	r3, [r7, #16]
 8018930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018932:	693b      	ldr	r3, [r7, #16]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d120      	bne.n	801897a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018938:	4b48      	ldr	r3, [pc, #288]	; (8018a5c <xTaskIncrementTick+0x14c>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d00a      	beq.n	8018958 <xTaskIncrementTick+0x48>
	__asm volatile
 8018942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018946:	f383 8811 	msr	BASEPRI, r3
 801894a:	f3bf 8f6f 	isb	sy
 801894e:	f3bf 8f4f 	dsb	sy
 8018952:	603b      	str	r3, [r7, #0]
}
 8018954:	bf00      	nop
 8018956:	e7fe      	b.n	8018956 <xTaskIncrementTick+0x46>
 8018958:	4b40      	ldr	r3, [pc, #256]	; (8018a5c <xTaskIncrementTick+0x14c>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	60fb      	str	r3, [r7, #12]
 801895e:	4b40      	ldr	r3, [pc, #256]	; (8018a60 <xTaskIncrementTick+0x150>)
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	4a3e      	ldr	r2, [pc, #248]	; (8018a5c <xTaskIncrementTick+0x14c>)
 8018964:	6013      	str	r3, [r2, #0]
 8018966:	4a3e      	ldr	r2, [pc, #248]	; (8018a60 <xTaskIncrementTick+0x150>)
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	6013      	str	r3, [r2, #0]
 801896c:	4b3d      	ldr	r3, [pc, #244]	; (8018a64 <xTaskIncrementTick+0x154>)
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	3301      	adds	r3, #1
 8018972:	4a3c      	ldr	r2, [pc, #240]	; (8018a64 <xTaskIncrementTick+0x154>)
 8018974:	6013      	str	r3, [r2, #0]
 8018976:	f000 fb9f 	bl	80190b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801897a:	4b3b      	ldr	r3, [pc, #236]	; (8018a68 <xTaskIncrementTick+0x158>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	693a      	ldr	r2, [r7, #16]
 8018980:	429a      	cmp	r2, r3
 8018982:	d348      	bcc.n	8018a16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018984:	4b35      	ldr	r3, [pc, #212]	; (8018a5c <xTaskIncrementTick+0x14c>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d104      	bne.n	8018998 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801898e:	4b36      	ldr	r3, [pc, #216]	; (8018a68 <xTaskIncrementTick+0x158>)
 8018990:	f04f 32ff 	mov.w	r2, #4294967295
 8018994:	601a      	str	r2, [r3, #0]
					break;
 8018996:	e03e      	b.n	8018a16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018998:	4b30      	ldr	r3, [pc, #192]	; (8018a5c <xTaskIncrementTick+0x14c>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	68db      	ldr	r3, [r3, #12]
 801899e:	68db      	ldr	r3, [r3, #12]
 80189a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80189a2:	68bb      	ldr	r3, [r7, #8]
 80189a4:	685b      	ldr	r3, [r3, #4]
 80189a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80189a8:	693a      	ldr	r2, [r7, #16]
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	429a      	cmp	r2, r3
 80189ae:	d203      	bcs.n	80189b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80189b0:	4a2d      	ldr	r2, [pc, #180]	; (8018a68 <xTaskIncrementTick+0x158>)
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80189b6:	e02e      	b.n	8018a16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	3304      	adds	r3, #4
 80189bc:	4618      	mov	r0, r3
 80189be:	f7fe fe33 	bl	8017628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80189c2:	68bb      	ldr	r3, [r7, #8]
 80189c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d004      	beq.n	80189d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80189ca:	68bb      	ldr	r3, [r7, #8]
 80189cc:	3318      	adds	r3, #24
 80189ce:	4618      	mov	r0, r3
 80189d0:	f7fe fe2a 	bl	8017628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80189d4:	68bb      	ldr	r3, [r7, #8]
 80189d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189d8:	2201      	movs	r2, #1
 80189da:	409a      	lsls	r2, r3
 80189dc:	4b23      	ldr	r3, [pc, #140]	; (8018a6c <xTaskIncrementTick+0x15c>)
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	4313      	orrs	r3, r2
 80189e2:	4a22      	ldr	r2, [pc, #136]	; (8018a6c <xTaskIncrementTick+0x15c>)
 80189e4:	6013      	str	r3, [r2, #0]
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189ea:	4613      	mov	r3, r2
 80189ec:	009b      	lsls	r3, r3, #2
 80189ee:	4413      	add	r3, r2
 80189f0:	009b      	lsls	r3, r3, #2
 80189f2:	4a1f      	ldr	r2, [pc, #124]	; (8018a70 <xTaskIncrementTick+0x160>)
 80189f4:	441a      	add	r2, r3
 80189f6:	68bb      	ldr	r3, [r7, #8]
 80189f8:	3304      	adds	r3, #4
 80189fa:	4619      	mov	r1, r3
 80189fc:	4610      	mov	r0, r2
 80189fe:	f7fe fdb6 	bl	801756e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018a02:	68bb      	ldr	r3, [r7, #8]
 8018a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a06:	4b1b      	ldr	r3, [pc, #108]	; (8018a74 <xTaskIncrementTick+0x164>)
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d3b9      	bcc.n	8018984 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018a10:	2301      	movs	r3, #1
 8018a12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018a14:	e7b6      	b.n	8018984 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018a16:	4b17      	ldr	r3, [pc, #92]	; (8018a74 <xTaskIncrementTick+0x164>)
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a1c:	4914      	ldr	r1, [pc, #80]	; (8018a70 <xTaskIncrementTick+0x160>)
 8018a1e:	4613      	mov	r3, r2
 8018a20:	009b      	lsls	r3, r3, #2
 8018a22:	4413      	add	r3, r2
 8018a24:	009b      	lsls	r3, r3, #2
 8018a26:	440b      	add	r3, r1
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	2b01      	cmp	r3, #1
 8018a2c:	d901      	bls.n	8018a32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8018a2e:	2301      	movs	r3, #1
 8018a30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018a32:	4b11      	ldr	r3, [pc, #68]	; (8018a78 <xTaskIncrementTick+0x168>)
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d007      	beq.n	8018a4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	617b      	str	r3, [r7, #20]
 8018a3e:	e004      	b.n	8018a4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018a40:	4b0e      	ldr	r3, [pc, #56]	; (8018a7c <xTaskIncrementTick+0x16c>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	3301      	adds	r3, #1
 8018a46:	4a0d      	ldr	r2, [pc, #52]	; (8018a7c <xTaskIncrementTick+0x16c>)
 8018a48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018a4a:	697b      	ldr	r3, [r7, #20]
}
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	3718      	adds	r7, #24
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}
 8018a54:	20002fe8 	.word	0x20002fe8
 8018a58:	20002fc4 	.word	0x20002fc4
 8018a5c:	20002f78 	.word	0x20002f78
 8018a60:	20002f7c 	.word	0x20002f7c
 8018a64:	20002fd8 	.word	0x20002fd8
 8018a68:	20002fe0 	.word	0x20002fe0
 8018a6c:	20002fc8 	.word	0x20002fc8
 8018a70:	20002e24 	.word	0x20002e24
 8018a74:	20002e20 	.word	0x20002e20
 8018a78:	20002fd4 	.word	0x20002fd4
 8018a7c:	20002fd0 	.word	0x20002fd0

08018a80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b086      	sub	sp, #24
 8018a84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018a86:	4b3d      	ldr	r3, [pc, #244]	; (8018b7c <vTaskSwitchContext+0xfc>)
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d003      	beq.n	8018a96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018a8e:	4b3c      	ldr	r3, [pc, #240]	; (8018b80 <vTaskSwitchContext+0x100>)
 8018a90:	2201      	movs	r2, #1
 8018a92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018a94:	e06e      	b.n	8018b74 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8018a96:	4b3a      	ldr	r3, [pc, #232]	; (8018b80 <vTaskSwitchContext+0x100>)
 8018a98:	2200      	movs	r2, #0
 8018a9a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8018a9c:	f7ea fb8d 	bl	80031ba <getRunTimeCounterValue>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	4a38      	ldr	r2, [pc, #224]	; (8018b84 <vTaskSwitchContext+0x104>)
 8018aa4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8018aa6:	4b37      	ldr	r3, [pc, #220]	; (8018b84 <vTaskSwitchContext+0x104>)
 8018aa8:	681a      	ldr	r2, [r3, #0]
 8018aaa:	4b37      	ldr	r3, [pc, #220]	; (8018b88 <vTaskSwitchContext+0x108>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	429a      	cmp	r2, r3
 8018ab0:	d909      	bls.n	8018ac6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8018ab2:	4b36      	ldr	r3, [pc, #216]	; (8018b8c <vTaskSwitchContext+0x10c>)
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8018ab8:	4a32      	ldr	r2, [pc, #200]	; (8018b84 <vTaskSwitchContext+0x104>)
 8018aba:	6810      	ldr	r0, [r2, #0]
 8018abc:	4a32      	ldr	r2, [pc, #200]	; (8018b88 <vTaskSwitchContext+0x108>)
 8018abe:	6812      	ldr	r2, [r2, #0]
 8018ac0:	1a82      	subs	r2, r0, r2
 8018ac2:	440a      	add	r2, r1
 8018ac4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8018ac6:	4b2f      	ldr	r3, [pc, #188]	; (8018b84 <vTaskSwitchContext+0x104>)
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	4a2f      	ldr	r2, [pc, #188]	; (8018b88 <vTaskSwitchContext+0x108>)
 8018acc:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018ace:	4b2f      	ldr	r3, [pc, #188]	; (8018b8c <vTaskSwitchContext+0x10c>)
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	681a      	ldr	r2, [r3, #0]
 8018ad4:	4b2d      	ldr	r3, [pc, #180]	; (8018b8c <vTaskSwitchContext+0x10c>)
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ada:	429a      	cmp	r2, r3
 8018adc:	d808      	bhi.n	8018af0 <vTaskSwitchContext+0x70>
 8018ade:	4b2b      	ldr	r3, [pc, #172]	; (8018b8c <vTaskSwitchContext+0x10c>)
 8018ae0:	681a      	ldr	r2, [r3, #0]
 8018ae2:	4b2a      	ldr	r3, [pc, #168]	; (8018b8c <vTaskSwitchContext+0x10c>)
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	3334      	adds	r3, #52	; 0x34
 8018ae8:	4619      	mov	r1, r3
 8018aea:	4610      	mov	r0, r2
 8018aec:	f7ea fb6d 	bl	80031ca <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018af0:	4b27      	ldr	r3, [pc, #156]	; (8018b90 <vTaskSwitchContext+0x110>)
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	fab3 f383 	clz	r3, r3
 8018afc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018afe:	7afb      	ldrb	r3, [r7, #11]
 8018b00:	f1c3 031f 	rsb	r3, r3, #31
 8018b04:	617b      	str	r3, [r7, #20]
 8018b06:	4923      	ldr	r1, [pc, #140]	; (8018b94 <vTaskSwitchContext+0x114>)
 8018b08:	697a      	ldr	r2, [r7, #20]
 8018b0a:	4613      	mov	r3, r2
 8018b0c:	009b      	lsls	r3, r3, #2
 8018b0e:	4413      	add	r3, r2
 8018b10:	009b      	lsls	r3, r3, #2
 8018b12:	440b      	add	r3, r1
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d10a      	bne.n	8018b30 <vTaskSwitchContext+0xb0>
	__asm volatile
 8018b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b1e:	f383 8811 	msr	BASEPRI, r3
 8018b22:	f3bf 8f6f 	isb	sy
 8018b26:	f3bf 8f4f 	dsb	sy
 8018b2a:	607b      	str	r3, [r7, #4]
}
 8018b2c:	bf00      	nop
 8018b2e:	e7fe      	b.n	8018b2e <vTaskSwitchContext+0xae>
 8018b30:	697a      	ldr	r2, [r7, #20]
 8018b32:	4613      	mov	r3, r2
 8018b34:	009b      	lsls	r3, r3, #2
 8018b36:	4413      	add	r3, r2
 8018b38:	009b      	lsls	r3, r3, #2
 8018b3a:	4a16      	ldr	r2, [pc, #88]	; (8018b94 <vTaskSwitchContext+0x114>)
 8018b3c:	4413      	add	r3, r2
 8018b3e:	613b      	str	r3, [r7, #16]
 8018b40:	693b      	ldr	r3, [r7, #16]
 8018b42:	685b      	ldr	r3, [r3, #4]
 8018b44:	685a      	ldr	r2, [r3, #4]
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	605a      	str	r2, [r3, #4]
 8018b4a:	693b      	ldr	r3, [r7, #16]
 8018b4c:	685a      	ldr	r2, [r3, #4]
 8018b4e:	693b      	ldr	r3, [r7, #16]
 8018b50:	3308      	adds	r3, #8
 8018b52:	429a      	cmp	r2, r3
 8018b54:	d104      	bne.n	8018b60 <vTaskSwitchContext+0xe0>
 8018b56:	693b      	ldr	r3, [r7, #16]
 8018b58:	685b      	ldr	r3, [r3, #4]
 8018b5a:	685a      	ldr	r2, [r3, #4]
 8018b5c:	693b      	ldr	r3, [r7, #16]
 8018b5e:	605a      	str	r2, [r3, #4]
 8018b60:	693b      	ldr	r3, [r7, #16]
 8018b62:	685b      	ldr	r3, [r3, #4]
 8018b64:	68db      	ldr	r3, [r3, #12]
 8018b66:	4a09      	ldr	r2, [pc, #36]	; (8018b8c <vTaskSwitchContext+0x10c>)
 8018b68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018b6a:	4b08      	ldr	r3, [pc, #32]	; (8018b8c <vTaskSwitchContext+0x10c>)
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	3358      	adds	r3, #88	; 0x58
 8018b70:	4a09      	ldr	r2, [pc, #36]	; (8018b98 <vTaskSwitchContext+0x118>)
 8018b72:	6013      	str	r3, [r2, #0]
}
 8018b74:	bf00      	nop
 8018b76:	3718      	adds	r7, #24
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	20002fe8 	.word	0x20002fe8
 8018b80:	20002fd4 	.word	0x20002fd4
 8018b84:	20002ff0 	.word	0x20002ff0
 8018b88:	20002fec 	.word	0x20002fec
 8018b8c:	20002e20 	.word	0x20002e20
 8018b90:	20002fc8 	.word	0x20002fc8
 8018b94:	20002e24 	.word	0x20002e24
 8018b98:	2000010c 	.word	0x2000010c

08018b9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b084      	sub	sp, #16
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d10a      	bne.n	8018bc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bb0:	f383 8811 	msr	BASEPRI, r3
 8018bb4:	f3bf 8f6f 	isb	sy
 8018bb8:	f3bf 8f4f 	dsb	sy
 8018bbc:	60fb      	str	r3, [r7, #12]
}
 8018bbe:	bf00      	nop
 8018bc0:	e7fe      	b.n	8018bc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018bc2:	4b07      	ldr	r3, [pc, #28]	; (8018be0 <vTaskPlaceOnEventList+0x44>)
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	3318      	adds	r3, #24
 8018bc8:	4619      	mov	r1, r3
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f7fe fcf3 	bl	80175b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018bd0:	2101      	movs	r1, #1
 8018bd2:	6838      	ldr	r0, [r7, #0]
 8018bd4:	f000 fc2c 	bl	8019430 <prvAddCurrentTaskToDelayedList>
}
 8018bd8:	bf00      	nop
 8018bda:	3710      	adds	r7, #16
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}
 8018be0:	20002e20 	.word	0x20002e20

08018be4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b086      	sub	sp, #24
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	60f8      	str	r0, [r7, #12]
 8018bec:	60b9      	str	r1, [r7, #8]
 8018bee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d10a      	bne.n	8018c0c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8018bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bfa:	f383 8811 	msr	BASEPRI, r3
 8018bfe:	f3bf 8f6f 	isb	sy
 8018c02:	f3bf 8f4f 	dsb	sy
 8018c06:	617b      	str	r3, [r7, #20]
}
 8018c08:	bf00      	nop
 8018c0a:	e7fe      	b.n	8018c0a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018c0c:	4b11      	ldr	r3, [pc, #68]	; (8018c54 <vTaskPlaceOnUnorderedEventList+0x70>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d10a      	bne.n	8018c2a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c18:	f383 8811 	msr	BASEPRI, r3
 8018c1c:	f3bf 8f6f 	isb	sy
 8018c20:	f3bf 8f4f 	dsb	sy
 8018c24:	613b      	str	r3, [r7, #16]
}
 8018c26:	bf00      	nop
 8018c28:	e7fe      	b.n	8018c28 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018c2a:	4b0b      	ldr	r3, [pc, #44]	; (8018c58 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	68ba      	ldr	r2, [r7, #8]
 8018c30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018c34:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018c36:	4b08      	ldr	r3, [pc, #32]	; (8018c58 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	3318      	adds	r3, #24
 8018c3c:	4619      	mov	r1, r3
 8018c3e:	68f8      	ldr	r0, [r7, #12]
 8018c40:	f7fe fc95 	bl	801756e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018c44:	2101      	movs	r1, #1
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f000 fbf2 	bl	8019430 <prvAddCurrentTaskToDelayedList>
}
 8018c4c:	bf00      	nop
 8018c4e:	3718      	adds	r7, #24
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	20002fe8 	.word	0x20002fe8
 8018c58:	20002e20 	.word	0x20002e20

08018c5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b086      	sub	sp, #24
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	60f8      	str	r0, [r7, #12]
 8018c64:	60b9      	str	r1, [r7, #8]
 8018c66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d10a      	bne.n	8018c84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c72:	f383 8811 	msr	BASEPRI, r3
 8018c76:	f3bf 8f6f 	isb	sy
 8018c7a:	f3bf 8f4f 	dsb	sy
 8018c7e:	617b      	str	r3, [r7, #20]
}
 8018c80:	bf00      	nop
 8018c82:	e7fe      	b.n	8018c82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018c84:	4b0a      	ldr	r3, [pc, #40]	; (8018cb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	3318      	adds	r3, #24
 8018c8a:	4619      	mov	r1, r3
 8018c8c:	68f8      	ldr	r0, [r7, #12]
 8018c8e:	f7fe fc6e 	bl	801756e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d002      	beq.n	8018c9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018c98:	f04f 33ff 	mov.w	r3, #4294967295
 8018c9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018c9e:	6879      	ldr	r1, [r7, #4]
 8018ca0:	68b8      	ldr	r0, [r7, #8]
 8018ca2:	f000 fbc5 	bl	8019430 <prvAddCurrentTaskToDelayedList>
	}
 8018ca6:	bf00      	nop
 8018ca8:	3718      	adds	r7, #24
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}
 8018cae:	bf00      	nop
 8018cb0:	20002e20 	.word	0x20002e20

08018cb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b086      	sub	sp, #24
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	68db      	ldr	r3, [r3, #12]
 8018cc0:	68db      	ldr	r3, [r3, #12]
 8018cc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018cc4:	693b      	ldr	r3, [r7, #16]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d10a      	bne.n	8018ce0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cce:	f383 8811 	msr	BASEPRI, r3
 8018cd2:	f3bf 8f6f 	isb	sy
 8018cd6:	f3bf 8f4f 	dsb	sy
 8018cda:	60fb      	str	r3, [r7, #12]
}
 8018cdc:	bf00      	nop
 8018cde:	e7fe      	b.n	8018cde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018ce0:	693b      	ldr	r3, [r7, #16]
 8018ce2:	3318      	adds	r3, #24
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f7fe fc9f 	bl	8017628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018cea:	4b1d      	ldr	r3, [pc, #116]	; (8018d60 <xTaskRemoveFromEventList+0xac>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d11c      	bne.n	8018d2c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018cf2:	693b      	ldr	r3, [r7, #16]
 8018cf4:	3304      	adds	r3, #4
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7fe fc96 	bl	8017628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018cfc:	693b      	ldr	r3, [r7, #16]
 8018cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d00:	2201      	movs	r2, #1
 8018d02:	409a      	lsls	r2, r3
 8018d04:	4b17      	ldr	r3, [pc, #92]	; (8018d64 <xTaskRemoveFromEventList+0xb0>)
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	4313      	orrs	r3, r2
 8018d0a:	4a16      	ldr	r2, [pc, #88]	; (8018d64 <xTaskRemoveFromEventList+0xb0>)
 8018d0c:	6013      	str	r3, [r2, #0]
 8018d0e:	693b      	ldr	r3, [r7, #16]
 8018d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d12:	4613      	mov	r3, r2
 8018d14:	009b      	lsls	r3, r3, #2
 8018d16:	4413      	add	r3, r2
 8018d18:	009b      	lsls	r3, r3, #2
 8018d1a:	4a13      	ldr	r2, [pc, #76]	; (8018d68 <xTaskRemoveFromEventList+0xb4>)
 8018d1c:	441a      	add	r2, r3
 8018d1e:	693b      	ldr	r3, [r7, #16]
 8018d20:	3304      	adds	r3, #4
 8018d22:	4619      	mov	r1, r3
 8018d24:	4610      	mov	r0, r2
 8018d26:	f7fe fc22 	bl	801756e <vListInsertEnd>
 8018d2a:	e005      	b.n	8018d38 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018d2c:	693b      	ldr	r3, [r7, #16]
 8018d2e:	3318      	adds	r3, #24
 8018d30:	4619      	mov	r1, r3
 8018d32:	480e      	ldr	r0, [pc, #56]	; (8018d6c <xTaskRemoveFromEventList+0xb8>)
 8018d34:	f7fe fc1b 	bl	801756e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018d38:	693b      	ldr	r3, [r7, #16]
 8018d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d3c:	4b0c      	ldr	r3, [pc, #48]	; (8018d70 <xTaskRemoveFromEventList+0xbc>)
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d42:	429a      	cmp	r2, r3
 8018d44:	d905      	bls.n	8018d52 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018d46:	2301      	movs	r3, #1
 8018d48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018d4a:	4b0a      	ldr	r3, [pc, #40]	; (8018d74 <xTaskRemoveFromEventList+0xc0>)
 8018d4c:	2201      	movs	r2, #1
 8018d4e:	601a      	str	r2, [r3, #0]
 8018d50:	e001      	b.n	8018d56 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8018d52:	2300      	movs	r3, #0
 8018d54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018d56:	697b      	ldr	r3, [r7, #20]
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3718      	adds	r7, #24
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	20002fe8 	.word	0x20002fe8
 8018d64:	20002fc8 	.word	0x20002fc8
 8018d68:	20002e24 	.word	0x20002e24
 8018d6c:	20002f80 	.word	0x20002f80
 8018d70:	20002e20 	.word	0x20002e20
 8018d74:	20002fd4 	.word	0x20002fd4

08018d78 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b086      	sub	sp, #24
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018d82:	4b29      	ldr	r3, [pc, #164]	; (8018e28 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d10a      	bne.n	8018da0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d8e:	f383 8811 	msr	BASEPRI, r3
 8018d92:	f3bf 8f6f 	isb	sy
 8018d96:	f3bf 8f4f 	dsb	sy
 8018d9a:	613b      	str	r3, [r7, #16]
}
 8018d9c:	bf00      	nop
 8018d9e:	e7fe      	b.n	8018d9e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018da0:	683b      	ldr	r3, [r7, #0]
 8018da2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	68db      	ldr	r3, [r3, #12]
 8018dae:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018db0:	697b      	ldr	r3, [r7, #20]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d10a      	bne.n	8018dcc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dba:	f383 8811 	msr	BASEPRI, r3
 8018dbe:	f3bf 8f6f 	isb	sy
 8018dc2:	f3bf 8f4f 	dsb	sy
 8018dc6:	60fb      	str	r3, [r7, #12]
}
 8018dc8:	bf00      	nop
 8018dca:	e7fe      	b.n	8018dca <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018dcc:	6878      	ldr	r0, [r7, #4]
 8018dce:	f7fe fc2b 	bl	8017628 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018dd2:	697b      	ldr	r3, [r7, #20]
 8018dd4:	3304      	adds	r3, #4
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	f7fe fc26 	bl	8017628 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018ddc:	697b      	ldr	r3, [r7, #20]
 8018dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018de0:	2201      	movs	r2, #1
 8018de2:	409a      	lsls	r2, r3
 8018de4:	4b11      	ldr	r3, [pc, #68]	; (8018e2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	4313      	orrs	r3, r2
 8018dea:	4a10      	ldr	r2, [pc, #64]	; (8018e2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018dec:	6013      	str	r3, [r2, #0]
 8018dee:	697b      	ldr	r3, [r7, #20]
 8018df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018df2:	4613      	mov	r3, r2
 8018df4:	009b      	lsls	r3, r3, #2
 8018df6:	4413      	add	r3, r2
 8018df8:	009b      	lsls	r3, r3, #2
 8018dfa:	4a0d      	ldr	r2, [pc, #52]	; (8018e30 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018dfc:	441a      	add	r2, r3
 8018dfe:	697b      	ldr	r3, [r7, #20]
 8018e00:	3304      	adds	r3, #4
 8018e02:	4619      	mov	r1, r3
 8018e04:	4610      	mov	r0, r2
 8018e06:	f7fe fbb2 	bl	801756e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018e0a:	697b      	ldr	r3, [r7, #20]
 8018e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e0e:	4b09      	ldr	r3, [pc, #36]	; (8018e34 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d902      	bls.n	8018e1e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018e18:	4b07      	ldr	r3, [pc, #28]	; (8018e38 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018e1a:	2201      	movs	r2, #1
 8018e1c:	601a      	str	r2, [r3, #0]
	}
}
 8018e1e:	bf00      	nop
 8018e20:	3718      	adds	r7, #24
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}
 8018e26:	bf00      	nop
 8018e28:	20002fe8 	.word	0x20002fe8
 8018e2c:	20002fc8 	.word	0x20002fc8
 8018e30:	20002e24 	.word	0x20002e24
 8018e34:	20002e20 	.word	0x20002e20
 8018e38:	20002fd4 	.word	0x20002fd4

08018e3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018e3c:	b480      	push	{r7}
 8018e3e:	b083      	sub	sp, #12
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018e44:	4b06      	ldr	r3, [pc, #24]	; (8018e60 <vTaskInternalSetTimeOutState+0x24>)
 8018e46:	681a      	ldr	r2, [r3, #0]
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018e4c:	4b05      	ldr	r3, [pc, #20]	; (8018e64 <vTaskInternalSetTimeOutState+0x28>)
 8018e4e:	681a      	ldr	r2, [r3, #0]
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	605a      	str	r2, [r3, #4]
}
 8018e54:	bf00      	nop
 8018e56:	370c      	adds	r7, #12
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5e:	4770      	bx	lr
 8018e60:	20002fd8 	.word	0x20002fd8
 8018e64:	20002fc4 	.word	0x20002fc4

08018e68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b088      	sub	sp, #32
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d10a      	bne.n	8018e8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e7c:	f383 8811 	msr	BASEPRI, r3
 8018e80:	f3bf 8f6f 	isb	sy
 8018e84:	f3bf 8f4f 	dsb	sy
 8018e88:	613b      	str	r3, [r7, #16]
}
 8018e8a:	bf00      	nop
 8018e8c:	e7fe      	b.n	8018e8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018e8e:	683b      	ldr	r3, [r7, #0]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d10a      	bne.n	8018eaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e98:	f383 8811 	msr	BASEPRI, r3
 8018e9c:	f3bf 8f6f 	isb	sy
 8018ea0:	f3bf 8f4f 	dsb	sy
 8018ea4:	60fb      	str	r3, [r7, #12]
}
 8018ea6:	bf00      	nop
 8018ea8:	e7fe      	b.n	8018ea8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018eaa:	f000 ffc3 	bl	8019e34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018eae:	4b1d      	ldr	r3, [pc, #116]	; (8018f24 <xTaskCheckForTimeOut+0xbc>)
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	685b      	ldr	r3, [r3, #4]
 8018eb8:	69ba      	ldr	r2, [r7, #24]
 8018eba:	1ad3      	subs	r3, r2, r3
 8018ebc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018ebe:	683b      	ldr	r3, [r7, #0]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ec6:	d102      	bne.n	8018ece <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018ec8:	2300      	movs	r3, #0
 8018eca:	61fb      	str	r3, [r7, #28]
 8018ecc:	e023      	b.n	8018f16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681a      	ldr	r2, [r3, #0]
 8018ed2:	4b15      	ldr	r3, [pc, #84]	; (8018f28 <xTaskCheckForTimeOut+0xc0>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	429a      	cmp	r2, r3
 8018ed8:	d007      	beq.n	8018eea <xTaskCheckForTimeOut+0x82>
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	685b      	ldr	r3, [r3, #4]
 8018ede:	69ba      	ldr	r2, [r7, #24]
 8018ee0:	429a      	cmp	r2, r3
 8018ee2:	d302      	bcc.n	8018eea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018ee4:	2301      	movs	r3, #1
 8018ee6:	61fb      	str	r3, [r7, #28]
 8018ee8:	e015      	b.n	8018f16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018eea:	683b      	ldr	r3, [r7, #0]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	697a      	ldr	r2, [r7, #20]
 8018ef0:	429a      	cmp	r2, r3
 8018ef2:	d20b      	bcs.n	8018f0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	681a      	ldr	r2, [r3, #0]
 8018ef8:	697b      	ldr	r3, [r7, #20]
 8018efa:	1ad2      	subs	r2, r2, r3
 8018efc:	683b      	ldr	r3, [r7, #0]
 8018efe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018f00:	6878      	ldr	r0, [r7, #4]
 8018f02:	f7ff ff9b 	bl	8018e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018f06:	2300      	movs	r3, #0
 8018f08:	61fb      	str	r3, [r7, #28]
 8018f0a:	e004      	b.n	8018f16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	2200      	movs	r2, #0
 8018f10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018f12:	2301      	movs	r3, #1
 8018f14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018f16:	f000 ffbd 	bl	8019e94 <vPortExitCritical>

	return xReturn;
 8018f1a:	69fb      	ldr	r3, [r7, #28]
}
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	3720      	adds	r7, #32
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd80      	pop	{r7, pc}
 8018f24:	20002fc4 	.word	0x20002fc4
 8018f28:	20002fd8 	.word	0x20002fd8

08018f2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018f2c:	b480      	push	{r7}
 8018f2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018f30:	4b03      	ldr	r3, [pc, #12]	; (8018f40 <vTaskMissedYield+0x14>)
 8018f32:	2201      	movs	r2, #1
 8018f34:	601a      	str	r2, [r3, #0]
}
 8018f36:	bf00      	nop
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f3e:	4770      	bx	lr
 8018f40:	20002fd4 	.word	0x20002fd4

08018f44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b082      	sub	sp, #8
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018f4c:	f000 f852 	bl	8018ff4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018f50:	4b06      	ldr	r3, [pc, #24]	; (8018f6c <prvIdleTask+0x28>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	2b01      	cmp	r3, #1
 8018f56:	d9f9      	bls.n	8018f4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018f58:	4b05      	ldr	r3, [pc, #20]	; (8018f70 <prvIdleTask+0x2c>)
 8018f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f5e:	601a      	str	r2, [r3, #0]
 8018f60:	f3bf 8f4f 	dsb	sy
 8018f64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018f68:	e7f0      	b.n	8018f4c <prvIdleTask+0x8>
 8018f6a:	bf00      	nop
 8018f6c:	20002e24 	.word	0x20002e24
 8018f70:	e000ed04 	.word	0xe000ed04

08018f74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b082      	sub	sp, #8
 8018f78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	607b      	str	r3, [r7, #4]
 8018f7e:	e00c      	b.n	8018f9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018f80:	687a      	ldr	r2, [r7, #4]
 8018f82:	4613      	mov	r3, r2
 8018f84:	009b      	lsls	r3, r3, #2
 8018f86:	4413      	add	r3, r2
 8018f88:	009b      	lsls	r3, r3, #2
 8018f8a:	4a12      	ldr	r2, [pc, #72]	; (8018fd4 <prvInitialiseTaskLists+0x60>)
 8018f8c:	4413      	add	r3, r2
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f7fe fac0 	bl	8017514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	3301      	adds	r3, #1
 8018f98:	607b      	str	r3, [r7, #4]
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	2b0e      	cmp	r3, #14
 8018f9e:	d9ef      	bls.n	8018f80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018fa0:	480d      	ldr	r0, [pc, #52]	; (8018fd8 <prvInitialiseTaskLists+0x64>)
 8018fa2:	f7fe fab7 	bl	8017514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018fa6:	480d      	ldr	r0, [pc, #52]	; (8018fdc <prvInitialiseTaskLists+0x68>)
 8018fa8:	f7fe fab4 	bl	8017514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018fac:	480c      	ldr	r0, [pc, #48]	; (8018fe0 <prvInitialiseTaskLists+0x6c>)
 8018fae:	f7fe fab1 	bl	8017514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018fb2:	480c      	ldr	r0, [pc, #48]	; (8018fe4 <prvInitialiseTaskLists+0x70>)
 8018fb4:	f7fe faae 	bl	8017514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018fb8:	480b      	ldr	r0, [pc, #44]	; (8018fe8 <prvInitialiseTaskLists+0x74>)
 8018fba:	f7fe faab 	bl	8017514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018fbe:	4b0b      	ldr	r3, [pc, #44]	; (8018fec <prvInitialiseTaskLists+0x78>)
 8018fc0:	4a05      	ldr	r2, [pc, #20]	; (8018fd8 <prvInitialiseTaskLists+0x64>)
 8018fc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018fc4:	4b0a      	ldr	r3, [pc, #40]	; (8018ff0 <prvInitialiseTaskLists+0x7c>)
 8018fc6:	4a05      	ldr	r2, [pc, #20]	; (8018fdc <prvInitialiseTaskLists+0x68>)
 8018fc8:	601a      	str	r2, [r3, #0]
}
 8018fca:	bf00      	nop
 8018fcc:	3708      	adds	r7, #8
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd80      	pop	{r7, pc}
 8018fd2:	bf00      	nop
 8018fd4:	20002e24 	.word	0x20002e24
 8018fd8:	20002f50 	.word	0x20002f50
 8018fdc:	20002f64 	.word	0x20002f64
 8018fe0:	20002f80 	.word	0x20002f80
 8018fe4:	20002f94 	.word	0x20002f94
 8018fe8:	20002fac 	.word	0x20002fac
 8018fec:	20002f78 	.word	0x20002f78
 8018ff0:	20002f7c 	.word	0x20002f7c

08018ff4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018ffa:	e019      	b.n	8019030 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018ffc:	f000 ff1a 	bl	8019e34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019000:	4b10      	ldr	r3, [pc, #64]	; (8019044 <prvCheckTasksWaitingTermination+0x50>)
 8019002:	68db      	ldr	r3, [r3, #12]
 8019004:	68db      	ldr	r3, [r3, #12]
 8019006:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	3304      	adds	r3, #4
 801900c:	4618      	mov	r0, r3
 801900e:	f7fe fb0b 	bl	8017628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019012:	4b0d      	ldr	r3, [pc, #52]	; (8019048 <prvCheckTasksWaitingTermination+0x54>)
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	3b01      	subs	r3, #1
 8019018:	4a0b      	ldr	r2, [pc, #44]	; (8019048 <prvCheckTasksWaitingTermination+0x54>)
 801901a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801901c:	4b0b      	ldr	r3, [pc, #44]	; (801904c <prvCheckTasksWaitingTermination+0x58>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	3b01      	subs	r3, #1
 8019022:	4a0a      	ldr	r2, [pc, #40]	; (801904c <prvCheckTasksWaitingTermination+0x58>)
 8019024:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8019026:	f000 ff35 	bl	8019e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801902a:	6878      	ldr	r0, [r7, #4]
 801902c:	f000 f810 	bl	8019050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019030:	4b06      	ldr	r3, [pc, #24]	; (801904c <prvCheckTasksWaitingTermination+0x58>)
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d1e1      	bne.n	8018ffc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019038:	bf00      	nop
 801903a:	bf00      	nop
 801903c:	3708      	adds	r7, #8
 801903e:	46bd      	mov	sp, r7
 8019040:	bd80      	pop	{r7, pc}
 8019042:	bf00      	nop
 8019044:	20002f94 	.word	0x20002f94
 8019048:	20002fc0 	.word	0x20002fc0
 801904c:	20002fa8 	.word	0x20002fa8

08019050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019050:	b580      	push	{r7, lr}
 8019052:	b084      	sub	sp, #16
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	3358      	adds	r3, #88	; 0x58
 801905c:	4618      	mov	r0, r3
 801905e:	f002 ff8d 	bl	801bf7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8019068:	2b00      	cmp	r3, #0
 801906a:	d108      	bne.n	801907e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019070:	4618      	mov	r0, r3
 8019072:	f001 f8cd 	bl	801a210 <vPortFree>
				vPortFree( pxTCB );
 8019076:	6878      	ldr	r0, [r7, #4]
 8019078:	f001 f8ca 	bl	801a210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801907c:	e018      	b.n	80190b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8019084:	2b01      	cmp	r3, #1
 8019086:	d103      	bne.n	8019090 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8019088:	6878      	ldr	r0, [r7, #4]
 801908a:	f001 f8c1 	bl	801a210 <vPortFree>
	}
 801908e:	e00f      	b.n	80190b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8019096:	2b02      	cmp	r3, #2
 8019098:	d00a      	beq.n	80190b0 <prvDeleteTCB+0x60>
	__asm volatile
 801909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801909e:	f383 8811 	msr	BASEPRI, r3
 80190a2:	f3bf 8f6f 	isb	sy
 80190a6:	f3bf 8f4f 	dsb	sy
 80190aa:	60fb      	str	r3, [r7, #12]
}
 80190ac:	bf00      	nop
 80190ae:	e7fe      	b.n	80190ae <prvDeleteTCB+0x5e>
	}
 80190b0:	bf00      	nop
 80190b2:	3710      	adds	r7, #16
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}

080190b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80190b8:	b480      	push	{r7}
 80190ba:	b083      	sub	sp, #12
 80190bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80190be:	4b0c      	ldr	r3, [pc, #48]	; (80190f0 <prvResetNextTaskUnblockTime+0x38>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d104      	bne.n	80190d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80190c8:	4b0a      	ldr	r3, [pc, #40]	; (80190f4 <prvResetNextTaskUnblockTime+0x3c>)
 80190ca:	f04f 32ff 	mov.w	r2, #4294967295
 80190ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80190d0:	e008      	b.n	80190e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190d2:	4b07      	ldr	r3, [pc, #28]	; (80190f0 <prvResetNextTaskUnblockTime+0x38>)
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	68db      	ldr	r3, [r3, #12]
 80190d8:	68db      	ldr	r3, [r3, #12]
 80190da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	685b      	ldr	r3, [r3, #4]
 80190e0:	4a04      	ldr	r2, [pc, #16]	; (80190f4 <prvResetNextTaskUnblockTime+0x3c>)
 80190e2:	6013      	str	r3, [r2, #0]
}
 80190e4:	bf00      	nop
 80190e6:	370c      	adds	r7, #12
 80190e8:	46bd      	mov	sp, r7
 80190ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ee:	4770      	bx	lr
 80190f0:	20002f78 	.word	0x20002f78
 80190f4:	20002fe0 	.word	0x20002fe0

080190f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80190f8:	b480      	push	{r7}
 80190fa:	b083      	sub	sp, #12
 80190fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80190fe:	4b0b      	ldr	r3, [pc, #44]	; (801912c <xTaskGetSchedulerState+0x34>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d102      	bne.n	801910c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019106:	2301      	movs	r3, #1
 8019108:	607b      	str	r3, [r7, #4]
 801910a:	e008      	b.n	801911e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801910c:	4b08      	ldr	r3, [pc, #32]	; (8019130 <xTaskGetSchedulerState+0x38>)
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d102      	bne.n	801911a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019114:	2302      	movs	r3, #2
 8019116:	607b      	str	r3, [r7, #4]
 8019118:	e001      	b.n	801911e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801911a:	2300      	movs	r3, #0
 801911c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801911e:	687b      	ldr	r3, [r7, #4]
	}
 8019120:	4618      	mov	r0, r3
 8019122:	370c      	adds	r7, #12
 8019124:	46bd      	mov	sp, r7
 8019126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801912a:	4770      	bx	lr
 801912c:	20002fcc 	.word	0x20002fcc
 8019130:	20002fe8 	.word	0x20002fe8

08019134 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019134:	b580      	push	{r7, lr}
 8019136:	b086      	sub	sp, #24
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019140:	2300      	movs	r3, #0
 8019142:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d06e      	beq.n	8019228 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801914a:	4b3a      	ldr	r3, [pc, #232]	; (8019234 <xTaskPriorityDisinherit+0x100>)
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	693a      	ldr	r2, [r7, #16]
 8019150:	429a      	cmp	r2, r3
 8019152:	d00a      	beq.n	801916a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019158:	f383 8811 	msr	BASEPRI, r3
 801915c:	f3bf 8f6f 	isb	sy
 8019160:	f3bf 8f4f 	dsb	sy
 8019164:	60fb      	str	r3, [r7, #12]
}
 8019166:	bf00      	nop
 8019168:	e7fe      	b.n	8019168 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801916a:	693b      	ldr	r3, [r7, #16]
 801916c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801916e:	2b00      	cmp	r3, #0
 8019170:	d10a      	bne.n	8019188 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019176:	f383 8811 	msr	BASEPRI, r3
 801917a:	f3bf 8f6f 	isb	sy
 801917e:	f3bf 8f4f 	dsb	sy
 8019182:	60bb      	str	r3, [r7, #8]
}
 8019184:	bf00      	nop
 8019186:	e7fe      	b.n	8019186 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019188:	693b      	ldr	r3, [r7, #16]
 801918a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801918c:	1e5a      	subs	r2, r3, #1
 801918e:	693b      	ldr	r3, [r7, #16]
 8019190:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019192:	693b      	ldr	r3, [r7, #16]
 8019194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019196:	693b      	ldr	r3, [r7, #16]
 8019198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801919a:	429a      	cmp	r2, r3
 801919c:	d044      	beq.n	8019228 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801919e:	693b      	ldr	r3, [r7, #16]
 80191a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d140      	bne.n	8019228 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80191a6:	693b      	ldr	r3, [r7, #16]
 80191a8:	3304      	adds	r3, #4
 80191aa:	4618      	mov	r0, r3
 80191ac:	f7fe fa3c 	bl	8017628 <uxListRemove>
 80191b0:	4603      	mov	r3, r0
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d115      	bne.n	80191e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80191b6:	693b      	ldr	r3, [r7, #16]
 80191b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191ba:	491f      	ldr	r1, [pc, #124]	; (8019238 <xTaskPriorityDisinherit+0x104>)
 80191bc:	4613      	mov	r3, r2
 80191be:	009b      	lsls	r3, r3, #2
 80191c0:	4413      	add	r3, r2
 80191c2:	009b      	lsls	r3, r3, #2
 80191c4:	440b      	add	r3, r1
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d10a      	bne.n	80191e2 <xTaskPriorityDisinherit+0xae>
 80191cc:	693b      	ldr	r3, [r7, #16]
 80191ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191d0:	2201      	movs	r2, #1
 80191d2:	fa02 f303 	lsl.w	r3, r2, r3
 80191d6:	43da      	mvns	r2, r3
 80191d8:	4b18      	ldr	r3, [pc, #96]	; (801923c <xTaskPriorityDisinherit+0x108>)
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	4013      	ands	r3, r2
 80191de:	4a17      	ldr	r2, [pc, #92]	; (801923c <xTaskPriorityDisinherit+0x108>)
 80191e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80191e2:	693b      	ldr	r3, [r7, #16]
 80191e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80191e6:	693b      	ldr	r3, [r7, #16]
 80191e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80191ea:	693b      	ldr	r3, [r7, #16]
 80191ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191ee:	f1c3 020f 	rsb	r2, r3, #15
 80191f2:	693b      	ldr	r3, [r7, #16]
 80191f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80191f6:	693b      	ldr	r3, [r7, #16]
 80191f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191fa:	2201      	movs	r2, #1
 80191fc:	409a      	lsls	r2, r3
 80191fe:	4b0f      	ldr	r3, [pc, #60]	; (801923c <xTaskPriorityDisinherit+0x108>)
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	4313      	orrs	r3, r2
 8019204:	4a0d      	ldr	r2, [pc, #52]	; (801923c <xTaskPriorityDisinherit+0x108>)
 8019206:	6013      	str	r3, [r2, #0]
 8019208:	693b      	ldr	r3, [r7, #16]
 801920a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801920c:	4613      	mov	r3, r2
 801920e:	009b      	lsls	r3, r3, #2
 8019210:	4413      	add	r3, r2
 8019212:	009b      	lsls	r3, r3, #2
 8019214:	4a08      	ldr	r2, [pc, #32]	; (8019238 <xTaskPriorityDisinherit+0x104>)
 8019216:	441a      	add	r2, r3
 8019218:	693b      	ldr	r3, [r7, #16]
 801921a:	3304      	adds	r3, #4
 801921c:	4619      	mov	r1, r3
 801921e:	4610      	mov	r0, r2
 8019220:	f7fe f9a5 	bl	801756e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019224:	2301      	movs	r3, #1
 8019226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019228:	697b      	ldr	r3, [r7, #20]
	}
 801922a:	4618      	mov	r0, r3
 801922c:	3718      	adds	r7, #24
 801922e:	46bd      	mov	sp, r7
 8019230:	bd80      	pop	{r7, pc}
 8019232:	bf00      	nop
 8019234:	20002e20 	.word	0x20002e20
 8019238:	20002e24 	.word	0x20002e24
 801923c:	20002fc8 	.word	0x20002fc8

08019240 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8019240:	b480      	push	{r7}
 8019242:	b083      	sub	sp, #12
 8019244:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8019246:	4b09      	ldr	r3, [pc, #36]	; (801926c <uxTaskResetEventItemValue+0x2c>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	699b      	ldr	r3, [r3, #24]
 801924c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801924e:	4b07      	ldr	r3, [pc, #28]	; (801926c <uxTaskResetEventItemValue+0x2c>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019254:	4b05      	ldr	r3, [pc, #20]	; (801926c <uxTaskResetEventItemValue+0x2c>)
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	f1c2 020f 	rsb	r2, r2, #15
 801925c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801925e:	687b      	ldr	r3, [r7, #4]
}
 8019260:	4618      	mov	r0, r3
 8019262:	370c      	adds	r7, #12
 8019264:	46bd      	mov	sp, r7
 8019266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801926a:	4770      	bx	lr
 801926c:	20002e20 	.word	0x20002e20

08019270 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8019270:	b580      	push	{r7, lr}
 8019272:	b084      	sub	sp, #16
 8019274:	af00      	add	r7, sp, #0
 8019276:	6078      	str	r0, [r7, #4]
 8019278:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801927a:	f000 fddb 	bl	8019e34 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801927e:	4b20      	ldr	r3, [pc, #128]	; (8019300 <ulTaskNotifyTake+0x90>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8019286:	2b00      	cmp	r3, #0
 8019288:	d113      	bne.n	80192b2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801928a:	4b1d      	ldr	r3, [pc, #116]	; (8019300 <ulTaskNotifyTake+0x90>)
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	2201      	movs	r2, #1
 8019290:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8019294:	683b      	ldr	r3, [r7, #0]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d00b      	beq.n	80192b2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801929a:	2101      	movs	r1, #1
 801929c:	6838      	ldr	r0, [r7, #0]
 801929e:	f000 f8c7 	bl	8019430 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80192a2:	4b18      	ldr	r3, [pc, #96]	; (8019304 <ulTaskNotifyTake+0x94>)
 80192a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80192a8:	601a      	str	r2, [r3, #0]
 80192aa:	f3bf 8f4f 	dsb	sy
 80192ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80192b2:	f000 fdef 	bl	8019e94 <vPortExitCritical>

		taskENTER_CRITICAL();
 80192b6:	f000 fdbd 	bl	8019e34 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80192ba:	4b11      	ldr	r3, [pc, #68]	; (8019300 <ulTaskNotifyTake+0x90>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80192c2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d00e      	beq.n	80192e8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d005      	beq.n	80192dc <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80192d0:	4b0b      	ldr	r3, [pc, #44]	; (8019300 <ulTaskNotifyTake+0x90>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	2200      	movs	r2, #0
 80192d6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80192da:	e005      	b.n	80192e8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80192dc:	4b08      	ldr	r3, [pc, #32]	; (8019300 <ulTaskNotifyTake+0x90>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	68fa      	ldr	r2, [r7, #12]
 80192e2:	3a01      	subs	r2, #1
 80192e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80192e8:	4b05      	ldr	r3, [pc, #20]	; (8019300 <ulTaskNotifyTake+0x90>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	2200      	movs	r2, #0
 80192ee:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 80192f2:	f000 fdcf 	bl	8019e94 <vPortExitCritical>

		return ulReturn;
 80192f6:	68fb      	ldr	r3, [r7, #12]
	}
 80192f8:	4618      	mov	r0, r3
 80192fa:	3710      	adds	r7, #16
 80192fc:	46bd      	mov	sp, r7
 80192fe:	bd80      	pop	{r7, pc}
 8019300:	20002e20 	.word	0x20002e20
 8019304:	e000ed04 	.word	0xe000ed04

08019308 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019308:	b580      	push	{r7, lr}
 801930a:	b08a      	sub	sp, #40	; 0x28
 801930c:	af00      	add	r7, sp, #0
 801930e:	6078      	str	r0, [r7, #4]
 8019310:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d10a      	bne.n	801932e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8019318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801931c:	f383 8811 	msr	BASEPRI, r3
 8019320:	f3bf 8f6f 	isb	sy
 8019324:	f3bf 8f4f 	dsb	sy
 8019328:	61bb      	str	r3, [r7, #24]
}
 801932a:	bf00      	nop
 801932c:	e7fe      	b.n	801932c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801932e:	f000 fe63 	bl	8019ff8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8019336:	f3ef 8211 	mrs	r2, BASEPRI
 801933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801933e:	f383 8811 	msr	BASEPRI, r3
 8019342:	f3bf 8f6f 	isb	sy
 8019346:	f3bf 8f4f 	dsb	sy
 801934a:	617a      	str	r2, [r7, #20]
 801934c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801934e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019350:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8019352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019354:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8019358:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801935c:	2202      	movs	r2, #2
 801935e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8019362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019364:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8019368:	1c5a      	adds	r2, r3, #1
 801936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801936c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8019370:	7ffb      	ldrb	r3, [r7, #31]
 8019372:	2b01      	cmp	r3, #1
 8019374:	d145      	bne.n	8019402 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8019376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801937a:	2b00      	cmp	r3, #0
 801937c:	d00a      	beq.n	8019394 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 801937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019382:	f383 8811 	msr	BASEPRI, r3
 8019386:	f3bf 8f6f 	isb	sy
 801938a:	f3bf 8f4f 	dsb	sy
 801938e:	60fb      	str	r3, [r7, #12]
}
 8019390:	bf00      	nop
 8019392:	e7fe      	b.n	8019392 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019394:	4b20      	ldr	r3, [pc, #128]	; (8019418 <vTaskNotifyGiveFromISR+0x110>)
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d11c      	bne.n	80193d6 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801939e:	3304      	adds	r3, #4
 80193a0:	4618      	mov	r0, r3
 80193a2:	f7fe f941 	bl	8017628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80193a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193aa:	2201      	movs	r2, #1
 80193ac:	409a      	lsls	r2, r3
 80193ae:	4b1b      	ldr	r3, [pc, #108]	; (801941c <vTaskNotifyGiveFromISR+0x114>)
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	4313      	orrs	r3, r2
 80193b4:	4a19      	ldr	r2, [pc, #100]	; (801941c <vTaskNotifyGiveFromISR+0x114>)
 80193b6:	6013      	str	r3, [r2, #0]
 80193b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193bc:	4613      	mov	r3, r2
 80193be:	009b      	lsls	r3, r3, #2
 80193c0:	4413      	add	r3, r2
 80193c2:	009b      	lsls	r3, r3, #2
 80193c4:	4a16      	ldr	r2, [pc, #88]	; (8019420 <vTaskNotifyGiveFromISR+0x118>)
 80193c6:	441a      	add	r2, r3
 80193c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ca:	3304      	adds	r3, #4
 80193cc:	4619      	mov	r1, r3
 80193ce:	4610      	mov	r0, r2
 80193d0:	f7fe f8cd 	bl	801756e <vListInsertEnd>
 80193d4:	e005      	b.n	80193e2 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80193d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193d8:	3318      	adds	r3, #24
 80193da:	4619      	mov	r1, r3
 80193dc:	4811      	ldr	r0, [pc, #68]	; (8019424 <vTaskNotifyGiveFromISR+0x11c>)
 80193de:	f7fe f8c6 	bl	801756e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80193e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193e6:	4b10      	ldr	r3, [pc, #64]	; (8019428 <vTaskNotifyGiveFromISR+0x120>)
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193ec:	429a      	cmp	r2, r3
 80193ee:	d908      	bls.n	8019402 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d002      	beq.n	80193fc <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80193f6:	683b      	ldr	r3, [r7, #0]
 80193f8:	2201      	movs	r2, #1
 80193fa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80193fc:	4b0b      	ldr	r3, [pc, #44]	; (801942c <vTaskNotifyGiveFromISR+0x124>)
 80193fe:	2201      	movs	r2, #1
 8019400:	601a      	str	r2, [r3, #0]
 8019402:	6a3b      	ldr	r3, [r7, #32]
 8019404:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8019406:	68bb      	ldr	r3, [r7, #8]
 8019408:	f383 8811 	msr	BASEPRI, r3
}
 801940c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 801940e:	bf00      	nop
 8019410:	3728      	adds	r7, #40	; 0x28
 8019412:	46bd      	mov	sp, r7
 8019414:	bd80      	pop	{r7, pc}
 8019416:	bf00      	nop
 8019418:	20002fe8 	.word	0x20002fe8
 801941c:	20002fc8 	.word	0x20002fc8
 8019420:	20002e24 	.word	0x20002e24
 8019424:	20002f80 	.word	0x20002f80
 8019428:	20002e20 	.word	0x20002e20
 801942c:	20002fd4 	.word	0x20002fd4

08019430 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b084      	sub	sp, #16
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
 8019438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801943a:	4b29      	ldr	r3, [pc, #164]	; (80194e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019440:	4b28      	ldr	r3, [pc, #160]	; (80194e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	3304      	adds	r3, #4
 8019446:	4618      	mov	r0, r3
 8019448:	f7fe f8ee 	bl	8017628 <uxListRemove>
 801944c:	4603      	mov	r3, r0
 801944e:	2b00      	cmp	r3, #0
 8019450:	d10b      	bne.n	801946a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8019452:	4b24      	ldr	r3, [pc, #144]	; (80194e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019458:	2201      	movs	r2, #1
 801945a:	fa02 f303 	lsl.w	r3, r2, r3
 801945e:	43da      	mvns	r2, r3
 8019460:	4b21      	ldr	r3, [pc, #132]	; (80194e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	4013      	ands	r3, r2
 8019466:	4a20      	ldr	r2, [pc, #128]	; (80194e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8019468:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019470:	d10a      	bne.n	8019488 <prvAddCurrentTaskToDelayedList+0x58>
 8019472:	683b      	ldr	r3, [r7, #0]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d007      	beq.n	8019488 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019478:	4b1a      	ldr	r3, [pc, #104]	; (80194e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	3304      	adds	r3, #4
 801947e:	4619      	mov	r1, r3
 8019480:	481a      	ldr	r0, [pc, #104]	; (80194ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8019482:	f7fe f874 	bl	801756e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019486:	e026      	b.n	80194d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019488:	68fa      	ldr	r2, [r7, #12]
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	4413      	add	r3, r2
 801948e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019490:	4b14      	ldr	r3, [pc, #80]	; (80194e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	68ba      	ldr	r2, [r7, #8]
 8019496:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019498:	68ba      	ldr	r2, [r7, #8]
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	429a      	cmp	r2, r3
 801949e:	d209      	bcs.n	80194b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80194a0:	4b13      	ldr	r3, [pc, #76]	; (80194f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80194a2:	681a      	ldr	r2, [r3, #0]
 80194a4:	4b0f      	ldr	r3, [pc, #60]	; (80194e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	3304      	adds	r3, #4
 80194aa:	4619      	mov	r1, r3
 80194ac:	4610      	mov	r0, r2
 80194ae:	f7fe f882 	bl	80175b6 <vListInsert>
}
 80194b2:	e010      	b.n	80194d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80194b4:	4b0f      	ldr	r3, [pc, #60]	; (80194f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80194b6:	681a      	ldr	r2, [r3, #0]
 80194b8:	4b0a      	ldr	r3, [pc, #40]	; (80194e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	3304      	adds	r3, #4
 80194be:	4619      	mov	r1, r3
 80194c0:	4610      	mov	r0, r2
 80194c2:	f7fe f878 	bl	80175b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80194c6:	4b0c      	ldr	r3, [pc, #48]	; (80194f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	68ba      	ldr	r2, [r7, #8]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	d202      	bcs.n	80194d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80194d0:	4a09      	ldr	r2, [pc, #36]	; (80194f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80194d2:	68bb      	ldr	r3, [r7, #8]
 80194d4:	6013      	str	r3, [r2, #0]
}
 80194d6:	bf00      	nop
 80194d8:	3710      	adds	r7, #16
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
 80194de:	bf00      	nop
 80194e0:	20002fc4 	.word	0x20002fc4
 80194e4:	20002e20 	.word	0x20002e20
 80194e8:	20002fc8 	.word	0x20002fc8
 80194ec:	20002fac 	.word	0x20002fac
 80194f0:	20002f7c 	.word	0x20002f7c
 80194f4:	20002f78 	.word	0x20002f78
 80194f8:	20002fe0 	.word	0x20002fe0

080194fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b08a      	sub	sp, #40	; 0x28
 8019500:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019502:	2300      	movs	r3, #0
 8019504:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019506:	f000 fb07 	bl	8019b18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801950a:	4b1c      	ldr	r3, [pc, #112]	; (801957c <xTimerCreateTimerTask+0x80>)
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d021      	beq.n	8019556 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019512:	2300      	movs	r3, #0
 8019514:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019516:	2300      	movs	r3, #0
 8019518:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801951a:	1d3a      	adds	r2, r7, #4
 801951c:	f107 0108 	add.w	r1, r7, #8
 8019520:	f107 030c 	add.w	r3, r7, #12
 8019524:	4618      	mov	r0, r3
 8019526:	f7e9 fe75 	bl	8003214 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801952a:	6879      	ldr	r1, [r7, #4]
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	68fa      	ldr	r2, [r7, #12]
 8019530:	9202      	str	r2, [sp, #8]
 8019532:	9301      	str	r3, [sp, #4]
 8019534:	2302      	movs	r3, #2
 8019536:	9300      	str	r3, [sp, #0]
 8019538:	2300      	movs	r3, #0
 801953a:	460a      	mov	r2, r1
 801953c:	4910      	ldr	r1, [pc, #64]	; (8019580 <xTimerCreateTimerTask+0x84>)
 801953e:	4811      	ldr	r0, [pc, #68]	; (8019584 <xTimerCreateTimerTask+0x88>)
 8019540:	f7fe fe4e 	bl	80181e0 <xTaskCreateStatic>
 8019544:	4603      	mov	r3, r0
 8019546:	4a10      	ldr	r2, [pc, #64]	; (8019588 <xTimerCreateTimerTask+0x8c>)
 8019548:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801954a:	4b0f      	ldr	r3, [pc, #60]	; (8019588 <xTimerCreateTimerTask+0x8c>)
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d001      	beq.n	8019556 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019552:	2301      	movs	r3, #1
 8019554:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d10a      	bne.n	8019572 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019560:	f383 8811 	msr	BASEPRI, r3
 8019564:	f3bf 8f6f 	isb	sy
 8019568:	f3bf 8f4f 	dsb	sy
 801956c:	613b      	str	r3, [r7, #16]
}
 801956e:	bf00      	nop
 8019570:	e7fe      	b.n	8019570 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019572:	697b      	ldr	r3, [r7, #20]
}
 8019574:	4618      	mov	r0, r3
 8019576:	3718      	adds	r7, #24
 8019578:	46bd      	mov	sp, r7
 801957a:	bd80      	pop	{r7, pc}
 801957c:	20003024 	.word	0x20003024
 8019580:	080217dc 	.word	0x080217dc
 8019584:	080196c1 	.word	0x080196c1
 8019588:	20003028 	.word	0x20003028

0801958c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801958c:	b580      	push	{r7, lr}
 801958e:	b08a      	sub	sp, #40	; 0x28
 8019590:	af00      	add	r7, sp, #0
 8019592:	60f8      	str	r0, [r7, #12]
 8019594:	60b9      	str	r1, [r7, #8]
 8019596:	607a      	str	r2, [r7, #4]
 8019598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801959a:	2300      	movs	r3, #0
 801959c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d10a      	bne.n	80195ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80195a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195a8:	f383 8811 	msr	BASEPRI, r3
 80195ac:	f3bf 8f6f 	isb	sy
 80195b0:	f3bf 8f4f 	dsb	sy
 80195b4:	623b      	str	r3, [r7, #32]
}
 80195b6:	bf00      	nop
 80195b8:	e7fe      	b.n	80195b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80195ba:	4b1a      	ldr	r3, [pc, #104]	; (8019624 <xTimerGenericCommand+0x98>)
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d02a      	beq.n	8019618 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80195c2:	68bb      	ldr	r3, [r7, #8]
 80195c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80195ce:	68bb      	ldr	r3, [r7, #8]
 80195d0:	2b05      	cmp	r3, #5
 80195d2:	dc18      	bgt.n	8019606 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80195d4:	f7ff fd90 	bl	80190f8 <xTaskGetSchedulerState>
 80195d8:	4603      	mov	r3, r0
 80195da:	2b02      	cmp	r3, #2
 80195dc:	d109      	bne.n	80195f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80195de:	4b11      	ldr	r3, [pc, #68]	; (8019624 <xTimerGenericCommand+0x98>)
 80195e0:	6818      	ldr	r0, [r3, #0]
 80195e2:	f107 0110 	add.w	r1, r7, #16
 80195e6:	2300      	movs	r3, #0
 80195e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195ea:	f7fe f985 	bl	80178f8 <xQueueGenericSend>
 80195ee:	6278      	str	r0, [r7, #36]	; 0x24
 80195f0:	e012      	b.n	8019618 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80195f2:	4b0c      	ldr	r3, [pc, #48]	; (8019624 <xTimerGenericCommand+0x98>)
 80195f4:	6818      	ldr	r0, [r3, #0]
 80195f6:	f107 0110 	add.w	r1, r7, #16
 80195fa:	2300      	movs	r3, #0
 80195fc:	2200      	movs	r2, #0
 80195fe:	f7fe f97b 	bl	80178f8 <xQueueGenericSend>
 8019602:	6278      	str	r0, [r7, #36]	; 0x24
 8019604:	e008      	b.n	8019618 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019606:	4b07      	ldr	r3, [pc, #28]	; (8019624 <xTimerGenericCommand+0x98>)
 8019608:	6818      	ldr	r0, [r3, #0]
 801960a:	f107 0110 	add.w	r1, r7, #16
 801960e:	2300      	movs	r3, #0
 8019610:	683a      	ldr	r2, [r7, #0]
 8019612:	f7fe fa6f 	bl	8017af4 <xQueueGenericSendFromISR>
 8019616:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801961a:	4618      	mov	r0, r3
 801961c:	3728      	adds	r7, #40	; 0x28
 801961e:	46bd      	mov	sp, r7
 8019620:	bd80      	pop	{r7, pc}
 8019622:	bf00      	nop
 8019624:	20003024 	.word	0x20003024

08019628 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b088      	sub	sp, #32
 801962c:	af02      	add	r7, sp, #8
 801962e:	6078      	str	r0, [r7, #4]
 8019630:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019632:	4b22      	ldr	r3, [pc, #136]	; (80196bc <prvProcessExpiredTimer+0x94>)
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	68db      	ldr	r3, [r3, #12]
 8019638:	68db      	ldr	r3, [r3, #12]
 801963a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801963c:	697b      	ldr	r3, [r7, #20]
 801963e:	3304      	adds	r3, #4
 8019640:	4618      	mov	r0, r3
 8019642:	f7fd fff1 	bl	8017628 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019646:	697b      	ldr	r3, [r7, #20]
 8019648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801964c:	f003 0304 	and.w	r3, r3, #4
 8019650:	2b00      	cmp	r3, #0
 8019652:	d022      	beq.n	801969a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019654:	697b      	ldr	r3, [r7, #20]
 8019656:	699a      	ldr	r2, [r3, #24]
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	18d1      	adds	r1, r2, r3
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	683a      	ldr	r2, [r7, #0]
 8019660:	6978      	ldr	r0, [r7, #20]
 8019662:	f000 f8d1 	bl	8019808 <prvInsertTimerInActiveList>
 8019666:	4603      	mov	r3, r0
 8019668:	2b00      	cmp	r3, #0
 801966a:	d01f      	beq.n	80196ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801966c:	2300      	movs	r3, #0
 801966e:	9300      	str	r3, [sp, #0]
 8019670:	2300      	movs	r3, #0
 8019672:	687a      	ldr	r2, [r7, #4]
 8019674:	2100      	movs	r1, #0
 8019676:	6978      	ldr	r0, [r7, #20]
 8019678:	f7ff ff88 	bl	801958c <xTimerGenericCommand>
 801967c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801967e:	693b      	ldr	r3, [r7, #16]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d113      	bne.n	80196ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019688:	f383 8811 	msr	BASEPRI, r3
 801968c:	f3bf 8f6f 	isb	sy
 8019690:	f3bf 8f4f 	dsb	sy
 8019694:	60fb      	str	r3, [r7, #12]
}
 8019696:	bf00      	nop
 8019698:	e7fe      	b.n	8019698 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801969a:	697b      	ldr	r3, [r7, #20]
 801969c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80196a0:	f023 0301 	bic.w	r3, r3, #1
 80196a4:	b2da      	uxtb	r2, r3
 80196a6:	697b      	ldr	r3, [r7, #20]
 80196a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	6a1b      	ldr	r3, [r3, #32]
 80196b0:	6978      	ldr	r0, [r7, #20]
 80196b2:	4798      	blx	r3
}
 80196b4:	bf00      	nop
 80196b6:	3718      	adds	r7, #24
 80196b8:	46bd      	mov	sp, r7
 80196ba:	bd80      	pop	{r7, pc}
 80196bc:	2000301c 	.word	0x2000301c

080196c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b084      	sub	sp, #16
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80196c8:	f107 0308 	add.w	r3, r7, #8
 80196cc:	4618      	mov	r0, r3
 80196ce:	f000 f857 	bl	8019780 <prvGetNextExpireTime>
 80196d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80196d4:	68bb      	ldr	r3, [r7, #8]
 80196d6:	4619      	mov	r1, r3
 80196d8:	68f8      	ldr	r0, [r7, #12]
 80196da:	f000 f803 	bl	80196e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80196de:	f000 f8d5 	bl	801988c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80196e2:	e7f1      	b.n	80196c8 <prvTimerTask+0x8>

080196e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	b084      	sub	sp, #16
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
 80196ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80196ee:	f7ff f855 	bl	801879c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80196f2:	f107 0308 	add.w	r3, r7, #8
 80196f6:	4618      	mov	r0, r3
 80196f8:	f000 f866 	bl	80197c8 <prvSampleTimeNow>
 80196fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d130      	bne.n	8019766 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019704:	683b      	ldr	r3, [r7, #0]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d10a      	bne.n	8019720 <prvProcessTimerOrBlockTask+0x3c>
 801970a:	687a      	ldr	r2, [r7, #4]
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	429a      	cmp	r2, r3
 8019710:	d806      	bhi.n	8019720 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019712:	f7ff f851 	bl	80187b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019716:	68f9      	ldr	r1, [r7, #12]
 8019718:	6878      	ldr	r0, [r7, #4]
 801971a:	f7ff ff85 	bl	8019628 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801971e:	e024      	b.n	801976a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019720:	683b      	ldr	r3, [r7, #0]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d008      	beq.n	8019738 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019726:	4b13      	ldr	r3, [pc, #76]	; (8019774 <prvProcessTimerOrBlockTask+0x90>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d101      	bne.n	8019734 <prvProcessTimerOrBlockTask+0x50>
 8019730:	2301      	movs	r3, #1
 8019732:	e000      	b.n	8019736 <prvProcessTimerOrBlockTask+0x52>
 8019734:	2300      	movs	r3, #0
 8019736:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019738:	4b0f      	ldr	r3, [pc, #60]	; (8019778 <prvProcessTimerOrBlockTask+0x94>)
 801973a:	6818      	ldr	r0, [r3, #0]
 801973c:	687a      	ldr	r2, [r7, #4]
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	1ad3      	subs	r3, r2, r3
 8019742:	683a      	ldr	r2, [r7, #0]
 8019744:	4619      	mov	r1, r3
 8019746:	f7fe fd17 	bl	8018178 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801974a:	f7ff f835 	bl	80187b8 <xTaskResumeAll>
 801974e:	4603      	mov	r3, r0
 8019750:	2b00      	cmp	r3, #0
 8019752:	d10a      	bne.n	801976a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019754:	4b09      	ldr	r3, [pc, #36]	; (801977c <prvProcessTimerOrBlockTask+0x98>)
 8019756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801975a:	601a      	str	r2, [r3, #0]
 801975c:	f3bf 8f4f 	dsb	sy
 8019760:	f3bf 8f6f 	isb	sy
}
 8019764:	e001      	b.n	801976a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019766:	f7ff f827 	bl	80187b8 <xTaskResumeAll>
}
 801976a:	bf00      	nop
 801976c:	3710      	adds	r7, #16
 801976e:	46bd      	mov	sp, r7
 8019770:	bd80      	pop	{r7, pc}
 8019772:	bf00      	nop
 8019774:	20003020 	.word	0x20003020
 8019778:	20003024 	.word	0x20003024
 801977c:	e000ed04 	.word	0xe000ed04

08019780 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019780:	b480      	push	{r7}
 8019782:	b085      	sub	sp, #20
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019788:	4b0e      	ldr	r3, [pc, #56]	; (80197c4 <prvGetNextExpireTime+0x44>)
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	2b00      	cmp	r3, #0
 8019790:	d101      	bne.n	8019796 <prvGetNextExpireTime+0x16>
 8019792:	2201      	movs	r2, #1
 8019794:	e000      	b.n	8019798 <prvGetNextExpireTime+0x18>
 8019796:	2200      	movs	r2, #0
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d105      	bne.n	80197b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80197a4:	4b07      	ldr	r3, [pc, #28]	; (80197c4 <prvGetNextExpireTime+0x44>)
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	68db      	ldr	r3, [r3, #12]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	60fb      	str	r3, [r7, #12]
 80197ae:	e001      	b.n	80197b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80197b0:	2300      	movs	r3, #0
 80197b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80197b4:	68fb      	ldr	r3, [r7, #12]
}
 80197b6:	4618      	mov	r0, r3
 80197b8:	3714      	adds	r7, #20
 80197ba:	46bd      	mov	sp, r7
 80197bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c0:	4770      	bx	lr
 80197c2:	bf00      	nop
 80197c4:	2000301c 	.word	0x2000301c

080197c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b084      	sub	sp, #16
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80197d0:	f7ff f88e 	bl	80188f0 <xTaskGetTickCount>
 80197d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80197d6:	4b0b      	ldr	r3, [pc, #44]	; (8019804 <prvSampleTimeNow+0x3c>)
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	68fa      	ldr	r2, [r7, #12]
 80197dc:	429a      	cmp	r2, r3
 80197de:	d205      	bcs.n	80197ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80197e0:	f000 f936 	bl	8019a50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	2201      	movs	r2, #1
 80197e8:	601a      	str	r2, [r3, #0]
 80197ea:	e002      	b.n	80197f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	2200      	movs	r2, #0
 80197f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80197f2:	4a04      	ldr	r2, [pc, #16]	; (8019804 <prvSampleTimeNow+0x3c>)
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80197f8:	68fb      	ldr	r3, [r7, #12]
}
 80197fa:	4618      	mov	r0, r3
 80197fc:	3710      	adds	r7, #16
 80197fe:	46bd      	mov	sp, r7
 8019800:	bd80      	pop	{r7, pc}
 8019802:	bf00      	nop
 8019804:	2000302c 	.word	0x2000302c

08019808 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b086      	sub	sp, #24
 801980c:	af00      	add	r7, sp, #0
 801980e:	60f8      	str	r0, [r7, #12]
 8019810:	60b9      	str	r1, [r7, #8]
 8019812:	607a      	str	r2, [r7, #4]
 8019814:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019816:	2300      	movs	r3, #0
 8019818:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	68ba      	ldr	r2, [r7, #8]
 801981e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	68fa      	ldr	r2, [r7, #12]
 8019824:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019826:	68ba      	ldr	r2, [r7, #8]
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	429a      	cmp	r2, r3
 801982c:	d812      	bhi.n	8019854 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801982e:	687a      	ldr	r2, [r7, #4]
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	1ad2      	subs	r2, r2, r3
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	699b      	ldr	r3, [r3, #24]
 8019838:	429a      	cmp	r2, r3
 801983a:	d302      	bcc.n	8019842 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801983c:	2301      	movs	r3, #1
 801983e:	617b      	str	r3, [r7, #20]
 8019840:	e01b      	b.n	801987a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019842:	4b10      	ldr	r3, [pc, #64]	; (8019884 <prvInsertTimerInActiveList+0x7c>)
 8019844:	681a      	ldr	r2, [r3, #0]
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	3304      	adds	r3, #4
 801984a:	4619      	mov	r1, r3
 801984c:	4610      	mov	r0, r2
 801984e:	f7fd feb2 	bl	80175b6 <vListInsert>
 8019852:	e012      	b.n	801987a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019854:	687a      	ldr	r2, [r7, #4]
 8019856:	683b      	ldr	r3, [r7, #0]
 8019858:	429a      	cmp	r2, r3
 801985a:	d206      	bcs.n	801986a <prvInsertTimerInActiveList+0x62>
 801985c:	68ba      	ldr	r2, [r7, #8]
 801985e:	683b      	ldr	r3, [r7, #0]
 8019860:	429a      	cmp	r2, r3
 8019862:	d302      	bcc.n	801986a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019864:	2301      	movs	r3, #1
 8019866:	617b      	str	r3, [r7, #20]
 8019868:	e007      	b.n	801987a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801986a:	4b07      	ldr	r3, [pc, #28]	; (8019888 <prvInsertTimerInActiveList+0x80>)
 801986c:	681a      	ldr	r2, [r3, #0]
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	3304      	adds	r3, #4
 8019872:	4619      	mov	r1, r3
 8019874:	4610      	mov	r0, r2
 8019876:	f7fd fe9e 	bl	80175b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801987a:	697b      	ldr	r3, [r7, #20]
}
 801987c:	4618      	mov	r0, r3
 801987e:	3718      	adds	r7, #24
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}
 8019884:	20003020 	.word	0x20003020
 8019888:	2000301c 	.word	0x2000301c

0801988c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b08e      	sub	sp, #56	; 0x38
 8019890:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019892:	e0ca      	b.n	8019a2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2b00      	cmp	r3, #0
 8019898:	da18      	bge.n	80198cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801989a:	1d3b      	adds	r3, r7, #4
 801989c:	3304      	adds	r3, #4
 801989e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80198a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d10a      	bne.n	80198bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80198a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198aa:	f383 8811 	msr	BASEPRI, r3
 80198ae:	f3bf 8f6f 	isb	sy
 80198b2:	f3bf 8f4f 	dsb	sy
 80198b6:	61fb      	str	r3, [r7, #28]
}
 80198b8:	bf00      	nop
 80198ba:	e7fe      	b.n	80198ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80198bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80198c2:	6850      	ldr	r0, [r2, #4]
 80198c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80198c6:	6892      	ldr	r2, [r2, #8]
 80198c8:	4611      	mov	r1, r2
 80198ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	f2c0 80aa 	blt.w	8019a28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80198d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198da:	695b      	ldr	r3, [r3, #20]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d004      	beq.n	80198ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80198e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198e2:	3304      	adds	r3, #4
 80198e4:	4618      	mov	r0, r3
 80198e6:	f7fd fe9f 	bl	8017628 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80198ea:	463b      	mov	r3, r7
 80198ec:	4618      	mov	r0, r3
 80198ee:	f7ff ff6b 	bl	80197c8 <prvSampleTimeNow>
 80198f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	2b09      	cmp	r3, #9
 80198f8:	f200 8097 	bhi.w	8019a2a <prvProcessReceivedCommands+0x19e>
 80198fc:	a201      	add	r2, pc, #4	; (adr r2, 8019904 <prvProcessReceivedCommands+0x78>)
 80198fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019902:	bf00      	nop
 8019904:	0801992d 	.word	0x0801992d
 8019908:	0801992d 	.word	0x0801992d
 801990c:	0801992d 	.word	0x0801992d
 8019910:	080199a1 	.word	0x080199a1
 8019914:	080199b5 	.word	0x080199b5
 8019918:	080199ff 	.word	0x080199ff
 801991c:	0801992d 	.word	0x0801992d
 8019920:	0801992d 	.word	0x0801992d
 8019924:	080199a1 	.word	0x080199a1
 8019928:	080199b5 	.word	0x080199b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801992e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019932:	f043 0301 	orr.w	r3, r3, #1
 8019936:	b2da      	uxtb	r2, r3
 8019938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801993a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801993e:	68ba      	ldr	r2, [r7, #8]
 8019940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019942:	699b      	ldr	r3, [r3, #24]
 8019944:	18d1      	adds	r1, r2, r3
 8019946:	68bb      	ldr	r3, [r7, #8]
 8019948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801994a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801994c:	f7ff ff5c 	bl	8019808 <prvInsertTimerInActiveList>
 8019950:	4603      	mov	r3, r0
 8019952:	2b00      	cmp	r3, #0
 8019954:	d069      	beq.n	8019a2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019958:	6a1b      	ldr	r3, [r3, #32]
 801995a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801995c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019964:	f003 0304 	and.w	r3, r3, #4
 8019968:	2b00      	cmp	r3, #0
 801996a:	d05e      	beq.n	8019a2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801996c:	68ba      	ldr	r2, [r7, #8]
 801996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019970:	699b      	ldr	r3, [r3, #24]
 8019972:	441a      	add	r2, r3
 8019974:	2300      	movs	r3, #0
 8019976:	9300      	str	r3, [sp, #0]
 8019978:	2300      	movs	r3, #0
 801997a:	2100      	movs	r1, #0
 801997c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801997e:	f7ff fe05 	bl	801958c <xTimerGenericCommand>
 8019982:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019984:	6a3b      	ldr	r3, [r7, #32]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d14f      	bne.n	8019a2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801998e:	f383 8811 	msr	BASEPRI, r3
 8019992:	f3bf 8f6f 	isb	sy
 8019996:	f3bf 8f4f 	dsb	sy
 801999a:	61bb      	str	r3, [r7, #24]
}
 801999c:	bf00      	nop
 801999e:	e7fe      	b.n	801999e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80199a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80199a6:	f023 0301 	bic.w	r3, r3, #1
 80199aa:	b2da      	uxtb	r2, r3
 80199ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80199b2:	e03a      	b.n	8019a2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80199b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80199ba:	f043 0301 	orr.w	r3, r3, #1
 80199be:	b2da      	uxtb	r2, r3
 80199c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80199c6:	68ba      	ldr	r2, [r7, #8]
 80199c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80199cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ce:	699b      	ldr	r3, [r3, #24]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d10a      	bne.n	80199ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80199d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199d8:	f383 8811 	msr	BASEPRI, r3
 80199dc:	f3bf 8f6f 	isb	sy
 80199e0:	f3bf 8f4f 	dsb	sy
 80199e4:	617b      	str	r3, [r7, #20]
}
 80199e6:	bf00      	nop
 80199e8:	e7fe      	b.n	80199e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80199ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ec:	699a      	ldr	r2, [r3, #24]
 80199ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f0:	18d1      	adds	r1, r2, r3
 80199f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80199f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80199f8:	f7ff ff06 	bl	8019808 <prvInsertTimerInActiveList>
					break;
 80199fc:	e015      	b.n	8019a2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80199fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019a04:	f003 0302 	and.w	r3, r3, #2
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d103      	bne.n	8019a14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a0e:	f000 fbff 	bl	801a210 <vPortFree>
 8019a12:	e00a      	b.n	8019a2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019a1a:	f023 0301 	bic.w	r3, r3, #1
 8019a1e:	b2da      	uxtb	r2, r3
 8019a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019a26:	e000      	b.n	8019a2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019a28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019a2a:	4b08      	ldr	r3, [pc, #32]	; (8019a4c <prvProcessReceivedCommands+0x1c0>)
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	1d39      	adds	r1, r7, #4
 8019a30:	2200      	movs	r2, #0
 8019a32:	4618      	mov	r0, r3
 8019a34:	f7fe f986 	bl	8017d44 <xQueueReceive>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	f47f af2a 	bne.w	8019894 <prvProcessReceivedCommands+0x8>
	}
}
 8019a40:	bf00      	nop
 8019a42:	bf00      	nop
 8019a44:	3730      	adds	r7, #48	; 0x30
 8019a46:	46bd      	mov	sp, r7
 8019a48:	bd80      	pop	{r7, pc}
 8019a4a:	bf00      	nop
 8019a4c:	20003024 	.word	0x20003024

08019a50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b088      	sub	sp, #32
 8019a54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019a56:	e048      	b.n	8019aea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019a58:	4b2d      	ldr	r3, [pc, #180]	; (8019b10 <prvSwitchTimerLists+0xc0>)
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	68db      	ldr	r3, [r3, #12]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a62:	4b2b      	ldr	r3, [pc, #172]	; (8019b10 <prvSwitchTimerLists+0xc0>)
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	68db      	ldr	r3, [r3, #12]
 8019a68:	68db      	ldr	r3, [r3, #12]
 8019a6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	3304      	adds	r3, #4
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7fd fdd9 	bl	8017628 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	6a1b      	ldr	r3, [r3, #32]
 8019a7a:	68f8      	ldr	r0, [r7, #12]
 8019a7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019a84:	f003 0304 	and.w	r3, r3, #4
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d02e      	beq.n	8019aea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	699b      	ldr	r3, [r3, #24]
 8019a90:	693a      	ldr	r2, [r7, #16]
 8019a92:	4413      	add	r3, r2
 8019a94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019a96:	68ba      	ldr	r2, [r7, #8]
 8019a98:	693b      	ldr	r3, [r7, #16]
 8019a9a:	429a      	cmp	r2, r3
 8019a9c:	d90e      	bls.n	8019abc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	68ba      	ldr	r2, [r7, #8]
 8019aa2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	68fa      	ldr	r2, [r7, #12]
 8019aa8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019aaa:	4b19      	ldr	r3, [pc, #100]	; (8019b10 <prvSwitchTimerLists+0xc0>)
 8019aac:	681a      	ldr	r2, [r3, #0]
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	3304      	adds	r3, #4
 8019ab2:	4619      	mov	r1, r3
 8019ab4:	4610      	mov	r0, r2
 8019ab6:	f7fd fd7e 	bl	80175b6 <vListInsert>
 8019aba:	e016      	b.n	8019aea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019abc:	2300      	movs	r3, #0
 8019abe:	9300      	str	r3, [sp, #0]
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	693a      	ldr	r2, [r7, #16]
 8019ac4:	2100      	movs	r1, #0
 8019ac6:	68f8      	ldr	r0, [r7, #12]
 8019ac8:	f7ff fd60 	bl	801958c <xTimerGenericCommand>
 8019acc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d10a      	bne.n	8019aea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ad8:	f383 8811 	msr	BASEPRI, r3
 8019adc:	f3bf 8f6f 	isb	sy
 8019ae0:	f3bf 8f4f 	dsb	sy
 8019ae4:	603b      	str	r3, [r7, #0]
}
 8019ae6:	bf00      	nop
 8019ae8:	e7fe      	b.n	8019ae8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019aea:	4b09      	ldr	r3, [pc, #36]	; (8019b10 <prvSwitchTimerLists+0xc0>)
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d1b1      	bne.n	8019a58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019af4:	4b06      	ldr	r3, [pc, #24]	; (8019b10 <prvSwitchTimerLists+0xc0>)
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019afa:	4b06      	ldr	r3, [pc, #24]	; (8019b14 <prvSwitchTimerLists+0xc4>)
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	4a04      	ldr	r2, [pc, #16]	; (8019b10 <prvSwitchTimerLists+0xc0>)
 8019b00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019b02:	4a04      	ldr	r2, [pc, #16]	; (8019b14 <prvSwitchTimerLists+0xc4>)
 8019b04:	697b      	ldr	r3, [r7, #20]
 8019b06:	6013      	str	r3, [r2, #0]
}
 8019b08:	bf00      	nop
 8019b0a:	3718      	adds	r7, #24
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	bd80      	pop	{r7, pc}
 8019b10:	2000301c 	.word	0x2000301c
 8019b14:	20003020 	.word	0x20003020

08019b18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019b18:	b580      	push	{r7, lr}
 8019b1a:	b082      	sub	sp, #8
 8019b1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019b1e:	f000 f989 	bl	8019e34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019b22:	4b15      	ldr	r3, [pc, #84]	; (8019b78 <prvCheckForValidListAndQueue+0x60>)
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d120      	bne.n	8019b6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019b2a:	4814      	ldr	r0, [pc, #80]	; (8019b7c <prvCheckForValidListAndQueue+0x64>)
 8019b2c:	f7fd fcf2 	bl	8017514 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019b30:	4813      	ldr	r0, [pc, #76]	; (8019b80 <prvCheckForValidListAndQueue+0x68>)
 8019b32:	f7fd fcef 	bl	8017514 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019b36:	4b13      	ldr	r3, [pc, #76]	; (8019b84 <prvCheckForValidListAndQueue+0x6c>)
 8019b38:	4a10      	ldr	r2, [pc, #64]	; (8019b7c <prvCheckForValidListAndQueue+0x64>)
 8019b3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019b3c:	4b12      	ldr	r3, [pc, #72]	; (8019b88 <prvCheckForValidListAndQueue+0x70>)
 8019b3e:	4a10      	ldr	r2, [pc, #64]	; (8019b80 <prvCheckForValidListAndQueue+0x68>)
 8019b40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019b42:	2300      	movs	r3, #0
 8019b44:	9300      	str	r3, [sp, #0]
 8019b46:	4b11      	ldr	r3, [pc, #68]	; (8019b8c <prvCheckForValidListAndQueue+0x74>)
 8019b48:	4a11      	ldr	r2, [pc, #68]	; (8019b90 <prvCheckForValidListAndQueue+0x78>)
 8019b4a:	2110      	movs	r1, #16
 8019b4c:	200a      	movs	r0, #10
 8019b4e:	f7fd fdfd 	bl	801774c <xQueueGenericCreateStatic>
 8019b52:	4603      	mov	r3, r0
 8019b54:	4a08      	ldr	r2, [pc, #32]	; (8019b78 <prvCheckForValidListAndQueue+0x60>)
 8019b56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019b58:	4b07      	ldr	r3, [pc, #28]	; (8019b78 <prvCheckForValidListAndQueue+0x60>)
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d005      	beq.n	8019b6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019b60:	4b05      	ldr	r3, [pc, #20]	; (8019b78 <prvCheckForValidListAndQueue+0x60>)
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	490b      	ldr	r1, [pc, #44]	; (8019b94 <prvCheckForValidListAndQueue+0x7c>)
 8019b66:	4618      	mov	r0, r3
 8019b68:	f7fe fadc 	bl	8018124 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019b6c:	f000 f992 	bl	8019e94 <vPortExitCritical>
}
 8019b70:	bf00      	nop
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd80      	pop	{r7, pc}
 8019b76:	bf00      	nop
 8019b78:	20003024 	.word	0x20003024
 8019b7c:	20002ff4 	.word	0x20002ff4
 8019b80:	20003008 	.word	0x20003008
 8019b84:	2000301c 	.word	0x2000301c
 8019b88:	20003020 	.word	0x20003020
 8019b8c:	200030d0 	.word	0x200030d0
 8019b90:	20003030 	.word	0x20003030
 8019b94:	080217e4 	.word	0x080217e4

08019b98 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b08a      	sub	sp, #40	; 0x28
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	60f8      	str	r0, [r7, #12]
 8019ba0:	60b9      	str	r1, [r7, #8]
 8019ba2:	607a      	str	r2, [r7, #4]
 8019ba4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019ba6:	f06f 0301 	mvn.w	r3, #1
 8019baa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019bb0:	68bb      	ldr	r3, [r7, #8]
 8019bb2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019bb8:	4b06      	ldr	r3, [pc, #24]	; (8019bd4 <xTimerPendFunctionCallFromISR+0x3c>)
 8019bba:	6818      	ldr	r0, [r3, #0]
 8019bbc:	f107 0114 	add.w	r1, r7, #20
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	683a      	ldr	r2, [r7, #0]
 8019bc4:	f7fd ff96 	bl	8017af4 <xQueueGenericSendFromISR>
 8019bc8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019bcc:	4618      	mov	r0, r3
 8019bce:	3728      	adds	r7, #40	; 0x28
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd80      	pop	{r7, pc}
 8019bd4:	20003024 	.word	0x20003024

08019bd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019bd8:	b480      	push	{r7}
 8019bda:	b085      	sub	sp, #20
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	60f8      	str	r0, [r7, #12]
 8019be0:	60b9      	str	r1, [r7, #8]
 8019be2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	3b04      	subs	r3, #4
 8019be8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	3b04      	subs	r3, #4
 8019bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	f023 0201 	bic.w	r2, r3, #1
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	3b04      	subs	r3, #4
 8019c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019c08:	4a0c      	ldr	r2, [pc, #48]	; (8019c3c <pxPortInitialiseStack+0x64>)
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	3b14      	subs	r3, #20
 8019c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019c14:	687a      	ldr	r2, [r7, #4]
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	3b04      	subs	r3, #4
 8019c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	f06f 0202 	mvn.w	r2, #2
 8019c26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	3b20      	subs	r3, #32
 8019c2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
}
 8019c30:	4618      	mov	r0, r3
 8019c32:	3714      	adds	r7, #20
 8019c34:	46bd      	mov	sp, r7
 8019c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3a:	4770      	bx	lr
 8019c3c:	08019c41 	.word	0x08019c41

08019c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019c40:	b480      	push	{r7}
 8019c42:	b085      	sub	sp, #20
 8019c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019c46:	2300      	movs	r3, #0
 8019c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019c4a:	4b12      	ldr	r3, [pc, #72]	; (8019c94 <prvTaskExitError+0x54>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c52:	d00a      	beq.n	8019c6a <prvTaskExitError+0x2a>
	__asm volatile
 8019c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c58:	f383 8811 	msr	BASEPRI, r3
 8019c5c:	f3bf 8f6f 	isb	sy
 8019c60:	f3bf 8f4f 	dsb	sy
 8019c64:	60fb      	str	r3, [r7, #12]
}
 8019c66:	bf00      	nop
 8019c68:	e7fe      	b.n	8019c68 <prvTaskExitError+0x28>
	__asm volatile
 8019c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c6e:	f383 8811 	msr	BASEPRI, r3
 8019c72:	f3bf 8f6f 	isb	sy
 8019c76:	f3bf 8f4f 	dsb	sy
 8019c7a:	60bb      	str	r3, [r7, #8]
}
 8019c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019c7e:	bf00      	nop
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d0fc      	beq.n	8019c80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019c86:	bf00      	nop
 8019c88:	bf00      	nop
 8019c8a:	3714      	adds	r7, #20
 8019c8c:	46bd      	mov	sp, r7
 8019c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c92:	4770      	bx	lr
 8019c94:	200000a4 	.word	0x200000a4
	...

08019ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019ca0:	4b07      	ldr	r3, [pc, #28]	; (8019cc0 <pxCurrentTCBConst2>)
 8019ca2:	6819      	ldr	r1, [r3, #0]
 8019ca4:	6808      	ldr	r0, [r1, #0]
 8019ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019caa:	f380 8809 	msr	PSP, r0
 8019cae:	f3bf 8f6f 	isb	sy
 8019cb2:	f04f 0000 	mov.w	r0, #0
 8019cb6:	f380 8811 	msr	BASEPRI, r0
 8019cba:	4770      	bx	lr
 8019cbc:	f3af 8000 	nop.w

08019cc0 <pxCurrentTCBConst2>:
 8019cc0:	20002e20 	.word	0x20002e20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019cc4:	bf00      	nop
 8019cc6:	bf00      	nop

08019cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019cc8:	4808      	ldr	r0, [pc, #32]	; (8019cec <prvPortStartFirstTask+0x24>)
 8019cca:	6800      	ldr	r0, [r0, #0]
 8019ccc:	6800      	ldr	r0, [r0, #0]
 8019cce:	f380 8808 	msr	MSP, r0
 8019cd2:	f04f 0000 	mov.w	r0, #0
 8019cd6:	f380 8814 	msr	CONTROL, r0
 8019cda:	b662      	cpsie	i
 8019cdc:	b661      	cpsie	f
 8019cde:	f3bf 8f4f 	dsb	sy
 8019ce2:	f3bf 8f6f 	isb	sy
 8019ce6:	df00      	svc	0
 8019ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019cea:	bf00      	nop
 8019cec:	e000ed08 	.word	0xe000ed08

08019cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b086      	sub	sp, #24
 8019cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019cf6:	4b46      	ldr	r3, [pc, #280]	; (8019e10 <xPortStartScheduler+0x120>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	4a46      	ldr	r2, [pc, #280]	; (8019e14 <xPortStartScheduler+0x124>)
 8019cfc:	4293      	cmp	r3, r2
 8019cfe:	d10a      	bne.n	8019d16 <xPortStartScheduler+0x26>
	__asm volatile
 8019d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d04:	f383 8811 	msr	BASEPRI, r3
 8019d08:	f3bf 8f6f 	isb	sy
 8019d0c:	f3bf 8f4f 	dsb	sy
 8019d10:	613b      	str	r3, [r7, #16]
}
 8019d12:	bf00      	nop
 8019d14:	e7fe      	b.n	8019d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019d16:	4b3e      	ldr	r3, [pc, #248]	; (8019e10 <xPortStartScheduler+0x120>)
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	4a3f      	ldr	r2, [pc, #252]	; (8019e18 <xPortStartScheduler+0x128>)
 8019d1c:	4293      	cmp	r3, r2
 8019d1e:	d10a      	bne.n	8019d36 <xPortStartScheduler+0x46>
	__asm volatile
 8019d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d24:	f383 8811 	msr	BASEPRI, r3
 8019d28:	f3bf 8f6f 	isb	sy
 8019d2c:	f3bf 8f4f 	dsb	sy
 8019d30:	60fb      	str	r3, [r7, #12]
}
 8019d32:	bf00      	nop
 8019d34:	e7fe      	b.n	8019d34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019d36:	4b39      	ldr	r3, [pc, #228]	; (8019e1c <xPortStartScheduler+0x12c>)
 8019d38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019d3a:	697b      	ldr	r3, [r7, #20]
 8019d3c:	781b      	ldrb	r3, [r3, #0]
 8019d3e:	b2db      	uxtb	r3, r3
 8019d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019d42:	697b      	ldr	r3, [r7, #20]
 8019d44:	22ff      	movs	r2, #255	; 0xff
 8019d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019d48:	697b      	ldr	r3, [r7, #20]
 8019d4a:	781b      	ldrb	r3, [r3, #0]
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019d50:	78fb      	ldrb	r3, [r7, #3]
 8019d52:	b2db      	uxtb	r3, r3
 8019d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019d58:	b2da      	uxtb	r2, r3
 8019d5a:	4b31      	ldr	r3, [pc, #196]	; (8019e20 <xPortStartScheduler+0x130>)
 8019d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019d5e:	4b31      	ldr	r3, [pc, #196]	; (8019e24 <xPortStartScheduler+0x134>)
 8019d60:	2207      	movs	r2, #7
 8019d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019d64:	e009      	b.n	8019d7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019d66:	4b2f      	ldr	r3, [pc, #188]	; (8019e24 <xPortStartScheduler+0x134>)
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	3b01      	subs	r3, #1
 8019d6c:	4a2d      	ldr	r2, [pc, #180]	; (8019e24 <xPortStartScheduler+0x134>)
 8019d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019d70:	78fb      	ldrb	r3, [r7, #3]
 8019d72:	b2db      	uxtb	r3, r3
 8019d74:	005b      	lsls	r3, r3, #1
 8019d76:	b2db      	uxtb	r3, r3
 8019d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019d7a:	78fb      	ldrb	r3, [r7, #3]
 8019d7c:	b2db      	uxtb	r3, r3
 8019d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019d82:	2b80      	cmp	r3, #128	; 0x80
 8019d84:	d0ef      	beq.n	8019d66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019d86:	4b27      	ldr	r3, [pc, #156]	; (8019e24 <xPortStartScheduler+0x134>)
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	f1c3 0307 	rsb	r3, r3, #7
 8019d8e:	2b04      	cmp	r3, #4
 8019d90:	d00a      	beq.n	8019da8 <xPortStartScheduler+0xb8>
	__asm volatile
 8019d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d96:	f383 8811 	msr	BASEPRI, r3
 8019d9a:	f3bf 8f6f 	isb	sy
 8019d9e:	f3bf 8f4f 	dsb	sy
 8019da2:	60bb      	str	r3, [r7, #8]
}
 8019da4:	bf00      	nop
 8019da6:	e7fe      	b.n	8019da6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019da8:	4b1e      	ldr	r3, [pc, #120]	; (8019e24 <xPortStartScheduler+0x134>)
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	021b      	lsls	r3, r3, #8
 8019dae:	4a1d      	ldr	r2, [pc, #116]	; (8019e24 <xPortStartScheduler+0x134>)
 8019db0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019db2:	4b1c      	ldr	r3, [pc, #112]	; (8019e24 <xPortStartScheduler+0x134>)
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8019dba:	4a1a      	ldr	r2, [pc, #104]	; (8019e24 <xPortStartScheduler+0x134>)
 8019dbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	b2da      	uxtb	r2, r3
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019dc6:	4b18      	ldr	r3, [pc, #96]	; (8019e28 <xPortStartScheduler+0x138>)
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	4a17      	ldr	r2, [pc, #92]	; (8019e28 <xPortStartScheduler+0x138>)
 8019dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019dd2:	4b15      	ldr	r3, [pc, #84]	; (8019e28 <xPortStartScheduler+0x138>)
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	4a14      	ldr	r2, [pc, #80]	; (8019e28 <xPortStartScheduler+0x138>)
 8019dd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8019ddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019dde:	f000 f8dd 	bl	8019f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019de2:	4b12      	ldr	r3, [pc, #72]	; (8019e2c <xPortStartScheduler+0x13c>)
 8019de4:	2200      	movs	r2, #0
 8019de6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019de8:	f000 f8fc 	bl	8019fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019dec:	4b10      	ldr	r3, [pc, #64]	; (8019e30 <xPortStartScheduler+0x140>)
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	4a0f      	ldr	r2, [pc, #60]	; (8019e30 <xPortStartScheduler+0x140>)
 8019df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019df6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019df8:	f7ff ff66 	bl	8019cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019dfc:	f7fe fe40 	bl	8018a80 <vTaskSwitchContext>
	prvTaskExitError();
 8019e00:	f7ff ff1e 	bl	8019c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019e04:	2300      	movs	r3, #0
}
 8019e06:	4618      	mov	r0, r3
 8019e08:	3718      	adds	r7, #24
 8019e0a:	46bd      	mov	sp, r7
 8019e0c:	bd80      	pop	{r7, pc}
 8019e0e:	bf00      	nop
 8019e10:	e000ed00 	.word	0xe000ed00
 8019e14:	410fc271 	.word	0x410fc271
 8019e18:	410fc270 	.word	0x410fc270
 8019e1c:	e000e400 	.word	0xe000e400
 8019e20:	20003120 	.word	0x20003120
 8019e24:	20003124 	.word	0x20003124
 8019e28:	e000ed20 	.word	0xe000ed20
 8019e2c:	200000a4 	.word	0x200000a4
 8019e30:	e000ef34 	.word	0xe000ef34

08019e34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019e34:	b480      	push	{r7}
 8019e36:	b083      	sub	sp, #12
 8019e38:	af00      	add	r7, sp, #0
	__asm volatile
 8019e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e3e:	f383 8811 	msr	BASEPRI, r3
 8019e42:	f3bf 8f6f 	isb	sy
 8019e46:	f3bf 8f4f 	dsb	sy
 8019e4a:	607b      	str	r3, [r7, #4]
}
 8019e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019e4e:	4b0f      	ldr	r3, [pc, #60]	; (8019e8c <vPortEnterCritical+0x58>)
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	3301      	adds	r3, #1
 8019e54:	4a0d      	ldr	r2, [pc, #52]	; (8019e8c <vPortEnterCritical+0x58>)
 8019e56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019e58:	4b0c      	ldr	r3, [pc, #48]	; (8019e8c <vPortEnterCritical+0x58>)
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	2b01      	cmp	r3, #1
 8019e5e:	d10f      	bne.n	8019e80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019e60:	4b0b      	ldr	r3, [pc, #44]	; (8019e90 <vPortEnterCritical+0x5c>)
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	b2db      	uxtb	r3, r3
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d00a      	beq.n	8019e80 <vPortEnterCritical+0x4c>
	__asm volatile
 8019e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e6e:	f383 8811 	msr	BASEPRI, r3
 8019e72:	f3bf 8f6f 	isb	sy
 8019e76:	f3bf 8f4f 	dsb	sy
 8019e7a:	603b      	str	r3, [r7, #0]
}
 8019e7c:	bf00      	nop
 8019e7e:	e7fe      	b.n	8019e7e <vPortEnterCritical+0x4a>
	}
}
 8019e80:	bf00      	nop
 8019e82:	370c      	adds	r7, #12
 8019e84:	46bd      	mov	sp, r7
 8019e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8a:	4770      	bx	lr
 8019e8c:	200000a4 	.word	0x200000a4
 8019e90:	e000ed04 	.word	0xe000ed04

08019e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019e94:	b480      	push	{r7}
 8019e96:	b083      	sub	sp, #12
 8019e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019e9a:	4b12      	ldr	r3, [pc, #72]	; (8019ee4 <vPortExitCritical+0x50>)
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d10a      	bne.n	8019eb8 <vPortExitCritical+0x24>
	__asm volatile
 8019ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ea6:	f383 8811 	msr	BASEPRI, r3
 8019eaa:	f3bf 8f6f 	isb	sy
 8019eae:	f3bf 8f4f 	dsb	sy
 8019eb2:	607b      	str	r3, [r7, #4]
}
 8019eb4:	bf00      	nop
 8019eb6:	e7fe      	b.n	8019eb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019eb8:	4b0a      	ldr	r3, [pc, #40]	; (8019ee4 <vPortExitCritical+0x50>)
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	3b01      	subs	r3, #1
 8019ebe:	4a09      	ldr	r2, [pc, #36]	; (8019ee4 <vPortExitCritical+0x50>)
 8019ec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019ec2:	4b08      	ldr	r3, [pc, #32]	; (8019ee4 <vPortExitCritical+0x50>)
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d105      	bne.n	8019ed6 <vPortExitCritical+0x42>
 8019eca:	2300      	movs	r3, #0
 8019ecc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	f383 8811 	msr	BASEPRI, r3
}
 8019ed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019ed6:	bf00      	nop
 8019ed8:	370c      	adds	r7, #12
 8019eda:	46bd      	mov	sp, r7
 8019edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ee0:	4770      	bx	lr
 8019ee2:	bf00      	nop
 8019ee4:	200000a4 	.word	0x200000a4
	...

08019ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019ef0:	f3ef 8009 	mrs	r0, PSP
 8019ef4:	f3bf 8f6f 	isb	sy
 8019ef8:	4b15      	ldr	r3, [pc, #84]	; (8019f50 <pxCurrentTCBConst>)
 8019efa:	681a      	ldr	r2, [r3, #0]
 8019efc:	f01e 0f10 	tst.w	lr, #16
 8019f00:	bf08      	it	eq
 8019f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f0a:	6010      	str	r0, [r2, #0]
 8019f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019f14:	f380 8811 	msr	BASEPRI, r0
 8019f18:	f3bf 8f4f 	dsb	sy
 8019f1c:	f3bf 8f6f 	isb	sy
 8019f20:	f7fe fdae 	bl	8018a80 <vTaskSwitchContext>
 8019f24:	f04f 0000 	mov.w	r0, #0
 8019f28:	f380 8811 	msr	BASEPRI, r0
 8019f2c:	bc09      	pop	{r0, r3}
 8019f2e:	6819      	ldr	r1, [r3, #0]
 8019f30:	6808      	ldr	r0, [r1, #0]
 8019f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f36:	f01e 0f10 	tst.w	lr, #16
 8019f3a:	bf08      	it	eq
 8019f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019f40:	f380 8809 	msr	PSP, r0
 8019f44:	f3bf 8f6f 	isb	sy
 8019f48:	4770      	bx	lr
 8019f4a:	bf00      	nop
 8019f4c:	f3af 8000 	nop.w

08019f50 <pxCurrentTCBConst>:
 8019f50:	20002e20 	.word	0x20002e20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019f54:	bf00      	nop
 8019f56:	bf00      	nop

08019f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b082      	sub	sp, #8
 8019f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8019f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f62:	f383 8811 	msr	BASEPRI, r3
 8019f66:	f3bf 8f6f 	isb	sy
 8019f6a:	f3bf 8f4f 	dsb	sy
 8019f6e:	607b      	str	r3, [r7, #4]
}
 8019f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019f72:	f7fe fccd 	bl	8018910 <xTaskIncrementTick>
 8019f76:	4603      	mov	r3, r0
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d003      	beq.n	8019f84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019f7c:	4b06      	ldr	r3, [pc, #24]	; (8019f98 <SysTick_Handler+0x40>)
 8019f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f82:	601a      	str	r2, [r3, #0]
 8019f84:	2300      	movs	r3, #0
 8019f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019f88:	683b      	ldr	r3, [r7, #0]
 8019f8a:	f383 8811 	msr	BASEPRI, r3
}
 8019f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019f90:	bf00      	nop
 8019f92:	3708      	adds	r7, #8
 8019f94:	46bd      	mov	sp, r7
 8019f96:	bd80      	pop	{r7, pc}
 8019f98:	e000ed04 	.word	0xe000ed04

08019f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019f9c:	b480      	push	{r7}
 8019f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019fa0:	4b0b      	ldr	r3, [pc, #44]	; (8019fd0 <vPortSetupTimerInterrupt+0x34>)
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019fa6:	4b0b      	ldr	r3, [pc, #44]	; (8019fd4 <vPortSetupTimerInterrupt+0x38>)
 8019fa8:	2200      	movs	r2, #0
 8019faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019fac:	4b0a      	ldr	r3, [pc, #40]	; (8019fd8 <vPortSetupTimerInterrupt+0x3c>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	4a0a      	ldr	r2, [pc, #40]	; (8019fdc <vPortSetupTimerInterrupt+0x40>)
 8019fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8019fb6:	099b      	lsrs	r3, r3, #6
 8019fb8:	4a09      	ldr	r2, [pc, #36]	; (8019fe0 <vPortSetupTimerInterrupt+0x44>)
 8019fba:	3b01      	subs	r3, #1
 8019fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019fbe:	4b04      	ldr	r3, [pc, #16]	; (8019fd0 <vPortSetupTimerInterrupt+0x34>)
 8019fc0:	2207      	movs	r2, #7
 8019fc2:	601a      	str	r2, [r3, #0]
}
 8019fc4:	bf00      	nop
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fcc:	4770      	bx	lr
 8019fce:	bf00      	nop
 8019fd0:	e000e010 	.word	0xe000e010
 8019fd4:	e000e018 	.word	0xe000e018
 8019fd8:	20000004 	.word	0x20000004
 8019fdc:	10624dd3 	.word	0x10624dd3
 8019fe0:	e000e014 	.word	0xe000e014

08019fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019ff4 <vPortEnableVFP+0x10>
 8019fe8:	6801      	ldr	r1, [r0, #0]
 8019fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019fee:	6001      	str	r1, [r0, #0]
 8019ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019ff2:	bf00      	nop
 8019ff4:	e000ed88 	.word	0xe000ed88

08019ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019ff8:	b480      	push	{r7}
 8019ffa:	b085      	sub	sp, #20
 8019ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019ffe:	f3ef 8305 	mrs	r3, IPSR
 801a002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	2b0f      	cmp	r3, #15
 801a008:	d914      	bls.n	801a034 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a00a:	4a17      	ldr	r2, [pc, #92]	; (801a068 <vPortValidateInterruptPriority+0x70>)
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	4413      	add	r3, r2
 801a010:	781b      	ldrb	r3, [r3, #0]
 801a012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a014:	4b15      	ldr	r3, [pc, #84]	; (801a06c <vPortValidateInterruptPriority+0x74>)
 801a016:	781b      	ldrb	r3, [r3, #0]
 801a018:	7afa      	ldrb	r2, [r7, #11]
 801a01a:	429a      	cmp	r2, r3
 801a01c:	d20a      	bcs.n	801a034 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a022:	f383 8811 	msr	BASEPRI, r3
 801a026:	f3bf 8f6f 	isb	sy
 801a02a:	f3bf 8f4f 	dsb	sy
 801a02e:	607b      	str	r3, [r7, #4]
}
 801a030:	bf00      	nop
 801a032:	e7fe      	b.n	801a032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a034:	4b0e      	ldr	r3, [pc, #56]	; (801a070 <vPortValidateInterruptPriority+0x78>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a03c:	4b0d      	ldr	r3, [pc, #52]	; (801a074 <vPortValidateInterruptPriority+0x7c>)
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	429a      	cmp	r2, r3
 801a042:	d90a      	bls.n	801a05a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a048:	f383 8811 	msr	BASEPRI, r3
 801a04c:	f3bf 8f6f 	isb	sy
 801a050:	f3bf 8f4f 	dsb	sy
 801a054:	603b      	str	r3, [r7, #0]
}
 801a056:	bf00      	nop
 801a058:	e7fe      	b.n	801a058 <vPortValidateInterruptPriority+0x60>
	}
 801a05a:	bf00      	nop
 801a05c:	3714      	adds	r7, #20
 801a05e:	46bd      	mov	sp, r7
 801a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a064:	4770      	bx	lr
 801a066:	bf00      	nop
 801a068:	e000e3f0 	.word	0xe000e3f0
 801a06c:	20003120 	.word	0x20003120
 801a070:	e000ed0c 	.word	0xe000ed0c
 801a074:	20003124 	.word	0x20003124

0801a078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b08a      	sub	sp, #40	; 0x28
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a080:	2300      	movs	r3, #0
 801a082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a084:	f7fe fb8a 	bl	801879c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a088:	4b5b      	ldr	r3, [pc, #364]	; (801a1f8 <pvPortMalloc+0x180>)
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d101      	bne.n	801a094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a090:	f000 f920 	bl	801a2d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a094:	4b59      	ldr	r3, [pc, #356]	; (801a1fc <pvPortMalloc+0x184>)
 801a096:	681a      	ldr	r2, [r3, #0]
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	4013      	ands	r3, r2
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	f040 8093 	bne.w	801a1c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d01d      	beq.n	801a0e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a0a8:	2208      	movs	r2, #8
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	4413      	add	r3, r2
 801a0ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	f003 0307 	and.w	r3, r3, #7
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d014      	beq.n	801a0e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	f023 0307 	bic.w	r3, r3, #7
 801a0c0:	3308      	adds	r3, #8
 801a0c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	f003 0307 	and.w	r3, r3, #7
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d00a      	beq.n	801a0e4 <pvPortMalloc+0x6c>
	__asm volatile
 801a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0d2:	f383 8811 	msr	BASEPRI, r3
 801a0d6:	f3bf 8f6f 	isb	sy
 801a0da:	f3bf 8f4f 	dsb	sy
 801a0de:	617b      	str	r3, [r7, #20]
}
 801a0e0:	bf00      	nop
 801a0e2:	e7fe      	b.n	801a0e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d06e      	beq.n	801a1c8 <pvPortMalloc+0x150>
 801a0ea:	4b45      	ldr	r3, [pc, #276]	; (801a200 <pvPortMalloc+0x188>)
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	687a      	ldr	r2, [r7, #4]
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	d869      	bhi.n	801a1c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a0f4:	4b43      	ldr	r3, [pc, #268]	; (801a204 <pvPortMalloc+0x18c>)
 801a0f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a0f8:	4b42      	ldr	r3, [pc, #264]	; (801a204 <pvPortMalloc+0x18c>)
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a0fe:	e004      	b.n	801a10a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a10c:	685b      	ldr	r3, [r3, #4]
 801a10e:	687a      	ldr	r2, [r7, #4]
 801a110:	429a      	cmp	r2, r3
 801a112:	d903      	bls.n	801a11c <pvPortMalloc+0xa4>
 801a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d1f1      	bne.n	801a100 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a11c:	4b36      	ldr	r3, [pc, #216]	; (801a1f8 <pvPortMalloc+0x180>)
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a122:	429a      	cmp	r2, r3
 801a124:	d050      	beq.n	801a1c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a126:	6a3b      	ldr	r3, [r7, #32]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	2208      	movs	r2, #8
 801a12c:	4413      	add	r3, r2
 801a12e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a132:	681a      	ldr	r2, [r3, #0]
 801a134:	6a3b      	ldr	r3, [r7, #32]
 801a136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a13a:	685a      	ldr	r2, [r3, #4]
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	1ad2      	subs	r2, r2, r3
 801a140:	2308      	movs	r3, #8
 801a142:	005b      	lsls	r3, r3, #1
 801a144:	429a      	cmp	r2, r3
 801a146:	d91f      	bls.n	801a188 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	4413      	add	r3, r2
 801a14e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a150:	69bb      	ldr	r3, [r7, #24]
 801a152:	f003 0307 	and.w	r3, r3, #7
 801a156:	2b00      	cmp	r3, #0
 801a158:	d00a      	beq.n	801a170 <pvPortMalloc+0xf8>
	__asm volatile
 801a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a15e:	f383 8811 	msr	BASEPRI, r3
 801a162:	f3bf 8f6f 	isb	sy
 801a166:	f3bf 8f4f 	dsb	sy
 801a16a:	613b      	str	r3, [r7, #16]
}
 801a16c:	bf00      	nop
 801a16e:	e7fe      	b.n	801a16e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a172:	685a      	ldr	r2, [r3, #4]
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	1ad2      	subs	r2, r2, r3
 801a178:	69bb      	ldr	r3, [r7, #24]
 801a17a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a17e:	687a      	ldr	r2, [r7, #4]
 801a180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a182:	69b8      	ldr	r0, [r7, #24]
 801a184:	f000 f908 	bl	801a398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a188:	4b1d      	ldr	r3, [pc, #116]	; (801a200 <pvPortMalloc+0x188>)
 801a18a:	681a      	ldr	r2, [r3, #0]
 801a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a18e:	685b      	ldr	r3, [r3, #4]
 801a190:	1ad3      	subs	r3, r2, r3
 801a192:	4a1b      	ldr	r2, [pc, #108]	; (801a200 <pvPortMalloc+0x188>)
 801a194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a196:	4b1a      	ldr	r3, [pc, #104]	; (801a200 <pvPortMalloc+0x188>)
 801a198:	681a      	ldr	r2, [r3, #0]
 801a19a:	4b1b      	ldr	r3, [pc, #108]	; (801a208 <pvPortMalloc+0x190>)
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	429a      	cmp	r2, r3
 801a1a0:	d203      	bcs.n	801a1aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a1a2:	4b17      	ldr	r3, [pc, #92]	; (801a200 <pvPortMalloc+0x188>)
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	4a18      	ldr	r2, [pc, #96]	; (801a208 <pvPortMalloc+0x190>)
 801a1a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1ac:	685a      	ldr	r2, [r3, #4]
 801a1ae:	4b13      	ldr	r3, [pc, #76]	; (801a1fc <pvPortMalloc+0x184>)
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	431a      	orrs	r2, r3
 801a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a1be:	4b13      	ldr	r3, [pc, #76]	; (801a20c <pvPortMalloc+0x194>)
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	3301      	adds	r3, #1
 801a1c4:	4a11      	ldr	r2, [pc, #68]	; (801a20c <pvPortMalloc+0x194>)
 801a1c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a1c8:	f7fe faf6 	bl	80187b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a1cc:	69fb      	ldr	r3, [r7, #28]
 801a1ce:	f003 0307 	and.w	r3, r3, #7
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d00a      	beq.n	801a1ec <pvPortMalloc+0x174>
	__asm volatile
 801a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1da:	f383 8811 	msr	BASEPRI, r3
 801a1de:	f3bf 8f6f 	isb	sy
 801a1e2:	f3bf 8f4f 	dsb	sy
 801a1e6:	60fb      	str	r3, [r7, #12]
}
 801a1e8:	bf00      	nop
 801a1ea:	e7fe      	b.n	801a1ea <pvPortMalloc+0x172>
	return pvReturn;
 801a1ec:	69fb      	ldr	r3, [r7, #28]
}
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	3728      	adds	r7, #40	; 0x28
 801a1f2:	46bd      	mov	sp, r7
 801a1f4:	bd80      	pop	{r7, pc}
 801a1f6:	bf00      	nop
 801a1f8:	2000cd70 	.word	0x2000cd70
 801a1fc:	2000cd84 	.word	0x2000cd84
 801a200:	2000cd74 	.word	0x2000cd74
 801a204:	2000cd68 	.word	0x2000cd68
 801a208:	2000cd78 	.word	0x2000cd78
 801a20c:	2000cd7c 	.word	0x2000cd7c

0801a210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b086      	sub	sp, #24
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d04d      	beq.n	801a2be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a222:	2308      	movs	r3, #8
 801a224:	425b      	negs	r3, r3
 801a226:	697a      	ldr	r2, [r7, #20]
 801a228:	4413      	add	r3, r2
 801a22a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a22c:	697b      	ldr	r3, [r7, #20]
 801a22e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a230:	693b      	ldr	r3, [r7, #16]
 801a232:	685a      	ldr	r2, [r3, #4]
 801a234:	4b24      	ldr	r3, [pc, #144]	; (801a2c8 <vPortFree+0xb8>)
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	4013      	ands	r3, r2
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d10a      	bne.n	801a254 <vPortFree+0x44>
	__asm volatile
 801a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a242:	f383 8811 	msr	BASEPRI, r3
 801a246:	f3bf 8f6f 	isb	sy
 801a24a:	f3bf 8f4f 	dsb	sy
 801a24e:	60fb      	str	r3, [r7, #12]
}
 801a250:	bf00      	nop
 801a252:	e7fe      	b.n	801a252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a254:	693b      	ldr	r3, [r7, #16]
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d00a      	beq.n	801a272 <vPortFree+0x62>
	__asm volatile
 801a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a260:	f383 8811 	msr	BASEPRI, r3
 801a264:	f3bf 8f6f 	isb	sy
 801a268:	f3bf 8f4f 	dsb	sy
 801a26c:	60bb      	str	r3, [r7, #8]
}
 801a26e:	bf00      	nop
 801a270:	e7fe      	b.n	801a270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a272:	693b      	ldr	r3, [r7, #16]
 801a274:	685a      	ldr	r2, [r3, #4]
 801a276:	4b14      	ldr	r3, [pc, #80]	; (801a2c8 <vPortFree+0xb8>)
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	4013      	ands	r3, r2
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d01e      	beq.n	801a2be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a280:	693b      	ldr	r3, [r7, #16]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d11a      	bne.n	801a2be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a288:	693b      	ldr	r3, [r7, #16]
 801a28a:	685a      	ldr	r2, [r3, #4]
 801a28c:	4b0e      	ldr	r3, [pc, #56]	; (801a2c8 <vPortFree+0xb8>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	43db      	mvns	r3, r3
 801a292:	401a      	ands	r2, r3
 801a294:	693b      	ldr	r3, [r7, #16]
 801a296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a298:	f7fe fa80 	bl	801879c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a29c:	693b      	ldr	r3, [r7, #16]
 801a29e:	685a      	ldr	r2, [r3, #4]
 801a2a0:	4b0a      	ldr	r3, [pc, #40]	; (801a2cc <vPortFree+0xbc>)
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	4413      	add	r3, r2
 801a2a6:	4a09      	ldr	r2, [pc, #36]	; (801a2cc <vPortFree+0xbc>)
 801a2a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a2aa:	6938      	ldr	r0, [r7, #16]
 801a2ac:	f000 f874 	bl	801a398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a2b0:	4b07      	ldr	r3, [pc, #28]	; (801a2d0 <vPortFree+0xc0>)
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	3301      	adds	r3, #1
 801a2b6:	4a06      	ldr	r2, [pc, #24]	; (801a2d0 <vPortFree+0xc0>)
 801a2b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a2ba:	f7fe fa7d 	bl	80187b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a2be:	bf00      	nop
 801a2c0:	3718      	adds	r7, #24
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	bd80      	pop	{r7, pc}
 801a2c6:	bf00      	nop
 801a2c8:	2000cd84 	.word	0x2000cd84
 801a2cc:	2000cd74 	.word	0x2000cd74
 801a2d0:	2000cd80 	.word	0x2000cd80

0801a2d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a2d4:	b480      	push	{r7}
 801a2d6:	b085      	sub	sp, #20
 801a2d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a2da:	f649 4340 	movw	r3, #40000	; 0x9c40
 801a2de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a2e0:	4b27      	ldr	r3, [pc, #156]	; (801a380 <prvHeapInit+0xac>)
 801a2e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	f003 0307 	and.w	r3, r3, #7
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d00c      	beq.n	801a308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	3307      	adds	r3, #7
 801a2f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	f023 0307 	bic.w	r3, r3, #7
 801a2fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a2fc:	68ba      	ldr	r2, [r7, #8]
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	1ad3      	subs	r3, r2, r3
 801a302:	4a1f      	ldr	r2, [pc, #124]	; (801a380 <prvHeapInit+0xac>)
 801a304:	4413      	add	r3, r2
 801a306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a30c:	4a1d      	ldr	r2, [pc, #116]	; (801a384 <prvHeapInit+0xb0>)
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a312:	4b1c      	ldr	r3, [pc, #112]	; (801a384 <prvHeapInit+0xb0>)
 801a314:	2200      	movs	r2, #0
 801a316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	68ba      	ldr	r2, [r7, #8]
 801a31c:	4413      	add	r3, r2
 801a31e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a320:	2208      	movs	r2, #8
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	1a9b      	subs	r3, r3, r2
 801a326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	f023 0307 	bic.w	r3, r3, #7
 801a32e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	4a15      	ldr	r2, [pc, #84]	; (801a388 <prvHeapInit+0xb4>)
 801a334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a336:	4b14      	ldr	r3, [pc, #80]	; (801a388 <prvHeapInit+0xb4>)
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	2200      	movs	r2, #0
 801a33c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a33e:	4b12      	ldr	r3, [pc, #72]	; (801a388 <prvHeapInit+0xb4>)
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	2200      	movs	r2, #0
 801a344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a34a:	683b      	ldr	r3, [r7, #0]
 801a34c:	68fa      	ldr	r2, [r7, #12]
 801a34e:	1ad2      	subs	r2, r2, r3
 801a350:	683b      	ldr	r3, [r7, #0]
 801a352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a354:	4b0c      	ldr	r3, [pc, #48]	; (801a388 <prvHeapInit+0xb4>)
 801a356:	681a      	ldr	r2, [r3, #0]
 801a358:	683b      	ldr	r3, [r7, #0]
 801a35a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a35c:	683b      	ldr	r3, [r7, #0]
 801a35e:	685b      	ldr	r3, [r3, #4]
 801a360:	4a0a      	ldr	r2, [pc, #40]	; (801a38c <prvHeapInit+0xb8>)
 801a362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a364:	683b      	ldr	r3, [r7, #0]
 801a366:	685b      	ldr	r3, [r3, #4]
 801a368:	4a09      	ldr	r2, [pc, #36]	; (801a390 <prvHeapInit+0xbc>)
 801a36a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a36c:	4b09      	ldr	r3, [pc, #36]	; (801a394 <prvHeapInit+0xc0>)
 801a36e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a372:	601a      	str	r2, [r3, #0]
}
 801a374:	bf00      	nop
 801a376:	3714      	adds	r7, #20
 801a378:	46bd      	mov	sp, r7
 801a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a37e:	4770      	bx	lr
 801a380:	20003128 	.word	0x20003128
 801a384:	2000cd68 	.word	0x2000cd68
 801a388:	2000cd70 	.word	0x2000cd70
 801a38c:	2000cd78 	.word	0x2000cd78
 801a390:	2000cd74 	.word	0x2000cd74
 801a394:	2000cd84 	.word	0x2000cd84

0801a398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a398:	b480      	push	{r7}
 801a39a:	b085      	sub	sp, #20
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a3a0:	4b28      	ldr	r3, [pc, #160]	; (801a444 <prvInsertBlockIntoFreeList+0xac>)
 801a3a2:	60fb      	str	r3, [r7, #12]
 801a3a4:	e002      	b.n	801a3ac <prvInsertBlockIntoFreeList+0x14>
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	60fb      	str	r3, [r7, #12]
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	687a      	ldr	r2, [r7, #4]
 801a3b2:	429a      	cmp	r2, r3
 801a3b4:	d8f7      	bhi.n	801a3a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	685b      	ldr	r3, [r3, #4]
 801a3be:	68ba      	ldr	r2, [r7, #8]
 801a3c0:	4413      	add	r3, r2
 801a3c2:	687a      	ldr	r2, [r7, #4]
 801a3c4:	429a      	cmp	r2, r3
 801a3c6:	d108      	bne.n	801a3da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	685a      	ldr	r2, [r3, #4]
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	685b      	ldr	r3, [r3, #4]
 801a3d0:	441a      	add	r2, r3
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	685b      	ldr	r3, [r3, #4]
 801a3e2:	68ba      	ldr	r2, [r7, #8]
 801a3e4:	441a      	add	r2, r3
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	429a      	cmp	r2, r3
 801a3ec:	d118      	bne.n	801a420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	681a      	ldr	r2, [r3, #0]
 801a3f2:	4b15      	ldr	r3, [pc, #84]	; (801a448 <prvInsertBlockIntoFreeList+0xb0>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	429a      	cmp	r2, r3
 801a3f8:	d00d      	beq.n	801a416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	685a      	ldr	r2, [r3, #4]
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	685b      	ldr	r3, [r3, #4]
 801a404:	441a      	add	r2, r3
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	681a      	ldr	r2, [r3, #0]
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	601a      	str	r2, [r3, #0]
 801a414:	e008      	b.n	801a428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a416:	4b0c      	ldr	r3, [pc, #48]	; (801a448 <prvInsertBlockIntoFreeList+0xb0>)
 801a418:	681a      	ldr	r2, [r3, #0]
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	601a      	str	r2, [r3, #0]
 801a41e:	e003      	b.n	801a428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	681a      	ldr	r2, [r3, #0]
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a428:	68fa      	ldr	r2, [r7, #12]
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	429a      	cmp	r2, r3
 801a42e:	d002      	beq.n	801a436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	687a      	ldr	r2, [r7, #4]
 801a434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a436:	bf00      	nop
 801a438:	3714      	adds	r7, #20
 801a43a:	46bd      	mov	sp, r7
 801a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a440:	4770      	bx	lr
 801a442:	bf00      	nop
 801a444:	2000cd68 	.word	0x2000cd68
 801a448:	2000cd70 	.word	0x2000cd70

0801a44c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a450:	2200      	movs	r2, #0
 801a452:	4912      	ldr	r1, [pc, #72]	; (801a49c <MX_USB_DEVICE_Init+0x50>)
 801a454:	4812      	ldr	r0, [pc, #72]	; (801a4a0 <MX_USB_DEVICE_Init+0x54>)
 801a456:	f7fb fafd 	bl	8015a54 <USBD_Init>
 801a45a:	4603      	mov	r3, r0
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d001      	beq.n	801a464 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a460:	f7e9 faed 	bl	8003a3e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801a464:	490f      	ldr	r1, [pc, #60]	; (801a4a4 <MX_USB_DEVICE_Init+0x58>)
 801a466:	480e      	ldr	r0, [pc, #56]	; (801a4a0 <MX_USB_DEVICE_Init+0x54>)
 801a468:	f7fb fb24 	bl	8015ab4 <USBD_RegisterClass>
 801a46c:	4603      	mov	r3, r0
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d001      	beq.n	801a476 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a472:	f7e9 fae4 	bl	8003a3e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801a476:	490c      	ldr	r1, [pc, #48]	; (801a4a8 <MX_USB_DEVICE_Init+0x5c>)
 801a478:	4809      	ldr	r0, [pc, #36]	; (801a4a0 <MX_USB_DEVICE_Init+0x54>)
 801a47a:	f7fb fa5b 	bl	8015934 <USBD_CDC_RegisterInterface>
 801a47e:	4603      	mov	r3, r0
 801a480:	2b00      	cmp	r3, #0
 801a482:	d001      	beq.n	801a488 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a484:	f7e9 fadb 	bl	8003a3e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a488:	4805      	ldr	r0, [pc, #20]	; (801a4a0 <MX_USB_DEVICE_Init+0x54>)
 801a48a:	f7fb fb49 	bl	8015b20 <USBD_Start>
 801a48e:	4603      	mov	r3, r0
 801a490:	2b00      	cmp	r3, #0
 801a492:	d001      	beq.n	801a498 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a494:	f7e9 fad3 	bl	8003a3e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a498:	bf00      	nop
 801a49a:	bd80      	pop	{r7, pc}
 801a49c:	200000bc 	.word	0x200000bc
 801a4a0:	2000cd88 	.word	0x2000cd88
 801a4a4:	20000024 	.word	0x20000024
 801a4a8:	200000a8 	.word	0x200000a8

0801a4ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	4905      	ldr	r1, [pc, #20]	; (801a4c8 <CDC_Init_FS+0x1c>)
 801a4b4:	4805      	ldr	r0, [pc, #20]	; (801a4cc <CDC_Init_FS+0x20>)
 801a4b6:	f7fb fa57 	bl	8015968 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a4ba:	4905      	ldr	r1, [pc, #20]	; (801a4d0 <CDC_Init_FS+0x24>)
 801a4bc:	4803      	ldr	r0, [pc, #12]	; (801a4cc <CDC_Init_FS+0x20>)
 801a4be:	f7fb fa75 	bl	80159ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a4c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	bd80      	pop	{r7, pc}
 801a4c8:	2000d86c 	.word	0x2000d86c
 801a4cc:	2000cd88 	.word	0x2000cd88
 801a4d0:	2000d06c 	.word	0x2000d06c

0801a4d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a4d4:	b480      	push	{r7}
 801a4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a4d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a4da:	4618      	mov	r0, r3
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e2:	4770      	bx	lr

0801a4e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	b083      	sub	sp, #12
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	6039      	str	r1, [r7, #0]
 801a4ee:	71fb      	strb	r3, [r7, #7]
 801a4f0:	4613      	mov	r3, r2
 801a4f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a4f4:	79fb      	ldrb	r3, [r7, #7]
 801a4f6:	2b23      	cmp	r3, #35	; 0x23
 801a4f8:	f200 808c 	bhi.w	801a614 <CDC_Control_FS+0x130>
 801a4fc:	a201      	add	r2, pc, #4	; (adr r2, 801a504 <CDC_Control_FS+0x20>)
 801a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a502:	bf00      	nop
 801a504:	0801a615 	.word	0x0801a615
 801a508:	0801a615 	.word	0x0801a615
 801a50c:	0801a615 	.word	0x0801a615
 801a510:	0801a615 	.word	0x0801a615
 801a514:	0801a615 	.word	0x0801a615
 801a518:	0801a615 	.word	0x0801a615
 801a51c:	0801a615 	.word	0x0801a615
 801a520:	0801a615 	.word	0x0801a615
 801a524:	0801a615 	.word	0x0801a615
 801a528:	0801a615 	.word	0x0801a615
 801a52c:	0801a615 	.word	0x0801a615
 801a530:	0801a615 	.word	0x0801a615
 801a534:	0801a615 	.word	0x0801a615
 801a538:	0801a615 	.word	0x0801a615
 801a53c:	0801a615 	.word	0x0801a615
 801a540:	0801a615 	.word	0x0801a615
 801a544:	0801a615 	.word	0x0801a615
 801a548:	0801a615 	.word	0x0801a615
 801a54c:	0801a615 	.word	0x0801a615
 801a550:	0801a615 	.word	0x0801a615
 801a554:	0801a615 	.word	0x0801a615
 801a558:	0801a615 	.word	0x0801a615
 801a55c:	0801a615 	.word	0x0801a615
 801a560:	0801a615 	.word	0x0801a615
 801a564:	0801a615 	.word	0x0801a615
 801a568:	0801a615 	.word	0x0801a615
 801a56c:	0801a615 	.word	0x0801a615
 801a570:	0801a615 	.word	0x0801a615
 801a574:	0801a615 	.word	0x0801a615
 801a578:	0801a615 	.word	0x0801a615
 801a57c:	0801a615 	.word	0x0801a615
 801a580:	0801a615 	.word	0x0801a615
 801a584:	0801a595 	.word	0x0801a595
 801a588:	0801a5cf 	.word	0x0801a5cf
 801a58c:	0801a615 	.word	0x0801a615
 801a590:	0801a615 	.word	0x0801a615
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 801a594:	683b      	ldr	r3, [r7, #0]
 801a596:	781a      	ldrb	r2, [r3, #0]
 801a598:	4b22      	ldr	r3, [pc, #136]	; (801a624 <CDC_Control_FS+0x140>)
 801a59a:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 801a59c:	683b      	ldr	r3, [r7, #0]
 801a59e:	785a      	ldrb	r2, [r3, #1]
 801a5a0:	4b20      	ldr	r3, [pc, #128]	; (801a624 <CDC_Control_FS+0x140>)
 801a5a2:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 801a5a4:	683b      	ldr	r3, [r7, #0]
 801a5a6:	789a      	ldrb	r2, [r3, #2]
 801a5a8:	4b1e      	ldr	r3, [pc, #120]	; (801a624 <CDC_Control_FS+0x140>)
 801a5aa:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	78da      	ldrb	r2, [r3, #3]
 801a5b0:	4b1c      	ldr	r3, [pc, #112]	; (801a624 <CDC_Control_FS+0x140>)
 801a5b2:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 801a5b4:	683b      	ldr	r3, [r7, #0]
 801a5b6:	791a      	ldrb	r2, [r3, #4]
 801a5b8:	4b1a      	ldr	r3, [pc, #104]	; (801a624 <CDC_Control_FS+0x140>)
 801a5ba:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	795a      	ldrb	r2, [r3, #5]
 801a5c0:	4b18      	ldr	r3, [pc, #96]	; (801a624 <CDC_Control_FS+0x140>)
 801a5c2:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 801a5c4:	683b      	ldr	r3, [r7, #0]
 801a5c6:	799a      	ldrb	r2, [r3, #6]
 801a5c8:	4b16      	ldr	r3, [pc, #88]	; (801a624 <CDC_Control_FS+0x140>)
 801a5ca:	719a      	strb	r2, [r3, #6]
      break;
 801a5cc:	e023      	b.n	801a616 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 801a5ce:	4b15      	ldr	r3, [pc, #84]	; (801a624 <CDC_Control_FS+0x140>)
 801a5d0:	781a      	ldrb	r2, [r3, #0]
 801a5d2:	683b      	ldr	r3, [r7, #0]
 801a5d4:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 801a5d6:	683b      	ldr	r3, [r7, #0]
 801a5d8:	3301      	adds	r3, #1
 801a5da:	4a12      	ldr	r2, [pc, #72]	; (801a624 <CDC_Control_FS+0x140>)
 801a5dc:	7852      	ldrb	r2, [r2, #1]
 801a5de:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 801a5e0:	683b      	ldr	r3, [r7, #0]
 801a5e2:	3302      	adds	r3, #2
 801a5e4:	4a0f      	ldr	r2, [pc, #60]	; (801a624 <CDC_Control_FS+0x140>)
 801a5e6:	7892      	ldrb	r2, [r2, #2]
 801a5e8:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	3303      	adds	r3, #3
 801a5ee:	4a0d      	ldr	r2, [pc, #52]	; (801a624 <CDC_Control_FS+0x140>)
 801a5f0:	78d2      	ldrb	r2, [r2, #3]
 801a5f2:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 801a5f4:	683b      	ldr	r3, [r7, #0]
 801a5f6:	3304      	adds	r3, #4
 801a5f8:	4a0a      	ldr	r2, [pc, #40]	; (801a624 <CDC_Control_FS+0x140>)
 801a5fa:	7912      	ldrb	r2, [r2, #4]
 801a5fc:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801a5fe:	683b      	ldr	r3, [r7, #0]
 801a600:	3305      	adds	r3, #5
 801a602:	4a08      	ldr	r2, [pc, #32]	; (801a624 <CDC_Control_FS+0x140>)
 801a604:	7952      	ldrb	r2, [r2, #5]
 801a606:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 801a608:	683b      	ldr	r3, [r7, #0]
 801a60a:	3306      	adds	r3, #6
 801a60c:	4a05      	ldr	r2, [pc, #20]	; (801a624 <CDC_Control_FS+0x140>)
 801a60e:	7992      	ldrb	r2, [r2, #6]
 801a610:	701a      	strb	r2, [r3, #0]
      break;
 801a612:	e000      	b.n	801a616 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a614:	bf00      	nop
  }

  return (USBD_OK);
 801a616:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a618:	4618      	mov	r0, r3
 801a61a:	370c      	adds	r7, #12
 801a61c:	46bd      	mov	sp, r7
 801a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a622:	4770      	bx	lr
 801a624:	2000d064 	.word	0x2000d064

0801a628 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b082      	sub	sp, #8
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	6078      	str	r0, [r7, #4]
 801a630:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a632:	6879      	ldr	r1, [r7, #4]
 801a634:	4807      	ldr	r0, [pc, #28]	; (801a654 <CDC_Receive_FS+0x2c>)
 801a636:	f7fb f9b9 	bl	80159ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a63a:	4806      	ldr	r0, [pc, #24]	; (801a654 <CDC_Receive_FS+0x2c>)
 801a63c:	f7fb f9d4 	bl	80159e8 <USBD_CDC_ReceivePacket>
  usb_vcp_processing(Buf, Len);
 801a640:	6839      	ldr	r1, [r7, #0]
 801a642:	6878      	ldr	r0, [r7, #4]
 801a644:	f7f0 fcb6 	bl	800afb4 <usb_vcp_processing>
  return (USBD_OK);
 801a648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a64a:	4618      	mov	r0, r3
 801a64c:	3708      	adds	r7, #8
 801a64e:	46bd      	mov	sp, r7
 801a650:	bd80      	pop	{r7, pc}
 801a652:	bf00      	nop
 801a654:	2000cd88 	.word	0x2000cd88

0801a658 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a658:	b480      	push	{r7}
 801a65a:	b087      	sub	sp, #28
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	60f8      	str	r0, [r7, #12]
 801a660:	60b9      	str	r1, [r7, #8]
 801a662:	4613      	mov	r3, r2
 801a664:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a666:	2300      	movs	r3, #0
 801a668:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801a66a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a66e:	4618      	mov	r0, r3
 801a670:	371c      	adds	r7, #28
 801a672:	46bd      	mov	sp, r7
 801a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a678:	4770      	bx	lr
	...

0801a67c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a67c:	b480      	push	{r7}
 801a67e:	b083      	sub	sp, #12
 801a680:	af00      	add	r7, sp, #0
 801a682:	4603      	mov	r3, r0
 801a684:	6039      	str	r1, [r7, #0]
 801a686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a688:	683b      	ldr	r3, [r7, #0]
 801a68a:	2212      	movs	r2, #18
 801a68c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a68e:	4b03      	ldr	r3, [pc, #12]	; (801a69c <USBD_FS_DeviceDescriptor+0x20>)
}
 801a690:	4618      	mov	r0, r3
 801a692:	370c      	adds	r7, #12
 801a694:	46bd      	mov	sp, r7
 801a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a69a:	4770      	bx	lr
 801a69c:	200000d8 	.word	0x200000d8

0801a6a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6a0:	b480      	push	{r7}
 801a6a2:	b083      	sub	sp, #12
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	6039      	str	r1, [r7, #0]
 801a6aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a6ac:	683b      	ldr	r3, [r7, #0]
 801a6ae:	2204      	movs	r2, #4
 801a6b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a6b2:	4b03      	ldr	r3, [pc, #12]	; (801a6c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	370c      	adds	r7, #12
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6be:	4770      	bx	lr
 801a6c0:	200000ec 	.word	0x200000ec

0801a6c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6c4:	b580      	push	{r7, lr}
 801a6c6:	b082      	sub	sp, #8
 801a6c8:	af00      	add	r7, sp, #0
 801a6ca:	4603      	mov	r3, r0
 801a6cc:	6039      	str	r1, [r7, #0]
 801a6ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a6d0:	79fb      	ldrb	r3, [r7, #7]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d105      	bne.n	801a6e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a6d6:	683a      	ldr	r2, [r7, #0]
 801a6d8:	4907      	ldr	r1, [pc, #28]	; (801a6f8 <USBD_FS_ProductStrDescriptor+0x34>)
 801a6da:	4808      	ldr	r0, [pc, #32]	; (801a6fc <USBD_FS_ProductStrDescriptor+0x38>)
 801a6dc:	f7fc fbcc 	bl	8016e78 <USBD_GetString>
 801a6e0:	e004      	b.n	801a6ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a6e2:	683a      	ldr	r2, [r7, #0]
 801a6e4:	4904      	ldr	r1, [pc, #16]	; (801a6f8 <USBD_FS_ProductStrDescriptor+0x34>)
 801a6e6:	4805      	ldr	r0, [pc, #20]	; (801a6fc <USBD_FS_ProductStrDescriptor+0x38>)
 801a6e8:	f7fc fbc6 	bl	8016e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a6ec:	4b02      	ldr	r3, [pc, #8]	; (801a6f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	3708      	adds	r7, #8
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	bd80      	pop	{r7, pc}
 801a6f6:	bf00      	nop
 801a6f8:	2000e06c 	.word	0x2000e06c
 801a6fc:	080217ec 	.word	0x080217ec

0801a700 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b082      	sub	sp, #8
 801a704:	af00      	add	r7, sp, #0
 801a706:	4603      	mov	r3, r0
 801a708:	6039      	str	r1, [r7, #0]
 801a70a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a70c:	683a      	ldr	r2, [r7, #0]
 801a70e:	4904      	ldr	r1, [pc, #16]	; (801a720 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a710:	4804      	ldr	r0, [pc, #16]	; (801a724 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a712:	f7fc fbb1 	bl	8016e78 <USBD_GetString>
  return USBD_StrDesc;
 801a716:	4b02      	ldr	r3, [pc, #8]	; (801a720 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a718:	4618      	mov	r0, r3
 801a71a:	3708      	adds	r7, #8
 801a71c:	46bd      	mov	sp, r7
 801a71e:	bd80      	pop	{r7, pc}
 801a720:	2000e06c 	.word	0x2000e06c
 801a724:	08021804 	.word	0x08021804

0801a728 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b082      	sub	sp, #8
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	4603      	mov	r3, r0
 801a730:	6039      	str	r1, [r7, #0]
 801a732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a734:	683b      	ldr	r3, [r7, #0]
 801a736:	221a      	movs	r2, #26
 801a738:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a73a:	f000 f843 	bl	801a7c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a73e:	4b02      	ldr	r3, [pc, #8]	; (801a748 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a740:	4618      	mov	r0, r3
 801a742:	3708      	adds	r7, #8
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}
 801a748:	200000f0 	.word	0x200000f0

0801a74c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b082      	sub	sp, #8
 801a750:	af00      	add	r7, sp, #0
 801a752:	4603      	mov	r3, r0
 801a754:	6039      	str	r1, [r7, #0]
 801a756:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a758:	79fb      	ldrb	r3, [r7, #7]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d105      	bne.n	801a76a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a75e:	683a      	ldr	r2, [r7, #0]
 801a760:	4907      	ldr	r1, [pc, #28]	; (801a780 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a762:	4808      	ldr	r0, [pc, #32]	; (801a784 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a764:	f7fc fb88 	bl	8016e78 <USBD_GetString>
 801a768:	e004      	b.n	801a774 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a76a:	683a      	ldr	r2, [r7, #0]
 801a76c:	4904      	ldr	r1, [pc, #16]	; (801a780 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a76e:	4805      	ldr	r0, [pc, #20]	; (801a784 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a770:	f7fc fb82 	bl	8016e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a774:	4b02      	ldr	r3, [pc, #8]	; (801a780 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a776:	4618      	mov	r0, r3
 801a778:	3708      	adds	r7, #8
 801a77a:	46bd      	mov	sp, r7
 801a77c:	bd80      	pop	{r7, pc}
 801a77e:	bf00      	nop
 801a780:	2000e06c 	.word	0x2000e06c
 801a784:	08021818 	.word	0x08021818

0801a788 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a788:	b580      	push	{r7, lr}
 801a78a:	b082      	sub	sp, #8
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	4603      	mov	r3, r0
 801a790:	6039      	str	r1, [r7, #0]
 801a792:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a794:	79fb      	ldrb	r3, [r7, #7]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d105      	bne.n	801a7a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a79a:	683a      	ldr	r2, [r7, #0]
 801a79c:	4907      	ldr	r1, [pc, #28]	; (801a7bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a79e:	4808      	ldr	r0, [pc, #32]	; (801a7c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a7a0:	f7fc fb6a 	bl	8016e78 <USBD_GetString>
 801a7a4:	e004      	b.n	801a7b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a7a6:	683a      	ldr	r2, [r7, #0]
 801a7a8:	4904      	ldr	r1, [pc, #16]	; (801a7bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a7aa:	4805      	ldr	r0, [pc, #20]	; (801a7c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a7ac:	f7fc fb64 	bl	8016e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a7b0:	4b02      	ldr	r3, [pc, #8]	; (801a7bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	3708      	adds	r7, #8
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	bd80      	pop	{r7, pc}
 801a7ba:	bf00      	nop
 801a7bc:	2000e06c 	.word	0x2000e06c
 801a7c0:	08021824 	.word	0x08021824

0801a7c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b084      	sub	sp, #16
 801a7c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a7ca:	4b0f      	ldr	r3, [pc, #60]	; (801a808 <Get_SerialNum+0x44>)
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a7d0:	4b0e      	ldr	r3, [pc, #56]	; (801a80c <Get_SerialNum+0x48>)
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a7d6:	4b0e      	ldr	r3, [pc, #56]	; (801a810 <Get_SerialNum+0x4c>)
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a7dc:	68fa      	ldr	r2, [r7, #12]
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	4413      	add	r3, r2
 801a7e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d009      	beq.n	801a7fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a7ea:	2208      	movs	r2, #8
 801a7ec:	4909      	ldr	r1, [pc, #36]	; (801a814 <Get_SerialNum+0x50>)
 801a7ee:	68f8      	ldr	r0, [r7, #12]
 801a7f0:	f000 f814 	bl	801a81c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a7f4:	2204      	movs	r2, #4
 801a7f6:	4908      	ldr	r1, [pc, #32]	; (801a818 <Get_SerialNum+0x54>)
 801a7f8:	68b8      	ldr	r0, [r7, #8]
 801a7fa:	f000 f80f 	bl	801a81c <IntToUnicode>
  }
}
 801a7fe:	bf00      	nop
 801a800:	3710      	adds	r7, #16
 801a802:	46bd      	mov	sp, r7
 801a804:	bd80      	pop	{r7, pc}
 801a806:	bf00      	nop
 801a808:	1fff7a10 	.word	0x1fff7a10
 801a80c:	1fff7a14 	.word	0x1fff7a14
 801a810:	1fff7a18 	.word	0x1fff7a18
 801a814:	200000f2 	.word	0x200000f2
 801a818:	20000102 	.word	0x20000102

0801a81c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a81c:	b480      	push	{r7}
 801a81e:	b087      	sub	sp, #28
 801a820:	af00      	add	r7, sp, #0
 801a822:	60f8      	str	r0, [r7, #12]
 801a824:	60b9      	str	r1, [r7, #8]
 801a826:	4613      	mov	r3, r2
 801a828:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a82a:	2300      	movs	r3, #0
 801a82c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a82e:	2300      	movs	r3, #0
 801a830:	75fb      	strb	r3, [r7, #23]
 801a832:	e027      	b.n	801a884 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	0f1b      	lsrs	r3, r3, #28
 801a838:	2b09      	cmp	r3, #9
 801a83a:	d80b      	bhi.n	801a854 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	0f1b      	lsrs	r3, r3, #28
 801a840:	b2da      	uxtb	r2, r3
 801a842:	7dfb      	ldrb	r3, [r7, #23]
 801a844:	005b      	lsls	r3, r3, #1
 801a846:	4619      	mov	r1, r3
 801a848:	68bb      	ldr	r3, [r7, #8]
 801a84a:	440b      	add	r3, r1
 801a84c:	3230      	adds	r2, #48	; 0x30
 801a84e:	b2d2      	uxtb	r2, r2
 801a850:	701a      	strb	r2, [r3, #0]
 801a852:	e00a      	b.n	801a86a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	0f1b      	lsrs	r3, r3, #28
 801a858:	b2da      	uxtb	r2, r3
 801a85a:	7dfb      	ldrb	r3, [r7, #23]
 801a85c:	005b      	lsls	r3, r3, #1
 801a85e:	4619      	mov	r1, r3
 801a860:	68bb      	ldr	r3, [r7, #8]
 801a862:	440b      	add	r3, r1
 801a864:	3237      	adds	r2, #55	; 0x37
 801a866:	b2d2      	uxtb	r2, r2
 801a868:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	011b      	lsls	r3, r3, #4
 801a86e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a870:	7dfb      	ldrb	r3, [r7, #23]
 801a872:	005b      	lsls	r3, r3, #1
 801a874:	3301      	adds	r3, #1
 801a876:	68ba      	ldr	r2, [r7, #8]
 801a878:	4413      	add	r3, r2
 801a87a:	2200      	movs	r2, #0
 801a87c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a87e:	7dfb      	ldrb	r3, [r7, #23]
 801a880:	3301      	adds	r3, #1
 801a882:	75fb      	strb	r3, [r7, #23]
 801a884:	7dfa      	ldrb	r2, [r7, #23]
 801a886:	79fb      	ldrb	r3, [r7, #7]
 801a888:	429a      	cmp	r2, r3
 801a88a:	d3d3      	bcc.n	801a834 <IntToUnicode+0x18>
  }
}
 801a88c:	bf00      	nop
 801a88e:	bf00      	nop
 801a890:	371c      	adds	r7, #28
 801a892:	46bd      	mov	sp, r7
 801a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a898:	4770      	bx	lr
	...

0801a89c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b08a      	sub	sp, #40	; 0x28
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a8a4:	f107 0314 	add.w	r3, r7, #20
 801a8a8:	2200      	movs	r2, #0
 801a8aa:	601a      	str	r2, [r3, #0]
 801a8ac:	605a      	str	r2, [r3, #4]
 801a8ae:	609a      	str	r2, [r3, #8]
 801a8b0:	60da      	str	r2, [r3, #12]
 801a8b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a8bc:	d13a      	bne.n	801a934 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a8be:	2300      	movs	r3, #0
 801a8c0:	613b      	str	r3, [r7, #16]
 801a8c2:	4b1e      	ldr	r3, [pc, #120]	; (801a93c <HAL_PCD_MspInit+0xa0>)
 801a8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8c6:	4a1d      	ldr	r2, [pc, #116]	; (801a93c <HAL_PCD_MspInit+0xa0>)
 801a8c8:	f043 0301 	orr.w	r3, r3, #1
 801a8cc:	6313      	str	r3, [r2, #48]	; 0x30
 801a8ce:	4b1b      	ldr	r3, [pc, #108]	; (801a93c <HAL_PCD_MspInit+0xa0>)
 801a8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8d2:	f003 0301 	and.w	r3, r3, #1
 801a8d6:	613b      	str	r3, [r7, #16]
 801a8d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801a8da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a8de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a8e0:	2302      	movs	r3, #2
 801a8e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a8e4:	2300      	movs	r3, #0
 801a8e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a8e8:	2303      	movs	r3, #3
 801a8ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a8ec:	230a      	movs	r3, #10
 801a8ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a8f0:	f107 0314 	add.w	r3, r7, #20
 801a8f4:	4619      	mov	r1, r3
 801a8f6:	4812      	ldr	r0, [pc, #72]	; (801a940 <HAL_PCD_MspInit+0xa4>)
 801a8f8:	f7f2 fa02 	bl	800cd00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a8fc:	4b0f      	ldr	r3, [pc, #60]	; (801a93c <HAL_PCD_MspInit+0xa0>)
 801a8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a900:	4a0e      	ldr	r2, [pc, #56]	; (801a93c <HAL_PCD_MspInit+0xa0>)
 801a902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a906:	6353      	str	r3, [r2, #52]	; 0x34
 801a908:	2300      	movs	r3, #0
 801a90a:	60fb      	str	r3, [r7, #12]
 801a90c:	4b0b      	ldr	r3, [pc, #44]	; (801a93c <HAL_PCD_MspInit+0xa0>)
 801a90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a910:	4a0a      	ldr	r2, [pc, #40]	; (801a93c <HAL_PCD_MspInit+0xa0>)
 801a912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a916:	6453      	str	r3, [r2, #68]	; 0x44
 801a918:	4b08      	ldr	r3, [pc, #32]	; (801a93c <HAL_PCD_MspInit+0xa0>)
 801a91a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a91c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a920:	60fb      	str	r3, [r7, #12]
 801a922:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801a924:	2200      	movs	r2, #0
 801a926:	2105      	movs	r1, #5
 801a928:	2043      	movs	r0, #67	; 0x43
 801a92a:	f7f1 fdb1 	bl	800c490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a92e:	2043      	movs	r0, #67	; 0x43
 801a930:	f7f1 fdca 	bl	800c4c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a934:	bf00      	nop
 801a936:	3728      	adds	r7, #40	; 0x28
 801a938:	46bd      	mov	sp, r7
 801a93a:	bd80      	pop	{r7, pc}
 801a93c:	40023800 	.word	0x40023800
 801a940:	40020000 	.word	0x40020000

0801a944 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a944:	b580      	push	{r7, lr}
 801a946:	b082      	sub	sp, #8
 801a948:	af00      	add	r7, sp, #0
 801a94a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a958:	4619      	mov	r1, r3
 801a95a:	4610      	mov	r0, r2
 801a95c:	f7fb f92d 	bl	8015bba <USBD_LL_SetupStage>
}
 801a960:	bf00      	nop
 801a962:	3708      	adds	r7, #8
 801a964:	46bd      	mov	sp, r7
 801a966:	bd80      	pop	{r7, pc}

0801a968 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b082      	sub	sp, #8
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
 801a970:	460b      	mov	r3, r1
 801a972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a97a:	78fa      	ldrb	r2, [r7, #3]
 801a97c:	6879      	ldr	r1, [r7, #4]
 801a97e:	4613      	mov	r3, r2
 801a980:	00db      	lsls	r3, r3, #3
 801a982:	4413      	add	r3, r2
 801a984:	009b      	lsls	r3, r3, #2
 801a986:	440b      	add	r3, r1
 801a988:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801a98c:	681a      	ldr	r2, [r3, #0]
 801a98e:	78fb      	ldrb	r3, [r7, #3]
 801a990:	4619      	mov	r1, r3
 801a992:	f7fb f967 	bl	8015c64 <USBD_LL_DataOutStage>
}
 801a996:	bf00      	nop
 801a998:	3708      	adds	r7, #8
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bd80      	pop	{r7, pc}

0801a99e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a99e:	b580      	push	{r7, lr}
 801a9a0:	b082      	sub	sp, #8
 801a9a2:	af00      	add	r7, sp, #0
 801a9a4:	6078      	str	r0, [r7, #4]
 801a9a6:	460b      	mov	r3, r1
 801a9a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a9b0:	78fa      	ldrb	r2, [r7, #3]
 801a9b2:	6879      	ldr	r1, [r7, #4]
 801a9b4:	4613      	mov	r3, r2
 801a9b6:	00db      	lsls	r3, r3, #3
 801a9b8:	4413      	add	r3, r2
 801a9ba:	009b      	lsls	r3, r3, #2
 801a9bc:	440b      	add	r3, r1
 801a9be:	334c      	adds	r3, #76	; 0x4c
 801a9c0:	681a      	ldr	r2, [r3, #0]
 801a9c2:	78fb      	ldrb	r3, [r7, #3]
 801a9c4:	4619      	mov	r1, r3
 801a9c6:	f7fb fa00 	bl	8015dca <USBD_LL_DataInStage>
}
 801a9ca:	bf00      	nop
 801a9cc:	3708      	adds	r7, #8
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	bd80      	pop	{r7, pc}

0801a9d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9d2:	b580      	push	{r7, lr}
 801a9d4:	b082      	sub	sp, #8
 801a9d6:	af00      	add	r7, sp, #0
 801a9d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f7fb fb34 	bl	801604e <USBD_LL_SOF>
}
 801a9e6:	bf00      	nop
 801a9e8:	3708      	adds	r7, #8
 801a9ea:	46bd      	mov	sp, r7
 801a9ec:	bd80      	pop	{r7, pc}

0801a9ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9ee:	b580      	push	{r7, lr}
 801a9f0:	b084      	sub	sp, #16
 801a9f2:	af00      	add	r7, sp, #0
 801a9f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a9f6:	2301      	movs	r3, #1
 801a9f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	68db      	ldr	r3, [r3, #12]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d102      	bne.n	801aa08 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801aa02:	2300      	movs	r3, #0
 801aa04:	73fb      	strb	r3, [r7, #15]
 801aa06:	e008      	b.n	801aa1a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	68db      	ldr	r3, [r3, #12]
 801aa0c:	2b02      	cmp	r3, #2
 801aa0e:	d102      	bne.n	801aa16 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801aa10:	2301      	movs	r3, #1
 801aa12:	73fb      	strb	r3, [r7, #15]
 801aa14:	e001      	b.n	801aa1a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801aa16:	f7e9 f812 	bl	8003a3e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa20:	7bfa      	ldrb	r2, [r7, #15]
 801aa22:	4611      	mov	r1, r2
 801aa24:	4618      	mov	r0, r3
 801aa26:	f7fb fad4 	bl	8015fd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa30:	4618      	mov	r0, r3
 801aa32:	f7fb fa7c 	bl	8015f2e <USBD_LL_Reset>
}
 801aa36:	bf00      	nop
 801aa38:	3710      	adds	r7, #16
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	bd80      	pop	{r7, pc}
	...

0801aa40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b082      	sub	sp, #8
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f7fb facf 	bl	8015ff2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	687a      	ldr	r2, [r7, #4]
 801aa60:	6812      	ldr	r2, [r2, #0]
 801aa62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801aa66:	f043 0301 	orr.w	r3, r3, #1
 801aa6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  gv_usb_connected = 0;
 801aa6c:	4b08      	ldr	r3, [pc, #32]	; (801aa90 <HAL_PCD_SuspendCallback+0x50>)
 801aa6e:	2200      	movs	r2, #0
 801aa70:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.low_power_enable)
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	6a1b      	ldr	r3, [r3, #32]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d005      	beq.n	801aa86 <HAL_PCD_SuspendCallback+0x46>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801aa7a:	4b06      	ldr	r3, [pc, #24]	; (801aa94 <HAL_PCD_SuspendCallback+0x54>)
 801aa7c:	691b      	ldr	r3, [r3, #16]
 801aa7e:	4a05      	ldr	r2, [pc, #20]	; (801aa94 <HAL_PCD_SuspendCallback+0x54>)
 801aa80:	f043 0306 	orr.w	r3, r3, #6
 801aa84:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801aa86:	bf00      	nop
 801aa88:	3708      	adds	r7, #8
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	bd80      	pop	{r7, pc}
 801aa8e:	bf00      	nop
 801aa90:	20002cd1 	.word	0x20002cd1
 801aa94:	e000ed00 	.word	0xe000ed00

0801aa98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa98:	b580      	push	{r7, lr}
 801aa9a:	b082      	sub	sp, #8
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
	gv_usb_connected = 1;
 801aaa0:	4b06      	ldr	r3, [pc, #24]	; (801aabc <HAL_PCD_ResumeCallback+0x24>)
 801aaa2:	2201      	movs	r2, #1
 801aaa4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aaac:	4618      	mov	r0, r3
 801aaae:	f7fb fab6 	bl	801601e <USBD_LL_Resume>
}
 801aab2:	bf00      	nop
 801aab4:	3708      	adds	r7, #8
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}
 801aaba:	bf00      	nop
 801aabc:	20002cd1 	.word	0x20002cd1

0801aac0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b082      	sub	sp, #8
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
 801aac8:	460b      	mov	r3, r1
 801aaca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aad2:	78fa      	ldrb	r2, [r7, #3]
 801aad4:	4611      	mov	r1, r2
 801aad6:	4618      	mov	r0, r3
 801aad8:	f7fb fb0b 	bl	80160f2 <USBD_LL_IsoOUTIncomplete>
}
 801aadc:	bf00      	nop
 801aade:	3708      	adds	r7, #8
 801aae0:	46bd      	mov	sp, r7
 801aae2:	bd80      	pop	{r7, pc}

0801aae4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b082      	sub	sp, #8
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
 801aaec:	460b      	mov	r3, r1
 801aaee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aaf6:	78fa      	ldrb	r2, [r7, #3]
 801aaf8:	4611      	mov	r1, r2
 801aafa:	4618      	mov	r0, r3
 801aafc:	f7fb fac7 	bl	801608e <USBD_LL_IsoINIncomplete>
}
 801ab00:	bf00      	nop
 801ab02:	3708      	adds	r7, #8
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}

0801ab08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b082      	sub	sp, #8
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab16:	4618      	mov	r0, r3
 801ab18:	f7fb fb1d 	bl	8016156 <USBD_LL_DevConnected>
}
 801ab1c:	bf00      	nop
 801ab1e:	3708      	adds	r7, #8
 801ab20:	46bd      	mov	sp, r7
 801ab22:	bd80      	pop	{r7, pc}

0801ab24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab24:	b580      	push	{r7, lr}
 801ab26:	b082      	sub	sp, #8
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab32:	4618      	mov	r0, r3
 801ab34:	f7fb fb1a 	bl	801616c <USBD_LL_DevDisconnected>
}
 801ab38:	bf00      	nop
 801ab3a:	3708      	adds	r7, #8
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	bd80      	pop	{r7, pc}

0801ab40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b082      	sub	sp, #8
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	781b      	ldrb	r3, [r3, #0]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d13c      	bne.n	801abca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801ab50:	4a20      	ldr	r2, [pc, #128]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	4a1e      	ldr	r2, [pc, #120]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801ab60:	4b1c      	ldr	r3, [pc, #112]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801ab66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801ab68:	4b1a      	ldr	r3, [pc, #104]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab6a:	2204      	movs	r2, #4
 801ab6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801ab6e:	4b19      	ldr	r3, [pc, #100]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab70:	2202      	movs	r2, #2
 801ab72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801ab74:	4b17      	ldr	r3, [pc, #92]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab76:	2200      	movs	r2, #0
 801ab78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ab7a:	4b16      	ldr	r3, [pc, #88]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab7c:	2202      	movs	r2, #2
 801ab7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801ab80:	4b14      	ldr	r3, [pc, #80]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab82:	2200      	movs	r2, #0
 801ab84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ab86:	4b13      	ldr	r3, [pc, #76]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab88:	2200      	movs	r2, #0
 801ab8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ab8c:	4b11      	ldr	r3, [pc, #68]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab8e:	2200      	movs	r2, #0
 801ab90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801ab92:	4b10      	ldr	r3, [pc, #64]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab94:	2200      	movs	r2, #0
 801ab96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801ab98:	4b0e      	ldr	r3, [pc, #56]	; (801abd4 <USBD_LL_Init+0x94>)
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ab9e:	480d      	ldr	r0, [pc, #52]	; (801abd4 <USBD_LL_Init+0x94>)
 801aba0:	f7f4 f80f 	bl	800ebc2 <HAL_PCD_Init>
 801aba4:	4603      	mov	r3, r0
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d001      	beq.n	801abae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801abaa:	f7e8 ff48 	bl	8003a3e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801abae:	2180      	movs	r1, #128	; 0x80
 801abb0:	4808      	ldr	r0, [pc, #32]	; (801abd4 <USBD_LL_Init+0x94>)
 801abb2:	f7f5 fa66 	bl	8010082 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801abb6:	2240      	movs	r2, #64	; 0x40
 801abb8:	2100      	movs	r1, #0
 801abba:	4806      	ldr	r0, [pc, #24]	; (801abd4 <USBD_LL_Init+0x94>)
 801abbc:	f7f5 fa1a 	bl	800fff4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801abc0:	2280      	movs	r2, #128	; 0x80
 801abc2:	2101      	movs	r1, #1
 801abc4:	4803      	ldr	r0, [pc, #12]	; (801abd4 <USBD_LL_Init+0x94>)
 801abc6:	f7f5 fa15 	bl	800fff4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801abca:	2300      	movs	r3, #0
}
 801abcc:	4618      	mov	r0, r3
 801abce:	3708      	adds	r7, #8
 801abd0:	46bd      	mov	sp, r7
 801abd2:	bd80      	pop	{r7, pc}
 801abd4:	2000e26c 	.word	0x2000e26c

0801abd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b084      	sub	sp, #16
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abe0:	2300      	movs	r3, #0
 801abe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abe4:	2300      	movs	r3, #0
 801abe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801abee:	4618      	mov	r0, r3
 801abf0:	f7f4 f904 	bl	800edfc <HAL_PCD_Start>
 801abf4:	4603      	mov	r3, r0
 801abf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abf8:	7bfb      	ldrb	r3, [r7, #15]
 801abfa:	4618      	mov	r0, r3
 801abfc:	f000 f942 	bl	801ae84 <USBD_Get_USB_Status>
 801ac00:	4603      	mov	r3, r0
 801ac02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac04:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac06:	4618      	mov	r0, r3
 801ac08:	3710      	adds	r7, #16
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	bd80      	pop	{r7, pc}

0801ac0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ac0e:	b580      	push	{r7, lr}
 801ac10:	b084      	sub	sp, #16
 801ac12:	af00      	add	r7, sp, #0
 801ac14:	6078      	str	r0, [r7, #4]
 801ac16:	4608      	mov	r0, r1
 801ac18:	4611      	mov	r1, r2
 801ac1a:	461a      	mov	r2, r3
 801ac1c:	4603      	mov	r3, r0
 801ac1e:	70fb      	strb	r3, [r7, #3]
 801ac20:	460b      	mov	r3, r1
 801ac22:	70bb      	strb	r3, [r7, #2]
 801ac24:	4613      	mov	r3, r2
 801ac26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac28:	2300      	movs	r3, #0
 801ac2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ac36:	78bb      	ldrb	r3, [r7, #2]
 801ac38:	883a      	ldrh	r2, [r7, #0]
 801ac3a:	78f9      	ldrb	r1, [r7, #3]
 801ac3c:	f7f4 fdd5 	bl	800f7ea <HAL_PCD_EP_Open>
 801ac40:	4603      	mov	r3, r0
 801ac42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac44:	7bfb      	ldrb	r3, [r7, #15]
 801ac46:	4618      	mov	r0, r3
 801ac48:	f000 f91c 	bl	801ae84 <USBD_Get_USB_Status>
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac50:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac52:	4618      	mov	r0, r3
 801ac54:	3710      	adds	r7, #16
 801ac56:	46bd      	mov	sp, r7
 801ac58:	bd80      	pop	{r7, pc}

0801ac5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac5a:	b580      	push	{r7, lr}
 801ac5c:	b084      	sub	sp, #16
 801ac5e:	af00      	add	r7, sp, #0
 801ac60:	6078      	str	r0, [r7, #4]
 801ac62:	460b      	mov	r3, r1
 801ac64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac66:	2300      	movs	r3, #0
 801ac68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac74:	78fa      	ldrb	r2, [r7, #3]
 801ac76:	4611      	mov	r1, r2
 801ac78:	4618      	mov	r0, r3
 801ac7a:	f7f4 fe1e 	bl	800f8ba <HAL_PCD_EP_Close>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac82:	7bfb      	ldrb	r3, [r7, #15]
 801ac84:	4618      	mov	r0, r3
 801ac86:	f000 f8fd 	bl	801ae84 <USBD_Get_USB_Status>
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac8e:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	3710      	adds	r7, #16
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}

0801ac98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac98:	b580      	push	{r7, lr}
 801ac9a:	b084      	sub	sp, #16
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	6078      	str	r0, [r7, #4]
 801aca0:	460b      	mov	r3, r1
 801aca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aca4:	2300      	movs	r3, #0
 801aca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aca8:	2300      	movs	r3, #0
 801acaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acb2:	78fa      	ldrb	r2, [r7, #3]
 801acb4:	4611      	mov	r1, r2
 801acb6:	4618      	mov	r0, r3
 801acb8:	f7f4 fef6 	bl	800faa8 <HAL_PCD_EP_SetStall>
 801acbc:	4603      	mov	r3, r0
 801acbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801acc0:	7bfb      	ldrb	r3, [r7, #15]
 801acc2:	4618      	mov	r0, r3
 801acc4:	f000 f8de 	bl	801ae84 <USBD_Get_USB_Status>
 801acc8:	4603      	mov	r3, r0
 801acca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801accc:	7bbb      	ldrb	r3, [r7, #14]
}
 801acce:	4618      	mov	r0, r3
 801acd0:	3710      	adds	r7, #16
 801acd2:	46bd      	mov	sp, r7
 801acd4:	bd80      	pop	{r7, pc}

0801acd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801acd6:	b580      	push	{r7, lr}
 801acd8:	b084      	sub	sp, #16
 801acda:	af00      	add	r7, sp, #0
 801acdc:	6078      	str	r0, [r7, #4]
 801acde:	460b      	mov	r3, r1
 801ace0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ace2:	2300      	movs	r3, #0
 801ace4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ace6:	2300      	movs	r3, #0
 801ace8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acf0:	78fa      	ldrb	r2, [r7, #3]
 801acf2:	4611      	mov	r1, r2
 801acf4:	4618      	mov	r0, r3
 801acf6:	f7f4 ff3b 	bl	800fb70 <HAL_PCD_EP_ClrStall>
 801acfa:	4603      	mov	r3, r0
 801acfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801acfe:	7bfb      	ldrb	r3, [r7, #15]
 801ad00:	4618      	mov	r0, r3
 801ad02:	f000 f8bf 	bl	801ae84 <USBD_Get_USB_Status>
 801ad06:	4603      	mov	r3, r0
 801ad08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad0a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	3710      	adds	r7, #16
 801ad10:	46bd      	mov	sp, r7
 801ad12:	bd80      	pop	{r7, pc}

0801ad14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ad14:	b480      	push	{r7}
 801ad16:	b085      	sub	sp, #20
 801ad18:	af00      	add	r7, sp, #0
 801ad1a:	6078      	str	r0, [r7, #4]
 801ad1c:	460b      	mov	r3, r1
 801ad1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ad28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	da0b      	bge.n	801ad48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ad30:	78fb      	ldrb	r3, [r7, #3]
 801ad32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ad36:	68f9      	ldr	r1, [r7, #12]
 801ad38:	4613      	mov	r3, r2
 801ad3a:	00db      	lsls	r3, r3, #3
 801ad3c:	4413      	add	r3, r2
 801ad3e:	009b      	lsls	r3, r3, #2
 801ad40:	440b      	add	r3, r1
 801ad42:	333e      	adds	r3, #62	; 0x3e
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	e00b      	b.n	801ad60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ad48:	78fb      	ldrb	r3, [r7, #3]
 801ad4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ad4e:	68f9      	ldr	r1, [r7, #12]
 801ad50:	4613      	mov	r3, r2
 801ad52:	00db      	lsls	r3, r3, #3
 801ad54:	4413      	add	r3, r2
 801ad56:	009b      	lsls	r3, r3, #2
 801ad58:	440b      	add	r3, r1
 801ad5a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ad5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ad60:	4618      	mov	r0, r3
 801ad62:	3714      	adds	r7, #20
 801ad64:	46bd      	mov	sp, r7
 801ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6a:	4770      	bx	lr

0801ad6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b084      	sub	sp, #16
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	6078      	str	r0, [r7, #4]
 801ad74:	460b      	mov	r3, r1
 801ad76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad78:	2300      	movs	r3, #0
 801ad7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad86:	78fa      	ldrb	r2, [r7, #3]
 801ad88:	4611      	mov	r1, r2
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f7f4 fd08 	bl	800f7a0 <HAL_PCD_SetAddress>
 801ad90:	4603      	mov	r3, r0
 801ad92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad94:	7bfb      	ldrb	r3, [r7, #15]
 801ad96:	4618      	mov	r0, r3
 801ad98:	f000 f874 	bl	801ae84 <USBD_Get_USB_Status>
 801ad9c:	4603      	mov	r3, r0
 801ad9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ada0:	7bbb      	ldrb	r3, [r7, #14]
}
 801ada2:	4618      	mov	r0, r3
 801ada4:	3710      	adds	r7, #16
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd80      	pop	{r7, pc}

0801adaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801adaa:	b580      	push	{r7, lr}
 801adac:	b086      	sub	sp, #24
 801adae:	af00      	add	r7, sp, #0
 801adb0:	60f8      	str	r0, [r7, #12]
 801adb2:	607a      	str	r2, [r7, #4]
 801adb4:	603b      	str	r3, [r7, #0]
 801adb6:	460b      	mov	r3, r1
 801adb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801adba:	2300      	movs	r3, #0
 801adbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801adbe:	2300      	movs	r3, #0
 801adc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801adc8:	7af9      	ldrb	r1, [r7, #11]
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	687a      	ldr	r2, [r7, #4]
 801adce:	f7f4 fe21 	bl	800fa14 <HAL_PCD_EP_Transmit>
 801add2:	4603      	mov	r3, r0
 801add4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801add6:	7dfb      	ldrb	r3, [r7, #23]
 801add8:	4618      	mov	r0, r3
 801adda:	f000 f853 	bl	801ae84 <USBD_Get_USB_Status>
 801adde:	4603      	mov	r3, r0
 801ade0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ade2:	7dbb      	ldrb	r3, [r7, #22]
}
 801ade4:	4618      	mov	r0, r3
 801ade6:	3718      	adds	r7, #24
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd80      	pop	{r7, pc}

0801adec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b086      	sub	sp, #24
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	60f8      	str	r0, [r7, #12]
 801adf4:	607a      	str	r2, [r7, #4]
 801adf6:	603b      	str	r3, [r7, #0]
 801adf8:	460b      	mov	r3, r1
 801adfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801adfc:	2300      	movs	r3, #0
 801adfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae00:	2300      	movs	r3, #0
 801ae02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ae0a:	7af9      	ldrb	r1, [r7, #11]
 801ae0c:	683b      	ldr	r3, [r7, #0]
 801ae0e:	687a      	ldr	r2, [r7, #4]
 801ae10:	f7f4 fd9d 	bl	800f94e <HAL_PCD_EP_Receive>
 801ae14:	4603      	mov	r3, r0
 801ae16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ae18:	7dfb      	ldrb	r3, [r7, #23]
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	f000 f832 	bl	801ae84 <USBD_Get_USB_Status>
 801ae20:	4603      	mov	r3, r0
 801ae22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ae24:	7dbb      	ldrb	r3, [r7, #22]
}
 801ae26:	4618      	mov	r0, r3
 801ae28:	3718      	adds	r7, #24
 801ae2a:	46bd      	mov	sp, r7
 801ae2c:	bd80      	pop	{r7, pc}

0801ae2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ae2e:	b580      	push	{r7, lr}
 801ae30:	b082      	sub	sp, #8
 801ae32:	af00      	add	r7, sp, #0
 801ae34:	6078      	str	r0, [r7, #4]
 801ae36:	460b      	mov	r3, r1
 801ae38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ae40:	78fa      	ldrb	r2, [r7, #3]
 801ae42:	4611      	mov	r1, r2
 801ae44:	4618      	mov	r0, r3
 801ae46:	f7f4 fdcd 	bl	800f9e4 <HAL_PCD_EP_GetRxCount>
 801ae4a:	4603      	mov	r3, r0
}
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	3708      	adds	r7, #8
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bd80      	pop	{r7, pc}

0801ae54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ae54:	b480      	push	{r7}
 801ae56:	b083      	sub	sp, #12
 801ae58:	af00      	add	r7, sp, #0
 801ae5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ae5c:	4b03      	ldr	r3, [pc, #12]	; (801ae6c <USBD_static_malloc+0x18>)
}
 801ae5e:	4618      	mov	r0, r3
 801ae60:	370c      	adds	r7, #12
 801ae62:	46bd      	mov	sp, r7
 801ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae68:	4770      	bx	lr
 801ae6a:	bf00      	nop
 801ae6c:	2000e778 	.word	0x2000e778

0801ae70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ae70:	b480      	push	{r7}
 801ae72:	b083      	sub	sp, #12
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	6078      	str	r0, [r7, #4]

}
 801ae78:	bf00      	nop
 801ae7a:	370c      	adds	r7, #12
 801ae7c:	46bd      	mov	sp, r7
 801ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae82:	4770      	bx	lr

0801ae84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ae84:	b480      	push	{r7}
 801ae86:	b085      	sub	sp, #20
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	4603      	mov	r3, r0
 801ae8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae8e:	2300      	movs	r3, #0
 801ae90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ae92:	79fb      	ldrb	r3, [r7, #7]
 801ae94:	2b03      	cmp	r3, #3
 801ae96:	d817      	bhi.n	801aec8 <USBD_Get_USB_Status+0x44>
 801ae98:	a201      	add	r2, pc, #4	; (adr r2, 801aea0 <USBD_Get_USB_Status+0x1c>)
 801ae9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae9e:	bf00      	nop
 801aea0:	0801aeb1 	.word	0x0801aeb1
 801aea4:	0801aeb7 	.word	0x0801aeb7
 801aea8:	0801aebd 	.word	0x0801aebd
 801aeac:	0801aec3 	.word	0x0801aec3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801aeb0:	2300      	movs	r3, #0
 801aeb2:	73fb      	strb	r3, [r7, #15]
    break;
 801aeb4:	e00b      	b.n	801aece <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801aeb6:	2303      	movs	r3, #3
 801aeb8:	73fb      	strb	r3, [r7, #15]
    break;
 801aeba:	e008      	b.n	801aece <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801aebc:	2301      	movs	r3, #1
 801aebe:	73fb      	strb	r3, [r7, #15]
    break;
 801aec0:	e005      	b.n	801aece <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801aec2:	2303      	movs	r3, #3
 801aec4:	73fb      	strb	r3, [r7, #15]
    break;
 801aec6:	e002      	b.n	801aece <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801aec8:	2303      	movs	r3, #3
 801aeca:	73fb      	strb	r3, [r7, #15]
    break;
 801aecc:	bf00      	nop
  }
  return usb_status;
 801aece:	7bfb      	ldrb	r3, [r7, #15]
}
 801aed0:	4618      	mov	r0, r3
 801aed2:	3714      	adds	r7, #20
 801aed4:	46bd      	mov	sp, r7
 801aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeda:	4770      	bx	lr

0801aedc <std>:
 801aedc:	2300      	movs	r3, #0
 801aede:	b510      	push	{r4, lr}
 801aee0:	4604      	mov	r4, r0
 801aee2:	e9c0 3300 	strd	r3, r3, [r0]
 801aee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aeea:	6083      	str	r3, [r0, #8]
 801aeec:	8181      	strh	r1, [r0, #12]
 801aeee:	6643      	str	r3, [r0, #100]	; 0x64
 801aef0:	81c2      	strh	r2, [r0, #14]
 801aef2:	6183      	str	r3, [r0, #24]
 801aef4:	4619      	mov	r1, r3
 801aef6:	2208      	movs	r2, #8
 801aef8:	305c      	adds	r0, #92	; 0x5c
 801aefa:	f000 f91a 	bl	801b132 <memset>
 801aefe:	4b05      	ldr	r3, [pc, #20]	; (801af14 <std+0x38>)
 801af00:	6263      	str	r3, [r4, #36]	; 0x24
 801af02:	4b05      	ldr	r3, [pc, #20]	; (801af18 <std+0x3c>)
 801af04:	62a3      	str	r3, [r4, #40]	; 0x28
 801af06:	4b05      	ldr	r3, [pc, #20]	; (801af1c <std+0x40>)
 801af08:	62e3      	str	r3, [r4, #44]	; 0x2c
 801af0a:	4b05      	ldr	r3, [pc, #20]	; (801af20 <std+0x44>)
 801af0c:	6224      	str	r4, [r4, #32]
 801af0e:	6323      	str	r3, [r4, #48]	; 0x30
 801af10:	bd10      	pop	{r4, pc}
 801af12:	bf00      	nop
 801af14:	0801c109 	.word	0x0801c109
 801af18:	0801c12b 	.word	0x0801c12b
 801af1c:	0801c163 	.word	0x0801c163
 801af20:	0801c187 	.word	0x0801c187

0801af24 <_cleanup_r>:
 801af24:	4901      	ldr	r1, [pc, #4]	; (801af2c <_cleanup_r+0x8>)
 801af26:	f000 b8af 	b.w	801b088 <_fwalk_reent>
 801af2a:	bf00      	nop
 801af2c:	0801dd3d 	.word	0x0801dd3d

0801af30 <__sfmoreglue>:
 801af30:	b570      	push	{r4, r5, r6, lr}
 801af32:	2268      	movs	r2, #104	; 0x68
 801af34:	1e4d      	subs	r5, r1, #1
 801af36:	4355      	muls	r5, r2
 801af38:	460e      	mov	r6, r1
 801af3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801af3e:	f000 f921 	bl	801b184 <_malloc_r>
 801af42:	4604      	mov	r4, r0
 801af44:	b140      	cbz	r0, 801af58 <__sfmoreglue+0x28>
 801af46:	2100      	movs	r1, #0
 801af48:	e9c0 1600 	strd	r1, r6, [r0]
 801af4c:	300c      	adds	r0, #12
 801af4e:	60a0      	str	r0, [r4, #8]
 801af50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801af54:	f000 f8ed 	bl	801b132 <memset>
 801af58:	4620      	mov	r0, r4
 801af5a:	bd70      	pop	{r4, r5, r6, pc}

0801af5c <__sfp_lock_acquire>:
 801af5c:	4801      	ldr	r0, [pc, #4]	; (801af64 <__sfp_lock_acquire+0x8>)
 801af5e:	f000 b8d8 	b.w	801b112 <__retarget_lock_acquire_recursive>
 801af62:	bf00      	nop
 801af64:	2000e999 	.word	0x2000e999

0801af68 <__sfp_lock_release>:
 801af68:	4801      	ldr	r0, [pc, #4]	; (801af70 <__sfp_lock_release+0x8>)
 801af6a:	f000 b8d3 	b.w	801b114 <__retarget_lock_release_recursive>
 801af6e:	bf00      	nop
 801af70:	2000e999 	.word	0x2000e999

0801af74 <__sinit_lock_acquire>:
 801af74:	4801      	ldr	r0, [pc, #4]	; (801af7c <__sinit_lock_acquire+0x8>)
 801af76:	f000 b8cc 	b.w	801b112 <__retarget_lock_acquire_recursive>
 801af7a:	bf00      	nop
 801af7c:	2000e99a 	.word	0x2000e99a

0801af80 <__sinit_lock_release>:
 801af80:	4801      	ldr	r0, [pc, #4]	; (801af88 <__sinit_lock_release+0x8>)
 801af82:	f000 b8c7 	b.w	801b114 <__retarget_lock_release_recursive>
 801af86:	bf00      	nop
 801af88:	2000e99a 	.word	0x2000e99a

0801af8c <__sinit>:
 801af8c:	b510      	push	{r4, lr}
 801af8e:	4604      	mov	r4, r0
 801af90:	f7ff fff0 	bl	801af74 <__sinit_lock_acquire>
 801af94:	69a3      	ldr	r3, [r4, #24]
 801af96:	b11b      	cbz	r3, 801afa0 <__sinit+0x14>
 801af98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af9c:	f7ff bff0 	b.w	801af80 <__sinit_lock_release>
 801afa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801afa4:	6523      	str	r3, [r4, #80]	; 0x50
 801afa6:	4b13      	ldr	r3, [pc, #76]	; (801aff4 <__sinit+0x68>)
 801afa8:	4a13      	ldr	r2, [pc, #76]	; (801aff8 <__sinit+0x6c>)
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	62a2      	str	r2, [r4, #40]	; 0x28
 801afae:	42a3      	cmp	r3, r4
 801afb0:	bf04      	itt	eq
 801afb2:	2301      	moveq	r3, #1
 801afb4:	61a3      	streq	r3, [r4, #24]
 801afb6:	4620      	mov	r0, r4
 801afb8:	f000 f820 	bl	801affc <__sfp>
 801afbc:	6060      	str	r0, [r4, #4]
 801afbe:	4620      	mov	r0, r4
 801afc0:	f000 f81c 	bl	801affc <__sfp>
 801afc4:	60a0      	str	r0, [r4, #8]
 801afc6:	4620      	mov	r0, r4
 801afc8:	f000 f818 	bl	801affc <__sfp>
 801afcc:	2200      	movs	r2, #0
 801afce:	60e0      	str	r0, [r4, #12]
 801afd0:	2104      	movs	r1, #4
 801afd2:	6860      	ldr	r0, [r4, #4]
 801afd4:	f7ff ff82 	bl	801aedc <std>
 801afd8:	68a0      	ldr	r0, [r4, #8]
 801afda:	2201      	movs	r2, #1
 801afdc:	2109      	movs	r1, #9
 801afde:	f7ff ff7d 	bl	801aedc <std>
 801afe2:	68e0      	ldr	r0, [r4, #12]
 801afe4:	2202      	movs	r2, #2
 801afe6:	2112      	movs	r1, #18
 801afe8:	f7ff ff78 	bl	801aedc <std>
 801afec:	2301      	movs	r3, #1
 801afee:	61a3      	str	r3, [r4, #24]
 801aff0:	e7d2      	b.n	801af98 <__sinit+0xc>
 801aff2:	bf00      	nop
 801aff4:	08021ea4 	.word	0x08021ea4
 801aff8:	0801af25 	.word	0x0801af25

0801affc <__sfp>:
 801affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801affe:	4607      	mov	r7, r0
 801b000:	f7ff ffac 	bl	801af5c <__sfp_lock_acquire>
 801b004:	4b1e      	ldr	r3, [pc, #120]	; (801b080 <__sfp+0x84>)
 801b006:	681e      	ldr	r6, [r3, #0]
 801b008:	69b3      	ldr	r3, [r6, #24]
 801b00a:	b913      	cbnz	r3, 801b012 <__sfp+0x16>
 801b00c:	4630      	mov	r0, r6
 801b00e:	f7ff ffbd 	bl	801af8c <__sinit>
 801b012:	3648      	adds	r6, #72	; 0x48
 801b014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b018:	3b01      	subs	r3, #1
 801b01a:	d503      	bpl.n	801b024 <__sfp+0x28>
 801b01c:	6833      	ldr	r3, [r6, #0]
 801b01e:	b30b      	cbz	r3, 801b064 <__sfp+0x68>
 801b020:	6836      	ldr	r6, [r6, #0]
 801b022:	e7f7      	b.n	801b014 <__sfp+0x18>
 801b024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b028:	b9d5      	cbnz	r5, 801b060 <__sfp+0x64>
 801b02a:	4b16      	ldr	r3, [pc, #88]	; (801b084 <__sfp+0x88>)
 801b02c:	60e3      	str	r3, [r4, #12]
 801b02e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b032:	6665      	str	r5, [r4, #100]	; 0x64
 801b034:	f000 f86c 	bl	801b110 <__retarget_lock_init_recursive>
 801b038:	f7ff ff96 	bl	801af68 <__sfp_lock_release>
 801b03c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b044:	6025      	str	r5, [r4, #0]
 801b046:	61a5      	str	r5, [r4, #24]
 801b048:	2208      	movs	r2, #8
 801b04a:	4629      	mov	r1, r5
 801b04c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b050:	f000 f86f 	bl	801b132 <memset>
 801b054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b05c:	4620      	mov	r0, r4
 801b05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b060:	3468      	adds	r4, #104	; 0x68
 801b062:	e7d9      	b.n	801b018 <__sfp+0x1c>
 801b064:	2104      	movs	r1, #4
 801b066:	4638      	mov	r0, r7
 801b068:	f7ff ff62 	bl	801af30 <__sfmoreglue>
 801b06c:	4604      	mov	r4, r0
 801b06e:	6030      	str	r0, [r6, #0]
 801b070:	2800      	cmp	r0, #0
 801b072:	d1d5      	bne.n	801b020 <__sfp+0x24>
 801b074:	f7ff ff78 	bl	801af68 <__sfp_lock_release>
 801b078:	230c      	movs	r3, #12
 801b07a:	603b      	str	r3, [r7, #0]
 801b07c:	e7ee      	b.n	801b05c <__sfp+0x60>
 801b07e:	bf00      	nop
 801b080:	08021ea4 	.word	0x08021ea4
 801b084:	ffff0001 	.word	0xffff0001

0801b088 <_fwalk_reent>:
 801b088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b08c:	4606      	mov	r6, r0
 801b08e:	4688      	mov	r8, r1
 801b090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b094:	2700      	movs	r7, #0
 801b096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b09a:	f1b9 0901 	subs.w	r9, r9, #1
 801b09e:	d505      	bpl.n	801b0ac <_fwalk_reent+0x24>
 801b0a0:	6824      	ldr	r4, [r4, #0]
 801b0a2:	2c00      	cmp	r4, #0
 801b0a4:	d1f7      	bne.n	801b096 <_fwalk_reent+0xe>
 801b0a6:	4638      	mov	r0, r7
 801b0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0ac:	89ab      	ldrh	r3, [r5, #12]
 801b0ae:	2b01      	cmp	r3, #1
 801b0b0:	d907      	bls.n	801b0c2 <_fwalk_reent+0x3a>
 801b0b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b0b6:	3301      	adds	r3, #1
 801b0b8:	d003      	beq.n	801b0c2 <_fwalk_reent+0x3a>
 801b0ba:	4629      	mov	r1, r5
 801b0bc:	4630      	mov	r0, r6
 801b0be:	47c0      	blx	r8
 801b0c0:	4307      	orrs	r7, r0
 801b0c2:	3568      	adds	r5, #104	; 0x68
 801b0c4:	e7e9      	b.n	801b09a <_fwalk_reent+0x12>
	...

0801b0c8 <__libc_init_array>:
 801b0c8:	b570      	push	{r4, r5, r6, lr}
 801b0ca:	4d0d      	ldr	r5, [pc, #52]	; (801b100 <__libc_init_array+0x38>)
 801b0cc:	4c0d      	ldr	r4, [pc, #52]	; (801b104 <__libc_init_array+0x3c>)
 801b0ce:	1b64      	subs	r4, r4, r5
 801b0d0:	10a4      	asrs	r4, r4, #2
 801b0d2:	2600      	movs	r6, #0
 801b0d4:	42a6      	cmp	r6, r4
 801b0d6:	d109      	bne.n	801b0ec <__libc_init_array+0x24>
 801b0d8:	4d0b      	ldr	r5, [pc, #44]	; (801b108 <__libc_init_array+0x40>)
 801b0da:	4c0c      	ldr	r4, [pc, #48]	; (801b10c <__libc_init_array+0x44>)
 801b0dc:	f006 faea 	bl	80216b4 <_init>
 801b0e0:	1b64      	subs	r4, r4, r5
 801b0e2:	10a4      	asrs	r4, r4, #2
 801b0e4:	2600      	movs	r6, #0
 801b0e6:	42a6      	cmp	r6, r4
 801b0e8:	d105      	bne.n	801b0f6 <__libc_init_array+0x2e>
 801b0ea:	bd70      	pop	{r4, r5, r6, pc}
 801b0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0f0:	4798      	blx	r3
 801b0f2:	3601      	adds	r6, #1
 801b0f4:	e7ee      	b.n	801b0d4 <__libc_init_array+0xc>
 801b0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0fa:	4798      	blx	r3
 801b0fc:	3601      	adds	r6, #1
 801b0fe:	e7f2      	b.n	801b0e6 <__libc_init_array+0x1e>
 801b100:	08022540 	.word	0x08022540
 801b104:	08022540 	.word	0x08022540
 801b108:	08022540 	.word	0x08022540
 801b10c:	08022544 	.word	0x08022544

0801b110 <__retarget_lock_init_recursive>:
 801b110:	4770      	bx	lr

0801b112 <__retarget_lock_acquire_recursive>:
 801b112:	4770      	bx	lr

0801b114 <__retarget_lock_release_recursive>:
 801b114:	4770      	bx	lr

0801b116 <memcpy>:
 801b116:	440a      	add	r2, r1
 801b118:	4291      	cmp	r1, r2
 801b11a:	f100 33ff 	add.w	r3, r0, #4294967295
 801b11e:	d100      	bne.n	801b122 <memcpy+0xc>
 801b120:	4770      	bx	lr
 801b122:	b510      	push	{r4, lr}
 801b124:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b128:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b12c:	4291      	cmp	r1, r2
 801b12e:	d1f9      	bne.n	801b124 <memcpy+0xe>
 801b130:	bd10      	pop	{r4, pc}

0801b132 <memset>:
 801b132:	4402      	add	r2, r0
 801b134:	4603      	mov	r3, r0
 801b136:	4293      	cmp	r3, r2
 801b138:	d100      	bne.n	801b13c <memset+0xa>
 801b13a:	4770      	bx	lr
 801b13c:	f803 1b01 	strb.w	r1, [r3], #1
 801b140:	e7f9      	b.n	801b136 <memset+0x4>
	...

0801b144 <sbrk_aligned>:
 801b144:	b570      	push	{r4, r5, r6, lr}
 801b146:	4e0e      	ldr	r6, [pc, #56]	; (801b180 <sbrk_aligned+0x3c>)
 801b148:	460c      	mov	r4, r1
 801b14a:	6831      	ldr	r1, [r6, #0]
 801b14c:	4605      	mov	r5, r0
 801b14e:	b911      	cbnz	r1, 801b156 <sbrk_aligned+0x12>
 801b150:	f000 ff70 	bl	801c034 <_sbrk_r>
 801b154:	6030      	str	r0, [r6, #0]
 801b156:	4621      	mov	r1, r4
 801b158:	4628      	mov	r0, r5
 801b15a:	f000 ff6b 	bl	801c034 <_sbrk_r>
 801b15e:	1c43      	adds	r3, r0, #1
 801b160:	d00a      	beq.n	801b178 <sbrk_aligned+0x34>
 801b162:	1cc4      	adds	r4, r0, #3
 801b164:	f024 0403 	bic.w	r4, r4, #3
 801b168:	42a0      	cmp	r0, r4
 801b16a:	d007      	beq.n	801b17c <sbrk_aligned+0x38>
 801b16c:	1a21      	subs	r1, r4, r0
 801b16e:	4628      	mov	r0, r5
 801b170:	f000 ff60 	bl	801c034 <_sbrk_r>
 801b174:	3001      	adds	r0, #1
 801b176:	d101      	bne.n	801b17c <sbrk_aligned+0x38>
 801b178:	f04f 34ff 	mov.w	r4, #4294967295
 801b17c:	4620      	mov	r0, r4
 801b17e:	bd70      	pop	{r4, r5, r6, pc}
 801b180:	2000e9a0 	.word	0x2000e9a0

0801b184 <_malloc_r>:
 801b184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b188:	1ccd      	adds	r5, r1, #3
 801b18a:	f025 0503 	bic.w	r5, r5, #3
 801b18e:	3508      	adds	r5, #8
 801b190:	2d0c      	cmp	r5, #12
 801b192:	bf38      	it	cc
 801b194:	250c      	movcc	r5, #12
 801b196:	2d00      	cmp	r5, #0
 801b198:	4607      	mov	r7, r0
 801b19a:	db01      	blt.n	801b1a0 <_malloc_r+0x1c>
 801b19c:	42a9      	cmp	r1, r5
 801b19e:	d905      	bls.n	801b1ac <_malloc_r+0x28>
 801b1a0:	230c      	movs	r3, #12
 801b1a2:	603b      	str	r3, [r7, #0]
 801b1a4:	2600      	movs	r6, #0
 801b1a6:	4630      	mov	r0, r6
 801b1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1ac:	4e2e      	ldr	r6, [pc, #184]	; (801b268 <_malloc_r+0xe4>)
 801b1ae:	f003 f9a1 	bl	801e4f4 <__malloc_lock>
 801b1b2:	6833      	ldr	r3, [r6, #0]
 801b1b4:	461c      	mov	r4, r3
 801b1b6:	bb34      	cbnz	r4, 801b206 <_malloc_r+0x82>
 801b1b8:	4629      	mov	r1, r5
 801b1ba:	4638      	mov	r0, r7
 801b1bc:	f7ff ffc2 	bl	801b144 <sbrk_aligned>
 801b1c0:	1c43      	adds	r3, r0, #1
 801b1c2:	4604      	mov	r4, r0
 801b1c4:	d14d      	bne.n	801b262 <_malloc_r+0xde>
 801b1c6:	6834      	ldr	r4, [r6, #0]
 801b1c8:	4626      	mov	r6, r4
 801b1ca:	2e00      	cmp	r6, #0
 801b1cc:	d140      	bne.n	801b250 <_malloc_r+0xcc>
 801b1ce:	6823      	ldr	r3, [r4, #0]
 801b1d0:	4631      	mov	r1, r6
 801b1d2:	4638      	mov	r0, r7
 801b1d4:	eb04 0803 	add.w	r8, r4, r3
 801b1d8:	f000 ff2c 	bl	801c034 <_sbrk_r>
 801b1dc:	4580      	cmp	r8, r0
 801b1de:	d13a      	bne.n	801b256 <_malloc_r+0xd2>
 801b1e0:	6821      	ldr	r1, [r4, #0]
 801b1e2:	3503      	adds	r5, #3
 801b1e4:	1a6d      	subs	r5, r5, r1
 801b1e6:	f025 0503 	bic.w	r5, r5, #3
 801b1ea:	3508      	adds	r5, #8
 801b1ec:	2d0c      	cmp	r5, #12
 801b1ee:	bf38      	it	cc
 801b1f0:	250c      	movcc	r5, #12
 801b1f2:	4629      	mov	r1, r5
 801b1f4:	4638      	mov	r0, r7
 801b1f6:	f7ff ffa5 	bl	801b144 <sbrk_aligned>
 801b1fa:	3001      	adds	r0, #1
 801b1fc:	d02b      	beq.n	801b256 <_malloc_r+0xd2>
 801b1fe:	6823      	ldr	r3, [r4, #0]
 801b200:	442b      	add	r3, r5
 801b202:	6023      	str	r3, [r4, #0]
 801b204:	e00e      	b.n	801b224 <_malloc_r+0xa0>
 801b206:	6822      	ldr	r2, [r4, #0]
 801b208:	1b52      	subs	r2, r2, r5
 801b20a:	d41e      	bmi.n	801b24a <_malloc_r+0xc6>
 801b20c:	2a0b      	cmp	r2, #11
 801b20e:	d916      	bls.n	801b23e <_malloc_r+0xba>
 801b210:	1961      	adds	r1, r4, r5
 801b212:	42a3      	cmp	r3, r4
 801b214:	6025      	str	r5, [r4, #0]
 801b216:	bf18      	it	ne
 801b218:	6059      	strne	r1, [r3, #4]
 801b21a:	6863      	ldr	r3, [r4, #4]
 801b21c:	bf08      	it	eq
 801b21e:	6031      	streq	r1, [r6, #0]
 801b220:	5162      	str	r2, [r4, r5]
 801b222:	604b      	str	r3, [r1, #4]
 801b224:	4638      	mov	r0, r7
 801b226:	f104 060b 	add.w	r6, r4, #11
 801b22a:	f003 f969 	bl	801e500 <__malloc_unlock>
 801b22e:	f026 0607 	bic.w	r6, r6, #7
 801b232:	1d23      	adds	r3, r4, #4
 801b234:	1af2      	subs	r2, r6, r3
 801b236:	d0b6      	beq.n	801b1a6 <_malloc_r+0x22>
 801b238:	1b9b      	subs	r3, r3, r6
 801b23a:	50a3      	str	r3, [r4, r2]
 801b23c:	e7b3      	b.n	801b1a6 <_malloc_r+0x22>
 801b23e:	6862      	ldr	r2, [r4, #4]
 801b240:	42a3      	cmp	r3, r4
 801b242:	bf0c      	ite	eq
 801b244:	6032      	streq	r2, [r6, #0]
 801b246:	605a      	strne	r2, [r3, #4]
 801b248:	e7ec      	b.n	801b224 <_malloc_r+0xa0>
 801b24a:	4623      	mov	r3, r4
 801b24c:	6864      	ldr	r4, [r4, #4]
 801b24e:	e7b2      	b.n	801b1b6 <_malloc_r+0x32>
 801b250:	4634      	mov	r4, r6
 801b252:	6876      	ldr	r6, [r6, #4]
 801b254:	e7b9      	b.n	801b1ca <_malloc_r+0x46>
 801b256:	230c      	movs	r3, #12
 801b258:	603b      	str	r3, [r7, #0]
 801b25a:	4638      	mov	r0, r7
 801b25c:	f003 f950 	bl	801e500 <__malloc_unlock>
 801b260:	e7a1      	b.n	801b1a6 <_malloc_r+0x22>
 801b262:	6025      	str	r5, [r4, #0]
 801b264:	e7de      	b.n	801b224 <_malloc_r+0xa0>
 801b266:	bf00      	nop
 801b268:	2000e99c 	.word	0x2000e99c

0801b26c <__cvt>:
 801b26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b270:	ec55 4b10 	vmov	r4, r5, d0
 801b274:	2d00      	cmp	r5, #0
 801b276:	460e      	mov	r6, r1
 801b278:	4619      	mov	r1, r3
 801b27a:	462b      	mov	r3, r5
 801b27c:	bfbb      	ittet	lt
 801b27e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b282:	461d      	movlt	r5, r3
 801b284:	2300      	movge	r3, #0
 801b286:	232d      	movlt	r3, #45	; 0x2d
 801b288:	700b      	strb	r3, [r1, #0]
 801b28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b28c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b290:	4691      	mov	r9, r2
 801b292:	f023 0820 	bic.w	r8, r3, #32
 801b296:	bfbc      	itt	lt
 801b298:	4622      	movlt	r2, r4
 801b29a:	4614      	movlt	r4, r2
 801b29c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b2a0:	d005      	beq.n	801b2ae <__cvt+0x42>
 801b2a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b2a6:	d100      	bne.n	801b2aa <__cvt+0x3e>
 801b2a8:	3601      	adds	r6, #1
 801b2aa:	2102      	movs	r1, #2
 801b2ac:	e000      	b.n	801b2b0 <__cvt+0x44>
 801b2ae:	2103      	movs	r1, #3
 801b2b0:	ab03      	add	r3, sp, #12
 801b2b2:	9301      	str	r3, [sp, #4]
 801b2b4:	ab02      	add	r3, sp, #8
 801b2b6:	9300      	str	r3, [sp, #0]
 801b2b8:	ec45 4b10 	vmov	d0, r4, r5
 801b2bc:	4653      	mov	r3, sl
 801b2be:	4632      	mov	r2, r6
 801b2c0:	f001 fec2 	bl	801d048 <_dtoa_r>
 801b2c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b2c8:	4607      	mov	r7, r0
 801b2ca:	d102      	bne.n	801b2d2 <__cvt+0x66>
 801b2cc:	f019 0f01 	tst.w	r9, #1
 801b2d0:	d022      	beq.n	801b318 <__cvt+0xac>
 801b2d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b2d6:	eb07 0906 	add.w	r9, r7, r6
 801b2da:	d110      	bne.n	801b2fe <__cvt+0x92>
 801b2dc:	783b      	ldrb	r3, [r7, #0]
 801b2de:	2b30      	cmp	r3, #48	; 0x30
 801b2e0:	d10a      	bne.n	801b2f8 <__cvt+0x8c>
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	4620      	mov	r0, r4
 801b2e8:	4629      	mov	r1, r5
 801b2ea:	f7e5 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 801b2ee:	b918      	cbnz	r0, 801b2f8 <__cvt+0x8c>
 801b2f0:	f1c6 0601 	rsb	r6, r6, #1
 801b2f4:	f8ca 6000 	str.w	r6, [sl]
 801b2f8:	f8da 3000 	ldr.w	r3, [sl]
 801b2fc:	4499      	add	r9, r3
 801b2fe:	2200      	movs	r2, #0
 801b300:	2300      	movs	r3, #0
 801b302:	4620      	mov	r0, r4
 801b304:	4629      	mov	r1, r5
 801b306:	f7e5 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 801b30a:	b108      	cbz	r0, 801b310 <__cvt+0xa4>
 801b30c:	f8cd 900c 	str.w	r9, [sp, #12]
 801b310:	2230      	movs	r2, #48	; 0x30
 801b312:	9b03      	ldr	r3, [sp, #12]
 801b314:	454b      	cmp	r3, r9
 801b316:	d307      	bcc.n	801b328 <__cvt+0xbc>
 801b318:	9b03      	ldr	r3, [sp, #12]
 801b31a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b31c:	1bdb      	subs	r3, r3, r7
 801b31e:	4638      	mov	r0, r7
 801b320:	6013      	str	r3, [r2, #0]
 801b322:	b004      	add	sp, #16
 801b324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b328:	1c59      	adds	r1, r3, #1
 801b32a:	9103      	str	r1, [sp, #12]
 801b32c:	701a      	strb	r2, [r3, #0]
 801b32e:	e7f0      	b.n	801b312 <__cvt+0xa6>

0801b330 <__exponent>:
 801b330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b332:	4603      	mov	r3, r0
 801b334:	2900      	cmp	r1, #0
 801b336:	bfb8      	it	lt
 801b338:	4249      	neglt	r1, r1
 801b33a:	f803 2b02 	strb.w	r2, [r3], #2
 801b33e:	bfb4      	ite	lt
 801b340:	222d      	movlt	r2, #45	; 0x2d
 801b342:	222b      	movge	r2, #43	; 0x2b
 801b344:	2909      	cmp	r1, #9
 801b346:	7042      	strb	r2, [r0, #1]
 801b348:	dd2a      	ble.n	801b3a0 <__exponent+0x70>
 801b34a:	f10d 0407 	add.w	r4, sp, #7
 801b34e:	46a4      	mov	ip, r4
 801b350:	270a      	movs	r7, #10
 801b352:	46a6      	mov	lr, r4
 801b354:	460a      	mov	r2, r1
 801b356:	fb91 f6f7 	sdiv	r6, r1, r7
 801b35a:	fb07 1516 	mls	r5, r7, r6, r1
 801b35e:	3530      	adds	r5, #48	; 0x30
 801b360:	2a63      	cmp	r2, #99	; 0x63
 801b362:	f104 34ff 	add.w	r4, r4, #4294967295
 801b366:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b36a:	4631      	mov	r1, r6
 801b36c:	dcf1      	bgt.n	801b352 <__exponent+0x22>
 801b36e:	3130      	adds	r1, #48	; 0x30
 801b370:	f1ae 0502 	sub.w	r5, lr, #2
 801b374:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b378:	1c44      	adds	r4, r0, #1
 801b37a:	4629      	mov	r1, r5
 801b37c:	4561      	cmp	r1, ip
 801b37e:	d30a      	bcc.n	801b396 <__exponent+0x66>
 801b380:	f10d 0209 	add.w	r2, sp, #9
 801b384:	eba2 020e 	sub.w	r2, r2, lr
 801b388:	4565      	cmp	r5, ip
 801b38a:	bf88      	it	hi
 801b38c:	2200      	movhi	r2, #0
 801b38e:	4413      	add	r3, r2
 801b390:	1a18      	subs	r0, r3, r0
 801b392:	b003      	add	sp, #12
 801b394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b396:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b39a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b39e:	e7ed      	b.n	801b37c <__exponent+0x4c>
 801b3a0:	2330      	movs	r3, #48	; 0x30
 801b3a2:	3130      	adds	r1, #48	; 0x30
 801b3a4:	7083      	strb	r3, [r0, #2]
 801b3a6:	70c1      	strb	r1, [r0, #3]
 801b3a8:	1d03      	adds	r3, r0, #4
 801b3aa:	e7f1      	b.n	801b390 <__exponent+0x60>

0801b3ac <_printf_float>:
 801b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3b0:	ed2d 8b02 	vpush	{d8}
 801b3b4:	b08d      	sub	sp, #52	; 0x34
 801b3b6:	460c      	mov	r4, r1
 801b3b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b3bc:	4616      	mov	r6, r2
 801b3be:	461f      	mov	r7, r3
 801b3c0:	4605      	mov	r5, r0
 801b3c2:	f003 f867 	bl	801e494 <_localeconv_r>
 801b3c6:	f8d0 a000 	ldr.w	sl, [r0]
 801b3ca:	4650      	mov	r0, sl
 801b3cc:	f7e4 ff00 	bl	80001d0 <strlen>
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	930a      	str	r3, [sp, #40]	; 0x28
 801b3d4:	6823      	ldr	r3, [r4, #0]
 801b3d6:	9305      	str	r3, [sp, #20]
 801b3d8:	f8d8 3000 	ldr.w	r3, [r8]
 801b3dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b3e0:	3307      	adds	r3, #7
 801b3e2:	f023 0307 	bic.w	r3, r3, #7
 801b3e6:	f103 0208 	add.w	r2, r3, #8
 801b3ea:	f8c8 2000 	str.w	r2, [r8]
 801b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b3f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b3fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b3fe:	9307      	str	r3, [sp, #28]
 801b400:	f8cd 8018 	str.w	r8, [sp, #24]
 801b404:	ee08 0a10 	vmov	s16, r0
 801b408:	4b9f      	ldr	r3, [pc, #636]	; (801b688 <_printf_float+0x2dc>)
 801b40a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b40e:	f04f 32ff 	mov.w	r2, #4294967295
 801b412:	f7e5 fb8b 	bl	8000b2c <__aeabi_dcmpun>
 801b416:	bb88      	cbnz	r0, 801b47c <_printf_float+0xd0>
 801b418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b41c:	4b9a      	ldr	r3, [pc, #616]	; (801b688 <_printf_float+0x2dc>)
 801b41e:	f04f 32ff 	mov.w	r2, #4294967295
 801b422:	f7e5 fb65 	bl	8000af0 <__aeabi_dcmple>
 801b426:	bb48      	cbnz	r0, 801b47c <_printf_float+0xd0>
 801b428:	2200      	movs	r2, #0
 801b42a:	2300      	movs	r3, #0
 801b42c:	4640      	mov	r0, r8
 801b42e:	4649      	mov	r1, r9
 801b430:	f7e5 fb54 	bl	8000adc <__aeabi_dcmplt>
 801b434:	b110      	cbz	r0, 801b43c <_printf_float+0x90>
 801b436:	232d      	movs	r3, #45	; 0x2d
 801b438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b43c:	4b93      	ldr	r3, [pc, #588]	; (801b68c <_printf_float+0x2e0>)
 801b43e:	4894      	ldr	r0, [pc, #592]	; (801b690 <_printf_float+0x2e4>)
 801b440:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b444:	bf94      	ite	ls
 801b446:	4698      	movls	r8, r3
 801b448:	4680      	movhi	r8, r0
 801b44a:	2303      	movs	r3, #3
 801b44c:	6123      	str	r3, [r4, #16]
 801b44e:	9b05      	ldr	r3, [sp, #20]
 801b450:	f023 0204 	bic.w	r2, r3, #4
 801b454:	6022      	str	r2, [r4, #0]
 801b456:	f04f 0900 	mov.w	r9, #0
 801b45a:	9700      	str	r7, [sp, #0]
 801b45c:	4633      	mov	r3, r6
 801b45e:	aa0b      	add	r2, sp, #44	; 0x2c
 801b460:	4621      	mov	r1, r4
 801b462:	4628      	mov	r0, r5
 801b464:	f000 f9d8 	bl	801b818 <_printf_common>
 801b468:	3001      	adds	r0, #1
 801b46a:	f040 8090 	bne.w	801b58e <_printf_float+0x1e2>
 801b46e:	f04f 30ff 	mov.w	r0, #4294967295
 801b472:	b00d      	add	sp, #52	; 0x34
 801b474:	ecbd 8b02 	vpop	{d8}
 801b478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b47c:	4642      	mov	r2, r8
 801b47e:	464b      	mov	r3, r9
 801b480:	4640      	mov	r0, r8
 801b482:	4649      	mov	r1, r9
 801b484:	f7e5 fb52 	bl	8000b2c <__aeabi_dcmpun>
 801b488:	b140      	cbz	r0, 801b49c <_printf_float+0xf0>
 801b48a:	464b      	mov	r3, r9
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	bfbc      	itt	lt
 801b490:	232d      	movlt	r3, #45	; 0x2d
 801b492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b496:	487f      	ldr	r0, [pc, #508]	; (801b694 <_printf_float+0x2e8>)
 801b498:	4b7f      	ldr	r3, [pc, #508]	; (801b698 <_printf_float+0x2ec>)
 801b49a:	e7d1      	b.n	801b440 <_printf_float+0x94>
 801b49c:	6863      	ldr	r3, [r4, #4]
 801b49e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b4a2:	9206      	str	r2, [sp, #24]
 801b4a4:	1c5a      	adds	r2, r3, #1
 801b4a6:	d13f      	bne.n	801b528 <_printf_float+0x17c>
 801b4a8:	2306      	movs	r3, #6
 801b4aa:	6063      	str	r3, [r4, #4]
 801b4ac:	9b05      	ldr	r3, [sp, #20]
 801b4ae:	6861      	ldr	r1, [r4, #4]
 801b4b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	9303      	str	r3, [sp, #12]
 801b4b8:	ab0a      	add	r3, sp, #40	; 0x28
 801b4ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b4be:	ab09      	add	r3, sp, #36	; 0x24
 801b4c0:	ec49 8b10 	vmov	d0, r8, r9
 801b4c4:	9300      	str	r3, [sp, #0]
 801b4c6:	6022      	str	r2, [r4, #0]
 801b4c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b4cc:	4628      	mov	r0, r5
 801b4ce:	f7ff fecd 	bl	801b26c <__cvt>
 801b4d2:	9b06      	ldr	r3, [sp, #24]
 801b4d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b4d6:	2b47      	cmp	r3, #71	; 0x47
 801b4d8:	4680      	mov	r8, r0
 801b4da:	d108      	bne.n	801b4ee <_printf_float+0x142>
 801b4dc:	1cc8      	adds	r0, r1, #3
 801b4de:	db02      	blt.n	801b4e6 <_printf_float+0x13a>
 801b4e0:	6863      	ldr	r3, [r4, #4]
 801b4e2:	4299      	cmp	r1, r3
 801b4e4:	dd41      	ble.n	801b56a <_printf_float+0x1be>
 801b4e6:	f1ab 0b02 	sub.w	fp, fp, #2
 801b4ea:	fa5f fb8b 	uxtb.w	fp, fp
 801b4ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b4f2:	d820      	bhi.n	801b536 <_printf_float+0x18a>
 801b4f4:	3901      	subs	r1, #1
 801b4f6:	465a      	mov	r2, fp
 801b4f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b4fc:	9109      	str	r1, [sp, #36]	; 0x24
 801b4fe:	f7ff ff17 	bl	801b330 <__exponent>
 801b502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b504:	1813      	adds	r3, r2, r0
 801b506:	2a01      	cmp	r2, #1
 801b508:	4681      	mov	r9, r0
 801b50a:	6123      	str	r3, [r4, #16]
 801b50c:	dc02      	bgt.n	801b514 <_printf_float+0x168>
 801b50e:	6822      	ldr	r2, [r4, #0]
 801b510:	07d2      	lsls	r2, r2, #31
 801b512:	d501      	bpl.n	801b518 <_printf_float+0x16c>
 801b514:	3301      	adds	r3, #1
 801b516:	6123      	str	r3, [r4, #16]
 801b518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d09c      	beq.n	801b45a <_printf_float+0xae>
 801b520:	232d      	movs	r3, #45	; 0x2d
 801b522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b526:	e798      	b.n	801b45a <_printf_float+0xae>
 801b528:	9a06      	ldr	r2, [sp, #24]
 801b52a:	2a47      	cmp	r2, #71	; 0x47
 801b52c:	d1be      	bne.n	801b4ac <_printf_float+0x100>
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d1bc      	bne.n	801b4ac <_printf_float+0x100>
 801b532:	2301      	movs	r3, #1
 801b534:	e7b9      	b.n	801b4aa <_printf_float+0xfe>
 801b536:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b53a:	d118      	bne.n	801b56e <_printf_float+0x1c2>
 801b53c:	2900      	cmp	r1, #0
 801b53e:	6863      	ldr	r3, [r4, #4]
 801b540:	dd0b      	ble.n	801b55a <_printf_float+0x1ae>
 801b542:	6121      	str	r1, [r4, #16]
 801b544:	b913      	cbnz	r3, 801b54c <_printf_float+0x1a0>
 801b546:	6822      	ldr	r2, [r4, #0]
 801b548:	07d0      	lsls	r0, r2, #31
 801b54a:	d502      	bpl.n	801b552 <_printf_float+0x1a6>
 801b54c:	3301      	adds	r3, #1
 801b54e:	440b      	add	r3, r1
 801b550:	6123      	str	r3, [r4, #16]
 801b552:	65a1      	str	r1, [r4, #88]	; 0x58
 801b554:	f04f 0900 	mov.w	r9, #0
 801b558:	e7de      	b.n	801b518 <_printf_float+0x16c>
 801b55a:	b913      	cbnz	r3, 801b562 <_printf_float+0x1b6>
 801b55c:	6822      	ldr	r2, [r4, #0]
 801b55e:	07d2      	lsls	r2, r2, #31
 801b560:	d501      	bpl.n	801b566 <_printf_float+0x1ba>
 801b562:	3302      	adds	r3, #2
 801b564:	e7f4      	b.n	801b550 <_printf_float+0x1a4>
 801b566:	2301      	movs	r3, #1
 801b568:	e7f2      	b.n	801b550 <_printf_float+0x1a4>
 801b56a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b570:	4299      	cmp	r1, r3
 801b572:	db05      	blt.n	801b580 <_printf_float+0x1d4>
 801b574:	6823      	ldr	r3, [r4, #0]
 801b576:	6121      	str	r1, [r4, #16]
 801b578:	07d8      	lsls	r0, r3, #31
 801b57a:	d5ea      	bpl.n	801b552 <_printf_float+0x1a6>
 801b57c:	1c4b      	adds	r3, r1, #1
 801b57e:	e7e7      	b.n	801b550 <_printf_float+0x1a4>
 801b580:	2900      	cmp	r1, #0
 801b582:	bfd4      	ite	le
 801b584:	f1c1 0202 	rsble	r2, r1, #2
 801b588:	2201      	movgt	r2, #1
 801b58a:	4413      	add	r3, r2
 801b58c:	e7e0      	b.n	801b550 <_printf_float+0x1a4>
 801b58e:	6823      	ldr	r3, [r4, #0]
 801b590:	055a      	lsls	r2, r3, #21
 801b592:	d407      	bmi.n	801b5a4 <_printf_float+0x1f8>
 801b594:	6923      	ldr	r3, [r4, #16]
 801b596:	4642      	mov	r2, r8
 801b598:	4631      	mov	r1, r6
 801b59a:	4628      	mov	r0, r5
 801b59c:	47b8      	blx	r7
 801b59e:	3001      	adds	r0, #1
 801b5a0:	d12c      	bne.n	801b5fc <_printf_float+0x250>
 801b5a2:	e764      	b.n	801b46e <_printf_float+0xc2>
 801b5a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b5a8:	f240 80e0 	bls.w	801b76c <_printf_float+0x3c0>
 801b5ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b5b0:	2200      	movs	r2, #0
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	f7e5 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	d034      	beq.n	801b626 <_printf_float+0x27a>
 801b5bc:	4a37      	ldr	r2, [pc, #220]	; (801b69c <_printf_float+0x2f0>)
 801b5be:	2301      	movs	r3, #1
 801b5c0:	4631      	mov	r1, r6
 801b5c2:	4628      	mov	r0, r5
 801b5c4:	47b8      	blx	r7
 801b5c6:	3001      	adds	r0, #1
 801b5c8:	f43f af51 	beq.w	801b46e <_printf_float+0xc2>
 801b5cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b5d0:	429a      	cmp	r2, r3
 801b5d2:	db02      	blt.n	801b5da <_printf_float+0x22e>
 801b5d4:	6823      	ldr	r3, [r4, #0]
 801b5d6:	07d8      	lsls	r0, r3, #31
 801b5d8:	d510      	bpl.n	801b5fc <_printf_float+0x250>
 801b5da:	ee18 3a10 	vmov	r3, s16
 801b5de:	4652      	mov	r2, sl
 801b5e0:	4631      	mov	r1, r6
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	47b8      	blx	r7
 801b5e6:	3001      	adds	r0, #1
 801b5e8:	f43f af41 	beq.w	801b46e <_printf_float+0xc2>
 801b5ec:	f04f 0800 	mov.w	r8, #0
 801b5f0:	f104 091a 	add.w	r9, r4, #26
 801b5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5f6:	3b01      	subs	r3, #1
 801b5f8:	4543      	cmp	r3, r8
 801b5fa:	dc09      	bgt.n	801b610 <_printf_float+0x264>
 801b5fc:	6823      	ldr	r3, [r4, #0]
 801b5fe:	079b      	lsls	r3, r3, #30
 801b600:	f100 8105 	bmi.w	801b80e <_printf_float+0x462>
 801b604:	68e0      	ldr	r0, [r4, #12]
 801b606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b608:	4298      	cmp	r0, r3
 801b60a:	bfb8      	it	lt
 801b60c:	4618      	movlt	r0, r3
 801b60e:	e730      	b.n	801b472 <_printf_float+0xc6>
 801b610:	2301      	movs	r3, #1
 801b612:	464a      	mov	r2, r9
 801b614:	4631      	mov	r1, r6
 801b616:	4628      	mov	r0, r5
 801b618:	47b8      	blx	r7
 801b61a:	3001      	adds	r0, #1
 801b61c:	f43f af27 	beq.w	801b46e <_printf_float+0xc2>
 801b620:	f108 0801 	add.w	r8, r8, #1
 801b624:	e7e6      	b.n	801b5f4 <_printf_float+0x248>
 801b626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b628:	2b00      	cmp	r3, #0
 801b62a:	dc39      	bgt.n	801b6a0 <_printf_float+0x2f4>
 801b62c:	4a1b      	ldr	r2, [pc, #108]	; (801b69c <_printf_float+0x2f0>)
 801b62e:	2301      	movs	r3, #1
 801b630:	4631      	mov	r1, r6
 801b632:	4628      	mov	r0, r5
 801b634:	47b8      	blx	r7
 801b636:	3001      	adds	r0, #1
 801b638:	f43f af19 	beq.w	801b46e <_printf_float+0xc2>
 801b63c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b640:	4313      	orrs	r3, r2
 801b642:	d102      	bne.n	801b64a <_printf_float+0x29e>
 801b644:	6823      	ldr	r3, [r4, #0]
 801b646:	07d9      	lsls	r1, r3, #31
 801b648:	d5d8      	bpl.n	801b5fc <_printf_float+0x250>
 801b64a:	ee18 3a10 	vmov	r3, s16
 801b64e:	4652      	mov	r2, sl
 801b650:	4631      	mov	r1, r6
 801b652:	4628      	mov	r0, r5
 801b654:	47b8      	blx	r7
 801b656:	3001      	adds	r0, #1
 801b658:	f43f af09 	beq.w	801b46e <_printf_float+0xc2>
 801b65c:	f04f 0900 	mov.w	r9, #0
 801b660:	f104 0a1a 	add.w	sl, r4, #26
 801b664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b666:	425b      	negs	r3, r3
 801b668:	454b      	cmp	r3, r9
 801b66a:	dc01      	bgt.n	801b670 <_printf_float+0x2c4>
 801b66c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b66e:	e792      	b.n	801b596 <_printf_float+0x1ea>
 801b670:	2301      	movs	r3, #1
 801b672:	4652      	mov	r2, sl
 801b674:	4631      	mov	r1, r6
 801b676:	4628      	mov	r0, r5
 801b678:	47b8      	blx	r7
 801b67a:	3001      	adds	r0, #1
 801b67c:	f43f aef7 	beq.w	801b46e <_printf_float+0xc2>
 801b680:	f109 0901 	add.w	r9, r9, #1
 801b684:	e7ee      	b.n	801b664 <_printf_float+0x2b8>
 801b686:	bf00      	nop
 801b688:	7fefffff 	.word	0x7fefffff
 801b68c:	08021ea8 	.word	0x08021ea8
 801b690:	08021eac 	.word	0x08021eac
 801b694:	08021eb4 	.word	0x08021eb4
 801b698:	08021eb0 	.word	0x08021eb0
 801b69c:	08021eb8 	.word	0x08021eb8
 801b6a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b6a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b6a4:	429a      	cmp	r2, r3
 801b6a6:	bfa8      	it	ge
 801b6a8:	461a      	movge	r2, r3
 801b6aa:	2a00      	cmp	r2, #0
 801b6ac:	4691      	mov	r9, r2
 801b6ae:	dc37      	bgt.n	801b720 <_printf_float+0x374>
 801b6b0:	f04f 0b00 	mov.w	fp, #0
 801b6b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b6b8:	f104 021a 	add.w	r2, r4, #26
 801b6bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b6be:	9305      	str	r3, [sp, #20]
 801b6c0:	eba3 0309 	sub.w	r3, r3, r9
 801b6c4:	455b      	cmp	r3, fp
 801b6c6:	dc33      	bgt.n	801b730 <_printf_float+0x384>
 801b6c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b6cc:	429a      	cmp	r2, r3
 801b6ce:	db3b      	blt.n	801b748 <_printf_float+0x39c>
 801b6d0:	6823      	ldr	r3, [r4, #0]
 801b6d2:	07da      	lsls	r2, r3, #31
 801b6d4:	d438      	bmi.n	801b748 <_printf_float+0x39c>
 801b6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6d8:	9a05      	ldr	r2, [sp, #20]
 801b6da:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b6dc:	1a9a      	subs	r2, r3, r2
 801b6de:	eba3 0901 	sub.w	r9, r3, r1
 801b6e2:	4591      	cmp	r9, r2
 801b6e4:	bfa8      	it	ge
 801b6e6:	4691      	movge	r9, r2
 801b6e8:	f1b9 0f00 	cmp.w	r9, #0
 801b6ec:	dc35      	bgt.n	801b75a <_printf_float+0x3ae>
 801b6ee:	f04f 0800 	mov.w	r8, #0
 801b6f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b6f6:	f104 0a1a 	add.w	sl, r4, #26
 801b6fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b6fe:	1a9b      	subs	r3, r3, r2
 801b700:	eba3 0309 	sub.w	r3, r3, r9
 801b704:	4543      	cmp	r3, r8
 801b706:	f77f af79 	ble.w	801b5fc <_printf_float+0x250>
 801b70a:	2301      	movs	r3, #1
 801b70c:	4652      	mov	r2, sl
 801b70e:	4631      	mov	r1, r6
 801b710:	4628      	mov	r0, r5
 801b712:	47b8      	blx	r7
 801b714:	3001      	adds	r0, #1
 801b716:	f43f aeaa 	beq.w	801b46e <_printf_float+0xc2>
 801b71a:	f108 0801 	add.w	r8, r8, #1
 801b71e:	e7ec      	b.n	801b6fa <_printf_float+0x34e>
 801b720:	4613      	mov	r3, r2
 801b722:	4631      	mov	r1, r6
 801b724:	4642      	mov	r2, r8
 801b726:	4628      	mov	r0, r5
 801b728:	47b8      	blx	r7
 801b72a:	3001      	adds	r0, #1
 801b72c:	d1c0      	bne.n	801b6b0 <_printf_float+0x304>
 801b72e:	e69e      	b.n	801b46e <_printf_float+0xc2>
 801b730:	2301      	movs	r3, #1
 801b732:	4631      	mov	r1, r6
 801b734:	4628      	mov	r0, r5
 801b736:	9205      	str	r2, [sp, #20]
 801b738:	47b8      	blx	r7
 801b73a:	3001      	adds	r0, #1
 801b73c:	f43f ae97 	beq.w	801b46e <_printf_float+0xc2>
 801b740:	9a05      	ldr	r2, [sp, #20]
 801b742:	f10b 0b01 	add.w	fp, fp, #1
 801b746:	e7b9      	b.n	801b6bc <_printf_float+0x310>
 801b748:	ee18 3a10 	vmov	r3, s16
 801b74c:	4652      	mov	r2, sl
 801b74e:	4631      	mov	r1, r6
 801b750:	4628      	mov	r0, r5
 801b752:	47b8      	blx	r7
 801b754:	3001      	adds	r0, #1
 801b756:	d1be      	bne.n	801b6d6 <_printf_float+0x32a>
 801b758:	e689      	b.n	801b46e <_printf_float+0xc2>
 801b75a:	9a05      	ldr	r2, [sp, #20]
 801b75c:	464b      	mov	r3, r9
 801b75e:	4442      	add	r2, r8
 801b760:	4631      	mov	r1, r6
 801b762:	4628      	mov	r0, r5
 801b764:	47b8      	blx	r7
 801b766:	3001      	adds	r0, #1
 801b768:	d1c1      	bne.n	801b6ee <_printf_float+0x342>
 801b76a:	e680      	b.n	801b46e <_printf_float+0xc2>
 801b76c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b76e:	2a01      	cmp	r2, #1
 801b770:	dc01      	bgt.n	801b776 <_printf_float+0x3ca>
 801b772:	07db      	lsls	r3, r3, #31
 801b774:	d538      	bpl.n	801b7e8 <_printf_float+0x43c>
 801b776:	2301      	movs	r3, #1
 801b778:	4642      	mov	r2, r8
 801b77a:	4631      	mov	r1, r6
 801b77c:	4628      	mov	r0, r5
 801b77e:	47b8      	blx	r7
 801b780:	3001      	adds	r0, #1
 801b782:	f43f ae74 	beq.w	801b46e <_printf_float+0xc2>
 801b786:	ee18 3a10 	vmov	r3, s16
 801b78a:	4652      	mov	r2, sl
 801b78c:	4631      	mov	r1, r6
 801b78e:	4628      	mov	r0, r5
 801b790:	47b8      	blx	r7
 801b792:	3001      	adds	r0, #1
 801b794:	f43f ae6b 	beq.w	801b46e <_printf_float+0xc2>
 801b798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b79c:	2200      	movs	r2, #0
 801b79e:	2300      	movs	r3, #0
 801b7a0:	f7e5 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 801b7a4:	b9d8      	cbnz	r0, 801b7de <_printf_float+0x432>
 801b7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7a8:	f108 0201 	add.w	r2, r8, #1
 801b7ac:	3b01      	subs	r3, #1
 801b7ae:	4631      	mov	r1, r6
 801b7b0:	4628      	mov	r0, r5
 801b7b2:	47b8      	blx	r7
 801b7b4:	3001      	adds	r0, #1
 801b7b6:	d10e      	bne.n	801b7d6 <_printf_float+0x42a>
 801b7b8:	e659      	b.n	801b46e <_printf_float+0xc2>
 801b7ba:	2301      	movs	r3, #1
 801b7bc:	4652      	mov	r2, sl
 801b7be:	4631      	mov	r1, r6
 801b7c0:	4628      	mov	r0, r5
 801b7c2:	47b8      	blx	r7
 801b7c4:	3001      	adds	r0, #1
 801b7c6:	f43f ae52 	beq.w	801b46e <_printf_float+0xc2>
 801b7ca:	f108 0801 	add.w	r8, r8, #1
 801b7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7d0:	3b01      	subs	r3, #1
 801b7d2:	4543      	cmp	r3, r8
 801b7d4:	dcf1      	bgt.n	801b7ba <_printf_float+0x40e>
 801b7d6:	464b      	mov	r3, r9
 801b7d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b7dc:	e6dc      	b.n	801b598 <_printf_float+0x1ec>
 801b7de:	f04f 0800 	mov.w	r8, #0
 801b7e2:	f104 0a1a 	add.w	sl, r4, #26
 801b7e6:	e7f2      	b.n	801b7ce <_printf_float+0x422>
 801b7e8:	2301      	movs	r3, #1
 801b7ea:	4642      	mov	r2, r8
 801b7ec:	e7df      	b.n	801b7ae <_printf_float+0x402>
 801b7ee:	2301      	movs	r3, #1
 801b7f0:	464a      	mov	r2, r9
 801b7f2:	4631      	mov	r1, r6
 801b7f4:	4628      	mov	r0, r5
 801b7f6:	47b8      	blx	r7
 801b7f8:	3001      	adds	r0, #1
 801b7fa:	f43f ae38 	beq.w	801b46e <_printf_float+0xc2>
 801b7fe:	f108 0801 	add.w	r8, r8, #1
 801b802:	68e3      	ldr	r3, [r4, #12]
 801b804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b806:	1a5b      	subs	r3, r3, r1
 801b808:	4543      	cmp	r3, r8
 801b80a:	dcf0      	bgt.n	801b7ee <_printf_float+0x442>
 801b80c:	e6fa      	b.n	801b604 <_printf_float+0x258>
 801b80e:	f04f 0800 	mov.w	r8, #0
 801b812:	f104 0919 	add.w	r9, r4, #25
 801b816:	e7f4      	b.n	801b802 <_printf_float+0x456>

0801b818 <_printf_common>:
 801b818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b81c:	4616      	mov	r6, r2
 801b81e:	4699      	mov	r9, r3
 801b820:	688a      	ldr	r2, [r1, #8]
 801b822:	690b      	ldr	r3, [r1, #16]
 801b824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b828:	4293      	cmp	r3, r2
 801b82a:	bfb8      	it	lt
 801b82c:	4613      	movlt	r3, r2
 801b82e:	6033      	str	r3, [r6, #0]
 801b830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b834:	4607      	mov	r7, r0
 801b836:	460c      	mov	r4, r1
 801b838:	b10a      	cbz	r2, 801b83e <_printf_common+0x26>
 801b83a:	3301      	adds	r3, #1
 801b83c:	6033      	str	r3, [r6, #0]
 801b83e:	6823      	ldr	r3, [r4, #0]
 801b840:	0699      	lsls	r1, r3, #26
 801b842:	bf42      	ittt	mi
 801b844:	6833      	ldrmi	r3, [r6, #0]
 801b846:	3302      	addmi	r3, #2
 801b848:	6033      	strmi	r3, [r6, #0]
 801b84a:	6825      	ldr	r5, [r4, #0]
 801b84c:	f015 0506 	ands.w	r5, r5, #6
 801b850:	d106      	bne.n	801b860 <_printf_common+0x48>
 801b852:	f104 0a19 	add.w	sl, r4, #25
 801b856:	68e3      	ldr	r3, [r4, #12]
 801b858:	6832      	ldr	r2, [r6, #0]
 801b85a:	1a9b      	subs	r3, r3, r2
 801b85c:	42ab      	cmp	r3, r5
 801b85e:	dc26      	bgt.n	801b8ae <_printf_common+0x96>
 801b860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b864:	1e13      	subs	r3, r2, #0
 801b866:	6822      	ldr	r2, [r4, #0]
 801b868:	bf18      	it	ne
 801b86a:	2301      	movne	r3, #1
 801b86c:	0692      	lsls	r2, r2, #26
 801b86e:	d42b      	bmi.n	801b8c8 <_printf_common+0xb0>
 801b870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b874:	4649      	mov	r1, r9
 801b876:	4638      	mov	r0, r7
 801b878:	47c0      	blx	r8
 801b87a:	3001      	adds	r0, #1
 801b87c:	d01e      	beq.n	801b8bc <_printf_common+0xa4>
 801b87e:	6823      	ldr	r3, [r4, #0]
 801b880:	68e5      	ldr	r5, [r4, #12]
 801b882:	6832      	ldr	r2, [r6, #0]
 801b884:	f003 0306 	and.w	r3, r3, #6
 801b888:	2b04      	cmp	r3, #4
 801b88a:	bf08      	it	eq
 801b88c:	1aad      	subeq	r5, r5, r2
 801b88e:	68a3      	ldr	r3, [r4, #8]
 801b890:	6922      	ldr	r2, [r4, #16]
 801b892:	bf0c      	ite	eq
 801b894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b898:	2500      	movne	r5, #0
 801b89a:	4293      	cmp	r3, r2
 801b89c:	bfc4      	itt	gt
 801b89e:	1a9b      	subgt	r3, r3, r2
 801b8a0:	18ed      	addgt	r5, r5, r3
 801b8a2:	2600      	movs	r6, #0
 801b8a4:	341a      	adds	r4, #26
 801b8a6:	42b5      	cmp	r5, r6
 801b8a8:	d11a      	bne.n	801b8e0 <_printf_common+0xc8>
 801b8aa:	2000      	movs	r0, #0
 801b8ac:	e008      	b.n	801b8c0 <_printf_common+0xa8>
 801b8ae:	2301      	movs	r3, #1
 801b8b0:	4652      	mov	r2, sl
 801b8b2:	4649      	mov	r1, r9
 801b8b4:	4638      	mov	r0, r7
 801b8b6:	47c0      	blx	r8
 801b8b8:	3001      	adds	r0, #1
 801b8ba:	d103      	bne.n	801b8c4 <_printf_common+0xac>
 801b8bc:	f04f 30ff 	mov.w	r0, #4294967295
 801b8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8c4:	3501      	adds	r5, #1
 801b8c6:	e7c6      	b.n	801b856 <_printf_common+0x3e>
 801b8c8:	18e1      	adds	r1, r4, r3
 801b8ca:	1c5a      	adds	r2, r3, #1
 801b8cc:	2030      	movs	r0, #48	; 0x30
 801b8ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b8d2:	4422      	add	r2, r4
 801b8d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b8d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b8dc:	3302      	adds	r3, #2
 801b8de:	e7c7      	b.n	801b870 <_printf_common+0x58>
 801b8e0:	2301      	movs	r3, #1
 801b8e2:	4622      	mov	r2, r4
 801b8e4:	4649      	mov	r1, r9
 801b8e6:	4638      	mov	r0, r7
 801b8e8:	47c0      	blx	r8
 801b8ea:	3001      	adds	r0, #1
 801b8ec:	d0e6      	beq.n	801b8bc <_printf_common+0xa4>
 801b8ee:	3601      	adds	r6, #1
 801b8f0:	e7d9      	b.n	801b8a6 <_printf_common+0x8e>
	...

0801b8f4 <_printf_i>:
 801b8f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b8f8:	7e0f      	ldrb	r7, [r1, #24]
 801b8fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b8fc:	2f78      	cmp	r7, #120	; 0x78
 801b8fe:	4691      	mov	r9, r2
 801b900:	4680      	mov	r8, r0
 801b902:	460c      	mov	r4, r1
 801b904:	469a      	mov	sl, r3
 801b906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b90a:	d807      	bhi.n	801b91c <_printf_i+0x28>
 801b90c:	2f62      	cmp	r7, #98	; 0x62
 801b90e:	d80a      	bhi.n	801b926 <_printf_i+0x32>
 801b910:	2f00      	cmp	r7, #0
 801b912:	f000 80d8 	beq.w	801bac6 <_printf_i+0x1d2>
 801b916:	2f58      	cmp	r7, #88	; 0x58
 801b918:	f000 80a3 	beq.w	801ba62 <_printf_i+0x16e>
 801b91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b924:	e03a      	b.n	801b99c <_printf_i+0xa8>
 801b926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b92a:	2b15      	cmp	r3, #21
 801b92c:	d8f6      	bhi.n	801b91c <_printf_i+0x28>
 801b92e:	a101      	add	r1, pc, #4	; (adr r1, 801b934 <_printf_i+0x40>)
 801b930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b934:	0801b98d 	.word	0x0801b98d
 801b938:	0801b9a1 	.word	0x0801b9a1
 801b93c:	0801b91d 	.word	0x0801b91d
 801b940:	0801b91d 	.word	0x0801b91d
 801b944:	0801b91d 	.word	0x0801b91d
 801b948:	0801b91d 	.word	0x0801b91d
 801b94c:	0801b9a1 	.word	0x0801b9a1
 801b950:	0801b91d 	.word	0x0801b91d
 801b954:	0801b91d 	.word	0x0801b91d
 801b958:	0801b91d 	.word	0x0801b91d
 801b95c:	0801b91d 	.word	0x0801b91d
 801b960:	0801baad 	.word	0x0801baad
 801b964:	0801b9d1 	.word	0x0801b9d1
 801b968:	0801ba8f 	.word	0x0801ba8f
 801b96c:	0801b91d 	.word	0x0801b91d
 801b970:	0801b91d 	.word	0x0801b91d
 801b974:	0801bacf 	.word	0x0801bacf
 801b978:	0801b91d 	.word	0x0801b91d
 801b97c:	0801b9d1 	.word	0x0801b9d1
 801b980:	0801b91d 	.word	0x0801b91d
 801b984:	0801b91d 	.word	0x0801b91d
 801b988:	0801ba97 	.word	0x0801ba97
 801b98c:	682b      	ldr	r3, [r5, #0]
 801b98e:	1d1a      	adds	r2, r3, #4
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	602a      	str	r2, [r5, #0]
 801b994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b99c:	2301      	movs	r3, #1
 801b99e:	e0a3      	b.n	801bae8 <_printf_i+0x1f4>
 801b9a0:	6820      	ldr	r0, [r4, #0]
 801b9a2:	6829      	ldr	r1, [r5, #0]
 801b9a4:	0606      	lsls	r6, r0, #24
 801b9a6:	f101 0304 	add.w	r3, r1, #4
 801b9aa:	d50a      	bpl.n	801b9c2 <_printf_i+0xce>
 801b9ac:	680e      	ldr	r6, [r1, #0]
 801b9ae:	602b      	str	r3, [r5, #0]
 801b9b0:	2e00      	cmp	r6, #0
 801b9b2:	da03      	bge.n	801b9bc <_printf_i+0xc8>
 801b9b4:	232d      	movs	r3, #45	; 0x2d
 801b9b6:	4276      	negs	r6, r6
 801b9b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9bc:	485e      	ldr	r0, [pc, #376]	; (801bb38 <_printf_i+0x244>)
 801b9be:	230a      	movs	r3, #10
 801b9c0:	e019      	b.n	801b9f6 <_printf_i+0x102>
 801b9c2:	680e      	ldr	r6, [r1, #0]
 801b9c4:	602b      	str	r3, [r5, #0]
 801b9c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b9ca:	bf18      	it	ne
 801b9cc:	b236      	sxthne	r6, r6
 801b9ce:	e7ef      	b.n	801b9b0 <_printf_i+0xbc>
 801b9d0:	682b      	ldr	r3, [r5, #0]
 801b9d2:	6820      	ldr	r0, [r4, #0]
 801b9d4:	1d19      	adds	r1, r3, #4
 801b9d6:	6029      	str	r1, [r5, #0]
 801b9d8:	0601      	lsls	r1, r0, #24
 801b9da:	d501      	bpl.n	801b9e0 <_printf_i+0xec>
 801b9dc:	681e      	ldr	r6, [r3, #0]
 801b9de:	e002      	b.n	801b9e6 <_printf_i+0xf2>
 801b9e0:	0646      	lsls	r6, r0, #25
 801b9e2:	d5fb      	bpl.n	801b9dc <_printf_i+0xe8>
 801b9e4:	881e      	ldrh	r6, [r3, #0]
 801b9e6:	4854      	ldr	r0, [pc, #336]	; (801bb38 <_printf_i+0x244>)
 801b9e8:	2f6f      	cmp	r7, #111	; 0x6f
 801b9ea:	bf0c      	ite	eq
 801b9ec:	2308      	moveq	r3, #8
 801b9ee:	230a      	movne	r3, #10
 801b9f0:	2100      	movs	r1, #0
 801b9f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b9f6:	6865      	ldr	r5, [r4, #4]
 801b9f8:	60a5      	str	r5, [r4, #8]
 801b9fa:	2d00      	cmp	r5, #0
 801b9fc:	bfa2      	ittt	ge
 801b9fe:	6821      	ldrge	r1, [r4, #0]
 801ba00:	f021 0104 	bicge.w	r1, r1, #4
 801ba04:	6021      	strge	r1, [r4, #0]
 801ba06:	b90e      	cbnz	r6, 801ba0c <_printf_i+0x118>
 801ba08:	2d00      	cmp	r5, #0
 801ba0a:	d04d      	beq.n	801baa8 <_printf_i+0x1b4>
 801ba0c:	4615      	mov	r5, r2
 801ba0e:	fbb6 f1f3 	udiv	r1, r6, r3
 801ba12:	fb03 6711 	mls	r7, r3, r1, r6
 801ba16:	5dc7      	ldrb	r7, [r0, r7]
 801ba18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ba1c:	4637      	mov	r7, r6
 801ba1e:	42bb      	cmp	r3, r7
 801ba20:	460e      	mov	r6, r1
 801ba22:	d9f4      	bls.n	801ba0e <_printf_i+0x11a>
 801ba24:	2b08      	cmp	r3, #8
 801ba26:	d10b      	bne.n	801ba40 <_printf_i+0x14c>
 801ba28:	6823      	ldr	r3, [r4, #0]
 801ba2a:	07de      	lsls	r6, r3, #31
 801ba2c:	d508      	bpl.n	801ba40 <_printf_i+0x14c>
 801ba2e:	6923      	ldr	r3, [r4, #16]
 801ba30:	6861      	ldr	r1, [r4, #4]
 801ba32:	4299      	cmp	r1, r3
 801ba34:	bfde      	ittt	le
 801ba36:	2330      	movle	r3, #48	; 0x30
 801ba38:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ba3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ba40:	1b52      	subs	r2, r2, r5
 801ba42:	6122      	str	r2, [r4, #16]
 801ba44:	f8cd a000 	str.w	sl, [sp]
 801ba48:	464b      	mov	r3, r9
 801ba4a:	aa03      	add	r2, sp, #12
 801ba4c:	4621      	mov	r1, r4
 801ba4e:	4640      	mov	r0, r8
 801ba50:	f7ff fee2 	bl	801b818 <_printf_common>
 801ba54:	3001      	adds	r0, #1
 801ba56:	d14c      	bne.n	801baf2 <_printf_i+0x1fe>
 801ba58:	f04f 30ff 	mov.w	r0, #4294967295
 801ba5c:	b004      	add	sp, #16
 801ba5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba62:	4835      	ldr	r0, [pc, #212]	; (801bb38 <_printf_i+0x244>)
 801ba64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ba68:	6829      	ldr	r1, [r5, #0]
 801ba6a:	6823      	ldr	r3, [r4, #0]
 801ba6c:	f851 6b04 	ldr.w	r6, [r1], #4
 801ba70:	6029      	str	r1, [r5, #0]
 801ba72:	061d      	lsls	r5, r3, #24
 801ba74:	d514      	bpl.n	801baa0 <_printf_i+0x1ac>
 801ba76:	07df      	lsls	r7, r3, #31
 801ba78:	bf44      	itt	mi
 801ba7a:	f043 0320 	orrmi.w	r3, r3, #32
 801ba7e:	6023      	strmi	r3, [r4, #0]
 801ba80:	b91e      	cbnz	r6, 801ba8a <_printf_i+0x196>
 801ba82:	6823      	ldr	r3, [r4, #0]
 801ba84:	f023 0320 	bic.w	r3, r3, #32
 801ba88:	6023      	str	r3, [r4, #0]
 801ba8a:	2310      	movs	r3, #16
 801ba8c:	e7b0      	b.n	801b9f0 <_printf_i+0xfc>
 801ba8e:	6823      	ldr	r3, [r4, #0]
 801ba90:	f043 0320 	orr.w	r3, r3, #32
 801ba94:	6023      	str	r3, [r4, #0]
 801ba96:	2378      	movs	r3, #120	; 0x78
 801ba98:	4828      	ldr	r0, [pc, #160]	; (801bb3c <_printf_i+0x248>)
 801ba9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ba9e:	e7e3      	b.n	801ba68 <_printf_i+0x174>
 801baa0:	0659      	lsls	r1, r3, #25
 801baa2:	bf48      	it	mi
 801baa4:	b2b6      	uxthmi	r6, r6
 801baa6:	e7e6      	b.n	801ba76 <_printf_i+0x182>
 801baa8:	4615      	mov	r5, r2
 801baaa:	e7bb      	b.n	801ba24 <_printf_i+0x130>
 801baac:	682b      	ldr	r3, [r5, #0]
 801baae:	6826      	ldr	r6, [r4, #0]
 801bab0:	6961      	ldr	r1, [r4, #20]
 801bab2:	1d18      	adds	r0, r3, #4
 801bab4:	6028      	str	r0, [r5, #0]
 801bab6:	0635      	lsls	r5, r6, #24
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	d501      	bpl.n	801bac0 <_printf_i+0x1cc>
 801babc:	6019      	str	r1, [r3, #0]
 801babe:	e002      	b.n	801bac6 <_printf_i+0x1d2>
 801bac0:	0670      	lsls	r0, r6, #25
 801bac2:	d5fb      	bpl.n	801babc <_printf_i+0x1c8>
 801bac4:	8019      	strh	r1, [r3, #0]
 801bac6:	2300      	movs	r3, #0
 801bac8:	6123      	str	r3, [r4, #16]
 801baca:	4615      	mov	r5, r2
 801bacc:	e7ba      	b.n	801ba44 <_printf_i+0x150>
 801bace:	682b      	ldr	r3, [r5, #0]
 801bad0:	1d1a      	adds	r2, r3, #4
 801bad2:	602a      	str	r2, [r5, #0]
 801bad4:	681d      	ldr	r5, [r3, #0]
 801bad6:	6862      	ldr	r2, [r4, #4]
 801bad8:	2100      	movs	r1, #0
 801bada:	4628      	mov	r0, r5
 801badc:	f7e4 fb80 	bl	80001e0 <memchr>
 801bae0:	b108      	cbz	r0, 801bae6 <_printf_i+0x1f2>
 801bae2:	1b40      	subs	r0, r0, r5
 801bae4:	6060      	str	r0, [r4, #4]
 801bae6:	6863      	ldr	r3, [r4, #4]
 801bae8:	6123      	str	r3, [r4, #16]
 801baea:	2300      	movs	r3, #0
 801baec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801baf0:	e7a8      	b.n	801ba44 <_printf_i+0x150>
 801baf2:	6923      	ldr	r3, [r4, #16]
 801baf4:	462a      	mov	r2, r5
 801baf6:	4649      	mov	r1, r9
 801baf8:	4640      	mov	r0, r8
 801bafa:	47d0      	blx	sl
 801bafc:	3001      	adds	r0, #1
 801bafe:	d0ab      	beq.n	801ba58 <_printf_i+0x164>
 801bb00:	6823      	ldr	r3, [r4, #0]
 801bb02:	079b      	lsls	r3, r3, #30
 801bb04:	d413      	bmi.n	801bb2e <_printf_i+0x23a>
 801bb06:	68e0      	ldr	r0, [r4, #12]
 801bb08:	9b03      	ldr	r3, [sp, #12]
 801bb0a:	4298      	cmp	r0, r3
 801bb0c:	bfb8      	it	lt
 801bb0e:	4618      	movlt	r0, r3
 801bb10:	e7a4      	b.n	801ba5c <_printf_i+0x168>
 801bb12:	2301      	movs	r3, #1
 801bb14:	4632      	mov	r2, r6
 801bb16:	4649      	mov	r1, r9
 801bb18:	4640      	mov	r0, r8
 801bb1a:	47d0      	blx	sl
 801bb1c:	3001      	adds	r0, #1
 801bb1e:	d09b      	beq.n	801ba58 <_printf_i+0x164>
 801bb20:	3501      	adds	r5, #1
 801bb22:	68e3      	ldr	r3, [r4, #12]
 801bb24:	9903      	ldr	r1, [sp, #12]
 801bb26:	1a5b      	subs	r3, r3, r1
 801bb28:	42ab      	cmp	r3, r5
 801bb2a:	dcf2      	bgt.n	801bb12 <_printf_i+0x21e>
 801bb2c:	e7eb      	b.n	801bb06 <_printf_i+0x212>
 801bb2e:	2500      	movs	r5, #0
 801bb30:	f104 0619 	add.w	r6, r4, #25
 801bb34:	e7f5      	b.n	801bb22 <_printf_i+0x22e>
 801bb36:	bf00      	nop
 801bb38:	08021eba 	.word	0x08021eba
 801bb3c:	08021ecb 	.word	0x08021ecb

0801bb40 <_scanf_float>:
 801bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb44:	b087      	sub	sp, #28
 801bb46:	4617      	mov	r7, r2
 801bb48:	9303      	str	r3, [sp, #12]
 801bb4a:	688b      	ldr	r3, [r1, #8]
 801bb4c:	1e5a      	subs	r2, r3, #1
 801bb4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bb52:	bf83      	ittte	hi
 801bb54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bb58:	195b      	addhi	r3, r3, r5
 801bb5a:	9302      	strhi	r3, [sp, #8]
 801bb5c:	2300      	movls	r3, #0
 801bb5e:	bf86      	itte	hi
 801bb60:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bb64:	608b      	strhi	r3, [r1, #8]
 801bb66:	9302      	strls	r3, [sp, #8]
 801bb68:	680b      	ldr	r3, [r1, #0]
 801bb6a:	468b      	mov	fp, r1
 801bb6c:	2500      	movs	r5, #0
 801bb6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801bb72:	f84b 3b1c 	str.w	r3, [fp], #28
 801bb76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801bb7a:	4680      	mov	r8, r0
 801bb7c:	460c      	mov	r4, r1
 801bb7e:	465e      	mov	r6, fp
 801bb80:	46aa      	mov	sl, r5
 801bb82:	46a9      	mov	r9, r5
 801bb84:	9501      	str	r5, [sp, #4]
 801bb86:	68a2      	ldr	r2, [r4, #8]
 801bb88:	b152      	cbz	r2, 801bba0 <_scanf_float+0x60>
 801bb8a:	683b      	ldr	r3, [r7, #0]
 801bb8c:	781b      	ldrb	r3, [r3, #0]
 801bb8e:	2b4e      	cmp	r3, #78	; 0x4e
 801bb90:	d864      	bhi.n	801bc5c <_scanf_float+0x11c>
 801bb92:	2b40      	cmp	r3, #64	; 0x40
 801bb94:	d83c      	bhi.n	801bc10 <_scanf_float+0xd0>
 801bb96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801bb9a:	b2c8      	uxtb	r0, r1
 801bb9c:	280e      	cmp	r0, #14
 801bb9e:	d93a      	bls.n	801bc16 <_scanf_float+0xd6>
 801bba0:	f1b9 0f00 	cmp.w	r9, #0
 801bba4:	d003      	beq.n	801bbae <_scanf_float+0x6e>
 801bba6:	6823      	ldr	r3, [r4, #0]
 801bba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bbac:	6023      	str	r3, [r4, #0]
 801bbae:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bbb2:	f1ba 0f01 	cmp.w	sl, #1
 801bbb6:	f200 8113 	bhi.w	801bde0 <_scanf_float+0x2a0>
 801bbba:	455e      	cmp	r6, fp
 801bbbc:	f200 8105 	bhi.w	801bdca <_scanf_float+0x28a>
 801bbc0:	2501      	movs	r5, #1
 801bbc2:	4628      	mov	r0, r5
 801bbc4:	b007      	add	sp, #28
 801bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801bbce:	2a0d      	cmp	r2, #13
 801bbd0:	d8e6      	bhi.n	801bba0 <_scanf_float+0x60>
 801bbd2:	a101      	add	r1, pc, #4	; (adr r1, 801bbd8 <_scanf_float+0x98>)
 801bbd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801bbd8:	0801bd17 	.word	0x0801bd17
 801bbdc:	0801bba1 	.word	0x0801bba1
 801bbe0:	0801bba1 	.word	0x0801bba1
 801bbe4:	0801bba1 	.word	0x0801bba1
 801bbe8:	0801bd77 	.word	0x0801bd77
 801bbec:	0801bd4f 	.word	0x0801bd4f
 801bbf0:	0801bba1 	.word	0x0801bba1
 801bbf4:	0801bba1 	.word	0x0801bba1
 801bbf8:	0801bd25 	.word	0x0801bd25
 801bbfc:	0801bba1 	.word	0x0801bba1
 801bc00:	0801bba1 	.word	0x0801bba1
 801bc04:	0801bba1 	.word	0x0801bba1
 801bc08:	0801bba1 	.word	0x0801bba1
 801bc0c:	0801bcdd 	.word	0x0801bcdd
 801bc10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801bc14:	e7db      	b.n	801bbce <_scanf_float+0x8e>
 801bc16:	290e      	cmp	r1, #14
 801bc18:	d8c2      	bhi.n	801bba0 <_scanf_float+0x60>
 801bc1a:	a001      	add	r0, pc, #4	; (adr r0, 801bc20 <_scanf_float+0xe0>)
 801bc1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801bc20:	0801bccf 	.word	0x0801bccf
 801bc24:	0801bba1 	.word	0x0801bba1
 801bc28:	0801bccf 	.word	0x0801bccf
 801bc2c:	0801bd63 	.word	0x0801bd63
 801bc30:	0801bba1 	.word	0x0801bba1
 801bc34:	0801bc7d 	.word	0x0801bc7d
 801bc38:	0801bcb9 	.word	0x0801bcb9
 801bc3c:	0801bcb9 	.word	0x0801bcb9
 801bc40:	0801bcb9 	.word	0x0801bcb9
 801bc44:	0801bcb9 	.word	0x0801bcb9
 801bc48:	0801bcb9 	.word	0x0801bcb9
 801bc4c:	0801bcb9 	.word	0x0801bcb9
 801bc50:	0801bcb9 	.word	0x0801bcb9
 801bc54:	0801bcb9 	.word	0x0801bcb9
 801bc58:	0801bcb9 	.word	0x0801bcb9
 801bc5c:	2b6e      	cmp	r3, #110	; 0x6e
 801bc5e:	d809      	bhi.n	801bc74 <_scanf_float+0x134>
 801bc60:	2b60      	cmp	r3, #96	; 0x60
 801bc62:	d8b2      	bhi.n	801bbca <_scanf_float+0x8a>
 801bc64:	2b54      	cmp	r3, #84	; 0x54
 801bc66:	d077      	beq.n	801bd58 <_scanf_float+0x218>
 801bc68:	2b59      	cmp	r3, #89	; 0x59
 801bc6a:	d199      	bne.n	801bba0 <_scanf_float+0x60>
 801bc6c:	2d07      	cmp	r5, #7
 801bc6e:	d197      	bne.n	801bba0 <_scanf_float+0x60>
 801bc70:	2508      	movs	r5, #8
 801bc72:	e029      	b.n	801bcc8 <_scanf_float+0x188>
 801bc74:	2b74      	cmp	r3, #116	; 0x74
 801bc76:	d06f      	beq.n	801bd58 <_scanf_float+0x218>
 801bc78:	2b79      	cmp	r3, #121	; 0x79
 801bc7a:	e7f6      	b.n	801bc6a <_scanf_float+0x12a>
 801bc7c:	6821      	ldr	r1, [r4, #0]
 801bc7e:	05c8      	lsls	r0, r1, #23
 801bc80:	d51a      	bpl.n	801bcb8 <_scanf_float+0x178>
 801bc82:	9b02      	ldr	r3, [sp, #8]
 801bc84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801bc88:	6021      	str	r1, [r4, #0]
 801bc8a:	f109 0901 	add.w	r9, r9, #1
 801bc8e:	b11b      	cbz	r3, 801bc98 <_scanf_float+0x158>
 801bc90:	3b01      	subs	r3, #1
 801bc92:	3201      	adds	r2, #1
 801bc94:	9302      	str	r3, [sp, #8]
 801bc96:	60a2      	str	r2, [r4, #8]
 801bc98:	68a3      	ldr	r3, [r4, #8]
 801bc9a:	3b01      	subs	r3, #1
 801bc9c:	60a3      	str	r3, [r4, #8]
 801bc9e:	6923      	ldr	r3, [r4, #16]
 801bca0:	3301      	adds	r3, #1
 801bca2:	6123      	str	r3, [r4, #16]
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	3b01      	subs	r3, #1
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	607b      	str	r3, [r7, #4]
 801bcac:	f340 8084 	ble.w	801bdb8 <_scanf_float+0x278>
 801bcb0:	683b      	ldr	r3, [r7, #0]
 801bcb2:	3301      	adds	r3, #1
 801bcb4:	603b      	str	r3, [r7, #0]
 801bcb6:	e766      	b.n	801bb86 <_scanf_float+0x46>
 801bcb8:	eb1a 0f05 	cmn.w	sl, r5
 801bcbc:	f47f af70 	bne.w	801bba0 <_scanf_float+0x60>
 801bcc0:	6822      	ldr	r2, [r4, #0]
 801bcc2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bcc6:	6022      	str	r2, [r4, #0]
 801bcc8:	f806 3b01 	strb.w	r3, [r6], #1
 801bccc:	e7e4      	b.n	801bc98 <_scanf_float+0x158>
 801bcce:	6822      	ldr	r2, [r4, #0]
 801bcd0:	0610      	lsls	r0, r2, #24
 801bcd2:	f57f af65 	bpl.w	801bba0 <_scanf_float+0x60>
 801bcd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bcda:	e7f4      	b.n	801bcc6 <_scanf_float+0x186>
 801bcdc:	f1ba 0f00 	cmp.w	sl, #0
 801bce0:	d10e      	bne.n	801bd00 <_scanf_float+0x1c0>
 801bce2:	f1b9 0f00 	cmp.w	r9, #0
 801bce6:	d10e      	bne.n	801bd06 <_scanf_float+0x1c6>
 801bce8:	6822      	ldr	r2, [r4, #0]
 801bcea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bcee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bcf2:	d108      	bne.n	801bd06 <_scanf_float+0x1c6>
 801bcf4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bcf8:	6022      	str	r2, [r4, #0]
 801bcfa:	f04f 0a01 	mov.w	sl, #1
 801bcfe:	e7e3      	b.n	801bcc8 <_scanf_float+0x188>
 801bd00:	f1ba 0f02 	cmp.w	sl, #2
 801bd04:	d055      	beq.n	801bdb2 <_scanf_float+0x272>
 801bd06:	2d01      	cmp	r5, #1
 801bd08:	d002      	beq.n	801bd10 <_scanf_float+0x1d0>
 801bd0a:	2d04      	cmp	r5, #4
 801bd0c:	f47f af48 	bne.w	801bba0 <_scanf_float+0x60>
 801bd10:	3501      	adds	r5, #1
 801bd12:	b2ed      	uxtb	r5, r5
 801bd14:	e7d8      	b.n	801bcc8 <_scanf_float+0x188>
 801bd16:	f1ba 0f01 	cmp.w	sl, #1
 801bd1a:	f47f af41 	bne.w	801bba0 <_scanf_float+0x60>
 801bd1e:	f04f 0a02 	mov.w	sl, #2
 801bd22:	e7d1      	b.n	801bcc8 <_scanf_float+0x188>
 801bd24:	b97d      	cbnz	r5, 801bd46 <_scanf_float+0x206>
 801bd26:	f1b9 0f00 	cmp.w	r9, #0
 801bd2a:	f47f af3c 	bne.w	801bba6 <_scanf_float+0x66>
 801bd2e:	6822      	ldr	r2, [r4, #0]
 801bd30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bd34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bd38:	f47f af39 	bne.w	801bbae <_scanf_float+0x6e>
 801bd3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bd40:	6022      	str	r2, [r4, #0]
 801bd42:	2501      	movs	r5, #1
 801bd44:	e7c0      	b.n	801bcc8 <_scanf_float+0x188>
 801bd46:	2d03      	cmp	r5, #3
 801bd48:	d0e2      	beq.n	801bd10 <_scanf_float+0x1d0>
 801bd4a:	2d05      	cmp	r5, #5
 801bd4c:	e7de      	b.n	801bd0c <_scanf_float+0x1cc>
 801bd4e:	2d02      	cmp	r5, #2
 801bd50:	f47f af26 	bne.w	801bba0 <_scanf_float+0x60>
 801bd54:	2503      	movs	r5, #3
 801bd56:	e7b7      	b.n	801bcc8 <_scanf_float+0x188>
 801bd58:	2d06      	cmp	r5, #6
 801bd5a:	f47f af21 	bne.w	801bba0 <_scanf_float+0x60>
 801bd5e:	2507      	movs	r5, #7
 801bd60:	e7b2      	b.n	801bcc8 <_scanf_float+0x188>
 801bd62:	6822      	ldr	r2, [r4, #0]
 801bd64:	0591      	lsls	r1, r2, #22
 801bd66:	f57f af1b 	bpl.w	801bba0 <_scanf_float+0x60>
 801bd6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801bd6e:	6022      	str	r2, [r4, #0]
 801bd70:	f8cd 9004 	str.w	r9, [sp, #4]
 801bd74:	e7a8      	b.n	801bcc8 <_scanf_float+0x188>
 801bd76:	6822      	ldr	r2, [r4, #0]
 801bd78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801bd7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801bd80:	d006      	beq.n	801bd90 <_scanf_float+0x250>
 801bd82:	0550      	lsls	r0, r2, #21
 801bd84:	f57f af0c 	bpl.w	801bba0 <_scanf_float+0x60>
 801bd88:	f1b9 0f00 	cmp.w	r9, #0
 801bd8c:	f43f af0f 	beq.w	801bbae <_scanf_float+0x6e>
 801bd90:	0591      	lsls	r1, r2, #22
 801bd92:	bf58      	it	pl
 801bd94:	9901      	ldrpl	r1, [sp, #4]
 801bd96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bd9a:	bf58      	it	pl
 801bd9c:	eba9 0101 	subpl.w	r1, r9, r1
 801bda0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801bda4:	bf58      	it	pl
 801bda6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801bdaa:	6022      	str	r2, [r4, #0]
 801bdac:	f04f 0900 	mov.w	r9, #0
 801bdb0:	e78a      	b.n	801bcc8 <_scanf_float+0x188>
 801bdb2:	f04f 0a03 	mov.w	sl, #3
 801bdb6:	e787      	b.n	801bcc8 <_scanf_float+0x188>
 801bdb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bdbc:	4639      	mov	r1, r7
 801bdbe:	4640      	mov	r0, r8
 801bdc0:	4798      	blx	r3
 801bdc2:	2800      	cmp	r0, #0
 801bdc4:	f43f aedf 	beq.w	801bb86 <_scanf_float+0x46>
 801bdc8:	e6ea      	b.n	801bba0 <_scanf_float+0x60>
 801bdca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bdce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bdd2:	463a      	mov	r2, r7
 801bdd4:	4640      	mov	r0, r8
 801bdd6:	4798      	blx	r3
 801bdd8:	6923      	ldr	r3, [r4, #16]
 801bdda:	3b01      	subs	r3, #1
 801bddc:	6123      	str	r3, [r4, #16]
 801bdde:	e6ec      	b.n	801bbba <_scanf_float+0x7a>
 801bde0:	1e6b      	subs	r3, r5, #1
 801bde2:	2b06      	cmp	r3, #6
 801bde4:	d825      	bhi.n	801be32 <_scanf_float+0x2f2>
 801bde6:	2d02      	cmp	r5, #2
 801bde8:	d836      	bhi.n	801be58 <_scanf_float+0x318>
 801bdea:	455e      	cmp	r6, fp
 801bdec:	f67f aee8 	bls.w	801bbc0 <_scanf_float+0x80>
 801bdf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bdf4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bdf8:	463a      	mov	r2, r7
 801bdfa:	4640      	mov	r0, r8
 801bdfc:	4798      	blx	r3
 801bdfe:	6923      	ldr	r3, [r4, #16]
 801be00:	3b01      	subs	r3, #1
 801be02:	6123      	str	r3, [r4, #16]
 801be04:	e7f1      	b.n	801bdea <_scanf_float+0x2aa>
 801be06:	9802      	ldr	r0, [sp, #8]
 801be08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801be10:	9002      	str	r0, [sp, #8]
 801be12:	463a      	mov	r2, r7
 801be14:	4640      	mov	r0, r8
 801be16:	4798      	blx	r3
 801be18:	6923      	ldr	r3, [r4, #16]
 801be1a:	3b01      	subs	r3, #1
 801be1c:	6123      	str	r3, [r4, #16]
 801be1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801be22:	fa5f fa8a 	uxtb.w	sl, sl
 801be26:	f1ba 0f02 	cmp.w	sl, #2
 801be2a:	d1ec      	bne.n	801be06 <_scanf_float+0x2c6>
 801be2c:	3d03      	subs	r5, #3
 801be2e:	b2ed      	uxtb	r5, r5
 801be30:	1b76      	subs	r6, r6, r5
 801be32:	6823      	ldr	r3, [r4, #0]
 801be34:	05da      	lsls	r2, r3, #23
 801be36:	d52f      	bpl.n	801be98 <_scanf_float+0x358>
 801be38:	055b      	lsls	r3, r3, #21
 801be3a:	d510      	bpl.n	801be5e <_scanf_float+0x31e>
 801be3c:	455e      	cmp	r6, fp
 801be3e:	f67f aebf 	bls.w	801bbc0 <_scanf_float+0x80>
 801be42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801be4a:	463a      	mov	r2, r7
 801be4c:	4640      	mov	r0, r8
 801be4e:	4798      	blx	r3
 801be50:	6923      	ldr	r3, [r4, #16]
 801be52:	3b01      	subs	r3, #1
 801be54:	6123      	str	r3, [r4, #16]
 801be56:	e7f1      	b.n	801be3c <_scanf_float+0x2fc>
 801be58:	46aa      	mov	sl, r5
 801be5a:	9602      	str	r6, [sp, #8]
 801be5c:	e7df      	b.n	801be1e <_scanf_float+0x2de>
 801be5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801be62:	6923      	ldr	r3, [r4, #16]
 801be64:	2965      	cmp	r1, #101	; 0x65
 801be66:	f103 33ff 	add.w	r3, r3, #4294967295
 801be6a:	f106 35ff 	add.w	r5, r6, #4294967295
 801be6e:	6123      	str	r3, [r4, #16]
 801be70:	d00c      	beq.n	801be8c <_scanf_float+0x34c>
 801be72:	2945      	cmp	r1, #69	; 0x45
 801be74:	d00a      	beq.n	801be8c <_scanf_float+0x34c>
 801be76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be7a:	463a      	mov	r2, r7
 801be7c:	4640      	mov	r0, r8
 801be7e:	4798      	blx	r3
 801be80:	6923      	ldr	r3, [r4, #16]
 801be82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801be86:	3b01      	subs	r3, #1
 801be88:	1eb5      	subs	r5, r6, #2
 801be8a:	6123      	str	r3, [r4, #16]
 801be8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be90:	463a      	mov	r2, r7
 801be92:	4640      	mov	r0, r8
 801be94:	4798      	blx	r3
 801be96:	462e      	mov	r6, r5
 801be98:	6825      	ldr	r5, [r4, #0]
 801be9a:	f015 0510 	ands.w	r5, r5, #16
 801be9e:	d159      	bne.n	801bf54 <_scanf_float+0x414>
 801bea0:	7035      	strb	r5, [r6, #0]
 801bea2:	6823      	ldr	r3, [r4, #0]
 801bea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801beac:	d11b      	bne.n	801bee6 <_scanf_float+0x3a6>
 801beae:	9b01      	ldr	r3, [sp, #4]
 801beb0:	454b      	cmp	r3, r9
 801beb2:	eba3 0209 	sub.w	r2, r3, r9
 801beb6:	d123      	bne.n	801bf00 <_scanf_float+0x3c0>
 801beb8:	2200      	movs	r2, #0
 801beba:	4659      	mov	r1, fp
 801bebc:	4640      	mov	r0, r8
 801bebe:	f000 ff89 	bl	801cdd4 <_strtod_r>
 801bec2:	6822      	ldr	r2, [r4, #0]
 801bec4:	9b03      	ldr	r3, [sp, #12]
 801bec6:	f012 0f02 	tst.w	r2, #2
 801beca:	ec57 6b10 	vmov	r6, r7, d0
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	d021      	beq.n	801bf16 <_scanf_float+0x3d6>
 801bed2:	9903      	ldr	r1, [sp, #12]
 801bed4:	1d1a      	adds	r2, r3, #4
 801bed6:	600a      	str	r2, [r1, #0]
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	e9c3 6700 	strd	r6, r7, [r3]
 801bede:	68e3      	ldr	r3, [r4, #12]
 801bee0:	3301      	adds	r3, #1
 801bee2:	60e3      	str	r3, [r4, #12]
 801bee4:	e66d      	b.n	801bbc2 <_scanf_float+0x82>
 801bee6:	9b04      	ldr	r3, [sp, #16]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d0e5      	beq.n	801beb8 <_scanf_float+0x378>
 801beec:	9905      	ldr	r1, [sp, #20]
 801beee:	230a      	movs	r3, #10
 801bef0:	462a      	mov	r2, r5
 801bef2:	3101      	adds	r1, #1
 801bef4:	4640      	mov	r0, r8
 801bef6:	f000 fff5 	bl	801cee4 <_strtol_r>
 801befa:	9b04      	ldr	r3, [sp, #16]
 801befc:	9e05      	ldr	r6, [sp, #20]
 801befe:	1ac2      	subs	r2, r0, r3
 801bf00:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bf04:	429e      	cmp	r6, r3
 801bf06:	bf28      	it	cs
 801bf08:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bf0c:	4912      	ldr	r1, [pc, #72]	; (801bf58 <_scanf_float+0x418>)
 801bf0e:	4630      	mov	r0, r6
 801bf10:	f000 f8da 	bl	801c0c8 <siprintf>
 801bf14:	e7d0      	b.n	801beb8 <_scanf_float+0x378>
 801bf16:	9903      	ldr	r1, [sp, #12]
 801bf18:	f012 0f04 	tst.w	r2, #4
 801bf1c:	f103 0204 	add.w	r2, r3, #4
 801bf20:	600a      	str	r2, [r1, #0]
 801bf22:	d1d9      	bne.n	801bed8 <_scanf_float+0x398>
 801bf24:	f8d3 8000 	ldr.w	r8, [r3]
 801bf28:	ee10 2a10 	vmov	r2, s0
 801bf2c:	ee10 0a10 	vmov	r0, s0
 801bf30:	463b      	mov	r3, r7
 801bf32:	4639      	mov	r1, r7
 801bf34:	f7e4 fdfa 	bl	8000b2c <__aeabi_dcmpun>
 801bf38:	b128      	cbz	r0, 801bf46 <_scanf_float+0x406>
 801bf3a:	4808      	ldr	r0, [pc, #32]	; (801bf5c <_scanf_float+0x41c>)
 801bf3c:	f000 f88a 	bl	801c054 <nanf>
 801bf40:	ed88 0a00 	vstr	s0, [r8]
 801bf44:	e7cb      	b.n	801bede <_scanf_float+0x39e>
 801bf46:	4630      	mov	r0, r6
 801bf48:	4639      	mov	r1, r7
 801bf4a:	f7e4 fe4d 	bl	8000be8 <__aeabi_d2f>
 801bf4e:	f8c8 0000 	str.w	r0, [r8]
 801bf52:	e7c4      	b.n	801bede <_scanf_float+0x39e>
 801bf54:	2500      	movs	r5, #0
 801bf56:	e634      	b.n	801bbc2 <_scanf_float+0x82>
 801bf58:	08021edc 	.word	0x08021edc
 801bf5c:	080222e8 	.word	0x080222e8

0801bf60 <cleanup_glue>:
 801bf60:	b538      	push	{r3, r4, r5, lr}
 801bf62:	460c      	mov	r4, r1
 801bf64:	6809      	ldr	r1, [r1, #0]
 801bf66:	4605      	mov	r5, r0
 801bf68:	b109      	cbz	r1, 801bf6e <cleanup_glue+0xe>
 801bf6a:	f7ff fff9 	bl	801bf60 <cleanup_glue>
 801bf6e:	4621      	mov	r1, r4
 801bf70:	4628      	mov	r0, r5
 801bf72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bf76:	f002 bfa1 	b.w	801eebc <_free_r>
	...

0801bf7c <_reclaim_reent>:
 801bf7c:	4b2c      	ldr	r3, [pc, #176]	; (801c030 <_reclaim_reent+0xb4>)
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	4283      	cmp	r3, r0
 801bf82:	b570      	push	{r4, r5, r6, lr}
 801bf84:	4604      	mov	r4, r0
 801bf86:	d051      	beq.n	801c02c <_reclaim_reent+0xb0>
 801bf88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801bf8a:	b143      	cbz	r3, 801bf9e <_reclaim_reent+0x22>
 801bf8c:	68db      	ldr	r3, [r3, #12]
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d14a      	bne.n	801c028 <_reclaim_reent+0xac>
 801bf92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bf94:	6819      	ldr	r1, [r3, #0]
 801bf96:	b111      	cbz	r1, 801bf9e <_reclaim_reent+0x22>
 801bf98:	4620      	mov	r0, r4
 801bf9a:	f002 ff8f 	bl	801eebc <_free_r>
 801bf9e:	6961      	ldr	r1, [r4, #20]
 801bfa0:	b111      	cbz	r1, 801bfa8 <_reclaim_reent+0x2c>
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f002 ff8a 	bl	801eebc <_free_r>
 801bfa8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bfaa:	b111      	cbz	r1, 801bfb2 <_reclaim_reent+0x36>
 801bfac:	4620      	mov	r0, r4
 801bfae:	f002 ff85 	bl	801eebc <_free_r>
 801bfb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bfb4:	b111      	cbz	r1, 801bfbc <_reclaim_reent+0x40>
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	f002 ff80 	bl	801eebc <_free_r>
 801bfbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bfbe:	b111      	cbz	r1, 801bfc6 <_reclaim_reent+0x4a>
 801bfc0:	4620      	mov	r0, r4
 801bfc2:	f002 ff7b 	bl	801eebc <_free_r>
 801bfc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bfc8:	b111      	cbz	r1, 801bfd0 <_reclaim_reent+0x54>
 801bfca:	4620      	mov	r0, r4
 801bfcc:	f002 ff76 	bl	801eebc <_free_r>
 801bfd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801bfd2:	b111      	cbz	r1, 801bfda <_reclaim_reent+0x5e>
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	f002 ff71 	bl	801eebc <_free_r>
 801bfda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801bfdc:	b111      	cbz	r1, 801bfe4 <_reclaim_reent+0x68>
 801bfde:	4620      	mov	r0, r4
 801bfe0:	f002 ff6c 	bl	801eebc <_free_r>
 801bfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bfe6:	b111      	cbz	r1, 801bfee <_reclaim_reent+0x72>
 801bfe8:	4620      	mov	r0, r4
 801bfea:	f002 ff67 	bl	801eebc <_free_r>
 801bfee:	69a3      	ldr	r3, [r4, #24]
 801bff0:	b1e3      	cbz	r3, 801c02c <_reclaim_reent+0xb0>
 801bff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bff4:	4620      	mov	r0, r4
 801bff6:	4798      	blx	r3
 801bff8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801bffa:	b1b9      	cbz	r1, 801c02c <_reclaim_reent+0xb0>
 801bffc:	4620      	mov	r0, r4
 801bffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c002:	f7ff bfad 	b.w	801bf60 <cleanup_glue>
 801c006:	5949      	ldr	r1, [r1, r5]
 801c008:	b941      	cbnz	r1, 801c01c <_reclaim_reent+0xa0>
 801c00a:	3504      	adds	r5, #4
 801c00c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c00e:	2d80      	cmp	r5, #128	; 0x80
 801c010:	68d9      	ldr	r1, [r3, #12]
 801c012:	d1f8      	bne.n	801c006 <_reclaim_reent+0x8a>
 801c014:	4620      	mov	r0, r4
 801c016:	f002 ff51 	bl	801eebc <_free_r>
 801c01a:	e7ba      	b.n	801bf92 <_reclaim_reent+0x16>
 801c01c:	680e      	ldr	r6, [r1, #0]
 801c01e:	4620      	mov	r0, r4
 801c020:	f002 ff4c 	bl	801eebc <_free_r>
 801c024:	4631      	mov	r1, r6
 801c026:	e7ef      	b.n	801c008 <_reclaim_reent+0x8c>
 801c028:	2500      	movs	r5, #0
 801c02a:	e7ef      	b.n	801c00c <_reclaim_reent+0x90>
 801c02c:	bd70      	pop	{r4, r5, r6, pc}
 801c02e:	bf00      	nop
 801c030:	2000010c 	.word	0x2000010c

0801c034 <_sbrk_r>:
 801c034:	b538      	push	{r3, r4, r5, lr}
 801c036:	4d06      	ldr	r5, [pc, #24]	; (801c050 <_sbrk_r+0x1c>)
 801c038:	2300      	movs	r3, #0
 801c03a:	4604      	mov	r4, r0
 801c03c:	4608      	mov	r0, r1
 801c03e:	602b      	str	r3, [r5, #0]
 801c040:	f005 fb20 	bl	8021684 <_sbrk>
 801c044:	1c43      	adds	r3, r0, #1
 801c046:	d102      	bne.n	801c04e <_sbrk_r+0x1a>
 801c048:	682b      	ldr	r3, [r5, #0]
 801c04a:	b103      	cbz	r3, 801c04e <_sbrk_r+0x1a>
 801c04c:	6023      	str	r3, [r4, #0]
 801c04e:	bd38      	pop	{r3, r4, r5, pc}
 801c050:	2000e9a4 	.word	0x2000e9a4

0801c054 <nanf>:
 801c054:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c05c <nanf+0x8>
 801c058:	4770      	bx	lr
 801c05a:	bf00      	nop
 801c05c:	7fc00000 	.word	0x7fc00000

0801c060 <sniprintf>:
 801c060:	b40c      	push	{r2, r3}
 801c062:	b530      	push	{r4, r5, lr}
 801c064:	4b17      	ldr	r3, [pc, #92]	; (801c0c4 <sniprintf+0x64>)
 801c066:	1e0c      	subs	r4, r1, #0
 801c068:	681d      	ldr	r5, [r3, #0]
 801c06a:	b09d      	sub	sp, #116	; 0x74
 801c06c:	da08      	bge.n	801c080 <sniprintf+0x20>
 801c06e:	238b      	movs	r3, #139	; 0x8b
 801c070:	602b      	str	r3, [r5, #0]
 801c072:	f04f 30ff 	mov.w	r0, #4294967295
 801c076:	b01d      	add	sp, #116	; 0x74
 801c078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c07c:	b002      	add	sp, #8
 801c07e:	4770      	bx	lr
 801c080:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c084:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c088:	bf14      	ite	ne
 801c08a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c08e:	4623      	moveq	r3, r4
 801c090:	9304      	str	r3, [sp, #16]
 801c092:	9307      	str	r3, [sp, #28]
 801c094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c098:	9002      	str	r0, [sp, #8]
 801c09a:	9006      	str	r0, [sp, #24]
 801c09c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c0a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c0a2:	ab21      	add	r3, sp, #132	; 0x84
 801c0a4:	a902      	add	r1, sp, #8
 801c0a6:	4628      	mov	r0, r5
 801c0a8:	9301      	str	r3, [sp, #4]
 801c0aa:	f002 ffaf 	bl	801f00c <_svfiprintf_r>
 801c0ae:	1c43      	adds	r3, r0, #1
 801c0b0:	bfbc      	itt	lt
 801c0b2:	238b      	movlt	r3, #139	; 0x8b
 801c0b4:	602b      	strlt	r3, [r5, #0]
 801c0b6:	2c00      	cmp	r4, #0
 801c0b8:	d0dd      	beq.n	801c076 <sniprintf+0x16>
 801c0ba:	9b02      	ldr	r3, [sp, #8]
 801c0bc:	2200      	movs	r2, #0
 801c0be:	701a      	strb	r2, [r3, #0]
 801c0c0:	e7d9      	b.n	801c076 <sniprintf+0x16>
 801c0c2:	bf00      	nop
 801c0c4:	2000010c 	.word	0x2000010c

0801c0c8 <siprintf>:
 801c0c8:	b40e      	push	{r1, r2, r3}
 801c0ca:	b500      	push	{lr}
 801c0cc:	b09c      	sub	sp, #112	; 0x70
 801c0ce:	ab1d      	add	r3, sp, #116	; 0x74
 801c0d0:	9002      	str	r0, [sp, #8]
 801c0d2:	9006      	str	r0, [sp, #24]
 801c0d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c0d8:	4809      	ldr	r0, [pc, #36]	; (801c100 <siprintf+0x38>)
 801c0da:	9107      	str	r1, [sp, #28]
 801c0dc:	9104      	str	r1, [sp, #16]
 801c0de:	4909      	ldr	r1, [pc, #36]	; (801c104 <siprintf+0x3c>)
 801c0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 801c0e4:	9105      	str	r1, [sp, #20]
 801c0e6:	6800      	ldr	r0, [r0, #0]
 801c0e8:	9301      	str	r3, [sp, #4]
 801c0ea:	a902      	add	r1, sp, #8
 801c0ec:	f002 ff8e 	bl	801f00c <_svfiprintf_r>
 801c0f0:	9b02      	ldr	r3, [sp, #8]
 801c0f2:	2200      	movs	r2, #0
 801c0f4:	701a      	strb	r2, [r3, #0]
 801c0f6:	b01c      	add	sp, #112	; 0x70
 801c0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801c0fc:	b003      	add	sp, #12
 801c0fe:	4770      	bx	lr
 801c100:	2000010c 	.word	0x2000010c
 801c104:	ffff0208 	.word	0xffff0208

0801c108 <__sread>:
 801c108:	b510      	push	{r4, lr}
 801c10a:	460c      	mov	r4, r1
 801c10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c110:	f003 f87c 	bl	801f20c <_read_r>
 801c114:	2800      	cmp	r0, #0
 801c116:	bfab      	itete	ge
 801c118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c11a:	89a3      	ldrhlt	r3, [r4, #12]
 801c11c:	181b      	addge	r3, r3, r0
 801c11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c122:	bfac      	ite	ge
 801c124:	6563      	strge	r3, [r4, #84]	; 0x54
 801c126:	81a3      	strhlt	r3, [r4, #12]
 801c128:	bd10      	pop	{r4, pc}

0801c12a <__swrite>:
 801c12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c12e:	461f      	mov	r7, r3
 801c130:	898b      	ldrh	r3, [r1, #12]
 801c132:	05db      	lsls	r3, r3, #23
 801c134:	4605      	mov	r5, r0
 801c136:	460c      	mov	r4, r1
 801c138:	4616      	mov	r6, r2
 801c13a:	d505      	bpl.n	801c148 <__swrite+0x1e>
 801c13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c140:	2302      	movs	r3, #2
 801c142:	2200      	movs	r2, #0
 801c144:	f002 f9aa 	bl	801e49c <_lseek_r>
 801c148:	89a3      	ldrh	r3, [r4, #12]
 801c14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c152:	81a3      	strh	r3, [r4, #12]
 801c154:	4632      	mov	r2, r6
 801c156:	463b      	mov	r3, r7
 801c158:	4628      	mov	r0, r5
 801c15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c15e:	f000 bec3 	b.w	801cee8 <_write_r>

0801c162 <__sseek>:
 801c162:	b510      	push	{r4, lr}
 801c164:	460c      	mov	r4, r1
 801c166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c16a:	f002 f997 	bl	801e49c <_lseek_r>
 801c16e:	1c43      	adds	r3, r0, #1
 801c170:	89a3      	ldrh	r3, [r4, #12]
 801c172:	bf15      	itete	ne
 801c174:	6560      	strne	r0, [r4, #84]	; 0x54
 801c176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c17a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c17e:	81a3      	strheq	r3, [r4, #12]
 801c180:	bf18      	it	ne
 801c182:	81a3      	strhne	r3, [r4, #12]
 801c184:	bd10      	pop	{r4, pc}

0801c186 <__sclose>:
 801c186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c18a:	f000 bebf 	b.w	801cf0c <_close_r>

0801c18e <sulp>:
 801c18e:	b570      	push	{r4, r5, r6, lr}
 801c190:	4604      	mov	r4, r0
 801c192:	460d      	mov	r5, r1
 801c194:	ec45 4b10 	vmov	d0, r4, r5
 801c198:	4616      	mov	r6, r2
 801c19a:	f002 fd29 	bl	801ebf0 <__ulp>
 801c19e:	ec51 0b10 	vmov	r0, r1, d0
 801c1a2:	b17e      	cbz	r6, 801c1c4 <sulp+0x36>
 801c1a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c1a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	dd09      	ble.n	801c1c4 <sulp+0x36>
 801c1b0:	051b      	lsls	r3, r3, #20
 801c1b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c1b6:	2400      	movs	r4, #0
 801c1b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c1bc:	4622      	mov	r2, r4
 801c1be:	462b      	mov	r3, r5
 801c1c0:	f7e4 fa1a 	bl	80005f8 <__aeabi_dmul>
 801c1c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c1c8 <_strtod_l>:
 801c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1cc:	ed2d 8b02 	vpush	{d8}
 801c1d0:	b09d      	sub	sp, #116	; 0x74
 801c1d2:	461f      	mov	r7, r3
 801c1d4:	2300      	movs	r3, #0
 801c1d6:	9318      	str	r3, [sp, #96]	; 0x60
 801c1d8:	4ba2      	ldr	r3, [pc, #648]	; (801c464 <_strtod_l+0x29c>)
 801c1da:	9213      	str	r2, [sp, #76]	; 0x4c
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	9305      	str	r3, [sp, #20]
 801c1e0:	4604      	mov	r4, r0
 801c1e2:	4618      	mov	r0, r3
 801c1e4:	4688      	mov	r8, r1
 801c1e6:	f7e3 fff3 	bl	80001d0 <strlen>
 801c1ea:	f04f 0a00 	mov.w	sl, #0
 801c1ee:	4605      	mov	r5, r0
 801c1f0:	f04f 0b00 	mov.w	fp, #0
 801c1f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c1f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c1fa:	781a      	ldrb	r2, [r3, #0]
 801c1fc:	2a2b      	cmp	r2, #43	; 0x2b
 801c1fe:	d04e      	beq.n	801c29e <_strtod_l+0xd6>
 801c200:	d83b      	bhi.n	801c27a <_strtod_l+0xb2>
 801c202:	2a0d      	cmp	r2, #13
 801c204:	d834      	bhi.n	801c270 <_strtod_l+0xa8>
 801c206:	2a08      	cmp	r2, #8
 801c208:	d834      	bhi.n	801c274 <_strtod_l+0xac>
 801c20a:	2a00      	cmp	r2, #0
 801c20c:	d03e      	beq.n	801c28c <_strtod_l+0xc4>
 801c20e:	2300      	movs	r3, #0
 801c210:	930a      	str	r3, [sp, #40]	; 0x28
 801c212:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c214:	7833      	ldrb	r3, [r6, #0]
 801c216:	2b30      	cmp	r3, #48	; 0x30
 801c218:	f040 80b0 	bne.w	801c37c <_strtod_l+0x1b4>
 801c21c:	7873      	ldrb	r3, [r6, #1]
 801c21e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c222:	2b58      	cmp	r3, #88	; 0x58
 801c224:	d168      	bne.n	801c2f8 <_strtod_l+0x130>
 801c226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c228:	9301      	str	r3, [sp, #4]
 801c22a:	ab18      	add	r3, sp, #96	; 0x60
 801c22c:	9702      	str	r7, [sp, #8]
 801c22e:	9300      	str	r3, [sp, #0]
 801c230:	4a8d      	ldr	r2, [pc, #564]	; (801c468 <_strtod_l+0x2a0>)
 801c232:	ab19      	add	r3, sp, #100	; 0x64
 801c234:	a917      	add	r1, sp, #92	; 0x5c
 801c236:	4620      	mov	r0, r4
 801c238:	f001 fe24 	bl	801de84 <__gethex>
 801c23c:	f010 0707 	ands.w	r7, r0, #7
 801c240:	4605      	mov	r5, r0
 801c242:	d005      	beq.n	801c250 <_strtod_l+0x88>
 801c244:	2f06      	cmp	r7, #6
 801c246:	d12c      	bne.n	801c2a2 <_strtod_l+0xda>
 801c248:	3601      	adds	r6, #1
 801c24a:	2300      	movs	r3, #0
 801c24c:	9617      	str	r6, [sp, #92]	; 0x5c
 801c24e:	930a      	str	r3, [sp, #40]	; 0x28
 801c250:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c252:	2b00      	cmp	r3, #0
 801c254:	f040 8590 	bne.w	801cd78 <_strtod_l+0xbb0>
 801c258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c25a:	b1eb      	cbz	r3, 801c298 <_strtod_l+0xd0>
 801c25c:	4652      	mov	r2, sl
 801c25e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c262:	ec43 2b10 	vmov	d0, r2, r3
 801c266:	b01d      	add	sp, #116	; 0x74
 801c268:	ecbd 8b02 	vpop	{d8}
 801c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c270:	2a20      	cmp	r2, #32
 801c272:	d1cc      	bne.n	801c20e <_strtod_l+0x46>
 801c274:	3301      	adds	r3, #1
 801c276:	9317      	str	r3, [sp, #92]	; 0x5c
 801c278:	e7be      	b.n	801c1f8 <_strtod_l+0x30>
 801c27a:	2a2d      	cmp	r2, #45	; 0x2d
 801c27c:	d1c7      	bne.n	801c20e <_strtod_l+0x46>
 801c27e:	2201      	movs	r2, #1
 801c280:	920a      	str	r2, [sp, #40]	; 0x28
 801c282:	1c5a      	adds	r2, r3, #1
 801c284:	9217      	str	r2, [sp, #92]	; 0x5c
 801c286:	785b      	ldrb	r3, [r3, #1]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d1c2      	bne.n	801c212 <_strtod_l+0x4a>
 801c28c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c28e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c292:	2b00      	cmp	r3, #0
 801c294:	f040 856e 	bne.w	801cd74 <_strtod_l+0xbac>
 801c298:	4652      	mov	r2, sl
 801c29a:	465b      	mov	r3, fp
 801c29c:	e7e1      	b.n	801c262 <_strtod_l+0x9a>
 801c29e:	2200      	movs	r2, #0
 801c2a0:	e7ee      	b.n	801c280 <_strtod_l+0xb8>
 801c2a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c2a4:	b13a      	cbz	r2, 801c2b6 <_strtod_l+0xee>
 801c2a6:	2135      	movs	r1, #53	; 0x35
 801c2a8:	a81a      	add	r0, sp, #104	; 0x68
 801c2aa:	f002 fdac 	bl	801ee06 <__copybits>
 801c2ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	f002 f96b 	bl	801e58c <_Bfree>
 801c2b6:	3f01      	subs	r7, #1
 801c2b8:	2f04      	cmp	r7, #4
 801c2ba:	d806      	bhi.n	801c2ca <_strtod_l+0x102>
 801c2bc:	e8df f007 	tbb	[pc, r7]
 801c2c0:	1714030a 	.word	0x1714030a
 801c2c4:	0a          	.byte	0x0a
 801c2c5:	00          	.byte	0x00
 801c2c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801c2ca:	0728      	lsls	r0, r5, #28
 801c2cc:	d5c0      	bpl.n	801c250 <_strtod_l+0x88>
 801c2ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c2d2:	e7bd      	b.n	801c250 <_strtod_l+0x88>
 801c2d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801c2d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c2da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c2de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c2e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c2e6:	e7f0      	b.n	801c2ca <_strtod_l+0x102>
 801c2e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801c46c <_strtod_l+0x2a4>
 801c2ec:	e7ed      	b.n	801c2ca <_strtod_l+0x102>
 801c2ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c2f2:	f04f 3aff 	mov.w	sl, #4294967295
 801c2f6:	e7e8      	b.n	801c2ca <_strtod_l+0x102>
 801c2f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2fa:	1c5a      	adds	r2, r3, #1
 801c2fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c2fe:	785b      	ldrb	r3, [r3, #1]
 801c300:	2b30      	cmp	r3, #48	; 0x30
 801c302:	d0f9      	beq.n	801c2f8 <_strtod_l+0x130>
 801c304:	2b00      	cmp	r3, #0
 801c306:	d0a3      	beq.n	801c250 <_strtod_l+0x88>
 801c308:	2301      	movs	r3, #1
 801c30a:	f04f 0900 	mov.w	r9, #0
 801c30e:	9304      	str	r3, [sp, #16]
 801c310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c312:	9308      	str	r3, [sp, #32]
 801c314:	f8cd 901c 	str.w	r9, [sp, #28]
 801c318:	464f      	mov	r7, r9
 801c31a:	220a      	movs	r2, #10
 801c31c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c31e:	7806      	ldrb	r6, [r0, #0]
 801c320:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c324:	b2d9      	uxtb	r1, r3
 801c326:	2909      	cmp	r1, #9
 801c328:	d92a      	bls.n	801c380 <_strtod_l+0x1b8>
 801c32a:	9905      	ldr	r1, [sp, #20]
 801c32c:	462a      	mov	r2, r5
 801c32e:	f002 ff87 	bl	801f240 <strncmp>
 801c332:	b398      	cbz	r0, 801c39c <_strtod_l+0x1d4>
 801c334:	2000      	movs	r0, #0
 801c336:	4632      	mov	r2, r6
 801c338:	463d      	mov	r5, r7
 801c33a:	9005      	str	r0, [sp, #20]
 801c33c:	4603      	mov	r3, r0
 801c33e:	2a65      	cmp	r2, #101	; 0x65
 801c340:	d001      	beq.n	801c346 <_strtod_l+0x17e>
 801c342:	2a45      	cmp	r2, #69	; 0x45
 801c344:	d118      	bne.n	801c378 <_strtod_l+0x1b0>
 801c346:	b91d      	cbnz	r5, 801c350 <_strtod_l+0x188>
 801c348:	9a04      	ldr	r2, [sp, #16]
 801c34a:	4302      	orrs	r2, r0
 801c34c:	d09e      	beq.n	801c28c <_strtod_l+0xc4>
 801c34e:	2500      	movs	r5, #0
 801c350:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801c354:	f108 0201 	add.w	r2, r8, #1
 801c358:	9217      	str	r2, [sp, #92]	; 0x5c
 801c35a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c35e:	2a2b      	cmp	r2, #43	; 0x2b
 801c360:	d075      	beq.n	801c44e <_strtod_l+0x286>
 801c362:	2a2d      	cmp	r2, #45	; 0x2d
 801c364:	d07b      	beq.n	801c45e <_strtod_l+0x296>
 801c366:	f04f 0c00 	mov.w	ip, #0
 801c36a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c36e:	2909      	cmp	r1, #9
 801c370:	f240 8082 	bls.w	801c478 <_strtod_l+0x2b0>
 801c374:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c378:	2600      	movs	r6, #0
 801c37a:	e09d      	b.n	801c4b8 <_strtod_l+0x2f0>
 801c37c:	2300      	movs	r3, #0
 801c37e:	e7c4      	b.n	801c30a <_strtod_l+0x142>
 801c380:	2f08      	cmp	r7, #8
 801c382:	bfd8      	it	le
 801c384:	9907      	ldrle	r1, [sp, #28]
 801c386:	f100 0001 	add.w	r0, r0, #1
 801c38a:	bfda      	itte	le
 801c38c:	fb02 3301 	mlale	r3, r2, r1, r3
 801c390:	9307      	strle	r3, [sp, #28]
 801c392:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c396:	3701      	adds	r7, #1
 801c398:	9017      	str	r0, [sp, #92]	; 0x5c
 801c39a:	e7bf      	b.n	801c31c <_strtod_l+0x154>
 801c39c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c39e:	195a      	adds	r2, r3, r5
 801c3a0:	9217      	str	r2, [sp, #92]	; 0x5c
 801c3a2:	5d5a      	ldrb	r2, [r3, r5]
 801c3a4:	2f00      	cmp	r7, #0
 801c3a6:	d037      	beq.n	801c418 <_strtod_l+0x250>
 801c3a8:	9005      	str	r0, [sp, #20]
 801c3aa:	463d      	mov	r5, r7
 801c3ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c3b0:	2b09      	cmp	r3, #9
 801c3b2:	d912      	bls.n	801c3da <_strtod_l+0x212>
 801c3b4:	2301      	movs	r3, #1
 801c3b6:	e7c2      	b.n	801c33e <_strtod_l+0x176>
 801c3b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c3ba:	1c5a      	adds	r2, r3, #1
 801c3bc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c3be:	785a      	ldrb	r2, [r3, #1]
 801c3c0:	3001      	adds	r0, #1
 801c3c2:	2a30      	cmp	r2, #48	; 0x30
 801c3c4:	d0f8      	beq.n	801c3b8 <_strtod_l+0x1f0>
 801c3c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c3ca:	2b08      	cmp	r3, #8
 801c3cc:	f200 84d9 	bhi.w	801cd82 <_strtod_l+0xbba>
 801c3d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c3d2:	9005      	str	r0, [sp, #20]
 801c3d4:	2000      	movs	r0, #0
 801c3d6:	9308      	str	r3, [sp, #32]
 801c3d8:	4605      	mov	r5, r0
 801c3da:	3a30      	subs	r2, #48	; 0x30
 801c3dc:	f100 0301 	add.w	r3, r0, #1
 801c3e0:	d014      	beq.n	801c40c <_strtod_l+0x244>
 801c3e2:	9905      	ldr	r1, [sp, #20]
 801c3e4:	4419      	add	r1, r3
 801c3e6:	9105      	str	r1, [sp, #20]
 801c3e8:	462b      	mov	r3, r5
 801c3ea:	eb00 0e05 	add.w	lr, r0, r5
 801c3ee:	210a      	movs	r1, #10
 801c3f0:	4573      	cmp	r3, lr
 801c3f2:	d113      	bne.n	801c41c <_strtod_l+0x254>
 801c3f4:	182b      	adds	r3, r5, r0
 801c3f6:	2b08      	cmp	r3, #8
 801c3f8:	f105 0501 	add.w	r5, r5, #1
 801c3fc:	4405      	add	r5, r0
 801c3fe:	dc1c      	bgt.n	801c43a <_strtod_l+0x272>
 801c400:	9907      	ldr	r1, [sp, #28]
 801c402:	230a      	movs	r3, #10
 801c404:	fb03 2301 	mla	r3, r3, r1, r2
 801c408:	9307      	str	r3, [sp, #28]
 801c40a:	2300      	movs	r3, #0
 801c40c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c40e:	1c51      	adds	r1, r2, #1
 801c410:	9117      	str	r1, [sp, #92]	; 0x5c
 801c412:	7852      	ldrb	r2, [r2, #1]
 801c414:	4618      	mov	r0, r3
 801c416:	e7c9      	b.n	801c3ac <_strtod_l+0x1e4>
 801c418:	4638      	mov	r0, r7
 801c41a:	e7d2      	b.n	801c3c2 <_strtod_l+0x1fa>
 801c41c:	2b08      	cmp	r3, #8
 801c41e:	dc04      	bgt.n	801c42a <_strtod_l+0x262>
 801c420:	9e07      	ldr	r6, [sp, #28]
 801c422:	434e      	muls	r6, r1
 801c424:	9607      	str	r6, [sp, #28]
 801c426:	3301      	adds	r3, #1
 801c428:	e7e2      	b.n	801c3f0 <_strtod_l+0x228>
 801c42a:	f103 0c01 	add.w	ip, r3, #1
 801c42e:	f1bc 0f10 	cmp.w	ip, #16
 801c432:	bfd8      	it	le
 801c434:	fb01 f909 	mulle.w	r9, r1, r9
 801c438:	e7f5      	b.n	801c426 <_strtod_l+0x25e>
 801c43a:	2d10      	cmp	r5, #16
 801c43c:	bfdc      	itt	le
 801c43e:	230a      	movle	r3, #10
 801c440:	fb03 2909 	mlale	r9, r3, r9, r2
 801c444:	e7e1      	b.n	801c40a <_strtod_l+0x242>
 801c446:	2300      	movs	r3, #0
 801c448:	9305      	str	r3, [sp, #20]
 801c44a:	2301      	movs	r3, #1
 801c44c:	e77c      	b.n	801c348 <_strtod_l+0x180>
 801c44e:	f04f 0c00 	mov.w	ip, #0
 801c452:	f108 0202 	add.w	r2, r8, #2
 801c456:	9217      	str	r2, [sp, #92]	; 0x5c
 801c458:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c45c:	e785      	b.n	801c36a <_strtod_l+0x1a2>
 801c45e:	f04f 0c01 	mov.w	ip, #1
 801c462:	e7f6      	b.n	801c452 <_strtod_l+0x28a>
 801c464:	08022130 	.word	0x08022130
 801c468:	08021ee4 	.word	0x08021ee4
 801c46c:	7ff00000 	.word	0x7ff00000
 801c470:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c472:	1c51      	adds	r1, r2, #1
 801c474:	9117      	str	r1, [sp, #92]	; 0x5c
 801c476:	7852      	ldrb	r2, [r2, #1]
 801c478:	2a30      	cmp	r2, #48	; 0x30
 801c47a:	d0f9      	beq.n	801c470 <_strtod_l+0x2a8>
 801c47c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801c480:	2908      	cmp	r1, #8
 801c482:	f63f af79 	bhi.w	801c378 <_strtod_l+0x1b0>
 801c486:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801c48a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c48c:	9206      	str	r2, [sp, #24]
 801c48e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c490:	1c51      	adds	r1, r2, #1
 801c492:	9117      	str	r1, [sp, #92]	; 0x5c
 801c494:	7852      	ldrb	r2, [r2, #1]
 801c496:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801c49a:	2e09      	cmp	r6, #9
 801c49c:	d937      	bls.n	801c50e <_strtod_l+0x346>
 801c49e:	9e06      	ldr	r6, [sp, #24]
 801c4a0:	1b89      	subs	r1, r1, r6
 801c4a2:	2908      	cmp	r1, #8
 801c4a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c4a8:	dc02      	bgt.n	801c4b0 <_strtod_l+0x2e8>
 801c4aa:	4576      	cmp	r6, lr
 801c4ac:	bfa8      	it	ge
 801c4ae:	4676      	movge	r6, lr
 801c4b0:	f1bc 0f00 	cmp.w	ip, #0
 801c4b4:	d000      	beq.n	801c4b8 <_strtod_l+0x2f0>
 801c4b6:	4276      	negs	r6, r6
 801c4b8:	2d00      	cmp	r5, #0
 801c4ba:	d14d      	bne.n	801c558 <_strtod_l+0x390>
 801c4bc:	9904      	ldr	r1, [sp, #16]
 801c4be:	4301      	orrs	r1, r0
 801c4c0:	f47f aec6 	bne.w	801c250 <_strtod_l+0x88>
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	f47f aee1 	bne.w	801c28c <_strtod_l+0xc4>
 801c4ca:	2a69      	cmp	r2, #105	; 0x69
 801c4cc:	d027      	beq.n	801c51e <_strtod_l+0x356>
 801c4ce:	dc24      	bgt.n	801c51a <_strtod_l+0x352>
 801c4d0:	2a49      	cmp	r2, #73	; 0x49
 801c4d2:	d024      	beq.n	801c51e <_strtod_l+0x356>
 801c4d4:	2a4e      	cmp	r2, #78	; 0x4e
 801c4d6:	f47f aed9 	bne.w	801c28c <_strtod_l+0xc4>
 801c4da:	499f      	ldr	r1, [pc, #636]	; (801c758 <_strtod_l+0x590>)
 801c4dc:	a817      	add	r0, sp, #92	; 0x5c
 801c4de:	f001 ff29 	bl	801e334 <__match>
 801c4e2:	2800      	cmp	r0, #0
 801c4e4:	f43f aed2 	beq.w	801c28c <_strtod_l+0xc4>
 801c4e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c4ea:	781b      	ldrb	r3, [r3, #0]
 801c4ec:	2b28      	cmp	r3, #40	; 0x28
 801c4ee:	d12d      	bne.n	801c54c <_strtod_l+0x384>
 801c4f0:	499a      	ldr	r1, [pc, #616]	; (801c75c <_strtod_l+0x594>)
 801c4f2:	aa1a      	add	r2, sp, #104	; 0x68
 801c4f4:	a817      	add	r0, sp, #92	; 0x5c
 801c4f6:	f001 ff31 	bl	801e35c <__hexnan>
 801c4fa:	2805      	cmp	r0, #5
 801c4fc:	d126      	bne.n	801c54c <_strtod_l+0x384>
 801c4fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c500:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801c504:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c508:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c50c:	e6a0      	b.n	801c250 <_strtod_l+0x88>
 801c50e:	210a      	movs	r1, #10
 801c510:	fb01 2e0e 	mla	lr, r1, lr, r2
 801c514:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c518:	e7b9      	b.n	801c48e <_strtod_l+0x2c6>
 801c51a:	2a6e      	cmp	r2, #110	; 0x6e
 801c51c:	e7db      	b.n	801c4d6 <_strtod_l+0x30e>
 801c51e:	4990      	ldr	r1, [pc, #576]	; (801c760 <_strtod_l+0x598>)
 801c520:	a817      	add	r0, sp, #92	; 0x5c
 801c522:	f001 ff07 	bl	801e334 <__match>
 801c526:	2800      	cmp	r0, #0
 801c528:	f43f aeb0 	beq.w	801c28c <_strtod_l+0xc4>
 801c52c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c52e:	498d      	ldr	r1, [pc, #564]	; (801c764 <_strtod_l+0x59c>)
 801c530:	3b01      	subs	r3, #1
 801c532:	a817      	add	r0, sp, #92	; 0x5c
 801c534:	9317      	str	r3, [sp, #92]	; 0x5c
 801c536:	f001 fefd 	bl	801e334 <__match>
 801c53a:	b910      	cbnz	r0, 801c542 <_strtod_l+0x37a>
 801c53c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c53e:	3301      	adds	r3, #1
 801c540:	9317      	str	r3, [sp, #92]	; 0x5c
 801c542:	f8df b230 	ldr.w	fp, [pc, #560]	; 801c774 <_strtod_l+0x5ac>
 801c546:	f04f 0a00 	mov.w	sl, #0
 801c54a:	e681      	b.n	801c250 <_strtod_l+0x88>
 801c54c:	4886      	ldr	r0, [pc, #536]	; (801c768 <_strtod_l+0x5a0>)
 801c54e:	f002 fe6f 	bl	801f230 <nan>
 801c552:	ec5b ab10 	vmov	sl, fp, d0
 801c556:	e67b      	b.n	801c250 <_strtod_l+0x88>
 801c558:	9b05      	ldr	r3, [sp, #20]
 801c55a:	9807      	ldr	r0, [sp, #28]
 801c55c:	1af3      	subs	r3, r6, r3
 801c55e:	2f00      	cmp	r7, #0
 801c560:	bf08      	it	eq
 801c562:	462f      	moveq	r7, r5
 801c564:	2d10      	cmp	r5, #16
 801c566:	9306      	str	r3, [sp, #24]
 801c568:	46a8      	mov	r8, r5
 801c56a:	bfa8      	it	ge
 801c56c:	f04f 0810 	movge.w	r8, #16
 801c570:	f7e3 ffc8 	bl	8000504 <__aeabi_ui2d>
 801c574:	2d09      	cmp	r5, #9
 801c576:	4682      	mov	sl, r0
 801c578:	468b      	mov	fp, r1
 801c57a:	dd13      	ble.n	801c5a4 <_strtod_l+0x3dc>
 801c57c:	4b7b      	ldr	r3, [pc, #492]	; (801c76c <_strtod_l+0x5a4>)
 801c57e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c582:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c586:	f7e4 f837 	bl	80005f8 <__aeabi_dmul>
 801c58a:	4682      	mov	sl, r0
 801c58c:	4648      	mov	r0, r9
 801c58e:	468b      	mov	fp, r1
 801c590:	f7e3 ffb8 	bl	8000504 <__aeabi_ui2d>
 801c594:	4602      	mov	r2, r0
 801c596:	460b      	mov	r3, r1
 801c598:	4650      	mov	r0, sl
 801c59a:	4659      	mov	r1, fp
 801c59c:	f7e3 fe76 	bl	800028c <__adddf3>
 801c5a0:	4682      	mov	sl, r0
 801c5a2:	468b      	mov	fp, r1
 801c5a4:	2d0f      	cmp	r5, #15
 801c5a6:	dc38      	bgt.n	801c61a <_strtod_l+0x452>
 801c5a8:	9b06      	ldr	r3, [sp, #24]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	f43f ae50 	beq.w	801c250 <_strtod_l+0x88>
 801c5b0:	dd24      	ble.n	801c5fc <_strtod_l+0x434>
 801c5b2:	2b16      	cmp	r3, #22
 801c5b4:	dc0b      	bgt.n	801c5ce <_strtod_l+0x406>
 801c5b6:	496d      	ldr	r1, [pc, #436]	; (801c76c <_strtod_l+0x5a4>)
 801c5b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c5bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5c0:	4652      	mov	r2, sl
 801c5c2:	465b      	mov	r3, fp
 801c5c4:	f7e4 f818 	bl	80005f8 <__aeabi_dmul>
 801c5c8:	4682      	mov	sl, r0
 801c5ca:	468b      	mov	fp, r1
 801c5cc:	e640      	b.n	801c250 <_strtod_l+0x88>
 801c5ce:	9a06      	ldr	r2, [sp, #24]
 801c5d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801c5d4:	4293      	cmp	r3, r2
 801c5d6:	db20      	blt.n	801c61a <_strtod_l+0x452>
 801c5d8:	4c64      	ldr	r4, [pc, #400]	; (801c76c <_strtod_l+0x5a4>)
 801c5da:	f1c5 050f 	rsb	r5, r5, #15
 801c5de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c5e2:	4652      	mov	r2, sl
 801c5e4:	465b      	mov	r3, fp
 801c5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5ea:	f7e4 f805 	bl	80005f8 <__aeabi_dmul>
 801c5ee:	9b06      	ldr	r3, [sp, #24]
 801c5f0:	1b5d      	subs	r5, r3, r5
 801c5f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c5f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c5fa:	e7e3      	b.n	801c5c4 <_strtod_l+0x3fc>
 801c5fc:	9b06      	ldr	r3, [sp, #24]
 801c5fe:	3316      	adds	r3, #22
 801c600:	db0b      	blt.n	801c61a <_strtod_l+0x452>
 801c602:	9b05      	ldr	r3, [sp, #20]
 801c604:	1b9e      	subs	r6, r3, r6
 801c606:	4b59      	ldr	r3, [pc, #356]	; (801c76c <_strtod_l+0x5a4>)
 801c608:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801c60c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c610:	4650      	mov	r0, sl
 801c612:	4659      	mov	r1, fp
 801c614:	f7e4 f91a 	bl	800084c <__aeabi_ddiv>
 801c618:	e7d6      	b.n	801c5c8 <_strtod_l+0x400>
 801c61a:	9b06      	ldr	r3, [sp, #24]
 801c61c:	eba5 0808 	sub.w	r8, r5, r8
 801c620:	4498      	add	r8, r3
 801c622:	f1b8 0f00 	cmp.w	r8, #0
 801c626:	dd74      	ble.n	801c712 <_strtod_l+0x54a>
 801c628:	f018 030f 	ands.w	r3, r8, #15
 801c62c:	d00a      	beq.n	801c644 <_strtod_l+0x47c>
 801c62e:	494f      	ldr	r1, [pc, #316]	; (801c76c <_strtod_l+0x5a4>)
 801c630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c634:	4652      	mov	r2, sl
 801c636:	465b      	mov	r3, fp
 801c638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c63c:	f7e3 ffdc 	bl	80005f8 <__aeabi_dmul>
 801c640:	4682      	mov	sl, r0
 801c642:	468b      	mov	fp, r1
 801c644:	f038 080f 	bics.w	r8, r8, #15
 801c648:	d04f      	beq.n	801c6ea <_strtod_l+0x522>
 801c64a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c64e:	dd22      	ble.n	801c696 <_strtod_l+0x4ce>
 801c650:	2500      	movs	r5, #0
 801c652:	462e      	mov	r6, r5
 801c654:	9507      	str	r5, [sp, #28]
 801c656:	9505      	str	r5, [sp, #20]
 801c658:	2322      	movs	r3, #34	; 0x22
 801c65a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801c774 <_strtod_l+0x5ac>
 801c65e:	6023      	str	r3, [r4, #0]
 801c660:	f04f 0a00 	mov.w	sl, #0
 801c664:	9b07      	ldr	r3, [sp, #28]
 801c666:	2b00      	cmp	r3, #0
 801c668:	f43f adf2 	beq.w	801c250 <_strtod_l+0x88>
 801c66c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c66e:	4620      	mov	r0, r4
 801c670:	f001 ff8c 	bl	801e58c <_Bfree>
 801c674:	9905      	ldr	r1, [sp, #20]
 801c676:	4620      	mov	r0, r4
 801c678:	f001 ff88 	bl	801e58c <_Bfree>
 801c67c:	4631      	mov	r1, r6
 801c67e:	4620      	mov	r0, r4
 801c680:	f001 ff84 	bl	801e58c <_Bfree>
 801c684:	9907      	ldr	r1, [sp, #28]
 801c686:	4620      	mov	r0, r4
 801c688:	f001 ff80 	bl	801e58c <_Bfree>
 801c68c:	4629      	mov	r1, r5
 801c68e:	4620      	mov	r0, r4
 801c690:	f001 ff7c 	bl	801e58c <_Bfree>
 801c694:	e5dc      	b.n	801c250 <_strtod_l+0x88>
 801c696:	4b36      	ldr	r3, [pc, #216]	; (801c770 <_strtod_l+0x5a8>)
 801c698:	9304      	str	r3, [sp, #16]
 801c69a:	2300      	movs	r3, #0
 801c69c:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c6a0:	4650      	mov	r0, sl
 801c6a2:	4659      	mov	r1, fp
 801c6a4:	4699      	mov	r9, r3
 801c6a6:	f1b8 0f01 	cmp.w	r8, #1
 801c6aa:	dc21      	bgt.n	801c6f0 <_strtod_l+0x528>
 801c6ac:	b10b      	cbz	r3, 801c6b2 <_strtod_l+0x4ea>
 801c6ae:	4682      	mov	sl, r0
 801c6b0:	468b      	mov	fp, r1
 801c6b2:	4b2f      	ldr	r3, [pc, #188]	; (801c770 <_strtod_l+0x5a8>)
 801c6b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c6b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801c6bc:	4652      	mov	r2, sl
 801c6be:	465b      	mov	r3, fp
 801c6c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 801c6c4:	f7e3 ff98 	bl	80005f8 <__aeabi_dmul>
 801c6c8:	4b2a      	ldr	r3, [pc, #168]	; (801c774 <_strtod_l+0x5ac>)
 801c6ca:	460a      	mov	r2, r1
 801c6cc:	400b      	ands	r3, r1
 801c6ce:	492a      	ldr	r1, [pc, #168]	; (801c778 <_strtod_l+0x5b0>)
 801c6d0:	428b      	cmp	r3, r1
 801c6d2:	4682      	mov	sl, r0
 801c6d4:	d8bc      	bhi.n	801c650 <_strtod_l+0x488>
 801c6d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c6da:	428b      	cmp	r3, r1
 801c6dc:	bf86      	itte	hi
 801c6de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801c77c <_strtod_l+0x5b4>
 801c6e2:	f04f 3aff 	movhi.w	sl, #4294967295
 801c6e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c6ea:	2300      	movs	r3, #0
 801c6ec:	9304      	str	r3, [sp, #16]
 801c6ee:	e084      	b.n	801c7fa <_strtod_l+0x632>
 801c6f0:	f018 0f01 	tst.w	r8, #1
 801c6f4:	d005      	beq.n	801c702 <_strtod_l+0x53a>
 801c6f6:	9b04      	ldr	r3, [sp, #16]
 801c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6fc:	f7e3 ff7c 	bl	80005f8 <__aeabi_dmul>
 801c700:	2301      	movs	r3, #1
 801c702:	9a04      	ldr	r2, [sp, #16]
 801c704:	3208      	adds	r2, #8
 801c706:	f109 0901 	add.w	r9, r9, #1
 801c70a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c70e:	9204      	str	r2, [sp, #16]
 801c710:	e7c9      	b.n	801c6a6 <_strtod_l+0x4de>
 801c712:	d0ea      	beq.n	801c6ea <_strtod_l+0x522>
 801c714:	f1c8 0800 	rsb	r8, r8, #0
 801c718:	f018 020f 	ands.w	r2, r8, #15
 801c71c:	d00a      	beq.n	801c734 <_strtod_l+0x56c>
 801c71e:	4b13      	ldr	r3, [pc, #76]	; (801c76c <_strtod_l+0x5a4>)
 801c720:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c724:	4650      	mov	r0, sl
 801c726:	4659      	mov	r1, fp
 801c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c72c:	f7e4 f88e 	bl	800084c <__aeabi_ddiv>
 801c730:	4682      	mov	sl, r0
 801c732:	468b      	mov	fp, r1
 801c734:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c738:	d0d7      	beq.n	801c6ea <_strtod_l+0x522>
 801c73a:	f1b8 0f1f 	cmp.w	r8, #31
 801c73e:	dd1f      	ble.n	801c780 <_strtod_l+0x5b8>
 801c740:	2500      	movs	r5, #0
 801c742:	462e      	mov	r6, r5
 801c744:	9507      	str	r5, [sp, #28]
 801c746:	9505      	str	r5, [sp, #20]
 801c748:	2322      	movs	r3, #34	; 0x22
 801c74a:	f04f 0a00 	mov.w	sl, #0
 801c74e:	f04f 0b00 	mov.w	fp, #0
 801c752:	6023      	str	r3, [r4, #0]
 801c754:	e786      	b.n	801c664 <_strtod_l+0x49c>
 801c756:	bf00      	nop
 801c758:	08021eb5 	.word	0x08021eb5
 801c75c:	08021ef8 	.word	0x08021ef8
 801c760:	08021ead 	.word	0x08021ead
 801c764:	0802203c 	.word	0x0802203c
 801c768:	080222e8 	.word	0x080222e8
 801c76c:	080221c8 	.word	0x080221c8
 801c770:	080221a0 	.word	0x080221a0
 801c774:	7ff00000 	.word	0x7ff00000
 801c778:	7ca00000 	.word	0x7ca00000
 801c77c:	7fefffff 	.word	0x7fefffff
 801c780:	f018 0310 	ands.w	r3, r8, #16
 801c784:	bf18      	it	ne
 801c786:	236a      	movne	r3, #106	; 0x6a
 801c788:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801cb38 <_strtod_l+0x970>
 801c78c:	9304      	str	r3, [sp, #16]
 801c78e:	4650      	mov	r0, sl
 801c790:	4659      	mov	r1, fp
 801c792:	2300      	movs	r3, #0
 801c794:	f018 0f01 	tst.w	r8, #1
 801c798:	d004      	beq.n	801c7a4 <_strtod_l+0x5dc>
 801c79a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c79e:	f7e3 ff2b 	bl	80005f8 <__aeabi_dmul>
 801c7a2:	2301      	movs	r3, #1
 801c7a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801c7a8:	f109 0908 	add.w	r9, r9, #8
 801c7ac:	d1f2      	bne.n	801c794 <_strtod_l+0x5cc>
 801c7ae:	b10b      	cbz	r3, 801c7b4 <_strtod_l+0x5ec>
 801c7b0:	4682      	mov	sl, r0
 801c7b2:	468b      	mov	fp, r1
 801c7b4:	9b04      	ldr	r3, [sp, #16]
 801c7b6:	b1c3      	cbz	r3, 801c7ea <_strtod_l+0x622>
 801c7b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c7bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	4659      	mov	r1, fp
 801c7c4:	dd11      	ble.n	801c7ea <_strtod_l+0x622>
 801c7c6:	2b1f      	cmp	r3, #31
 801c7c8:	f340 8124 	ble.w	801ca14 <_strtod_l+0x84c>
 801c7cc:	2b34      	cmp	r3, #52	; 0x34
 801c7ce:	bfde      	ittt	le
 801c7d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801c7d4:	f04f 33ff 	movle.w	r3, #4294967295
 801c7d8:	fa03 f202 	lslle.w	r2, r3, r2
 801c7dc:	f04f 0a00 	mov.w	sl, #0
 801c7e0:	bfcc      	ite	gt
 801c7e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c7e6:	ea02 0b01 	andle.w	fp, r2, r1
 801c7ea:	2200      	movs	r2, #0
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	4650      	mov	r0, sl
 801c7f0:	4659      	mov	r1, fp
 801c7f2:	f7e4 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 801c7f6:	2800      	cmp	r0, #0
 801c7f8:	d1a2      	bne.n	801c740 <_strtod_l+0x578>
 801c7fa:	9b07      	ldr	r3, [sp, #28]
 801c7fc:	9300      	str	r3, [sp, #0]
 801c7fe:	9908      	ldr	r1, [sp, #32]
 801c800:	462b      	mov	r3, r5
 801c802:	463a      	mov	r2, r7
 801c804:	4620      	mov	r0, r4
 801c806:	f001 ff29 	bl	801e65c <__s2b>
 801c80a:	9007      	str	r0, [sp, #28]
 801c80c:	2800      	cmp	r0, #0
 801c80e:	f43f af1f 	beq.w	801c650 <_strtod_l+0x488>
 801c812:	9b05      	ldr	r3, [sp, #20]
 801c814:	1b9e      	subs	r6, r3, r6
 801c816:	9b06      	ldr	r3, [sp, #24]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	bfb4      	ite	lt
 801c81c:	4633      	movlt	r3, r6
 801c81e:	2300      	movge	r3, #0
 801c820:	930c      	str	r3, [sp, #48]	; 0x30
 801c822:	9b06      	ldr	r3, [sp, #24]
 801c824:	2500      	movs	r5, #0
 801c826:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c82a:	9312      	str	r3, [sp, #72]	; 0x48
 801c82c:	462e      	mov	r6, r5
 801c82e:	9b07      	ldr	r3, [sp, #28]
 801c830:	4620      	mov	r0, r4
 801c832:	6859      	ldr	r1, [r3, #4]
 801c834:	f001 fe6a 	bl	801e50c <_Balloc>
 801c838:	9005      	str	r0, [sp, #20]
 801c83a:	2800      	cmp	r0, #0
 801c83c:	f43f af0c 	beq.w	801c658 <_strtod_l+0x490>
 801c840:	9b07      	ldr	r3, [sp, #28]
 801c842:	691a      	ldr	r2, [r3, #16]
 801c844:	3202      	adds	r2, #2
 801c846:	f103 010c 	add.w	r1, r3, #12
 801c84a:	0092      	lsls	r2, r2, #2
 801c84c:	300c      	adds	r0, #12
 801c84e:	f7fe fc62 	bl	801b116 <memcpy>
 801c852:	ec4b ab10 	vmov	d0, sl, fp
 801c856:	aa1a      	add	r2, sp, #104	; 0x68
 801c858:	a919      	add	r1, sp, #100	; 0x64
 801c85a:	4620      	mov	r0, r4
 801c85c:	f002 fa44 	bl	801ece8 <__d2b>
 801c860:	ec4b ab18 	vmov	d8, sl, fp
 801c864:	9018      	str	r0, [sp, #96]	; 0x60
 801c866:	2800      	cmp	r0, #0
 801c868:	f43f aef6 	beq.w	801c658 <_strtod_l+0x490>
 801c86c:	2101      	movs	r1, #1
 801c86e:	4620      	mov	r0, r4
 801c870:	f001 ff8e 	bl	801e790 <__i2b>
 801c874:	4606      	mov	r6, r0
 801c876:	2800      	cmp	r0, #0
 801c878:	f43f aeee 	beq.w	801c658 <_strtod_l+0x490>
 801c87c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c87e:	9904      	ldr	r1, [sp, #16]
 801c880:	2b00      	cmp	r3, #0
 801c882:	bfab      	itete	ge
 801c884:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801c886:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801c888:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801c88a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801c88e:	bfac      	ite	ge
 801c890:	eb03 0902 	addge.w	r9, r3, r2
 801c894:	1ad7      	sublt	r7, r2, r3
 801c896:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c898:	eba3 0801 	sub.w	r8, r3, r1
 801c89c:	4490      	add	r8, r2
 801c89e:	4ba1      	ldr	r3, [pc, #644]	; (801cb24 <_strtod_l+0x95c>)
 801c8a0:	f108 38ff 	add.w	r8, r8, #4294967295
 801c8a4:	4598      	cmp	r8, r3
 801c8a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c8aa:	f280 80c7 	bge.w	801ca3c <_strtod_l+0x874>
 801c8ae:	eba3 0308 	sub.w	r3, r3, r8
 801c8b2:	2b1f      	cmp	r3, #31
 801c8b4:	eba2 0203 	sub.w	r2, r2, r3
 801c8b8:	f04f 0101 	mov.w	r1, #1
 801c8bc:	f300 80b1 	bgt.w	801ca22 <_strtod_l+0x85a>
 801c8c0:	fa01 f303 	lsl.w	r3, r1, r3
 801c8c4:	930d      	str	r3, [sp, #52]	; 0x34
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	9308      	str	r3, [sp, #32]
 801c8ca:	eb09 0802 	add.w	r8, r9, r2
 801c8ce:	9b04      	ldr	r3, [sp, #16]
 801c8d0:	45c1      	cmp	r9, r8
 801c8d2:	4417      	add	r7, r2
 801c8d4:	441f      	add	r7, r3
 801c8d6:	464b      	mov	r3, r9
 801c8d8:	bfa8      	it	ge
 801c8da:	4643      	movge	r3, r8
 801c8dc:	42bb      	cmp	r3, r7
 801c8de:	bfa8      	it	ge
 801c8e0:	463b      	movge	r3, r7
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	bfc2      	ittt	gt
 801c8e6:	eba8 0803 	subgt.w	r8, r8, r3
 801c8ea:	1aff      	subgt	r7, r7, r3
 801c8ec:	eba9 0903 	subgt.w	r9, r9, r3
 801c8f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	dd17      	ble.n	801c926 <_strtod_l+0x75e>
 801c8f6:	4631      	mov	r1, r6
 801c8f8:	461a      	mov	r2, r3
 801c8fa:	4620      	mov	r0, r4
 801c8fc:	f002 f808 	bl	801e910 <__pow5mult>
 801c900:	4606      	mov	r6, r0
 801c902:	2800      	cmp	r0, #0
 801c904:	f43f aea8 	beq.w	801c658 <_strtod_l+0x490>
 801c908:	4601      	mov	r1, r0
 801c90a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c90c:	4620      	mov	r0, r4
 801c90e:	f001 ff55 	bl	801e7bc <__multiply>
 801c912:	900b      	str	r0, [sp, #44]	; 0x2c
 801c914:	2800      	cmp	r0, #0
 801c916:	f43f ae9f 	beq.w	801c658 <_strtod_l+0x490>
 801c91a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c91c:	4620      	mov	r0, r4
 801c91e:	f001 fe35 	bl	801e58c <_Bfree>
 801c922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c924:	9318      	str	r3, [sp, #96]	; 0x60
 801c926:	f1b8 0f00 	cmp.w	r8, #0
 801c92a:	f300 808c 	bgt.w	801ca46 <_strtod_l+0x87e>
 801c92e:	9b06      	ldr	r3, [sp, #24]
 801c930:	2b00      	cmp	r3, #0
 801c932:	dd08      	ble.n	801c946 <_strtod_l+0x77e>
 801c934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c936:	9905      	ldr	r1, [sp, #20]
 801c938:	4620      	mov	r0, r4
 801c93a:	f001 ffe9 	bl	801e910 <__pow5mult>
 801c93e:	9005      	str	r0, [sp, #20]
 801c940:	2800      	cmp	r0, #0
 801c942:	f43f ae89 	beq.w	801c658 <_strtod_l+0x490>
 801c946:	2f00      	cmp	r7, #0
 801c948:	dd08      	ble.n	801c95c <_strtod_l+0x794>
 801c94a:	9905      	ldr	r1, [sp, #20]
 801c94c:	463a      	mov	r2, r7
 801c94e:	4620      	mov	r0, r4
 801c950:	f002 f838 	bl	801e9c4 <__lshift>
 801c954:	9005      	str	r0, [sp, #20]
 801c956:	2800      	cmp	r0, #0
 801c958:	f43f ae7e 	beq.w	801c658 <_strtod_l+0x490>
 801c95c:	f1b9 0f00 	cmp.w	r9, #0
 801c960:	dd08      	ble.n	801c974 <_strtod_l+0x7ac>
 801c962:	4631      	mov	r1, r6
 801c964:	464a      	mov	r2, r9
 801c966:	4620      	mov	r0, r4
 801c968:	f002 f82c 	bl	801e9c4 <__lshift>
 801c96c:	4606      	mov	r6, r0
 801c96e:	2800      	cmp	r0, #0
 801c970:	f43f ae72 	beq.w	801c658 <_strtod_l+0x490>
 801c974:	9a05      	ldr	r2, [sp, #20]
 801c976:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c978:	4620      	mov	r0, r4
 801c97a:	f002 f8af 	bl	801eadc <__mdiff>
 801c97e:	4605      	mov	r5, r0
 801c980:	2800      	cmp	r0, #0
 801c982:	f43f ae69 	beq.w	801c658 <_strtod_l+0x490>
 801c986:	68c3      	ldr	r3, [r0, #12]
 801c988:	930b      	str	r3, [sp, #44]	; 0x2c
 801c98a:	2300      	movs	r3, #0
 801c98c:	60c3      	str	r3, [r0, #12]
 801c98e:	4631      	mov	r1, r6
 801c990:	f002 f888 	bl	801eaa4 <__mcmp>
 801c994:	2800      	cmp	r0, #0
 801c996:	da60      	bge.n	801ca5a <_strtod_l+0x892>
 801c998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c99a:	ea53 030a 	orrs.w	r3, r3, sl
 801c99e:	f040 8082 	bne.w	801caa6 <_strtod_l+0x8de>
 801c9a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d17d      	bne.n	801caa6 <_strtod_l+0x8de>
 801c9aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c9ae:	0d1b      	lsrs	r3, r3, #20
 801c9b0:	051b      	lsls	r3, r3, #20
 801c9b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c9b6:	d976      	bls.n	801caa6 <_strtod_l+0x8de>
 801c9b8:	696b      	ldr	r3, [r5, #20]
 801c9ba:	b913      	cbnz	r3, 801c9c2 <_strtod_l+0x7fa>
 801c9bc:	692b      	ldr	r3, [r5, #16]
 801c9be:	2b01      	cmp	r3, #1
 801c9c0:	dd71      	ble.n	801caa6 <_strtod_l+0x8de>
 801c9c2:	4629      	mov	r1, r5
 801c9c4:	2201      	movs	r2, #1
 801c9c6:	4620      	mov	r0, r4
 801c9c8:	f001 fffc 	bl	801e9c4 <__lshift>
 801c9cc:	4631      	mov	r1, r6
 801c9ce:	4605      	mov	r5, r0
 801c9d0:	f002 f868 	bl	801eaa4 <__mcmp>
 801c9d4:	2800      	cmp	r0, #0
 801c9d6:	dd66      	ble.n	801caa6 <_strtod_l+0x8de>
 801c9d8:	9904      	ldr	r1, [sp, #16]
 801c9da:	4a53      	ldr	r2, [pc, #332]	; (801cb28 <_strtod_l+0x960>)
 801c9dc:	465b      	mov	r3, fp
 801c9de:	2900      	cmp	r1, #0
 801c9e0:	f000 8081 	beq.w	801cae6 <_strtod_l+0x91e>
 801c9e4:	ea02 010b 	and.w	r1, r2, fp
 801c9e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c9ec:	dc7b      	bgt.n	801cae6 <_strtod_l+0x91e>
 801c9ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c9f2:	f77f aea9 	ble.w	801c748 <_strtod_l+0x580>
 801c9f6:	4b4d      	ldr	r3, [pc, #308]	; (801cb2c <_strtod_l+0x964>)
 801c9f8:	4650      	mov	r0, sl
 801c9fa:	4659      	mov	r1, fp
 801c9fc:	2200      	movs	r2, #0
 801c9fe:	f7e3 fdfb 	bl	80005f8 <__aeabi_dmul>
 801ca02:	460b      	mov	r3, r1
 801ca04:	4303      	orrs	r3, r0
 801ca06:	bf08      	it	eq
 801ca08:	2322      	moveq	r3, #34	; 0x22
 801ca0a:	4682      	mov	sl, r0
 801ca0c:	468b      	mov	fp, r1
 801ca0e:	bf08      	it	eq
 801ca10:	6023      	streq	r3, [r4, #0]
 801ca12:	e62b      	b.n	801c66c <_strtod_l+0x4a4>
 801ca14:	f04f 32ff 	mov.w	r2, #4294967295
 801ca18:	fa02 f303 	lsl.w	r3, r2, r3
 801ca1c:	ea03 0a0a 	and.w	sl, r3, sl
 801ca20:	e6e3      	b.n	801c7ea <_strtod_l+0x622>
 801ca22:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ca26:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ca2a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801ca2e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801ca32:	fa01 f308 	lsl.w	r3, r1, r8
 801ca36:	9308      	str	r3, [sp, #32]
 801ca38:	910d      	str	r1, [sp, #52]	; 0x34
 801ca3a:	e746      	b.n	801c8ca <_strtod_l+0x702>
 801ca3c:	2300      	movs	r3, #0
 801ca3e:	9308      	str	r3, [sp, #32]
 801ca40:	2301      	movs	r3, #1
 801ca42:	930d      	str	r3, [sp, #52]	; 0x34
 801ca44:	e741      	b.n	801c8ca <_strtod_l+0x702>
 801ca46:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ca48:	4642      	mov	r2, r8
 801ca4a:	4620      	mov	r0, r4
 801ca4c:	f001 ffba 	bl	801e9c4 <__lshift>
 801ca50:	9018      	str	r0, [sp, #96]	; 0x60
 801ca52:	2800      	cmp	r0, #0
 801ca54:	f47f af6b 	bne.w	801c92e <_strtod_l+0x766>
 801ca58:	e5fe      	b.n	801c658 <_strtod_l+0x490>
 801ca5a:	465f      	mov	r7, fp
 801ca5c:	d16e      	bne.n	801cb3c <_strtod_l+0x974>
 801ca5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ca60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ca64:	b342      	cbz	r2, 801cab8 <_strtod_l+0x8f0>
 801ca66:	4a32      	ldr	r2, [pc, #200]	; (801cb30 <_strtod_l+0x968>)
 801ca68:	4293      	cmp	r3, r2
 801ca6a:	d128      	bne.n	801cabe <_strtod_l+0x8f6>
 801ca6c:	9b04      	ldr	r3, [sp, #16]
 801ca6e:	4651      	mov	r1, sl
 801ca70:	b1eb      	cbz	r3, 801caae <_strtod_l+0x8e6>
 801ca72:	4b2d      	ldr	r3, [pc, #180]	; (801cb28 <_strtod_l+0x960>)
 801ca74:	403b      	ands	r3, r7
 801ca76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ca7a:	f04f 32ff 	mov.w	r2, #4294967295
 801ca7e:	d819      	bhi.n	801cab4 <_strtod_l+0x8ec>
 801ca80:	0d1b      	lsrs	r3, r3, #20
 801ca82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ca86:	fa02 f303 	lsl.w	r3, r2, r3
 801ca8a:	4299      	cmp	r1, r3
 801ca8c:	d117      	bne.n	801cabe <_strtod_l+0x8f6>
 801ca8e:	4b29      	ldr	r3, [pc, #164]	; (801cb34 <_strtod_l+0x96c>)
 801ca90:	429f      	cmp	r7, r3
 801ca92:	d102      	bne.n	801ca9a <_strtod_l+0x8d2>
 801ca94:	3101      	adds	r1, #1
 801ca96:	f43f addf 	beq.w	801c658 <_strtod_l+0x490>
 801ca9a:	4b23      	ldr	r3, [pc, #140]	; (801cb28 <_strtod_l+0x960>)
 801ca9c:	403b      	ands	r3, r7
 801ca9e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801caa2:	f04f 0a00 	mov.w	sl, #0
 801caa6:	9b04      	ldr	r3, [sp, #16]
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d1a4      	bne.n	801c9f6 <_strtod_l+0x82e>
 801caac:	e5de      	b.n	801c66c <_strtod_l+0x4a4>
 801caae:	f04f 33ff 	mov.w	r3, #4294967295
 801cab2:	e7ea      	b.n	801ca8a <_strtod_l+0x8c2>
 801cab4:	4613      	mov	r3, r2
 801cab6:	e7e8      	b.n	801ca8a <_strtod_l+0x8c2>
 801cab8:	ea53 030a 	orrs.w	r3, r3, sl
 801cabc:	d08c      	beq.n	801c9d8 <_strtod_l+0x810>
 801cabe:	9b08      	ldr	r3, [sp, #32]
 801cac0:	b1db      	cbz	r3, 801cafa <_strtod_l+0x932>
 801cac2:	423b      	tst	r3, r7
 801cac4:	d0ef      	beq.n	801caa6 <_strtod_l+0x8de>
 801cac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cac8:	9a04      	ldr	r2, [sp, #16]
 801caca:	4650      	mov	r0, sl
 801cacc:	4659      	mov	r1, fp
 801cace:	b1c3      	cbz	r3, 801cb02 <_strtod_l+0x93a>
 801cad0:	f7ff fb5d 	bl	801c18e <sulp>
 801cad4:	4602      	mov	r2, r0
 801cad6:	460b      	mov	r3, r1
 801cad8:	ec51 0b18 	vmov	r0, r1, d8
 801cadc:	f7e3 fbd6 	bl	800028c <__adddf3>
 801cae0:	4682      	mov	sl, r0
 801cae2:	468b      	mov	fp, r1
 801cae4:	e7df      	b.n	801caa6 <_strtod_l+0x8de>
 801cae6:	4013      	ands	r3, r2
 801cae8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801caec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801caf0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801caf4:	f04f 3aff 	mov.w	sl, #4294967295
 801caf8:	e7d5      	b.n	801caa6 <_strtod_l+0x8de>
 801cafa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cafc:	ea13 0f0a 	tst.w	r3, sl
 801cb00:	e7e0      	b.n	801cac4 <_strtod_l+0x8fc>
 801cb02:	f7ff fb44 	bl	801c18e <sulp>
 801cb06:	4602      	mov	r2, r0
 801cb08:	460b      	mov	r3, r1
 801cb0a:	ec51 0b18 	vmov	r0, r1, d8
 801cb0e:	f7e3 fbbb 	bl	8000288 <__aeabi_dsub>
 801cb12:	2200      	movs	r2, #0
 801cb14:	2300      	movs	r3, #0
 801cb16:	4682      	mov	sl, r0
 801cb18:	468b      	mov	fp, r1
 801cb1a:	f7e3 ffd5 	bl	8000ac8 <__aeabi_dcmpeq>
 801cb1e:	2800      	cmp	r0, #0
 801cb20:	d0c1      	beq.n	801caa6 <_strtod_l+0x8de>
 801cb22:	e611      	b.n	801c748 <_strtod_l+0x580>
 801cb24:	fffffc02 	.word	0xfffffc02
 801cb28:	7ff00000 	.word	0x7ff00000
 801cb2c:	39500000 	.word	0x39500000
 801cb30:	000fffff 	.word	0x000fffff
 801cb34:	7fefffff 	.word	0x7fefffff
 801cb38:	08021f10 	.word	0x08021f10
 801cb3c:	4631      	mov	r1, r6
 801cb3e:	4628      	mov	r0, r5
 801cb40:	f002 f92e 	bl	801eda0 <__ratio>
 801cb44:	ec59 8b10 	vmov	r8, r9, d0
 801cb48:	ee10 0a10 	vmov	r0, s0
 801cb4c:	2200      	movs	r2, #0
 801cb4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cb52:	4649      	mov	r1, r9
 801cb54:	f7e3 ffcc 	bl	8000af0 <__aeabi_dcmple>
 801cb58:	2800      	cmp	r0, #0
 801cb5a:	d07a      	beq.n	801cc52 <_strtod_l+0xa8a>
 801cb5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d04a      	beq.n	801cbf8 <_strtod_l+0xa30>
 801cb62:	4b95      	ldr	r3, [pc, #596]	; (801cdb8 <_strtod_l+0xbf0>)
 801cb64:	2200      	movs	r2, #0
 801cb66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cb6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801cdb8 <_strtod_l+0xbf0>
 801cb6e:	f04f 0800 	mov.w	r8, #0
 801cb72:	4b92      	ldr	r3, [pc, #584]	; (801cdbc <_strtod_l+0xbf4>)
 801cb74:	403b      	ands	r3, r7
 801cb76:	930d      	str	r3, [sp, #52]	; 0x34
 801cb78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cb7a:	4b91      	ldr	r3, [pc, #580]	; (801cdc0 <_strtod_l+0xbf8>)
 801cb7c:	429a      	cmp	r2, r3
 801cb7e:	f040 80b0 	bne.w	801cce2 <_strtod_l+0xb1a>
 801cb82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cb86:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801cb8a:	ec4b ab10 	vmov	d0, sl, fp
 801cb8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cb92:	f002 f82d 	bl	801ebf0 <__ulp>
 801cb96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cb9a:	ec53 2b10 	vmov	r2, r3, d0
 801cb9e:	f7e3 fd2b 	bl	80005f8 <__aeabi_dmul>
 801cba2:	4652      	mov	r2, sl
 801cba4:	465b      	mov	r3, fp
 801cba6:	f7e3 fb71 	bl	800028c <__adddf3>
 801cbaa:	460b      	mov	r3, r1
 801cbac:	4983      	ldr	r1, [pc, #524]	; (801cdbc <_strtod_l+0xbf4>)
 801cbae:	4a85      	ldr	r2, [pc, #532]	; (801cdc4 <_strtod_l+0xbfc>)
 801cbb0:	4019      	ands	r1, r3
 801cbb2:	4291      	cmp	r1, r2
 801cbb4:	4682      	mov	sl, r0
 801cbb6:	d960      	bls.n	801cc7a <_strtod_l+0xab2>
 801cbb8:	ee18 3a90 	vmov	r3, s17
 801cbbc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cbc0:	4293      	cmp	r3, r2
 801cbc2:	d104      	bne.n	801cbce <_strtod_l+0xa06>
 801cbc4:	ee18 3a10 	vmov	r3, s16
 801cbc8:	3301      	adds	r3, #1
 801cbca:	f43f ad45 	beq.w	801c658 <_strtod_l+0x490>
 801cbce:	f8df b200 	ldr.w	fp, [pc, #512]	; 801cdd0 <_strtod_l+0xc08>
 801cbd2:	f04f 3aff 	mov.w	sl, #4294967295
 801cbd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cbd8:	4620      	mov	r0, r4
 801cbda:	f001 fcd7 	bl	801e58c <_Bfree>
 801cbde:	9905      	ldr	r1, [sp, #20]
 801cbe0:	4620      	mov	r0, r4
 801cbe2:	f001 fcd3 	bl	801e58c <_Bfree>
 801cbe6:	4631      	mov	r1, r6
 801cbe8:	4620      	mov	r0, r4
 801cbea:	f001 fccf 	bl	801e58c <_Bfree>
 801cbee:	4629      	mov	r1, r5
 801cbf0:	4620      	mov	r0, r4
 801cbf2:	f001 fccb 	bl	801e58c <_Bfree>
 801cbf6:	e61a      	b.n	801c82e <_strtod_l+0x666>
 801cbf8:	f1ba 0f00 	cmp.w	sl, #0
 801cbfc:	d11b      	bne.n	801cc36 <_strtod_l+0xa6e>
 801cbfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cc02:	b9f3      	cbnz	r3, 801cc42 <_strtod_l+0xa7a>
 801cc04:	4b6c      	ldr	r3, [pc, #432]	; (801cdb8 <_strtod_l+0xbf0>)
 801cc06:	2200      	movs	r2, #0
 801cc08:	4640      	mov	r0, r8
 801cc0a:	4649      	mov	r1, r9
 801cc0c:	f7e3 ff66 	bl	8000adc <__aeabi_dcmplt>
 801cc10:	b9d0      	cbnz	r0, 801cc48 <_strtod_l+0xa80>
 801cc12:	4640      	mov	r0, r8
 801cc14:	4649      	mov	r1, r9
 801cc16:	4b6c      	ldr	r3, [pc, #432]	; (801cdc8 <_strtod_l+0xc00>)
 801cc18:	2200      	movs	r2, #0
 801cc1a:	f7e3 fced 	bl	80005f8 <__aeabi_dmul>
 801cc1e:	4680      	mov	r8, r0
 801cc20:	4689      	mov	r9, r1
 801cc22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801cc26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801cc2a:	9315      	str	r3, [sp, #84]	; 0x54
 801cc2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801cc30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cc34:	e79d      	b.n	801cb72 <_strtod_l+0x9aa>
 801cc36:	f1ba 0f01 	cmp.w	sl, #1
 801cc3a:	d102      	bne.n	801cc42 <_strtod_l+0xa7a>
 801cc3c:	2f00      	cmp	r7, #0
 801cc3e:	f43f ad83 	beq.w	801c748 <_strtod_l+0x580>
 801cc42:	4b62      	ldr	r3, [pc, #392]	; (801cdcc <_strtod_l+0xc04>)
 801cc44:	2200      	movs	r2, #0
 801cc46:	e78e      	b.n	801cb66 <_strtod_l+0x99e>
 801cc48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801cdc8 <_strtod_l+0xc00>
 801cc4c:	f04f 0800 	mov.w	r8, #0
 801cc50:	e7e7      	b.n	801cc22 <_strtod_l+0xa5a>
 801cc52:	4b5d      	ldr	r3, [pc, #372]	; (801cdc8 <_strtod_l+0xc00>)
 801cc54:	4640      	mov	r0, r8
 801cc56:	4649      	mov	r1, r9
 801cc58:	2200      	movs	r2, #0
 801cc5a:	f7e3 fccd 	bl	80005f8 <__aeabi_dmul>
 801cc5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc60:	4680      	mov	r8, r0
 801cc62:	4689      	mov	r9, r1
 801cc64:	b933      	cbnz	r3, 801cc74 <_strtod_l+0xaac>
 801cc66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cc6a:	900e      	str	r0, [sp, #56]	; 0x38
 801cc6c:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801cc72:	e7dd      	b.n	801cc30 <_strtod_l+0xa68>
 801cc74:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801cc78:	e7f9      	b.n	801cc6e <_strtod_l+0xaa6>
 801cc7a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801cc7e:	9b04      	ldr	r3, [sp, #16]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d1a8      	bne.n	801cbd6 <_strtod_l+0xa0e>
 801cc84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801cc88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc8a:	0d1b      	lsrs	r3, r3, #20
 801cc8c:	051b      	lsls	r3, r3, #20
 801cc8e:	429a      	cmp	r2, r3
 801cc90:	d1a1      	bne.n	801cbd6 <_strtod_l+0xa0e>
 801cc92:	4640      	mov	r0, r8
 801cc94:	4649      	mov	r1, r9
 801cc96:	f7e4 f80f 	bl	8000cb8 <__aeabi_d2lz>
 801cc9a:	f7e3 fc7f 	bl	800059c <__aeabi_l2d>
 801cc9e:	4602      	mov	r2, r0
 801cca0:	460b      	mov	r3, r1
 801cca2:	4640      	mov	r0, r8
 801cca4:	4649      	mov	r1, r9
 801cca6:	f7e3 faef 	bl	8000288 <__aeabi_dsub>
 801ccaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ccac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ccb0:	ea43 030a 	orr.w	r3, r3, sl
 801ccb4:	4313      	orrs	r3, r2
 801ccb6:	4680      	mov	r8, r0
 801ccb8:	4689      	mov	r9, r1
 801ccba:	d055      	beq.n	801cd68 <_strtod_l+0xba0>
 801ccbc:	a336      	add	r3, pc, #216	; (adr r3, 801cd98 <_strtod_l+0xbd0>)
 801ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccc2:	f7e3 ff0b 	bl	8000adc <__aeabi_dcmplt>
 801ccc6:	2800      	cmp	r0, #0
 801ccc8:	f47f acd0 	bne.w	801c66c <_strtod_l+0x4a4>
 801cccc:	a334      	add	r3, pc, #208	; (adr r3, 801cda0 <_strtod_l+0xbd8>)
 801ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccd2:	4640      	mov	r0, r8
 801ccd4:	4649      	mov	r1, r9
 801ccd6:	f7e3 ff1f 	bl	8000b18 <__aeabi_dcmpgt>
 801ccda:	2800      	cmp	r0, #0
 801ccdc:	f43f af7b 	beq.w	801cbd6 <_strtod_l+0xa0e>
 801cce0:	e4c4      	b.n	801c66c <_strtod_l+0x4a4>
 801cce2:	9b04      	ldr	r3, [sp, #16]
 801cce4:	b333      	cbz	r3, 801cd34 <_strtod_l+0xb6c>
 801cce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cce8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ccec:	d822      	bhi.n	801cd34 <_strtod_l+0xb6c>
 801ccee:	a32e      	add	r3, pc, #184	; (adr r3, 801cda8 <_strtod_l+0xbe0>)
 801ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccf4:	4640      	mov	r0, r8
 801ccf6:	4649      	mov	r1, r9
 801ccf8:	f7e3 fefa 	bl	8000af0 <__aeabi_dcmple>
 801ccfc:	b1a0      	cbz	r0, 801cd28 <_strtod_l+0xb60>
 801ccfe:	4649      	mov	r1, r9
 801cd00:	4640      	mov	r0, r8
 801cd02:	f7e3 ff51 	bl	8000ba8 <__aeabi_d2uiz>
 801cd06:	2801      	cmp	r0, #1
 801cd08:	bf38      	it	cc
 801cd0a:	2001      	movcc	r0, #1
 801cd0c:	f7e3 fbfa 	bl	8000504 <__aeabi_ui2d>
 801cd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd12:	4680      	mov	r8, r0
 801cd14:	4689      	mov	r9, r1
 801cd16:	bb23      	cbnz	r3, 801cd62 <_strtod_l+0xb9a>
 801cd18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cd1c:	9010      	str	r0, [sp, #64]	; 0x40
 801cd1e:	9311      	str	r3, [sp, #68]	; 0x44
 801cd20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cd24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd2c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cd30:	1a9b      	subs	r3, r3, r2
 801cd32:	9309      	str	r3, [sp, #36]	; 0x24
 801cd34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cd38:	eeb0 0a48 	vmov.f32	s0, s16
 801cd3c:	eef0 0a68 	vmov.f32	s1, s17
 801cd40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cd44:	f001 ff54 	bl	801ebf0 <__ulp>
 801cd48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cd4c:	ec53 2b10 	vmov	r2, r3, d0
 801cd50:	f7e3 fc52 	bl	80005f8 <__aeabi_dmul>
 801cd54:	ec53 2b18 	vmov	r2, r3, d8
 801cd58:	f7e3 fa98 	bl	800028c <__adddf3>
 801cd5c:	4682      	mov	sl, r0
 801cd5e:	468b      	mov	fp, r1
 801cd60:	e78d      	b.n	801cc7e <_strtod_l+0xab6>
 801cd62:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801cd66:	e7db      	b.n	801cd20 <_strtod_l+0xb58>
 801cd68:	a311      	add	r3, pc, #68	; (adr r3, 801cdb0 <_strtod_l+0xbe8>)
 801cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd6e:	f7e3 feb5 	bl	8000adc <__aeabi_dcmplt>
 801cd72:	e7b2      	b.n	801ccda <_strtod_l+0xb12>
 801cd74:	2300      	movs	r3, #0
 801cd76:	930a      	str	r3, [sp, #40]	; 0x28
 801cd78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cd7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cd7c:	6013      	str	r3, [r2, #0]
 801cd7e:	f7ff ba6b 	b.w	801c258 <_strtod_l+0x90>
 801cd82:	2a65      	cmp	r2, #101	; 0x65
 801cd84:	f43f ab5f 	beq.w	801c446 <_strtod_l+0x27e>
 801cd88:	2a45      	cmp	r2, #69	; 0x45
 801cd8a:	f43f ab5c 	beq.w	801c446 <_strtod_l+0x27e>
 801cd8e:	2301      	movs	r3, #1
 801cd90:	f7ff bb94 	b.w	801c4bc <_strtod_l+0x2f4>
 801cd94:	f3af 8000 	nop.w
 801cd98:	94a03595 	.word	0x94a03595
 801cd9c:	3fdfffff 	.word	0x3fdfffff
 801cda0:	35afe535 	.word	0x35afe535
 801cda4:	3fe00000 	.word	0x3fe00000
 801cda8:	ffc00000 	.word	0xffc00000
 801cdac:	41dfffff 	.word	0x41dfffff
 801cdb0:	94a03595 	.word	0x94a03595
 801cdb4:	3fcfffff 	.word	0x3fcfffff
 801cdb8:	3ff00000 	.word	0x3ff00000
 801cdbc:	7ff00000 	.word	0x7ff00000
 801cdc0:	7fe00000 	.word	0x7fe00000
 801cdc4:	7c9fffff 	.word	0x7c9fffff
 801cdc8:	3fe00000 	.word	0x3fe00000
 801cdcc:	bff00000 	.word	0xbff00000
 801cdd0:	7fefffff 	.word	0x7fefffff

0801cdd4 <_strtod_r>:
 801cdd4:	4b01      	ldr	r3, [pc, #4]	; (801cddc <_strtod_r+0x8>)
 801cdd6:	f7ff b9f7 	b.w	801c1c8 <_strtod_l>
 801cdda:	bf00      	nop
 801cddc:	20000174 	.word	0x20000174

0801cde0 <_strtol_l.constprop.0>:
 801cde0:	2b01      	cmp	r3, #1
 801cde2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cde6:	d001      	beq.n	801cdec <_strtol_l.constprop.0+0xc>
 801cde8:	2b24      	cmp	r3, #36	; 0x24
 801cdea:	d906      	bls.n	801cdfa <_strtol_l.constprop.0+0x1a>
 801cdec:	f000 ff1a 	bl	801dc24 <__errno>
 801cdf0:	2316      	movs	r3, #22
 801cdf2:	6003      	str	r3, [r0, #0]
 801cdf4:	2000      	movs	r0, #0
 801cdf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdfa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801cee0 <_strtol_l.constprop.0+0x100>
 801cdfe:	460d      	mov	r5, r1
 801ce00:	462e      	mov	r6, r5
 801ce02:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce06:	f814 700c 	ldrb.w	r7, [r4, ip]
 801ce0a:	f017 0708 	ands.w	r7, r7, #8
 801ce0e:	d1f7      	bne.n	801ce00 <_strtol_l.constprop.0+0x20>
 801ce10:	2c2d      	cmp	r4, #45	; 0x2d
 801ce12:	d132      	bne.n	801ce7a <_strtol_l.constprop.0+0x9a>
 801ce14:	782c      	ldrb	r4, [r5, #0]
 801ce16:	2701      	movs	r7, #1
 801ce18:	1cb5      	adds	r5, r6, #2
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d05b      	beq.n	801ced6 <_strtol_l.constprop.0+0xf6>
 801ce1e:	2b10      	cmp	r3, #16
 801ce20:	d109      	bne.n	801ce36 <_strtol_l.constprop.0+0x56>
 801ce22:	2c30      	cmp	r4, #48	; 0x30
 801ce24:	d107      	bne.n	801ce36 <_strtol_l.constprop.0+0x56>
 801ce26:	782c      	ldrb	r4, [r5, #0]
 801ce28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ce2c:	2c58      	cmp	r4, #88	; 0x58
 801ce2e:	d14d      	bne.n	801cecc <_strtol_l.constprop.0+0xec>
 801ce30:	786c      	ldrb	r4, [r5, #1]
 801ce32:	2310      	movs	r3, #16
 801ce34:	3502      	adds	r5, #2
 801ce36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801ce3a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ce3e:	f04f 0c00 	mov.w	ip, #0
 801ce42:	fbb8 f9f3 	udiv	r9, r8, r3
 801ce46:	4666      	mov	r6, ip
 801ce48:	fb03 8a19 	mls	sl, r3, r9, r8
 801ce4c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801ce50:	f1be 0f09 	cmp.w	lr, #9
 801ce54:	d816      	bhi.n	801ce84 <_strtol_l.constprop.0+0xa4>
 801ce56:	4674      	mov	r4, lr
 801ce58:	42a3      	cmp	r3, r4
 801ce5a:	dd24      	ble.n	801cea6 <_strtol_l.constprop.0+0xc6>
 801ce5c:	f1bc 0f00 	cmp.w	ip, #0
 801ce60:	db1e      	blt.n	801cea0 <_strtol_l.constprop.0+0xc0>
 801ce62:	45b1      	cmp	r9, r6
 801ce64:	d31c      	bcc.n	801cea0 <_strtol_l.constprop.0+0xc0>
 801ce66:	d101      	bne.n	801ce6c <_strtol_l.constprop.0+0x8c>
 801ce68:	45a2      	cmp	sl, r4
 801ce6a:	db19      	blt.n	801cea0 <_strtol_l.constprop.0+0xc0>
 801ce6c:	fb06 4603 	mla	r6, r6, r3, r4
 801ce70:	f04f 0c01 	mov.w	ip, #1
 801ce74:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce78:	e7e8      	b.n	801ce4c <_strtol_l.constprop.0+0x6c>
 801ce7a:	2c2b      	cmp	r4, #43	; 0x2b
 801ce7c:	bf04      	itt	eq
 801ce7e:	782c      	ldrbeq	r4, [r5, #0]
 801ce80:	1cb5      	addeq	r5, r6, #2
 801ce82:	e7ca      	b.n	801ce1a <_strtol_l.constprop.0+0x3a>
 801ce84:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801ce88:	f1be 0f19 	cmp.w	lr, #25
 801ce8c:	d801      	bhi.n	801ce92 <_strtol_l.constprop.0+0xb2>
 801ce8e:	3c37      	subs	r4, #55	; 0x37
 801ce90:	e7e2      	b.n	801ce58 <_strtol_l.constprop.0+0x78>
 801ce92:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801ce96:	f1be 0f19 	cmp.w	lr, #25
 801ce9a:	d804      	bhi.n	801cea6 <_strtol_l.constprop.0+0xc6>
 801ce9c:	3c57      	subs	r4, #87	; 0x57
 801ce9e:	e7db      	b.n	801ce58 <_strtol_l.constprop.0+0x78>
 801cea0:	f04f 3cff 	mov.w	ip, #4294967295
 801cea4:	e7e6      	b.n	801ce74 <_strtol_l.constprop.0+0x94>
 801cea6:	f1bc 0f00 	cmp.w	ip, #0
 801ceaa:	da05      	bge.n	801ceb8 <_strtol_l.constprop.0+0xd8>
 801ceac:	2322      	movs	r3, #34	; 0x22
 801ceae:	6003      	str	r3, [r0, #0]
 801ceb0:	4646      	mov	r6, r8
 801ceb2:	b942      	cbnz	r2, 801cec6 <_strtol_l.constprop.0+0xe6>
 801ceb4:	4630      	mov	r0, r6
 801ceb6:	e79e      	b.n	801cdf6 <_strtol_l.constprop.0+0x16>
 801ceb8:	b107      	cbz	r7, 801cebc <_strtol_l.constprop.0+0xdc>
 801ceba:	4276      	negs	r6, r6
 801cebc:	2a00      	cmp	r2, #0
 801cebe:	d0f9      	beq.n	801ceb4 <_strtol_l.constprop.0+0xd4>
 801cec0:	f1bc 0f00 	cmp.w	ip, #0
 801cec4:	d000      	beq.n	801cec8 <_strtol_l.constprop.0+0xe8>
 801cec6:	1e69      	subs	r1, r5, #1
 801cec8:	6011      	str	r1, [r2, #0]
 801ceca:	e7f3      	b.n	801ceb4 <_strtol_l.constprop.0+0xd4>
 801cecc:	2430      	movs	r4, #48	; 0x30
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d1b1      	bne.n	801ce36 <_strtol_l.constprop.0+0x56>
 801ced2:	2308      	movs	r3, #8
 801ced4:	e7af      	b.n	801ce36 <_strtol_l.constprop.0+0x56>
 801ced6:	2c30      	cmp	r4, #48	; 0x30
 801ced8:	d0a5      	beq.n	801ce26 <_strtol_l.constprop.0+0x46>
 801ceda:	230a      	movs	r3, #10
 801cedc:	e7ab      	b.n	801ce36 <_strtol_l.constprop.0+0x56>
 801cede:	bf00      	nop
 801cee0:	08021f39 	.word	0x08021f39

0801cee4 <_strtol_r>:
 801cee4:	f7ff bf7c 	b.w	801cde0 <_strtol_l.constprop.0>

0801cee8 <_write_r>:
 801cee8:	b538      	push	{r3, r4, r5, lr}
 801ceea:	4d07      	ldr	r5, [pc, #28]	; (801cf08 <_write_r+0x20>)
 801ceec:	4604      	mov	r4, r0
 801ceee:	4608      	mov	r0, r1
 801cef0:	4611      	mov	r1, r2
 801cef2:	2200      	movs	r2, #0
 801cef4:	602a      	str	r2, [r5, #0]
 801cef6:	461a      	mov	r2, r3
 801cef8:	f004 fbd2 	bl	80216a0 <_write>
 801cefc:	1c43      	adds	r3, r0, #1
 801cefe:	d102      	bne.n	801cf06 <_write_r+0x1e>
 801cf00:	682b      	ldr	r3, [r5, #0]
 801cf02:	b103      	cbz	r3, 801cf06 <_write_r+0x1e>
 801cf04:	6023      	str	r3, [r4, #0]
 801cf06:	bd38      	pop	{r3, r4, r5, pc}
 801cf08:	2000e9a4 	.word	0x2000e9a4

0801cf0c <_close_r>:
 801cf0c:	b538      	push	{r3, r4, r5, lr}
 801cf0e:	4d06      	ldr	r5, [pc, #24]	; (801cf28 <_close_r+0x1c>)
 801cf10:	2300      	movs	r3, #0
 801cf12:	4604      	mov	r4, r0
 801cf14:	4608      	mov	r0, r1
 801cf16:	602b      	str	r3, [r5, #0]
 801cf18:	f004 fb7c 	bl	8021614 <_close>
 801cf1c:	1c43      	adds	r3, r0, #1
 801cf1e:	d102      	bne.n	801cf26 <_close_r+0x1a>
 801cf20:	682b      	ldr	r3, [r5, #0]
 801cf22:	b103      	cbz	r3, 801cf26 <_close_r+0x1a>
 801cf24:	6023      	str	r3, [r4, #0]
 801cf26:	bd38      	pop	{r3, r4, r5, pc}
 801cf28:	2000e9a4 	.word	0x2000e9a4

0801cf2c <quorem>:
 801cf2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf30:	6903      	ldr	r3, [r0, #16]
 801cf32:	690c      	ldr	r4, [r1, #16]
 801cf34:	42a3      	cmp	r3, r4
 801cf36:	4607      	mov	r7, r0
 801cf38:	f2c0 8081 	blt.w	801d03e <quorem+0x112>
 801cf3c:	3c01      	subs	r4, #1
 801cf3e:	f101 0814 	add.w	r8, r1, #20
 801cf42:	f100 0514 	add.w	r5, r0, #20
 801cf46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cf4a:	9301      	str	r3, [sp, #4]
 801cf4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cf50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cf54:	3301      	adds	r3, #1
 801cf56:	429a      	cmp	r2, r3
 801cf58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cf5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cf60:	fbb2 f6f3 	udiv	r6, r2, r3
 801cf64:	d331      	bcc.n	801cfca <quorem+0x9e>
 801cf66:	f04f 0e00 	mov.w	lr, #0
 801cf6a:	4640      	mov	r0, r8
 801cf6c:	46ac      	mov	ip, r5
 801cf6e:	46f2      	mov	sl, lr
 801cf70:	f850 2b04 	ldr.w	r2, [r0], #4
 801cf74:	b293      	uxth	r3, r2
 801cf76:	fb06 e303 	mla	r3, r6, r3, lr
 801cf7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801cf7e:	b29b      	uxth	r3, r3
 801cf80:	ebaa 0303 	sub.w	r3, sl, r3
 801cf84:	f8dc a000 	ldr.w	sl, [ip]
 801cf88:	0c12      	lsrs	r2, r2, #16
 801cf8a:	fa13 f38a 	uxtah	r3, r3, sl
 801cf8e:	fb06 e202 	mla	r2, r6, r2, lr
 801cf92:	9300      	str	r3, [sp, #0]
 801cf94:	9b00      	ldr	r3, [sp, #0]
 801cf96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cf9a:	b292      	uxth	r2, r2
 801cf9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801cfa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cfa4:	f8bd 3000 	ldrh.w	r3, [sp]
 801cfa8:	4581      	cmp	r9, r0
 801cfaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cfae:	f84c 3b04 	str.w	r3, [ip], #4
 801cfb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cfb6:	d2db      	bcs.n	801cf70 <quorem+0x44>
 801cfb8:	f855 300b 	ldr.w	r3, [r5, fp]
 801cfbc:	b92b      	cbnz	r3, 801cfca <quorem+0x9e>
 801cfbe:	9b01      	ldr	r3, [sp, #4]
 801cfc0:	3b04      	subs	r3, #4
 801cfc2:	429d      	cmp	r5, r3
 801cfc4:	461a      	mov	r2, r3
 801cfc6:	d32e      	bcc.n	801d026 <quorem+0xfa>
 801cfc8:	613c      	str	r4, [r7, #16]
 801cfca:	4638      	mov	r0, r7
 801cfcc:	f001 fd6a 	bl	801eaa4 <__mcmp>
 801cfd0:	2800      	cmp	r0, #0
 801cfd2:	db24      	blt.n	801d01e <quorem+0xf2>
 801cfd4:	3601      	adds	r6, #1
 801cfd6:	4628      	mov	r0, r5
 801cfd8:	f04f 0c00 	mov.w	ip, #0
 801cfdc:	f858 2b04 	ldr.w	r2, [r8], #4
 801cfe0:	f8d0 e000 	ldr.w	lr, [r0]
 801cfe4:	b293      	uxth	r3, r2
 801cfe6:	ebac 0303 	sub.w	r3, ip, r3
 801cfea:	0c12      	lsrs	r2, r2, #16
 801cfec:	fa13 f38e 	uxtah	r3, r3, lr
 801cff0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cff8:	b29b      	uxth	r3, r3
 801cffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cffe:	45c1      	cmp	r9, r8
 801d000:	f840 3b04 	str.w	r3, [r0], #4
 801d004:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d008:	d2e8      	bcs.n	801cfdc <quorem+0xb0>
 801d00a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d00e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d012:	b922      	cbnz	r2, 801d01e <quorem+0xf2>
 801d014:	3b04      	subs	r3, #4
 801d016:	429d      	cmp	r5, r3
 801d018:	461a      	mov	r2, r3
 801d01a:	d30a      	bcc.n	801d032 <quorem+0x106>
 801d01c:	613c      	str	r4, [r7, #16]
 801d01e:	4630      	mov	r0, r6
 801d020:	b003      	add	sp, #12
 801d022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d026:	6812      	ldr	r2, [r2, #0]
 801d028:	3b04      	subs	r3, #4
 801d02a:	2a00      	cmp	r2, #0
 801d02c:	d1cc      	bne.n	801cfc8 <quorem+0x9c>
 801d02e:	3c01      	subs	r4, #1
 801d030:	e7c7      	b.n	801cfc2 <quorem+0x96>
 801d032:	6812      	ldr	r2, [r2, #0]
 801d034:	3b04      	subs	r3, #4
 801d036:	2a00      	cmp	r2, #0
 801d038:	d1f0      	bne.n	801d01c <quorem+0xf0>
 801d03a:	3c01      	subs	r4, #1
 801d03c:	e7eb      	b.n	801d016 <quorem+0xea>
 801d03e:	2000      	movs	r0, #0
 801d040:	e7ee      	b.n	801d020 <quorem+0xf4>
 801d042:	0000      	movs	r0, r0
 801d044:	0000      	movs	r0, r0
	...

0801d048 <_dtoa_r>:
 801d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d04c:	ed2d 8b04 	vpush	{d8-d9}
 801d050:	ec57 6b10 	vmov	r6, r7, d0
 801d054:	b093      	sub	sp, #76	; 0x4c
 801d056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d058:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d05c:	9106      	str	r1, [sp, #24]
 801d05e:	ee10 aa10 	vmov	sl, s0
 801d062:	4604      	mov	r4, r0
 801d064:	9209      	str	r2, [sp, #36]	; 0x24
 801d066:	930c      	str	r3, [sp, #48]	; 0x30
 801d068:	46bb      	mov	fp, r7
 801d06a:	b975      	cbnz	r5, 801d08a <_dtoa_r+0x42>
 801d06c:	2010      	movs	r0, #16
 801d06e:	f001 fa27 	bl	801e4c0 <malloc>
 801d072:	4602      	mov	r2, r0
 801d074:	6260      	str	r0, [r4, #36]	; 0x24
 801d076:	b920      	cbnz	r0, 801d082 <_dtoa_r+0x3a>
 801d078:	4ba7      	ldr	r3, [pc, #668]	; (801d318 <_dtoa_r+0x2d0>)
 801d07a:	21ea      	movs	r1, #234	; 0xea
 801d07c:	48a7      	ldr	r0, [pc, #668]	; (801d31c <_dtoa_r+0x2d4>)
 801d07e:	f002 f901 	bl	801f284 <__assert_func>
 801d082:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d086:	6005      	str	r5, [r0, #0]
 801d088:	60c5      	str	r5, [r0, #12]
 801d08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d08c:	6819      	ldr	r1, [r3, #0]
 801d08e:	b151      	cbz	r1, 801d0a6 <_dtoa_r+0x5e>
 801d090:	685a      	ldr	r2, [r3, #4]
 801d092:	604a      	str	r2, [r1, #4]
 801d094:	2301      	movs	r3, #1
 801d096:	4093      	lsls	r3, r2
 801d098:	608b      	str	r3, [r1, #8]
 801d09a:	4620      	mov	r0, r4
 801d09c:	f001 fa76 	bl	801e58c <_Bfree>
 801d0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	601a      	str	r2, [r3, #0]
 801d0a6:	1e3b      	subs	r3, r7, #0
 801d0a8:	bfaa      	itet	ge
 801d0aa:	2300      	movge	r3, #0
 801d0ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d0b0:	f8c8 3000 	strge.w	r3, [r8]
 801d0b4:	4b9a      	ldr	r3, [pc, #616]	; (801d320 <_dtoa_r+0x2d8>)
 801d0b6:	bfbc      	itt	lt
 801d0b8:	2201      	movlt	r2, #1
 801d0ba:	f8c8 2000 	strlt.w	r2, [r8]
 801d0be:	ea33 030b 	bics.w	r3, r3, fp
 801d0c2:	d11b      	bne.n	801d0fc <_dtoa_r+0xb4>
 801d0c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d0c6:	f242 730f 	movw	r3, #9999	; 0x270f
 801d0ca:	6013      	str	r3, [r2, #0]
 801d0cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d0d0:	4333      	orrs	r3, r6
 801d0d2:	f000 8592 	beq.w	801dbfa <_dtoa_r+0xbb2>
 801d0d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d0d8:	b963      	cbnz	r3, 801d0f4 <_dtoa_r+0xac>
 801d0da:	4b92      	ldr	r3, [pc, #584]	; (801d324 <_dtoa_r+0x2dc>)
 801d0dc:	e022      	b.n	801d124 <_dtoa_r+0xdc>
 801d0de:	4b92      	ldr	r3, [pc, #584]	; (801d328 <_dtoa_r+0x2e0>)
 801d0e0:	9301      	str	r3, [sp, #4]
 801d0e2:	3308      	adds	r3, #8
 801d0e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d0e6:	6013      	str	r3, [r2, #0]
 801d0e8:	9801      	ldr	r0, [sp, #4]
 801d0ea:	b013      	add	sp, #76	; 0x4c
 801d0ec:	ecbd 8b04 	vpop	{d8-d9}
 801d0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0f4:	4b8b      	ldr	r3, [pc, #556]	; (801d324 <_dtoa_r+0x2dc>)
 801d0f6:	9301      	str	r3, [sp, #4]
 801d0f8:	3303      	adds	r3, #3
 801d0fa:	e7f3      	b.n	801d0e4 <_dtoa_r+0x9c>
 801d0fc:	2200      	movs	r2, #0
 801d0fe:	2300      	movs	r3, #0
 801d100:	4650      	mov	r0, sl
 801d102:	4659      	mov	r1, fp
 801d104:	f7e3 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 801d108:	ec4b ab19 	vmov	d9, sl, fp
 801d10c:	4680      	mov	r8, r0
 801d10e:	b158      	cbz	r0, 801d128 <_dtoa_r+0xe0>
 801d110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d112:	2301      	movs	r3, #1
 801d114:	6013      	str	r3, [r2, #0]
 801d116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d118:	2b00      	cmp	r3, #0
 801d11a:	f000 856b 	beq.w	801dbf4 <_dtoa_r+0xbac>
 801d11e:	4883      	ldr	r0, [pc, #524]	; (801d32c <_dtoa_r+0x2e4>)
 801d120:	6018      	str	r0, [r3, #0]
 801d122:	1e43      	subs	r3, r0, #1
 801d124:	9301      	str	r3, [sp, #4]
 801d126:	e7df      	b.n	801d0e8 <_dtoa_r+0xa0>
 801d128:	ec4b ab10 	vmov	d0, sl, fp
 801d12c:	aa10      	add	r2, sp, #64	; 0x40
 801d12e:	a911      	add	r1, sp, #68	; 0x44
 801d130:	4620      	mov	r0, r4
 801d132:	f001 fdd9 	bl	801ece8 <__d2b>
 801d136:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d13a:	ee08 0a10 	vmov	s16, r0
 801d13e:	2d00      	cmp	r5, #0
 801d140:	f000 8084 	beq.w	801d24c <_dtoa_r+0x204>
 801d144:	ee19 3a90 	vmov	r3, s19
 801d148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d14c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d150:	4656      	mov	r6, sl
 801d152:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d15a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d15e:	4b74      	ldr	r3, [pc, #464]	; (801d330 <_dtoa_r+0x2e8>)
 801d160:	2200      	movs	r2, #0
 801d162:	4630      	mov	r0, r6
 801d164:	4639      	mov	r1, r7
 801d166:	f7e3 f88f 	bl	8000288 <__aeabi_dsub>
 801d16a:	a365      	add	r3, pc, #404	; (adr r3, 801d300 <_dtoa_r+0x2b8>)
 801d16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d170:	f7e3 fa42 	bl	80005f8 <__aeabi_dmul>
 801d174:	a364      	add	r3, pc, #400	; (adr r3, 801d308 <_dtoa_r+0x2c0>)
 801d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d17a:	f7e3 f887 	bl	800028c <__adddf3>
 801d17e:	4606      	mov	r6, r0
 801d180:	4628      	mov	r0, r5
 801d182:	460f      	mov	r7, r1
 801d184:	f7e3 f9ce 	bl	8000524 <__aeabi_i2d>
 801d188:	a361      	add	r3, pc, #388	; (adr r3, 801d310 <_dtoa_r+0x2c8>)
 801d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d18e:	f7e3 fa33 	bl	80005f8 <__aeabi_dmul>
 801d192:	4602      	mov	r2, r0
 801d194:	460b      	mov	r3, r1
 801d196:	4630      	mov	r0, r6
 801d198:	4639      	mov	r1, r7
 801d19a:	f7e3 f877 	bl	800028c <__adddf3>
 801d19e:	4606      	mov	r6, r0
 801d1a0:	460f      	mov	r7, r1
 801d1a2:	f7e3 fcd9 	bl	8000b58 <__aeabi_d2iz>
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	9000      	str	r0, [sp, #0]
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	4630      	mov	r0, r6
 801d1ae:	4639      	mov	r1, r7
 801d1b0:	f7e3 fc94 	bl	8000adc <__aeabi_dcmplt>
 801d1b4:	b150      	cbz	r0, 801d1cc <_dtoa_r+0x184>
 801d1b6:	9800      	ldr	r0, [sp, #0]
 801d1b8:	f7e3 f9b4 	bl	8000524 <__aeabi_i2d>
 801d1bc:	4632      	mov	r2, r6
 801d1be:	463b      	mov	r3, r7
 801d1c0:	f7e3 fc82 	bl	8000ac8 <__aeabi_dcmpeq>
 801d1c4:	b910      	cbnz	r0, 801d1cc <_dtoa_r+0x184>
 801d1c6:	9b00      	ldr	r3, [sp, #0]
 801d1c8:	3b01      	subs	r3, #1
 801d1ca:	9300      	str	r3, [sp, #0]
 801d1cc:	9b00      	ldr	r3, [sp, #0]
 801d1ce:	2b16      	cmp	r3, #22
 801d1d0:	d85a      	bhi.n	801d288 <_dtoa_r+0x240>
 801d1d2:	9a00      	ldr	r2, [sp, #0]
 801d1d4:	4b57      	ldr	r3, [pc, #348]	; (801d334 <_dtoa_r+0x2ec>)
 801d1d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1de:	ec51 0b19 	vmov	r0, r1, d9
 801d1e2:	f7e3 fc7b 	bl	8000adc <__aeabi_dcmplt>
 801d1e6:	2800      	cmp	r0, #0
 801d1e8:	d050      	beq.n	801d28c <_dtoa_r+0x244>
 801d1ea:	9b00      	ldr	r3, [sp, #0]
 801d1ec:	3b01      	subs	r3, #1
 801d1ee:	9300      	str	r3, [sp, #0]
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	930b      	str	r3, [sp, #44]	; 0x2c
 801d1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1f6:	1b5d      	subs	r5, r3, r5
 801d1f8:	1e6b      	subs	r3, r5, #1
 801d1fa:	9305      	str	r3, [sp, #20]
 801d1fc:	bf45      	ittet	mi
 801d1fe:	f1c5 0301 	rsbmi	r3, r5, #1
 801d202:	9304      	strmi	r3, [sp, #16]
 801d204:	2300      	movpl	r3, #0
 801d206:	2300      	movmi	r3, #0
 801d208:	bf4c      	ite	mi
 801d20a:	9305      	strmi	r3, [sp, #20]
 801d20c:	9304      	strpl	r3, [sp, #16]
 801d20e:	9b00      	ldr	r3, [sp, #0]
 801d210:	2b00      	cmp	r3, #0
 801d212:	db3d      	blt.n	801d290 <_dtoa_r+0x248>
 801d214:	9b05      	ldr	r3, [sp, #20]
 801d216:	9a00      	ldr	r2, [sp, #0]
 801d218:	920a      	str	r2, [sp, #40]	; 0x28
 801d21a:	4413      	add	r3, r2
 801d21c:	9305      	str	r3, [sp, #20]
 801d21e:	2300      	movs	r3, #0
 801d220:	9307      	str	r3, [sp, #28]
 801d222:	9b06      	ldr	r3, [sp, #24]
 801d224:	2b09      	cmp	r3, #9
 801d226:	f200 8089 	bhi.w	801d33c <_dtoa_r+0x2f4>
 801d22a:	2b05      	cmp	r3, #5
 801d22c:	bfc4      	itt	gt
 801d22e:	3b04      	subgt	r3, #4
 801d230:	9306      	strgt	r3, [sp, #24]
 801d232:	9b06      	ldr	r3, [sp, #24]
 801d234:	f1a3 0302 	sub.w	r3, r3, #2
 801d238:	bfcc      	ite	gt
 801d23a:	2500      	movgt	r5, #0
 801d23c:	2501      	movle	r5, #1
 801d23e:	2b03      	cmp	r3, #3
 801d240:	f200 8087 	bhi.w	801d352 <_dtoa_r+0x30a>
 801d244:	e8df f003 	tbb	[pc, r3]
 801d248:	59383a2d 	.word	0x59383a2d
 801d24c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d250:	441d      	add	r5, r3
 801d252:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d256:	2b20      	cmp	r3, #32
 801d258:	bfc1      	itttt	gt
 801d25a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d25e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d262:	fa0b f303 	lslgt.w	r3, fp, r3
 801d266:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d26a:	bfda      	itte	le
 801d26c:	f1c3 0320 	rsble	r3, r3, #32
 801d270:	fa06 f003 	lslle.w	r0, r6, r3
 801d274:	4318      	orrgt	r0, r3
 801d276:	f7e3 f945 	bl	8000504 <__aeabi_ui2d>
 801d27a:	2301      	movs	r3, #1
 801d27c:	4606      	mov	r6, r0
 801d27e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d282:	3d01      	subs	r5, #1
 801d284:	930e      	str	r3, [sp, #56]	; 0x38
 801d286:	e76a      	b.n	801d15e <_dtoa_r+0x116>
 801d288:	2301      	movs	r3, #1
 801d28a:	e7b2      	b.n	801d1f2 <_dtoa_r+0x1aa>
 801d28c:	900b      	str	r0, [sp, #44]	; 0x2c
 801d28e:	e7b1      	b.n	801d1f4 <_dtoa_r+0x1ac>
 801d290:	9b04      	ldr	r3, [sp, #16]
 801d292:	9a00      	ldr	r2, [sp, #0]
 801d294:	1a9b      	subs	r3, r3, r2
 801d296:	9304      	str	r3, [sp, #16]
 801d298:	4253      	negs	r3, r2
 801d29a:	9307      	str	r3, [sp, #28]
 801d29c:	2300      	movs	r3, #0
 801d29e:	930a      	str	r3, [sp, #40]	; 0x28
 801d2a0:	e7bf      	b.n	801d222 <_dtoa_r+0x1da>
 801d2a2:	2300      	movs	r3, #0
 801d2a4:	9308      	str	r3, [sp, #32]
 801d2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	dc55      	bgt.n	801d358 <_dtoa_r+0x310>
 801d2ac:	2301      	movs	r3, #1
 801d2ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d2b2:	461a      	mov	r2, r3
 801d2b4:	9209      	str	r2, [sp, #36]	; 0x24
 801d2b6:	e00c      	b.n	801d2d2 <_dtoa_r+0x28a>
 801d2b8:	2301      	movs	r3, #1
 801d2ba:	e7f3      	b.n	801d2a4 <_dtoa_r+0x25c>
 801d2bc:	2300      	movs	r3, #0
 801d2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d2c0:	9308      	str	r3, [sp, #32]
 801d2c2:	9b00      	ldr	r3, [sp, #0]
 801d2c4:	4413      	add	r3, r2
 801d2c6:	9302      	str	r3, [sp, #8]
 801d2c8:	3301      	adds	r3, #1
 801d2ca:	2b01      	cmp	r3, #1
 801d2cc:	9303      	str	r3, [sp, #12]
 801d2ce:	bfb8      	it	lt
 801d2d0:	2301      	movlt	r3, #1
 801d2d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d2d4:	2200      	movs	r2, #0
 801d2d6:	6042      	str	r2, [r0, #4]
 801d2d8:	2204      	movs	r2, #4
 801d2da:	f102 0614 	add.w	r6, r2, #20
 801d2de:	429e      	cmp	r6, r3
 801d2e0:	6841      	ldr	r1, [r0, #4]
 801d2e2:	d93d      	bls.n	801d360 <_dtoa_r+0x318>
 801d2e4:	4620      	mov	r0, r4
 801d2e6:	f001 f911 	bl	801e50c <_Balloc>
 801d2ea:	9001      	str	r0, [sp, #4]
 801d2ec:	2800      	cmp	r0, #0
 801d2ee:	d13b      	bne.n	801d368 <_dtoa_r+0x320>
 801d2f0:	4b11      	ldr	r3, [pc, #68]	; (801d338 <_dtoa_r+0x2f0>)
 801d2f2:	4602      	mov	r2, r0
 801d2f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d2f8:	e6c0      	b.n	801d07c <_dtoa_r+0x34>
 801d2fa:	2301      	movs	r3, #1
 801d2fc:	e7df      	b.n	801d2be <_dtoa_r+0x276>
 801d2fe:	bf00      	nop
 801d300:	636f4361 	.word	0x636f4361
 801d304:	3fd287a7 	.word	0x3fd287a7
 801d308:	8b60c8b3 	.word	0x8b60c8b3
 801d30c:	3fc68a28 	.word	0x3fc68a28
 801d310:	509f79fb 	.word	0x509f79fb
 801d314:	3fd34413 	.word	0x3fd34413
 801d318:	08022046 	.word	0x08022046
 801d31c:	0802205d 	.word	0x0802205d
 801d320:	7ff00000 	.word	0x7ff00000
 801d324:	08022042 	.word	0x08022042
 801d328:	08022039 	.word	0x08022039
 801d32c:	08021eb9 	.word	0x08021eb9
 801d330:	3ff80000 	.word	0x3ff80000
 801d334:	080221c8 	.word	0x080221c8
 801d338:	080220b8 	.word	0x080220b8
 801d33c:	2501      	movs	r5, #1
 801d33e:	2300      	movs	r3, #0
 801d340:	9306      	str	r3, [sp, #24]
 801d342:	9508      	str	r5, [sp, #32]
 801d344:	f04f 33ff 	mov.w	r3, #4294967295
 801d348:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d34c:	2200      	movs	r2, #0
 801d34e:	2312      	movs	r3, #18
 801d350:	e7b0      	b.n	801d2b4 <_dtoa_r+0x26c>
 801d352:	2301      	movs	r3, #1
 801d354:	9308      	str	r3, [sp, #32]
 801d356:	e7f5      	b.n	801d344 <_dtoa_r+0x2fc>
 801d358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d35a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d35e:	e7b8      	b.n	801d2d2 <_dtoa_r+0x28a>
 801d360:	3101      	adds	r1, #1
 801d362:	6041      	str	r1, [r0, #4]
 801d364:	0052      	lsls	r2, r2, #1
 801d366:	e7b8      	b.n	801d2da <_dtoa_r+0x292>
 801d368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d36a:	9a01      	ldr	r2, [sp, #4]
 801d36c:	601a      	str	r2, [r3, #0]
 801d36e:	9b03      	ldr	r3, [sp, #12]
 801d370:	2b0e      	cmp	r3, #14
 801d372:	f200 809d 	bhi.w	801d4b0 <_dtoa_r+0x468>
 801d376:	2d00      	cmp	r5, #0
 801d378:	f000 809a 	beq.w	801d4b0 <_dtoa_r+0x468>
 801d37c:	9b00      	ldr	r3, [sp, #0]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	dd32      	ble.n	801d3e8 <_dtoa_r+0x3a0>
 801d382:	4ab7      	ldr	r2, [pc, #732]	; (801d660 <_dtoa_r+0x618>)
 801d384:	f003 030f 	and.w	r3, r3, #15
 801d388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d38c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d390:	9b00      	ldr	r3, [sp, #0]
 801d392:	05d8      	lsls	r0, r3, #23
 801d394:	ea4f 1723 	mov.w	r7, r3, asr #4
 801d398:	d516      	bpl.n	801d3c8 <_dtoa_r+0x380>
 801d39a:	4bb2      	ldr	r3, [pc, #712]	; (801d664 <_dtoa_r+0x61c>)
 801d39c:	ec51 0b19 	vmov	r0, r1, d9
 801d3a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d3a4:	f7e3 fa52 	bl	800084c <__aeabi_ddiv>
 801d3a8:	f007 070f 	and.w	r7, r7, #15
 801d3ac:	4682      	mov	sl, r0
 801d3ae:	468b      	mov	fp, r1
 801d3b0:	2503      	movs	r5, #3
 801d3b2:	4eac      	ldr	r6, [pc, #688]	; (801d664 <_dtoa_r+0x61c>)
 801d3b4:	b957      	cbnz	r7, 801d3cc <_dtoa_r+0x384>
 801d3b6:	4642      	mov	r2, r8
 801d3b8:	464b      	mov	r3, r9
 801d3ba:	4650      	mov	r0, sl
 801d3bc:	4659      	mov	r1, fp
 801d3be:	f7e3 fa45 	bl	800084c <__aeabi_ddiv>
 801d3c2:	4682      	mov	sl, r0
 801d3c4:	468b      	mov	fp, r1
 801d3c6:	e028      	b.n	801d41a <_dtoa_r+0x3d2>
 801d3c8:	2502      	movs	r5, #2
 801d3ca:	e7f2      	b.n	801d3b2 <_dtoa_r+0x36a>
 801d3cc:	07f9      	lsls	r1, r7, #31
 801d3ce:	d508      	bpl.n	801d3e2 <_dtoa_r+0x39a>
 801d3d0:	4640      	mov	r0, r8
 801d3d2:	4649      	mov	r1, r9
 801d3d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d3d8:	f7e3 f90e 	bl	80005f8 <__aeabi_dmul>
 801d3dc:	3501      	adds	r5, #1
 801d3de:	4680      	mov	r8, r0
 801d3e0:	4689      	mov	r9, r1
 801d3e2:	107f      	asrs	r7, r7, #1
 801d3e4:	3608      	adds	r6, #8
 801d3e6:	e7e5      	b.n	801d3b4 <_dtoa_r+0x36c>
 801d3e8:	f000 809b 	beq.w	801d522 <_dtoa_r+0x4da>
 801d3ec:	9b00      	ldr	r3, [sp, #0]
 801d3ee:	4f9d      	ldr	r7, [pc, #628]	; (801d664 <_dtoa_r+0x61c>)
 801d3f0:	425e      	negs	r6, r3
 801d3f2:	4b9b      	ldr	r3, [pc, #620]	; (801d660 <_dtoa_r+0x618>)
 801d3f4:	f006 020f 	and.w	r2, r6, #15
 801d3f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d400:	ec51 0b19 	vmov	r0, r1, d9
 801d404:	f7e3 f8f8 	bl	80005f8 <__aeabi_dmul>
 801d408:	1136      	asrs	r6, r6, #4
 801d40a:	4682      	mov	sl, r0
 801d40c:	468b      	mov	fp, r1
 801d40e:	2300      	movs	r3, #0
 801d410:	2502      	movs	r5, #2
 801d412:	2e00      	cmp	r6, #0
 801d414:	d17a      	bne.n	801d50c <_dtoa_r+0x4c4>
 801d416:	2b00      	cmp	r3, #0
 801d418:	d1d3      	bne.n	801d3c2 <_dtoa_r+0x37a>
 801d41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	f000 8082 	beq.w	801d526 <_dtoa_r+0x4de>
 801d422:	4b91      	ldr	r3, [pc, #580]	; (801d668 <_dtoa_r+0x620>)
 801d424:	2200      	movs	r2, #0
 801d426:	4650      	mov	r0, sl
 801d428:	4659      	mov	r1, fp
 801d42a:	f7e3 fb57 	bl	8000adc <__aeabi_dcmplt>
 801d42e:	2800      	cmp	r0, #0
 801d430:	d079      	beq.n	801d526 <_dtoa_r+0x4de>
 801d432:	9b03      	ldr	r3, [sp, #12]
 801d434:	2b00      	cmp	r3, #0
 801d436:	d076      	beq.n	801d526 <_dtoa_r+0x4de>
 801d438:	9b02      	ldr	r3, [sp, #8]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	dd36      	ble.n	801d4ac <_dtoa_r+0x464>
 801d43e:	9b00      	ldr	r3, [sp, #0]
 801d440:	4650      	mov	r0, sl
 801d442:	4659      	mov	r1, fp
 801d444:	1e5f      	subs	r7, r3, #1
 801d446:	2200      	movs	r2, #0
 801d448:	4b88      	ldr	r3, [pc, #544]	; (801d66c <_dtoa_r+0x624>)
 801d44a:	f7e3 f8d5 	bl	80005f8 <__aeabi_dmul>
 801d44e:	9e02      	ldr	r6, [sp, #8]
 801d450:	4682      	mov	sl, r0
 801d452:	468b      	mov	fp, r1
 801d454:	3501      	adds	r5, #1
 801d456:	4628      	mov	r0, r5
 801d458:	f7e3 f864 	bl	8000524 <__aeabi_i2d>
 801d45c:	4652      	mov	r2, sl
 801d45e:	465b      	mov	r3, fp
 801d460:	f7e3 f8ca 	bl	80005f8 <__aeabi_dmul>
 801d464:	4b82      	ldr	r3, [pc, #520]	; (801d670 <_dtoa_r+0x628>)
 801d466:	2200      	movs	r2, #0
 801d468:	f7e2 ff10 	bl	800028c <__adddf3>
 801d46c:	46d0      	mov	r8, sl
 801d46e:	46d9      	mov	r9, fp
 801d470:	4682      	mov	sl, r0
 801d472:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801d476:	2e00      	cmp	r6, #0
 801d478:	d158      	bne.n	801d52c <_dtoa_r+0x4e4>
 801d47a:	4b7e      	ldr	r3, [pc, #504]	; (801d674 <_dtoa_r+0x62c>)
 801d47c:	2200      	movs	r2, #0
 801d47e:	4640      	mov	r0, r8
 801d480:	4649      	mov	r1, r9
 801d482:	f7e2 ff01 	bl	8000288 <__aeabi_dsub>
 801d486:	4652      	mov	r2, sl
 801d488:	465b      	mov	r3, fp
 801d48a:	4680      	mov	r8, r0
 801d48c:	4689      	mov	r9, r1
 801d48e:	f7e3 fb43 	bl	8000b18 <__aeabi_dcmpgt>
 801d492:	2800      	cmp	r0, #0
 801d494:	f040 8295 	bne.w	801d9c2 <_dtoa_r+0x97a>
 801d498:	4652      	mov	r2, sl
 801d49a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801d49e:	4640      	mov	r0, r8
 801d4a0:	4649      	mov	r1, r9
 801d4a2:	f7e3 fb1b 	bl	8000adc <__aeabi_dcmplt>
 801d4a6:	2800      	cmp	r0, #0
 801d4a8:	f040 8289 	bne.w	801d9be <_dtoa_r+0x976>
 801d4ac:	ec5b ab19 	vmov	sl, fp, d9
 801d4b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	f2c0 8148 	blt.w	801d748 <_dtoa_r+0x700>
 801d4b8:	9a00      	ldr	r2, [sp, #0]
 801d4ba:	2a0e      	cmp	r2, #14
 801d4bc:	f300 8144 	bgt.w	801d748 <_dtoa_r+0x700>
 801d4c0:	4b67      	ldr	r3, [pc, #412]	; (801d660 <_dtoa_r+0x618>)
 801d4c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d4c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	f280 80d5 	bge.w	801d67c <_dtoa_r+0x634>
 801d4d2:	9b03      	ldr	r3, [sp, #12]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	f300 80d1 	bgt.w	801d67c <_dtoa_r+0x634>
 801d4da:	f040 826f 	bne.w	801d9bc <_dtoa_r+0x974>
 801d4de:	4b65      	ldr	r3, [pc, #404]	; (801d674 <_dtoa_r+0x62c>)
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	4640      	mov	r0, r8
 801d4e4:	4649      	mov	r1, r9
 801d4e6:	f7e3 f887 	bl	80005f8 <__aeabi_dmul>
 801d4ea:	4652      	mov	r2, sl
 801d4ec:	465b      	mov	r3, fp
 801d4ee:	f7e3 fb09 	bl	8000b04 <__aeabi_dcmpge>
 801d4f2:	9e03      	ldr	r6, [sp, #12]
 801d4f4:	4637      	mov	r7, r6
 801d4f6:	2800      	cmp	r0, #0
 801d4f8:	f040 8245 	bne.w	801d986 <_dtoa_r+0x93e>
 801d4fc:	9d01      	ldr	r5, [sp, #4]
 801d4fe:	2331      	movs	r3, #49	; 0x31
 801d500:	f805 3b01 	strb.w	r3, [r5], #1
 801d504:	9b00      	ldr	r3, [sp, #0]
 801d506:	3301      	adds	r3, #1
 801d508:	9300      	str	r3, [sp, #0]
 801d50a:	e240      	b.n	801d98e <_dtoa_r+0x946>
 801d50c:	07f2      	lsls	r2, r6, #31
 801d50e:	d505      	bpl.n	801d51c <_dtoa_r+0x4d4>
 801d510:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d514:	f7e3 f870 	bl	80005f8 <__aeabi_dmul>
 801d518:	3501      	adds	r5, #1
 801d51a:	2301      	movs	r3, #1
 801d51c:	1076      	asrs	r6, r6, #1
 801d51e:	3708      	adds	r7, #8
 801d520:	e777      	b.n	801d412 <_dtoa_r+0x3ca>
 801d522:	2502      	movs	r5, #2
 801d524:	e779      	b.n	801d41a <_dtoa_r+0x3d2>
 801d526:	9f00      	ldr	r7, [sp, #0]
 801d528:	9e03      	ldr	r6, [sp, #12]
 801d52a:	e794      	b.n	801d456 <_dtoa_r+0x40e>
 801d52c:	9901      	ldr	r1, [sp, #4]
 801d52e:	4b4c      	ldr	r3, [pc, #304]	; (801d660 <_dtoa_r+0x618>)
 801d530:	4431      	add	r1, r6
 801d532:	910d      	str	r1, [sp, #52]	; 0x34
 801d534:	9908      	ldr	r1, [sp, #32]
 801d536:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d53a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d53e:	2900      	cmp	r1, #0
 801d540:	d043      	beq.n	801d5ca <_dtoa_r+0x582>
 801d542:	494d      	ldr	r1, [pc, #308]	; (801d678 <_dtoa_r+0x630>)
 801d544:	2000      	movs	r0, #0
 801d546:	f7e3 f981 	bl	800084c <__aeabi_ddiv>
 801d54a:	4652      	mov	r2, sl
 801d54c:	465b      	mov	r3, fp
 801d54e:	f7e2 fe9b 	bl	8000288 <__aeabi_dsub>
 801d552:	9d01      	ldr	r5, [sp, #4]
 801d554:	4682      	mov	sl, r0
 801d556:	468b      	mov	fp, r1
 801d558:	4649      	mov	r1, r9
 801d55a:	4640      	mov	r0, r8
 801d55c:	f7e3 fafc 	bl	8000b58 <__aeabi_d2iz>
 801d560:	4606      	mov	r6, r0
 801d562:	f7e2 ffdf 	bl	8000524 <__aeabi_i2d>
 801d566:	4602      	mov	r2, r0
 801d568:	460b      	mov	r3, r1
 801d56a:	4640      	mov	r0, r8
 801d56c:	4649      	mov	r1, r9
 801d56e:	f7e2 fe8b 	bl	8000288 <__aeabi_dsub>
 801d572:	3630      	adds	r6, #48	; 0x30
 801d574:	f805 6b01 	strb.w	r6, [r5], #1
 801d578:	4652      	mov	r2, sl
 801d57a:	465b      	mov	r3, fp
 801d57c:	4680      	mov	r8, r0
 801d57e:	4689      	mov	r9, r1
 801d580:	f7e3 faac 	bl	8000adc <__aeabi_dcmplt>
 801d584:	2800      	cmp	r0, #0
 801d586:	d163      	bne.n	801d650 <_dtoa_r+0x608>
 801d588:	4642      	mov	r2, r8
 801d58a:	464b      	mov	r3, r9
 801d58c:	4936      	ldr	r1, [pc, #216]	; (801d668 <_dtoa_r+0x620>)
 801d58e:	2000      	movs	r0, #0
 801d590:	f7e2 fe7a 	bl	8000288 <__aeabi_dsub>
 801d594:	4652      	mov	r2, sl
 801d596:	465b      	mov	r3, fp
 801d598:	f7e3 faa0 	bl	8000adc <__aeabi_dcmplt>
 801d59c:	2800      	cmp	r0, #0
 801d59e:	f040 80b5 	bne.w	801d70c <_dtoa_r+0x6c4>
 801d5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5a4:	429d      	cmp	r5, r3
 801d5a6:	d081      	beq.n	801d4ac <_dtoa_r+0x464>
 801d5a8:	4b30      	ldr	r3, [pc, #192]	; (801d66c <_dtoa_r+0x624>)
 801d5aa:	2200      	movs	r2, #0
 801d5ac:	4650      	mov	r0, sl
 801d5ae:	4659      	mov	r1, fp
 801d5b0:	f7e3 f822 	bl	80005f8 <__aeabi_dmul>
 801d5b4:	4b2d      	ldr	r3, [pc, #180]	; (801d66c <_dtoa_r+0x624>)
 801d5b6:	4682      	mov	sl, r0
 801d5b8:	468b      	mov	fp, r1
 801d5ba:	4640      	mov	r0, r8
 801d5bc:	4649      	mov	r1, r9
 801d5be:	2200      	movs	r2, #0
 801d5c0:	f7e3 f81a 	bl	80005f8 <__aeabi_dmul>
 801d5c4:	4680      	mov	r8, r0
 801d5c6:	4689      	mov	r9, r1
 801d5c8:	e7c6      	b.n	801d558 <_dtoa_r+0x510>
 801d5ca:	4650      	mov	r0, sl
 801d5cc:	4659      	mov	r1, fp
 801d5ce:	f7e3 f813 	bl	80005f8 <__aeabi_dmul>
 801d5d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5d4:	9d01      	ldr	r5, [sp, #4]
 801d5d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d5d8:	4682      	mov	sl, r0
 801d5da:	468b      	mov	fp, r1
 801d5dc:	4649      	mov	r1, r9
 801d5de:	4640      	mov	r0, r8
 801d5e0:	f7e3 faba 	bl	8000b58 <__aeabi_d2iz>
 801d5e4:	4606      	mov	r6, r0
 801d5e6:	f7e2 ff9d 	bl	8000524 <__aeabi_i2d>
 801d5ea:	3630      	adds	r6, #48	; 0x30
 801d5ec:	4602      	mov	r2, r0
 801d5ee:	460b      	mov	r3, r1
 801d5f0:	4640      	mov	r0, r8
 801d5f2:	4649      	mov	r1, r9
 801d5f4:	f7e2 fe48 	bl	8000288 <__aeabi_dsub>
 801d5f8:	f805 6b01 	strb.w	r6, [r5], #1
 801d5fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5fe:	429d      	cmp	r5, r3
 801d600:	4680      	mov	r8, r0
 801d602:	4689      	mov	r9, r1
 801d604:	f04f 0200 	mov.w	r2, #0
 801d608:	d124      	bne.n	801d654 <_dtoa_r+0x60c>
 801d60a:	4b1b      	ldr	r3, [pc, #108]	; (801d678 <_dtoa_r+0x630>)
 801d60c:	4650      	mov	r0, sl
 801d60e:	4659      	mov	r1, fp
 801d610:	f7e2 fe3c 	bl	800028c <__adddf3>
 801d614:	4602      	mov	r2, r0
 801d616:	460b      	mov	r3, r1
 801d618:	4640      	mov	r0, r8
 801d61a:	4649      	mov	r1, r9
 801d61c:	f7e3 fa7c 	bl	8000b18 <__aeabi_dcmpgt>
 801d620:	2800      	cmp	r0, #0
 801d622:	d173      	bne.n	801d70c <_dtoa_r+0x6c4>
 801d624:	4652      	mov	r2, sl
 801d626:	465b      	mov	r3, fp
 801d628:	4913      	ldr	r1, [pc, #76]	; (801d678 <_dtoa_r+0x630>)
 801d62a:	2000      	movs	r0, #0
 801d62c:	f7e2 fe2c 	bl	8000288 <__aeabi_dsub>
 801d630:	4602      	mov	r2, r0
 801d632:	460b      	mov	r3, r1
 801d634:	4640      	mov	r0, r8
 801d636:	4649      	mov	r1, r9
 801d638:	f7e3 fa50 	bl	8000adc <__aeabi_dcmplt>
 801d63c:	2800      	cmp	r0, #0
 801d63e:	f43f af35 	beq.w	801d4ac <_dtoa_r+0x464>
 801d642:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d644:	1e6b      	subs	r3, r5, #1
 801d646:	930f      	str	r3, [sp, #60]	; 0x3c
 801d648:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d64c:	2b30      	cmp	r3, #48	; 0x30
 801d64e:	d0f8      	beq.n	801d642 <_dtoa_r+0x5fa>
 801d650:	9700      	str	r7, [sp, #0]
 801d652:	e049      	b.n	801d6e8 <_dtoa_r+0x6a0>
 801d654:	4b05      	ldr	r3, [pc, #20]	; (801d66c <_dtoa_r+0x624>)
 801d656:	f7e2 ffcf 	bl	80005f8 <__aeabi_dmul>
 801d65a:	4680      	mov	r8, r0
 801d65c:	4689      	mov	r9, r1
 801d65e:	e7bd      	b.n	801d5dc <_dtoa_r+0x594>
 801d660:	080221c8 	.word	0x080221c8
 801d664:	080221a0 	.word	0x080221a0
 801d668:	3ff00000 	.word	0x3ff00000
 801d66c:	40240000 	.word	0x40240000
 801d670:	401c0000 	.word	0x401c0000
 801d674:	40140000 	.word	0x40140000
 801d678:	3fe00000 	.word	0x3fe00000
 801d67c:	9d01      	ldr	r5, [sp, #4]
 801d67e:	4656      	mov	r6, sl
 801d680:	465f      	mov	r7, fp
 801d682:	4642      	mov	r2, r8
 801d684:	464b      	mov	r3, r9
 801d686:	4630      	mov	r0, r6
 801d688:	4639      	mov	r1, r7
 801d68a:	f7e3 f8df 	bl	800084c <__aeabi_ddiv>
 801d68e:	f7e3 fa63 	bl	8000b58 <__aeabi_d2iz>
 801d692:	4682      	mov	sl, r0
 801d694:	f7e2 ff46 	bl	8000524 <__aeabi_i2d>
 801d698:	4642      	mov	r2, r8
 801d69a:	464b      	mov	r3, r9
 801d69c:	f7e2 ffac 	bl	80005f8 <__aeabi_dmul>
 801d6a0:	4602      	mov	r2, r0
 801d6a2:	460b      	mov	r3, r1
 801d6a4:	4630      	mov	r0, r6
 801d6a6:	4639      	mov	r1, r7
 801d6a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801d6ac:	f7e2 fdec 	bl	8000288 <__aeabi_dsub>
 801d6b0:	f805 6b01 	strb.w	r6, [r5], #1
 801d6b4:	9e01      	ldr	r6, [sp, #4]
 801d6b6:	9f03      	ldr	r7, [sp, #12]
 801d6b8:	1bae      	subs	r6, r5, r6
 801d6ba:	42b7      	cmp	r7, r6
 801d6bc:	4602      	mov	r2, r0
 801d6be:	460b      	mov	r3, r1
 801d6c0:	d135      	bne.n	801d72e <_dtoa_r+0x6e6>
 801d6c2:	f7e2 fde3 	bl	800028c <__adddf3>
 801d6c6:	4642      	mov	r2, r8
 801d6c8:	464b      	mov	r3, r9
 801d6ca:	4606      	mov	r6, r0
 801d6cc:	460f      	mov	r7, r1
 801d6ce:	f7e3 fa23 	bl	8000b18 <__aeabi_dcmpgt>
 801d6d2:	b9d0      	cbnz	r0, 801d70a <_dtoa_r+0x6c2>
 801d6d4:	4642      	mov	r2, r8
 801d6d6:	464b      	mov	r3, r9
 801d6d8:	4630      	mov	r0, r6
 801d6da:	4639      	mov	r1, r7
 801d6dc:	f7e3 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 801d6e0:	b110      	cbz	r0, 801d6e8 <_dtoa_r+0x6a0>
 801d6e2:	f01a 0f01 	tst.w	sl, #1
 801d6e6:	d110      	bne.n	801d70a <_dtoa_r+0x6c2>
 801d6e8:	4620      	mov	r0, r4
 801d6ea:	ee18 1a10 	vmov	r1, s16
 801d6ee:	f000 ff4d 	bl	801e58c <_Bfree>
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	9800      	ldr	r0, [sp, #0]
 801d6f6:	702b      	strb	r3, [r5, #0]
 801d6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6fa:	3001      	adds	r0, #1
 801d6fc:	6018      	str	r0, [r3, #0]
 801d6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d700:	2b00      	cmp	r3, #0
 801d702:	f43f acf1 	beq.w	801d0e8 <_dtoa_r+0xa0>
 801d706:	601d      	str	r5, [r3, #0]
 801d708:	e4ee      	b.n	801d0e8 <_dtoa_r+0xa0>
 801d70a:	9f00      	ldr	r7, [sp, #0]
 801d70c:	462b      	mov	r3, r5
 801d70e:	461d      	mov	r5, r3
 801d710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d714:	2a39      	cmp	r2, #57	; 0x39
 801d716:	d106      	bne.n	801d726 <_dtoa_r+0x6de>
 801d718:	9a01      	ldr	r2, [sp, #4]
 801d71a:	429a      	cmp	r2, r3
 801d71c:	d1f7      	bne.n	801d70e <_dtoa_r+0x6c6>
 801d71e:	9901      	ldr	r1, [sp, #4]
 801d720:	2230      	movs	r2, #48	; 0x30
 801d722:	3701      	adds	r7, #1
 801d724:	700a      	strb	r2, [r1, #0]
 801d726:	781a      	ldrb	r2, [r3, #0]
 801d728:	3201      	adds	r2, #1
 801d72a:	701a      	strb	r2, [r3, #0]
 801d72c:	e790      	b.n	801d650 <_dtoa_r+0x608>
 801d72e:	4ba6      	ldr	r3, [pc, #664]	; (801d9c8 <_dtoa_r+0x980>)
 801d730:	2200      	movs	r2, #0
 801d732:	f7e2 ff61 	bl	80005f8 <__aeabi_dmul>
 801d736:	2200      	movs	r2, #0
 801d738:	2300      	movs	r3, #0
 801d73a:	4606      	mov	r6, r0
 801d73c:	460f      	mov	r7, r1
 801d73e:	f7e3 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 801d742:	2800      	cmp	r0, #0
 801d744:	d09d      	beq.n	801d682 <_dtoa_r+0x63a>
 801d746:	e7cf      	b.n	801d6e8 <_dtoa_r+0x6a0>
 801d748:	9a08      	ldr	r2, [sp, #32]
 801d74a:	2a00      	cmp	r2, #0
 801d74c:	f000 80d7 	beq.w	801d8fe <_dtoa_r+0x8b6>
 801d750:	9a06      	ldr	r2, [sp, #24]
 801d752:	2a01      	cmp	r2, #1
 801d754:	f300 80ba 	bgt.w	801d8cc <_dtoa_r+0x884>
 801d758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d75a:	2a00      	cmp	r2, #0
 801d75c:	f000 80b2 	beq.w	801d8c4 <_dtoa_r+0x87c>
 801d760:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d764:	9e07      	ldr	r6, [sp, #28]
 801d766:	9d04      	ldr	r5, [sp, #16]
 801d768:	9a04      	ldr	r2, [sp, #16]
 801d76a:	441a      	add	r2, r3
 801d76c:	9204      	str	r2, [sp, #16]
 801d76e:	9a05      	ldr	r2, [sp, #20]
 801d770:	2101      	movs	r1, #1
 801d772:	441a      	add	r2, r3
 801d774:	4620      	mov	r0, r4
 801d776:	9205      	str	r2, [sp, #20]
 801d778:	f001 f80a 	bl	801e790 <__i2b>
 801d77c:	4607      	mov	r7, r0
 801d77e:	2d00      	cmp	r5, #0
 801d780:	dd0c      	ble.n	801d79c <_dtoa_r+0x754>
 801d782:	9b05      	ldr	r3, [sp, #20]
 801d784:	2b00      	cmp	r3, #0
 801d786:	dd09      	ble.n	801d79c <_dtoa_r+0x754>
 801d788:	42ab      	cmp	r3, r5
 801d78a:	9a04      	ldr	r2, [sp, #16]
 801d78c:	bfa8      	it	ge
 801d78e:	462b      	movge	r3, r5
 801d790:	1ad2      	subs	r2, r2, r3
 801d792:	9204      	str	r2, [sp, #16]
 801d794:	9a05      	ldr	r2, [sp, #20]
 801d796:	1aed      	subs	r5, r5, r3
 801d798:	1ad3      	subs	r3, r2, r3
 801d79a:	9305      	str	r3, [sp, #20]
 801d79c:	9b07      	ldr	r3, [sp, #28]
 801d79e:	b31b      	cbz	r3, 801d7e8 <_dtoa_r+0x7a0>
 801d7a0:	9b08      	ldr	r3, [sp, #32]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	f000 80af 	beq.w	801d906 <_dtoa_r+0x8be>
 801d7a8:	2e00      	cmp	r6, #0
 801d7aa:	dd13      	ble.n	801d7d4 <_dtoa_r+0x78c>
 801d7ac:	4639      	mov	r1, r7
 801d7ae:	4632      	mov	r2, r6
 801d7b0:	4620      	mov	r0, r4
 801d7b2:	f001 f8ad 	bl	801e910 <__pow5mult>
 801d7b6:	ee18 2a10 	vmov	r2, s16
 801d7ba:	4601      	mov	r1, r0
 801d7bc:	4607      	mov	r7, r0
 801d7be:	4620      	mov	r0, r4
 801d7c0:	f000 fffc 	bl	801e7bc <__multiply>
 801d7c4:	ee18 1a10 	vmov	r1, s16
 801d7c8:	4680      	mov	r8, r0
 801d7ca:	4620      	mov	r0, r4
 801d7cc:	f000 fede 	bl	801e58c <_Bfree>
 801d7d0:	ee08 8a10 	vmov	s16, r8
 801d7d4:	9b07      	ldr	r3, [sp, #28]
 801d7d6:	1b9a      	subs	r2, r3, r6
 801d7d8:	d006      	beq.n	801d7e8 <_dtoa_r+0x7a0>
 801d7da:	ee18 1a10 	vmov	r1, s16
 801d7de:	4620      	mov	r0, r4
 801d7e0:	f001 f896 	bl	801e910 <__pow5mult>
 801d7e4:	ee08 0a10 	vmov	s16, r0
 801d7e8:	2101      	movs	r1, #1
 801d7ea:	4620      	mov	r0, r4
 801d7ec:	f000 ffd0 	bl	801e790 <__i2b>
 801d7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	4606      	mov	r6, r0
 801d7f6:	f340 8088 	ble.w	801d90a <_dtoa_r+0x8c2>
 801d7fa:	461a      	mov	r2, r3
 801d7fc:	4601      	mov	r1, r0
 801d7fe:	4620      	mov	r0, r4
 801d800:	f001 f886 	bl	801e910 <__pow5mult>
 801d804:	9b06      	ldr	r3, [sp, #24]
 801d806:	2b01      	cmp	r3, #1
 801d808:	4606      	mov	r6, r0
 801d80a:	f340 8081 	ble.w	801d910 <_dtoa_r+0x8c8>
 801d80e:	f04f 0800 	mov.w	r8, #0
 801d812:	6933      	ldr	r3, [r6, #16]
 801d814:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d818:	6918      	ldr	r0, [r3, #16]
 801d81a:	f000 ff69 	bl	801e6f0 <__hi0bits>
 801d81e:	f1c0 0020 	rsb	r0, r0, #32
 801d822:	9b05      	ldr	r3, [sp, #20]
 801d824:	4418      	add	r0, r3
 801d826:	f010 001f 	ands.w	r0, r0, #31
 801d82a:	f000 8092 	beq.w	801d952 <_dtoa_r+0x90a>
 801d82e:	f1c0 0320 	rsb	r3, r0, #32
 801d832:	2b04      	cmp	r3, #4
 801d834:	f340 808a 	ble.w	801d94c <_dtoa_r+0x904>
 801d838:	f1c0 001c 	rsb	r0, r0, #28
 801d83c:	9b04      	ldr	r3, [sp, #16]
 801d83e:	4403      	add	r3, r0
 801d840:	9304      	str	r3, [sp, #16]
 801d842:	9b05      	ldr	r3, [sp, #20]
 801d844:	4403      	add	r3, r0
 801d846:	4405      	add	r5, r0
 801d848:	9305      	str	r3, [sp, #20]
 801d84a:	9b04      	ldr	r3, [sp, #16]
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	dd07      	ble.n	801d860 <_dtoa_r+0x818>
 801d850:	ee18 1a10 	vmov	r1, s16
 801d854:	461a      	mov	r2, r3
 801d856:	4620      	mov	r0, r4
 801d858:	f001 f8b4 	bl	801e9c4 <__lshift>
 801d85c:	ee08 0a10 	vmov	s16, r0
 801d860:	9b05      	ldr	r3, [sp, #20]
 801d862:	2b00      	cmp	r3, #0
 801d864:	dd05      	ble.n	801d872 <_dtoa_r+0x82a>
 801d866:	4631      	mov	r1, r6
 801d868:	461a      	mov	r2, r3
 801d86a:	4620      	mov	r0, r4
 801d86c:	f001 f8aa 	bl	801e9c4 <__lshift>
 801d870:	4606      	mov	r6, r0
 801d872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d874:	2b00      	cmp	r3, #0
 801d876:	d06e      	beq.n	801d956 <_dtoa_r+0x90e>
 801d878:	ee18 0a10 	vmov	r0, s16
 801d87c:	4631      	mov	r1, r6
 801d87e:	f001 f911 	bl	801eaa4 <__mcmp>
 801d882:	2800      	cmp	r0, #0
 801d884:	da67      	bge.n	801d956 <_dtoa_r+0x90e>
 801d886:	9b00      	ldr	r3, [sp, #0]
 801d888:	3b01      	subs	r3, #1
 801d88a:	ee18 1a10 	vmov	r1, s16
 801d88e:	9300      	str	r3, [sp, #0]
 801d890:	220a      	movs	r2, #10
 801d892:	2300      	movs	r3, #0
 801d894:	4620      	mov	r0, r4
 801d896:	f000 fe9b 	bl	801e5d0 <__multadd>
 801d89a:	9b08      	ldr	r3, [sp, #32]
 801d89c:	ee08 0a10 	vmov	s16, r0
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	f000 81b1 	beq.w	801dc08 <_dtoa_r+0xbc0>
 801d8a6:	2300      	movs	r3, #0
 801d8a8:	4639      	mov	r1, r7
 801d8aa:	220a      	movs	r2, #10
 801d8ac:	4620      	mov	r0, r4
 801d8ae:	f000 fe8f 	bl	801e5d0 <__multadd>
 801d8b2:	9b02      	ldr	r3, [sp, #8]
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	4607      	mov	r7, r0
 801d8b8:	f300 808e 	bgt.w	801d9d8 <_dtoa_r+0x990>
 801d8bc:	9b06      	ldr	r3, [sp, #24]
 801d8be:	2b02      	cmp	r3, #2
 801d8c0:	dc51      	bgt.n	801d966 <_dtoa_r+0x91e>
 801d8c2:	e089      	b.n	801d9d8 <_dtoa_r+0x990>
 801d8c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d8ca:	e74b      	b.n	801d764 <_dtoa_r+0x71c>
 801d8cc:	9b03      	ldr	r3, [sp, #12]
 801d8ce:	1e5e      	subs	r6, r3, #1
 801d8d0:	9b07      	ldr	r3, [sp, #28]
 801d8d2:	42b3      	cmp	r3, r6
 801d8d4:	bfbf      	itttt	lt
 801d8d6:	9b07      	ldrlt	r3, [sp, #28]
 801d8d8:	9607      	strlt	r6, [sp, #28]
 801d8da:	1af2      	sublt	r2, r6, r3
 801d8dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801d8de:	bfb6      	itet	lt
 801d8e0:	189b      	addlt	r3, r3, r2
 801d8e2:	1b9e      	subge	r6, r3, r6
 801d8e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 801d8e6:	9b03      	ldr	r3, [sp, #12]
 801d8e8:	bfb8      	it	lt
 801d8ea:	2600      	movlt	r6, #0
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	bfb7      	itett	lt
 801d8f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801d8f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801d8f8:	1a9d      	sublt	r5, r3, r2
 801d8fa:	2300      	movlt	r3, #0
 801d8fc:	e734      	b.n	801d768 <_dtoa_r+0x720>
 801d8fe:	9e07      	ldr	r6, [sp, #28]
 801d900:	9d04      	ldr	r5, [sp, #16]
 801d902:	9f08      	ldr	r7, [sp, #32]
 801d904:	e73b      	b.n	801d77e <_dtoa_r+0x736>
 801d906:	9a07      	ldr	r2, [sp, #28]
 801d908:	e767      	b.n	801d7da <_dtoa_r+0x792>
 801d90a:	9b06      	ldr	r3, [sp, #24]
 801d90c:	2b01      	cmp	r3, #1
 801d90e:	dc18      	bgt.n	801d942 <_dtoa_r+0x8fa>
 801d910:	f1ba 0f00 	cmp.w	sl, #0
 801d914:	d115      	bne.n	801d942 <_dtoa_r+0x8fa>
 801d916:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d91a:	b993      	cbnz	r3, 801d942 <_dtoa_r+0x8fa>
 801d91c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d920:	0d1b      	lsrs	r3, r3, #20
 801d922:	051b      	lsls	r3, r3, #20
 801d924:	b183      	cbz	r3, 801d948 <_dtoa_r+0x900>
 801d926:	9b04      	ldr	r3, [sp, #16]
 801d928:	3301      	adds	r3, #1
 801d92a:	9304      	str	r3, [sp, #16]
 801d92c:	9b05      	ldr	r3, [sp, #20]
 801d92e:	3301      	adds	r3, #1
 801d930:	9305      	str	r3, [sp, #20]
 801d932:	f04f 0801 	mov.w	r8, #1
 801d936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d938:	2b00      	cmp	r3, #0
 801d93a:	f47f af6a 	bne.w	801d812 <_dtoa_r+0x7ca>
 801d93e:	2001      	movs	r0, #1
 801d940:	e76f      	b.n	801d822 <_dtoa_r+0x7da>
 801d942:	f04f 0800 	mov.w	r8, #0
 801d946:	e7f6      	b.n	801d936 <_dtoa_r+0x8ee>
 801d948:	4698      	mov	r8, r3
 801d94a:	e7f4      	b.n	801d936 <_dtoa_r+0x8ee>
 801d94c:	f43f af7d 	beq.w	801d84a <_dtoa_r+0x802>
 801d950:	4618      	mov	r0, r3
 801d952:	301c      	adds	r0, #28
 801d954:	e772      	b.n	801d83c <_dtoa_r+0x7f4>
 801d956:	9b03      	ldr	r3, [sp, #12]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	dc37      	bgt.n	801d9cc <_dtoa_r+0x984>
 801d95c:	9b06      	ldr	r3, [sp, #24]
 801d95e:	2b02      	cmp	r3, #2
 801d960:	dd34      	ble.n	801d9cc <_dtoa_r+0x984>
 801d962:	9b03      	ldr	r3, [sp, #12]
 801d964:	9302      	str	r3, [sp, #8]
 801d966:	9b02      	ldr	r3, [sp, #8]
 801d968:	b96b      	cbnz	r3, 801d986 <_dtoa_r+0x93e>
 801d96a:	4631      	mov	r1, r6
 801d96c:	2205      	movs	r2, #5
 801d96e:	4620      	mov	r0, r4
 801d970:	f000 fe2e 	bl	801e5d0 <__multadd>
 801d974:	4601      	mov	r1, r0
 801d976:	4606      	mov	r6, r0
 801d978:	ee18 0a10 	vmov	r0, s16
 801d97c:	f001 f892 	bl	801eaa4 <__mcmp>
 801d980:	2800      	cmp	r0, #0
 801d982:	f73f adbb 	bgt.w	801d4fc <_dtoa_r+0x4b4>
 801d986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d988:	9d01      	ldr	r5, [sp, #4]
 801d98a:	43db      	mvns	r3, r3
 801d98c:	9300      	str	r3, [sp, #0]
 801d98e:	f04f 0800 	mov.w	r8, #0
 801d992:	4631      	mov	r1, r6
 801d994:	4620      	mov	r0, r4
 801d996:	f000 fdf9 	bl	801e58c <_Bfree>
 801d99a:	2f00      	cmp	r7, #0
 801d99c:	f43f aea4 	beq.w	801d6e8 <_dtoa_r+0x6a0>
 801d9a0:	f1b8 0f00 	cmp.w	r8, #0
 801d9a4:	d005      	beq.n	801d9b2 <_dtoa_r+0x96a>
 801d9a6:	45b8      	cmp	r8, r7
 801d9a8:	d003      	beq.n	801d9b2 <_dtoa_r+0x96a>
 801d9aa:	4641      	mov	r1, r8
 801d9ac:	4620      	mov	r0, r4
 801d9ae:	f000 fded 	bl	801e58c <_Bfree>
 801d9b2:	4639      	mov	r1, r7
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	f000 fde9 	bl	801e58c <_Bfree>
 801d9ba:	e695      	b.n	801d6e8 <_dtoa_r+0x6a0>
 801d9bc:	2600      	movs	r6, #0
 801d9be:	4637      	mov	r7, r6
 801d9c0:	e7e1      	b.n	801d986 <_dtoa_r+0x93e>
 801d9c2:	9700      	str	r7, [sp, #0]
 801d9c4:	4637      	mov	r7, r6
 801d9c6:	e599      	b.n	801d4fc <_dtoa_r+0x4b4>
 801d9c8:	40240000 	.word	0x40240000
 801d9cc:	9b08      	ldr	r3, [sp, #32]
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	f000 80ca 	beq.w	801db68 <_dtoa_r+0xb20>
 801d9d4:	9b03      	ldr	r3, [sp, #12]
 801d9d6:	9302      	str	r3, [sp, #8]
 801d9d8:	2d00      	cmp	r5, #0
 801d9da:	dd05      	ble.n	801d9e8 <_dtoa_r+0x9a0>
 801d9dc:	4639      	mov	r1, r7
 801d9de:	462a      	mov	r2, r5
 801d9e0:	4620      	mov	r0, r4
 801d9e2:	f000 ffef 	bl	801e9c4 <__lshift>
 801d9e6:	4607      	mov	r7, r0
 801d9e8:	f1b8 0f00 	cmp.w	r8, #0
 801d9ec:	d05b      	beq.n	801daa6 <_dtoa_r+0xa5e>
 801d9ee:	6879      	ldr	r1, [r7, #4]
 801d9f0:	4620      	mov	r0, r4
 801d9f2:	f000 fd8b 	bl	801e50c <_Balloc>
 801d9f6:	4605      	mov	r5, r0
 801d9f8:	b928      	cbnz	r0, 801da06 <_dtoa_r+0x9be>
 801d9fa:	4b87      	ldr	r3, [pc, #540]	; (801dc18 <_dtoa_r+0xbd0>)
 801d9fc:	4602      	mov	r2, r0
 801d9fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 801da02:	f7ff bb3b 	b.w	801d07c <_dtoa_r+0x34>
 801da06:	693a      	ldr	r2, [r7, #16]
 801da08:	3202      	adds	r2, #2
 801da0a:	0092      	lsls	r2, r2, #2
 801da0c:	f107 010c 	add.w	r1, r7, #12
 801da10:	300c      	adds	r0, #12
 801da12:	f7fd fb80 	bl	801b116 <memcpy>
 801da16:	2201      	movs	r2, #1
 801da18:	4629      	mov	r1, r5
 801da1a:	4620      	mov	r0, r4
 801da1c:	f000 ffd2 	bl	801e9c4 <__lshift>
 801da20:	9b01      	ldr	r3, [sp, #4]
 801da22:	f103 0901 	add.w	r9, r3, #1
 801da26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801da2a:	4413      	add	r3, r2
 801da2c:	9305      	str	r3, [sp, #20]
 801da2e:	f00a 0301 	and.w	r3, sl, #1
 801da32:	46b8      	mov	r8, r7
 801da34:	9304      	str	r3, [sp, #16]
 801da36:	4607      	mov	r7, r0
 801da38:	4631      	mov	r1, r6
 801da3a:	ee18 0a10 	vmov	r0, s16
 801da3e:	f7ff fa75 	bl	801cf2c <quorem>
 801da42:	4641      	mov	r1, r8
 801da44:	9002      	str	r0, [sp, #8]
 801da46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801da4a:	ee18 0a10 	vmov	r0, s16
 801da4e:	f001 f829 	bl	801eaa4 <__mcmp>
 801da52:	463a      	mov	r2, r7
 801da54:	9003      	str	r0, [sp, #12]
 801da56:	4631      	mov	r1, r6
 801da58:	4620      	mov	r0, r4
 801da5a:	f001 f83f 	bl	801eadc <__mdiff>
 801da5e:	68c2      	ldr	r2, [r0, #12]
 801da60:	f109 3bff 	add.w	fp, r9, #4294967295
 801da64:	4605      	mov	r5, r0
 801da66:	bb02      	cbnz	r2, 801daaa <_dtoa_r+0xa62>
 801da68:	4601      	mov	r1, r0
 801da6a:	ee18 0a10 	vmov	r0, s16
 801da6e:	f001 f819 	bl	801eaa4 <__mcmp>
 801da72:	4602      	mov	r2, r0
 801da74:	4629      	mov	r1, r5
 801da76:	4620      	mov	r0, r4
 801da78:	9207      	str	r2, [sp, #28]
 801da7a:	f000 fd87 	bl	801e58c <_Bfree>
 801da7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801da82:	ea43 0102 	orr.w	r1, r3, r2
 801da86:	9b04      	ldr	r3, [sp, #16]
 801da88:	430b      	orrs	r3, r1
 801da8a:	464d      	mov	r5, r9
 801da8c:	d10f      	bne.n	801daae <_dtoa_r+0xa66>
 801da8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801da92:	d02a      	beq.n	801daea <_dtoa_r+0xaa2>
 801da94:	9b03      	ldr	r3, [sp, #12]
 801da96:	2b00      	cmp	r3, #0
 801da98:	dd02      	ble.n	801daa0 <_dtoa_r+0xa58>
 801da9a:	9b02      	ldr	r3, [sp, #8]
 801da9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801daa0:	f88b a000 	strb.w	sl, [fp]
 801daa4:	e775      	b.n	801d992 <_dtoa_r+0x94a>
 801daa6:	4638      	mov	r0, r7
 801daa8:	e7ba      	b.n	801da20 <_dtoa_r+0x9d8>
 801daaa:	2201      	movs	r2, #1
 801daac:	e7e2      	b.n	801da74 <_dtoa_r+0xa2c>
 801daae:	9b03      	ldr	r3, [sp, #12]
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	db04      	blt.n	801dabe <_dtoa_r+0xa76>
 801dab4:	9906      	ldr	r1, [sp, #24]
 801dab6:	430b      	orrs	r3, r1
 801dab8:	9904      	ldr	r1, [sp, #16]
 801daba:	430b      	orrs	r3, r1
 801dabc:	d122      	bne.n	801db04 <_dtoa_r+0xabc>
 801dabe:	2a00      	cmp	r2, #0
 801dac0:	ddee      	ble.n	801daa0 <_dtoa_r+0xa58>
 801dac2:	ee18 1a10 	vmov	r1, s16
 801dac6:	2201      	movs	r2, #1
 801dac8:	4620      	mov	r0, r4
 801daca:	f000 ff7b 	bl	801e9c4 <__lshift>
 801dace:	4631      	mov	r1, r6
 801dad0:	ee08 0a10 	vmov	s16, r0
 801dad4:	f000 ffe6 	bl	801eaa4 <__mcmp>
 801dad8:	2800      	cmp	r0, #0
 801dada:	dc03      	bgt.n	801dae4 <_dtoa_r+0xa9c>
 801dadc:	d1e0      	bne.n	801daa0 <_dtoa_r+0xa58>
 801dade:	f01a 0f01 	tst.w	sl, #1
 801dae2:	d0dd      	beq.n	801daa0 <_dtoa_r+0xa58>
 801dae4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dae8:	d1d7      	bne.n	801da9a <_dtoa_r+0xa52>
 801daea:	2339      	movs	r3, #57	; 0x39
 801daec:	f88b 3000 	strb.w	r3, [fp]
 801daf0:	462b      	mov	r3, r5
 801daf2:	461d      	mov	r5, r3
 801daf4:	3b01      	subs	r3, #1
 801daf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801dafa:	2a39      	cmp	r2, #57	; 0x39
 801dafc:	d071      	beq.n	801dbe2 <_dtoa_r+0xb9a>
 801dafe:	3201      	adds	r2, #1
 801db00:	701a      	strb	r2, [r3, #0]
 801db02:	e746      	b.n	801d992 <_dtoa_r+0x94a>
 801db04:	2a00      	cmp	r2, #0
 801db06:	dd07      	ble.n	801db18 <_dtoa_r+0xad0>
 801db08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801db0c:	d0ed      	beq.n	801daea <_dtoa_r+0xaa2>
 801db0e:	f10a 0301 	add.w	r3, sl, #1
 801db12:	f88b 3000 	strb.w	r3, [fp]
 801db16:	e73c      	b.n	801d992 <_dtoa_r+0x94a>
 801db18:	9b05      	ldr	r3, [sp, #20]
 801db1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801db1e:	4599      	cmp	r9, r3
 801db20:	d047      	beq.n	801dbb2 <_dtoa_r+0xb6a>
 801db22:	ee18 1a10 	vmov	r1, s16
 801db26:	2300      	movs	r3, #0
 801db28:	220a      	movs	r2, #10
 801db2a:	4620      	mov	r0, r4
 801db2c:	f000 fd50 	bl	801e5d0 <__multadd>
 801db30:	45b8      	cmp	r8, r7
 801db32:	ee08 0a10 	vmov	s16, r0
 801db36:	f04f 0300 	mov.w	r3, #0
 801db3a:	f04f 020a 	mov.w	r2, #10
 801db3e:	4641      	mov	r1, r8
 801db40:	4620      	mov	r0, r4
 801db42:	d106      	bne.n	801db52 <_dtoa_r+0xb0a>
 801db44:	f000 fd44 	bl	801e5d0 <__multadd>
 801db48:	4680      	mov	r8, r0
 801db4a:	4607      	mov	r7, r0
 801db4c:	f109 0901 	add.w	r9, r9, #1
 801db50:	e772      	b.n	801da38 <_dtoa_r+0x9f0>
 801db52:	f000 fd3d 	bl	801e5d0 <__multadd>
 801db56:	4639      	mov	r1, r7
 801db58:	4680      	mov	r8, r0
 801db5a:	2300      	movs	r3, #0
 801db5c:	220a      	movs	r2, #10
 801db5e:	4620      	mov	r0, r4
 801db60:	f000 fd36 	bl	801e5d0 <__multadd>
 801db64:	4607      	mov	r7, r0
 801db66:	e7f1      	b.n	801db4c <_dtoa_r+0xb04>
 801db68:	9b03      	ldr	r3, [sp, #12]
 801db6a:	9302      	str	r3, [sp, #8]
 801db6c:	9d01      	ldr	r5, [sp, #4]
 801db6e:	ee18 0a10 	vmov	r0, s16
 801db72:	4631      	mov	r1, r6
 801db74:	f7ff f9da 	bl	801cf2c <quorem>
 801db78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801db7c:	9b01      	ldr	r3, [sp, #4]
 801db7e:	f805 ab01 	strb.w	sl, [r5], #1
 801db82:	1aea      	subs	r2, r5, r3
 801db84:	9b02      	ldr	r3, [sp, #8]
 801db86:	4293      	cmp	r3, r2
 801db88:	dd09      	ble.n	801db9e <_dtoa_r+0xb56>
 801db8a:	ee18 1a10 	vmov	r1, s16
 801db8e:	2300      	movs	r3, #0
 801db90:	220a      	movs	r2, #10
 801db92:	4620      	mov	r0, r4
 801db94:	f000 fd1c 	bl	801e5d0 <__multadd>
 801db98:	ee08 0a10 	vmov	s16, r0
 801db9c:	e7e7      	b.n	801db6e <_dtoa_r+0xb26>
 801db9e:	9b02      	ldr	r3, [sp, #8]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	bfc8      	it	gt
 801dba4:	461d      	movgt	r5, r3
 801dba6:	9b01      	ldr	r3, [sp, #4]
 801dba8:	bfd8      	it	le
 801dbaa:	2501      	movle	r5, #1
 801dbac:	441d      	add	r5, r3
 801dbae:	f04f 0800 	mov.w	r8, #0
 801dbb2:	ee18 1a10 	vmov	r1, s16
 801dbb6:	2201      	movs	r2, #1
 801dbb8:	4620      	mov	r0, r4
 801dbba:	f000 ff03 	bl	801e9c4 <__lshift>
 801dbbe:	4631      	mov	r1, r6
 801dbc0:	ee08 0a10 	vmov	s16, r0
 801dbc4:	f000 ff6e 	bl	801eaa4 <__mcmp>
 801dbc8:	2800      	cmp	r0, #0
 801dbca:	dc91      	bgt.n	801daf0 <_dtoa_r+0xaa8>
 801dbcc:	d102      	bne.n	801dbd4 <_dtoa_r+0xb8c>
 801dbce:	f01a 0f01 	tst.w	sl, #1
 801dbd2:	d18d      	bne.n	801daf0 <_dtoa_r+0xaa8>
 801dbd4:	462b      	mov	r3, r5
 801dbd6:	461d      	mov	r5, r3
 801dbd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dbdc:	2a30      	cmp	r2, #48	; 0x30
 801dbde:	d0fa      	beq.n	801dbd6 <_dtoa_r+0xb8e>
 801dbe0:	e6d7      	b.n	801d992 <_dtoa_r+0x94a>
 801dbe2:	9a01      	ldr	r2, [sp, #4]
 801dbe4:	429a      	cmp	r2, r3
 801dbe6:	d184      	bne.n	801daf2 <_dtoa_r+0xaaa>
 801dbe8:	9b00      	ldr	r3, [sp, #0]
 801dbea:	3301      	adds	r3, #1
 801dbec:	9300      	str	r3, [sp, #0]
 801dbee:	2331      	movs	r3, #49	; 0x31
 801dbf0:	7013      	strb	r3, [r2, #0]
 801dbf2:	e6ce      	b.n	801d992 <_dtoa_r+0x94a>
 801dbf4:	4b09      	ldr	r3, [pc, #36]	; (801dc1c <_dtoa_r+0xbd4>)
 801dbf6:	f7ff ba95 	b.w	801d124 <_dtoa_r+0xdc>
 801dbfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	f47f aa6e 	bne.w	801d0de <_dtoa_r+0x96>
 801dc02:	4b07      	ldr	r3, [pc, #28]	; (801dc20 <_dtoa_r+0xbd8>)
 801dc04:	f7ff ba8e 	b.w	801d124 <_dtoa_r+0xdc>
 801dc08:	9b02      	ldr	r3, [sp, #8]
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	dcae      	bgt.n	801db6c <_dtoa_r+0xb24>
 801dc0e:	9b06      	ldr	r3, [sp, #24]
 801dc10:	2b02      	cmp	r3, #2
 801dc12:	f73f aea8 	bgt.w	801d966 <_dtoa_r+0x91e>
 801dc16:	e7a9      	b.n	801db6c <_dtoa_r+0xb24>
 801dc18:	080220b8 	.word	0x080220b8
 801dc1c:	08021eb8 	.word	0x08021eb8
 801dc20:	08022039 	.word	0x08022039

0801dc24 <__errno>:
 801dc24:	4b01      	ldr	r3, [pc, #4]	; (801dc2c <__errno+0x8>)
 801dc26:	6818      	ldr	r0, [r3, #0]
 801dc28:	4770      	bx	lr
 801dc2a:	bf00      	nop
 801dc2c:	2000010c 	.word	0x2000010c

0801dc30 <__sflush_r>:
 801dc30:	898a      	ldrh	r2, [r1, #12]
 801dc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc36:	4605      	mov	r5, r0
 801dc38:	0710      	lsls	r0, r2, #28
 801dc3a:	460c      	mov	r4, r1
 801dc3c:	d458      	bmi.n	801dcf0 <__sflush_r+0xc0>
 801dc3e:	684b      	ldr	r3, [r1, #4]
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	dc05      	bgt.n	801dc50 <__sflush_r+0x20>
 801dc44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	dc02      	bgt.n	801dc50 <__sflush_r+0x20>
 801dc4a:	2000      	movs	r0, #0
 801dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc52:	2e00      	cmp	r6, #0
 801dc54:	d0f9      	beq.n	801dc4a <__sflush_r+0x1a>
 801dc56:	2300      	movs	r3, #0
 801dc58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc5c:	682f      	ldr	r7, [r5, #0]
 801dc5e:	602b      	str	r3, [r5, #0]
 801dc60:	d032      	beq.n	801dcc8 <__sflush_r+0x98>
 801dc62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc64:	89a3      	ldrh	r3, [r4, #12]
 801dc66:	075a      	lsls	r2, r3, #29
 801dc68:	d505      	bpl.n	801dc76 <__sflush_r+0x46>
 801dc6a:	6863      	ldr	r3, [r4, #4]
 801dc6c:	1ac0      	subs	r0, r0, r3
 801dc6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc70:	b10b      	cbz	r3, 801dc76 <__sflush_r+0x46>
 801dc72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc74:	1ac0      	subs	r0, r0, r3
 801dc76:	2300      	movs	r3, #0
 801dc78:	4602      	mov	r2, r0
 801dc7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc7c:	6a21      	ldr	r1, [r4, #32]
 801dc7e:	4628      	mov	r0, r5
 801dc80:	47b0      	blx	r6
 801dc82:	1c43      	adds	r3, r0, #1
 801dc84:	89a3      	ldrh	r3, [r4, #12]
 801dc86:	d106      	bne.n	801dc96 <__sflush_r+0x66>
 801dc88:	6829      	ldr	r1, [r5, #0]
 801dc8a:	291d      	cmp	r1, #29
 801dc8c:	d82c      	bhi.n	801dce8 <__sflush_r+0xb8>
 801dc8e:	4a2a      	ldr	r2, [pc, #168]	; (801dd38 <__sflush_r+0x108>)
 801dc90:	40ca      	lsrs	r2, r1
 801dc92:	07d6      	lsls	r6, r2, #31
 801dc94:	d528      	bpl.n	801dce8 <__sflush_r+0xb8>
 801dc96:	2200      	movs	r2, #0
 801dc98:	6062      	str	r2, [r4, #4]
 801dc9a:	04d9      	lsls	r1, r3, #19
 801dc9c:	6922      	ldr	r2, [r4, #16]
 801dc9e:	6022      	str	r2, [r4, #0]
 801dca0:	d504      	bpl.n	801dcac <__sflush_r+0x7c>
 801dca2:	1c42      	adds	r2, r0, #1
 801dca4:	d101      	bne.n	801dcaa <__sflush_r+0x7a>
 801dca6:	682b      	ldr	r3, [r5, #0]
 801dca8:	b903      	cbnz	r3, 801dcac <__sflush_r+0x7c>
 801dcaa:	6560      	str	r0, [r4, #84]	; 0x54
 801dcac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dcae:	602f      	str	r7, [r5, #0]
 801dcb0:	2900      	cmp	r1, #0
 801dcb2:	d0ca      	beq.n	801dc4a <__sflush_r+0x1a>
 801dcb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dcb8:	4299      	cmp	r1, r3
 801dcba:	d002      	beq.n	801dcc2 <__sflush_r+0x92>
 801dcbc:	4628      	mov	r0, r5
 801dcbe:	f001 f8fd 	bl	801eebc <_free_r>
 801dcc2:	2000      	movs	r0, #0
 801dcc4:	6360      	str	r0, [r4, #52]	; 0x34
 801dcc6:	e7c1      	b.n	801dc4c <__sflush_r+0x1c>
 801dcc8:	6a21      	ldr	r1, [r4, #32]
 801dcca:	2301      	movs	r3, #1
 801dccc:	4628      	mov	r0, r5
 801dcce:	47b0      	blx	r6
 801dcd0:	1c41      	adds	r1, r0, #1
 801dcd2:	d1c7      	bne.n	801dc64 <__sflush_r+0x34>
 801dcd4:	682b      	ldr	r3, [r5, #0]
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d0c4      	beq.n	801dc64 <__sflush_r+0x34>
 801dcda:	2b1d      	cmp	r3, #29
 801dcdc:	d001      	beq.n	801dce2 <__sflush_r+0xb2>
 801dcde:	2b16      	cmp	r3, #22
 801dce0:	d101      	bne.n	801dce6 <__sflush_r+0xb6>
 801dce2:	602f      	str	r7, [r5, #0]
 801dce4:	e7b1      	b.n	801dc4a <__sflush_r+0x1a>
 801dce6:	89a3      	ldrh	r3, [r4, #12]
 801dce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcec:	81a3      	strh	r3, [r4, #12]
 801dcee:	e7ad      	b.n	801dc4c <__sflush_r+0x1c>
 801dcf0:	690f      	ldr	r7, [r1, #16]
 801dcf2:	2f00      	cmp	r7, #0
 801dcf4:	d0a9      	beq.n	801dc4a <__sflush_r+0x1a>
 801dcf6:	0793      	lsls	r3, r2, #30
 801dcf8:	680e      	ldr	r6, [r1, #0]
 801dcfa:	bf08      	it	eq
 801dcfc:	694b      	ldreq	r3, [r1, #20]
 801dcfe:	600f      	str	r7, [r1, #0]
 801dd00:	bf18      	it	ne
 801dd02:	2300      	movne	r3, #0
 801dd04:	eba6 0807 	sub.w	r8, r6, r7
 801dd08:	608b      	str	r3, [r1, #8]
 801dd0a:	f1b8 0f00 	cmp.w	r8, #0
 801dd0e:	dd9c      	ble.n	801dc4a <__sflush_r+0x1a>
 801dd10:	6a21      	ldr	r1, [r4, #32]
 801dd12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dd14:	4643      	mov	r3, r8
 801dd16:	463a      	mov	r2, r7
 801dd18:	4628      	mov	r0, r5
 801dd1a:	47b0      	blx	r6
 801dd1c:	2800      	cmp	r0, #0
 801dd1e:	dc06      	bgt.n	801dd2e <__sflush_r+0xfe>
 801dd20:	89a3      	ldrh	r3, [r4, #12]
 801dd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd26:	81a3      	strh	r3, [r4, #12]
 801dd28:	f04f 30ff 	mov.w	r0, #4294967295
 801dd2c:	e78e      	b.n	801dc4c <__sflush_r+0x1c>
 801dd2e:	4407      	add	r7, r0
 801dd30:	eba8 0800 	sub.w	r8, r8, r0
 801dd34:	e7e9      	b.n	801dd0a <__sflush_r+0xda>
 801dd36:	bf00      	nop
 801dd38:	20400001 	.word	0x20400001

0801dd3c <_fflush_r>:
 801dd3c:	b538      	push	{r3, r4, r5, lr}
 801dd3e:	690b      	ldr	r3, [r1, #16]
 801dd40:	4605      	mov	r5, r0
 801dd42:	460c      	mov	r4, r1
 801dd44:	b913      	cbnz	r3, 801dd4c <_fflush_r+0x10>
 801dd46:	2500      	movs	r5, #0
 801dd48:	4628      	mov	r0, r5
 801dd4a:	bd38      	pop	{r3, r4, r5, pc}
 801dd4c:	b118      	cbz	r0, 801dd56 <_fflush_r+0x1a>
 801dd4e:	6983      	ldr	r3, [r0, #24]
 801dd50:	b90b      	cbnz	r3, 801dd56 <_fflush_r+0x1a>
 801dd52:	f7fd f91b 	bl	801af8c <__sinit>
 801dd56:	4b14      	ldr	r3, [pc, #80]	; (801dda8 <_fflush_r+0x6c>)
 801dd58:	429c      	cmp	r4, r3
 801dd5a:	d11b      	bne.n	801dd94 <_fflush_r+0x58>
 801dd5c:	686c      	ldr	r4, [r5, #4]
 801dd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d0ef      	beq.n	801dd46 <_fflush_r+0xa>
 801dd66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd68:	07d0      	lsls	r0, r2, #31
 801dd6a:	d404      	bmi.n	801dd76 <_fflush_r+0x3a>
 801dd6c:	0599      	lsls	r1, r3, #22
 801dd6e:	d402      	bmi.n	801dd76 <_fflush_r+0x3a>
 801dd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd72:	f7fd f9ce 	bl	801b112 <__retarget_lock_acquire_recursive>
 801dd76:	4628      	mov	r0, r5
 801dd78:	4621      	mov	r1, r4
 801dd7a:	f7ff ff59 	bl	801dc30 <__sflush_r>
 801dd7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd80:	07da      	lsls	r2, r3, #31
 801dd82:	4605      	mov	r5, r0
 801dd84:	d4e0      	bmi.n	801dd48 <_fflush_r+0xc>
 801dd86:	89a3      	ldrh	r3, [r4, #12]
 801dd88:	059b      	lsls	r3, r3, #22
 801dd8a:	d4dd      	bmi.n	801dd48 <_fflush_r+0xc>
 801dd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd8e:	f7fd f9c1 	bl	801b114 <__retarget_lock_release_recursive>
 801dd92:	e7d9      	b.n	801dd48 <_fflush_r+0xc>
 801dd94:	4b05      	ldr	r3, [pc, #20]	; (801ddac <_fflush_r+0x70>)
 801dd96:	429c      	cmp	r4, r3
 801dd98:	d101      	bne.n	801dd9e <_fflush_r+0x62>
 801dd9a:	68ac      	ldr	r4, [r5, #8]
 801dd9c:	e7df      	b.n	801dd5e <_fflush_r+0x22>
 801dd9e:	4b04      	ldr	r3, [pc, #16]	; (801ddb0 <_fflush_r+0x74>)
 801dda0:	429c      	cmp	r4, r3
 801dda2:	bf08      	it	eq
 801dda4:	68ec      	ldreq	r4, [r5, #12]
 801dda6:	e7da      	b.n	801dd5e <_fflush_r+0x22>
 801dda8:	08021e64 	.word	0x08021e64
 801ddac:	08021e84 	.word	0x08021e84
 801ddb0:	08021e44 	.word	0x08021e44

0801ddb4 <rshift>:
 801ddb4:	6903      	ldr	r3, [r0, #16]
 801ddb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ddba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ddc2:	f100 0414 	add.w	r4, r0, #20
 801ddc6:	dd45      	ble.n	801de54 <rshift+0xa0>
 801ddc8:	f011 011f 	ands.w	r1, r1, #31
 801ddcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ddd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ddd4:	d10c      	bne.n	801ddf0 <rshift+0x3c>
 801ddd6:	f100 0710 	add.w	r7, r0, #16
 801ddda:	4629      	mov	r1, r5
 801dddc:	42b1      	cmp	r1, r6
 801ddde:	d334      	bcc.n	801de4a <rshift+0x96>
 801dde0:	1a9b      	subs	r3, r3, r2
 801dde2:	009b      	lsls	r3, r3, #2
 801dde4:	1eea      	subs	r2, r5, #3
 801dde6:	4296      	cmp	r6, r2
 801dde8:	bf38      	it	cc
 801ddea:	2300      	movcc	r3, #0
 801ddec:	4423      	add	r3, r4
 801ddee:	e015      	b.n	801de1c <rshift+0x68>
 801ddf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ddf4:	f1c1 0820 	rsb	r8, r1, #32
 801ddf8:	40cf      	lsrs	r7, r1
 801ddfa:	f105 0e04 	add.w	lr, r5, #4
 801ddfe:	46a1      	mov	r9, r4
 801de00:	4576      	cmp	r6, lr
 801de02:	46f4      	mov	ip, lr
 801de04:	d815      	bhi.n	801de32 <rshift+0x7e>
 801de06:	1a9a      	subs	r2, r3, r2
 801de08:	0092      	lsls	r2, r2, #2
 801de0a:	3a04      	subs	r2, #4
 801de0c:	3501      	adds	r5, #1
 801de0e:	42ae      	cmp	r6, r5
 801de10:	bf38      	it	cc
 801de12:	2200      	movcc	r2, #0
 801de14:	18a3      	adds	r3, r4, r2
 801de16:	50a7      	str	r7, [r4, r2]
 801de18:	b107      	cbz	r7, 801de1c <rshift+0x68>
 801de1a:	3304      	adds	r3, #4
 801de1c:	1b1a      	subs	r2, r3, r4
 801de1e:	42a3      	cmp	r3, r4
 801de20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801de24:	bf08      	it	eq
 801de26:	2300      	moveq	r3, #0
 801de28:	6102      	str	r2, [r0, #16]
 801de2a:	bf08      	it	eq
 801de2c:	6143      	streq	r3, [r0, #20]
 801de2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de32:	f8dc c000 	ldr.w	ip, [ip]
 801de36:	fa0c fc08 	lsl.w	ip, ip, r8
 801de3a:	ea4c 0707 	orr.w	r7, ip, r7
 801de3e:	f849 7b04 	str.w	r7, [r9], #4
 801de42:	f85e 7b04 	ldr.w	r7, [lr], #4
 801de46:	40cf      	lsrs	r7, r1
 801de48:	e7da      	b.n	801de00 <rshift+0x4c>
 801de4a:	f851 cb04 	ldr.w	ip, [r1], #4
 801de4e:	f847 cf04 	str.w	ip, [r7, #4]!
 801de52:	e7c3      	b.n	801dddc <rshift+0x28>
 801de54:	4623      	mov	r3, r4
 801de56:	e7e1      	b.n	801de1c <rshift+0x68>

0801de58 <__hexdig_fun>:
 801de58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801de5c:	2b09      	cmp	r3, #9
 801de5e:	d802      	bhi.n	801de66 <__hexdig_fun+0xe>
 801de60:	3820      	subs	r0, #32
 801de62:	b2c0      	uxtb	r0, r0
 801de64:	4770      	bx	lr
 801de66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801de6a:	2b05      	cmp	r3, #5
 801de6c:	d801      	bhi.n	801de72 <__hexdig_fun+0x1a>
 801de6e:	3847      	subs	r0, #71	; 0x47
 801de70:	e7f7      	b.n	801de62 <__hexdig_fun+0xa>
 801de72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801de76:	2b05      	cmp	r3, #5
 801de78:	d801      	bhi.n	801de7e <__hexdig_fun+0x26>
 801de7a:	3827      	subs	r0, #39	; 0x27
 801de7c:	e7f1      	b.n	801de62 <__hexdig_fun+0xa>
 801de7e:	2000      	movs	r0, #0
 801de80:	4770      	bx	lr
	...

0801de84 <__gethex>:
 801de84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de88:	ed2d 8b02 	vpush	{d8}
 801de8c:	b089      	sub	sp, #36	; 0x24
 801de8e:	ee08 0a10 	vmov	s16, r0
 801de92:	9304      	str	r3, [sp, #16]
 801de94:	4bb4      	ldr	r3, [pc, #720]	; (801e168 <__gethex+0x2e4>)
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	9301      	str	r3, [sp, #4]
 801de9a:	4618      	mov	r0, r3
 801de9c:	468b      	mov	fp, r1
 801de9e:	4690      	mov	r8, r2
 801dea0:	f7e2 f996 	bl	80001d0 <strlen>
 801dea4:	9b01      	ldr	r3, [sp, #4]
 801dea6:	f8db 2000 	ldr.w	r2, [fp]
 801deaa:	4403      	add	r3, r0
 801deac:	4682      	mov	sl, r0
 801deae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801deb2:	9305      	str	r3, [sp, #20]
 801deb4:	1c93      	adds	r3, r2, #2
 801deb6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801deba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801debe:	32fe      	adds	r2, #254	; 0xfe
 801dec0:	18d1      	adds	r1, r2, r3
 801dec2:	461f      	mov	r7, r3
 801dec4:	f813 0b01 	ldrb.w	r0, [r3], #1
 801dec8:	9100      	str	r1, [sp, #0]
 801deca:	2830      	cmp	r0, #48	; 0x30
 801decc:	d0f8      	beq.n	801dec0 <__gethex+0x3c>
 801dece:	f7ff ffc3 	bl	801de58 <__hexdig_fun>
 801ded2:	4604      	mov	r4, r0
 801ded4:	2800      	cmp	r0, #0
 801ded6:	d13a      	bne.n	801df4e <__gethex+0xca>
 801ded8:	9901      	ldr	r1, [sp, #4]
 801deda:	4652      	mov	r2, sl
 801dedc:	4638      	mov	r0, r7
 801dede:	f001 f9af 	bl	801f240 <strncmp>
 801dee2:	4605      	mov	r5, r0
 801dee4:	2800      	cmp	r0, #0
 801dee6:	d168      	bne.n	801dfba <__gethex+0x136>
 801dee8:	f817 000a 	ldrb.w	r0, [r7, sl]
 801deec:	eb07 060a 	add.w	r6, r7, sl
 801def0:	f7ff ffb2 	bl	801de58 <__hexdig_fun>
 801def4:	2800      	cmp	r0, #0
 801def6:	d062      	beq.n	801dfbe <__gethex+0x13a>
 801def8:	4633      	mov	r3, r6
 801defa:	7818      	ldrb	r0, [r3, #0]
 801defc:	2830      	cmp	r0, #48	; 0x30
 801defe:	461f      	mov	r7, r3
 801df00:	f103 0301 	add.w	r3, r3, #1
 801df04:	d0f9      	beq.n	801defa <__gethex+0x76>
 801df06:	f7ff ffa7 	bl	801de58 <__hexdig_fun>
 801df0a:	2301      	movs	r3, #1
 801df0c:	fab0 f480 	clz	r4, r0
 801df10:	0964      	lsrs	r4, r4, #5
 801df12:	4635      	mov	r5, r6
 801df14:	9300      	str	r3, [sp, #0]
 801df16:	463a      	mov	r2, r7
 801df18:	4616      	mov	r6, r2
 801df1a:	3201      	adds	r2, #1
 801df1c:	7830      	ldrb	r0, [r6, #0]
 801df1e:	f7ff ff9b 	bl	801de58 <__hexdig_fun>
 801df22:	2800      	cmp	r0, #0
 801df24:	d1f8      	bne.n	801df18 <__gethex+0x94>
 801df26:	9901      	ldr	r1, [sp, #4]
 801df28:	4652      	mov	r2, sl
 801df2a:	4630      	mov	r0, r6
 801df2c:	f001 f988 	bl	801f240 <strncmp>
 801df30:	b980      	cbnz	r0, 801df54 <__gethex+0xd0>
 801df32:	b94d      	cbnz	r5, 801df48 <__gethex+0xc4>
 801df34:	eb06 050a 	add.w	r5, r6, sl
 801df38:	462a      	mov	r2, r5
 801df3a:	4616      	mov	r6, r2
 801df3c:	3201      	adds	r2, #1
 801df3e:	7830      	ldrb	r0, [r6, #0]
 801df40:	f7ff ff8a 	bl	801de58 <__hexdig_fun>
 801df44:	2800      	cmp	r0, #0
 801df46:	d1f8      	bne.n	801df3a <__gethex+0xb6>
 801df48:	1bad      	subs	r5, r5, r6
 801df4a:	00ad      	lsls	r5, r5, #2
 801df4c:	e004      	b.n	801df58 <__gethex+0xd4>
 801df4e:	2400      	movs	r4, #0
 801df50:	4625      	mov	r5, r4
 801df52:	e7e0      	b.n	801df16 <__gethex+0x92>
 801df54:	2d00      	cmp	r5, #0
 801df56:	d1f7      	bne.n	801df48 <__gethex+0xc4>
 801df58:	7833      	ldrb	r3, [r6, #0]
 801df5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801df5e:	2b50      	cmp	r3, #80	; 0x50
 801df60:	d13b      	bne.n	801dfda <__gethex+0x156>
 801df62:	7873      	ldrb	r3, [r6, #1]
 801df64:	2b2b      	cmp	r3, #43	; 0x2b
 801df66:	d02c      	beq.n	801dfc2 <__gethex+0x13e>
 801df68:	2b2d      	cmp	r3, #45	; 0x2d
 801df6a:	d02e      	beq.n	801dfca <__gethex+0x146>
 801df6c:	1c71      	adds	r1, r6, #1
 801df6e:	f04f 0900 	mov.w	r9, #0
 801df72:	7808      	ldrb	r0, [r1, #0]
 801df74:	f7ff ff70 	bl	801de58 <__hexdig_fun>
 801df78:	1e43      	subs	r3, r0, #1
 801df7a:	b2db      	uxtb	r3, r3
 801df7c:	2b18      	cmp	r3, #24
 801df7e:	d82c      	bhi.n	801dfda <__gethex+0x156>
 801df80:	f1a0 0210 	sub.w	r2, r0, #16
 801df84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801df88:	f7ff ff66 	bl	801de58 <__hexdig_fun>
 801df8c:	1e43      	subs	r3, r0, #1
 801df8e:	b2db      	uxtb	r3, r3
 801df90:	2b18      	cmp	r3, #24
 801df92:	d91d      	bls.n	801dfd0 <__gethex+0x14c>
 801df94:	f1b9 0f00 	cmp.w	r9, #0
 801df98:	d000      	beq.n	801df9c <__gethex+0x118>
 801df9a:	4252      	negs	r2, r2
 801df9c:	4415      	add	r5, r2
 801df9e:	f8cb 1000 	str.w	r1, [fp]
 801dfa2:	b1e4      	cbz	r4, 801dfde <__gethex+0x15a>
 801dfa4:	9b00      	ldr	r3, [sp, #0]
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	bf14      	ite	ne
 801dfaa:	2700      	movne	r7, #0
 801dfac:	2706      	moveq	r7, #6
 801dfae:	4638      	mov	r0, r7
 801dfb0:	b009      	add	sp, #36	; 0x24
 801dfb2:	ecbd 8b02 	vpop	{d8}
 801dfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfba:	463e      	mov	r6, r7
 801dfbc:	4625      	mov	r5, r4
 801dfbe:	2401      	movs	r4, #1
 801dfc0:	e7ca      	b.n	801df58 <__gethex+0xd4>
 801dfc2:	f04f 0900 	mov.w	r9, #0
 801dfc6:	1cb1      	adds	r1, r6, #2
 801dfc8:	e7d3      	b.n	801df72 <__gethex+0xee>
 801dfca:	f04f 0901 	mov.w	r9, #1
 801dfce:	e7fa      	b.n	801dfc6 <__gethex+0x142>
 801dfd0:	230a      	movs	r3, #10
 801dfd2:	fb03 0202 	mla	r2, r3, r2, r0
 801dfd6:	3a10      	subs	r2, #16
 801dfd8:	e7d4      	b.n	801df84 <__gethex+0x100>
 801dfda:	4631      	mov	r1, r6
 801dfdc:	e7df      	b.n	801df9e <__gethex+0x11a>
 801dfde:	1bf3      	subs	r3, r6, r7
 801dfe0:	3b01      	subs	r3, #1
 801dfe2:	4621      	mov	r1, r4
 801dfe4:	2b07      	cmp	r3, #7
 801dfe6:	dc0b      	bgt.n	801e000 <__gethex+0x17c>
 801dfe8:	ee18 0a10 	vmov	r0, s16
 801dfec:	f000 fa8e 	bl	801e50c <_Balloc>
 801dff0:	4604      	mov	r4, r0
 801dff2:	b940      	cbnz	r0, 801e006 <__gethex+0x182>
 801dff4:	4b5d      	ldr	r3, [pc, #372]	; (801e16c <__gethex+0x2e8>)
 801dff6:	4602      	mov	r2, r0
 801dff8:	21de      	movs	r1, #222	; 0xde
 801dffa:	485d      	ldr	r0, [pc, #372]	; (801e170 <__gethex+0x2ec>)
 801dffc:	f001 f942 	bl	801f284 <__assert_func>
 801e000:	3101      	adds	r1, #1
 801e002:	105b      	asrs	r3, r3, #1
 801e004:	e7ee      	b.n	801dfe4 <__gethex+0x160>
 801e006:	f100 0914 	add.w	r9, r0, #20
 801e00a:	f04f 0b00 	mov.w	fp, #0
 801e00e:	f1ca 0301 	rsb	r3, sl, #1
 801e012:	f8cd 9008 	str.w	r9, [sp, #8]
 801e016:	f8cd b000 	str.w	fp, [sp]
 801e01a:	9306      	str	r3, [sp, #24]
 801e01c:	42b7      	cmp	r7, r6
 801e01e:	d340      	bcc.n	801e0a2 <__gethex+0x21e>
 801e020:	9802      	ldr	r0, [sp, #8]
 801e022:	9b00      	ldr	r3, [sp, #0]
 801e024:	f840 3b04 	str.w	r3, [r0], #4
 801e028:	eba0 0009 	sub.w	r0, r0, r9
 801e02c:	1080      	asrs	r0, r0, #2
 801e02e:	0146      	lsls	r6, r0, #5
 801e030:	6120      	str	r0, [r4, #16]
 801e032:	4618      	mov	r0, r3
 801e034:	f000 fb5c 	bl	801e6f0 <__hi0bits>
 801e038:	1a30      	subs	r0, r6, r0
 801e03a:	f8d8 6000 	ldr.w	r6, [r8]
 801e03e:	42b0      	cmp	r0, r6
 801e040:	dd63      	ble.n	801e10a <__gethex+0x286>
 801e042:	1b87      	subs	r7, r0, r6
 801e044:	4639      	mov	r1, r7
 801e046:	4620      	mov	r0, r4
 801e048:	f000 ff00 	bl	801ee4c <__any_on>
 801e04c:	4682      	mov	sl, r0
 801e04e:	b1a8      	cbz	r0, 801e07c <__gethex+0x1f8>
 801e050:	1e7b      	subs	r3, r7, #1
 801e052:	1159      	asrs	r1, r3, #5
 801e054:	f003 021f 	and.w	r2, r3, #31
 801e058:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e05c:	f04f 0a01 	mov.w	sl, #1
 801e060:	fa0a f202 	lsl.w	r2, sl, r2
 801e064:	420a      	tst	r2, r1
 801e066:	d009      	beq.n	801e07c <__gethex+0x1f8>
 801e068:	4553      	cmp	r3, sl
 801e06a:	dd05      	ble.n	801e078 <__gethex+0x1f4>
 801e06c:	1eb9      	subs	r1, r7, #2
 801e06e:	4620      	mov	r0, r4
 801e070:	f000 feec 	bl	801ee4c <__any_on>
 801e074:	2800      	cmp	r0, #0
 801e076:	d145      	bne.n	801e104 <__gethex+0x280>
 801e078:	f04f 0a02 	mov.w	sl, #2
 801e07c:	4639      	mov	r1, r7
 801e07e:	4620      	mov	r0, r4
 801e080:	f7ff fe98 	bl	801ddb4 <rshift>
 801e084:	443d      	add	r5, r7
 801e086:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e08a:	42ab      	cmp	r3, r5
 801e08c:	da4c      	bge.n	801e128 <__gethex+0x2a4>
 801e08e:	ee18 0a10 	vmov	r0, s16
 801e092:	4621      	mov	r1, r4
 801e094:	f000 fa7a 	bl	801e58c <_Bfree>
 801e098:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e09a:	2300      	movs	r3, #0
 801e09c:	6013      	str	r3, [r2, #0]
 801e09e:	27a3      	movs	r7, #163	; 0xa3
 801e0a0:	e785      	b.n	801dfae <__gethex+0x12a>
 801e0a2:	1e73      	subs	r3, r6, #1
 801e0a4:	9a05      	ldr	r2, [sp, #20]
 801e0a6:	9303      	str	r3, [sp, #12]
 801e0a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e0ac:	4293      	cmp	r3, r2
 801e0ae:	d019      	beq.n	801e0e4 <__gethex+0x260>
 801e0b0:	f1bb 0f20 	cmp.w	fp, #32
 801e0b4:	d107      	bne.n	801e0c6 <__gethex+0x242>
 801e0b6:	9b02      	ldr	r3, [sp, #8]
 801e0b8:	9a00      	ldr	r2, [sp, #0]
 801e0ba:	f843 2b04 	str.w	r2, [r3], #4
 801e0be:	9302      	str	r3, [sp, #8]
 801e0c0:	2300      	movs	r3, #0
 801e0c2:	9300      	str	r3, [sp, #0]
 801e0c4:	469b      	mov	fp, r3
 801e0c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e0ca:	f7ff fec5 	bl	801de58 <__hexdig_fun>
 801e0ce:	9b00      	ldr	r3, [sp, #0]
 801e0d0:	f000 000f 	and.w	r0, r0, #15
 801e0d4:	fa00 f00b 	lsl.w	r0, r0, fp
 801e0d8:	4303      	orrs	r3, r0
 801e0da:	9300      	str	r3, [sp, #0]
 801e0dc:	f10b 0b04 	add.w	fp, fp, #4
 801e0e0:	9b03      	ldr	r3, [sp, #12]
 801e0e2:	e00d      	b.n	801e100 <__gethex+0x27c>
 801e0e4:	9b03      	ldr	r3, [sp, #12]
 801e0e6:	9a06      	ldr	r2, [sp, #24]
 801e0e8:	4413      	add	r3, r2
 801e0ea:	42bb      	cmp	r3, r7
 801e0ec:	d3e0      	bcc.n	801e0b0 <__gethex+0x22c>
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	9901      	ldr	r1, [sp, #4]
 801e0f2:	9307      	str	r3, [sp, #28]
 801e0f4:	4652      	mov	r2, sl
 801e0f6:	f001 f8a3 	bl	801f240 <strncmp>
 801e0fa:	9b07      	ldr	r3, [sp, #28]
 801e0fc:	2800      	cmp	r0, #0
 801e0fe:	d1d7      	bne.n	801e0b0 <__gethex+0x22c>
 801e100:	461e      	mov	r6, r3
 801e102:	e78b      	b.n	801e01c <__gethex+0x198>
 801e104:	f04f 0a03 	mov.w	sl, #3
 801e108:	e7b8      	b.n	801e07c <__gethex+0x1f8>
 801e10a:	da0a      	bge.n	801e122 <__gethex+0x29e>
 801e10c:	1a37      	subs	r7, r6, r0
 801e10e:	4621      	mov	r1, r4
 801e110:	ee18 0a10 	vmov	r0, s16
 801e114:	463a      	mov	r2, r7
 801e116:	f000 fc55 	bl	801e9c4 <__lshift>
 801e11a:	1bed      	subs	r5, r5, r7
 801e11c:	4604      	mov	r4, r0
 801e11e:	f100 0914 	add.w	r9, r0, #20
 801e122:	f04f 0a00 	mov.w	sl, #0
 801e126:	e7ae      	b.n	801e086 <__gethex+0x202>
 801e128:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e12c:	42a8      	cmp	r0, r5
 801e12e:	dd72      	ble.n	801e216 <__gethex+0x392>
 801e130:	1b45      	subs	r5, r0, r5
 801e132:	42ae      	cmp	r6, r5
 801e134:	dc36      	bgt.n	801e1a4 <__gethex+0x320>
 801e136:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e13a:	2b02      	cmp	r3, #2
 801e13c:	d02a      	beq.n	801e194 <__gethex+0x310>
 801e13e:	2b03      	cmp	r3, #3
 801e140:	d02c      	beq.n	801e19c <__gethex+0x318>
 801e142:	2b01      	cmp	r3, #1
 801e144:	d11c      	bne.n	801e180 <__gethex+0x2fc>
 801e146:	42ae      	cmp	r6, r5
 801e148:	d11a      	bne.n	801e180 <__gethex+0x2fc>
 801e14a:	2e01      	cmp	r6, #1
 801e14c:	d112      	bne.n	801e174 <__gethex+0x2f0>
 801e14e:	9a04      	ldr	r2, [sp, #16]
 801e150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e154:	6013      	str	r3, [r2, #0]
 801e156:	2301      	movs	r3, #1
 801e158:	6123      	str	r3, [r4, #16]
 801e15a:	f8c9 3000 	str.w	r3, [r9]
 801e15e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e160:	2762      	movs	r7, #98	; 0x62
 801e162:	601c      	str	r4, [r3, #0]
 801e164:	e723      	b.n	801dfae <__gethex+0x12a>
 801e166:	bf00      	nop
 801e168:	08022130 	.word	0x08022130
 801e16c:	080220b8 	.word	0x080220b8
 801e170:	080220c9 	.word	0x080220c9
 801e174:	1e71      	subs	r1, r6, #1
 801e176:	4620      	mov	r0, r4
 801e178:	f000 fe68 	bl	801ee4c <__any_on>
 801e17c:	2800      	cmp	r0, #0
 801e17e:	d1e6      	bne.n	801e14e <__gethex+0x2ca>
 801e180:	ee18 0a10 	vmov	r0, s16
 801e184:	4621      	mov	r1, r4
 801e186:	f000 fa01 	bl	801e58c <_Bfree>
 801e18a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e18c:	2300      	movs	r3, #0
 801e18e:	6013      	str	r3, [r2, #0]
 801e190:	2750      	movs	r7, #80	; 0x50
 801e192:	e70c      	b.n	801dfae <__gethex+0x12a>
 801e194:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e196:	2b00      	cmp	r3, #0
 801e198:	d1f2      	bne.n	801e180 <__gethex+0x2fc>
 801e19a:	e7d8      	b.n	801e14e <__gethex+0x2ca>
 801e19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	d1d5      	bne.n	801e14e <__gethex+0x2ca>
 801e1a2:	e7ed      	b.n	801e180 <__gethex+0x2fc>
 801e1a4:	1e6f      	subs	r7, r5, #1
 801e1a6:	f1ba 0f00 	cmp.w	sl, #0
 801e1aa:	d131      	bne.n	801e210 <__gethex+0x38c>
 801e1ac:	b127      	cbz	r7, 801e1b8 <__gethex+0x334>
 801e1ae:	4639      	mov	r1, r7
 801e1b0:	4620      	mov	r0, r4
 801e1b2:	f000 fe4b 	bl	801ee4c <__any_on>
 801e1b6:	4682      	mov	sl, r0
 801e1b8:	117b      	asrs	r3, r7, #5
 801e1ba:	2101      	movs	r1, #1
 801e1bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e1c0:	f007 071f 	and.w	r7, r7, #31
 801e1c4:	fa01 f707 	lsl.w	r7, r1, r7
 801e1c8:	421f      	tst	r7, r3
 801e1ca:	4629      	mov	r1, r5
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	bf18      	it	ne
 801e1d0:	f04a 0a02 	orrne.w	sl, sl, #2
 801e1d4:	1b76      	subs	r6, r6, r5
 801e1d6:	f7ff fded 	bl	801ddb4 <rshift>
 801e1da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e1de:	2702      	movs	r7, #2
 801e1e0:	f1ba 0f00 	cmp.w	sl, #0
 801e1e4:	d048      	beq.n	801e278 <__gethex+0x3f4>
 801e1e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e1ea:	2b02      	cmp	r3, #2
 801e1ec:	d015      	beq.n	801e21a <__gethex+0x396>
 801e1ee:	2b03      	cmp	r3, #3
 801e1f0:	d017      	beq.n	801e222 <__gethex+0x39e>
 801e1f2:	2b01      	cmp	r3, #1
 801e1f4:	d109      	bne.n	801e20a <__gethex+0x386>
 801e1f6:	f01a 0f02 	tst.w	sl, #2
 801e1fa:	d006      	beq.n	801e20a <__gethex+0x386>
 801e1fc:	f8d9 0000 	ldr.w	r0, [r9]
 801e200:	ea4a 0a00 	orr.w	sl, sl, r0
 801e204:	f01a 0f01 	tst.w	sl, #1
 801e208:	d10e      	bne.n	801e228 <__gethex+0x3a4>
 801e20a:	f047 0710 	orr.w	r7, r7, #16
 801e20e:	e033      	b.n	801e278 <__gethex+0x3f4>
 801e210:	f04f 0a01 	mov.w	sl, #1
 801e214:	e7d0      	b.n	801e1b8 <__gethex+0x334>
 801e216:	2701      	movs	r7, #1
 801e218:	e7e2      	b.n	801e1e0 <__gethex+0x35c>
 801e21a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e21c:	f1c3 0301 	rsb	r3, r3, #1
 801e220:	9315      	str	r3, [sp, #84]	; 0x54
 801e222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e224:	2b00      	cmp	r3, #0
 801e226:	d0f0      	beq.n	801e20a <__gethex+0x386>
 801e228:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e22c:	f104 0314 	add.w	r3, r4, #20
 801e230:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e234:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e238:	f04f 0c00 	mov.w	ip, #0
 801e23c:	4618      	mov	r0, r3
 801e23e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e242:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e246:	d01c      	beq.n	801e282 <__gethex+0x3fe>
 801e248:	3201      	adds	r2, #1
 801e24a:	6002      	str	r2, [r0, #0]
 801e24c:	2f02      	cmp	r7, #2
 801e24e:	f104 0314 	add.w	r3, r4, #20
 801e252:	d13f      	bne.n	801e2d4 <__gethex+0x450>
 801e254:	f8d8 2000 	ldr.w	r2, [r8]
 801e258:	3a01      	subs	r2, #1
 801e25a:	42b2      	cmp	r2, r6
 801e25c:	d10a      	bne.n	801e274 <__gethex+0x3f0>
 801e25e:	1171      	asrs	r1, r6, #5
 801e260:	2201      	movs	r2, #1
 801e262:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e266:	f006 061f 	and.w	r6, r6, #31
 801e26a:	fa02 f606 	lsl.w	r6, r2, r6
 801e26e:	421e      	tst	r6, r3
 801e270:	bf18      	it	ne
 801e272:	4617      	movne	r7, r2
 801e274:	f047 0720 	orr.w	r7, r7, #32
 801e278:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e27a:	601c      	str	r4, [r3, #0]
 801e27c:	9b04      	ldr	r3, [sp, #16]
 801e27e:	601d      	str	r5, [r3, #0]
 801e280:	e695      	b.n	801dfae <__gethex+0x12a>
 801e282:	4299      	cmp	r1, r3
 801e284:	f843 cc04 	str.w	ip, [r3, #-4]
 801e288:	d8d8      	bhi.n	801e23c <__gethex+0x3b8>
 801e28a:	68a3      	ldr	r3, [r4, #8]
 801e28c:	459b      	cmp	fp, r3
 801e28e:	db19      	blt.n	801e2c4 <__gethex+0x440>
 801e290:	6861      	ldr	r1, [r4, #4]
 801e292:	ee18 0a10 	vmov	r0, s16
 801e296:	3101      	adds	r1, #1
 801e298:	f000 f938 	bl	801e50c <_Balloc>
 801e29c:	4681      	mov	r9, r0
 801e29e:	b918      	cbnz	r0, 801e2a8 <__gethex+0x424>
 801e2a0:	4b1a      	ldr	r3, [pc, #104]	; (801e30c <__gethex+0x488>)
 801e2a2:	4602      	mov	r2, r0
 801e2a4:	2184      	movs	r1, #132	; 0x84
 801e2a6:	e6a8      	b.n	801dffa <__gethex+0x176>
 801e2a8:	6922      	ldr	r2, [r4, #16]
 801e2aa:	3202      	adds	r2, #2
 801e2ac:	f104 010c 	add.w	r1, r4, #12
 801e2b0:	0092      	lsls	r2, r2, #2
 801e2b2:	300c      	adds	r0, #12
 801e2b4:	f7fc ff2f 	bl	801b116 <memcpy>
 801e2b8:	4621      	mov	r1, r4
 801e2ba:	ee18 0a10 	vmov	r0, s16
 801e2be:	f000 f965 	bl	801e58c <_Bfree>
 801e2c2:	464c      	mov	r4, r9
 801e2c4:	6923      	ldr	r3, [r4, #16]
 801e2c6:	1c5a      	adds	r2, r3, #1
 801e2c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e2cc:	6122      	str	r2, [r4, #16]
 801e2ce:	2201      	movs	r2, #1
 801e2d0:	615a      	str	r2, [r3, #20]
 801e2d2:	e7bb      	b.n	801e24c <__gethex+0x3c8>
 801e2d4:	6922      	ldr	r2, [r4, #16]
 801e2d6:	455a      	cmp	r2, fp
 801e2d8:	dd0b      	ble.n	801e2f2 <__gethex+0x46e>
 801e2da:	2101      	movs	r1, #1
 801e2dc:	4620      	mov	r0, r4
 801e2de:	f7ff fd69 	bl	801ddb4 <rshift>
 801e2e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e2e6:	3501      	adds	r5, #1
 801e2e8:	42ab      	cmp	r3, r5
 801e2ea:	f6ff aed0 	blt.w	801e08e <__gethex+0x20a>
 801e2ee:	2701      	movs	r7, #1
 801e2f0:	e7c0      	b.n	801e274 <__gethex+0x3f0>
 801e2f2:	f016 061f 	ands.w	r6, r6, #31
 801e2f6:	d0fa      	beq.n	801e2ee <__gethex+0x46a>
 801e2f8:	4453      	add	r3, sl
 801e2fa:	f1c6 0620 	rsb	r6, r6, #32
 801e2fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e302:	f000 f9f5 	bl	801e6f0 <__hi0bits>
 801e306:	42b0      	cmp	r0, r6
 801e308:	dbe7      	blt.n	801e2da <__gethex+0x456>
 801e30a:	e7f0      	b.n	801e2ee <__gethex+0x46a>
 801e30c:	080220b8 	.word	0x080220b8

0801e310 <L_shift>:
 801e310:	f1c2 0208 	rsb	r2, r2, #8
 801e314:	0092      	lsls	r2, r2, #2
 801e316:	b570      	push	{r4, r5, r6, lr}
 801e318:	f1c2 0620 	rsb	r6, r2, #32
 801e31c:	6843      	ldr	r3, [r0, #4]
 801e31e:	6804      	ldr	r4, [r0, #0]
 801e320:	fa03 f506 	lsl.w	r5, r3, r6
 801e324:	432c      	orrs	r4, r5
 801e326:	40d3      	lsrs	r3, r2
 801e328:	6004      	str	r4, [r0, #0]
 801e32a:	f840 3f04 	str.w	r3, [r0, #4]!
 801e32e:	4288      	cmp	r0, r1
 801e330:	d3f4      	bcc.n	801e31c <L_shift+0xc>
 801e332:	bd70      	pop	{r4, r5, r6, pc}

0801e334 <__match>:
 801e334:	b530      	push	{r4, r5, lr}
 801e336:	6803      	ldr	r3, [r0, #0]
 801e338:	3301      	adds	r3, #1
 801e33a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e33e:	b914      	cbnz	r4, 801e346 <__match+0x12>
 801e340:	6003      	str	r3, [r0, #0]
 801e342:	2001      	movs	r0, #1
 801e344:	bd30      	pop	{r4, r5, pc}
 801e346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e34a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e34e:	2d19      	cmp	r5, #25
 801e350:	bf98      	it	ls
 801e352:	3220      	addls	r2, #32
 801e354:	42a2      	cmp	r2, r4
 801e356:	d0f0      	beq.n	801e33a <__match+0x6>
 801e358:	2000      	movs	r0, #0
 801e35a:	e7f3      	b.n	801e344 <__match+0x10>

0801e35c <__hexnan>:
 801e35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e360:	680b      	ldr	r3, [r1, #0]
 801e362:	115e      	asrs	r6, r3, #5
 801e364:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e368:	f013 031f 	ands.w	r3, r3, #31
 801e36c:	b087      	sub	sp, #28
 801e36e:	bf18      	it	ne
 801e370:	3604      	addne	r6, #4
 801e372:	2500      	movs	r5, #0
 801e374:	1f37      	subs	r7, r6, #4
 801e376:	4690      	mov	r8, r2
 801e378:	6802      	ldr	r2, [r0, #0]
 801e37a:	9301      	str	r3, [sp, #4]
 801e37c:	4682      	mov	sl, r0
 801e37e:	f846 5c04 	str.w	r5, [r6, #-4]
 801e382:	46b9      	mov	r9, r7
 801e384:	463c      	mov	r4, r7
 801e386:	9502      	str	r5, [sp, #8]
 801e388:	46ab      	mov	fp, r5
 801e38a:	7851      	ldrb	r1, [r2, #1]
 801e38c:	1c53      	adds	r3, r2, #1
 801e38e:	9303      	str	r3, [sp, #12]
 801e390:	b341      	cbz	r1, 801e3e4 <__hexnan+0x88>
 801e392:	4608      	mov	r0, r1
 801e394:	9205      	str	r2, [sp, #20]
 801e396:	9104      	str	r1, [sp, #16]
 801e398:	f7ff fd5e 	bl	801de58 <__hexdig_fun>
 801e39c:	2800      	cmp	r0, #0
 801e39e:	d14f      	bne.n	801e440 <__hexnan+0xe4>
 801e3a0:	9904      	ldr	r1, [sp, #16]
 801e3a2:	9a05      	ldr	r2, [sp, #20]
 801e3a4:	2920      	cmp	r1, #32
 801e3a6:	d818      	bhi.n	801e3da <__hexnan+0x7e>
 801e3a8:	9b02      	ldr	r3, [sp, #8]
 801e3aa:	459b      	cmp	fp, r3
 801e3ac:	dd13      	ble.n	801e3d6 <__hexnan+0x7a>
 801e3ae:	454c      	cmp	r4, r9
 801e3b0:	d206      	bcs.n	801e3c0 <__hexnan+0x64>
 801e3b2:	2d07      	cmp	r5, #7
 801e3b4:	dc04      	bgt.n	801e3c0 <__hexnan+0x64>
 801e3b6:	462a      	mov	r2, r5
 801e3b8:	4649      	mov	r1, r9
 801e3ba:	4620      	mov	r0, r4
 801e3bc:	f7ff ffa8 	bl	801e310 <L_shift>
 801e3c0:	4544      	cmp	r4, r8
 801e3c2:	d950      	bls.n	801e466 <__hexnan+0x10a>
 801e3c4:	2300      	movs	r3, #0
 801e3c6:	f1a4 0904 	sub.w	r9, r4, #4
 801e3ca:	f844 3c04 	str.w	r3, [r4, #-4]
 801e3ce:	f8cd b008 	str.w	fp, [sp, #8]
 801e3d2:	464c      	mov	r4, r9
 801e3d4:	461d      	mov	r5, r3
 801e3d6:	9a03      	ldr	r2, [sp, #12]
 801e3d8:	e7d7      	b.n	801e38a <__hexnan+0x2e>
 801e3da:	2929      	cmp	r1, #41	; 0x29
 801e3dc:	d156      	bne.n	801e48c <__hexnan+0x130>
 801e3de:	3202      	adds	r2, #2
 801e3e0:	f8ca 2000 	str.w	r2, [sl]
 801e3e4:	f1bb 0f00 	cmp.w	fp, #0
 801e3e8:	d050      	beq.n	801e48c <__hexnan+0x130>
 801e3ea:	454c      	cmp	r4, r9
 801e3ec:	d206      	bcs.n	801e3fc <__hexnan+0xa0>
 801e3ee:	2d07      	cmp	r5, #7
 801e3f0:	dc04      	bgt.n	801e3fc <__hexnan+0xa0>
 801e3f2:	462a      	mov	r2, r5
 801e3f4:	4649      	mov	r1, r9
 801e3f6:	4620      	mov	r0, r4
 801e3f8:	f7ff ff8a 	bl	801e310 <L_shift>
 801e3fc:	4544      	cmp	r4, r8
 801e3fe:	d934      	bls.n	801e46a <__hexnan+0x10e>
 801e400:	f1a8 0204 	sub.w	r2, r8, #4
 801e404:	4623      	mov	r3, r4
 801e406:	f853 1b04 	ldr.w	r1, [r3], #4
 801e40a:	f842 1f04 	str.w	r1, [r2, #4]!
 801e40e:	429f      	cmp	r7, r3
 801e410:	d2f9      	bcs.n	801e406 <__hexnan+0xaa>
 801e412:	1b3b      	subs	r3, r7, r4
 801e414:	f023 0303 	bic.w	r3, r3, #3
 801e418:	3304      	adds	r3, #4
 801e41a:	3401      	adds	r4, #1
 801e41c:	3e03      	subs	r6, #3
 801e41e:	42b4      	cmp	r4, r6
 801e420:	bf88      	it	hi
 801e422:	2304      	movhi	r3, #4
 801e424:	4443      	add	r3, r8
 801e426:	2200      	movs	r2, #0
 801e428:	f843 2b04 	str.w	r2, [r3], #4
 801e42c:	429f      	cmp	r7, r3
 801e42e:	d2fb      	bcs.n	801e428 <__hexnan+0xcc>
 801e430:	683b      	ldr	r3, [r7, #0]
 801e432:	b91b      	cbnz	r3, 801e43c <__hexnan+0xe0>
 801e434:	4547      	cmp	r7, r8
 801e436:	d127      	bne.n	801e488 <__hexnan+0x12c>
 801e438:	2301      	movs	r3, #1
 801e43a:	603b      	str	r3, [r7, #0]
 801e43c:	2005      	movs	r0, #5
 801e43e:	e026      	b.n	801e48e <__hexnan+0x132>
 801e440:	3501      	adds	r5, #1
 801e442:	2d08      	cmp	r5, #8
 801e444:	f10b 0b01 	add.w	fp, fp, #1
 801e448:	dd06      	ble.n	801e458 <__hexnan+0xfc>
 801e44a:	4544      	cmp	r4, r8
 801e44c:	d9c3      	bls.n	801e3d6 <__hexnan+0x7a>
 801e44e:	2300      	movs	r3, #0
 801e450:	f844 3c04 	str.w	r3, [r4, #-4]
 801e454:	2501      	movs	r5, #1
 801e456:	3c04      	subs	r4, #4
 801e458:	6822      	ldr	r2, [r4, #0]
 801e45a:	f000 000f 	and.w	r0, r0, #15
 801e45e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e462:	6022      	str	r2, [r4, #0]
 801e464:	e7b7      	b.n	801e3d6 <__hexnan+0x7a>
 801e466:	2508      	movs	r5, #8
 801e468:	e7b5      	b.n	801e3d6 <__hexnan+0x7a>
 801e46a:	9b01      	ldr	r3, [sp, #4]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d0df      	beq.n	801e430 <__hexnan+0xd4>
 801e470:	f04f 32ff 	mov.w	r2, #4294967295
 801e474:	f1c3 0320 	rsb	r3, r3, #32
 801e478:	fa22 f303 	lsr.w	r3, r2, r3
 801e47c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e480:	401a      	ands	r2, r3
 801e482:	f846 2c04 	str.w	r2, [r6, #-4]
 801e486:	e7d3      	b.n	801e430 <__hexnan+0xd4>
 801e488:	3f04      	subs	r7, #4
 801e48a:	e7d1      	b.n	801e430 <__hexnan+0xd4>
 801e48c:	2004      	movs	r0, #4
 801e48e:	b007      	add	sp, #28
 801e490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e494 <_localeconv_r>:
 801e494:	4800      	ldr	r0, [pc, #0]	; (801e498 <_localeconv_r+0x4>)
 801e496:	4770      	bx	lr
 801e498:	20000264 	.word	0x20000264

0801e49c <_lseek_r>:
 801e49c:	b538      	push	{r3, r4, r5, lr}
 801e49e:	4d07      	ldr	r5, [pc, #28]	; (801e4bc <_lseek_r+0x20>)
 801e4a0:	4604      	mov	r4, r0
 801e4a2:	4608      	mov	r0, r1
 801e4a4:	4611      	mov	r1, r2
 801e4a6:	2200      	movs	r2, #0
 801e4a8:	602a      	str	r2, [r5, #0]
 801e4aa:	461a      	mov	r2, r3
 801e4ac:	f003 f8da 	bl	8021664 <_lseek>
 801e4b0:	1c43      	adds	r3, r0, #1
 801e4b2:	d102      	bne.n	801e4ba <_lseek_r+0x1e>
 801e4b4:	682b      	ldr	r3, [r5, #0]
 801e4b6:	b103      	cbz	r3, 801e4ba <_lseek_r+0x1e>
 801e4b8:	6023      	str	r3, [r4, #0]
 801e4ba:	bd38      	pop	{r3, r4, r5, pc}
 801e4bc:	2000e9a4 	.word	0x2000e9a4

0801e4c0 <malloc>:
 801e4c0:	4b02      	ldr	r3, [pc, #8]	; (801e4cc <malloc+0xc>)
 801e4c2:	4601      	mov	r1, r0
 801e4c4:	6818      	ldr	r0, [r3, #0]
 801e4c6:	f7fc be5d 	b.w	801b184 <_malloc_r>
 801e4ca:	bf00      	nop
 801e4cc:	2000010c 	.word	0x2000010c

0801e4d0 <__ascii_mbtowc>:
 801e4d0:	b082      	sub	sp, #8
 801e4d2:	b901      	cbnz	r1, 801e4d6 <__ascii_mbtowc+0x6>
 801e4d4:	a901      	add	r1, sp, #4
 801e4d6:	b142      	cbz	r2, 801e4ea <__ascii_mbtowc+0x1a>
 801e4d8:	b14b      	cbz	r3, 801e4ee <__ascii_mbtowc+0x1e>
 801e4da:	7813      	ldrb	r3, [r2, #0]
 801e4dc:	600b      	str	r3, [r1, #0]
 801e4de:	7812      	ldrb	r2, [r2, #0]
 801e4e0:	1e10      	subs	r0, r2, #0
 801e4e2:	bf18      	it	ne
 801e4e4:	2001      	movne	r0, #1
 801e4e6:	b002      	add	sp, #8
 801e4e8:	4770      	bx	lr
 801e4ea:	4610      	mov	r0, r2
 801e4ec:	e7fb      	b.n	801e4e6 <__ascii_mbtowc+0x16>
 801e4ee:	f06f 0001 	mvn.w	r0, #1
 801e4f2:	e7f8      	b.n	801e4e6 <__ascii_mbtowc+0x16>

0801e4f4 <__malloc_lock>:
 801e4f4:	4801      	ldr	r0, [pc, #4]	; (801e4fc <__malloc_lock+0x8>)
 801e4f6:	f7fc be0c 	b.w	801b112 <__retarget_lock_acquire_recursive>
 801e4fa:	bf00      	nop
 801e4fc:	2000e998 	.word	0x2000e998

0801e500 <__malloc_unlock>:
 801e500:	4801      	ldr	r0, [pc, #4]	; (801e508 <__malloc_unlock+0x8>)
 801e502:	f7fc be07 	b.w	801b114 <__retarget_lock_release_recursive>
 801e506:	bf00      	nop
 801e508:	2000e998 	.word	0x2000e998

0801e50c <_Balloc>:
 801e50c:	b570      	push	{r4, r5, r6, lr}
 801e50e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e510:	4604      	mov	r4, r0
 801e512:	460d      	mov	r5, r1
 801e514:	b976      	cbnz	r6, 801e534 <_Balloc+0x28>
 801e516:	2010      	movs	r0, #16
 801e518:	f7ff ffd2 	bl	801e4c0 <malloc>
 801e51c:	4602      	mov	r2, r0
 801e51e:	6260      	str	r0, [r4, #36]	; 0x24
 801e520:	b920      	cbnz	r0, 801e52c <_Balloc+0x20>
 801e522:	4b18      	ldr	r3, [pc, #96]	; (801e584 <_Balloc+0x78>)
 801e524:	4818      	ldr	r0, [pc, #96]	; (801e588 <_Balloc+0x7c>)
 801e526:	2166      	movs	r1, #102	; 0x66
 801e528:	f000 feac 	bl	801f284 <__assert_func>
 801e52c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e530:	6006      	str	r6, [r0, #0]
 801e532:	60c6      	str	r6, [r0, #12]
 801e534:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e536:	68f3      	ldr	r3, [r6, #12]
 801e538:	b183      	cbz	r3, 801e55c <_Balloc+0x50>
 801e53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e53c:	68db      	ldr	r3, [r3, #12]
 801e53e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e542:	b9b8      	cbnz	r0, 801e574 <_Balloc+0x68>
 801e544:	2101      	movs	r1, #1
 801e546:	fa01 f605 	lsl.w	r6, r1, r5
 801e54a:	1d72      	adds	r2, r6, #5
 801e54c:	0092      	lsls	r2, r2, #2
 801e54e:	4620      	mov	r0, r4
 801e550:	f000 fc9d 	bl	801ee8e <_calloc_r>
 801e554:	b160      	cbz	r0, 801e570 <_Balloc+0x64>
 801e556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e55a:	e00e      	b.n	801e57a <_Balloc+0x6e>
 801e55c:	2221      	movs	r2, #33	; 0x21
 801e55e:	2104      	movs	r1, #4
 801e560:	4620      	mov	r0, r4
 801e562:	f000 fc94 	bl	801ee8e <_calloc_r>
 801e566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e568:	60f0      	str	r0, [r6, #12]
 801e56a:	68db      	ldr	r3, [r3, #12]
 801e56c:	2b00      	cmp	r3, #0
 801e56e:	d1e4      	bne.n	801e53a <_Balloc+0x2e>
 801e570:	2000      	movs	r0, #0
 801e572:	bd70      	pop	{r4, r5, r6, pc}
 801e574:	6802      	ldr	r2, [r0, #0]
 801e576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e57a:	2300      	movs	r3, #0
 801e57c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e580:	e7f7      	b.n	801e572 <_Balloc+0x66>
 801e582:	bf00      	nop
 801e584:	08022046 	.word	0x08022046
 801e588:	08022144 	.word	0x08022144

0801e58c <_Bfree>:
 801e58c:	b570      	push	{r4, r5, r6, lr}
 801e58e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e590:	4605      	mov	r5, r0
 801e592:	460c      	mov	r4, r1
 801e594:	b976      	cbnz	r6, 801e5b4 <_Bfree+0x28>
 801e596:	2010      	movs	r0, #16
 801e598:	f7ff ff92 	bl	801e4c0 <malloc>
 801e59c:	4602      	mov	r2, r0
 801e59e:	6268      	str	r0, [r5, #36]	; 0x24
 801e5a0:	b920      	cbnz	r0, 801e5ac <_Bfree+0x20>
 801e5a2:	4b09      	ldr	r3, [pc, #36]	; (801e5c8 <_Bfree+0x3c>)
 801e5a4:	4809      	ldr	r0, [pc, #36]	; (801e5cc <_Bfree+0x40>)
 801e5a6:	218a      	movs	r1, #138	; 0x8a
 801e5a8:	f000 fe6c 	bl	801f284 <__assert_func>
 801e5ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e5b0:	6006      	str	r6, [r0, #0]
 801e5b2:	60c6      	str	r6, [r0, #12]
 801e5b4:	b13c      	cbz	r4, 801e5c6 <_Bfree+0x3a>
 801e5b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e5b8:	6862      	ldr	r2, [r4, #4]
 801e5ba:	68db      	ldr	r3, [r3, #12]
 801e5bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e5c0:	6021      	str	r1, [r4, #0]
 801e5c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e5c6:	bd70      	pop	{r4, r5, r6, pc}
 801e5c8:	08022046 	.word	0x08022046
 801e5cc:	08022144 	.word	0x08022144

0801e5d0 <__multadd>:
 801e5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5d4:	690d      	ldr	r5, [r1, #16]
 801e5d6:	4607      	mov	r7, r0
 801e5d8:	460c      	mov	r4, r1
 801e5da:	461e      	mov	r6, r3
 801e5dc:	f101 0c14 	add.w	ip, r1, #20
 801e5e0:	2000      	movs	r0, #0
 801e5e2:	f8dc 3000 	ldr.w	r3, [ip]
 801e5e6:	b299      	uxth	r1, r3
 801e5e8:	fb02 6101 	mla	r1, r2, r1, r6
 801e5ec:	0c1e      	lsrs	r6, r3, #16
 801e5ee:	0c0b      	lsrs	r3, r1, #16
 801e5f0:	fb02 3306 	mla	r3, r2, r6, r3
 801e5f4:	b289      	uxth	r1, r1
 801e5f6:	3001      	adds	r0, #1
 801e5f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e5fc:	4285      	cmp	r5, r0
 801e5fe:	f84c 1b04 	str.w	r1, [ip], #4
 801e602:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e606:	dcec      	bgt.n	801e5e2 <__multadd+0x12>
 801e608:	b30e      	cbz	r6, 801e64e <__multadd+0x7e>
 801e60a:	68a3      	ldr	r3, [r4, #8]
 801e60c:	42ab      	cmp	r3, r5
 801e60e:	dc19      	bgt.n	801e644 <__multadd+0x74>
 801e610:	6861      	ldr	r1, [r4, #4]
 801e612:	4638      	mov	r0, r7
 801e614:	3101      	adds	r1, #1
 801e616:	f7ff ff79 	bl	801e50c <_Balloc>
 801e61a:	4680      	mov	r8, r0
 801e61c:	b928      	cbnz	r0, 801e62a <__multadd+0x5a>
 801e61e:	4602      	mov	r2, r0
 801e620:	4b0c      	ldr	r3, [pc, #48]	; (801e654 <__multadd+0x84>)
 801e622:	480d      	ldr	r0, [pc, #52]	; (801e658 <__multadd+0x88>)
 801e624:	21b5      	movs	r1, #181	; 0xb5
 801e626:	f000 fe2d 	bl	801f284 <__assert_func>
 801e62a:	6922      	ldr	r2, [r4, #16]
 801e62c:	3202      	adds	r2, #2
 801e62e:	f104 010c 	add.w	r1, r4, #12
 801e632:	0092      	lsls	r2, r2, #2
 801e634:	300c      	adds	r0, #12
 801e636:	f7fc fd6e 	bl	801b116 <memcpy>
 801e63a:	4621      	mov	r1, r4
 801e63c:	4638      	mov	r0, r7
 801e63e:	f7ff ffa5 	bl	801e58c <_Bfree>
 801e642:	4644      	mov	r4, r8
 801e644:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e648:	3501      	adds	r5, #1
 801e64a:	615e      	str	r6, [r3, #20]
 801e64c:	6125      	str	r5, [r4, #16]
 801e64e:	4620      	mov	r0, r4
 801e650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e654:	080220b8 	.word	0x080220b8
 801e658:	08022144 	.word	0x08022144

0801e65c <__s2b>:
 801e65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e660:	460c      	mov	r4, r1
 801e662:	4615      	mov	r5, r2
 801e664:	461f      	mov	r7, r3
 801e666:	2209      	movs	r2, #9
 801e668:	3308      	adds	r3, #8
 801e66a:	4606      	mov	r6, r0
 801e66c:	fb93 f3f2 	sdiv	r3, r3, r2
 801e670:	2100      	movs	r1, #0
 801e672:	2201      	movs	r2, #1
 801e674:	429a      	cmp	r2, r3
 801e676:	db09      	blt.n	801e68c <__s2b+0x30>
 801e678:	4630      	mov	r0, r6
 801e67a:	f7ff ff47 	bl	801e50c <_Balloc>
 801e67e:	b940      	cbnz	r0, 801e692 <__s2b+0x36>
 801e680:	4602      	mov	r2, r0
 801e682:	4b19      	ldr	r3, [pc, #100]	; (801e6e8 <__s2b+0x8c>)
 801e684:	4819      	ldr	r0, [pc, #100]	; (801e6ec <__s2b+0x90>)
 801e686:	21ce      	movs	r1, #206	; 0xce
 801e688:	f000 fdfc 	bl	801f284 <__assert_func>
 801e68c:	0052      	lsls	r2, r2, #1
 801e68e:	3101      	adds	r1, #1
 801e690:	e7f0      	b.n	801e674 <__s2b+0x18>
 801e692:	9b08      	ldr	r3, [sp, #32]
 801e694:	6143      	str	r3, [r0, #20]
 801e696:	2d09      	cmp	r5, #9
 801e698:	f04f 0301 	mov.w	r3, #1
 801e69c:	6103      	str	r3, [r0, #16]
 801e69e:	dd16      	ble.n	801e6ce <__s2b+0x72>
 801e6a0:	f104 0909 	add.w	r9, r4, #9
 801e6a4:	46c8      	mov	r8, r9
 801e6a6:	442c      	add	r4, r5
 801e6a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e6ac:	4601      	mov	r1, r0
 801e6ae:	3b30      	subs	r3, #48	; 0x30
 801e6b0:	220a      	movs	r2, #10
 801e6b2:	4630      	mov	r0, r6
 801e6b4:	f7ff ff8c 	bl	801e5d0 <__multadd>
 801e6b8:	45a0      	cmp	r8, r4
 801e6ba:	d1f5      	bne.n	801e6a8 <__s2b+0x4c>
 801e6bc:	f1a5 0408 	sub.w	r4, r5, #8
 801e6c0:	444c      	add	r4, r9
 801e6c2:	1b2d      	subs	r5, r5, r4
 801e6c4:	1963      	adds	r3, r4, r5
 801e6c6:	42bb      	cmp	r3, r7
 801e6c8:	db04      	blt.n	801e6d4 <__s2b+0x78>
 801e6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e6ce:	340a      	adds	r4, #10
 801e6d0:	2509      	movs	r5, #9
 801e6d2:	e7f6      	b.n	801e6c2 <__s2b+0x66>
 801e6d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e6d8:	4601      	mov	r1, r0
 801e6da:	3b30      	subs	r3, #48	; 0x30
 801e6dc:	220a      	movs	r2, #10
 801e6de:	4630      	mov	r0, r6
 801e6e0:	f7ff ff76 	bl	801e5d0 <__multadd>
 801e6e4:	e7ee      	b.n	801e6c4 <__s2b+0x68>
 801e6e6:	bf00      	nop
 801e6e8:	080220b8 	.word	0x080220b8
 801e6ec:	08022144 	.word	0x08022144

0801e6f0 <__hi0bits>:
 801e6f0:	0c03      	lsrs	r3, r0, #16
 801e6f2:	041b      	lsls	r3, r3, #16
 801e6f4:	b9d3      	cbnz	r3, 801e72c <__hi0bits+0x3c>
 801e6f6:	0400      	lsls	r0, r0, #16
 801e6f8:	2310      	movs	r3, #16
 801e6fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e6fe:	bf04      	itt	eq
 801e700:	0200      	lsleq	r0, r0, #8
 801e702:	3308      	addeq	r3, #8
 801e704:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e708:	bf04      	itt	eq
 801e70a:	0100      	lsleq	r0, r0, #4
 801e70c:	3304      	addeq	r3, #4
 801e70e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e712:	bf04      	itt	eq
 801e714:	0080      	lsleq	r0, r0, #2
 801e716:	3302      	addeq	r3, #2
 801e718:	2800      	cmp	r0, #0
 801e71a:	db05      	blt.n	801e728 <__hi0bits+0x38>
 801e71c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e720:	f103 0301 	add.w	r3, r3, #1
 801e724:	bf08      	it	eq
 801e726:	2320      	moveq	r3, #32
 801e728:	4618      	mov	r0, r3
 801e72a:	4770      	bx	lr
 801e72c:	2300      	movs	r3, #0
 801e72e:	e7e4      	b.n	801e6fa <__hi0bits+0xa>

0801e730 <__lo0bits>:
 801e730:	6803      	ldr	r3, [r0, #0]
 801e732:	f013 0207 	ands.w	r2, r3, #7
 801e736:	4601      	mov	r1, r0
 801e738:	d00b      	beq.n	801e752 <__lo0bits+0x22>
 801e73a:	07da      	lsls	r2, r3, #31
 801e73c:	d423      	bmi.n	801e786 <__lo0bits+0x56>
 801e73e:	0798      	lsls	r0, r3, #30
 801e740:	bf49      	itett	mi
 801e742:	085b      	lsrmi	r3, r3, #1
 801e744:	089b      	lsrpl	r3, r3, #2
 801e746:	2001      	movmi	r0, #1
 801e748:	600b      	strmi	r3, [r1, #0]
 801e74a:	bf5c      	itt	pl
 801e74c:	600b      	strpl	r3, [r1, #0]
 801e74e:	2002      	movpl	r0, #2
 801e750:	4770      	bx	lr
 801e752:	b298      	uxth	r0, r3
 801e754:	b9a8      	cbnz	r0, 801e782 <__lo0bits+0x52>
 801e756:	0c1b      	lsrs	r3, r3, #16
 801e758:	2010      	movs	r0, #16
 801e75a:	b2da      	uxtb	r2, r3
 801e75c:	b90a      	cbnz	r2, 801e762 <__lo0bits+0x32>
 801e75e:	3008      	adds	r0, #8
 801e760:	0a1b      	lsrs	r3, r3, #8
 801e762:	071a      	lsls	r2, r3, #28
 801e764:	bf04      	itt	eq
 801e766:	091b      	lsreq	r3, r3, #4
 801e768:	3004      	addeq	r0, #4
 801e76a:	079a      	lsls	r2, r3, #30
 801e76c:	bf04      	itt	eq
 801e76e:	089b      	lsreq	r3, r3, #2
 801e770:	3002      	addeq	r0, #2
 801e772:	07da      	lsls	r2, r3, #31
 801e774:	d403      	bmi.n	801e77e <__lo0bits+0x4e>
 801e776:	085b      	lsrs	r3, r3, #1
 801e778:	f100 0001 	add.w	r0, r0, #1
 801e77c:	d005      	beq.n	801e78a <__lo0bits+0x5a>
 801e77e:	600b      	str	r3, [r1, #0]
 801e780:	4770      	bx	lr
 801e782:	4610      	mov	r0, r2
 801e784:	e7e9      	b.n	801e75a <__lo0bits+0x2a>
 801e786:	2000      	movs	r0, #0
 801e788:	4770      	bx	lr
 801e78a:	2020      	movs	r0, #32
 801e78c:	4770      	bx	lr
	...

0801e790 <__i2b>:
 801e790:	b510      	push	{r4, lr}
 801e792:	460c      	mov	r4, r1
 801e794:	2101      	movs	r1, #1
 801e796:	f7ff feb9 	bl	801e50c <_Balloc>
 801e79a:	4602      	mov	r2, r0
 801e79c:	b928      	cbnz	r0, 801e7aa <__i2b+0x1a>
 801e79e:	4b05      	ldr	r3, [pc, #20]	; (801e7b4 <__i2b+0x24>)
 801e7a0:	4805      	ldr	r0, [pc, #20]	; (801e7b8 <__i2b+0x28>)
 801e7a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e7a6:	f000 fd6d 	bl	801f284 <__assert_func>
 801e7aa:	2301      	movs	r3, #1
 801e7ac:	6144      	str	r4, [r0, #20]
 801e7ae:	6103      	str	r3, [r0, #16]
 801e7b0:	bd10      	pop	{r4, pc}
 801e7b2:	bf00      	nop
 801e7b4:	080220b8 	.word	0x080220b8
 801e7b8:	08022144 	.word	0x08022144

0801e7bc <__multiply>:
 801e7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7c0:	4691      	mov	r9, r2
 801e7c2:	690a      	ldr	r2, [r1, #16]
 801e7c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e7c8:	429a      	cmp	r2, r3
 801e7ca:	bfb8      	it	lt
 801e7cc:	460b      	movlt	r3, r1
 801e7ce:	460c      	mov	r4, r1
 801e7d0:	bfbc      	itt	lt
 801e7d2:	464c      	movlt	r4, r9
 801e7d4:	4699      	movlt	r9, r3
 801e7d6:	6927      	ldr	r7, [r4, #16]
 801e7d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e7dc:	68a3      	ldr	r3, [r4, #8]
 801e7de:	6861      	ldr	r1, [r4, #4]
 801e7e0:	eb07 060a 	add.w	r6, r7, sl
 801e7e4:	42b3      	cmp	r3, r6
 801e7e6:	b085      	sub	sp, #20
 801e7e8:	bfb8      	it	lt
 801e7ea:	3101      	addlt	r1, #1
 801e7ec:	f7ff fe8e 	bl	801e50c <_Balloc>
 801e7f0:	b930      	cbnz	r0, 801e800 <__multiply+0x44>
 801e7f2:	4602      	mov	r2, r0
 801e7f4:	4b44      	ldr	r3, [pc, #272]	; (801e908 <__multiply+0x14c>)
 801e7f6:	4845      	ldr	r0, [pc, #276]	; (801e90c <__multiply+0x150>)
 801e7f8:	f240 115d 	movw	r1, #349	; 0x15d
 801e7fc:	f000 fd42 	bl	801f284 <__assert_func>
 801e800:	f100 0514 	add.w	r5, r0, #20
 801e804:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e808:	462b      	mov	r3, r5
 801e80a:	2200      	movs	r2, #0
 801e80c:	4543      	cmp	r3, r8
 801e80e:	d321      	bcc.n	801e854 <__multiply+0x98>
 801e810:	f104 0314 	add.w	r3, r4, #20
 801e814:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e818:	f109 0314 	add.w	r3, r9, #20
 801e81c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e820:	9202      	str	r2, [sp, #8]
 801e822:	1b3a      	subs	r2, r7, r4
 801e824:	3a15      	subs	r2, #21
 801e826:	f022 0203 	bic.w	r2, r2, #3
 801e82a:	3204      	adds	r2, #4
 801e82c:	f104 0115 	add.w	r1, r4, #21
 801e830:	428f      	cmp	r7, r1
 801e832:	bf38      	it	cc
 801e834:	2204      	movcc	r2, #4
 801e836:	9201      	str	r2, [sp, #4]
 801e838:	9a02      	ldr	r2, [sp, #8]
 801e83a:	9303      	str	r3, [sp, #12]
 801e83c:	429a      	cmp	r2, r3
 801e83e:	d80c      	bhi.n	801e85a <__multiply+0x9e>
 801e840:	2e00      	cmp	r6, #0
 801e842:	dd03      	ble.n	801e84c <__multiply+0x90>
 801e844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e848:	2b00      	cmp	r3, #0
 801e84a:	d05a      	beq.n	801e902 <__multiply+0x146>
 801e84c:	6106      	str	r6, [r0, #16]
 801e84e:	b005      	add	sp, #20
 801e850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e854:	f843 2b04 	str.w	r2, [r3], #4
 801e858:	e7d8      	b.n	801e80c <__multiply+0x50>
 801e85a:	f8b3 a000 	ldrh.w	sl, [r3]
 801e85e:	f1ba 0f00 	cmp.w	sl, #0
 801e862:	d024      	beq.n	801e8ae <__multiply+0xf2>
 801e864:	f104 0e14 	add.w	lr, r4, #20
 801e868:	46a9      	mov	r9, r5
 801e86a:	f04f 0c00 	mov.w	ip, #0
 801e86e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e872:	f8d9 1000 	ldr.w	r1, [r9]
 801e876:	fa1f fb82 	uxth.w	fp, r2
 801e87a:	b289      	uxth	r1, r1
 801e87c:	fb0a 110b 	mla	r1, sl, fp, r1
 801e880:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e884:	f8d9 2000 	ldr.w	r2, [r9]
 801e888:	4461      	add	r1, ip
 801e88a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e88e:	fb0a c20b 	mla	r2, sl, fp, ip
 801e892:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e896:	b289      	uxth	r1, r1
 801e898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e89c:	4577      	cmp	r7, lr
 801e89e:	f849 1b04 	str.w	r1, [r9], #4
 801e8a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e8a6:	d8e2      	bhi.n	801e86e <__multiply+0xb2>
 801e8a8:	9a01      	ldr	r2, [sp, #4]
 801e8aa:	f845 c002 	str.w	ip, [r5, r2]
 801e8ae:	9a03      	ldr	r2, [sp, #12]
 801e8b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e8b4:	3304      	adds	r3, #4
 801e8b6:	f1b9 0f00 	cmp.w	r9, #0
 801e8ba:	d020      	beq.n	801e8fe <__multiply+0x142>
 801e8bc:	6829      	ldr	r1, [r5, #0]
 801e8be:	f104 0c14 	add.w	ip, r4, #20
 801e8c2:	46ae      	mov	lr, r5
 801e8c4:	f04f 0a00 	mov.w	sl, #0
 801e8c8:	f8bc b000 	ldrh.w	fp, [ip]
 801e8cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e8d0:	fb09 220b 	mla	r2, r9, fp, r2
 801e8d4:	4492      	add	sl, r2
 801e8d6:	b289      	uxth	r1, r1
 801e8d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801e8dc:	f84e 1b04 	str.w	r1, [lr], #4
 801e8e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e8e4:	f8be 1000 	ldrh.w	r1, [lr]
 801e8e8:	0c12      	lsrs	r2, r2, #16
 801e8ea:	fb09 1102 	mla	r1, r9, r2, r1
 801e8ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801e8f2:	4567      	cmp	r7, ip
 801e8f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e8f8:	d8e6      	bhi.n	801e8c8 <__multiply+0x10c>
 801e8fa:	9a01      	ldr	r2, [sp, #4]
 801e8fc:	50a9      	str	r1, [r5, r2]
 801e8fe:	3504      	adds	r5, #4
 801e900:	e79a      	b.n	801e838 <__multiply+0x7c>
 801e902:	3e01      	subs	r6, #1
 801e904:	e79c      	b.n	801e840 <__multiply+0x84>
 801e906:	bf00      	nop
 801e908:	080220b8 	.word	0x080220b8
 801e90c:	08022144 	.word	0x08022144

0801e910 <__pow5mult>:
 801e910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e914:	4615      	mov	r5, r2
 801e916:	f012 0203 	ands.w	r2, r2, #3
 801e91a:	4606      	mov	r6, r0
 801e91c:	460f      	mov	r7, r1
 801e91e:	d007      	beq.n	801e930 <__pow5mult+0x20>
 801e920:	4c25      	ldr	r4, [pc, #148]	; (801e9b8 <__pow5mult+0xa8>)
 801e922:	3a01      	subs	r2, #1
 801e924:	2300      	movs	r3, #0
 801e926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e92a:	f7ff fe51 	bl	801e5d0 <__multadd>
 801e92e:	4607      	mov	r7, r0
 801e930:	10ad      	asrs	r5, r5, #2
 801e932:	d03d      	beq.n	801e9b0 <__pow5mult+0xa0>
 801e934:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e936:	b97c      	cbnz	r4, 801e958 <__pow5mult+0x48>
 801e938:	2010      	movs	r0, #16
 801e93a:	f7ff fdc1 	bl	801e4c0 <malloc>
 801e93e:	4602      	mov	r2, r0
 801e940:	6270      	str	r0, [r6, #36]	; 0x24
 801e942:	b928      	cbnz	r0, 801e950 <__pow5mult+0x40>
 801e944:	4b1d      	ldr	r3, [pc, #116]	; (801e9bc <__pow5mult+0xac>)
 801e946:	481e      	ldr	r0, [pc, #120]	; (801e9c0 <__pow5mult+0xb0>)
 801e948:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e94c:	f000 fc9a 	bl	801f284 <__assert_func>
 801e950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e954:	6004      	str	r4, [r0, #0]
 801e956:	60c4      	str	r4, [r0, #12]
 801e958:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e95c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e960:	b94c      	cbnz	r4, 801e976 <__pow5mult+0x66>
 801e962:	f240 2171 	movw	r1, #625	; 0x271
 801e966:	4630      	mov	r0, r6
 801e968:	f7ff ff12 	bl	801e790 <__i2b>
 801e96c:	2300      	movs	r3, #0
 801e96e:	f8c8 0008 	str.w	r0, [r8, #8]
 801e972:	4604      	mov	r4, r0
 801e974:	6003      	str	r3, [r0, #0]
 801e976:	f04f 0900 	mov.w	r9, #0
 801e97a:	07eb      	lsls	r3, r5, #31
 801e97c:	d50a      	bpl.n	801e994 <__pow5mult+0x84>
 801e97e:	4639      	mov	r1, r7
 801e980:	4622      	mov	r2, r4
 801e982:	4630      	mov	r0, r6
 801e984:	f7ff ff1a 	bl	801e7bc <__multiply>
 801e988:	4639      	mov	r1, r7
 801e98a:	4680      	mov	r8, r0
 801e98c:	4630      	mov	r0, r6
 801e98e:	f7ff fdfd 	bl	801e58c <_Bfree>
 801e992:	4647      	mov	r7, r8
 801e994:	106d      	asrs	r5, r5, #1
 801e996:	d00b      	beq.n	801e9b0 <__pow5mult+0xa0>
 801e998:	6820      	ldr	r0, [r4, #0]
 801e99a:	b938      	cbnz	r0, 801e9ac <__pow5mult+0x9c>
 801e99c:	4622      	mov	r2, r4
 801e99e:	4621      	mov	r1, r4
 801e9a0:	4630      	mov	r0, r6
 801e9a2:	f7ff ff0b 	bl	801e7bc <__multiply>
 801e9a6:	6020      	str	r0, [r4, #0]
 801e9a8:	f8c0 9000 	str.w	r9, [r0]
 801e9ac:	4604      	mov	r4, r0
 801e9ae:	e7e4      	b.n	801e97a <__pow5mult+0x6a>
 801e9b0:	4638      	mov	r0, r7
 801e9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9b6:	bf00      	nop
 801e9b8:	08022290 	.word	0x08022290
 801e9bc:	08022046 	.word	0x08022046
 801e9c0:	08022144 	.word	0x08022144

0801e9c4 <__lshift>:
 801e9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9c8:	460c      	mov	r4, r1
 801e9ca:	6849      	ldr	r1, [r1, #4]
 801e9cc:	6923      	ldr	r3, [r4, #16]
 801e9ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e9d2:	68a3      	ldr	r3, [r4, #8]
 801e9d4:	4607      	mov	r7, r0
 801e9d6:	4691      	mov	r9, r2
 801e9d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e9dc:	f108 0601 	add.w	r6, r8, #1
 801e9e0:	42b3      	cmp	r3, r6
 801e9e2:	db0b      	blt.n	801e9fc <__lshift+0x38>
 801e9e4:	4638      	mov	r0, r7
 801e9e6:	f7ff fd91 	bl	801e50c <_Balloc>
 801e9ea:	4605      	mov	r5, r0
 801e9ec:	b948      	cbnz	r0, 801ea02 <__lshift+0x3e>
 801e9ee:	4602      	mov	r2, r0
 801e9f0:	4b2a      	ldr	r3, [pc, #168]	; (801ea9c <__lshift+0xd8>)
 801e9f2:	482b      	ldr	r0, [pc, #172]	; (801eaa0 <__lshift+0xdc>)
 801e9f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e9f8:	f000 fc44 	bl	801f284 <__assert_func>
 801e9fc:	3101      	adds	r1, #1
 801e9fe:	005b      	lsls	r3, r3, #1
 801ea00:	e7ee      	b.n	801e9e0 <__lshift+0x1c>
 801ea02:	2300      	movs	r3, #0
 801ea04:	f100 0114 	add.w	r1, r0, #20
 801ea08:	f100 0210 	add.w	r2, r0, #16
 801ea0c:	4618      	mov	r0, r3
 801ea0e:	4553      	cmp	r3, sl
 801ea10:	db37      	blt.n	801ea82 <__lshift+0xbe>
 801ea12:	6920      	ldr	r0, [r4, #16]
 801ea14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ea18:	f104 0314 	add.w	r3, r4, #20
 801ea1c:	f019 091f 	ands.w	r9, r9, #31
 801ea20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ea24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ea28:	d02f      	beq.n	801ea8a <__lshift+0xc6>
 801ea2a:	f1c9 0e20 	rsb	lr, r9, #32
 801ea2e:	468a      	mov	sl, r1
 801ea30:	f04f 0c00 	mov.w	ip, #0
 801ea34:	681a      	ldr	r2, [r3, #0]
 801ea36:	fa02 f209 	lsl.w	r2, r2, r9
 801ea3a:	ea42 020c 	orr.w	r2, r2, ip
 801ea3e:	f84a 2b04 	str.w	r2, [sl], #4
 801ea42:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea46:	4298      	cmp	r0, r3
 801ea48:	fa22 fc0e 	lsr.w	ip, r2, lr
 801ea4c:	d8f2      	bhi.n	801ea34 <__lshift+0x70>
 801ea4e:	1b03      	subs	r3, r0, r4
 801ea50:	3b15      	subs	r3, #21
 801ea52:	f023 0303 	bic.w	r3, r3, #3
 801ea56:	3304      	adds	r3, #4
 801ea58:	f104 0215 	add.w	r2, r4, #21
 801ea5c:	4290      	cmp	r0, r2
 801ea5e:	bf38      	it	cc
 801ea60:	2304      	movcc	r3, #4
 801ea62:	f841 c003 	str.w	ip, [r1, r3]
 801ea66:	f1bc 0f00 	cmp.w	ip, #0
 801ea6a:	d001      	beq.n	801ea70 <__lshift+0xac>
 801ea6c:	f108 0602 	add.w	r6, r8, #2
 801ea70:	3e01      	subs	r6, #1
 801ea72:	4638      	mov	r0, r7
 801ea74:	612e      	str	r6, [r5, #16]
 801ea76:	4621      	mov	r1, r4
 801ea78:	f7ff fd88 	bl	801e58c <_Bfree>
 801ea7c:	4628      	mov	r0, r5
 801ea7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea82:	f842 0f04 	str.w	r0, [r2, #4]!
 801ea86:	3301      	adds	r3, #1
 801ea88:	e7c1      	b.n	801ea0e <__lshift+0x4a>
 801ea8a:	3904      	subs	r1, #4
 801ea8c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea90:	f841 2f04 	str.w	r2, [r1, #4]!
 801ea94:	4298      	cmp	r0, r3
 801ea96:	d8f9      	bhi.n	801ea8c <__lshift+0xc8>
 801ea98:	e7ea      	b.n	801ea70 <__lshift+0xac>
 801ea9a:	bf00      	nop
 801ea9c:	080220b8 	.word	0x080220b8
 801eaa0:	08022144 	.word	0x08022144

0801eaa4 <__mcmp>:
 801eaa4:	b530      	push	{r4, r5, lr}
 801eaa6:	6902      	ldr	r2, [r0, #16]
 801eaa8:	690c      	ldr	r4, [r1, #16]
 801eaaa:	1b12      	subs	r2, r2, r4
 801eaac:	d10e      	bne.n	801eacc <__mcmp+0x28>
 801eaae:	f100 0314 	add.w	r3, r0, #20
 801eab2:	3114      	adds	r1, #20
 801eab4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801eab8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801eabc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801eac0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801eac4:	42a5      	cmp	r5, r4
 801eac6:	d003      	beq.n	801ead0 <__mcmp+0x2c>
 801eac8:	d305      	bcc.n	801ead6 <__mcmp+0x32>
 801eaca:	2201      	movs	r2, #1
 801eacc:	4610      	mov	r0, r2
 801eace:	bd30      	pop	{r4, r5, pc}
 801ead0:	4283      	cmp	r3, r0
 801ead2:	d3f3      	bcc.n	801eabc <__mcmp+0x18>
 801ead4:	e7fa      	b.n	801eacc <__mcmp+0x28>
 801ead6:	f04f 32ff 	mov.w	r2, #4294967295
 801eada:	e7f7      	b.n	801eacc <__mcmp+0x28>

0801eadc <__mdiff>:
 801eadc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae0:	460c      	mov	r4, r1
 801eae2:	4606      	mov	r6, r0
 801eae4:	4611      	mov	r1, r2
 801eae6:	4620      	mov	r0, r4
 801eae8:	4690      	mov	r8, r2
 801eaea:	f7ff ffdb 	bl	801eaa4 <__mcmp>
 801eaee:	1e05      	subs	r5, r0, #0
 801eaf0:	d110      	bne.n	801eb14 <__mdiff+0x38>
 801eaf2:	4629      	mov	r1, r5
 801eaf4:	4630      	mov	r0, r6
 801eaf6:	f7ff fd09 	bl	801e50c <_Balloc>
 801eafa:	b930      	cbnz	r0, 801eb0a <__mdiff+0x2e>
 801eafc:	4b3a      	ldr	r3, [pc, #232]	; (801ebe8 <__mdiff+0x10c>)
 801eafe:	4602      	mov	r2, r0
 801eb00:	f240 2132 	movw	r1, #562	; 0x232
 801eb04:	4839      	ldr	r0, [pc, #228]	; (801ebec <__mdiff+0x110>)
 801eb06:	f000 fbbd 	bl	801f284 <__assert_func>
 801eb0a:	2301      	movs	r3, #1
 801eb0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801eb10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb14:	bfa4      	itt	ge
 801eb16:	4643      	movge	r3, r8
 801eb18:	46a0      	movge	r8, r4
 801eb1a:	4630      	mov	r0, r6
 801eb1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801eb20:	bfa6      	itte	ge
 801eb22:	461c      	movge	r4, r3
 801eb24:	2500      	movge	r5, #0
 801eb26:	2501      	movlt	r5, #1
 801eb28:	f7ff fcf0 	bl	801e50c <_Balloc>
 801eb2c:	b920      	cbnz	r0, 801eb38 <__mdiff+0x5c>
 801eb2e:	4b2e      	ldr	r3, [pc, #184]	; (801ebe8 <__mdiff+0x10c>)
 801eb30:	4602      	mov	r2, r0
 801eb32:	f44f 7110 	mov.w	r1, #576	; 0x240
 801eb36:	e7e5      	b.n	801eb04 <__mdiff+0x28>
 801eb38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801eb3c:	6926      	ldr	r6, [r4, #16]
 801eb3e:	60c5      	str	r5, [r0, #12]
 801eb40:	f104 0914 	add.w	r9, r4, #20
 801eb44:	f108 0514 	add.w	r5, r8, #20
 801eb48:	f100 0e14 	add.w	lr, r0, #20
 801eb4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801eb50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801eb54:	f108 0210 	add.w	r2, r8, #16
 801eb58:	46f2      	mov	sl, lr
 801eb5a:	2100      	movs	r1, #0
 801eb5c:	f859 3b04 	ldr.w	r3, [r9], #4
 801eb60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801eb64:	fa1f f883 	uxth.w	r8, r3
 801eb68:	fa11 f18b 	uxtah	r1, r1, fp
 801eb6c:	0c1b      	lsrs	r3, r3, #16
 801eb6e:	eba1 0808 	sub.w	r8, r1, r8
 801eb72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801eb76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801eb7a:	fa1f f888 	uxth.w	r8, r8
 801eb7e:	1419      	asrs	r1, r3, #16
 801eb80:	454e      	cmp	r6, r9
 801eb82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801eb86:	f84a 3b04 	str.w	r3, [sl], #4
 801eb8a:	d8e7      	bhi.n	801eb5c <__mdiff+0x80>
 801eb8c:	1b33      	subs	r3, r6, r4
 801eb8e:	3b15      	subs	r3, #21
 801eb90:	f023 0303 	bic.w	r3, r3, #3
 801eb94:	3304      	adds	r3, #4
 801eb96:	3415      	adds	r4, #21
 801eb98:	42a6      	cmp	r6, r4
 801eb9a:	bf38      	it	cc
 801eb9c:	2304      	movcc	r3, #4
 801eb9e:	441d      	add	r5, r3
 801eba0:	4473      	add	r3, lr
 801eba2:	469e      	mov	lr, r3
 801eba4:	462e      	mov	r6, r5
 801eba6:	4566      	cmp	r6, ip
 801eba8:	d30e      	bcc.n	801ebc8 <__mdiff+0xec>
 801ebaa:	f10c 0203 	add.w	r2, ip, #3
 801ebae:	1b52      	subs	r2, r2, r5
 801ebb0:	f022 0203 	bic.w	r2, r2, #3
 801ebb4:	3d03      	subs	r5, #3
 801ebb6:	45ac      	cmp	ip, r5
 801ebb8:	bf38      	it	cc
 801ebba:	2200      	movcc	r2, #0
 801ebbc:	441a      	add	r2, r3
 801ebbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ebc2:	b17b      	cbz	r3, 801ebe4 <__mdiff+0x108>
 801ebc4:	6107      	str	r7, [r0, #16]
 801ebc6:	e7a3      	b.n	801eb10 <__mdiff+0x34>
 801ebc8:	f856 8b04 	ldr.w	r8, [r6], #4
 801ebcc:	fa11 f288 	uxtah	r2, r1, r8
 801ebd0:	1414      	asrs	r4, r2, #16
 801ebd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ebd6:	b292      	uxth	r2, r2
 801ebd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ebdc:	f84e 2b04 	str.w	r2, [lr], #4
 801ebe0:	1421      	asrs	r1, r4, #16
 801ebe2:	e7e0      	b.n	801eba6 <__mdiff+0xca>
 801ebe4:	3f01      	subs	r7, #1
 801ebe6:	e7ea      	b.n	801ebbe <__mdiff+0xe2>
 801ebe8:	080220b8 	.word	0x080220b8
 801ebec:	08022144 	.word	0x08022144

0801ebf0 <__ulp>:
 801ebf0:	b082      	sub	sp, #8
 801ebf2:	ed8d 0b00 	vstr	d0, [sp]
 801ebf6:	9b01      	ldr	r3, [sp, #4]
 801ebf8:	4912      	ldr	r1, [pc, #72]	; (801ec44 <__ulp+0x54>)
 801ebfa:	4019      	ands	r1, r3
 801ebfc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ec00:	2900      	cmp	r1, #0
 801ec02:	dd05      	ble.n	801ec10 <__ulp+0x20>
 801ec04:	2200      	movs	r2, #0
 801ec06:	460b      	mov	r3, r1
 801ec08:	ec43 2b10 	vmov	d0, r2, r3
 801ec0c:	b002      	add	sp, #8
 801ec0e:	4770      	bx	lr
 801ec10:	4249      	negs	r1, r1
 801ec12:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ec16:	ea4f 5021 	mov.w	r0, r1, asr #20
 801ec1a:	f04f 0200 	mov.w	r2, #0
 801ec1e:	f04f 0300 	mov.w	r3, #0
 801ec22:	da04      	bge.n	801ec2e <__ulp+0x3e>
 801ec24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801ec28:	fa41 f300 	asr.w	r3, r1, r0
 801ec2c:	e7ec      	b.n	801ec08 <__ulp+0x18>
 801ec2e:	f1a0 0114 	sub.w	r1, r0, #20
 801ec32:	291e      	cmp	r1, #30
 801ec34:	bfda      	itte	le
 801ec36:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801ec3a:	fa20 f101 	lsrle.w	r1, r0, r1
 801ec3e:	2101      	movgt	r1, #1
 801ec40:	460a      	mov	r2, r1
 801ec42:	e7e1      	b.n	801ec08 <__ulp+0x18>
 801ec44:	7ff00000 	.word	0x7ff00000

0801ec48 <__b2d>:
 801ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec4a:	6905      	ldr	r5, [r0, #16]
 801ec4c:	f100 0714 	add.w	r7, r0, #20
 801ec50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ec54:	1f2e      	subs	r6, r5, #4
 801ec56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ec5a:	4620      	mov	r0, r4
 801ec5c:	f7ff fd48 	bl	801e6f0 <__hi0bits>
 801ec60:	f1c0 0320 	rsb	r3, r0, #32
 801ec64:	280a      	cmp	r0, #10
 801ec66:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801ece4 <__b2d+0x9c>
 801ec6a:	600b      	str	r3, [r1, #0]
 801ec6c:	dc14      	bgt.n	801ec98 <__b2d+0x50>
 801ec6e:	f1c0 0e0b 	rsb	lr, r0, #11
 801ec72:	fa24 f10e 	lsr.w	r1, r4, lr
 801ec76:	42b7      	cmp	r7, r6
 801ec78:	ea41 030c 	orr.w	r3, r1, ip
 801ec7c:	bf34      	ite	cc
 801ec7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ec82:	2100      	movcs	r1, #0
 801ec84:	3015      	adds	r0, #21
 801ec86:	fa04 f000 	lsl.w	r0, r4, r0
 801ec8a:	fa21 f10e 	lsr.w	r1, r1, lr
 801ec8e:	ea40 0201 	orr.w	r2, r0, r1
 801ec92:	ec43 2b10 	vmov	d0, r2, r3
 801ec96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec98:	42b7      	cmp	r7, r6
 801ec9a:	bf3a      	itte	cc
 801ec9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801eca0:	f1a5 0608 	subcc.w	r6, r5, #8
 801eca4:	2100      	movcs	r1, #0
 801eca6:	380b      	subs	r0, #11
 801eca8:	d017      	beq.n	801ecda <__b2d+0x92>
 801ecaa:	f1c0 0c20 	rsb	ip, r0, #32
 801ecae:	fa04 f500 	lsl.w	r5, r4, r0
 801ecb2:	42be      	cmp	r6, r7
 801ecb4:	fa21 f40c 	lsr.w	r4, r1, ip
 801ecb8:	ea45 0504 	orr.w	r5, r5, r4
 801ecbc:	bf8c      	ite	hi
 801ecbe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801ecc2:	2400      	movls	r4, #0
 801ecc4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801ecc8:	fa01 f000 	lsl.w	r0, r1, r0
 801eccc:	fa24 f40c 	lsr.w	r4, r4, ip
 801ecd0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ecd4:	ea40 0204 	orr.w	r2, r0, r4
 801ecd8:	e7db      	b.n	801ec92 <__b2d+0x4a>
 801ecda:	ea44 030c 	orr.w	r3, r4, ip
 801ecde:	460a      	mov	r2, r1
 801ece0:	e7d7      	b.n	801ec92 <__b2d+0x4a>
 801ece2:	bf00      	nop
 801ece4:	3ff00000 	.word	0x3ff00000

0801ece8 <__d2b>:
 801ece8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ecec:	4689      	mov	r9, r1
 801ecee:	2101      	movs	r1, #1
 801ecf0:	ec57 6b10 	vmov	r6, r7, d0
 801ecf4:	4690      	mov	r8, r2
 801ecf6:	f7ff fc09 	bl	801e50c <_Balloc>
 801ecfa:	4604      	mov	r4, r0
 801ecfc:	b930      	cbnz	r0, 801ed0c <__d2b+0x24>
 801ecfe:	4602      	mov	r2, r0
 801ed00:	4b25      	ldr	r3, [pc, #148]	; (801ed98 <__d2b+0xb0>)
 801ed02:	4826      	ldr	r0, [pc, #152]	; (801ed9c <__d2b+0xb4>)
 801ed04:	f240 310a 	movw	r1, #778	; 0x30a
 801ed08:	f000 fabc 	bl	801f284 <__assert_func>
 801ed0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801ed10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ed14:	bb35      	cbnz	r5, 801ed64 <__d2b+0x7c>
 801ed16:	2e00      	cmp	r6, #0
 801ed18:	9301      	str	r3, [sp, #4]
 801ed1a:	d028      	beq.n	801ed6e <__d2b+0x86>
 801ed1c:	4668      	mov	r0, sp
 801ed1e:	9600      	str	r6, [sp, #0]
 801ed20:	f7ff fd06 	bl	801e730 <__lo0bits>
 801ed24:	9900      	ldr	r1, [sp, #0]
 801ed26:	b300      	cbz	r0, 801ed6a <__d2b+0x82>
 801ed28:	9a01      	ldr	r2, [sp, #4]
 801ed2a:	f1c0 0320 	rsb	r3, r0, #32
 801ed2e:	fa02 f303 	lsl.w	r3, r2, r3
 801ed32:	430b      	orrs	r3, r1
 801ed34:	40c2      	lsrs	r2, r0
 801ed36:	6163      	str	r3, [r4, #20]
 801ed38:	9201      	str	r2, [sp, #4]
 801ed3a:	9b01      	ldr	r3, [sp, #4]
 801ed3c:	61a3      	str	r3, [r4, #24]
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	bf14      	ite	ne
 801ed42:	2202      	movne	r2, #2
 801ed44:	2201      	moveq	r2, #1
 801ed46:	6122      	str	r2, [r4, #16]
 801ed48:	b1d5      	cbz	r5, 801ed80 <__d2b+0x98>
 801ed4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ed4e:	4405      	add	r5, r0
 801ed50:	f8c9 5000 	str.w	r5, [r9]
 801ed54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ed58:	f8c8 0000 	str.w	r0, [r8]
 801ed5c:	4620      	mov	r0, r4
 801ed5e:	b003      	add	sp, #12
 801ed60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ed64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ed68:	e7d5      	b.n	801ed16 <__d2b+0x2e>
 801ed6a:	6161      	str	r1, [r4, #20]
 801ed6c:	e7e5      	b.n	801ed3a <__d2b+0x52>
 801ed6e:	a801      	add	r0, sp, #4
 801ed70:	f7ff fcde 	bl	801e730 <__lo0bits>
 801ed74:	9b01      	ldr	r3, [sp, #4]
 801ed76:	6163      	str	r3, [r4, #20]
 801ed78:	2201      	movs	r2, #1
 801ed7a:	6122      	str	r2, [r4, #16]
 801ed7c:	3020      	adds	r0, #32
 801ed7e:	e7e3      	b.n	801ed48 <__d2b+0x60>
 801ed80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ed84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ed88:	f8c9 0000 	str.w	r0, [r9]
 801ed8c:	6918      	ldr	r0, [r3, #16]
 801ed8e:	f7ff fcaf 	bl	801e6f0 <__hi0bits>
 801ed92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ed96:	e7df      	b.n	801ed58 <__d2b+0x70>
 801ed98:	080220b8 	.word	0x080220b8
 801ed9c:	08022144 	.word	0x08022144

0801eda0 <__ratio>:
 801eda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eda4:	4688      	mov	r8, r1
 801eda6:	4669      	mov	r1, sp
 801eda8:	4681      	mov	r9, r0
 801edaa:	f7ff ff4d 	bl	801ec48 <__b2d>
 801edae:	a901      	add	r1, sp, #4
 801edb0:	4640      	mov	r0, r8
 801edb2:	ec55 4b10 	vmov	r4, r5, d0
 801edb6:	f7ff ff47 	bl	801ec48 <__b2d>
 801edba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801edbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801edc2:	eba3 0c02 	sub.w	ip, r3, r2
 801edc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801edca:	1a9b      	subs	r3, r3, r2
 801edcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801edd0:	ec51 0b10 	vmov	r0, r1, d0
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	bfd6      	itet	le
 801edd8:	460a      	movle	r2, r1
 801edda:	462a      	movgt	r2, r5
 801eddc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ede0:	468b      	mov	fp, r1
 801ede2:	462f      	mov	r7, r5
 801ede4:	bfd4      	ite	le
 801ede6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801edea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801edee:	4620      	mov	r0, r4
 801edf0:	ee10 2a10 	vmov	r2, s0
 801edf4:	465b      	mov	r3, fp
 801edf6:	4639      	mov	r1, r7
 801edf8:	f7e1 fd28 	bl	800084c <__aeabi_ddiv>
 801edfc:	ec41 0b10 	vmov	d0, r0, r1
 801ee00:	b003      	add	sp, #12
 801ee02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee06 <__copybits>:
 801ee06:	3901      	subs	r1, #1
 801ee08:	b570      	push	{r4, r5, r6, lr}
 801ee0a:	1149      	asrs	r1, r1, #5
 801ee0c:	6914      	ldr	r4, [r2, #16]
 801ee0e:	3101      	adds	r1, #1
 801ee10:	f102 0314 	add.w	r3, r2, #20
 801ee14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ee18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ee1c:	1f05      	subs	r5, r0, #4
 801ee1e:	42a3      	cmp	r3, r4
 801ee20:	d30c      	bcc.n	801ee3c <__copybits+0x36>
 801ee22:	1aa3      	subs	r3, r4, r2
 801ee24:	3b11      	subs	r3, #17
 801ee26:	f023 0303 	bic.w	r3, r3, #3
 801ee2a:	3211      	adds	r2, #17
 801ee2c:	42a2      	cmp	r2, r4
 801ee2e:	bf88      	it	hi
 801ee30:	2300      	movhi	r3, #0
 801ee32:	4418      	add	r0, r3
 801ee34:	2300      	movs	r3, #0
 801ee36:	4288      	cmp	r0, r1
 801ee38:	d305      	bcc.n	801ee46 <__copybits+0x40>
 801ee3a:	bd70      	pop	{r4, r5, r6, pc}
 801ee3c:	f853 6b04 	ldr.w	r6, [r3], #4
 801ee40:	f845 6f04 	str.w	r6, [r5, #4]!
 801ee44:	e7eb      	b.n	801ee1e <__copybits+0x18>
 801ee46:	f840 3b04 	str.w	r3, [r0], #4
 801ee4a:	e7f4      	b.n	801ee36 <__copybits+0x30>

0801ee4c <__any_on>:
 801ee4c:	f100 0214 	add.w	r2, r0, #20
 801ee50:	6900      	ldr	r0, [r0, #16]
 801ee52:	114b      	asrs	r3, r1, #5
 801ee54:	4298      	cmp	r0, r3
 801ee56:	b510      	push	{r4, lr}
 801ee58:	db11      	blt.n	801ee7e <__any_on+0x32>
 801ee5a:	dd0a      	ble.n	801ee72 <__any_on+0x26>
 801ee5c:	f011 011f 	ands.w	r1, r1, #31
 801ee60:	d007      	beq.n	801ee72 <__any_on+0x26>
 801ee62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ee66:	fa24 f001 	lsr.w	r0, r4, r1
 801ee6a:	fa00 f101 	lsl.w	r1, r0, r1
 801ee6e:	428c      	cmp	r4, r1
 801ee70:	d10b      	bne.n	801ee8a <__any_on+0x3e>
 801ee72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ee76:	4293      	cmp	r3, r2
 801ee78:	d803      	bhi.n	801ee82 <__any_on+0x36>
 801ee7a:	2000      	movs	r0, #0
 801ee7c:	bd10      	pop	{r4, pc}
 801ee7e:	4603      	mov	r3, r0
 801ee80:	e7f7      	b.n	801ee72 <__any_on+0x26>
 801ee82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ee86:	2900      	cmp	r1, #0
 801ee88:	d0f5      	beq.n	801ee76 <__any_on+0x2a>
 801ee8a:	2001      	movs	r0, #1
 801ee8c:	e7f6      	b.n	801ee7c <__any_on+0x30>

0801ee8e <_calloc_r>:
 801ee8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ee90:	fba1 2402 	umull	r2, r4, r1, r2
 801ee94:	b94c      	cbnz	r4, 801eeaa <_calloc_r+0x1c>
 801ee96:	4611      	mov	r1, r2
 801ee98:	9201      	str	r2, [sp, #4]
 801ee9a:	f7fc f973 	bl	801b184 <_malloc_r>
 801ee9e:	9a01      	ldr	r2, [sp, #4]
 801eea0:	4605      	mov	r5, r0
 801eea2:	b930      	cbnz	r0, 801eeb2 <_calloc_r+0x24>
 801eea4:	4628      	mov	r0, r5
 801eea6:	b003      	add	sp, #12
 801eea8:	bd30      	pop	{r4, r5, pc}
 801eeaa:	220c      	movs	r2, #12
 801eeac:	6002      	str	r2, [r0, #0]
 801eeae:	2500      	movs	r5, #0
 801eeb0:	e7f8      	b.n	801eea4 <_calloc_r+0x16>
 801eeb2:	4621      	mov	r1, r4
 801eeb4:	f7fc f93d 	bl	801b132 <memset>
 801eeb8:	e7f4      	b.n	801eea4 <_calloc_r+0x16>
	...

0801eebc <_free_r>:
 801eebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eebe:	2900      	cmp	r1, #0
 801eec0:	d044      	beq.n	801ef4c <_free_r+0x90>
 801eec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eec6:	9001      	str	r0, [sp, #4]
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	f1a1 0404 	sub.w	r4, r1, #4
 801eece:	bfb8      	it	lt
 801eed0:	18e4      	addlt	r4, r4, r3
 801eed2:	f7ff fb0f 	bl	801e4f4 <__malloc_lock>
 801eed6:	4a1e      	ldr	r2, [pc, #120]	; (801ef50 <_free_r+0x94>)
 801eed8:	9801      	ldr	r0, [sp, #4]
 801eeda:	6813      	ldr	r3, [r2, #0]
 801eedc:	b933      	cbnz	r3, 801eeec <_free_r+0x30>
 801eede:	6063      	str	r3, [r4, #4]
 801eee0:	6014      	str	r4, [r2, #0]
 801eee2:	b003      	add	sp, #12
 801eee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eee8:	f7ff bb0a 	b.w	801e500 <__malloc_unlock>
 801eeec:	42a3      	cmp	r3, r4
 801eeee:	d908      	bls.n	801ef02 <_free_r+0x46>
 801eef0:	6825      	ldr	r5, [r4, #0]
 801eef2:	1961      	adds	r1, r4, r5
 801eef4:	428b      	cmp	r3, r1
 801eef6:	bf01      	itttt	eq
 801eef8:	6819      	ldreq	r1, [r3, #0]
 801eefa:	685b      	ldreq	r3, [r3, #4]
 801eefc:	1949      	addeq	r1, r1, r5
 801eefe:	6021      	streq	r1, [r4, #0]
 801ef00:	e7ed      	b.n	801eede <_free_r+0x22>
 801ef02:	461a      	mov	r2, r3
 801ef04:	685b      	ldr	r3, [r3, #4]
 801ef06:	b10b      	cbz	r3, 801ef0c <_free_r+0x50>
 801ef08:	42a3      	cmp	r3, r4
 801ef0a:	d9fa      	bls.n	801ef02 <_free_r+0x46>
 801ef0c:	6811      	ldr	r1, [r2, #0]
 801ef0e:	1855      	adds	r5, r2, r1
 801ef10:	42a5      	cmp	r5, r4
 801ef12:	d10b      	bne.n	801ef2c <_free_r+0x70>
 801ef14:	6824      	ldr	r4, [r4, #0]
 801ef16:	4421      	add	r1, r4
 801ef18:	1854      	adds	r4, r2, r1
 801ef1a:	42a3      	cmp	r3, r4
 801ef1c:	6011      	str	r1, [r2, #0]
 801ef1e:	d1e0      	bne.n	801eee2 <_free_r+0x26>
 801ef20:	681c      	ldr	r4, [r3, #0]
 801ef22:	685b      	ldr	r3, [r3, #4]
 801ef24:	6053      	str	r3, [r2, #4]
 801ef26:	4421      	add	r1, r4
 801ef28:	6011      	str	r1, [r2, #0]
 801ef2a:	e7da      	b.n	801eee2 <_free_r+0x26>
 801ef2c:	d902      	bls.n	801ef34 <_free_r+0x78>
 801ef2e:	230c      	movs	r3, #12
 801ef30:	6003      	str	r3, [r0, #0]
 801ef32:	e7d6      	b.n	801eee2 <_free_r+0x26>
 801ef34:	6825      	ldr	r5, [r4, #0]
 801ef36:	1961      	adds	r1, r4, r5
 801ef38:	428b      	cmp	r3, r1
 801ef3a:	bf04      	itt	eq
 801ef3c:	6819      	ldreq	r1, [r3, #0]
 801ef3e:	685b      	ldreq	r3, [r3, #4]
 801ef40:	6063      	str	r3, [r4, #4]
 801ef42:	bf04      	itt	eq
 801ef44:	1949      	addeq	r1, r1, r5
 801ef46:	6021      	streq	r1, [r4, #0]
 801ef48:	6054      	str	r4, [r2, #4]
 801ef4a:	e7ca      	b.n	801eee2 <_free_r+0x26>
 801ef4c:	b003      	add	sp, #12
 801ef4e:	bd30      	pop	{r4, r5, pc}
 801ef50:	2000e99c 	.word	0x2000e99c

0801ef54 <__ssputs_r>:
 801ef54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef58:	688e      	ldr	r6, [r1, #8]
 801ef5a:	429e      	cmp	r6, r3
 801ef5c:	4682      	mov	sl, r0
 801ef5e:	460c      	mov	r4, r1
 801ef60:	4690      	mov	r8, r2
 801ef62:	461f      	mov	r7, r3
 801ef64:	d838      	bhi.n	801efd8 <__ssputs_r+0x84>
 801ef66:	898a      	ldrh	r2, [r1, #12]
 801ef68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ef6c:	d032      	beq.n	801efd4 <__ssputs_r+0x80>
 801ef6e:	6825      	ldr	r5, [r4, #0]
 801ef70:	6909      	ldr	r1, [r1, #16]
 801ef72:	eba5 0901 	sub.w	r9, r5, r1
 801ef76:	6965      	ldr	r5, [r4, #20]
 801ef78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ef80:	3301      	adds	r3, #1
 801ef82:	444b      	add	r3, r9
 801ef84:	106d      	asrs	r5, r5, #1
 801ef86:	429d      	cmp	r5, r3
 801ef88:	bf38      	it	cc
 801ef8a:	461d      	movcc	r5, r3
 801ef8c:	0553      	lsls	r3, r2, #21
 801ef8e:	d531      	bpl.n	801eff4 <__ssputs_r+0xa0>
 801ef90:	4629      	mov	r1, r5
 801ef92:	f7fc f8f7 	bl	801b184 <_malloc_r>
 801ef96:	4606      	mov	r6, r0
 801ef98:	b950      	cbnz	r0, 801efb0 <__ssputs_r+0x5c>
 801ef9a:	230c      	movs	r3, #12
 801ef9c:	f8ca 3000 	str.w	r3, [sl]
 801efa0:	89a3      	ldrh	r3, [r4, #12]
 801efa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801efa6:	81a3      	strh	r3, [r4, #12]
 801efa8:	f04f 30ff 	mov.w	r0, #4294967295
 801efac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801efb0:	6921      	ldr	r1, [r4, #16]
 801efb2:	464a      	mov	r2, r9
 801efb4:	f7fc f8af 	bl	801b116 <memcpy>
 801efb8:	89a3      	ldrh	r3, [r4, #12]
 801efba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801efbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801efc2:	81a3      	strh	r3, [r4, #12]
 801efc4:	6126      	str	r6, [r4, #16]
 801efc6:	6165      	str	r5, [r4, #20]
 801efc8:	444e      	add	r6, r9
 801efca:	eba5 0509 	sub.w	r5, r5, r9
 801efce:	6026      	str	r6, [r4, #0]
 801efd0:	60a5      	str	r5, [r4, #8]
 801efd2:	463e      	mov	r6, r7
 801efd4:	42be      	cmp	r6, r7
 801efd6:	d900      	bls.n	801efda <__ssputs_r+0x86>
 801efd8:	463e      	mov	r6, r7
 801efda:	6820      	ldr	r0, [r4, #0]
 801efdc:	4632      	mov	r2, r6
 801efde:	4641      	mov	r1, r8
 801efe0:	f000 f980 	bl	801f2e4 <memmove>
 801efe4:	68a3      	ldr	r3, [r4, #8]
 801efe6:	1b9b      	subs	r3, r3, r6
 801efe8:	60a3      	str	r3, [r4, #8]
 801efea:	6823      	ldr	r3, [r4, #0]
 801efec:	4433      	add	r3, r6
 801efee:	6023      	str	r3, [r4, #0]
 801eff0:	2000      	movs	r0, #0
 801eff2:	e7db      	b.n	801efac <__ssputs_r+0x58>
 801eff4:	462a      	mov	r2, r5
 801eff6:	f000 f98f 	bl	801f318 <_realloc_r>
 801effa:	4606      	mov	r6, r0
 801effc:	2800      	cmp	r0, #0
 801effe:	d1e1      	bne.n	801efc4 <__ssputs_r+0x70>
 801f000:	6921      	ldr	r1, [r4, #16]
 801f002:	4650      	mov	r0, sl
 801f004:	f7ff ff5a 	bl	801eebc <_free_r>
 801f008:	e7c7      	b.n	801ef9a <__ssputs_r+0x46>
	...

0801f00c <_svfiprintf_r>:
 801f00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f010:	4698      	mov	r8, r3
 801f012:	898b      	ldrh	r3, [r1, #12]
 801f014:	061b      	lsls	r3, r3, #24
 801f016:	b09d      	sub	sp, #116	; 0x74
 801f018:	4607      	mov	r7, r0
 801f01a:	460d      	mov	r5, r1
 801f01c:	4614      	mov	r4, r2
 801f01e:	d50e      	bpl.n	801f03e <_svfiprintf_r+0x32>
 801f020:	690b      	ldr	r3, [r1, #16]
 801f022:	b963      	cbnz	r3, 801f03e <_svfiprintf_r+0x32>
 801f024:	2140      	movs	r1, #64	; 0x40
 801f026:	f7fc f8ad 	bl	801b184 <_malloc_r>
 801f02a:	6028      	str	r0, [r5, #0]
 801f02c:	6128      	str	r0, [r5, #16]
 801f02e:	b920      	cbnz	r0, 801f03a <_svfiprintf_r+0x2e>
 801f030:	230c      	movs	r3, #12
 801f032:	603b      	str	r3, [r7, #0]
 801f034:	f04f 30ff 	mov.w	r0, #4294967295
 801f038:	e0d1      	b.n	801f1de <_svfiprintf_r+0x1d2>
 801f03a:	2340      	movs	r3, #64	; 0x40
 801f03c:	616b      	str	r3, [r5, #20]
 801f03e:	2300      	movs	r3, #0
 801f040:	9309      	str	r3, [sp, #36]	; 0x24
 801f042:	2320      	movs	r3, #32
 801f044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f048:	f8cd 800c 	str.w	r8, [sp, #12]
 801f04c:	2330      	movs	r3, #48	; 0x30
 801f04e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f1f8 <_svfiprintf_r+0x1ec>
 801f052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f056:	f04f 0901 	mov.w	r9, #1
 801f05a:	4623      	mov	r3, r4
 801f05c:	469a      	mov	sl, r3
 801f05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f062:	b10a      	cbz	r2, 801f068 <_svfiprintf_r+0x5c>
 801f064:	2a25      	cmp	r2, #37	; 0x25
 801f066:	d1f9      	bne.n	801f05c <_svfiprintf_r+0x50>
 801f068:	ebba 0b04 	subs.w	fp, sl, r4
 801f06c:	d00b      	beq.n	801f086 <_svfiprintf_r+0x7a>
 801f06e:	465b      	mov	r3, fp
 801f070:	4622      	mov	r2, r4
 801f072:	4629      	mov	r1, r5
 801f074:	4638      	mov	r0, r7
 801f076:	f7ff ff6d 	bl	801ef54 <__ssputs_r>
 801f07a:	3001      	adds	r0, #1
 801f07c:	f000 80aa 	beq.w	801f1d4 <_svfiprintf_r+0x1c8>
 801f080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f082:	445a      	add	r2, fp
 801f084:	9209      	str	r2, [sp, #36]	; 0x24
 801f086:	f89a 3000 	ldrb.w	r3, [sl]
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	f000 80a2 	beq.w	801f1d4 <_svfiprintf_r+0x1c8>
 801f090:	2300      	movs	r3, #0
 801f092:	f04f 32ff 	mov.w	r2, #4294967295
 801f096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f09a:	f10a 0a01 	add.w	sl, sl, #1
 801f09e:	9304      	str	r3, [sp, #16]
 801f0a0:	9307      	str	r3, [sp, #28]
 801f0a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f0a6:	931a      	str	r3, [sp, #104]	; 0x68
 801f0a8:	4654      	mov	r4, sl
 801f0aa:	2205      	movs	r2, #5
 801f0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f0b0:	4851      	ldr	r0, [pc, #324]	; (801f1f8 <_svfiprintf_r+0x1ec>)
 801f0b2:	f7e1 f895 	bl	80001e0 <memchr>
 801f0b6:	9a04      	ldr	r2, [sp, #16]
 801f0b8:	b9d8      	cbnz	r0, 801f0f2 <_svfiprintf_r+0xe6>
 801f0ba:	06d0      	lsls	r0, r2, #27
 801f0bc:	bf44      	itt	mi
 801f0be:	2320      	movmi	r3, #32
 801f0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f0c4:	0711      	lsls	r1, r2, #28
 801f0c6:	bf44      	itt	mi
 801f0c8:	232b      	movmi	r3, #43	; 0x2b
 801f0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f0ce:	f89a 3000 	ldrb.w	r3, [sl]
 801f0d2:	2b2a      	cmp	r3, #42	; 0x2a
 801f0d4:	d015      	beq.n	801f102 <_svfiprintf_r+0xf6>
 801f0d6:	9a07      	ldr	r2, [sp, #28]
 801f0d8:	4654      	mov	r4, sl
 801f0da:	2000      	movs	r0, #0
 801f0dc:	f04f 0c0a 	mov.w	ip, #10
 801f0e0:	4621      	mov	r1, r4
 801f0e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f0e6:	3b30      	subs	r3, #48	; 0x30
 801f0e8:	2b09      	cmp	r3, #9
 801f0ea:	d94e      	bls.n	801f18a <_svfiprintf_r+0x17e>
 801f0ec:	b1b0      	cbz	r0, 801f11c <_svfiprintf_r+0x110>
 801f0ee:	9207      	str	r2, [sp, #28]
 801f0f0:	e014      	b.n	801f11c <_svfiprintf_r+0x110>
 801f0f2:	eba0 0308 	sub.w	r3, r0, r8
 801f0f6:	fa09 f303 	lsl.w	r3, r9, r3
 801f0fa:	4313      	orrs	r3, r2
 801f0fc:	9304      	str	r3, [sp, #16]
 801f0fe:	46a2      	mov	sl, r4
 801f100:	e7d2      	b.n	801f0a8 <_svfiprintf_r+0x9c>
 801f102:	9b03      	ldr	r3, [sp, #12]
 801f104:	1d19      	adds	r1, r3, #4
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	9103      	str	r1, [sp, #12]
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	bfbb      	ittet	lt
 801f10e:	425b      	neglt	r3, r3
 801f110:	f042 0202 	orrlt.w	r2, r2, #2
 801f114:	9307      	strge	r3, [sp, #28]
 801f116:	9307      	strlt	r3, [sp, #28]
 801f118:	bfb8      	it	lt
 801f11a:	9204      	strlt	r2, [sp, #16]
 801f11c:	7823      	ldrb	r3, [r4, #0]
 801f11e:	2b2e      	cmp	r3, #46	; 0x2e
 801f120:	d10c      	bne.n	801f13c <_svfiprintf_r+0x130>
 801f122:	7863      	ldrb	r3, [r4, #1]
 801f124:	2b2a      	cmp	r3, #42	; 0x2a
 801f126:	d135      	bne.n	801f194 <_svfiprintf_r+0x188>
 801f128:	9b03      	ldr	r3, [sp, #12]
 801f12a:	1d1a      	adds	r2, r3, #4
 801f12c:	681b      	ldr	r3, [r3, #0]
 801f12e:	9203      	str	r2, [sp, #12]
 801f130:	2b00      	cmp	r3, #0
 801f132:	bfb8      	it	lt
 801f134:	f04f 33ff 	movlt.w	r3, #4294967295
 801f138:	3402      	adds	r4, #2
 801f13a:	9305      	str	r3, [sp, #20]
 801f13c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f208 <_svfiprintf_r+0x1fc>
 801f140:	7821      	ldrb	r1, [r4, #0]
 801f142:	2203      	movs	r2, #3
 801f144:	4650      	mov	r0, sl
 801f146:	f7e1 f84b 	bl	80001e0 <memchr>
 801f14a:	b140      	cbz	r0, 801f15e <_svfiprintf_r+0x152>
 801f14c:	2340      	movs	r3, #64	; 0x40
 801f14e:	eba0 000a 	sub.w	r0, r0, sl
 801f152:	fa03 f000 	lsl.w	r0, r3, r0
 801f156:	9b04      	ldr	r3, [sp, #16]
 801f158:	4303      	orrs	r3, r0
 801f15a:	3401      	adds	r4, #1
 801f15c:	9304      	str	r3, [sp, #16]
 801f15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f162:	4826      	ldr	r0, [pc, #152]	; (801f1fc <_svfiprintf_r+0x1f0>)
 801f164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f168:	2206      	movs	r2, #6
 801f16a:	f7e1 f839 	bl	80001e0 <memchr>
 801f16e:	2800      	cmp	r0, #0
 801f170:	d038      	beq.n	801f1e4 <_svfiprintf_r+0x1d8>
 801f172:	4b23      	ldr	r3, [pc, #140]	; (801f200 <_svfiprintf_r+0x1f4>)
 801f174:	bb1b      	cbnz	r3, 801f1be <_svfiprintf_r+0x1b2>
 801f176:	9b03      	ldr	r3, [sp, #12]
 801f178:	3307      	adds	r3, #7
 801f17a:	f023 0307 	bic.w	r3, r3, #7
 801f17e:	3308      	adds	r3, #8
 801f180:	9303      	str	r3, [sp, #12]
 801f182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f184:	4433      	add	r3, r6
 801f186:	9309      	str	r3, [sp, #36]	; 0x24
 801f188:	e767      	b.n	801f05a <_svfiprintf_r+0x4e>
 801f18a:	fb0c 3202 	mla	r2, ip, r2, r3
 801f18e:	460c      	mov	r4, r1
 801f190:	2001      	movs	r0, #1
 801f192:	e7a5      	b.n	801f0e0 <_svfiprintf_r+0xd4>
 801f194:	2300      	movs	r3, #0
 801f196:	3401      	adds	r4, #1
 801f198:	9305      	str	r3, [sp, #20]
 801f19a:	4619      	mov	r1, r3
 801f19c:	f04f 0c0a 	mov.w	ip, #10
 801f1a0:	4620      	mov	r0, r4
 801f1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f1a6:	3a30      	subs	r2, #48	; 0x30
 801f1a8:	2a09      	cmp	r2, #9
 801f1aa:	d903      	bls.n	801f1b4 <_svfiprintf_r+0x1a8>
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d0c5      	beq.n	801f13c <_svfiprintf_r+0x130>
 801f1b0:	9105      	str	r1, [sp, #20]
 801f1b2:	e7c3      	b.n	801f13c <_svfiprintf_r+0x130>
 801f1b4:	fb0c 2101 	mla	r1, ip, r1, r2
 801f1b8:	4604      	mov	r4, r0
 801f1ba:	2301      	movs	r3, #1
 801f1bc:	e7f0      	b.n	801f1a0 <_svfiprintf_r+0x194>
 801f1be:	ab03      	add	r3, sp, #12
 801f1c0:	9300      	str	r3, [sp, #0]
 801f1c2:	462a      	mov	r2, r5
 801f1c4:	4b0f      	ldr	r3, [pc, #60]	; (801f204 <_svfiprintf_r+0x1f8>)
 801f1c6:	a904      	add	r1, sp, #16
 801f1c8:	4638      	mov	r0, r7
 801f1ca:	f7fc f8ef 	bl	801b3ac <_printf_float>
 801f1ce:	1c42      	adds	r2, r0, #1
 801f1d0:	4606      	mov	r6, r0
 801f1d2:	d1d6      	bne.n	801f182 <_svfiprintf_r+0x176>
 801f1d4:	89ab      	ldrh	r3, [r5, #12]
 801f1d6:	065b      	lsls	r3, r3, #25
 801f1d8:	f53f af2c 	bmi.w	801f034 <_svfiprintf_r+0x28>
 801f1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f1de:	b01d      	add	sp, #116	; 0x74
 801f1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1e4:	ab03      	add	r3, sp, #12
 801f1e6:	9300      	str	r3, [sp, #0]
 801f1e8:	462a      	mov	r2, r5
 801f1ea:	4b06      	ldr	r3, [pc, #24]	; (801f204 <_svfiprintf_r+0x1f8>)
 801f1ec:	a904      	add	r1, sp, #16
 801f1ee:	4638      	mov	r0, r7
 801f1f0:	f7fc fb80 	bl	801b8f4 <_printf_i>
 801f1f4:	e7eb      	b.n	801f1ce <_svfiprintf_r+0x1c2>
 801f1f6:	bf00      	nop
 801f1f8:	0802229c 	.word	0x0802229c
 801f1fc:	080222a6 	.word	0x080222a6
 801f200:	0801b3ad 	.word	0x0801b3ad
 801f204:	0801ef55 	.word	0x0801ef55
 801f208:	080222a2 	.word	0x080222a2

0801f20c <_read_r>:
 801f20c:	b538      	push	{r3, r4, r5, lr}
 801f20e:	4d07      	ldr	r5, [pc, #28]	; (801f22c <_read_r+0x20>)
 801f210:	4604      	mov	r4, r0
 801f212:	4608      	mov	r0, r1
 801f214:	4611      	mov	r1, r2
 801f216:	2200      	movs	r2, #0
 801f218:	602a      	str	r2, [r5, #0]
 801f21a:	461a      	mov	r2, r3
 801f21c:	f002 fa2a 	bl	8021674 <_read>
 801f220:	1c43      	adds	r3, r0, #1
 801f222:	d102      	bne.n	801f22a <_read_r+0x1e>
 801f224:	682b      	ldr	r3, [r5, #0]
 801f226:	b103      	cbz	r3, 801f22a <_read_r+0x1e>
 801f228:	6023      	str	r3, [r4, #0]
 801f22a:	bd38      	pop	{r3, r4, r5, pc}
 801f22c:	2000e9a4 	.word	0x2000e9a4

0801f230 <nan>:
 801f230:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f238 <nan+0x8>
 801f234:	4770      	bx	lr
 801f236:	bf00      	nop
 801f238:	00000000 	.word	0x00000000
 801f23c:	7ff80000 	.word	0x7ff80000

0801f240 <strncmp>:
 801f240:	b510      	push	{r4, lr}
 801f242:	b17a      	cbz	r2, 801f264 <strncmp+0x24>
 801f244:	4603      	mov	r3, r0
 801f246:	3901      	subs	r1, #1
 801f248:	1884      	adds	r4, r0, r2
 801f24a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f24e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f252:	4290      	cmp	r0, r2
 801f254:	d101      	bne.n	801f25a <strncmp+0x1a>
 801f256:	42a3      	cmp	r3, r4
 801f258:	d101      	bne.n	801f25e <strncmp+0x1e>
 801f25a:	1a80      	subs	r0, r0, r2
 801f25c:	bd10      	pop	{r4, pc}
 801f25e:	2800      	cmp	r0, #0
 801f260:	d1f3      	bne.n	801f24a <strncmp+0xa>
 801f262:	e7fa      	b.n	801f25a <strncmp+0x1a>
 801f264:	4610      	mov	r0, r2
 801f266:	e7f9      	b.n	801f25c <strncmp+0x1c>

0801f268 <__ascii_wctomb>:
 801f268:	b149      	cbz	r1, 801f27e <__ascii_wctomb+0x16>
 801f26a:	2aff      	cmp	r2, #255	; 0xff
 801f26c:	bf85      	ittet	hi
 801f26e:	238a      	movhi	r3, #138	; 0x8a
 801f270:	6003      	strhi	r3, [r0, #0]
 801f272:	700a      	strbls	r2, [r1, #0]
 801f274:	f04f 30ff 	movhi.w	r0, #4294967295
 801f278:	bf98      	it	ls
 801f27a:	2001      	movls	r0, #1
 801f27c:	4770      	bx	lr
 801f27e:	4608      	mov	r0, r1
 801f280:	4770      	bx	lr
	...

0801f284 <__assert_func>:
 801f284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f286:	4614      	mov	r4, r2
 801f288:	461a      	mov	r2, r3
 801f28a:	4b09      	ldr	r3, [pc, #36]	; (801f2b0 <__assert_func+0x2c>)
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	4605      	mov	r5, r0
 801f290:	68d8      	ldr	r0, [r3, #12]
 801f292:	b14c      	cbz	r4, 801f2a8 <__assert_func+0x24>
 801f294:	4b07      	ldr	r3, [pc, #28]	; (801f2b4 <__assert_func+0x30>)
 801f296:	9100      	str	r1, [sp, #0]
 801f298:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f29c:	4906      	ldr	r1, [pc, #24]	; (801f2b8 <__assert_func+0x34>)
 801f29e:	462b      	mov	r3, r5
 801f2a0:	f000 f80e 	bl	801f2c0 <fiprintf>
 801f2a4:	f000 fa80 	bl	801f7a8 <abort>
 801f2a8:	4b04      	ldr	r3, [pc, #16]	; (801f2bc <__assert_func+0x38>)
 801f2aa:	461c      	mov	r4, r3
 801f2ac:	e7f3      	b.n	801f296 <__assert_func+0x12>
 801f2ae:	bf00      	nop
 801f2b0:	2000010c 	.word	0x2000010c
 801f2b4:	080222ad 	.word	0x080222ad
 801f2b8:	080222ba 	.word	0x080222ba
 801f2bc:	080222e8 	.word	0x080222e8

0801f2c0 <fiprintf>:
 801f2c0:	b40e      	push	{r1, r2, r3}
 801f2c2:	b503      	push	{r0, r1, lr}
 801f2c4:	4601      	mov	r1, r0
 801f2c6:	ab03      	add	r3, sp, #12
 801f2c8:	4805      	ldr	r0, [pc, #20]	; (801f2e0 <fiprintf+0x20>)
 801f2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2ce:	6800      	ldr	r0, [r0, #0]
 801f2d0:	9301      	str	r3, [sp, #4]
 801f2d2:	f000 f879 	bl	801f3c8 <_vfiprintf_r>
 801f2d6:	b002      	add	sp, #8
 801f2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801f2dc:	b003      	add	sp, #12
 801f2de:	4770      	bx	lr
 801f2e0:	2000010c 	.word	0x2000010c

0801f2e4 <memmove>:
 801f2e4:	4288      	cmp	r0, r1
 801f2e6:	b510      	push	{r4, lr}
 801f2e8:	eb01 0402 	add.w	r4, r1, r2
 801f2ec:	d902      	bls.n	801f2f4 <memmove+0x10>
 801f2ee:	4284      	cmp	r4, r0
 801f2f0:	4623      	mov	r3, r4
 801f2f2:	d807      	bhi.n	801f304 <memmove+0x20>
 801f2f4:	1e43      	subs	r3, r0, #1
 801f2f6:	42a1      	cmp	r1, r4
 801f2f8:	d008      	beq.n	801f30c <memmove+0x28>
 801f2fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f2fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f302:	e7f8      	b.n	801f2f6 <memmove+0x12>
 801f304:	4402      	add	r2, r0
 801f306:	4601      	mov	r1, r0
 801f308:	428a      	cmp	r2, r1
 801f30a:	d100      	bne.n	801f30e <memmove+0x2a>
 801f30c:	bd10      	pop	{r4, pc}
 801f30e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f316:	e7f7      	b.n	801f308 <memmove+0x24>

0801f318 <_realloc_r>:
 801f318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f31c:	4680      	mov	r8, r0
 801f31e:	4614      	mov	r4, r2
 801f320:	460e      	mov	r6, r1
 801f322:	b921      	cbnz	r1, 801f32e <_realloc_r+0x16>
 801f324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f328:	4611      	mov	r1, r2
 801f32a:	f7fb bf2b 	b.w	801b184 <_malloc_r>
 801f32e:	b92a      	cbnz	r2, 801f33c <_realloc_r+0x24>
 801f330:	f7ff fdc4 	bl	801eebc <_free_r>
 801f334:	4625      	mov	r5, r4
 801f336:	4628      	mov	r0, r5
 801f338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f33c:	f000 faa0 	bl	801f880 <_malloc_usable_size_r>
 801f340:	4284      	cmp	r4, r0
 801f342:	4607      	mov	r7, r0
 801f344:	d802      	bhi.n	801f34c <_realloc_r+0x34>
 801f346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f34a:	d812      	bhi.n	801f372 <_realloc_r+0x5a>
 801f34c:	4621      	mov	r1, r4
 801f34e:	4640      	mov	r0, r8
 801f350:	f7fb ff18 	bl	801b184 <_malloc_r>
 801f354:	4605      	mov	r5, r0
 801f356:	2800      	cmp	r0, #0
 801f358:	d0ed      	beq.n	801f336 <_realloc_r+0x1e>
 801f35a:	42bc      	cmp	r4, r7
 801f35c:	4622      	mov	r2, r4
 801f35e:	4631      	mov	r1, r6
 801f360:	bf28      	it	cs
 801f362:	463a      	movcs	r2, r7
 801f364:	f7fb fed7 	bl	801b116 <memcpy>
 801f368:	4631      	mov	r1, r6
 801f36a:	4640      	mov	r0, r8
 801f36c:	f7ff fda6 	bl	801eebc <_free_r>
 801f370:	e7e1      	b.n	801f336 <_realloc_r+0x1e>
 801f372:	4635      	mov	r5, r6
 801f374:	e7df      	b.n	801f336 <_realloc_r+0x1e>

0801f376 <__sfputc_r>:
 801f376:	6893      	ldr	r3, [r2, #8]
 801f378:	3b01      	subs	r3, #1
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	b410      	push	{r4}
 801f37e:	6093      	str	r3, [r2, #8]
 801f380:	da08      	bge.n	801f394 <__sfputc_r+0x1e>
 801f382:	6994      	ldr	r4, [r2, #24]
 801f384:	42a3      	cmp	r3, r4
 801f386:	db01      	blt.n	801f38c <__sfputc_r+0x16>
 801f388:	290a      	cmp	r1, #10
 801f38a:	d103      	bne.n	801f394 <__sfputc_r+0x1e>
 801f38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f390:	f000 b94a 	b.w	801f628 <__swbuf_r>
 801f394:	6813      	ldr	r3, [r2, #0]
 801f396:	1c58      	adds	r0, r3, #1
 801f398:	6010      	str	r0, [r2, #0]
 801f39a:	7019      	strb	r1, [r3, #0]
 801f39c:	4608      	mov	r0, r1
 801f39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f3a2:	4770      	bx	lr

0801f3a4 <__sfputs_r>:
 801f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3a6:	4606      	mov	r6, r0
 801f3a8:	460f      	mov	r7, r1
 801f3aa:	4614      	mov	r4, r2
 801f3ac:	18d5      	adds	r5, r2, r3
 801f3ae:	42ac      	cmp	r4, r5
 801f3b0:	d101      	bne.n	801f3b6 <__sfputs_r+0x12>
 801f3b2:	2000      	movs	r0, #0
 801f3b4:	e007      	b.n	801f3c6 <__sfputs_r+0x22>
 801f3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3ba:	463a      	mov	r2, r7
 801f3bc:	4630      	mov	r0, r6
 801f3be:	f7ff ffda 	bl	801f376 <__sfputc_r>
 801f3c2:	1c43      	adds	r3, r0, #1
 801f3c4:	d1f3      	bne.n	801f3ae <__sfputs_r+0xa>
 801f3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f3c8 <_vfiprintf_r>:
 801f3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3cc:	460d      	mov	r5, r1
 801f3ce:	b09d      	sub	sp, #116	; 0x74
 801f3d0:	4614      	mov	r4, r2
 801f3d2:	4698      	mov	r8, r3
 801f3d4:	4606      	mov	r6, r0
 801f3d6:	b118      	cbz	r0, 801f3e0 <_vfiprintf_r+0x18>
 801f3d8:	6983      	ldr	r3, [r0, #24]
 801f3da:	b90b      	cbnz	r3, 801f3e0 <_vfiprintf_r+0x18>
 801f3dc:	f7fb fdd6 	bl	801af8c <__sinit>
 801f3e0:	4b89      	ldr	r3, [pc, #548]	; (801f608 <_vfiprintf_r+0x240>)
 801f3e2:	429d      	cmp	r5, r3
 801f3e4:	d11b      	bne.n	801f41e <_vfiprintf_r+0x56>
 801f3e6:	6875      	ldr	r5, [r6, #4]
 801f3e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f3ea:	07d9      	lsls	r1, r3, #31
 801f3ec:	d405      	bmi.n	801f3fa <_vfiprintf_r+0x32>
 801f3ee:	89ab      	ldrh	r3, [r5, #12]
 801f3f0:	059a      	lsls	r2, r3, #22
 801f3f2:	d402      	bmi.n	801f3fa <_vfiprintf_r+0x32>
 801f3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f3f6:	f7fb fe8c 	bl	801b112 <__retarget_lock_acquire_recursive>
 801f3fa:	89ab      	ldrh	r3, [r5, #12]
 801f3fc:	071b      	lsls	r3, r3, #28
 801f3fe:	d501      	bpl.n	801f404 <_vfiprintf_r+0x3c>
 801f400:	692b      	ldr	r3, [r5, #16]
 801f402:	b9eb      	cbnz	r3, 801f440 <_vfiprintf_r+0x78>
 801f404:	4629      	mov	r1, r5
 801f406:	4630      	mov	r0, r6
 801f408:	f000 f960 	bl	801f6cc <__swsetup_r>
 801f40c:	b1c0      	cbz	r0, 801f440 <_vfiprintf_r+0x78>
 801f40e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f410:	07dc      	lsls	r4, r3, #31
 801f412:	d50e      	bpl.n	801f432 <_vfiprintf_r+0x6a>
 801f414:	f04f 30ff 	mov.w	r0, #4294967295
 801f418:	b01d      	add	sp, #116	; 0x74
 801f41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f41e:	4b7b      	ldr	r3, [pc, #492]	; (801f60c <_vfiprintf_r+0x244>)
 801f420:	429d      	cmp	r5, r3
 801f422:	d101      	bne.n	801f428 <_vfiprintf_r+0x60>
 801f424:	68b5      	ldr	r5, [r6, #8]
 801f426:	e7df      	b.n	801f3e8 <_vfiprintf_r+0x20>
 801f428:	4b79      	ldr	r3, [pc, #484]	; (801f610 <_vfiprintf_r+0x248>)
 801f42a:	429d      	cmp	r5, r3
 801f42c:	bf08      	it	eq
 801f42e:	68f5      	ldreq	r5, [r6, #12]
 801f430:	e7da      	b.n	801f3e8 <_vfiprintf_r+0x20>
 801f432:	89ab      	ldrh	r3, [r5, #12]
 801f434:	0598      	lsls	r0, r3, #22
 801f436:	d4ed      	bmi.n	801f414 <_vfiprintf_r+0x4c>
 801f438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f43a:	f7fb fe6b 	bl	801b114 <__retarget_lock_release_recursive>
 801f43e:	e7e9      	b.n	801f414 <_vfiprintf_r+0x4c>
 801f440:	2300      	movs	r3, #0
 801f442:	9309      	str	r3, [sp, #36]	; 0x24
 801f444:	2320      	movs	r3, #32
 801f446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f44a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f44e:	2330      	movs	r3, #48	; 0x30
 801f450:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f614 <_vfiprintf_r+0x24c>
 801f454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f458:	f04f 0901 	mov.w	r9, #1
 801f45c:	4623      	mov	r3, r4
 801f45e:	469a      	mov	sl, r3
 801f460:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f464:	b10a      	cbz	r2, 801f46a <_vfiprintf_r+0xa2>
 801f466:	2a25      	cmp	r2, #37	; 0x25
 801f468:	d1f9      	bne.n	801f45e <_vfiprintf_r+0x96>
 801f46a:	ebba 0b04 	subs.w	fp, sl, r4
 801f46e:	d00b      	beq.n	801f488 <_vfiprintf_r+0xc0>
 801f470:	465b      	mov	r3, fp
 801f472:	4622      	mov	r2, r4
 801f474:	4629      	mov	r1, r5
 801f476:	4630      	mov	r0, r6
 801f478:	f7ff ff94 	bl	801f3a4 <__sfputs_r>
 801f47c:	3001      	adds	r0, #1
 801f47e:	f000 80aa 	beq.w	801f5d6 <_vfiprintf_r+0x20e>
 801f482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f484:	445a      	add	r2, fp
 801f486:	9209      	str	r2, [sp, #36]	; 0x24
 801f488:	f89a 3000 	ldrb.w	r3, [sl]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	f000 80a2 	beq.w	801f5d6 <_vfiprintf_r+0x20e>
 801f492:	2300      	movs	r3, #0
 801f494:	f04f 32ff 	mov.w	r2, #4294967295
 801f498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f49c:	f10a 0a01 	add.w	sl, sl, #1
 801f4a0:	9304      	str	r3, [sp, #16]
 801f4a2:	9307      	str	r3, [sp, #28]
 801f4a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f4a8:	931a      	str	r3, [sp, #104]	; 0x68
 801f4aa:	4654      	mov	r4, sl
 801f4ac:	2205      	movs	r2, #5
 801f4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f4b2:	4858      	ldr	r0, [pc, #352]	; (801f614 <_vfiprintf_r+0x24c>)
 801f4b4:	f7e0 fe94 	bl	80001e0 <memchr>
 801f4b8:	9a04      	ldr	r2, [sp, #16]
 801f4ba:	b9d8      	cbnz	r0, 801f4f4 <_vfiprintf_r+0x12c>
 801f4bc:	06d1      	lsls	r1, r2, #27
 801f4be:	bf44      	itt	mi
 801f4c0:	2320      	movmi	r3, #32
 801f4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f4c6:	0713      	lsls	r3, r2, #28
 801f4c8:	bf44      	itt	mi
 801f4ca:	232b      	movmi	r3, #43	; 0x2b
 801f4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f4d0:	f89a 3000 	ldrb.w	r3, [sl]
 801f4d4:	2b2a      	cmp	r3, #42	; 0x2a
 801f4d6:	d015      	beq.n	801f504 <_vfiprintf_r+0x13c>
 801f4d8:	9a07      	ldr	r2, [sp, #28]
 801f4da:	4654      	mov	r4, sl
 801f4dc:	2000      	movs	r0, #0
 801f4de:	f04f 0c0a 	mov.w	ip, #10
 801f4e2:	4621      	mov	r1, r4
 801f4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f4e8:	3b30      	subs	r3, #48	; 0x30
 801f4ea:	2b09      	cmp	r3, #9
 801f4ec:	d94e      	bls.n	801f58c <_vfiprintf_r+0x1c4>
 801f4ee:	b1b0      	cbz	r0, 801f51e <_vfiprintf_r+0x156>
 801f4f0:	9207      	str	r2, [sp, #28]
 801f4f2:	e014      	b.n	801f51e <_vfiprintf_r+0x156>
 801f4f4:	eba0 0308 	sub.w	r3, r0, r8
 801f4f8:	fa09 f303 	lsl.w	r3, r9, r3
 801f4fc:	4313      	orrs	r3, r2
 801f4fe:	9304      	str	r3, [sp, #16]
 801f500:	46a2      	mov	sl, r4
 801f502:	e7d2      	b.n	801f4aa <_vfiprintf_r+0xe2>
 801f504:	9b03      	ldr	r3, [sp, #12]
 801f506:	1d19      	adds	r1, r3, #4
 801f508:	681b      	ldr	r3, [r3, #0]
 801f50a:	9103      	str	r1, [sp, #12]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	bfbb      	ittet	lt
 801f510:	425b      	neglt	r3, r3
 801f512:	f042 0202 	orrlt.w	r2, r2, #2
 801f516:	9307      	strge	r3, [sp, #28]
 801f518:	9307      	strlt	r3, [sp, #28]
 801f51a:	bfb8      	it	lt
 801f51c:	9204      	strlt	r2, [sp, #16]
 801f51e:	7823      	ldrb	r3, [r4, #0]
 801f520:	2b2e      	cmp	r3, #46	; 0x2e
 801f522:	d10c      	bne.n	801f53e <_vfiprintf_r+0x176>
 801f524:	7863      	ldrb	r3, [r4, #1]
 801f526:	2b2a      	cmp	r3, #42	; 0x2a
 801f528:	d135      	bne.n	801f596 <_vfiprintf_r+0x1ce>
 801f52a:	9b03      	ldr	r3, [sp, #12]
 801f52c:	1d1a      	adds	r2, r3, #4
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	9203      	str	r2, [sp, #12]
 801f532:	2b00      	cmp	r3, #0
 801f534:	bfb8      	it	lt
 801f536:	f04f 33ff 	movlt.w	r3, #4294967295
 801f53a:	3402      	adds	r4, #2
 801f53c:	9305      	str	r3, [sp, #20]
 801f53e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f624 <_vfiprintf_r+0x25c>
 801f542:	7821      	ldrb	r1, [r4, #0]
 801f544:	2203      	movs	r2, #3
 801f546:	4650      	mov	r0, sl
 801f548:	f7e0 fe4a 	bl	80001e0 <memchr>
 801f54c:	b140      	cbz	r0, 801f560 <_vfiprintf_r+0x198>
 801f54e:	2340      	movs	r3, #64	; 0x40
 801f550:	eba0 000a 	sub.w	r0, r0, sl
 801f554:	fa03 f000 	lsl.w	r0, r3, r0
 801f558:	9b04      	ldr	r3, [sp, #16]
 801f55a:	4303      	orrs	r3, r0
 801f55c:	3401      	adds	r4, #1
 801f55e:	9304      	str	r3, [sp, #16]
 801f560:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f564:	482c      	ldr	r0, [pc, #176]	; (801f618 <_vfiprintf_r+0x250>)
 801f566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f56a:	2206      	movs	r2, #6
 801f56c:	f7e0 fe38 	bl	80001e0 <memchr>
 801f570:	2800      	cmp	r0, #0
 801f572:	d03f      	beq.n	801f5f4 <_vfiprintf_r+0x22c>
 801f574:	4b29      	ldr	r3, [pc, #164]	; (801f61c <_vfiprintf_r+0x254>)
 801f576:	bb1b      	cbnz	r3, 801f5c0 <_vfiprintf_r+0x1f8>
 801f578:	9b03      	ldr	r3, [sp, #12]
 801f57a:	3307      	adds	r3, #7
 801f57c:	f023 0307 	bic.w	r3, r3, #7
 801f580:	3308      	adds	r3, #8
 801f582:	9303      	str	r3, [sp, #12]
 801f584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f586:	443b      	add	r3, r7
 801f588:	9309      	str	r3, [sp, #36]	; 0x24
 801f58a:	e767      	b.n	801f45c <_vfiprintf_r+0x94>
 801f58c:	fb0c 3202 	mla	r2, ip, r2, r3
 801f590:	460c      	mov	r4, r1
 801f592:	2001      	movs	r0, #1
 801f594:	e7a5      	b.n	801f4e2 <_vfiprintf_r+0x11a>
 801f596:	2300      	movs	r3, #0
 801f598:	3401      	adds	r4, #1
 801f59a:	9305      	str	r3, [sp, #20]
 801f59c:	4619      	mov	r1, r3
 801f59e:	f04f 0c0a 	mov.w	ip, #10
 801f5a2:	4620      	mov	r0, r4
 801f5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f5a8:	3a30      	subs	r2, #48	; 0x30
 801f5aa:	2a09      	cmp	r2, #9
 801f5ac:	d903      	bls.n	801f5b6 <_vfiprintf_r+0x1ee>
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d0c5      	beq.n	801f53e <_vfiprintf_r+0x176>
 801f5b2:	9105      	str	r1, [sp, #20]
 801f5b4:	e7c3      	b.n	801f53e <_vfiprintf_r+0x176>
 801f5b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f5ba:	4604      	mov	r4, r0
 801f5bc:	2301      	movs	r3, #1
 801f5be:	e7f0      	b.n	801f5a2 <_vfiprintf_r+0x1da>
 801f5c0:	ab03      	add	r3, sp, #12
 801f5c2:	9300      	str	r3, [sp, #0]
 801f5c4:	462a      	mov	r2, r5
 801f5c6:	4b16      	ldr	r3, [pc, #88]	; (801f620 <_vfiprintf_r+0x258>)
 801f5c8:	a904      	add	r1, sp, #16
 801f5ca:	4630      	mov	r0, r6
 801f5cc:	f7fb feee 	bl	801b3ac <_printf_float>
 801f5d0:	4607      	mov	r7, r0
 801f5d2:	1c78      	adds	r0, r7, #1
 801f5d4:	d1d6      	bne.n	801f584 <_vfiprintf_r+0x1bc>
 801f5d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f5d8:	07d9      	lsls	r1, r3, #31
 801f5da:	d405      	bmi.n	801f5e8 <_vfiprintf_r+0x220>
 801f5dc:	89ab      	ldrh	r3, [r5, #12]
 801f5de:	059a      	lsls	r2, r3, #22
 801f5e0:	d402      	bmi.n	801f5e8 <_vfiprintf_r+0x220>
 801f5e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f5e4:	f7fb fd96 	bl	801b114 <__retarget_lock_release_recursive>
 801f5e8:	89ab      	ldrh	r3, [r5, #12]
 801f5ea:	065b      	lsls	r3, r3, #25
 801f5ec:	f53f af12 	bmi.w	801f414 <_vfiprintf_r+0x4c>
 801f5f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f5f2:	e711      	b.n	801f418 <_vfiprintf_r+0x50>
 801f5f4:	ab03      	add	r3, sp, #12
 801f5f6:	9300      	str	r3, [sp, #0]
 801f5f8:	462a      	mov	r2, r5
 801f5fa:	4b09      	ldr	r3, [pc, #36]	; (801f620 <_vfiprintf_r+0x258>)
 801f5fc:	a904      	add	r1, sp, #16
 801f5fe:	4630      	mov	r0, r6
 801f600:	f7fc f978 	bl	801b8f4 <_printf_i>
 801f604:	e7e4      	b.n	801f5d0 <_vfiprintf_r+0x208>
 801f606:	bf00      	nop
 801f608:	08021e64 	.word	0x08021e64
 801f60c:	08021e84 	.word	0x08021e84
 801f610:	08021e44 	.word	0x08021e44
 801f614:	0802229c 	.word	0x0802229c
 801f618:	080222a6 	.word	0x080222a6
 801f61c:	0801b3ad 	.word	0x0801b3ad
 801f620:	0801f3a5 	.word	0x0801f3a5
 801f624:	080222a2 	.word	0x080222a2

0801f628 <__swbuf_r>:
 801f628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f62a:	460e      	mov	r6, r1
 801f62c:	4614      	mov	r4, r2
 801f62e:	4605      	mov	r5, r0
 801f630:	b118      	cbz	r0, 801f63a <__swbuf_r+0x12>
 801f632:	6983      	ldr	r3, [r0, #24]
 801f634:	b90b      	cbnz	r3, 801f63a <__swbuf_r+0x12>
 801f636:	f7fb fca9 	bl	801af8c <__sinit>
 801f63a:	4b21      	ldr	r3, [pc, #132]	; (801f6c0 <__swbuf_r+0x98>)
 801f63c:	429c      	cmp	r4, r3
 801f63e:	d12b      	bne.n	801f698 <__swbuf_r+0x70>
 801f640:	686c      	ldr	r4, [r5, #4]
 801f642:	69a3      	ldr	r3, [r4, #24]
 801f644:	60a3      	str	r3, [r4, #8]
 801f646:	89a3      	ldrh	r3, [r4, #12]
 801f648:	071a      	lsls	r2, r3, #28
 801f64a:	d52f      	bpl.n	801f6ac <__swbuf_r+0x84>
 801f64c:	6923      	ldr	r3, [r4, #16]
 801f64e:	b36b      	cbz	r3, 801f6ac <__swbuf_r+0x84>
 801f650:	6923      	ldr	r3, [r4, #16]
 801f652:	6820      	ldr	r0, [r4, #0]
 801f654:	1ac0      	subs	r0, r0, r3
 801f656:	6963      	ldr	r3, [r4, #20]
 801f658:	b2f6      	uxtb	r6, r6
 801f65a:	4283      	cmp	r3, r0
 801f65c:	4637      	mov	r7, r6
 801f65e:	dc04      	bgt.n	801f66a <__swbuf_r+0x42>
 801f660:	4621      	mov	r1, r4
 801f662:	4628      	mov	r0, r5
 801f664:	f7fe fb6a 	bl	801dd3c <_fflush_r>
 801f668:	bb30      	cbnz	r0, 801f6b8 <__swbuf_r+0x90>
 801f66a:	68a3      	ldr	r3, [r4, #8]
 801f66c:	3b01      	subs	r3, #1
 801f66e:	60a3      	str	r3, [r4, #8]
 801f670:	6823      	ldr	r3, [r4, #0]
 801f672:	1c5a      	adds	r2, r3, #1
 801f674:	6022      	str	r2, [r4, #0]
 801f676:	701e      	strb	r6, [r3, #0]
 801f678:	6963      	ldr	r3, [r4, #20]
 801f67a:	3001      	adds	r0, #1
 801f67c:	4283      	cmp	r3, r0
 801f67e:	d004      	beq.n	801f68a <__swbuf_r+0x62>
 801f680:	89a3      	ldrh	r3, [r4, #12]
 801f682:	07db      	lsls	r3, r3, #31
 801f684:	d506      	bpl.n	801f694 <__swbuf_r+0x6c>
 801f686:	2e0a      	cmp	r6, #10
 801f688:	d104      	bne.n	801f694 <__swbuf_r+0x6c>
 801f68a:	4621      	mov	r1, r4
 801f68c:	4628      	mov	r0, r5
 801f68e:	f7fe fb55 	bl	801dd3c <_fflush_r>
 801f692:	b988      	cbnz	r0, 801f6b8 <__swbuf_r+0x90>
 801f694:	4638      	mov	r0, r7
 801f696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f698:	4b0a      	ldr	r3, [pc, #40]	; (801f6c4 <__swbuf_r+0x9c>)
 801f69a:	429c      	cmp	r4, r3
 801f69c:	d101      	bne.n	801f6a2 <__swbuf_r+0x7a>
 801f69e:	68ac      	ldr	r4, [r5, #8]
 801f6a0:	e7cf      	b.n	801f642 <__swbuf_r+0x1a>
 801f6a2:	4b09      	ldr	r3, [pc, #36]	; (801f6c8 <__swbuf_r+0xa0>)
 801f6a4:	429c      	cmp	r4, r3
 801f6a6:	bf08      	it	eq
 801f6a8:	68ec      	ldreq	r4, [r5, #12]
 801f6aa:	e7ca      	b.n	801f642 <__swbuf_r+0x1a>
 801f6ac:	4621      	mov	r1, r4
 801f6ae:	4628      	mov	r0, r5
 801f6b0:	f000 f80c 	bl	801f6cc <__swsetup_r>
 801f6b4:	2800      	cmp	r0, #0
 801f6b6:	d0cb      	beq.n	801f650 <__swbuf_r+0x28>
 801f6b8:	f04f 37ff 	mov.w	r7, #4294967295
 801f6bc:	e7ea      	b.n	801f694 <__swbuf_r+0x6c>
 801f6be:	bf00      	nop
 801f6c0:	08021e64 	.word	0x08021e64
 801f6c4:	08021e84 	.word	0x08021e84
 801f6c8:	08021e44 	.word	0x08021e44

0801f6cc <__swsetup_r>:
 801f6cc:	4b32      	ldr	r3, [pc, #200]	; (801f798 <__swsetup_r+0xcc>)
 801f6ce:	b570      	push	{r4, r5, r6, lr}
 801f6d0:	681d      	ldr	r5, [r3, #0]
 801f6d2:	4606      	mov	r6, r0
 801f6d4:	460c      	mov	r4, r1
 801f6d6:	b125      	cbz	r5, 801f6e2 <__swsetup_r+0x16>
 801f6d8:	69ab      	ldr	r3, [r5, #24]
 801f6da:	b913      	cbnz	r3, 801f6e2 <__swsetup_r+0x16>
 801f6dc:	4628      	mov	r0, r5
 801f6de:	f7fb fc55 	bl	801af8c <__sinit>
 801f6e2:	4b2e      	ldr	r3, [pc, #184]	; (801f79c <__swsetup_r+0xd0>)
 801f6e4:	429c      	cmp	r4, r3
 801f6e6:	d10f      	bne.n	801f708 <__swsetup_r+0x3c>
 801f6e8:	686c      	ldr	r4, [r5, #4]
 801f6ea:	89a3      	ldrh	r3, [r4, #12]
 801f6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f6f0:	0719      	lsls	r1, r3, #28
 801f6f2:	d42c      	bmi.n	801f74e <__swsetup_r+0x82>
 801f6f4:	06dd      	lsls	r5, r3, #27
 801f6f6:	d411      	bmi.n	801f71c <__swsetup_r+0x50>
 801f6f8:	2309      	movs	r3, #9
 801f6fa:	6033      	str	r3, [r6, #0]
 801f6fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f700:	81a3      	strh	r3, [r4, #12]
 801f702:	f04f 30ff 	mov.w	r0, #4294967295
 801f706:	e03e      	b.n	801f786 <__swsetup_r+0xba>
 801f708:	4b25      	ldr	r3, [pc, #148]	; (801f7a0 <__swsetup_r+0xd4>)
 801f70a:	429c      	cmp	r4, r3
 801f70c:	d101      	bne.n	801f712 <__swsetup_r+0x46>
 801f70e:	68ac      	ldr	r4, [r5, #8]
 801f710:	e7eb      	b.n	801f6ea <__swsetup_r+0x1e>
 801f712:	4b24      	ldr	r3, [pc, #144]	; (801f7a4 <__swsetup_r+0xd8>)
 801f714:	429c      	cmp	r4, r3
 801f716:	bf08      	it	eq
 801f718:	68ec      	ldreq	r4, [r5, #12]
 801f71a:	e7e6      	b.n	801f6ea <__swsetup_r+0x1e>
 801f71c:	0758      	lsls	r0, r3, #29
 801f71e:	d512      	bpl.n	801f746 <__swsetup_r+0x7a>
 801f720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f722:	b141      	cbz	r1, 801f736 <__swsetup_r+0x6a>
 801f724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f728:	4299      	cmp	r1, r3
 801f72a:	d002      	beq.n	801f732 <__swsetup_r+0x66>
 801f72c:	4630      	mov	r0, r6
 801f72e:	f7ff fbc5 	bl	801eebc <_free_r>
 801f732:	2300      	movs	r3, #0
 801f734:	6363      	str	r3, [r4, #52]	; 0x34
 801f736:	89a3      	ldrh	r3, [r4, #12]
 801f738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f73c:	81a3      	strh	r3, [r4, #12]
 801f73e:	2300      	movs	r3, #0
 801f740:	6063      	str	r3, [r4, #4]
 801f742:	6923      	ldr	r3, [r4, #16]
 801f744:	6023      	str	r3, [r4, #0]
 801f746:	89a3      	ldrh	r3, [r4, #12]
 801f748:	f043 0308 	orr.w	r3, r3, #8
 801f74c:	81a3      	strh	r3, [r4, #12]
 801f74e:	6923      	ldr	r3, [r4, #16]
 801f750:	b94b      	cbnz	r3, 801f766 <__swsetup_r+0x9a>
 801f752:	89a3      	ldrh	r3, [r4, #12]
 801f754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f75c:	d003      	beq.n	801f766 <__swsetup_r+0x9a>
 801f75e:	4621      	mov	r1, r4
 801f760:	4630      	mov	r0, r6
 801f762:	f000 f84d 	bl	801f800 <__smakebuf_r>
 801f766:	89a0      	ldrh	r0, [r4, #12]
 801f768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f76c:	f010 0301 	ands.w	r3, r0, #1
 801f770:	d00a      	beq.n	801f788 <__swsetup_r+0xbc>
 801f772:	2300      	movs	r3, #0
 801f774:	60a3      	str	r3, [r4, #8]
 801f776:	6963      	ldr	r3, [r4, #20]
 801f778:	425b      	negs	r3, r3
 801f77a:	61a3      	str	r3, [r4, #24]
 801f77c:	6923      	ldr	r3, [r4, #16]
 801f77e:	b943      	cbnz	r3, 801f792 <__swsetup_r+0xc6>
 801f780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f784:	d1ba      	bne.n	801f6fc <__swsetup_r+0x30>
 801f786:	bd70      	pop	{r4, r5, r6, pc}
 801f788:	0781      	lsls	r1, r0, #30
 801f78a:	bf58      	it	pl
 801f78c:	6963      	ldrpl	r3, [r4, #20]
 801f78e:	60a3      	str	r3, [r4, #8]
 801f790:	e7f4      	b.n	801f77c <__swsetup_r+0xb0>
 801f792:	2000      	movs	r0, #0
 801f794:	e7f7      	b.n	801f786 <__swsetup_r+0xba>
 801f796:	bf00      	nop
 801f798:	2000010c 	.word	0x2000010c
 801f79c:	08021e64 	.word	0x08021e64
 801f7a0:	08021e84 	.word	0x08021e84
 801f7a4:	08021e44 	.word	0x08021e44

0801f7a8 <abort>:
 801f7a8:	b508      	push	{r3, lr}
 801f7aa:	2006      	movs	r0, #6
 801f7ac:	f000 f898 	bl	801f8e0 <raise>
 801f7b0:	2001      	movs	r0, #1
 801f7b2:	f001 ff7d 	bl	80216b0 <_exit>

0801f7b6 <__swhatbuf_r>:
 801f7b6:	b570      	push	{r4, r5, r6, lr}
 801f7b8:	460e      	mov	r6, r1
 801f7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7be:	2900      	cmp	r1, #0
 801f7c0:	b096      	sub	sp, #88	; 0x58
 801f7c2:	4614      	mov	r4, r2
 801f7c4:	461d      	mov	r5, r3
 801f7c6:	da08      	bge.n	801f7da <__swhatbuf_r+0x24>
 801f7c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f7cc:	2200      	movs	r2, #0
 801f7ce:	602a      	str	r2, [r5, #0]
 801f7d0:	061a      	lsls	r2, r3, #24
 801f7d2:	d410      	bmi.n	801f7f6 <__swhatbuf_r+0x40>
 801f7d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f7d8:	e00e      	b.n	801f7f8 <__swhatbuf_r+0x42>
 801f7da:	466a      	mov	r2, sp
 801f7dc:	f000 f89c 	bl	801f918 <_fstat_r>
 801f7e0:	2800      	cmp	r0, #0
 801f7e2:	dbf1      	blt.n	801f7c8 <__swhatbuf_r+0x12>
 801f7e4:	9a01      	ldr	r2, [sp, #4]
 801f7e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f7ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f7ee:	425a      	negs	r2, r3
 801f7f0:	415a      	adcs	r2, r3
 801f7f2:	602a      	str	r2, [r5, #0]
 801f7f4:	e7ee      	b.n	801f7d4 <__swhatbuf_r+0x1e>
 801f7f6:	2340      	movs	r3, #64	; 0x40
 801f7f8:	2000      	movs	r0, #0
 801f7fa:	6023      	str	r3, [r4, #0]
 801f7fc:	b016      	add	sp, #88	; 0x58
 801f7fe:	bd70      	pop	{r4, r5, r6, pc}

0801f800 <__smakebuf_r>:
 801f800:	898b      	ldrh	r3, [r1, #12]
 801f802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f804:	079d      	lsls	r5, r3, #30
 801f806:	4606      	mov	r6, r0
 801f808:	460c      	mov	r4, r1
 801f80a:	d507      	bpl.n	801f81c <__smakebuf_r+0x1c>
 801f80c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f810:	6023      	str	r3, [r4, #0]
 801f812:	6123      	str	r3, [r4, #16]
 801f814:	2301      	movs	r3, #1
 801f816:	6163      	str	r3, [r4, #20]
 801f818:	b002      	add	sp, #8
 801f81a:	bd70      	pop	{r4, r5, r6, pc}
 801f81c:	ab01      	add	r3, sp, #4
 801f81e:	466a      	mov	r2, sp
 801f820:	f7ff ffc9 	bl	801f7b6 <__swhatbuf_r>
 801f824:	9900      	ldr	r1, [sp, #0]
 801f826:	4605      	mov	r5, r0
 801f828:	4630      	mov	r0, r6
 801f82a:	f7fb fcab 	bl	801b184 <_malloc_r>
 801f82e:	b948      	cbnz	r0, 801f844 <__smakebuf_r+0x44>
 801f830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f834:	059a      	lsls	r2, r3, #22
 801f836:	d4ef      	bmi.n	801f818 <__smakebuf_r+0x18>
 801f838:	f023 0303 	bic.w	r3, r3, #3
 801f83c:	f043 0302 	orr.w	r3, r3, #2
 801f840:	81a3      	strh	r3, [r4, #12]
 801f842:	e7e3      	b.n	801f80c <__smakebuf_r+0xc>
 801f844:	4b0d      	ldr	r3, [pc, #52]	; (801f87c <__smakebuf_r+0x7c>)
 801f846:	62b3      	str	r3, [r6, #40]	; 0x28
 801f848:	89a3      	ldrh	r3, [r4, #12]
 801f84a:	6020      	str	r0, [r4, #0]
 801f84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f850:	81a3      	strh	r3, [r4, #12]
 801f852:	9b00      	ldr	r3, [sp, #0]
 801f854:	6163      	str	r3, [r4, #20]
 801f856:	9b01      	ldr	r3, [sp, #4]
 801f858:	6120      	str	r0, [r4, #16]
 801f85a:	b15b      	cbz	r3, 801f874 <__smakebuf_r+0x74>
 801f85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f860:	4630      	mov	r0, r6
 801f862:	f000 f86b 	bl	801f93c <_isatty_r>
 801f866:	b128      	cbz	r0, 801f874 <__smakebuf_r+0x74>
 801f868:	89a3      	ldrh	r3, [r4, #12]
 801f86a:	f023 0303 	bic.w	r3, r3, #3
 801f86e:	f043 0301 	orr.w	r3, r3, #1
 801f872:	81a3      	strh	r3, [r4, #12]
 801f874:	89a0      	ldrh	r0, [r4, #12]
 801f876:	4305      	orrs	r5, r0
 801f878:	81a5      	strh	r5, [r4, #12]
 801f87a:	e7cd      	b.n	801f818 <__smakebuf_r+0x18>
 801f87c:	0801af25 	.word	0x0801af25

0801f880 <_malloc_usable_size_r>:
 801f880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f884:	1f18      	subs	r0, r3, #4
 801f886:	2b00      	cmp	r3, #0
 801f888:	bfbc      	itt	lt
 801f88a:	580b      	ldrlt	r3, [r1, r0]
 801f88c:	18c0      	addlt	r0, r0, r3
 801f88e:	4770      	bx	lr

0801f890 <_raise_r>:
 801f890:	291f      	cmp	r1, #31
 801f892:	b538      	push	{r3, r4, r5, lr}
 801f894:	4604      	mov	r4, r0
 801f896:	460d      	mov	r5, r1
 801f898:	d904      	bls.n	801f8a4 <_raise_r+0x14>
 801f89a:	2316      	movs	r3, #22
 801f89c:	6003      	str	r3, [r0, #0]
 801f89e:	f04f 30ff 	mov.w	r0, #4294967295
 801f8a2:	bd38      	pop	{r3, r4, r5, pc}
 801f8a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f8a6:	b112      	cbz	r2, 801f8ae <_raise_r+0x1e>
 801f8a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f8ac:	b94b      	cbnz	r3, 801f8c2 <_raise_r+0x32>
 801f8ae:	4620      	mov	r0, r4
 801f8b0:	f000 f830 	bl	801f914 <_getpid_r>
 801f8b4:	462a      	mov	r2, r5
 801f8b6:	4601      	mov	r1, r0
 801f8b8:	4620      	mov	r0, r4
 801f8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f8be:	f000 b817 	b.w	801f8f0 <_kill_r>
 801f8c2:	2b01      	cmp	r3, #1
 801f8c4:	d00a      	beq.n	801f8dc <_raise_r+0x4c>
 801f8c6:	1c59      	adds	r1, r3, #1
 801f8c8:	d103      	bne.n	801f8d2 <_raise_r+0x42>
 801f8ca:	2316      	movs	r3, #22
 801f8cc:	6003      	str	r3, [r0, #0]
 801f8ce:	2001      	movs	r0, #1
 801f8d0:	e7e7      	b.n	801f8a2 <_raise_r+0x12>
 801f8d2:	2400      	movs	r4, #0
 801f8d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f8d8:	4628      	mov	r0, r5
 801f8da:	4798      	blx	r3
 801f8dc:	2000      	movs	r0, #0
 801f8de:	e7e0      	b.n	801f8a2 <_raise_r+0x12>

0801f8e0 <raise>:
 801f8e0:	4b02      	ldr	r3, [pc, #8]	; (801f8ec <raise+0xc>)
 801f8e2:	4601      	mov	r1, r0
 801f8e4:	6818      	ldr	r0, [r3, #0]
 801f8e6:	f7ff bfd3 	b.w	801f890 <_raise_r>
 801f8ea:	bf00      	nop
 801f8ec:	2000010c 	.word	0x2000010c

0801f8f0 <_kill_r>:
 801f8f0:	b538      	push	{r3, r4, r5, lr}
 801f8f2:	4d07      	ldr	r5, [pc, #28]	; (801f910 <_kill_r+0x20>)
 801f8f4:	2300      	movs	r3, #0
 801f8f6:	4604      	mov	r4, r0
 801f8f8:	4608      	mov	r0, r1
 801f8fa:	4611      	mov	r1, r2
 801f8fc:	602b      	str	r3, [r5, #0]
 801f8fe:	f001 fea9 	bl	8021654 <_kill>
 801f902:	1c43      	adds	r3, r0, #1
 801f904:	d102      	bne.n	801f90c <_kill_r+0x1c>
 801f906:	682b      	ldr	r3, [r5, #0]
 801f908:	b103      	cbz	r3, 801f90c <_kill_r+0x1c>
 801f90a:	6023      	str	r3, [r4, #0]
 801f90c:	bd38      	pop	{r3, r4, r5, pc}
 801f90e:	bf00      	nop
 801f910:	2000e9a4 	.word	0x2000e9a4

0801f914 <_getpid_r>:
 801f914:	f001 be8e 	b.w	8021634 <_getpid>

0801f918 <_fstat_r>:
 801f918:	b538      	push	{r3, r4, r5, lr}
 801f91a:	4d07      	ldr	r5, [pc, #28]	; (801f938 <_fstat_r+0x20>)
 801f91c:	2300      	movs	r3, #0
 801f91e:	4604      	mov	r4, r0
 801f920:	4608      	mov	r0, r1
 801f922:	4611      	mov	r1, r2
 801f924:	602b      	str	r3, [r5, #0]
 801f926:	f001 fe7d 	bl	8021624 <_fstat>
 801f92a:	1c43      	adds	r3, r0, #1
 801f92c:	d102      	bne.n	801f934 <_fstat_r+0x1c>
 801f92e:	682b      	ldr	r3, [r5, #0]
 801f930:	b103      	cbz	r3, 801f934 <_fstat_r+0x1c>
 801f932:	6023      	str	r3, [r4, #0]
 801f934:	bd38      	pop	{r3, r4, r5, pc}
 801f936:	bf00      	nop
 801f938:	2000e9a4 	.word	0x2000e9a4

0801f93c <_isatty_r>:
 801f93c:	b538      	push	{r3, r4, r5, lr}
 801f93e:	4d06      	ldr	r5, [pc, #24]	; (801f958 <_isatty_r+0x1c>)
 801f940:	2300      	movs	r3, #0
 801f942:	4604      	mov	r4, r0
 801f944:	4608      	mov	r0, r1
 801f946:	602b      	str	r3, [r5, #0]
 801f948:	f001 fe7c 	bl	8021644 <_isatty>
 801f94c:	1c43      	adds	r3, r0, #1
 801f94e:	d102      	bne.n	801f956 <_isatty_r+0x1a>
 801f950:	682b      	ldr	r3, [r5, #0]
 801f952:	b103      	cbz	r3, 801f956 <_isatty_r+0x1a>
 801f954:	6023      	str	r3, [r4, #0]
 801f956:	bd38      	pop	{r3, r4, r5, pc}
 801f958:	2000e9a4 	.word	0x2000e9a4
 801f95c:	00000000 	.word	0x00000000

0801f960 <cos>:
 801f960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f962:	ec53 2b10 	vmov	r2, r3, d0
 801f966:	4826      	ldr	r0, [pc, #152]	; (801fa00 <cos+0xa0>)
 801f968:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801f96c:	4281      	cmp	r1, r0
 801f96e:	dc06      	bgt.n	801f97e <cos+0x1e>
 801f970:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801f9f8 <cos+0x98>
 801f974:	b005      	add	sp, #20
 801f976:	f85d eb04 	ldr.w	lr, [sp], #4
 801f97a:	f000 bec1 	b.w	8020700 <__kernel_cos>
 801f97e:	4821      	ldr	r0, [pc, #132]	; (801fa04 <cos+0xa4>)
 801f980:	4281      	cmp	r1, r0
 801f982:	dd09      	ble.n	801f998 <cos+0x38>
 801f984:	ee10 0a10 	vmov	r0, s0
 801f988:	4619      	mov	r1, r3
 801f98a:	f7e0 fc7d 	bl	8000288 <__aeabi_dsub>
 801f98e:	ec41 0b10 	vmov	d0, r0, r1
 801f992:	b005      	add	sp, #20
 801f994:	f85d fb04 	ldr.w	pc, [sp], #4
 801f998:	4668      	mov	r0, sp
 801f99a:	f000 fbed 	bl	8020178 <__ieee754_rem_pio2>
 801f99e:	f000 0003 	and.w	r0, r0, #3
 801f9a2:	2801      	cmp	r0, #1
 801f9a4:	d00b      	beq.n	801f9be <cos+0x5e>
 801f9a6:	2802      	cmp	r0, #2
 801f9a8:	d016      	beq.n	801f9d8 <cos+0x78>
 801f9aa:	b9e0      	cbnz	r0, 801f9e6 <cos+0x86>
 801f9ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f9b0:	ed9d 0b00 	vldr	d0, [sp]
 801f9b4:	f000 fea4 	bl	8020700 <__kernel_cos>
 801f9b8:	ec51 0b10 	vmov	r0, r1, d0
 801f9bc:	e7e7      	b.n	801f98e <cos+0x2e>
 801f9be:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f9c2:	ed9d 0b00 	vldr	d0, [sp]
 801f9c6:	f001 fab3 	bl	8020f30 <__kernel_sin>
 801f9ca:	ec53 2b10 	vmov	r2, r3, d0
 801f9ce:	ee10 0a10 	vmov	r0, s0
 801f9d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801f9d6:	e7da      	b.n	801f98e <cos+0x2e>
 801f9d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f9dc:	ed9d 0b00 	vldr	d0, [sp]
 801f9e0:	f000 fe8e 	bl	8020700 <__kernel_cos>
 801f9e4:	e7f1      	b.n	801f9ca <cos+0x6a>
 801f9e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f9ea:	ed9d 0b00 	vldr	d0, [sp]
 801f9ee:	2001      	movs	r0, #1
 801f9f0:	f001 fa9e 	bl	8020f30 <__kernel_sin>
 801f9f4:	e7e0      	b.n	801f9b8 <cos+0x58>
 801f9f6:	bf00      	nop
	...
 801fa00:	3fe921fb 	.word	0x3fe921fb
 801fa04:	7fefffff 	.word	0x7fefffff

0801fa08 <sin>:
 801fa08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fa0a:	ec53 2b10 	vmov	r2, r3, d0
 801fa0e:	4828      	ldr	r0, [pc, #160]	; (801fab0 <sin+0xa8>)
 801fa10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801fa14:	4281      	cmp	r1, r0
 801fa16:	dc07      	bgt.n	801fa28 <sin+0x20>
 801fa18:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801faa8 <sin+0xa0>
 801fa1c:	2000      	movs	r0, #0
 801fa1e:	b005      	add	sp, #20
 801fa20:	f85d eb04 	ldr.w	lr, [sp], #4
 801fa24:	f001 ba84 	b.w	8020f30 <__kernel_sin>
 801fa28:	4822      	ldr	r0, [pc, #136]	; (801fab4 <sin+0xac>)
 801fa2a:	4281      	cmp	r1, r0
 801fa2c:	dd09      	ble.n	801fa42 <sin+0x3a>
 801fa2e:	ee10 0a10 	vmov	r0, s0
 801fa32:	4619      	mov	r1, r3
 801fa34:	f7e0 fc28 	bl	8000288 <__aeabi_dsub>
 801fa38:	ec41 0b10 	vmov	d0, r0, r1
 801fa3c:	b005      	add	sp, #20
 801fa3e:	f85d fb04 	ldr.w	pc, [sp], #4
 801fa42:	4668      	mov	r0, sp
 801fa44:	f000 fb98 	bl	8020178 <__ieee754_rem_pio2>
 801fa48:	f000 0003 	and.w	r0, r0, #3
 801fa4c:	2801      	cmp	r0, #1
 801fa4e:	d00c      	beq.n	801fa6a <sin+0x62>
 801fa50:	2802      	cmp	r0, #2
 801fa52:	d011      	beq.n	801fa78 <sin+0x70>
 801fa54:	b9f0      	cbnz	r0, 801fa94 <sin+0x8c>
 801fa56:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fa5a:	ed9d 0b00 	vldr	d0, [sp]
 801fa5e:	2001      	movs	r0, #1
 801fa60:	f001 fa66 	bl	8020f30 <__kernel_sin>
 801fa64:	ec51 0b10 	vmov	r0, r1, d0
 801fa68:	e7e6      	b.n	801fa38 <sin+0x30>
 801fa6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fa6e:	ed9d 0b00 	vldr	d0, [sp]
 801fa72:	f000 fe45 	bl	8020700 <__kernel_cos>
 801fa76:	e7f5      	b.n	801fa64 <sin+0x5c>
 801fa78:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fa7c:	ed9d 0b00 	vldr	d0, [sp]
 801fa80:	2001      	movs	r0, #1
 801fa82:	f001 fa55 	bl	8020f30 <__kernel_sin>
 801fa86:	ec53 2b10 	vmov	r2, r3, d0
 801fa8a:	ee10 0a10 	vmov	r0, s0
 801fa8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fa92:	e7d1      	b.n	801fa38 <sin+0x30>
 801fa94:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fa98:	ed9d 0b00 	vldr	d0, [sp]
 801fa9c:	f000 fe30 	bl	8020700 <__kernel_cos>
 801faa0:	e7f1      	b.n	801fa86 <sin+0x7e>
 801faa2:	bf00      	nop
 801faa4:	f3af 8000 	nop.w
	...
 801fab0:	3fe921fb 	.word	0x3fe921fb
 801fab4:	7fefffff 	.word	0x7fefffff

0801fab8 <asin>:
 801fab8:	b538      	push	{r3, r4, r5, lr}
 801faba:	ed2d 8b02 	vpush	{d8}
 801fabe:	ec55 4b10 	vmov	r4, r5, d0
 801fac2:	f000 f879 	bl	801fbb8 <__ieee754_asin>
 801fac6:	4622      	mov	r2, r4
 801fac8:	462b      	mov	r3, r5
 801faca:	4620      	mov	r0, r4
 801facc:	4629      	mov	r1, r5
 801face:	eeb0 8a40 	vmov.f32	s16, s0
 801fad2:	eef0 8a60 	vmov.f32	s17, s1
 801fad6:	f7e1 f829 	bl	8000b2c <__aeabi_dcmpun>
 801fada:	b9a8      	cbnz	r0, 801fb08 <asin+0x50>
 801fadc:	ec45 4b10 	vmov	d0, r4, r5
 801fae0:	f001 fc86 	bl	80213f0 <fabs>
 801fae4:	4b0c      	ldr	r3, [pc, #48]	; (801fb18 <asin+0x60>)
 801fae6:	ec51 0b10 	vmov	r0, r1, d0
 801faea:	2200      	movs	r2, #0
 801faec:	f7e1 f814 	bl	8000b18 <__aeabi_dcmpgt>
 801faf0:	b150      	cbz	r0, 801fb08 <asin+0x50>
 801faf2:	f7fe f897 	bl	801dc24 <__errno>
 801faf6:	ecbd 8b02 	vpop	{d8}
 801fafa:	2321      	movs	r3, #33	; 0x21
 801fafc:	6003      	str	r3, [r0, #0]
 801fafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fb02:	4806      	ldr	r0, [pc, #24]	; (801fb1c <asin+0x64>)
 801fb04:	f7ff bb94 	b.w	801f230 <nan>
 801fb08:	eeb0 0a48 	vmov.f32	s0, s16
 801fb0c:	eef0 0a68 	vmov.f32	s1, s17
 801fb10:	ecbd 8b02 	vpop	{d8}
 801fb14:	bd38      	pop	{r3, r4, r5, pc}
 801fb16:	bf00      	nop
 801fb18:	3ff00000 	.word	0x3ff00000
 801fb1c:	080222e8 	.word	0x080222e8

0801fb20 <atan2>:
 801fb20:	f000 ba5e 	b.w	801ffe0 <__ieee754_atan2>

0801fb24 <sqrt>:
 801fb24:	b538      	push	{r3, r4, r5, lr}
 801fb26:	ed2d 8b02 	vpush	{d8}
 801fb2a:	ec55 4b10 	vmov	r4, r5, d0
 801fb2e:	f000 fd2f 	bl	8020590 <__ieee754_sqrt>
 801fb32:	4622      	mov	r2, r4
 801fb34:	462b      	mov	r3, r5
 801fb36:	4620      	mov	r0, r4
 801fb38:	4629      	mov	r1, r5
 801fb3a:	eeb0 8a40 	vmov.f32	s16, s0
 801fb3e:	eef0 8a60 	vmov.f32	s17, s1
 801fb42:	f7e0 fff3 	bl	8000b2c <__aeabi_dcmpun>
 801fb46:	b990      	cbnz	r0, 801fb6e <sqrt+0x4a>
 801fb48:	2200      	movs	r2, #0
 801fb4a:	2300      	movs	r3, #0
 801fb4c:	4620      	mov	r0, r4
 801fb4e:	4629      	mov	r1, r5
 801fb50:	f7e0 ffc4 	bl	8000adc <__aeabi_dcmplt>
 801fb54:	b158      	cbz	r0, 801fb6e <sqrt+0x4a>
 801fb56:	f7fe f865 	bl	801dc24 <__errno>
 801fb5a:	2321      	movs	r3, #33	; 0x21
 801fb5c:	6003      	str	r3, [r0, #0]
 801fb5e:	2200      	movs	r2, #0
 801fb60:	2300      	movs	r3, #0
 801fb62:	4610      	mov	r0, r2
 801fb64:	4619      	mov	r1, r3
 801fb66:	f7e0 fe71 	bl	800084c <__aeabi_ddiv>
 801fb6a:	ec41 0b18 	vmov	d8, r0, r1
 801fb6e:	eeb0 0a48 	vmov.f32	s0, s16
 801fb72:	eef0 0a68 	vmov.f32	s1, s17
 801fb76:	ecbd 8b02 	vpop	{d8}
 801fb7a:	bd38      	pop	{r3, r4, r5, pc}

0801fb7c <sqrtf>:
 801fb7c:	b508      	push	{r3, lr}
 801fb7e:	ed2d 8b02 	vpush	{d8}
 801fb82:	eeb0 8a40 	vmov.f32	s16, s0
 801fb86:	f000 fdb5 	bl	80206f4 <__ieee754_sqrtf>
 801fb8a:	eeb4 8a48 	vcmp.f32	s16, s16
 801fb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb92:	d60c      	bvs.n	801fbae <sqrtf+0x32>
 801fb94:	eddf 8a07 	vldr	s17, [pc, #28]	; 801fbb4 <sqrtf+0x38>
 801fb98:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801fb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fba0:	d505      	bpl.n	801fbae <sqrtf+0x32>
 801fba2:	f7fe f83f 	bl	801dc24 <__errno>
 801fba6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801fbaa:	2321      	movs	r3, #33	; 0x21
 801fbac:	6003      	str	r3, [r0, #0]
 801fbae:	ecbd 8b02 	vpop	{d8}
 801fbb2:	bd08      	pop	{r3, pc}
 801fbb4:	00000000 	.word	0x00000000

0801fbb8 <__ieee754_asin>:
 801fbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbbc:	ed2d 8b04 	vpush	{d8-d9}
 801fbc0:	ec55 4b10 	vmov	r4, r5, d0
 801fbc4:	4bcc      	ldr	r3, [pc, #816]	; (801fef8 <__ieee754_asin+0x340>)
 801fbc6:	b083      	sub	sp, #12
 801fbc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801fbcc:	4598      	cmp	r8, r3
 801fbce:	9501      	str	r5, [sp, #4]
 801fbd0:	dd35      	ble.n	801fc3e <__ieee754_asin+0x86>
 801fbd2:	ee10 3a10 	vmov	r3, s0
 801fbd6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801fbda:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801fbde:	ea58 0303 	orrs.w	r3, r8, r3
 801fbe2:	d117      	bne.n	801fc14 <__ieee754_asin+0x5c>
 801fbe4:	a3aa      	add	r3, pc, #680	; (adr r3, 801fe90 <__ieee754_asin+0x2d8>)
 801fbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbea:	ee10 0a10 	vmov	r0, s0
 801fbee:	4629      	mov	r1, r5
 801fbf0:	f7e0 fd02 	bl	80005f8 <__aeabi_dmul>
 801fbf4:	a3a8      	add	r3, pc, #672	; (adr r3, 801fe98 <__ieee754_asin+0x2e0>)
 801fbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbfa:	4606      	mov	r6, r0
 801fbfc:	460f      	mov	r7, r1
 801fbfe:	4620      	mov	r0, r4
 801fc00:	4629      	mov	r1, r5
 801fc02:	f7e0 fcf9 	bl	80005f8 <__aeabi_dmul>
 801fc06:	4602      	mov	r2, r0
 801fc08:	460b      	mov	r3, r1
 801fc0a:	4630      	mov	r0, r6
 801fc0c:	4639      	mov	r1, r7
 801fc0e:	f7e0 fb3d 	bl	800028c <__adddf3>
 801fc12:	e00b      	b.n	801fc2c <__ieee754_asin+0x74>
 801fc14:	ee10 2a10 	vmov	r2, s0
 801fc18:	462b      	mov	r3, r5
 801fc1a:	ee10 0a10 	vmov	r0, s0
 801fc1e:	4629      	mov	r1, r5
 801fc20:	f7e0 fb32 	bl	8000288 <__aeabi_dsub>
 801fc24:	4602      	mov	r2, r0
 801fc26:	460b      	mov	r3, r1
 801fc28:	f7e0 fe10 	bl	800084c <__aeabi_ddiv>
 801fc2c:	4604      	mov	r4, r0
 801fc2e:	460d      	mov	r5, r1
 801fc30:	ec45 4b10 	vmov	d0, r4, r5
 801fc34:	b003      	add	sp, #12
 801fc36:	ecbd 8b04 	vpop	{d8-d9}
 801fc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc3e:	4baf      	ldr	r3, [pc, #700]	; (801fefc <__ieee754_asin+0x344>)
 801fc40:	4598      	cmp	r8, r3
 801fc42:	dc11      	bgt.n	801fc68 <__ieee754_asin+0xb0>
 801fc44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801fc48:	f280 80ae 	bge.w	801fda8 <__ieee754_asin+0x1f0>
 801fc4c:	a394      	add	r3, pc, #592	; (adr r3, 801fea0 <__ieee754_asin+0x2e8>)
 801fc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc52:	ee10 0a10 	vmov	r0, s0
 801fc56:	4629      	mov	r1, r5
 801fc58:	f7e0 fb18 	bl	800028c <__adddf3>
 801fc5c:	4ba8      	ldr	r3, [pc, #672]	; (801ff00 <__ieee754_asin+0x348>)
 801fc5e:	2200      	movs	r2, #0
 801fc60:	f7e0 ff5a 	bl	8000b18 <__aeabi_dcmpgt>
 801fc64:	2800      	cmp	r0, #0
 801fc66:	d1e3      	bne.n	801fc30 <__ieee754_asin+0x78>
 801fc68:	ec45 4b10 	vmov	d0, r4, r5
 801fc6c:	f001 fbc0 	bl	80213f0 <fabs>
 801fc70:	49a3      	ldr	r1, [pc, #652]	; (801ff00 <__ieee754_asin+0x348>)
 801fc72:	ec53 2b10 	vmov	r2, r3, d0
 801fc76:	2000      	movs	r0, #0
 801fc78:	f7e0 fb06 	bl	8000288 <__aeabi_dsub>
 801fc7c:	4ba1      	ldr	r3, [pc, #644]	; (801ff04 <__ieee754_asin+0x34c>)
 801fc7e:	2200      	movs	r2, #0
 801fc80:	f7e0 fcba 	bl	80005f8 <__aeabi_dmul>
 801fc84:	a388      	add	r3, pc, #544	; (adr r3, 801fea8 <__ieee754_asin+0x2f0>)
 801fc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc8a:	4604      	mov	r4, r0
 801fc8c:	460d      	mov	r5, r1
 801fc8e:	f7e0 fcb3 	bl	80005f8 <__aeabi_dmul>
 801fc92:	a387      	add	r3, pc, #540	; (adr r3, 801feb0 <__ieee754_asin+0x2f8>)
 801fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc98:	f7e0 faf8 	bl	800028c <__adddf3>
 801fc9c:	4622      	mov	r2, r4
 801fc9e:	462b      	mov	r3, r5
 801fca0:	f7e0 fcaa 	bl	80005f8 <__aeabi_dmul>
 801fca4:	a384      	add	r3, pc, #528	; (adr r3, 801feb8 <__ieee754_asin+0x300>)
 801fca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcaa:	f7e0 faed 	bl	8000288 <__aeabi_dsub>
 801fcae:	4622      	mov	r2, r4
 801fcb0:	462b      	mov	r3, r5
 801fcb2:	f7e0 fca1 	bl	80005f8 <__aeabi_dmul>
 801fcb6:	a382      	add	r3, pc, #520	; (adr r3, 801fec0 <__ieee754_asin+0x308>)
 801fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcbc:	f7e0 fae6 	bl	800028c <__adddf3>
 801fcc0:	4622      	mov	r2, r4
 801fcc2:	462b      	mov	r3, r5
 801fcc4:	f7e0 fc98 	bl	80005f8 <__aeabi_dmul>
 801fcc8:	a37f      	add	r3, pc, #508	; (adr r3, 801fec8 <__ieee754_asin+0x310>)
 801fcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcce:	f7e0 fadb 	bl	8000288 <__aeabi_dsub>
 801fcd2:	4622      	mov	r2, r4
 801fcd4:	462b      	mov	r3, r5
 801fcd6:	f7e0 fc8f 	bl	80005f8 <__aeabi_dmul>
 801fcda:	a37d      	add	r3, pc, #500	; (adr r3, 801fed0 <__ieee754_asin+0x318>)
 801fcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fce0:	f7e0 fad4 	bl	800028c <__adddf3>
 801fce4:	4622      	mov	r2, r4
 801fce6:	462b      	mov	r3, r5
 801fce8:	f7e0 fc86 	bl	80005f8 <__aeabi_dmul>
 801fcec:	a37a      	add	r3, pc, #488	; (adr r3, 801fed8 <__ieee754_asin+0x320>)
 801fcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcf2:	ec41 0b18 	vmov	d8, r0, r1
 801fcf6:	4620      	mov	r0, r4
 801fcf8:	4629      	mov	r1, r5
 801fcfa:	f7e0 fc7d 	bl	80005f8 <__aeabi_dmul>
 801fcfe:	a378      	add	r3, pc, #480	; (adr r3, 801fee0 <__ieee754_asin+0x328>)
 801fd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd04:	f7e0 fac0 	bl	8000288 <__aeabi_dsub>
 801fd08:	4622      	mov	r2, r4
 801fd0a:	462b      	mov	r3, r5
 801fd0c:	f7e0 fc74 	bl	80005f8 <__aeabi_dmul>
 801fd10:	a375      	add	r3, pc, #468	; (adr r3, 801fee8 <__ieee754_asin+0x330>)
 801fd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd16:	f7e0 fab9 	bl	800028c <__adddf3>
 801fd1a:	4622      	mov	r2, r4
 801fd1c:	462b      	mov	r3, r5
 801fd1e:	f7e0 fc6b 	bl	80005f8 <__aeabi_dmul>
 801fd22:	a373      	add	r3, pc, #460	; (adr r3, 801fef0 <__ieee754_asin+0x338>)
 801fd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd28:	f7e0 faae 	bl	8000288 <__aeabi_dsub>
 801fd2c:	4622      	mov	r2, r4
 801fd2e:	462b      	mov	r3, r5
 801fd30:	f7e0 fc62 	bl	80005f8 <__aeabi_dmul>
 801fd34:	4b72      	ldr	r3, [pc, #456]	; (801ff00 <__ieee754_asin+0x348>)
 801fd36:	2200      	movs	r2, #0
 801fd38:	f7e0 faa8 	bl	800028c <__adddf3>
 801fd3c:	ec45 4b10 	vmov	d0, r4, r5
 801fd40:	4606      	mov	r6, r0
 801fd42:	460f      	mov	r7, r1
 801fd44:	f000 fc24 	bl	8020590 <__ieee754_sqrt>
 801fd48:	4b6f      	ldr	r3, [pc, #444]	; (801ff08 <__ieee754_asin+0x350>)
 801fd4a:	4598      	cmp	r8, r3
 801fd4c:	ec5b ab10 	vmov	sl, fp, d0
 801fd50:	f340 80dc 	ble.w	801ff0c <__ieee754_asin+0x354>
 801fd54:	4632      	mov	r2, r6
 801fd56:	463b      	mov	r3, r7
 801fd58:	ec51 0b18 	vmov	r0, r1, d8
 801fd5c:	f7e0 fd76 	bl	800084c <__aeabi_ddiv>
 801fd60:	4652      	mov	r2, sl
 801fd62:	465b      	mov	r3, fp
 801fd64:	f7e0 fc48 	bl	80005f8 <__aeabi_dmul>
 801fd68:	4652      	mov	r2, sl
 801fd6a:	465b      	mov	r3, fp
 801fd6c:	f7e0 fa8e 	bl	800028c <__adddf3>
 801fd70:	4602      	mov	r2, r0
 801fd72:	460b      	mov	r3, r1
 801fd74:	f7e0 fa8a 	bl	800028c <__adddf3>
 801fd78:	a347      	add	r3, pc, #284	; (adr r3, 801fe98 <__ieee754_asin+0x2e0>)
 801fd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd7e:	f7e0 fa83 	bl	8000288 <__aeabi_dsub>
 801fd82:	4602      	mov	r2, r0
 801fd84:	460b      	mov	r3, r1
 801fd86:	a142      	add	r1, pc, #264	; (adr r1, 801fe90 <__ieee754_asin+0x2d8>)
 801fd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd8c:	f7e0 fa7c 	bl	8000288 <__aeabi_dsub>
 801fd90:	9b01      	ldr	r3, [sp, #4]
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	bfdc      	itt	le
 801fd96:	4602      	movle	r2, r0
 801fd98:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801fd9c:	4604      	mov	r4, r0
 801fd9e:	460d      	mov	r5, r1
 801fda0:	bfdc      	itt	le
 801fda2:	4614      	movle	r4, r2
 801fda4:	461d      	movle	r5, r3
 801fda6:	e743      	b.n	801fc30 <__ieee754_asin+0x78>
 801fda8:	ee10 2a10 	vmov	r2, s0
 801fdac:	ee10 0a10 	vmov	r0, s0
 801fdb0:	462b      	mov	r3, r5
 801fdb2:	4629      	mov	r1, r5
 801fdb4:	f7e0 fc20 	bl	80005f8 <__aeabi_dmul>
 801fdb8:	a33b      	add	r3, pc, #236	; (adr r3, 801fea8 <__ieee754_asin+0x2f0>)
 801fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdbe:	4606      	mov	r6, r0
 801fdc0:	460f      	mov	r7, r1
 801fdc2:	f7e0 fc19 	bl	80005f8 <__aeabi_dmul>
 801fdc6:	a33a      	add	r3, pc, #232	; (adr r3, 801feb0 <__ieee754_asin+0x2f8>)
 801fdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdcc:	f7e0 fa5e 	bl	800028c <__adddf3>
 801fdd0:	4632      	mov	r2, r6
 801fdd2:	463b      	mov	r3, r7
 801fdd4:	f7e0 fc10 	bl	80005f8 <__aeabi_dmul>
 801fdd8:	a337      	add	r3, pc, #220	; (adr r3, 801feb8 <__ieee754_asin+0x300>)
 801fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdde:	f7e0 fa53 	bl	8000288 <__aeabi_dsub>
 801fde2:	4632      	mov	r2, r6
 801fde4:	463b      	mov	r3, r7
 801fde6:	f7e0 fc07 	bl	80005f8 <__aeabi_dmul>
 801fdea:	a335      	add	r3, pc, #212	; (adr r3, 801fec0 <__ieee754_asin+0x308>)
 801fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdf0:	f7e0 fa4c 	bl	800028c <__adddf3>
 801fdf4:	4632      	mov	r2, r6
 801fdf6:	463b      	mov	r3, r7
 801fdf8:	f7e0 fbfe 	bl	80005f8 <__aeabi_dmul>
 801fdfc:	a332      	add	r3, pc, #200	; (adr r3, 801fec8 <__ieee754_asin+0x310>)
 801fdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe02:	f7e0 fa41 	bl	8000288 <__aeabi_dsub>
 801fe06:	4632      	mov	r2, r6
 801fe08:	463b      	mov	r3, r7
 801fe0a:	f7e0 fbf5 	bl	80005f8 <__aeabi_dmul>
 801fe0e:	a330      	add	r3, pc, #192	; (adr r3, 801fed0 <__ieee754_asin+0x318>)
 801fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe14:	f7e0 fa3a 	bl	800028c <__adddf3>
 801fe18:	4632      	mov	r2, r6
 801fe1a:	463b      	mov	r3, r7
 801fe1c:	f7e0 fbec 	bl	80005f8 <__aeabi_dmul>
 801fe20:	a32d      	add	r3, pc, #180	; (adr r3, 801fed8 <__ieee754_asin+0x320>)
 801fe22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe26:	4680      	mov	r8, r0
 801fe28:	4689      	mov	r9, r1
 801fe2a:	4630      	mov	r0, r6
 801fe2c:	4639      	mov	r1, r7
 801fe2e:	f7e0 fbe3 	bl	80005f8 <__aeabi_dmul>
 801fe32:	a32b      	add	r3, pc, #172	; (adr r3, 801fee0 <__ieee754_asin+0x328>)
 801fe34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe38:	f7e0 fa26 	bl	8000288 <__aeabi_dsub>
 801fe3c:	4632      	mov	r2, r6
 801fe3e:	463b      	mov	r3, r7
 801fe40:	f7e0 fbda 	bl	80005f8 <__aeabi_dmul>
 801fe44:	a328      	add	r3, pc, #160	; (adr r3, 801fee8 <__ieee754_asin+0x330>)
 801fe46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe4a:	f7e0 fa1f 	bl	800028c <__adddf3>
 801fe4e:	4632      	mov	r2, r6
 801fe50:	463b      	mov	r3, r7
 801fe52:	f7e0 fbd1 	bl	80005f8 <__aeabi_dmul>
 801fe56:	a326      	add	r3, pc, #152	; (adr r3, 801fef0 <__ieee754_asin+0x338>)
 801fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe5c:	f7e0 fa14 	bl	8000288 <__aeabi_dsub>
 801fe60:	4632      	mov	r2, r6
 801fe62:	463b      	mov	r3, r7
 801fe64:	f7e0 fbc8 	bl	80005f8 <__aeabi_dmul>
 801fe68:	4b25      	ldr	r3, [pc, #148]	; (801ff00 <__ieee754_asin+0x348>)
 801fe6a:	2200      	movs	r2, #0
 801fe6c:	f7e0 fa0e 	bl	800028c <__adddf3>
 801fe70:	4602      	mov	r2, r0
 801fe72:	460b      	mov	r3, r1
 801fe74:	4640      	mov	r0, r8
 801fe76:	4649      	mov	r1, r9
 801fe78:	f7e0 fce8 	bl	800084c <__aeabi_ddiv>
 801fe7c:	4622      	mov	r2, r4
 801fe7e:	462b      	mov	r3, r5
 801fe80:	f7e0 fbba 	bl	80005f8 <__aeabi_dmul>
 801fe84:	4602      	mov	r2, r0
 801fe86:	460b      	mov	r3, r1
 801fe88:	4620      	mov	r0, r4
 801fe8a:	4629      	mov	r1, r5
 801fe8c:	e6bf      	b.n	801fc0e <__ieee754_asin+0x56>
 801fe8e:	bf00      	nop
 801fe90:	54442d18 	.word	0x54442d18
 801fe94:	3ff921fb 	.word	0x3ff921fb
 801fe98:	33145c07 	.word	0x33145c07
 801fe9c:	3c91a626 	.word	0x3c91a626
 801fea0:	8800759c 	.word	0x8800759c
 801fea4:	7e37e43c 	.word	0x7e37e43c
 801fea8:	0dfdf709 	.word	0x0dfdf709
 801feac:	3f023de1 	.word	0x3f023de1
 801feb0:	7501b288 	.word	0x7501b288
 801feb4:	3f49efe0 	.word	0x3f49efe0
 801feb8:	b5688f3b 	.word	0xb5688f3b
 801febc:	3fa48228 	.word	0x3fa48228
 801fec0:	0e884455 	.word	0x0e884455
 801fec4:	3fc9c155 	.word	0x3fc9c155
 801fec8:	03eb6f7d 	.word	0x03eb6f7d
 801fecc:	3fd4d612 	.word	0x3fd4d612
 801fed0:	55555555 	.word	0x55555555
 801fed4:	3fc55555 	.word	0x3fc55555
 801fed8:	b12e9282 	.word	0xb12e9282
 801fedc:	3fb3b8c5 	.word	0x3fb3b8c5
 801fee0:	1b8d0159 	.word	0x1b8d0159
 801fee4:	3fe6066c 	.word	0x3fe6066c
 801fee8:	9c598ac8 	.word	0x9c598ac8
 801feec:	40002ae5 	.word	0x40002ae5
 801fef0:	1c8a2d4b 	.word	0x1c8a2d4b
 801fef4:	40033a27 	.word	0x40033a27
 801fef8:	3fefffff 	.word	0x3fefffff
 801fefc:	3fdfffff 	.word	0x3fdfffff
 801ff00:	3ff00000 	.word	0x3ff00000
 801ff04:	3fe00000 	.word	0x3fe00000
 801ff08:	3fef3332 	.word	0x3fef3332
 801ff0c:	ee10 2a10 	vmov	r2, s0
 801ff10:	ee10 0a10 	vmov	r0, s0
 801ff14:	465b      	mov	r3, fp
 801ff16:	4659      	mov	r1, fp
 801ff18:	f7e0 f9b8 	bl	800028c <__adddf3>
 801ff1c:	4632      	mov	r2, r6
 801ff1e:	463b      	mov	r3, r7
 801ff20:	ec41 0b19 	vmov	d9, r0, r1
 801ff24:	ec51 0b18 	vmov	r0, r1, d8
 801ff28:	f7e0 fc90 	bl	800084c <__aeabi_ddiv>
 801ff2c:	4602      	mov	r2, r0
 801ff2e:	460b      	mov	r3, r1
 801ff30:	ec51 0b19 	vmov	r0, r1, d9
 801ff34:	f7e0 fb60 	bl	80005f8 <__aeabi_dmul>
 801ff38:	f04f 0800 	mov.w	r8, #0
 801ff3c:	4606      	mov	r6, r0
 801ff3e:	460f      	mov	r7, r1
 801ff40:	4642      	mov	r2, r8
 801ff42:	465b      	mov	r3, fp
 801ff44:	4640      	mov	r0, r8
 801ff46:	4659      	mov	r1, fp
 801ff48:	f7e0 fb56 	bl	80005f8 <__aeabi_dmul>
 801ff4c:	4602      	mov	r2, r0
 801ff4e:	460b      	mov	r3, r1
 801ff50:	4620      	mov	r0, r4
 801ff52:	4629      	mov	r1, r5
 801ff54:	f7e0 f998 	bl	8000288 <__aeabi_dsub>
 801ff58:	4642      	mov	r2, r8
 801ff5a:	4604      	mov	r4, r0
 801ff5c:	460d      	mov	r5, r1
 801ff5e:	465b      	mov	r3, fp
 801ff60:	4650      	mov	r0, sl
 801ff62:	4659      	mov	r1, fp
 801ff64:	f7e0 f992 	bl	800028c <__adddf3>
 801ff68:	4602      	mov	r2, r0
 801ff6a:	460b      	mov	r3, r1
 801ff6c:	4620      	mov	r0, r4
 801ff6e:	4629      	mov	r1, r5
 801ff70:	f7e0 fc6c 	bl	800084c <__aeabi_ddiv>
 801ff74:	4602      	mov	r2, r0
 801ff76:	460b      	mov	r3, r1
 801ff78:	f7e0 f988 	bl	800028c <__adddf3>
 801ff7c:	4602      	mov	r2, r0
 801ff7e:	460b      	mov	r3, r1
 801ff80:	a113      	add	r1, pc, #76	; (adr r1, 801ffd0 <__ieee754_asin+0x418>)
 801ff82:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ff86:	f7e0 f97f 	bl	8000288 <__aeabi_dsub>
 801ff8a:	4602      	mov	r2, r0
 801ff8c:	460b      	mov	r3, r1
 801ff8e:	4630      	mov	r0, r6
 801ff90:	4639      	mov	r1, r7
 801ff92:	f7e0 f979 	bl	8000288 <__aeabi_dsub>
 801ff96:	4642      	mov	r2, r8
 801ff98:	4604      	mov	r4, r0
 801ff9a:	460d      	mov	r5, r1
 801ff9c:	465b      	mov	r3, fp
 801ff9e:	4640      	mov	r0, r8
 801ffa0:	4659      	mov	r1, fp
 801ffa2:	f7e0 f973 	bl	800028c <__adddf3>
 801ffa6:	4602      	mov	r2, r0
 801ffa8:	460b      	mov	r3, r1
 801ffaa:	a10b      	add	r1, pc, #44	; (adr r1, 801ffd8 <__ieee754_asin+0x420>)
 801ffac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ffb0:	f7e0 f96a 	bl	8000288 <__aeabi_dsub>
 801ffb4:	4602      	mov	r2, r0
 801ffb6:	460b      	mov	r3, r1
 801ffb8:	4620      	mov	r0, r4
 801ffba:	4629      	mov	r1, r5
 801ffbc:	f7e0 f964 	bl	8000288 <__aeabi_dsub>
 801ffc0:	4602      	mov	r2, r0
 801ffc2:	460b      	mov	r3, r1
 801ffc4:	a104      	add	r1, pc, #16	; (adr r1, 801ffd8 <__ieee754_asin+0x420>)
 801ffc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ffca:	e6df      	b.n	801fd8c <__ieee754_asin+0x1d4>
 801ffcc:	f3af 8000 	nop.w
 801ffd0:	33145c07 	.word	0x33145c07
 801ffd4:	3c91a626 	.word	0x3c91a626
 801ffd8:	54442d18 	.word	0x54442d18
 801ffdc:	3fe921fb 	.word	0x3fe921fb

0801ffe0 <__ieee754_atan2>:
 801ffe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ffe4:	ec57 6b11 	vmov	r6, r7, d1
 801ffe8:	4273      	negs	r3, r6
 801ffea:	f8df e184 	ldr.w	lr, [pc, #388]	; 8020170 <__ieee754_atan2+0x190>
 801ffee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801fff2:	4333      	orrs	r3, r6
 801fff4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801fff8:	4573      	cmp	r3, lr
 801fffa:	ec51 0b10 	vmov	r0, r1, d0
 801fffe:	ee11 8a10 	vmov	r8, s2
 8020002:	d80a      	bhi.n	802001a <__ieee754_atan2+0x3a>
 8020004:	4244      	negs	r4, r0
 8020006:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802000a:	4304      	orrs	r4, r0
 802000c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8020010:	4574      	cmp	r4, lr
 8020012:	ee10 9a10 	vmov	r9, s0
 8020016:	468c      	mov	ip, r1
 8020018:	d907      	bls.n	802002a <__ieee754_atan2+0x4a>
 802001a:	4632      	mov	r2, r6
 802001c:	463b      	mov	r3, r7
 802001e:	f7e0 f935 	bl	800028c <__adddf3>
 8020022:	ec41 0b10 	vmov	d0, r0, r1
 8020026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802002a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 802002e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8020032:	4334      	orrs	r4, r6
 8020034:	d103      	bne.n	802003e <__ieee754_atan2+0x5e>
 8020036:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802003a:	f001 b839 	b.w	80210b0 <atan>
 802003e:	17bc      	asrs	r4, r7, #30
 8020040:	f004 0402 	and.w	r4, r4, #2
 8020044:	ea53 0909 	orrs.w	r9, r3, r9
 8020048:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 802004c:	d107      	bne.n	802005e <__ieee754_atan2+0x7e>
 802004e:	2c02      	cmp	r4, #2
 8020050:	d060      	beq.n	8020114 <__ieee754_atan2+0x134>
 8020052:	2c03      	cmp	r4, #3
 8020054:	d1e5      	bne.n	8020022 <__ieee754_atan2+0x42>
 8020056:	a142      	add	r1, pc, #264	; (adr r1, 8020160 <__ieee754_atan2+0x180>)
 8020058:	e9d1 0100 	ldrd	r0, r1, [r1]
 802005c:	e7e1      	b.n	8020022 <__ieee754_atan2+0x42>
 802005e:	ea52 0808 	orrs.w	r8, r2, r8
 8020062:	d106      	bne.n	8020072 <__ieee754_atan2+0x92>
 8020064:	f1bc 0f00 	cmp.w	ip, #0
 8020068:	da5f      	bge.n	802012a <__ieee754_atan2+0x14a>
 802006a:	a13f      	add	r1, pc, #252	; (adr r1, 8020168 <__ieee754_atan2+0x188>)
 802006c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020070:	e7d7      	b.n	8020022 <__ieee754_atan2+0x42>
 8020072:	4572      	cmp	r2, lr
 8020074:	d10f      	bne.n	8020096 <__ieee754_atan2+0xb6>
 8020076:	4293      	cmp	r3, r2
 8020078:	f104 34ff 	add.w	r4, r4, #4294967295
 802007c:	d107      	bne.n	802008e <__ieee754_atan2+0xae>
 802007e:	2c02      	cmp	r4, #2
 8020080:	d84c      	bhi.n	802011c <__ieee754_atan2+0x13c>
 8020082:	4b35      	ldr	r3, [pc, #212]	; (8020158 <__ieee754_atan2+0x178>)
 8020084:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8020088:	e9d4 0100 	ldrd	r0, r1, [r4]
 802008c:	e7c9      	b.n	8020022 <__ieee754_atan2+0x42>
 802008e:	2c02      	cmp	r4, #2
 8020090:	d848      	bhi.n	8020124 <__ieee754_atan2+0x144>
 8020092:	4b32      	ldr	r3, [pc, #200]	; (802015c <__ieee754_atan2+0x17c>)
 8020094:	e7f6      	b.n	8020084 <__ieee754_atan2+0xa4>
 8020096:	4573      	cmp	r3, lr
 8020098:	d0e4      	beq.n	8020064 <__ieee754_atan2+0x84>
 802009a:	1a9b      	subs	r3, r3, r2
 802009c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80200a0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80200a4:	da1e      	bge.n	80200e4 <__ieee754_atan2+0x104>
 80200a6:	2f00      	cmp	r7, #0
 80200a8:	da01      	bge.n	80200ae <__ieee754_atan2+0xce>
 80200aa:	323c      	adds	r2, #60	; 0x3c
 80200ac:	db1e      	blt.n	80200ec <__ieee754_atan2+0x10c>
 80200ae:	4632      	mov	r2, r6
 80200b0:	463b      	mov	r3, r7
 80200b2:	f7e0 fbcb 	bl	800084c <__aeabi_ddiv>
 80200b6:	ec41 0b10 	vmov	d0, r0, r1
 80200ba:	f001 f999 	bl	80213f0 <fabs>
 80200be:	f000 fff7 	bl	80210b0 <atan>
 80200c2:	ec51 0b10 	vmov	r0, r1, d0
 80200c6:	2c01      	cmp	r4, #1
 80200c8:	d013      	beq.n	80200f2 <__ieee754_atan2+0x112>
 80200ca:	2c02      	cmp	r4, #2
 80200cc:	d015      	beq.n	80200fa <__ieee754_atan2+0x11a>
 80200ce:	2c00      	cmp	r4, #0
 80200d0:	d0a7      	beq.n	8020022 <__ieee754_atan2+0x42>
 80200d2:	a319      	add	r3, pc, #100	; (adr r3, 8020138 <__ieee754_atan2+0x158>)
 80200d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200d8:	f7e0 f8d6 	bl	8000288 <__aeabi_dsub>
 80200dc:	a318      	add	r3, pc, #96	; (adr r3, 8020140 <__ieee754_atan2+0x160>)
 80200de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200e2:	e014      	b.n	802010e <__ieee754_atan2+0x12e>
 80200e4:	a118      	add	r1, pc, #96	; (adr r1, 8020148 <__ieee754_atan2+0x168>)
 80200e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80200ea:	e7ec      	b.n	80200c6 <__ieee754_atan2+0xe6>
 80200ec:	2000      	movs	r0, #0
 80200ee:	2100      	movs	r1, #0
 80200f0:	e7e9      	b.n	80200c6 <__ieee754_atan2+0xe6>
 80200f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80200f6:	4619      	mov	r1, r3
 80200f8:	e793      	b.n	8020022 <__ieee754_atan2+0x42>
 80200fa:	a30f      	add	r3, pc, #60	; (adr r3, 8020138 <__ieee754_atan2+0x158>)
 80200fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020100:	f7e0 f8c2 	bl	8000288 <__aeabi_dsub>
 8020104:	4602      	mov	r2, r0
 8020106:	460b      	mov	r3, r1
 8020108:	a10d      	add	r1, pc, #52	; (adr r1, 8020140 <__ieee754_atan2+0x160>)
 802010a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802010e:	f7e0 f8bb 	bl	8000288 <__aeabi_dsub>
 8020112:	e786      	b.n	8020022 <__ieee754_atan2+0x42>
 8020114:	a10a      	add	r1, pc, #40	; (adr r1, 8020140 <__ieee754_atan2+0x160>)
 8020116:	e9d1 0100 	ldrd	r0, r1, [r1]
 802011a:	e782      	b.n	8020022 <__ieee754_atan2+0x42>
 802011c:	a10c      	add	r1, pc, #48	; (adr r1, 8020150 <__ieee754_atan2+0x170>)
 802011e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020122:	e77e      	b.n	8020022 <__ieee754_atan2+0x42>
 8020124:	2000      	movs	r0, #0
 8020126:	2100      	movs	r1, #0
 8020128:	e77b      	b.n	8020022 <__ieee754_atan2+0x42>
 802012a:	a107      	add	r1, pc, #28	; (adr r1, 8020148 <__ieee754_atan2+0x168>)
 802012c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020130:	e777      	b.n	8020022 <__ieee754_atan2+0x42>
 8020132:	bf00      	nop
 8020134:	f3af 8000 	nop.w
 8020138:	33145c07 	.word	0x33145c07
 802013c:	3ca1a626 	.word	0x3ca1a626
 8020140:	54442d18 	.word	0x54442d18
 8020144:	400921fb 	.word	0x400921fb
 8020148:	54442d18 	.word	0x54442d18
 802014c:	3ff921fb 	.word	0x3ff921fb
 8020150:	54442d18 	.word	0x54442d18
 8020154:	3fe921fb 	.word	0x3fe921fb
 8020158:	080222f0 	.word	0x080222f0
 802015c:	08022308 	.word	0x08022308
 8020160:	54442d18 	.word	0x54442d18
 8020164:	c00921fb 	.word	0xc00921fb
 8020168:	54442d18 	.word	0x54442d18
 802016c:	bff921fb 	.word	0xbff921fb
 8020170:	7ff00000 	.word	0x7ff00000
 8020174:	00000000 	.word	0x00000000

08020178 <__ieee754_rem_pio2>:
 8020178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802017c:	ed2d 8b02 	vpush	{d8}
 8020180:	ec55 4b10 	vmov	r4, r5, d0
 8020184:	4bca      	ldr	r3, [pc, #808]	; (80204b0 <__ieee754_rem_pio2+0x338>)
 8020186:	b08b      	sub	sp, #44	; 0x2c
 8020188:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802018c:	4598      	cmp	r8, r3
 802018e:	4682      	mov	sl, r0
 8020190:	9502      	str	r5, [sp, #8]
 8020192:	dc08      	bgt.n	80201a6 <__ieee754_rem_pio2+0x2e>
 8020194:	2200      	movs	r2, #0
 8020196:	2300      	movs	r3, #0
 8020198:	ed80 0b00 	vstr	d0, [r0]
 802019c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80201a0:	f04f 0b00 	mov.w	fp, #0
 80201a4:	e028      	b.n	80201f8 <__ieee754_rem_pio2+0x80>
 80201a6:	4bc3      	ldr	r3, [pc, #780]	; (80204b4 <__ieee754_rem_pio2+0x33c>)
 80201a8:	4598      	cmp	r8, r3
 80201aa:	dc78      	bgt.n	802029e <__ieee754_rem_pio2+0x126>
 80201ac:	9b02      	ldr	r3, [sp, #8]
 80201ae:	4ec2      	ldr	r6, [pc, #776]	; (80204b8 <__ieee754_rem_pio2+0x340>)
 80201b0:	2b00      	cmp	r3, #0
 80201b2:	ee10 0a10 	vmov	r0, s0
 80201b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8020478 <__ieee754_rem_pio2+0x300>)
 80201b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201bc:	4629      	mov	r1, r5
 80201be:	dd39      	ble.n	8020234 <__ieee754_rem_pio2+0xbc>
 80201c0:	f7e0 f862 	bl	8000288 <__aeabi_dsub>
 80201c4:	45b0      	cmp	r8, r6
 80201c6:	4604      	mov	r4, r0
 80201c8:	460d      	mov	r5, r1
 80201ca:	d01b      	beq.n	8020204 <__ieee754_rem_pio2+0x8c>
 80201cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8020480 <__ieee754_rem_pio2+0x308>)
 80201ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201d2:	f7e0 f859 	bl	8000288 <__aeabi_dsub>
 80201d6:	4602      	mov	r2, r0
 80201d8:	460b      	mov	r3, r1
 80201da:	e9ca 2300 	strd	r2, r3, [sl]
 80201de:	4620      	mov	r0, r4
 80201e0:	4629      	mov	r1, r5
 80201e2:	f7e0 f851 	bl	8000288 <__aeabi_dsub>
 80201e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8020480 <__ieee754_rem_pio2+0x308>)
 80201e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201ec:	f7e0 f84c 	bl	8000288 <__aeabi_dsub>
 80201f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80201f4:	f04f 0b01 	mov.w	fp, #1
 80201f8:	4658      	mov	r0, fp
 80201fa:	b00b      	add	sp, #44	; 0x2c
 80201fc:	ecbd 8b02 	vpop	{d8}
 8020200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020204:	a3a0      	add	r3, pc, #640	; (adr r3, 8020488 <__ieee754_rem_pio2+0x310>)
 8020206:	e9d3 2300 	ldrd	r2, r3, [r3]
 802020a:	f7e0 f83d 	bl	8000288 <__aeabi_dsub>
 802020e:	a3a0      	add	r3, pc, #640	; (adr r3, 8020490 <__ieee754_rem_pio2+0x318>)
 8020210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020214:	4604      	mov	r4, r0
 8020216:	460d      	mov	r5, r1
 8020218:	f7e0 f836 	bl	8000288 <__aeabi_dsub>
 802021c:	4602      	mov	r2, r0
 802021e:	460b      	mov	r3, r1
 8020220:	e9ca 2300 	strd	r2, r3, [sl]
 8020224:	4620      	mov	r0, r4
 8020226:	4629      	mov	r1, r5
 8020228:	f7e0 f82e 	bl	8000288 <__aeabi_dsub>
 802022c:	a398      	add	r3, pc, #608	; (adr r3, 8020490 <__ieee754_rem_pio2+0x318>)
 802022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020232:	e7db      	b.n	80201ec <__ieee754_rem_pio2+0x74>
 8020234:	f7e0 f82a 	bl	800028c <__adddf3>
 8020238:	45b0      	cmp	r8, r6
 802023a:	4604      	mov	r4, r0
 802023c:	460d      	mov	r5, r1
 802023e:	d016      	beq.n	802026e <__ieee754_rem_pio2+0xf6>
 8020240:	a38f      	add	r3, pc, #572	; (adr r3, 8020480 <__ieee754_rem_pio2+0x308>)
 8020242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020246:	f7e0 f821 	bl	800028c <__adddf3>
 802024a:	4602      	mov	r2, r0
 802024c:	460b      	mov	r3, r1
 802024e:	e9ca 2300 	strd	r2, r3, [sl]
 8020252:	4620      	mov	r0, r4
 8020254:	4629      	mov	r1, r5
 8020256:	f7e0 f817 	bl	8000288 <__aeabi_dsub>
 802025a:	a389      	add	r3, pc, #548	; (adr r3, 8020480 <__ieee754_rem_pio2+0x308>)
 802025c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020260:	f7e0 f814 	bl	800028c <__adddf3>
 8020264:	f04f 3bff 	mov.w	fp, #4294967295
 8020268:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802026c:	e7c4      	b.n	80201f8 <__ieee754_rem_pio2+0x80>
 802026e:	a386      	add	r3, pc, #536	; (adr r3, 8020488 <__ieee754_rem_pio2+0x310>)
 8020270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020274:	f7e0 f80a 	bl	800028c <__adddf3>
 8020278:	a385      	add	r3, pc, #532	; (adr r3, 8020490 <__ieee754_rem_pio2+0x318>)
 802027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802027e:	4604      	mov	r4, r0
 8020280:	460d      	mov	r5, r1
 8020282:	f7e0 f803 	bl	800028c <__adddf3>
 8020286:	4602      	mov	r2, r0
 8020288:	460b      	mov	r3, r1
 802028a:	e9ca 2300 	strd	r2, r3, [sl]
 802028e:	4620      	mov	r0, r4
 8020290:	4629      	mov	r1, r5
 8020292:	f7df fff9 	bl	8000288 <__aeabi_dsub>
 8020296:	a37e      	add	r3, pc, #504	; (adr r3, 8020490 <__ieee754_rem_pio2+0x318>)
 8020298:	e9d3 2300 	ldrd	r2, r3, [r3]
 802029c:	e7e0      	b.n	8020260 <__ieee754_rem_pio2+0xe8>
 802029e:	4b87      	ldr	r3, [pc, #540]	; (80204bc <__ieee754_rem_pio2+0x344>)
 80202a0:	4598      	cmp	r8, r3
 80202a2:	f300 80d9 	bgt.w	8020458 <__ieee754_rem_pio2+0x2e0>
 80202a6:	f001 f8a3 	bl	80213f0 <fabs>
 80202aa:	ec55 4b10 	vmov	r4, r5, d0
 80202ae:	ee10 0a10 	vmov	r0, s0
 80202b2:	a379      	add	r3, pc, #484	; (adr r3, 8020498 <__ieee754_rem_pio2+0x320>)
 80202b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202b8:	4629      	mov	r1, r5
 80202ba:	f7e0 f99d 	bl	80005f8 <__aeabi_dmul>
 80202be:	4b80      	ldr	r3, [pc, #512]	; (80204c0 <__ieee754_rem_pio2+0x348>)
 80202c0:	2200      	movs	r2, #0
 80202c2:	f7df ffe3 	bl	800028c <__adddf3>
 80202c6:	f7e0 fc47 	bl	8000b58 <__aeabi_d2iz>
 80202ca:	4683      	mov	fp, r0
 80202cc:	f7e0 f92a 	bl	8000524 <__aeabi_i2d>
 80202d0:	4602      	mov	r2, r0
 80202d2:	460b      	mov	r3, r1
 80202d4:	ec43 2b18 	vmov	d8, r2, r3
 80202d8:	a367      	add	r3, pc, #412	; (adr r3, 8020478 <__ieee754_rem_pio2+0x300>)
 80202da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202de:	f7e0 f98b 	bl	80005f8 <__aeabi_dmul>
 80202e2:	4602      	mov	r2, r0
 80202e4:	460b      	mov	r3, r1
 80202e6:	4620      	mov	r0, r4
 80202e8:	4629      	mov	r1, r5
 80202ea:	f7df ffcd 	bl	8000288 <__aeabi_dsub>
 80202ee:	a364      	add	r3, pc, #400	; (adr r3, 8020480 <__ieee754_rem_pio2+0x308>)
 80202f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202f4:	4606      	mov	r6, r0
 80202f6:	460f      	mov	r7, r1
 80202f8:	ec51 0b18 	vmov	r0, r1, d8
 80202fc:	f7e0 f97c 	bl	80005f8 <__aeabi_dmul>
 8020300:	f1bb 0f1f 	cmp.w	fp, #31
 8020304:	4604      	mov	r4, r0
 8020306:	460d      	mov	r5, r1
 8020308:	dc0d      	bgt.n	8020326 <__ieee754_rem_pio2+0x1ae>
 802030a:	4b6e      	ldr	r3, [pc, #440]	; (80204c4 <__ieee754_rem_pio2+0x34c>)
 802030c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8020310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020314:	4543      	cmp	r3, r8
 8020316:	d006      	beq.n	8020326 <__ieee754_rem_pio2+0x1ae>
 8020318:	4622      	mov	r2, r4
 802031a:	462b      	mov	r3, r5
 802031c:	4630      	mov	r0, r6
 802031e:	4639      	mov	r1, r7
 8020320:	f7df ffb2 	bl	8000288 <__aeabi_dsub>
 8020324:	e00f      	b.n	8020346 <__ieee754_rem_pio2+0x1ce>
 8020326:	462b      	mov	r3, r5
 8020328:	4622      	mov	r2, r4
 802032a:	4630      	mov	r0, r6
 802032c:	4639      	mov	r1, r7
 802032e:	f7df ffab 	bl	8000288 <__aeabi_dsub>
 8020332:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020336:	9303      	str	r3, [sp, #12]
 8020338:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802033c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8020340:	f1b8 0f10 	cmp.w	r8, #16
 8020344:	dc02      	bgt.n	802034c <__ieee754_rem_pio2+0x1d4>
 8020346:	e9ca 0100 	strd	r0, r1, [sl]
 802034a:	e039      	b.n	80203c0 <__ieee754_rem_pio2+0x248>
 802034c:	a34e      	add	r3, pc, #312	; (adr r3, 8020488 <__ieee754_rem_pio2+0x310>)
 802034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020352:	ec51 0b18 	vmov	r0, r1, d8
 8020356:	f7e0 f94f 	bl	80005f8 <__aeabi_dmul>
 802035a:	4604      	mov	r4, r0
 802035c:	460d      	mov	r5, r1
 802035e:	4602      	mov	r2, r0
 8020360:	460b      	mov	r3, r1
 8020362:	4630      	mov	r0, r6
 8020364:	4639      	mov	r1, r7
 8020366:	f7df ff8f 	bl	8000288 <__aeabi_dsub>
 802036a:	4602      	mov	r2, r0
 802036c:	460b      	mov	r3, r1
 802036e:	4680      	mov	r8, r0
 8020370:	4689      	mov	r9, r1
 8020372:	4630      	mov	r0, r6
 8020374:	4639      	mov	r1, r7
 8020376:	f7df ff87 	bl	8000288 <__aeabi_dsub>
 802037a:	4622      	mov	r2, r4
 802037c:	462b      	mov	r3, r5
 802037e:	f7df ff83 	bl	8000288 <__aeabi_dsub>
 8020382:	a343      	add	r3, pc, #268	; (adr r3, 8020490 <__ieee754_rem_pio2+0x318>)
 8020384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020388:	4604      	mov	r4, r0
 802038a:	460d      	mov	r5, r1
 802038c:	ec51 0b18 	vmov	r0, r1, d8
 8020390:	f7e0 f932 	bl	80005f8 <__aeabi_dmul>
 8020394:	4622      	mov	r2, r4
 8020396:	462b      	mov	r3, r5
 8020398:	f7df ff76 	bl	8000288 <__aeabi_dsub>
 802039c:	4602      	mov	r2, r0
 802039e:	460b      	mov	r3, r1
 80203a0:	4604      	mov	r4, r0
 80203a2:	460d      	mov	r5, r1
 80203a4:	4640      	mov	r0, r8
 80203a6:	4649      	mov	r1, r9
 80203a8:	f7df ff6e 	bl	8000288 <__aeabi_dsub>
 80203ac:	9a03      	ldr	r2, [sp, #12]
 80203ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80203b2:	1ad3      	subs	r3, r2, r3
 80203b4:	2b31      	cmp	r3, #49	; 0x31
 80203b6:	dc24      	bgt.n	8020402 <__ieee754_rem_pio2+0x28a>
 80203b8:	e9ca 0100 	strd	r0, r1, [sl]
 80203bc:	4646      	mov	r6, r8
 80203be:	464f      	mov	r7, r9
 80203c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80203c4:	4630      	mov	r0, r6
 80203c6:	4642      	mov	r2, r8
 80203c8:	464b      	mov	r3, r9
 80203ca:	4639      	mov	r1, r7
 80203cc:	f7df ff5c 	bl	8000288 <__aeabi_dsub>
 80203d0:	462b      	mov	r3, r5
 80203d2:	4622      	mov	r2, r4
 80203d4:	f7df ff58 	bl	8000288 <__aeabi_dsub>
 80203d8:	9b02      	ldr	r3, [sp, #8]
 80203da:	2b00      	cmp	r3, #0
 80203dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80203e0:	f6bf af0a 	bge.w	80201f8 <__ieee754_rem_pio2+0x80>
 80203e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80203e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80203ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80203f0:	f8ca 8000 	str.w	r8, [sl]
 80203f4:	f8ca 0008 	str.w	r0, [sl, #8]
 80203f8:	f8ca 300c 	str.w	r3, [sl, #12]
 80203fc:	f1cb 0b00 	rsb	fp, fp, #0
 8020400:	e6fa      	b.n	80201f8 <__ieee754_rem_pio2+0x80>
 8020402:	a327      	add	r3, pc, #156	; (adr r3, 80204a0 <__ieee754_rem_pio2+0x328>)
 8020404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020408:	ec51 0b18 	vmov	r0, r1, d8
 802040c:	f7e0 f8f4 	bl	80005f8 <__aeabi_dmul>
 8020410:	4604      	mov	r4, r0
 8020412:	460d      	mov	r5, r1
 8020414:	4602      	mov	r2, r0
 8020416:	460b      	mov	r3, r1
 8020418:	4640      	mov	r0, r8
 802041a:	4649      	mov	r1, r9
 802041c:	f7df ff34 	bl	8000288 <__aeabi_dsub>
 8020420:	4602      	mov	r2, r0
 8020422:	460b      	mov	r3, r1
 8020424:	4606      	mov	r6, r0
 8020426:	460f      	mov	r7, r1
 8020428:	4640      	mov	r0, r8
 802042a:	4649      	mov	r1, r9
 802042c:	f7df ff2c 	bl	8000288 <__aeabi_dsub>
 8020430:	4622      	mov	r2, r4
 8020432:	462b      	mov	r3, r5
 8020434:	f7df ff28 	bl	8000288 <__aeabi_dsub>
 8020438:	a31b      	add	r3, pc, #108	; (adr r3, 80204a8 <__ieee754_rem_pio2+0x330>)
 802043a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802043e:	4604      	mov	r4, r0
 8020440:	460d      	mov	r5, r1
 8020442:	ec51 0b18 	vmov	r0, r1, d8
 8020446:	f7e0 f8d7 	bl	80005f8 <__aeabi_dmul>
 802044a:	4622      	mov	r2, r4
 802044c:	462b      	mov	r3, r5
 802044e:	f7df ff1b 	bl	8000288 <__aeabi_dsub>
 8020452:	4604      	mov	r4, r0
 8020454:	460d      	mov	r5, r1
 8020456:	e75f      	b.n	8020318 <__ieee754_rem_pio2+0x1a0>
 8020458:	4b1b      	ldr	r3, [pc, #108]	; (80204c8 <__ieee754_rem_pio2+0x350>)
 802045a:	4598      	cmp	r8, r3
 802045c:	dd36      	ble.n	80204cc <__ieee754_rem_pio2+0x354>
 802045e:	ee10 2a10 	vmov	r2, s0
 8020462:	462b      	mov	r3, r5
 8020464:	4620      	mov	r0, r4
 8020466:	4629      	mov	r1, r5
 8020468:	f7df ff0e 	bl	8000288 <__aeabi_dsub>
 802046c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8020470:	e9ca 0100 	strd	r0, r1, [sl]
 8020474:	e694      	b.n	80201a0 <__ieee754_rem_pio2+0x28>
 8020476:	bf00      	nop
 8020478:	54400000 	.word	0x54400000
 802047c:	3ff921fb 	.word	0x3ff921fb
 8020480:	1a626331 	.word	0x1a626331
 8020484:	3dd0b461 	.word	0x3dd0b461
 8020488:	1a600000 	.word	0x1a600000
 802048c:	3dd0b461 	.word	0x3dd0b461
 8020490:	2e037073 	.word	0x2e037073
 8020494:	3ba3198a 	.word	0x3ba3198a
 8020498:	6dc9c883 	.word	0x6dc9c883
 802049c:	3fe45f30 	.word	0x3fe45f30
 80204a0:	2e000000 	.word	0x2e000000
 80204a4:	3ba3198a 	.word	0x3ba3198a
 80204a8:	252049c1 	.word	0x252049c1
 80204ac:	397b839a 	.word	0x397b839a
 80204b0:	3fe921fb 	.word	0x3fe921fb
 80204b4:	4002d97b 	.word	0x4002d97b
 80204b8:	3ff921fb 	.word	0x3ff921fb
 80204bc:	413921fb 	.word	0x413921fb
 80204c0:	3fe00000 	.word	0x3fe00000
 80204c4:	08022320 	.word	0x08022320
 80204c8:	7fefffff 	.word	0x7fefffff
 80204cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80204d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80204d4:	ee10 0a10 	vmov	r0, s0
 80204d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80204dc:	ee10 6a10 	vmov	r6, s0
 80204e0:	460f      	mov	r7, r1
 80204e2:	f7e0 fb39 	bl	8000b58 <__aeabi_d2iz>
 80204e6:	f7e0 f81d 	bl	8000524 <__aeabi_i2d>
 80204ea:	4602      	mov	r2, r0
 80204ec:	460b      	mov	r3, r1
 80204ee:	4630      	mov	r0, r6
 80204f0:	4639      	mov	r1, r7
 80204f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80204f6:	f7df fec7 	bl	8000288 <__aeabi_dsub>
 80204fa:	4b23      	ldr	r3, [pc, #140]	; (8020588 <__ieee754_rem_pio2+0x410>)
 80204fc:	2200      	movs	r2, #0
 80204fe:	f7e0 f87b 	bl	80005f8 <__aeabi_dmul>
 8020502:	460f      	mov	r7, r1
 8020504:	4606      	mov	r6, r0
 8020506:	f7e0 fb27 	bl	8000b58 <__aeabi_d2iz>
 802050a:	f7e0 f80b 	bl	8000524 <__aeabi_i2d>
 802050e:	4602      	mov	r2, r0
 8020510:	460b      	mov	r3, r1
 8020512:	4630      	mov	r0, r6
 8020514:	4639      	mov	r1, r7
 8020516:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802051a:	f7df feb5 	bl	8000288 <__aeabi_dsub>
 802051e:	4b1a      	ldr	r3, [pc, #104]	; (8020588 <__ieee754_rem_pio2+0x410>)
 8020520:	2200      	movs	r2, #0
 8020522:	f7e0 f869 	bl	80005f8 <__aeabi_dmul>
 8020526:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802052a:	ad04      	add	r5, sp, #16
 802052c:	f04f 0803 	mov.w	r8, #3
 8020530:	46a9      	mov	r9, r5
 8020532:	2600      	movs	r6, #0
 8020534:	2700      	movs	r7, #0
 8020536:	4632      	mov	r2, r6
 8020538:	463b      	mov	r3, r7
 802053a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 802053e:	46c3      	mov	fp, r8
 8020540:	3d08      	subs	r5, #8
 8020542:	f108 38ff 	add.w	r8, r8, #4294967295
 8020546:	f7e0 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 802054a:	2800      	cmp	r0, #0
 802054c:	d1f3      	bne.n	8020536 <__ieee754_rem_pio2+0x3be>
 802054e:	4b0f      	ldr	r3, [pc, #60]	; (802058c <__ieee754_rem_pio2+0x414>)
 8020550:	9301      	str	r3, [sp, #4]
 8020552:	2302      	movs	r3, #2
 8020554:	9300      	str	r3, [sp, #0]
 8020556:	4622      	mov	r2, r4
 8020558:	465b      	mov	r3, fp
 802055a:	4651      	mov	r1, sl
 802055c:	4648      	mov	r0, r9
 802055e:	f000 f997 	bl	8020890 <__kernel_rem_pio2>
 8020562:	9b02      	ldr	r3, [sp, #8]
 8020564:	2b00      	cmp	r3, #0
 8020566:	4683      	mov	fp, r0
 8020568:	f6bf ae46 	bge.w	80201f8 <__ieee754_rem_pio2+0x80>
 802056c:	e9da 2100 	ldrd	r2, r1, [sl]
 8020570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020574:	e9ca 2300 	strd	r2, r3, [sl]
 8020578:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 802057c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020580:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8020584:	e73a      	b.n	80203fc <__ieee754_rem_pio2+0x284>
 8020586:	bf00      	nop
 8020588:	41700000 	.word	0x41700000
 802058c:	080223a0 	.word	0x080223a0

08020590 <__ieee754_sqrt>:
 8020590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020594:	ec55 4b10 	vmov	r4, r5, d0
 8020598:	4e55      	ldr	r6, [pc, #340]	; (80206f0 <__ieee754_sqrt+0x160>)
 802059a:	43ae      	bics	r6, r5
 802059c:	ee10 0a10 	vmov	r0, s0
 80205a0:	ee10 3a10 	vmov	r3, s0
 80205a4:	462a      	mov	r2, r5
 80205a6:	4629      	mov	r1, r5
 80205a8:	d110      	bne.n	80205cc <__ieee754_sqrt+0x3c>
 80205aa:	ee10 2a10 	vmov	r2, s0
 80205ae:	462b      	mov	r3, r5
 80205b0:	f7e0 f822 	bl	80005f8 <__aeabi_dmul>
 80205b4:	4602      	mov	r2, r0
 80205b6:	460b      	mov	r3, r1
 80205b8:	4620      	mov	r0, r4
 80205ba:	4629      	mov	r1, r5
 80205bc:	f7df fe66 	bl	800028c <__adddf3>
 80205c0:	4604      	mov	r4, r0
 80205c2:	460d      	mov	r5, r1
 80205c4:	ec45 4b10 	vmov	d0, r4, r5
 80205c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80205cc:	2d00      	cmp	r5, #0
 80205ce:	dc10      	bgt.n	80205f2 <__ieee754_sqrt+0x62>
 80205d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80205d4:	4330      	orrs	r0, r6
 80205d6:	d0f5      	beq.n	80205c4 <__ieee754_sqrt+0x34>
 80205d8:	b15d      	cbz	r5, 80205f2 <__ieee754_sqrt+0x62>
 80205da:	ee10 2a10 	vmov	r2, s0
 80205de:	462b      	mov	r3, r5
 80205e0:	ee10 0a10 	vmov	r0, s0
 80205e4:	f7df fe50 	bl	8000288 <__aeabi_dsub>
 80205e8:	4602      	mov	r2, r0
 80205ea:	460b      	mov	r3, r1
 80205ec:	f7e0 f92e 	bl	800084c <__aeabi_ddiv>
 80205f0:	e7e6      	b.n	80205c0 <__ieee754_sqrt+0x30>
 80205f2:	1512      	asrs	r2, r2, #20
 80205f4:	d074      	beq.n	80206e0 <__ieee754_sqrt+0x150>
 80205f6:	07d4      	lsls	r4, r2, #31
 80205f8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80205fc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8020600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020604:	bf5e      	ittt	pl
 8020606:	0fda      	lsrpl	r2, r3, #31
 8020608:	005b      	lslpl	r3, r3, #1
 802060a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 802060e:	2400      	movs	r4, #0
 8020610:	0fda      	lsrs	r2, r3, #31
 8020612:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8020616:	107f      	asrs	r7, r7, #1
 8020618:	005b      	lsls	r3, r3, #1
 802061a:	2516      	movs	r5, #22
 802061c:	4620      	mov	r0, r4
 802061e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8020622:	1886      	adds	r6, r0, r2
 8020624:	428e      	cmp	r6, r1
 8020626:	bfde      	ittt	le
 8020628:	1b89      	suble	r1, r1, r6
 802062a:	18b0      	addle	r0, r6, r2
 802062c:	18a4      	addle	r4, r4, r2
 802062e:	0049      	lsls	r1, r1, #1
 8020630:	3d01      	subs	r5, #1
 8020632:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8020636:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802063a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802063e:	d1f0      	bne.n	8020622 <__ieee754_sqrt+0x92>
 8020640:	462a      	mov	r2, r5
 8020642:	f04f 0e20 	mov.w	lr, #32
 8020646:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802064a:	4281      	cmp	r1, r0
 802064c:	eb06 0c05 	add.w	ip, r6, r5
 8020650:	dc02      	bgt.n	8020658 <__ieee754_sqrt+0xc8>
 8020652:	d113      	bne.n	802067c <__ieee754_sqrt+0xec>
 8020654:	459c      	cmp	ip, r3
 8020656:	d811      	bhi.n	802067c <__ieee754_sqrt+0xec>
 8020658:	f1bc 0f00 	cmp.w	ip, #0
 802065c:	eb0c 0506 	add.w	r5, ip, r6
 8020660:	da43      	bge.n	80206ea <__ieee754_sqrt+0x15a>
 8020662:	2d00      	cmp	r5, #0
 8020664:	db41      	blt.n	80206ea <__ieee754_sqrt+0x15a>
 8020666:	f100 0801 	add.w	r8, r0, #1
 802066a:	1a09      	subs	r1, r1, r0
 802066c:	459c      	cmp	ip, r3
 802066e:	bf88      	it	hi
 8020670:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8020674:	eba3 030c 	sub.w	r3, r3, ip
 8020678:	4432      	add	r2, r6
 802067a:	4640      	mov	r0, r8
 802067c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8020680:	f1be 0e01 	subs.w	lr, lr, #1
 8020684:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8020688:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802068c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8020690:	d1db      	bne.n	802064a <__ieee754_sqrt+0xba>
 8020692:	430b      	orrs	r3, r1
 8020694:	d006      	beq.n	80206a4 <__ieee754_sqrt+0x114>
 8020696:	1c50      	adds	r0, r2, #1
 8020698:	bf13      	iteet	ne
 802069a:	3201      	addne	r2, #1
 802069c:	3401      	addeq	r4, #1
 802069e:	4672      	moveq	r2, lr
 80206a0:	f022 0201 	bicne.w	r2, r2, #1
 80206a4:	1063      	asrs	r3, r4, #1
 80206a6:	0852      	lsrs	r2, r2, #1
 80206a8:	07e1      	lsls	r1, r4, #31
 80206aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80206ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80206b2:	bf48      	it	mi
 80206b4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80206b8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80206bc:	4614      	mov	r4, r2
 80206be:	e781      	b.n	80205c4 <__ieee754_sqrt+0x34>
 80206c0:	0ad9      	lsrs	r1, r3, #11
 80206c2:	3815      	subs	r0, #21
 80206c4:	055b      	lsls	r3, r3, #21
 80206c6:	2900      	cmp	r1, #0
 80206c8:	d0fa      	beq.n	80206c0 <__ieee754_sqrt+0x130>
 80206ca:	02cd      	lsls	r5, r1, #11
 80206cc:	d50a      	bpl.n	80206e4 <__ieee754_sqrt+0x154>
 80206ce:	f1c2 0420 	rsb	r4, r2, #32
 80206d2:	fa23 f404 	lsr.w	r4, r3, r4
 80206d6:	1e55      	subs	r5, r2, #1
 80206d8:	4093      	lsls	r3, r2
 80206da:	4321      	orrs	r1, r4
 80206dc:	1b42      	subs	r2, r0, r5
 80206de:	e78a      	b.n	80205f6 <__ieee754_sqrt+0x66>
 80206e0:	4610      	mov	r0, r2
 80206e2:	e7f0      	b.n	80206c6 <__ieee754_sqrt+0x136>
 80206e4:	0049      	lsls	r1, r1, #1
 80206e6:	3201      	adds	r2, #1
 80206e8:	e7ef      	b.n	80206ca <__ieee754_sqrt+0x13a>
 80206ea:	4680      	mov	r8, r0
 80206ec:	e7bd      	b.n	802066a <__ieee754_sqrt+0xda>
 80206ee:	bf00      	nop
 80206f0:	7ff00000 	.word	0x7ff00000

080206f4 <__ieee754_sqrtf>:
 80206f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80206f8:	4770      	bx	lr
 80206fa:	0000      	movs	r0, r0
 80206fc:	0000      	movs	r0, r0
	...

08020700 <__kernel_cos>:
 8020700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020704:	ec57 6b10 	vmov	r6, r7, d0
 8020708:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802070c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8020710:	ed8d 1b00 	vstr	d1, [sp]
 8020714:	da07      	bge.n	8020726 <__kernel_cos+0x26>
 8020716:	ee10 0a10 	vmov	r0, s0
 802071a:	4639      	mov	r1, r7
 802071c:	f7e0 fa1c 	bl	8000b58 <__aeabi_d2iz>
 8020720:	2800      	cmp	r0, #0
 8020722:	f000 8088 	beq.w	8020836 <__kernel_cos+0x136>
 8020726:	4632      	mov	r2, r6
 8020728:	463b      	mov	r3, r7
 802072a:	4630      	mov	r0, r6
 802072c:	4639      	mov	r1, r7
 802072e:	f7df ff63 	bl	80005f8 <__aeabi_dmul>
 8020732:	4b51      	ldr	r3, [pc, #324]	; (8020878 <__kernel_cos+0x178>)
 8020734:	2200      	movs	r2, #0
 8020736:	4604      	mov	r4, r0
 8020738:	460d      	mov	r5, r1
 802073a:	f7df ff5d 	bl	80005f8 <__aeabi_dmul>
 802073e:	a340      	add	r3, pc, #256	; (adr r3, 8020840 <__kernel_cos+0x140>)
 8020740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020744:	4682      	mov	sl, r0
 8020746:	468b      	mov	fp, r1
 8020748:	4620      	mov	r0, r4
 802074a:	4629      	mov	r1, r5
 802074c:	f7df ff54 	bl	80005f8 <__aeabi_dmul>
 8020750:	a33d      	add	r3, pc, #244	; (adr r3, 8020848 <__kernel_cos+0x148>)
 8020752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020756:	f7df fd99 	bl	800028c <__adddf3>
 802075a:	4622      	mov	r2, r4
 802075c:	462b      	mov	r3, r5
 802075e:	f7df ff4b 	bl	80005f8 <__aeabi_dmul>
 8020762:	a33b      	add	r3, pc, #236	; (adr r3, 8020850 <__kernel_cos+0x150>)
 8020764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020768:	f7df fd8e 	bl	8000288 <__aeabi_dsub>
 802076c:	4622      	mov	r2, r4
 802076e:	462b      	mov	r3, r5
 8020770:	f7df ff42 	bl	80005f8 <__aeabi_dmul>
 8020774:	a338      	add	r3, pc, #224	; (adr r3, 8020858 <__kernel_cos+0x158>)
 8020776:	e9d3 2300 	ldrd	r2, r3, [r3]
 802077a:	f7df fd87 	bl	800028c <__adddf3>
 802077e:	4622      	mov	r2, r4
 8020780:	462b      	mov	r3, r5
 8020782:	f7df ff39 	bl	80005f8 <__aeabi_dmul>
 8020786:	a336      	add	r3, pc, #216	; (adr r3, 8020860 <__kernel_cos+0x160>)
 8020788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802078c:	f7df fd7c 	bl	8000288 <__aeabi_dsub>
 8020790:	4622      	mov	r2, r4
 8020792:	462b      	mov	r3, r5
 8020794:	f7df ff30 	bl	80005f8 <__aeabi_dmul>
 8020798:	a333      	add	r3, pc, #204	; (adr r3, 8020868 <__kernel_cos+0x168>)
 802079a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802079e:	f7df fd75 	bl	800028c <__adddf3>
 80207a2:	4622      	mov	r2, r4
 80207a4:	462b      	mov	r3, r5
 80207a6:	f7df ff27 	bl	80005f8 <__aeabi_dmul>
 80207aa:	4622      	mov	r2, r4
 80207ac:	462b      	mov	r3, r5
 80207ae:	f7df ff23 	bl	80005f8 <__aeabi_dmul>
 80207b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80207b6:	4604      	mov	r4, r0
 80207b8:	460d      	mov	r5, r1
 80207ba:	4630      	mov	r0, r6
 80207bc:	4639      	mov	r1, r7
 80207be:	f7df ff1b 	bl	80005f8 <__aeabi_dmul>
 80207c2:	460b      	mov	r3, r1
 80207c4:	4602      	mov	r2, r0
 80207c6:	4629      	mov	r1, r5
 80207c8:	4620      	mov	r0, r4
 80207ca:	f7df fd5d 	bl	8000288 <__aeabi_dsub>
 80207ce:	4b2b      	ldr	r3, [pc, #172]	; (802087c <__kernel_cos+0x17c>)
 80207d0:	4598      	cmp	r8, r3
 80207d2:	4606      	mov	r6, r0
 80207d4:	460f      	mov	r7, r1
 80207d6:	dc10      	bgt.n	80207fa <__kernel_cos+0xfa>
 80207d8:	4602      	mov	r2, r0
 80207da:	460b      	mov	r3, r1
 80207dc:	4650      	mov	r0, sl
 80207de:	4659      	mov	r1, fp
 80207e0:	f7df fd52 	bl	8000288 <__aeabi_dsub>
 80207e4:	460b      	mov	r3, r1
 80207e6:	4926      	ldr	r1, [pc, #152]	; (8020880 <__kernel_cos+0x180>)
 80207e8:	4602      	mov	r2, r0
 80207ea:	2000      	movs	r0, #0
 80207ec:	f7df fd4c 	bl	8000288 <__aeabi_dsub>
 80207f0:	ec41 0b10 	vmov	d0, r0, r1
 80207f4:	b003      	add	sp, #12
 80207f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207fa:	4b22      	ldr	r3, [pc, #136]	; (8020884 <__kernel_cos+0x184>)
 80207fc:	4920      	ldr	r1, [pc, #128]	; (8020880 <__kernel_cos+0x180>)
 80207fe:	4598      	cmp	r8, r3
 8020800:	bfcc      	ite	gt
 8020802:	4d21      	ldrgt	r5, [pc, #132]	; (8020888 <__kernel_cos+0x188>)
 8020804:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8020808:	2400      	movs	r4, #0
 802080a:	4622      	mov	r2, r4
 802080c:	462b      	mov	r3, r5
 802080e:	2000      	movs	r0, #0
 8020810:	f7df fd3a 	bl	8000288 <__aeabi_dsub>
 8020814:	4622      	mov	r2, r4
 8020816:	4680      	mov	r8, r0
 8020818:	4689      	mov	r9, r1
 802081a:	462b      	mov	r3, r5
 802081c:	4650      	mov	r0, sl
 802081e:	4659      	mov	r1, fp
 8020820:	f7df fd32 	bl	8000288 <__aeabi_dsub>
 8020824:	4632      	mov	r2, r6
 8020826:	463b      	mov	r3, r7
 8020828:	f7df fd2e 	bl	8000288 <__aeabi_dsub>
 802082c:	4602      	mov	r2, r0
 802082e:	460b      	mov	r3, r1
 8020830:	4640      	mov	r0, r8
 8020832:	4649      	mov	r1, r9
 8020834:	e7da      	b.n	80207ec <__kernel_cos+0xec>
 8020836:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8020870 <__kernel_cos+0x170>
 802083a:	e7db      	b.n	80207f4 <__kernel_cos+0xf4>
 802083c:	f3af 8000 	nop.w
 8020840:	be8838d4 	.word	0xbe8838d4
 8020844:	bda8fae9 	.word	0xbda8fae9
 8020848:	bdb4b1c4 	.word	0xbdb4b1c4
 802084c:	3e21ee9e 	.word	0x3e21ee9e
 8020850:	809c52ad 	.word	0x809c52ad
 8020854:	3e927e4f 	.word	0x3e927e4f
 8020858:	19cb1590 	.word	0x19cb1590
 802085c:	3efa01a0 	.word	0x3efa01a0
 8020860:	16c15177 	.word	0x16c15177
 8020864:	3f56c16c 	.word	0x3f56c16c
 8020868:	5555554c 	.word	0x5555554c
 802086c:	3fa55555 	.word	0x3fa55555
 8020870:	00000000 	.word	0x00000000
 8020874:	3ff00000 	.word	0x3ff00000
 8020878:	3fe00000 	.word	0x3fe00000
 802087c:	3fd33332 	.word	0x3fd33332
 8020880:	3ff00000 	.word	0x3ff00000
 8020884:	3fe90000 	.word	0x3fe90000
 8020888:	3fd20000 	.word	0x3fd20000
 802088c:	00000000 	.word	0x00000000

08020890 <__kernel_rem_pio2>:
 8020890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020894:	ed2d 8b02 	vpush	{d8}
 8020898:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 802089c:	f112 0f14 	cmn.w	r2, #20
 80208a0:	9308      	str	r3, [sp, #32]
 80208a2:	9101      	str	r1, [sp, #4]
 80208a4:	4bc4      	ldr	r3, [pc, #784]	; (8020bb8 <__kernel_rem_pio2+0x328>)
 80208a6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80208a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80208aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80208ae:	9302      	str	r3, [sp, #8]
 80208b0:	9b08      	ldr	r3, [sp, #32]
 80208b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80208b6:	bfa8      	it	ge
 80208b8:	1ed4      	subge	r4, r2, #3
 80208ba:	9306      	str	r3, [sp, #24]
 80208bc:	bfb2      	itee	lt
 80208be:	2400      	movlt	r4, #0
 80208c0:	2318      	movge	r3, #24
 80208c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80208c6:	f06f 0317 	mvn.w	r3, #23
 80208ca:	fb04 3303 	mla	r3, r4, r3, r3
 80208ce:	eb03 0a02 	add.w	sl, r3, r2
 80208d2:	9b02      	ldr	r3, [sp, #8]
 80208d4:	9a06      	ldr	r2, [sp, #24]
 80208d6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8020ba8 <__kernel_rem_pio2+0x318>
 80208da:	eb03 0802 	add.w	r8, r3, r2
 80208de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80208e0:	1aa7      	subs	r7, r4, r2
 80208e2:	ae22      	add	r6, sp, #136	; 0x88
 80208e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80208e8:	2500      	movs	r5, #0
 80208ea:	4545      	cmp	r5, r8
 80208ec:	dd13      	ble.n	8020916 <__kernel_rem_pio2+0x86>
 80208ee:	9b08      	ldr	r3, [sp, #32]
 80208f0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8020ba8 <__kernel_rem_pio2+0x318>
 80208f4:	aa22      	add	r2, sp, #136	; 0x88
 80208f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80208fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80208fe:	f04f 0800 	mov.w	r8, #0
 8020902:	9b02      	ldr	r3, [sp, #8]
 8020904:	4598      	cmp	r8, r3
 8020906:	dc2f      	bgt.n	8020968 <__kernel_rem_pio2+0xd8>
 8020908:	ed8d 8b04 	vstr	d8, [sp, #16]
 802090c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8020910:	462f      	mov	r7, r5
 8020912:	2600      	movs	r6, #0
 8020914:	e01b      	b.n	802094e <__kernel_rem_pio2+0xbe>
 8020916:	42ef      	cmn	r7, r5
 8020918:	d407      	bmi.n	802092a <__kernel_rem_pio2+0x9a>
 802091a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 802091e:	f7df fe01 	bl	8000524 <__aeabi_i2d>
 8020922:	e8e6 0102 	strd	r0, r1, [r6], #8
 8020926:	3501      	adds	r5, #1
 8020928:	e7df      	b.n	80208ea <__kernel_rem_pio2+0x5a>
 802092a:	ec51 0b18 	vmov	r0, r1, d8
 802092e:	e7f8      	b.n	8020922 <__kernel_rem_pio2+0x92>
 8020930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020934:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8020938:	f7df fe5e 	bl	80005f8 <__aeabi_dmul>
 802093c:	4602      	mov	r2, r0
 802093e:	460b      	mov	r3, r1
 8020940:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020944:	f7df fca2 	bl	800028c <__adddf3>
 8020948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802094c:	3601      	adds	r6, #1
 802094e:	9b06      	ldr	r3, [sp, #24]
 8020950:	429e      	cmp	r6, r3
 8020952:	f1a7 0708 	sub.w	r7, r7, #8
 8020956:	ddeb      	ble.n	8020930 <__kernel_rem_pio2+0xa0>
 8020958:	ed9d 7b04 	vldr	d7, [sp, #16]
 802095c:	f108 0801 	add.w	r8, r8, #1
 8020960:	ecab 7b02 	vstmia	fp!, {d7}
 8020964:	3508      	adds	r5, #8
 8020966:	e7cc      	b.n	8020902 <__kernel_rem_pio2+0x72>
 8020968:	9b02      	ldr	r3, [sp, #8]
 802096a:	aa0e      	add	r2, sp, #56	; 0x38
 802096c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020970:	930d      	str	r3, [sp, #52]	; 0x34
 8020972:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8020974:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8020978:	9c02      	ldr	r4, [sp, #8]
 802097a:	930c      	str	r3, [sp, #48]	; 0x30
 802097c:	00e3      	lsls	r3, r4, #3
 802097e:	930a      	str	r3, [sp, #40]	; 0x28
 8020980:	ab9a      	add	r3, sp, #616	; 0x268
 8020982:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020986:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 802098a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 802098e:	ab72      	add	r3, sp, #456	; 0x1c8
 8020990:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8020994:	46c3      	mov	fp, r8
 8020996:	46a1      	mov	r9, r4
 8020998:	f1b9 0f00 	cmp.w	r9, #0
 802099c:	f1a5 0508 	sub.w	r5, r5, #8
 80209a0:	dc77      	bgt.n	8020a92 <__kernel_rem_pio2+0x202>
 80209a2:	ec47 6b10 	vmov	d0, r6, r7
 80209a6:	4650      	mov	r0, sl
 80209a8:	f000 fdae 	bl	8021508 <scalbn>
 80209ac:	ec57 6b10 	vmov	r6, r7, d0
 80209b0:	2200      	movs	r2, #0
 80209b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80209b6:	ee10 0a10 	vmov	r0, s0
 80209ba:	4639      	mov	r1, r7
 80209bc:	f7df fe1c 	bl	80005f8 <__aeabi_dmul>
 80209c0:	ec41 0b10 	vmov	d0, r0, r1
 80209c4:	f000 fd20 	bl	8021408 <floor>
 80209c8:	4b7c      	ldr	r3, [pc, #496]	; (8020bbc <__kernel_rem_pio2+0x32c>)
 80209ca:	ec51 0b10 	vmov	r0, r1, d0
 80209ce:	2200      	movs	r2, #0
 80209d0:	f7df fe12 	bl	80005f8 <__aeabi_dmul>
 80209d4:	4602      	mov	r2, r0
 80209d6:	460b      	mov	r3, r1
 80209d8:	4630      	mov	r0, r6
 80209da:	4639      	mov	r1, r7
 80209dc:	f7df fc54 	bl	8000288 <__aeabi_dsub>
 80209e0:	460f      	mov	r7, r1
 80209e2:	4606      	mov	r6, r0
 80209e4:	f7e0 f8b8 	bl	8000b58 <__aeabi_d2iz>
 80209e8:	9004      	str	r0, [sp, #16]
 80209ea:	f7df fd9b 	bl	8000524 <__aeabi_i2d>
 80209ee:	4602      	mov	r2, r0
 80209f0:	460b      	mov	r3, r1
 80209f2:	4630      	mov	r0, r6
 80209f4:	4639      	mov	r1, r7
 80209f6:	f7df fc47 	bl	8000288 <__aeabi_dsub>
 80209fa:	f1ba 0f00 	cmp.w	sl, #0
 80209fe:	4606      	mov	r6, r0
 8020a00:	460f      	mov	r7, r1
 8020a02:	dd6d      	ble.n	8020ae0 <__kernel_rem_pio2+0x250>
 8020a04:	1e62      	subs	r2, r4, #1
 8020a06:	ab0e      	add	r3, sp, #56	; 0x38
 8020a08:	9d04      	ldr	r5, [sp, #16]
 8020a0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020a0e:	f1ca 0118 	rsb	r1, sl, #24
 8020a12:	fa40 f301 	asr.w	r3, r0, r1
 8020a16:	441d      	add	r5, r3
 8020a18:	408b      	lsls	r3, r1
 8020a1a:	1ac0      	subs	r0, r0, r3
 8020a1c:	ab0e      	add	r3, sp, #56	; 0x38
 8020a1e:	9504      	str	r5, [sp, #16]
 8020a20:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8020a24:	f1ca 0317 	rsb	r3, sl, #23
 8020a28:	fa40 fb03 	asr.w	fp, r0, r3
 8020a2c:	f1bb 0f00 	cmp.w	fp, #0
 8020a30:	dd65      	ble.n	8020afe <__kernel_rem_pio2+0x26e>
 8020a32:	9b04      	ldr	r3, [sp, #16]
 8020a34:	2200      	movs	r2, #0
 8020a36:	3301      	adds	r3, #1
 8020a38:	9304      	str	r3, [sp, #16]
 8020a3a:	4615      	mov	r5, r2
 8020a3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8020a40:	4294      	cmp	r4, r2
 8020a42:	f300 809c 	bgt.w	8020b7e <__kernel_rem_pio2+0x2ee>
 8020a46:	f1ba 0f00 	cmp.w	sl, #0
 8020a4a:	dd07      	ble.n	8020a5c <__kernel_rem_pio2+0x1cc>
 8020a4c:	f1ba 0f01 	cmp.w	sl, #1
 8020a50:	f000 80c0 	beq.w	8020bd4 <__kernel_rem_pio2+0x344>
 8020a54:	f1ba 0f02 	cmp.w	sl, #2
 8020a58:	f000 80c6 	beq.w	8020be8 <__kernel_rem_pio2+0x358>
 8020a5c:	f1bb 0f02 	cmp.w	fp, #2
 8020a60:	d14d      	bne.n	8020afe <__kernel_rem_pio2+0x26e>
 8020a62:	4632      	mov	r2, r6
 8020a64:	463b      	mov	r3, r7
 8020a66:	4956      	ldr	r1, [pc, #344]	; (8020bc0 <__kernel_rem_pio2+0x330>)
 8020a68:	2000      	movs	r0, #0
 8020a6a:	f7df fc0d 	bl	8000288 <__aeabi_dsub>
 8020a6e:	4606      	mov	r6, r0
 8020a70:	460f      	mov	r7, r1
 8020a72:	2d00      	cmp	r5, #0
 8020a74:	d043      	beq.n	8020afe <__kernel_rem_pio2+0x26e>
 8020a76:	4650      	mov	r0, sl
 8020a78:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8020bb0 <__kernel_rem_pio2+0x320>
 8020a7c:	f000 fd44 	bl	8021508 <scalbn>
 8020a80:	4630      	mov	r0, r6
 8020a82:	4639      	mov	r1, r7
 8020a84:	ec53 2b10 	vmov	r2, r3, d0
 8020a88:	f7df fbfe 	bl	8000288 <__aeabi_dsub>
 8020a8c:	4606      	mov	r6, r0
 8020a8e:	460f      	mov	r7, r1
 8020a90:	e035      	b.n	8020afe <__kernel_rem_pio2+0x26e>
 8020a92:	4b4c      	ldr	r3, [pc, #304]	; (8020bc4 <__kernel_rem_pio2+0x334>)
 8020a94:	2200      	movs	r2, #0
 8020a96:	4630      	mov	r0, r6
 8020a98:	4639      	mov	r1, r7
 8020a9a:	f7df fdad 	bl	80005f8 <__aeabi_dmul>
 8020a9e:	f7e0 f85b 	bl	8000b58 <__aeabi_d2iz>
 8020aa2:	f7df fd3f 	bl	8000524 <__aeabi_i2d>
 8020aa6:	4602      	mov	r2, r0
 8020aa8:	460b      	mov	r3, r1
 8020aaa:	ec43 2b18 	vmov	d8, r2, r3
 8020aae:	4b46      	ldr	r3, [pc, #280]	; (8020bc8 <__kernel_rem_pio2+0x338>)
 8020ab0:	2200      	movs	r2, #0
 8020ab2:	f7df fda1 	bl	80005f8 <__aeabi_dmul>
 8020ab6:	4602      	mov	r2, r0
 8020ab8:	460b      	mov	r3, r1
 8020aba:	4630      	mov	r0, r6
 8020abc:	4639      	mov	r1, r7
 8020abe:	f7df fbe3 	bl	8000288 <__aeabi_dsub>
 8020ac2:	f7e0 f849 	bl	8000b58 <__aeabi_d2iz>
 8020ac6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8020aca:	f84b 0b04 	str.w	r0, [fp], #4
 8020ace:	ec51 0b18 	vmov	r0, r1, d8
 8020ad2:	f7df fbdb 	bl	800028c <__adddf3>
 8020ad6:	f109 39ff 	add.w	r9, r9, #4294967295
 8020ada:	4606      	mov	r6, r0
 8020adc:	460f      	mov	r7, r1
 8020ade:	e75b      	b.n	8020998 <__kernel_rem_pio2+0x108>
 8020ae0:	d106      	bne.n	8020af0 <__kernel_rem_pio2+0x260>
 8020ae2:	1e63      	subs	r3, r4, #1
 8020ae4:	aa0e      	add	r2, sp, #56	; 0x38
 8020ae6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8020aea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8020aee:	e79d      	b.n	8020a2c <__kernel_rem_pio2+0x19c>
 8020af0:	4b36      	ldr	r3, [pc, #216]	; (8020bcc <__kernel_rem_pio2+0x33c>)
 8020af2:	2200      	movs	r2, #0
 8020af4:	f7e0 f806 	bl	8000b04 <__aeabi_dcmpge>
 8020af8:	2800      	cmp	r0, #0
 8020afa:	d13d      	bne.n	8020b78 <__kernel_rem_pio2+0x2e8>
 8020afc:	4683      	mov	fp, r0
 8020afe:	2200      	movs	r2, #0
 8020b00:	2300      	movs	r3, #0
 8020b02:	4630      	mov	r0, r6
 8020b04:	4639      	mov	r1, r7
 8020b06:	f7df ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 8020b0a:	2800      	cmp	r0, #0
 8020b0c:	f000 80c0 	beq.w	8020c90 <__kernel_rem_pio2+0x400>
 8020b10:	1e65      	subs	r5, r4, #1
 8020b12:	462b      	mov	r3, r5
 8020b14:	2200      	movs	r2, #0
 8020b16:	9902      	ldr	r1, [sp, #8]
 8020b18:	428b      	cmp	r3, r1
 8020b1a:	da6c      	bge.n	8020bf6 <__kernel_rem_pio2+0x366>
 8020b1c:	2a00      	cmp	r2, #0
 8020b1e:	f000 8089 	beq.w	8020c34 <__kernel_rem_pio2+0x3a4>
 8020b22:	ab0e      	add	r3, sp, #56	; 0x38
 8020b24:	f1aa 0a18 	sub.w	sl, sl, #24
 8020b28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	f000 80ad 	beq.w	8020c8c <__kernel_rem_pio2+0x3fc>
 8020b32:	4650      	mov	r0, sl
 8020b34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8020bb0 <__kernel_rem_pio2+0x320>
 8020b38:	f000 fce6 	bl	8021508 <scalbn>
 8020b3c:	ab9a      	add	r3, sp, #616	; 0x268
 8020b3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8020b42:	ec57 6b10 	vmov	r6, r7, d0
 8020b46:	00ec      	lsls	r4, r5, #3
 8020b48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8020b4c:	46aa      	mov	sl, r5
 8020b4e:	f1ba 0f00 	cmp.w	sl, #0
 8020b52:	f280 80d6 	bge.w	8020d02 <__kernel_rem_pio2+0x472>
 8020b56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8020ba8 <__kernel_rem_pio2+0x318>
 8020b5a:	462e      	mov	r6, r5
 8020b5c:	2e00      	cmp	r6, #0
 8020b5e:	f2c0 8104 	blt.w	8020d6a <__kernel_rem_pio2+0x4da>
 8020b62:	ab72      	add	r3, sp, #456	; 0x1c8
 8020b64:	ed8d 8b06 	vstr	d8, [sp, #24]
 8020b68:	f8df a064 	ldr.w	sl, [pc, #100]	; 8020bd0 <__kernel_rem_pio2+0x340>
 8020b6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8020b70:	f04f 0800 	mov.w	r8, #0
 8020b74:	1baf      	subs	r7, r5, r6
 8020b76:	e0ea      	b.n	8020d4e <__kernel_rem_pio2+0x4be>
 8020b78:	f04f 0b02 	mov.w	fp, #2
 8020b7c:	e759      	b.n	8020a32 <__kernel_rem_pio2+0x1a2>
 8020b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8020b82:	b955      	cbnz	r5, 8020b9a <__kernel_rem_pio2+0x30a>
 8020b84:	b123      	cbz	r3, 8020b90 <__kernel_rem_pio2+0x300>
 8020b86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8020b8a:	f8c8 3000 	str.w	r3, [r8]
 8020b8e:	2301      	movs	r3, #1
 8020b90:	3201      	adds	r2, #1
 8020b92:	f108 0804 	add.w	r8, r8, #4
 8020b96:	461d      	mov	r5, r3
 8020b98:	e752      	b.n	8020a40 <__kernel_rem_pio2+0x1b0>
 8020b9a:	1acb      	subs	r3, r1, r3
 8020b9c:	f8c8 3000 	str.w	r3, [r8]
 8020ba0:	462b      	mov	r3, r5
 8020ba2:	e7f5      	b.n	8020b90 <__kernel_rem_pio2+0x300>
 8020ba4:	f3af 8000 	nop.w
	...
 8020bb4:	3ff00000 	.word	0x3ff00000
 8020bb8:	080224e8 	.word	0x080224e8
 8020bbc:	40200000 	.word	0x40200000
 8020bc0:	3ff00000 	.word	0x3ff00000
 8020bc4:	3e700000 	.word	0x3e700000
 8020bc8:	41700000 	.word	0x41700000
 8020bcc:	3fe00000 	.word	0x3fe00000
 8020bd0:	080224a8 	.word	0x080224a8
 8020bd4:	1e62      	subs	r2, r4, #1
 8020bd6:	ab0e      	add	r3, sp, #56	; 0x38
 8020bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020bdc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8020be0:	a90e      	add	r1, sp, #56	; 0x38
 8020be2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8020be6:	e739      	b.n	8020a5c <__kernel_rem_pio2+0x1cc>
 8020be8:	1e62      	subs	r2, r4, #1
 8020bea:	ab0e      	add	r3, sp, #56	; 0x38
 8020bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020bf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8020bf4:	e7f4      	b.n	8020be0 <__kernel_rem_pio2+0x350>
 8020bf6:	a90e      	add	r1, sp, #56	; 0x38
 8020bf8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8020bfc:	3b01      	subs	r3, #1
 8020bfe:	430a      	orrs	r2, r1
 8020c00:	e789      	b.n	8020b16 <__kernel_rem_pio2+0x286>
 8020c02:	3301      	adds	r3, #1
 8020c04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8020c08:	2900      	cmp	r1, #0
 8020c0a:	d0fa      	beq.n	8020c02 <__kernel_rem_pio2+0x372>
 8020c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020c0e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8020c12:	446a      	add	r2, sp
 8020c14:	3a98      	subs	r2, #152	; 0x98
 8020c16:	920a      	str	r2, [sp, #40]	; 0x28
 8020c18:	9a08      	ldr	r2, [sp, #32]
 8020c1a:	18e3      	adds	r3, r4, r3
 8020c1c:	18a5      	adds	r5, r4, r2
 8020c1e:	aa22      	add	r2, sp, #136	; 0x88
 8020c20:	f104 0801 	add.w	r8, r4, #1
 8020c24:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8020c28:	9304      	str	r3, [sp, #16]
 8020c2a:	9b04      	ldr	r3, [sp, #16]
 8020c2c:	4543      	cmp	r3, r8
 8020c2e:	da04      	bge.n	8020c3a <__kernel_rem_pio2+0x3aa>
 8020c30:	461c      	mov	r4, r3
 8020c32:	e6a3      	b.n	802097c <__kernel_rem_pio2+0xec>
 8020c34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020c36:	2301      	movs	r3, #1
 8020c38:	e7e4      	b.n	8020c04 <__kernel_rem_pio2+0x374>
 8020c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8020c40:	f7df fc70 	bl	8000524 <__aeabi_i2d>
 8020c44:	e8e5 0102 	strd	r0, r1, [r5], #8
 8020c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020c4a:	46ab      	mov	fp, r5
 8020c4c:	461c      	mov	r4, r3
 8020c4e:	f04f 0900 	mov.w	r9, #0
 8020c52:	2600      	movs	r6, #0
 8020c54:	2700      	movs	r7, #0
 8020c56:	9b06      	ldr	r3, [sp, #24]
 8020c58:	4599      	cmp	r9, r3
 8020c5a:	dd06      	ble.n	8020c6a <__kernel_rem_pio2+0x3da>
 8020c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c5e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8020c62:	f108 0801 	add.w	r8, r8, #1
 8020c66:	930a      	str	r3, [sp, #40]	; 0x28
 8020c68:	e7df      	b.n	8020c2a <__kernel_rem_pio2+0x39a>
 8020c6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8020c6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8020c72:	f7df fcc1 	bl	80005f8 <__aeabi_dmul>
 8020c76:	4602      	mov	r2, r0
 8020c78:	460b      	mov	r3, r1
 8020c7a:	4630      	mov	r0, r6
 8020c7c:	4639      	mov	r1, r7
 8020c7e:	f7df fb05 	bl	800028c <__adddf3>
 8020c82:	f109 0901 	add.w	r9, r9, #1
 8020c86:	4606      	mov	r6, r0
 8020c88:	460f      	mov	r7, r1
 8020c8a:	e7e4      	b.n	8020c56 <__kernel_rem_pio2+0x3c6>
 8020c8c:	3d01      	subs	r5, #1
 8020c8e:	e748      	b.n	8020b22 <__kernel_rem_pio2+0x292>
 8020c90:	ec47 6b10 	vmov	d0, r6, r7
 8020c94:	f1ca 0000 	rsb	r0, sl, #0
 8020c98:	f000 fc36 	bl	8021508 <scalbn>
 8020c9c:	ec57 6b10 	vmov	r6, r7, d0
 8020ca0:	4ba0      	ldr	r3, [pc, #640]	; (8020f24 <__kernel_rem_pio2+0x694>)
 8020ca2:	ee10 0a10 	vmov	r0, s0
 8020ca6:	2200      	movs	r2, #0
 8020ca8:	4639      	mov	r1, r7
 8020caa:	f7df ff2b 	bl	8000b04 <__aeabi_dcmpge>
 8020cae:	b1f8      	cbz	r0, 8020cf0 <__kernel_rem_pio2+0x460>
 8020cb0:	4b9d      	ldr	r3, [pc, #628]	; (8020f28 <__kernel_rem_pio2+0x698>)
 8020cb2:	2200      	movs	r2, #0
 8020cb4:	4630      	mov	r0, r6
 8020cb6:	4639      	mov	r1, r7
 8020cb8:	f7df fc9e 	bl	80005f8 <__aeabi_dmul>
 8020cbc:	f7df ff4c 	bl	8000b58 <__aeabi_d2iz>
 8020cc0:	4680      	mov	r8, r0
 8020cc2:	f7df fc2f 	bl	8000524 <__aeabi_i2d>
 8020cc6:	4b97      	ldr	r3, [pc, #604]	; (8020f24 <__kernel_rem_pio2+0x694>)
 8020cc8:	2200      	movs	r2, #0
 8020cca:	f7df fc95 	bl	80005f8 <__aeabi_dmul>
 8020cce:	460b      	mov	r3, r1
 8020cd0:	4602      	mov	r2, r0
 8020cd2:	4639      	mov	r1, r7
 8020cd4:	4630      	mov	r0, r6
 8020cd6:	f7df fad7 	bl	8000288 <__aeabi_dsub>
 8020cda:	f7df ff3d 	bl	8000b58 <__aeabi_d2iz>
 8020cde:	1c65      	adds	r5, r4, #1
 8020ce0:	ab0e      	add	r3, sp, #56	; 0x38
 8020ce2:	f10a 0a18 	add.w	sl, sl, #24
 8020ce6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8020cea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8020cee:	e720      	b.n	8020b32 <__kernel_rem_pio2+0x2a2>
 8020cf0:	4630      	mov	r0, r6
 8020cf2:	4639      	mov	r1, r7
 8020cf4:	f7df ff30 	bl	8000b58 <__aeabi_d2iz>
 8020cf8:	ab0e      	add	r3, sp, #56	; 0x38
 8020cfa:	4625      	mov	r5, r4
 8020cfc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8020d00:	e717      	b.n	8020b32 <__kernel_rem_pio2+0x2a2>
 8020d02:	ab0e      	add	r3, sp, #56	; 0x38
 8020d04:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8020d08:	f7df fc0c 	bl	8000524 <__aeabi_i2d>
 8020d0c:	4632      	mov	r2, r6
 8020d0e:	463b      	mov	r3, r7
 8020d10:	f7df fc72 	bl	80005f8 <__aeabi_dmul>
 8020d14:	4b84      	ldr	r3, [pc, #528]	; (8020f28 <__kernel_rem_pio2+0x698>)
 8020d16:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8020d1a:	2200      	movs	r2, #0
 8020d1c:	4630      	mov	r0, r6
 8020d1e:	4639      	mov	r1, r7
 8020d20:	f7df fc6a 	bl	80005f8 <__aeabi_dmul>
 8020d24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020d28:	4606      	mov	r6, r0
 8020d2a:	460f      	mov	r7, r1
 8020d2c:	e70f      	b.n	8020b4e <__kernel_rem_pio2+0x2be>
 8020d2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8020d32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8020d36:	f7df fc5f 	bl	80005f8 <__aeabi_dmul>
 8020d3a:	4602      	mov	r2, r0
 8020d3c:	460b      	mov	r3, r1
 8020d3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020d42:	f7df faa3 	bl	800028c <__adddf3>
 8020d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020d4a:	f108 0801 	add.w	r8, r8, #1
 8020d4e:	9b02      	ldr	r3, [sp, #8]
 8020d50:	4598      	cmp	r8, r3
 8020d52:	dc01      	bgt.n	8020d58 <__kernel_rem_pio2+0x4c8>
 8020d54:	45b8      	cmp	r8, r7
 8020d56:	ddea      	ble.n	8020d2e <__kernel_rem_pio2+0x49e>
 8020d58:	ed9d 7b06 	vldr	d7, [sp, #24]
 8020d5c:	ab4a      	add	r3, sp, #296	; 0x128
 8020d5e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8020d62:	ed87 7b00 	vstr	d7, [r7]
 8020d66:	3e01      	subs	r6, #1
 8020d68:	e6f8      	b.n	8020b5c <__kernel_rem_pio2+0x2cc>
 8020d6a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8020d6c:	2b02      	cmp	r3, #2
 8020d6e:	dc0b      	bgt.n	8020d88 <__kernel_rem_pio2+0x4f8>
 8020d70:	2b00      	cmp	r3, #0
 8020d72:	dc35      	bgt.n	8020de0 <__kernel_rem_pio2+0x550>
 8020d74:	d059      	beq.n	8020e2a <__kernel_rem_pio2+0x59a>
 8020d76:	9b04      	ldr	r3, [sp, #16]
 8020d78:	f003 0007 	and.w	r0, r3, #7
 8020d7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8020d80:	ecbd 8b02 	vpop	{d8}
 8020d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8020d8a:	2b03      	cmp	r3, #3
 8020d8c:	d1f3      	bne.n	8020d76 <__kernel_rem_pio2+0x4e6>
 8020d8e:	ab4a      	add	r3, sp, #296	; 0x128
 8020d90:	4423      	add	r3, r4
 8020d92:	9306      	str	r3, [sp, #24]
 8020d94:	461c      	mov	r4, r3
 8020d96:	469a      	mov	sl, r3
 8020d98:	9502      	str	r5, [sp, #8]
 8020d9a:	9b02      	ldr	r3, [sp, #8]
 8020d9c:	2b00      	cmp	r3, #0
 8020d9e:	f1aa 0a08 	sub.w	sl, sl, #8
 8020da2:	dc6b      	bgt.n	8020e7c <__kernel_rem_pio2+0x5ec>
 8020da4:	46aa      	mov	sl, r5
 8020da6:	f1ba 0f01 	cmp.w	sl, #1
 8020daa:	f1a4 0408 	sub.w	r4, r4, #8
 8020dae:	f300 8085 	bgt.w	8020ebc <__kernel_rem_pio2+0x62c>
 8020db2:	9c06      	ldr	r4, [sp, #24]
 8020db4:	2000      	movs	r0, #0
 8020db6:	3408      	adds	r4, #8
 8020db8:	2100      	movs	r1, #0
 8020dba:	2d01      	cmp	r5, #1
 8020dbc:	f300 809d 	bgt.w	8020efa <__kernel_rem_pio2+0x66a>
 8020dc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8020dc4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8020dc8:	f1bb 0f00 	cmp.w	fp, #0
 8020dcc:	f040 809b 	bne.w	8020f06 <__kernel_rem_pio2+0x676>
 8020dd0:	9b01      	ldr	r3, [sp, #4]
 8020dd2:	e9c3 5600 	strd	r5, r6, [r3]
 8020dd6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8020dda:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8020dde:	e7ca      	b.n	8020d76 <__kernel_rem_pio2+0x4e6>
 8020de0:	3408      	adds	r4, #8
 8020de2:	ab4a      	add	r3, sp, #296	; 0x128
 8020de4:	441c      	add	r4, r3
 8020de6:	462e      	mov	r6, r5
 8020de8:	2000      	movs	r0, #0
 8020dea:	2100      	movs	r1, #0
 8020dec:	2e00      	cmp	r6, #0
 8020dee:	da36      	bge.n	8020e5e <__kernel_rem_pio2+0x5ce>
 8020df0:	f1bb 0f00 	cmp.w	fp, #0
 8020df4:	d039      	beq.n	8020e6a <__kernel_rem_pio2+0x5da>
 8020df6:	4602      	mov	r2, r0
 8020df8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020dfc:	9c01      	ldr	r4, [sp, #4]
 8020dfe:	e9c4 2300 	strd	r2, r3, [r4]
 8020e02:	4602      	mov	r2, r0
 8020e04:	460b      	mov	r3, r1
 8020e06:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8020e0a:	f7df fa3d 	bl	8000288 <__aeabi_dsub>
 8020e0e:	ae4c      	add	r6, sp, #304	; 0x130
 8020e10:	2401      	movs	r4, #1
 8020e12:	42a5      	cmp	r5, r4
 8020e14:	da2c      	bge.n	8020e70 <__kernel_rem_pio2+0x5e0>
 8020e16:	f1bb 0f00 	cmp.w	fp, #0
 8020e1a:	d002      	beq.n	8020e22 <__kernel_rem_pio2+0x592>
 8020e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020e20:	4619      	mov	r1, r3
 8020e22:	9b01      	ldr	r3, [sp, #4]
 8020e24:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8020e28:	e7a5      	b.n	8020d76 <__kernel_rem_pio2+0x4e6>
 8020e2a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8020e2e:	eb0d 0403 	add.w	r4, sp, r3
 8020e32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8020e36:	2000      	movs	r0, #0
 8020e38:	2100      	movs	r1, #0
 8020e3a:	2d00      	cmp	r5, #0
 8020e3c:	da09      	bge.n	8020e52 <__kernel_rem_pio2+0x5c2>
 8020e3e:	f1bb 0f00 	cmp.w	fp, #0
 8020e42:	d002      	beq.n	8020e4a <__kernel_rem_pio2+0x5ba>
 8020e44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020e48:	4619      	mov	r1, r3
 8020e4a:	9b01      	ldr	r3, [sp, #4]
 8020e4c:	e9c3 0100 	strd	r0, r1, [r3]
 8020e50:	e791      	b.n	8020d76 <__kernel_rem_pio2+0x4e6>
 8020e52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8020e56:	f7df fa19 	bl	800028c <__adddf3>
 8020e5a:	3d01      	subs	r5, #1
 8020e5c:	e7ed      	b.n	8020e3a <__kernel_rem_pio2+0x5aa>
 8020e5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8020e62:	f7df fa13 	bl	800028c <__adddf3>
 8020e66:	3e01      	subs	r6, #1
 8020e68:	e7c0      	b.n	8020dec <__kernel_rem_pio2+0x55c>
 8020e6a:	4602      	mov	r2, r0
 8020e6c:	460b      	mov	r3, r1
 8020e6e:	e7c5      	b.n	8020dfc <__kernel_rem_pio2+0x56c>
 8020e70:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8020e74:	f7df fa0a 	bl	800028c <__adddf3>
 8020e78:	3401      	adds	r4, #1
 8020e7a:	e7ca      	b.n	8020e12 <__kernel_rem_pio2+0x582>
 8020e7c:	e9da 8900 	ldrd	r8, r9, [sl]
 8020e80:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8020e84:	9b02      	ldr	r3, [sp, #8]
 8020e86:	3b01      	subs	r3, #1
 8020e88:	9302      	str	r3, [sp, #8]
 8020e8a:	4632      	mov	r2, r6
 8020e8c:	463b      	mov	r3, r7
 8020e8e:	4640      	mov	r0, r8
 8020e90:	4649      	mov	r1, r9
 8020e92:	f7df f9fb 	bl	800028c <__adddf3>
 8020e96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020e9a:	4602      	mov	r2, r0
 8020e9c:	460b      	mov	r3, r1
 8020e9e:	4640      	mov	r0, r8
 8020ea0:	4649      	mov	r1, r9
 8020ea2:	f7df f9f1 	bl	8000288 <__aeabi_dsub>
 8020ea6:	4632      	mov	r2, r6
 8020ea8:	463b      	mov	r3, r7
 8020eaa:	f7df f9ef 	bl	800028c <__adddf3>
 8020eae:	ed9d 7b08 	vldr	d7, [sp, #32]
 8020eb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8020eb6:	ed8a 7b00 	vstr	d7, [sl]
 8020eba:	e76e      	b.n	8020d9a <__kernel_rem_pio2+0x50a>
 8020ebc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8020ec0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8020ec4:	4640      	mov	r0, r8
 8020ec6:	4632      	mov	r2, r6
 8020ec8:	463b      	mov	r3, r7
 8020eca:	4649      	mov	r1, r9
 8020ecc:	f7df f9de 	bl	800028c <__adddf3>
 8020ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020ed4:	4602      	mov	r2, r0
 8020ed6:	460b      	mov	r3, r1
 8020ed8:	4640      	mov	r0, r8
 8020eda:	4649      	mov	r1, r9
 8020edc:	f7df f9d4 	bl	8000288 <__aeabi_dsub>
 8020ee0:	4632      	mov	r2, r6
 8020ee2:	463b      	mov	r3, r7
 8020ee4:	f7df f9d2 	bl	800028c <__adddf3>
 8020ee8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020eec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8020ef0:	ed84 7b00 	vstr	d7, [r4]
 8020ef4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020ef8:	e755      	b.n	8020da6 <__kernel_rem_pio2+0x516>
 8020efa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8020efe:	f7df f9c5 	bl	800028c <__adddf3>
 8020f02:	3d01      	subs	r5, #1
 8020f04:	e759      	b.n	8020dba <__kernel_rem_pio2+0x52a>
 8020f06:	9b01      	ldr	r3, [sp, #4]
 8020f08:	9a01      	ldr	r2, [sp, #4]
 8020f0a:	601d      	str	r5, [r3, #0]
 8020f0c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8020f10:	605c      	str	r4, [r3, #4]
 8020f12:	609f      	str	r7, [r3, #8]
 8020f14:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8020f18:	60d3      	str	r3, [r2, #12]
 8020f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020f1e:	6110      	str	r0, [r2, #16]
 8020f20:	6153      	str	r3, [r2, #20]
 8020f22:	e728      	b.n	8020d76 <__kernel_rem_pio2+0x4e6>
 8020f24:	41700000 	.word	0x41700000
 8020f28:	3e700000 	.word	0x3e700000
 8020f2c:	00000000 	.word	0x00000000

08020f30 <__kernel_sin>:
 8020f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f34:	ed2d 8b04 	vpush	{d8-d9}
 8020f38:	eeb0 8a41 	vmov.f32	s16, s2
 8020f3c:	eef0 8a61 	vmov.f32	s17, s3
 8020f40:	ec55 4b10 	vmov	r4, r5, d0
 8020f44:	b083      	sub	sp, #12
 8020f46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8020f4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8020f4e:	9001      	str	r0, [sp, #4]
 8020f50:	da06      	bge.n	8020f60 <__kernel_sin+0x30>
 8020f52:	ee10 0a10 	vmov	r0, s0
 8020f56:	4629      	mov	r1, r5
 8020f58:	f7df fdfe 	bl	8000b58 <__aeabi_d2iz>
 8020f5c:	2800      	cmp	r0, #0
 8020f5e:	d051      	beq.n	8021004 <__kernel_sin+0xd4>
 8020f60:	4622      	mov	r2, r4
 8020f62:	462b      	mov	r3, r5
 8020f64:	4620      	mov	r0, r4
 8020f66:	4629      	mov	r1, r5
 8020f68:	f7df fb46 	bl	80005f8 <__aeabi_dmul>
 8020f6c:	4682      	mov	sl, r0
 8020f6e:	468b      	mov	fp, r1
 8020f70:	4602      	mov	r2, r0
 8020f72:	460b      	mov	r3, r1
 8020f74:	4620      	mov	r0, r4
 8020f76:	4629      	mov	r1, r5
 8020f78:	f7df fb3e 	bl	80005f8 <__aeabi_dmul>
 8020f7c:	a341      	add	r3, pc, #260	; (adr r3, 8021084 <__kernel_sin+0x154>)
 8020f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f82:	4680      	mov	r8, r0
 8020f84:	4689      	mov	r9, r1
 8020f86:	4650      	mov	r0, sl
 8020f88:	4659      	mov	r1, fp
 8020f8a:	f7df fb35 	bl	80005f8 <__aeabi_dmul>
 8020f8e:	a33f      	add	r3, pc, #252	; (adr r3, 802108c <__kernel_sin+0x15c>)
 8020f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f94:	f7df f978 	bl	8000288 <__aeabi_dsub>
 8020f98:	4652      	mov	r2, sl
 8020f9a:	465b      	mov	r3, fp
 8020f9c:	f7df fb2c 	bl	80005f8 <__aeabi_dmul>
 8020fa0:	a33c      	add	r3, pc, #240	; (adr r3, 8021094 <__kernel_sin+0x164>)
 8020fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fa6:	f7df f971 	bl	800028c <__adddf3>
 8020faa:	4652      	mov	r2, sl
 8020fac:	465b      	mov	r3, fp
 8020fae:	f7df fb23 	bl	80005f8 <__aeabi_dmul>
 8020fb2:	a33a      	add	r3, pc, #232	; (adr r3, 802109c <__kernel_sin+0x16c>)
 8020fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fb8:	f7df f966 	bl	8000288 <__aeabi_dsub>
 8020fbc:	4652      	mov	r2, sl
 8020fbe:	465b      	mov	r3, fp
 8020fc0:	f7df fb1a 	bl	80005f8 <__aeabi_dmul>
 8020fc4:	a337      	add	r3, pc, #220	; (adr r3, 80210a4 <__kernel_sin+0x174>)
 8020fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fca:	f7df f95f 	bl	800028c <__adddf3>
 8020fce:	9b01      	ldr	r3, [sp, #4]
 8020fd0:	4606      	mov	r6, r0
 8020fd2:	460f      	mov	r7, r1
 8020fd4:	b9eb      	cbnz	r3, 8021012 <__kernel_sin+0xe2>
 8020fd6:	4602      	mov	r2, r0
 8020fd8:	460b      	mov	r3, r1
 8020fda:	4650      	mov	r0, sl
 8020fdc:	4659      	mov	r1, fp
 8020fde:	f7df fb0b 	bl	80005f8 <__aeabi_dmul>
 8020fe2:	a325      	add	r3, pc, #148	; (adr r3, 8021078 <__kernel_sin+0x148>)
 8020fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fe8:	f7df f94e 	bl	8000288 <__aeabi_dsub>
 8020fec:	4642      	mov	r2, r8
 8020fee:	464b      	mov	r3, r9
 8020ff0:	f7df fb02 	bl	80005f8 <__aeabi_dmul>
 8020ff4:	4602      	mov	r2, r0
 8020ff6:	460b      	mov	r3, r1
 8020ff8:	4620      	mov	r0, r4
 8020ffa:	4629      	mov	r1, r5
 8020ffc:	f7df f946 	bl	800028c <__adddf3>
 8021000:	4604      	mov	r4, r0
 8021002:	460d      	mov	r5, r1
 8021004:	ec45 4b10 	vmov	d0, r4, r5
 8021008:	b003      	add	sp, #12
 802100a:	ecbd 8b04 	vpop	{d8-d9}
 802100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021012:	4b1b      	ldr	r3, [pc, #108]	; (8021080 <__kernel_sin+0x150>)
 8021014:	ec51 0b18 	vmov	r0, r1, d8
 8021018:	2200      	movs	r2, #0
 802101a:	f7df faed 	bl	80005f8 <__aeabi_dmul>
 802101e:	4632      	mov	r2, r6
 8021020:	ec41 0b19 	vmov	d9, r0, r1
 8021024:	463b      	mov	r3, r7
 8021026:	4640      	mov	r0, r8
 8021028:	4649      	mov	r1, r9
 802102a:	f7df fae5 	bl	80005f8 <__aeabi_dmul>
 802102e:	4602      	mov	r2, r0
 8021030:	460b      	mov	r3, r1
 8021032:	ec51 0b19 	vmov	r0, r1, d9
 8021036:	f7df f927 	bl	8000288 <__aeabi_dsub>
 802103a:	4652      	mov	r2, sl
 802103c:	465b      	mov	r3, fp
 802103e:	f7df fadb 	bl	80005f8 <__aeabi_dmul>
 8021042:	ec53 2b18 	vmov	r2, r3, d8
 8021046:	f7df f91f 	bl	8000288 <__aeabi_dsub>
 802104a:	a30b      	add	r3, pc, #44	; (adr r3, 8021078 <__kernel_sin+0x148>)
 802104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021050:	4606      	mov	r6, r0
 8021052:	460f      	mov	r7, r1
 8021054:	4640      	mov	r0, r8
 8021056:	4649      	mov	r1, r9
 8021058:	f7df face 	bl	80005f8 <__aeabi_dmul>
 802105c:	4602      	mov	r2, r0
 802105e:	460b      	mov	r3, r1
 8021060:	4630      	mov	r0, r6
 8021062:	4639      	mov	r1, r7
 8021064:	f7df f912 	bl	800028c <__adddf3>
 8021068:	4602      	mov	r2, r0
 802106a:	460b      	mov	r3, r1
 802106c:	4620      	mov	r0, r4
 802106e:	4629      	mov	r1, r5
 8021070:	f7df f90a 	bl	8000288 <__aeabi_dsub>
 8021074:	e7c4      	b.n	8021000 <__kernel_sin+0xd0>
 8021076:	bf00      	nop
 8021078:	55555549 	.word	0x55555549
 802107c:	3fc55555 	.word	0x3fc55555
 8021080:	3fe00000 	.word	0x3fe00000
 8021084:	5acfd57c 	.word	0x5acfd57c
 8021088:	3de5d93a 	.word	0x3de5d93a
 802108c:	8a2b9ceb 	.word	0x8a2b9ceb
 8021090:	3e5ae5e6 	.word	0x3e5ae5e6
 8021094:	57b1fe7d 	.word	0x57b1fe7d
 8021098:	3ec71de3 	.word	0x3ec71de3
 802109c:	19c161d5 	.word	0x19c161d5
 80210a0:	3f2a01a0 	.word	0x3f2a01a0
 80210a4:	1110f8a6 	.word	0x1110f8a6
 80210a8:	3f811111 	.word	0x3f811111
 80210ac:	00000000 	.word	0x00000000

080210b0 <atan>:
 80210b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210b4:	ec55 4b10 	vmov	r4, r5, d0
 80210b8:	4bc3      	ldr	r3, [pc, #780]	; (80213c8 <atan+0x318>)
 80210ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80210be:	429e      	cmp	r6, r3
 80210c0:	46ab      	mov	fp, r5
 80210c2:	dd18      	ble.n	80210f6 <atan+0x46>
 80210c4:	4bc1      	ldr	r3, [pc, #772]	; (80213cc <atan+0x31c>)
 80210c6:	429e      	cmp	r6, r3
 80210c8:	dc01      	bgt.n	80210ce <atan+0x1e>
 80210ca:	d109      	bne.n	80210e0 <atan+0x30>
 80210cc:	b144      	cbz	r4, 80210e0 <atan+0x30>
 80210ce:	4622      	mov	r2, r4
 80210d0:	462b      	mov	r3, r5
 80210d2:	4620      	mov	r0, r4
 80210d4:	4629      	mov	r1, r5
 80210d6:	f7df f8d9 	bl	800028c <__adddf3>
 80210da:	4604      	mov	r4, r0
 80210dc:	460d      	mov	r5, r1
 80210de:	e006      	b.n	80210ee <atan+0x3e>
 80210e0:	f1bb 0f00 	cmp.w	fp, #0
 80210e4:	f300 8131 	bgt.w	802134a <atan+0x29a>
 80210e8:	a59b      	add	r5, pc, #620	; (adr r5, 8021358 <atan+0x2a8>)
 80210ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80210ee:	ec45 4b10 	vmov	d0, r4, r5
 80210f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210f6:	4bb6      	ldr	r3, [pc, #728]	; (80213d0 <atan+0x320>)
 80210f8:	429e      	cmp	r6, r3
 80210fa:	dc14      	bgt.n	8021126 <atan+0x76>
 80210fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8021100:	429e      	cmp	r6, r3
 8021102:	dc0d      	bgt.n	8021120 <atan+0x70>
 8021104:	a396      	add	r3, pc, #600	; (adr r3, 8021360 <atan+0x2b0>)
 8021106:	e9d3 2300 	ldrd	r2, r3, [r3]
 802110a:	ee10 0a10 	vmov	r0, s0
 802110e:	4629      	mov	r1, r5
 8021110:	f7df f8bc 	bl	800028c <__adddf3>
 8021114:	4baf      	ldr	r3, [pc, #700]	; (80213d4 <atan+0x324>)
 8021116:	2200      	movs	r2, #0
 8021118:	f7df fcfe 	bl	8000b18 <__aeabi_dcmpgt>
 802111c:	2800      	cmp	r0, #0
 802111e:	d1e6      	bne.n	80210ee <atan+0x3e>
 8021120:	f04f 3aff 	mov.w	sl, #4294967295
 8021124:	e02b      	b.n	802117e <atan+0xce>
 8021126:	f000 f963 	bl	80213f0 <fabs>
 802112a:	4bab      	ldr	r3, [pc, #684]	; (80213d8 <atan+0x328>)
 802112c:	429e      	cmp	r6, r3
 802112e:	ec55 4b10 	vmov	r4, r5, d0
 8021132:	f300 80bf 	bgt.w	80212b4 <atan+0x204>
 8021136:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 802113a:	429e      	cmp	r6, r3
 802113c:	f300 80a0 	bgt.w	8021280 <atan+0x1d0>
 8021140:	ee10 2a10 	vmov	r2, s0
 8021144:	ee10 0a10 	vmov	r0, s0
 8021148:	462b      	mov	r3, r5
 802114a:	4629      	mov	r1, r5
 802114c:	f7df f89e 	bl	800028c <__adddf3>
 8021150:	4ba0      	ldr	r3, [pc, #640]	; (80213d4 <atan+0x324>)
 8021152:	2200      	movs	r2, #0
 8021154:	f7df f898 	bl	8000288 <__aeabi_dsub>
 8021158:	2200      	movs	r2, #0
 802115a:	4606      	mov	r6, r0
 802115c:	460f      	mov	r7, r1
 802115e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021162:	4620      	mov	r0, r4
 8021164:	4629      	mov	r1, r5
 8021166:	f7df f891 	bl	800028c <__adddf3>
 802116a:	4602      	mov	r2, r0
 802116c:	460b      	mov	r3, r1
 802116e:	4630      	mov	r0, r6
 8021170:	4639      	mov	r1, r7
 8021172:	f7df fb6b 	bl	800084c <__aeabi_ddiv>
 8021176:	f04f 0a00 	mov.w	sl, #0
 802117a:	4604      	mov	r4, r0
 802117c:	460d      	mov	r5, r1
 802117e:	4622      	mov	r2, r4
 8021180:	462b      	mov	r3, r5
 8021182:	4620      	mov	r0, r4
 8021184:	4629      	mov	r1, r5
 8021186:	f7df fa37 	bl	80005f8 <__aeabi_dmul>
 802118a:	4602      	mov	r2, r0
 802118c:	460b      	mov	r3, r1
 802118e:	4680      	mov	r8, r0
 8021190:	4689      	mov	r9, r1
 8021192:	f7df fa31 	bl	80005f8 <__aeabi_dmul>
 8021196:	a374      	add	r3, pc, #464	; (adr r3, 8021368 <atan+0x2b8>)
 8021198:	e9d3 2300 	ldrd	r2, r3, [r3]
 802119c:	4606      	mov	r6, r0
 802119e:	460f      	mov	r7, r1
 80211a0:	f7df fa2a 	bl	80005f8 <__aeabi_dmul>
 80211a4:	a372      	add	r3, pc, #456	; (adr r3, 8021370 <atan+0x2c0>)
 80211a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211aa:	f7df f86f 	bl	800028c <__adddf3>
 80211ae:	4632      	mov	r2, r6
 80211b0:	463b      	mov	r3, r7
 80211b2:	f7df fa21 	bl	80005f8 <__aeabi_dmul>
 80211b6:	a370      	add	r3, pc, #448	; (adr r3, 8021378 <atan+0x2c8>)
 80211b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211bc:	f7df f866 	bl	800028c <__adddf3>
 80211c0:	4632      	mov	r2, r6
 80211c2:	463b      	mov	r3, r7
 80211c4:	f7df fa18 	bl	80005f8 <__aeabi_dmul>
 80211c8:	a36d      	add	r3, pc, #436	; (adr r3, 8021380 <atan+0x2d0>)
 80211ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211ce:	f7df f85d 	bl	800028c <__adddf3>
 80211d2:	4632      	mov	r2, r6
 80211d4:	463b      	mov	r3, r7
 80211d6:	f7df fa0f 	bl	80005f8 <__aeabi_dmul>
 80211da:	a36b      	add	r3, pc, #428	; (adr r3, 8021388 <atan+0x2d8>)
 80211dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211e0:	f7df f854 	bl	800028c <__adddf3>
 80211e4:	4632      	mov	r2, r6
 80211e6:	463b      	mov	r3, r7
 80211e8:	f7df fa06 	bl	80005f8 <__aeabi_dmul>
 80211ec:	a368      	add	r3, pc, #416	; (adr r3, 8021390 <atan+0x2e0>)
 80211ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211f2:	f7df f84b 	bl	800028c <__adddf3>
 80211f6:	4642      	mov	r2, r8
 80211f8:	464b      	mov	r3, r9
 80211fa:	f7df f9fd 	bl	80005f8 <__aeabi_dmul>
 80211fe:	a366      	add	r3, pc, #408	; (adr r3, 8021398 <atan+0x2e8>)
 8021200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021204:	4680      	mov	r8, r0
 8021206:	4689      	mov	r9, r1
 8021208:	4630      	mov	r0, r6
 802120a:	4639      	mov	r1, r7
 802120c:	f7df f9f4 	bl	80005f8 <__aeabi_dmul>
 8021210:	a363      	add	r3, pc, #396	; (adr r3, 80213a0 <atan+0x2f0>)
 8021212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021216:	f7df f837 	bl	8000288 <__aeabi_dsub>
 802121a:	4632      	mov	r2, r6
 802121c:	463b      	mov	r3, r7
 802121e:	f7df f9eb 	bl	80005f8 <__aeabi_dmul>
 8021222:	a361      	add	r3, pc, #388	; (adr r3, 80213a8 <atan+0x2f8>)
 8021224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021228:	f7df f82e 	bl	8000288 <__aeabi_dsub>
 802122c:	4632      	mov	r2, r6
 802122e:	463b      	mov	r3, r7
 8021230:	f7df f9e2 	bl	80005f8 <__aeabi_dmul>
 8021234:	a35e      	add	r3, pc, #376	; (adr r3, 80213b0 <atan+0x300>)
 8021236:	e9d3 2300 	ldrd	r2, r3, [r3]
 802123a:	f7df f825 	bl	8000288 <__aeabi_dsub>
 802123e:	4632      	mov	r2, r6
 8021240:	463b      	mov	r3, r7
 8021242:	f7df f9d9 	bl	80005f8 <__aeabi_dmul>
 8021246:	a35c      	add	r3, pc, #368	; (adr r3, 80213b8 <atan+0x308>)
 8021248:	e9d3 2300 	ldrd	r2, r3, [r3]
 802124c:	f7df f81c 	bl	8000288 <__aeabi_dsub>
 8021250:	4632      	mov	r2, r6
 8021252:	463b      	mov	r3, r7
 8021254:	f7df f9d0 	bl	80005f8 <__aeabi_dmul>
 8021258:	4602      	mov	r2, r0
 802125a:	460b      	mov	r3, r1
 802125c:	4640      	mov	r0, r8
 802125e:	4649      	mov	r1, r9
 8021260:	f7df f814 	bl	800028c <__adddf3>
 8021264:	4622      	mov	r2, r4
 8021266:	462b      	mov	r3, r5
 8021268:	f7df f9c6 	bl	80005f8 <__aeabi_dmul>
 802126c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8021270:	4602      	mov	r2, r0
 8021272:	460b      	mov	r3, r1
 8021274:	d14b      	bne.n	802130e <atan+0x25e>
 8021276:	4620      	mov	r0, r4
 8021278:	4629      	mov	r1, r5
 802127a:	f7df f805 	bl	8000288 <__aeabi_dsub>
 802127e:	e72c      	b.n	80210da <atan+0x2a>
 8021280:	ee10 0a10 	vmov	r0, s0
 8021284:	4b53      	ldr	r3, [pc, #332]	; (80213d4 <atan+0x324>)
 8021286:	2200      	movs	r2, #0
 8021288:	4629      	mov	r1, r5
 802128a:	f7de fffd 	bl	8000288 <__aeabi_dsub>
 802128e:	4b51      	ldr	r3, [pc, #324]	; (80213d4 <atan+0x324>)
 8021290:	4606      	mov	r6, r0
 8021292:	460f      	mov	r7, r1
 8021294:	2200      	movs	r2, #0
 8021296:	4620      	mov	r0, r4
 8021298:	4629      	mov	r1, r5
 802129a:	f7de fff7 	bl	800028c <__adddf3>
 802129e:	4602      	mov	r2, r0
 80212a0:	460b      	mov	r3, r1
 80212a2:	4630      	mov	r0, r6
 80212a4:	4639      	mov	r1, r7
 80212a6:	f7df fad1 	bl	800084c <__aeabi_ddiv>
 80212aa:	f04f 0a01 	mov.w	sl, #1
 80212ae:	4604      	mov	r4, r0
 80212b0:	460d      	mov	r5, r1
 80212b2:	e764      	b.n	802117e <atan+0xce>
 80212b4:	4b49      	ldr	r3, [pc, #292]	; (80213dc <atan+0x32c>)
 80212b6:	429e      	cmp	r6, r3
 80212b8:	da1d      	bge.n	80212f6 <atan+0x246>
 80212ba:	ee10 0a10 	vmov	r0, s0
 80212be:	4b48      	ldr	r3, [pc, #288]	; (80213e0 <atan+0x330>)
 80212c0:	2200      	movs	r2, #0
 80212c2:	4629      	mov	r1, r5
 80212c4:	f7de ffe0 	bl	8000288 <__aeabi_dsub>
 80212c8:	4b45      	ldr	r3, [pc, #276]	; (80213e0 <atan+0x330>)
 80212ca:	4606      	mov	r6, r0
 80212cc:	460f      	mov	r7, r1
 80212ce:	2200      	movs	r2, #0
 80212d0:	4620      	mov	r0, r4
 80212d2:	4629      	mov	r1, r5
 80212d4:	f7df f990 	bl	80005f8 <__aeabi_dmul>
 80212d8:	4b3e      	ldr	r3, [pc, #248]	; (80213d4 <atan+0x324>)
 80212da:	2200      	movs	r2, #0
 80212dc:	f7de ffd6 	bl	800028c <__adddf3>
 80212e0:	4602      	mov	r2, r0
 80212e2:	460b      	mov	r3, r1
 80212e4:	4630      	mov	r0, r6
 80212e6:	4639      	mov	r1, r7
 80212e8:	f7df fab0 	bl	800084c <__aeabi_ddiv>
 80212ec:	f04f 0a02 	mov.w	sl, #2
 80212f0:	4604      	mov	r4, r0
 80212f2:	460d      	mov	r5, r1
 80212f4:	e743      	b.n	802117e <atan+0xce>
 80212f6:	462b      	mov	r3, r5
 80212f8:	ee10 2a10 	vmov	r2, s0
 80212fc:	4939      	ldr	r1, [pc, #228]	; (80213e4 <atan+0x334>)
 80212fe:	2000      	movs	r0, #0
 8021300:	f7df faa4 	bl	800084c <__aeabi_ddiv>
 8021304:	f04f 0a03 	mov.w	sl, #3
 8021308:	4604      	mov	r4, r0
 802130a:	460d      	mov	r5, r1
 802130c:	e737      	b.n	802117e <atan+0xce>
 802130e:	4b36      	ldr	r3, [pc, #216]	; (80213e8 <atan+0x338>)
 8021310:	4e36      	ldr	r6, [pc, #216]	; (80213ec <atan+0x33c>)
 8021312:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8021316:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 802131a:	e9da 2300 	ldrd	r2, r3, [sl]
 802131e:	f7de ffb3 	bl	8000288 <__aeabi_dsub>
 8021322:	4622      	mov	r2, r4
 8021324:	462b      	mov	r3, r5
 8021326:	f7de ffaf 	bl	8000288 <__aeabi_dsub>
 802132a:	4602      	mov	r2, r0
 802132c:	460b      	mov	r3, r1
 802132e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8021332:	f7de ffa9 	bl	8000288 <__aeabi_dsub>
 8021336:	f1bb 0f00 	cmp.w	fp, #0
 802133a:	4604      	mov	r4, r0
 802133c:	460d      	mov	r5, r1
 802133e:	f6bf aed6 	bge.w	80210ee <atan+0x3e>
 8021342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021346:	461d      	mov	r5, r3
 8021348:	e6d1      	b.n	80210ee <atan+0x3e>
 802134a:	a51d      	add	r5, pc, #116	; (adr r5, 80213c0 <atan+0x310>)
 802134c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021350:	e6cd      	b.n	80210ee <atan+0x3e>
 8021352:	bf00      	nop
 8021354:	f3af 8000 	nop.w
 8021358:	54442d18 	.word	0x54442d18
 802135c:	bff921fb 	.word	0xbff921fb
 8021360:	8800759c 	.word	0x8800759c
 8021364:	7e37e43c 	.word	0x7e37e43c
 8021368:	e322da11 	.word	0xe322da11
 802136c:	3f90ad3a 	.word	0x3f90ad3a
 8021370:	24760deb 	.word	0x24760deb
 8021374:	3fa97b4b 	.word	0x3fa97b4b
 8021378:	a0d03d51 	.word	0xa0d03d51
 802137c:	3fb10d66 	.word	0x3fb10d66
 8021380:	c54c206e 	.word	0xc54c206e
 8021384:	3fb745cd 	.word	0x3fb745cd
 8021388:	920083ff 	.word	0x920083ff
 802138c:	3fc24924 	.word	0x3fc24924
 8021390:	5555550d 	.word	0x5555550d
 8021394:	3fd55555 	.word	0x3fd55555
 8021398:	2c6a6c2f 	.word	0x2c6a6c2f
 802139c:	bfa2b444 	.word	0xbfa2b444
 80213a0:	52defd9a 	.word	0x52defd9a
 80213a4:	3fadde2d 	.word	0x3fadde2d
 80213a8:	af749a6d 	.word	0xaf749a6d
 80213ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80213b0:	fe231671 	.word	0xfe231671
 80213b4:	3fbc71c6 	.word	0x3fbc71c6
 80213b8:	9998ebc4 	.word	0x9998ebc4
 80213bc:	3fc99999 	.word	0x3fc99999
 80213c0:	54442d18 	.word	0x54442d18
 80213c4:	3ff921fb 	.word	0x3ff921fb
 80213c8:	440fffff 	.word	0x440fffff
 80213cc:	7ff00000 	.word	0x7ff00000
 80213d0:	3fdbffff 	.word	0x3fdbffff
 80213d4:	3ff00000 	.word	0x3ff00000
 80213d8:	3ff2ffff 	.word	0x3ff2ffff
 80213dc:	40038000 	.word	0x40038000
 80213e0:	3ff80000 	.word	0x3ff80000
 80213e4:	bff00000 	.word	0xbff00000
 80213e8:	08022518 	.word	0x08022518
 80213ec:	080224f8 	.word	0x080224f8

080213f0 <fabs>:
 80213f0:	ec51 0b10 	vmov	r0, r1, d0
 80213f4:	ee10 2a10 	vmov	r2, s0
 80213f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80213fc:	ec43 2b10 	vmov	d0, r2, r3
 8021400:	4770      	bx	lr
 8021402:	0000      	movs	r0, r0
 8021404:	0000      	movs	r0, r0
	...

08021408 <floor>:
 8021408:	ec51 0b10 	vmov	r0, r1, d0
 802140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021410:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8021414:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8021418:	2e13      	cmp	r6, #19
 802141a:	ee10 5a10 	vmov	r5, s0
 802141e:	ee10 8a10 	vmov	r8, s0
 8021422:	460c      	mov	r4, r1
 8021424:	dc32      	bgt.n	802148c <floor+0x84>
 8021426:	2e00      	cmp	r6, #0
 8021428:	da14      	bge.n	8021454 <floor+0x4c>
 802142a:	a333      	add	r3, pc, #204	; (adr r3, 80214f8 <floor+0xf0>)
 802142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021430:	f7de ff2c 	bl	800028c <__adddf3>
 8021434:	2200      	movs	r2, #0
 8021436:	2300      	movs	r3, #0
 8021438:	f7df fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 802143c:	b138      	cbz	r0, 802144e <floor+0x46>
 802143e:	2c00      	cmp	r4, #0
 8021440:	da57      	bge.n	80214f2 <floor+0xea>
 8021442:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8021446:	431d      	orrs	r5, r3
 8021448:	d001      	beq.n	802144e <floor+0x46>
 802144a:	4c2d      	ldr	r4, [pc, #180]	; (8021500 <floor+0xf8>)
 802144c:	2500      	movs	r5, #0
 802144e:	4621      	mov	r1, r4
 8021450:	4628      	mov	r0, r5
 8021452:	e025      	b.n	80214a0 <floor+0x98>
 8021454:	4f2b      	ldr	r7, [pc, #172]	; (8021504 <floor+0xfc>)
 8021456:	4137      	asrs	r7, r6
 8021458:	ea01 0307 	and.w	r3, r1, r7
 802145c:	4303      	orrs	r3, r0
 802145e:	d01f      	beq.n	80214a0 <floor+0x98>
 8021460:	a325      	add	r3, pc, #148	; (adr r3, 80214f8 <floor+0xf0>)
 8021462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021466:	f7de ff11 	bl	800028c <__adddf3>
 802146a:	2200      	movs	r2, #0
 802146c:	2300      	movs	r3, #0
 802146e:	f7df fb53 	bl	8000b18 <__aeabi_dcmpgt>
 8021472:	2800      	cmp	r0, #0
 8021474:	d0eb      	beq.n	802144e <floor+0x46>
 8021476:	2c00      	cmp	r4, #0
 8021478:	bfbe      	ittt	lt
 802147a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802147e:	fa43 f606 	asrlt.w	r6, r3, r6
 8021482:	19a4      	addlt	r4, r4, r6
 8021484:	ea24 0407 	bic.w	r4, r4, r7
 8021488:	2500      	movs	r5, #0
 802148a:	e7e0      	b.n	802144e <floor+0x46>
 802148c:	2e33      	cmp	r6, #51	; 0x33
 802148e:	dd0b      	ble.n	80214a8 <floor+0xa0>
 8021490:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8021494:	d104      	bne.n	80214a0 <floor+0x98>
 8021496:	ee10 2a10 	vmov	r2, s0
 802149a:	460b      	mov	r3, r1
 802149c:	f7de fef6 	bl	800028c <__adddf3>
 80214a0:	ec41 0b10 	vmov	d0, r0, r1
 80214a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80214a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80214ac:	f04f 33ff 	mov.w	r3, #4294967295
 80214b0:	fa23 f707 	lsr.w	r7, r3, r7
 80214b4:	4207      	tst	r7, r0
 80214b6:	d0f3      	beq.n	80214a0 <floor+0x98>
 80214b8:	a30f      	add	r3, pc, #60	; (adr r3, 80214f8 <floor+0xf0>)
 80214ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214be:	f7de fee5 	bl	800028c <__adddf3>
 80214c2:	2200      	movs	r2, #0
 80214c4:	2300      	movs	r3, #0
 80214c6:	f7df fb27 	bl	8000b18 <__aeabi_dcmpgt>
 80214ca:	2800      	cmp	r0, #0
 80214cc:	d0bf      	beq.n	802144e <floor+0x46>
 80214ce:	2c00      	cmp	r4, #0
 80214d0:	da02      	bge.n	80214d8 <floor+0xd0>
 80214d2:	2e14      	cmp	r6, #20
 80214d4:	d103      	bne.n	80214de <floor+0xd6>
 80214d6:	3401      	adds	r4, #1
 80214d8:	ea25 0507 	bic.w	r5, r5, r7
 80214dc:	e7b7      	b.n	802144e <floor+0x46>
 80214de:	2301      	movs	r3, #1
 80214e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80214e4:	fa03 f606 	lsl.w	r6, r3, r6
 80214e8:	4435      	add	r5, r6
 80214ea:	4545      	cmp	r5, r8
 80214ec:	bf38      	it	cc
 80214ee:	18e4      	addcc	r4, r4, r3
 80214f0:	e7f2      	b.n	80214d8 <floor+0xd0>
 80214f2:	2500      	movs	r5, #0
 80214f4:	462c      	mov	r4, r5
 80214f6:	e7aa      	b.n	802144e <floor+0x46>
 80214f8:	8800759c 	.word	0x8800759c
 80214fc:	7e37e43c 	.word	0x7e37e43c
 8021500:	bff00000 	.word	0xbff00000
 8021504:	000fffff 	.word	0x000fffff

08021508 <scalbn>:
 8021508:	b570      	push	{r4, r5, r6, lr}
 802150a:	ec55 4b10 	vmov	r4, r5, d0
 802150e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8021512:	4606      	mov	r6, r0
 8021514:	462b      	mov	r3, r5
 8021516:	b99a      	cbnz	r2, 8021540 <scalbn+0x38>
 8021518:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802151c:	4323      	orrs	r3, r4
 802151e:	d036      	beq.n	802158e <scalbn+0x86>
 8021520:	4b39      	ldr	r3, [pc, #228]	; (8021608 <scalbn+0x100>)
 8021522:	4629      	mov	r1, r5
 8021524:	ee10 0a10 	vmov	r0, s0
 8021528:	2200      	movs	r2, #0
 802152a:	f7df f865 	bl	80005f8 <__aeabi_dmul>
 802152e:	4b37      	ldr	r3, [pc, #220]	; (802160c <scalbn+0x104>)
 8021530:	429e      	cmp	r6, r3
 8021532:	4604      	mov	r4, r0
 8021534:	460d      	mov	r5, r1
 8021536:	da10      	bge.n	802155a <scalbn+0x52>
 8021538:	a32b      	add	r3, pc, #172	; (adr r3, 80215e8 <scalbn+0xe0>)
 802153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802153e:	e03a      	b.n	80215b6 <scalbn+0xae>
 8021540:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8021544:	428a      	cmp	r2, r1
 8021546:	d10c      	bne.n	8021562 <scalbn+0x5a>
 8021548:	ee10 2a10 	vmov	r2, s0
 802154c:	4620      	mov	r0, r4
 802154e:	4629      	mov	r1, r5
 8021550:	f7de fe9c 	bl	800028c <__adddf3>
 8021554:	4604      	mov	r4, r0
 8021556:	460d      	mov	r5, r1
 8021558:	e019      	b.n	802158e <scalbn+0x86>
 802155a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802155e:	460b      	mov	r3, r1
 8021560:	3a36      	subs	r2, #54	; 0x36
 8021562:	4432      	add	r2, r6
 8021564:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8021568:	428a      	cmp	r2, r1
 802156a:	dd08      	ble.n	802157e <scalbn+0x76>
 802156c:	2d00      	cmp	r5, #0
 802156e:	a120      	add	r1, pc, #128	; (adr r1, 80215f0 <scalbn+0xe8>)
 8021570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021574:	da1c      	bge.n	80215b0 <scalbn+0xa8>
 8021576:	a120      	add	r1, pc, #128	; (adr r1, 80215f8 <scalbn+0xf0>)
 8021578:	e9d1 0100 	ldrd	r0, r1, [r1]
 802157c:	e018      	b.n	80215b0 <scalbn+0xa8>
 802157e:	2a00      	cmp	r2, #0
 8021580:	dd08      	ble.n	8021594 <scalbn+0x8c>
 8021582:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8021586:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802158a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802158e:	ec45 4b10 	vmov	d0, r4, r5
 8021592:	bd70      	pop	{r4, r5, r6, pc}
 8021594:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8021598:	da19      	bge.n	80215ce <scalbn+0xc6>
 802159a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802159e:	429e      	cmp	r6, r3
 80215a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80215a4:	dd0a      	ble.n	80215bc <scalbn+0xb4>
 80215a6:	a112      	add	r1, pc, #72	; (adr r1, 80215f0 <scalbn+0xe8>)
 80215a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d1e2      	bne.n	8021576 <scalbn+0x6e>
 80215b0:	a30f      	add	r3, pc, #60	; (adr r3, 80215f0 <scalbn+0xe8>)
 80215b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215b6:	f7df f81f 	bl	80005f8 <__aeabi_dmul>
 80215ba:	e7cb      	b.n	8021554 <scalbn+0x4c>
 80215bc:	a10a      	add	r1, pc, #40	; (adr r1, 80215e8 <scalbn+0xe0>)
 80215be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d0b8      	beq.n	8021538 <scalbn+0x30>
 80215c6:	a10e      	add	r1, pc, #56	; (adr r1, 8021600 <scalbn+0xf8>)
 80215c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80215cc:	e7b4      	b.n	8021538 <scalbn+0x30>
 80215ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80215d2:	3236      	adds	r2, #54	; 0x36
 80215d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80215d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80215dc:	4620      	mov	r0, r4
 80215de:	4b0c      	ldr	r3, [pc, #48]	; (8021610 <scalbn+0x108>)
 80215e0:	2200      	movs	r2, #0
 80215e2:	e7e8      	b.n	80215b6 <scalbn+0xae>
 80215e4:	f3af 8000 	nop.w
 80215e8:	c2f8f359 	.word	0xc2f8f359
 80215ec:	01a56e1f 	.word	0x01a56e1f
 80215f0:	8800759c 	.word	0x8800759c
 80215f4:	7e37e43c 	.word	0x7e37e43c
 80215f8:	8800759c 	.word	0x8800759c
 80215fc:	fe37e43c 	.word	0xfe37e43c
 8021600:	c2f8f359 	.word	0xc2f8f359
 8021604:	81a56e1f 	.word	0x81a56e1f
 8021608:	43500000 	.word	0x43500000
 802160c:	ffff3cb0 	.word	0xffff3cb0
 8021610:	3c900000 	.word	0x3c900000

08021614 <_close>:
 8021614:	4b02      	ldr	r3, [pc, #8]	; (8021620 <_close+0xc>)
 8021616:	2258      	movs	r2, #88	; 0x58
 8021618:	601a      	str	r2, [r3, #0]
 802161a:	f04f 30ff 	mov.w	r0, #4294967295
 802161e:	4770      	bx	lr
 8021620:	2000e9a4 	.word	0x2000e9a4

08021624 <_fstat>:
 8021624:	4b02      	ldr	r3, [pc, #8]	; (8021630 <_fstat+0xc>)
 8021626:	2258      	movs	r2, #88	; 0x58
 8021628:	601a      	str	r2, [r3, #0]
 802162a:	f04f 30ff 	mov.w	r0, #4294967295
 802162e:	4770      	bx	lr
 8021630:	2000e9a4 	.word	0x2000e9a4

08021634 <_getpid>:
 8021634:	4b02      	ldr	r3, [pc, #8]	; (8021640 <_getpid+0xc>)
 8021636:	2258      	movs	r2, #88	; 0x58
 8021638:	601a      	str	r2, [r3, #0]
 802163a:	f04f 30ff 	mov.w	r0, #4294967295
 802163e:	4770      	bx	lr
 8021640:	2000e9a4 	.word	0x2000e9a4

08021644 <_isatty>:
 8021644:	4b02      	ldr	r3, [pc, #8]	; (8021650 <_isatty+0xc>)
 8021646:	2258      	movs	r2, #88	; 0x58
 8021648:	601a      	str	r2, [r3, #0]
 802164a:	2000      	movs	r0, #0
 802164c:	4770      	bx	lr
 802164e:	bf00      	nop
 8021650:	2000e9a4 	.word	0x2000e9a4

08021654 <_kill>:
 8021654:	4b02      	ldr	r3, [pc, #8]	; (8021660 <_kill+0xc>)
 8021656:	2258      	movs	r2, #88	; 0x58
 8021658:	601a      	str	r2, [r3, #0]
 802165a:	f04f 30ff 	mov.w	r0, #4294967295
 802165e:	4770      	bx	lr
 8021660:	2000e9a4 	.word	0x2000e9a4

08021664 <_lseek>:
 8021664:	4b02      	ldr	r3, [pc, #8]	; (8021670 <_lseek+0xc>)
 8021666:	2258      	movs	r2, #88	; 0x58
 8021668:	601a      	str	r2, [r3, #0]
 802166a:	f04f 30ff 	mov.w	r0, #4294967295
 802166e:	4770      	bx	lr
 8021670:	2000e9a4 	.word	0x2000e9a4

08021674 <_read>:
 8021674:	4b02      	ldr	r3, [pc, #8]	; (8021680 <_read+0xc>)
 8021676:	2258      	movs	r2, #88	; 0x58
 8021678:	601a      	str	r2, [r3, #0]
 802167a:	f04f 30ff 	mov.w	r0, #4294967295
 802167e:	4770      	bx	lr
 8021680:	2000e9a4 	.word	0x2000e9a4

08021684 <_sbrk>:
 8021684:	4a04      	ldr	r2, [pc, #16]	; (8021698 <_sbrk+0x14>)
 8021686:	6811      	ldr	r1, [r2, #0]
 8021688:	4603      	mov	r3, r0
 802168a:	b909      	cbnz	r1, 8021690 <_sbrk+0xc>
 802168c:	4903      	ldr	r1, [pc, #12]	; (802169c <_sbrk+0x18>)
 802168e:	6011      	str	r1, [r2, #0]
 8021690:	6810      	ldr	r0, [r2, #0]
 8021692:	4403      	add	r3, r0
 8021694:	6013      	str	r3, [r2, #0]
 8021696:	4770      	bx	lr
 8021698:	2000e9a8 	.word	0x2000e9a8
 802169c:	2000e9b0 	.word	0x2000e9b0

080216a0 <_write>:
 80216a0:	4b02      	ldr	r3, [pc, #8]	; (80216ac <_write+0xc>)
 80216a2:	2258      	movs	r2, #88	; 0x58
 80216a4:	601a      	str	r2, [r3, #0]
 80216a6:	f04f 30ff 	mov.w	r0, #4294967295
 80216aa:	4770      	bx	lr
 80216ac:	2000e9a4 	.word	0x2000e9a4

080216b0 <_exit>:
 80216b0:	e7fe      	b.n	80216b0 <_exit>
	...

080216b4 <_init>:
 80216b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216b6:	bf00      	nop
 80216b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80216ba:	bc08      	pop	{r3}
 80216bc:	469e      	mov	lr, r3
 80216be:	4770      	bx	lr

080216c0 <_fini>:
 80216c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216c2:	bf00      	nop
 80216c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80216c6:	bc08      	pop	{r3}
 80216c8:	469e      	mov	lr, r3
 80216ca:	4770      	bx	lr
