
standard_bot_v5clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f3c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da0  0801f558  0801f558  0002f558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080202f8  080202f8  000402e8  2**0
                  CONTENTS
  4 .ARM          00000008  080202f8  080202f8  000302f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020300  08020300  000402e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020300  08020300  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020304  08020304  00030304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08020308  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e390  200002e8  080205f0  000402e8  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000e678  080205f0  0004e678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040318  2**0
                  CONTENTS, READONLY
 13 .debug_info   000393cc  00000000  00000000  0004035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009df2  00000000  00000000  00079727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c00  00000000  00000000  00083520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000217d  00000000  00000000  00086120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034d1d  00000000  00000000  0008829d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000485de  00000000  00000000  000bcfba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f56fa  00000000  00000000  00105598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c9b0  00000000  00000000  001fac94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00207644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f540 	.word	0x0801f540

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	0801f540 	.word	0x0801f540

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <get_CRC8_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      ucCRC8:��ʼCRC8
  * @retval         �������CRC8
  */
uint8_t get_CRC8_check_sum(unsigned char *pch_message,unsigned int dw_length,unsigned char ucCRC8)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	71fb      	strb	r3, [r7, #7]
    unsigned char uc_index;
    while (dw_length--)
 8000ffe:	e00a      	b.n	8001016 <get_CRC8_check_sum+0x26>
    {
        uc_index = ucCRC8^(*pch_message++);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60fa      	str	r2, [r7, #12]
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4053      	eors	r3, r2
 800100c:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <get_CRC8_check_sum+0x40>)
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	71fb      	strb	r3, [r7, #7]
    while (dw_length--)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	60ba      	str	r2, [r7, #8]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1ef      	bne.n	8001000 <get_CRC8_check_sum+0x10>
    }
    return(ucCRC8);
 8001020:	79fb      	ldrb	r3, [r7, #7]
}
 8001022:	4618      	mov	r0, r3
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	0801f678 	.word	0x0801f678

08001034 <verify_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
    unsigned char ucExpected = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <verify_CRC8_check_sum+0x1a>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d801      	bhi.n	8001052 <verify_CRC8_check_sum+0x1e>
    {
        return 0;
 800104e:	2300      	movs	r3, #0
 8001050:	e013      	b.n	800107a <verify_CRC8_check_sum+0x46>
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	3b01      	subs	r3, #1
 8001056:	22ff      	movs	r2, #255	; 0xff
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffc8 	bl	8000ff0 <get_CRC8_check_sum>
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]
    return ( ucExpected == pch_message[dw_length - 1] );
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3b01      	subs	r3, #1
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	429a      	cmp	r2, r3
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <get_CRC16_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      wCRC:��ʼCRC16
  * @retval         �������CRC16
  */
uint16_t get_CRC16_check_sum(uint8_t *pch_message,uint32_t dw_length,uint16_t wCRC)
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d113      	bne.n	80010c0 <get_CRC16_check_sum+0x3c>
    {
        return 0xFFFF;
 8001098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109c:	e016      	b.n	80010cc <get_CRC16_check_sum+0x48>
    }
    while(dw_length--)
    {
        chData = *pch_message++;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	60fa      	str	r2, [r7, #12]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	88f9      	ldrh	r1, [r7, #6]
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	404b      	eors	r3, r1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <get_CRC16_check_sum+0x54>)
 80010b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010bc:	4053      	eors	r3, r2
 80010be:	80fb      	strh	r3, [r7, #6]
    while(dw_length--)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1e5a      	subs	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1e9      	bne.n	800109e <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 80010ca:	88fb      	ldrh	r3, [r7, #6]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	0801f778 	.word	0x0801f778

080010dc <verify_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <verify_CRC16_check_sum+0x1a>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d801      	bhi.n	80010fa <verify_CRC16_check_sum+0x1e>
    {
        return 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e020      	b.n	800113c <verify_CRC16_check_sum+0x60>
    }
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	3b02      	subs	r3, #2
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <verify_CRC16_check_sum+0x68>)
 8001100:	8812      	ldrh	r2, [r2, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ffbd 	bl	8001084 <get_CRC16_check_sum>
 800110a:	4603      	mov	r3, r0
 800110c:	81fb      	strh	r3, [r7, #14]
    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	3a02      	subs	r2, #2
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	440a      	add	r2, r1
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	4293      	cmp	r3, r2
 800111e:	d10c      	bne.n	800113a <verify_CRC16_check_sum+0x5e>
 8001120:	89fb      	ldrh	r3, [r7, #14]
 8001122:	0a1b      	lsrs	r3, r3, #8
 8001124:	b29b      	uxth	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	3a01      	subs	r2, #1
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	440a      	add	r2, r1
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <verify_CRC16_check_sum+0x5e>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <verify_CRC16_check_sum+0x60>
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <buzzer+0x1a>
	{
		htim4.Instance->CCR3 = 0;
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <buzzer+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
		htim4.Instance->CCR3 = 500;
	}
}
 8001160:	e00c      	b.n	800117c <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001168:	fb92 f2f3 	sdiv	r2, r2, r3
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <buzzer+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	629a      	str	r2, [r3, #40]	; 0x28
		htim4.Instance->CCR3 = 500;
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <buzzer+0x40>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	200014fc 	.word	0x200014fc

0800118c <buzzer_init>:


void buzzer_init()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001190:	2108      	movs	r1, #8
 8001192:	4804      	ldr	r0, [pc, #16]	; (80011a4 <buzzer_init+0x18>)
 8001194:	f00e fd3a 	bl	800fc0c <HAL_TIM_PWM_Start>
	  htim4.Instance->CCR3 = 0;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <buzzer_init+0x18>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200014fc 	.word	0x200014fc

080011a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f003 fdd9 	bl	8004d68 <can_ISR>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f003 fdce 	bl	8004d68 <can_ISR>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	2100      	movs	r1, #0
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f008 ffd5 	bl	800a196 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	2101      	movs	r1, #1
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f008 ffc4 	bl	800a196 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2228      	movs	r2, #40	; 0x28
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f018 fe86 	bl	8019f3e <memset>
    can_filter_st.FilterActivation = ENABLE;
 8001232:	2301      	movs	r3, #1
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800123a:	2301      	movs	r3, #1
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	0c1b      	lsrs	r3, r3, #16
 8001242:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	b29b      	uxth	r3, r3
 8001248:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	b29b      	uxth	r3, r3
 8001254:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <can_start+0xa4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d111      	bne.n	8001284 <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f008 fd92 	bl	8009d98 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f008 fe6f 	bl	8009f58 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800127a:	2102      	movs	r1, #2
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f009 f89c 	bl	800a3ba <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 8001282:	e017      	b.n	80012b4 <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <can_start+0xa8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d112      	bne.n	80012b4 <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 800128e:	2301      	movs	r3, #1
 8001290:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 8001292:	230e      	movs	r3, #14
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
		can_filter_st.FilterBank = 14;
 8001296:	230e      	movs	r3, #14
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	4619      	mov	r1, r3
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f008 fd79 	bl	8009d98 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f008 fe56 	bl	8009f58 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 80012ac:	2110      	movs	r1, #16
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f009 f883 	bl	800a3ba <HAL_CAN_ActivateNotification>
}
 80012b4:	bf00      	nop
 80012b6:	3738      	adds	r7, #56	; 0x38
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40006400 	.word	0x40006400
 80012c0:	40006800 	.word	0x40006800

080012c4 <dbus_remote_ISR>:

uint8_t remote_raw_data[REMOTE_DATA_SIZE] = {0};
remote_cmd_t remote_cmd = { 0 };


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 80012cc:	4b71      	ldr	r3, [pc, #452]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80012d4:	785b      	ldrb	r3, [r3, #1]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21b      	sxth	r3, r3
 80012de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	4b6c      	ldr	r3, [pc, #432]	; (8001498 <dbus_remote_ISR+0x1d4>)
 80012e6:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 80012e8:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <dbus_remote_ISR+0x1d4>)
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	4b67      	ldr	r3, [pc, #412]	; (8001498 <dbus_remote_ISR+0x1d4>)
 80012fa:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 80012fc:	4b65      	ldr	r3, [pc, #404]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <dbus_remote_ISR+0x1d0>)
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	015b      	lsls	r3, r3, #5
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <dbus_remote_ISR+0x1d4>)
 800131a:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 800131c:	4b5e      	ldr	r3, [pc, #376]	; (8001498 <dbus_remote_ISR+0x1d4>)
 800131e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001328:	b29b      	uxth	r3, r3
 800132a:	b21a      	sxth	r2, r3
 800132c:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <dbus_remote_ISR+0x1d4>)
 800132e:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 8001330:	4b58      	ldr	r3, [pc, #352]	; (8001494 <dbus_remote_ISR+0x1d0>)
 8001332:	789b      	ldrb	r3, [r3, #2]
 8001334:	099b      	lsrs	r3, r3, #6
 8001336:	b2db      	uxtb	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <dbus_remote_ISR+0x1d0>)
 800133c:	78db      	ldrb	r3, [r3, #3]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <dbus_remote_ISR+0x1d0>)
 8001348:	791b      	ldrb	r3, [r3, #4]
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001356:	b21a      	sxth	r2, r3
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 8001358:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <dbus_remote_ISR+0x1d4>)
 800135a:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <dbus_remote_ISR+0x1d4>)
 800135e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001362:	b29b      	uxth	r3, r3
 8001364:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21a      	sxth	r2, r3
 800136c:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <dbus_remote_ISR+0x1d4>)
 800136e:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <dbus_remote_ISR+0x1d0>)
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	b21a      	sxth	r2, r3
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <dbus_remote_ISR+0x1d0>)
 800137c:	795b      	ldrb	r3, [r3, #5]
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21b      	sxth	r3, r3
 8001386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138a:	b21a      	sxth	r2, r3
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <dbus_remote_ISR+0x1d4>)
 800138e:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <dbus_remote_ISR+0x1d4>)
 8001392:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001396:	b29b      	uxth	r3, r3
 8001398:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800139c:	b29b      	uxth	r3, r3
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <dbus_remote_ISR+0x1d4>)
 80013a2:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 80013a4:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80013a6:	795b      	ldrb	r3, [r3, #5]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	109b      	asrs	r3, r3, #2
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	b25a      	sxtb	r2, r3
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <dbus_remote_ISR+0x1d4>)
 80013b8:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80013bc:	795b      	ldrb	r3, [r3, #5]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	b25a      	sxtb	r2, r3
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <dbus_remote_ISR+0x1d4>)
 80013cc:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80013d0:	799b      	ldrb	r3, [r3, #6]
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80013d6:	79db      	ldrb	r3, [r3, #7]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21a      	sxth	r2, r3
 80013e0:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <dbus_remote_ISR+0x1d4>)
 80013e2:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80013e6:	7a1b      	ldrb	r3, [r3, #8]
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80013ec:	7a5b      	ldrb	r3, [r3, #9]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <dbus_remote_ISR+0x1d4>)
 80013f8:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <dbus_remote_ISR+0x1d0>)
 80013fc:	7a9b      	ldrb	r3, [r3, #10]
 80013fe:	b21a      	sxth	r2, r3
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <dbus_remote_ISR+0x1d0>)
 8001402:	7adb      	ldrb	r3, [r3, #11]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <dbus_remote_ISR+0x1d4>)
 800140e:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <dbus_remote_ISR+0x1d0>)
 8001412:	7b1b      	ldrb	r3, [r3, #12]
 8001414:	b25a      	sxtb	r2, r3
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <dbus_remote_ISR+0x1d4>)
 8001418:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <dbus_remote_ISR+0x1d0>)
 800141c:	7b5b      	ldrb	r3, [r3, #13]
 800141e:	b25a      	sxtb	r2, r3
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <dbus_remote_ISR+0x1d4>)
 8001422:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <dbus_remote_ISR+0x1d0>)
 8001426:	7b9b      	ldrb	r3, [r3, #14]
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <dbus_remote_ISR+0x1d4>)
 800142c:	835a      	strh	r2, [r3, #26]
	remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <dbus_remote_ISR+0x1d0>)
 8001430:	7c1b      	ldrb	r3, [r3, #16]
 8001432:	b21a      	sxth	r2, r3
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <dbus_remote_ISR+0x1d0>)
 8001436:	7c5b      	ldrb	r3, [r3, #17]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <dbus_remote_ISR+0x1d4>)
 8001442:	839a      	strh	r2, [r3, #28]
	remote_cmd.side_dial -= JOYSTICK_OFFSET;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <dbus_remote_ISR+0x1d4>)
 8001446:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800144a:	b29b      	uxth	r3, r3
 800144c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001450:	b29b      	uxth	r3, r3
 8001452:	b21a      	sxth	r2, r3
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <dbus_remote_ISR+0x1d4>)
 8001456:	839a      	strh	r2, [r3, #28]
	remote_cmd.last_time = HAL_GetTick();
 8001458:	f008 f910 	bl	800967c <HAL_GetTick>
 800145c:	4603      	mov	r3, r0
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <dbus_remote_ISR+0x1d4>)
 8001460:	6213      	str	r3, [r2, #32]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <dbus_remote_ISR+0x1d8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f107 020c 	add.w	r2, r7, #12
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f016 f801 	bl	8017478 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <dbus_remote_ISR+0x1c8>
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <dbus_remote_ISR+0x1dc>)
 800147e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	f3bf 8f4f 	dsb	sy
 8001488:	f3bf 8f6f 	isb	sy
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000304 	.word	0x20000304
 8001498:	20000318 	.word	0x20000318
 800149c:	20000450 	.word	0x20000450
 80014a0:	e000ed04 	.word	0xe000ed04

080014a4 <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0
	uint8_t *pData = remote_raw_data;
 80014aa:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <dbus_remote_start+0x13c>)
 80014ac:	60fb      	str	r3, [r7, #12]
	UART_HandleTypeDef *huart = &DBUS_UART;
 80014ae:	4b4d      	ldr	r3, [pc, #308]	; (80015e4 <dbus_remote_start+0x140>)
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	f040 808b 	bne.w	80015d6 <dbus_remote_start+0x132>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <dbus_remote_start+0x26>
			return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e086      	b.n	80015d8 <dbus_remote_start+0x134>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <dbus_remote_start+0x34>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e07f      	b.n	80015d8 <dbus_remote_start+0x134>
 80014d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	2201      	movs	r2, #1
 80014e4:	631a      	str	r2, [r3, #48]	; 0x30
		huart->pRxBuffPtr = pData;
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	2212      	movs	r2, #18
 80014f0:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	2200      	movs	r2, #0
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	2222      	movs	r2, #34	; 0x22
 80014fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001504:	4a38      	ldr	r2, [pc, #224]	; (80015e8 <dbus_remote_start+0x144>)
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150c:	2200      	movs	r2, #0
 800150e:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 8001516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001518:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3304      	adds	r3, #4
 8001520:	4619      	mov	r1, r3
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2312      	movs	r3, #18
 8001528:	f009 fb4a 	bl	800abc0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001558:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0201 	orr.w	r2, r2, #1
 8001568:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
		in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001578:	615a      	str	r2, [r3, #20]

		if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	2b01      	cmp	r3, #1
 8001580:	d125      	bne.n	80015ce <dbus_remote_start+0x12a>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	330c      	adds	r3, #12
 800159e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	e853 3f00 	ldrex	r3, [r3]
 80015a6:	613b      	str	r3, [r7, #16]
   return(result);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	330c      	adds	r3, #12
 80015b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b8:	623a      	str	r2, [r7, #32]
 80015ba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015bc:	69f9      	ldr	r1, [r7, #28]
 80015be:	6a3a      	ldr	r2, [r7, #32]
 80015c0:	e841 2300 	strex	r3, r2, [r1]
 80015c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e5      	bne.n	8001598 <dbus_remote_start+0xf4>
 80015cc:	e001      	b.n	80015d2 <dbus_remote_start+0x12e>
		{
			/* In case of errors already pending when reception is started,
			   Interrupts may have already been raised and lead to reception abortion.
			   (Overrun error for instance).
			   In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
			return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e002      	b.n	80015d8 <dbus_remote_start+0x134>
		}
		return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <dbus_remote_start+0x134>
	} else {
		return HAL_BUSY;
 80015d6:	2302      	movs	r3, #2
	}
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3730      	adds	r7, #48	; 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000304 	.word	0x20000304
 80015e4:	20001618 	.word	0x20001618
 80015e8:	080012c5 	.word	0x080012c5

080015ec <laser_on>:
 */
#include "board_lib.h"
#include "bsp_gpio.h"

void laser_on()
{ //set to reset for open day
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <laser_on+0x14>)
 80015f8:	f009 ffde 	bl	800b5b8 <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40020800 	.word	0x40020800

08001604 <laser_off>:

void laser_off()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160e:	4802      	ldr	r0, [pc, #8]	; (8001618 <laser_off+0x14>)
 8001610:	f009 ffd2 	bl	800b5b8 <HAL_GPIO_WritePin>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40020800 	.word	0x40020800

0800161c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001620:	f3bf 8f4f 	dsb	sy
}
 8001624:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <__NVIC_SystemReset+0x24>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800162e:	4904      	ldr	r1, [pc, #16]	; (8001640 <__NVIC_SystemReset+0x24>)
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_SystemReset+0x28>)
 8001632:	4313      	orrs	r3, r2
 8001634:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001636:	f3bf 8f4f 	dsb	sy
}
 800163a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <__NVIC_SystemReset+0x20>
 8001640:	e000ed00 	.word	0xe000ed00
 8001644:	05fa0004 	.word	0x05fa0004

08001648 <inv_sqrt>:
 * @brief  fast inverse square-root, to calculate 1/Sqrt(x)
 * @param  x: the number need to be calculated
 * @retval 1/Sqrt(x)
 * @usage  call in imu_ahrs_update() function
 */
float inv_sqrt(float x) {
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001652:	edd7 7a01 	vldr	s15, [r7, #4]
 8001656:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800165a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]

	i = 0x5f3759df - (i >> 1);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	105a      	asrs	r2, r3, #1
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <inv_sqrt+0x74>)
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001680:	ed97 7a04 	vldr	s14, [r7, #16]
 8001684:	edd7 7a05 	vldr	s15, [r7, #20]
 8001688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800168c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001694:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001698:	ee37 7a67 	vsub.f32	s14, s14, s15
 800169c:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	edc7 7a04 	vstr	s15, [r7, #16]

	return y;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	ee07 3a90 	vmov	s15, r3
}
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	5f3759df 	.word	0x5f3759df

080016c0 <gyro_write_byte>:

void gyro_write_byte(uint8_t const reg, uint8_t const data) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4603      	mov	r3, r0
 80016c8:	460a      	mov	r2, r1
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	4613      	mov	r3, r2
 80016ce:	71bb      	strb	r3, [r7, #6]
	BMI_GYRO_NSS_LOW;
 80016d0:	2200      	movs	r2, #0
 80016d2:	2101      	movs	r1, #1
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <gyro_write_byte+0x5c>)
 80016d6:	f009 ff6f 	bl	800b5b8 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg;
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80016de:	f107 020e 	add.w	r2, r7, #14
 80016e2:	f107 010f 	add.w	r1, r7, #15
 80016e6:	2364      	movs	r3, #100	; 0x64
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <gyro_write_byte+0x60>)
 80016ee:	f00d fdeb 	bl	800f2c8 <HAL_SPI_TransmitReceive>
	tx = data;
 80016f2:	79bb      	ldrb	r3, [r7, #6]
 80016f4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80016f6:	f107 020e 	add.w	r2, r7, #14
 80016fa:	f107 010f 	add.w	r1, r7, #15
 80016fe:	2364      	movs	r3, #100	; 0x64
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	4806      	ldr	r0, [pc, #24]	; (8001720 <gyro_write_byte+0x60>)
 8001706:	f00d fddf 	bl	800f2c8 <HAL_SPI_TransmitReceive>
	BMI_GYRO_NSS_HIGH;
 800170a:	2201      	movs	r2, #1
 800170c:	2101      	movs	r1, #1
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <gyro_write_byte+0x5c>)
 8001710:	f009 ff52 	bl	800b5b8 <HAL_GPIO_WritePin>
	return;
 8001714:	bf00      	nop
}
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40020400 	.word	0x40020400
 8001720:	20001308 	.word	0x20001308

08001724 <gyro_read_byte>:

uint8_t gyro_read_byte(uint8_t const reg) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	BMI_GYRO_NSS_LOW;
 800172e:	2200      	movs	r2, #0
 8001730:	2101      	movs	r1, #1
 8001732:	4811      	ldr	r0, [pc, #68]	; (8001778 <gyro_read_byte+0x54>)
 8001734:	f009 ff40 	bl	800b5b8 <HAL_GPIO_WritePin>
	uint8_t rx, tx;
	tx = reg | 0x80;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800173e:	b2db      	uxtb	r3, r3
 8001740:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001742:	f107 020f 	add.w	r2, r7, #15
 8001746:	f107 010e 	add.w	r1, r7, #14
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <gyro_read_byte+0x58>)
 8001752:	f00d fdb9 	bl	800f2c8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001756:	f107 010f 	add.w	r1, r7, #15
 800175a:	2364      	movs	r3, #100	; 0x64
 800175c:	2201      	movs	r2, #1
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <gyro_read_byte+0x58>)
 8001760:	f00d fca1 	bl	800f0a6 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 8001764:	2201      	movs	r2, #1
 8001766:	2101      	movs	r1, #1
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <gyro_read_byte+0x54>)
 800176a:	f009 ff25 	bl	800b5b8 <HAL_GPIO_WritePin>
	return rx;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40020400 	.word	0x40020400
 800177c:	20001308 	.word	0x20001308

08001780 <gyro_read_bytes>:

uint8_t gyro_read_bytes(uint8_t const reg, uint8_t *pData, uint8_t len) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af02      	add	r7, sp, #8
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4613      	mov	r3, r2
 800178e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_GYRO_NSS_LOW;
 8001790:	2200      	movs	r2, #0
 8001792:	2101      	movs	r1, #1
 8001794:	4811      	ldr	r0, [pc, #68]	; (80017dc <gyro_read_bytes+0x5c>)
 8001796:	f009 ff0f 	bl	800b5b8 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80017a4:	f107 020e 	add.w	r2, r7, #14
 80017a8:	f107 010f 	add.w	r1, r7, #15
 80017ac:	2364      	movs	r3, #100	; 0x64
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <gyro_read_bytes+0x60>)
 80017b4:	f00d fd88 	bl	800f2c8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	2364      	movs	r3, #100	; 0x64
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	4807      	ldr	r0, [pc, #28]	; (80017e0 <gyro_read_bytes+0x60>)
 80017c2:	f00d fc70 	bl	800f0a6 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 80017c6:	2201      	movs	r2, #1
 80017c8:	2101      	movs	r1, #1
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <gyro_read_bytes+0x5c>)
 80017cc:	f009 fef4 	bl	800b5b8 <HAL_GPIO_WritePin>
	return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40020400 	.word	0x40020400
 80017e0:	20001308 	.word	0x20001308

080017e4 <accel_write_byte>:
		return 1;
	}
	return 0;
}

void accel_write_byte(uint8_t const reg, uint8_t const data) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 80017f4:	2200      	movs	r2, #0
 80017f6:	2110      	movs	r1, #16
 80017f8:	4811      	ldr	r0, [pc, #68]	; (8001840 <accel_write_byte+0x5c>)
 80017fa:	f009 fedd 	bl	800b5b8 <HAL_GPIO_WritePin>
	tx = reg;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001802:	f107 020e 	add.w	r2, r7, #14
 8001806:	f107 010f 	add.w	r1, r7, #15
 800180a:	2364      	movs	r3, #100	; 0x64
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <accel_write_byte+0x60>)
 8001812:	f00d fd59 	bl	800f2c8 <HAL_SPI_TransmitReceive>
	tx = data;
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800181a:	f107 020e 	add.w	r2, r7, #14
 800181e:	f107 010f 	add.w	r1, r7, #15
 8001822:	2364      	movs	r3, #100	; 0x64
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	4806      	ldr	r0, [pc, #24]	; (8001844 <accel_write_byte+0x60>)
 800182a:	f00d fd4d 	bl	800f2c8 <HAL_SPI_TransmitReceive>
	BMI_ACCEL_NSS_HIGH;
 800182e:	2201      	movs	r2, #1
 8001830:	2110      	movs	r1, #16
 8001832:	4803      	ldr	r0, [pc, #12]	; (8001840 <accel_write_byte+0x5c>)
 8001834:	f009 fec0 	bl	800b5b8 <HAL_GPIO_WritePin>
	return;
 8001838:	bf00      	nop
}
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020000 	.word	0x40020000
 8001844:	20001308 	.word	0x20001308

08001848 <accel_read_byte>:

uint8_t accel_read_byte(uint8_t const reg) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 8001852:	2200      	movs	r2, #0
 8001854:	2110      	movs	r1, #16
 8001856:	4816      	ldr	r0, [pc, #88]	; (80018b0 <accel_read_byte+0x68>)
 8001858:	f009 feae 	bl	800b5b8 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001862:	b2db      	uxtb	r3, r3
 8001864:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001866:	f107 020e 	add.w	r2, r7, #14
 800186a:	f107 010f 	add.w	r1, r7, #15
 800186e:	2364      	movs	r3, #100	; 0x64
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	480f      	ldr	r0, [pc, #60]	; (80018b4 <accel_read_byte+0x6c>)
 8001876:	f00d fd27 	bl	800f2c8 <HAL_SPI_TransmitReceive>
	tx = 0x55;
 800187a:	2355      	movs	r3, #85	; 0x55
 800187c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 800187e:	f107 010e 	add.w	r1, r7, #14
 8001882:	2364      	movs	r3, #100	; 0x64
 8001884:	2201      	movs	r2, #1
 8001886:	480b      	ldr	r0, [pc, #44]	; (80018b4 <accel_read_byte+0x6c>)
 8001888:	f00d fc0d 	bl	800f0a6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 800188c:	f107 010e 	add.w	r1, r7, #14
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	2201      	movs	r2, #1
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <accel_read_byte+0x6c>)
 8001896:	f00d fc06 	bl	800f0a6 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 800189a:	2201      	movs	r2, #1
 800189c:	2110      	movs	r1, #16
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <accel_read_byte+0x68>)
 80018a0:	f009 fe8a 	bl	800b5b8 <HAL_GPIO_WritePin>
	return rx;
 80018a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40020000 	.word	0x40020000
 80018b4:	20001308 	.word	0x20001308

080018b8 <accel_read_bytes>:

uint8_t accel_read_bytes(uint8_t reg, uint8_t pData[], uint8_t len) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af02      	add	r7, sp, #8
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71bb      	strb	r3, [r7, #6]
	BMI_ACCEL_NSS_LOW;
 80018c8:	2200      	movs	r2, #0
 80018ca:	2110      	movs	r1, #16
 80018cc:	4814      	ldr	r0, [pc, #80]	; (8001920 <accel_read_bytes+0x68>)
 80018ce:	f009 fe73 	bl	800b5b8 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg | 0x80;
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018dc:	f107 020e 	add.w	r2, r7, #14
 80018e0:	f107 010f 	add.w	r1, r7, #15
 80018e4:	2364      	movs	r3, #100	; 0x64
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2301      	movs	r3, #1
 80018ea:	480e      	ldr	r0, [pc, #56]	; (8001924 <accel_read_bytes+0x6c>)
 80018ec:	f00d fcec 	bl	800f2c8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 80018f0:	f107 010e 	add.w	r1, r7, #14
 80018f4:	2364      	movs	r3, #100	; 0x64
 80018f6:	2201      	movs	r2, #1
 80018f8:	480a      	ldr	r0, [pc, #40]	; (8001924 <accel_read_bytes+0x6c>)
 80018fa:	f00d fbd4 	bl	800f0a6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	b29a      	uxth	r2, r3
 8001902:	2364      	movs	r3, #100	; 0x64
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <accel_read_bytes+0x6c>)
 8001908:	f00d fbcd 	bl	800f0a6 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 800190c:	2201      	movs	r2, #1
 800190e:	2110      	movs	r1, #16
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <accel_read_bytes+0x68>)
 8001912:	f009 fe51 	bl	800b5b8 <HAL_GPIO_WritePin>
	return 0;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020000 	.word	0x40020000
 8001924:	20001308 	.word	0x20001308

08001928 <gyro_init>:
		return 1;
	}
	return 0;
}

uint8_t gyro_init() {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 800192e:	21b6      	movs	r1, #182	; 0xb6
 8001930:	2014      	movs	r0, #20
 8001932:	f7ff fec5 	bl	80016c0 <gyro_write_byte>
	HAL_Delay(10);
 8001936:	200a      	movs	r0, #10
 8001938:	f007 feac 	bl	8009694 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE);
 800193c:	2100      	movs	r1, #0
 800193e:	2011      	movs	r0, #17
 8001940:	f7ff febe 	bl	80016c0 <gyro_write_byte>
	HAL_Delay(2);
 8001944:	2002      	movs	r0, #2
 8001946:	f007 fea5 	bl	8009694 <HAL_Delay>
	int16_t gyro_id = gyro_read_byte(BMI088_GYRO_CHIP_ID);
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff feea 	bl	8001724 <gyro_read_byte>
 8001950:	4603      	mov	r3, r0
 8001952:	80fb      	strh	r3, [r7, #6]
	if (gyro_id != BMI088_GYRO_CHIP_ID_VALUE) {
 8001954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d001      	beq.n	8001960 <gyro_init+0x38>
		NVIC_SystemReset();
 800195c:	f7ff fe5e 	bl	800161c <__NVIC_SystemReset>
		return 1;
	}
	HAL_Delay(2);
 8001960:	2002      	movs	r0, #2
 8001962:	f007 fe97 	bl	8009694 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_RANGE, BMI088_GYRO_500);
 8001966:	2102      	movs	r1, #2
 8001968:	200f      	movs	r0, #15
 800196a:	f7ff fea9 	bl	80016c0 <gyro_write_byte>
	HAL_Delay(2);
 800196e:	2002      	movs	r0, #2
 8001970:	f007 fe90 	bl	8009694 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_BANDWIDTH,
 8001974:	2182      	movs	r1, #130	; 0x82
 8001976:	2010      	movs	r0, #16
 8001978:	f7ff fea2 	bl	80016c0 <gyro_write_byte>
			(BMI088_GYRO_BANDWIDTH_MUST_Set | BMI088_GYRO_1000_116_HZ));
	HAL_Delay(2);
 800197c:	2002      	movs	r0, #2
 800197e:	f007 fe89 	bl	8009694 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_CONF,
 8001982:	2101      	movs	r1, #1
 8001984:	2016      	movs	r0, #22
 8001986:	f7ff fe9b 	bl	80016c0 <gyro_write_byte>
			(BMI088_GYRO_INT3_GPIO_HIGH | BMI088_GYRO_INT3_GPIO_PP));
	HAL_Delay(2);
 800198a:	2002      	movs	r0, #2
 800198c:	f007 fe82 	bl	8009694 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3);
 8001990:	2101      	movs	r1, #1
 8001992:	2018      	movs	r0, #24
 8001994:	f7ff fe94 	bl	80016c0 <gyro_write_byte>
	HAL_Delay(2);
 8001998:	2002      	movs	r0, #2
 800199a:	f007 fe7b 	bl	8009694 <HAL_Delay>

	return 0;
 800199e:	2300      	movs	r3, #0
	//blah
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <accel_init>:

uint8_t accel_init() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
	uint8_t accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff ff4a 	bl	8001848 <accel_read_byte>
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80019b8:	2002      	movs	r0, #2
 80019ba:	f007 fe6b 	bl	8009694 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff ff42 	bl	8001848 <accel_read_byte>
 80019c4:	4603      	mov	r3, r0
 80019c6:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80019c8:	2002      	movs	r0, #2
 80019ca:	f007 fe63 	bl	8009694 <HAL_Delay>
	accel_write_byte(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 80019ce:	21b6      	movs	r1, #182	; 0xb6
 80019d0:	207e      	movs	r0, #126	; 0x7e
 80019d2:	f7ff ff07 	bl	80017e4 <accel_write_byte>
	HAL_Delay(10);
 80019d6:	200a      	movs	r0, #10
 80019d8:	f007 fe5c 	bl	8009694 <HAL_Delay>

	//Attempt to read...twice because once doesn't cause it to initiate
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff ff33 	bl	8001848 <accel_read_byte>
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80019e6:	2002      	movs	r0, #2
 80019e8:	f007 fe54 	bl	8009694 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff ff2b 	bl	8001848 <accel_read_byte>
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80019f6:	2002      	movs	r0, #2
 80019f8:	f007 fe4c 	bl	8009694 <HAL_Delay>
	if (accel_id != BMI088_ACC_CHIP_ID_VALUE) {
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b1e      	cmp	r3, #30
 8001a00:	d001      	beq.n	8001a06 <accel_init+0x5e>
		//add in an error code for this someday
		return 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e023      	b.n	8001a4e <accel_init+0xa6>
	}

	accel_write_byte(BMI088_ACC_PWR_CTRL, BMI088_ACC_ENABLE_ACC_ON);
 8001a06:	2104      	movs	r1, #4
 8001a08:	207d      	movs	r0, #125	; 0x7d
 8001a0a:	f7ff feeb 	bl	80017e4 <accel_write_byte>
	HAL_Delay(2);
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f007 fe40 	bl	8009694 <HAL_Delay>
	accel_write_byte(BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE);
 8001a14:	2100      	movs	r1, #0
 8001a16:	207c      	movs	r0, #124	; 0x7c
 8001a18:	f7ff fee4 	bl	80017e4 <accel_write_byte>
	HAL_Delay(2);
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f007 fe39 	bl	8009694 <HAL_Delay>

	//set accelerometer to normal from suspend
	accel_write_byte(BMI088_ACC_CONF,
 8001a22:	21a8      	movs	r1, #168	; 0xa8
 8001a24:	2040      	movs	r0, #64	; 0x40
 8001a26:	f7ff fedd 	bl	80017e4 <accel_write_byte>
			(BMI088_ACC_NORMAL | BMI088_ACC_100_HZ | BMI088_ACC_CONF_MUST_Set));
	HAL_Delay(2);
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f007 fe32 	bl	8009694 <HAL_Delay>

	accel_write_byte(BMI088_ACC_RANGE, BMI088_ACC_RANGE_6G);
 8001a30:	2101      	movs	r1, #1
 8001a32:	2041      	movs	r0, #65	; 0x41
 8001a34:	f7ff fed6 	bl	80017e4 <accel_write_byte>
	HAL_Delay(2);
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f007 fe2b 	bl	8009694 <HAL_Delay>

	accel_write_byte(BMI088_INT1_IO_CTRL,
 8001a3e:	2108      	movs	r1, #8
 8001a40:	2053      	movs	r0, #83	; 0x53
 8001a42:	f7ff fecf 	bl	80017e4 <accel_write_byte>
			(BMI088_ACC_INT1_IO_ENABLE | BMI088_ACC_INT1_GPIO_PP | BMI088_ACC_INT1_GPIO_LOW));
	HAL_Delay(2);
 8001a46:	2002      	movs	r0, #2
 8001a48:	f007 fe24 	bl	8009694 <HAL_Delay>
	return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <mag_read_single_reg>:
	}
	float temperature = temp_int11 * 0.125 / temp_buff[1] + 23;
	return temperature;
}

uint8_t mag_read_single_reg(uint8_t reg) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	f107 030f 	add.w	r3, r7, #15
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	211c      	movs	r1, #28
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <mag_read_single_reg+0x34>)
 8001a7e:	f00a f80b 	bl	800ba98 <HAL_I2C_Mem_Read>
	return data;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200011e4 	.word	0x200011e4

08001a90 <mag_write_single_reg>:

void mag_write_single_reg(uint8_t reg, uint8_t data) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af04      	add	r7, sp, #16
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	1dbb      	adds	r3, r7, #6
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	211c      	movs	r1, #28
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <mag_write_single_reg+0x34>)
 8001ab6:	f009 fef5 	bl	800b8a4 <HAL_I2C_Mem_Write>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200011e4 	.word	0x200011e4

08001ac8 <mag_read_multi_reg_dma>:

void mag_read_multi_reg(uint8_t reg, uint16_t len, uint8_t *data) {
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 10);
}

void mag_read_multi_reg_dma(uint8_t reg, uint16_t len, uint8_t *data) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	4603      	mov	r3, r0
 8001ad0:	603a      	str	r2, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c3, IST8310_ADDRESS << 1, reg,
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	211c      	movs	r1, #28
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <mag_read_multi_reg_dma+0x30>)
 8001aea:	f00a f9fb 	bl	800bee4 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, data, len);
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200011e4 	.word	0x200011e4

08001afc <imu_init>:
	imu_data.gy_offset = gyro_y_total / 100;
	imu_data.gz_offset = gyro_z_total / 100;

}

void imu_init() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	//trigger NSS low and high for both to initialise both gyro and accel into SPI mode
	BMI_ACCEL_NSS_LOW;
 8001b00:	2200      	movs	r2, #0
 8001b02:	2110      	movs	r1, #16
 8001b04:	480e      	ldr	r0, [pc, #56]	; (8001b40 <imu_init+0x44>)
 8001b06:	f009 fd57 	bl	800b5b8 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_LOW;
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	480d      	ldr	r0, [pc, #52]	; (8001b44 <imu_init+0x48>)
 8001b10:	f009 fd52 	bl	800b5b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b14:	2064      	movs	r0, #100	; 0x64
 8001b16:	f007 fdbd 	bl	8009694 <HAL_Delay>
	BMI_ACCEL_NSS_HIGH;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	4808      	ldr	r0, [pc, #32]	; (8001b40 <imu_init+0x44>)
 8001b20:	f009 fd4a 	bl	800b5b8 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_HIGH;
 8001b24:	2201      	movs	r2, #1
 8001b26:	2101      	movs	r1, #1
 8001b28:	4806      	ldr	r0, [pc, #24]	; (8001b44 <imu_init+0x48>)
 8001b2a:	f009 fd45 	bl	800b5b8 <HAL_GPIO_WritePin>
	gyro_init();
 8001b2e:	f7ff fefb 	bl	8001928 <gyro_init>
	accel_init();
 8001b32:	f7ff ff39 	bl	80019a8 <accel_init>
	ist8310_init();
 8001b36:	f000 f905 	bl	8001d44 <ist8310_init>
//	gyro_offset_cali();

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400

08001b48 <imu_start_ints>:

void imu_start_ints() {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_CTRL, BMI088_DRDY_ON);
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	2015      	movs	r0, #21
 8001b50:	f7ff fdb6 	bl	80016c0 <gyro_write_byte>
	vTaskDelay(10);
 8001b54:	200a      	movs	r0, #10
 8001b56:	f014 fe33 	bl	80167c0 <vTaskDelay>
	accel_write_byte(BMI088_INT_MAP_DATA, BMI088_ACC_INT1_DRDY_INTERRUPT);
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	2058      	movs	r0, #88	; 0x58
 8001b5e:	f7ff fe41 	bl	80017e4 <accel_write_byte>
	vTaskDelay(10);
 8001b62:	200a      	movs	r0, #10
 8001b64:	f014 fe2c 	bl	80167c0 <vTaskDelay>
	mag_write_single_reg(0x0B, 0x08); //enable drdy pin, pull to low on drdy
 8001b68:	2108      	movs	r1, #8
 8001b6a:	200b      	movs	r0, #11
 8001b6c:	f7ff ff90 	bl	8001a90 <mag_write_single_reg>
	imu_init_status = 1;
 8001b70:	4b02      	ldr	r3, [pc, #8]	; (8001b7c <imu_start_ints+0x34>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000038c 	.word	0x2000038c

08001b80 <accel_get_data>:

void accel_get_data() {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	accel_read_bytes(BMI088_ACCEL_XOUT_L, accel_buff, 6);
 8001b84:	2206      	movs	r2, #6
 8001b86:	4903      	ldr	r1, [pc, #12]	; (8001b94 <accel_get_data+0x14>)
 8001b88:	2012      	movs	r0, #18
 8001b8a:	f7ff fe95 	bl	80018b8 <accel_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		accel_rx = 1;
//	}
	//imu_data.temp = get_bmi_temp();
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000033c 	.word	0x2000033c

08001b98 <accel_process_data>:

void accel_process_data() {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
	int16_t accel_data;
	accel_data = (accel_buff[1] << 8 | accel_buff[0]);
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <accel_process_data+0xa8>)
 8001ba0:	785b      	ldrb	r3, [r3, #1]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <accel_process_data+0xa8>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ax = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001c44 <accel_process_data+0xac>
 8001bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <accel_process_data+0xb0>)
 8001bc6:	edc3 7a04 	vstr	s15, [r3, #16]
	accel_data = (accel_buff[3] << 8 | accel_buff[2]);
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <accel_process_data+0xa8>)
 8001bcc:	78db      	ldrb	r3, [r3, #3]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <accel_process_data+0xa8>)
 8001bd4:	789b      	ldrb	r3, [r3, #2]
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ay = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001c44 <accel_process_data+0xac>
 8001bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <accel_process_data+0xb0>)
 8001bf2:	edc3 7a05 	vstr	s15, [r3, #20]
	accel_data = (accel_buff[5] << 8 | accel_buff[4]);
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <accel_process_data+0xa8>)
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <accel_process_data+0xa8>)
 8001c00:	791b      	ldrb	r3, [r3, #4]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.az = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c14:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c44 <accel_process_data+0xac>
 8001c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <accel_process_data+0xb0>)
 8001c1e:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_data.accel_data.last_accel_update = HAL_GetTick();
 8001c22:	f007 fd2b 	bl	800967c <HAL_GetTick>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <accel_process_data+0xb0>)
 8001c2a:	61d3      	str	r3, [r2, #28]

	//send data into the imu processing task
	accel_data_ready(imu_data.accel_data);
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <accel_process_data+0xb0>)
 8001c2e:	3310      	adds	r3, #16
 8001c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c32:	f004 fabf 	bl	80061b4 <accel_data_ready>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000033c 	.word	0x2000033c
 8001c44:	3aeb3333 	.word	0x3aeb3333
 8001c48:	20000354 	.word	0x20000354

08001c4c <gyro_get_data>:

void gyro_get_data() {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001c50:	2206      	movs	r2, #6
 8001c52:	4903      	ldr	r1, [pc, #12]	; (8001c60 <gyro_get_data+0x14>)
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7ff fd93 	bl	8001780 <gyro_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		gyro_rx = 1;
//	}
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000344 	.word	0x20000344

08001c64 <gyro_process_data>:

void gyro_process_data() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
	int16_t gyro_data;
	gyro_data = (gyro_buff[1] << 8 | gyro_buff[0]);
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <gyro_process_data+0xd4>)
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <gyro_process_data+0xd4>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gx_offset;
 8001c7c:	88fa      	ldrh	r2, [r7, #6]
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <gyro_process_data+0xd8>)
 8001c80:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	80fb      	strh	r3, [r7, #6]
	//convert raw data into radians/s
	imu_data.gyro_data.gx = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c98:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001d40 <gyro_process_data+0xdc>
 8001c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <gyro_process_data+0xd8>)
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
	gyro_data = (gyro_buff[3] << 8 | gyro_buff[2]);
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <gyro_process_data+0xd4>)
 8001ca8:	78db      	ldrb	r3, [r3, #3]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <gyro_process_data+0xd4>)
 8001cb0:	789b      	ldrb	r3, [r3, #2]
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gy_offset;
 8001cb8:	88fa      	ldrh	r2, [r7, #6]
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <gyro_process_data+0xd8>)
 8001cbc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gy = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001d40 <gyro_process_data+0xdc>
 8001cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <gyro_process_data+0xd8>)
 8001cde:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_data = (gyro_buff[5] << 8 | gyro_buff[4]);
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <gyro_process_data+0xd4>)
 8001ce4:	795b      	ldrb	r3, [r3, #5]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <gyro_process_data+0xd4>)
 8001cec:	791b      	ldrb	r3, [r3, #4]
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gz_offset;
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <gyro_process_data+0xd8>)
 8001cf8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gz = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d10:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001d40 <gyro_process_data+0xdc>
 8001d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <gyro_process_data+0xd8>)
 8001d1a:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.gyro_data.last_gyro_update = HAL_GetTick();
 8001d1e:	f007 fcad 	bl	800967c <HAL_GetTick>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <gyro_process_data+0xd8>)
 8001d26:	60d3      	str	r3, [r2, #12]
	//send data into the imu processing task
	gyro_data_ready(imu_data.gyro_data);
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <gyro_process_data+0xd8>)
 8001d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2c:	f004 fa16 	bl	800615c <gyro_data_ready>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000344 	.word	0x20000344
 8001d3c:	20000354 	.word	0x20000354
 8001d40:	398ba058 	.word	0x398ba058

08001d44 <ist8310_init>:

uint8_t ist8310_init() {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2140      	movs	r1, #64	; 0x40
 8001d4e:	481d      	ldr	r0, [pc, #116]	; (8001dc4 <ist8310_init+0x80>)
 8001d50:	f009 fc32 	bl	800b5b8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001d54:	2002      	movs	r0, #2
 8001d56:	f007 fc9d 	bl	8009694 <HAL_Delay>
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2140      	movs	r1, #64	; 0x40
 8001d5e:	4819      	ldr	r0, [pc, #100]	; (8001dc4 <ist8310_init+0x80>)
 8001d60:	f009 fc2a 	bl	800b5b8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001d64:	2002      	movs	r0, #2
 8001d66:	f007 fc95 	bl	8009694 <HAL_Delay>

	uint8_t ist_id = mag_read_single_reg(IST8310_WHO_AM_I);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff fe74 	bl	8001a58 <mag_read_single_reg>
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
	if (ist_id != IST8310_DEVICE_ID_A) {
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d00a      	beq.n	8001d90 <ist8310_init+0x4c>
		//reset mag values
		imu_data.mag_data.mx = 0;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <ist8310_init+0x84>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	841a      	strh	r2, [r3, #32]
		imu_data.mag_data.my = 0;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <ist8310_init+0x84>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	845a      	strh	r2, [r3, #34]	; 0x22
		imu_data.mag_data.mz = 0;
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <ist8310_init+0x84>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	849a      	strh	r2, [r3, #36]	; 0x24
		return 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e015      	b.n	8001dbc <ist8310_init+0x78>
	}
	HAL_Delay(2);
 8001d90:	2002      	movs	r0, #2
 8001d92:	f007 fc7f 	bl	8009694 <HAL_Delay>
	mag_write_single_reg(0x41, 0x09); //average over 2 data
 8001d96:	2109      	movs	r1, #9
 8001d98:	2041      	movs	r0, #65	; 0x41
 8001d9a:	f7ff fe79 	bl	8001a90 <mag_write_single_reg>
	HAL_Delay(2);
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f007 fc78 	bl	8009694 <HAL_Delay>
	mag_write_single_reg(0x42, 0xC0); //set to C0
 8001da4:	21c0      	movs	r1, #192	; 0xc0
 8001da6:	2042      	movs	r0, #66	; 0x42
 8001da8:	f7ff fe72 	bl	8001a90 <mag_write_single_reg>
	HAL_Delay(2);
 8001dac:	2002      	movs	r0, #2
 8001dae:	f007 fc71 	bl	8009694 <HAL_Delay>
	mag_write_single_reg(0x0A, 0x0B); //100Hz
 8001db2:	210b      	movs	r1, #11
 8001db4:	200a      	movs	r0, #10
 8001db6:	f7ff fe6b 	bl	8001a90 <mag_write_single_reg>
	//mag_en_flag = 1;

	return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	20000354 	.word	0x20000354

08001dcc <ist8310_get_data>:

void ist8310_get_data() {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	//fun
	mag_read_multi_reg_dma(IST8310_R_XL, 5, ist_read_buffer);
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <ist8310_get_data+0x1c>)
 8001dd2:	2105      	movs	r1, #5
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f7ff fe77 	bl	8001ac8 <mag_read_multi_reg_dma>
	imu_data.mag_data.last_mag_update = HAL_GetTick();
 8001dda:	f007 fc4f 	bl	800967c <HAL_GetTick>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a02      	ldr	r2, [pc, #8]	; (8001dec <ist8310_get_data+0x20>)
 8001de2:	6293      	str	r3, [r2, #40]	; 0x28

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	2000034c 	.word	0x2000034c
 8001dec:	20000354 	.word	0x20000354

08001df0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1) {
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x58>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d11e      	bne.n	8001e40 <HAL_GPIO_EXTI_Callback+0x50>
		if (hspi1.State == HAL_SPI_STATE_READY) {
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10d      	bne.n	8001e2a <HAL_GPIO_EXTI_Callback+0x3a>
			if (GPIO_Pin == GYRO_INT_Pin) {
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d103      	bne.n	8001e1c <HAL_GPIO_EXTI_Callback+0x2c>
				gyro_get_data();
 8001e14:	f7ff ff1a 	bl	8001c4c <gyro_get_data>
				gyro_process_data();
 8001e18:	f7ff ff24 	bl	8001c64 <gyro_process_data>
				//ist8310_get_data();
			}
			if (GPIO_Pin == ACC_INT_Pin) {
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d103      	bne.n	8001e2a <HAL_GPIO_EXTI_Callback+0x3a>
				accel_get_data();
 8001e22:	f7ff fead 	bl	8001b80 <accel_get_data>
				accel_process_data();
 8001e26:	f7ff feb7 	bl	8001b98 <accel_process_data>
			}
		}
		if (GPIO_Pin == IST_INT_Pin) {
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d107      	bne.n	8001e40 <HAL_GPIO_EXTI_Callback+0x50>
			if (hi2c3.State == HAL_I2C_STATE_READY) {
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_GPIO_EXTI_Callback+0x60>)
 8001e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d101      	bne.n	8001e40 <HAL_GPIO_EXTI_Callback+0x50>
				ist8310_get_data();
 8001e3c:	f7ff ffc6 	bl	8001dcc <ist8310_get_data>
			}
		}
	}
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000038c 	.word	0x2000038c
 8001e4c:	20001308 	.word	0x20001308
 8001e50:	200011e4 	.word	0x200011e4

08001e54 <HAL_I2C_MemRxCpltCallback>:
	spi_rdy = 1;
	spi_timeout = HAL_GetTick();
}
*/

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	int16_t mag_buffer[3];
	mag_buffer[0] = ist_read_buffer[1] << 8 | ist_read_buffer[0];
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e5e:	785b      	ldrb	r3, [r3, #1]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	b21a      	sxth	r2, r3
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	813b      	strh	r3, [r7, #8]
	mag_buffer[1] = ist_read_buffer[3] << 8 | ist_read_buffer[2];
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e72:	78db      	ldrb	r3, [r3, #3]
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e7a:	789b      	ldrb	r3, [r3, #2]
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	817b      	strh	r3, [r7, #10]
	mag_buffer[2] = ist_read_buffer[5] << 8 | ist_read_buffer[4];
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e86:	795b      	ldrb	r3, [r3, #5]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	4313      	orrs	r3, r2
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	81bb      	strh	r3, [r7, #12]

	imu_data.mag_data.mx = mag_buffer[0];
 8001e98:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001e9e:	841a      	strh	r2, [r3, #32]
	imu_data.mag_data.my = mag_buffer[1];
 8001ea0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001ea6:	845a      	strh	r2, [r3, #34]	; 0x22
	imu_data.mag_data.mz = mag_buffer[2];
 8001ea8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001eae:	849a      	strh	r2, [r3, #36]	; 0x24
	mag_data_ready(imu_data.mag_data);
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001eb2:	3320      	adds	r3, #32
 8001eb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eb8:	f004 f9a8 	bl	800620c <mag_data_ready>
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000034c 	.word	0x2000034c
 8001ec8:	20000354 	.word	0x20000354

08001ecc <led_green_off>:


/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
	htim5.Instance->CCR2 = 0;
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <led_green_off+0x18>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20001544 	.word	0x20001544

08001ee8 <led_on>:
	htim5.Instance->CCR3 = 0;
	htim5.Instance->CCR2 = 0;
	htim5.Instance->CCR1 = 0;
}

void led_on(void){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001eec:	2100      	movs	r1, #0
 8001eee:	480c      	ldr	r0, [pc, #48]	; (8001f20 <led_on+0x38>)
 8001ef0:	f00d fe8c 	bl	800fc0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	480a      	ldr	r0, [pc, #40]	; (8001f20 <led_on+0x38>)
 8001ef8:	f00d fe88 	bl	800fc0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001efc:	2108      	movs	r1, #8
 8001efe:	4808      	ldr	r0, [pc, #32]	; (8001f20 <led_on+0x38>)
 8001f00:	f00d fe84 	bl	800fc0c <HAL_TIM_PWM_Start>
	htim5.Instance->CCR3 = 255;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <led_on+0x38>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	22ff      	movs	r2, #255	; 0xff
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim5.Instance->CCR2 = 255;
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <led_on+0x38>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
	htim5.Instance->CCR1 = 255;
 8001f14:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <led_on+0x38>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	22ff      	movs	r2, #255	; 0xff
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20001544 	.word	0x20001544

08001f24 <led_toggle>:
void led_toggle(void){
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	80fb      	strh	r3, [r7, #6]
 8001f40:	4613      	mov	r3, r2
 8001f42:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));
	if (led_state == on_led)
 8001f44:	797b      	ldrb	r3, [r7, #5]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 8090 	bne.w	800206c <status_led+0x138>
	{
	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
		switch(led_no)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	f200 808a 	bhi.w	800206a <status_led+0x136>
 8001f56:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <status_led+0x28>)
 8001f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5c:	08001f81 	.word	0x08001f81
 8001f60:	08001f9b 	.word	0x08001f9b
 8001f64:	08001fb5 	.word	0x08001fb5
 8001f68:	08001fcf 	.word	0x08001fcf
 8001f6c:	08001fe9 	.word	0x08001fe9
 8001f70:	08002003 	.word	0x08002003
 8001f74:	0800201d 	.word	0x0800201d
 8001f78:	08002037 	.word	0x08002037
 8001f7c:	08002051 	.word	0x08002051
		{
		case 1:
			htim5.Instance->CCR3 = 255;//(0x94);
 8001f80:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <status_led+0x144>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	22ff      	movs	r2, #255	; 0xff
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0xe1);
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <status_led+0x144>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;///(0xa0);
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <status_led+0x144>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001f98:	e068      	b.n	800206c <status_led+0x138>
		case 2:
			htim5.Instance->CCR3 = 0;//(0x25);
 8001f9a:	4b37      	ldr	r3, [pc, #220]	; (8002078 <status_led+0x144>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 255;//(0x25);
 8001fa2:	4b35      	ldr	r3, [pc, #212]	; (8002078 <status_led+0x144>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;//(0x64);
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <status_led+0x144>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001fb2:	e05b      	b.n	800206c <status_led+0x138>
		case 3:
			htim5.Instance->CCR3 = 0;//(0x52);
 8001fb4:	4b30      	ldr	r3, [pc, #192]	; (8002078 <status_led+0x144>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x0c);
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <status_led+0x144>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xcf);
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <status_led+0x144>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	22ff      	movs	r2, #255	; 0xff
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001fcc:	e04e      	b.n	800206c <status_led+0x138>
		case 4:
			htim5.Instance->CCR3 = 255;//(0x6e);
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <status_led+0x144>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x7a);
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <status_led+0x144>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xf4);
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <status_led+0x144>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	22ff      	movs	r2, #255	; 0xff
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001fe6:	e041      	b.n	800206c <status_led+0x138>
		case 5:
			htim5.Instance->CCR3 = 0;
 8001fe8:	4b23      	ldr	r3, [pc, #140]	; (8002078 <status_led+0x144>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2200      	movs	r2, #0
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <status_led+0x144>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <status_led+0x144>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002000:	e034      	b.n	800206c <status_led+0x138>
		case 6:
			htim5.Instance->CCR3 = 0;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <status_led+0x144>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <status_led+0x144>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <status_led+0x144>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800201a:	e027      	b.n	800206c <status_led+0x138>
		case 7:
			htim5.Instance->CCR3 = 0;
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <status_led+0x144>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <status_led+0x144>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <status_led+0x144>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002034:	e01a      	b.n	800206c <status_led+0x138>
		case 8:
			htim5.Instance->CCR3 = 0;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <status_led+0x144>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <status_led+0x144>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <status_led+0x144>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800204e:	e00d      	b.n	800206c <status_led+0x138>
		case 9:
			htim5.Instance->CCR3 = 0;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <status_led+0x144>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <status_led+0x144>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <status_led+0x144>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002068:	e000      	b.n	800206c <status_led+0x138>

		default:
			break;
 800206a:	bf00      	nop
		}
	}

}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20001544 	.word	0x20001544

0800207c <micros_tick>:
#include "robot_config.h"

uint32_t gv_curr_micros = 0;
uint32_t gv_overflow_times = 0;

void micros_tick(){
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
	if (gv_curr_micros == 4294967295) //2^32 - 1
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <micros_tick+0x2c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d104      	bne.n	8002094 <micros_tick+0x18>
		gv_overflow_times ++;
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <micros_tick+0x30>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <micros_tick+0x30>)
 8002092:	6013      	str	r3, [r2, #0]
	gv_curr_micros ++;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <micros_tick+0x2c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <micros_tick+0x2c>)
 800209c:	6013      	str	r3, [r2, #0]
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	20000390 	.word	0x20000390
 80020ac:	20000394 	.word	0x20000394

080020b0 <start_micros_timer>:

void start_micros_timer()
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	configASSERT(TIMER_FREQ <= 1000000);
	__HAL_TIM_SET_AUTORELOAD(&htim3, (999999/TIMER_FREQ) + 1);
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <start_micros_timer+0x2c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2264      	movs	r2, #100	; 0x64
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <start_micros_timer+0x2c>)
 80020be:	2264      	movs	r2, #100	; 0x64
 80020c0:	60da      	str	r2, [r3, #12]
	htim3.Instance->DIER |= TIM_DIER_UIE; //enable update interrupt
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <start_micros_timer+0x2c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <start_micros_timer+0x2c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0201 	orr.w	r2, r2, #1
 80020d0:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim3);
 80020d2:	4802      	ldr	r0, [pc, #8]	; (80020dc <start_micros_timer+0x2c>)
 80020d4:	f00d fc1a 	bl	800f90c <HAL_TIM_Base_Start>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200014b4 	.word	0x200014b4

080020e0 <get_microseconds>:



uint32_t get_microseconds()
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
	return gv_curr_micros;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <get_microseconds+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000390 	.word	0x20000390

080020f8 <queue_init>:
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	2300      	movs	r3, #0
 8002102:	723b      	strb	r3, [r7, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d104      	bne.n	8002114 <queue_init+0x1c>
 800210a:	2304      	movs	r3, #4
 800210c:	723b      	strb	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e015      	b.n	8002140 <queue_init+0x48>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	2300      	movs	r3, #0
 8002142:	89ba      	ldrh	r2, [r7, #12]
 8002144:	f362 030f 	bfi	r3, r2, #0, #16
 8002148:	89fa      	ldrh	r2, [r7, #14]
 800214a:	f362 431f 	bfi	r3, r2, #16, #16
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <queue_append_byte>:
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	70fb      	strb	r3, [r7, #3]
 8002166:	2300      	movs	r3, #0
 8002168:	723b      	strb	r3, [r7, #8]
 800216a:	f007 fa87 	bl	800967c <HAL_GetTick>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800217e:	4619      	mov	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	545a      	strb	r2, [r3, r1]
 8002186:	2301      	movs	r3, #1
 8002188:	817b      	strh	r3, [r7, #10]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002190:	2bfe      	cmp	r3, #254	; 0xfe
 8002192:	d805      	bhi.n	80021a0 <queue_append_byte+0x46>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800219a:	3301      	adds	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	e000      	b.n	80021a2 <queue_append_byte+0x48>
 80021a0:	2200      	movs	r2, #0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80021ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b2:	d918      	bls.n	80021e6 <queue_append_byte+0x8c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ba:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80021c4:	2bff      	cmp	r3, #255	; 0xff
 80021c6:	d005      	beq.n	80021d4 <queue_append_byte+0x7a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80021ce:	3301      	adds	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	e000      	b.n	80021d6 <queue_append_byte+0x7c>
 80021d4:	2200      	movs	r2, #0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 80021dc:	2301      	movs	r3, #1
 80021de:	723b      	strb	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e009      	b.n	80021fa <queue_append_byte+0xa0>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80021ec:	3301      	adds	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	2300      	movs	r3, #0
 80021fc:	89ba      	ldrh	r2, [r7, #12]
 80021fe:	f362 030f 	bfi	r3, r2, #0, #16
 8002202:	89fa      	ldrh	r2, [r7, #14]
 8002204:	f362 431f 	bfi	r3, r2, #16, #16
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <queue_pop_element>:
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <queue_pop_element+0x16>
 8002222:	2300      	movs	r3, #0
 8002224:	e024      	b.n	8002270 <queue_pop_element+0x60>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	5c9b      	ldrb	r3, [r3, r2]
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800223a:	3301      	adds	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800224a:	2bff      	cmp	r3, #255	; 0xff
 800224c:	d803      	bhi.n	8002256 <queue_pop_element+0x46>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8002254:	e000      	b.n	8002258 <queue_pop_element+0x48>
 8002256:	2200      	movs	r2, #0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <queue_pop_elements>:
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	4613      	mov	r3, r2
 8002288:	80fb      	strh	r3, [r7, #6]
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	461a      	mov	r2, r3
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f82d 	bl	80022f0 <queue_peek_number>
 8002296:	4603      	mov	r3, r0
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	8b7b      	ldrh	r3, [r7, #26]
 800229c:	4619      	mov	r1, r3
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f87c 	bl	800239c <queue_remove_number>
 80022a4:	4603      	mov	r3, r0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	2300      	movs	r3, #0
 80022ae:	8bba      	ldrh	r2, [r7, #28]
 80022b0:	f362 030f 	bfi	r3, r2, #0, #16
 80022b4:	8bfa      	ldrh	r2, [r7, #30]
 80022b6:	f362 431f 	bfi	r3, r2, #16, #16
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <queue_peek>:
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <queue_peek+0x20>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	5c9b      	ldrb	r3, [r3, r2]
 80022e0:	e000      	b.n	80022e4 <queue_peek+0x22>
 80022e2:	2300      	movs	r3, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <queue_peek_number>:
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
 80022fe:	f007 f9bd 	bl	800967c <HAL_GetTick>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800230c:	2300      	movs	r3, #0
 800230e:	753b      	strb	r3, [r7, #20]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002316:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800231a:	83fb      	strh	r3, [r7, #30]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	429a      	cmp	r2, r3
 8002326:	d905      	bls.n	8002334 <queue_peek_number+0x44>
 8002328:	2303      	movs	r3, #3
 800232a:	753b      	strb	r3, [r7, #20]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002332:	80fb      	strh	r3, [r7, #6]
 8002334:	8bfa      	ldrh	r2, [r7, #30]
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	429a      	cmp	r2, r3
 800233a:	d30b      	bcc.n	8002354 <queue_peek_number+0x64>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	88fa      	ldrh	r2, [r7, #6]
 800234a:	4619      	mov	r1, r3
 800234c:	68b8      	ldr	r0, [r7, #8]
 800234e:	f017 fecb 	bl	801a0e8 <memcpy>
 8002352:	e014      	b.n	800237e <queue_peek_number+0x8e>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	8bfa      	ldrh	r2, [r7, #30]
 8002362:	4619      	mov	r1, r3
 8002364:	68b8      	ldr	r0, [r7, #8]
 8002366:	f017 febf 	bl	801a0e8 <memcpy>
 800236a:	8bfb      	ldrh	r3, [r7, #30]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	18d0      	adds	r0, r2, r3
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	8bfb      	ldrh	r3, [r7, #30]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	461a      	mov	r2, r3
 800237a:	f017 feb5 	bl	801a0e8 <memcpy>
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	82fb      	strh	r3, [r7, #22]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	2300      	movs	r3, #0
 8002388:	8b3a      	ldrh	r2, [r7, #24]
 800238a:	f362 030f 	bfi	r3, r2, #0, #16
 800238e:	8b7a      	ldrh	r2, [r7, #26]
 8002390:	f362 431f 	bfi	r3, r2, #16, #16
 8002394:	4618      	mov	r0, r3
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <queue_remove_number>:
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	2300      	movs	r3, #0
 80023aa:	723b      	strb	r3, [r7, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d905      	bls.n	80023c4 <queue_remove_number+0x28>
 80023b8:	2303      	movs	r3, #3
 80023ba:	723b      	strb	r3, [r7, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	4413      	add	r3, r2
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023ee:	2bff      	cmp	r3, #255	; 0xff
 80023f0:	d906      	bls.n	8002400 <queue_remove_number+0x64>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	e002      	b.n	8002406 <queue_remove_number+0x6a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	817b      	strh	r3, [r7, #10]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	2300      	movs	r3, #0
 8002416:	89ba      	ldrh	r2, [r7, #12]
 8002418:	f362 030f 	bfi	r3, r2, #0, #16
 800241c:	89fa      	ldrh	r2, [r7, #14]
 800241e:	f362 431f 	bfi	r3, r2, #16, #16
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <queue_get_size>:
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <ref_process_data>:
	HEADER,
	DATA
};


ref_processing_status_t ref_process_data(queue_t *uart_queue, ref_msg_t *proc_msg){
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b097      	sub	sp, #92	; 0x5c
 800244c:	af00      	add	r7, sp, #0
 800244e:	6578      	str	r0, [r7, #84]	; 0x54
 8002450:	6539      	str	r1, [r7, #80]	; 0x50
	static uint8_t state = 0;
	static ref_frame_header_t header;
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 8002452:	e064      	b.n	800251e <ref_process_data+0xd6>
		switch(state){
 8002454:	4b37      	ldr	r3, [pc, #220]	; (8002534 <ref_process_data+0xec>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <ref_process_data+0x1a>
 800245c:	2b01      	cmp	r3, #1
 800245e:	d037      	beq.n	80024d0 <ref_process_data+0x88>
 8002460:	e05d      	b.n	800251e <ref_process_data+0xd6>
			case HEADER:
				if (queue_get_size(uart_queue)< REF_HEADER_SIZE+2 ){
 8002462:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002464:	f7ff ffe3 	bl	800242e <queue_get_size>
 8002468:	4603      	mov	r3, r0
 800246a:	2b06      	cmp	r3, #6
 800246c:	d801      	bhi.n	8002472 <ref_process_data+0x2a>
					return INSUFFICIENT_DATA;
 800246e:	2302      	movs	r3, #2
 8002470:	e05c      	b.n	800252c <ref_process_data+0xe4>
				}
				if (queue_peek(uart_queue) != 0xA5){
 8002472:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002474:	f7ff ff25 	bl	80022c2 <queue_peek>
 8002478:	4603      	mov	r3, r0
 800247a:	2ba5      	cmp	r3, #165	; 0xa5
 800247c:	d003      	beq.n	8002486 <ref_process_data+0x3e>
					queue_pop_element(uart_queue);
 800247e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002480:	f7ff fec6 	bl	8002210 <queue_pop_element>
 8002484:	e04b      	b.n	800251e <ref_process_data+0xd6>
				}else {
					if (queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 8002486:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002488:	f7ff ffd1 	bl	800242e <queue_get_size>
 800248c:	4603      	mov	r3, r0
 800248e:	2b07      	cmp	r3, #7
 8002490:	d91c      	bls.n	80024cc <ref_process_data+0x84>
						header = ref_get_header(uart_queue);
 8002492:	4c29      	ldr	r4, [pc, #164]	; (8002538 <ref_process_data+0xf0>)
 8002494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002498:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f84e 	bl	800253c <ref_get_header>
 80024a0:	4622      	mov	r2, r4
 80024a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	6010      	str	r0, [r2, #0]
 80024aa:	8899      	ldrh	r1, [r3, #4]
 80024ac:	799b      	ldrb	r3, [r3, #6]
 80024ae:	8091      	strh	r1, [r2, #4]
 80024b0:	7193      	strb	r3, [r2, #6]
						if (header.cmd_id == 0xFFFF){
 80024b2:	4b21      	ldr	r3, [pc, #132]	; (8002538 <ref_process_data+0xf0>)
 80024b4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024be:	4293      	cmp	r3, r2
 80024c0:	d100      	bne.n	80024c4 <ref_process_data+0x7c>
							//invalid data, continue checking
							break;
 80024c2:	e02c      	b.n	800251e <ref_process_data+0xd6>
						}
						//header is valid, remove header bytes and start finding data
						state = DATA;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <ref_process_data+0xec>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	e028      	b.n	800251e <ref_process_data+0xd6>
					} else {
						return INSUFFICIENT_DATA;
 80024cc:	2302      	movs	r3, #2
 80024ce:	e02d      	b.n	800252c <ref_process_data+0xe4>
					}
				}
				break;
			case DATA:
				//wait until enough data to fill data
				if (queue_get_size(uart_queue) > header.data_length+4+REF_HEADER_SIZE){
 80024d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80024d2:	f7ff ffac 	bl	800242e <queue_get_size>
 80024d6:	4603      	mov	r3, r0
 80024d8:	461a      	mov	r2, r3
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <ref_process_data+0xf0>)
 80024dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3309      	adds	r3, #9
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dd18      	ble.n	800251a <ref_process_data+0xd2>
					state = HEADER;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <ref_process_data+0xec>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
					*proc_msg = ref_get_msg(header,uart_queue);
 80024ee:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80024f0:	4638      	mov	r0, r7
 80024f2:	4a11      	ldr	r2, [pc, #68]	; (8002538 <ref_process_data+0xf0>)
 80024f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f6:	ca06      	ldmia	r2, {r1, r2}
 80024f8:	f000 f898 	bl	800262c <ref_get_msg>
 80024fc:	4620      	mov	r0, r4
 80024fe:	463b      	mov	r3, r7
 8002500:	2242      	movs	r2, #66	; 0x42
 8002502:	4619      	mov	r1, r3
 8002504:	f017 fdf0 	bl	801a0e8 <memcpy>
					if (proc_msg->cmd_id!= 0xFFFF){
 8002508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <ref_process_data+0xd6>
						return PROCESS_SUCCESS;
 8002516:	2300      	movs	r3, #0
 8002518:	e008      	b.n	800252c <ref_process_data+0xe4>
					} else {
						break;
					}
				} else{
					return INSUFFICIENT_DATA;
 800251a:	2302      	movs	r3, #2
 800251c:	e006      	b.n	800252c <ref_process_data+0xe4>
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 800251e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002520:	f7ff ff85 	bl	800242e <queue_get_size>
 8002524:	4603      	mov	r3, r0
 8002526:	2b05      	cmp	r3, #5
 8002528:	d894      	bhi.n	8002454 <ref_process_data+0xc>
				}
				break;
			}
	}
	return INSUFFICIENT_DATA;
 800252a:	2302      	movs	r3, #2
}
 800252c:	4618      	mov	r0, r3
 800252e:	375c      	adds	r7, #92	; 0x5c
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	20000398 	.word	0x20000398
 8002538:	2000039c 	.word	0x2000039c

0800253c <ref_get_header>:

ref_frame_header_t ref_get_header(queue_t *data_buffer){
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
	ref_frame_header_t ret_header;
	//+2 for cmd ID
	uint8_t temp_data[REF_HEADER_SIZE+2];
	queue_peek_number(data_buffer, temp_data, 7);
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	2207      	movs	r2, #7
 800254c:	4619      	mov	r1, r3
 800254e:	6838      	ldr	r0, [r7, #0]
 8002550:	f7ff fece 	bl	80022f0 <queue_peek_number>
	ret_header.start_frame = temp_data[0];
 8002554:	7b3b      	ldrb	r3, [r7, #12]
 8002556:	753b      	strb	r3, [r7, #20]
	if (ret_header.start_frame!= 0xA5){
 8002558:	7d3b      	ldrb	r3, [r7, #20]
 800255a:	2ba5      	cmp	r3, #165	; 0xa5
 800255c:	d013      	beq.n	8002586 <ref_get_header+0x4a>
		queue_pop_element(data_buffer);
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	f7ff fe56 	bl	8002210 <queue_pop_element>
		ret_header.cmd_id=0xFFFF;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	767b      	strb	r3, [r7, #25]
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	76bb      	strb	r3, [r7, #26]
		return ret_header;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	461a      	mov	r2, r3
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	6010      	str	r0, [r2, #0]
 800257c:	8899      	ldrh	r1, [r3, #4]
 800257e:	799b      	ldrb	r3, [r3, #6]
 8002580:	8091      	strh	r1, [r2, #4]
 8002582:	7193      	strb	r3, [r2, #6]
 8002584:	e04d      	b.n	8002622 <ref_get_header+0xe6>
	}

	ret_header.data_length = ((uint16_t) temp_data[2] << 8 | temp_data[1]);
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	b21a      	sxth	r2, r3
 800258c:	7b7b      	ldrb	r3, [r7, #13]
 800258e:	b21b      	sxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	b21b      	sxth	r3, r3
 8002594:	b29b      	uxth	r3, r3
 8002596:	f8a7 3015 	strh.w	r3, [r7, #21]
	ret_header.seq = temp_data[3];
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	75fb      	strb	r3, [r7, #23]
	ret_header.crc = temp_data[4];
 800259e:	7c3b      	ldrb	r3, [r7, #16]
 80025a0:	763b      	strb	r3, [r7, #24]
	int crc_check = verify_CRC8_check_sum(temp_data, 5);
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	2105      	movs	r1, #5
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fd43 	bl	8001034 <verify_CRC8_check_sum>
 80025ae:	4603      	mov	r3, r0
 80025b0:	61fb      	str	r3, [r7, #28]
	ret_header.cmd_id = (temp_data[6]) << 8 | temp_data[5];
 80025b2:	7cbb      	ldrb	r3, [r7, #18]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	7c7b      	ldrb	r3, [r7, #17]
 80025ba:	b21b      	sxth	r3, r3
 80025bc:	4313      	orrs	r3, r2
 80025be:	b21b      	sxth	r3, r3
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f8a7 3019 	strh.w	r3, [r7, #25]
	if (!crc_check || ret_header.data_length > TQUEUE_SIZE || ret_header.cmd_id > 0x305) {
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00c      	beq.n	80025e6 <ref_get_header+0xaa>
 80025cc:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d6:	d806      	bhi.n	80025e6 <ref_get_header+0xaa>
 80025d8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f240 3205 	movw	r2, #773	; 0x305
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d913      	bls.n	800260e <ref_get_header+0xd2>
		ret_header.cmd_id=0xFFFF;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	767b      	strb	r3, [r7, #25]
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	76bb      	strb	r3, [r7, #26]
		queue_pop_element(data_buffer);
 80025f2:	6838      	ldr	r0, [r7, #0]
 80025f4:	f7ff fe0c 	bl	8002210 <queue_pop_element>
		return ret_header;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	6010      	str	r0, [r2, #0]
 8002604:	8899      	ldrh	r1, [r3, #4]
 8002606:	799b      	ldrb	r3, [r3, #6]
 8002608:	8091      	strh	r1, [r2, #4]
 800260a:	7193      	strb	r3, [r2, #6]
 800260c:	e009      	b.n	8002622 <ref_get_header+0xe6>
	}
//	queue_remove_number(data_buffer, REF_HEADER_SIZE);
	return ret_header;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	461a      	mov	r2, r3
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	6010      	str	r0, [r2, #0]
 800261a:	8899      	ldrh	r1, [r3, #4]
 800261c:	799b      	ldrb	r3, [r3, #6]
 800261e:	8091      	strh	r1, [r2, #4]
 8002620:	7193      	strb	r3, [r2, #6]
}
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <ref_get_msg>:



ref_msg_t ref_get_msg(ref_frame_header_t header,queue_t *uart_queue) {
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b0d8      	sub	sp, #352	; 0x160
 8002630:	af00      	add	r7, sp, #0
 8002632:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 8002636:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 800263a:	6020      	str	r0, [r4, #0]
 800263c:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8002640:	f5a0 70ae 	sub.w	r0, r0, #348	; 0x15c
 8002644:	e880 0006 	stmia.w	r0, {r1, r2}
 8002648:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800264c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002650:	6013      	str	r3, [r2, #0]
	uint8_t temp_buffer[TQUEUE_SIZE];
	ref_msg_t buffer_msg;
	//+ 2 for CRC16
	queue_pop_elements(uart_queue, temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002652:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002656:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800265a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800265e:	b29b      	uxth	r3, r3
 8002660:	3309      	adds	r3, #9
 8002662:	b29a      	uxth	r2, r3
 8002664:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002668:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800266c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	f7ff fe03 	bl	800227c <queue_pop_elements>

	uint32_t crc_test = verify_CRC16_check_sum(temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002676:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800267a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800267e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002682:	b29b      	uxth	r3, r3
 8002684:	3309      	adds	r3, #9
 8002686:	461a      	mov	r2, r3
 8002688:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fd24 	bl	80010dc <verify_CRC16_check_sum>
 8002694:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	if (!crc_test){
 8002698:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d116      	bne.n	80026ce <ref_get_msg+0xa2>
		buffer_msg.cmd_id = 0xFFFF;
 80026a0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ac:	801a      	strh	r2, [r3, #0]
		return buffer_msg;
 80026ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	2342      	movs	r3, #66	; 0x42
 80026c6:	461a      	mov	r2, r3
 80026c8:	f017 fd0e 	bl	801a0e8 <memcpy>
 80026cc:	e19f      	b.n	8002a0e <ref_get_msg+0x3e2>
	}
	//shift 2 bytes to the right to get pointer to the actual start of data
	uint8_t* data_buffer = temp_buffer+2+REF_HEADER_SIZE;
 80026ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026d2:	3307      	adds	r3, #7
 80026d4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	buffer_msg.cmd_id = header.cmd_id;
 80026d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026dc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80026e0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026ee:	801a      	strh	r2, [r3, #0]
	switch (header.cmd_id) {
 80026f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026f4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80026f8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f240 3202 	movw	r2, #770	; 0x302
 8002702:	4293      	cmp	r3, r2
 8002704:	f000 815c 	beq.w	80029c0 <ref_get_msg+0x394>
 8002708:	f240 3202 	movw	r2, #770	; 0x302
 800270c:	4293      	cmp	r3, r2
 800270e:	f300 8167 	bgt.w	80029e0 <ref_get_msg+0x3b4>
 8002712:	f240 3201 	movw	r2, #769	; 0x301
 8002716:	4293      	cmp	r3, r2
 8002718:	f000 8146 	beq.w	80029a8 <ref_get_msg+0x37c>
 800271c:	f240 3201 	movw	r2, #769	; 0x301
 8002720:	4293      	cmp	r3, r2
 8002722:	f300 815d 	bgt.w	80029e0 <ref_get_msg+0x3b4>
 8002726:	f240 220a 	movw	r2, #522	; 0x20a
 800272a:	4293      	cmp	r3, r2
 800272c:	f300 8158 	bgt.w	80029e0 <ref_get_msg+0x3b4>
 8002730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002734:	dc04      	bgt.n	8002740 <ref_get_msg+0x114>
 8002736:	2b04      	cmp	r3, #4
 8002738:	dc40      	bgt.n	80027bc <ref_get_msg+0x190>
 800273a:	2b00      	cmp	r3, #0
 800273c:	dc2e      	bgt.n	800279c <ref_get_msg+0x170>
 800273e:	e14f      	b.n	80029e0 <ref_get_msg+0x3b4>
 8002740:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8002744:	2b09      	cmp	r3, #9
 8002746:	f200 814b 	bhi.w	80029e0 <ref_get_msg+0x3b4>
 800274a:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <ref_get_msg+0x124>)
 800274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002750:	080028a5 	.word	0x080028a5
 8002754:	080028d5 	.word	0x080028d5
 8002758:	080028f5 	.word	0x080028f5
 800275c:	08002915 	.word	0x08002915
 8002760:	08002927 	.word	0x08002927
 8002764:	08002939 	.word	0x08002939
 8002768:	0800294b 	.word	0x0800294b
 800276c:	08002967 	.word	0x08002967
 8002770:	0800297f 	.word	0x0800297f
 8002774:	08002995 	.word	0x08002995
 8002778:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800277c:	2b04      	cmp	r3, #4
 800277e:	f200 812f 	bhi.w	80029e0 <ref_get_msg+0x3b4>
 8002782:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <ref_get_msg+0x15c>)
 8002784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002788:	0800283b 	.word	0x0800283b
 800278c:	08002851 	.word	0x08002851
 8002790:	08002867 	.word	0x08002867
 8002794:	0800287f 	.word	0x0800287f
 8002798:	08002893 	.word	0x08002893
 800279c:	3b01      	subs	r3, #1
 800279e:	2b03      	cmp	r3, #3
 80027a0:	f200 811e 	bhi.w	80029e0 <ref_get_msg+0x3b4>
 80027a4:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <ref_get_msg+0x180>)
 80027a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027aa:	bf00      	nop
 80027ac:	080027cd 	.word	0x080027cd
 80027b0:	080027e5 	.word	0x080027e5
 80027b4:	080027f7 	.word	0x080027f7
 80027b8:	08002823 	.word	0x08002823
 80027bc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80027c0:	f280 810e 	bge.w	80029e0 <ref_get_msg+0x3b4>
 80027c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c8:	dcd6      	bgt.n	8002778 <ref_get_msg+0x14c>
 80027ca:	e109      	b.n	80029e0 <ref_get_msg+0x3b4>
	case REF_GAME_STATE_CMD_ID:
		memcpy(&buffer_msg.data.game_state, 	(data_buffer), sizeof(ref_game_state_t));
 80027cc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80027d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027d4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80027d8:	3302      	adds	r3, #2
 80027da:	8811      	ldrh	r1, [r2, #0]
 80027dc:	7892      	ldrb	r2, [r2, #2]
 80027de:	8019      	strh	r1, [r3, #0]
 80027e0:	709a      	strb	r2, [r3, #2]
		break;
 80027e2:	e105      	b.n	80029f0 <ref_get_msg+0x3c4>
 80027e4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80027e8:	781a      	ldrb	r2, [r3, #0]
	case REF_GAME_RESULT_ID:
		memcpy(&buffer_msg.data.game_result, 	(data_buffer), sizeof(ref_game_result_t));
 80027ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80027ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027f2:	709a      	strb	r2, [r3, #2]
		break;
 80027f4:	e0fc      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_ROBOT_HP_CMD_ID:
		memcpy(&buffer_msg.data.robot_hp, 		(data_buffer), sizeof(ref_game_robot_HP_t));
 80027f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80027fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027fe:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002802:	3302      	adds	r3, #2
 8002804:	6814      	ldr	r4, [r2, #0]
 8002806:	6850      	ldr	r0, [r2, #4]
 8002808:	6891      	ldr	r1, [r2, #8]
 800280a:	68d5      	ldr	r5, [r2, #12]
 800280c:	601c      	str	r4, [r3, #0]
 800280e:	6058      	str	r0, [r3, #4]
 8002810:	6099      	str	r1, [r3, #8]
 8002812:	60dd      	str	r5, [r3, #12]
 8002814:	6914      	ldr	r4, [r2, #16]
 8002816:	6950      	ldr	r0, [r2, #20]
 8002818:	6991      	ldr	r1, [r2, #24]
 800281a:	611c      	str	r4, [r3, #16]
 800281c:	6158      	str	r0, [r3, #20]
 800281e:	6199      	str	r1, [r3, #24]
		break;
 8002820:	e0e6      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_DART_LAUNCH_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_status, 	(data_buffer), sizeof(ref_dart_status_t));
 8002822:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002826:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800282a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800282e:	3302      	adds	r3, #2
 8002830:	8811      	ldrh	r1, [r2, #0]
 8002832:	7892      	ldrb	r2, [r2, #2]
 8002834:	8019      	strh	r1, [r3, #0]
 8002836:	709a      	strb	r2, [r3, #2]
		break;
 8002838:	e0da      	b.n	80029f0 <ref_get_msg+0x3c4>
 800283a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
	case REF_GAME_EVENT_CMD_ID:
		memcpy(&buffer_msg.data.game_event, 	(data_buffer), sizeof(ref_game_event_data_t));
 8002842:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002846:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800284a:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 800284e:	e0cf      	b.n	80029f0 <ref_get_msg+0x3c4>
 8002850:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
	case REF_SUPPLIER_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_state, (data_buffer),sizeof(ref_supply_projectile_data_t));
 8002858:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800285c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002860:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002864:	e0c4      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_SUPPLIER_BOOKING_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_queue, (data_buffer),sizeof(ref_supply_projectile_booking_t));
 8002866:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800286a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800286e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002872:	3302      	adds	r3, #2
 8002874:	8811      	ldrh	r1, [r2, #0]
 8002876:	7892      	ldrb	r2, [r2, #2]
 8002878:	8019      	strh	r1, [r3, #0]
 800287a:	709a      	strb	r2, [r3, #2]
		break;
 800287c:	e0b8      	b.n	80029f0 <ref_get_msg+0x3c4>
 800287e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29a      	uxth	r2, r3
	case REF_FOUL_CMD_ID:
		memcpy(&buffer_msg.data.referee_warning,(data_buffer), sizeof(ref_referee_warning_t));
 8002886:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800288a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800288e:	805a      	strh	r2, [r3, #2]
		break;
 8002890:	e0ae      	b.n	80029f0 <ref_get_msg+0x3c4>
 8002892:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002896:	781a      	ldrb	r2, [r3, #0]
	case REF_DART_COOLDOWN_CMD_ID:
		memcpy(&buffer_msg.data.dart_cooldown, 	(data_buffer), sizeof(ref_dart_cooldown_t));
 8002898:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800289c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028a0:	709a      	strb	r2, [r3, #2]
		break;
 80028a2:	e0a5      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_ROBOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_state, 	(data_buffer), sizeof(ref_game_robot_data_t));
 80028a4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028ac:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80028b0:	3302      	adds	r3, #2
 80028b2:	6810      	ldr	r0, [r2, #0]
 80028b4:	6851      	ldr	r1, [r2, #4]
 80028b6:	6895      	ldr	r5, [r2, #8]
 80028b8:	68d4      	ldr	r4, [r2, #12]
 80028ba:	6018      	str	r0, [r3, #0]
 80028bc:	6059      	str	r1, [r3, #4]
 80028be:	609d      	str	r5, [r3, #8]
 80028c0:	60dc      	str	r4, [r3, #12]
 80028c2:	6910      	ldr	r0, [r2, #16]
 80028c4:	6951      	ldr	r1, [r2, #20]
 80028c6:	6118      	str	r0, [r3, #16]
 80028c8:	6159      	str	r1, [r3, #20]
 80028ca:	8b11      	ldrh	r1, [r2, #24]
 80028cc:	7e92      	ldrb	r2, [r2, #26]
 80028ce:	8319      	strh	r1, [r3, #24]
 80028d0:	769a      	strb	r2, [r3, #26]
		break;
 80028d2:	e08d      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_ROBOT_POWER_DATA_CMD_ID:
		memcpy(&buffer_msg.data.power_data, 	(data_buffer), sizeof(ref_robot_power_data_t));
 80028d4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028dc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80028e0:	3302      	adds	r3, #2
 80028e2:	6814      	ldr	r4, [r2, #0]
 80028e4:	6850      	ldr	r0, [r2, #4]
 80028e6:	6891      	ldr	r1, [r2, #8]
 80028e8:	601c      	str	r4, [r3, #0]
 80028ea:	6058      	str	r0, [r3, #4]
 80028ec:	6099      	str	r1, [r3, #8]
 80028ee:	8992      	ldrh	r2, [r2, #12]
 80028f0:	819a      	strh	r2, [r3, #12]
		break;
 80028f2:	e07d      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_ROBOT_POS_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_pos, 		(data_buffer), sizeof(ref_game_robot_pos_t));
 80028f4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028fc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002900:	3302      	adds	r3, #2
 8002902:	6814      	ldr	r4, [r2, #0]
 8002904:	6850      	ldr	r0, [r2, #4]
 8002906:	6891      	ldr	r1, [r2, #8]
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	601c      	str	r4, [r3, #0]
 800290c:	6058      	str	r0, [r3, #4]
 800290e:	6099      	str	r1, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
		break;
 8002912:	e06d      	b.n	80029f0 <ref_get_msg+0x3c4>
 8002914:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002918:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_buff, 	(data_buffer), sizeof(ref_buff_data_t));
 800291a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800291e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002922:	709a      	strb	r2, [r3, #2]
		break;
 8002924:	e064      	b.n	80029f0 <ref_get_msg+0x3c4>
 8002926:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800292a:	781a      	ldrb	r2, [r3, #0]
	case REF_AERIAL_ENERGY_DATA_CMD_ID:
		memcpy(&buffer_msg.data.aerial_energy, 	(data_buffer), sizeof(ref_aerial_robot_energy_t));
 800292c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002930:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002934:	709a      	strb	r2, [r3, #2]
		break;
 8002936:	e05b      	b.n	80029f0 <ref_get_msg+0x3c4>
 8002938:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800293c:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_DMG_DATA_CMD_ID:
		memcpy(&buffer_msg.data.damage_data, 	(data_buffer), sizeof(ref_robot_dmg_t));
 800293e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002942:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002946:	709a      	strb	r2, [r3, #2]
		break;
 8002948:	e052      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_ROBOT_SHOOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.shooting_data, 	(data_buffer), sizeof(ref_shoot_data_t));
 800294a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800294e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002952:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002956:	3302      	adds	r3, #2
 8002958:	6811      	ldr	r1, [r2, #0]
 800295a:	6019      	str	r1, [r3, #0]
 800295c:	8891      	ldrh	r1, [r2, #4]
 800295e:	7992      	ldrb	r2, [r2, #6]
 8002960:	8099      	strh	r1, [r3, #4]
 8002962:	719a      	strb	r2, [r3, #6]
		break;
 8002964:	e044      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_ROBOT_MAGAZINE_DATA_CMD_ID:
		memcpy(&buffer_msg.data.magazine_data, 	(data_buffer), sizeof(ref_magazine_data_t));
 8002966:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800296a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800296e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002972:	3302      	adds	r3, #2
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	6019      	str	r1, [r3, #0]
 8002978:	8892      	ldrh	r2, [r2, #4]
 800297a:	809a      	strh	r2, [r3, #4]
		break;
 800297c:	e038      	b.n	80029f0 <ref_get_msg+0x3c4>
 800297e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
	case REF_ROBOT_RFID_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.rfid_buff, 		(data_buffer), sizeof(ref_rfid_status_t));
 8002986:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800298a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800298e:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002992:	e02d      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_DART_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_cmd, 		(data_buffer), sizeof(ref_dart_status_t));
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	3302      	adds	r3, #2
 800299a:	2203      	movs	r2, #3
 800299c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80029a0:	4618      	mov	r0, r3
 80029a2:	f017 fba1 	bl	801a0e8 <memcpy>
		break;
 80029a6:	e023      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_ROBOT_COMMS_CMD_ID:
		memcpy(&buffer_msg.data.robot_comms, 	(data_buffer), sizeof(ref_inter_robot_data_t));
 80029a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029ac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029b0:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80029b4:	3302      	adds	r3, #2
 80029b6:	6811      	ldr	r1, [r2, #0]
 80029b8:	6019      	str	r1, [r3, #0]
 80029ba:	8892      	ldrh	r2, [r2, #4]
 80029bc:	809a      	strh	r2, [r3, #4]
		break;
 80029be:	e017      	b.n	80029f0 <ref_get_msg+0x3c4>
	case REF_CUSTOM_DATA_CMD_ID:
		memcpy(&buffer_msg.data.custom_data, 	(data_buffer), sizeof(ref_custom_data_t));
 80029c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029c8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80029cc:	3302      	adds	r3, #2
 80029ce:	6814      	ldr	r4, [r2, #0]
 80029d0:	6850      	ldr	r0, [r2, #4]
 80029d2:	6891      	ldr	r1, [r2, #8]
 80029d4:	601c      	str	r4, [r3, #0]
 80029d6:	6058      	str	r0, [r3, #4]
 80029d8:	6099      	str	r1, [r3, #8]
 80029da:	7b12      	ldrb	r2, [r2, #12]
 80029dc:	731a      	strb	r2, [r3, #12]
		break;
 80029de:	e007      	b.n	80029f0 <ref_get_msg+0x3c4>
	default:
		buffer_msg.cmd_id = 0xFFFF;
 80029e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ec:	801a      	strh	r2, [r3, #0]
		break;
 80029ee:	bf00      	nop
	}
	//remove cmd id + data
	return buffer_msg;
 80029f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029f4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	2342      	movs	r3, #66	; 0x42
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f017 fb6d 	bl	801a0e8 <memcpy>
}
 8002a0e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdb0      	pop	{r4, r5, r7, pc}

08002a20 <ref_usart_start>:
HAL_StatusTypeDef ref_usart_send(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size){
	return HAL_UART_Transmit_DMA(huart, pData, Size);
}

HAL_StatusTypeDef ref_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	ref_UART_queue = uart_queue;
 8002a30:	4a3a      	ldr	r2, [pc, #232]	; (8002b1c <ref_usart_start+0xfc>)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6013      	str	r3, [r2, #0]
	queue_init(ref_UART_queue);
 8002a36:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <ref_usart_start+0xfc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fb5c 	bl	80020f8 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d162      	bne.n	8002b12 <ref_usart_start+0xf2>
		if ((pData == NULL) || (Size == 0U))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <ref_usart_start+0x38>
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <ref_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e05b      	b.n	8002b14 <ref_usart_start+0xf4>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <ref_usart_start+0x4a>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e054      	b.n	8002b14 <ref_usart_start+0xf4>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	88fa      	ldrh	r2, [r7, #6]
 8002a7c:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2222      	movs	r2, #34	; 0x22
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback 	= ref_full_cplt_isr;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <ref_usart_start+0x100>)
 8002a92:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = ref_half_cplt_isr;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <ref_usart_start+0x104>)
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002aa4:	f107 0308 	add.w	r3, r7, #8
 8002aa8:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	f008 f880 	bl	800abc0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aec:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0c:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e000      	b.n	8002b14 <ref_usart_start+0xf4>
	} else {
		return HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
	}
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200003a4 	.word	0x200003a4
 8002b20:	08002b51 	.word	0x08002b51
 8002b24:	08002b29 	.word	0x08002b29

08002b28 <ref_half_cplt_isr>:


void ref_half_cplt_isr(DMA_HandleTypeDef *hdma){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <ref_half_cplt_isr+0x24>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f7ff fb0b 	bl	800215a <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200003a4 	.word	0x200003a4

08002b50 <ref_full_cplt_isr>:

void ref_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M0AR+1));
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <ref_full_cplt_isr+0x28>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	3301      	adds	r3, #1
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f7ff faf6 	bl	800215a <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M1AR+1));
//	}
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200003a4 	.word	0x200003a4

08002b7c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b82:	463b      	mov	r3, r7
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002b90:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <MX_ADC3_Init+0x9c>)
 8002b92:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b94:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b9a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002bae:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002bbe:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <MX_ADC3_Init+0xa0>)
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002bdc:	480d      	ldr	r0, [pc, #52]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002bde:	f006 fd7d 	bl	80096dc <HAL_ADC_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002be8:	f000 fe03 	bl	80037f2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002bec:	2308      	movs	r3, #8
 8002bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4805      	ldr	r0, [pc, #20]	; (8002c14 <MX_ADC3_Init+0x98>)
 8002bfe:	f006 fdb1 	bl	8009764 <HAL_ADC_ConfigChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002c08:	f000 fdf3 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200003a8 	.word	0x200003a8
 8002c18:	40012200 	.word	0x40012200
 8002c1c:	0f000001 	.word	0x0f000001

08002c20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <HAL_ADC_MspInit+0x7c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d128      	bne.n	8002c94 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_ADC_MspInit+0x80>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <HAL_ADC_MspInit+0x80>)
 8002c4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_ADC_MspInit+0x80>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_ADC_MspInit+0x80>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <HAL_ADC_MspInit+0x80>)
 8002c68:	f043 0320 	orr.w	r3, r3, #32
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_ADC_MspInit+0x80>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c80:	2303      	movs	r3, #3
 8002c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <HAL_ADC_MspInit+0x84>)
 8002c90:	f008 faf6 	bl	800b280 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002c94:	bf00      	nop
 8002c96:	3728      	adds	r7, #40	; 0x28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40012200 	.word	0x40012200
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40021400 	.word	0x40021400

08002ca8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <MX_CAN1_Init+0x68>)
 8002cb0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002cd2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002cec:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002cf8:	4804      	ldr	r0, [pc, #16]	; (8002d0c <MX_CAN1_Init+0x64>)
 8002cfa:	f006 ff51 	bl	8009ba0 <HAL_CAN_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002d04:	f000 fd75 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200003f0 	.word	0x200003f0
 8002d10:	40006400 	.word	0x40006400

08002d14 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d1a:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <MX_CAN2_Init+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d20:	2203      	movs	r2, #3
 8002d22:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d36:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d3a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002d3e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002d64:	4804      	ldr	r0, [pc, #16]	; (8002d78 <MX_CAN2_Init+0x64>)
 8002d66:	f006 ff1b 	bl	8009ba0 <HAL_CAN_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002d70:	f000 fd3f 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000418 	.word	0x20000418
 8002d7c:	40006800 	.word	0x40006800

08002d80 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 031c 	add.w	r3, r7, #28
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_CAN_MspInit+0x168>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d145      	bne.n	8002e2e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002da2:	4b52      	ldr	r3, [pc, #328]	; (8002eec <HAL_CAN_MspInit+0x16c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	4a50      	ldr	r2, [pc, #320]	; (8002eec <HAL_CAN_MspInit+0x16c>)
 8002daa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002dac:	4b4f      	ldr	r3, [pc, #316]	; (8002eec <HAL_CAN_MspInit+0x16c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10d      	bne.n	8002dd0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	4a4c      	ldr	r2, [pc, #304]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002dda:	f043 0308 	orr.w	r3, r3, #8
 8002dde:	6313      	str	r3, [r2, #48]	; 0x30
 8002de0:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dec:	2303      	movs	r3, #3
 8002dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002dfc:	2309      	movs	r3, #9
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	4619      	mov	r1, r3
 8002e06:	483b      	ldr	r0, [pc, #236]	; (8002ef4 <HAL_CAN_MspInit+0x174>)
 8002e08:	f008 fa3a 	bl	800b280 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2105      	movs	r1, #5
 8002e10:	2014      	movs	r0, #20
 8002e12:	f007 fdfd 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002e16:	2014      	movs	r0, #20
 8002e18:	f007 fe16 	bl	800aa48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2105      	movs	r1, #5
 8002e20:	2015      	movs	r0, #21
 8002e22:	f007 fdf5 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002e26:	2015      	movs	r0, #21
 8002e28:	f007 fe0e 	bl	800aa48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002e2c:	e057      	b.n	8002ede <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <HAL_CAN_MspInit+0x178>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d152      	bne.n	8002ede <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002e42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e46:	6413      	str	r3, [r2, #64]	; 0x40
 8002e48:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <HAL_CAN_MspInit+0x16c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	4a24      	ldr	r2, [pc, #144]	; (8002eec <HAL_CAN_MspInit+0x16c>)
 8002e5c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e5e:	4b23      	ldr	r3, [pc, #140]	; (8002eec <HAL_CAN_MspInit+0x16c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10d      	bne.n	8002e82 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_CAN_MspInit+0x170>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e9e:	2360      	movs	r3, #96	; 0x60
 8002ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002eae:	2309      	movs	r3, #9
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb2:	f107 031c 	add.w	r3, r7, #28
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4810      	ldr	r0, [pc, #64]	; (8002efc <HAL_CAN_MspInit+0x17c>)
 8002eba:	f008 f9e1 	bl	800b280 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2105      	movs	r1, #5
 8002ec2:	2040      	movs	r0, #64	; 0x40
 8002ec4:	f007 fda4 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002ec8:	2040      	movs	r0, #64	; 0x40
 8002eca:	f007 fdbd 	bl	800aa48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2105      	movs	r1, #5
 8002ed2:	2041      	movs	r0, #65	; 0x41
 8002ed4:	f007 fd9c 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002ed8:	2041      	movs	r0, #65	; 0x41
 8002eda:	f007 fdb5 	bl	800aa48 <HAL_NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3730      	adds	r7, #48	; 0x30
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40006400 	.word	0x40006400
 8002eec:	20000440 	.word	0x20000440
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40020c00 	.word	0x40020c00
 8002ef8:	40006800 	.word	0x40006800
 8002efc:	40020400 	.word	0x40020400

08002f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <MX_DMA_Init+0xc8>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a2e      	ldr	r2, [pc, #184]	; (8002fc8 <MX_DMA_Init+0xc8>)
 8002f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <MX_DMA_Init+0xc8>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <MX_DMA_Init+0xc8>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <MX_DMA_Init+0xc8>)
 8002f2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f30:	6313      	str	r3, [r2, #48]	; 0x30
 8002f32:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <MX_DMA_Init+0xc8>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2105      	movs	r1, #5
 8002f42:	200c      	movs	r0, #12
 8002f44:	f007 fd64 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002f48:	200c      	movs	r0, #12
 8002f4a:	f007 fd7d 	bl	800aa48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2105      	movs	r1, #5
 8002f52:	200d      	movs	r0, #13
 8002f54:	f007 fd5c 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002f58:	200d      	movs	r0, #13
 8002f5a:	f007 fd75 	bl	800aa48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2105      	movs	r1, #5
 8002f62:	200f      	movs	r0, #15
 8002f64:	f007 fd54 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002f68:	200f      	movs	r0, #15
 8002f6a:	f007 fd6d 	bl	800aa48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2105      	movs	r1, #5
 8002f72:	2038      	movs	r0, #56	; 0x38
 8002f74:	f007 fd4c 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002f78:	2038      	movs	r0, #56	; 0x38
 8002f7a:	f007 fd65 	bl	800aa48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2105      	movs	r1, #5
 8002f82:	2039      	movs	r0, #57	; 0x39
 8002f84:	f007 fd44 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002f88:	2039      	movs	r0, #57	; 0x39
 8002f8a:	f007 fd5d 	bl	800aa48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2105      	movs	r1, #5
 8002f92:	203b      	movs	r0, #59	; 0x3b
 8002f94:	f007 fd3c 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002f98:	203b      	movs	r0, #59	; 0x3b
 8002f9a:	f007 fd55 	bl	800aa48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2105      	movs	r1, #5
 8002fa2:	2044      	movs	r0, #68	; 0x44
 8002fa4:	f007 fd34 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002fa8:	2044      	movs	r0, #68	; 0x44
 8002faa:	f007 fd4d 	bl	800aa48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	2045      	movs	r0, #69	; 0x45
 8002fb4:	f007 fd2c 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002fb8:	2045      	movs	r0, #69	; 0x45
 8002fba:	f007 fd45 	bl	800aa48 <HAL_NVIC_EnableIRQ>

}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800

08002fcc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0

}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
	return 0;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a07      	ldr	r2, [pc, #28]	; (800302c <vApplicationGetIdleTaskMemory+0x2c>)
 8003010:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <vApplicationGetIdleTaskMemory+0x30>)
 8003016:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301e:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	2000048c 	.word	0x2000048c
 8003030:	20000538 	.word	0x20000538

08003034 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a07      	ldr	r2, [pc, #28]	; (8003060 <vApplicationGetTimerTaskMemory+0x2c>)
 8003044:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4a06      	ldr	r2, [pc, #24]	; (8003064 <vApplicationGetTimerTaskMemory+0x30>)
 800304a:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003052:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	20000938 	.word	0x20000938
 8003064:	200009e4 	.word	0x200009e4

08003068 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af02      	add	r7, sp, #8
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	gimbal_event_group = xEventGroupCreate();
 800306e:	f012 f9a6 	bl	80153be <xEventGroupCreate>
 8003072:	4603      	mov	r3, r0
 8003074:	4a5a      	ldr	r2, [pc, #360]	; (80031e0 <MX_FREERTOS_Init+0x178>)
 8003076:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 8003078:	f012 f9a1 	bl	80153be <xEventGroupCreate>
 800307c:	4603      	mov	r3, r0
 800307e:	4a59      	ldr	r2, [pc, #356]	; (80031e4 <MX_FREERTOS_Init+0x17c>)
 8003080:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 8003082:	f012 f99c 	bl	80153be <xEventGroupCreate>
 8003086:	4603      	mov	r3, r0
 8003088:	4a57      	ldr	r2, [pc, #348]	; (80031e8 <MX_FREERTOS_Init+0x180>)
 800308a:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 800308c:	2203      	movs	r2, #3
 800308e:	2100      	movs	r1, #0
 8003090:	2001      	movs	r0, #1
 8003092:	f012 fd17 	bl	8015ac4 <xQueueGenericCreate>
 8003096:	4603      	mov	r3, r0
 8003098:	4a54      	ldr	r2, [pc, #336]	; (80031ec <MX_FREERTOS_Init+0x184>)
 800309a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 800309c:	2200      	movs	r2, #0
 800309e:	2110      	movs	r1, #16
 80030a0:	2005      	movs	r0, #5
 80030a2:	f012 fd0f 	bl	8015ac4 <xQueueGenericCreate>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4a51      	ldr	r2, [pc, #324]	; (80031f0 <MX_FREERTOS_Init+0x188>)
 80030aa:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 80030ac:	2200      	movs	r2, #0
 80030ae:	2110      	movs	r1, #16
 80030b0:	2005      	movs	r0, #5
 80030b2:	f012 fd07 	bl	8015ac4 <xQueueGenericCreate>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <MX_FREERTOS_Init+0x18c>)
 80030ba:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 80030bc:	2200      	movs	r2, #0
 80030be:	210c      	movs	r1, #12
 80030c0:	2005      	movs	r0, #5
 80030c2:	f012 fcff 	bl	8015ac4 <xQueueGenericCreate>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a4b      	ldr	r2, [pc, #300]	; (80031f8 <MX_FREERTOS_Init+0x190>)
 80030ca:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	buzzing_task_msg = xQueueCreate(48, sizeof(uint8_t));
 80030cc:	2200      	movs	r2, #0
 80030ce:	2101      	movs	r1, #1
 80030d0:	2030      	movs	r0, #48	; 0x30
 80030d2:	f012 fcf7 	bl	8015ac4 <xQueueGenericCreate>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4a48      	ldr	r2, [pc, #288]	; (80031fc <MX_FREERTOS_Init+0x194>)
 80030da:	6013      	str	r3, [r2, #0]
	uart_data_queue = xQueueCreate(5, sizeof(ref_msg_t));
 80030dc:	2200      	movs	r2, #0
 80030de:	2142      	movs	r1, #66	; 0x42
 80030e0:	2005      	movs	r0, #5
 80030e2:	f012 fcef 	bl	8015ac4 <xQueueGenericCreate>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4a45      	ldr	r2, [pc, #276]	; (8003200 <MX_FREERTOS_Init+0x198>)
 80030ea:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80030ec:	4b45      	ldr	r3, [pc, #276]	; (8003204 <MX_FREERTOS_Init+0x19c>)
 80030ee:	1d3c      	adds	r4, r7, #4
 80030f0:	461d      	mov	r5, r3
 80030f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f012 f8fb 	bl	80152fe <osThreadCreate>
 8003108:	4603      	mov	r3, r0
 800310a:	4a3f      	ldr	r2, [pc, #252]	; (8003208 <MX_FREERTOS_Init+0x1a0>)
 800310c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//todo: adjust priorities
	//Threads creation
	xTaskCreate(imu_processing_task, "IMU_task",
 800310e:	4b3f      	ldr	r3, [pc, #252]	; (800320c <MX_FREERTOS_Init+0x1a4>)
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	230f      	movs	r3, #15
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2301      	movs	r3, #1
 8003118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800311c:	493c      	ldr	r1, [pc, #240]	; (8003210 <MX_FREERTOS_Init+0x1a8>)
 800311e:	483d      	ldr	r0, [pc, #244]	; (8003214 <MX_FREERTOS_Init+0x1ac>)
 8003120:	f013 f973 	bl	801640a <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 15,
			&imu_processing_task_handle);

	xTaskCreate(motor_calib_task, "motor_calib_task",
 8003124:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <MX_FREERTOS_Init+0x1b0>)
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	2309      	movs	r3, #9
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2301      	movs	r3, #1
 800312e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003132:	493a      	ldr	r1, [pc, #232]	; (800321c <MX_FREERTOS_Init+0x1b4>)
 8003134:	483a      	ldr	r0, [pc, #232]	; (8003220 <MX_FREERTOS_Init+0x1b8>)
 8003136:	f013 f968 	bl	801640a <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 9,
			&motor_calib_task_handle);

	if (gimbal_event_group == NULL) {
 800313a:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <MX_FREERTOS_Init+0x178>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <MX_FREERTOS_Init+0xf0>
		//error handler implement next time!
	} else {
		xTaskCreate(gimbal_control_task, "gimbal_task",
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <MX_FREERTOS_Init+0x1bc>)
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2307      	movs	r3, #7
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2301      	movs	r3, #1
 800314c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003150:	4935      	ldr	r1, [pc, #212]	; (8003228 <MX_FREERTOS_Init+0x1c0>)
 8003152:	4836      	ldr	r0, [pc, #216]	; (800322c <MX_FREERTOS_Init+0x1c4>)
 8003154:	f013 f959 	bl	801640a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 7,
				&gimbal_control_task_handle);

	}

	if (chassis_event_group == NULL) {
 8003158:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <MX_FREERTOS_Init+0x17c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <MX_FREERTOS_Init+0x10e>
		//error handler
	} else {
		xTaskCreate(movement_control_task, "chassis_task",
 8003160:	4b33      	ldr	r3, [pc, #204]	; (8003230 <MX_FREERTOS_Init+0x1c8>)
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	2304      	movs	r3, #4
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2301      	movs	r3, #1
 800316a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800316e:	4931      	ldr	r1, [pc, #196]	; (8003234 <MX_FREERTOS_Init+0x1cc>)
 8003170:	4831      	ldr	r0, [pc, #196]	; (8003238 <MX_FREERTOS_Init+0x1d0>)
 8003172:	f013 f94a 	bl	801640a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&movement_control_task_handle);
	}

	if (launcher_event_group == NULL) {
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <MX_FREERTOS_Init+0x180>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <MX_FREERTOS_Init+0x12c>
		//error handler
	} else {
		xTaskCreate(launcher_control_task, "launcher_task",
 800317e:	4b2f      	ldr	r3, [pc, #188]	; (800323c <MX_FREERTOS_Init+0x1d4>)
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	2304      	movs	r3, #4
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2301      	movs	r3, #1
 8003188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800318c:	492c      	ldr	r1, [pc, #176]	; (8003240 <MX_FREERTOS_Init+0x1d8>)
 800318e:	482d      	ldr	r0, [pc, #180]	; (8003244 <MX_FREERTOS_Init+0x1dc>)
 8003190:	f013 f93b 	bl	801640a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&launcher_control_task_handle);
	}

	xTaskCreate(control_input_task, "RC_task",
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <MX_FREERTOS_Init+0x1e0>)
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	2304      	movs	r3, #4
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2301      	movs	r3, #1
 800319e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a2:	492a      	ldr	r1, [pc, #168]	; (800324c <MX_FREERTOS_Init+0x1e4>)
 80031a4:	482a      	ldr	r0, [pc, #168]	; (8003250 <MX_FREERTOS_Init+0x1e8>)
 80031a6:	f013 f930 	bl	801640a <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 4,
			&control_input_task_handle);
	xTaskCreate(referee_processing_task, "referee_task", 2048, (void*) 1,
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <MX_FREERTOS_Init+0x1ec>)
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	2302      	movs	r3, #2
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2301      	movs	r3, #1
 80031b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b8:	4927      	ldr	r1, [pc, #156]	; (8003258 <MX_FREERTOS_Init+0x1f0>)
 80031ba:	4828      	ldr	r0, [pc, #160]	; (800325c <MX_FREERTOS_Init+0x1f4>)
 80031bc:	f013 f925 	bl	801640a <xTaskCreate>
			(UBaseType_t) 2, &referee_processing_task_handle);
	xTaskCreate(buzzing_task, "buzzer_task",
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <MX_FREERTOS_Init+0x1f8>)
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	2301      	movs	r3, #1
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2301      	movs	r3, #1
 80031ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ce:	4925      	ldr	r1, [pc, #148]	; (8003264 <MX_FREERTOS_Init+0x1fc>)
 80031d0:	4825      	ldr	r0, [pc, #148]	; (8003268 <MX_FREERTOS_Init+0x200>)
 80031d2:	f013 f91a 	bl	801640a <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &buzzing_task_handle);


  /* USER CODE END RTOS_THREADS */

}
 80031d6:	bf00      	nop
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bdb0      	pop	{r4, r5, r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000464 	.word	0x20000464
 80031e4:	20000468 	.word	0x20000468
 80031e8:	2000046c 	.word	0x2000046c
 80031ec:	20000470 	.word	0x20000470
 80031f0:	20000474 	.word	0x20000474
 80031f4:	20000478 	.word	0x20000478
 80031f8:	2000047c 	.word	0x2000047c
 80031fc:	20000480 	.word	0x20000480
 8003200:	20000484 	.word	0x20000484
 8003204:	0801f5d4 	.word	0x0801f5d4
 8003208:	20000488 	.word	0x20000488
 800320c:	20000460 	.word	0x20000460
 8003210:	0801f558 	.word	0x0801f558
 8003214:	08006259 	.word	0x08006259
 8003218:	2000045c 	.word	0x2000045c
 800321c:	0801f564 	.word	0x0801f564
 8003220:	08007e3d 	.word	0x08007e3d
 8003224:	20000444 	.word	0x20000444
 8003228:	0801f578 	.word	0x0801f578
 800322c:	08005d7d 	.word	0x08005d7d
 8003230:	20000448 	.word	0x20000448
 8003234:	0801f584 	.word	0x0801f584
 8003238:	08008bc9 	.word	0x08008bc9
 800323c:	20000454 	.word	0x20000454
 8003240:	0801f594 	.word	0x0801f594
 8003244:	08006f45 	.word	0x08006f45
 8003248:	20000450 	.word	0x20000450
 800324c:	0801f5a4 	.word	0x0801f5a4
 8003250:	0800543d 	.word	0x0800543d
 8003254:	2000044c 	.word	0x2000044c
 8003258:	0801f5ac 	.word	0x0801f5ac
 800325c:	080091e1 	.word	0x080091e1
 8003260:	20000458 	.word	0x20000458
 8003264:	0801f5bc 	.word	0x0801f5bc
 8003268:	08004ad1 	.word	0x08004ad1

0800326c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003274:	f015 f9a2 	bl	80185bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8003278:	2001      	movs	r0, #1
 800327a:	f012 f88c 	bl	8015396 <osDelay>
 800327e:	e7fb      	b.n	8003278 <StartDefaultTask+0xc>

08003280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08e      	sub	sp, #56	; 0x38
 8003284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	623b      	str	r3, [r7, #32]
 800329a:	4b79      	ldr	r3, [pc, #484]	; (8003480 <MX_GPIO_Init+0x200>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a78      	ldr	r2, [pc, #480]	; (8003480 <MX_GPIO_Init+0x200>)
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b76      	ldr	r3, [pc, #472]	; (8003480 <MX_GPIO_Init+0x200>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	4b72      	ldr	r3, [pc, #456]	; (8003480 <MX_GPIO_Init+0x200>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a71      	ldr	r2, [pc, #452]	; (8003480 <MX_GPIO_Init+0x200>)
 80032bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <MX_GPIO_Init+0x200>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	4b6b      	ldr	r3, [pc, #428]	; (8003480 <MX_GPIO_Init+0x200>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4a6a      	ldr	r2, [pc, #424]	; (8003480 <MX_GPIO_Init+0x200>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
 80032de:	4b68      	ldr	r3, [pc, #416]	; (8003480 <MX_GPIO_Init+0x200>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	4b64      	ldr	r3, [pc, #400]	; (8003480 <MX_GPIO_Init+0x200>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a63      	ldr	r2, [pc, #396]	; (8003480 <MX_GPIO_Init+0x200>)
 80032f4:	f043 0308 	orr.w	r3, r3, #8
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b61      	ldr	r3, [pc, #388]	; (8003480 <MX_GPIO_Init+0x200>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <MX_GPIO_Init+0x200>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4a5c      	ldr	r2, [pc, #368]	; (8003480 <MX_GPIO_Init+0x200>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4b5a      	ldr	r3, [pc, #360]	; (8003480 <MX_GPIO_Init+0x200>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b56      	ldr	r3, [pc, #344]	; (8003480 <MX_GPIO_Init+0x200>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a55      	ldr	r2, [pc, #340]	; (8003480 <MX_GPIO_Init+0x200>)
 800332c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b53      	ldr	r3, [pc, #332]	; (8003480 <MX_GPIO_Init+0x200>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <MX_GPIO_Init+0x200>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a4e      	ldr	r2, [pc, #312]	; (8003480 <MX_GPIO_Init+0x200>)
 8003348:	f043 0320 	orr.w	r3, r3, #32
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b4c      	ldr	r3, [pc, #304]	; (8003480 <MX_GPIO_Init+0x200>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	4b48      	ldr	r3, [pc, #288]	; (8003480 <MX_GPIO_Init+0x200>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a47      	ldr	r2, [pc, #284]	; (8003480 <MX_GPIO_Init+0x200>)
 8003364:	f043 0310 	orr.w	r3, r3, #16
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b45      	ldr	r3, [pc, #276]	; (8003480 <MX_GPIO_Init+0x200>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8003376:	2200      	movs	r2, #0
 8003378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800337c:	4841      	ldr	r0, [pc, #260]	; (8003484 <MX_GPIO_Init+0x204>)
 800337e:	f008 f91b 	bl	800b5b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8003382:	2200      	movs	r2, #0
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	4840      	ldr	r0, [pc, #256]	; (8003488 <MX_GPIO_Init+0x208>)
 8003388:	f008 f916 	bl	800b5b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800338c:	2201      	movs	r2, #1
 800338e:	2110      	movs	r1, #16
 8003390:	483e      	ldr	r0, [pc, #248]	; (800348c <MX_GPIO_Init+0x20c>)
 8003392:	f008 f911 	bl	800b5b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8003396:	2201      	movs	r2, #1
 8003398:	2101      	movs	r1, #1
 800339a:	483d      	ldr	r0, [pc, #244]	; (8003490 <MX_GPIO_Init+0x210>)
 800339c:	f008 f90c 	bl	800b5b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_GPIO_Pin;
 80033a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a6:	2301      	movs	r3, #1
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LASER_GPIO_GPIO_Port, &GPIO_InitStruct);
 80033b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b6:	4619      	mov	r1, r3
 80033b8:	4832      	ldr	r0, [pc, #200]	; (8003484 <MX_GPIO_Init+0x204>)
 80033ba:	f007 ff61 	bl	800b280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_RST_Pin;
 80033be:	2340      	movs	r3, #64	; 0x40
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c2:	2301      	movs	r3, #1
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IST_RST_GPIO_Port, &GPIO_InitStruct);
 80033ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d2:	4619      	mov	r1, r3
 80033d4:	482c      	ldr	r0, [pc, #176]	; (8003488 <MX_GPIO_Init+0x208>)
 80033d6:	f007 ff53 	bl	800b280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 80033da:	2308      	movs	r3, #8
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e4:	2301      	movs	r3, #1
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 80033e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ec:	4619      	mov	r1, r3
 80033ee:	4826      	ldr	r0, [pc, #152]	; (8003488 <MX_GPIO_Init+0x208>)
 80033f0:	f007 ff46 	bl	800b280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033f4:	2310      	movs	r3, #16
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f8:	2301      	movs	r3, #1
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003408:	4619      	mov	r1, r3
 800340a:	4820      	ldr	r0, [pc, #128]	; (800348c <MX_GPIO_Init+0x20c>)
 800340c:	f007 ff38 	bl	800b280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin|GYRO_INT_Pin;
 8003410:	2330      	movs	r3, #48	; 0x30
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003414:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800341a:	2301      	movs	r3, #1
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003422:	4619      	mov	r1, r3
 8003424:	4817      	ldr	r0, [pc, #92]	; (8003484 <MX_GPIO_Init+0x204>)
 8003426:	f007 ff2b 	bl	800b280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800342a:	2301      	movs	r3, #1
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342e:	2301      	movs	r3, #1
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800343e:	4619      	mov	r1, r3
 8003440:	4813      	ldr	r0, [pc, #76]	; (8003490 <MX_GPIO_Init+0x210>)
 8003442:	f007 ff1d 	bl	800b280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	2105      	movs	r1, #5
 800344a:	2009      	movs	r0, #9
 800344c:	f007 fae0 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003450:	2009      	movs	r0, #9
 8003452:	f007 faf9 	bl	800aa48 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2105      	movs	r1, #5
 800345a:	200a      	movs	r0, #10
 800345c:	f007 fad8 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003460:	200a      	movs	r0, #10
 8003462:	f007 faf1 	bl	800aa48 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2105      	movs	r1, #5
 800346a:	2017      	movs	r0, #23
 800346c:	f007 fad0 	bl	800aa10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003470:	2017      	movs	r0, #23
 8003472:	f007 fae9 	bl	800aa48 <HAL_NVIC_EnableIRQ>

}
 8003476:	bf00      	nop
 8003478:	3738      	adds	r7, #56	; 0x38
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40020800 	.word	0x40020800
 8003488:	40021800 	.word	0x40021800
 800348c:	40020000 	.word	0x40020000
 8003490:	40020400 	.word	0x40020400

08003494 <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <MX_I2C3_Init+0x50>)
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <MX_I2C3_Init+0x54>)
 800349c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <MX_I2C3_Init+0x50>)
 80034a0:	4a12      	ldr	r2, [pc, #72]	; (80034ec <MX_I2C3_Init+0x58>)
 80034a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <MX_I2C3_Init+0x50>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80034aa:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <MX_I2C3_Init+0x50>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <MX_I2C3_Init+0x50>)
 80034b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <MX_I2C3_Init+0x50>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <MX_I2C3_Init+0x50>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <MX_I2C3_Init+0x50>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <MX_I2C3_Init+0x50>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034d0:	4804      	ldr	r0, [pc, #16]	; (80034e4 <MX_I2C3_Init+0x50>)
 80034d2:	f008 f8a3 	bl	800b61c <HAL_I2C_Init>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80034dc:	f000 f989 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200011e4 	.word	0x200011e4
 80034e8:	40005c00 	.word	0x40005c00
 80034ec:	00061a80 	.word	0x00061a80

080034f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a5b      	ldr	r2, [pc, #364]	; (800367c <HAL_I2C_MspInit+0x18c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	f040 80b0 	bne.w	8003674 <HAL_I2C_MspInit+0x184>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	4b59      	ldr	r3, [pc, #356]	; (8003680 <HAL_I2C_MspInit+0x190>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4a58      	ldr	r2, [pc, #352]	; (8003680 <HAL_I2C_MspInit+0x190>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6313      	str	r3, [r2, #48]	; 0x30
 8003524:	4b56      	ldr	r3, [pc, #344]	; (8003680 <HAL_I2C_MspInit+0x190>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	4b52      	ldr	r3, [pc, #328]	; (8003680 <HAL_I2C_MspInit+0x190>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	4a51      	ldr	r2, [pc, #324]	; (8003680 <HAL_I2C_MspInit+0x190>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6313      	str	r3, [r2, #48]	; 0x30
 8003540:	4b4f      	ldr	r3, [pc, #316]	; (8003680 <HAL_I2C_MspInit+0x190>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800354c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003552:	2312      	movs	r3, #18
 8003554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003556:	2301      	movs	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355a:	2303      	movs	r3, #3
 800355c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800355e:	2304      	movs	r3, #4
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4619      	mov	r1, r3
 8003568:	4846      	ldr	r0, [pc, #280]	; (8003684 <HAL_I2C_MspInit+0x194>)
 800356a:	f007 fe89 	bl	800b280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800356e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003574:	2312      	movs	r3, #18
 8003576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003578:	2301      	movs	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357c:	2303      	movs	r3, #3
 800357e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003580:	2304      	movs	r3, #4
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	483f      	ldr	r0, [pc, #252]	; (8003688 <HAL_I2C_MspInit+0x198>)
 800358c:	f007 fe78 	bl	800b280 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003590:	2300      	movs	r3, #0
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_I2C_MspInit+0x190>)
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	4a39      	ldr	r2, [pc, #228]	; (8003680 <HAL_I2C_MspInit+0x190>)
 800359a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800359e:	6413      	str	r3, [r2, #64]	; 0x40
 80035a0:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_I2C_MspInit+0x190>)
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 80035ac:	4b37      	ldr	r3, [pc, #220]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035ae:	4a38      	ldr	r2, [pc, #224]	; (8003690 <HAL_I2C_MspInit+0x1a0>)
 80035b0:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 80035b2:	4b36      	ldr	r3, [pc, #216]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035b4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80035b8:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035ba:	4b34      	ldr	r3, [pc, #208]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c0:	4b32      	ldr	r3, [pc, #200]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035c6:	4b31      	ldr	r3, [pc, #196]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035cc:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ce:	4b2f      	ldr	r3, [pc, #188]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d4:	4b2d      	ldr	r3, [pc, #180]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80035da:	4b2c      	ldr	r3, [pc, #176]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035dc:	2200      	movs	r2, #0
 80035de:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035e0:	4b2a      	ldr	r3, [pc, #168]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80035ec:	4827      	ldr	r0, [pc, #156]	; (800368c <HAL_I2C_MspInit+0x19c>)
 80035ee:	f007 fa39 	bl	800aa64 <HAL_DMA_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80035f8:	f000 f8fb 	bl	80037f2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a23      	ldr	r2, [pc, #140]	; (800368c <HAL_I2C_MspInit+0x19c>)
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <HAL_I2C_MspInit+0x19c>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8003608:	4b22      	ldr	r3, [pc, #136]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 800360a:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_I2C_MspInit+0x1a8>)
 800360c:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800360e:	4b21      	ldr	r3, [pc, #132]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 8003610:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003614:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003616:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 8003618:	2240      	movs	r2, #64	; 0x40
 800361a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 800361e:	2200      	movs	r2, #0
 8003620:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 8003624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003628:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 800362c:	2200      	movs	r2, #0
 800362e:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 8003632:	2200      	movs	r2, #0
 8003634:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 8003638:	2200      	movs	r2, #0
 800363a:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800363c:	4b15      	ldr	r3, [pc, #84]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 800363e:	2200      	movs	r2, #0
 8003640:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 8003644:	2200      	movs	r2, #0
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8003648:	4812      	ldr	r0, [pc, #72]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 800364a:	f007 fa0b 	bl	800aa64 <HAL_DMA_Init>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8003654:	f000 f8cd 	bl	80037f2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a0e      	ldr	r2, [pc, #56]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 800365c:	635a      	str	r2, [r3, #52]	; 0x34
 800365e:	4a0d      	ldr	r2, [pc, #52]	; (8003694 <HAL_I2C_MspInit+0x1a4>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8003664:	2200      	movs	r2, #0
 8003666:	2105      	movs	r1, #5
 8003668:	2049      	movs	r0, #73	; 0x49
 800366a:	f007 f9d1 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800366e:	2049      	movs	r0, #73	; 0x49
 8003670:	f007 f9ea 	bl	800aa48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003674:	bf00      	nop
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40005c00 	.word	0x40005c00
 8003680:	40023800 	.word	0x40023800
 8003684:	40020800 	.word	0x40020800
 8003688:	40020000 	.word	0x40020000
 800368c:	20001238 	.word	0x20001238
 8003690:	40026040 	.word	0x40026040
 8003694:	20001298 	.word	0x20001298
 8003698:	40026070 	.word	0x40026070

0800369c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036a0:	f005 ffb6 	bl	8009610 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036a4:	f000 f82c 	bl	8003700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036a8:	f7ff fdea 	bl	8003280 <MX_GPIO_Init>
  MX_DMA_Init();
 80036ac:	f7ff fc28 	bl	8002f00 <MX_DMA_Init>
  MX_CAN1_Init();
 80036b0:	f7ff fafa 	bl	8002ca8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80036b4:	f7ff fb2e 	bl	8002d14 <MX_CAN2_Init>
  MX_TIM5_Init();
 80036b8:	f000 fda4 	bl	8004204 <MX_TIM5_Init>
  MX_TIM10_Init();
 80036bc:	f000 fe12 	bl	80042e4 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80036c0:	f000 ff9e 	bl	8004600 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80036c4:	f000 ffc6 	bl	8004654 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80036c8:	f000 fff0 	bl	80046ac <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80036cc:	f000 f8cc 	bl	8003868 <MX_SPI1_Init>
  MX_I2C3_Init();
 80036d0:	f7ff fee0 	bl	8003494 <MX_I2C3_Init>
  MX_ADC3_Init();
 80036d4:	f7ff fa52 	bl	8002b7c <MX_ADC3_Init>
  MX_TIM3_Init();
 80036d8:	f000 fcc8 	bl	800406c <MX_TIM3_Init>
  MX_TIM4_Init();
 80036dc:	f000 fd38 	bl	8004150 <MX_TIM4_Init>
  MX_TIM1_Init();
 80036e0:	f000 fc34 	bl	8003f4c <MX_TIM1_Init>
  MX_RNG_Init();
 80036e4:	f000 f88a 	bl	80037fc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  startup_task();
 80036e8:	f005 ff82 	bl	80095f0 <startup_task>
  HAL_TIM_Base_Start(&htim3); //start micros clock
 80036ec:	4803      	ldr	r0, [pc, #12]	; (80036fc <main+0x60>)
 80036ee:	f00c f90d 	bl	800f90c <HAL_TIM_Base_Start>
//  HAL_RNG_GenerateRandomNumber(hrng, random32bit)
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80036f2:	f7ff fcb9 	bl	8003068 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80036f6:	f011 fdfb 	bl	80152f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036fa:	e7fe      	b.n	80036fa <main+0x5e>
 80036fc:	200014b4 	.word	0x200014b4

08003700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b094      	sub	sp, #80	; 0x50
 8003704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003706:	f107 0320 	add.w	r3, r7, #32
 800370a:	2230      	movs	r2, #48	; 0x30
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f016 fc15 	bl	8019f3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <SystemClock_Config+0xcc>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	4a27      	ldr	r2, [pc, #156]	; (80037cc <SystemClock_Config+0xcc>)
 800372e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003732:	6413      	str	r3, [r2, #64]	; 0x40
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <SystemClock_Config+0xcc>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003740:	2300      	movs	r3, #0
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <SystemClock_Config+0xd0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <SystemClock_Config+0xd0>)
 800374a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <SystemClock_Config+0xd0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800375c:	2301      	movs	r3, #1
 800375e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003766:	2302      	movs	r3, #2
 8003768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800376a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003770:	2306      	movs	r3, #6
 8003772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003774:	23a8      	movs	r3, #168	; 0xa8
 8003776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003778:	2302      	movs	r3, #2
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800377c:	2307      	movs	r3, #7
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003780:	f107 0320 	add.w	r3, r7, #32
 8003784:	4618      	mov	r0, r3
 8003786:	f00a ff51 	bl	800e62c <HAL_RCC_OscConfig>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003790:	f000 f82f 	bl	80037f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003794:	230f      	movs	r3, #15
 8003796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003798:	2302      	movs	r3, #2
 800379a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	2105      	movs	r1, #5
 80037b2:	4618      	mov	r0, r3
 80037b4:	f00b f9b2 	bl	800eb1c <HAL_RCC_ClockConfig>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037be:	f000 f818 	bl	80037f2 <Error_Handler>
  }
}
 80037c2:	bf00      	nop
 80037c4:	3750      	adds	r7, #80	; 0x50
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40007000 	.word	0x40007000

080037d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80037e6:	f005 ff35 	bl	8009654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f2:	b480      	push	{r7}
 80037f4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037f6:	b672      	cpsid	i
}
 80037f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037fa:	e7fe      	b.n	80037fa <Error_Handler+0x8>

080037fc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <MX_RNG_Init+0x20>)
 8003802:	4a07      	ldr	r2, [pc, #28]	; (8003820 <MX_RNG_Init+0x24>)
 8003804:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003806:	4805      	ldr	r0, [pc, #20]	; (800381c <MX_RNG_Init+0x20>)
 8003808:	f00b fb9a 	bl	800ef40 <HAL_RNG_Init>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003812:	f7ff ffee 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200012f8 	.word	0x200012f8
 8003820:	50060800 	.word	0x50060800

08003824 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <HAL_RNG_MspInit+0x3c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RNG_MspInit+0x40>)
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_RNG_MspInit+0x40>)
 8003840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003844:	6353      	str	r3, [r2, #52]	; 0x34
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <HAL_RNG_MspInit+0x40>)
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	50060800 	.word	0x50060800
 8003864:	40023800 	.word	0x40023800

08003868 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <MX_SPI1_Init+0x64>)
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <MX_SPI1_Init+0x68>)
 8003870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <MX_SPI1_Init+0x64>)
 8003874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003878:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <MX_SPI1_Init+0x64>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <MX_SPI1_Init+0x64>)
 8003882:	2200      	movs	r2, #0
 8003884:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <MX_SPI1_Init+0x64>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <MX_SPI1_Init+0x64>)
 800388e:	2200      	movs	r2, #0
 8003890:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <MX_SPI1_Init+0x64>)
 8003894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003898:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <MX_SPI1_Init+0x64>)
 800389c:	2228      	movs	r2, #40	; 0x28
 800389e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <MX_SPI1_Init+0x64>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <MX_SPI1_Init+0x64>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <MX_SPI1_Init+0x64>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <MX_SPI1_Init+0x64>)
 80038b4:	220a      	movs	r2, #10
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038b8:	4804      	ldr	r0, [pc, #16]	; (80038cc <MX_SPI1_Init+0x64>)
 80038ba:	f00b fb6b 	bl	800ef94 <HAL_SPI_Init>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038c4:	f7ff ff95 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20001308 	.word	0x20001308
 80038d0:	40013000 	.word	0x40013000

080038d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a56      	ldr	r2, [pc, #344]	; (8003a4c <HAL_SPI_MspInit+0x178>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	f040 80a6 	bne.w	8003a44 <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	4b54      	ldr	r3, [pc, #336]	; (8003a50 <HAL_SPI_MspInit+0x17c>)
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	4a53      	ldr	r2, [pc, #332]	; (8003a50 <HAL_SPI_MspInit+0x17c>)
 8003902:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003906:	6453      	str	r3, [r2, #68]	; 0x44
 8003908:	4b51      	ldr	r3, [pc, #324]	; (8003a50 <HAL_SPI_MspInit+0x17c>)
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <HAL_SPI_MspInit+0x17c>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	4a4c      	ldr	r2, [pc, #304]	; (8003a50 <HAL_SPI_MspInit+0x17c>)
 800391e:	f043 0302 	orr.w	r3, r3, #2
 8003922:	6313      	str	r3, [r2, #48]	; 0x30
 8003924:	4b4a      	ldr	r3, [pc, #296]	; (8003a50 <HAL_SPI_MspInit+0x17c>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_SPI_MspInit+0x17c>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	4a45      	ldr	r2, [pc, #276]	; (8003a50 <HAL_SPI_MspInit+0x17c>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6313      	str	r3, [r2, #48]	; 0x30
 8003940:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_SPI_MspInit+0x17c>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800394c:	2318      	movs	r3, #24
 800394e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003958:	2303      	movs	r3, #3
 800395a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800395c:	2305      	movs	r3, #5
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	4619      	mov	r1, r3
 8003966:	483b      	ldr	r0, [pc, #236]	; (8003a54 <HAL_SPI_MspInit+0x180>)
 8003968:	f007 fc8a 	bl	800b280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003978:	2303      	movs	r3, #3
 800397a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800397c:	2305      	movs	r3, #5
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4619      	mov	r1, r3
 8003986:	4834      	ldr	r0, [pc, #208]	; (8003a58 <HAL_SPI_MspInit+0x184>)
 8003988:	f007 fc7a 	bl	800b280 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800398c:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 800398e:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <HAL_SPI_MspInit+0x18c>)
 8003990:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003992:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 8003994:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003998:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a0:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039a6:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ae:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b4:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80039ba:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039bc:	2200      	movs	r2, #0
 80039be:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039c6:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80039cc:	4823      	ldr	r0, [pc, #140]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039ce:	f007 f849 	bl	800aa64 <HAL_DMA_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80039d8:	f7ff ff0b 	bl	80037f2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80039e2:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <HAL_SPI_MspInit+0x188>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80039e8:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 80039ea:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_SPI_MspInit+0x194>)
 80039ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 80039f0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80039f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a02:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 8003a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a08:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a10:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a28:	480e      	ldr	r0, [pc, #56]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 8003a2a:	f007 f81b 	bl	800aa64 <HAL_DMA_Init>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8003a34:	f7ff fedd 	bl	80037f2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 8003a3c:	649a      	str	r2, [r3, #72]	; 0x48
 8003a3e:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <HAL_SPI_MspInit+0x190>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a44:	bf00      	nop
 8003a46:	3728      	adds	r7, #40	; 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40013000 	.word	0x40013000
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40020400 	.word	0x40020400
 8003a58:	40020000 	.word	0x40020000
 8003a5c:	20001360 	.word	0x20001360
 8003a60:	40026410 	.word	0x40026410
 8003a64:	200013c0 	.word	0x200013c0
 8003a68:	40026458 	.word	0x40026458

08003a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <HAL_MspInit+0x54>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <HAL_MspInit+0x54>)
 8003a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a80:	6453      	str	r3, [r2, #68]	; 0x44
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <HAL_MspInit+0x54>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_MspInit+0x54>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <HAL_MspInit+0x54>)
 8003a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <HAL_MspInit+0x54>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	210f      	movs	r1, #15
 8003aae:	f06f 0001 	mvn.w	r0, #1
 8003ab2:	f006 ffad 	bl	800aa10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800

08003ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08e      	sub	sp, #56	; 0x38
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_InitTick+0xe8>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	4a33      	ldr	r2, [pc, #204]	; (8003bac <HAL_InitTick+0xe8>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae4:	4b31      	ldr	r3, [pc, #196]	; (8003bac <HAL_InitTick+0xe8>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003af0:	f107 0210 	add.w	r2, r7, #16
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f00b f9ee 	bl	800eedc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b0a:	f00b f9bf 	bl	800ee8c <HAL_RCC_GetPCLK1Freq>
 8003b0e:	6378      	str	r0, [r7, #52]	; 0x34
 8003b10:	e004      	b.n	8003b1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b12:	f00b f9bb 	bl	800ee8c <HAL_RCC_GetPCLK1Freq>
 8003b16:	4603      	mov	r3, r0
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <HAL_InitTick+0xec>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	0c9b      	lsrs	r3, r3, #18
 8003b26:	3b01      	subs	r3, #1
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003b2a:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <HAL_InitTick+0xf0>)
 8003b2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_InitTick+0xf0>)
 8003b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b38:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <HAL_InitTick+0xf0>)
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003b40:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <HAL_InitTick+0xf0>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_InitTick+0xf0>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_InitTick+0xf0>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003b52:	4818      	ldr	r0, [pc, #96]	; (8003bb4 <HAL_InitTick+0xf0>)
 8003b54:	f00b fe8a 	bl	800f86c <HAL_TIM_Base_Init>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003b5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11b      	bne.n	8003b9e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003b66:	4813      	ldr	r0, [pc, #76]	; (8003bb4 <HAL_InitTick+0xf0>)
 8003b68:	f00b ff38 	bl	800f9dc <HAL_TIM_Base_Start_IT>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003b72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d111      	bne.n	8003b9e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b7a:	201c      	movs	r0, #28
 8003b7c:	f006 ff64 	bl	800aa48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	d808      	bhi.n	8003b98 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003b86:	2200      	movs	r2, #0
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	201c      	movs	r0, #28
 8003b8c:	f006 ff40 	bl	800aa10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b90:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <HAL_InitTick+0xf4>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e002      	b.n	8003b9e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003b9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3738      	adds	r7, #56	; 0x38
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	431bde83 	.word	0x431bde83
 8003bb4:	20001420 	.word	0x20001420
 8003bb8:	20000010 	.word	0x20000010

08003bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <NMI_Handler+0x4>

08003bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bc6:	e7fe      	b.n	8003bc6 <HardFault_Handler+0x4>

08003bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <MemManage_Handler+0x4>

08003bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd2:	e7fe      	b.n	8003bd2 <BusFault_Handler+0x4>

08003bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bd8:	e7fe      	b.n	8003bd8 <UsageFault_Handler+0x4>

08003bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8003bec:	2008      	movs	r0, #8
 8003bee:	f007 fcfd 	bl	800b5ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8003bfa:	2010      	movs	r0, #16
 8003bfc:	f007 fcf6 	bl	800b5ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003c08:	4802      	ldr	r0, [pc, #8]	; (8003c14 <DMA1_Stream1_IRQHandler+0x10>)
 8003c0a:	f007 f8c3 	bl	800ad94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20001700 	.word	0x20001700

08003c18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <DMA1_Stream2_IRQHandler+0x10>)
 8003c1e:	f007 f8b9 	bl	800ad94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20001238 	.word	0x20001238

08003c2c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <DMA1_Stream4_IRQHandler+0x10>)
 8003c32:	f007 f8af 	bl	800ad94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20001298 	.word	0x20001298

08003c40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c44:	4802      	ldr	r0, [pc, #8]	; (8003c50 <CAN1_RX0_IRQHandler+0x10>)
 8003c46:	f006 fc05 	bl	800a454 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200003f0 	.word	0x200003f0

08003c54 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c58:	4802      	ldr	r0, [pc, #8]	; (8003c64 <CAN1_RX1_IRQHandler+0x10>)
 8003c5a:	f006 fbfb 	bl	800a454 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200003f0 	.word	0x200003f0

08003c68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8003c6c:	2020      	movs	r0, #32
 8003c6e:	f007 fcbd 	bl	800b5ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c7c:	4802      	ldr	r0, [pc, #8]	; (8003c88 <TIM2_IRQHandler+0x10>)
 8003c7e:	f00c f88d 	bl	800fd9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20001420 	.word	0x20001420

08003c8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c90:	4803      	ldr	r0, [pc, #12]	; (8003ca0 <TIM3_IRQHandler+0x14>)
 8003c92:	f00c f883 	bl	800fd9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  if (__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_UPDATE) == 1){
	  micros_tick();
 8003c96:	f7fe f9f1 	bl	800207c <micros_tick>
//  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200014b4 	.word	0x200014b4

08003ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <USART1_IRQHandler+0x10>)
 8003caa:	f00d f84b 	bl	8010d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200015d4 	.word	0x200015d4

08003cb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003cbc:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <USART3_IRQHandler+0x10>)
 8003cbe:	f00d f841 	bl	8010d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20001618 	.word	0x20001618

08003ccc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <DMA2_Stream0_IRQHandler+0x10>)
 8003cd2:	f007 f85f 	bl	800ad94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20001360 	.word	0x20001360

08003ce0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <DMA2_Stream1_IRQHandler+0x10>)
 8003ce6:	f007 f855 	bl	800ad94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20001760 	.word	0x20001760

08003cf4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <DMA2_Stream3_IRQHandler+0x10>)
 8003cfa:	f007 f84b 	bl	800ad94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200013c0 	.word	0x200013c0

08003d08 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d0c:	4802      	ldr	r0, [pc, #8]	; (8003d18 <CAN2_RX0_IRQHandler+0x10>)
 8003d0e:	f006 fba1 	bl	800a454 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000418 	.word	0x20000418

08003d1c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d20:	4802      	ldr	r0, [pc, #8]	; (8003d2c <CAN2_RX1_IRQHandler+0x10>)
 8003d22:	f006 fb97 	bl	800a454 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000418 	.word	0x20000418

08003d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003d34:	4802      	ldr	r0, [pc, #8]	; (8003d40 <OTG_FS_IRQHandler+0x10>)
 8003d36:	f009 fb4c 	bl	800d3d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000de00 	.word	0x2000de00

08003d44 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d48:	4802      	ldr	r0, [pc, #8]	; (8003d54 <DMA2_Stream5_IRQHandler+0x10>)
 8003d4a:	f007 f823 	bl	800ad94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200016a0 	.word	0x200016a0

08003d58 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003d5c:	4802      	ldr	r0, [pc, #8]	; (8003d68 <DMA2_Stream6_IRQHandler+0x10>)
 8003d5e:	f007 f819 	bl	800ad94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200017c0 	.word	0x200017c0

08003d6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <USART6_IRQHandler+0x10>)
 8003d72:	f00c ffe7 	bl	8010d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000165c 	.word	0x2000165c

08003d80 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003d84:	4802      	ldr	r0, [pc, #8]	; (8003d90 <I2C3_ER_IRQHandler+0x10>)
 8003d86:	f008 fa41 	bl	800c20c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200011e4 	.word	0x200011e4

08003d94 <_getpid>:
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_kill>:
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
 8003dae:	f016 f96f 	bl	801a090 <__errno>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2216      	movs	r2, #22
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_exit>:
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ffe7 	bl	8003da4 <_kill>
 8003dd6:	e7fe      	b.n	8003dd6 <_exit+0x12>

08003dd8 <_read>:
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e00a      	b.n	8003e00 <_read+0x28>
 8003dea:	f3af 8000 	nop.w
 8003dee:	4601      	mov	r1, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	60ba      	str	r2, [r7, #8]
 8003df6:	b2ca      	uxtb	r2, r1
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	dbf0      	blt.n	8003dea <_read+0x12>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_write>:
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e009      	b.n	8003e38 <_write+0x26>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	60ba      	str	r2, [r7, #8]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f3af 8000 	nop.w
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	3301      	adds	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	dbf1      	blt.n	8003e24 <_write+0x12>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <_close>:
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_fstat>:
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	2300      	movs	r3, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <_isatty>:
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <_lseek>:
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <_sbrk>:
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <_sbrk+0x5c>)
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <_sbrk+0x60>)
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <_sbrk+0x64>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <_sbrk+0x22>
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <_sbrk+0x64>)
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <_sbrk+0x68>)
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <_sbrk+0x64>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d207      	bcs.n	8003ef4 <_sbrk+0x40>
 8003ee4:	f016 f8d4 	bl	801a090 <__errno>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	220c      	movs	r2, #12
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	e009      	b.n	8003f08 <_sbrk+0x54>
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <_sbrk+0x64>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <_sbrk+0x64>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <_sbrk+0x64>)
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20020000 	.word	0x20020000
 8003f14:	00004000 	.word	0x00004000
 8003f18:	20001468 	.word	0x20001468
 8003f1c:	2000e678 	.word	0x2000e678

08003f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <SystemInit+0x28>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <SystemInit+0x28>)
 8003f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f34:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <SystemInit+0x28>)
 8003f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f3a:	609a      	str	r2, [r3, #8]
#endif
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	e000ed00 	.word	0xe000ed00

08003f4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b092      	sub	sp, #72	; 0x48
 8003f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
 8003f6c:	615a      	str	r2, [r3, #20]
 8003f6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	2220      	movs	r2, #32
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f015 ffe1 	bl	8019f3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f7c:	4b39      	ldr	r3, [pc, #228]	; (8004064 <MX_TIM1_Init+0x118>)
 8003f7e:	4a3a      	ldr	r2, [pc, #232]	; (8004068 <MX_TIM1_Init+0x11c>)
 8003f80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8003f82:	4b38      	ldr	r3, [pc, #224]	; (8004064 <MX_TIM1_Init+0x118>)
 8003f84:	22a7      	movs	r2, #167	; 0xa7
 8003f86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <MX_TIM1_Init+0x118>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003f8e:	4b35      	ldr	r3, [pc, #212]	; (8004064 <MX_TIM1_Init+0x118>)
 8003f90:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003f94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f96:	4b33      	ldr	r3, [pc, #204]	; (8004064 <MX_TIM1_Init+0x118>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f9c:	4b31      	ldr	r3, [pc, #196]	; (8004064 <MX_TIM1_Init+0x118>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa2:	4b30      	ldr	r3, [pc, #192]	; (8004064 <MX_TIM1_Init+0x118>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fa8:	482e      	ldr	r0, [pc, #184]	; (8004064 <MX_TIM1_Init+0x118>)
 8003faa:	f00b fde0 	bl	800fb6e <HAL_TIM_PWM_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003fb4:	f7ff fc1d 	bl	80037f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4827      	ldr	r0, [pc, #156]	; (8004064 <MX_TIM1_Init+0x118>)
 8003fc8:	f00c fd0e 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003fd2:	f7ff fc0e 	bl	80037f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fd6:	2360      	movs	r3, #96	; 0x60
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	481a      	ldr	r0, [pc, #104]	; (8004064 <MX_TIM1_Init+0x118>)
 8003ffc:	f00c f832 	bl	8010064 <HAL_TIM_PWM_ConfigChannel>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004006:	f7ff fbf4 	bl	80037f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800400a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800400e:	2204      	movs	r2, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4814      	ldr	r0, [pc, #80]	; (8004064 <MX_TIM1_Init+0x118>)
 8004014:	f00c f826 	bl	8010064 <HAL_TIM_PWM_ConfigChannel>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800401e:	f7ff fbe8 	bl	80037f2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800403a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800403c:	2300      	movs	r3, #0
 800403e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4807      	ldr	r0, [pc, #28]	; (8004064 <MX_TIM1_Init+0x118>)
 8004046:	f00c fd4b 	bl	8010ae0 <HAL_TIMEx_ConfigBreakDeadTime>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8004050:	f7ff fbcf 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004054:	4803      	ldr	r0, [pc, #12]	; (8004064 <MX_TIM1_Init+0x118>)
 8004056:	f000 fa1f 	bl	8004498 <HAL_TIM_MspPostInit>

}
 800405a:	bf00      	nop
 800405c:	3748      	adds	r7, #72	; 0x48
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	2000146c 	.word	0x2000146c
 8004068:	40010000 	.word	0x40010000

0800406c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08e      	sub	sp, #56	; 0x38
 8004070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004080:	f107 0320 	add.w	r3, r7, #32
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	611a      	str	r2, [r3, #16]
 8004098:	615a      	str	r2, [r3, #20]
 800409a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800409c:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <MX_TIM3_Init+0xdc>)
 800409e:	4a2b      	ldr	r2, [pc, #172]	; (800414c <MX_TIM3_Init+0xe0>)
 80040a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 80040a2:	4b29      	ldr	r3, [pc, #164]	; (8004148 <MX_TIM3_Init+0xdc>)
 80040a4:	22a7      	movs	r2, #167	; 0xa7
 80040a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a8:	4b27      	ldr	r3, [pc, #156]	; (8004148 <MX_TIM3_Init+0xdc>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <MX_TIM3_Init+0xdc>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040b4:	4b24      	ldr	r3, [pc, #144]	; (8004148 <MX_TIM3_Init+0xdc>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <MX_TIM3_Init+0xdc>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040c0:	4821      	ldr	r0, [pc, #132]	; (8004148 <MX_TIM3_Init+0xdc>)
 80040c2:	f00b fbd3 	bl	800f86c <HAL_TIM_Base_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80040cc:	f7ff fb91 	bl	80037f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040da:	4619      	mov	r1, r3
 80040dc:	481a      	ldr	r0, [pc, #104]	; (8004148 <MX_TIM3_Init+0xdc>)
 80040de:	f00c f883 	bl	80101e8 <HAL_TIM_ConfigClockSource>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80040e8:	f7ff fb83 	bl	80037f2 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80040ec:	4816      	ldr	r0, [pc, #88]	; (8004148 <MX_TIM3_Init+0xdc>)
 80040ee:	f00b fce5 	bl	800fabc <HAL_TIM_OC_Init>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80040f8:	f7ff fb7b 	bl	80037f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040fc:	2300      	movs	r3, #0
 80040fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004100:	2300      	movs	r3, #0
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004104:	f107 0320 	add.w	r3, r7, #32
 8004108:	4619      	mov	r1, r3
 800410a:	480f      	ldr	r0, [pc, #60]	; (8004148 <MX_TIM3_Init+0xdc>)
 800410c:	f00c fc6c 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8004116:	f7ff fb6c 	bl	80037f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	2200      	movs	r2, #0
 800412e:	4619      	mov	r1, r3
 8004130:	4805      	ldr	r0, [pc, #20]	; (8004148 <MX_TIM3_Init+0xdc>)
 8004132:	f00b ff3b 	bl	800ffac <HAL_TIM_OC_ConfigChannel>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800413c:	f7ff fb59 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004140:	bf00      	nop
 8004142:	3738      	adds	r7, #56	; 0x38
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200014b4 	.word	0x200014b4
 800414c:	40000400 	.word	0x40000400

08004150 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004156:	f107 0320 	add.w	r3, r7, #32
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	60da      	str	r2, [r3, #12]
 800416c:	611a      	str	r2, [r3, #16]
 800416e:	615a      	str	r2, [r3, #20]
 8004170:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004172:	4b22      	ldr	r3, [pc, #136]	; (80041fc <MX_TIM4_Init+0xac>)
 8004174:	4a22      	ldr	r2, [pc, #136]	; (8004200 <MX_TIM4_Init+0xb0>)
 8004176:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8004178:	4b20      	ldr	r3, [pc, #128]	; (80041fc <MX_TIM4_Init+0xac>)
 800417a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800417e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004180:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <MX_TIM4_Init+0xac>)
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <MX_TIM4_Init+0xac>)
 8004188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800418c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <MX_TIM4_Init+0xac>)
 8004190:	2200      	movs	r2, #0
 8004192:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <MX_TIM4_Init+0xac>)
 8004196:	2200      	movs	r2, #0
 8004198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800419a:	4818      	ldr	r0, [pc, #96]	; (80041fc <MX_TIM4_Init+0xac>)
 800419c:	f00b fce7 	bl	800fb6e <HAL_TIM_PWM_Init>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80041a6:	f7ff fb24 	bl	80037f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041b2:	f107 0320 	add.w	r3, r7, #32
 80041b6:	4619      	mov	r1, r3
 80041b8:	4810      	ldr	r0, [pc, #64]	; (80041fc <MX_TIM4_Init+0xac>)
 80041ba:	f00c fc15 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80041c4:	f7ff fb15 	bl	80037f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041c8:	2360      	movs	r3, #96	; 0x60
 80041ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	2208      	movs	r2, #8
 80041dc:	4619      	mov	r1, r3
 80041de:	4807      	ldr	r0, [pc, #28]	; (80041fc <MX_TIM4_Init+0xac>)
 80041e0:	f00b ff40 	bl	8010064 <HAL_TIM_PWM_ConfigChannel>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80041ea:	f7ff fb02 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80041ee:	4803      	ldr	r0, [pc, #12]	; (80041fc <MX_TIM4_Init+0xac>)
 80041f0:	f000 f952 	bl	8004498 <HAL_TIM_MspPostInit>

}
 80041f4:	bf00      	nop
 80041f6:	3728      	adds	r7, #40	; 0x28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	200014fc 	.word	0x200014fc
 8004200:	40000800 	.word	0x40000800

08004204 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800420a:	f107 0320 	add.w	r3, r7, #32
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	611a      	str	r2, [r3, #16]
 8004222:	615a      	str	r2, [r3, #20]
 8004224:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004226:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <MX_TIM5_Init+0xd8>)
 8004228:	4a2d      	ldr	r2, [pc, #180]	; (80042e0 <MX_TIM5_Init+0xdc>)
 800422a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1317;
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <MX_TIM5_Init+0xd8>)
 800422e:	f240 5225 	movw	r2, #1317	; 0x525
 8004232:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <MX_TIM5_Init+0xd8>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 800423a:	4b28      	ldr	r3, [pc, #160]	; (80042dc <MX_TIM5_Init+0xd8>)
 800423c:	22ff      	movs	r2, #255	; 0xff
 800423e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004240:	4b26      	ldr	r3, [pc, #152]	; (80042dc <MX_TIM5_Init+0xd8>)
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004246:	4b25      	ldr	r3, [pc, #148]	; (80042dc <MX_TIM5_Init+0xd8>)
 8004248:	2280      	movs	r2, #128	; 0x80
 800424a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800424c:	4823      	ldr	r0, [pc, #140]	; (80042dc <MX_TIM5_Init+0xd8>)
 800424e:	f00b fc8e 	bl	800fb6e <HAL_TIM_PWM_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8004258:	f7ff facb 	bl	80037f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425c:	2300      	movs	r3, #0
 800425e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004260:	2300      	movs	r3, #0
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004264:	f107 0320 	add.w	r3, r7, #32
 8004268:	4619      	mov	r1, r3
 800426a:	481c      	ldr	r0, [pc, #112]	; (80042dc <MX_TIM5_Init+0xd8>)
 800426c:	f00c fbbc 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8004276:	f7ff fabc 	bl	80037f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800427a:	2360      	movs	r3, #96	; 0x60
 800427c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004282:	2302      	movs	r3, #2
 8004284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004286:	2304      	movs	r3, #4
 8004288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800428a:	1d3b      	adds	r3, r7, #4
 800428c:	2200      	movs	r2, #0
 800428e:	4619      	mov	r1, r3
 8004290:	4812      	ldr	r0, [pc, #72]	; (80042dc <MX_TIM5_Init+0xd8>)
 8004292:	f00b fee7 	bl	8010064 <HAL_TIM_PWM_ConfigChannel>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800429c:	f7ff faa9 	bl	80037f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	2204      	movs	r2, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	480d      	ldr	r0, [pc, #52]	; (80042dc <MX_TIM5_Init+0xd8>)
 80042a8:	f00b fedc 	bl	8010064 <HAL_TIM_PWM_ConfigChannel>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80042b2:	f7ff fa9e 	bl	80037f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	2208      	movs	r2, #8
 80042ba:	4619      	mov	r1, r3
 80042bc:	4807      	ldr	r0, [pc, #28]	; (80042dc <MX_TIM5_Init+0xd8>)
 80042be:	f00b fed1 	bl	8010064 <HAL_TIM_PWM_ConfigChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80042c8:	f7ff fa93 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80042cc:	4803      	ldr	r0, [pc, #12]	; (80042dc <MX_TIM5_Init+0xd8>)
 80042ce:	f000 f8e3 	bl	8004498 <HAL_TIM_MspPostInit>

}
 80042d2:	bf00      	nop
 80042d4:	3728      	adds	r7, #40	; 0x28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20001544 	.word	0x20001544
 80042e0:	40000c00 	.word	0x40000c00

080042e4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
 80042f8:	615a      	str	r2, [r3, #20]
 80042fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80042fc:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <MX_TIM10_Init+0x94>)
 80042fe:	4a1f      	ldr	r2, [pc, #124]	; (800437c <MX_TIM10_Init+0x98>)
 8004300:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <MX_TIM10_Init+0x94>)
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <MX_TIM10_Init+0x94>)
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800430e:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <MX_TIM10_Init+0x94>)
 8004310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004314:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <MX_TIM10_Init+0x94>)
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <MX_TIM10_Init+0x94>)
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004322:	4815      	ldr	r0, [pc, #84]	; (8004378 <MX_TIM10_Init+0x94>)
 8004324:	f00b faa2 	bl	800f86c <HAL_TIM_Base_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800432e:	f7ff fa60 	bl	80037f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004332:	4811      	ldr	r0, [pc, #68]	; (8004378 <MX_TIM10_Init+0x94>)
 8004334:	f00b fc1b 	bl	800fb6e <HAL_TIM_PWM_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800433e:	f7ff fa58 	bl	80037f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004342:	2360      	movs	r3, #96	; 0x60
 8004344:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	2200      	movs	r2, #0
 8004356:	4619      	mov	r1, r3
 8004358:	4807      	ldr	r0, [pc, #28]	; (8004378 <MX_TIM10_Init+0x94>)
 800435a:	f00b fe83 	bl	8010064 <HAL_TIM_PWM_ConfigChannel>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004364:	f7ff fa45 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004368:	4803      	ldr	r0, [pc, #12]	; (8004378 <MX_TIM10_Init+0x94>)
 800436a:	f000 f895 	bl	8004498 <HAL_TIM_MspPostInit>

}
 800436e:	bf00      	nop
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	2000158c 	.word	0x2000158c
 800437c:	40014400 	.word	0x40014400

08004380 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_TIM_PWM_MspInit+0x8c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d10e      	bne.n	80043b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_TIM_PWM_MspInit+0x90>)
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_TIM_PWM_MspInit+0x90>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6453      	str	r3, [r2, #68]	; 0x44
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_TIM_PWM_MspInit+0x90>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80043ae:	e026      	b.n	80043fe <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_TIM_PWM_MspInit+0x94>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10e      	bne.n	80043d8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <HAL_TIM_PWM_MspInit+0x90>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4a13      	ldr	r2, [pc, #76]	; (8004410 <HAL_TIM_PWM_MspInit+0x90>)
 80043c4:	f043 0304 	orr.w	r3, r3, #4
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_TIM_PWM_MspInit+0x90>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	693b      	ldr	r3, [r7, #16]
}
 80043d6:	e012      	b.n	80043fe <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HAL_TIM_PWM_MspInit+0x98>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10d      	bne.n	80043fe <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_TIM_PWM_MspInit+0x90>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_TIM_PWM_MspInit+0x90>)
 80043ec:	f043 0308 	orr.w	r3, r3, #8
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <HAL_TIM_PWM_MspInit+0x90>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40023800 	.word	0x40023800
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00

0800441c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a18      	ldr	r2, [pc, #96]	; (800448c <HAL_TIM_Base_MspInit+0x70>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d116      	bne.n	800445c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	4b17      	ldr	r3, [pc, #92]	; (8004490 <HAL_TIM_Base_MspInit+0x74>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a16      	ldr	r2, [pc, #88]	; (8004490 <HAL_TIM_Base_MspInit+0x74>)
 8004438:	f043 0302 	orr.w	r3, r3, #2
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <HAL_TIM_Base_MspInit+0x74>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800444a:	2200      	movs	r2, #0
 800444c:	2105      	movs	r1, #5
 800444e:	201d      	movs	r0, #29
 8004450:	f006 fade 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004454:	201d      	movs	r0, #29
 8004456:	f006 faf7 	bl	800aa48 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800445a:	e012      	b.n	8004482 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0c      	ldr	r2, [pc, #48]	; (8004494 <HAL_TIM_Base_MspInit+0x78>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d10d      	bne.n	8004482 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_TIM_Base_MspInit+0x74>)
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	4a08      	ldr	r2, [pc, #32]	; (8004490 <HAL_TIM_Base_MspInit+0x74>)
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004474:	6453      	str	r3, [r2, #68]	; 0x44
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_TIM_Base_MspInit+0x74>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40000400 	.word	0x40000400
 8004490:	40023800 	.word	0x40023800
 8004494:	40014400 	.word	0x40014400

08004498 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 031c 	add.w	r3, r7, #28
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a49      	ldr	r2, [pc, #292]	; (80045dc <HAL_TIM_MspPostInit+0x144>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d11f      	bne.n	80044fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	4b48      	ldr	r3, [pc, #288]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a47      	ldr	r2, [pc, #284]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 80044c4:	f043 0310 	orr.w	r3, r3, #16
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b45      	ldr	r3, [pc, #276]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80044d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80044da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	2302      	movs	r3, #2
 80044de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e4:	2300      	movs	r3, #0
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80044e8:	2301      	movs	r3, #1
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044ec:	f107 031c 	add.w	r3, r7, #28
 80044f0:	4619      	mov	r1, r3
 80044f2:	483c      	ldr	r0, [pc, #240]	; (80045e4 <HAL_TIM_MspPostInit+0x14c>)
 80044f4:	f006 fec4 	bl	800b280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80044f8:	e06c      	b.n	80045d4 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a3a      	ldr	r2, [pc, #232]	; (80045e8 <HAL_TIM_MspPostInit+0x150>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d11f      	bne.n	8004544 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	4a34      	ldr	r2, [pc, #208]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 800450e:	f043 0308 	orr.w	r3, r3, #8
 8004512:	6313      	str	r3, [r2, #48]	; 0x30
 8004514:	4b32      	ldr	r3, [pc, #200]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8004520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452e:	2300      	movs	r3, #0
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004532:	2302      	movs	r3, #2
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004536:	f107 031c 	add.w	r3, r7, #28
 800453a:	4619      	mov	r1, r3
 800453c:	482b      	ldr	r0, [pc, #172]	; (80045ec <HAL_TIM_MspPostInit+0x154>)
 800453e:	f006 fe9f 	bl	800b280 <HAL_GPIO_Init>
}
 8004542:	e047      	b.n	80045d4 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM5)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a29      	ldr	r2, [pc, #164]	; (80045f0 <HAL_TIM_MspPostInit+0x158>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d11f      	bne.n	800458e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 8004558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GREEN_LED_TIM_Pin|RED_LED_TIM_Pin|BLUE_LED_TIM_Pin;
 800456a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800456e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004578:	2300      	movs	r3, #0
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800457c:	2302      	movs	r3, #2
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004580:	f107 031c 	add.w	r3, r7, #28
 8004584:	4619      	mov	r1, r3
 8004586:	481b      	ldr	r0, [pc, #108]	; (80045f4 <HAL_TIM_MspPostInit+0x15c>)
 8004588:	f006 fe7a 	bl	800b280 <HAL_GPIO_Init>
}
 800458c:	e022      	b.n	80045d4 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM10)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <HAL_TIM_MspPostInit+0x160>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d11d      	bne.n	80045d4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	4a0f      	ldr	r2, [pc, #60]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 80045a2:	f043 0320 	orr.w	r3, r3, #32
 80045a6:	6313      	str	r3, [r2, #48]	; 0x30
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <HAL_TIM_MspPostInit+0x148>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_HEAT_TIM_Pin;
 80045b4:	2340      	movs	r3, #64	; 0x40
 80045b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b8:	2302      	movs	r3, #2
 80045ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80045c4:	2303      	movs	r3, #3
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMU_HEAT_TIM_GPIO_Port, &GPIO_InitStruct);
 80045c8:	f107 031c 	add.w	r3, r7, #28
 80045cc:	4619      	mov	r1, r3
 80045ce:	480b      	ldr	r0, [pc, #44]	; (80045fc <HAL_TIM_MspPostInit+0x164>)
 80045d0:	f006 fe56 	bl	800b280 <HAL_GPIO_Init>
}
 80045d4:	bf00      	nop
 80045d6:	3730      	adds	r7, #48	; 0x30
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40020c00 	.word	0x40020c00
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40021c00 	.word	0x40021c00
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40021400 	.word	0x40021400

08004600 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <MX_USART1_UART_Init+0x50>)
 8004608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <MX_USART1_UART_Init+0x4c>)
 800460c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004612:	4b0e      	ldr	r3, [pc, #56]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <MX_USART1_UART_Init+0x4c>)
 800461a:	2200      	movs	r2, #0
 800461c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004620:	2200      	movs	r2, #0
 8004622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004626:	220c      	movs	r2, #12
 8004628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <MX_USART1_UART_Init+0x4c>)
 800462c:	2200      	movs	r2, #0
 800462e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004632:	2200      	movs	r2, #0
 8004634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004636:	4805      	ldr	r0, [pc, #20]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004638:	f00c fab8 	bl	8010bac <HAL_UART_Init>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004642:	f7ff f8d6 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	200015d4 	.word	0x200015d4
 8004650:	40011000 	.word	0x40011000

08004654 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <MX_USART3_UART_Init+0x4c>)
 800465a:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <MX_USART3_UART_Init+0x50>)
 800465c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <MX_USART3_UART_Init+0x4c>)
 8004660:	4a11      	ldr	r2, [pc, #68]	; (80046a8 <MX_USART3_UART_Init+0x54>)
 8004662:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <MX_USART3_UART_Init+0x4c>)
 8004666:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800466a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <MX_USART3_UART_Init+0x4c>)
 800466e:	2200      	movs	r2, #0
 8004670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <MX_USART3_UART_Init+0x4c>)
 8004674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004678:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <MX_USART3_UART_Init+0x4c>)
 800467c:	220c      	movs	r2, #12
 800467e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <MX_USART3_UART_Init+0x4c>)
 8004682:	2200      	movs	r2, #0
 8004684:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <MX_USART3_UART_Init+0x4c>)
 8004688:	2200      	movs	r2, #0
 800468a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800468c:	4804      	ldr	r0, [pc, #16]	; (80046a0 <MX_USART3_UART_Init+0x4c>)
 800468e:	f00c fa8d 	bl	8010bac <HAL_UART_Init>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8004698:	f7ff f8ab 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20001618 	.word	0x20001618
 80046a4:	40004800 	.word	0x40004800
 80046a8:	000186a0 	.word	0x000186a0

080046ac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80046b0:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <MX_USART6_UART_Init+0x4c>)
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <MX_USART6_UART_Init+0x50>)
 80046b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <MX_USART6_UART_Init+0x4c>)
 80046b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80046be:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <MX_USART6_UART_Init+0x4c>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <MX_USART6_UART_Init+0x4c>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <MX_USART6_UART_Init+0x4c>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <MX_USART6_UART_Init+0x4c>)
 80046d2:	220c      	movs	r2, #12
 80046d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046d6:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <MX_USART6_UART_Init+0x4c>)
 80046d8:	2200      	movs	r2, #0
 80046da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <MX_USART6_UART_Init+0x4c>)
 80046de:	2200      	movs	r2, #0
 80046e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80046e2:	4805      	ldr	r0, [pc, #20]	; (80046f8 <MX_USART6_UART_Init+0x4c>)
 80046e4:	f00c fa62 	bl	8010bac <HAL_UART_Init>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80046ee:	f7ff f880 	bl	80037f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	2000165c 	.word	0x2000165c
 80046fc:	40011400 	.word	0x40011400

08004700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08e      	sub	sp, #56	; 0x38
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a78      	ldr	r2, [pc, #480]	; (8004900 <HAL_UART_MspInit+0x200>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f040 8083 	bne.w	800482a <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004724:	2300      	movs	r3, #0
 8004726:	623b      	str	r3, [r7, #32]
 8004728:	4b76      	ldr	r3, [pc, #472]	; (8004904 <HAL_UART_MspInit+0x204>)
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	4a75      	ldr	r2, [pc, #468]	; (8004904 <HAL_UART_MspInit+0x204>)
 800472e:	f043 0310 	orr.w	r3, r3, #16
 8004732:	6453      	str	r3, [r2, #68]	; 0x44
 8004734:	4b73      	ldr	r3, [pc, #460]	; (8004904 <HAL_UART_MspInit+0x204>)
 8004736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	4b6f      	ldr	r3, [pc, #444]	; (8004904 <HAL_UART_MspInit+0x204>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	4a6e      	ldr	r2, [pc, #440]	; (8004904 <HAL_UART_MspInit+0x204>)
 800474a:	f043 0302 	orr.w	r3, r3, #2
 800474e:	6313      	str	r3, [r2, #48]	; 0x30
 8004750:	4b6c      	ldr	r3, [pc, #432]	; (8004904 <HAL_UART_MspInit+0x204>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800475c:	2300      	movs	r3, #0
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	4b68      	ldr	r3, [pc, #416]	; (8004904 <HAL_UART_MspInit+0x204>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	4a67      	ldr	r2, [pc, #412]	; (8004904 <HAL_UART_MspInit+0x204>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6313      	str	r3, [r2, #48]	; 0x30
 800476c:	4b65      	ldr	r3, [pc, #404]	; (8004904 <HAL_UART_MspInit+0x204>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477c:	2302      	movs	r3, #2
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	2300      	movs	r3, #0
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004784:	2303      	movs	r3, #3
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004788:	2307      	movs	r3, #7
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800478c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004790:	4619      	mov	r1, r3
 8004792:	485d      	ldr	r0, [pc, #372]	; (8004908 <HAL_UART_MspInit+0x208>)
 8004794:	f006 fd74 	bl	800b280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479e:	2302      	movs	r3, #2
 80047a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a6:	2303      	movs	r3, #3
 80047a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80047aa:	2307      	movs	r3, #7
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b2:	4619      	mov	r1, r3
 80047b4:	4855      	ldr	r0, [pc, #340]	; (800490c <HAL_UART_MspInit+0x20c>)
 80047b6:	f006 fd63 	bl	800b280 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80047ba:	4b55      	ldr	r3, [pc, #340]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047bc:	4a55      	ldr	r2, [pc, #340]	; (8004914 <HAL_UART_MspInit+0x214>)
 80047be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80047c0:	4b53      	ldr	r3, [pc, #332]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c8:	4b51      	ldr	r3, [pc, #324]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ce:	4b50      	ldr	r3, [pc, #320]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047d4:	4b4e      	ldr	r3, [pc, #312]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047dc:	4b4c      	ldr	r3, [pc, #304]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047de:	2200      	movs	r2, #0
 80047e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e2:	4b4b      	ldr	r3, [pc, #300]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80047e8:	4b49      	ldr	r3, [pc, #292]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047f0:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f6:	4b46      	ldr	r3, [pc, #280]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80047fc:	4844      	ldr	r0, [pc, #272]	; (8004910 <HAL_UART_MspInit+0x210>)
 80047fe:	f006 f931 	bl	800aa64 <HAL_DMA_Init>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004808:	f7fe fff3 	bl	80037f2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a40      	ldr	r2, [pc, #256]	; (8004910 <HAL_UART_MspInit+0x210>)
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
 8004812:	4a3f      	ldr	r2, [pc, #252]	; (8004910 <HAL_UART_MspInit+0x210>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004818:	2200      	movs	r2, #0
 800481a:	2105      	movs	r1, #5
 800481c:	2025      	movs	r0, #37	; 0x25
 800481e:	f006 f8f7 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004822:	2025      	movs	r0, #37	; 0x25
 8004824:	f006 f910 	bl	800aa48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004828:	e116      	b.n	8004a58 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART3)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3a      	ldr	r2, [pc, #232]	; (8004918 <HAL_UART_MspInit+0x218>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d179      	bne.n	8004928 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	4b32      	ldr	r3, [pc, #200]	; (8004904 <HAL_UART_MspInit+0x204>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	4a31      	ldr	r2, [pc, #196]	; (8004904 <HAL_UART_MspInit+0x204>)
 800483e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004842:	6413      	str	r3, [r2, #64]	; 0x40
 8004844:	4b2f      	ldr	r3, [pc, #188]	; (8004904 <HAL_UART_MspInit+0x204>)
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	4b2b      	ldr	r3, [pc, #172]	; (8004904 <HAL_UART_MspInit+0x204>)
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <HAL_UART_MspInit+0x204>)
 800485a:	f043 0304 	orr.w	r3, r3, #4
 800485e:	6313      	str	r3, [r2, #48]	; 0x30
 8004860:	4b28      	ldr	r3, [pc, #160]	; (8004904 <HAL_UART_MspInit+0x204>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800486c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004872:	2302      	movs	r3, #2
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487a:	2303      	movs	r3, #3
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800487e:	2307      	movs	r3, #7
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004886:	4619      	mov	r1, r3
 8004888:	4824      	ldr	r0, [pc, #144]	; (800491c <HAL_UART_MspInit+0x21c>)
 800488a:	f006 fcf9 	bl	800b280 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <HAL_UART_MspInit+0x220>)
 8004890:	4a24      	ldr	r2, [pc, #144]	; (8004924 <HAL_UART_MspInit+0x224>)
 8004892:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004894:	4b22      	ldr	r3, [pc, #136]	; (8004920 <HAL_UART_MspInit+0x220>)
 8004896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800489a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <HAL_UART_MspInit+0x220>)
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048a2:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048a8:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80048bc:	4b18      	ldr	r3, [pc, #96]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048c4:	4b16      	ldr	r3, [pc, #88]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048ca:	4b15      	ldr	r3, [pc, #84]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80048d0:	4813      	ldr	r0, [pc, #76]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048d2:	f006 f8c7 	bl	800aa64 <HAL_DMA_Init>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80048dc:	f7fe ff89 	bl	80037f2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a0f      	ldr	r2, [pc, #60]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38
 80048e6:	4a0e      	ldr	r2, [pc, #56]	; (8004920 <HAL_UART_MspInit+0x220>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80048ec:	2200      	movs	r2, #0
 80048ee:	2105      	movs	r1, #5
 80048f0:	2027      	movs	r0, #39	; 0x27
 80048f2:	f006 f88d 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80048f6:	2027      	movs	r0, #39	; 0x27
 80048f8:	f006 f8a6 	bl	800aa48 <HAL_NVIC_EnableIRQ>
}
 80048fc:	e0ac      	b.n	8004a58 <HAL_UART_MspInit+0x358>
 80048fe:	bf00      	nop
 8004900:	40011000 	.word	0x40011000
 8004904:	40023800 	.word	0x40023800
 8004908:	40020400 	.word	0x40020400
 800490c:	40020000 	.word	0x40020000
 8004910:	200016a0 	.word	0x200016a0
 8004914:	40026488 	.word	0x40026488
 8004918:	40004800 	.word	0x40004800
 800491c:	40020800 	.word	0x40020800
 8004920:	20001700 	.word	0x20001700
 8004924:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a4c      	ldr	r2, [pc, #304]	; (8004a60 <HAL_UART_MspInit+0x360>)
 800492e:	4293      	cmp	r3, r2
 8004930:	f040 8092 	bne.w	8004a58 <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	4b4a      	ldr	r3, [pc, #296]	; (8004a64 <HAL_UART_MspInit+0x364>)
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	4a49      	ldr	r2, [pc, #292]	; (8004a64 <HAL_UART_MspInit+0x364>)
 800493e:	f043 0320 	orr.w	r3, r3, #32
 8004942:	6453      	str	r3, [r2, #68]	; 0x44
 8004944:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_UART_MspInit+0x364>)
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <HAL_UART_MspInit+0x364>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	4a42      	ldr	r2, [pc, #264]	; (8004a64 <HAL_UART_MspInit+0x364>)
 800495a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495e:	6313      	str	r3, [r2, #48]	; 0x30
 8004960:	4b40      	ldr	r3, [pc, #256]	; (8004a64 <HAL_UART_MspInit+0x364>)
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800496c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004972:	2302      	movs	r3, #2
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004976:	2300      	movs	r3, #0
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800497a:	2303      	movs	r3, #3
 800497c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800497e:	2308      	movs	r3, #8
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004986:	4619      	mov	r1, r3
 8004988:	4837      	ldr	r0, [pc, #220]	; (8004a68 <HAL_UART_MspInit+0x368>)
 800498a:	f006 fc79 	bl	800b280 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800498e:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 8004990:	4a37      	ldr	r2, [pc, #220]	; (8004a70 <HAL_UART_MspInit+0x370>)
 8004992:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004994:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 8004996:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800499a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800499c:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 800499e:	2200      	movs	r2, #0
 80049a0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a2:	4b32      	ldr	r3, [pc, #200]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049a8:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ae:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049b0:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049b6:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80049bc:	4b2b      	ldr	r3, [pc, #172]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049c2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049c4:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049ca:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80049d0:	4826      	ldr	r0, [pc, #152]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049d2:	f006 f847 	bl	800aa64 <HAL_DMA_Init>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 80049dc:	f7fe ff09 	bl	80037f2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
 80049e6:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <HAL_UART_MspInit+0x36c>)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <HAL_UART_MspInit+0x374>)
 80049ee:	4a22      	ldr	r2, [pc, #136]	; (8004a78 <HAL_UART_MspInit+0x378>)
 80049f0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_UART_MspInit+0x374>)
 80049f4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80049f8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049fa:	4b1e      	ldr	r3, [pc, #120]	; (8004a74 <HAL_UART_MspInit+0x374>)
 80049fc:	2240      	movs	r2, #64	; 0x40
 80049fe:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a00:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a06:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a0c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a0e:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a14:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a20:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a26:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004a2c:	4811      	ldr	r0, [pc, #68]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a2e:	f006 f819 	bl	800aa64 <HAL_DMA_Init>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8004a38:	f7fe fedb 	bl	80037f2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0d      	ldr	r2, [pc, #52]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a40:	635a      	str	r2, [r3, #52]	; 0x34
 8004a42:	4a0c      	ldr	r2, [pc, #48]	; (8004a74 <HAL_UART_MspInit+0x374>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2105      	movs	r1, #5
 8004a4c:	2047      	movs	r0, #71	; 0x47
 8004a4e:	f005 ffdf 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004a52:	2047      	movs	r0, #71	; 0x47
 8004a54:	f005 fff8 	bl	800aa48 <HAL_NVIC_EnableIRQ>
}
 8004a58:	bf00      	nop
 8004a5a:	3738      	adds	r7, #56	; 0x38
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40011400 	.word	0x40011400
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40021800 	.word	0x40021800
 8004a6c:	20001760 	.word	0x20001760
 8004a70:	40026428 	.word	0x40026428
 8004a74:	200017c0 	.word	0x200017c0
 8004a78:	400264a0 	.word	0x400264a0

08004a7c <Reset_Handler>:
 8004a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ab4 <LoopFillZerobss+0x14>
 8004a80:	2100      	movs	r1, #0
 8004a82:	e003      	b.n	8004a8c <LoopCopyDataInit>

08004a84 <CopyDataInit>:
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <LoopFillZerobss+0x18>)
 8004a86:	585b      	ldr	r3, [r3, r1]
 8004a88:	5043      	str	r3, [r0, r1]
 8004a8a:	3104      	adds	r1, #4

08004a8c <LoopCopyDataInit>:
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <LoopFillZerobss+0x1c>)
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <LoopFillZerobss+0x20>)
 8004a90:	1842      	adds	r2, r0, r1
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d3f6      	bcc.n	8004a84 <CopyDataInit>
 8004a96:	4a0b      	ldr	r2, [pc, #44]	; (8004ac4 <LoopFillZerobss+0x24>)
 8004a98:	e002      	b.n	8004aa0 <LoopFillZerobss>

08004a9a <FillZerobss>:
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f842 3b04 	str.w	r3, [r2], #4

08004aa0 <LoopFillZerobss>:
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <LoopFillZerobss+0x28>)
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3f9      	bcc.n	8004a9a <FillZerobss>
 8004aa6:	f7ff fa3b 	bl	8003f20 <SystemInit>
 8004aaa:	f015 faf7 	bl	801a09c <__libc_init_array>
 8004aae:	f7fe fdf5 	bl	800369c <main>
 8004ab2:	4770      	bx	lr
 8004ab4:	20020000 	.word	0x20020000
 8004ab8:	08020308 	.word	0x08020308
 8004abc:	20000000 	.word	0x20000000
 8004ac0:	200002e8 	.word	0x200002e8
 8004ac4:	200002e8 	.word	0x200002e8
 8004ac8:	2000e678 	.word	0x2000e678

08004acc <ADC_IRQHandler>:
 8004acc:	e7fe      	b.n	8004acc <ADC_IRQHandler>
	...

08004ad0 <buzzing_task>:
 4, 3, 1, 8
 };
*/

//fun
void buzzing_task(void *argument) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000.0 / (4 * TEMPO);
 8004ad8:	4b9f      	ldr	r3, [pc, #636]	; (8004d58 <buzzing_task+0x288>)
 8004ada:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004adc:	4b9f      	ldr	r3, [pc, #636]	; (8004d5c <buzzing_task+0x28c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f107 010d 	add.w	r1, r7, #13
 8004ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f011 f9e3 	bl	8015eb4 <xQueueReceive>
		switch (buzzing_type) {
 8004aee:	7b7b      	ldrb	r3, [r7, #13]
 8004af0:	2b0a      	cmp	r3, #10
 8004af2:	f200 8120 	bhi.w	8004d36 <buzzing_task+0x266>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <buzzing_task+0x2c>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b29 	.word	0x08004b29
 8004b00:	08004bcf 	.word	0x08004bcf
 8004b04:	08004c01 	.word	0x08004c01
 8004b08:	08004c85 	.word	0x08004c85
 8004b0c:	08004c53 	.word	0x08004c53
 8004b10:	08004cbd 	.word	0x08004cbd
 8004b14:	08004d17 	.word	0x08004d17
 8004b18:	08004d27 	.word	0x08004d27
 8004b1c:	08004ce9 	.word	0x08004ce9
 8004b20:	08004cf9 	.word	0x08004cf9
 8004b24:	08004d09 	.word	0x08004d09
		case song:
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004b28:	2300      	movs	r3, #0
 8004b2a:	82fb      	strh	r3, [r7, #22]
 8004b2c:	e04b      	b.n	8004bc6 <buzzing_task+0xf6>
				last_wake_time = xTaskGetTickCount();
 8004b2e:	f011 ff97 	bl	8016a60 <xTaskGetTickCount>
 8004b32:	4603      	mov	r3, r0
 8004b34:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 8004b36:	8afb      	ldrh	r3, [r7, #22]
 8004b38:	4a89      	ldr	r2, [pc, #548]	; (8004d60 <buzzing_task+0x290>)
 8004b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fc fb02 	bl	8001148 <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 8004b44:	8afb      	ldrh	r3, [r7, #22]
 8004b46:	4a87      	ldr	r2, [pc, #540]	; (8004d64 <buzzing_task+0x294>)
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	ed93 7a00 	vldr	s14, [r3]
 8004b50:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5c:	ee17 3a90 	vmov	r3, s15
 8004b60:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time*0.95);
 8004b62:	89fb      	ldrh	r3, [r7, #14]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fb fcdd 	bl	8000524 <__aeabi_i2d>
 8004b6a:	a377      	add	r3, pc, #476	; (adr r3, 8004d48 <buzzing_task+0x278>)
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f7fb fd42 	bl	80005f8 <__aeabi_dmul>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f7fc f814 	bl	8000ba8 <__aeabi_d2uiz>
 8004b80:	4602      	mov	r2, r0
 8004b82:	f107 0308 	add.w	r3, r7, #8
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f011 fd9b 	bl	80166c4 <vTaskDelayUntil>
				buzzer(0);
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f7fc fada 	bl	8001148 <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time*0.05);
 8004b94:	89fb      	ldrh	r3, [r7, #14]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fb fcc4 	bl	8000524 <__aeabi_i2d>
 8004b9c:	a36c      	add	r3, pc, #432	; (adr r3, 8004d50 <buzzing_task+0x280>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	f7fb fd29 	bl	80005f8 <__aeabi_dmul>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	f7fb fffb 	bl	8000ba8 <__aeabi_d2uiz>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	f107 0308 	add.w	r3, r7, #8
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f011 fd82 	bl	80166c4 <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004bc0:	8afb      	ldrh	r3, [r7, #22]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	82fb      	strh	r3, [r7, #22]
 8004bc6:	8afb      	ldrh	r3, [r7, #22]
 8004bc8:	2b7c      	cmp	r3, #124	; 0x7c
 8004bca:	d9b0      	bls.n	8004b2e <buzzing_task+0x5e>
			}
			break;
 8004bcc:	e0b3      	b.n	8004d36 <buzzing_task+0x266>
		case ok:
			last_wake_time = xTaskGetTickCount();
 8004bce:	f011 ff47 	bl	8016a60 <xTaskGetTickCount>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004bd6:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004bda:	f7fc fab5 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004bde:	2064      	movs	r0, #100	; 0x64
 8004be0:	f011 fdee 	bl	80167c0 <vTaskDelay>
			buzzer(0);
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7fc faaf 	bl	8001148 <buzzer>
			vTaskDelay(GAP_TIME);
 8004bea:	2032      	movs	r0, #50	; 0x32
 8004bec:	f011 fde8 	bl	80167c0 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004bf0:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004bf4:	f7fc faa8 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004bf8:	2064      	movs	r0, #100	; 0x64
 8004bfa:	f011 fde1 	bl	80167c0 <vTaskDelay>
			break;
 8004bfe:	e09a      	b.n	8004d36 <buzzing_task+0x266>
		case not_ok:
			last_wake_time = xTaskGetTickCount();
 8004c00:	f011 ff2e 	bl	8016a60 <xTaskGetTickCount>
 8004c04:	4603      	mov	r3, r0
 8004c06:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004c08:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004c0c:	f7fc fa9c 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c10:	2064      	movs	r0, #100	; 0x64
 8004c12:	f011 fdd5 	bl	80167c0 <vTaskDelay>
			buzzer(0);
 8004c16:	2000      	movs	r0, #0
 8004c18:	f7fc fa96 	bl	8001148 <buzzer>
			vTaskDelay(GAP_TIME);
 8004c1c:	2032      	movs	r0, #50	; 0x32
 8004c1e:	f011 fdcf 	bl	80167c0 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004c22:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004c26:	f7fc fa8f 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c2a:	2064      	movs	r0, #100	; 0x64
 8004c2c:	f011 fdc8 	bl	80167c0 <vTaskDelay>
			buzzer(0);
 8004c30:	2000      	movs	r0, #0
 8004c32:	f7fc fa89 	bl	8001148 <buzzer>
			vTaskDelay(GAP_TIME);
 8004c36:	2032      	movs	r0, #50	; 0x32
 8004c38:	f011 fdc2 	bl	80167c0 <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8004c3c:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004c40:	f7fc fa82 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c44:	2064      	movs	r0, #100	; 0x64
 8004c46:	f011 fdbb 	bl	80167c0 <vTaskDelay>
			buzzer(0);
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f7fc fa7c 	bl	8001148 <buzzer>
			break;
 8004c50:	e071      	b.n	8004d36 <buzzing_task+0x266>
		case control_control:
			last_wake_time = xTaskGetTickCount();
 8004c52:	f011 ff05 	bl	8016a60 <xTaskGetTickCount>
 8004c56:	4603      	mov	r3, r0
 8004c58:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 8004c5a:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004c5e:	f7fc fa73 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c62:	2064      	movs	r0, #100	; 0x64
 8004c64:	f011 fdac 	bl	80167c0 <vTaskDelay>
			buzzer(0);
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f7fc fa6d 	bl	8001148 <buzzer>
			vTaskDelay(GAP_TIME);
 8004c6e:	2032      	movs	r0, #50	; 0x32
 8004c70:	f011 fda6 	bl	80167c0 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004c74:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004c78:	f7fc fa66 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c7c:	2064      	movs	r0, #100	; 0x64
 8004c7e:	f011 fd9f 	bl	80167c0 <vTaskDelay>
			break;
 8004c82:	e058      	b.n	8004d36 <buzzing_task+0x266>
		case control_keyboard:
			last_wake_time = xTaskGetTickCount();
 8004c84:	f011 feec 	bl	8016a60 <xTaskGetTickCount>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004c8c:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004c90:	f7fc fa5a 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004c94:	2064      	movs	r0, #100	; 0x64
 8004c96:	f011 fd93 	bl	80167c0 <vTaskDelay>
			buzzer(0);
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f7fc fa54 	bl	8001148 <buzzer>
			vTaskDelay(GAP_TIME);
 8004ca0:	2032      	movs	r0, #50	; 0x32
 8004ca2:	f011 fd8d 	bl	80167c0 <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8004ca6:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004caa:	f7fc fa4d 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004cae:	2064      	movs	r0, #100	; 0x64
 8004cb0:	f011 fd86 	bl	80167c0 <vTaskDelay>
			buzzer(BUZZ_TIME);
 8004cb4:	2064      	movs	r0, #100	; 0x64
 8004cb6:	f7fc fa47 	bl	8001148 <buzzer>
			break;
 8004cba:	e03c      	b.n	8004d36 <buzzing_task+0x266>

		case control_sbc:
			buzzer(BUZZER_LOW);
 8004cbc:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004cc0:	f7fc fa42 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004cc4:	2064      	movs	r0, #100	; 0x64
 8004cc6:	f011 fd7b 	bl	80167c0 <vTaskDelay>
			buzzer((BUZZER_HIGH+BUZZER_LOW)/2);
 8004cca:	f240 404c 	movw	r0, #1100	; 0x44c
 8004cce:	f7fc fa3b 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004cd2:	2064      	movs	r0, #100	; 0x64
 8004cd4:	f011 fd74 	bl	80167c0 <vTaskDelay>
			buzzer(BUZZER_HIGH);;
 8004cd8:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004cdc:	f7fc fa34 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004ce0:	2064      	movs	r0, #100	; 0x64
 8004ce2:	f011 fd6d 	bl	80167c0 <vTaskDelay>
			break;
 8004ce6:	e026      	b.n	8004d36 <buzzing_task+0x266>


		case bz_debug_low:
			buzzer(DEBUG_LOW_FREQ);
 8004ce8:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8004cec:	f7fc fa2c 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004cf0:	2064      	movs	r0, #100	; 0x64
 8004cf2:	f011 fd65 	bl	80167c0 <vTaskDelay>
			break;
 8004cf6:	e01e      	b.n	8004d36 <buzzing_task+0x266>

		case bz_debug_high:
			buzzer(DEBUG_HIGH_FREQ);
 8004cf8:	f640 1082 	movw	r0, #2434	; 0x982
 8004cfc:	f7fc fa24 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d00:	2064      	movs	r0, #100	; 0x64
 8004d02:	f011 fd5d 	bl	80167c0 <vTaskDelay>
			break;
 8004d06:	e016      	b.n	8004d36 <buzzing_task+0x266>

		case bz_debug_rest:
			buzzer(0);
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f7fc fa1d 	bl	8001148 <buzzer>
			vTaskDelay(GAP_TIME);
 8004d0e:	2032      	movs	r0, #50	; 0x32
 8004d10:	f011 fd56 	bl	80167c0 <vTaskDelay>
			break;
 8004d14:	e00f      	b.n	8004d36 <buzzing_task+0x266>
		case bz_high:
			buzzer(BUZZER_HIGH);
 8004d16:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004d1a:	f7fc fa15 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d1e:	2064      	movs	r0, #100	; 0x64
 8004d20:	f011 fd4e 	bl	80167c0 <vTaskDelay>
			break;
 8004d24:	e007      	b.n	8004d36 <buzzing_task+0x266>
		case bz_low:
			buzzer(BUZZER_LOW);
 8004d26:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004d2a:	f7fc fa0d 	bl	8001148 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d2e:	2064      	movs	r0, #100	; 0x64
 8004d30:	f011 fd46 	bl	80167c0 <vTaskDelay>
			break;
 8004d34:	bf00      	nop
		}
		buzzer(0);
 8004d36:	2000      	movs	r0, #0
 8004d38:	f7fc fa06 	bl	8001148 <buzzer>
		vTaskDelay(GAP_TIME);
 8004d3c:	2032      	movs	r0, #50	; 0x32
 8004d3e:	f011 fd3f 	bl	80167c0 <vTaskDelay>
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004d42:	e6cb      	b.n	8004adc <buzzing_task+0xc>
 8004d44:	f3af 8000 	nop.w
 8004d48:	66666666 	.word	0x66666666
 8004d4c:	3fee6666 	.word	0x3fee6666
 8004d50:	9999999a 	.word	0x9999999a
 8004d54:	3fa99999 	.word	0x3fa99999
 8004d58:	42fa0000 	.word	0x42fa0000
 8004d5c:	20000480 	.word	0x20000480
 8004d60:	0801f990 	.word	0x0801f990
 8004d64:	0801fa8c 	.word	0x0801fa8c

08004d68 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	; 0x30
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	//check which CAN bus received it
	//required because the 2 canbuses use seperate FIFOs for receive
	if (hcan->Instance == CAN1) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <can_ISR+0x8c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d118      	bne.n	8004dac <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 8004d7a:	210e      	movs	r1, #14
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f005 fb42 	bl	800a406 <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 8004d82:	f107 020c 	add.w	r2, r7, #12
 8004d86:	f107 0314 	add.w	r3, r7, #20
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	481a      	ldr	r0, [pc, #104]	; (8004df8 <can_ISR+0x90>)
 8004d8e:	f7fc fa21 	bl	80011d4 <can1_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId, rx_buffer);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f107 020c 	add.w	r2, r7, #12
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4817      	ldr	r0, [pc, #92]	; (8004dfc <can_ISR+0x94>)
 8004d9e:	f000 f833 	bl	8004e08 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004da2:	210e      	movs	r1, #14
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f005 fb08 	bl	800a3ba <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 8004daa:	e01e      	b.n	8004dea <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <can_ISR+0x98>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d119      	bne.n	8004dea <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 8004db6:	2170      	movs	r1, #112	; 0x70
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f005 fb24 	bl	800a406 <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8004dbe:	f107 020c 	add.w	r2, r7, #12
 8004dc2:	f107 0314 	add.w	r3, r7, #20
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	480e      	ldr	r0, [pc, #56]	; (8004e04 <can_ISR+0x9c>)
 8004dca:	f7fc fa14 	bl	80011f6 <can2_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId + 12, rx_buffer);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f107 020c 	add.w	r2, r7, #12
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4807      	ldr	r0, [pc, #28]	; (8004dfc <can_ISR+0x94>)
 8004dde:	f000 f813 	bl	8004e08 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004de2:	2170      	movs	r1, #112	; 0x70
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f005 fae8 	bl	800a3ba <HAL_CAN_ActivateNotification>
}
 8004dea:	bf00      	nop
 8004dec:	3730      	adds	r7, #48	; 0x30
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40006400 	.word	0x40006400
 8004df8:	200003f0 	.word	0x200003f0
 8004dfc:	20001820 	.word	0x20001820
 8004e00:	40006800 	.word	0x40006800
 8004e04:	20000418 	.word	0x20000418

08004e08 <convert_raw_can_data>:
 * in the struct for the motor.
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id, uint8_t *rx_buffer) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	460b      	mov	r3, r1
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	817b      	strh	r3, [r7, #10]
	uint16_t idnum = motor_id - 0x201;
 8004e16:	897b      	ldrh	r3, [r7, #10]
 8004e18:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8004e1c:	847b      	strh	r3, [r7, #34]	; 0x22

	//if idnum > 24, it's not a DJI motor. Add in a seperate processing function if other CAN devices are added
	if (idnum > 24)
 8004e1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e20:	2b18      	cmp	r3, #24
 8004e22:	f200 8156 	bhi.w	80050d2 <convert_raw_can_data+0x2ca>
	{
		return;
	}
	motor_data_t* curr_motor = &can_motor_data[idnum];
 8004e26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e28:	22a4      	movs	r2, #164	; 0xa4
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	61fb      	str	r3, [r7, #28]
	//motor must be initialised in motor_config.c first
	if (curr_motor->motor_type > 0) {
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	789b      	ldrb	r3, [r3, #2]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8147 	beq.w	80050cc <convert_raw_can_data+0x2c4>
		//convert the raw data back into the respective values
		curr_motor->id 				= motor_id;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	897a      	ldrh	r2, [r7, #10]
 8004e42:	801a      	strh	r2, [r3, #0]
		curr_motor->raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	b21a      	sxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	b21b      	sxth	r3, r3
 8004e54:	4313      	orrs	r3, r2
 8004e56:	b21a      	sxth	r2, r3
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm						=(rx_buffer[2] << 8) | rx_buffer[3];
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3302      	adds	r3, #2
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	b21a      	sxth	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3303      	adds	r3, #3
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	b21b      	sxth	r3, r3
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	833b      	strh	r3, [r7, #24]
		curr_motor->raw_data.rpm 		= curr_motor->raw_data.rpm * SPEED_LPF + temp_rpm * (1-SPEED_LPF);
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	8b3a      	ldrh	r2, [r7, #24]
 8004e76:	811a      	strh	r2, [r3, #8]
		curr_motor->raw_data.torque 	= (rx_buffer[4] << 8) | rx_buffer[5];
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	b21a      	sxth	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3305      	adds	r3, #5
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	b21b      	sxth	r3, r3
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b21a      	sxth	r2, r3
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	815a      	strh	r2, [r3, #10]
		curr_motor->raw_data.temp 	= (rx_buffer[6]);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	799a      	ldrb	r2, [r3, #6]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	731a      	strb	r2, [r3, #12]
		curr_motor->last_time[1] 		= curr_motor->last_time[0];
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		curr_motor->last_time[0]	 	= get_microseconds();
 8004ea6:	f7fd f91b 	bl	80020e0 <get_microseconds>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		float rds_passed = (float)(curr_motor->raw_data.angle[0] - curr_motor->raw_data.angle[1]) /8192;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eca:	eddf 6a84 	vldr	s13, [pc, #528]	; 80050dc <convert_raw_can_data+0x2d4>
 8004ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ed2:	edc7 7a05 	vstr	s15, [r7, #20]
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 8004ed6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004eda:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80050e0 <convert_raw_can_data+0x2d8>
 8004ede:	ee67 6a87 	vmul.f32	s13, s15, s14
				/ curr_motor->last_time[0] - curr_motor->last_time[1]) * 60;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f06:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80050e4 <convert_raw_can_data+0x2dc>
 8004f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
		//process the angle data differently depending on the motor type to get radians in the
		//adj_angle value
		switch (curr_motor->motor_type) {
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	789b      	ldrb	r3, [r3, #2]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d83b      	bhi.n	8004f96 <convert_raw_can_data+0x18e>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <convert_raw_can_data+0x11c>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f97 	.word	0x08004f97
 8004f2c:	08004f97 	.word	0x08004f97
 8004f30:	08004f97 	.word	0x08004f97
 8004f34:	08004f5b 	.word	0x08004f5b
 8004f38:	08004f5b 	.word	0x08004f5b
 8004f3c:	08004f71 	.word	0x08004f71
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f71 	.word	0x08004f71
		case TYPE_GM6020:
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3370      	adds	r3, #112	; 0x70
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f000 f8d0 	bl	80050f8 <angle_offset>
			break;
 8004f58:	e01e      	b.n	8004f98 <convert_raw_can_data+0x190>
		case TYPE_M2006:
		case TYPE_M3508:
			break;
		case TYPE_M2006_STEPS:
		case TYPE_M3508_STEPS:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	1d18      	adds	r0, r3, #4
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f103 0170 	add.w	r1, r3, #112	; 0x70
					curr_motor->last_time);
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	339c      	adds	r3, #156	; 0x9c
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f000 f981 	bl	8005270 <motor_calc_odometry>
			break;
 8004f6e:	e013      	b.n	8004f98 <convert_raw_can_data+0x190>
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	1d18      	adds	r0, r3, #4
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f103 0170 	add.w	r1, r3, #112	; 0x70
					curr_motor->last_time);
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	339c      	adds	r3, #156	; 0x9c
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f000 f976 	bl	8005270 <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	1d1a      	adds	r2, r3, #4
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3370      	adds	r3, #112	; 0x70
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f000 f8b2 	bl	80050f8 <angle_offset>
			break;
 8004f94:	e000      	b.n	8004f98 <convert_raw_can_data+0x190>
		default:
			break;
 8004f96:	bf00      	nop

		}

		//initialise task switching variables
		BaseType_t xHigherPriorityTaskWoken, xResult;
		xHigherPriorityTaskWoken = pdFALSE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]

		//set event group bits so that the tasks and PIDs only trigger upon updated data
		//also checks if the respective tasks are set to ready
		switch (idnum + 1) {
 8004f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	2b11      	cmp	r3, #17
 8004fa4:	f200 8082 	bhi.w	80050ac <convert_raw_can_data+0x2a4>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <convert_raw_can_data+0x1a8>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	0800500d 	.word	0x0800500d
 8004fb4:	08005035 	.word	0x08005035
 8004fb8:	08004ff9 	.word	0x08004ff9
 8004fbc:	08005021 	.word	0x08005021
 8004fc0:	08005049 	.word	0x08005049
 8004fc4:	0800505d 	.word	0x0800505d
 8004fc8:	08005071 	.word	0x08005071
 8004fcc:	080050ad 	.word	0x080050ad
 8004fd0:	080050ad 	.word	0x080050ad
 8004fd4:	080050ad 	.word	0x080050ad
 8004fd8:	080050ad 	.word	0x080050ad
 8004fdc:	080050ad 	.word	0x080050ad
 8004fe0:	080050ad 	.word	0x080050ad
 8004fe4:	080050ad 	.word	0x080050ad
 8004fe8:	080050ad 	.word	0x080050ad
 8004fec:	080050ad 	.word	0x080050ad
 8004ff0:	08005085 	.word	0x08005085
 8004ff4:	08005099 	.word	0x08005099
		#ifndef CHASSIS_MCU
				case FR_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 8004ff8:	4b3b      	ldr	r3, [pc, #236]	; (80050e8 <convert_raw_can_data+0x2e0>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f107 0210 	add.w	r2, r7, #16
 8005000:	2108      	movs	r1, #8
 8005002:	4618      	mov	r0, r3
 8005004:	f010 fbb6 	bl	8015774 <xEventGroupSetBitsFromISR>
 8005008:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800500a:	e050      	b.n	80050ae <convert_raw_can_data+0x2a6>
				case FL_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 800500c:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <convert_raw_can_data+0x2e0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f107 0210 	add.w	r2, r7, #16
 8005014:	2104      	movs	r1, #4
 8005016:	4618      	mov	r0, r3
 8005018:	f010 fbac 	bl	8015774 <xEventGroupSetBitsFromISR>
 800501c:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800501e:	e046      	b.n	80050ae <convert_raw_can_data+0x2a6>
				case BL_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0010,
 8005020:	4b31      	ldr	r3, [pc, #196]	; (80050e8 <convert_raw_can_data+0x2e0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f107 0210 	add.w	r2, r7, #16
 8005028:	2102      	movs	r1, #2
 800502a:	4618      	mov	r0, r3
 800502c:	f010 fba2 	bl	8015774 <xEventGroupSetBitsFromISR>
 8005030:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005032:	e03c      	b.n	80050ae <convert_raw_can_data+0x2a6>
				case BR_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
 8005034:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <convert_raw_can_data+0x2e0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f107 0210 	add.w	r2, r7, #16
 800503c:	2101      	movs	r1, #1
 800503e:	4618      	mov	r0, r3
 8005040:	f010 fb98 	bl	8015774 <xEventGroupSetBitsFromISR>
 8005044:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005046:	e032      	b.n	80050ae <convert_raw_can_data+0x2a6>
		#endif
				case LFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 8005048:	4b28      	ldr	r3, [pc, #160]	; (80050ec <convert_raw_can_data+0x2e4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f107 0210 	add.w	r2, r7, #16
 8005050:	2102      	movs	r1, #2
 8005052:	4618      	mov	r0, r3
 8005054:	f010 fb8e 	bl	8015774 <xEventGroupSetBitsFromISR>
 8005058:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800505a:	e028      	b.n	80050ae <convert_raw_can_data+0x2a6>
				case RFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 800505c:	4b23      	ldr	r3, [pc, #140]	; (80050ec <convert_raw_can_data+0x2e4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f107 0210 	add.w	r2, r7, #16
 8005064:	2101      	movs	r1, #1
 8005066:	4618      	mov	r0, r3
 8005068:	f010 fb84 	bl	8015774 <xEventGroupSetBitsFromISR>
 800506c:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800506e:	e01e      	b.n	80050ae <convert_raw_can_data+0x2a6>
				case FEEDER_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 8005070:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <convert_raw_can_data+0x2e4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f107 0210 	add.w	r2, r7, #16
 8005078:	2104      	movs	r1, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f010 fb7a 	bl	8015774 <xEventGroupSetBitsFromISR>
 8005080:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005082:	e014      	b.n	80050ae <convert_raw_can_data+0x2a6>
				case PITCH_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 8005084:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <convert_raw_can_data+0x2e8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f107 0210 	add.w	r2, r7, #16
 800508c:	2101      	movs	r1, #1
 800508e:	4618      	mov	r0, r3
 8005090:	f010 fb70 	bl	8015774 <xEventGroupSetBitsFromISR>
 8005094:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005096:	e00a      	b.n	80050ae <convert_raw_can_data+0x2a6>
				case YAW_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 8005098:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <convert_raw_can_data+0x2e8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f107 0210 	add.w	r2, r7, #16
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f010 fb66 	bl	8015774 <xEventGroupSetBitsFromISR>
 80050a8:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 80050aa:	e000      	b.n	80050ae <convert_raw_can_data+0x2a6>
				default:
					idnum = idnum;
					//error handler
					break;
 80050ac:	bf00      	nop
				}

				//switches tasks if a higher priority task is ready.
				//required because the function is in an ISR
				if (xResult != pdFAIL) {
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00f      	beq.n	80050d4 <convert_raw_can_data+0x2cc>
					portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00c      	beq.n	80050d4 <convert_raw_can_data+0x2cc>
 80050ba:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <convert_raw_can_data+0x2ec>)
 80050bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	e003      	b.n	80050d4 <convert_raw_can_data+0x2cc>
				}
			} else {
				//this is a useless statement so that it is possible to set a breakpoint here lol
				uint8_t stopper = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	76fb      	strb	r3, [r7, #27]
 80050d0:	e000      	b.n	80050d4 <convert_raw_can_data+0x2cc>
		return;
 80050d2:	bf00      	nop
				//error handler
		}
}
 80050d4:	3728      	adds	r7, #40	; 0x28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	46000000 	.word	0x46000000
 80050e0:	461c4000 	.word	0x461c4000
 80050e4:	42700000 	.word	0x42700000
 80050e8:	20000468 	.word	0x20000468
 80050ec:	2000046c 	.word	0x2000046c
 80050f0:	20000464 	.word	0x20000464
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]

	//if there's a gearbox, use the ticks after the gearbox.
	//make sure center angle is properly set with respect to the zero-ing angle
	//YOUR ROBOT MUST HAVE A WAY TO ZERO THIS ANGLE AND IMPLEMENT A ZEROING FUNCTION AT STARTUP
	//IF NOT IT WON'T WORK 							-wx
	if (angle_data->gearbox_ratio > 0) {
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	edd3 7a06 	vldr	s15, [r3, #24]
 800510c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005114:	dd69      	ble.n	80051ea <angle_offset+0xf2>
		temp_ang = angle_data->ticks - angle_data->center_ang;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	60fb      	str	r3, [r7, #12]
		if (temp_ang > (4096 * angle_data->gearbox_ratio)) {
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005132:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800525c <angle_offset+0x164>
 8005136:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800513a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	dd13      	ble.n	800516c <angle_offset+0x74>
			temp_ang -= (8192 * angle_data->gearbox_ratio);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	edd3 7a06 	vldr	s15, [r3, #24]
 8005154:	eddf 6a42 	vldr	s13, [pc, #264]	; 8005260 <angle_offset+0x168>
 8005158:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800515c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005164:	ee17 3a90 	vmov	r3, s15
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e023      	b.n	80051b4 <angle_offset+0xbc>
		} else if (temp_ang < (-4096 * angle_data->gearbox_ratio)) {
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	edd3 7a06 	vldr	s15, [r3, #24]
 800517c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8005264 <angle_offset+0x16c>
 8005180:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518c:	d512      	bpl.n	80051b4 <angle_offset+0xbc>
			temp_ang += 8192 * angle_data->gearbox_ratio;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	ee07 3a90 	vmov	s15, r3
 8005194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	edd3 7a06 	vldr	s15, [r3, #24]
 800519e:	eddf 6a30 	vldr	s13, [pc, #192]	; 8005260 <angle_offset+0x168>
 80051a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051ae:	ee17 3a90 	vmov	r3, s15
 80051b2:	60fb      	str	r3, [r7, #12]
		}
		angle_data->ticks = temp_ang;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	601a      	str	r2, [r3, #0]
		angle_data->adj_ang = (float) temp_ang * 2 *PI / (8192 * angle_data->gearbox_ratio);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	ee07 3a90 	vmov	s15, r3
 80051c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051c8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005268 <angle_offset+0x170>
 80051cc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80051d6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005260 <angle_offset+0x168>
 80051da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	edc3 7a07 	vstr	s15, [r3, #28]
		} else if (temp_ang < -4096) {
			temp_ang += 8192;
		}
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
	}
}
 80051e8:	e031      	b.n	800524e <angle_offset+0x156>
		temp_ang = (int32_t) (motor_data->angle[0]) - angle_data->center_ang;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051f0:	461a      	mov	r2, r3
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	60fb      	str	r3, [r7, #12]
		if (temp_ang > 4096) {
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005200:	dd04      	ble.n	800520c <angle_offset+0x114>
			temp_ang -= 8192;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e007      	b.n	800521c <angle_offset+0x124>
		} else if (temp_ang < -4096) {
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8005212:	da03      	bge.n	800521c <angle_offset+0x124>
			temp_ang += 8192;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800521a:	60fb      	str	r3, [r7, #12]
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005222:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800526c <angle_offset+0x174>
 8005226:	ee27 7a87 	vmul.f32	s14, s15, s14
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	ee07 3a90 	vmov	s15, r3
 8005230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005234:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005268 <angle_offset+0x170>
 8005238:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800523c:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800525c <angle_offset+0x164>
 8005240:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	45800000 	.word	0x45800000
 8005260:	46000000 	.word	0x46000000
 8005264:	c5800000 	.word	0xc5800000
 8005268:	40490fdb 	.word	0x40490fdb
 800526c:	00000000 	.word	0x00000000

08005270 <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data,
		angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	; 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
	int8_t int_round_passed = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	77fb      	strb	r3, [r7, #31]
	//check to make sure it's not the same data point
	if (feedback_times[0] - feedback_times[1] >= 1) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d02e      	beq.n	80052ec <motor_calc_odometry+0x7c>
		float rounds_passed = (((float)(feedback_times[0] - feedback_times[1]) * motor_data->rpm)/(60 * TIMER_FREQ));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3304      	adds	r3, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052b4:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8005428 <motor_calc_odometry+0x1b8>
 80052b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052bc:	edc7 7a06 	vstr	s15, [r7, #24]
		if (fabs(rounds_passed) >= 1) {
 80052c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80052c4:	eef0 7ae7 	vabs.f32	s15, s15
 80052c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d4:	db08      	blt.n	80052e8 <motor_calc_odometry+0x78>
			int_round_passed = rounds_passed;
 80052d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80052da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052de:	edc7 7a00 	vstr	s15, [r7]
 80052e2:	783b      	ldrb	r3, [r7, #0]
 80052e4:	77fb      	strb	r3, [r7, #31]
 80052e6:	e001      	b.n	80052ec <motor_calc_odometry+0x7c>
		} else {
			int_round_passed = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	77fb      	strb	r3, [r7, #31]
		}
	}
	int16_t abs_angle_diff;
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	b29b      	uxth	r3, r3
 8005300:	83bb      	strh	r3, [r7, #28]
	//generally the motor won't exceed half a turn between each feedback
	if (abs_angle_diff > 4096) {
 8005302:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530a:	dd05      	ble.n	8005318 <motor_calc_odometry+0xa8>
		abs_angle_diff -= 8192;
 800530c:	8bbb      	ldrh	r3, [r7, #28]
 800530e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8005312:	b29b      	uxth	r3, r3
 8005314:	83bb      	strh	r3, [r7, #28]
 8005316:	e009      	b.n	800532c <motor_calc_odometry+0xbc>
	} else if (abs_angle_diff < -4096) {
 8005318:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800531c:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8005320:	da04      	bge.n	800532c <motor_calc_odometry+0xbc>
		abs_angle_diff += 8192;
 8005322:	8bbb      	ldrh	r3, [r7, #28]
 8005324:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005328:	b29b      	uxth	r3, r3
 800532a:	83bb      	strh	r3, [r7, #28]
	 } else {
	 abs_angle_diff = (8192-motor_data->angle[0]) - motor_data->angle[1];
	 }
	 }
	 */
	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005332:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800542c <motor_calc_odometry+0x1bc>
 8005336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800533a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800533e:	ee17 3a90 	vmov	r3, s15
 8005342:	82fb      	strh	r3, [r7, #22]
	angle_data->ticks += (int_round_passed * 8192) + abs_angle_diff;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800534c:	0359      	lsls	r1, r3, #13
 800534e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005352:	440b      	add	r3, r1
 8005354:	441a      	add	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	601a      	str	r2, [r3, #0]
	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800536c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005370:	8afb      	ldrh	r3, [r7, #22]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800537a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	edc3 7a08 	vstr	s15, [r3, #32]
	angle_data->adj_ang = (float) (angle_data->ticks % gear_ticks ) * 2*PI/gear_ticks;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	8afa      	ldrh	r2, [r7, #22]
 800538a:	fb93 f1f2 	sdiv	r1, r3, r2
 800538e:	fb01 f202 	mul.w	r2, r1, r2
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800539c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053a0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005430 <motor_calc_odometry+0x1c0>
 80053a4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80053a8:	8afb      	ldrh	r3, [r7, #22]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_data->adj_ang = (angle_data->adj_ang > PI) ? (angle_data->adj_ang - 2*PI) : (angle_data->adj_ang < -PI) ? angle_data->adj_ang+2*PI : angle_data->adj_ang;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	edd3 7a07 	vldr	s15, [r3, #28]
 80053c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005430 <motor_calc_odometry+0x1c0>
 80053c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	dd07      	ble.n	80053e0 <motor_calc_odometry+0x170>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80053d6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005434 <motor_calc_odometry+0x1c4>
 80053da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053de:	e014      	b.n	800540a <motor_calc_odometry+0x19a>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80053e6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005438 <motor_calc_odometry+0x1c8>
 80053ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f2:	d507      	bpl.n	8005404 <motor_calc_odometry+0x194>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80053fa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005434 <motor_calc_odometry+0x1c4>
 80053fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005402:	e002      	b.n	800540a <motor_calc_odometry+0x19a>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	edd3 7a07 	vldr	s15, [r3, #28]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	edc3 7a07 	vstr	s15, [r3, #28]
	motor_data->angle[1] = motor_data->angle[0];
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	805a      	strh	r2, [r3, #2]
}
 800541a:	bf00      	nop
 800541c:	3724      	adds	r7, #36	; 0x24
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	49127c00 	.word	0x49127c00
 800542c:	46000000 	.word	0x46000000
 8005430:	40490fdb 	.word	0x40490fdb
 8005434:	40c90fdb 	.word	0x40c90fdb
 8005438:	c0490fdb 	.word	0xc0490fdb

0800543c <control_input_task>:

uint8_t control_mode = CONTROL_DEFAULT;
uint8_t safety_toggle = ARM_SWITCH;
uint8_t launcher_safety_toggle = ARM_SWITCH;

void control_input_task(void *argument) {
 800543c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005440:	b088      	sub	sp, #32
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
	TickType_t start_time;
	control_reset();
 8005446:	f000 f935 	bl	80056b4 <control_reset>
	chassis_yaw_pid_init();
 800544a:	f000 fa25 	bl	8005898 <chassis_yaw_pid_init>
	gimbal_ctrl_data.imu_mode = GIMBAL_MODE;
 800544e:	4b64      	ldr	r3, [pc, #400]	; (80055e0 <control_input_task+0x1a4>)
 8005450:	2201      	movs	r2, #1
 8005452:	721a      	strb	r2, [r3, #8]
	dbus_remote_start();
 8005454:	f7fc f826 	bl	80014a4 <dbus_remote_start>
	safety_toggle = 1;
 8005458:	4b62      	ldr	r3, [pc, #392]	; (80055e4 <control_input_task+0x1a8>)
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
	vTaskDelay(100);
 800545e:	2064      	movs	r0, #100	; 0x64
 8005460:	f011 f9ae 	bl	80167c0 <vTaskDelay>

	//checks if any of the remote axes are not 0
	//if any axes isn't 0, remote packet might have been read in the middle so reset uart
	uint8_t rc_check;
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50
 8005464:	e01a      	b.n	800549c <control_input_task+0x60>
			|| fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50) {
		uint8_t temp_msg;
		temp_msg = not_ok;
 8005466:	2302      	movs	r3, #2
 8005468:	75fb      	strb	r3, [r7, #23]
		xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800546a:	4b5f      	ldr	r3, [pc, #380]	; (80055e8 <control_input_task+0x1ac>)
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	f107 0117 	add.w	r1, r7, #23
 8005472:	2300      	movs	r3, #0
 8005474:	2200      	movs	r2, #0
 8005476:	f010 fb83 	bl	8015b80 <xQueueGenericSend>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800547a:	21c8      	movs	r1, #200	; 0xc8
 800547c:	2001      	movs	r0, #1
 800547e:	f011 ffaf 	bl	80173e0 <ulTaskNotifyTake>
 8005482:	4603      	mov	r3, r0
 8005484:	77fb      	strb	r3, [r7, #31]
		HAL_UART_DMAStop(&DBUS_UART);
 8005486:	4859      	ldr	r0, [pc, #356]	; (80055ec <control_input_task+0x1b0>)
 8005488:	f00b fbdd 	bl	8010c46 <HAL_UART_DMAStop>
		dbus_remote_start();
 800548c:	f7fc f80a 	bl	80014a4 <dbus_remote_start>
		if (rc_check) {
 8005490:	7ffb      	ldrb	r3, [r7, #31]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <control_input_task+0x60>
			vTaskDelay(200);
 8005496:	20c8      	movs	r0, #200	; 0xc8
 8005498:	f011 f992 	bl	80167c0 <vTaskDelay>
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50
 800549c:	4b54      	ldr	r3, [pc, #336]	; (80055f0 <control_input_task+0x1b4>)
 800549e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fb f83e 	bl	8000524 <__aeabi_i2d>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4690      	mov	r8, r2
 80054ae:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
			|| fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50) {
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	4b4f      	ldr	r3, [pc, #316]	; (80055f4 <control_input_task+0x1b8>)
 80054b8:	4640      	mov	r0, r8
 80054ba:	4649      	mov	r1, r9
 80054bc:	f7fb fb2c 	bl	8000b18 <__aeabi_dcmpgt>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1cf      	bne.n	8005466 <control_input_task+0x2a>
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50
 80054c6:	4b4a      	ldr	r3, [pc, #296]	; (80055f0 <control_input_task+0x1b4>)
 80054c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fb f829 	bl	8000524 <__aeabi_i2d>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4692      	mov	sl, r2
 80054d8:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	4b44      	ldr	r3, [pc, #272]	; (80055f4 <control_input_task+0x1b8>)
 80054e2:	4650      	mov	r0, sl
 80054e4:	4659      	mov	r1, fp
 80054e6:	f7fb fb17 	bl	8000b18 <__aeabi_dcmpgt>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ba      	bne.n	8005466 <control_input_task+0x2a>
			|| fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50) {
 80054f0:	4b3f      	ldr	r3, [pc, #252]	; (80055f0 <control_input_task+0x1b4>)
 80054f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fb f814 	bl	8000524 <__aeabi_i2d>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	603a      	str	r2, [r7, #0]
 8005502:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <control_input_task+0x1b8>)
 800550e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005512:	f7fb fb01 	bl	8000b18 <__aeabi_dcmpgt>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1a4      	bne.n	8005466 <control_input_task+0x2a>
 800551c:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <control_input_task+0x1b4>)
 800551e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fa fffe 	bl	8000524 <__aeabi_i2d>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4614      	mov	r4, r2
 800552e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	4b2f      	ldr	r3, [pc, #188]	; (80055f4 <control_input_task+0x1b8>)
 8005538:	4620      	mov	r0, r4
 800553a:	4629      	mov	r1, r5
 800553c:	f7fb faec 	bl	8000b18 <__aeabi_dcmpgt>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d18f      	bne.n	8005466 <control_input_task+0x2a>
		}
	}

	safety_toggle = ARM_SWITCH;
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <control_input_task+0x1a8>)
 8005548:	2200      	movs	r2, #0
 800554a:	701a      	strb	r2, [r3, #0]
	while (1) {
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800554c:	21c8      	movs	r1, #200	; 0xc8
 800554e:	2001      	movs	r0, #1
 8005550:	f011 ff46 	bl	80173e0 <ulTaskNotifyTake>
 8005554:	4603      	mov	r3, r0
 8005556:	77fb      	strb	r3, [r7, #31]
		if (rc_check) {
 8005558:	7ffb      	ldrb	r3, [r7, #31]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d02f      	beq.n	80055be <control_input_task+0x182>
			status_led(1, on_led);
 800555e:	2100      	movs	r1, #0
 8005560:	2001      	movs	r0, #1
 8005562:	f7fc fce7 	bl	8001f34 <status_led>
			start_time = xTaskGetTickCount();
 8005566:	f011 fa7b 	bl	8016a60 <xTaskGetTickCount>
 800556a:	4603      	mov	r3, r0
 800556c:	61bb      	str	r3, [r7, #24]
			if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 800556e:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <control_input_task+0x1b4>)
 8005570:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d110      	bne.n	800559a <control_input_task+0x15e>
				laser_on();
 8005578:	f7fc f838 	bl	80015ec <laser_on>
				control_mode_change(remote_cmd.side_dial);
 800557c:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <control_input_task+0x1b4>)
 800557e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f8c8 	bl	8005718 <control_mode_change>
				safety_toggle = 0;
 8005588:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <control_input_task+0x1a8>)
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
				launcher_safety_toggle = 0;
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <control_input_task+0x1bc>)
 8005590:	2200      	movs	r2, #0
 8005592:	701a      	strb	r2, [r3, #0]
				control_reset();
 8005594:	f000 f88e 	bl	80056b4 <control_reset>
 8005598:	e01b      	b.n	80055d2 <control_input_task+0x196>
			} else {

				switch (control_mode) {
 800559a:	4b18      	ldr	r3, [pc, #96]	; (80055fc <control_input_task+0x1c0>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d002      	beq.n	80055a8 <control_input_task+0x16c>
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d003      	beq.n	80055ae <control_input_task+0x172>
					break;
				case REMOTE_CTRL_MODE:
					remote_control_input();
					break;
				default:
					break;
 80055a6:	e005      	b.n	80055b4 <control_input_task+0x178>
					keyboard_control_input();
 80055a8:	f000 f990 	bl	80058cc <keyboard_control_input>
					break;
 80055ac:	e002      	b.n	80055b4 <control_input_task+0x178>
					remote_control_input();
 80055ae:	f000 fadd 	bl	8005b6c <remote_control_input>
					break;
 80055b2:	bf00      	nop

				}
				status_led(1, off_led);
 80055b4:	2101      	movs	r1, #1
 80055b6:	2001      	movs	r0, #1
 80055b8:	f7fc fcbc 	bl	8001f34 <status_led>
 80055bc:	e009      	b.n	80055d2 <control_input_task+0x196>
			}
		} else {
			kill_can();
 80055be:	f003 fa7d 	bl	8008abc <kill_can>
			control_reset();
 80055c2:	f000 f877 	bl	80056b4 <control_reset>
			launcher_safety_toggle = LAUNCHER_SAFETY;
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <control_input_task+0x1bc>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
			safety_toggle = ARM_SWITCH;
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <control_input_task+0x1a8>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 80055d2:	f107 0318 	add.w	r3, r7, #24
 80055d6:	2102      	movs	r1, #2
 80055d8:	4618      	mov	r0, r3
 80055da:	f011 f873 	bl	80166c4 <vTaskDelayUntil>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 80055de:	e7b5      	b.n	800554c <control_input_task+0x110>
 80055e0:	200027a0 	.word	0x200027a0
 80055e4:	200027e0 	.word	0x200027e0
 80055e8:	20000480 	.word	0x20000480
 80055ec:	20001618 	.word	0x20001618
 80055f0:	20000318 	.word	0x20000318
 80055f4:	40490000 	.word	0x40490000
 80055f8:	200027e1 	.word	0x200027e1
 80055fc:	20000008 	.word	0x20000008

08005600 <chassis_center_yaw>:
	}
	osThreadTerminate(NULL);
}

float chassis_center_yaw() {
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
	speed_pid(0, can_motors[YAW_MOTOR_ID - 1].angle_data.adj_ang,
 8005604:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <chassis_center_yaw+0x40>)
 8005606:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	f7fa ff9b 	bl	8000548 <__aeabi_f2d>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	480b      	ldr	r0, [pc, #44]	; (8005644 <chassis_center_yaw+0x44>)
 8005618:	ec43 2b11 	vmov	d1, r2, r3
 800561c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8005638 <chassis_center_yaw+0x38>
 8005620:	f002 ff1a 	bl	8008458 <speed_pid>
			&yaw_pid_data);
	return yaw_pid_data.output;
 8005624:	4b07      	ldr	r3, [pc, #28]	; (8005644 <chassis_center_yaw+0x44>)
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	ee07 3a90 	vmov	s15, r3
}
 800562c:	eeb0 0a67 	vmov.f32	s0, s15
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	f3af 8000 	nop.w
	...
 8005640:	20001820 	.word	0x20001820
 8005644:	200027ac 	.word	0x200027ac

08005648 <chassis_set_ctrl>:

void chassis_set_ctrl(float forward, float horizontal, float yaw) {
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005652:	edc7 0a02 	vstr	s1, [r7, #8]
 8005656:	ed87 1a01 	vstr	s2, [r7, #4]
	chassis_ctrl_data.enabled = 1;
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <chassis_set_ctrl+0x38>)
 800565c:	2201      	movs	r2, #1
 800565e:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.horizontal = horizontal;
 8005660:	4a07      	ldr	r2, [pc, #28]	; (8005680 <chassis_set_ctrl+0x38>)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6053      	str	r3, [r2, #4]
	chassis_ctrl_data.forward = forward;
 8005666:	4a06      	ldr	r2, [pc, #24]	; (8005680 <chassis_set_ctrl+0x38>)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6013      	str	r3, [r2, #0]
	chassis_ctrl_data.yaw = yaw;
 800566c:	4a04      	ldr	r2, [pc, #16]	; (8005680 <chassis_set_ctrl+0x38>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6093      	str	r3, [r2, #8]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20002780 	.word	0x20002780

08005684 <chassis_kill_ctrl>:

void chassis_kill_ctrl() {
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
	chassis_ctrl_data.enabled = 0;
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <chassis_kill_ctrl+0x2c>)
 800568a:	2200      	movs	r2, #0
 800568c:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.forward = 0;
 800568e:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <chassis_kill_ctrl+0x2c>)
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <chassis_kill_ctrl+0x2c>)
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 800569e:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <chassis_kill_ctrl+0x2c>)
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	609a      	str	r2, [r3, #8]
}
 80056a6:	bf00      	nop
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20002780 	.word	0x20002780

080056b4 <control_reset>:

void control_reset() {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 80056b8:	4b13      	ldr	r3, [pc, #76]	; (8005708 <control_reset+0x54>)
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 80056c0:	4b11      	ldr	r3, [pc, #68]	; (8005708 <control_reset+0x54>)
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 80056c8:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <control_reset+0x54>)
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 80056d0:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <control_reset+0x54>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	751a      	strb	r2, [r3, #20]
	gimbal_ctrl_data.pitch = 0;
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <control_reset+0x58>)
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
	gimbal_ctrl_data.yaw = imu_heading.yaw;
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <control_reset+0x5c>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	4a0a      	ldr	r2, [pc, #40]	; (800570c <control_reset+0x58>)
 80056e4:	6053      	str	r3, [r2, #4]
	gimbal_ctrl_data.enabled = 0;
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <control_reset+0x58>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	725a      	strb	r2, [r3, #9]
	launcher_ctrl_data.gun_feeding_speed = 0;
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <control_reset+0x60>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	805a      	strh	r2, [r3, #2]
	launcher_ctrl_data.projectile_speed = 0;
 80056f2:	4b08      	ldr	r3, [pc, #32]	; (8005714 <control_reset+0x60>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	801a      	strh	r2, [r3, #0]
	launcher_ctrl_data.enabled = 0;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <control_reset+0x60>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	715a      	strb	r2, [r3, #5]
	laser_off();
 80056fe:	f7fb ff81 	bl	8001604 <laser_off>
}
 8005702:	bf00      	nop
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20002780 	.word	0x20002780
 800570c:	200027a0 	.word	0x200027a0
 8005710:	20002828 	.word	0x20002828
 8005714:	20002798 	.word	0x20002798

08005718 <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	80fb      	strh	r3, [r7, #6]
	uint8_t temp_msg;
	switch (control_mode) {
 8005722:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <control_mode_change+0xbc>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d002      	beq.n	8005730 <control_mode_change+0x18>
 800572a:	2b02      	cmp	r3, #2
 800572c:	d025      	beq.n	800577a <control_mode_change+0x62>
		} else {
			last_trig_time = HAL_GetTick();
		}
		break;
	default:
		break;
 800572e:	e04c      	b.n	80057ca <control_mode_change+0xb2>
		if (left_dial_input < -330) {
 8005730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005734:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 8005738:	da19      	bge.n	800576e <control_mode_change+0x56>
			if (HAL_GetTick() - last_trig_time > 1000) {
 800573a:	f003 ff9f 	bl	800967c <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <control_mode_change+0xc0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800574a:	d93b      	bls.n	80057c4 <control_mode_change+0xac>
				control_mode = REMOTE_CTRL_MODE;
 800574c:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <control_mode_change+0xbc>)
 800574e:	2202      	movs	r2, #2
 8005750:	701a      	strb	r2, [r3, #0]
				temp_msg = control_control;
 8005752:	2304      	movs	r3, #4
 8005754:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005756:	4b21      	ldr	r3, [pc, #132]	; (80057dc <control_mode_change+0xc4>)
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	f107 010f 	add.w	r1, r7, #15
 800575e:	2300      	movs	r3, #0
 8005760:	2200      	movs	r2, #0
 8005762:	f010 fa0d 	bl	8015b80 <xQueueGenericSend>
				launcher_safety_toggle = LAUNCHER_SAFETY;
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <control_mode_change+0xc8>)
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
		break;
 800576c:	e02a      	b.n	80057c4 <control_mode_change+0xac>
			last_trig_time = HAL_GetTick();
 800576e:	f003 ff85 	bl	800967c <HAL_GetTick>
 8005772:	4603      	mov	r3, r0
 8005774:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <control_mode_change+0xc0>)
 8005776:	6013      	str	r3, [r2, #0]
		break;
 8005778:	e024      	b.n	80057c4 <control_mode_change+0xac>
		if (left_dial_input > 330) {
 800577a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800577e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8005782:	dd19      	ble.n	80057b8 <control_mode_change+0xa0>
			if (HAL_GetTick() - last_trig_time > 1000) {
 8005784:	f003 ff7a 	bl	800967c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <control_mode_change+0xc0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005794:	d918      	bls.n	80057c8 <control_mode_change+0xb0>
				control_mode = KEYBOARD_CTRL_MODE;
 8005796:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <control_mode_change+0xbc>)
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]
				temp_msg = control_keyboard;
 800579c:	2303      	movs	r3, #3
 800579e:	73fb      	strb	r3, [r7, #15]
				launcher_safety_toggle = LAUNCHER_SAFETY;
 80057a0:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <control_mode_change+0xc8>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	701a      	strb	r2, [r3, #0]
				xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <control_mode_change+0xc4>)
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	f107 010f 	add.w	r1, r7, #15
 80057ae:	2300      	movs	r3, #0
 80057b0:	2200      	movs	r2, #0
 80057b2:	f010 f9e5 	bl	8015b80 <xQueueGenericSend>
		break;
 80057b6:	e007      	b.n	80057c8 <control_mode_change+0xb0>
			last_trig_time = HAL_GetTick();
 80057b8:	f003 ff60 	bl	800967c <HAL_GetTick>
 80057bc:	4603      	mov	r3, r0
 80057be:	4a06      	ldr	r2, [pc, #24]	; (80057d8 <control_mode_change+0xc0>)
 80057c0:	6013      	str	r3, [r2, #0]
		break;
 80057c2:	e001      	b.n	80057c8 <control_mode_change+0xb0>
		break;
 80057c4:	bf00      	nop
 80057c6:	e000      	b.n	80057ca <control_mode_change+0xb2>
		break;
 80057c8:	bf00      	nop
	}
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000008 	.word	0x20000008
 80057d8:	200027dc 	.word	0x200027dc
 80057dc:	20000480 	.word	0x20000480
 80057e0:	200027e1 	.word	0x200027e1

080057e4 <gimbal_turn_ang>:

//ADDs angle to gimbal ctrl
void gimbal_turn_ang(float pit_radians, float yaw_radians) {
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80057ee:	edc7 0a00 	vstr	s1, [r7]
	yaw_radians += gimbal_ctrl_data.yaw += yaw_radians;
 80057f2:	4b25      	ldr	r3, [pc, #148]	; (8005888 <gimbal_turn_ang+0xa4>)
 80057f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80057f8:	edd7 7a00 	vldr	s15, [r7]
 80057fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005800:	4b21      	ldr	r3, [pc, #132]	; (8005888 <gimbal_turn_ang+0xa4>)
 8005802:	edc3 7a01 	vstr	s15, [r3, #4]
 8005806:	4b20      	ldr	r3, [pc, #128]	; (8005888 <gimbal_turn_ang+0xa4>)
 8005808:	edd3 7a01 	vldr	s15, [r3, #4]
 800580c:	ed97 7a00 	vldr	s14, [r7]
 8005810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005814:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 8005818:	e007      	b.n	800582a <gimbal_turn_ang+0x46>
		yaw_radians -= 2 * PI;
 800581a:	edd7 7a00 	vldr	s15, [r7]
 800581e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800588c <gimbal_turn_ang+0xa8>
 8005822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005826:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 800582a:	edd7 7a00 	vldr	s15, [r7]
 800582e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005890 <gimbal_turn_ang+0xac>
 8005832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	dcee      	bgt.n	800581a <gimbal_turn_ang+0x36>
	}
	while (yaw_radians < -PI) {
 800583c:	e007      	b.n	800584e <gimbal_turn_ang+0x6a>
		yaw_radians += 2 * PI;
 800583e:	edd7 7a00 	vldr	s15, [r7]
 8005842:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800588c <gimbal_turn_ang+0xa8>
 8005846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800584a:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians < -PI) {
 800584e:	edd7 7a00 	vldr	s15, [r7]
 8005852:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005894 <gimbal_turn_ang+0xb0>
 8005856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800585a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585e:	d4ee      	bmi.n	800583e <gimbal_turn_ang+0x5a>
	}
	gimbal_ctrl_data.pitch += pit_radians;
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <gimbal_turn_ang+0xa4>)
 8005862:	ed93 7a00 	vldr	s14, [r3]
 8005866:	edd7 7a01 	vldr	s15, [r7, #4]
 800586a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800586e:	4b06      	ldr	r3, [pc, #24]	; (8005888 <gimbal_turn_ang+0xa4>)
 8005870:	edc3 7a00 	vstr	s15, [r3]
	gimbal_ctrl_data.yaw = yaw_radians;
 8005874:	4a04      	ldr	r2, [pc, #16]	; (8005888 <gimbal_turn_ang+0xa4>)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6053      	str	r3, [r2, #4]
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	200027a0 	.word	0x200027a0
 800588c:	40c90fdb 	.word	0x40c90fdb
 8005890:	40490fdb 	.word	0x40490fdb
 8005894:	c0490fdb 	.word	0xc0490fdb

08005898 <chassis_yaw_pid_init>:
	}
	gimbal_ctrl_data.pitch = pit_radians;
	gimbal_ctrl_data.yaw = yaw_radians;
}

void chassis_yaw_pid_init() {
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
	yaw_pid_data.kp = CHASSIS_YAW_KP;
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <chassis_yaw_pid_init+0x30>)
 800589e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80058a2:	601a      	str	r2, [r3, #0]
	yaw_pid_data.ki = CHASSIS_YAW_KI;
 80058a4:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <chassis_yaw_pid_init+0x30>)
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	605a      	str	r2, [r3, #4]
	yaw_pid_data.kd = CHASSIS_YAW_KD;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <chassis_yaw_pid_init+0x30>)
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	609a      	str	r2, [r3, #8]
	yaw_pid_data.max_out = CHASSIS_YAW_MAX_RPM;
 80058b4:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <chassis_yaw_pid_init+0x30>)
 80058b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80058ba:	61da      	str	r2, [r3, #28]
}
 80058bc:	bf00      	nop
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	200027ac 	.word	0x200027ac

080058cc <keyboard_control_input>:

extern int g_spinspin_mode;



void keyboard_control_input() {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
	mouse_gimbal_input();
 80058d0:	f000 f882 	bl	80059d8 <mouse_gimbal_input>
	keyboard_chassis_input();
 80058d4:	f000 f804 	bl	80058e0 <keyboard_chassis_input>
	mouse_launcher_control_input();
 80058d8:	f000 f8ee 	bl	8005ab8 <mouse_launcher_control_input>
}
 80058dc:	bf00      	nop
 80058de:	bd80      	pop	{r7, pc}

080058e0 <keyboard_chassis_input>:

void keyboard_chassis_input() {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <keyboard_chassis_input+0xec>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <keyboard_chassis_input+0x18>
 80058ee:	4b38      	ldr	r3, [pc, #224]	; (80059d0 <keyboard_chassis_input+0xf0>)
 80058f0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d00f      	beq.n	8005918 <keyboard_chassis_input+0x38>
		chassis_ctrl_data.enabled = 0;
 80058f8:	4b36      	ldr	r3, [pc, #216]	; (80059d4 <keyboard_chassis_input+0xf4>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	751a      	strb	r2, [r3, #20]
		chassis_ctrl_data.horizontal = 0;
 80058fe:	4b35      	ldr	r3, [pc, #212]	; (80059d4 <keyboard_chassis_input+0xf4>)
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	605a      	str	r2, [r3, #4]
		chassis_ctrl_data.forward = 0;
 8005906:	4b33      	ldr	r3, [pc, #204]	; (80059d4 <keyboard_chassis_input+0xf4>)
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
		chassis_ctrl_data.yaw = 0;
 800590e:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <keyboard_chassis_input+0xf4>)
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	609a      	str	r2, [r3, #8]
			chassis_ctrl_data.horizontal = horizontal_input;
			chassis_ctrl_data.forward = forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 8005916:	e055      	b.n	80059c4 <keyboard_chassis_input+0xe4>
		if (remote_cmd.right_switch == ge_RSW_ALL_ON) {
 8005918:	4b2d      	ldr	r3, [pc, #180]	; (80059d0 <keyboard_chassis_input+0xf0>)
 800591a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d150      	bne.n	80059c4 <keyboard_chassis_input+0xe4>
			chassis_ctrl_data.enabled = 1;
 8005922:	4b2c      	ldr	r3, [pc, #176]	; (80059d4 <keyboard_chassis_input+0xf4>)
 8005924:	2201      	movs	r2, #1
 8005926:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_W) {
 800593a:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <keyboard_chassis_input+0xf0>)
 800593c:	8b5b      	ldrh	r3, [r3, #26]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <keyboard_chassis_input+0x76>
				forward_input += KEYBD_MAX_SPD;
 8005946:	edd7 7a02 	vldr	s15, [r7, #8]
 800594a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800594e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005952:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_S) {
 8005956:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <keyboard_chassis_input+0xf0>)
 8005958:	8b5b      	ldrh	r3, [r3, #26]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <keyboard_chassis_input+0x92>
				forward_input -= KEYBD_MAX_SPD;
 8005962:	edd7 7a02 	vldr	s15, [r7, #8]
 8005966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800596a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800596e:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_A) {
 8005972:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <keyboard_chassis_input+0xf0>)
 8005974:	8b5b      	ldrh	r3, [r3, #26]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <keyboard_chassis_input+0xae>
				horizontal_input -= KEYBD_MAX_SPD;
 800597e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800598a:	edc7 7a03 	vstr	s15, [r7, #12]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_D) {
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <keyboard_chassis_input+0xf0>)
 8005990:	8b5b      	ldrh	r3, [r3, #26]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <keyboard_chassis_input+0xca>
				horizontal_input += KEYBD_MAX_SPD;
 800599a:	edd7 7a03 	vldr	s15, [r7, #12]
 800599e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059a6:	edc7 7a03 	vstr	s15, [r7, #12]
			yaw_input = chassis_center_yaw();
 80059aa:	f7ff fe29 	bl	8005600 <chassis_center_yaw>
 80059ae:	ed87 0a01 	vstr	s0, [r7, #4]
			chassis_ctrl_data.horizontal = horizontal_input;
 80059b2:	4a08      	ldr	r2, [pc, #32]	; (80059d4 <keyboard_chassis_input+0xf4>)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6053      	str	r3, [r2, #4]
			chassis_ctrl_data.forward = forward_input;
 80059b8:	4a06      	ldr	r2, [pc, #24]	; (80059d4 <keyboard_chassis_input+0xf4>)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 80059be:	4a05      	ldr	r2, [pc, #20]	; (80059d4 <keyboard_chassis_input+0xf4>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6093      	str	r3, [r2, #8]
}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	200027e0 	.word	0x200027e0
 80059d0:	20000318 	.word	0x20000318
 80059d4:	20002780 	.word	0x20002780

080059d8 <mouse_gimbal_input>:

void mouse_gimbal_input() {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 80059de:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <mouse_gimbal_input+0xc8>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d104      	bne.n	80059f0 <mouse_gimbal_input+0x18>
 80059e6:	4b2f      	ldr	r3, [pc, #188]	; (8005aa4 <mouse_gimbal_input+0xcc>)
 80059e8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d103      	bne.n	80059f8 <mouse_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 80059f0:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <mouse_gimbal_input+0xd0>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	725a      	strb	r2, [r3, #9]
 80059f6:	e04e      	b.n	8005a96 <mouse_gimbal_input+0xbe>
	} else {
		gimbal_ctrl_data.enabled = 1;
 80059f8:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <mouse_gimbal_input+0xd0>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	725a      	strb	r2, [r3, #9]
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 80059fe:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <mouse_gimbal_input+0xcc>)
 8005a00:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a0c:	ee17 0a90 	vmov	r0, s15
 8005a10:	f7fa fd9a 	bl	8000548 <__aeabi_f2d>
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	4b24      	ldr	r3, [pc, #144]	; (8005aac <mouse_gimbal_input+0xd4>)
 8005a1a:	f7fa fded 	bl	80005f8 <__aeabi_dmul>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4610      	mov	r0, r2
 8005a24:	4619      	mov	r1, r3
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	4b21      	ldr	r3, [pc, #132]	; (8005ab0 <mouse_gimbal_input+0xd8>)
 8005a2c:	f7fa ff0e 	bl	800084c <__aeabi_ddiv>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 8005a34:	4610      	mov	r0, r2
 8005a36:	4619      	mov	r1, r3
 8005a38:	f7fb f8d6 	bl	8000be8 <__aeabi_d2f>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	607b      	str	r3, [r7, #4]
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 8005a40:	4b18      	ldr	r3, [pc, #96]	; (8005aa4 <mouse_gimbal_input+0xcc>)
 8005a42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;
 8005a4e:	eef1 7a67 	vneg.f32	s15, s15
 8005a52:	ee17 3a90 	vmov	r3, s15
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fa fd76 	bl	8000548 <__aeabi_f2d>
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <mouse_gimbal_input+0xdc>)
 8005a62:	f7fa fdc9 	bl	80005f8 <__aeabi_dmul>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <mouse_gimbal_input+0xd8>)
 8005a74:	f7fa feea 	bl	800084c <__aeabi_ddiv>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	f7fb f8b2 	bl	8000be8 <__aeabi_d2f>
 8005a84:	4603      	mov	r3, r0
 8005a86:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_mouse, yaw_mouse);
 8005a88:	edd7 0a00 	vldr	s1, [r7]
 8005a8c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005a90:	f7ff fea8 	bl	80057e4 <gimbal_turn_ang>
	}
}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	200027e0 	.word	0x200027e0
 8005aa4:	20000318 	.word	0x20000318
 8005aa8:	200027a0 	.word	0x200027a0
 8005aac:	40240000 	.word	0x40240000
 8005ab0:	40e00000 	.word	0x40e00000
 8005ab4:	40340000 	.word	0x40340000

08005ab8 <mouse_launcher_control_input>:

void mouse_launcher_control_input() {
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
	if (safety_toggle || launcher_safety_toggle
 8005abc:	4b27      	ldr	r3, [pc, #156]	; (8005b5c <mouse_launcher_control_input+0xa4>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10d      	bne.n	8005ae0 <mouse_launcher_control_input+0x28>
 8005ac4:	4b26      	ldr	r3, [pc, #152]	; (8005b60 <mouse_launcher_control_input+0xa8>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <mouse_launcher_control_input+0x28>
			|| remote_cmd.right_switch == ge_RSW_SHUTDOWN
 8005acc:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <mouse_launcher_control_input+0xac>)
 8005ace:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d004      	beq.n	8005ae0 <mouse_launcher_control_input+0x28>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005ad6:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <mouse_launcher_control_input+0xac>)
 8005ad8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d016      	beq.n	8005b0e <mouse_launcher_control_input+0x56>
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005ae0:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <mouse_launcher_control_input+0xac>)
 8005ae2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d102      	bne.n	8005af0 <mouse_launcher_control_input+0x38>
			launcher_ctrl_data.enabled = 0;
 8005aea:	4b1f      	ldr	r3, [pc, #124]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	715a      	strb	r2, [r3, #5]
		}
		launcher_ctrl_data.gun_feeding_speed = 0;
 8005af0:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8005af6:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005afc:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <mouse_launcher_control_input+0xac>)
 8005afe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d025      	beq.n	8005b52 <mouse_launcher_control_input+0x9a>
			launcher_safety_toggle = 0;
 8005b06:	4b16      	ldr	r3, [pc, #88]	; (8005b60 <mouse_launcher_control_input+0xa8>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005b0c:	e021      	b.n	8005b52 <mouse_launcher_control_input+0x9a>
		}
	} else if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8005b0e:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <mouse_launcher_control_input+0xac>)
 8005b10:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d115      	bne.n	8005b44 <mouse_launcher_control_input+0x8c>
		launcher_ctrl_data.enabled = 1;
 8005b18:	4b13      	ldr	r3, [pc, #76]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	715a      	strb	r2, [r3, #5]
		if (remote_cmd.mouse_left) {
 8005b1e:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <mouse_launcher_control_input+0xac>)
 8005b20:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d006      	beq.n	8005b36 <mouse_launcher_control_input+0x7e>
			launcher_ctrl_data.projectile_speed = 1;
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	801a      	strh	r2, [r3, #0]
			launcher_ctrl_data.gun_feeding_speed =1;
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	805a      	strh	r2, [r3, #2]
	} else {
		launcher_ctrl_data.gun_feeding_speed = 0;
		launcher_ctrl_data.projectile_speed = 0;

	}
}
 8005b34:	e00d      	b.n	8005b52 <mouse_launcher_control_input+0x9a>
			launcher_ctrl_data.projectile_speed = 0.5;
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	801a      	strh	r2, [r3, #0]
			launcher_ctrl_data.gun_feeding_speed = 0;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	805a      	strh	r2, [r3, #2]
}
 8005b42:	e006      	b.n	8005b52 <mouse_launcher_control_input+0x9a>
		launcher_ctrl_data.gun_feeding_speed = 0;
 8005b44:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <mouse_launcher_control_input+0xb0>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	801a      	strh	r2, [r3, #0]
}
 8005b50:	e7ff      	b.n	8005b52 <mouse_launcher_control_input+0x9a>
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	200027e0 	.word	0x200027e0
 8005b60:	200027e1 	.word	0x200027e1
 8005b64:	20000318 	.word	0x20000318
 8005b68:	20002798 	.word	0x20002798

08005b6c <remote_control_input>:
extern gimbal_control_t gimbal_ctrl_data;
extern uint8_t safety_toggle;
extern uint8_t launcher_safety_toggle;


void remote_control_input() {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
	remote_gimbal_input();
 8005b70:	f000 f856 	bl	8005c20 <remote_gimbal_input>
	remote_chassis_input();
 8005b74:	f000 f804 	bl	8005b80 <remote_chassis_input>
	remote_launcher_control_input();
 8005b78:	f000 f8ba 	bl	8005cf0 <remote_launcher_control_input>
}
 8005b7c:	bf00      	nop
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <remote_chassis_input>:

void remote_chassis_input() {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8005b86:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <remote_chassis_input+0x8c>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <remote_chassis_input+0x18>
 8005b8e:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <remote_chassis_input+0x90>)
 8005b90:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d002      	beq.n	8005b9e <remote_chassis_input+0x1e>
//		chassis_ctrl_data.enabled = 0;
		chassis_kill_ctrl();
 8005b98:	f7ff fd74 	bl	8005684 <chassis_kill_ctrl>
 8005b9c:	e032      	b.n	8005c04 <remote_chassis_input+0x84>
	} else {
			chassis_ctrl_data.enabled = 1;
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <remote_chassis_input+0x94>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]

			forward_input = (float) remote_cmd.left_y / RC_LIMITS;
 8005bb6:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <remote_chassis_input+0x90>)
 8005bb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005bbc:	ee07 3a90 	vmov	s15, r3
 8005bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bc4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005c18 <remote_chassis_input+0x98>
 8005bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bcc:	edc7 7a02 	vstr	s15, [r7, #8]
			horizontal_input = (float) remote_cmd.left_x / RC_LIMITS;
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <remote_chassis_input+0x90>)
 8005bd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bde:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005c18 <remote_chassis_input+0x98>
 8005be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005be6:	edc7 7a03 	vstr	s15, [r7, #12]
			yaw_input = chassis_center_yaw();
 8005bea:	f7ff fd09 	bl	8005600 <chassis_center_yaw>
 8005bee:	ed87 0a01 	vstr	s0, [r7, #4]
//yaw_input = (float) remote_cmd.right_x * CHASSIS_YAW_MAX_RPM /RC_LIMITS;
			chassis_set_ctrl(forward_input, horizontal_input, yaw_input);
 8005bf2:	ed97 1a01 	vldr	s2, [r7, #4]
 8005bf6:	edd7 0a03 	vldr	s1, [r7, #12]
 8005bfa:	ed97 0a02 	vldr	s0, [r7, #8]
 8005bfe:	f7ff fd23 	bl	8005648 <chassis_set_ctrl>
	}
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200027e0 	.word	0x200027e0
 8005c10:	20000318 	.word	0x20000318
 8005c14:	20002780 	.word	0x20002780
 8005c18:	44250000 	.word	0x44250000
 8005c1c:	00000000 	.word	0x00000000

08005c20 <remote_gimbal_input>:


void remote_gimbal_input() {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005c26:	4b2e      	ldr	r3, [pc, #184]	; (8005ce0 <remote_gimbal_input+0xc0>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d104      	bne.n	8005c38 <remote_gimbal_input+0x18>
 8005c2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ce4 <remote_gimbal_input+0xc4>)
 8005c30:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d103      	bne.n	8005c40 <remote_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8005c38:	4b2b      	ldr	r3, [pc, #172]	; (8005ce8 <remote_gimbal_input+0xc8>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	725a      	strb	r2, [r3, #9]
 8005c3e:	e047      	b.n	8005cd0 <remote_gimbal_input+0xb0>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8005c40:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <remote_gimbal_input+0xc8>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	725a      	strb	r2, [r3, #9]
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 8005c46:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <remote_gimbal_input+0xc4>)
 8005c48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c54:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005cec <remote_gimbal_input+0xcc>
 8005c58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c5c:	eef1 7a67 	vneg.f32	s15, s15
 8005c60:	ee17 3a90 	vmov	r3, s15
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fa fc6f 	bl	8000548 <__aeabi_f2d>
				* REMOTE_PITCH_SPEED;
 8005c6a:	a31b      	add	r3, pc, #108	; (adr r3, 8005cd8 <remote_gimbal_input+0xb8>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f7fa fcc2 	bl	80005f8 <__aeabi_dmul>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	f7fa ffb4 	bl	8000be8 <__aeabi_d2f>
 8005c80:	4603      	mov	r3, r0
 8005c82:	607b      	str	r3, [r7, #4]
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 8005c84:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <remote_gimbal_input+0xc4>)
 8005c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c92:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005cec <remote_gimbal_input+0xcc>
 8005c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c9a:	eef1 7a67 	vneg.f32	s15, s15
 8005c9e:	ee17 3a90 	vmov	r3, s15
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fa fc50 	bl	8000548 <__aeabi_f2d>
				* REMOTE_YAW_SPEED;
 8005ca8:	a30b      	add	r3, pc, #44	; (adr r3, 8005cd8 <remote_gimbal_input+0xb8>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f7fa fca3 	bl	80005f8 <__aeabi_dmul>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	f7fa ff95 	bl	8000be8 <__aeabi_d2f>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_remote, yaw_remote);
 8005cc2:	edd7 0a00 	vldr	s1, [r7]
 8005cc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8005cca:	f7ff fd8b 	bl	80057e4 <gimbal_turn_ang>
	}
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	9999999a 	.word	0x9999999a
 8005cdc:	3fa99999 	.word	0x3fa99999
 8005ce0:	200027e0 	.word	0x200027e0
 8005ce4:	20000318 	.word	0x20000318
 8005ce8:	200027a0 	.word	0x200027a0
 8005cec:	44250000 	.word	0x44250000

08005cf0 <remote_launcher_control_input>:


void remote_launcher_control_input() {
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <remote_launcher_control_input+0x7c>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <remote_launcher_control_input+0x20>
 8005cfc:	4b1c      	ldr	r3, [pc, #112]	; (8005d70 <remote_launcher_control_input+0x80>)
 8005cfe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d004      	beq.n	8005d10 <remote_launcher_control_input+0x20>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005d06:	4b1a      	ldr	r3, [pc, #104]	; (8005d70 <remote_launcher_control_input+0x80>)
 8005d08:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d016      	beq.n	8005d3e <remote_launcher_control_input+0x4e>
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005d10:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <remote_launcher_control_input+0x80>)
 8005d12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d002      	beq.n	8005d20 <remote_launcher_control_input+0x30>
			launcher_safety_toggle = 0;
 8005d1a:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <remote_launcher_control_input+0x84>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	701a      	strb	r2, [r3, #0]
		}
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <remote_launcher_control_input+0x80>)
 8005d22:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d102      	bne.n	8005d30 <remote_launcher_control_input+0x40>
							launcher_ctrl_data.enabled = 0;
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <remote_launcher_control_input+0x88>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	715a      	strb	r2, [r3, #5]
				}
//		launcher_ctrl_data.enabled = 0;
		launcher_ctrl_data.gun_feeding_speed = 0;
 8005d30:	4b11      	ldr	r3, [pc, #68]	; (8005d78 <remote_launcher_control_input+0x88>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8005d36:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <remote_launcher_control_input+0x88>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	801a      	strh	r2, [r3, #0]
		} else {
			launcher_ctrl_data.gun_feeding_speed = 0;
		}
	}

}
 8005d3c:	e011      	b.n	8005d62 <remote_launcher_control_input+0x72>
		launcher_ctrl_data.enabled = 1;
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <remote_launcher_control_input+0x88>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <remote_launcher_control_input+0x88>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <remote_launcher_control_input+0x80>)
 8005d4c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d103      	bne.n	8005d5c <remote_launcher_control_input+0x6c>
			launcher_ctrl_data.gun_feeding_speed = 1;
 8005d54:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <remote_launcher_control_input+0x88>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	805a      	strh	r2, [r3, #2]
}
 8005d5a:	e002      	b.n	8005d62 <remote_launcher_control_input+0x72>
			launcher_ctrl_data.gun_feeding_speed = 0;
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <remote_launcher_control_input+0x88>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	805a      	strh	r2, [r3, #2]
}
 8005d62:	bf00      	nop
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	200027e0 	.word	0x200027e0
 8005d70:	20000318 	.word	0x20000318
 8005d74:	200027e1 	.word	0x200027e1
 8005d78:	20002798 	.word	0x20002798

08005d7c <gimbal_control_task>:
 *
 * FreeRTOS task for gimbal controls
 * Has HIGH2 priority
 *
 */
void gimbal_control_task(void *argument) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdTRUE,
 8005d84:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <gimbal_control_task+0x8c>)
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	2301      	movs	r3, #1
 8005d90:	2201      	movs	r2, #1
 8005d92:	2103      	movs	r1, #3
 8005d94:	f00f fb2e 	bl	80153f4 <xEventGroupWaitBits>
		portMAX_DELAY);
		start_time = xTaskGetTickCount();
 8005d98:	f010 fe62 	bl	8016a60 <xTaskGetTickCount>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	60fb      	str	r3, [r7, #12]
		if (gimbal_ctrl_data.enabled) {
 8005da0:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <gimbal_control_task+0x90>)
 8005da2:	7a5b      	ldrb	r3, [r3, #9]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d011      	beq.n	8005dcc <gimbal_control_task+0x50>
			if (gimbal_ctrl_data.imu_mode) {
 8005da8:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <gimbal_control_task+0x90>)
 8005daa:	7a1b      	ldrb	r3, [r3, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <gimbal_control_task+0x42>
				gimbal_control(can_motors + PITCH_MOTOR_ID - 1,
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <gimbal_control_task+0x94>)
 8005db2:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <gimbal_control_task+0x98>)
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 f830 	bl	8005e1c <gimbal_control>
 8005dbc:	e012      	b.n	8005de4 <gimbal_control_task+0x68>
						can_motors + YAW_MOTOR_ID - 1);
			} else {
				gimbal_angle_control(can_motors + PITCH_MOTOR_ID - 1,
 8005dbe:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <gimbal_control_task+0x94>)
 8005dc0:	4a14      	ldr	r2, [pc, #80]	; (8005e14 <gimbal_control_task+0x98>)
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 f927 	bl	8006018 <gimbal_angle_control>
 8005dca:	e00b      	b.n	8005de4 <gimbal_control_task+0x68>
						can_motors + YAW_MOTOR_ID - 1);
			}
		} else {
			can_motors[PITCH_MOTOR_ID - 1].rpm_pid.output = 0;
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <gimbal_control_task+0x9c>)
 8005dce:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
			can_motors[YAW_MOTOR_ID - 1].rpm_pid.output = 0;
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <gimbal_control_task+0x9c>)
 8005dda:	f603 3314 	addw	r3, r3, #2836	; 0xb14
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
//			motor_send_can(can_motors, PITCH_MOTOR_ID, YAW_MOTOR_ID, 0, 0);
		}
		status_led(2, off_led);
 8005de4:	2101      	movs	r1, #1
 8005de6:	2002      	movs	r0, #2
 8005de8:	f7fc f8a4 	bl	8001f34 <status_led>
		xEventGroupClearBits(gimbal_event_group, 0b11);
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <gimbal_control_task+0x8c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2103      	movs	r1, #3
 8005df2:	4618      	mov	r0, r3
 8005df4:	f00f fbcc 	bl	8015590 <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, GIMBAL_DELAY);
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	2105      	movs	r1, #5
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f010 fc60 	bl	80166c4 <vTaskDelayUntil>
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdTRUE,
 8005e04:	e7be      	b.n	8005d84 <gimbal_control_task+0x8>
 8005e06:	bf00      	nop
 8005e08:	20000464 	.word	0x20000464
 8005e0c:	200027a0 	.word	0x200027a0
 8005e10:	20002260 	.word	0x20002260
 8005e14:	20002304 	.word	0x20002304
 8005e18:	20001820 	.word	0x20001820

08005e1c <gimbal_control>:
 * 			yaw_motor		Pointer to yaw motor struct
 * @note both pitch and yaw are currently on CAN2 with ID5 and 6.
 * Need to check if having ID4 (i.e. 0x208) + having the launcher motors (ID 1-3, 0x201 to 0x203)
 * still provides a fast enough response
 */
void gimbal_control(motor_data_t *pitch_motor, motor_data_t *yaw_motor) {
 8005e1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e20:	b088      	sub	sp, #32
 8005e22:	af02      	add	r7, sp, #8
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
	static float prev_pit;
	static float prev_yaw;
	//todo: add in roll compensation
	uint8_t pit_lim = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	75fb      	strb	r3, [r7, #23]
	uint8_t yaw_lim = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	75bb      	strb	r3, [r7, #22]
	float rel_pitch_angle = pitch_motor->angle_data.adj_ang
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
			+ gimbal_ctrl_data.pitch - imu_heading.pit;
 8005e36:	4b70      	ldr	r3, [pc, #448]	; (8005ff8 <gimbal_control+0x1dc>)
 8005e38:	edd3 7a00 	vldr	s15, [r3]
 8005e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e40:	4b6e      	ldr	r3, [pc, #440]	; (8005ffc <gimbal_control+0x1e0>)
 8005e42:	edd3 7a00 	vldr	s15, [r3]
	float rel_pitch_angle = pitch_motor->angle_data.adj_ang
 8005e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e4a:	edc7 7a04 	vstr	s15, [r7, #16]
	if (rel_pitch_angle > pitch_motor->angle_data.max_ang) {
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005e54:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e60:	dd04      	ble.n	8005e6c <gimbal_control+0x50>
		rel_pitch_angle = pitch_motor->angle_data.max_ang;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e66:	613b      	str	r3, [r7, #16]
		pit_lim = 1;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	75fb      	strb	r3, [r7, #23]
	}
	if (rel_pitch_angle < pitch_motor->angle_data.min_ang) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005e72:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7e:	d504      	bpl.n	8005e8a <gimbal_control+0x6e>
		rel_pitch_angle = pitch_motor->angle_data.min_ang;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e84:	613b      	str	r3, [r7, #16]
		pit_lim = 1;
 8005e86:	2301      	movs	r3, #1
 8005e88:	75fb      	strb	r3, [r7, #23]
	}
	if (pit_lim == 1) {
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d10e      	bne.n	8005eae <gimbal_control+0x92>
		gimbal_ctrl_data.pitch = rel_pitch_angle + imu_heading.pit
 8005e90:	4b5a      	ldr	r3, [pc, #360]	; (8005ffc <gimbal_control+0x1e0>)
 8005e92:	ed93 7a00 	vldr	s14, [r3]
 8005e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
				- pitch_motor->angle_data.adj_ang;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
		gimbal_ctrl_data.pitch = rel_pitch_angle + imu_heading.pit
 8005ea8:	4b53      	ldr	r3, [pc, #332]	; (8005ff8 <gimbal_control+0x1dc>)
 8005eaa:	edc3 7a00 	vstr	s15, [r3]
	}

	yangle_pid(gimbal_ctrl_data.pitch,imu_heading.pit, pitch_motor,
 8005eae:	4b52      	ldr	r3, [pc, #328]	; (8005ff8 <gimbal_control+0x1dc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fa fb48 	bl	8000548 <__aeabi_f2d>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	4b4f      	ldr	r3, [pc, #316]	; (8005ffc <gimbal_control+0x1e0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fa fb41 	bl	8000548 <__aeabi_f2d>
 8005ec6:	4680      	mov	r8, r0
 8005ec8:	4689      	mov	r9, r1
 8005eca:	4b4c      	ldr	r3, [pc, #304]	; (8005ffc <gimbal_control+0x1e0>)
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	494b      	ldr	r1, [pc, #300]	; (8006000 <gimbal_control+0x1e4>)
 8005ed2:	eeb0 2a67 	vmov.f32	s4, s15
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	ec49 8b11 	vmov	d1, r8, r9
 8005edc:	ec45 4b10 	vmov	d0, r4, r5
 8005ee0:	f002 f8ae 	bl	8008040 <yangle_pid>
			imu_heading.pit, &prev_pit);


	float rel_yaw_angle = yaw_motor->angle_data.adj_ang + gimbal_ctrl_data.yaw
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005eea:	4b43      	ldr	r3, [pc, #268]	; (8005ff8 <gimbal_control+0x1dc>)
 8005eec:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
			- imu_heading.yaw;
 8005ef4:	4b41      	ldr	r3, [pc, #260]	; (8005ffc <gimbal_control+0x1e0>)
 8005ef6:	edd3 7a02 	vldr	s15, [r3, #8]
	float rel_yaw_angle = yaw_motor->angle_data.adj_ang + gimbal_ctrl_data.yaw
 8005efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005efe:	edc7 7a03 	vstr	s15, [r7, #12]
	//if yaw has overflowed (i.e. goes to the next round) move it back into pi to -pi range
	if (rel_yaw_angle > PI) {
 8005f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f06:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006004 <gimbal_control+0x1e8>
 8005f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f12:	dd07      	ble.n	8005f24 <gimbal_control+0x108>
		rel_yaw_angle -= 2 * PI;
 8005f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f18:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006008 <gimbal_control+0x1ec>
 8005f1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f20:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if (rel_yaw_angle < -PI) {
 8005f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f28:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800600c <gimbal_control+0x1f0>
 8005f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f34:	d507      	bpl.n	8005f46 <gimbal_control+0x12a>
		rel_yaw_angle += 2 * PI;
 8005f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f3a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8006008 <gimbal_control+0x1ec>
 8005f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f42:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	//check limits
	if (rel_yaw_angle > yaw_motor->angle_data.max_ang) {
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005f4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f58:	dd04      	ble.n	8005f64 <gimbal_control+0x148>
		rel_yaw_angle = yaw_motor->angle_data.max_ang;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f5e:	60fb      	str	r3, [r7, #12]
		yaw_lim = 1;
 8005f60:	2301      	movs	r3, #1
 8005f62:	75bb      	strb	r3, [r7, #22]
	}
	if (rel_yaw_angle < yaw_motor->angle_data.min_ang) {
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005f6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f76:	d504      	bpl.n	8005f82 <gimbal_control+0x166>
		rel_yaw_angle = yaw_motor->angle_data.min_ang;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f7c:	60fb      	str	r3, [r7, #12]
		yaw_lim = 1;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75bb      	strb	r3, [r7, #22]
	}
	if (yaw_lim == 1) {
 8005f82:	7dbb      	ldrb	r3, [r7, #22]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d10e      	bne.n	8005fa6 <gimbal_control+0x18a>
		gimbal_ctrl_data.yaw = rel_yaw_angle + imu_heading.yaw
 8005f88:	4b1c      	ldr	r3, [pc, #112]	; (8005ffc <gimbal_control+0x1e0>)
 8005f8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8005f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f92:	ee37 7a27 	vadd.f32	s14, s14, s15
				- yaw_motor->angle_data.adj_ang;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
		gimbal_ctrl_data.yaw = rel_yaw_angle + imu_heading.yaw
 8005fa0:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <gimbal_control+0x1dc>)
 8005fa2:	edc3 7a01 	vstr	s15, [r3, #4]

	}

//	yangle_pid(gimbal_ctrl_data.yaw, yaw_motor->angle_data.adj_ang, yaw_motor,
//			imu_heading.yaw, &prev_yaw);
	yangle_pid(gimbal_ctrl_data.yaw, imu_heading.yaw, yaw_motor,
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <gimbal_control+0x1dc>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fa facc 	bl	8000548 <__aeabi_f2d>
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	460d      	mov	r5, r1
 8005fb4:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <gimbal_control+0x1e0>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fa fac5 	bl	8000548 <__aeabi_f2d>
 8005fbe:	4680      	mov	r8, r0
 8005fc0:	4689      	mov	r9, r1
 8005fc2:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <gimbal_control+0x1e0>)
 8005fc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fc8:	4911      	ldr	r1, [pc, #68]	; (8006010 <gimbal_control+0x1f4>)
 8005fca:	eeb0 2a67 	vmov.f32	s4, s15
 8005fce:	6838      	ldr	r0, [r7, #0]
 8005fd0:	ec49 8b11 	vmov	d1, r8, r9
 8005fd4:	ec45 4b10 	vmov	d0, r4, r5
 8005fd8:	f002 f832 	bl	8008040 <yangle_pid>
			imu_heading.yaw, &prev_yaw);
//	angle_pid(gimbal_ctrl_data.yaw, imu_heading.yaw, yaw_motor);

	motor_send_can(can_motors, PITCH_MOTOR_ID, YAW_MOTOR_ID, 0, 0);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2212      	movs	r2, #18
 8005fe4:	2111      	movs	r1, #17
 8005fe6:	480b      	ldr	r0, [pc, #44]	; (8006014 <gimbal_control+0x1f8>)
 8005fe8:	f002 fadc 	bl	80085a4 <motor_send_can>


}
 8005fec:	bf00      	nop
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ff6:	bf00      	nop
 8005ff8:	200027a0 	.word	0x200027a0
 8005ffc:	20002828 	.word	0x20002828
 8006000:	200027e4 	.word	0x200027e4
 8006004:	40490fdb 	.word	0x40490fdb
 8006008:	40c90fdb 	.word	0x40c90fdb
 800600c:	c0490fdb 	.word	0xc0490fdb
 8006010:	200027e8 	.word	0x200027e8
 8006014:	20001820 	.word	0x20001820

08006018 <gimbal_angle_control>:

void gimbal_angle_control(motor_data_t *pitch_motor, motor_data_t *yaw_motor) {
 8006018:	b5b0      	push	{r4, r5, r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af02      	add	r7, sp, #8
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]

	if (gimbal_ctrl_data.pitch > pitch_motor->angle_data.max_ang) {
 8006022:	4b3a      	ldr	r3, [pc, #232]	; (800610c <gimbal_angle_control+0xf4>)
 8006024:	ed93 7a00 	vldr	s14, [r3]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800602e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006036:	dd03      	ble.n	8006040 <gimbal_angle_control+0x28>
		gimbal_ctrl_data.pitch = pitch_motor->angle_data.max_ang;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603c:	4a33      	ldr	r2, [pc, #204]	; (800610c <gimbal_angle_control+0xf4>)
 800603e:	6013      	str	r3, [r2, #0]
	}
	if (gimbal_ctrl_data.pitch < pitch_motor->angle_data.min_ang) {
 8006040:	4b32      	ldr	r3, [pc, #200]	; (800610c <gimbal_angle_control+0xf4>)
 8006042:	ed93 7a00 	vldr	s14, [r3]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800604c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006054:	d503      	bpl.n	800605e <gimbal_angle_control+0x46>
		gimbal_ctrl_data.pitch = pitch_motor->angle_data.min_ang;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605a:	4a2c      	ldr	r2, [pc, #176]	; (800610c <gimbal_angle_control+0xf4>)
 800605c:	6013      	str	r3, [r2, #0]
	}

	if (gimbal_ctrl_data.yaw > yaw_motor->angle_data.max_ang) {
 800605e:	4b2b      	ldr	r3, [pc, #172]	; (800610c <gimbal_angle_control+0xf4>)
 8006060:	ed93 7a01 	vldr	s14, [r3, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800606a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006072:	dd03      	ble.n	800607c <gimbal_angle_control+0x64>
		gimbal_ctrl_data.yaw = yaw_motor->angle_data.max_ang;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006078:	4a24      	ldr	r2, [pc, #144]	; (800610c <gimbal_angle_control+0xf4>)
 800607a:	6053      	str	r3, [r2, #4]
	}
	if (gimbal_ctrl_data.yaw < yaw_motor->angle_data.min_ang) {
 800607c:	4b23      	ldr	r3, [pc, #140]	; (800610c <gimbal_angle_control+0xf4>)
 800607e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8006088:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006090:	d503      	bpl.n	800609a <gimbal_angle_control+0x82>
		gimbal_ctrl_data.yaw = yaw_motor->angle_data.min_ang;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006096:	4a1d      	ldr	r2, [pc, #116]	; (800610c <gimbal_angle_control+0xf4>)
 8006098:	6053      	str	r3, [r2, #4]
	}
	angle_pid(gimbal_ctrl_data.pitch, pitch_motor->angle_data.adj_ang,
 800609a:	4b1c      	ldr	r3, [pc, #112]	; (800610c <gimbal_angle_control+0xf4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fa fa52 	bl	8000548 <__aeabi_f2d>
 80060a4:	4604      	mov	r4, r0
 80060a6:	460d      	mov	r5, r1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa fa4a 	bl	8000548 <__aeabi_f2d>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	ec43 2b11 	vmov	d1, r2, r3
 80060be:	ec45 4b10 	vmov	d0, r4, r5
 80060c2:	f002 f8fd 	bl	80082c0 <angle_pid>
			pitch_motor);
	angle_pid(gimbal_ctrl_data.yaw, yaw_motor->angle_data.adj_ang, yaw_motor);
 80060c6:	4b11      	ldr	r3, [pc, #68]	; (800610c <gimbal_angle_control+0xf4>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fa fa3c 	bl	8000548 <__aeabi_f2d>
 80060d0:	4604      	mov	r4, r0
 80060d2:	460d      	mov	r5, r1
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fa fa34 	bl	8000548 <__aeabi_f2d>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	6838      	ldr	r0, [r7, #0]
 80060e6:	ec43 2b11 	vmov	d1, r2, r3
 80060ea:	ec45 4b10 	vmov	d0, r4, r5
 80060ee:	f002 f8e7 	bl	80082c0 <angle_pid>
	motor_send_can(can_motors, PITCH_MOTOR_ID, YAW_MOTOR_ID, 0, 0);
 80060f2:	2300      	movs	r3, #0
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	2300      	movs	r3, #0
 80060f8:	2212      	movs	r2, #18
 80060fa:	2111      	movs	r1, #17
 80060fc:	4804      	ldr	r0, [pc, #16]	; (8006110 <gimbal_angle_control+0xf8>)
 80060fe:	f002 fa51 	bl	80085a4 <motor_send_can>
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bdb0      	pop	{r4, r5, r7, pc}
 800610a:	bf00      	nop
 800610c:	200027a0 	.word	0x200027a0
 8006110:	20001820 	.word	0x20001820

08006114 <imu_proc_task_notif>:
extern QueueHandle_t mag_data_queue;
extern TaskHandle_t imu_processing_task_handle;
static uint32_t last_proc_times[2];
static uint8_t update_flag = 0;

void imu_proc_task_notif() {
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 800611a:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <imu_proc_task_notif+0x3c>)
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8006120:	2300      	movs	r3, #0
 8006122:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <imu_proc_task_notif+0x40>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	1d3a      	adds	r2, r7, #4
 800612a:	4611      	mov	r1, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f011 f9a3 	bl	8017478 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <imu_proc_task_notif+0x34>
 8006138:	4b07      	ldr	r3, [pc, #28]	; (8006158 <imu_proc_task_notif+0x44>)
 800613a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	f3bf 8f6f 	isb	sy
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20002868 	.word	0x20002868
 8006154:	20000460 	.word	0x20000460
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	463c      	mov	r4, r7
 8006164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gyro_proc_data.gx = gyro_data.gx;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	4a10      	ldr	r2, [pc, #64]	; (80061ac <gyro_data_ready+0x50>)
 800616c:	6013      	str	r3, [r2, #0]
	gyro_proc_data.gy = gyro_data.gy;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a0e      	ldr	r2, [pc, #56]	; (80061ac <gyro_data_ready+0x50>)
 8006172:	6053      	str	r3, [r2, #4]
	gyro_proc_data.gz = gyro_data.gz;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4a0d      	ldr	r2, [pc, #52]	; (80061ac <gyro_data_ready+0x50>)
 8006178:	6093      	str	r3, [r2, #8]
	if (IMU_ORIENTATION == 2) {		// swap gyro inputs for vertically mounted devboard
		gyro_proc_data.gx = gyro_data.gz;
		gyro_proc_data.gy = gyro_data.gy;
		gyro_proc_data.gz = -gyro_data.gx;
	}
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4a0b      	ldr	r2, [pc, #44]	; (80061ac <gyro_data_ready+0x50>)
 800617e:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <gyro_data_ready+0x54>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	b2da      	uxtb	r2, r3
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <gyro_data_ready+0x54>)
 800618c:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if (update_flag == 0b111|| update_flag == 0b011) {
 800618e:	4b08      	ldr	r3, [pc, #32]	; (80061b0 <gyro_data_ready+0x54>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b07      	cmp	r3, #7
 8006194:	d003      	beq.n	800619e <gyro_data_ready+0x42>
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <gyro_data_ready+0x54>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b03      	cmp	r3, #3
 800619c:	d101      	bne.n	80061a2 <gyro_data_ready+0x46>
		imu_proc_task_notif();
 800619e:	f7ff ffb9 	bl	8006114 <imu_proc_task_notif>
	}
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd90      	pop	{r4, r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20002844 	.word	0x20002844
 80061b0:	20002868 	.word	0x20002868

080061b4 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 80061b4:	b590      	push	{r4, r7, lr}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	463c      	mov	r4, r7
 80061bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	accel_proc_data.ax = accel_data.ax;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	4a10      	ldr	r2, [pc, #64]	; (8006204 <accel_data_ready+0x50>)
 80061c4:	6013      	str	r3, [r2, #0]
	accel_proc_data.ay = accel_data.ay;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a0e      	ldr	r2, [pc, #56]	; (8006204 <accel_data_ready+0x50>)
 80061ca:	6053      	str	r3, [r2, #4]
	accel_proc_data.az = accel_data.az;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <accel_data_ready+0x50>)
 80061d0:	6093      	str	r3, [r2, #8]
		accel_proc_data.ax = accel_data.az;
		accel_proc_data.ay = accel_data.ay;
		accel_proc_data.az = -accel_data.ax;
	}

	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4a0b      	ldr	r2, [pc, #44]	; (8006204 <accel_data_ready+0x50>)
 80061d6:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 80061d8:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <accel_data_ready+0x54>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	4b09      	ldr	r3, [pc, #36]	; (8006208 <accel_data_ready+0x54>)
 80061e4:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if (update_flag == 0b111 || update_flag == 0b011) {
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <accel_data_ready+0x54>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b07      	cmp	r3, #7
 80061ec:	d003      	beq.n	80061f6 <accel_data_ready+0x42>
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <accel_data_ready+0x54>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d101      	bne.n	80061fa <accel_data_ready+0x46>
		imu_proc_task_notif();
 80061f6:	f7ff ff8d 	bl	8006114 <imu_proc_task_notif>
	}
}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd90      	pop	{r4, r7, pc}
 8006202:	bf00      	nop
 8006204:	20002834 	.word	0x20002834
 8006208:	20002868 	.word	0x20002868

0800620c <mag_data_ready>:

void mag_data_ready(mag_data_t mag_data) {
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mag_proc_data.mx = mag_data.mx;
 8006218:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800621c:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <mag_data_ready+0x44>)
 800621e:	801a      	strh	r2, [r3, #0]
	mag_proc_data.my = mag_data.my;
 8006220:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <mag_data_ready+0x44>)
 8006226:	805a      	strh	r2, [r3, #2]
	mag_proc_data.mz = mag_data.mz;
 8006228:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800622c:	4b08      	ldr	r3, [pc, #32]	; (8006250 <mag_data_ready+0x44>)
 800622e:	809a      	strh	r2, [r3, #4]
	mag_proc_data.last_mag_update = mag_data.last_mag_update;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a07      	ldr	r2, [pc, #28]	; (8006250 <mag_data_ready+0x44>)
 8006234:	6093      	str	r3, [r2, #8]

	update_flag |= 1 << 2;
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <mag_data_ready+0x48>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f043 0304 	orr.w	r3, r3, #4
 800623e:	b2da      	uxtb	r2, r3
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <mag_data_ready+0x48>)
 8006242:	701a      	strb	r2, [r3, #0]
	if (update_flag == 0b111) {
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	20002854 	.word	0x20002854
 8006254:	20002868 	.word	0x20002868

08006258 <imu_processing_task>:

void imu_processing_task(void *argument) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	imu_start_ints();
 8006260:	f7fb fc72 	bl	8001b48 <imu_start_ints>
	init_quaternion();
 8006264:	f000 f80a 	bl	800627c <init_quaternion>
	while (1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006268:	f04f 31ff 	mov.w	r1, #4294967295
 800626c:	2001      	movs	r0, #1
 800626e:	f011 f8b7 	bl	80173e0 <ulTaskNotifyTake>
		imu_ahrs_update();
 8006272:	f000 f93f 	bl	80064f4 <imu_ahrs_update>
		imu_attitude_update();
 8006276:	f000 fd91 	bl	8006d9c <imu_attitude_update>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800627a:	e7f5      	b.n	8006268 <imu_processing_task+0x10>

0800627c <init_quaternion>:
	}
}

void init_quaternion(void) {
 800627c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
	int16_t hx, hy; //hz;

	hx = mag_proc_data.mx;
 8006284:	4b79      	ldr	r3, [pc, #484]	; (800646c <init_quaternion+0x1f0>)
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	81fb      	strh	r3, [r7, #14]
	hy = mag_proc_data.my;
 800628a:	4b78      	ldr	r3, [pc, #480]	; (800646c <init_quaternion+0x1f0>)
 800628c:	885b      	ldrh	r3, [r3, #2]
 800628e:	81bb      	strh	r3, [r7, #12]
			q2 = -0.56;
			q3 = 0.0045;
		}
	}
	#else
	if (hx < 0 && hy < 0) {
 8006290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006294:	2b00      	cmp	r3, #0
 8006296:	da36      	bge.n	8006306 <init_quaternion+0x8a>
 8006298:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	da32      	bge.n	8006306 <init_quaternion+0x8a>
		if (fabs(hx / hy) >= 1) {
 80062a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80062a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80062a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fa f939 	bl	8000524 <__aeabi_i2d>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	603a      	str	r2, [r7, #0]
 80062b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	607b      	str	r3, [r7, #4]
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	4b6b      	ldr	r3, [pc, #428]	; (8006470 <init_quaternion+0x1f4>)
 80062c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062c8:	f7fa fc1c 	bl	8000b04 <__aeabi_dcmpge>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00c      	beq.n	80062ec <init_quaternion+0x70>
			q0 = 0.195;
 80062d2:	4b68      	ldr	r3, [pc, #416]	; (8006474 <init_quaternion+0x1f8>)
 80062d4:	4a68      	ldr	r2, [pc, #416]	; (8006478 <init_quaternion+0x1fc>)
 80062d6:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 80062d8:	4b68      	ldr	r3, [pc, #416]	; (800647c <init_quaternion+0x200>)
 80062da:	4a69      	ldr	r2, [pc, #420]	; (8006480 <init_quaternion+0x204>)
 80062dc:	601a      	str	r2, [r3, #0]
			q2 = 0.0043;
 80062de:	4b69      	ldr	r3, [pc, #420]	; (8006484 <init_quaternion+0x208>)
 80062e0:	4a69      	ldr	r2, [pc, #420]	; (8006488 <init_quaternion+0x20c>)
 80062e2:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 80062e4:	4b69      	ldr	r3, [pc, #420]	; (800648c <init_quaternion+0x210>)
 80062e6:	4a6a      	ldr	r2, [pc, #424]	; (8006490 <init_quaternion+0x214>)
 80062e8:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80062ea:	e0ba      	b.n	8006462 <init_quaternion+0x1e6>
		} else {
			q0 = 0.555;
 80062ec:	4b61      	ldr	r3, [pc, #388]	; (8006474 <init_quaternion+0x1f8>)
 80062ee:	4a69      	ldr	r2, [pc, #420]	; (8006494 <init_quaternion+0x218>)
 80062f0:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 80062f2:	4b62      	ldr	r3, [pc, #392]	; (800647c <init_quaternion+0x200>)
 80062f4:	4a62      	ldr	r2, [pc, #392]	; (8006480 <init_quaternion+0x204>)
 80062f6:	601a      	str	r2, [r3, #0]
			q2 = 0.006;
 80062f8:	4b62      	ldr	r3, [pc, #392]	; (8006484 <init_quaternion+0x208>)
 80062fa:	4a67      	ldr	r2, [pc, #412]	; (8006498 <init_quaternion+0x21c>)
 80062fc:	601a      	str	r2, [r3, #0]
			q3 = 0.829;
 80062fe:	4b63      	ldr	r3, [pc, #396]	; (800648c <init_quaternion+0x210>)
 8006300:	4a66      	ldr	r2, [pc, #408]	; (800649c <init_quaternion+0x220>)
 8006302:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8006304:	e0ad      	b.n	8006462 <init_quaternion+0x1e6>
		}

	} else if (hx < 0 && hy > 0) {
 8006306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800630a:	2b00      	cmp	r3, #0
 800630c:	da35      	bge.n	800637a <init_quaternion+0xfe>
 800630e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	dd31      	ble.n	800637a <init_quaternion+0xfe>
		if (fabs(hx / hy) >= 1) {
 8006316:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800631a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800631e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006322:	4618      	mov	r0, r3
 8006324:	f7fa f8fe 	bl	8000524 <__aeabi_i2d>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4692      	mov	sl, r2
 800632e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	4b4e      	ldr	r3, [pc, #312]	; (8006470 <init_quaternion+0x1f4>)
 8006338:	4650      	mov	r0, sl
 800633a:	4659      	mov	r1, fp
 800633c:	f7fa fbe2 	bl	8000b04 <__aeabi_dcmpge>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00c      	beq.n	8006360 <init_quaternion+0xe4>
			q0 = -0.193;
 8006346:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <init_quaternion+0x1f8>)
 8006348:	4a55      	ldr	r2, [pc, #340]	; (80064a0 <init_quaternion+0x224>)
 800634a:	601a      	str	r2, [r3, #0]
			q1 = -0.009;
 800634c:	4b4b      	ldr	r3, [pc, #300]	; (800647c <init_quaternion+0x200>)
 800634e:	4a55      	ldr	r2, [pc, #340]	; (80064a4 <init_quaternion+0x228>)
 8006350:	601a      	str	r2, [r3, #0]
			q2 = -0.006;
 8006352:	4b4c      	ldr	r3, [pc, #304]	; (8006484 <init_quaternion+0x208>)
 8006354:	4a54      	ldr	r2, [pc, #336]	; (80064a8 <init_quaternion+0x22c>)
 8006356:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8006358:	4b4c      	ldr	r3, [pc, #304]	; (800648c <init_quaternion+0x210>)
 800635a:	4a4d      	ldr	r2, [pc, #308]	; (8006490 <init_quaternion+0x214>)
 800635c:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800635e:	e080      	b.n	8006462 <init_quaternion+0x1e6>
		} else {
			q0 = -0.552;
 8006360:	4b44      	ldr	r3, [pc, #272]	; (8006474 <init_quaternion+0x1f8>)
 8006362:	4a52      	ldr	r2, [pc, #328]	; (80064ac <init_quaternion+0x230>)
 8006364:	601a      	str	r2, [r3, #0]
			q1 = -0.0048;
 8006366:	4b45      	ldr	r3, [pc, #276]	; (800647c <init_quaternion+0x200>)
 8006368:	4a51      	ldr	r2, [pc, #324]	; (80064b0 <init_quaternion+0x234>)
 800636a:	601a      	str	r2, [r3, #0]
			q2 = -0.0115;
 800636c:	4b45      	ldr	r3, [pc, #276]	; (8006484 <init_quaternion+0x208>)
 800636e:	4a51      	ldr	r2, [pc, #324]	; (80064b4 <init_quaternion+0x238>)
 8006370:	601a      	str	r2, [r3, #0]
			q3 = 0.8313;
 8006372:	4b46      	ldr	r3, [pc, #280]	; (800648c <init_quaternion+0x210>)
 8006374:	4a50      	ldr	r2, [pc, #320]	; (80064b8 <init_quaternion+0x23c>)
 8006376:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8006378:	e073      	b.n	8006462 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy > 0) {
 800637a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800637e:	2b00      	cmp	r3, #0
 8006380:	dd35      	ble.n	80063ee <init_quaternion+0x172>
 8006382:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	dd31      	ble.n	80063ee <init_quaternion+0x172>
		if (fabs(hx / hy) >= 1) {
 800638a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800638e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006392:	fb92 f3f3 	sdiv	r3, r2, r3
 8006396:	4618      	mov	r0, r3
 8006398:	f7fa f8c4 	bl	8000524 <__aeabi_i2d>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4690      	mov	r8, r2
 80063a2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	4b31      	ldr	r3, [pc, #196]	; (8006470 <init_quaternion+0x1f4>)
 80063ac:	4640      	mov	r0, r8
 80063ae:	4649      	mov	r1, r9
 80063b0:	f7fa fba8 	bl	8000b04 <__aeabi_dcmpge>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00c      	beq.n	80063d4 <init_quaternion+0x158>
			q0 = -0.9785;
 80063ba:	4b2e      	ldr	r3, [pc, #184]	; (8006474 <init_quaternion+0x1f8>)
 80063bc:	4a3f      	ldr	r2, [pc, #252]	; (80064bc <init_quaternion+0x240>)
 80063be:	601a      	str	r2, [r3, #0]
			q1 = 0.008;
 80063c0:	4b2e      	ldr	r3, [pc, #184]	; (800647c <init_quaternion+0x200>)
 80063c2:	4a3f      	ldr	r2, [pc, #252]	; (80064c0 <init_quaternion+0x244>)
 80063c4:	601a      	str	r2, [r3, #0]
			q2 = -0.02;
 80063c6:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <init_quaternion+0x208>)
 80063c8:	4a3e      	ldr	r2, [pc, #248]	; (80064c4 <init_quaternion+0x248>)
 80063ca:	601a      	str	r2, [r3, #0]
			q3 = 0.195;
 80063cc:	4b2f      	ldr	r3, [pc, #188]	; (800648c <init_quaternion+0x210>)
 80063ce:	4a2a      	ldr	r2, [pc, #168]	; (8006478 <init_quaternion+0x1fc>)
 80063d0:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80063d2:	e046      	b.n	8006462 <init_quaternion+0x1e6>
		} else {
			q0 = -0.9828;
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <init_quaternion+0x1f8>)
 80063d6:	4a3c      	ldr	r2, [pc, #240]	; (80064c8 <init_quaternion+0x24c>)
 80063d8:	601a      	str	r2, [r3, #0]
			q1 = 0.002;
 80063da:	4b28      	ldr	r3, [pc, #160]	; (800647c <init_quaternion+0x200>)
 80063dc:	4a3b      	ldr	r2, [pc, #236]	; (80064cc <init_quaternion+0x250>)
 80063de:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 80063e0:	4b28      	ldr	r3, [pc, #160]	; (8006484 <init_quaternion+0x208>)
 80063e2:	4a3b      	ldr	r2, [pc, #236]	; (80064d0 <init_quaternion+0x254>)
 80063e4:	601a      	str	r2, [r3, #0]
			q3 = 0.5557;
 80063e6:	4b29      	ldr	r3, [pc, #164]	; (800648c <init_quaternion+0x210>)
 80063e8:	4a3a      	ldr	r2, [pc, #232]	; (80064d4 <init_quaternion+0x258>)
 80063ea:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80063ec:	e039      	b.n	8006462 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy < 0) {
 80063ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dd35      	ble.n	8006462 <init_quaternion+0x1e6>
 80063f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	da31      	bge.n	8006462 <init_quaternion+0x1e6>
		if (fabs(hx / hy) >= 1) {
 80063fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006402:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006406:	fb92 f3f3 	sdiv	r3, r2, r3
 800640a:	4618      	mov	r0, r3
 800640c:	f7fa f88a 	bl	8000524 <__aeabi_i2d>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4614      	mov	r4, r2
 8006416:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <init_quaternion+0x1f4>)
 8006420:	4620      	mov	r0, r4
 8006422:	4629      	mov	r1, r5
 8006424:	f7fa fb6e 	bl	8000b04 <__aeabi_dcmpge>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <init_quaternion+0x1cc>
			q0 = -0.979;
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <init_quaternion+0x1f8>)
 8006430:	4a29      	ldr	r2, [pc, #164]	; (80064d8 <init_quaternion+0x25c>)
 8006432:	601a      	str	r2, [r3, #0]
			q1 = 0.0116;
 8006434:	4b11      	ldr	r3, [pc, #68]	; (800647c <init_quaternion+0x200>)
 8006436:	4a29      	ldr	r2, [pc, #164]	; (80064dc <init_quaternion+0x260>)
 8006438:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <init_quaternion+0x208>)
 800643c:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <init_quaternion+0x254>)
 800643e:	601a      	str	r2, [r3, #0]
			q3 = -0.195;
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <init_quaternion+0x210>)
 8006442:	4a27      	ldr	r2, [pc, #156]	; (80064e0 <init_quaternion+0x264>)
 8006444:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
			q3 = -0.556;
		}
	}
#endif
}
 8006446:	e00c      	b.n	8006462 <init_quaternion+0x1e6>
			q0 = -0.83;
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <init_quaternion+0x1f8>)
 800644a:	4a26      	ldr	r2, [pc, #152]	; (80064e4 <init_quaternion+0x268>)
 800644c:	601a      	str	r2, [r3, #0]
			q1 = 0.014;
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <init_quaternion+0x200>)
 8006450:	4a25      	ldr	r2, [pc, #148]	; (80064e8 <init_quaternion+0x26c>)
 8006452:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <init_quaternion+0x208>)
 8006456:	4a25      	ldr	r2, [pc, #148]	; (80064ec <init_quaternion+0x270>)
 8006458:	601a      	str	r2, [r3, #0]
			q3 = -0.556;
 800645a:	4b0c      	ldr	r3, [pc, #48]	; (800648c <init_quaternion+0x210>)
 800645c:	4a24      	ldr	r2, [pc, #144]	; (80064f0 <init_quaternion+0x274>)
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	e7ff      	b.n	8006462 <init_quaternion+0x1e6>
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800646c:	20002854 	.word	0x20002854
 8006470:	3ff00000 	.word	0x3ff00000
 8006474:	2000000c 	.word	0x2000000c
 8006478:	3e47ae14 	.word	0x3e47ae14
 800647c:	200027ec 	.word	0x200027ec
 8006480:	bc75c28f 	.word	0xbc75c28f
 8006484:	200027f0 	.word	0x200027f0
 8006488:	3b8ce704 	.word	0x3b8ce704
 800648c:	200027f4 	.word	0x200027f4
 8006490:	3f7a9fbe 	.word	0x3f7a9fbe
 8006494:	3f0e147b 	.word	0x3f0e147b
 8006498:	3bc49ba6 	.word	0x3bc49ba6
 800649c:	3f543958 	.word	0x3f543958
 80064a0:	be45a1cb 	.word	0xbe45a1cb
 80064a4:	bc1374bc 	.word	0xbc1374bc
 80064a8:	bbc49ba6 	.word	0xbbc49ba6
 80064ac:	bf0d4fdf 	.word	0xbf0d4fdf
 80064b0:	bb9d4952 	.word	0xbb9d4952
 80064b4:	bc3c6a7f 	.word	0xbc3c6a7f
 80064b8:	3f54d014 	.word	0x3f54d014
 80064bc:	bf7a7efa 	.word	0xbf7a7efa
 80064c0:	3c03126f 	.word	0x3c03126f
 80064c4:	bca3d70a 	.word	0xbca3d70a
 80064c8:	bf7b98c8 	.word	0xbf7b98c8
 80064cc:	3b03126f 	.word	0x3b03126f
 80064d0:	bc88ce70 	.word	0xbc88ce70
 80064d4:	3f0e425b 	.word	0x3f0e425b
 80064d8:	bf7a9fbe 	.word	0xbf7a9fbe
 80064dc:	3c3e0ded 	.word	0x3c3e0ded
 80064e0:	be47ae14 	.word	0xbe47ae14
 80064e4:	bf547ae1 	.word	0xbf547ae1
 80064e8:	3c656042 	.word	0x3c656042
 80064ec:	bc449ba6 	.word	0xbc449ba6
 80064f0:	bf0e5604 	.word	0xbf0e5604

080064f4 <imu_ahrs_update>:
	q1 = tempq1 * norm;
	q2 = tempq2 * norm;
	q3 = tempq3 * norm;
}

void imu_ahrs_update(void) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b09e      	sub	sp, #120	; 0x78
 80064f8:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0, tempq1, tempq2, tempq3;

	float q0q0 = q0 * q0;
 80064fa:	4bd3      	ldr	r3, [pc, #844]	; (8006848 <imu_ahrs_update+0x354>)
 80064fc:	ed93 7a00 	vldr	s14, [r3]
 8006500:	4bd1      	ldr	r3, [pc, #836]	; (8006848 <imu_ahrs_update+0x354>)
 8006502:	edd3 7a00 	vldr	s15, [r3]
 8006506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0 * q1;
 800650e:	4bce      	ldr	r3, [pc, #824]	; (8006848 <imu_ahrs_update+0x354>)
 8006510:	ed93 7a00 	vldr	s14, [r3]
 8006514:	4bcd      	ldr	r3, [pc, #820]	; (800684c <imu_ahrs_update+0x358>)
 8006516:	edd3 7a00 	vldr	s15, [r3]
 800651a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0 * q2;
 8006522:	4bc9      	ldr	r3, [pc, #804]	; (8006848 <imu_ahrs_update+0x354>)
 8006524:	ed93 7a00 	vldr	s14, [r3]
 8006528:	4bc9      	ldr	r3, [pc, #804]	; (8006850 <imu_ahrs_update+0x35c>)
 800652a:	edd3 7a00 	vldr	s15, [r3]
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0 * q3;
 8006536:	4bc4      	ldr	r3, [pc, #784]	; (8006848 <imu_ahrs_update+0x354>)
 8006538:	ed93 7a00 	vldr	s14, [r3]
 800653c:	4bc5      	ldr	r3, [pc, #788]	; (8006854 <imu_ahrs_update+0x360>)
 800653e:	edd3 7a00 	vldr	s15, [r3]
 8006542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006546:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1 * q1;
 800654a:	4bc0      	ldr	r3, [pc, #768]	; (800684c <imu_ahrs_update+0x358>)
 800654c:	ed93 7a00 	vldr	s14, [r3]
 8006550:	4bbe      	ldr	r3, [pc, #760]	; (800684c <imu_ahrs_update+0x358>)
 8006552:	edd3 7a00 	vldr	s15, [r3]
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1 * q2;
 800655e:	4bbb      	ldr	r3, [pc, #748]	; (800684c <imu_ahrs_update+0x358>)
 8006560:	ed93 7a00 	vldr	s14, [r3]
 8006564:	4bba      	ldr	r3, [pc, #744]	; (8006850 <imu_ahrs_update+0x35c>)
 8006566:	edd3 7a00 	vldr	s15, [r3]
 800656a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1 * q3;
 8006572:	4bb6      	ldr	r3, [pc, #728]	; (800684c <imu_ahrs_update+0x358>)
 8006574:	ed93 7a00 	vldr	s14, [r3]
 8006578:	4bb6      	ldr	r3, [pc, #728]	; (8006854 <imu_ahrs_update+0x360>)
 800657a:	edd3 7a00 	vldr	s15, [r3]
 800657e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006582:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2 * q2;
 8006586:	4bb2      	ldr	r3, [pc, #712]	; (8006850 <imu_ahrs_update+0x35c>)
 8006588:	ed93 7a00 	vldr	s14, [r3]
 800658c:	4bb0      	ldr	r3, [pc, #704]	; (8006850 <imu_ahrs_update+0x35c>)
 800658e:	edd3 7a00 	vldr	s15, [r3]
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2 * q3;
 800659a:	4bad      	ldr	r3, [pc, #692]	; (8006850 <imu_ahrs_update+0x35c>)
 800659c:	ed93 7a00 	vldr	s14, [r3]
 80065a0:	4bac      	ldr	r3, [pc, #688]	; (8006854 <imu_ahrs_update+0x360>)
 80065a2:	edd3 7a00 	vldr	s15, [r3]
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3 * q3;
 80065ae:	4ba9      	ldr	r3, [pc, #676]	; (8006854 <imu_ahrs_update+0x360>)
 80065b0:	ed93 7a00 	vldr	s14, [r3]
 80065b4:	4ba7      	ldr	r3, [pc, #668]	; (8006854 <imu_ahrs_update+0x360>)
 80065b6:	edd3 7a00 	vldr	s15, [r3]
 80065ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065be:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = gyro_proc_data.gx;
 80065c2:	4ba5      	ldr	r3, [pc, #660]	; (8006858 <imu_ahrs_update+0x364>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4aa5      	ldr	r2, [pc, #660]	; (800685c <imu_ahrs_update+0x368>)
 80065c8:	6013      	str	r3, [r2, #0]
	gy = gyro_proc_data.gy;
 80065ca:	4ba3      	ldr	r3, [pc, #652]	; (8006858 <imu_ahrs_update+0x364>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4aa4      	ldr	r2, [pc, #656]	; (8006860 <imu_ahrs_update+0x36c>)
 80065d0:	6013      	str	r3, [r2, #0]
	gz = gyro_proc_data.gz;
 80065d2:	4ba1      	ldr	r3, [pc, #644]	; (8006858 <imu_ahrs_update+0x364>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	4aa3      	ldr	r2, [pc, #652]	; (8006864 <imu_ahrs_update+0x370>)
 80065d8:	6013      	str	r3, [r2, #0]
	ax = accel_proc_data.ax;
 80065da:	4ba3      	ldr	r3, [pc, #652]	; (8006868 <imu_ahrs_update+0x374>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4aa3      	ldr	r2, [pc, #652]	; (800686c <imu_ahrs_update+0x378>)
 80065e0:	6013      	str	r3, [r2, #0]
	ay = accel_proc_data.ay;
 80065e2:	4ba1      	ldr	r3, [pc, #644]	; (8006868 <imu_ahrs_update+0x374>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	4aa2      	ldr	r2, [pc, #648]	; (8006870 <imu_ahrs_update+0x37c>)
 80065e8:	6013      	str	r3, [r2, #0]
	az = accel_proc_data.az;
 80065ea:	4b9f      	ldr	r3, [pc, #636]	; (8006868 <imu_ahrs_update+0x374>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	4aa1      	ldr	r2, [pc, #644]	; (8006874 <imu_ahrs_update+0x380>)
 80065f0:	6013      	str	r3, [r2, #0]
	mx = mag_proc_data.mx;
 80065f2:	4ba1      	ldr	r3, [pc, #644]	; (8006878 <imu_ahrs_update+0x384>)
 80065f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065f8:	ee07 3a90 	vmov	s15, r3
 80065fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006600:	4b9e      	ldr	r3, [pc, #632]	; (800687c <imu_ahrs_update+0x388>)
 8006602:	edc3 7a00 	vstr	s15, [r3]
	my = mag_proc_data.my;
 8006606:	4b9c      	ldr	r3, [pc, #624]	; (8006878 <imu_ahrs_update+0x384>)
 8006608:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006614:	4b9a      	ldr	r3, [pc, #616]	; (8006880 <imu_ahrs_update+0x38c>)
 8006616:	edc3 7a00 	vstr	s15, [r3]
	mz = mag_proc_data.mz;
 800661a:	4b97      	ldr	r3, [pc, #604]	; (8006878 <imu_ahrs_update+0x384>)
 800661c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006628:	4b96      	ldr	r3, [pc, #600]	; (8006884 <imu_ahrs_update+0x390>)
 800662a:	edc3 7a00 	vstr	s15, [r3]

	last_proc_times[0] = HAL_GetTick(); //ms
 800662e:	f003 f825 	bl	800967c <HAL_GetTick>
 8006632:	4603      	mov	r3, r0
 8006634:	4a94      	ldr	r2, [pc, #592]	; (8006888 <imu_ahrs_update+0x394>)
 8006636:	6013      	str	r3, [r2, #0]
	halfT = ((float) (last_proc_times[0] - last_proc_times[1]) / 2000.0f);
 8006638:	4b93      	ldr	r3, [pc, #588]	; (8006888 <imu_ahrs_update+0x394>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	4b92      	ldr	r3, [pc, #584]	; (8006888 <imu_ahrs_update+0x394>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800664a:	eddf 6a90 	vldr	s13, [pc, #576]	; 800688c <imu_ahrs_update+0x398>
 800664e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006652:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_proc_times[1] = last_proc_times[0];
 8006656:	4b8c      	ldr	r3, [pc, #560]	; (8006888 <imu_ahrs_update+0x394>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a8b      	ldr	r2, [pc, #556]	; (8006888 <imu_ahrs_update+0x394>)
 800665c:	6053      	str	r3, [r2, #4]

	/* Fast inverse square-root */
	norm = inv_sqrt(ax * ax + ay * ay + az * az);
 800665e:	4b83      	ldr	r3, [pc, #524]	; (800686c <imu_ahrs_update+0x378>)
 8006660:	ed93 7a00 	vldr	s14, [r3]
 8006664:	4b81      	ldr	r3, [pc, #516]	; (800686c <imu_ahrs_update+0x378>)
 8006666:	edd3 7a00 	vldr	s15, [r3]
 800666a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800666e:	4b80      	ldr	r3, [pc, #512]	; (8006870 <imu_ahrs_update+0x37c>)
 8006670:	edd3 6a00 	vldr	s13, [r3]
 8006674:	4b7e      	ldr	r3, [pc, #504]	; (8006870 <imu_ahrs_update+0x37c>)
 8006676:	edd3 7a00 	vldr	s15, [r3]
 800667a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800667e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006682:	4b7c      	ldr	r3, [pc, #496]	; (8006874 <imu_ahrs_update+0x380>)
 8006684:	edd3 6a00 	vldr	s13, [r3]
 8006688:	4b7a      	ldr	r3, [pc, #488]	; (8006874 <imu_ahrs_update+0x380>)
 800668a:	edd3 7a00 	vldr	s15, [r3]
 800668e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006696:	eeb0 0a67 	vmov.f32	s0, s15
 800669a:	f7fa ffd5 	bl	8001648 <inv_sqrt>
 800669e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 80066a2:	4b72      	ldr	r3, [pc, #456]	; (800686c <imu_ahrs_update+0x378>)
 80066a4:	ed93 7a00 	vldr	s14, [r3]
 80066a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80066ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b0:	4b6e      	ldr	r3, [pc, #440]	; (800686c <imu_ahrs_update+0x378>)
 80066b2:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 80066b6:	4b6e      	ldr	r3, [pc, #440]	; (8006870 <imu_ahrs_update+0x37c>)
 80066b8:	ed93 7a00 	vldr	s14, [r3]
 80066bc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80066c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c4:	4b6a      	ldr	r3, [pc, #424]	; (8006870 <imu_ahrs_update+0x37c>)
 80066c6:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 80066ca:	4b6a      	ldr	r3, [pc, #424]	; (8006874 <imu_ahrs_update+0x380>)
 80066cc:	ed93 7a00 	vldr	s14, [r3]
 80066d0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80066d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d8:	4b66      	ldr	r3, [pc, #408]	; (8006874 <imu_ahrs_update+0x380>)
 80066da:	edc3 7a00 	vstr	s15, [r3]
		norm = inv_sqrt(mx*mx + my*my + mz*mz);
		mx = mx * norm;
		my = my * norm;
		mz = mz * norm;
	#else
	mx = 0;
 80066de:	4b67      	ldr	r3, [pc, #412]	; (800687c <imu_ahrs_update+0x388>)
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
	my = 0;
 80066e6:	4b66      	ldr	r3, [pc, #408]	; (8006880 <imu_ahrs_update+0x38c>)
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
	mz = 0;
 80066ee:	4b65      	ldr	r3, [pc, #404]	; (8006884 <imu_ahrs_update+0x390>)
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
#endif
	/* compute reference direction of flux */
	hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 80066f6:	4b61      	ldr	r3, [pc, #388]	; (800687c <imu_ahrs_update+0x388>)
 80066f8:	edd3 7a00 	vldr	s15, [r3]
 80066fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006700:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006704:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006708:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800670c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006710:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006718:	4b59      	ldr	r3, [pc, #356]	; (8006880 <imu_ahrs_update+0x38c>)
 800671a:	edd3 7a00 	vldr	s15, [r3]
 800671e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006722:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8006726:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800672a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800672e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006736:	4b53      	ldr	r3, [pc, #332]	; (8006884 <imu_ahrs_update+0x390>)
 8006738:	edd3 7a00 	vldr	s15, [r3]
 800673c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006740:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8006744:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006748:	ee76 7a27 	vadd.f32	s15, s12, s15
 800674c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006754:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 8006758:	4b48      	ldr	r3, [pc, #288]	; (800687c <imu_ahrs_update+0x388>)
 800675a:	edd3 7a00 	vldr	s15, [r3]
 800675e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006762:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006766:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006772:	4b43      	ldr	r3, [pc, #268]	; (8006880 <imu_ahrs_update+0x38c>)
 8006774:	edd3 7a00 	vldr	s15, [r3]
 8006778:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800677c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006780:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006784:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006788:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800678c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006798:	4b3a      	ldr	r3, [pc, #232]	; (8006884 <imu_ahrs_update+0x390>)
 800679a:	edd3 7a00 	vldr	s15, [r3]
 800679e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067a2:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80067a6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80067aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80067ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 80067ba:	4b30      	ldr	r3, [pc, #192]	; (800687c <imu_ahrs_update+0x388>)
 80067bc:	edd3 7a00 	vldr	s15, [r3]
 80067c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067c4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80067c8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80067cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067d4:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <imu_ahrs_update+0x38c>)
 80067d6:	edd3 7a00 	vldr	s15, [r3]
 80067da:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067de:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80067e2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80067e6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80067ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067f2:	4b24      	ldr	r3, [pc, #144]	; (8006884 <imu_ahrs_update+0x390>)
 80067f4:	edd3 7a00 	vldr	s15, [r3]
 80067f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006800:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006804:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006808:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800680c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006818:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx * hx) + (hy * hy));
 800681c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006820:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006824:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006828:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800682c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006830:	ee17 0a90 	vmov	r0, s15
 8006834:	f7f9 fe88 	bl	8000548 <__aeabi_f2d>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	ec43 2b10 	vmov	d0, r2, r3
 8006840:	f017 f840 	bl	801d8c4 <sqrt>
 8006844:	e024      	b.n	8006890 <imu_ahrs_update+0x39c>
 8006846:	bf00      	nop
 8006848:	2000000c 	.word	0x2000000c
 800684c:	200027ec 	.word	0x200027ec
 8006850:	200027f0 	.word	0x200027f0
 8006854:	200027f4 	.word	0x200027f4
 8006858:	20002844 	.word	0x20002844
 800685c:	20002804 	.word	0x20002804
 8006860:	20002808 	.word	0x20002808
 8006864:	2000280c 	.word	0x2000280c
 8006868:	20002834 	.word	0x20002834
 800686c:	20002810 	.word	0x20002810
 8006870:	20002814 	.word	0x20002814
 8006874:	20002818 	.word	0x20002818
 8006878:	20002854 	.word	0x20002854
 800687c:	2000281c 	.word	0x2000281c
 8006880:	20002820 	.word	0x20002820
 8006884:	20002824 	.word	0x20002824
 8006888:	20002860 	.word	0x20002860
 800688c:	44fa0000 	.word	0x44fa0000
 8006890:	ec53 2b10 	vmov	r2, r3, d0
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	f7fa f9a6 	bl	8000be8 <__aeabi_d2f>
 800689c:	4603      	mov	r3, r0
 800689e:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz;
 80068a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34

	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f * (q1q3 - q0q2);
 80068a4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80068a8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80068ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068b4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f * (q0q1 + q2q3);
 80068b8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80068bc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80068c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068c8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 80068cc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80068d0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80068d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80068dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80068e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 80068ec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80068f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80068f4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80068f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80068fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006900:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006904:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800690c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006910:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006914:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8006918:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800691c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006928:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 800692c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006930:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006934:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006938:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800693c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006944:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006948:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800694c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8006950:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006954:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800695c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006960:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 8006964:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006968:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800696c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8006970:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800697c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006980:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006984:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006988:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800698c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006990:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006994:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800699c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069a0:	edc7 7a07 	vstr	s15, [r7, #28]

	/*
	 * error is sum of cross product between reference direction
	 * of fields and direction measured by sensors
	 */
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 80069a4:	4bde      	ldr	r3, [pc, #888]	; (8006d20 <imu_ahrs_update+0x82c>)
 80069a6:	ed93 7a00 	vldr	s14, [r3]
 80069aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80069ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069b2:	4bdc      	ldr	r3, [pc, #880]	; (8006d24 <imu_ahrs_update+0x830>)
 80069b4:	edd3 6a00 	vldr	s13, [r3]
 80069b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80069bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069c4:	4bd8      	ldr	r3, [pc, #864]	; (8006d28 <imu_ahrs_update+0x834>)
 80069c6:	edd3 6a00 	vldr	s13, [r3]
 80069ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80069ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80069d2:	4bd6      	ldr	r3, [pc, #856]	; (8006d2c <imu_ahrs_update+0x838>)
 80069d4:	ed93 6a00 	vldr	s12, [r3]
 80069d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80069dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80069e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80069e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069e8:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 80069ec:	4bcd      	ldr	r3, [pc, #820]	; (8006d24 <imu_ahrs_update+0x830>)
 80069ee:	ed93 7a00 	vldr	s14, [r3]
 80069f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80069f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069fa:	4bcd      	ldr	r3, [pc, #820]	; (8006d30 <imu_ahrs_update+0x83c>)
 80069fc:	edd3 6a00 	vldr	s13, [r3]
 8006a00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a0c:	4bc7      	ldr	r3, [pc, #796]	; (8006d2c <imu_ahrs_update+0x838>)
 8006a0e:	edd3 6a00 	vldr	s13, [r3]
 8006a12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006a16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006a1a:	4bc6      	ldr	r3, [pc, #792]	; (8006d34 <imu_ahrs_update+0x840>)
 8006a1c:	ed93 6a00 	vldr	s12, [r3]
 8006a20:	edd7 7a07 	vldr	s15, [r7, #28]
 8006a24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006a28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a30:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8006a34:	4bbe      	ldr	r3, [pc, #760]	; (8006d30 <imu_ahrs_update+0x83c>)
 8006a36:	ed93 7a00 	vldr	s14, [r3]
 8006a3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a42:	4bb7      	ldr	r3, [pc, #732]	; (8006d20 <imu_ahrs_update+0x82c>)
 8006a44:	edd3 6a00 	vldr	s13, [r3]
 8006a48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a54:	4bb7      	ldr	r3, [pc, #732]	; (8006d34 <imu_ahrs_update+0x840>)
 8006a56:	edd3 6a00 	vldr	s13, [r3]
 8006a5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8006a5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006a62:	4bb1      	ldr	r3, [pc, #708]	; (8006d28 <imu_ahrs_update+0x834>)
 8006a64:	ed93 6a00 	vldr	s12, [r3]
 8006a68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006a6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006a70:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a78:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if (ex != 0.0f && ey != 0.0f && ez != 0.0f) {
 8006a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a88:	d07c      	beq.n	8006b84 <imu_ahrs_update+0x690>
 8006a8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a96:	d075      	beq.n	8006b84 <imu_ahrs_update+0x690>
 8006a98:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa4:	d06e      	beq.n	8006b84 <imu_ahrs_update+0x690>
		exInt = exInt + ex * AHRSKi * halfT;
 8006aa6:	edd7 7a06 	vldr	s15, [r7, #24]
 8006aaa:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8006d38 <imu_ahrs_update+0x844>
 8006aae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ab2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006aba:	4ba0      	ldr	r3, [pc, #640]	; (8006d3c <imu_ahrs_update+0x848>)
 8006abc:	edd3 7a00 	vldr	s15, [r3]
 8006ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ac4:	4b9d      	ldr	r3, [pc, #628]	; (8006d3c <imu_ahrs_update+0x848>)
 8006ac6:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * AHRSKi * halfT;
 8006aca:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ace:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8006d38 <imu_ahrs_update+0x844>
 8006ad2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ad6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ade:	4b98      	ldr	r3, [pc, #608]	; (8006d40 <imu_ahrs_update+0x84c>)
 8006ae0:	edd3 7a00 	vldr	s15, [r3]
 8006ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ae8:	4b95      	ldr	r3, [pc, #596]	; (8006d40 <imu_ahrs_update+0x84c>)
 8006aea:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * AHRSKi * halfT;
 8006aee:	edd7 7a04 	vldr	s15, [r7, #16]
 8006af2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006d38 <imu_ahrs_update+0x844>
 8006af6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006afa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b02:	4b90      	ldr	r3, [pc, #576]	; (8006d44 <imu_ahrs_update+0x850>)
 8006b04:	edd3 7a00 	vldr	s15, [r3]
 8006b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b0c:	4b8d      	ldr	r3, [pc, #564]	; (8006d44 <imu_ahrs_update+0x850>)
 8006b0e:	edc3 7a00 	vstr	s15, [r3]

		gx = gx + AHRSKp * ex + exInt;
 8006b12:	edd7 7a06 	vldr	s15, [r7, #24]
 8006b16:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8006d48 <imu_ahrs_update+0x854>
 8006b1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b1e:	4b8b      	ldr	r3, [pc, #556]	; (8006d4c <imu_ahrs_update+0x858>)
 8006b20:	edd3 7a00 	vldr	s15, [r3]
 8006b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b28:	4b84      	ldr	r3, [pc, #528]	; (8006d3c <imu_ahrs_update+0x848>)
 8006b2a:	edd3 7a00 	vldr	s15, [r3]
 8006b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b32:	4b86      	ldr	r3, [pc, #536]	; (8006d4c <imu_ahrs_update+0x858>)
 8006b34:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + AHRSKp * ey + eyInt;
 8006b38:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b3c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8006d48 <imu_ahrs_update+0x854>
 8006b40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b44:	4b82      	ldr	r3, [pc, #520]	; (8006d50 <imu_ahrs_update+0x85c>)
 8006b46:	edd3 7a00 	vldr	s15, [r3]
 8006b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b4e:	4b7c      	ldr	r3, [pc, #496]	; (8006d40 <imu_ahrs_update+0x84c>)
 8006b50:	edd3 7a00 	vldr	s15, [r3]
 8006b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b58:	4b7d      	ldr	r3, [pc, #500]	; (8006d50 <imu_ahrs_update+0x85c>)
 8006b5a:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + AHRSKp * ez + ezInt;
 8006b5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b62:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8006d48 <imu_ahrs_update+0x854>
 8006b66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b6a:	4b7a      	ldr	r3, [pc, #488]	; (8006d54 <imu_ahrs_update+0x860>)
 8006b6c:	edd3 7a00 	vldr	s15, [r3]
 8006b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b74:	4b73      	ldr	r3, [pc, #460]	; (8006d44 <imu_ahrs_update+0x850>)
 8006b76:	edd3 7a00 	vldr	s15, [r3]
 8006b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b7e:	4b75      	ldr	r3, [pc, #468]	; (8006d54 <imu_ahrs_update+0x860>)
 8006b80:	edc3 7a00 	vstr	s15, [r3]
	}

	tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 8006b84:	4b74      	ldr	r3, [pc, #464]	; (8006d58 <imu_ahrs_update+0x864>)
 8006b86:	edd3 7a00 	vldr	s15, [r3]
 8006b8a:	eeb1 7a67 	vneg.f32	s14, s15
 8006b8e:	4b6f      	ldr	r3, [pc, #444]	; (8006d4c <imu_ahrs_update+0x858>)
 8006b90:	edd3 7a00 	vldr	s15, [r3]
 8006b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b98:	4b70      	ldr	r3, [pc, #448]	; (8006d5c <imu_ahrs_update+0x868>)
 8006b9a:	edd3 6a00 	vldr	s13, [r3]
 8006b9e:	4b6c      	ldr	r3, [pc, #432]	; (8006d50 <imu_ahrs_update+0x85c>)
 8006ba0:	edd3 7a00 	vldr	s15, [r3]
 8006ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bac:	4b6c      	ldr	r3, [pc, #432]	; (8006d60 <imu_ahrs_update+0x86c>)
 8006bae:	edd3 6a00 	vldr	s13, [r3]
 8006bb2:	4b68      	ldr	r3, [pc, #416]	; (8006d54 <imu_ahrs_update+0x860>)
 8006bb4:	edd3 7a00 	vldr	s15, [r3]
 8006bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bc0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bc8:	4b66      	ldr	r3, [pc, #408]	; (8006d64 <imu_ahrs_update+0x870>)
 8006bca:	edd3 7a00 	vldr	s15, [r3]
 8006bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bd2:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 8006bd6:	4b63      	ldr	r3, [pc, #396]	; (8006d64 <imu_ahrs_update+0x870>)
 8006bd8:	ed93 7a00 	vldr	s14, [r3]
 8006bdc:	4b5b      	ldr	r3, [pc, #364]	; (8006d4c <imu_ahrs_update+0x858>)
 8006bde:	edd3 7a00 	vldr	s15, [r3]
 8006be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006be6:	4b5d      	ldr	r3, [pc, #372]	; (8006d5c <imu_ahrs_update+0x868>)
 8006be8:	edd3 6a00 	vldr	s13, [r3]
 8006bec:	4b59      	ldr	r3, [pc, #356]	; (8006d54 <imu_ahrs_update+0x860>)
 8006bee:	edd3 7a00 	vldr	s15, [r3]
 8006bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006bfa:	4b59      	ldr	r3, [pc, #356]	; (8006d60 <imu_ahrs_update+0x86c>)
 8006bfc:	edd3 6a00 	vldr	s13, [r3]
 8006c00:	4b53      	ldr	r3, [pc, #332]	; (8006d50 <imu_ahrs_update+0x85c>)
 8006c02:	edd3 7a00 	vldr	s15, [r3]
 8006c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c0e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c16:	4b50      	ldr	r3, [pc, #320]	; (8006d58 <imu_ahrs_update+0x864>)
 8006c18:	edd3 7a00 	vldr	s15, [r3]
 8006c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c20:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 8006c24:	4b4f      	ldr	r3, [pc, #316]	; (8006d64 <imu_ahrs_update+0x870>)
 8006c26:	ed93 7a00 	vldr	s14, [r3]
 8006c2a:	4b49      	ldr	r3, [pc, #292]	; (8006d50 <imu_ahrs_update+0x85c>)
 8006c2c:	edd3 7a00 	vldr	s15, [r3]
 8006c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c34:	4b48      	ldr	r3, [pc, #288]	; (8006d58 <imu_ahrs_update+0x864>)
 8006c36:	edd3 6a00 	vldr	s13, [r3]
 8006c3a:	4b46      	ldr	r3, [pc, #280]	; (8006d54 <imu_ahrs_update+0x860>)
 8006c3c:	edd3 7a00 	vldr	s15, [r3]
 8006c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c48:	4b45      	ldr	r3, [pc, #276]	; (8006d60 <imu_ahrs_update+0x86c>)
 8006c4a:	edd3 6a00 	vldr	s13, [r3]
 8006c4e:	4b3f      	ldr	r3, [pc, #252]	; (8006d4c <imu_ahrs_update+0x858>)
 8006c50:	edd3 7a00 	vldr	s15, [r3]
 8006c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c5c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c64:	4b3d      	ldr	r3, [pc, #244]	; (8006d5c <imu_ahrs_update+0x868>)
 8006c66:	edd3 7a00 	vldr	s15, [r3]
 8006c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c6e:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 8006c72:	4b3c      	ldr	r3, [pc, #240]	; (8006d64 <imu_ahrs_update+0x870>)
 8006c74:	ed93 7a00 	vldr	s14, [r3]
 8006c78:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <imu_ahrs_update+0x860>)
 8006c7a:	edd3 7a00 	vldr	s15, [r3]
 8006c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c82:	4b35      	ldr	r3, [pc, #212]	; (8006d58 <imu_ahrs_update+0x864>)
 8006c84:	edd3 6a00 	vldr	s13, [r3]
 8006c88:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <imu_ahrs_update+0x85c>)
 8006c8a:	edd3 7a00 	vldr	s15, [r3]
 8006c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c96:	4b31      	ldr	r3, [pc, #196]	; (8006d5c <imu_ahrs_update+0x868>)
 8006c98:	edd3 6a00 	vldr	s13, [r3]
 8006c9c:	4b2b      	ldr	r3, [pc, #172]	; (8006d4c <imu_ahrs_update+0x858>)
 8006c9e:	edd3 7a00 	vldr	s15, [r3]
 8006ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ca6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006caa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cb2:	4b2b      	ldr	r3, [pc, #172]	; (8006d60 <imu_ahrs_update+0x86c>)
 8006cb4:	edd3 7a00 	vldr	s15, [r3]
 8006cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cbc:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 8006cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cc4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006cc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ccc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ce0:	edd7 7a00 	vldr	s15, [r7]
 8006ce4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cec:	eeb0 0a67 	vmov.f32	s0, s15
 8006cf0:	f7fa fcaa 	bl	8001648 <inv_sqrt>
 8006cf4:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 8006cf8:	ed97 7a03 	vldr	s14, [r7, #12]
 8006cfc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d04:	4b17      	ldr	r3, [pc, #92]	; (8006d64 <imu_ahrs_update+0x870>)
 8006d06:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 8006d0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8006d0e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <imu_ahrs_update+0x864>)
 8006d18:	edc3 7a00 	vstr	s15, [r3]
 8006d1c:	e024      	b.n	8006d68 <imu_ahrs_update+0x874>
 8006d1e:	bf00      	nop
 8006d20:	20002814 	.word	0x20002814
 8006d24:	20002818 	.word	0x20002818
 8006d28:	20002820 	.word	0x20002820
 8006d2c:	20002824 	.word	0x20002824
 8006d30:	20002810 	.word	0x20002810
 8006d34:	2000281c 	.word	0x2000281c
 8006d38:	00000000 	.word	0x00000000
 8006d3c:	200027f8 	.word	0x200027f8
 8006d40:	200027fc 	.word	0x200027fc
 8006d44:	20002800 	.word	0x20002800
 8006d48:	3e19999a 	.word	0x3e19999a
 8006d4c:	20002804 	.word	0x20002804
 8006d50:	20002808 	.word	0x20002808
 8006d54:	2000280c 	.word	0x2000280c
 8006d58:	200027ec 	.word	0x200027ec
 8006d5c:	200027f0 	.word	0x200027f0
 8006d60:	200027f4 	.word	0x200027f4
 8006d64:	2000000c 	.word	0x2000000c
	q2 = tempq2 * norm;
 8006d68:	ed97 7a01 	vldr	s14, [r7, #4]
 8006d6c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d74:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <imu_ahrs_update+0x8a0>)
 8006d76:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 8006d7a:	ed97 7a00 	vldr	s14, [r7]
 8006d7e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d86:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <imu_ahrs_update+0x8a4>)
 8006d88:	edc3 7a00 	vstr	s15, [r3]
}
 8006d8c:	bf00      	nop
 8006d8e:	3778      	adds	r7, #120	; 0x78
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200027f0 	.word	0x200027f0
 8006d98:	200027f4 	.word	0x200027f4

08006d9c <imu_attitude_update>:

void imu_attitude_update(void) {
 8006d9c:	b5b0      	push	{r4, r5, r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
	if (IMU_ORIENTATION == 0) {
		/* yaw    -pi----pi */
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8006da0:	4b63      	ldr	r3, [pc, #396]	; (8006f30 <imu_attitude_update+0x194>)
 8006da2:	edd3 7a00 	vldr	s15, [r3]
 8006da6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006daa:	4b62      	ldr	r3, [pc, #392]	; (8006f34 <imu_attitude_update+0x198>)
 8006dac:	edd3 7a00 	vldr	s15, [r3]
 8006db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006db4:	4b60      	ldr	r3, [pc, #384]	; (8006f38 <imu_attitude_update+0x19c>)
 8006db6:	edd3 7a00 	vldr	s15, [r3]
 8006dba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006dbe:	4b5f      	ldr	r3, [pc, #380]	; (8006f3c <imu_attitude_update+0x1a0>)
 8006dc0:	edd3 7a00 	vldr	s15, [r3]
 8006dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q2 * q2 - 2 * q3 * q3 + 1) * IMU_YAW_INVERT;
 8006dcc:	ee17 0a90 	vmov	r0, s15
 8006dd0:	f7f9 fbba 	bl	8000548 <__aeabi_f2d>
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	460d      	mov	r5, r1
 8006dd8:	4b56      	ldr	r3, [pc, #344]	; (8006f34 <imu_attitude_update+0x198>)
 8006dda:	edd3 7a00 	vldr	s15, [r3]
 8006dde:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8006de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006de6:	4b53      	ldr	r3, [pc, #332]	; (8006f34 <imu_attitude_update+0x198>)
 8006de8:	edd3 7a00 	vldr	s15, [r3]
 8006dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006df0:	4b52      	ldr	r3, [pc, #328]	; (8006f3c <imu_attitude_update+0x1a0>)
 8006df2:	edd3 7a00 	vldr	s15, [r3]
 8006df6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006dfa:	4b50      	ldr	r3, [pc, #320]	; (8006f3c <imu_attitude_update+0x1a0>)
 8006dfc:	edd3 7a00 	vldr	s15, [r3]
 8006e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e10:	ee17 0a90 	vmov	r0, s15
 8006e14:	f7f9 fb98 	bl	8000548 <__aeabi_f2d>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	ec43 2b11 	vmov	d1, r2, r3
 8006e20:	ec45 4b10 	vmov	d0, r4, r5
 8006e24:	f016 fd4c 	bl	801d8c0 <atan2>
 8006e28:	ec53 2b10 	vmov	r2, r3, d0
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4619      	mov	r1, r3
 8006e30:	f7f9 feda 	bl	8000be8 <__aeabi_d2f>
 8006e34:	4603      	mov	r3, r0
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8006e36:	4a42      	ldr	r2, [pc, #264]	; (8006f40 <imu_attitude_update+0x1a4>)
 8006e38:	6093      	str	r3, [r2, #8]
		/* pitch  -pi/2----pi/2 */
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
 8006e3a:	4b3d      	ldr	r3, [pc, #244]	; (8006f30 <imu_attitude_update+0x194>)
 8006e3c:	edd3 7a00 	vldr	s15, [r3]
 8006e40:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8006e44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e48:	4b3c      	ldr	r3, [pc, #240]	; (8006f3c <imu_attitude_update+0x1a0>)
 8006e4a:	edd3 7a00 	vldr	s15, [r3]
 8006e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e52:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <imu_attitude_update+0x19c>)
 8006e54:	edd3 7a00 	vldr	s15, [r3]
 8006e58:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006e5c:	4b35      	ldr	r3, [pc, #212]	; (8006f34 <imu_attitude_update+0x198>)
 8006e5e:	edd3 7a00 	vldr	s15, [r3]
 8006e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e6a:	ee17 0a90 	vmov	r0, s15
 8006e6e:	f7f9 fb6b 	bl	8000548 <__aeabi_f2d>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	ec43 2b10 	vmov	d0, r2, r3
 8006e7a:	f016 fced 	bl	801d858 <asin>
 8006e7e:	ec53 2b10 	vmov	r2, r3, d0
 8006e82:	4610      	mov	r0, r2
 8006e84:	4619      	mov	r1, r3
 8006e86:	f7f9 feaf 	bl	8000be8 <__aeabi_d2f>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4a2c      	ldr	r2, [pc, #176]	; (8006f40 <imu_attitude_update+0x1a4>)
 8006e8e:	6013      	str	r3, [r2, #0]
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8006e90:	4b28      	ldr	r3, [pc, #160]	; (8006f34 <imu_attitude_update+0x198>)
 8006e92:	edd3 7a00 	vldr	s15, [r3]
 8006e96:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006e9a:	4b28      	ldr	r3, [pc, #160]	; (8006f3c <imu_attitude_update+0x1a0>)
 8006e9c:	edd3 7a00 	vldr	s15, [r3]
 8006ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ea4:	4b24      	ldr	r3, [pc, #144]	; (8006f38 <imu_attitude_update+0x19c>)
 8006ea6:	edd3 7a00 	vldr	s15, [r3]
 8006eaa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006eae:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <imu_attitude_update+0x194>)
 8006eb0:	edd3 7a00 	vldr	s15, [r3]
 8006eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
 8006ebc:	ee17 0a90 	vmov	r0, s15
 8006ec0:	f7f9 fb42 	bl	8000548 <__aeabi_f2d>
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <imu_attitude_update+0x194>)
 8006eca:	edd3 7a00 	vldr	s15, [r3]
 8006ece:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8006ed2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ed6:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <imu_attitude_update+0x194>)
 8006ed8:	edd3 7a00 	vldr	s15, [r3]
 8006edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ee0:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <imu_attitude_update+0x198>)
 8006ee2:	edd3 7a00 	vldr	s15, [r3]
 8006ee6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006eea:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <imu_attitude_update+0x198>)
 8006eec:	edd3 7a00 	vldr	s15, [r3]
 8006ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006efc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f00:	ee17 0a90 	vmov	r0, s15
 8006f04:	f7f9 fb20 	bl	8000548 <__aeabi_f2d>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	ec43 2b11 	vmov	d1, r2, r3
 8006f10:	ec45 4b10 	vmov	d0, r4, r5
 8006f14:	f016 fcd4 	bl	801d8c0 <atan2>
 8006f18:	ec53 2b10 	vmov	r2, r3, d0
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	f7f9 fe62 	bl	8000be8 <__aeabi_d2f>
 8006f24:	4603      	mov	r3, r0
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8006f26:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <imu_attitude_update+0x1a4>)
 8006f28:	6053      	str	r3, [r2, #4]
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
	}
}
 8006f2a:	bf00      	nop
 8006f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	200027ec 	.word	0x200027ec
 8006f34:	200027f0 	.word	0x200027f0
 8006f38:	2000000c 	.word	0x2000000c
 8006f3c:	200027f4 	.word	0x200027f4
 8006f40:	20002828 	.word	0x20002828

08006f44 <launcher_control_task>:
extern ref_magazine_data_t ref_mag_data;
extern uint32_t ref_mag_data_txno;
static uint32_t prev_power_data_no = 0;
static uint32_t prev_mag_data_no = 0;

void launcher_control_task(void *argument) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		//event flags!
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8006f4c:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <launcher_control_task+0x84>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	2301      	movs	r3, #1
 8006f58:	2201      	movs	r2, #1
 8006f5a:	2107      	movs	r1, #7
 8006f5c:	f00e fa4a 	bl	80153f4 <xEventGroupWaitBits>
		portMAX_DELAY);
		status_led(4, on_led);
 8006f60:	2100      	movs	r1, #0
 8006f62:	2004      	movs	r0, #4
 8006f64:	f7fa ffe6 	bl	8001f34 <status_led>
		start_time = xTaskGetTickCount();
 8006f68:	f00f fd7a 	bl	8016a60 <xTaskGetTickCount>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	60fb      	str	r3, [r7, #12]

		if (launcher_ctrl_data.enabled) {
 8006f70:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <launcher_control_task+0x88>)
 8006f72:	795b      	ldrb	r3, [r3, #5]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d006      	beq.n	8006f86 <launcher_control_task+0x42>
			launcher_control(can_motors + LFRICTION_MOTOR_ID - 1,
 8006f78:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <launcher_control_task+0x8c>)
 8006f7a:	4916      	ldr	r1, [pc, #88]	; (8006fd4 <launcher_control_task+0x90>)
 8006f7c:	4a16      	ldr	r2, [pc, #88]	; (8006fd8 <launcher_control_task+0x94>)
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 f82e 	bl	8006fe0 <launcher_control>
 8006f84:	e00f      	b.n	8006fa6 <launcher_control_task+0x62>
					can_motors + RFRICTION_MOTOR_ID - 1,
					can_motors + FEEDER_MOTOR_ID - 1);

		} else {
			can_motors[LFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <launcher_control_task+0x98>)
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
			can_motors[RFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8006f90:	4b12      	ldr	r3, [pc, #72]	; (8006fdc <launcher_control_task+0x98>)
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
			can_motors[FEEDER_MOTOR_ID - 1].rpm_pid.output = 0;
 8006f9a:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <launcher_control_task+0x98>)
 8006f9c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]
//			motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,RFRICTION_MOTOR_ID, 0);
		}
		status_led(4, off_led);
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	2004      	movs	r0, #4
 8006faa:	f7fa ffc3 	bl	8001f34 <status_led>
		//vTaskDelay(CHASSIS_DELAY);
		xEventGroupClearBits(launcher_event_group, 0b111);
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <launcher_control_task+0x84>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2107      	movs	r1, #7
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f00e faeb 	bl	8015590 <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	210a      	movs	r1, #10
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f00f fb7f 	bl	80166c4 <vTaskDelayUntil>
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8006fc6:	e7c1      	b.n	8006f4c <launcher_control_task+0x8>
 8006fc8:	2000046c 	.word	0x2000046c
 8006fcc:	20002798 	.word	0x20002798
 8006fd0:	20001ab0 	.word	0x20001ab0
 8006fd4:	20001b54 	.word	0x20001b54
 8006fd8:	20001bf8 	.word	0x20001bf8
 8006fdc:	20001820 	.word	0x20001820

08006fe0 <launcher_control>:
	}

}

void launcher_control(motor_data_t *left_friction_motor,
		motor_data_t *right_friction_motor, motor_data_t *feeder) {
 8006fe0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006fe4:	b08a      	sub	sp, #40	; 0x28
 8006fe6:	af02      	add	r7, sp, #8
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]

	int16_t feeder_output = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	83fb      	strh	r3, [r7, #30]
	static uint32_t overheat_time;
	static float target_ang;
	uint32_t curr_time = HAL_GetTick();
 8006ff2:	f002 fb43 	bl	800967c <HAL_GetTick>
 8006ff6:	61b8      	str	r0, [r7, #24]
	static uint32_t overheat_start;
	static uint32_t last_fire;
	static uint8_t fired;
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8006ff8:	4b51      	ldr	r3, [pc, #324]	; (8007140 <launcher_control+0x160>)
 8006ffa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ffe:	461a      	mov	r2, r3
			* referee_limiters.feeding_speed / FEEDER_SPEED_RATIO;
 8007000:	4b50      	ldr	r3, [pc, #320]	; (8007144 <launcher_control+0x164>)
 8007002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007006:	fb02 f303 	mul.w	r3, r2, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	da00      	bge.n	8007010 <launcher_control+0x30>
 800700e:	3307      	adds	r3, #7
 8007010:	10db      	asrs	r3, r3, #3
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8007012:	82fb      	strh	r3, [r7, #22]

	if (launcher_ctrl_data.gun_feeding_speed == 0) {
 8007014:	4b4a      	ldr	r3, [pc, #296]	; (8007140 <launcher_control+0x160>)
 8007016:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d11d      	bne.n	800705a <launcher_control+0x7a>
		feeder->rpm_pid.output = 0;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
		speed_pid(0, feeder->raw_data.rpm, &feeder->rpm_pid);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f7f9 fa79 	bl	8000524 <__aeabi_i2d>
 8007032:	4604      	mov	r4, r0
 8007034:	460d      	mov	r5, r1
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3310      	adds	r3, #16
 800703a:	4618      	mov	r0, r3
 800703c:	ec45 4b11 	vmov	d1, r4, r5
 8007040:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 8007138 <launcher_control+0x158>
 8007044:	f001 fa08 	bl	8008458 <speed_pid>
		left_friction_motor->rpm_pid.output = 0;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	631a      	str	r2, [r3, #48]	; 0x30
		right_friction_motor->rpm_pid.output = 0;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
 8007058:	e05f      	b.n	800711a <launcher_control+0x13a>
	} else {
		int16_t launcher_rpm = -referee_limiters.projectile_speed
 800705a:	4b3a      	ldr	r3, [pc, #232]	; (8007144 <launcher_control+0x164>)
 800705c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007060:	b29b      	uxth	r3, r3
				* FRICTION_INVERT * PROJECTILE_SPEED_RATIO;
 8007062:	461a      	mov	r2, r3
 8007064:	0052      	lsls	r2, r2, #1
 8007066:	4413      	add	r3, r2
 8007068:	461a      	mov	r2, r3
 800706a:	0112      	lsls	r2, r2, #4
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	b29b      	uxth	r3, r3
		int16_t launcher_rpm = -referee_limiters.projectile_speed
 8007072:	82bb      	strh	r3, [r7, #20]

		speed_pid(launcher_rpm, left_friction_motor->raw_data.rpm,
 8007074:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007078:	4618      	mov	r0, r3
 800707a:	f7f9 fa53 	bl	8000524 <__aeabi_i2d>
 800707e:	4604      	mov	r4, r0
 8007080:	460d      	mov	r5, r1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007088:	4618      	mov	r0, r3
 800708a:	f7f9 fa4b 	bl	8000524 <__aeabi_i2d>
 800708e:	4680      	mov	r8, r0
 8007090:	4689      	mov	r9, r1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3310      	adds	r3, #16
 8007096:	4618      	mov	r0, r3
 8007098:	ec49 8b11 	vmov	d1, r8, r9
 800709c:	ec45 4b10 	vmov	d0, r4, r5
 80070a0:	f001 f9da 	bl	8008458 <speed_pid>
				&left_friction_motor->rpm_pid);
		speed_pid(-launcher_rpm, right_friction_motor->raw_data.rpm,
 80070a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80070a8:	425b      	negs	r3, r3
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7f9 fa3a 	bl	8000524 <__aeabi_i2d>
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7f9 fa32 	bl	8000524 <__aeabi_i2d>
 80070c0:	4680      	mov	r8, r0
 80070c2:	4689      	mov	r9, r1
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	3310      	adds	r3, #16
 80070c8:	4618      	mov	r0, r3
 80070ca:	ec49 8b11 	vmov	d1, r8, r9
 80070ce:	ec45 4b10 	vmov	d0, r4, r5
 80070d2:	f001 f9c1 	bl	8008458 <speed_pid>
				&right_friction_motor->rpm_pid);
		speed_pid(firing_speed * feeder->angle_data.gearbox_ratio,
 80070d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80070e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ec:	ee17 0a90 	vmov	r0, s15
 80070f0:	f7f9 fa2a 	bl	8000548 <__aeabi_f2d>
 80070f4:	4604      	mov	r4, r0
 80070f6:	460d      	mov	r5, r1
				feeder->raw_data.rpm, &feeder->rpm_pid);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(firing_speed * feeder->angle_data.gearbox_ratio,
 80070fe:	4618      	mov	r0, r3
 8007100:	f7f9 fa10 	bl	8000524 <__aeabi_i2d>
 8007104:	4680      	mov	r8, r0
 8007106:	4689      	mov	r9, r1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3310      	adds	r3, #16
 800710c:	4618      	mov	r0, r3
 800710e:	ec49 8b11 	vmov	d1, r8, r9
 8007112:	ec45 4b10 	vmov	d0, r4, r5
 8007116:	f001 f99f 	bl	8008458 <speed_pid>
	}

	motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,
 800711a:	2300      	movs	r3, #0
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	2306      	movs	r3, #6
 8007120:	2205      	movs	r2, #5
 8007122:	2107      	movs	r1, #7
 8007124:	4808      	ldr	r0, [pc, #32]	; (8007148 <launcher_control+0x168>)
 8007126:	f001 fa3d 	bl	80085a4 <motor_send_can>
	RFRICTION_MOTOR_ID, 0);
}
 800712a:	bf00      	nop
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007134:	f3af 8000 	nop.w
	...
 8007140:	20002798 	.word	0x20002798
 8007144:	20002880 	.word	0x20002880
 8007148:	20001820 	.word	0x20001820

0800714c <set_motor_config>:
#include "motor_config.h"

extern QueueHandle_t buzzing_task_msg;
uint16_t g_motor_fault;

void set_motor_config(motor_data_t* motor){
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	//general config:
		switch(motor->motor_type){
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	789b      	ldrb	r3, [r3, #2]
 8007158:	3b01      	subs	r3, #1
 800715a:	2b08      	cmp	r3, #8
 800715c:	d845      	bhi.n	80071ea <set_motor_config+0x9e>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <set_motor_config+0x18>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	080071bb 	.word	0x080071bb
 8007168:	080071d3 	.word	0x080071d3
 800716c:	08007189 	.word	0x08007189
 8007170:	080071a1 	.word	0x080071a1
 8007174:	08007189 	.word	0x08007189
 8007178:	080071d3 	.word	0x080071d3
 800717c:	080071d3 	.word	0x080071d3
 8007180:	08007189 	.word	0x08007189
 8007184:	080071bb 	.word	0x080071bb
		case TYPE_M3508_ANGLE:
		case TYPE_M3508_STEPS:
		case TYPE_M3508:
			motor->angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a1b      	ldr	r2, [pc, #108]	; (80071f8 <set_motor_config+0xac>)
 800718c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a1a      	ldr	r2, [pc, #104]	; (80071fc <set_motor_config+0xb0>)
 8007194:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800719c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800719e:	e025      	b.n	80071ec <set_motor_config+0xa0>
		case TYPE_M3508_NGEARBOX:
			motor->angle_data.gearbox_ratio = 1;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80071a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a13      	ldr	r2, [pc, #76]	; (80071fc <set_motor_config+0xb0>)
 80071ae:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80071b6:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 80071b8:	e018      	b.n	80071ec <set_motor_config+0xa0>
		case TYPE_GM6020:
		case TYPE_GM6020_720:
			motor->angle_data.gearbox_ratio = 0;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = GM6020_MAX_RPM;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a0e      	ldr	r2, [pc, #56]	; (8007200 <set_motor_config+0xb4>)
 80071c8:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a0d      	ldr	r2, [pc, #52]	; (8007204 <set_motor_config+0xb8>)
 80071ce:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80071d0:	e00c      	b.n	80071ec <set_motor_config+0xa0>
		case TYPE_M2006:
		case TYPE_M2006_STEPS:
		case TYPE_M2006_ANGLE:
			motor->angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a0c      	ldr	r2, [pc, #48]	; (8007208 <set_motor_config+0xbc>)
 80071d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = M2006_MAX_RPM;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a0b      	ldr	r2, [pc, #44]	; (800720c <set_motor_config+0xc0>)
 80071de:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = M2006_MAX_OUTPUT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80071e6:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80071e8:	e000      	b.n	80071ec <set_motor_config+0xa0>
		default:
			break;
 80071ea:	bf00      	nop
		}

}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	4199999a 	.word	0x4199999a
 80071fc:	460ca000 	.word	0x460ca000
 8007200:	43c80000 	.word	0x43c80000
 8007204:	469c4000 	.word	0x469c4000
 8007208:	42100000 	.word	0x42100000
 800720c:	466a6000 	.word	0x466a6000

08007210 <config_motors>:

extern motor_data_t can_motors[24];
void config_motors() {
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= 24; i++) {
 8007216:	2300      	movs	r3, #0
 8007218:	71fb      	strb	r3, [r7, #7]
 800721a:	e03c      	b.n	8007296 <config_motors+0x86>
		//reset all the values to 0
		can_motors[i].motor_type = 0;
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	4abb      	ldr	r2, [pc, #748]	; (800750c <config_motors+0x2fc>)
 8007220:	21a4      	movs	r1, #164	; 0xa4
 8007222:	fb01 f303 	mul.w	r3, r1, r3
 8007226:	4413      	add	r3, r2
 8007228:	3302      	adds	r3, #2
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
		can_motors[i].rpm_pid.output = 0;
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	4ab6      	ldr	r2, [pc, #728]	; (800750c <config_motors+0x2fc>)
 8007232:	21a4      	movs	r1, #164	; 0xa4
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	4413      	add	r3, r2
 800723a:	3330      	adds	r3, #48	; 0x30
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
		can_motors[i].rpm_pid.integral = 0;
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	4ab1      	ldr	r2, [pc, #708]	; (800750c <config_motors+0x2fc>)
 8007246:	21a4      	movs	r1, #164	; 0xa4
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	4413      	add	r3, r2
 800724e:	3324      	adds	r3, #36	; 0x24
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.output = 0;
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	4aac      	ldr	r2, [pc, #688]	; (800750c <config_motors+0x2fc>)
 800725a:	21a4      	movs	r1, #164	; 0xa4
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	4413      	add	r3, r2
 8007262:	3360      	adds	r3, #96	; 0x60
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.integral = 0;
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	4aa7      	ldr	r2, [pc, #668]	; (800750c <config_motors+0x2fc>)
 800726e:	21a4      	movs	r1, #164	; 0xa4
 8007270:	fb01 f303 	mul.w	r3, r1, r3
 8007274:	4413      	add	r3, r2
 8007276:	3354      	adds	r3, #84	; 0x54
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_data.ticks = 0;
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	4aa2      	ldr	r2, [pc, #648]	; (800750c <config_motors+0x2fc>)
 8007282:	21a4      	movs	r1, #164	; 0xa4
 8007284:	fb01 f303 	mul.w	r3, r1, r3
 8007288:	4413      	add	r3, r2
 800728a:	3370      	adds	r3, #112	; 0x70
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i <= 24; i++) {
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	3301      	adds	r3, #1
 8007294:	71fb      	strb	r3, [r7, #7]
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	2b18      	cmp	r3, #24
 800729a:	d9bf      	bls.n	800721c <config_motors+0xc>
	}

	//initialise motor data
#ifdef FR_MOTOR_ID
	uint8_t motor_id = FR_MOTOR_ID - 1;
 800729c:	2302      	movs	r3, #2
 800729e:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_STEPS;
 80072a0:	79bb      	ldrb	r3, [r7, #6]
 80072a2:	4a9a      	ldr	r2, [pc, #616]	; (800750c <config_motors+0x2fc>)
 80072a4:	21a4      	movs	r1, #164	; 0xa4
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	3302      	adds	r3, #2
 80072ae:	2205      	movs	r2, #5
 80072b0:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80072b2:	79bb      	ldrb	r3, [r7, #6]
 80072b4:	22a4      	movs	r2, #164	; 0xa4
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	4a94      	ldr	r2, [pc, #592]	; (800750c <config_motors+0x2fc>)
 80072bc:	4413      	add	r3, r2
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff ff44 	bl	800714c <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 80072c4:	79bb      	ldrb	r3, [r7, #6]
 80072c6:	4a91      	ldr	r2, [pc, #580]	; (800750c <config_motors+0x2fc>)
 80072c8:	21a4      	movs	r1, #164	; 0xa4
 80072ca:	fb01 f303 	mul.w	r3, r1, r3
 80072ce:	4413      	add	r3, r2
 80072d0:	3374      	adds	r3, #116	; 0x74
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 80072d6:	79bb      	ldrb	r3, [r7, #6]
 80072d8:	4a8c      	ldr	r2, [pc, #560]	; (800750c <config_motors+0x2fc>)
 80072da:	21a4      	movs	r1, #164	; 0xa4
 80072dc:	fb01 f303 	mul.w	r3, r1, r3
 80072e0:	4413      	add	r3, r2
 80072e2:	337c      	adds	r3, #124	; 0x7c
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 80072ea:	79bb      	ldrb	r3, [r7, #6]
 80072ec:	4a87      	ldr	r2, [pc, #540]	; (800750c <config_motors+0x2fc>)
 80072ee:	21a4      	movs	r1, #164	; 0xa4
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	4413      	add	r3, r2
 80072f6:	3378      	adds	r3, #120	; 0x78
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 80072fe:	79bb      	ldrb	r3, [r7, #6]
 8007300:	4a82      	ldr	r2, [pc, #520]	; (800750c <config_motors+0x2fc>)
 8007302:	21a4      	movs	r1, #164	; 0xa4
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	4413      	add	r3, r2
 800730a:	3310      	adds	r3, #16
 800730c:	4a80      	ldr	r2, [pc, #512]	; (8007510 <config_motors+0x300>)
 800730e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8007310:	79bb      	ldrb	r3, [r7, #6]
 8007312:	4a7e      	ldr	r2, [pc, #504]	; (800750c <config_motors+0x2fc>)
 8007314:	21a4      	movs	r1, #164	; 0xa4
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	4413      	add	r3, r2
 800731c:	3314      	adds	r3, #20
 800731e:	4a7d      	ldr	r2, [pc, #500]	; (8007514 <config_motors+0x304>)
 8007320:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8007322:	79bb      	ldrb	r3, [r7, #6]
 8007324:	4a79      	ldr	r2, [pc, #484]	; (800750c <config_motors+0x2fc>)
 8007326:	21a4      	movs	r1, #164	; 0xa4
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	4413      	add	r3, r2
 800732e:	3318      	adds	r3, #24
 8007330:	4a79      	ldr	r2, [pc, #484]	; (8007518 <config_motors+0x308>)
 8007332:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 8007334:	79bb      	ldrb	r3, [r7, #6]
 8007336:	4a75      	ldr	r2, [pc, #468]	; (800750c <config_motors+0x2fc>)
 8007338:	21a4      	movs	r1, #164	; 0xa4
 800733a:	fb01 f303 	mul.w	r3, r1, r3
 800733e:	4413      	add	r3, r2
 8007340:	3394      	adds	r3, #148	; 0x94
 8007342:	4a76      	ldr	r2, [pc, #472]	; (800751c <config_motors+0x30c>)
 8007344:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 8007346:	79bb      	ldrb	r3, [r7, #6]
 8007348:	4a70      	ldr	r2, [pc, #448]	; (800750c <config_motors+0x2fc>)
 800734a:	21a4      	movs	r1, #164	; 0xa4
 800734c:	fb01 f303 	mul.w	r3, r1, r3
 8007350:	4413      	add	r3, r2
 8007352:	3328      	adds	r3, #40	; 0x28
 8007354:	4a72      	ldr	r2, [pc, #456]	; (8007520 <config_motors+0x310>)
 8007356:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 8007358:	79bb      	ldrb	r3, [r7, #6]
 800735a:	4a6c      	ldr	r2, [pc, #432]	; (800750c <config_motors+0x2fc>)
 800735c:	21a4      	movs	r1, #164	; 0xa4
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	332c      	adds	r3, #44	; 0x2c
 8007366:	4a6f      	ldr	r2, [pc, #444]	; (8007524 <config_motors+0x314>)
 8007368:	601a      	str	r2, [r3, #0]
#endif

#ifdef FL_MOTOR_ID
	motor_id = FL_MOTOR_ID - 1;
 800736a:	2300      	movs	r3, #0
 800736c:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 800736e:	79bb      	ldrb	r3, [r7, #6]
 8007370:	4a66      	ldr	r2, [pc, #408]	; (800750c <config_motors+0x2fc>)
 8007372:	21a4      	movs	r1, #164	; 0xa4
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	3302      	adds	r3, #2
 800737c:	2203      	movs	r2, #3
 800737e:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8007380:	79bb      	ldrb	r3, [r7, #6]
 8007382:	22a4      	movs	r2, #164	; 0xa4
 8007384:	fb02 f303 	mul.w	r3, r2, r3
 8007388:	4a60      	ldr	r2, [pc, #384]	; (800750c <config_motors+0x2fc>)
 800738a:	4413      	add	r3, r2
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fedd 	bl	800714c <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 8007392:	79bb      	ldrb	r3, [r7, #6]
 8007394:	4a5d      	ldr	r2, [pc, #372]	; (800750c <config_motors+0x2fc>)
 8007396:	21a4      	movs	r1, #164	; 0xa4
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	4413      	add	r3, r2
 800739e:	3374      	adds	r3, #116	; 0x74
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 80073a4:	79bb      	ldrb	r3, [r7, #6]
 80073a6:	4a59      	ldr	r2, [pc, #356]	; (800750c <config_motors+0x2fc>)
 80073a8:	21a4      	movs	r1, #164	; 0xa4
 80073aa:	fb01 f303 	mul.w	r3, r1, r3
 80073ae:	4413      	add	r3, r2
 80073b0:	337c      	adds	r3, #124	; 0x7c
 80073b2:	f04f 0200 	mov.w	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 80073b8:	79bb      	ldrb	r3, [r7, #6]
 80073ba:	4a54      	ldr	r2, [pc, #336]	; (800750c <config_motors+0x2fc>)
 80073bc:	21a4      	movs	r1, #164	; 0xa4
 80073be:	fb01 f303 	mul.w	r3, r1, r3
 80073c2:	4413      	add	r3, r2
 80073c4:	3378      	adds	r3, #120	; 0x78
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 80073cc:	79bb      	ldrb	r3, [r7, #6]
 80073ce:	4a4f      	ldr	r2, [pc, #316]	; (800750c <config_motors+0x2fc>)
 80073d0:	21a4      	movs	r1, #164	; 0xa4
 80073d2:	fb01 f303 	mul.w	r3, r1, r3
 80073d6:	4413      	add	r3, r2
 80073d8:	3384      	adds	r3, #132	; 0x84
 80073da:	4a53      	ldr	r2, [pc, #332]	; (8007528 <config_motors+0x318>)
 80073dc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 80073de:	79bb      	ldrb	r3, [r7, #6]
 80073e0:	4a4a      	ldr	r2, [pc, #296]	; (800750c <config_motors+0x2fc>)
 80073e2:	21a4      	movs	r1, #164	; 0xa4
 80073e4:	fb01 f303 	mul.w	r3, r1, r3
 80073e8:	4413      	add	r3, r2
 80073ea:	3380      	adds	r3, #128	; 0x80
 80073ec:	4a4f      	ldr	r2, [pc, #316]	; (800752c <config_motors+0x31c>)
 80073ee:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 80073f0:	79bb      	ldrb	r3, [r7, #6]
 80073f2:	4a46      	ldr	r2, [pc, #280]	; (800750c <config_motors+0x2fc>)
 80073f4:	21a4      	movs	r1, #164	; 0xa4
 80073f6:	fb01 f303 	mul.w	r3, r1, r3
 80073fa:	4413      	add	r3, r2
 80073fc:	3394      	adds	r3, #148	; 0x94
 80073fe:	4a47      	ldr	r2, [pc, #284]	; (800751c <config_motors+0x30c>)
 8007400:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 8007402:	79bb      	ldrb	r3, [r7, #6]
 8007404:	4a41      	ldr	r2, [pc, #260]	; (800750c <config_motors+0x2fc>)
 8007406:	21a4      	movs	r1, #164	; 0xa4
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	4413      	add	r3, r2
 800740e:	3310      	adds	r3, #16
 8007410:	4a3f      	ldr	r2, [pc, #252]	; (8007510 <config_motors+0x300>)
 8007412:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8007414:	79bb      	ldrb	r3, [r7, #6]
 8007416:	4a3d      	ldr	r2, [pc, #244]	; (800750c <config_motors+0x2fc>)
 8007418:	21a4      	movs	r1, #164	; 0xa4
 800741a:	fb01 f303 	mul.w	r3, r1, r3
 800741e:	4413      	add	r3, r2
 8007420:	3314      	adds	r3, #20
 8007422:	4a3c      	ldr	r2, [pc, #240]	; (8007514 <config_motors+0x304>)
 8007424:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8007426:	79bb      	ldrb	r3, [r7, #6]
 8007428:	4a38      	ldr	r2, [pc, #224]	; (800750c <config_motors+0x2fc>)
 800742a:	21a4      	movs	r1, #164	; 0xa4
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	4413      	add	r3, r2
 8007432:	3318      	adds	r3, #24
 8007434:	4a38      	ldr	r2, [pc, #224]	; (8007518 <config_motors+0x308>)
 8007436:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 8007438:	79bb      	ldrb	r3, [r7, #6]
 800743a:	4a34      	ldr	r2, [pc, #208]	; (800750c <config_motors+0x2fc>)
 800743c:	21a4      	movs	r1, #164	; 0xa4
 800743e:	fb01 f303 	mul.w	r3, r1, r3
 8007442:	4413      	add	r3, r2
 8007444:	3328      	adds	r3, #40	; 0x28
 8007446:	4a36      	ldr	r2, [pc, #216]	; (8007520 <config_motors+0x310>)
 8007448:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800744a:	79bb      	ldrb	r3, [r7, #6]
 800744c:	4a2f      	ldr	r2, [pc, #188]	; (800750c <config_motors+0x2fc>)
 800744e:	21a4      	movs	r1, #164	; 0xa4
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	4413      	add	r3, r2
 8007456:	332c      	adds	r3, #44	; 0x2c
 8007458:	4a32      	ldr	r2, [pc, #200]	; (8007524 <config_motors+0x314>)
 800745a:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID - 1;
 800745c:	2303      	movs	r3, #3
 800745e:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8007460:	79bb      	ldrb	r3, [r7, #6]
 8007462:	4a2a      	ldr	r2, [pc, #168]	; (800750c <config_motors+0x2fc>)
 8007464:	21a4      	movs	r1, #164	; 0xa4
 8007466:	fb01 f303 	mul.w	r3, r1, r3
 800746a:	4413      	add	r3, r2
 800746c:	3302      	adds	r3, #2
 800746e:	2203      	movs	r2, #3
 8007470:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8007472:	79bb      	ldrb	r3, [r7, #6]
 8007474:	22a4      	movs	r2, #164	; 0xa4
 8007476:	fb02 f303 	mul.w	r3, r2, r3
 800747a:	4a24      	ldr	r2, [pc, #144]	; (800750c <config_motors+0x2fc>)
 800747c:	4413      	add	r3, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff fe64 	bl	800714c <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 8007484:	79bb      	ldrb	r3, [r7, #6]
 8007486:	4a21      	ldr	r2, [pc, #132]	; (800750c <config_motors+0x2fc>)
 8007488:	21a4      	movs	r1, #164	; 0xa4
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	3374      	adds	r3, #116	; 0x74
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 8007496:	79bb      	ldrb	r3, [r7, #6]
 8007498:	4a1c      	ldr	r2, [pc, #112]	; (800750c <config_motors+0x2fc>)
 800749a:	21a4      	movs	r1, #164	; 0xa4
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	337c      	adds	r3, #124	; 0x7c
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 80074aa:	79bb      	ldrb	r3, [r7, #6]
 80074ac:	4a17      	ldr	r2, [pc, #92]	; (800750c <config_motors+0x2fc>)
 80074ae:	21a4      	movs	r1, #164	; 0xa4
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	3378      	adds	r3, #120	; 0x78
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 80074be:	79bb      	ldrb	r3, [r7, #6]
 80074c0:	4a12      	ldr	r2, [pc, #72]	; (800750c <config_motors+0x2fc>)
 80074c2:	21a4      	movs	r1, #164	; 0xa4
 80074c4:	fb01 f303 	mul.w	r3, r1, r3
 80074c8:	4413      	add	r3, r2
 80074ca:	3384      	adds	r3, #132	; 0x84
 80074cc:	4a16      	ldr	r2, [pc, #88]	; (8007528 <config_motors+0x318>)
 80074ce:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 80074d0:	79bb      	ldrb	r3, [r7, #6]
 80074d2:	4a0e      	ldr	r2, [pc, #56]	; (800750c <config_motors+0x2fc>)
 80074d4:	21a4      	movs	r1, #164	; 0xa4
 80074d6:	fb01 f303 	mul.w	r3, r1, r3
 80074da:	4413      	add	r3, r2
 80074dc:	3380      	adds	r3, #128	; 0x80
 80074de:	4a13      	ldr	r2, [pc, #76]	; (800752c <config_motors+0x31c>)
 80074e0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 80074e2:	79bb      	ldrb	r3, [r7, #6]
 80074e4:	4a09      	ldr	r2, [pc, #36]	; (800750c <config_motors+0x2fc>)
 80074e6:	21a4      	movs	r1, #164	; 0xa4
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	3394      	adds	r3, #148	; 0x94
 80074f0:	4a0a      	ldr	r2, [pc, #40]	; (800751c <config_motors+0x30c>)
 80074f2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 80074f4:	79bb      	ldrb	r3, [r7, #6]
 80074f6:	4a05      	ldr	r2, [pc, #20]	; (800750c <config_motors+0x2fc>)
 80074f8:	21a4      	movs	r1, #164	; 0xa4
 80074fa:	fb01 f303 	mul.w	r3, r1, r3
 80074fe:	4413      	add	r3, r2
 8007500:	3340      	adds	r3, #64	; 0x40
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 8007508:	79bb      	ldrb	r3, [r7, #6]
 800750a:	e011      	b.n	8007530 <config_motors+0x320>
 800750c:	20001820 	.word	0x20001820
 8007510:	41200000 	.word	0x41200000
 8007514:	3dcccccd 	.word	0x3dcccccd
 8007518:	40a00000 	.word	0x40a00000
 800751c:	40f40000 	.word	0x40f40000
 8007520:	461c4000 	.word	0x461c4000
 8007524:	457a0000 	.word	0x457a0000
 8007528:	40c90fdb 	.word	0x40c90fdb
 800752c:	c0c90fdb 	.word	0xc0c90fdb
 8007530:	4abc      	ldr	r2, [pc, #752]	; (8007824 <config_motors+0x614>)
 8007532:	21a4      	movs	r1, #164	; 0xa4
 8007534:	fb01 f303 	mul.w	r3, r1, r3
 8007538:	4413      	add	r3, r2
 800753a:	3344      	adds	r3, #68	; 0x44
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 8007542:	79bb      	ldrb	r3, [r7, #6]
 8007544:	4ab7      	ldr	r2, [pc, #732]	; (8007824 <config_motors+0x614>)
 8007546:	21a4      	movs	r1, #164	; 0xa4
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	4413      	add	r3, r2
 800754e:	3348      	adds	r3, #72	; 0x48
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 8007556:	79bb      	ldrb	r3, [r7, #6]
 8007558:	4ab2      	ldr	r2, [pc, #712]	; (8007824 <config_motors+0x614>)
 800755a:	21a4      	movs	r1, #164	; 0xa4
 800755c:	fb01 f303 	mul.w	r3, r1, r3
 8007560:	4413      	add	r3, r2
 8007562:	3358      	adds	r3, #88	; 0x58
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 800756a:	79bb      	ldrb	r3, [r7, #6]
 800756c:	4aad      	ldr	r2, [pc, #692]	; (8007824 <config_motors+0x614>)
 800756e:	21a4      	movs	r1, #164	; 0xa4
 8007570:	fb01 f303 	mul.w	r3, r1, r3
 8007574:	4413      	add	r3, r2
 8007576:	335c      	adds	r3, #92	; 0x5c
 8007578:	f04f 0200 	mov.w	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800757e:	79bb      	ldrb	r3, [r7, #6]
 8007580:	4aa8      	ldr	r2, [pc, #672]	; (8007824 <config_motors+0x614>)
 8007582:	21a4      	movs	r1, #164	; 0xa4
 8007584:	fb01 f303 	mul.w	r3, r1, r3
 8007588:	4413      	add	r3, r2
 800758a:	3310      	adds	r3, #16
 800758c:	4aa6      	ldr	r2, [pc, #664]	; (8007828 <config_motors+0x618>)
 800758e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8007590:	79bb      	ldrb	r3, [r7, #6]
 8007592:	4aa4      	ldr	r2, [pc, #656]	; (8007824 <config_motors+0x614>)
 8007594:	21a4      	movs	r1, #164	; 0xa4
 8007596:	fb01 f303 	mul.w	r3, r1, r3
 800759a:	4413      	add	r3, r2
 800759c:	3314      	adds	r3, #20
 800759e:	4aa3      	ldr	r2, [pc, #652]	; (800782c <config_motors+0x61c>)
 80075a0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 80075a2:	79bb      	ldrb	r3, [r7, #6]
 80075a4:	4a9f      	ldr	r2, [pc, #636]	; (8007824 <config_motors+0x614>)
 80075a6:	21a4      	movs	r1, #164	; 0xa4
 80075a8:	fb01 f303 	mul.w	r3, r1, r3
 80075ac:	4413      	add	r3, r2
 80075ae:	3318      	adds	r3, #24
 80075b0:	4a9f      	ldr	r2, [pc, #636]	; (8007830 <config_motors+0x620>)
 80075b2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 80075b4:	79bb      	ldrb	r3, [r7, #6]
 80075b6:	4a9b      	ldr	r2, [pc, #620]	; (8007824 <config_motors+0x614>)
 80075b8:	21a4      	movs	r1, #164	; 0xa4
 80075ba:	fb01 f303 	mul.w	r3, r1, r3
 80075be:	4413      	add	r3, r2
 80075c0:	3328      	adds	r3, #40	; 0x28
 80075c2:	4a9c      	ldr	r2, [pc, #624]	; (8007834 <config_motors+0x624>)
 80075c4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 80075c6:	79bb      	ldrb	r3, [r7, #6]
 80075c8:	4a96      	ldr	r2, [pc, #600]	; (8007824 <config_motors+0x614>)
 80075ca:	21a4      	movs	r1, #164	; 0xa4
 80075cc:	fb01 f303 	mul.w	r3, r1, r3
 80075d0:	4413      	add	r3, r2
 80075d2:	332c      	adds	r3, #44	; 0x2c
 80075d4:	4a98      	ldr	r2, [pc, #608]	; (8007838 <config_motors+0x628>)
 80075d6:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID - 1;
 80075d8:	2301      	movs	r3, #1
 80075da:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 80075dc:	79bb      	ldrb	r3, [r7, #6]
 80075de:	4a91      	ldr	r2, [pc, #580]	; (8007824 <config_motors+0x614>)
 80075e0:	21a4      	movs	r1, #164	; 0xa4
 80075e2:	fb01 f303 	mul.w	r3, r1, r3
 80075e6:	4413      	add	r3, r2
 80075e8:	3302      	adds	r3, #2
 80075ea:	2203      	movs	r2, #3
 80075ec:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80075ee:	79bb      	ldrb	r3, [r7, #6]
 80075f0:	22a4      	movs	r2, #164	; 0xa4
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	4a8b      	ldr	r2, [pc, #556]	; (8007824 <config_motors+0x614>)
 80075f8:	4413      	add	r3, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fda6 	bl	800714c <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 8007600:	79bb      	ldrb	r3, [r7, #6]
 8007602:	4a88      	ldr	r2, [pc, #544]	; (8007824 <config_motors+0x614>)
 8007604:	21a4      	movs	r1, #164	; 0xa4
 8007606:	fb01 f303 	mul.w	r3, r1, r3
 800760a:	4413      	add	r3, r2
 800760c:	3374      	adds	r3, #116	; 0x74
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 8007612:	79bb      	ldrb	r3, [r7, #6]
 8007614:	4a83      	ldr	r2, [pc, #524]	; (8007824 <config_motors+0x614>)
 8007616:	21a4      	movs	r1, #164	; 0xa4
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	337c      	adds	r3, #124	; 0x7c
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 8007626:	79bb      	ldrb	r3, [r7, #6]
 8007628:	4a7e      	ldr	r2, [pc, #504]	; (8007824 <config_motors+0x614>)
 800762a:	21a4      	movs	r1, #164	; 0xa4
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	4413      	add	r3, r2
 8007632:	3378      	adds	r3, #120	; 0x78
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800763a:	79bb      	ldrb	r3, [r7, #6]
 800763c:	4a79      	ldr	r2, [pc, #484]	; (8007824 <config_motors+0x614>)
 800763e:	21a4      	movs	r1, #164	; 0xa4
 8007640:	fb01 f303 	mul.w	r3, r1, r3
 8007644:	4413      	add	r3, r2
 8007646:	3384      	adds	r3, #132	; 0x84
 8007648:	4a7c      	ldr	r2, [pc, #496]	; (800783c <config_motors+0x62c>)
 800764a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800764c:	79bb      	ldrb	r3, [r7, #6]
 800764e:	4a75      	ldr	r2, [pc, #468]	; (8007824 <config_motors+0x614>)
 8007650:	21a4      	movs	r1, #164	; 0xa4
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	4413      	add	r3, r2
 8007658:	3380      	adds	r3, #128	; 0x80
 800765a:	4a79      	ldr	r2, [pc, #484]	; (8007840 <config_motors+0x630>)
 800765c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800765e:	79bb      	ldrb	r3, [r7, #6]
 8007660:	4a70      	ldr	r2, [pc, #448]	; (8007824 <config_motors+0x614>)
 8007662:	21a4      	movs	r1, #164	; 0xa4
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	4413      	add	r3, r2
 800766a:	3394      	adds	r3, #148	; 0x94
 800766c:	4a75      	ldr	r2, [pc, #468]	; (8007844 <config_motors+0x634>)
 800766e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 8007670:	79bb      	ldrb	r3, [r7, #6]
 8007672:	4a6c      	ldr	r2, [pc, #432]	; (8007824 <config_motors+0x614>)
 8007674:	21a4      	movs	r1, #164	; 0xa4
 8007676:	fb01 f303 	mul.w	r3, r1, r3
 800767a:	4413      	add	r3, r2
 800767c:	3340      	adds	r3, #64	; 0x40
 800767e:	f04f 0200 	mov.w	r2, #0
 8007682:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 8007684:	79bb      	ldrb	r3, [r7, #6]
 8007686:	4a67      	ldr	r2, [pc, #412]	; (8007824 <config_motors+0x614>)
 8007688:	21a4      	movs	r1, #164	; 0xa4
 800768a:	fb01 f303 	mul.w	r3, r1, r3
 800768e:	4413      	add	r3, r2
 8007690:	3344      	adds	r3, #68	; 0x44
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 8007698:	79bb      	ldrb	r3, [r7, #6]
 800769a:	4a62      	ldr	r2, [pc, #392]	; (8007824 <config_motors+0x614>)
 800769c:	21a4      	movs	r1, #164	; 0xa4
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	3348      	adds	r3, #72	; 0x48
 80076a6:	f04f 0200 	mov.w	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 80076ac:	79bb      	ldrb	r3, [r7, #6]
 80076ae:	4a5d      	ldr	r2, [pc, #372]	; (8007824 <config_motors+0x614>)
 80076b0:	21a4      	movs	r1, #164	; 0xa4
 80076b2:	fb01 f303 	mul.w	r3, r1, r3
 80076b6:	4413      	add	r3, r2
 80076b8:	3358      	adds	r3, #88	; 0x58
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 80076c0:	79bb      	ldrb	r3, [r7, #6]
 80076c2:	4a58      	ldr	r2, [pc, #352]	; (8007824 <config_motors+0x614>)
 80076c4:	21a4      	movs	r1, #164	; 0xa4
 80076c6:	fb01 f303 	mul.w	r3, r1, r3
 80076ca:	4413      	add	r3, r2
 80076cc:	335c      	adds	r3, #92	; 0x5c
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 80076d4:	79bb      	ldrb	r3, [r7, #6]
 80076d6:	4a53      	ldr	r2, [pc, #332]	; (8007824 <config_motors+0x614>)
 80076d8:	21a4      	movs	r1, #164	; 0xa4
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	4413      	add	r3, r2
 80076e0:	3310      	adds	r3, #16
 80076e2:	4a51      	ldr	r2, [pc, #324]	; (8007828 <config_motors+0x618>)
 80076e4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 80076e6:	79bb      	ldrb	r3, [r7, #6]
 80076e8:	4a4e      	ldr	r2, [pc, #312]	; (8007824 <config_motors+0x614>)
 80076ea:	21a4      	movs	r1, #164	; 0xa4
 80076ec:	fb01 f303 	mul.w	r3, r1, r3
 80076f0:	4413      	add	r3, r2
 80076f2:	3314      	adds	r3, #20
 80076f4:	4a4d      	ldr	r2, [pc, #308]	; (800782c <config_motors+0x61c>)
 80076f6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 80076f8:	79bb      	ldrb	r3, [r7, #6]
 80076fa:	4a4a      	ldr	r2, [pc, #296]	; (8007824 <config_motors+0x614>)
 80076fc:	21a4      	movs	r1, #164	; 0xa4
 80076fe:	fb01 f303 	mul.w	r3, r1, r3
 8007702:	4413      	add	r3, r2
 8007704:	3318      	adds	r3, #24
 8007706:	4a4a      	ldr	r2, [pc, #296]	; (8007830 <config_motors+0x620>)
 8007708:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800770a:	79bb      	ldrb	r3, [r7, #6]
 800770c:	4a45      	ldr	r2, [pc, #276]	; (8007824 <config_motors+0x614>)
 800770e:	21a4      	movs	r1, #164	; 0xa4
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	4413      	add	r3, r2
 8007716:	3328      	adds	r3, #40	; 0x28
 8007718:	4a46      	ldr	r2, [pc, #280]	; (8007834 <config_motors+0x624>)
 800771a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800771c:	79bb      	ldrb	r3, [r7, #6]
 800771e:	4a41      	ldr	r2, [pc, #260]	; (8007824 <config_motors+0x614>)
 8007720:	21a4      	movs	r1, #164	; 0xa4
 8007722:	fb01 f303 	mul.w	r3, r1, r3
 8007726:	4413      	add	r3, r2
 8007728:	332c      	adds	r3, #44	; 0x2c
 800772a:	4a43      	ldr	r2, [pc, #268]	; (8007838 <config_motors+0x628>)
 800772c:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID - 1;
 800772e:	2304      	movs	r3, #4
 8007730:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 8007732:	79bb      	ldrb	r3, [r7, #6]
 8007734:	4a3b      	ldr	r2, [pc, #236]	; (8007824 <config_motors+0x614>)
 8007736:	21a4      	movs	r1, #164	; 0xa4
 8007738:	fb01 f303 	mul.w	r3, r1, r3
 800773c:	4413      	add	r3, r2
 800773e:	3302      	adds	r3, #2
 8007740:	2204      	movs	r2, #4
 8007742:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8007744:	79bb      	ldrb	r3, [r7, #6]
 8007746:	22a4      	movs	r2, #164	; 0xa4
 8007748:	fb02 f303 	mul.w	r3, r2, r3
 800774c:	4a35      	ldr	r2, [pc, #212]	; (8007824 <config_motors+0x614>)
 800774e:	4413      	add	r3, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fcfb 	bl	800714c <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8007756:	79bb      	ldrb	r3, [r7, #6]
 8007758:	4a32      	ldr	r2, [pc, #200]	; (8007824 <config_motors+0x614>)
 800775a:	21a4      	movs	r1, #164	; 0xa4
 800775c:	fb01 f303 	mul.w	r3, r1, r3
 8007760:	4413      	add	r3, r2
 8007762:	3388      	adds	r3, #136	; 0x88
 8007764:	4a38      	ldr	r2, [pc, #224]	; (8007848 <config_motors+0x638>)
 8007766:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 8007768:	79bb      	ldrb	r3, [r7, #6]
 800776a:	4a2e      	ldr	r2, [pc, #184]	; (8007824 <config_motors+0x614>)
 800776c:	21a4      	movs	r1, #164	; 0xa4
 800776e:	fb01 f303 	mul.w	r3, r1, r3
 8007772:	4413      	add	r3, r2
 8007774:	3364      	adds	r3, #100	; 0x64
 8007776:	4a35      	ldr	r2, [pc, #212]	; (800784c <config_motors+0x63c>)
 8007778:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 800777a:	79bb      	ldrb	r3, [r7, #6]
 800777c:	4a29      	ldr	r2, [pc, #164]	; (8007824 <config_motors+0x614>)
 800777e:	21a4      	movs	r1, #164	; 0xa4
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	4413      	add	r3, r2
 8007786:	3310      	adds	r3, #16
 8007788:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800778c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 800778e:	79bb      	ldrb	r3, [r7, #6]
 8007790:	4a24      	ldr	r2, [pc, #144]	; (8007824 <config_motors+0x614>)
 8007792:	21a4      	movs	r1, #164	; 0xa4
 8007794:	fb01 f303 	mul.w	r3, r1, r3
 8007798:	4413      	add	r3, r2
 800779a:	3314      	adds	r3, #20
 800779c:	4a2c      	ldr	r2, [pc, #176]	; (8007850 <config_motors+0x640>)
 800779e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 80077a0:	79bb      	ldrb	r3, [r7, #6]
 80077a2:	4a20      	ldr	r2, [pc, #128]	; (8007824 <config_motors+0x614>)
 80077a4:	21a4      	movs	r1, #164	; 0xa4
 80077a6:	fb01 f303 	mul.w	r3, r1, r3
 80077aa:	4413      	add	r3, r2
 80077ac:	3318      	adds	r3, #24
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 80077b4:	79bb      	ldrb	r3, [r7, #6]
 80077b6:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <config_motors+0x614>)
 80077b8:	21a4      	movs	r1, #164	; 0xa4
 80077ba:	fb01 f303 	mul.w	r3, r1, r3
 80077be:	4413      	add	r3, r2
 80077c0:	3328      	adds	r3, #40	; 0x28
 80077c2:	4a1c      	ldr	r2, [pc, #112]	; (8007834 <config_motors+0x624>)
 80077c4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 80077c6:	79bb      	ldrb	r3, [r7, #6]
 80077c8:	4a16      	ldr	r2, [pc, #88]	; (8007824 <config_motors+0x614>)
 80077ca:	21a4      	movs	r1, #164	; 0xa4
 80077cc:	fb01 f303 	mul.w	r3, r1, r3
 80077d0:	4413      	add	r3, r2
 80077d2:	332c      	adds	r3, #44	; 0x2c
 80077d4:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80077d8:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID - 1;
 80077da:	2305      	movs	r3, #5
 80077dc:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 80077de:	79bb      	ldrb	r3, [r7, #6]
 80077e0:	4a10      	ldr	r2, [pc, #64]	; (8007824 <config_motors+0x614>)
 80077e2:	21a4      	movs	r1, #164	; 0xa4
 80077e4:	fb01 f303 	mul.w	r3, r1, r3
 80077e8:	4413      	add	r3, r2
 80077ea:	3302      	adds	r3, #2
 80077ec:	2204      	movs	r2, #4
 80077ee:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 80077f0:	79bb      	ldrb	r3, [r7, #6]
 80077f2:	4a0c      	ldr	r2, [pc, #48]	; (8007824 <config_motors+0x614>)
 80077f4:	21a4      	movs	r1, #164	; 0xa4
 80077f6:	fb01 f303 	mul.w	r3, r1, r3
 80077fa:	4413      	add	r3, r2
 80077fc:	3364      	adds	r3, #100	; 0x64
 80077fe:	4a13      	ldr	r2, [pc, #76]	; (800784c <config_motors+0x63c>)
 8007800:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 8007802:	79bb      	ldrb	r3, [r7, #6]
 8007804:	4a07      	ldr	r2, [pc, #28]	; (8007824 <config_motors+0x614>)
 8007806:	21a4      	movs	r1, #164	; 0xa4
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	4413      	add	r3, r2
 800780e:	3310      	adds	r3, #16
 8007810:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8007814:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 8007816:	79bb      	ldrb	r3, [r7, #6]
 8007818:	4a02      	ldr	r2, [pc, #8]	; (8007824 <config_motors+0x614>)
 800781a:	21a4      	movs	r1, #164	; 0xa4
 800781c:	fb01 f303 	mul.w	r3, r1, r3
 8007820:	4413      	add	r3, r2
 8007822:	e017      	b.n	8007854 <config_motors+0x644>
 8007824:	20001820 	.word	0x20001820
 8007828:	41200000 	.word	0x41200000
 800782c:	3dcccccd 	.word	0x3dcccccd
 8007830:	40a00000 	.word	0x40a00000
 8007834:	461c4000 	.word	0x461c4000
 8007838:	457a0000 	.word	0x457a0000
 800783c:	40c90fdb 	.word	0x40c90fdb
 8007840:	c0c90fdb 	.word	0xc0c90fdb
 8007844:	40f40000 	.word	0x40f40000
 8007848:	4199999a 	.word	0x4199999a
 800784c:	460ca000 	.word	0x460ca000
 8007850:	3b03126f 	.word	0x3b03126f
 8007854:	3314      	adds	r3, #20
 8007856:	4ab9      	ldr	r2, [pc, #740]	; (8007b3c <config_motors+0x92c>)
 8007858:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 800785a:	79bb      	ldrb	r3, [r7, #6]
 800785c:	4ab8      	ldr	r2, [pc, #736]	; (8007b40 <config_motors+0x930>)
 800785e:	21a4      	movs	r1, #164	; 0xa4
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	4413      	add	r3, r2
 8007866:	3318      	adds	r3, #24
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 800786e:	79bb      	ldrb	r3, [r7, #6]
 8007870:	4ab3      	ldr	r2, [pc, #716]	; (8007b40 <config_motors+0x930>)
 8007872:	21a4      	movs	r1, #164	; 0xa4
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	4413      	add	r3, r2
 800787a:	3328      	adds	r3, #40	; 0x28
 800787c:	4ab1      	ldr	r2, [pc, #708]	; (8007b44 <config_motors+0x934>)
 800787e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 8007880:	79bb      	ldrb	r3, [r7, #6]
 8007882:	4aaf      	ldr	r2, [pc, #700]	; (8007b40 <config_motors+0x930>)
 8007884:	21a4      	movs	r1, #164	; 0xa4
 8007886:	fb01 f303 	mul.w	r3, r1, r3
 800788a:	4413      	add	r3, r2
 800788c:	332c      	adds	r3, #44	; 0x2c
 800788e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8007892:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8007894:	79bb      	ldrb	r3, [r7, #6]
 8007896:	4aaa      	ldr	r2, [pc, #680]	; (8007b40 <config_motors+0x930>)
 8007898:	21a4      	movs	r1, #164	; 0xa4
 800789a:	fb01 f303 	mul.w	r3, r1, r3
 800789e:	4413      	add	r3, r2
 80078a0:	3334      	adds	r3, #52	; 0x34
 80078a2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80078a6:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID - 1;
 80078a8:	2306      	movs	r3, #6
 80078aa:	71bb      	strb	r3, [r7, #6]
#ifdef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M3508_ANGLE;
#endif
#ifndef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M2006;
 80078ac:	79bb      	ldrb	r3, [r7, #6]
 80078ae:	4aa4      	ldr	r2, [pc, #656]	; (8007b40 <config_motors+0x930>)
 80078b0:	21a4      	movs	r1, #164	; 0xa4
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	3302      	adds	r3, #2
 80078ba:	2202      	movs	r2, #2
 80078bc:	701a      	strb	r2, [r3, #0]
#endif
	set_motor_config(&can_motors[motor_id]);
 80078be:	79bb      	ldrb	r3, [r7, #6]
 80078c0:	22a4      	movs	r2, #164	; 0xa4
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
 80078c6:	4a9e      	ldr	r2, [pc, #632]	; (8007b40 <config_motors+0x930>)
 80078c8:	4413      	add	r3, r2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff fc3e 	bl	800714c <set_motor_config>
	can_motors[motor_id].angle_data.max_ang = PI * 5000; //so it can rotate 5000 times oops
 80078d0:	79bb      	ldrb	r3, [r7, #6]
 80078d2:	4a9b      	ldr	r2, [pc, #620]	; (8007b40 <config_motors+0x930>)
 80078d4:	21a4      	movs	r1, #164	; 0xa4
 80078d6:	fb01 f303 	mul.w	r3, r1, r3
 80078da:	4413      	add	r3, r2
 80078dc:	337c      	adds	r3, #124	; 0x7c
 80078de:	4a9a      	ldr	r2, [pc, #616]	; (8007b48 <config_motors+0x938>)
 80078e0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = -PI * 5000;
 80078e2:	79bb      	ldrb	r3, [r7, #6]
 80078e4:	4a96      	ldr	r2, [pc, #600]	; (8007b40 <config_motors+0x930>)
 80078e6:	21a4      	movs	r1, #164	; 0xa4
 80078e8:	fb01 f303 	mul.w	r3, r1, r3
 80078ec:	4413      	add	r3, r2
 80078ee:	3378      	adds	r3, #120	; 0x78
 80078f0:	4a96      	ldr	r2, [pc, #600]	; (8007b4c <config_motors+0x93c>)
 80078f2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 80078f4:	79bb      	ldrb	r3, [r7, #6]
 80078f6:	4a92      	ldr	r2, [pc, #584]	; (8007b40 <config_motors+0x930>)
 80078f8:	21a4      	movs	r1, #164	; 0xa4
 80078fa:	fb01 f303 	mul.w	r3, r1, r3
 80078fe:	4413      	add	r3, r2
 8007900:	3384      	adds	r3, #132	; 0x84
 8007902:	4a93      	ldr	r2, [pc, #588]	; (8007b50 <config_motors+0x940>)
 8007904:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8007906:	79bb      	ldrb	r3, [r7, #6]
 8007908:	4a8d      	ldr	r2, [pc, #564]	; (8007b40 <config_motors+0x930>)
 800790a:	21a4      	movs	r1, #164	; 0xa4
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	4413      	add	r3, r2
 8007912:	3380      	adds	r3, #128	; 0x80
 8007914:	4a8f      	ldr	r2, [pc, #572]	; (8007b54 <config_motors+0x944>)
 8007916:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8007918:	79bb      	ldrb	r3, [r7, #6]
 800791a:	4a89      	ldr	r2, [pc, #548]	; (8007b40 <config_motors+0x930>)
 800791c:	21a4      	movs	r1, #164	; 0xa4
 800791e:	fb01 f303 	mul.w	r3, r1, r3
 8007922:	4413      	add	r3, r2
 8007924:	3394      	adds	r3, #148	; 0x94
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = FEEDER_ANGLE_KP;
 800792c:	79bb      	ldrb	r3, [r7, #6]
 800792e:	4a84      	ldr	r2, [pc, #528]	; (8007b40 <config_motors+0x930>)
 8007930:	21a4      	movs	r1, #164	; 0xa4
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	4413      	add	r3, r2
 8007938:	3340      	adds	r3, #64	; 0x40
 800793a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800793e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = FEEDER_ANGLE_KI;
 8007940:	79bb      	ldrb	r3, [r7, #6]
 8007942:	4a7f      	ldr	r2, [pc, #508]	; (8007b40 <config_motors+0x930>)
 8007944:	21a4      	movs	r1, #164	; 0xa4
 8007946:	fb01 f303 	mul.w	r3, r1, r3
 800794a:	4413      	add	r3, r2
 800794c:	3344      	adds	r3, #68	; 0x44
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = FEEDER_ANGLE_KD;
 8007954:	79bb      	ldrb	r3, [r7, #6]
 8007956:	4a7a      	ldr	r2, [pc, #488]	; (8007b40 <config_motors+0x930>)
 8007958:	21a4      	movs	r1, #164	; 0xa4
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	4413      	add	r3, r2
 8007960:	3348      	adds	r3, #72	; 0x48
 8007962:	f04f 0200 	mov.w	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = FEEDER_ANGLE_INT_MAX;
 8007968:	79bb      	ldrb	r3, [r7, #6]
 800796a:	4a75      	ldr	r2, [pc, #468]	; (8007b40 <config_motors+0x930>)
 800796c:	21a4      	movs	r1, #164	; 0xa4
 800796e:	fb01 f303 	mul.w	r3, r1, r3
 8007972:	4413      	add	r3, r2
 8007974:	3358      	adds	r3, #88	; 0x58
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = FEEDER_MAX_RPM;
 800797c:	79bb      	ldrb	r3, [r7, #6]
 800797e:	4a70      	ldr	r2, [pc, #448]	; (8007b40 <config_motors+0x930>)
 8007980:	21a4      	movs	r1, #164	; 0xa4
 8007982:	fb01 f303 	mul.w	r3, r1, r3
 8007986:	4413      	add	r3, r2
 8007988:	335c      	adds	r3, #92	; 0x5c
 800798a:	4a73      	ldr	r2, [pc, #460]	; (8007b58 <config_motors+0x948>)
 800798c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FEEDER_KP;
 800798e:	79bb      	ldrb	r3, [r7, #6]
 8007990:	4a6b      	ldr	r2, [pc, #428]	; (8007b40 <config_motors+0x930>)
 8007992:	21a4      	movs	r1, #164	; 0xa4
 8007994:	fb01 f303 	mul.w	r3, r1, r3
 8007998:	4413      	add	r3, r2
 800799a:	3310      	adds	r3, #16
 800799c:	4a6f      	ldr	r2, [pc, #444]	; (8007b5c <config_motors+0x94c>)
 800799e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FEEDER_KI;
 80079a0:	79bb      	ldrb	r3, [r7, #6]
 80079a2:	4a67      	ldr	r2, [pc, #412]	; (8007b40 <config_motors+0x930>)
 80079a4:	21a4      	movs	r1, #164	; 0xa4
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	3314      	adds	r3, #20
 80079ae:	4a6c      	ldr	r2, [pc, #432]	; (8007b60 <config_motors+0x950>)
 80079b0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FEEDER_KD;
 80079b2:	79bb      	ldrb	r3, [r7, #6]
 80079b4:	4a62      	ldr	r2, [pc, #392]	; (8007b40 <config_motors+0x930>)
 80079b6:	21a4      	movs	r1, #164	; 0xa4
 80079b8:	fb01 f303 	mul.w	r3, r1, r3
 80079bc:	4413      	add	r3, r2
 80079be:	3318      	adds	r3, #24
 80079c0:	4a68      	ldr	r2, [pc, #416]	; (8007b64 <config_motors+0x954>)
 80079c2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FEEDER_MAX_INT;
 80079c4:	79bb      	ldrb	r3, [r7, #6]
 80079c6:	4a5e      	ldr	r2, [pc, #376]	; (8007b40 <config_motors+0x930>)
 80079c8:	21a4      	movs	r1, #164	; 0xa4
 80079ca:	fb01 f303 	mul.w	r3, r1, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	3328      	adds	r3, #40	; 0x28
 80079d2:	4a5c      	ldr	r2, [pc, #368]	; (8007b44 <config_motors+0x934>)
 80079d4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FEEDER_MAX_CURRENT;
 80079d6:	79bb      	ldrb	r3, [r7, #6]
 80079d8:	4a59      	ldr	r2, [pc, #356]	; (8007b40 <config_motors+0x930>)
 80079da:	21a4      	movs	r1, #164	; 0xa4
 80079dc:	fb01 f303 	mul.w	r3, r1, r3
 80079e0:	4413      	add	r3, r2
 80079e2:	332c      	adds	r3, #44	; 0x2c
 80079e4:	4a57      	ldr	r2, [pc, #348]	; (8007b44 <config_motors+0x934>)
 80079e6:	601a      	str	r2, [r3, #0]
#endif

#ifdef PITCH_MOTOR_ID
	motor_id = PITCH_MOTOR_ID - 1;
 80079e8:	2310      	movs	r3, #16
 80079ea:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 80079ec:	79bb      	ldrb	r3, [r7, #6]
 80079ee:	4a54      	ldr	r2, [pc, #336]	; (8007b40 <config_motors+0x930>)
 80079f0:	21a4      	movs	r1, #164	; 0xa4
 80079f2:	fb01 f303 	mul.w	r3, r1, r3
 80079f6:	4413      	add	r3, r2
 80079f8:	3302      	adds	r3, #2
 80079fa:	2201      	movs	r2, #1
 80079fc:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80079fe:	79bb      	ldrb	r3, [r7, #6]
 8007a00:	22a4      	movs	r2, #164	; 0xa4
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	4a4e      	ldr	r2, [pc, #312]	; (8007b40 <config_motors+0x930>)
 8007a08:	4413      	add	r3, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fb9e 	bl	800714c <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 8007a10:	79bb      	ldrb	r3, [r7, #6]
 8007a12:	4a4b      	ldr	r2, [pc, #300]	; (8007b40 <config_motors+0x930>)
 8007a14:	21a4      	movs	r1, #164	; 0xa4
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3388      	adds	r3, #136	; 0x88
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = PITCH_CENTER;
 8007a24:	79bb      	ldrb	r3, [r7, #6]
 8007a26:	4a46      	ldr	r2, [pc, #280]	; (8007b40 <config_motors+0x930>)
 8007a28:	21a4      	movs	r1, #164	; 0xa4
 8007a2a:	fb01 f303 	mul.w	r3, r1, r3
 8007a2e:	4413      	add	r3, r2
 8007a30:	3374      	adds	r3, #116	; 0x74
 8007a32:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007a36:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = PITCH_MAX_ANG;
 8007a38:	79bb      	ldrb	r3, [r7, #6]
 8007a3a:	4a41      	ldr	r2, [pc, #260]	; (8007b40 <config_motors+0x930>)
 8007a3c:	21a4      	movs	r1, #164	; 0xa4
 8007a3e:	fb01 f303 	mul.w	r3, r1, r3
 8007a42:	4413      	add	r3, r2
 8007a44:	337c      	adds	r3, #124	; 0x7c
 8007a46:	4a48      	ldr	r2, [pc, #288]	; (8007b68 <config_motors+0x958>)
 8007a48:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = PITCH_MIN_ANG;
 8007a4a:	79bb      	ldrb	r3, [r7, #6]
 8007a4c:	4a3c      	ldr	r2, [pc, #240]	; (8007b40 <config_motors+0x930>)
 8007a4e:	21a4      	movs	r1, #164	; 0xa4
 8007a50:	fb01 f303 	mul.w	r3, r1, r3
 8007a54:	4413      	add	r3, r2
 8007a56:	3378      	adds	r3, #120	; 0x78
 8007a58:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8007a5c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8007a5e:	79bb      	ldrb	r3, [r7, #6]
 8007a60:	4a37      	ldr	r2, [pc, #220]	; (8007b40 <config_motors+0x930>)
 8007a62:	21a4      	movs	r1, #164	; 0xa4
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	4413      	add	r3, r2
 8007a6a:	3384      	adds	r3, #132	; 0x84
 8007a6c:	4a38      	ldr	r2, [pc, #224]	; (8007b50 <config_motors+0x940>)
 8007a6e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8007a70:	79bb      	ldrb	r3, [r7, #6]
 8007a72:	4a33      	ldr	r2, [pc, #204]	; (8007b40 <config_motors+0x930>)
 8007a74:	21a4      	movs	r1, #164	; 0xa4
 8007a76:	fb01 f303 	mul.w	r3, r1, r3
 8007a7a:	4413      	add	r3, r2
 8007a7c:	3380      	adds	r3, #128	; 0x80
 8007a7e:	4a35      	ldr	r2, [pc, #212]	; (8007b54 <config_motors+0x944>)
 8007a80:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8007a82:	79bb      	ldrb	r3, [r7, #6]
 8007a84:	4a2e      	ldr	r2, [pc, #184]	; (8007b40 <config_motors+0x930>)
 8007a86:	21a4      	movs	r1, #164	; 0xa4
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	3394      	adds	r3, #148	; 0x94
 8007a90:	f04f 0200 	mov.w	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 8007a96:	79bb      	ldrb	r3, [r7, #6]
 8007a98:	4a29      	ldr	r2, [pc, #164]	; (8007b40 <config_motors+0x930>)
 8007a9a:	21a4      	movs	r1, #164	; 0xa4
 8007a9c:	fb01 f303 	mul.w	r3, r1, r3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3340      	adds	r3, #64	; 0x40
 8007aa4:	4a31      	ldr	r2, [pc, #196]	; (8007b6c <config_motors+0x95c>)
 8007aa6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 8007aa8:	79bb      	ldrb	r3, [r7, #6]
 8007aaa:	4a25      	ldr	r2, [pc, #148]	; (8007b40 <config_motors+0x930>)
 8007aac:	21a4      	movs	r1, #164	; 0xa4
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3344      	adds	r3, #68	; 0x44
 8007ab6:	4a2e      	ldr	r2, [pc, #184]	; (8007b70 <config_motors+0x960>)
 8007ab8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 8007aba:	79bb      	ldrb	r3, [r7, #6]
 8007abc:	4a20      	ldr	r2, [pc, #128]	; (8007b40 <config_motors+0x930>)
 8007abe:	21a4      	movs	r1, #164	; 0xa4
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3348      	adds	r3, #72	; 0x48
 8007ac8:	4a2a      	ldr	r2, [pc, #168]	; (8007b74 <config_motors+0x964>)
 8007aca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 8007acc:	79bb      	ldrb	r3, [r7, #6]
 8007ace:	4a1c      	ldr	r2, [pc, #112]	; (8007b40 <config_motors+0x930>)
 8007ad0:	21a4      	movs	r1, #164	; 0xa4
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3358      	adds	r3, #88	; 0x58
 8007ada:	4a27      	ldr	r2, [pc, #156]	; (8007b78 <config_motors+0x968>)
 8007adc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 8007ade:	79bb      	ldrb	r3, [r7, #6]
 8007ae0:	4a17      	ldr	r2, [pc, #92]	; (8007b40 <config_motors+0x930>)
 8007ae2:	21a4      	movs	r1, #164	; 0xa4
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	4413      	add	r3, r2
 8007aea:	335c      	adds	r3, #92	; 0x5c
 8007aec:	4a23      	ldr	r2, [pc, #140]	; (8007b7c <config_motors+0x96c>)
 8007aee:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 8007af0:	79bb      	ldrb	r3, [r7, #6]
 8007af2:	4a13      	ldr	r2, [pc, #76]	; (8007b40 <config_motors+0x930>)
 8007af4:	21a4      	movs	r1, #164	; 0xa4
 8007af6:	fb01 f303 	mul.w	r3, r1, r3
 8007afa:	4413      	add	r3, r2
 8007afc:	3310      	adds	r3, #16
 8007afe:	4a20      	ldr	r2, [pc, #128]	; (8007b80 <config_motors+0x970>)
 8007b00:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 8007b02:	79bb      	ldrb	r3, [r7, #6]
 8007b04:	4a0e      	ldr	r2, [pc, #56]	; (8007b40 <config_motors+0x930>)
 8007b06:	21a4      	movs	r1, #164	; 0xa4
 8007b08:	fb01 f303 	mul.w	r3, r1, r3
 8007b0c:	4413      	add	r3, r2
 8007b0e:	3314      	adds	r3, #20
 8007b10:	4a1c      	ldr	r2, [pc, #112]	; (8007b84 <config_motors+0x974>)
 8007b12:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 8007b14:	79bb      	ldrb	r3, [r7, #6]
 8007b16:	4a0a      	ldr	r2, [pc, #40]	; (8007b40 <config_motors+0x930>)
 8007b18:	21a4      	movs	r1, #164	; 0xa4
 8007b1a:	fb01 f303 	mul.w	r3, r1, r3
 8007b1e:	4413      	add	r3, r2
 8007b20:	3318      	adds	r3, #24
 8007b22:	4a19      	ldr	r2, [pc, #100]	; (8007b88 <config_motors+0x978>)
 8007b24:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 8007b26:	79bb      	ldrb	r3, [r7, #6]
 8007b28:	4a05      	ldr	r2, [pc, #20]	; (8007b40 <config_motors+0x930>)
 8007b2a:	21a4      	movs	r1, #164	; 0xa4
 8007b2c:	fb01 f303 	mul.w	r3, r1, r3
 8007b30:	4413      	add	r3, r2
 8007b32:	3328      	adds	r3, #40	; 0x28
 8007b34:	4a03      	ldr	r2, [pc, #12]	; (8007b44 <config_motors+0x934>)
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e028      	b.n	8007b8c <config_motors+0x97c>
 8007b3a:	bf00      	nop
 8007b3c:	3b03126f 	.word	0x3b03126f
 8007b40:	20001820 	.word	0x20001820
 8007b44:	461c4000 	.word	0x461c4000
 8007b48:	46756fdb 	.word	0x46756fdb
 8007b4c:	c6756fdb 	.word	0xc6756fdb
 8007b50:	40c90fdb 	.word	0x40c90fdb
 8007b54:	c0c90fdb 	.word	0xc0c90fdb
 8007b58:	42c80000 	.word	0x42c80000
 8007b5c:	40e00000 	.word	0x40e00000
 8007b60:	3ca3d70a 	.word	0x3ca3d70a
 8007b64:	40400000 	.word	0x40400000
 8007b68:	3eb851ec 	.word	0x3eb851ec
 8007b6c:	43d48000 	.word	0x43d48000
 8007b70:	3cb17e4b 	.word	0x3cb17e4b
 8007b74:	3e926e98 	.word	0x3e926e98
 8007b78:	447a0000 	.word	0x447a0000
 8007b7c:	43480000 	.word	0x43480000
 8007b80:	44160000 	.word	0x44160000
 8007b84:	3de147ae 	.word	0x3de147ae
 8007b88:	3c088889 	.word	0x3c088889
	can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 8007b8c:	79bb      	ldrb	r3, [r7, #6]
 8007b8e:	4a5e      	ldr	r2, [pc, #376]	; (8007d08 <config_motors+0xaf8>)
 8007b90:	21a4      	movs	r1, #164	; 0xa4
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	4413      	add	r3, r2
 8007b98:	332c      	adds	r3, #44	; 0x2c
 8007b9a:	4a5c      	ldr	r2, [pc, #368]	; (8007d0c <config_motors+0xafc>)
 8007b9c:	601a      	str	r2, [r3, #0]
#endif

#ifdef YAW_MOTOR_ID
	motor_id = YAW_MOTOR_ID - 1;
 8007b9e:	2311      	movs	r3, #17
 8007ba0:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8007ba2:	79bb      	ldrb	r3, [r7, #6]
 8007ba4:	4a58      	ldr	r2, [pc, #352]	; (8007d08 <config_motors+0xaf8>)
 8007ba6:	21a4      	movs	r1, #164	; 0xa4
 8007ba8:	fb01 f303 	mul.w	r3, r1, r3
 8007bac:	4413      	add	r3, r2
 8007bae:	3302      	adds	r3, #2
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8007bb4:	79bb      	ldrb	r3, [r7, #6]
 8007bb6:	22a4      	movs	r2, #164	; 0xa4
 8007bb8:	fb02 f303 	mul.w	r3, r2, r3
 8007bbc:	4a52      	ldr	r2, [pc, #328]	; (8007d08 <config_motors+0xaf8>)
 8007bbe:	4413      	add	r3, r2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff fac3 	bl	800714c <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;	//1;
 8007bc6:	79bb      	ldrb	r3, [r7, #6]
 8007bc8:	4a4f      	ldr	r2, [pc, #316]	; (8007d08 <config_motors+0xaf8>)
 8007bca:	21a4      	movs	r1, #164	; 0xa4
 8007bcc:	fb01 f303 	mul.w	r3, r1, r3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3388      	adds	r3, #136	; 0x88
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = YAW_CENTER;
 8007bda:	79bb      	ldrb	r3, [r7, #6]
 8007bdc:	4a4a      	ldr	r2, [pc, #296]	; (8007d08 <config_motors+0xaf8>)
 8007bde:	21a4      	movs	r1, #164	; 0xa4
 8007be0:	fb01 f303 	mul.w	r3, r1, r3
 8007be4:	4413      	add	r3, r2
 8007be6:	3374      	adds	r3, #116	; 0x74
 8007be8:	f240 525d 	movw	r2, #1373	; 0x55d
 8007bec:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = YAW_MAX_ANG;
 8007bee:	79bb      	ldrb	r3, [r7, #6]
 8007bf0:	4a45      	ldr	r2, [pc, #276]	; (8007d08 <config_motors+0xaf8>)
 8007bf2:	21a4      	movs	r1, #164	; 0xa4
 8007bf4:	fb01 f303 	mul.w	r3, r1, r3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	337c      	adds	r3, #124	; 0x7c
 8007bfc:	4a44      	ldr	r2, [pc, #272]	; (8007d10 <config_motors+0xb00>)
 8007bfe:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = YAW_MIN_ANG;
 8007c00:	79bb      	ldrb	r3, [r7, #6]
 8007c02:	4a41      	ldr	r2, [pc, #260]	; (8007d08 <config_motors+0xaf8>)
 8007c04:	21a4      	movs	r1, #164	; 0xa4
 8007c06:	fb01 f303 	mul.w	r3, r1, r3
 8007c0a:	4413      	add	r3, r2
 8007c0c:	3378      	adds	r3, #120	; 0x78
 8007c0e:	4a41      	ldr	r2, [pc, #260]	; (8007d14 <config_motors+0xb04>)
 8007c10:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8007c12:	79bb      	ldrb	r3, [r7, #6]
 8007c14:	4a3c      	ldr	r2, [pc, #240]	; (8007d08 <config_motors+0xaf8>)
 8007c16:	21a4      	movs	r1, #164	; 0xa4
 8007c18:	fb01 f303 	mul.w	r3, r1, r3
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3384      	adds	r3, #132	; 0x84
 8007c20:	4a3d      	ldr	r2, [pc, #244]	; (8007d18 <config_motors+0xb08>)
 8007c22:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI; //angle before it overflows
 8007c24:	79bb      	ldrb	r3, [r7, #6]
 8007c26:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <config_motors+0xaf8>)
 8007c28:	21a4      	movs	r1, #164	; 0xa4
 8007c2a:	fb01 f303 	mul.w	r3, r1, r3
 8007c2e:	4413      	add	r3, r2
 8007c30:	3380      	adds	r3, #128	; 0x80
 8007c32:	4a3a      	ldr	r2, [pc, #232]	; (8007d1c <config_motors+0xb0c>)
 8007c34:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8007c36:	79bb      	ldrb	r3, [r7, #6]
 8007c38:	4a33      	ldr	r2, [pc, #204]	; (8007d08 <config_motors+0xaf8>)
 8007c3a:	21a4      	movs	r1, #164	; 0xa4
 8007c3c:	fb01 f303 	mul.w	r3, r1, r3
 8007c40:	4413      	add	r3, r2
 8007c42:	3394      	adds	r3, #148	; 0x94
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = YAW_ANGLE_KP;
 8007c4a:	79bb      	ldrb	r3, [r7, #6]
 8007c4c:	4a2e      	ldr	r2, [pc, #184]	; (8007d08 <config_motors+0xaf8>)
 8007c4e:	21a4      	movs	r1, #164	; 0xa4
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	3340      	adds	r3, #64	; 0x40
 8007c58:	4a31      	ldr	r2, [pc, #196]	; (8007d20 <config_motors+0xb10>)
 8007c5a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = YAW_ANGLE_KI;
 8007c5c:	79bb      	ldrb	r3, [r7, #6]
 8007c5e:	4a2a      	ldr	r2, [pc, #168]	; (8007d08 <config_motors+0xaf8>)
 8007c60:	21a4      	movs	r1, #164	; 0xa4
 8007c62:	fb01 f303 	mul.w	r3, r1, r3
 8007c66:	4413      	add	r3, r2
 8007c68:	3344      	adds	r3, #68	; 0x44
 8007c6a:	4a2e      	ldr	r2, [pc, #184]	; (8007d24 <config_motors+0xb14>)
 8007c6c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = YAW_ANGLE_KD;
 8007c6e:	79bb      	ldrb	r3, [r7, #6]
 8007c70:	4a25      	ldr	r2, [pc, #148]	; (8007d08 <config_motors+0xaf8>)
 8007c72:	21a4      	movs	r1, #164	; 0xa4
 8007c74:	fb01 f303 	mul.w	r3, r1, r3
 8007c78:	4413      	add	r3, r2
 8007c7a:	3348      	adds	r3, #72	; 0x48
 8007c7c:	4a2a      	ldr	r2, [pc, #168]	; (8007d28 <config_motors+0xb18>)
 8007c7e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = YAW_ANGLE_INT_MAX;
 8007c80:	79bb      	ldrb	r3, [r7, #6]
 8007c82:	4a21      	ldr	r2, [pc, #132]	; (8007d08 <config_motors+0xaf8>)
 8007c84:	21a4      	movs	r1, #164	; 0xa4
 8007c86:	fb01 f303 	mul.w	r3, r1, r3
 8007c8a:	4413      	add	r3, r2
 8007c8c:	3358      	adds	r3, #88	; 0x58
 8007c8e:	4a27      	ldr	r2, [pc, #156]	; (8007d2c <config_motors+0xb1c>)
 8007c90:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = YAW_MAX_RPM;
 8007c92:	79bb      	ldrb	r3, [r7, #6]
 8007c94:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <config_motors+0xaf8>)
 8007c96:	21a4      	movs	r1, #164	; 0xa4
 8007c98:	fb01 f303 	mul.w	r3, r1, r3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	335c      	adds	r3, #92	; 0x5c
 8007ca0:	4a23      	ldr	r2, [pc, #140]	; (8007d30 <config_motors+0xb20>)
 8007ca2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = YAWRPM_KP;
 8007ca4:	79bb      	ldrb	r3, [r7, #6]
 8007ca6:	4a18      	ldr	r2, [pc, #96]	; (8007d08 <config_motors+0xaf8>)
 8007ca8:	21a4      	movs	r1, #164	; 0xa4
 8007caa:	fb01 f303 	mul.w	r3, r1, r3
 8007cae:	4413      	add	r3, r2
 8007cb0:	3310      	adds	r3, #16
 8007cb2:	4a20      	ldr	r2, [pc, #128]	; (8007d34 <config_motors+0xb24>)
 8007cb4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = YAWRPM_KI;
 8007cb6:	79bb      	ldrb	r3, [r7, #6]
 8007cb8:	4a13      	ldr	r2, [pc, #76]	; (8007d08 <config_motors+0xaf8>)
 8007cba:	21a4      	movs	r1, #164	; 0xa4
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	3314      	adds	r3, #20
 8007cc4:	4a1c      	ldr	r2, [pc, #112]	; (8007d38 <config_motors+0xb28>)
 8007cc6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = YAWRPM_KD;
 8007cc8:	79bb      	ldrb	r3, [r7, #6]
 8007cca:	4a0f      	ldr	r2, [pc, #60]	; (8007d08 <config_motors+0xaf8>)
 8007ccc:	21a4      	movs	r1, #164	; 0xa4
 8007cce:	fb01 f303 	mul.w	r3, r1, r3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	3318      	adds	r3, #24
 8007cd6:	4a19      	ldr	r2, [pc, #100]	; (8007d3c <config_motors+0xb2c>)
 8007cd8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = YAWRPM_INT_MAX;
 8007cda:	79bb      	ldrb	r3, [r7, #6]
 8007cdc:	4a0a      	ldr	r2, [pc, #40]	; (8007d08 <config_motors+0xaf8>)
 8007cde:	21a4      	movs	r1, #164	; 0xa4
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	4413      	add	r3, r2
 8007ce6:	3328      	adds	r3, #40	; 0x28
 8007ce8:	4a15      	ldr	r2, [pc, #84]	; (8007d40 <config_motors+0xb30>)
 8007cea:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = YAW_MAX_CURRENT;
 8007cec:	79bb      	ldrb	r3, [r7, #6]
 8007cee:	4a06      	ldr	r2, [pc, #24]	; (8007d08 <config_motors+0xaf8>)
 8007cf0:	21a4      	movs	r1, #164	; 0xa4
 8007cf2:	fb01 f303 	mul.w	r3, r1, r3
 8007cf6:	4413      	add	r3, r2
 8007cf8:	332c      	adds	r3, #44	; 0x2c
 8007cfa:	4a04      	ldr	r2, [pc, #16]	; (8007d0c <config_motors+0xafc>)
 8007cfc:	601a      	str	r2, [r3, #0]
#endif
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20001820 	.word	0x20001820
 8007d0c:	469c4000 	.word	0x469c4000
 8007d10:	40190fdb 	.word	0x40190fdb
 8007d14:	c0190fdb 	.word	0xc0190fdb
 8007d18:	40c90fdb 	.word	0x40c90fdb
 8007d1c:	c0c90fdb 	.word	0xc0c90fdb
 8007d20:	43bb8000 	.word	0x43bb8000
 8007d24:	3e6147ae 	.word	0x3e6147ae
 8007d28:	3c888889 	.word	0x3c888889
 8007d2c:	42c80000 	.word	0x42c80000
 8007d30:	43c80000 	.word	0x43c80000
 8007d34:	447a0000 	.word	0x447a0000
 8007d38:	3e8ccccd 	.word	0x3e8ccccd
 8007d3c:	3caaaaab 	.word	0x3caaaaab
 8007d40:	459c4000 	.word	0x459c4000

08007d44 <check_motors>:
	}
	temp_msg = bz_debug_rest;
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
}

uint16_t check_motors() {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
	uint16_t error = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	80fb      	strh	r3, [r7, #6]
	uint32_t curr_time = get_microseconds();
 8007d4e:	f7fa f9c7 	bl	80020e0 <get_microseconds>
 8007d52:	6038      	str	r0, [r7, #0]
	if (curr_time - can_motors[FR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007d54:	4b38      	ldr	r3, [pc, #224]	; (8007e38 <check_motors+0xf4>)
 8007d56:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d62:	d903      	bls.n	8007d6c <check_motors+0x28>
		error |= 1 << (0);
 8007d64:	88fb      	ldrh	r3, [r7, #6]
 8007d66:	f043 0301 	orr.w	r3, r3, #1
 8007d6a:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[FL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007d6c:	4b32      	ldr	r3, [pc, #200]	; (8007e38 <check_motors+0xf4>)
 8007d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d7a:	d903      	bls.n	8007d84 <check_motors+0x40>
		error |= 1 << (1);
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	f043 0302 	orr.w	r3, r3, #2
 8007d82:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007d84:	4b2c      	ldr	r3, [pc, #176]	; (8007e38 <check_motors+0xf4>)
 8007d86:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d92:	d903      	bls.n	8007d9c <check_motors+0x58>
		error |= 1 << (2);
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	f043 0304 	orr.w	r3, r3, #4
 8007d9a:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007d9c:	4b26      	ldr	r3, [pc, #152]	; (8007e38 <check_motors+0xf4>)
 8007d9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007daa:	d903      	bls.n	8007db4 <check_motors+0x70>
		error |= 1 << (3);
 8007dac:	88fb      	ldrh	r3, [r7, #6]
 8007dae:	f043 0308 	orr.w	r3, r3, #8
 8007db2:	80fb      	strh	r3, [r7, #6]
	}

	if (curr_time - can_motors[LFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007db4:	4b20      	ldr	r3, [pc, #128]	; (8007e38 <check_motors+0xf4>)
 8007db6:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dc2:	d903      	bls.n	8007dcc <check_motors+0x88>
		error |= 1 << (4);
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	f043 0310 	orr.w	r3, r3, #16
 8007dca:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[RFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007dcc:	4b1a      	ldr	r3, [pc, #104]	; (8007e38 <check_motors+0xf4>)
 8007dce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dda:	d903      	bls.n	8007de4 <check_motors+0xa0>
		error |= 1 << (5);
 8007ddc:	88fb      	ldrh	r3, [r7, #6]
 8007dde:	f043 0320 	orr.w	r3, r3, #32
 8007de2:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[FEEDER_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007de4:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <check_motors+0xf4>)
 8007de6:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007df2:	d903      	bls.n	8007dfc <check_motors+0xb8>
		error |= 1 << 6;
 8007df4:	88fb      	ldrh	r3, [r7, #6]
 8007df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfa:	80fb      	strh	r3, [r7, #6]

	}

	if (curr_time - can_motors[PITCH_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007dfc:	4b0e      	ldr	r3, [pc, #56]	; (8007e38 <check_motors+0xf4>)
 8007dfe:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	; 0xadc
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e0a:	d903      	bls.n	8007e14 <check_motors+0xd0>
		error |= 1 << 7;
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e12:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[YAW_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007e14:	4b08      	ldr	r3, [pc, #32]	; (8007e38 <check_motors+0xf4>)
 8007e16:	f8d3 3b80 	ldr.w	r3, [r3, #2944]	; 0xb80
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e22:	d903      	bls.n	8007e2c <check_motors+0xe8>
		error |= 1 << 8;
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e2a:	80fb      	strh	r3, [r7, #6]

	}
	return error;
 8007e2c:	88fb      	ldrh	r3, [r7, #6]

}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20001820 	.word	0x20001820

08007e3c <motor_calib_task>:

void motor_calib_task(void *argument) {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 8007e44:	2200      	movs	r2, #0
 8007e46:	2100      	movs	r1, #0
 8007e48:	4817      	ldr	r0, [pc, #92]	; (8007ea8 <motor_calib_task+0x6c>)
 8007e4a:	f7f9 f9e5 	bl	8001218 <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2100      	movs	r1, #0
 8007e52:	4816      	ldr	r0, [pc, #88]	; (8007eac <motor_calib_task+0x70>)
 8007e54:	f7f9 f9e0 	bl	8001218 <can_start>
	config_motors();
 8007e58:	f7ff f9da 	bl	8007210 <config_motors>
	//insert can tester?
	uint16_t error = 0b111111111;
 8007e5c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007e60:	81fb      	strh	r3, [r7, #14]
	vTaskDelay(50);
 8007e62:	2032      	movs	r0, #50	; 0x32
 8007e64:	f00e fcac 	bl	80167c0 <vTaskDelay>
	uint8_t startup = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	737b      	strb	r3, [r7, #13]
			vTaskDelay(500);
		}
	}

	uint8_t temp_msg;
	if (error == 0){
 8007e6c:	89fb      	ldrh	r3, [r7, #14]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d102      	bne.n	8007e78 <motor_calib_task+0x3c>
		temp_msg = ok;
 8007e72:	2301      	movs	r3, #1
 8007e74:	733b      	strb	r3, [r7, #12]
 8007e76:	e001      	b.n	8007e7c <motor_calib_task+0x40>
	} else {
		temp_msg = not_ok;
 8007e78:	2302      	movs	r3, #2
 8007e7a:	733b      	strb	r3, [r7, #12]
	}
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8007e7c:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <motor_calib_task+0x74>)
 8007e7e:	6818      	ldr	r0, [r3, #0]
 8007e80:	f107 010c 	add.w	r1, r7, #12
 8007e84:	2300      	movs	r3, #0
 8007e86:	2200      	movs	r2, #0
 8007e88:	f00d fe7a 	bl	8015b80 <xQueueGenericSend>

	while (1) {
		error = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	81fb      	strh	r3, [r7, #14]

		error = check_motors();
 8007e90:	f7ff ff58 	bl	8007d44 <check_motors>
 8007e94:	4603      	mov	r3, r0
 8007e96:	81fb      	strh	r3, [r7, #14]
		g_motor_fault = error;
 8007e98:	4a06      	ldr	r2, [pc, #24]	; (8007eb4 <motor_calib_task+0x78>)
 8007e9a:	89fb      	ldrh	r3, [r7, #14]
 8007e9c:	8013      	strh	r3, [r2, #0]
			bz_buzzer(0, 2);
			vTaskDelay(5000);
			continue;
			}
		}
		vTaskDelay(10000);
 8007e9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ea2:	f00e fc8d 	bl	80167c0 <vTaskDelay>
		error = 0;
 8007ea6:	e7f1      	b.n	8007e8c <motor_calib_task+0x50>
 8007ea8:	200003f0 	.word	0x200003f0
 8007eac:	20000418 	.word	0x20000418
 8007eb0:	20000480 	.word	0x20000480
 8007eb4:	2000286a 	.word	0x2000286a

08007eb8 <yaw_pid>:
#include "board_lib.h"
#include "motor_control.h"
#include "robot_config.h"

//todo: clean this place
void yaw_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08e      	sub	sp, #56	; 0x38
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	ed87 0b04 	vstr	d0, [r7, #16]
 8007ec2:	ed87 1b02 	vstr	d1, [r7, #8]
 8007ec6:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->last_time[0] = get_microseconds();
 8007ed0:	f7fa f906 	bl	80020e0 <get_microseconds>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	629a      	str	r2, [r3, #40]	; 0x28
	if (pid->last_time[1]>= pid->last_time[0]) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	f080 80a8 	bcs.w	8008038 <yaw_pid+0x180>
		return;
	}
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 8007ee8:	2301      	movs	r3, #1
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
	double Pout = 0;
 8007eec:	f04f 0200 	mov.w	r2, #0
 8007ef0:	f04f 0300 	mov.w	r3, #0
 8007ef4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[1] = pid->error[0];
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 8007f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f20:	f7f8 f9b2 	bl	8000288 <__aeabi_dsub>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	f7f8 fe5c 	bl	8000be8 <__aeabi_d2f>
 8007f30:	4602      	mov	r2, r0
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	ed93 7a03 	vldr	s14, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	edd3 7a00 	vldr	s15, [r3]
 8007f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	ee07 3a90 	vmov	s15, r3
 8007f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f54:	ee17 0a90 	vmov	r0, s15
 8007f58:	f7f8 faf6 	bl	8000548 <__aeabi_f2d>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd * time_mult;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	ed93 7a03 	vldr	s14, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	edd3 7a02 	vldr	s15, [r3, #8]
 8007f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f80:	ee07 3a90 	vmov	s15, r3
 8007f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8c:	ee17 0a90 	vmov	r0, s15
 8007f90:	f7f8 fada 	bl	8000548 <__aeabi_f2d>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->integral += pid->error[0] * pid->ki * time_mult;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	edd3 6a03 	vldr	s13, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8007fae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	edc3 7a05 	vstr	s15, [r3, #20]
	float_max(&pid->integral, pid->int_max);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f103 0214 	add.w	r2, r3, #20
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8007fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f000 fdc6 	bl	8008b6c <float_max>
	Iout = pid->integral;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7f8 faaf 	bl	8000548 <__aeabi_f2d>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout + Dout;
 8007ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ff6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007ffa:	f7f8 f947 	bl	800028c <__adddf3>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4610      	mov	r0, r2
 8008004:	4619      	mov	r1, r3
 8008006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800800a:	f7f8 f93f 	bl	800028c <__adddf3>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4610      	mov	r0, r2
 8008014:	4619      	mov	r1, r3
 8008016:	f7f8 fde7 	bl	8000be8 <__aeabi_d2f>
 800801a:	4602      	mov	r2, r0
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	621a      	str	r2, [r3, #32]
	float_max(&pid->output, pid->max_out);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f103 0220 	add.w	r2, r3, #32
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	edd3 7a07 	vldr	s15, [r3, #28]
 800802c:	eeb0 0a67 	vmov.f32	s0, s15
 8008030:	4610      	mov	r0, r2
 8008032:	f000 fd9b 	bl	8008b6c <float_max>
 8008036:	e000      	b.n	800803a <yaw_pid+0x182>
		return;
 8008038:	bf00      	nop
}
 800803a:	3738      	adds	r7, #56	; 0x38
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <yangle_pid>:
 * @param *motor pointer to the struct that contain the data
 * for target motor
 *
 */

void yangle_pid(double setpoint, double curr_pt, motor_data_t *motor, float imu_data, float *prev_imu_data) {
 8008040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008044:	b090      	sub	sp, #64	; 0x40
 8008046:	af00      	add	r7, sp, #0
 8008048:	ed87 0b06 	vstr	d0, [r7, #24]
 800804c:	ed87 1b04 	vstr	d1, [r7, #16]
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	ed87 2a02 	vstr	s4, [r7, #8]
 8008056:	6079      	str	r1, [r7, #4]
	double ang_diff = (setpoint - curr_pt);
 8008058:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800805c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008060:	f7f8 f912 	bl	8000288 <__aeabi_dsub>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if (ang_diff > PI) {
 800806c:	a38e      	add	r3, pc, #568	; (adr r3, 80082a8 <yangle_pid+0x268>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008076:	f7f8 fd4f 	bl	8000b18 <__aeabi_dcmpgt>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <yangle_pid+0x58>
		ang_diff -= 2 * PI;
 8008080:	a38b      	add	r3, pc, #556	; (adr r3, 80082b0 <yangle_pid+0x270>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800808a:	f7f8 f8fd 	bl	8000288 <__aeabi_dsub>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8008096:	e014      	b.n	80080c2 <yangle_pid+0x82>
	} else if (ang_diff < -PI) {
 8008098:	a387      	add	r3, pc, #540	; (adr r3, 80082b8 <yangle_pid+0x278>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80080a2:	f7f8 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <yangle_pid+0x82>
		ang_diff += 2 * PI;
 80080ac:	a380      	add	r3, pc, #512	; (adr r3, 80082b0 <yangle_pid+0x270>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80080b6:	f7f8 f8e9 	bl	800028c <__adddf3>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	if (*prev_imu_data == imu_data) {
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	edd3 7a00 	vldr	s15, [r3]
 80080c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80080cc:	eeb4 7a67 	vcmp.f32	s14, s15
 80080d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d4:	f000 80d8 	beq.w	8008288 <yangle_pid+0x248>
		return;}
	motor->angle_pid.last_time[1] = motor->angle_pid.last_time[0];
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	66da      	str	r2, [r3, #108]	; 0x6c
	motor->angle_pid.last_time[0] = get_microseconds();
 80080e0:	f7f9 fffe 	bl	80020e0 <get_microseconds>
 80080e4:	4602      	mov	r2, r0
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	669a      	str	r2, [r3, #104]	; 0x68

	uint32_t time_mult = TIMER_FREQ * 60 /
			(float) (motor->angle_pid.last_time[0] - motor->angle_pid.last_time[1]);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	ee07 3a90 	vmov	s15, r3
 80080f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	uint32_t time_mult = TIMER_FREQ * 60 /
 80080fc:	eddf 6a66 	vldr	s13, [pc, #408]	; 8008298 <yangle_pid+0x258>
 8008100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008108:	ee17 3a90 	vmov	r3, s15
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
	motor->angle_pid.error[1] = motor->angle_pid.error[0];
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	651a      	str	r2, [r3, #80]	; 0x50
	motor->angle_pid.error[0] = ang_diff;
 8008116:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800811a:	f7f8 fd65 	bl	8000be8 <__aeabi_d2f>
 800811e:	4602      	mov	r2, r0
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	64da      	str	r2, [r3, #76]	; 0x4c
	float rpm_pOut = motor->angle_pid.kp * ang_diff;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	4618      	mov	r0, r3
 800812a:	f7f8 fa0d 	bl	8000548 <__aeabi_f2d>
 800812e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008132:	f7f8 fa61 	bl	80005f8 <__aeabi_dmul>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4610      	mov	r0, r2
 800813c:	4619      	mov	r1, r3
 800813e:	f7f8 fd53 	bl	8000be8 <__aeabi_d2f>
 8008142:	4603      	mov	r3, r0
 8008144:	633b      	str	r3, [r7, #48]	; 0x30
	float rpm_dOut = motor->angle_pid.kd * (motor->angle_pid.error[0] - motor->angle_pid.error[1]);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008158:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800815c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008160:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float imu_ang_diff = imu_data - *prev_imu_data;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	edd3 7a00 	vldr	s15, [r3]
 800816a:	ed97 7a02 	vldr	s14, [r7, #8]
 800816e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008172:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	imu_ang_diff = (imu_ang_diff > PI) ? imu_ang_diff - (2 * PI) :
 8008176:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800817a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800829c <yangle_pid+0x25c>
 800817e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008186:	dd06      	ble.n	8008196 <yangle_pid+0x156>
 8008188:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800818c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80082a0 <yangle_pid+0x260>
 8008190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008194:	e011      	b.n	80081ba <yangle_pid+0x17a>
			((imu_ang_diff < -PI) ? imu_ang_diff + (2*PI) : imu_ang_diff);
 8008196:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800819a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80082a4 <yangle_pid+0x264>
 800819e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a6:	d506      	bpl.n	80081b6 <yangle_pid+0x176>
 80081a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80081ac:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80082a0 <yangle_pid+0x260>
 80081b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081b4:	e001      	b.n	80081ba <yangle_pid+0x17a>
 80081b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
	imu_ang_diff = (imu_ang_diff > PI) ? imu_ang_diff - (2 * PI) :
 80081ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float imu_rpm = ((imu_data - *prev_imu_data)  * time_mult)/(2 * PI);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	edd3 7a00 	vldr	s15, [r3]
 80081c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80081c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081da:	eddf 6a31 	vldr	s13, [pc, #196]	; 80082a0 <yangle_pid+0x260>
 80081de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80081e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	*prev_imu_data = imu_data;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	601a      	str	r2, [r3, #0]

	motor->angle_pid.integral += motor->angle_pid.error[0];
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80081f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	float_max(&motor->angle_pid.integral, motor->angle_pid.int_max);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800820e:	eeb0 0a67 	vmov.f32	s0, s15
 8008212:	4610      	mov	r0, r2
 8008214:	f000 fcaa 	bl	8008b6c <float_max>
	float rpm_iOut = motor->angle_pid.ki * motor->angle_pid.integral;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008228:	edc7 7a08 	vstr	s15, [r7, #32]

	motor->angle_pid.output = rpm_pOut + rpm_dOut + rpm_iOut;
 800822c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008230:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008238:	edd7 7a08 	vldr	s15, [r7, #32]
 800823c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	float_max(&motor->angle_pid.output, motor->angle_pid.max_out);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8008252:	eeb0 0a67 	vmov.f32	s0, s15
 8008256:	4610      	mov	r0, r2
 8008258:	f000 fc88 	bl	8008b6c <float_max>
	yaw_pid(motor->angle_pid.output, imu_rpm, &motor->rpm_pid);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008260:	4618      	mov	r0, r3
 8008262:	f7f8 f971 	bl	8000548 <__aeabi_f2d>
 8008266:	4604      	mov	r4, r0
 8008268:	460d      	mov	r5, r1
 800826a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800826c:	f7f8 f96c 	bl	8000548 <__aeabi_f2d>
 8008270:	4680      	mov	r8, r0
 8008272:	4689      	mov	r9, r1
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3310      	adds	r3, #16
 8008278:	4618      	mov	r0, r3
 800827a:	ec49 8b11 	vmov	d1, r8, r9
 800827e:	ec45 4b10 	vmov	d0, r4, r5
 8008282:	f7ff fe19 	bl	8007eb8 <yaw_pid>
 8008286:	e000      	b.n	800828a <yangle_pid+0x24a>
		return;}
 8008288:	bf00      	nop
}
 800828a:	3740      	adds	r7, #64	; 0x40
 800828c:	46bd      	mov	sp, r7
 800828e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008292:	bf00      	nop
 8008294:	f3af 8000 	nop.w
 8008298:	49127c00 	.word	0x49127c00
 800829c:	40490fdb 	.word	0x40490fdb
 80082a0:	40c90fdb 	.word	0x40c90fdb
 80082a4:	c0490fdb 	.word	0xc0490fdb
 80082a8:	60000000 	.word	0x60000000
 80082ac:	400921fb 	.word	0x400921fb
 80082b0:	60000000 	.word	0x60000000
 80082b4:	401921fb 	.word	0x401921fb
 80082b8:	60000000 	.word	0x60000000
 80082bc:	c00921fb 	.word	0xc00921fb

080082c0 <angle_pid>:
 * @param curr_pt current angle
 * @param *motor pointer to the struct that contain the data
 * for target motor
 *
 */
void angle_pid(double setpoint, double curr_pt, motor_data_t *motor) {
 80082c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80082c4:	b08c      	sub	sp, #48	; 0x30
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	ed87 0b04 	vstr	d0, [r7, #16]
 80082cc:	ed87 1b02 	vstr	d1, [r7, #8]
 80082d0:	6078      	str	r0, [r7, #4]
	double ang_diff = (setpoint - curr_pt);
 80082d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082da:	f7f7 ffd5 	bl	8000288 <__aeabi_dsub>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (ang_diff > PI) {
 80082e6:	a356      	add	r3, pc, #344	; (adr r3, 8008440 <angle_pid+0x180>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80082f0:	f7f8 fc12 	bl	8000b18 <__aeabi_dcmpgt>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00b      	beq.n	8008312 <angle_pid+0x52>
		ang_diff -= 2 * PI;
 80082fa:	a353      	add	r3, pc, #332	; (adr r3, 8008448 <angle_pid+0x188>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008304:	f7f7 ffc0 	bl	8000288 <__aeabi_dsub>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008310:	e014      	b.n	800833c <angle_pid+0x7c>
	} else if (ang_diff < -PI) {
 8008312:	a34f      	add	r3, pc, #316	; (adr r3, 8008450 <angle_pid+0x190>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800831c:	f7f8 fbde 	bl	8000adc <__aeabi_dcmplt>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <angle_pid+0x7c>
		ang_diff += 2 * PI;
 8008326:	a348      	add	r3, pc, #288	; (adr r3, 8008448 <angle_pid+0x188>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008330:	f7f7 ffac 	bl	800028c <__adddf3>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	motor->angle_pid.error[1] = motor->angle_pid.error[0];
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	651a      	str	r2, [r3, #80]	; 0x50
	motor->angle_pid.error[0] = ang_diff;
 8008344:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008348:	f7f8 fc4e 	bl	8000be8 <__aeabi_d2f>
 800834c:	4602      	mov	r2, r0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	64da      	str	r2, [r3, #76]	; 0x4c
	float rpm_pOut = motor->angle_pid.kp * ang_diff;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	4618      	mov	r0, r3
 8008358:	f7f8 f8f6 	bl	8000548 <__aeabi_f2d>
 800835c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008360:	f7f8 f94a 	bl	80005f8 <__aeabi_dmul>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4610      	mov	r0, r2
 800836a:	4619      	mov	r1, r3
 800836c:	f7f8 fc3c 	bl	8000be8 <__aeabi_d2f>
 8008370:	4603      	mov	r3, r0
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
	float rpm_dOut = motor->angle_pid.kd * (motor->angle_pid.error[0] - motor->angle_pid.error[1]);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008386:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800838a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838e:	edc7 7a08 	vstr	s15, [r7, #32]

	motor->angle_pid.integral += motor->angle_pid.error[0];
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800839e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	float_max(&motor->angle_pid.integral, motor->angle_pid.int_max);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80083b4:	eeb0 0a67 	vmov.f32	s0, s15
 80083b8:	4610      	mov	r0, r2
 80083ba:	f000 fbd7 	bl	8008b6c <float_max>
	float rpm_iOut = motor->angle_pid.ki * motor->angle_pid.integral;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80083ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ce:	edc7 7a07 	vstr	s15, [r7, #28]
	motor->angle_pid.output = rpm_pOut + rpm_dOut + rpm_iOut;
 80083d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80083d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80083da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083de:	edd7 7a07 	vldr	s15, [r7, #28]
 80083e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	float_max(&motor->angle_pid.output, motor->angle_pid.max_out);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80083f8:	eeb0 0a67 	vmov.f32	s0, s15
 80083fc:	4610      	mov	r0, r2
 80083fe:	f000 fbb5 	bl	8008b6c <float_max>
	speed_pid(motor->angle_pid.output, motor->raw_data.rpm, &motor->rpm_pid);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008406:	4618      	mov	r0, r3
 8008408:	f7f8 f89e 	bl	8000548 <__aeabi_f2d>
 800840c:	4604      	mov	r4, r0
 800840e:	460d      	mov	r5, r1
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008416:	4618      	mov	r0, r3
 8008418:	f7f8 f884 	bl	8000524 <__aeabi_i2d>
 800841c:	4680      	mov	r8, r0
 800841e:	4689      	mov	r9, r1
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3310      	adds	r3, #16
 8008424:	4618      	mov	r0, r3
 8008426:	ec49 8b11 	vmov	d1, r8, r9
 800842a:	ec45 4b10 	vmov	d0, r4, r5
 800842e:	f000 f813 	bl	8008458 <speed_pid>
}
 8008432:	bf00      	nop
 8008434:	3730      	adds	r7, #48	; 0x30
 8008436:	46bd      	mov	sp, r7
 8008438:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800843c:	f3af 8000 	nop.w
 8008440:	60000000 	.word	0x60000000
 8008444:	400921fb 	.word	0x400921fb
 8008448:	60000000 	.word	0x60000000
 800844c:	401921fb 	.word	0x401921fb
 8008450:	60000000 	.word	0x60000000
 8008454:	c00921fb 	.word	0xc00921fb

08008458 <speed_pid>:
 *
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */
void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b08c      	sub	sp, #48	; 0x30
 800845c:	af00      	add	r7, sp, #0
 800845e:	ed87 0b04 	vstr	d0, [r7, #16]
 8008462:	ed87 1b02 	vstr	d1, [r7, #8]
 8008466:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->last_time[0] = get_microseconds();
 8008470:	f7f9 fe36 	bl	80020e0 <get_microseconds>
 8008474:	4602      	mov	r2, r0
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	629a      	str	r2, [r3, #40]	; 0x28
	double Pout = 0;
 800847a:	f04f 0200 	mov.w	r2, #0
 800847e:	f04f 0300 	mov.w	r3, #0
 8008482:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	f04f 0300 	mov.w	r3, #0
 800849a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[1] = pid->error[0];
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 80084a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084ae:	f7f7 feeb 	bl	8000288 <__aeabi_dsub>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4610      	mov	r0, r2
 80084b8:	4619      	mov	r1, r3
 80084ba:	f7f8 fb95 	bl	8000be8 <__aeabi_d2f>
 80084be:	4602      	mov	r2, r0
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	edd3 7a00 	vldr	s15, [r3]
 80084d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d4:	ee17 0a90 	vmov	r0, s15
 80084d8:	f7f8 f836 	bl	8000548 <__aeabi_f2d>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80084f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80084fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fe:	ee17 0a90 	vmov	r0, s15
 8008502:	f7f8 f821 	bl	8000548 <__aeabi_f2d>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->integral += pid->error[0] * pid->ki;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	ed93 7a05 	vldr	s14, [r3, #20]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	edd3 6a03 	vldr	s13, [r3, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	edc3 7a05 	vstr	s15, [r3, #20]
	float_max(&pid->integral, pid->int_max);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f103 0214 	add.w	r2, r3, #20
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	edd3 7a06 	vldr	s15, [r3, #24]
 800853a:	eeb0 0a67 	vmov.f32	s0, s15
 800853e:	4610      	mov	r0, r2
 8008540:	f000 fb14 	bl	8008b6c <float_max>
	Iout = pid->integral;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	4618      	mov	r0, r3
 800854a:	f7f7 fffd 	bl	8000548 <__aeabi_f2d>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout + Dout;
 8008556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800855a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800855e:	f7f7 fe95 	bl	800028c <__adddf3>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4610      	mov	r0, r2
 8008568:	4619      	mov	r1, r3
 800856a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800856e:	f7f7 fe8d 	bl	800028c <__adddf3>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	f7f8 fb35 	bl	8000be8 <__aeabi_d2f>
 800857e:	4602      	mov	r2, r0
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	621a      	str	r2, [r3, #32]
	float_max(&pid->output, pid->max_out);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f103 0220 	add.w	r2, r3, #32
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	edd3 7a07 	vldr	s15, [r3, #28]
 8008590:	eeb0 0a67 	vmov.f32	s0, s15
 8008594:	4610      	mov	r0, r2
 8008596:	f000 fae9 	bl	8008b6c <float_max>
}
 800859a:	bf00      	nop
 800859c:	3730      	adds	r7, #48	; 0x30
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <motor_send_can>:
 */
void motor_send_can(motor_data_t motor_all[],
		uint8_t id_one,
		uint8_t id_two,
		uint8_t id_three,
		uint8_t id_four) {
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08e      	sub	sp, #56	; 0x38
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	4608      	mov	r0, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	461a      	mov	r2, r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	70fb      	strb	r3, [r7, #3]
 80085b6:	460b      	mov	r3, r1
 80085b8:	70bb      	strb	r3, [r7, #2]
 80085ba:	4613      	mov	r3, r2
 80085bc:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	uint32_t temp_checker = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 80085c2:	2300      	movs	r3, #0
 80085c4:	623b      	str	r3, [r7, #32]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 80085c6:	2300      	movs	r3, #0
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_tx_message.DLC = 0x08;
 80085ca:	2308      	movs	r3, #8
 80085cc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (id_one < 25 && id_one > 0) {
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	2b18      	cmp	r3, #24
 80085d2:	d80b      	bhi.n	80085ec <motor_send_can+0x48>
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d008      	beq.n	80085ec <motor_send_can+0x48>
		temp_checker = temp_checker | 1 << (id_one - 1);
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	3b01      	subs	r3, #1
 80085de:	2201      	movs	r2, #1
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e8:	4313      	orrs	r3, r2
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_two < 25 && id_two > 0) {
 80085ec:	78bb      	ldrb	r3, [r7, #2]
 80085ee:	2b18      	cmp	r3, #24
 80085f0:	d80b      	bhi.n	800860a <motor_send_can+0x66>
 80085f2:	78bb      	ldrb	r3, [r7, #2]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d008      	beq.n	800860a <motor_send_can+0x66>
		temp_checker = temp_checker | 1 << (id_two - 1);
 80085f8:	78bb      	ldrb	r3, [r7, #2]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	2201      	movs	r2, #1
 80085fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008602:	461a      	mov	r2, r3
 8008604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008606:	4313      	orrs	r3, r2
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_three < 25 && id_three > 0) {
 800860a:	787b      	ldrb	r3, [r7, #1]
 800860c:	2b18      	cmp	r3, #24
 800860e:	d80b      	bhi.n	8008628 <motor_send_can+0x84>
 8008610:	787b      	ldrb	r3, [r7, #1]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d008      	beq.n	8008628 <motor_send_can+0x84>
		temp_checker = temp_checker | 1 << (id_three - 1);
 8008616:	787b      	ldrb	r3, [r7, #1]
 8008618:	3b01      	subs	r3, #1
 800861a:	2201      	movs	r2, #1
 800861c:	fa02 f303 	lsl.w	r3, r2, r3
 8008620:	461a      	mov	r2, r3
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	4313      	orrs	r3, r2
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_four < 25 && id_four > 0) {
 8008628:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800862c:	2b18      	cmp	r3, #24
 800862e:	d80d      	bhi.n	800864c <motor_send_can+0xa8>
 8008630:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d009      	beq.n	800864c <motor_send_can+0xa8>
		temp_checker = temp_checker | 1 << (id_four - 1);
 8008638:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800863c:	3b01      	subs	r3, #1
 800863e:	2201      	movs	r2, #1
 8008640:	fa02 f303 	lsl.w	r3, r2, r3
 8008644:	461a      	mov	r2, r3
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	4313      	orrs	r3, r2
 800864a:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (temp_checker & 0x00000F) {
 800864c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864e:	f003 030f 	and.w	r3, r3, #15
 8008652:	2b00      	cmp	r3, #0
 8008654:	d054      	beq.n	8008700 <motor_send_can+0x15c>
		CAN_tx_message.StdId = 0x200;
 8008656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800865a:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0].rpm_pid.output;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008666:	ee17 3a90 	vmov	r3, s15
 800866a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800866c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008670:	121b      	asrs	r3, r3, #8
 8008672:	b21b      	sxth	r3, r3
 8008674:	b2db      	uxtb	r3, r3
 8008676:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8008678:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800867a:	b2db      	uxtb	r3, r3
 800867c:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1].rpm_pid.output;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	33a4      	adds	r3, #164	; 0xa4
 8008682:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800868a:	ee17 3a90 	vmov	r3, s15
 800868e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8008690:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008694:	121b      	asrs	r3, r3, #8
 8008696:	b21b      	sxth	r3, r3
 8008698:	b2db      	uxtb	r3, r3
 800869a:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800869c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2].rpm_pid.output;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80086a8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80086ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086b0:	ee17 3a90 	vmov	r3, s15
 80086b4:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 80086b6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80086ba:	121b      	asrs	r3, r3, #8
 80086bc:	b21b      	sxth	r3, r3
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 80086c2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3].rpm_pid.output;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80086ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80086d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086d6:	ee17 3a90 	vmov	r3, s15
 80086da:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 80086dc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80086e0:	121b      	asrs	r3, r3, #8
 80086e2:	b21b      	sxth	r3, r3
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 80086e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 80086ee:	f107 030c 	add.w	r3, r7, #12
 80086f2:	f107 0210 	add.w	r2, r7, #16
 80086f6:	f107 0118 	add.w	r1, r7, #24
 80086fa:	48bc      	ldr	r0, [pc, #752]	; (80089ec <motor_send_can+0x448>)
 80086fc:	f001 fc70 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0000F0) {
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d057      	beq.n	80087ba <motor_send_can+0x216>
		CAN_tx_message.StdId = 0x1FF;
 800870a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800870e:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4].rpm_pid.output;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008716:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800871a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800871e:	ee17 3a90 	vmov	r3, s15
 8008722:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8008724:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008728:	121b      	asrs	r3, r3, #8
 800872a:	b21b      	sxth	r3, r3
 800872c:	b2db      	uxtb	r3, r3
 800872e:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8008730:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008732:	b2db      	uxtb	r3, r3
 8008734:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5].rpm_pid.output;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800873c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008744:	ee17 3a90 	vmov	r3, s15
 8008748:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800874a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800874e:	121b      	asrs	r3, r3, #8
 8008750:	b21b      	sxth	r3, r3
 8008752:	b2db      	uxtb	r3, r3
 8008754:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8008756:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008758:	b2db      	uxtb	r3, r3
 800875a:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6].rpm_pid.output;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8008762:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800876a:	ee17 3a90 	vmov	r3, s15
 800876e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8008770:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008774:	121b      	asrs	r3, r3, #8
 8008776:	b21b      	sxth	r3, r3
 8008778:	b2db      	uxtb	r3, r3
 800877a:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800877c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800877e:	b2db      	uxtb	r3, r3
 8008780:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7].rpm_pid.output;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8008788:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800878c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008790:	ee17 3a90 	vmov	r3, s15
 8008794:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8008796:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800879a:	121b      	asrs	r3, r3, #8
 800879c:	b21b      	sxth	r3, r3
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 80087a2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 80087a8:	f107 030c 	add.w	r3, r7, #12
 80087ac:	f107 0210 	add.w	r2, r7, #16
 80087b0:	f107 0118 	add.w	r1, r7, #24
 80087b4:	488d      	ldr	r0, [pc, #564]	; (80089ec <motor_send_can+0x448>)
 80087b6:	f001 fc13 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x000F00) {
 80087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d057      	beq.n	8008874 <motor_send_can+0x2d0>
		CAN_tx_message.StdId = 0x2FF;
 80087c4:	f240 23ff 	movw	r3, #767	; 0x2ff
 80087c8:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8].rpm_pid.output;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80087d0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80087d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087d8:	ee17 3a90 	vmov	r3, s15
 80087dc:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 80087de:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80087e2:	121b      	asrs	r3, r3, #8
 80087e4:	b21b      	sxth	r3, r3
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 80087ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9].rpm_pid.output;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 80087f6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80087fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087fe:	ee17 3a90 	vmov	r3, s15
 8008802:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8008804:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008808:	121b      	asrs	r3, r3, #8
 800880a:	b21b      	sxth	r3, r3
 800880c:	b2db      	uxtb	r3, r3
 800880e:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8008810:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008812:	b2db      	uxtb	r3, r3
 8008814:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA].rpm_pid.output;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800881c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008824:	ee17 3a90 	vmov	r3, s15
 8008828:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800882a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800882e:	121b      	asrs	r3, r3, #8
 8008830:	b21b      	sxth	r3, r3
 8008832:	b2db      	uxtb	r3, r3
 8008834:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8008836:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008838:	b2db      	uxtb	r3, r3
 800883a:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB].rpm_pid.output;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8008842:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800884a:	ee17 3a90 	vmov	r3, s15
 800884e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8008850:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008854:	121b      	asrs	r3, r3, #8
 8008856:	b21b      	sxth	r3, r3
 8008858:	b2db      	uxtb	r3, r3
 800885a:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800885c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800885e:	b2db      	uxtb	r3, r3
 8008860:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008862:	f107 030c 	add.w	r3, r7, #12
 8008866:	f107 0210 	add.w	r2, r7, #16
 800886a:	f107 0118 	add.w	r1, r7, #24
 800886e:	485f      	ldr	r0, [pc, #380]	; (80089ec <motor_send_can+0x448>)
 8008870:	f001 fbb6 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	}
#ifndef CHASSIS_MCU
	if (temp_checker & 0x00F000) {
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d057      	beq.n	800892e <motor_send_can+0x38a>
		CAN_tx_message.StdId = 0x200;
 800887e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008882:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0 + 12].rpm_pid.output;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 800888a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800888e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008892:	ee17 3a90 	vmov	r3, s15
 8008896:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8008898:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800889c:	121b      	asrs	r3, r3, #8
 800889e:	b21b      	sxth	r3, r3
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 80088a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1 + 12].rpm_pid.output;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f603 0354 	addw	r3, r3, #2132	; 0x854
 80088b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80088b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088b8:	ee17 3a90 	vmov	r3, s15
 80088bc:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 80088be:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80088c2:	121b      	asrs	r3, r3, #8
 80088c4:	b21b      	sxth	r3, r3
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 80088ca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2 + 12].rpm_pid.output;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f603 03f8 	addw	r3, r3, #2296	; 0x8f8
 80088d6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80088da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088de:	ee17 3a90 	vmov	r3, s15
 80088e2:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 80088e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80088e8:	121b      	asrs	r3, r3, #8
 80088ea:	b21b      	sxth	r3, r3
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 80088f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3 + 12].rpm_pid.output;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 80088fc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008904:	ee17 3a90 	vmov	r3, s15
 8008908:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800890a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800890e:	121b      	asrs	r3, r3, #8
 8008910:	b21b      	sxth	r3, r3
 8008912:	b2db      	uxtb	r3, r3
 8008914:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8008916:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008918:	b2db      	uxtb	r3, r3
 800891a:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800891c:	f107 030c 	add.w	r3, r7, #12
 8008920:	f107 0210 	add.w	r2, r7, #16
 8008924:	f107 0118 	add.w	r1, r7, #24
 8008928:	4831      	ldr	r0, [pc, #196]	; (80089f0 <motor_send_can+0x44c>)
 800892a:	f001 fb59 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0F0000) {
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d05d      	beq.n	80089f4 <motor_send_can+0x450>
		CAN_tx_message.StdId = 0x1FF;
 8008938:	f240 13ff 	movw	r3, #511	; 0x1ff
 800893c:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4 + 12].rpm_pid.output;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8008944:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800894c:	ee17 3a90 	vmov	r3, s15
 8008950:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8008952:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008956:	121b      	asrs	r3, r3, #8
 8008958:	b21b      	sxth	r3, r3
 800895a:	b2db      	uxtb	r3, r3
 800895c:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800895e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008960:	b2db      	uxtb	r3, r3
 8008962:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5 + 12].rpm_pid.output;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f603 23e4 	addw	r3, r3, #2788	; 0xae4
 800896a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800896e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008972:	ee17 3a90 	vmov	r3, s15
 8008976:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8008978:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800897c:	121b      	asrs	r3, r3, #8
 800897e:	b21b      	sxth	r3, r3
 8008980:	b2db      	uxtb	r3, r3
 8008982:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8008984:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008986:	b2db      	uxtb	r3, r3
 8008988:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6 + 12].rpm_pid.output;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8008990:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008998:	ee17 3a90 	vmov	r3, s15
 800899c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800899e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80089a2:	121b      	asrs	r3, r3, #8
 80089a4:	b21b      	sxth	r3, r3
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 80089aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7 + 12].rpm_pid.output;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 80089b6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80089ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089be:	ee17 3a90 	vmov	r3, s15
 80089c2:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 80089c4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80089c8:	121b      	asrs	r3, r3, #8
 80089ca:	b21b      	sxth	r3, r3
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 80089d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 80089d6:	f107 030c 	add.w	r3, r7, #12
 80089da:	f107 0210 	add.w	r2, r7, #16
 80089de:	f107 0118 	add.w	r1, r7, #24
 80089e2:	4803      	ldr	r0, [pc, #12]	; (80089f0 <motor_send_can+0x44c>)
 80089e4:	f001 fafc 	bl	8009fe0 <HAL_CAN_AddTxMessage>
 80089e8:	e004      	b.n	80089f4 <motor_send_can+0x450>
 80089ea:	bf00      	nop
 80089ec:	200003f0 	.word	0x200003f0
 80089f0:	20000418 	.word	0x20000418
	}
	if (temp_checker & 0xF00000) {
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d057      	beq.n	8008aae <motor_send_can+0x50a>
		CAN_tx_message.StdId = 0x2FF;
 80089fe:	f240 23ff 	movw	r3, #767	; 0x2ff
 8008a02:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8 + 12].rpm_pid.output;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 8008a0a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a12:	ee17 3a90 	vmov	r3, s15
 8008a16:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8008a18:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008a1c:	121b      	asrs	r3, r3, #8
 8008a1e:	b21b      	sxth	r3, r3
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8008a24:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9 + 12].rpm_pid.output;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f603 5374 	addw	r3, r3, #3444	; 0xd74
 8008a30:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a38:	ee17 3a90 	vmov	r3, s15
 8008a3c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8008a3e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008a42:	121b      	asrs	r3, r3, #8
 8008a44:	b21b      	sxth	r3, r3
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8008a4a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA + 12].rpm_pid.output;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f603 6318 	addw	r3, r3, #3608	; 0xe18
 8008a56:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a5e:	ee17 3a90 	vmov	r3, s15
 8008a62:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8008a64:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008a68:	121b      	asrs	r3, r3, #8
 8008a6a:	b21b      	sxth	r3, r3
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8008a70:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB + 12].rpm_pid.output;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f603 63bc 	addw	r3, r3, #3772	; 0xebc
 8008a7c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a84:	ee17 3a90 	vmov	r3, s15
 8008a88:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8008a8a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008a8e:	121b      	asrs	r3, r3, #8
 8008a90:	b21b      	sxth	r3, r3
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8008a96:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008a9c:	f107 030c 	add.w	r3, r7, #12
 8008aa0:	f107 0210 	add.w	r2, r7, #16
 8008aa4:	f107 0118 	add.w	r1, r7, #24
 8008aa8:	4803      	ldr	r0, [pc, #12]	; (8008ab8 <motor_send_can+0x514>)
 8008aaa:	f001 fa99 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	}
#endif
}
 8008aae:	bf00      	nop
 8008ab0:	3738      	adds	r7, #56	; 0x38
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000418 	.word	0x20000418

08008abc <kill_can>:

void kill_can() {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08a      	sub	sp, #40	; 0x28
 8008ac0:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8] = { 0, };
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60bb      	str	r3, [r7, #8]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
	uint32_t send_mail_box;
	CAN_tx_message.IDE = CAN_ID_STD;
 8008aca:	2300      	movs	r3, #0
 8008acc:	61bb      	str	r3, [r7, #24]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61fb      	str	r3, [r7, #28]
	CAN_tx_message.DLC = 0x08;
 8008ad2:	2308      	movs	r3, #8
 8008ad4:	623b      	str	r3, [r7, #32]
//
	CAN_tx_message.StdId = 0x200;
 8008ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ada:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008adc:	1d3b      	adds	r3, r7, #4
 8008ade:	f107 0208 	add.w	r2, r7, #8
 8008ae2:	f107 0110 	add.w	r1, r7, #16
 8008ae6:	481f      	ldr	r0, [pc, #124]	; (8008b64 <kill_can+0xa8>)
 8008ae8:	f001 fa7a 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x1FF;
 8008aec:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008af0:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008af2:	1d3b      	adds	r3, r7, #4
 8008af4:	f107 0208 	add.w	r2, r7, #8
 8008af8:	f107 0110 	add.w	r1, r7, #16
 8008afc:	4819      	ldr	r0, [pc, #100]	; (8008b64 <kill_can+0xa8>)
 8008afe:	f001 fa6f 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x2FF;
 8008b02:	f240 23ff 	movw	r3, #767	; 0x2ff
 8008b06:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008b08:	1d3b      	adds	r3, r7, #4
 8008b0a:	f107 0208 	add.w	r2, r7, #8
 8008b0e:	f107 0110 	add.w	r1, r7, #16
 8008b12:	4814      	ldr	r0, [pc, #80]	; (8008b64 <kill_can+0xa8>)
 8008b14:	f001 fa64 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x200;
 8008b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b1c:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008b1e:	1d3b      	adds	r3, r7, #4
 8008b20:	f107 0208 	add.w	r2, r7, #8
 8008b24:	f107 0110 	add.w	r1, r7, #16
 8008b28:	480f      	ldr	r0, [pc, #60]	; (8008b68 <kill_can+0xac>)
 8008b2a:	f001 fa59 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x1FF;
 8008b2e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008b32:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008b34:	1d3b      	adds	r3, r7, #4
 8008b36:	f107 0208 	add.w	r2, r7, #8
 8008b3a:	f107 0110 	add.w	r1, r7, #16
 8008b3e:	480a      	ldr	r0, [pc, #40]	; (8008b68 <kill_can+0xac>)
 8008b40:	f001 fa4e 	bl	8009fe0 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x2FF;
 8008b44:	f240 23ff 	movw	r3, #767	; 0x2ff
 8008b48:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008b4a:	1d3b      	adds	r3, r7, #4
 8008b4c:	f107 0208 	add.w	r2, r7, #8
 8008b50:	f107 0110 	add.w	r1, r7, #16
 8008b54:	4804      	ldr	r0, [pc, #16]	; (8008b68 <kill_can+0xac>)
 8008b56:	f001 fa43 	bl	8009fe0 <HAL_CAN_AddTxMessage>
//
//#endif
}
 8008b5a:	bf00      	nop
 8008b5c:	3728      	adds	r7, #40	; 0x28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	200003f0 	.word	0x200003f0
 8008b68:	20000418 	.word	0x20000418

08008b6c <float_max>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_max(float *motor_in, float motor_max) {
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	ed87 0a00 	vstr	s0, [r7]
	if (*motor_in > motor_max) {
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	edd3 7a00 	vldr	s15, [r3]
 8008b7e:	ed97 7a00 	vldr	s14, [r7]
 8008b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b8a:	d503      	bpl.n	8008b94 <float_max+0x28>
		*motor_in = motor_max;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	601a      	str	r2, [r3, #0]
	} else if (*motor_in < -motor_max) {
		*motor_in = -motor_max;
	}
}
 8008b92:	e013      	b.n	8008bbc <float_max+0x50>
	} else if (*motor_in < -motor_max) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	ed93 7a00 	vldr	s14, [r3]
 8008b9a:	edd7 7a00 	vldr	s15, [r7]
 8008b9e:	eef1 7a67 	vneg.f32	s15, s15
 8008ba2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008baa:	d400      	bmi.n	8008bae <float_max+0x42>
}
 8008bac:	e006      	b.n	8008bbc <float_max+0x50>
		*motor_in = -motor_max;
 8008bae:	edd7 7a00 	vldr	s15, [r7]
 8008bb2:	eef1 7a67 	vneg.f32	s15, s15
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	edc3 7a00 	vstr	s15, [r3]
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <movement_control_task>:

float motor_yaw_mult[4];

extern QueueHandle_t telem_motor_queue;

void movement_control_task(void *argument) {
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af02      	add	r7, sp, #8
 8008bce:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	//initialise in an array so it's possible to for-loop it later
	motor_yaw_mult[0] = FR_YAW_MULT;
 8008bd0:	4b3a      	ldr	r3, [pc, #232]	; (8008cbc <movement_control_task+0xf4>)
 8008bd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008bd6:	601a      	str	r2, [r3, #0]
	motor_yaw_mult[1] = FL_YAW_MULT;
 8008bd8:	4b38      	ldr	r3, [pc, #224]	; (8008cbc <movement_control_task+0xf4>)
 8008bda:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008bde:	605a      	str	r2, [r3, #4]
	motor_yaw_mult[2] = BL_YAW_MULT;
 8008be0:	4b36      	ldr	r3, [pc, #216]	; (8008cbc <movement_control_task+0xf4>)
 8008be2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008be6:	609a      	str	r2, [r3, #8]
	motor_yaw_mult[3] = BR_YAW_MULT;
 8008be8:	4b34      	ldr	r3, [pc, #208]	; (8008cbc <movement_control_task+0xf4>)
 8008bea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008bee:	60da      	str	r2, [r3, #12]

#ifndef CHASSIS_MCU

		EventBits_t motor_bits;
		//wait for all motors to have updated data before PID is allowed to run
		motor_bits = xEventGroupWaitBits(chassis_event_group, 0b1111, pdTRUE,
 8008bf0:	4b33      	ldr	r3, [pc, #204]	; (8008cc0 <movement_control_task+0xf8>)
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	210f      	movs	r1, #15
 8008c00:	f00c fbf8 	bl	80153f4 <xEventGroupWaitBits>
 8008c04:	60f8      	str	r0, [r7, #12]
		pdTRUE,
		portMAX_DELAY);
		if (motor_bits == 0b1111) {
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b0f      	cmp	r3, #15
 8008c0a:	d136      	bne.n	8008c7a <movement_control_task+0xb2>
			status_led(3, on_led);
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	2003      	movs	r0, #3
 8008c10:	f7f9 f990 	bl	8001f34 <status_led>
			start_time = xTaskGetTickCount();
 8008c14:	f00d ff24 	bl	8016a60 <xTaskGetTickCount>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	60bb      	str	r3, [r7, #8]
			if (chassis_ctrl_data.enabled) {
 8008c1c:	4b29      	ldr	r3, [pc, #164]	; (8008cc4 <movement_control_task+0xfc>)
 8008c1e:	7d1b      	ldrb	r3, [r3, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d006      	beq.n	8008c32 <movement_control_task+0x6a>
				chassis_motion_control(can_motors + FR_MOTOR_ID - 1,
 8008c24:	4828      	ldr	r0, [pc, #160]	; (8008cc8 <movement_control_task+0x100>)
 8008c26:	4a29      	ldr	r2, [pc, #164]	; (8008ccc <movement_control_task+0x104>)
 8008c28:	4b29      	ldr	r3, [pc, #164]	; (8008cd0 <movement_control_task+0x108>)
 8008c2a:	492a      	ldr	r1, [pc, #168]	; (8008cd4 <movement_control_task+0x10c>)
 8008c2c:	f000 f856 	bl	8008cdc <chassis_motion_control>
 8008c30:	e01e      	b.n	8008c70 <movement_control_task+0xa8>
						can_motors + FL_MOTOR_ID - 1,
						can_motors + BL_MOTOR_ID - 1,
						can_motors + BR_MOTOR_ID - 1);
			} else {
				can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;
 8008c32:	4b28      	ldr	r3, [pc, #160]	; (8008cd4 <movement_control_task+0x10c>)
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
				can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;
 8008c3c:	4b25      	ldr	r3, [pc, #148]	; (8008cd4 <movement_control_task+0x10c>)
 8008c3e:	f04f 0200 	mov.w	r2, #0
 8008c42:	631a      	str	r2, [r3, #48]	; 0x30
				can_motors[BL_MOTOR_ID - 1].rpm_pid.output = 0;
 8008c44:	4b23      	ldr	r3, [pc, #140]	; (8008cd4 <movement_control_task+0x10c>)
 8008c46:	f04f 0200 	mov.w	r2, #0
 8008c4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
				can_motors[BR_MOTOR_ID - 1].rpm_pid.output = 0;
 8008c4e:	4b21      	ldr	r3, [pc, #132]	; (8008cd4 <movement_control_task+0x10c>)
 8008c50:	f04f 0200 	mov.w	r2, #0
 8008c54:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				g_chassis_yaw = 0;
 8008c58:	4b1f      	ldr	r3, [pc, #124]	; (8008cd8 <movement_control_task+0x110>)
 8008c5a:	f04f 0200 	mov.w	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]

				//change CAN messages to a seperate task? so it doesn't fill up CAN transmitter
				motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID,
 8008c60:	2302      	movs	r3, #2
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	2304      	movs	r3, #4
 8008c66:	2201      	movs	r2, #1
 8008c68:	2103      	movs	r1, #3
 8008c6a:	481a      	ldr	r0, [pc, #104]	; (8008cd4 <movement_control_task+0x10c>)
 8008c6c:	f7ff fc9a 	bl	80085a4 <motor_send_can>
				BR_MOTOR_ID);
			}
#else
		chassis_MCU_send_CAN();
#endif
			status_led(3, off_led);
 8008c70:	2101      	movs	r1, #1
 8008c72:	2003      	movs	r0, #3
 8008c74:	f7f9 f95e 	bl	8001f34 <status_led>
 8008c78:	e012      	b.n	8008ca0 <movement_control_task+0xd8>
		} else {
			//motor timed out
			can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;
 8008c7a:	4b16      	ldr	r3, [pc, #88]	; (8008cd4 <movement_control_task+0x10c>)
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
			can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;
 8008c84:	4b13      	ldr	r3, [pc, #76]	; (8008cd4 <movement_control_task+0x10c>)
 8008c86:	f04f 0200 	mov.w	r2, #0
 8008c8a:	631a      	str	r2, [r3, #48]	; 0x30
			can_motors[BL_MOTOR_ID - 1].rpm_pid.output = 0;
 8008c8c:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <movement_control_task+0x10c>)
 8008c8e:	f04f 0200 	mov.w	r2, #0
 8008c92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			can_motors[BR_MOTOR_ID - 1].rpm_pid.output = 0;
 8008c96:	4b0f      	ldr	r3, [pc, #60]	; (8008cd4 <movement_control_task+0x10c>)
 8008c98:	f04f 0200 	mov.w	r2, #0
 8008c9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
//			motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, BL_MOTOR_ID,BR_MOTOR_ID);
		}
		//clear bits if it's not already cleared
		xEventGroupClearBits(chassis_event_group, 0b1111);
 8008ca0:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <movement_control_task+0xf8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	210f      	movs	r1, #15
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f00c fc72 	bl	8015590 <xEventGroupClearBits>
		//delays task for other tasks to run
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 8008cac:	f107 0308 	add.w	r3, r7, #8
 8008cb0:	210a      	movs	r1, #10
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f00d fd06 	bl	80166c4 <vTaskDelayUntil>
	while (1) {
 8008cb8:	e79a      	b.n	8008bf0 <movement_control_task+0x28>
 8008cba:	bf00      	nop
 8008cbc:	20002870 	.word	0x20002870
 8008cc0:	20000468 	.word	0x20000468
 8008cc4:	20002780 	.word	0x20002780
 8008cc8:	20001968 	.word	0x20001968
 8008ccc:	20001a0c 	.word	0x20001a0c
 8008cd0:	200018c4 	.word	0x200018c4
 8008cd4:	20001820 	.word	0x20001820
 8008cd8:	2000286c 	.word	0x2000286c

08008cdc <chassis_motion_control>:
	}
	osThreadTerminate(NULL);
}

void chassis_motion_control(motor_data_t *motorfr, motor_data_t *motorfl,
		motor_data_t *motorbl, motor_data_t *motorbr) {
 8008cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce0:	b0a2      	sub	sp, #136	; 0x88
 8008ce2:	af02      	add	r7, sp, #8
 8008ce4:	6278      	str	r0, [r7, #36]	; 0x24
 8008ce6:	6239      	str	r1, [r7, #32]
 8008ce8:	61fa      	str	r2, [r7, #28]
 8008cea:	61bb      	str	r3, [r7, #24]
	static uint32_t prev_time;
	//get the angle between the gun and the chassis
	//so that movement is relative to gun, not chassis
	double rel_angle = can_motors[YAW_MOTOR_ID - 1].angle_data.adj_ang;
 8008cec:	4bb1      	ldr	r3, [pc, #708]	; (8008fb4 <chassis_motion_control+0x2d8>)
 8008cee:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7f7 fc27 	bl	8000548 <__aeabi_f2d>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	float translation_rpm[4] = { 0, };
 8008d02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	605a      	str	r2, [r3, #4]
 8008d0c:	609a      	str	r2, [r3, #8]
 8008d0e:	60da      	str	r2, [r3, #12]
	float yaw_rpm[4] = { 0, };
 8008d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	609a      	str	r2, [r3, #8]
 8008d1c:	60da      	str	r2, [r3, #12]
	float total_power = 0;
 8008d1e:	f04f 0300 	mov.w	r3, #0
 8008d22:	667b      	str	r3, [r7, #100]	; 0x64

	int32_t chassis_rpm = LV1_MAX_SPEED;
 8008d24:	f241 1394 	movw	r3, #4500	; 0x1194
 8008d28:	67fb      	str	r3, [r7, #124]	; 0x7c
	int32_t chassis_current = LV1_MAX_CURRENT;
 8008d2a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008d2e:	67bb      	str	r3, [r7, #120]	; 0x78
	if (referee_limiters.robot_level == 1) {
 8008d30:	4ba1      	ldr	r3, [pc, #644]	; (8008fb8 <chassis_motion_control+0x2dc>)
 8008d32:	7b1b      	ldrb	r3, [r3, #12]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d106      	bne.n	8008d46 <chassis_motion_control+0x6a>
		chassis_rpm = LV1_MAX_SPEED;
 8008d38:	f241 1394 	movw	r3, #4500	; 0x1194
 8008d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
		chassis_current = LV1_MAX_CURRENT;
 8008d3e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008d42:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d44:	e014      	b.n	8008d70 <chassis_motion_control+0x94>
	} else if (referee_limiters.robot_level == 2) {
 8008d46:	4b9c      	ldr	r3, [pc, #624]	; (8008fb8 <chassis_motion_control+0x2dc>)
 8008d48:	7b1b      	ldrb	r3, [r3, #12]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d106      	bne.n	8008d5c <chassis_motion_control+0x80>
		chassis_rpm = LV2_MAX_SPEED;
 8008d4e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008d52:	67fb      	str	r3, [r7, #124]	; 0x7c
		chassis_current = LV2_MAX_CURRENT;
 8008d54:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d5a:	e009      	b.n	8008d70 <chassis_motion_control+0x94>
	} else if (referee_limiters.robot_level == 3) {
 8008d5c:	4b96      	ldr	r3, [pc, #600]	; (8008fb8 <chassis_motion_control+0x2dc>)
 8008d5e:	7b1b      	ldrb	r3, [r3, #12]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d105      	bne.n	8008d70 <chassis_motion_control+0x94>
		chassis_rpm = LV3_MAX_SPEED;
 8008d64:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8008d68:	67fb      	str	r3, [r7, #124]	; 0x7c
		chassis_current = LV3_MAX_CURRENT;
 8008d6a:	f241 537c 	movw	r3, #5500	; 0x157c
 8008d6e:	67bb      	str	r3, [r7, #120]	; 0x78
	}
	chassis_rpm = (chassis_rpm > M3508_MAX_RPM) ? M3508_MAX_RPM : chassis_rpm;
 8008d70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d72:	f242 3228 	movw	r2, #9000	; 0x2328
 8008d76:	4293      	cmp	r3, r2
 8008d78:	bfa8      	it	ge
 8008d7a:	4613      	movge	r3, r2
 8008d7c:	67fb      	str	r3, [r7, #124]	; 0x7c
	//rotate angle of the movement :)
	//MA1513/MA1508E is useful!!

	float rel_forward = ((-chassis_ctrl_data.horizontal * sin(-rel_angle))
 8008d7e:	4b8f      	ldr	r3, [pc, #572]	; (8008fbc <chassis_motion_control+0x2e0>)
 8008d80:	edd3 7a01 	vldr	s15, [r3, #4]
 8008d84:	eef1 7a67 	vneg.f32	s15, s15
 8008d88:	ee17 3a90 	vmov	r3, s15
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7f7 fbdb 	bl	8000548 <__aeabi_f2d>
 8008d92:	4680      	mov	r8, r0
 8008d94:	4689      	mov	r9, r1
 8008d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d98:	613b      	str	r3, [r7, #16]
 8008d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008da0:	617b      	str	r3, [r7, #20]
 8008da2:	ed97 0b04 	vldr	d0, [r7, #16]
 8008da6:	f014 fe1b 	bl	801d9e0 <sin>
 8008daa:	ec53 2b10 	vmov	r2, r3, d0
 8008dae:	4640      	mov	r0, r8
 8008db0:	4649      	mov	r1, r9
 8008db2:	f7f7 fc21 	bl	80005f8 <__aeabi_dmul>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4692      	mov	sl, r2
 8008dbc:	469b      	mov	fp, r3
			+ (chassis_ctrl_data.forward * cos(-rel_angle)));
 8008dbe:	4b7f      	ldr	r3, [pc, #508]	; (8008fbc <chassis_motion_control+0x2e0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f7 fbc0 	bl	8000548 <__aeabi_f2d>
 8008dc8:	4680      	mov	r8, r0
 8008dca:	4689      	mov	r9, r1
 8008dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dce:	60bb      	str	r3, [r7, #8]
 8008dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dd2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008dd6:	60fb      	str	r3, [r7, #12]
 8008dd8:	ed97 0b02 	vldr	d0, [r7, #8]
 8008ddc:	f014 fda0 	bl	801d920 <cos>
 8008de0:	ec53 2b10 	vmov	r2, r3, d0
 8008de4:	4640      	mov	r0, r8
 8008de6:	4649      	mov	r1, r9
 8008de8:	f7f7 fc06 	bl	80005f8 <__aeabi_dmul>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4650      	mov	r0, sl
 8008df2:	4659      	mov	r1, fp
 8008df4:	f7f7 fa4a 	bl	800028c <__adddf3>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
	float rel_forward = ((-chassis_ctrl_data.horizontal * sin(-rel_angle))
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	4619      	mov	r1, r3
 8008e00:	f7f7 fef2 	bl	8000be8 <__aeabi_d2f>
 8008e04:	4603      	mov	r3, r0
 8008e06:	663b      	str	r3, [r7, #96]	; 0x60
	float rel_horizontal = ((-chassis_ctrl_data.horizontal * cos(-rel_angle))
 8008e08:	4b6c      	ldr	r3, [pc, #432]	; (8008fbc <chassis_motion_control+0x2e0>)
 8008e0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8008e0e:	eef1 7a67 	vneg.f32	s15, s15
 8008e12:	ee17 3a90 	vmov	r3, s15
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7f7 fb96 	bl	8000548 <__aeabi_f2d>
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	4689      	mov	r9, r1
 8008e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008e2a:	607b      	str	r3, [r7, #4]
 8008e2c:	ed97 0b00 	vldr	d0, [r7]
 8008e30:	f014 fd76 	bl	801d920 <cos>
 8008e34:	ec53 2b10 	vmov	r2, r3, d0
 8008e38:	4640      	mov	r0, r8
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	f7f7 fbdc 	bl	80005f8 <__aeabi_dmul>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4692      	mov	sl, r2
 8008e46:	469b      	mov	fp, r3
			+ (chassis_ctrl_data.forward * -sin(-rel_angle)));
 8008e48:	4b5c      	ldr	r3, [pc, #368]	; (8008fbc <chassis_motion_control+0x2e0>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7f7 fb7b 	bl	8000548 <__aeabi_f2d>
 8008e52:	4680      	mov	r8, r0
 8008e54:	4689      	mov	r9, r1
 8008e56:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8008e5a:	f014 fdc1 	bl	801d9e0 <sin>
 8008e5e:	ec53 2b10 	vmov	r2, r3, d0
 8008e62:	4640      	mov	r0, r8
 8008e64:	4649      	mov	r1, r9
 8008e66:	f7f7 fbc7 	bl	80005f8 <__aeabi_dmul>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4650      	mov	r0, sl
 8008e70:	4659      	mov	r1, fp
 8008e72:	f7f7 fa0b 	bl	800028c <__adddf3>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
	float rel_horizontal = ((-chassis_ctrl_data.horizontal * cos(-rel_angle))
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f7f7 feb3 	bl	8000be8 <__aeabi_d2f>
 8008e82:	4603      	mov	r3, r0
 8008e84:	65fb      	str	r3, [r7, #92]	; 0x5c
	float rel_yaw = chassis_ctrl_data.yaw;
 8008e86:	4b4d      	ldr	r3, [pc, #308]	; (8008fbc <chassis_motion_control+0x2e0>)
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	65bb      	str	r3, [r7, #88]	; 0x58

	translation_rpm[0] = ((rel_forward * FR_VY_MULT)
 8008e8c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008e8e:	f7f7 fb5b 	bl	8000548 <__aeabi_f2d>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4614      	mov	r4, r2
 8008e98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
			+ (rel_horizontal * FR_VX_MULT));
 8008e9c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008e9e:	f7f7 fb53 	bl	8000548 <__aeabi_f2d>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 f9ed 	bl	8000288 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f7f7 fe97 	bl	8000be8 <__aeabi_d2f>
 8008eba:	4603      	mov	r3, r0
	translation_rpm[0] = ((rel_forward * FR_VY_MULT)
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
	yaw_rpm[0] = rel_yaw * motor_yaw_mult[0] * CHASSIS_YAW_MAX_RPM;
 8008ebe:	4b40      	ldr	r3, [pc, #256]	; (8008fc0 <chassis_motion_control+0x2e4>)
 8008ec0:	ed93 7a00 	vldr	s14, [r3]
 8008ec4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ecc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	translation_rpm[1] = ((rel_forward * FL_VY_MULT)
			+ (rel_horizontal * FL_VX_MULT));
 8008ed0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008ed4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
	translation_rpm[1] = ((rel_forward * FL_VY_MULT)
 8008edc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	yaw_rpm[1] = rel_yaw * motor_yaw_mult[1] * CHASSIS_YAW_MAX_RPM;
 8008ee0:	4b37      	ldr	r3, [pc, #220]	; (8008fc0 <chassis_motion_control+0x2e4>)
 8008ee2:	ed93 7a01 	vldr	s14, [r3, #4]
 8008ee6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	translation_rpm[2] = ((rel_forward * BL_VY_MULT)
			+ (rel_horizontal * BL_VX_MULT));
 8008ef2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008ef6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008efa:	ee77 7a27 	vadd.f32	s15, s14, s15
	translation_rpm[2] = ((rel_forward * BL_VY_MULT)
 8008efe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	yaw_rpm[2] = rel_yaw * motor_yaw_mult[2] * CHASSIS_YAW_MAX_RPM;
 8008f02:	4b2f      	ldr	r3, [pc, #188]	; (8008fc0 <chassis_motion_control+0x2e4>)
 8008f04:	ed93 7a02 	vldr	s14, [r3, #8]
 8008f08:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	translation_rpm[3] = ((rel_forward * BR_VY_MULT)
			+ (rel_horizontal * BR_VX_MULT));
 8008f14:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008f18:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
	translation_rpm[3] = ((rel_forward * BR_VY_MULT)
 8008f20:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	yaw_rpm[3] = rel_yaw * motor_yaw_mult[3] * CHASSIS_YAW_MAX_RPM;
 8008f24:	4b26      	ldr	r3, [pc, #152]	; (8008fc0 <chassis_motion_control+0x2e4>)
 8008f26:	ed93 7a03 	vldr	s14, [r3, #12]
 8008f2a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f32:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	//if forward + horizontal + yaw > 1 for any wheel
	//scale all the RPM for all the wheels equally so that one wheel does not exceed max RPM
	float rpm_mult = 1;
 8008f36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008f3a:	677b      	str	r3, [r7, #116]	; 0x74
	float yaw_scale = 1;
 8008f3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008f40:	657b      	str	r3, [r7, #84]	; 0x54
	float trans_scale = 1;
 8008f42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008f46:	653b      	str	r3, [r7, #80]	; 0x50
	for (uint8_t i = 0; i < 4; i++) {
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8008f4e:	e029      	b.n	8008fa4 <chassis_motion_control+0x2c8>
		float abs_total = fabs(translation_rpm[i] + yaw_rpm[i]);
 8008f50:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	3368      	adds	r3, #104	; 0x68
 8008f58:	f107 0218 	add.w	r2, r7, #24
 8008f5c:	4413      	add	r3, r2
 8008f5e:	3b44      	subs	r3, #68	; 0x44
 8008f60:	ed93 7a00 	vldr	s14, [r3]
 8008f64:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	3368      	adds	r3, #104	; 0x68
 8008f6c:	f107 0218 	add.w	r2, r7, #24
 8008f70:	4413      	add	r3, r2
 8008f72:	3b54      	subs	r3, #84	; 0x54
 8008f74:	edd3 7a00 	vldr	s15, [r3]
 8008f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f7c:	eef0 7ae7 	vabs.f32	s15, s15
 8008f80:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		if (abs_total > rpm_mult) {
 8008f84:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f88:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f94:	dd01      	ble.n	8008f9a <chassis_motion_control+0x2be>
			rpm_mult = abs_total;
 8008f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f98:	677b      	str	r3, [r7, #116]	; 0x74
	for (uint8_t i = 0; i < 4; i++) {
 8008f9a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8008fa4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d9d1      	bls.n	8008f50 <chassis_motion_control+0x274>
		}
	}

	for (uint8_t j = 0; j < 4; j++) {
 8008fac:	2300      	movs	r3, #0
 8008fae:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8008fb2:	e037      	b.n	8009024 <chassis_motion_control+0x348>
 8008fb4:	20001820 	.word	0x20001820
 8008fb8:	20002880 	.word	0x20002880
 8008fbc:	20002780 	.word	0x20002780
 8008fc0:	20002870 	.word	0x20002870
		translation_rpm[j] = (translation_rpm[j] + yaw_rpm[j]) * chassis_rpm
 8008fc4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	3368      	adds	r3, #104	; 0x68
 8008fcc:	f107 0218 	add.w	r2, r7, #24
 8008fd0:	4413      	add	r3, r2
 8008fd2:	3b44      	subs	r3, #68	; 0x44
 8008fd4:	ed93 7a00 	vldr	s14, [r3]
 8008fd8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	3368      	adds	r3, #104	; 0x68
 8008fe0:	f107 0218 	add.w	r2, r7, #24
 8008fe4:	4413      	add	r3, r2
 8008fe6:	3b54      	subs	r3, #84	; 0x54
 8008fe8:	edd3 7a00 	vldr	s15, [r3]
 8008fec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ffa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008ffe:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
				/ rpm_mult;
 8009002:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009006:	eec6 7a87 	vdiv.f32	s15, s13, s14
		translation_rpm[j] = (translation_rpm[j] + yaw_rpm[j]) * chassis_rpm
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	3368      	adds	r3, #104	; 0x68
 800900e:	f107 0218 	add.w	r2, r7, #24
 8009012:	4413      	add	r3, r2
 8009014:	3b44      	subs	r3, #68	; 0x44
 8009016:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t j = 0; j < 4; j++) {
 800901a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800901e:	3301      	adds	r3, #1
 8009020:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8009024:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8009028:	2b03      	cmp	r3, #3
 800902a:	d9cb      	bls.n	8008fc4 <chassis_motion_control+0x2e8>
	}

	motorfr->rpm_pid.max_out = chassis_current;
 800902c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motorfl->rpm_pid.max_out = chassis_current;
 800903c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motorbl->rpm_pid.max_out = chassis_current;
 800904c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motorbr->rpm_pid.max_out = chassis_current;
 800905c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	//calculate the outputs for each motor
	speed_pid(translation_rpm[0], motorfr->raw_data.rpm, &motorfr->rpm_pid);
 800906c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906e:	4618      	mov	r0, r3
 8009070:	f7f7 fa6a 	bl	8000548 <__aeabi_f2d>
 8009074:	4604      	mov	r4, r0
 8009076:	460d      	mov	r5, r1
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800907e:	4618      	mov	r0, r3
 8009080:	f7f7 fa50 	bl	8000524 <__aeabi_i2d>
 8009084:	4680      	mov	r8, r0
 8009086:	4689      	mov	r9, r1
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	3310      	adds	r3, #16
 800908c:	4618      	mov	r0, r3
 800908e:	ec49 8b11 	vmov	d1, r8, r9
 8009092:	ec45 4b10 	vmov	d0, r4, r5
 8009096:	f7ff f9df 	bl	8008458 <speed_pid>
	total_power += fabs(motorfr->rpm_pid.output);
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80090a0:	eef0 7ae7 	vabs.f32	s15, s15
 80090a4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80090a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090ac:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	speed_pid(translation_rpm[1], motorfl->raw_data.rpm, &motorfl->rpm_pid);
 80090b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f7 fa48 	bl	8000548 <__aeabi_f2d>
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7f7 fa2e 	bl	8000524 <__aeabi_i2d>
 80090c8:	4680      	mov	r8, r0
 80090ca:	4689      	mov	r9, r1
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	3310      	adds	r3, #16
 80090d0:	4618      	mov	r0, r3
 80090d2:	ec49 8b11 	vmov	d1, r8, r9
 80090d6:	ec45 4b10 	vmov	d0, r4, r5
 80090da:	f7ff f9bd 	bl	8008458 <speed_pid>
	total_power += fabs(motorfl->rpm_pid.output);
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80090e4:	eef0 7ae7 	vabs.f32	s15, s15
 80090e8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80090ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090f0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	speed_pid(translation_rpm[2], motorbl->raw_data.rpm, &motorbl->rpm_pid);
 80090f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f7 fa26 	bl	8000548 <__aeabi_f2d>
 80090fc:	4604      	mov	r4, r0
 80090fe:	460d      	mov	r5, r1
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009106:	4618      	mov	r0, r3
 8009108:	f7f7 fa0c 	bl	8000524 <__aeabi_i2d>
 800910c:	4680      	mov	r8, r0
 800910e:	4689      	mov	r9, r1
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	3310      	adds	r3, #16
 8009114:	4618      	mov	r0, r3
 8009116:	ec49 8b11 	vmov	d1, r8, r9
 800911a:	ec45 4b10 	vmov	d0, r4, r5
 800911e:	f7ff f99b 	bl	8008458 <speed_pid>
	total_power += fabs(motorbl->rpm_pid.output);
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009128:	eef0 7ae7 	vabs.f32	s15, s15
 800912c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8009130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009134:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	speed_pid(translation_rpm[3], motorbr->raw_data.rpm, &motorbr->rpm_pid);
 8009138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800913a:	4618      	mov	r0, r3
 800913c:	f7f7 fa04 	bl	8000548 <__aeabi_f2d>
 8009140:	4604      	mov	r4, r0
 8009142:	460d      	mov	r5, r1
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800914a:	4618      	mov	r0, r3
 800914c:	f7f7 f9ea 	bl	8000524 <__aeabi_i2d>
 8009150:	4680      	mov	r8, r0
 8009152:	4689      	mov	r9, r1
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	3310      	adds	r3, #16
 8009158:	4618      	mov	r0, r3
 800915a:	ec49 8b11 	vmov	d1, r8, r9
 800915e:	ec45 4b10 	vmov	d0, r4, r5
 8009162:	f7ff f979 	bl	8008458 <speed_pid>
	total_power += fabs(motorbr->rpm_pid.output);
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800916c:	eef0 7ae7 	vabs.f32	s15, s15
 8009170:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8009174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009178:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, BL_MOTOR_ID,
 800917c:	2302      	movs	r3, #2
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	2304      	movs	r3, #4
 8009182:	2201      	movs	r2, #1
 8009184:	2103      	movs	r1, #3
 8009186:	4804      	ldr	r0, [pc, #16]	; (8009198 <chassis_motion_control+0x4bc>)
 8009188:	f7ff fa0c 	bl	80085a4 <motor_send_can>
	BR_MOTOR_ID);
}
 800918c:	bf00      	nop
 800918e:	3780      	adds	r7, #128	; 0x80
 8009190:	46bd      	mov	sp, r7
 8009192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009196:	bf00      	nop
 8009198:	20001820 	.word	0x20001820

0800919c <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80091a6:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 80091a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80091ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b4:	db0a      	blt.n	80091cc <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80091b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80091ba:	f014 fc69 	bl	801da90 <sqrtf>
 80091be:	eef0 7a40 	vmov.f32	s15, s0
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80091c8:	2300      	movs	r3, #0
 80091ca:	e005      	b.n	80091d8 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f04f 0200 	mov.w	r2, #0
 80091d2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <referee_processing_task>:
ref_magazine_data_t ref_mag_data;
uint32_t ref_mag_data_txno = 0;
uint8_t g_ref_tx_seq = 0;


void referee_processing_task(void *argument) {
 80091e0:	b5b0      	push	{r4, r5, r7, lr}
 80091e2:	b0ca      	sub	sp, #296	; 0x128
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80091ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80091ee:	6018      	str	r0, [r3, #0]
	referee_limiters.robot_level = 0;
 80091f0:	4ba0      	ldr	r3, [pc, #640]	; (8009474 <referee_processing_task+0x294>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	731a      	strb	r2, [r3, #12]
	queue_t referee_uart_q;
	uint8_t ref_buffer[2];
	ref_processing_status_t proc_status;
	referee_limiters.feeding_speed = LV1_FEEDER;
 80091f6:	4b9f      	ldr	r3, [pc, #636]	; (8009474 <referee_processing_task+0x294>)
 80091f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80091fc:	801a      	strh	r2, [r3, #0]
	referee_limiters.projectile_speed = LV1_PROJECTILE;
 80091fe:	4b9d      	ldr	r3, [pc, #628]	; (8009474 <referee_processing_task+0x294>)
 8009200:	220d      	movs	r2, #13
 8009202:	805a      	strh	r2, [r3, #2]
	referee_limiters.wheel_power_limit = LV1_POWER * CHASSIS_POWER_MULT;
 8009204:	4b9b      	ldr	r3, [pc, #620]	; (8009474 <referee_processing_task+0x294>)
 8009206:	4a9c      	ldr	r2, [pc, #624]	; (8009478 <referee_processing_task+0x298>)
 8009208:	605a      	str	r2, [r3, #4]
	referee_limiters.robot_level = 1;
 800920a:	4b9a      	ldr	r3, [pc, #616]	; (8009474 <referee_processing_task+0x294>)
 800920c:	2201      	movs	r2, #1
 800920e:	731a      	strb	r2, [r3, #12]
	status_led(7, on_led);
 8009210:	2100      	movs	r1, #0
 8009212:	2007      	movs	r0, #7
 8009214:	f7f8 fe8e 	bl	8001f34 <status_led>
	status_led(8, off_led);
 8009218:	2101      	movs	r1, #1
 800921a:	2008      	movs	r0, #8
 800921c:	f7f8 fe8a 	bl	8001f34 <status_led>
	uint8_t graphic_sent = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	ref_robot_data.robot_id = 0;
 8009226:	4b95      	ldr	r3, [pc, #596]	; (800947c <referee_processing_task+0x29c>)
 8009228:	2200      	movs	r2, #0
 800922a:	701a      	strb	r2, [r3, #0]
	ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800922c:	f107 030c 	add.w	r3, r7, #12
 8009230:	f107 0108 	add.w	r1, r7, #8
 8009234:	2202      	movs	r2, #2
 8009236:	4892      	ldr	r0, [pc, #584]	; (8009480 <referee_processing_task+0x2a0>)
 8009238:	f7f9 fbf2 	bl	8002a20 <ref_usart_start>
	while (1) {
//			uint32_t ref_check = ulTaskNotifyTake(pdTRUE, 5);
		status_led(5, on_led);
 800923c:	2100      	movs	r1, #0
 800923e:	2005      	movs	r0, #5
 8009240:	f7f8 fe78 	bl	8001f34 <status_led>
		if (queue_get_size(&referee_uart_q) > 7) {
 8009244:	f107 030c 	add.w	r3, r7, #12
 8009248:	4618      	mov	r0, r3
 800924a:	f7f9 f8f0 	bl	800242e <queue_get_size>
 800924e:	4603      	mov	r3, r0
 8009250:	2b07      	cmp	r3, #7
 8009252:	f240 80c1 	bls.w	80093d8 <referee_processing_task+0x1f8>
			while (queue_get_size(&referee_uart_q) > 7) {
 8009256:	e0b4      	b.n	80093c2 <referee_processing_task+0x1e2>
				proc_status = ref_process_data(&referee_uart_q, &msg_buffer);
 8009258:	f107 030c 	add.w	r3, r7, #12
 800925c:	4989      	ldr	r1, [pc, #548]	; (8009484 <referee_processing_task+0x2a4>)
 800925e:	4618      	mov	r0, r3
 8009260:	f7f9 f8f2 	bl	8002448 <ref_process_data>
 8009264:	4603      	mov	r3, r0
 8009266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				if (proc_status == PROCESS_SUCCESS) {
 800926a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800926e:	2b00      	cmp	r3, #0
 8009270:	f040 80a3 	bne.w	80093ba <referee_processing_task+0x1da>
					switch (msg_buffer.cmd_id) {
 8009274:	4b83      	ldr	r3, [pc, #524]	; (8009484 <referee_processing_task+0x2a4>)
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800927c:	f300 809b 	bgt.w	80093b6 <referee_processing_task+0x1d6>
 8009280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009284:	dc04      	bgt.n	8009290 <referee_processing_task+0xb0>
 8009286:	2b01      	cmp	r3, #1
 8009288:	d029      	beq.n	80092de <referee_processing_task+0xfe>
 800928a:	2b03      	cmp	r3, #3
 800928c:	d073      	beq.n	8009376 <referee_processing_task+0x196>
								sizeof(ref_magazine_data_t));
						ref_mag_data_txno++;
						//add in the memcpys here
						break;
					default:
						break;
 800928e:	e092      	b.n	80093b6 <referee_processing_task+0x1d6>
					switch (msg_buffer.cmd_id) {
 8009290:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8009294:	2b07      	cmp	r3, #7
 8009296:	f200 808e 	bhi.w	80093b6 <referee_processing_task+0x1d6>
 800929a:	a201      	add	r2, pc, #4	; (adr r2, 80092a0 <referee_processing_task+0xc0>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	080092f9 	.word	0x080092f9
 80092a4:	08009345 	.word	0x08009345
 80092a8:	08009327 	.word	0x08009327
 80092ac:	080093b7 	.word	0x080093b7
 80092b0:	080093b7 	.word	0x080093b7
 80092b4:	08009363 	.word	0x08009363
 80092b8:	080092c1 	.word	0x080092c1
 80092bc:	0800939d 	.word	0x0800939d
						memcpy(&ref_shoot_data, &msg_buffer.data,
 80092c0:	4a71      	ldr	r2, [pc, #452]	; (8009488 <referee_processing_task+0x2a8>)
 80092c2:	4b70      	ldr	r3, [pc, #448]	; (8009484 <referee_processing_task+0x2a4>)
 80092c4:	3302      	adds	r3, #2
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	6010      	str	r0, [r2, #0]
 80092ca:	8899      	ldrh	r1, [r3, #4]
 80092cc:	799b      	ldrb	r3, [r3, #6]
 80092ce:	8091      	strh	r1, [r2, #4]
 80092d0:	7193      	strb	r3, [r2, #6]
						ref_shoot_data_txno++;
 80092d2:	4b6e      	ldr	r3, [pc, #440]	; (800948c <referee_processing_task+0x2ac>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	4a6c      	ldr	r2, [pc, #432]	; (800948c <referee_processing_task+0x2ac>)
 80092da:	6013      	str	r3, [r2, #0]
						break;
 80092dc:	e071      	b.n	80093c2 <referee_processing_task+0x1e2>
							memcpy(&ref_game_state, &msg_buffer.data,
 80092de:	4a6c      	ldr	r2, [pc, #432]	; (8009490 <referee_processing_task+0x2b0>)
 80092e0:	4b68      	ldr	r3, [pc, #416]	; (8009484 <referee_processing_task+0x2a4>)
 80092e2:	3302      	adds	r3, #2
 80092e4:	8819      	ldrh	r1, [r3, #0]
 80092e6:	789b      	ldrb	r3, [r3, #2]
 80092e8:	8011      	strh	r1, [r2, #0]
 80092ea:	7093      	strb	r3, [r2, #2]
							ref_game_state_txno++;
 80092ec:	4b69      	ldr	r3, [pc, #420]	; (8009494 <referee_processing_task+0x2b4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3301      	adds	r3, #1
 80092f2:	4a68      	ldr	r2, [pc, #416]	; (8009494 <referee_processing_task+0x2b4>)
 80092f4:	6013      	str	r3, [r2, #0]
							break;
 80092f6:	e064      	b.n	80093c2 <referee_processing_task+0x1e2>
						memcpy(&ref_robot_data, &msg_buffer.data,
 80092f8:	4a60      	ldr	r2, [pc, #384]	; (800947c <referee_processing_task+0x29c>)
 80092fa:	4b62      	ldr	r3, [pc, #392]	; (8009484 <referee_processing_task+0x2a4>)
 80092fc:	4614      	mov	r4, r2
 80092fe:	1c9d      	adds	r5, r3, #2
 8009300:	6828      	ldr	r0, [r5, #0]
 8009302:	6869      	ldr	r1, [r5, #4]
 8009304:	68aa      	ldr	r2, [r5, #8]
 8009306:	68eb      	ldr	r3, [r5, #12]
 8009308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800930a:	6928      	ldr	r0, [r5, #16]
 800930c:	6969      	ldr	r1, [r5, #20]
 800930e:	c403      	stmia	r4!, {r0, r1}
 8009310:	8b2b      	ldrh	r3, [r5, #24]
 8009312:	7eaa      	ldrb	r2, [r5, #26]
 8009314:	8023      	strh	r3, [r4, #0]
 8009316:	4613      	mov	r3, r2
 8009318:	70a3      	strb	r3, [r4, #2]
						ref_robot_data_txno++;
 800931a:	4b5f      	ldr	r3, [pc, #380]	; (8009498 <referee_processing_task+0x2b8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3301      	adds	r3, #1
 8009320:	4a5d      	ldr	r2, [pc, #372]	; (8009498 <referee_processing_task+0x2b8>)
 8009322:	6013      	str	r3, [r2, #0]
						break;
 8009324:	e04d      	b.n	80093c2 <referee_processing_task+0x1e2>
						memcpy(&ref_robot_pos, &msg_buffer.data,
 8009326:	4a5d      	ldr	r2, [pc, #372]	; (800949c <referee_processing_task+0x2bc>)
 8009328:	4b56      	ldr	r3, [pc, #344]	; (8009484 <referee_processing_task+0x2a4>)
 800932a:	4614      	mov	r4, r2
 800932c:	3302      	adds	r3, #2
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	6859      	ldr	r1, [r3, #4]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
						ref_robot_pos_txno++;
 8009338:	4b59      	ldr	r3, [pc, #356]	; (80094a0 <referee_processing_task+0x2c0>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3301      	adds	r3, #1
 800933e:	4a58      	ldr	r2, [pc, #352]	; (80094a0 <referee_processing_task+0x2c0>)
 8009340:	6013      	str	r3, [r2, #0]
						break;
 8009342:	e03e      	b.n	80093c2 <referee_processing_task+0x1e2>
						memcpy(&ref_power_data, &msg_buffer.data,
 8009344:	4b57      	ldr	r3, [pc, #348]	; (80094a4 <referee_processing_task+0x2c4>)
 8009346:	4a4f      	ldr	r2, [pc, #316]	; (8009484 <referee_processing_task+0x2a4>)
 8009348:	1c94      	adds	r4, r2, #2
 800934a:	6820      	ldr	r0, [r4, #0]
 800934c:	6861      	ldr	r1, [r4, #4]
 800934e:	68a2      	ldr	r2, [r4, #8]
 8009350:	c307      	stmia	r3!, {r0, r1, r2}
 8009352:	89a2      	ldrh	r2, [r4, #12]
 8009354:	801a      	strh	r2, [r3, #0]
						ref_power_data_txno++;
 8009356:	4b54      	ldr	r3, [pc, #336]	; (80094a8 <referee_processing_task+0x2c8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3301      	adds	r3, #1
 800935c:	4a52      	ldr	r2, [pc, #328]	; (80094a8 <referee_processing_task+0x2c8>)
 800935e:	6013      	str	r3, [r2, #0]
						break;
 8009360:	e02f      	b.n	80093c2 <referee_processing_task+0x1e2>
 8009362:	4b48      	ldr	r3, [pc, #288]	; (8009484 <referee_processing_task+0x2a4>)
 8009364:	789a      	ldrb	r2, [r3, #2]
						memcpy(&ref_dmg_data, &msg_buffer.data,
 8009366:	4b51      	ldr	r3, [pc, #324]	; (80094ac <referee_processing_task+0x2cc>)
 8009368:	701a      	strb	r2, [r3, #0]
						ref_dmg_data_txno++;
 800936a:	4b51      	ldr	r3, [pc, #324]	; (80094b0 <referee_processing_task+0x2d0>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3301      	adds	r3, #1
 8009370:	4a4f      	ldr	r2, [pc, #316]	; (80094b0 <referee_processing_task+0x2d0>)
 8009372:	6013      	str	r3, [r2, #0]
						break;
 8009374:	e025      	b.n	80093c2 <referee_processing_task+0x1e2>
						memcpy(&ref_robot_hp, &msg_buffer.data,
 8009376:	4a4f      	ldr	r2, [pc, #316]	; (80094b4 <referee_processing_task+0x2d4>)
 8009378:	4b42      	ldr	r3, [pc, #264]	; (8009484 <referee_processing_task+0x2a4>)
 800937a:	4614      	mov	r4, r2
 800937c:	1c9d      	adds	r5, r3, #2
 800937e:	6828      	ldr	r0, [r5, #0]
 8009380:	6869      	ldr	r1, [r5, #4]
 8009382:	68aa      	ldr	r2, [r5, #8]
 8009384:	68eb      	ldr	r3, [r5, #12]
 8009386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009388:	6928      	ldr	r0, [r5, #16]
 800938a:	6969      	ldr	r1, [r5, #20]
 800938c:	69aa      	ldr	r2, [r5, #24]
 800938e:	c407      	stmia	r4!, {r0, r1, r2}
						ref_robot_hp_txno++;
 8009390:	4b49      	ldr	r3, [pc, #292]	; (80094b8 <referee_processing_task+0x2d8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	4a48      	ldr	r2, [pc, #288]	; (80094b8 <referee_processing_task+0x2d8>)
 8009398:	6013      	str	r3, [r2, #0]
						break;
 800939a:	e012      	b.n	80093c2 <referee_processing_task+0x1e2>
						memcpy(&ref_mag_data, &msg_buffer.data,
 800939c:	4a47      	ldr	r2, [pc, #284]	; (80094bc <referee_processing_task+0x2dc>)
 800939e:	4b39      	ldr	r3, [pc, #228]	; (8009484 <referee_processing_task+0x2a4>)
 80093a0:	3302      	adds	r3, #2
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	6010      	str	r0, [r2, #0]
 80093a6:	889b      	ldrh	r3, [r3, #4]
 80093a8:	8093      	strh	r3, [r2, #4]
						ref_mag_data_txno++;
 80093aa:	4b45      	ldr	r3, [pc, #276]	; (80094c0 <referee_processing_task+0x2e0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3301      	adds	r3, #1
 80093b0:	4a43      	ldr	r2, [pc, #268]	; (80094c0 <referee_processing_task+0x2e0>)
 80093b2:	6013      	str	r3, [r2, #0]
						break;
 80093b4:	e005      	b.n	80093c2 <referee_processing_task+0x1e2>
						break;
 80093b6:	bf00      	nop
 80093b8:	e003      	b.n	80093c2 <referee_processing_task+0x1e2>
					}
//						if (msg_buffer.cmd_id == REF_ROBOT_SHOOT_DATA_CMD_ID){
//							xQueueSend(uart_data_queue, &msg_buffer, 0);
//						}
				} else if (proc_status == INSUFFICIENT_DATA) {
 80093ba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d009      	beq.n	80093d6 <referee_processing_task+0x1f6>
			while (queue_get_size(&referee_uart_q) > 7) {
 80093c2:	f107 030c 	add.w	r3, r7, #12
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f9 f831 	bl	800242e <queue_get_size>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b07      	cmp	r3, #7
 80093d0:	f63f af42 	bhi.w	8009258 <referee_processing_task+0x78>
 80093d4:	e000      	b.n	80093d8 <referee_processing_task+0x1f8>
					break;
 80093d6:	bf00      	nop
				}
			}
		}

		status_led(5, off_led);
 80093d8:	2101      	movs	r1, #1
 80093da:	2005      	movs	r0, #5
 80093dc:	f7f8 fdaa 	bl	8001f34 <status_led>
		static uint32_t last_sent;

		status_led(5, on_led);
 80093e0:	2100      	movs	r1, #0
 80093e2:	2005      	movs	r0, #5
 80093e4:	f7f8 fda6 	bl	8001f34 <status_led>
		if (ref_robot_data.robot_level == 1) {
 80093e8:	4b24      	ldr	r3, [pc, #144]	; (800947c <referee_processing_task+0x29c>)
 80093ea:	785b      	ldrb	r3, [r3, #1]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d112      	bne.n	8009416 <referee_processing_task+0x236>
			referee_limiters.feeding_speed = LV1_FEEDER;
 80093f0:	4b20      	ldr	r3, [pc, #128]	; (8009474 <referee_processing_task+0x294>)
 80093f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80093f6:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 80093f8:	4b1e      	ldr	r3, [pc, #120]	; (8009474 <referee_processing_task+0x294>)
 80093fa:	220d      	movs	r2, #13
 80093fc:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 1;
 80093fe:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <referee_processing_task+0x294>)
 8009400:	2201      	movs	r2, #1
 8009402:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 8009404:	2100      	movs	r1, #0
 8009406:	2007      	movs	r0, #7
 8009408:	f7f8 fd94 	bl	8001f34 <status_led>
			status_led(8, off_led);
 800940c:	2101      	movs	r1, #1
 800940e:	2008      	movs	r0, #8
 8009410:	f7f8 fd90 	bl	8001f34 <status_led>
 8009414:	e05d      	b.n	80094d2 <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 2) {
 8009416:	4b19      	ldr	r3, [pc, #100]	; (800947c <referee_processing_task+0x29c>)
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d112      	bne.n	8009444 <referee_processing_task+0x264>
			referee_limiters.feeding_speed = LV2_FEEDER;
 800941e:	4b15      	ldr	r3, [pc, #84]	; (8009474 <referee_processing_task+0x294>)
 8009420:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009424:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV2_PROJECTILE;
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <referee_processing_task+0x294>)
 8009428:	220d      	movs	r2, #13
 800942a:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 2;
 800942c:	4b11      	ldr	r3, [pc, #68]	; (8009474 <referee_processing_task+0x294>)
 800942e:	2202      	movs	r2, #2
 8009430:	731a      	strb	r2, [r3, #12]
			status_led(7, off_led);
 8009432:	2101      	movs	r1, #1
 8009434:	2007      	movs	r0, #7
 8009436:	f7f8 fd7d 	bl	8001f34 <status_led>
			status_led(8, on_led);
 800943a:	2100      	movs	r1, #0
 800943c:	2008      	movs	r0, #8
 800943e:	f7f8 fd79 	bl	8001f34 <status_led>
 8009442:	e046      	b.n	80094d2 <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 3) {
 8009444:	4b0d      	ldr	r3, [pc, #52]	; (800947c <referee_processing_task+0x29c>)
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	2b03      	cmp	r3, #3
 800944a:	d13b      	bne.n	80094c4 <referee_processing_task+0x2e4>
			referee_limiters.feeding_speed = LV3_FEEDER;
 800944c:	4b09      	ldr	r3, [pc, #36]	; (8009474 <referee_processing_task+0x294>)
 800944e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009452:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV3_PROJECTILE;
 8009454:	4b07      	ldr	r3, [pc, #28]	; (8009474 <referee_processing_task+0x294>)
 8009456:	220d      	movs	r2, #13
 8009458:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 3;
 800945a:	4b06      	ldr	r3, [pc, #24]	; (8009474 <referee_processing_task+0x294>)
 800945c:	2203      	movs	r2, #3
 800945e:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 8009460:	2100      	movs	r1, #0
 8009462:	2007      	movs	r0, #7
 8009464:	f7f8 fd66 	bl	8001f34 <status_led>
			status_led(8, on_led);
 8009468:	2100      	movs	r1, #0
 800946a:	2008      	movs	r0, #8
 800946c:	f7f8 fd62 	bl	8001f34 <status_led>
 8009470:	e02f      	b.n	80094d2 <referee_processing_task+0x2f2>
 8009472:	bf00      	nop
 8009474:	20002880 	.word	0x20002880
 8009478:	42700000 	.word	0x42700000
 800947c:	20002904 	.word	0x20002904
 8009480:	2000165c 	.word	0x2000165c
 8009484:	20002898 	.word	0x20002898
 8009488:	20002954 	.word	0x20002954
 800948c:	2000295c 	.word	0x2000295c
 8009490:	200028dc 	.word	0x200028dc
 8009494:	200028e0 	.word	0x200028e0
 8009498:	20002920 	.word	0x20002920
 800949c:	20002938 	.word	0x20002938
 80094a0:	20002948 	.word	0x20002948
 80094a4:	20002924 	.word	0x20002924
 80094a8:	20002934 	.word	0x20002934
 80094ac:	2000294c 	.word	0x2000294c
 80094b0:	20002950 	.word	0x20002950
 80094b4:	200028e4 	.word	0x200028e4
 80094b8:	20002900 	.word	0x20002900
 80094bc:	20002960 	.word	0x20002960
 80094c0:	20002968 	.word	0x20002968
		} else {
			referee_limiters.feeding_speed = LV1_FEEDER;
 80094c4:	4b44      	ldr	r3, [pc, #272]	; (80095d8 <referee_processing_task+0x3f8>)
 80094c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80094ca:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 80094cc:	4b42      	ldr	r3, [pc, #264]	; (80095d8 <referee_processing_task+0x3f8>)
 80094ce:	220d      	movs	r2, #13
 80094d0:	805a      	strh	r2, [r3, #2]
		}
		if (ref_robot_data.robot_level != 0) {
 80094d2:	4b42      	ldr	r3, [pc, #264]	; (80095dc <referee_processing_task+0x3fc>)
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d06e      	beq.n	80095b8 <referee_processing_task+0x3d8>
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 80094da:	4b41      	ldr	r3, [pc, #260]	; (80095e0 <referee_processing_task+0x400>)
 80094dc:	891b      	ldrh	r3, [r3, #8]
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
					/ 40) + 0.01);
 80094e6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80095e4 <referee_processing_task+0x404>
 80094ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80094ee:	ee16 0a90 	vmov	r0, s13
 80094f2:	f7f7 f829 	bl	8000548 <__aeabi_f2d>
 80094f6:	a336      	add	r3, pc, #216	; (adr r3, 80095d0 <referee_processing_task+0x3f0>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f7f6 fec6 	bl	800028c <__adddf3>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 8009504:	4610      	mov	r0, r2
 8009506:	4619      	mov	r1, r3
 8009508:	f7f7 fb6e 	bl	8000be8 <__aeabi_d2f>
 800950c:	4603      	mov	r3, r0
 800950e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			temp_buffer = (temp_buffer > 1) ? 1 : temp_buffer;
 8009512:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8009516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800951a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800951e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009522:	dd02      	ble.n	800952a <referee_processing_task+0x34a>
 8009524:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009528:	e001      	b.n	800952e <referee_processing_task+0x34e>
 800952a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800952e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			referee_limiters.wheel_buffer_limit = temp_buffer * temp_buffer;
 8009532:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8009536:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800953a:	4b27      	ldr	r3, [pc, #156]	; (80095d8 <referee_processing_task+0x3f8>)
 800953c:	edc3 7a02 	vstr	s15, [r3, #8]
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 8009540:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <referee_processing_task+0x400>)
 8009542:	ed93 7a01 	vldr	s14, [r3, #4]
 8009546:	4b25      	ldr	r3, [pc, #148]	; (80095dc <referee_processing_task+0x3fc>)
 8009548:	8b1b      	ldrh	r3, [r3, #24]
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009552:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009556:	ee16 0a90 	vmov	r0, s13
 800955a:	f7f6 fff5 	bl	8000548 <__aeabi_f2d>
					) * 0.5) + 0.5;
 800955e:	f04f 0200 	mov.w	r2, #0
 8009562:	4b21      	ldr	r3, [pc, #132]	; (80095e8 <referee_processing_task+0x408>)
 8009564:	f7f7 f848 	bl	80005f8 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4610      	mov	r0, r2
 800956e:	4619      	mov	r1, r3
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	4b1c      	ldr	r3, [pc, #112]	; (80095e8 <referee_processing_task+0x408>)
 8009576:	f7f6 fe89 	bl	800028c <__adddf3>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 800957e:	4610      	mov	r0, r2
 8009580:	4619      	mov	r1, r3
 8009582:	f7f7 fb31 	bl	8000be8 <__aeabi_d2f>
 8009586:	4603      	mov	r3, r0
 8009588:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			temp_power = (temp_power > 1) ? 1 : temp_power;
 800958c:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8009590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959c:	dd02      	ble.n	80095a4 <referee_processing_task+0x3c4>
 800959e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80095a2:	e001      	b.n	80095a8 <referee_processing_task+0x3c8>
 80095a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80095a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			arm_sqrt_f32(temp_power, &referee_limiters.wheel_power_limit);
 80095ac:	480f      	ldr	r0, [pc, #60]	; (80095ec <referee_processing_task+0x40c>)
 80095ae:	ed97 0a47 	vldr	s0, [r7, #284]	; 0x11c
 80095b2:	f7ff fdf3 	bl	800919c <arm_sqrt_f32>
 80095b6:	e007      	b.n	80095c8 <referee_processing_task+0x3e8>
		} else {
			referee_limiters.wheel_buffer_limit = 1;
 80095b8:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <referee_processing_task+0x3f8>)
 80095ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80095be:	609a      	str	r2, [r3, #8]
			referee_limiters.wheel_power_limit = 1;
 80095c0:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <referee_processing_task+0x3f8>)
 80095c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80095c6:	605a      	str	r2, [r3, #4]

		}
		vTaskDelay(10);
 80095c8:	200a      	movs	r0, #10
 80095ca:	f00d f8f9 	bl	80167c0 <vTaskDelay>
	while (1) {
 80095ce:	e635      	b.n	800923c <referee_processing_task+0x5c>
 80095d0:	47ae147b 	.word	0x47ae147b
 80095d4:	3f847ae1 	.word	0x3f847ae1
 80095d8:	20002880 	.word	0x20002880
 80095dc:	20002904 	.word	0x20002904
 80095e0:	20002924 	.word	0x20002924
 80095e4:	42200000 	.word	0x42200000
 80095e8:	3fe00000 	.word	0x3fe00000
 80095ec:	20002884 	.word	0x20002884

080095f0 <startup_task>:
extern remote_cmd_t remote_cmd;
extern float pitch;
extern float yaw;
uint16_t error = 0b111111111;

void startup_task() {
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
	//todo: shift all to an actual task, reimplement motor not connected errors
	led_on();
 80095f4:	f7f8 fc78 	bl	8001ee8 <led_on>
	buzzer_init();
 80095f8:	f7f7 fdc8 	bl	800118c <buzzer_init>
	imu_init();
 80095fc:	f7f8 fa7e 	bl	8001afc <imu_init>
	led_green_off();
 8009600:	f7f8 fc64 	bl	8001ecc <led_green_off>
	start_micros_timer();
 8009604:	f7f8 fd54 	bl	80020b0 <start_micros_timer>
	led_toggle();
 8009608:	f7f8 fc8c 	bl	8001f24 <led_toggle>

}
 800960c:	bf00      	nop
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009614:	4b0e      	ldr	r3, [pc, #56]	; (8009650 <HAL_Init+0x40>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a0d      	ldr	r2, [pc, #52]	; (8009650 <HAL_Init+0x40>)
 800961a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800961e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <HAL_Init+0x40>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <HAL_Init+0x40>)
 8009626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800962a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800962c:	4b08      	ldr	r3, [pc, #32]	; (8009650 <HAL_Init+0x40>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a07      	ldr	r2, [pc, #28]	; (8009650 <HAL_Init+0x40>)
 8009632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009638:	2003      	movs	r0, #3
 800963a:	f001 f9de 	bl	800a9fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800963e:	2000      	movs	r0, #0
 8009640:	f7fa fa40 	bl	8003ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009644:	f7fa fa12 	bl	8003a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	40023c00 	.word	0x40023c00

08009654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <HAL_IncTick+0x20>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	461a      	mov	r2, r3
 800965e:	4b06      	ldr	r3, [pc, #24]	; (8009678 <HAL_IncTick+0x24>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4413      	add	r3, r2
 8009664:	4a04      	ldr	r2, [pc, #16]	; (8009678 <HAL_IncTick+0x24>)
 8009666:	6013      	str	r3, [r2, #0]
}
 8009668:	bf00      	nop
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	20000014 	.word	0x20000014
 8009678:	2000296c 	.word	0x2000296c

0800967c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
  return uwTick;
 8009680:	4b03      	ldr	r3, [pc, #12]	; (8009690 <HAL_GetTick+0x14>)
 8009682:	681b      	ldr	r3, [r3, #0]
}
 8009684:	4618      	mov	r0, r3
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	2000296c 	.word	0x2000296c

08009694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800969c:	f7ff ffee 	bl	800967c <HAL_GetTick>
 80096a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d005      	beq.n	80096ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80096ae:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <HAL_Delay+0x44>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80096ba:	bf00      	nop
 80096bc:	f7ff ffde 	bl	800967c <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d8f7      	bhi.n	80096bc <HAL_Delay+0x28>
  {
  }
}
 80096cc:	bf00      	nop
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20000014 	.word	0x20000014

080096dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e033      	b.n	800975a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d109      	bne.n	800970e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7f9 fa90 	bl	8002c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009712:	f003 0310 	and.w	r3, r3, #16
 8009716:	2b00      	cmp	r3, #0
 8009718:	d118      	bne.n	800974c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009722:	f023 0302 	bic.w	r3, r3, #2
 8009726:	f043 0202 	orr.w	r2, r3, #2
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f93a 	bl	80099a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	f043 0201 	orr.w	r2, r3, #1
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	641a      	str	r2, [r3, #64]	; 0x40
 800974a:	e001      	b.n	8009750 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009778:	2b01      	cmp	r3, #1
 800977a:	d101      	bne.n	8009780 <HAL_ADC_ConfigChannel+0x1c>
 800977c:	2302      	movs	r3, #2
 800977e:	e105      	b.n	800998c <HAL_ADC_ConfigChannel+0x228>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b09      	cmp	r3, #9
 800978e:	d925      	bls.n	80097dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68d9      	ldr	r1, [r3, #12]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	461a      	mov	r2, r3
 800979e:	4613      	mov	r3, r2
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	4413      	add	r3, r2
 80097a4:	3b1e      	subs	r3, #30
 80097a6:	2207      	movs	r2, #7
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	43da      	mvns	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	400a      	ands	r2, r1
 80097b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68d9      	ldr	r1, [r3, #12]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	4618      	mov	r0, r3
 80097c8:	4603      	mov	r3, r0
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	4403      	add	r3, r0
 80097ce:	3b1e      	subs	r3, #30
 80097d0:	409a      	lsls	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	60da      	str	r2, [r3, #12]
 80097da:	e022      	b.n	8009822 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6919      	ldr	r1, [r3, #16]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	461a      	mov	r2, r3
 80097ea:	4613      	mov	r3, r2
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	4413      	add	r3, r2
 80097f0:	2207      	movs	r2, #7
 80097f2:	fa02 f303 	lsl.w	r3, r2, r3
 80097f6:	43da      	mvns	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	400a      	ands	r2, r1
 80097fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6919      	ldr	r1, [r3, #16]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	4618      	mov	r0, r3
 8009812:	4603      	mov	r3, r0
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	4403      	add	r3, r0
 8009818:	409a      	lsls	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	2b06      	cmp	r3, #6
 8009828:	d824      	bhi.n	8009874 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	3b05      	subs	r3, #5
 800983c:	221f      	movs	r2, #31
 800983e:	fa02 f303 	lsl.w	r3, r2, r3
 8009842:	43da      	mvns	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	400a      	ands	r2, r1
 800984a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	b29b      	uxth	r3, r3
 8009858:	4618      	mov	r0, r3
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	3b05      	subs	r3, #5
 8009866:	fa00 f203 	lsl.w	r2, r0, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	635a      	str	r2, [r3, #52]	; 0x34
 8009872:	e04c      	b.n	800990e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2b0c      	cmp	r3, #12
 800987a:	d824      	bhi.n	80098c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	3b23      	subs	r3, #35	; 0x23
 800988e:	221f      	movs	r2, #31
 8009890:	fa02 f303 	lsl.w	r3, r2, r3
 8009894:	43da      	mvns	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	400a      	ands	r2, r1
 800989c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	4618      	mov	r0, r3
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	3b23      	subs	r3, #35	; 0x23
 80098b8:	fa00 f203 	lsl.w	r2, r0, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	430a      	orrs	r2, r1
 80098c2:	631a      	str	r2, [r3, #48]	; 0x30
 80098c4:	e023      	b.n	800990e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	3b41      	subs	r3, #65	; 0x41
 80098d8:	221f      	movs	r2, #31
 80098da:	fa02 f303 	lsl.w	r3, r2, r3
 80098de:	43da      	mvns	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	400a      	ands	r2, r1
 80098e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	4618      	mov	r0, r3
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	3b41      	subs	r3, #65	; 0x41
 8009902:	fa00 f203 	lsl.w	r2, r0, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800990e:	4b22      	ldr	r3, [pc, #136]	; (8009998 <HAL_ADC_ConfigChannel+0x234>)
 8009910:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a21      	ldr	r2, [pc, #132]	; (800999c <HAL_ADC_ConfigChannel+0x238>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d109      	bne.n	8009930 <HAL_ADC_ConfigChannel+0x1cc>
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b12      	cmp	r3, #18
 8009922:	d105      	bne.n	8009930 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a19      	ldr	r2, [pc, #100]	; (800999c <HAL_ADC_ConfigChannel+0x238>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d123      	bne.n	8009982 <HAL_ADC_ConfigChannel+0x21e>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b10      	cmp	r3, #16
 8009940:	d003      	beq.n	800994a <HAL_ADC_ConfigChannel+0x1e6>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b11      	cmp	r3, #17
 8009948:	d11b      	bne.n	8009982 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b10      	cmp	r3, #16
 800995c:	d111      	bne.n	8009982 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800995e:	4b10      	ldr	r3, [pc, #64]	; (80099a0 <HAL_ADC_ConfigChannel+0x23c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a10      	ldr	r2, [pc, #64]	; (80099a4 <HAL_ADC_ConfigChannel+0x240>)
 8009964:	fba2 2303 	umull	r2, r3, r2, r3
 8009968:	0c9a      	lsrs	r2, r3, #18
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009974:	e002      	b.n	800997c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	3b01      	subs	r3, #1
 800997a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1f9      	bne.n	8009976 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	40012300 	.word	0x40012300
 800999c:	40012000 	.word	0x40012000
 80099a0:	20000004 	.word	0x20000004
 80099a4:	431bde83 	.word	0x431bde83

080099a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80099b0:	4b79      	ldr	r3, [pc, #484]	; (8009b98 <ADC_Init+0x1f0>)
 80099b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	431a      	orrs	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6859      	ldr	r1, [r3, #4]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	021a      	lsls	r2, r3, #8
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009a00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6859      	ldr	r1, [r3, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6899      	ldr	r1, [r3, #8]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	4a58      	ldr	r2, [pc, #352]	; (8009b9c <ADC_Init+0x1f4>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d022      	beq.n	8009a86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689a      	ldr	r2, [r3, #8]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009a4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6899      	ldr	r1, [r3, #8]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689a      	ldr	r2, [r3, #8]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6899      	ldr	r1, [r3, #8]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	609a      	str	r2, [r3, #8]
 8009a84:	e00f      	b.n	8009aa6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	689a      	ldr	r2, [r3, #8]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009a94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689a      	ldr	r2, [r3, #8]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009aa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0202 	bic.w	r2, r2, #2
 8009ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6899      	ldr	r1, [r3, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	7e1b      	ldrb	r3, [r3, #24]
 8009ac0:	005a      	lsls	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01b      	beq.n	8009b0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ae2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009af2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6859      	ldr	r1, [r3, #4]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	3b01      	subs	r3, #1
 8009b00:	035a      	lsls	r2, r3, #13
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]
 8009b0a:	e007      	b.n	8009b1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	051a      	lsls	r2, r3, #20
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689a      	ldr	r2, [r3, #8]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6899      	ldr	r1, [r3, #8]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b5e:	025a      	lsls	r2, r3, #9
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6899      	ldr	r1, [r3, #8]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	029a      	lsls	r2, r3, #10
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	430a      	orrs	r2, r1
 8009b8a:	609a      	str	r2, [r3, #8]
}
 8009b8c:	bf00      	nop
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	40012300 	.word	0x40012300
 8009b9c:	0f000001 	.word	0x0f000001

08009ba0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e0ed      	b.n	8009d8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d102      	bne.n	8009bc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7f9 f8de 	bl	8002d80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0201 	orr.w	r2, r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bd4:	f7ff fd52 	bl	800967c <HAL_GetTick>
 8009bd8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009bda:	e012      	b.n	8009c02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009bdc:	f7ff fd4e 	bl	800967c <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b0a      	cmp	r3, #10
 8009be8:	d90b      	bls.n	8009c02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2205      	movs	r2, #5
 8009bfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e0c5      	b.n	8009d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0e5      	beq.n	8009bdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0202 	bic.w	r2, r2, #2
 8009c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c20:	f7ff fd2c 	bl	800967c <HAL_GetTick>
 8009c24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009c26:	e012      	b.n	8009c4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009c28:	f7ff fd28 	bl	800967c <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b0a      	cmp	r3, #10
 8009c34:	d90b      	bls.n	8009c4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2205      	movs	r2, #5
 8009c46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e09f      	b.n	8009d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e5      	bne.n	8009c28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	7e1b      	ldrb	r3, [r3, #24]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d108      	bne.n	8009c76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e007      	b.n	8009c86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	7e5b      	ldrb	r3, [r3, #25]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d108      	bne.n	8009ca0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e007      	b.n	8009cb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	7e9b      	ldrb	r3, [r3, #26]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d108      	bne.n	8009cca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f042 0220 	orr.w	r2, r2, #32
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	e007      	b.n	8009cda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0220 	bic.w	r2, r2, #32
 8009cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	7edb      	ldrb	r3, [r3, #27]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d108      	bne.n	8009cf4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 0210 	bic.w	r2, r2, #16
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	e007      	b.n	8009d04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0210 	orr.w	r2, r2, #16
 8009d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	7f1b      	ldrb	r3, [r3, #28]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d108      	bne.n	8009d1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f042 0208 	orr.w	r2, r2, #8
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	e007      	b.n	8009d2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f022 0208 	bic.w	r2, r2, #8
 8009d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	7f5b      	ldrb	r3, [r3, #29]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d108      	bne.n	8009d48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f042 0204 	orr.w	r2, r2, #4
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	e007      	b.n	8009d58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f022 0204 	bic.w	r2, r2, #4
 8009d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	431a      	orrs	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	ea42 0103 	orr.w	r1, r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	1e5a      	subs	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009db0:	7cfb      	ldrb	r3, [r7, #19]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d003      	beq.n	8009dbe <HAL_CAN_ConfigFilter+0x26>
 8009db6:	7cfb      	ldrb	r3, [r7, #19]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	f040 80be 	bne.w	8009f3a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8009dbe:	4b65      	ldr	r3, [pc, #404]	; (8009f54 <HAL_CAN_ConfigFilter+0x1bc>)
 8009dc0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009dc8:	f043 0201 	orr.w	r2, r3, #1
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009dd8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	021b      	lsls	r3, r3, #8
 8009dee:	431a      	orrs	r2, r3
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	f003 031f 	and.w	r3, r3, #31
 8009dfe:	2201      	movs	r2, #1
 8009e00:	fa02 f303 	lsl.w	r3, r2, r3
 8009e04:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	43db      	mvns	r3, r3
 8009e10:	401a      	ands	r2, r3
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	69db      	ldr	r3, [r3, #28]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d123      	bne.n	8009e68 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	43db      	mvns	r3, r3
 8009e2a:	401a      	ands	r2, r3
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009e42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	3248      	adds	r2, #72	; 0x48
 8009e48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009e5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009e5e:	6979      	ldr	r1, [r7, #20]
 8009e60:	3348      	adds	r3, #72	; 0x48
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	440b      	add	r3, r1
 8009e66:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d122      	bne.n	8009eb6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009e90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	3248      	adds	r2, #72	; 0x48
 8009e96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009eaa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009eac:	6979      	ldr	r1, [r7, #20]
 8009eae:	3348      	adds	r3, #72	; 0x48
 8009eb0:	00db      	lsls	r3, r3, #3
 8009eb2:	440b      	add	r3, r1
 8009eb4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	43db      	mvns	r3, r3
 8009ec8:	401a      	ands	r2, r3
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009ed0:	e007      	b.n	8009ee2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	431a      	orrs	r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d109      	bne.n	8009efe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	43db      	mvns	r3, r3
 8009ef4:	401a      	ands	r2, r3
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009efc:	e007      	b.n	8009f0e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d107      	bne.n	8009f26 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009f2c:	f023 0201 	bic.w	r2, r3, #1
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e006      	b.n	8009f48 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
  }
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	40006400 	.word	0x40006400

08009f58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d12e      	bne.n	8009fca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 0201 	bic.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f84:	f7ff fb7a 	bl	800967c <HAL_GetTick>
 8009f88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009f8a:	e012      	b.n	8009fb2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009f8c:	f7ff fb76 	bl	800967c <HAL_GetTick>
 8009f90:	4602      	mov	r2, r0
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	2b0a      	cmp	r3, #10
 8009f98:	d90b      	bls.n	8009fb2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2205      	movs	r2, #5
 8009faa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e012      	b.n	8009fd8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e5      	bne.n	8009f8c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e006      	b.n	8009fd8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
  }
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b089      	sub	sp, #36	; 0x24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ff4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009ffe:	7ffb      	ldrb	r3, [r7, #31]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d003      	beq.n	800a00c <HAL_CAN_AddTxMessage+0x2c>
 800a004:	7ffb      	ldrb	r3, [r7, #31]
 800a006:	2b02      	cmp	r3, #2
 800a008:	f040 80b8 	bne.w	800a17c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d105      	bne.n	800a02c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 80a0 	beq.w	800a16c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	0e1b      	lsrs	r3, r3, #24
 800a030:	f003 0303 	and.w	r3, r3, #3
 800a034:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d907      	bls.n	800a04c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e09e      	b.n	800a18a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800a04c:	2201      	movs	r2, #1
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	409a      	lsls	r2, r3
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10d      	bne.n	800a07a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800a068:	68f9      	ldr	r1, [r7, #12]
 800a06a:	6809      	ldr	r1, [r1, #0]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	3318      	adds	r3, #24
 800a072:	011b      	lsls	r3, r3, #4
 800a074:	440b      	add	r3, r1
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	e00f      	b.n	800a09a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a084:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800a08e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	3318      	adds	r3, #24
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	440b      	add	r3, r1
 800a098:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6819      	ldr	r1, [r3, #0]
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	691a      	ldr	r2, [r3, #16]
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	3318      	adds	r3, #24
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	440b      	add	r3, r1
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	7d1b      	ldrb	r3, [r3, #20]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d111      	bne.n	800a0da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	3318      	adds	r3, #24
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	4413      	add	r3, r2
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	6811      	ldr	r1, [r2, #0]
 800a0ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	3318      	adds	r3, #24
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	440b      	add	r3, r1
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	3307      	adds	r3, #7
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	061a      	lsls	r2, r3, #24
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3306      	adds	r3, #6
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	041b      	lsls	r3, r3, #16
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3305      	adds	r3, #5
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	021b      	lsls	r3, r3, #8
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	3204      	adds	r2, #4
 800a0fa:	7812      	ldrb	r2, [r2, #0]
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	6811      	ldr	r1, [r2, #0]
 800a102:	ea43 0200 	orr.w	r2, r3, r0
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	011b      	lsls	r3, r3, #4
 800a10a:	440b      	add	r3, r1
 800a10c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800a110:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	3303      	adds	r3, #3
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	061a      	lsls	r2, r3, #24
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3302      	adds	r3, #2
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	041b      	lsls	r3, r3, #16
 800a122:	431a      	orrs	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3301      	adds	r3, #1
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	4313      	orrs	r3, r2
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	7812      	ldrb	r2, [r2, #0]
 800a132:	4610      	mov	r0, r2
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	6811      	ldr	r1, [r2, #0]
 800a138:	ea43 0200 	orr.w	r2, r3, r0
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	440b      	add	r3, r1
 800a142:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800a146:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	3318      	adds	r3, #24
 800a150:	011b      	lsls	r3, r3, #4
 800a152:	4413      	add	r3, r2
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	6811      	ldr	r1, [r2, #0]
 800a15a:	f043 0201 	orr.w	r2, r3, #1
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	3318      	adds	r3, #24
 800a162:	011b      	lsls	r3, r3, #4
 800a164:	440b      	add	r3, r1
 800a166:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	e00e      	b.n	800a18a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e006      	b.n	800a18a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a180:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
  }
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3724      	adds	r7, #36	; 0x24
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800a196:	b480      	push	{r7}
 800a198:	b087      	sub	sp, #28
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	60b9      	str	r1, [r7, #8]
 800a1a0:	607a      	str	r2, [r7, #4]
 800a1a2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1aa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d003      	beq.n	800a1ba <HAL_CAN_GetRxMessage+0x24>
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	f040 80f3 	bne.w	800a3a0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10e      	bne.n	800a1de <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f003 0303 	and.w	r3, r3, #3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d116      	bne.n	800a1fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e0e7      	b.n	800a3ae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	f003 0303 	and.w	r3, r3, #3
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d107      	bne.n	800a1fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e0d8      	b.n	800a3ae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	331b      	adds	r3, #27
 800a204:	011b      	lsls	r3, r3, #4
 800a206:	4413      	add	r3, r2
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0204 	and.w	r2, r3, #4
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10c      	bne.n	800a234 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	331b      	adds	r3, #27
 800a222:	011b      	lsls	r3, r3, #4
 800a224:	4413      	add	r3, r2
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	0d5b      	lsrs	r3, r3, #21
 800a22a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	e00b      	b.n	800a24c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	331b      	adds	r3, #27
 800a23c:	011b      	lsls	r3, r3, #4
 800a23e:	4413      	add	r3, r2
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	08db      	lsrs	r3, r3, #3
 800a244:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	331b      	adds	r3, #27
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	4413      	add	r3, r2
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0202 	and.w	r2, r3, #2
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	331b      	adds	r3, #27
 800a26a:	011b      	lsls	r3, r3, #4
 800a26c:	4413      	add	r3, r2
 800a26e:	3304      	adds	r3, #4
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 020f 	and.w	r2, r3, #15
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	331b      	adds	r3, #27
 800a282:	011b      	lsls	r3, r3, #4
 800a284:	4413      	add	r3, r2
 800a286:	3304      	adds	r3, #4
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	0a1b      	lsrs	r3, r3, #8
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	331b      	adds	r3, #27
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	4413      	add	r3, r2
 800a29e:	3304      	adds	r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	0c1b      	lsrs	r3, r3, #16
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	011b      	lsls	r3, r3, #4
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	011b      	lsls	r3, r3, #4
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	0a1a      	lsrs	r2, r3, #8
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	b2d2      	uxtb	r2, r2
 800a2d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	011b      	lsls	r3, r3, #4
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	0c1a      	lsrs	r2, r3, #16
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	3302      	adds	r3, #2
 800a2f0:	b2d2      	uxtb	r2, r2
 800a2f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	011b      	lsls	r3, r3, #4
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	0e1a      	lsrs	r2, r3, #24
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	3303      	adds	r3, #3
 800a30a:	b2d2      	uxtb	r2, r2
 800a30c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	011b      	lsls	r3, r3, #4
 800a316:	4413      	add	r3, r2
 800a318:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	3304      	adds	r3, #4
 800a322:	b2d2      	uxtb	r2, r2
 800a324:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	4413      	add	r3, r2
 800a330:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	0a1a      	lsrs	r2, r3, #8
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	3305      	adds	r3, #5
 800a33c:	b2d2      	uxtb	r2, r2
 800a33e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	011b      	lsls	r3, r3, #4
 800a348:	4413      	add	r3, r2
 800a34a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	0c1a      	lsrs	r2, r3, #16
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	3306      	adds	r3, #6
 800a356:	b2d2      	uxtb	r2, r2
 800a358:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	011b      	lsls	r3, r3, #4
 800a362:	4413      	add	r3, r2
 800a364:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	0e1a      	lsrs	r2, r3, #24
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	3307      	adds	r3, #7
 800a370:	b2d2      	uxtb	r2, r2
 800a372:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d108      	bne.n	800a38c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f042 0220 	orr.w	r2, r2, #32
 800a388:	60da      	str	r2, [r3, #12]
 800a38a:	e007      	b.n	800a39c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691a      	ldr	r2, [r3, #16]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f042 0220 	orr.w	r2, r2, #32
 800a39a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	e006      	b.n	800a3ae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
  }
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d002      	beq.n	800a3d8 <HAL_CAN_ActivateNotification+0x1e>
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d109      	bne.n	800a3ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6959      	ldr	r1, [r3, #20]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e006      	b.n	800a3fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
  }
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800a406:	b480      	push	{r7}
 800a408:	b085      	sub	sp, #20
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a416:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d002      	beq.n	800a424 <HAL_CAN_DeactivateNotification+0x1e>
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d10a      	bne.n	800a43a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6959      	ldr	r1, [r3, #20]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	43da      	mvns	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	400a      	ands	r2, r1
 800a434:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	e006      	b.n	800a448 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
  }
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08a      	sub	sp, #40	; 0x28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a45c:	2300      	movs	r3, #0
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d07c      	beq.n	800a594 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d023      	beq.n	800a4ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d003      	beq.n	800a4be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f983 	bl	800a7c2 <HAL_CAN_TxMailbox0CompleteCallback>
 800a4bc:	e016      	b.n	800a4ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	f003 0304 	and.w	r3, r3, #4
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a4d0:	e00c      	b.n	800a4ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e4:	e002      	b.n	800a4ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f989 	bl	800a7fe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d024      	beq.n	800a540 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f963 	bl	800a7d6 <HAL_CAN_TxMailbox1CompleteCallback>
 800a510:	e016      	b.n	800a540 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d004      	beq.n	800a526 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
 800a524:	e00c      	b.n	800a540 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d004      	beq.n	800a53a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a536:	627b      	str	r3, [r7, #36]	; 0x24
 800a538:	e002      	b.n	800a540 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f969 	bl	800a812 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d024      	beq.n	800a594 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a552:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f943 	bl	800a7ea <HAL_CAN_TxMailbox2CompleteCallback>
 800a564:	e016      	b.n	800a594 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d004      	beq.n	800a57a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
 800a578:	e00c      	b.n	800a594 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24
 800a58c:	e002      	b.n	800a594 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f949 	bl	800a826 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a594:	6a3b      	ldr	r3, [r7, #32]
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00c      	beq.n	800a5b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f003 0310 	and.w	r3, r3, #16
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d007      	beq.n	800a5b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2210      	movs	r2, #16
 800a5b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	f003 0304 	and.w	r3, r3, #4
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00b      	beq.n	800a5da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f003 0308 	and.w	r3, r3, #8
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d006      	beq.n	800a5da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f930 	bl	800a83a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	f003 0302 	and.w	r3, r3, #2
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d009      	beq.n	800a5f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f003 0303 	and.w	r3, r3, #3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d002      	beq.n	800a5f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7f6 fdd8 	bl	80011a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00c      	beq.n	800a61c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f003 0310 	and.w	r3, r3, #16
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a612:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2210      	movs	r2, #16
 800a61a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	f003 0308 	and.w	r3, r3, #8
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d006      	beq.n	800a63e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2208      	movs	r2, #8
 800a636:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f908 	bl	800a84e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a63e:	6a3b      	ldr	r3, [r7, #32]
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b00      	cmp	r3, #0
 800a646:	d009      	beq.n	800a65c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	f003 0303 	and.w	r3, r3, #3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d002      	beq.n	800a65c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7f6 fdb1 	bl	80011be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00b      	beq.n	800a67e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	f003 0310 	and.w	r3, r3, #16
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d006      	beq.n	800a67e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2210      	movs	r2, #16
 800a676:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f8f2 	bl	800a862 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00b      	beq.n	800a6a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	f003 0308 	and.w	r3, r3, #8
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d006      	beq.n	800a6a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2208      	movs	r2, #8
 800a698:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f8eb 	bl	800a876 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d07b      	beq.n	800a7a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d072      	beq.n	800a79a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d008      	beq.n	800a6d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d003      	beq.n	800a6d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d008      	beq.n	800a6ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d003      	beq.n	800a6ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	f043 0302 	orr.w	r3, r3, #2
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d008      	beq.n	800a708 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d003      	beq.n	800a708 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	f043 0304 	orr.w	r3, r3, #4
 800a706:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d043      	beq.n	800a79a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d03e      	beq.n	800a79a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a722:	2b60      	cmp	r3, #96	; 0x60
 800a724:	d02b      	beq.n	800a77e <HAL_CAN_IRQHandler+0x32a>
 800a726:	2b60      	cmp	r3, #96	; 0x60
 800a728:	d82e      	bhi.n	800a788 <HAL_CAN_IRQHandler+0x334>
 800a72a:	2b50      	cmp	r3, #80	; 0x50
 800a72c:	d022      	beq.n	800a774 <HAL_CAN_IRQHandler+0x320>
 800a72e:	2b50      	cmp	r3, #80	; 0x50
 800a730:	d82a      	bhi.n	800a788 <HAL_CAN_IRQHandler+0x334>
 800a732:	2b40      	cmp	r3, #64	; 0x40
 800a734:	d019      	beq.n	800a76a <HAL_CAN_IRQHandler+0x316>
 800a736:	2b40      	cmp	r3, #64	; 0x40
 800a738:	d826      	bhi.n	800a788 <HAL_CAN_IRQHandler+0x334>
 800a73a:	2b30      	cmp	r3, #48	; 0x30
 800a73c:	d010      	beq.n	800a760 <HAL_CAN_IRQHandler+0x30c>
 800a73e:	2b30      	cmp	r3, #48	; 0x30
 800a740:	d822      	bhi.n	800a788 <HAL_CAN_IRQHandler+0x334>
 800a742:	2b10      	cmp	r3, #16
 800a744:	d002      	beq.n	800a74c <HAL_CAN_IRQHandler+0x2f8>
 800a746:	2b20      	cmp	r3, #32
 800a748:	d005      	beq.n	800a756 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a74a:	e01d      	b.n	800a788 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	f043 0308 	orr.w	r3, r3, #8
 800a752:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a754:	e019      	b.n	800a78a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	f043 0310 	orr.w	r3, r3, #16
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a75e:	e014      	b.n	800a78a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a762:	f043 0320 	orr.w	r3, r3, #32
 800a766:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a768:	e00f      	b.n	800a78a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a772:	e00a      	b.n	800a78a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a77a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a77c:	e005      	b.n	800a78a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a786:	e000      	b.n	800a78a <HAL_CAN_IRQHandler+0x336>
            break;
 800a788:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	699a      	ldr	r2, [r3, #24]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a798:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2204      	movs	r2, #4
 800a7a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d008      	beq.n	800a7ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	431a      	orrs	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f868 	bl	800a88a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a7ba:	bf00      	nop
 800a7bc:	3728      	adds	r7, #40	; 0x28
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800a7ca:	bf00      	nop
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800a7de:	bf00      	nop
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800a7f2:	bf00      	nop
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a856:	bf00      	nop
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a87e:	bf00      	nop
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a892:	bf00      	nop
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <__NVIC_SetPriorityGrouping>:
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <__NVIC_SetPriorityGrouping+0x44>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a8bc:	4013      	ands	r3, r2
 800a8be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a8c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a8cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a8d2:	4a04      	ldr	r2, [pc, #16]	; (800a8e4 <__NVIC_SetPriorityGrouping+0x44>)
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	60d3      	str	r3, [r2, #12]
}
 800a8d8:	bf00      	nop
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	e000ed00 	.word	0xe000ed00

0800a8e8 <__NVIC_GetPriorityGrouping>:
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a8ec:	4b04      	ldr	r3, [pc, #16]	; (800a900 <__NVIC_GetPriorityGrouping+0x18>)
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	0a1b      	lsrs	r3, r3, #8
 800a8f2:	f003 0307 	and.w	r3, r3, #7
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	e000ed00 	.word	0xe000ed00

0800a904 <__NVIC_EnableIRQ>:
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a90e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a912:	2b00      	cmp	r3, #0
 800a914:	db0b      	blt.n	800a92e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a916:	79fb      	ldrb	r3, [r7, #7]
 800a918:	f003 021f 	and.w	r2, r3, #31
 800a91c:	4907      	ldr	r1, [pc, #28]	; (800a93c <__NVIC_EnableIRQ+0x38>)
 800a91e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a922:	095b      	lsrs	r3, r3, #5
 800a924:	2001      	movs	r0, #1
 800a926:	fa00 f202 	lsl.w	r2, r0, r2
 800a92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a92e:	bf00      	nop
 800a930:	370c      	adds	r7, #12
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	e000e100 	.word	0xe000e100

0800a940 <__NVIC_SetPriority>:
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	6039      	str	r1, [r7, #0]
 800a94a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a94c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a950:	2b00      	cmp	r3, #0
 800a952:	db0a      	blt.n	800a96a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	b2da      	uxtb	r2, r3
 800a958:	490c      	ldr	r1, [pc, #48]	; (800a98c <__NVIC_SetPriority+0x4c>)
 800a95a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a95e:	0112      	lsls	r2, r2, #4
 800a960:	b2d2      	uxtb	r2, r2
 800a962:	440b      	add	r3, r1
 800a964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a968:	e00a      	b.n	800a980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	4908      	ldr	r1, [pc, #32]	; (800a990 <__NVIC_SetPriority+0x50>)
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	f003 030f 	and.w	r3, r3, #15
 800a976:	3b04      	subs	r3, #4
 800a978:	0112      	lsls	r2, r2, #4
 800a97a:	b2d2      	uxtb	r2, r2
 800a97c:	440b      	add	r3, r1
 800a97e:	761a      	strb	r2, [r3, #24]
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	e000e100 	.word	0xe000e100
 800a990:	e000ed00 	.word	0xe000ed00

0800a994 <NVIC_EncodePriority>:
{
 800a994:	b480      	push	{r7}
 800a996:	b089      	sub	sp, #36	; 0x24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f003 0307 	and.w	r3, r3, #7
 800a9a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	f1c3 0307 	rsb	r3, r3, #7
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	bf28      	it	cs
 800a9b2:	2304      	movcs	r3, #4
 800a9b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	2b06      	cmp	r3, #6
 800a9bc:	d902      	bls.n	800a9c4 <NVIC_EncodePriority+0x30>
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	3b03      	subs	r3, #3
 800a9c2:	e000      	b.n	800a9c6 <NVIC_EncodePriority+0x32>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d2:	43da      	mvns	r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	401a      	ands	r2, r3
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a9dc:	f04f 31ff 	mov.w	r1, #4294967295
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9e6:	43d9      	mvns	r1, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9ec:	4313      	orrs	r3, r2
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3724      	adds	r7, #36	; 0x24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b082      	sub	sp, #8
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff ff4c 	bl	800a8a0 <__NVIC_SetPriorityGrouping>
}
 800aa08:	bf00      	nop
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800aa22:	f7ff ff61 	bl	800a8e8 <__NVIC_GetPriorityGrouping>
 800aa26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	6978      	ldr	r0, [r7, #20]
 800aa2e:	f7ff ffb1 	bl	800a994 <NVIC_EncodePriority>
 800aa32:	4602      	mov	r2, r0
 800aa34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff ff80 	bl	800a940 <__NVIC_SetPriority>
}
 800aa40:	bf00      	nop
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff ff54 	bl	800a904 <__NVIC_EnableIRQ>
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800aa70:	f7fe fe04 	bl	800967c <HAL_GetTick>
 800aa74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e099      	b.n	800abb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2202      	movs	r2, #2
 800aa84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f022 0201 	bic.w	r2, r2, #1
 800aa9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aaa0:	e00f      	b.n	800aac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aaa2:	f7fe fdeb 	bl	800967c <HAL_GetTick>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	2b05      	cmp	r3, #5
 800aaae:	d908      	bls.n	800aac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2220      	movs	r2, #32
 800aab4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2203      	movs	r2, #3
 800aaba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e078      	b.n	800abb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e8      	bne.n	800aaa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	4b38      	ldr	r3, [pc, #224]	; (800abbc <HAL_DMA_Init+0x158>)
 800aadc:	4013      	ands	r3, r2
 800aade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aaee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aafa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ab06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d107      	bne.n	800ab2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab24:	4313      	orrs	r3, r2
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f023 0307 	bic.w	r3, r3, #7
 800ab42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	d117      	bne.n	800ab86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00e      	beq.n	800ab86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fb0d 	bl	800b188 <DMA_CheckFifoParam>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d008      	beq.n	800ab86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2240      	movs	r2, #64	; 0x40
 800ab78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ab82:	2301      	movs	r3, #1
 800ab84:	e016      	b.n	800abb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fac4 	bl	800b11c <DMA_CalcBaseAndBitshift>
 800ab94:	4603      	mov	r3, r0
 800ab96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab9c:	223f      	movs	r2, #63	; 0x3f
 800ab9e:	409a      	lsls	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	f010803f 	.word	0xf010803f

0800abc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d101      	bne.n	800abe6 <HAL_DMA_Start_IT+0x26>
 800abe2:	2302      	movs	r3, #2
 800abe4:	e040      	b.n	800ac68 <HAL_DMA_Start_IT+0xa8>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d12f      	bne.n	800ac5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2202      	movs	r2, #2
 800abfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	68b9      	ldr	r1, [r7, #8]
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 fa56 	bl	800b0c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac18:	223f      	movs	r2, #63	; 0x3f
 800ac1a:	409a      	lsls	r2, r3
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0216 	orr.w	r2, r2, #22
 800ac2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d007      	beq.n	800ac48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0208 	orr.w	r2, r2, #8
 800ac46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f042 0201 	orr.w	r2, r2, #1
 800ac56:	601a      	str	r2, [r3, #0]
 800ac58:	e005      	b.n	800ac66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ac62:	2302      	movs	r3, #2
 800ac64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ac7e:	f7fe fcfd 	bl	800967c <HAL_GetTick>
 800ac82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d008      	beq.n	800aca2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2280      	movs	r2, #128	; 0x80
 800ac94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e052      	b.n	800ad48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f022 0216 	bic.w	r2, r2, #22
 800acb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	695a      	ldr	r2, [r3, #20]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d103      	bne.n	800acd2 <HAL_DMA_Abort+0x62>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d007      	beq.n	800ace2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f022 0208 	bic.w	r2, r2, #8
 800ace0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0201 	bic.w	r2, r2, #1
 800acf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800acf2:	e013      	b.n	800ad1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800acf4:	f7fe fcc2 	bl	800967c <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	d90c      	bls.n	800ad1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2220      	movs	r2, #32
 800ad06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2203      	movs	r2, #3
 800ad0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e015      	b.n	800ad48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1e4      	bne.n	800acf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad2e:	223f      	movs	r2, #63	; 0x3f
 800ad30:	409a      	lsls	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d004      	beq.n	800ad6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2280      	movs	r2, #128	; 0x80
 800ad68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e00c      	b.n	800ad88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2205      	movs	r2, #5
 800ad72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f022 0201 	bic.w	r2, r2, #1
 800ad84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ada0:	4b8e      	ldr	r3, [pc, #568]	; (800afdc <HAL_DMA_IRQHandler+0x248>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a8e      	ldr	r2, [pc, #568]	; (800afe0 <HAL_DMA_IRQHandler+0x24c>)
 800ada6:	fba2 2303 	umull	r2, r3, r2, r3
 800adaa:	0a9b      	lsrs	r3, r3, #10
 800adac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adbe:	2208      	movs	r2, #8
 800adc0:	409a      	lsls	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	4013      	ands	r3, r2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d01a      	beq.n	800ae00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 0304 	and.w	r3, r3, #4
 800add4:	2b00      	cmp	r3, #0
 800add6:	d013      	beq.n	800ae00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f022 0204 	bic.w	r2, r2, #4
 800ade6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adec:	2208      	movs	r2, #8
 800adee:	409a      	lsls	r2, r3
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf8:	f043 0201 	orr.w	r2, r3, #1
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae04:	2201      	movs	r2, #1
 800ae06:	409a      	lsls	r2, r3
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d012      	beq.n	800ae36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00b      	beq.n	800ae36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae22:	2201      	movs	r2, #1
 800ae24:	409a      	lsls	r2, r3
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2e:	f043 0202 	orr.w	r2, r3, #2
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae3a:	2204      	movs	r2, #4
 800ae3c:	409a      	lsls	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	4013      	ands	r3, r2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d012      	beq.n	800ae6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae58:	2204      	movs	r2, #4
 800ae5a:	409a      	lsls	r2, r3
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae64:	f043 0204 	orr.w	r2, r3, #4
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae70:	2210      	movs	r2, #16
 800ae72:	409a      	lsls	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	4013      	ands	r3, r2
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d043      	beq.n	800af04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0308 	and.w	r3, r3, #8
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d03c      	beq.n	800af04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae8e:	2210      	movs	r2, #16
 800ae90:	409a      	lsls	r2, r3
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d018      	beq.n	800aed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d108      	bne.n	800aec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d024      	beq.n	800af04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	4798      	blx	r3
 800aec2:	e01f      	b.n	800af04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d01b      	beq.n	800af04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	4798      	blx	r3
 800aed4:	e016      	b.n	800af04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d107      	bne.n	800aef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 0208 	bic.w	r2, r2, #8
 800aef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af08:	2220      	movs	r2, #32
 800af0a:	409a      	lsls	r2, r3
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4013      	ands	r3, r2
 800af10:	2b00      	cmp	r3, #0
 800af12:	f000 808f 	beq.w	800b034 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0310 	and.w	r3, r3, #16
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8087 	beq.w	800b034 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af2a:	2220      	movs	r2, #32
 800af2c:	409a      	lsls	r2, r3
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b05      	cmp	r3, #5
 800af3c:	d136      	bne.n	800afac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f022 0216 	bic.w	r2, r2, #22
 800af4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	695a      	ldr	r2, [r3, #20]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	d103      	bne.n	800af6e <HAL_DMA_IRQHandler+0x1da>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d007      	beq.n	800af7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f022 0208 	bic.w	r2, r2, #8
 800af7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af82:	223f      	movs	r2, #63	; 0x3f
 800af84:	409a      	lsls	r2, r3
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2201      	movs	r2, #1
 800af8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d07e      	beq.n	800b0a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	4798      	blx	r3
        }
        return;
 800afaa:	e079      	b.n	800b0a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d01d      	beq.n	800aff6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10d      	bne.n	800afe4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d031      	beq.n	800b034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	4798      	blx	r3
 800afd8:	e02c      	b.n	800b034 <HAL_DMA_IRQHandler+0x2a0>
 800afda:	bf00      	nop
 800afdc:	20000004 	.word	0x20000004
 800afe0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d023      	beq.n	800b034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	4798      	blx	r3
 800aff4:	e01e      	b.n	800b034 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10f      	bne.n	800b024 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0210 	bic.w	r2, r2, #16
 800b012:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d032      	beq.n	800b0a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	d022      	beq.n	800b08e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2205      	movs	r2, #5
 800b04c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f022 0201 	bic.w	r2, r2, #1
 800b05e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	3301      	adds	r3, #1
 800b064:	60bb      	str	r3, [r7, #8]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d307      	bcc.n	800b07c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1f2      	bne.n	800b060 <HAL_DMA_IRQHandler+0x2cc>
 800b07a:	e000      	b.n	800b07e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b07c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b092:	2b00      	cmp	r3, #0
 800b094:	d005      	beq.n	800b0a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	4798      	blx	r3
 800b09e:	e000      	b.n	800b0a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b0a0:	bf00      	nop
    }
  }
}
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b0dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	2b40      	cmp	r3, #64	; 0x40
 800b0ec:	d108      	bne.n	800b100 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b0fe:	e007      	b.n	800b110 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	60da      	str	r2, [r3, #12]
}
 800b110:	bf00      	nop
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	3b10      	subs	r3, #16
 800b12c:	4a14      	ldr	r2, [pc, #80]	; (800b180 <DMA_CalcBaseAndBitshift+0x64>)
 800b12e:	fba2 2303 	umull	r2, r3, r2, r3
 800b132:	091b      	lsrs	r3, r3, #4
 800b134:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b136:	4a13      	ldr	r2, [pc, #76]	; (800b184 <DMA_CalcBaseAndBitshift+0x68>)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b03      	cmp	r3, #3
 800b148:	d909      	bls.n	800b15e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b152:	f023 0303 	bic.w	r3, r3, #3
 800b156:	1d1a      	adds	r2, r3, #4
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	659a      	str	r2, [r3, #88]	; 0x58
 800b15c:	e007      	b.n	800b16e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b166:	f023 0303 	bic.w	r3, r3, #3
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b172:	4618      	mov	r0, r3
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	aaaaaaab 	.word	0xaaaaaaab
 800b184:	0801fc80 	.word	0x0801fc80

0800b188 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b198:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d11f      	bne.n	800b1e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d856      	bhi.n	800b256 <DMA_CheckFifoParam+0xce>
 800b1a8:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <DMA_CheckFifoParam+0x28>)
 800b1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ae:	bf00      	nop
 800b1b0:	0800b1c1 	.word	0x0800b1c1
 800b1b4:	0800b1d3 	.word	0x0800b1d3
 800b1b8:	0800b1c1 	.word	0x0800b1c1
 800b1bc:	0800b257 	.word	0x0800b257
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d046      	beq.n	800b25a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1d0:	e043      	b.n	800b25a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b1da:	d140      	bne.n	800b25e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1e0:	e03d      	b.n	800b25e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1ea:	d121      	bne.n	800b230 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d837      	bhi.n	800b262 <DMA_CheckFifoParam+0xda>
 800b1f2:	a201      	add	r2, pc, #4	; (adr r2, 800b1f8 <DMA_CheckFifoParam+0x70>)
 800b1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f8:	0800b209 	.word	0x0800b209
 800b1fc:	0800b20f 	.word	0x0800b20f
 800b200:	0800b209 	.word	0x0800b209
 800b204:	0800b221 	.word	0x0800b221
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	73fb      	strb	r3, [r7, #15]
      break;
 800b20c:	e030      	b.n	800b270 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b216:	2b00      	cmp	r3, #0
 800b218:	d025      	beq.n	800b266 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b21e:	e022      	b.n	800b266 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b224:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b228:	d11f      	bne.n	800b26a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b22e:	e01c      	b.n	800b26a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d903      	bls.n	800b23e <DMA_CheckFifoParam+0xb6>
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b03      	cmp	r3, #3
 800b23a:	d003      	beq.n	800b244 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b23c:	e018      	b.n	800b270 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	73fb      	strb	r3, [r7, #15]
      break;
 800b242:	e015      	b.n	800b270 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00e      	beq.n	800b26e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	73fb      	strb	r3, [r7, #15]
      break;
 800b254:	e00b      	b.n	800b26e <DMA_CheckFifoParam+0xe6>
      break;
 800b256:	bf00      	nop
 800b258:	e00a      	b.n	800b270 <DMA_CheckFifoParam+0xe8>
      break;
 800b25a:	bf00      	nop
 800b25c:	e008      	b.n	800b270 <DMA_CheckFifoParam+0xe8>
      break;
 800b25e:	bf00      	nop
 800b260:	e006      	b.n	800b270 <DMA_CheckFifoParam+0xe8>
      break;
 800b262:	bf00      	nop
 800b264:	e004      	b.n	800b270 <DMA_CheckFifoParam+0xe8>
      break;
 800b266:	bf00      	nop
 800b268:	e002      	b.n	800b270 <DMA_CheckFifoParam+0xe8>
      break;   
 800b26a:	bf00      	nop
 800b26c:	e000      	b.n	800b270 <DMA_CheckFifoParam+0xe8>
      break;
 800b26e:	bf00      	nop
    }
  } 
  
  return status; 
 800b270:	7bfb      	ldrb	r3, [r7, #15]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop

0800b280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b280:	b480      	push	{r7}
 800b282:	b089      	sub	sp, #36	; 0x24
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b28e:	2300      	movs	r3, #0
 800b290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b292:	2300      	movs	r3, #0
 800b294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b296:	2300      	movs	r3, #0
 800b298:	61fb      	str	r3, [r7, #28]
 800b29a:	e16b      	b.n	800b574 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b29c:	2201      	movs	r2, #1
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	f040 815a 	bne.w	800b56e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	f003 0303 	and.w	r3, r3, #3
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d005      	beq.n	800b2d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d130      	bne.n	800b334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	005b      	lsls	r3, r3, #1
 800b2dc:	2203      	movs	r2, #3
 800b2de:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e2:	43db      	mvns	r3, r3
 800b2e4:	69ba      	ldr	r2, [r7, #24]
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	005b      	lsls	r3, r3, #1
 800b2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f6:	69ba      	ldr	r2, [r7, #24]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b308:	2201      	movs	r2, #1
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	fa02 f303 	lsl.w	r3, r2, r3
 800b310:	43db      	mvns	r3, r3
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	4013      	ands	r3, r2
 800b316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	091b      	lsrs	r3, r3, #4
 800b31e:	f003 0201 	and.w	r2, r3, #1
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	fa02 f303 	lsl.w	r3, r2, r3
 800b328:	69ba      	ldr	r2, [r7, #24]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	f003 0303 	and.w	r3, r3, #3
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d017      	beq.n	800b370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	2203      	movs	r2, #3
 800b34c:	fa02 f303 	lsl.w	r3, r2, r3
 800b350:	43db      	mvns	r3, r3
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	4013      	ands	r3, r2
 800b356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	689a      	ldr	r2, [r3, #8]
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	fa02 f303 	lsl.w	r3, r2, r3
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	4313      	orrs	r3, r2
 800b368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f003 0303 	and.w	r3, r3, #3
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d123      	bne.n	800b3c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	08da      	lsrs	r2, r3, #3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	3208      	adds	r2, #8
 800b384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	f003 0307 	and.w	r3, r3, #7
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	220f      	movs	r2, #15
 800b394:	fa02 f303 	lsl.w	r3, r2, r3
 800b398:	43db      	mvns	r3, r3
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	4013      	ands	r3, r2
 800b39e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	691a      	ldr	r2, [r3, #16]
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	f003 0307 	and.w	r3, r3, #7
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	08da      	lsrs	r2, r3, #3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3208      	adds	r2, #8
 800b3be:	69b9      	ldr	r1, [r7, #24]
 800b3c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	2203      	movs	r2, #3
 800b3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d4:	43db      	mvns	r3, r3
 800b3d6:	69ba      	ldr	r2, [r7, #24]
 800b3d8:	4013      	ands	r3, r2
 800b3da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f003 0203 	and.w	r2, r3, #3
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80b4 	beq.w	800b56e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]
 800b40a:	4b60      	ldr	r3, [pc, #384]	; (800b58c <HAL_GPIO_Init+0x30c>)
 800b40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40e:	4a5f      	ldr	r2, [pc, #380]	; (800b58c <HAL_GPIO_Init+0x30c>)
 800b410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b414:	6453      	str	r3, [r2, #68]	; 0x44
 800b416:	4b5d      	ldr	r3, [pc, #372]	; (800b58c <HAL_GPIO_Init+0x30c>)
 800b418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b41a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b422:	4a5b      	ldr	r2, [pc, #364]	; (800b590 <HAL_GPIO_Init+0x310>)
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	089b      	lsrs	r3, r3, #2
 800b428:	3302      	adds	r3, #2
 800b42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b42e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	f003 0303 	and.w	r3, r3, #3
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	220f      	movs	r2, #15
 800b43a:	fa02 f303 	lsl.w	r3, r2, r3
 800b43e:	43db      	mvns	r3, r3
 800b440:	69ba      	ldr	r2, [r7, #24]
 800b442:	4013      	ands	r3, r2
 800b444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a52      	ldr	r2, [pc, #328]	; (800b594 <HAL_GPIO_Init+0x314>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d02b      	beq.n	800b4a6 <HAL_GPIO_Init+0x226>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a51      	ldr	r2, [pc, #324]	; (800b598 <HAL_GPIO_Init+0x318>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d025      	beq.n	800b4a2 <HAL_GPIO_Init+0x222>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a50      	ldr	r2, [pc, #320]	; (800b59c <HAL_GPIO_Init+0x31c>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d01f      	beq.n	800b49e <HAL_GPIO_Init+0x21e>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a4f      	ldr	r2, [pc, #316]	; (800b5a0 <HAL_GPIO_Init+0x320>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d019      	beq.n	800b49a <HAL_GPIO_Init+0x21a>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a4e      	ldr	r2, [pc, #312]	; (800b5a4 <HAL_GPIO_Init+0x324>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d013      	beq.n	800b496 <HAL_GPIO_Init+0x216>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a4d      	ldr	r2, [pc, #308]	; (800b5a8 <HAL_GPIO_Init+0x328>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d00d      	beq.n	800b492 <HAL_GPIO_Init+0x212>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a4c      	ldr	r2, [pc, #304]	; (800b5ac <HAL_GPIO_Init+0x32c>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d007      	beq.n	800b48e <HAL_GPIO_Init+0x20e>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a4b      	ldr	r2, [pc, #300]	; (800b5b0 <HAL_GPIO_Init+0x330>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d101      	bne.n	800b48a <HAL_GPIO_Init+0x20a>
 800b486:	2307      	movs	r3, #7
 800b488:	e00e      	b.n	800b4a8 <HAL_GPIO_Init+0x228>
 800b48a:	2308      	movs	r3, #8
 800b48c:	e00c      	b.n	800b4a8 <HAL_GPIO_Init+0x228>
 800b48e:	2306      	movs	r3, #6
 800b490:	e00a      	b.n	800b4a8 <HAL_GPIO_Init+0x228>
 800b492:	2305      	movs	r3, #5
 800b494:	e008      	b.n	800b4a8 <HAL_GPIO_Init+0x228>
 800b496:	2304      	movs	r3, #4
 800b498:	e006      	b.n	800b4a8 <HAL_GPIO_Init+0x228>
 800b49a:	2303      	movs	r3, #3
 800b49c:	e004      	b.n	800b4a8 <HAL_GPIO_Init+0x228>
 800b49e:	2302      	movs	r3, #2
 800b4a0:	e002      	b.n	800b4a8 <HAL_GPIO_Init+0x228>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <HAL_GPIO_Init+0x228>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	69fa      	ldr	r2, [r7, #28]
 800b4aa:	f002 0203 	and.w	r2, r2, #3
 800b4ae:	0092      	lsls	r2, r2, #2
 800b4b0:	4093      	lsls	r3, r2
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b4b8:	4935      	ldr	r1, [pc, #212]	; (800b590 <HAL_GPIO_Init+0x310>)
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	089b      	lsrs	r3, r3, #2
 800b4be:	3302      	adds	r3, #2
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b4c6:	4b3b      	ldr	r3, [pc, #236]	; (800b5b4 <HAL_GPIO_Init+0x334>)
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	43db      	mvns	r3, r3
 800b4d0:	69ba      	ldr	r2, [r7, #24]
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b4ea:	4a32      	ldr	r2, [pc, #200]	; (800b5b4 <HAL_GPIO_Init+0x334>)
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b4f0:	4b30      	ldr	r3, [pc, #192]	; (800b5b4 <HAL_GPIO_Init+0x334>)
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	43db      	mvns	r3, r3
 800b4fa:	69ba      	ldr	r2, [r7, #24]
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b50c:	69ba      	ldr	r2, [r7, #24]
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	4313      	orrs	r3, r2
 800b512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b514:	4a27      	ldr	r2, [pc, #156]	; (800b5b4 <HAL_GPIO_Init+0x334>)
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b51a:	4b26      	ldr	r3, [pc, #152]	; (800b5b4 <HAL_GPIO_Init+0x334>)
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	43db      	mvns	r3, r3
 800b524:	69ba      	ldr	r2, [r7, #24]
 800b526:	4013      	ands	r3, r2
 800b528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b53e:	4a1d      	ldr	r2, [pc, #116]	; (800b5b4 <HAL_GPIO_Init+0x334>)
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b544:	4b1b      	ldr	r3, [pc, #108]	; (800b5b4 <HAL_GPIO_Init+0x334>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	43db      	mvns	r3, r3
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	4013      	ands	r3, r2
 800b552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d003      	beq.n	800b568 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	4313      	orrs	r3, r2
 800b566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b568:	4a12      	ldr	r2, [pc, #72]	; (800b5b4 <HAL_GPIO_Init+0x334>)
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	3301      	adds	r3, #1
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	2b0f      	cmp	r3, #15
 800b578:	f67f ae90 	bls.w	800b29c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b57c:	bf00      	nop
 800b57e:	bf00      	nop
 800b580:	3724      	adds	r7, #36	; 0x24
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	40023800 	.word	0x40023800
 800b590:	40013800 	.word	0x40013800
 800b594:	40020000 	.word	0x40020000
 800b598:	40020400 	.word	0x40020400
 800b59c:	40020800 	.word	0x40020800
 800b5a0:	40020c00 	.word	0x40020c00
 800b5a4:	40021000 	.word	0x40021000
 800b5a8:	40021400 	.word	0x40021400
 800b5ac:	40021800 	.word	0x40021800
 800b5b0:	40021c00 	.word	0x40021c00
 800b5b4:	40013c00 	.word	0x40013c00

0800b5b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	807b      	strh	r3, [r7, #2]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b5c8:	787b      	ldrb	r3, [r7, #1]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b5ce:	887a      	ldrh	r2, [r7, #2]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b5d4:	e003      	b.n	800b5de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b5d6:	887b      	ldrh	r3, [r7, #2]
 800b5d8:	041a      	lsls	r2, r3, #16
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	619a      	str	r2, [r3, #24]
}
 800b5de:	bf00      	nop
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
	...

0800b5ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b5f6:	4b08      	ldr	r3, [pc, #32]	; (800b618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b5f8:	695a      	ldr	r2, [r3, #20]
 800b5fa:	88fb      	ldrh	r3, [r7, #6]
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d006      	beq.n	800b610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b602:	4a05      	ldr	r2, [pc, #20]	; (800b618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b604:	88fb      	ldrh	r3, [r7, #6]
 800b606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b608:	88fb      	ldrh	r3, [r7, #6]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f6 fbf0 	bl	8001df0 <HAL_GPIO_EXTI_Callback>
  }
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	40013c00 	.word	0x40013c00

0800b61c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e12b      	b.n	800b886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d106      	bne.n	800b648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7f7 ff54 	bl	80034f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2224      	movs	r2, #36	; 0x24
 800b64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f022 0201 	bic.w	r2, r2, #1
 800b65e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b66e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b67e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b680:	f003 fc04 	bl	800ee8c <HAL_RCC_GetPCLK1Freq>
 800b684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	4a81      	ldr	r2, [pc, #516]	; (800b890 <HAL_I2C_Init+0x274>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d807      	bhi.n	800b6a0 <HAL_I2C_Init+0x84>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4a80      	ldr	r2, [pc, #512]	; (800b894 <HAL_I2C_Init+0x278>)
 800b694:	4293      	cmp	r3, r2
 800b696:	bf94      	ite	ls
 800b698:	2301      	movls	r3, #1
 800b69a:	2300      	movhi	r3, #0
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	e006      	b.n	800b6ae <HAL_I2C_Init+0x92>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	4a7d      	ldr	r2, [pc, #500]	; (800b898 <HAL_I2C_Init+0x27c>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	bf94      	ite	ls
 800b6a8:	2301      	movls	r3, #1
 800b6aa:	2300      	movhi	r3, #0
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e0e7      	b.n	800b886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	4a78      	ldr	r2, [pc, #480]	; (800b89c <HAL_I2C_Init+0x280>)
 800b6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b6be:	0c9b      	lsrs	r3, r3, #18
 800b6c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	430a      	orrs	r2, r1
 800b6d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6a1b      	ldr	r3, [r3, #32]
 800b6dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	4a6a      	ldr	r2, [pc, #424]	; (800b890 <HAL_I2C_Init+0x274>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d802      	bhi.n	800b6f0 <HAL_I2C_Init+0xd4>
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	e009      	b.n	800b704 <HAL_I2C_Init+0xe8>
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b6f6:	fb02 f303 	mul.w	r3, r2, r3
 800b6fa:	4a69      	ldr	r2, [pc, #420]	; (800b8a0 <HAL_I2C_Init+0x284>)
 800b6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b700:	099b      	lsrs	r3, r3, #6
 800b702:	3301      	adds	r3, #1
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	6812      	ldr	r2, [r2, #0]
 800b708:	430b      	orrs	r3, r1
 800b70a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	495c      	ldr	r1, [pc, #368]	; (800b890 <HAL_I2C_Init+0x274>)
 800b720:	428b      	cmp	r3, r1
 800b722:	d819      	bhi.n	800b758 <HAL_I2C_Init+0x13c>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	1e59      	subs	r1, r3, #1
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b732:	1c59      	adds	r1, r3, #1
 800b734:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b738:	400b      	ands	r3, r1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00a      	beq.n	800b754 <HAL_I2C_Init+0x138>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	1e59      	subs	r1, r3, #1
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	fbb1 f3f3 	udiv	r3, r1, r3
 800b74c:	3301      	adds	r3, #1
 800b74e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b752:	e051      	b.n	800b7f8 <HAL_I2C_Init+0x1dc>
 800b754:	2304      	movs	r3, #4
 800b756:	e04f      	b.n	800b7f8 <HAL_I2C_Init+0x1dc>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d111      	bne.n	800b784 <HAL_I2C_Init+0x168>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	1e58      	subs	r0, r3, #1
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6859      	ldr	r1, [r3, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	440b      	add	r3, r1
 800b76e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b772:	3301      	adds	r3, #1
 800b774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b778:	2b00      	cmp	r3, #0
 800b77a:	bf0c      	ite	eq
 800b77c:	2301      	moveq	r3, #1
 800b77e:	2300      	movne	r3, #0
 800b780:	b2db      	uxtb	r3, r3
 800b782:	e012      	b.n	800b7aa <HAL_I2C_Init+0x18e>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	1e58      	subs	r0, r3, #1
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6859      	ldr	r1, [r3, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	440b      	add	r3, r1
 800b792:	0099      	lsls	r1, r3, #2
 800b794:	440b      	add	r3, r1
 800b796:	fbb0 f3f3 	udiv	r3, r0, r3
 800b79a:	3301      	adds	r3, #1
 800b79c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	bf0c      	ite	eq
 800b7a4:	2301      	moveq	r3, #1
 800b7a6:	2300      	movne	r3, #0
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <HAL_I2C_Init+0x196>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e022      	b.n	800b7f8 <HAL_I2C_Init+0x1dc>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10e      	bne.n	800b7d8 <HAL_I2C_Init+0x1bc>
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	1e58      	subs	r0, r3, #1
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6859      	ldr	r1, [r3, #4]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	440b      	add	r3, r1
 800b7c8:	fbb0 f3f3 	udiv	r3, r0, r3
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d6:	e00f      	b.n	800b7f8 <HAL_I2C_Init+0x1dc>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	1e58      	subs	r0, r3, #1
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6859      	ldr	r1, [r3, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	440b      	add	r3, r1
 800b7e6:	0099      	lsls	r1, r3, #2
 800b7e8:	440b      	add	r3, r1
 800b7ea:	fbb0 f3f3 	udiv	r3, r0, r3
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b7f8:	6879      	ldr	r1, [r7, #4]
 800b7fa:	6809      	ldr	r1, [r1, #0]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	69da      	ldr	r2, [r3, #28]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	431a      	orrs	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	430a      	orrs	r2, r1
 800b81a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	6911      	ldr	r1, [r2, #16]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	68d2      	ldr	r2, [r2, #12]
 800b832:	4311      	orrs	r1, r2
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	6812      	ldr	r2, [r2, #0]
 800b838:	430b      	orrs	r3, r1
 800b83a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	695a      	ldr	r2, [r3, #20]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	431a      	orrs	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	430a      	orrs	r2, r1
 800b856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f042 0201 	orr.w	r2, r2, #1
 800b866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2220      	movs	r2, #32
 800b872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	000186a0 	.word	0x000186a0
 800b894:	001e847f 	.word	0x001e847f
 800b898:	003d08ff 	.word	0x003d08ff
 800b89c:	431bde83 	.word	0x431bde83
 800b8a0:	10624dd3 	.word	0x10624dd3

0800b8a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af02      	add	r7, sp, #8
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	817b      	strh	r3, [r7, #10]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	813b      	strh	r3, [r7, #8]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8be:	f7fd fedd 	bl	800967c <HAL_GetTick>
 800b8c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b20      	cmp	r3, #32
 800b8ce:	f040 80d9 	bne.w	800ba84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	2319      	movs	r3, #25
 800b8d8:	2201      	movs	r2, #1
 800b8da:	496d      	ldr	r1, [pc, #436]	; (800ba90 <HAL_I2C_Mem_Write+0x1ec>)
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f001 fa4b 	bl	800cd78 <I2C_WaitOnFlagUntilTimeout>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	e0cc      	b.n	800ba86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_I2C_Mem_Write+0x56>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e0c5      	b.n	800ba86 <HAL_I2C_Mem_Write+0x1e2>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 0301 	and.w	r3, r3, #1
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d007      	beq.n	800b920 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f042 0201 	orr.w	r2, r2, #1
 800b91e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b92e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2221      	movs	r2, #33	; 0x21
 800b934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2240      	movs	r2, #64	; 0x40
 800b93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6a3a      	ldr	r2, [r7, #32]
 800b94a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b956:	b29a      	uxth	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	4a4d      	ldr	r2, [pc, #308]	; (800ba94 <HAL_I2C_Mem_Write+0x1f0>)
 800b960:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b962:	88f8      	ldrh	r0, [r7, #6]
 800b964:	893a      	ldrh	r2, [r7, #8]
 800b966:	8979      	ldrh	r1, [r7, #10]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	4603      	mov	r3, r0
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f000 fec8 	bl	800c708 <I2C_RequestMemoryWrite>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d052      	beq.n	800ba24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	e081      	b.n	800ba86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f001 facc 	bl	800cf24 <I2C_WaitOnTXEFlagUntilTimeout>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00d      	beq.n	800b9ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b996:	2b04      	cmp	r3, #4
 800b998:	d107      	bne.n	800b9aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e06b      	b.n	800ba86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	781a      	ldrb	r2, [r3, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	1c5a      	adds	r2, r3, #1
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	f003 0304 	and.w	r3, r3, #4
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	d11b      	bne.n	800ba24 <HAL_I2C_Mem_Write+0x180>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d017      	beq.n	800ba24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	781a      	ldrb	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1aa      	bne.n	800b982 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f001 fab8 	bl	800cfa6 <I2C_WaitOnBTFFlagUntilTimeout>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00d      	beq.n	800ba58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	d107      	bne.n	800ba54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e016      	b.n	800ba86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	e000      	b.n	800ba86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ba84:	2302      	movs	r3, #2
  }
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	00100002 	.word	0x00100002
 800ba94:	ffff0000 	.word	0xffff0000

0800ba98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b08c      	sub	sp, #48	; 0x30
 800ba9c:	af02      	add	r7, sp, #8
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	4608      	mov	r0, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	461a      	mov	r2, r3
 800baa6:	4603      	mov	r3, r0
 800baa8:	817b      	strh	r3, [r7, #10]
 800baaa:	460b      	mov	r3, r1
 800baac:	813b      	strh	r3, [r7, #8]
 800baae:	4613      	mov	r3, r2
 800bab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bab2:	f7fd fde3 	bl	800967c <HAL_GetTick>
 800bab6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b20      	cmp	r3, #32
 800bac2:	f040 8208 	bne.w	800bed6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	2319      	movs	r3, #25
 800bacc:	2201      	movs	r2, #1
 800bace:	497b      	ldr	r1, [pc, #492]	; (800bcbc <HAL_I2C_Mem_Read+0x224>)
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f001 f951 	bl	800cd78 <I2C_WaitOnFlagUntilTimeout>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800badc:	2302      	movs	r3, #2
 800bade:	e1fb      	b.n	800bed8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d101      	bne.n	800baee <HAL_I2C_Mem_Read+0x56>
 800baea:	2302      	movs	r3, #2
 800baec:	e1f4      	b.n	800bed8 <HAL_I2C_Mem_Read+0x440>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2201      	movs	r2, #1
 800baf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d007      	beq.n	800bb14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f042 0201 	orr.w	r2, r2, #1
 800bb12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2222      	movs	r2, #34	; 0x22
 800bb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2240      	movs	r2, #64	; 0x40
 800bb30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800bb44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a5b      	ldr	r2, [pc, #364]	; (800bcc0 <HAL_I2C_Mem_Read+0x228>)
 800bb54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bb56:	88f8      	ldrh	r0, [r7, #6]
 800bb58:	893a      	ldrh	r2, [r7, #8]
 800bb5a:	8979      	ldrh	r1, [r7, #10]
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	4603      	mov	r3, r0
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f000 fe64 	bl	800c834 <I2C_RequestMemoryRead>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e1b0      	b.n	800bed8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d113      	bne.n	800bba6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb7e:	2300      	movs	r3, #0
 800bb80:	623b      	str	r3, [r7, #32]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	623b      	str	r3, [r7, #32]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	623b      	str	r3, [r7, #32]
 800bb92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bba2:	601a      	str	r2, [r3, #0]
 800bba4:	e184      	b.n	800beb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d11b      	bne.n	800bbe6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	61fb      	str	r3, [r7, #28]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	61fb      	str	r3, [r7, #28]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	61fb      	str	r3, [r7, #28]
 800bbd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	e164      	b.n	800beb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d11b      	bne.n	800bc26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc0e:	2300      	movs	r3, #0
 800bc10:	61bb      	str	r3, [r7, #24]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	61bb      	str	r3, [r7, #24]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	61bb      	str	r3, [r7, #24]
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	e144      	b.n	800beb0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc26:	2300      	movs	r3, #0
 800bc28:	617b      	str	r3, [r7, #20]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	695b      	ldr	r3, [r3, #20]
 800bc30:	617b      	str	r3, [r7, #20]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bc3c:	e138      	b.n	800beb0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	f200 80f1 	bhi.w	800be2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d123      	bne.n	800bc98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f001 f9e7 	bl	800d028 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e139      	b.n	800bed8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	691a      	ldr	r2, [r3, #16]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6e:	b2d2      	uxtb	r2, r2
 800bc70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	1c5a      	adds	r2, r3, #1
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc80:	3b01      	subs	r3, #1
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc96:	e10b      	b.n	800beb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d14e      	bne.n	800bd3e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca6:	2200      	movs	r2, #0
 800bca8:	4906      	ldr	r1, [pc, #24]	; (800bcc4 <HAL_I2C_Mem_Read+0x22c>)
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f001 f864 	bl	800cd78 <I2C_WaitOnFlagUntilTimeout>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d008      	beq.n	800bcc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e10e      	b.n	800bed8 <HAL_I2C_Mem_Read+0x440>
 800bcba:	bf00      	nop
 800bcbc:	00100002 	.word	0x00100002
 800bcc0:	ffff0000 	.word	0xffff0000
 800bcc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	691a      	ldr	r2, [r3, #16]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	3b01      	subs	r3, #1
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	691a      	ldr	r2, [r3, #16]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	b2d2      	uxtb	r2, r2
 800bd16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1c:	1c5a      	adds	r2, r3, #1
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd26:	3b01      	subs	r3, #1
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	3b01      	subs	r3, #1
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd3c:	e0b8      	b.n	800beb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd44:	2200      	movs	r2, #0
 800bd46:	4966      	ldr	r1, [pc, #408]	; (800bee0 <HAL_I2C_Mem_Read+0x448>)
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f001 f815 	bl	800cd78 <I2C_WaitOnFlagUntilTimeout>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e0bf      	b.n	800bed8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	691a      	ldr	r2, [r3, #16]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	b2d2      	uxtb	r2, r2
 800bd74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	3b01      	subs	r3, #1
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda0:	2200      	movs	r2, #0
 800bda2:	494f      	ldr	r1, [pc, #316]	; (800bee0 <HAL_I2C_Mem_Read+0x448>)
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 ffe7 	bl	800cd78 <I2C_WaitOnFlagUntilTimeout>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e091      	b.n	800bed8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	691a      	ldr	r2, [r3, #16]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdce:	b2d2      	uxtb	r2, r2
 800bdd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bde0:	3b01      	subs	r3, #1
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	691a      	ldr	r2, [r3, #16]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	b2d2      	uxtb	r2, r2
 800be02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	1c5a      	adds	r2, r3, #1
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be12:	3b01      	subs	r3, #1
 800be14:	b29a      	uxth	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be1e:	b29b      	uxth	r3, r3
 800be20:	3b01      	subs	r3, #1
 800be22:	b29a      	uxth	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	855a      	strh	r2, [r3, #42]	; 0x2a
 800be28:	e042      	b.n	800beb0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f001 f8fa 	bl	800d028 <I2C_WaitOnRXNEFlagUntilTimeout>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	e04c      	b.n	800bed8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	691a      	ldr	r2, [r3, #16]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be48:	b2d2      	uxtb	r2, r2
 800be4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be50:	1c5a      	adds	r2, r3, #1
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be5a:	3b01      	subs	r3, #1
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be66:	b29b      	uxth	r3, r3
 800be68:	3b01      	subs	r3, #1
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	f003 0304 	and.w	r3, r3, #4
 800be7a:	2b04      	cmp	r3, #4
 800be7c:	d118      	bne.n	800beb0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	691a      	ldr	r2, [r3, #16]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be88:	b2d2      	uxtb	r2, r2
 800be8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be9a:	3b01      	subs	r3, #1
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	3b01      	subs	r3, #1
 800beaa:	b29a      	uxth	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f47f aec2 	bne.w	800bc3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2220      	movs	r2, #32
 800bebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	e000      	b.n	800bed8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bed6:	2302      	movs	r3, #2
  }
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3728      	adds	r7, #40	; 0x28
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	00010004 	.word	0x00010004

0800bee4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08c      	sub	sp, #48	; 0x30
 800bee8:	af02      	add	r7, sp, #8
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	4608      	mov	r0, r1
 800beee:	4611      	mov	r1, r2
 800bef0:	461a      	mov	r2, r3
 800bef2:	4603      	mov	r3, r0
 800bef4:	817b      	strh	r3, [r7, #10]
 800bef6:	460b      	mov	r3, r1
 800bef8:	813b      	strh	r3, [r7, #8]
 800befa:	4613      	mov	r3, r2
 800befc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800befe:	f7fd fbbd 	bl	800967c <HAL_GetTick>
 800bf02:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800bf04:	2300      	movs	r3, #0
 800bf06:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b20      	cmp	r3, #32
 800bf12:	f040 8176 	bne.w	800c202 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800bf16:	4b95      	ldr	r3, [pc, #596]	; (800c16c <HAL_I2C_Mem_Read_DMA+0x288>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	08db      	lsrs	r3, r3, #3
 800bf1c:	4a94      	ldr	r2, [pc, #592]	; (800c170 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800bf1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf22:	0a1a      	lsrs	r2, r3, #8
 800bf24:	4613      	mov	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	009a      	lsls	r2, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d116      	bne.n	800bf6a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2220      	movs	r2, #32
 800bf46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf56:	f043 0220 	orr.w	r2, r3, #32
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	e14c      	b.n	800c204 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	f003 0302 	and.w	r3, r3, #2
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d0db      	beq.n	800bf30 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d101      	bne.n	800bf86 <HAL_I2C_Mem_Read_DMA+0xa2>
 800bf82:	2302      	movs	r3, #2
 800bf84:	e13e      	b.n	800c204 <HAL_I2C_Mem_Read_DMA+0x320>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d007      	beq.n	800bfac <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f042 0201 	orr.w	r2, r2, #1
 800bfaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2222      	movs	r2, #34	; 0x22
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2240      	movs	r2, #64	; 0x40
 800bfc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800bfdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	4a62      	ldr	r2, [pc, #392]	; (800c174 <HAL_I2C_Mem_Read_DMA+0x290>)
 800bfec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800bfee:	897a      	ldrh	r2, [r7, #10]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800bff4:	893a      	ldrh	r2, [r7, #8]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800bffa:	88fa      	ldrh	r2, [r7, #6]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 80cc 	beq.w	800c1a8 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c014:	2b00      	cmp	r3, #0
 800c016:	d02d      	beq.n	800c074 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01c:	4a56      	ldr	r2, [pc, #344]	; (800c178 <HAL_I2C_Mem_Read_DMA+0x294>)
 800c01e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c024:	4a55      	ldr	r2, [pc, #340]	; (800c17c <HAL_I2C_Mem_Read_DMA+0x298>)
 800c026:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02c:	2200      	movs	r2, #0
 800c02e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c034:	2200      	movs	r2, #0
 800c036:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03c:	2200      	movs	r2, #0
 800c03e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c044:	2200      	movs	r2, #0
 800c046:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3310      	adds	r3, #16
 800c052:	4619      	mov	r1, r3
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c058:	461a      	mov	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c05e:	f7fe fdaf 	bl	800abc0 <HAL_DMA_Start_IT>
 800c062:	4603      	mov	r3, r0
 800c064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c068:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f040 8087 	bne.w	800c180 <HAL_I2C_Mem_Read_DMA+0x29c>
 800c072:	e013      	b.n	800c09c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2220      	movs	r2, #32
 800c078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c088:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	e0b3      	b.n	800c204 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800c09c:	88f8      	ldrh	r0, [r7, #6]
 800c09e:	893a      	ldrh	r2, [r7, #8]
 800c0a0:	8979      	ldrh	r1, [r7, #10]
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	2323      	movs	r3, #35	; 0x23
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f000 fbc1 	bl	800c834 <I2C_RequestMemoryRead>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d023      	beq.n	800c100 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fe fe47 	bl	800ad50 <HAL_DMA_Abort_IT>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0de:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f022 0201 	bic.w	r2, r2, #1
 800c0fa:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e081      	b.n	800c204 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c104:	2b01      	cmp	r3, #1
 800c106:	d108      	bne.n	800c11a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	e007      	b.n	800c12a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c128:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c12a:	2300      	movs	r3, #0
 800c12c:	61bb      	str	r3, [r7, #24]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	61bb      	str	r3, [r7, #24]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	61bb      	str	r3, [r7, #24]
 800c13e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	685a      	ldr	r2, [r3, #4]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c156:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c166:	605a      	str	r2, [r3, #4]
 800c168:	e049      	b.n	800c1fe <HAL_I2C_Mem_Read_DMA+0x31a>
 800c16a:	bf00      	nop
 800c16c:	20000004 	.word	0x20000004
 800c170:	14f8b589 	.word	0x14f8b589
 800c174:	ffff0000 	.word	0xffff0000
 800c178:	0800ca05 	.word	0x0800ca05
 800c17c:	0800cbaf 	.word	0x0800cbaf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2220      	movs	r2, #32
 800c184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c194:	f043 0210 	orr.w	r2, r3, #16
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e02d      	b.n	800c204 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800c1a8:	88f8      	ldrh	r0, [r7, #6]
 800c1aa:	893a      	ldrh	r2, [r7, #8]
 800c1ac:	8979      	ldrh	r1, [r7, #10]
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b0:	9301      	str	r3, [sp, #4]
 800c1b2:	2323      	movs	r3, #35	; 0x23
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f000 fb3b 	bl	800c834 <I2C_RequestMemoryRead>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e01d      	b.n	800c204 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	617b      	str	r3, [r7, #20]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	617b      	str	r3, [r7, #20]
 800c1dc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1ec:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2220      	movs	r2, #32
 800c1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	e000      	b.n	800c204 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800c202:	2302      	movs	r3, #2
  }
}
 800c204:	4618      	mov	r0, r3
 800c206:	3728      	adds	r7, #40	; 0x28
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08a      	sub	sp, #40	; 0x28
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c224:	2300      	movs	r3, #0
 800c226:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c22e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c230:	6a3b      	ldr	r3, [r7, #32]
 800c232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00d      	beq.n	800c256 <HAL_I2C_ER_IRQHandler+0x4a>
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c240:	2b00      	cmp	r3, #0
 800c242:	d008      	beq.n	800c256 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c246:	f043 0301 	orr.w	r3, r3, #1
 800c24a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c254:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00d      	beq.n	800c27c <HAL_I2C_ER_IRQHandler+0x70>
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c266:	2b00      	cmp	r3, #0
 800c268:	d008      	beq.n	800c27c <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	f043 0302 	orr.w	r3, r3, #2
 800c270:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800c27a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c282:	2b00      	cmp	r3, #0
 800c284:	d03e      	beq.n	800c304 <HAL_I2C_ER_IRQHandler+0xf8>
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d039      	beq.n	800c304 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800c290:	7efb      	ldrb	r3, [r7, #27]
 800c292:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c298:	b29b      	uxth	r3, r3
 800c29a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2a2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c2aa:	7ebb      	ldrb	r3, [r7, #26]
 800c2ac:	2b20      	cmp	r3, #32
 800c2ae:	d112      	bne.n	800c2d6 <HAL_I2C_ER_IRQHandler+0xca>
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d10f      	bne.n	800c2d6 <HAL_I2C_ER_IRQHandler+0xca>
 800c2b6:	7cfb      	ldrb	r3, [r7, #19]
 800c2b8:	2b21      	cmp	r3, #33	; 0x21
 800c2ba:	d008      	beq.n	800c2ce <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c2bc:	7cfb      	ldrb	r3, [r7, #19]
 800c2be:	2b29      	cmp	r3, #41	; 0x29
 800c2c0:	d005      	beq.n	800c2ce <HAL_I2C_ER_IRQHandler+0xc2>
 800c2c2:	7cfb      	ldrb	r3, [r7, #19]
 800c2c4:	2b28      	cmp	r3, #40	; 0x28
 800c2c6:	d106      	bne.n	800c2d6 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2b21      	cmp	r3, #33	; 0x21
 800c2cc:	d103      	bne.n	800c2d6 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f878 	bl	800c3c4 <I2C_Slave_AF>
 800c2d4:	e016      	b.n	800c304 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c2de:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	f043 0304 	orr.w	r3, r3, #4
 800c2e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c2e8:	7efb      	ldrb	r3, [r7, #27]
 800c2ea:	2b10      	cmp	r3, #16
 800c2ec:	d002      	beq.n	800c2f4 <HAL_I2C_ER_IRQHandler+0xe8>
 800c2ee:	7efb      	ldrb	r3, [r7, #27]
 800c2f0:	2b40      	cmp	r3, #64	; 0x40
 800c2f2:	d107      	bne.n	800c304 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c302:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00d      	beq.n	800c32a <HAL_I2C_ER_IRQHandler+0x11e>
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c314:	2b00      	cmp	r3, #0
 800c316:	d008      	beq.n	800c32a <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	f043 0308 	orr.w	r3, r3, #8
 800c31e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c328:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d008      	beq.n	800c342 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c336:	431a      	orrs	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f8b1 	bl	800c4a4 <I2C_ITError>
  }
}
 800c342:	bf00      	nop
 800c344:	3728      	adds	r7, #40	; 0x28
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b083      	sub	sp, #12
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c352:	bf00      	nop
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c372:	b480      	push	{r7}
 800c374:	b083      	sub	sp, #12
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c37a:	bf00      	nop
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c386:	b480      	push	{r7}
 800c388:	b083      	sub	sp, #12
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c38e:	bf00      	nop
 800c390:	370c      	adds	r7, #12
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr

0800c39a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c39a:	b480      	push	{r7}
 800c39c:	b083      	sub	sp, #12
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c3a2:	bf00      	nop
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3ae:	b480      	push	{r7}
 800c3b0:	b083      	sub	sp, #12
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c3b6:	bf00      	nop
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
	...

0800c3c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	2b08      	cmp	r3, #8
 800c3de:	d002      	beq.n	800c3e6 <I2C_Slave_AF+0x22>
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b20      	cmp	r3, #32
 800c3e4:	d129      	bne.n	800c43a <I2C_Slave_AF+0x76>
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	2b28      	cmp	r3, #40	; 0x28
 800c3ea:	d126      	bne.n	800c43a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a2c      	ldr	r2, [pc, #176]	; (800c4a0 <I2C_Slave_AF+0xdc>)
 800c3f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	685a      	ldr	r2, [r3, #4]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c400:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c40a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c41a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2220      	movs	r2, #32
 800c426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff ffa7 	bl	800c386 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800c438:	e02e      	b.n	800c498 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	2b21      	cmp	r3, #33	; 0x21
 800c43e:	d126      	bne.n	800c48e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a17      	ldr	r2, [pc, #92]	; (800c4a0 <I2C_Slave_AF+0xdc>)
 800c444:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2221      	movs	r2, #33	; 0x21
 800c44a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2220      	movs	r2, #32
 800c450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c46a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c474:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c484:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7ff ff69 	bl	800c35e <HAL_I2C_SlaveTxCpltCallback>
}
 800c48c:	e004      	b.n	800c498 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c496:	615a      	str	r2, [r3, #20]
}
 800c498:	bf00      	nop
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	ffff0000 	.word	0xffff0000

0800c4a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c4bc:	7bbb      	ldrb	r3, [r7, #14]
 800c4be:	2b10      	cmp	r3, #16
 800c4c0:	d002      	beq.n	800c4c8 <I2C_ITError+0x24>
 800c4c2:	7bbb      	ldrb	r3, [r7, #14]
 800c4c4:	2b40      	cmp	r3, #64	; 0x40
 800c4c6:	d10a      	bne.n	800c4de <I2C_ITError+0x3a>
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ca:	2b22      	cmp	r3, #34	; 0x22
 800c4cc:	d107      	bne.n	800c4de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c4de:	7bfb      	ldrb	r3, [r7, #15]
 800c4e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c4e4:	2b28      	cmp	r3, #40	; 0x28
 800c4e6:	d107      	bne.n	800c4f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2228      	movs	r2, #40	; 0x28
 800c4f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c4f6:	e015      	b.n	800c524 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c506:	d00a      	beq.n	800c51e <I2C_ITError+0x7a>
 800c508:	7bfb      	ldrb	r3, [r7, #15]
 800c50a:	2b60      	cmp	r3, #96	; 0x60
 800c50c:	d007      	beq.n	800c51e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2220      	movs	r2, #32
 800c512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c52e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c532:	d162      	bne.n	800c5fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c542:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d020      	beq.n	800c594 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c556:	4a6a      	ldr	r2, [pc, #424]	; (800c700 <I2C_ITError+0x25c>)
 800c558:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fe fbf6 	bl	800ad50 <HAL_DMA_Abort_IT>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	f000 8089 	beq.w	800c67e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0201 	bic.w	r2, r2, #1
 800c57a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2220      	movs	r2, #32
 800c580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c58e:	4610      	mov	r0, r2
 800c590:	4798      	blx	r3
 800c592:	e074      	b.n	800c67e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c598:	4a59      	ldr	r2, [pc, #356]	; (800c700 <I2C_ITError+0x25c>)
 800c59a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fe fbd5 	bl	800ad50 <HAL_DMA_Abort_IT>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d068      	beq.n	800c67e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5b6:	2b40      	cmp	r3, #64	; 0x40
 800c5b8:	d10b      	bne.n	800c5d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	691a      	ldr	r2, [r3, #16]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	b2d2      	uxtb	r2, r2
 800c5c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f022 0201 	bic.w	r2, r2, #1
 800c5e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	4798      	blx	r3
 800c5f8:	e041      	b.n	800c67e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b60      	cmp	r3, #96	; 0x60
 800c604:	d125      	bne.n	800c652 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2220      	movs	r2, #32
 800c60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	695b      	ldr	r3, [r3, #20]
 800c61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61e:	2b40      	cmp	r3, #64	; 0x40
 800c620:	d10b      	bne.n	800c63a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	691a      	ldr	r2, [r3, #16]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62c:	b2d2      	uxtb	r2, r2
 800c62e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c634:	1c5a      	adds	r2, r3, #1
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f022 0201 	bic.w	r2, r2, #1
 800c648:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff feaf 	bl	800c3ae <HAL_I2C_AbortCpltCallback>
 800c650:	e015      	b.n	800c67e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c65c:	2b40      	cmp	r3, #64	; 0x40
 800c65e:	d10b      	bne.n	800c678 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	691a      	ldr	r2, [r3, #16]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66a:	b2d2      	uxtb	r2, r2
 800c66c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff fe8e 	bl	800c39a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c682:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10e      	bne.n	800c6ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c694:	2b00      	cmp	r3, #0
 800c696:	d109      	bne.n	800c6ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d104      	bne.n	800c6ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d007      	beq.n	800c6bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	685a      	ldr	r2, [r3, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c6ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c8:	f003 0304 	and.w	r3, r3, #4
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	d113      	bne.n	800c6f8 <I2C_ITError+0x254>
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	2b28      	cmp	r3, #40	; 0x28
 800c6d4:	d110      	bne.n	800c6f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a0a      	ldr	r2, [pc, #40]	; (800c704 <I2C_ITError+0x260>)
 800c6da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2220      	movs	r2, #32
 800c6e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7ff fe47 	bl	800c386 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c6f8:	bf00      	nop
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	0800cc29 	.word	0x0800cc29
 800c704:	ffff0000 	.word	0xffff0000

0800c708 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b088      	sub	sp, #32
 800c70c:	af02      	add	r7, sp, #8
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	4608      	mov	r0, r1
 800c712:	4611      	mov	r1, r2
 800c714:	461a      	mov	r2, r3
 800c716:	4603      	mov	r3, r0
 800c718:	817b      	strh	r3, [r7, #10]
 800c71a:	460b      	mov	r3, r1
 800c71c:	813b      	strh	r3, [r7, #8]
 800c71e:	4613      	mov	r3, r2
 800c720:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c730:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	6a3b      	ldr	r3, [r7, #32]
 800c738:	2200      	movs	r2, #0
 800c73a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f000 fb1a 	bl	800cd78 <I2C_WaitOnFlagUntilTimeout>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00d      	beq.n	800c766 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c758:	d103      	bne.n	800c762 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c760:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e05f      	b.n	800c826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c766:	897b      	ldrh	r3, [r7, #10]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	461a      	mov	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c774:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c778:	6a3a      	ldr	r2, [r7, #32]
 800c77a:	492d      	ldr	r1, [pc, #180]	; (800c830 <I2C_RequestMemoryWrite+0x128>)
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f000 fb52 	bl	800ce26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d001      	beq.n	800c78c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	e04c      	b.n	800c826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c78c:	2300      	movs	r3, #0
 800c78e:	617b      	str	r3, [r7, #20]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	617b      	str	r3, [r7, #20]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	699b      	ldr	r3, [r3, #24]
 800c79e:	617b      	str	r3, [r7, #20]
 800c7a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a4:	6a39      	ldr	r1, [r7, #32]
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f000 fbbc 	bl	800cf24 <I2C_WaitOnTXEFlagUntilTimeout>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00d      	beq.n	800c7ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b6:	2b04      	cmp	r3, #4
 800c7b8:	d107      	bne.n	800c7ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e02b      	b.n	800c826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c7ce:	88fb      	ldrh	r3, [r7, #6]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d105      	bne.n	800c7e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c7d4:	893b      	ldrh	r3, [r7, #8]
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	611a      	str	r2, [r3, #16]
 800c7de:	e021      	b.n	800c824 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c7e0:	893b      	ldrh	r3, [r7, #8]
 800c7e2:	0a1b      	lsrs	r3, r3, #8
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f0:	6a39      	ldr	r1, [r7, #32]
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f000 fb96 	bl	800cf24 <I2C_WaitOnTXEFlagUntilTimeout>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00d      	beq.n	800c81a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c802:	2b04      	cmp	r3, #4
 800c804:	d107      	bne.n	800c816 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c814:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c816:	2301      	movs	r3, #1
 800c818:	e005      	b.n	800c826 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c81a:	893b      	ldrh	r3, [r7, #8]
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3718      	adds	r7, #24
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	00010002 	.word	0x00010002

0800c834 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af02      	add	r7, sp, #8
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	4608      	mov	r0, r1
 800c83e:	4611      	mov	r1, r2
 800c840:	461a      	mov	r2, r3
 800c842:	4603      	mov	r3, r0
 800c844:	817b      	strh	r3, [r7, #10]
 800c846:	460b      	mov	r3, r1
 800c848:	813b      	strh	r3, [r7, #8]
 800c84a:	4613      	mov	r3, r2
 800c84c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c85c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c86c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	6a3b      	ldr	r3, [r7, #32]
 800c874:	2200      	movs	r2, #0
 800c876:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f000 fa7c 	bl	800cd78 <I2C_WaitOnFlagUntilTimeout>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00d      	beq.n	800c8a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c894:	d103      	bne.n	800c89e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c89c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e0aa      	b.n	800c9f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c8a2:	897b      	ldrh	r3, [r7, #10]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c8b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	6a3a      	ldr	r2, [r7, #32]
 800c8b6:	4952      	ldr	r1, [pc, #328]	; (800ca00 <I2C_RequestMemoryRead+0x1cc>)
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f000 fab4 	bl	800ce26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e097      	b.n	800c9f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	617b      	str	r3, [r7, #20]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	617b      	str	r3, [r7, #20]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	617b      	str	r3, [r7, #20]
 800c8dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c8de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8e0:	6a39      	ldr	r1, [r7, #32]
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f000 fb1e 	bl	800cf24 <I2C_WaitOnTXEFlagUntilTimeout>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00d      	beq.n	800c90a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	d107      	bne.n	800c906 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e076      	b.n	800c9f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c90a:	88fb      	ldrh	r3, [r7, #6]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d105      	bne.n	800c91c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c910:	893b      	ldrh	r3, [r7, #8]
 800c912:	b2da      	uxtb	r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	611a      	str	r2, [r3, #16]
 800c91a:	e021      	b.n	800c960 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c91c:	893b      	ldrh	r3, [r7, #8]
 800c91e:	0a1b      	lsrs	r3, r3, #8
 800c920:	b29b      	uxth	r3, r3
 800c922:	b2da      	uxtb	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c92a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c92c:	6a39      	ldr	r1, [r7, #32]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f000 faf8 	bl	800cf24 <I2C_WaitOnTXEFlagUntilTimeout>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00d      	beq.n	800c956 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d107      	bne.n	800c952 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	e050      	b.n	800c9f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c956:	893b      	ldrh	r3, [r7, #8]
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c962:	6a39      	ldr	r1, [r7, #32]
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 fadd 	bl	800cf24 <I2C_WaitOnTXEFlagUntilTimeout>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00d      	beq.n	800c98c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c974:	2b04      	cmp	r3, #4
 800c976:	d107      	bne.n	800c988 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c986:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c988:	2301      	movs	r3, #1
 800c98a:	e035      	b.n	800c9f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c99a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f000 f9e5 	bl	800cd78 <I2C_WaitOnFlagUntilTimeout>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00d      	beq.n	800c9d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9c2:	d103      	bne.n	800c9cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e013      	b.n	800c9f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c9d0:	897b      	ldrh	r3, [r7, #10]
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	f043 0301 	orr.w	r3, r3, #1
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	6a3a      	ldr	r2, [r7, #32]
 800c9e4:	4906      	ldr	r1, [pc, #24]	; (800ca00 <I2C_RequestMemoryRead+0x1cc>)
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f000 fa1d 	bl	800ce26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e000      	b.n	800c9f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3718      	adds	r7, #24
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	00010002 	.word	0x00010002

0800ca04 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca18:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca20:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca26:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	685a      	ldr	r2, [r3, #4]
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ca36:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d003      	beq.n	800ca48 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca44:	2200      	movs	r2, #0
 800ca46:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca54:	2200      	movs	r2, #0
 800ca56:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800ca58:	7cfb      	ldrb	r3, [r7, #19]
 800ca5a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800ca5e:	2b21      	cmp	r3, #33	; 0x21
 800ca60:	d007      	beq.n	800ca72 <I2C_DMAXferCplt+0x6e>
 800ca62:	7cfb      	ldrb	r3, [r7, #19]
 800ca64:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800ca68:	2b22      	cmp	r3, #34	; 0x22
 800ca6a:	d131      	bne.n	800cad0 <I2C_DMAXferCplt+0xcc>
 800ca6c:	7cbb      	ldrb	r3, [r7, #18]
 800ca6e:	2b20      	cmp	r3, #32
 800ca70:	d12e      	bne.n	800cad0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca80:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	2200      	movs	r2, #0
 800ca86:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ca88:	7cfb      	ldrb	r3, [r7, #19]
 800ca8a:	2b29      	cmp	r3, #41	; 0x29
 800ca8c:	d10a      	bne.n	800caa4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2221      	movs	r2, #33	; 0x21
 800ca92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2228      	movs	r2, #40	; 0x28
 800ca98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ca9c:	6978      	ldr	r0, [r7, #20]
 800ca9e:	f7ff fc5e 	bl	800c35e <HAL_I2C_SlaveTxCpltCallback>
 800caa2:	e00c      	b.n	800cabe <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800caa4:	7cfb      	ldrb	r3, [r7, #19]
 800caa6:	2b2a      	cmp	r3, #42	; 0x2a
 800caa8:	d109      	bne.n	800cabe <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2222      	movs	r2, #34	; 0x22
 800caae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2228      	movs	r2, #40	; 0x28
 800cab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cab8:	6978      	ldr	r0, [r7, #20]
 800caba:	f7ff fc5a 	bl	800c372 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	685a      	ldr	r2, [r3, #4]
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cacc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800cace:	e06a      	b.n	800cba6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d064      	beq.n	800cba6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d107      	bne.n	800caf6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caf4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800cb04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cb0c:	d009      	beq.n	800cb22 <I2C_DMAXferCplt+0x11e>
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2b08      	cmp	r3, #8
 800cb12:	d006      	beq.n	800cb22 <I2C_DMAXferCplt+0x11e>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800cb1a:	d002      	beq.n	800cb22 <I2C_DMAXferCplt+0x11e>
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b20      	cmp	r3, #32
 800cb20:	d107      	bne.n	800cb32 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb30:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	685a      	ldr	r2, [r3, #4]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb40:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	685a      	ldr	r2, [r3, #4]
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb50:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	2200      	movs	r2, #0
 800cb56:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800cb60:	6978      	ldr	r0, [r7, #20]
 800cb62:	f7ff fc1a 	bl	800c39a <HAL_I2C_ErrorCallback>
}
 800cb66:	e01e      	b.n	800cba6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	2220      	movs	r2, #32
 800cb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b40      	cmp	r3, #64	; 0x40
 800cb7a:	d10a      	bne.n	800cb92 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	2200      	movs	r2, #0
 800cb88:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800cb8a:	6978      	ldr	r0, [r7, #20]
 800cb8c:	f7f5 f962 	bl	8001e54 <HAL_I2C_MemRxCpltCallback>
}
 800cb90:	e009      	b.n	800cba6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2212      	movs	r2, #18
 800cb9e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800cba0:	6978      	ldr	r0, [r7, #20]
 800cba2:	f7ff fbd2 	bl	800c34a <HAL_I2C_MasterRxCpltCallback>
}
 800cba6:	bf00      	nop
 800cba8:	3718      	adds	r7, #24
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbba:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc8:	2200      	movs	r2, #0
 800cbca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd8:	2200      	movs	r2, #0
 800cbda:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7fe fa63 	bl	800b0a8 <HAL_DMA_GetError>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d01b      	beq.n	800cc20 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbf6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2220      	movs	r2, #32
 800cc02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc12:	f043 0210 	orr.w	r2, r3, #16
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f7ff fbbd 	bl	800c39a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cc20:	bf00      	nop
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc30:	2300      	movs	r3, #0
 800cc32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc40:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800cc42:	4b4b      	ldr	r3, [pc, #300]	; (800cd70 <I2C_DMAAbort+0x148>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	08db      	lsrs	r3, r3, #3
 800cc48:	4a4a      	ldr	r2, [pc, #296]	; (800cd74 <I2C_DMAAbort+0x14c>)
 800cc4a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc4e:	0a1a      	lsrs	r2, r3, #8
 800cc50:	4613      	mov	r3, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	00da      	lsls	r2, r3, #3
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d106      	bne.n	800cc70 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc66:	f043 0220 	orr.w	r2, r3, #32
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800cc6e:	e00a      	b.n	800cc86 <I2C_DMAAbort+0x5e>
    }
    count--;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	3b01      	subs	r3, #1
 800cc74:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc84:	d0ea      	beq.n	800cc5c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc92:	2200      	movs	r2, #0
 800cc94:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d003      	beq.n	800cca6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca2:	2200      	movs	r2, #0
 800cca4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccb4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d003      	beq.n	800cccc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc8:	2200      	movs	r2, #0
 800ccca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d003      	beq.n	800ccdc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd8:	2200      	movs	r2, #0
 800ccda:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f022 0201 	bic.w	r2, r2, #1
 800ccea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b60      	cmp	r3, #96	; 0x60
 800ccf6:	d10e      	bne.n	800cd16 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	2220      	movs	r2, #32
 800ccfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cd0e:	6978      	ldr	r0, [r7, #20]
 800cd10:	f7ff fb4d 	bl	800c3ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cd14:	e027      	b.n	800cd66 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cd16:	7cfb      	ldrb	r3, [r7, #19]
 800cd18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cd1c:	2b28      	cmp	r3, #40	; 0x28
 800cd1e:	d117      	bne.n	800cd50 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f042 0201 	orr.w	r2, r2, #1
 800cd2e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	2200      	movs	r2, #0
 800cd44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2228      	movs	r2, #40	; 0x28
 800cd4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cd4e:	e007      	b.n	800cd60 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2220      	movs	r2, #32
 800cd54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800cd60:	6978      	ldr	r0, [r7, #20]
 800cd62:	f7ff fb1a 	bl	800c39a <HAL_I2C_ErrorCallback>
}
 800cd66:	bf00      	nop
 800cd68:	3718      	adds	r7, #24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20000004 	.word	0x20000004
 800cd74:	14f8b589 	.word	0x14f8b589

0800cd78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	603b      	str	r3, [r7, #0]
 800cd84:	4613      	mov	r3, r2
 800cd86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cd88:	e025      	b.n	800cdd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd90:	d021      	beq.n	800cdd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd92:	f7fc fc73 	bl	800967c <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	683a      	ldr	r2, [r7, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d302      	bcc.n	800cda8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d116      	bne.n	800cdd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2220      	movs	r2, #32
 800cdb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc2:	f043 0220 	orr.w	r2, r3, #32
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e023      	b.n	800ce1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	0c1b      	lsrs	r3, r3, #16
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d10d      	bne.n	800cdfc <I2C_WaitOnFlagUntilTimeout+0x84>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	43da      	mvns	r2, r3
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	4013      	ands	r3, r2
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	bf0c      	ite	eq
 800cdf2:	2301      	moveq	r3, #1
 800cdf4:	2300      	movne	r3, #0
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	e00c      	b.n	800ce16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	43da      	mvns	r2, r3
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	4013      	ands	r3, r2
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	bf0c      	ite	eq
 800ce0e:	2301      	moveq	r3, #1
 800ce10:	2300      	movne	r3, #0
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	461a      	mov	r2, r3
 800ce16:	79fb      	ldrb	r3, [r7, #7]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d0b6      	beq.n	800cd8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b084      	sub	sp, #16
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	60f8      	str	r0, [r7, #12]
 800ce2e:	60b9      	str	r1, [r7, #8]
 800ce30:	607a      	str	r2, [r7, #4]
 800ce32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ce34:	e051      	b.n	800ceda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	695b      	ldr	r3, [r3, #20]
 800ce3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce44:	d123      	bne.n	800ce8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ce5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7a:	f043 0204 	orr.w	r2, r3, #4
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e046      	b.n	800cf1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce94:	d021      	beq.n	800ceda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce96:	f7fc fbf1 	bl	800967c <HAL_GetTick>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d302      	bcc.n	800ceac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d116      	bne.n	800ceda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2220      	movs	r2, #32
 800ceb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2200      	movs	r2, #0
 800cebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec6:	f043 0220 	orr.w	r2, r3, #32
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e020      	b.n	800cf1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	0c1b      	lsrs	r3, r3, #16
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d10c      	bne.n	800cefe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	695b      	ldr	r3, [r3, #20]
 800ceea:	43da      	mvns	r2, r3
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	4013      	ands	r3, r2
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	bf14      	ite	ne
 800cef6:	2301      	movne	r3, #1
 800cef8:	2300      	moveq	r3, #0
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	e00b      	b.n	800cf16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	699b      	ldr	r3, [r3, #24]
 800cf04:	43da      	mvns	r2, r3
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	4013      	ands	r3, r2
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	bf14      	ite	ne
 800cf10:	2301      	movne	r3, #1
 800cf12:	2300      	moveq	r3, #0
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d18d      	bne.n	800ce36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf30:	e02d      	b.n	800cf8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 f8ce 	bl	800d0d4 <I2C_IsAcknowledgeFailed>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d001      	beq.n	800cf42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e02d      	b.n	800cf9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf48:	d021      	beq.n	800cf8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf4a:	f7fc fb97 	bl	800967c <HAL_GetTick>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d302      	bcc.n	800cf60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d116      	bne.n	800cf8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2200      	movs	r2, #0
 800cf64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2220      	movs	r2, #32
 800cf6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf7a:	f043 0220 	orr.w	r2, r3, #32
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e007      	b.n	800cf9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	695b      	ldr	r3, [r3, #20]
 800cf94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf98:	2b80      	cmp	r3, #128	; 0x80
 800cf9a:	d1ca      	bne.n	800cf32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b084      	sub	sp, #16
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cfb2:	e02d      	b.n	800d010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f000 f88d 	bl	800d0d4 <I2C_IsAcknowledgeFailed>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d001      	beq.n	800cfc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e02d      	b.n	800d020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfca:	d021      	beq.n	800d010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfcc:	f7fc fb56 	bl	800967c <HAL_GetTick>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d302      	bcc.n	800cfe2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d116      	bne.n	800d010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2220      	movs	r2, #32
 800cfec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffc:	f043 0220 	orr.w	r2, r3, #32
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	e007      	b.n	800d020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	f003 0304 	and.w	r3, r3, #4
 800d01a:	2b04      	cmp	r3, #4
 800d01c:	d1ca      	bne.n	800cfb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d034:	e042      	b.n	800d0bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	f003 0310 	and.w	r3, r3, #16
 800d040:	2b10      	cmp	r3, #16
 800d042:	d119      	bne.n	800d078 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f06f 0210 	mvn.w	r2, #16
 800d04c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2220      	movs	r2, #32
 800d058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e029      	b.n	800d0cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d078:	f7fc fb00 	bl	800967c <HAL_GetTick>
 800d07c:	4602      	mov	r2, r0
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	429a      	cmp	r2, r3
 800d086:	d302      	bcc.n	800d08e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d116      	bne.n	800d0bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2200      	movs	r2, #0
 800d092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2220      	movs	r2, #32
 800d098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a8:	f043 0220 	orr.w	r2, r3, #32
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e007      	b.n	800d0cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	695b      	ldr	r3, [r3, #20]
 800d0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c6:	2b40      	cmp	r3, #64	; 0x40
 800d0c8:	d1b5      	bne.n	800d036 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0ea:	d11b      	bne.n	800d124 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d0f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2220      	movs	r2, #32
 800d100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d110:	f043 0204 	orr.w	r2, r3, #4
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e000      	b.n	800d126 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d132:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d134:	b08f      	sub	sp, #60	; 0x3c
 800d136:	af0a      	add	r7, sp, #40	; 0x28
 800d138:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d101      	bne.n	800d144 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	e10f      	b.n	800d364 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800d150:	b2db      	uxtb	r3, r3
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f00b fc50 	bl	8018a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2203      	movs	r2, #3
 800d168:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d174:	2b00      	cmp	r3, #0
 800d176:	d102      	bne.n	800d17e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4618      	mov	r0, r3
 800d184:	f004 fde1 	bl	8011d4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	603b      	str	r3, [r7, #0]
 800d18e:	687e      	ldr	r6, [r7, #4]
 800d190:	466d      	mov	r5, sp
 800d192:	f106 0410 	add.w	r4, r6, #16
 800d196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d19a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d19c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d19e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d1a2:	e885 0003 	stmia.w	r5, {r0, r1}
 800d1a6:	1d33      	adds	r3, r6, #4
 800d1a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d1aa:	6838      	ldr	r0, [r7, #0]
 800d1ac:	f004 fcb8 	bl	8011b20 <USB_CoreInit>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d005      	beq.n	800d1c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2202      	movs	r2, #2
 800d1ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e0d0      	b.n	800d364 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f004 fdcf 	bl	8011d6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	73fb      	strb	r3, [r7, #15]
 800d1d2:	e04a      	b.n	800d26a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d1d4:	7bfa      	ldrb	r2, [r7, #15]
 800d1d6:	6879      	ldr	r1, [r7, #4]
 800d1d8:	4613      	mov	r3, r2
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	4413      	add	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	440b      	add	r3, r1
 800d1e2:	333d      	adds	r3, #61	; 0x3d
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d1e8:	7bfa      	ldrb	r2, [r7, #15]
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	4413      	add	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	440b      	add	r3, r1
 800d1f6:	333c      	adds	r3, #60	; 0x3c
 800d1f8:	7bfa      	ldrb	r2, [r7, #15]
 800d1fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d1fc:	7bfa      	ldrb	r2, [r7, #15]
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
 800d200:	b298      	uxth	r0, r3
 800d202:	6879      	ldr	r1, [r7, #4]
 800d204:	4613      	mov	r3, r2
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	4413      	add	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	440b      	add	r3, r1
 800d20e:	3344      	adds	r3, #68	; 0x44
 800d210:	4602      	mov	r2, r0
 800d212:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d214:	7bfa      	ldrb	r2, [r7, #15]
 800d216:	6879      	ldr	r1, [r7, #4]
 800d218:	4613      	mov	r3, r2
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	4413      	add	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	440b      	add	r3, r1
 800d222:	3340      	adds	r3, #64	; 0x40
 800d224:	2200      	movs	r2, #0
 800d226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d228:	7bfa      	ldrb	r2, [r7, #15]
 800d22a:	6879      	ldr	r1, [r7, #4]
 800d22c:	4613      	mov	r3, r2
 800d22e:	00db      	lsls	r3, r3, #3
 800d230:	4413      	add	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	440b      	add	r3, r1
 800d236:	3348      	adds	r3, #72	; 0x48
 800d238:	2200      	movs	r2, #0
 800d23a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d23c:	7bfa      	ldrb	r2, [r7, #15]
 800d23e:	6879      	ldr	r1, [r7, #4]
 800d240:	4613      	mov	r3, r2
 800d242:	00db      	lsls	r3, r3, #3
 800d244:	4413      	add	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	440b      	add	r3, r1
 800d24a:	334c      	adds	r3, #76	; 0x4c
 800d24c:	2200      	movs	r2, #0
 800d24e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d250:	7bfa      	ldrb	r2, [r7, #15]
 800d252:	6879      	ldr	r1, [r7, #4]
 800d254:	4613      	mov	r3, r2
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	4413      	add	r3, r2
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	440b      	add	r3, r1
 800d25e:	3354      	adds	r3, #84	; 0x54
 800d260:	2200      	movs	r2, #0
 800d262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	3301      	adds	r3, #1
 800d268:	73fb      	strb	r3, [r7, #15]
 800d26a:	7bfa      	ldrb	r2, [r7, #15]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	429a      	cmp	r2, r3
 800d272:	d3af      	bcc.n	800d1d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d274:	2300      	movs	r3, #0
 800d276:	73fb      	strb	r3, [r7, #15]
 800d278:	e044      	b.n	800d304 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d27a:	7bfa      	ldrb	r2, [r7, #15]
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	4613      	mov	r3, r2
 800d280:	00db      	lsls	r3, r3, #3
 800d282:	4413      	add	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	440b      	add	r3, r1
 800d288:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800d28c:	2200      	movs	r2, #0
 800d28e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d290:	7bfa      	ldrb	r2, [r7, #15]
 800d292:	6879      	ldr	r1, [r7, #4]
 800d294:	4613      	mov	r3, r2
 800d296:	00db      	lsls	r3, r3, #3
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	440b      	add	r3, r1
 800d29e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800d2a2:	7bfa      	ldrb	r2, [r7, #15]
 800d2a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d2a6:	7bfa      	ldrb	r2, [r7, #15]
 800d2a8:	6879      	ldr	r1, [r7, #4]
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	00db      	lsls	r3, r3, #3
 800d2ae:	4413      	add	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	440b      	add	r3, r1
 800d2b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d2bc:	7bfa      	ldrb	r2, [r7, #15]
 800d2be:	6879      	ldr	r1, [r7, #4]
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	4413      	add	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	440b      	add	r3, r1
 800d2ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d2d2:	7bfa      	ldrb	r2, [r7, #15]
 800d2d4:	6879      	ldr	r1, [r7, #4]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	00db      	lsls	r3, r3, #3
 800d2da:	4413      	add	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	440b      	add	r3, r1
 800d2e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d2e8:	7bfa      	ldrb	r2, [r7, #15]
 800d2ea:	6879      	ldr	r1, [r7, #4]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	00db      	lsls	r3, r3, #3
 800d2f0:	4413      	add	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	440b      	add	r3, r1
 800d2f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
 800d300:	3301      	adds	r3, #1
 800d302:	73fb      	strb	r3, [r7, #15]
 800d304:	7bfa      	ldrb	r2, [r7, #15]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d3b5      	bcc.n	800d27a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	603b      	str	r3, [r7, #0]
 800d314:	687e      	ldr	r6, [r7, #4]
 800d316:	466d      	mov	r5, sp
 800d318:	f106 0410 	add.w	r4, r6, #16
 800d31c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d31e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d324:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d328:	e885 0003 	stmia.w	r5, {r0, r1}
 800d32c:	1d33      	adds	r3, r6, #4
 800d32e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d330:	6838      	ldr	r0, [r7, #0]
 800d332:	f004 fd67 	bl	8011e04 <USB_DevInit>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d005      	beq.n	800d348 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2202      	movs	r2, #2
 800d340:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800d344:	2301      	movs	r3, #1
 800d346:	e00d      	b.n	800d364 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f005 feb6 	bl	80130ce <USB_DevDisconnect>

  return HAL_OK;
 800d362:	2300      	movs	r3, #0
}
 800d364:	4618      	mov	r0, r3
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d36c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800d380:	2b01      	cmp	r3, #1
 800d382:	d101      	bne.n	800d388 <HAL_PCD_Start+0x1c>
 800d384:	2302      	movs	r3, #2
 800d386:	e020      	b.n	800d3ca <HAL_PCD_Start+0x5e>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d394:	2b01      	cmp	r3, #1
 800d396:	d109      	bne.n	800d3ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d005      	beq.n	800d3ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f004 fcb9 	bl	8011d28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f005 fe66 	bl	801308c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d3d2:	b590      	push	{r4, r7, lr}
 800d3d4:	b08d      	sub	sp, #52	; 0x34
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
 800d3e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f005 ff24 	bl	8013236 <USB_GetMode>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f040 848a 	bne.w	800dd0a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f005 fe88 	bl	8013110 <USB_ReadInterrupts>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 8480 	beq.w	800dd08 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	0a1b      	lsrs	r3, r3, #8
 800d412:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4618      	mov	r0, r3
 800d422:	f005 fe75 	bl	8013110 <USB_ReadInterrupts>
 800d426:	4603      	mov	r3, r0
 800d428:	f003 0302 	and.w	r3, r3, #2
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d107      	bne.n	800d440 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	695a      	ldr	r2, [r3, #20]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f002 0202 	and.w	r2, r2, #2
 800d43e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4618      	mov	r0, r3
 800d446:	f005 fe63 	bl	8013110 <USB_ReadInterrupts>
 800d44a:	4603      	mov	r3, r0
 800d44c:	f003 0310 	and.w	r3, r3, #16
 800d450:	2b10      	cmp	r3, #16
 800d452:	d161      	bne.n	800d518 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	699a      	ldr	r2, [r3, #24]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f022 0210 	bic.w	r2, r2, #16
 800d462:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800d464:	6a3b      	ldr	r3, [r7, #32]
 800d466:	6a1b      	ldr	r3, [r3, #32]
 800d468:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	f003 020f 	and.w	r2, r3, #15
 800d470:	4613      	mov	r3, r2
 800d472:	00db      	lsls	r3, r3, #3
 800d474:	4413      	add	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	4413      	add	r3, r2
 800d480:	3304      	adds	r3, #4
 800d482:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	0c5b      	lsrs	r3, r3, #17
 800d488:	f003 030f 	and.w	r3, r3, #15
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d124      	bne.n	800d4da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d490:	69ba      	ldr	r2, [r7, #24]
 800d492:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800d496:	4013      	ands	r3, r2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d035      	beq.n	800d508 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	091b      	lsrs	r3, r3, #4
 800d4a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d4a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	6a38      	ldr	r0, [r7, #32]
 800d4b0:	f005 fc9a 	bl	8012de8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	691a      	ldr	r2, [r3, #16]
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	091b      	lsrs	r3, r3, #4
 800d4bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4c0:	441a      	add	r2, r3
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	6a1a      	ldr	r2, [r3, #32]
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	091b      	lsrs	r3, r3, #4
 800d4ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4d2:	441a      	add	r2, r3
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	621a      	str	r2, [r3, #32]
 800d4d8:	e016      	b.n	800d508 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	0c5b      	lsrs	r3, r3, #17
 800d4de:	f003 030f 	and.w	r3, r3, #15
 800d4e2:	2b06      	cmp	r3, #6
 800d4e4:	d110      	bne.n	800d508 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d4ec:	2208      	movs	r2, #8
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6a38      	ldr	r0, [r7, #32]
 800d4f2:	f005 fc79 	bl	8012de8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	6a1a      	ldr	r2, [r3, #32]
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	091b      	lsrs	r3, r3, #4
 800d4fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d502:	441a      	add	r2, r3
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	699a      	ldr	r2, [r3, #24]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f042 0210 	orr.w	r2, r2, #16
 800d516:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4618      	mov	r0, r3
 800d51e:	f005 fdf7 	bl	8013110 <USB_ReadInterrupts>
 800d522:	4603      	mov	r3, r0
 800d524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d528:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d52c:	f040 80a7 	bne.w	800d67e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4618      	mov	r0, r3
 800d53a:	f005 fdfc 	bl	8013136 <USB_ReadDevAllOutEpInterrupt>
 800d53e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800d540:	e099      	b.n	800d676 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f000 808e 	beq.w	800d66a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d554:	b2d2      	uxtb	r2, r2
 800d556:	4611      	mov	r1, r2
 800d558:	4618      	mov	r0, r3
 800d55a:	f005 fe20 	bl	801319e <USB_ReadDevOutEPInterrupt>
 800d55e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00c      	beq.n	800d584 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	015a      	lsls	r2, r3, #5
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	4413      	add	r3, r2
 800d572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d576:	461a      	mov	r2, r3
 800d578:	2301      	movs	r3, #1
 800d57a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800d57c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fec2 	bl	800e308 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	f003 0308 	and.w	r3, r3, #8
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00c      	beq.n	800d5a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d590:	015a      	lsls	r2, r3, #5
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	4413      	add	r3, r2
 800d596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d59a:	461a      	mov	r2, r3
 800d59c:	2308      	movs	r3, #8
 800d59e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800d5a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 ff98 	bl	800e4d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	f003 0310 	and.w	r3, r3, #16
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d008      	beq.n	800d5c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b4:	015a      	lsls	r2, r3, #5
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5be:	461a      	mov	r2, r3
 800d5c0:	2310      	movs	r3, #16
 800d5c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	f003 0302 	and.w	r3, r3, #2
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d030      	beq.n	800d630 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800d5ce:	6a3b      	ldr	r3, [r7, #32]
 800d5d0:	695b      	ldr	r3, [r3, #20]
 800d5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5d6:	2b80      	cmp	r3, #128	; 0x80
 800d5d8:	d109      	bne.n	800d5ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	69fa      	ldr	r2, [r7, #28]
 800d5e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d5ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800d5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	00db      	lsls	r3, r3, #3
 800d5f4:	4413      	add	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	4413      	add	r3, r2
 800d600:	3304      	adds	r3, #4
 800d602:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	78db      	ldrb	r3, [r3, #3]
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d108      	bne.n	800d61e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	2200      	movs	r2, #0
 800d610:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d614:	b2db      	uxtb	r3, r3
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f00b faf9 	bl	8018c10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	015a      	lsls	r2, r3, #5
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	4413      	add	r3, r2
 800d626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d62a:	461a      	mov	r2, r3
 800d62c:	2302      	movs	r3, #2
 800d62e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	f003 0320 	and.w	r3, r3, #32
 800d636:	2b00      	cmp	r3, #0
 800d638:	d008      	beq.n	800d64c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63c:	015a      	lsls	r2, r3, #5
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	4413      	add	r3, r2
 800d642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d646:	461a      	mov	r2, r3
 800d648:	2320      	movs	r3, #32
 800d64a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d652:	2b00      	cmp	r3, #0
 800d654:	d009      	beq.n	800d66a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d658:	015a      	lsls	r2, r3, #5
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	4413      	add	r3, r2
 800d65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d662:	461a      	mov	r2, r3
 800d664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d668:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	3301      	adds	r3, #1
 800d66e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d672:	085b      	lsrs	r3, r3, #1
 800d674:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f47f af62 	bne.w	800d542 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4618      	mov	r0, r3
 800d684:	f005 fd44 	bl	8013110 <USB_ReadInterrupts>
 800d688:	4603      	mov	r3, r0
 800d68a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d68e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d692:	f040 80db 	bne.w	800d84c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f005 fd65 	bl	801316a <USB_ReadDevAllInEpInterrupt>
 800d6a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800d6a6:	e0cd      	b.n	800d844 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	f003 0301 	and.w	r3, r3, #1
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f000 80c2 	beq.w	800d838 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ba:	b2d2      	uxtb	r2, r2
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f005 fd8b 	bl	80131da <USB_ReadDevInEPInterrupt>
 800d6c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	f003 0301 	and.w	r3, r3, #1
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d057      	beq.n	800d780 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	f003 030f 	and.w	r3, r3, #15
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	43db      	mvns	r3, r3
 800d6ea:	69f9      	ldr	r1, [r7, #28]
 800d6ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6f0:	4013      	ands	r3, r2
 800d6f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d700:	461a      	mov	r2, r3
 800d702:	2301      	movs	r3, #1
 800d704:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d132      	bne.n	800d774 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d70e:	6879      	ldr	r1, [r7, #4]
 800d710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d712:	4613      	mov	r3, r2
 800d714:	00db      	lsls	r3, r3, #3
 800d716:	4413      	add	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	440b      	add	r3, r1
 800d71c:	334c      	adds	r3, #76	; 0x4c
 800d71e:	6819      	ldr	r1, [r3, #0]
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d724:	4613      	mov	r3, r2
 800d726:	00db      	lsls	r3, r3, #3
 800d728:	4413      	add	r3, r2
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4403      	add	r3, r0
 800d72e:	3348      	adds	r3, #72	; 0x48
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4419      	add	r1, r3
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d738:	4613      	mov	r3, r2
 800d73a:	00db      	lsls	r3, r3, #3
 800d73c:	4413      	add	r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4403      	add	r3, r0
 800d742:	334c      	adds	r3, #76	; 0x4c
 800d744:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d113      	bne.n	800d774 <HAL_PCD_IRQHandler+0x3a2>
 800d74c:	6879      	ldr	r1, [r7, #4]
 800d74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d750:	4613      	mov	r3, r2
 800d752:	00db      	lsls	r3, r3, #3
 800d754:	4413      	add	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	440b      	add	r3, r1
 800d75a:	3354      	adds	r3, #84	; 0x54
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d108      	bne.n	800d774 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6818      	ldr	r0, [r3, #0]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d76c:	461a      	mov	r2, r3
 800d76e:	2101      	movs	r1, #1
 800d770:	f005 fd92 	bl	8013298 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d776:	b2db      	uxtb	r3, r3
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f00b f9c3 	bl	8018b06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f003 0308 	and.w	r3, r3, #8
 800d786:	2b00      	cmp	r3, #0
 800d788:	d008      	beq.n	800d79c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78c:	015a      	lsls	r2, r3, #5
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	4413      	add	r3, r2
 800d792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d796:	461a      	mov	r2, r3
 800d798:	2308      	movs	r3, #8
 800d79a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	f003 0310 	and.w	r3, r3, #16
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d008      	beq.n	800d7b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	015a      	lsls	r2, r3, #5
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	2310      	movs	r3, #16
 800d7b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d008      	beq.n	800d7d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	2340      	movs	r3, #64	; 0x40
 800d7d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	f003 0302 	and.w	r3, r3, #2
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d023      	beq.n	800d826 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800d7de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7e0:	6a38      	ldr	r0, [r7, #32]
 800d7e2:	f004 fc73 	bl	80120cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800d7e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	00db      	lsls	r3, r3, #3
 800d7ec:	4413      	add	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	3338      	adds	r3, #56	; 0x38
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	78db      	ldrb	r3, [r3, #3]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d108      	bne.n	800d814 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	2200      	movs	r2, #0
 800d806:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f00b fa10 	bl	8018c34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	015a      	lsls	r2, r3, #5
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	4413      	add	r3, r2
 800d81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d820:	461a      	mov	r2, r3
 800d822:	2302      	movs	r3, #2
 800d824:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d003      	beq.n	800d838 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 fcdb 	bl	800e1ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83a:	3301      	adds	r3, #1
 800d83c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d840:	085b      	lsrs	r3, r3, #1
 800d842:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	2b00      	cmp	r3, #0
 800d848:	f47f af2e 	bne.w	800d6a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4618      	mov	r0, r3
 800d852:	f005 fc5d 	bl	8013110 <USB_ReadInterrupts>
 800d856:	4603      	mov	r3, r0
 800d858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d85c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d860:	d122      	bne.n	800d8a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	69fa      	ldr	r2, [r7, #28]
 800d86c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d870:	f023 0301 	bic.w	r3, r3, #1
 800d874:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d108      	bne.n	800d892 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d888:	2100      	movs	r1, #0
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 fec2 	bl	800e614 <HAL_PCDEx_LPM_Callback>
 800d890:	e002      	b.n	800d898 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f00b f9ae 	bl	8018bf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	695a      	ldr	r2, [r3, #20]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d8a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f005 fc2f 	bl	8013110 <USB_ReadInterrupts>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8bc:	d112      	bne.n	800d8e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	f003 0301 	and.w	r3, r3, #1
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d102      	bne.n	800d8d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f00b f96a 	bl	8018ba8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	695a      	ldr	r2, [r3, #20]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800d8e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f005 fc11 	bl	8013110 <USB_ReadInterrupts>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8f8:	f040 80b7 	bne.w	800da6a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	69fa      	ldr	r2, [r7, #28]
 800d906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d90a:	f023 0301 	bic.w	r3, r3, #1
 800d90e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2110      	movs	r1, #16
 800d916:	4618      	mov	r0, r3
 800d918:	f004 fbd8 	bl	80120cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d91c:	2300      	movs	r3, #0
 800d91e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d920:	e046      	b.n	800d9b0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d924:	015a      	lsls	r2, r3, #5
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	4413      	add	r3, r2
 800d92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d92e:	461a      	mov	r2, r3
 800d930:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d934:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	015a      	lsls	r2, r3, #5
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	4413      	add	r3, r2
 800d93e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d946:	0151      	lsls	r1, r2, #5
 800d948:	69fa      	ldr	r2, [r7, #28]
 800d94a:	440a      	add	r2, r1
 800d94c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d954:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d958:	015a      	lsls	r2, r3, #5
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	4413      	add	r3, r2
 800d95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d962:	461a      	mov	r2, r3
 800d964:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d968:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96c:	015a      	lsls	r2, r3, #5
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	4413      	add	r3, r2
 800d972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d97a:	0151      	lsls	r1, r2, #5
 800d97c:	69fa      	ldr	r2, [r7, #28]
 800d97e:	440a      	add	r2, r1
 800d980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d984:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d988:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	015a      	lsls	r2, r3, #5
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	4413      	add	r3, r2
 800d992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d99a:	0151      	lsls	r1, r2, #5
 800d99c:	69fa      	ldr	r2, [r7, #28]
 800d99e:	440a      	add	r2, r1
 800d9a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d9a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d3b3      	bcc.n	800d922 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	69fa      	ldr	r2, [r7, #28]
 800d9c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800d9cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d016      	beq.n	800da04 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9e0:	69fa      	ldr	r2, [r7, #28]
 800d9e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9e6:	f043 030b 	orr.w	r3, r3, #11
 800d9ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9f6:	69fa      	ldr	r2, [r7, #28]
 800d9f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9fc:	f043 030b 	orr.w	r3, r3, #11
 800da00:	6453      	str	r3, [r2, #68]	; 0x44
 800da02:	e015      	b.n	800da30 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	69fa      	ldr	r2, [r7, #28]
 800da0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800da16:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800da1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	69fa      	ldr	r2, [r7, #28]
 800da26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da2a:	f043 030b 	orr.w	r3, r3, #11
 800da2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800da30:	69fb      	ldr	r3, [r7, #28]
 800da32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	69fa      	ldr	r2, [r7, #28]
 800da3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800da42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6818      	ldr	r0, [r3, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	691b      	ldr	r3, [r3, #16]
 800da4c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800da54:	461a      	mov	r2, r3
 800da56:	f005 fc1f 	bl	8013298 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	695a      	ldr	r2, [r3, #20]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800da68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4618      	mov	r0, r3
 800da70:	f005 fb4e 	bl	8013110 <USB_ReadInterrupts>
 800da74:	4603      	mov	r3, r0
 800da76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da7e:	d124      	bne.n	800daca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4618      	mov	r0, r3
 800da86:	f005 fbe4 	bl	8013252 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4618      	mov	r0, r3
 800da90:	f004 fb99 	bl	80121c6 <USB_GetDevSpeed>
 800da94:	4603      	mov	r3, r0
 800da96:	461a      	mov	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681c      	ldr	r4, [r3, #0]
 800daa0:	f001 f9e8 	bl	800ee74 <HAL_RCC_GetHCLKFreq>
 800daa4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	461a      	mov	r2, r3
 800daae:	4620      	mov	r0, r4
 800dab0:	f004 f898 	bl	8011be4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f00b f84e 	bl	8018b56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	695a      	ldr	r2, [r3, #20]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800dac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4618      	mov	r0, r3
 800dad0:	f005 fb1e 	bl	8013110 <USB_ReadInterrupts>
 800dad4:	4603      	mov	r3, r0
 800dad6:	f003 0308 	and.w	r3, r3, #8
 800dada:	2b08      	cmp	r3, #8
 800dadc:	d10a      	bne.n	800daf4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f00b f82b 	bl	8018b3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	695a      	ldr	r2, [r3, #20]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f002 0208 	and.w	r2, r2, #8
 800daf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f005 fb09 	bl	8013110 <USB_ReadInterrupts>
 800dafe:	4603      	mov	r3, r0
 800db00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db04:	2b80      	cmp	r3, #128	; 0x80
 800db06:	d122      	bne.n	800db4e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db10:	6a3b      	ldr	r3, [r7, #32]
 800db12:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800db14:	2301      	movs	r3, #1
 800db16:	627b      	str	r3, [r7, #36]	; 0x24
 800db18:	e014      	b.n	800db44 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800db1a:	6879      	ldr	r1, [r7, #4]
 800db1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db1e:	4613      	mov	r3, r2
 800db20:	00db      	lsls	r3, r3, #3
 800db22:	4413      	add	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	440b      	add	r3, r1
 800db28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d105      	bne.n	800db3e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db34:	b2db      	uxtb	r3, r3
 800db36:	4619      	mov	r1, r3
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fb27 	bl	800e18c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800db3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db40:	3301      	adds	r3, #1
 800db42:	627b      	str	r3, [r7, #36]	; 0x24
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d3e5      	bcc.n	800db1a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4618      	mov	r0, r3
 800db54:	f005 fadc 	bl	8013110 <USB_ReadInterrupts>
 800db58:	4603      	mov	r3, r0
 800db5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db62:	d13b      	bne.n	800dbdc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800db64:	2301      	movs	r3, #1
 800db66:	627b      	str	r3, [r7, #36]	; 0x24
 800db68:	e02b      	b.n	800dbc2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6c:	015a      	lsls	r2, r3, #5
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	4413      	add	r3, r2
 800db72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800db7a:	6879      	ldr	r1, [r7, #4]
 800db7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db7e:	4613      	mov	r3, r2
 800db80:	00db      	lsls	r3, r3, #3
 800db82:	4413      	add	r3, r2
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	440b      	add	r3, r1
 800db88:	3340      	adds	r3, #64	; 0x40
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d115      	bne.n	800dbbc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800db90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800db92:	2b00      	cmp	r3, #0
 800db94:	da12      	bge.n	800dbbc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db9a:	4613      	mov	r3, r2
 800db9c:	00db      	lsls	r3, r3, #3
 800db9e:	4413      	add	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	440b      	add	r3, r1
 800dba4:	333f      	adds	r3, #63	; 0x3f
 800dba6:	2201      	movs	r2, #1
 800dba8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fae8 	bl	800e18c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	627b      	str	r3, [r7, #36]	; 0x24
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d3ce      	bcc.n	800db6a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	695a      	ldr	r2, [r3, #20]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800dbda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f005 fa95 	bl	8013110 <USB_ReadInterrupts>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dbec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbf0:	d155      	bne.n	800dc9e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	627b      	str	r3, [r7, #36]	; 0x24
 800dbf6:	e045      	b.n	800dc84 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800dc08:	6879      	ldr	r1, [r7, #4]
 800dc0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	4413      	add	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	440b      	add	r3, r1
 800dc16:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d12e      	bne.n	800dc7e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800dc20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	da2b      	bge.n	800dc7e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800dc32:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d121      	bne.n	800dc7e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc3e:	4613      	mov	r3, r2
 800dc40:	00db      	lsls	r3, r3, #3
 800dc42:	4413      	add	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	440b      	add	r3, r1
 800dc48:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800dc50:	6a3b      	ldr	r3, [r7, #32]
 800dc52:	699b      	ldr	r3, [r3, #24]
 800dc54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dc58:	6a3b      	ldr	r3, [r7, #32]
 800dc5a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800dc5c:	6a3b      	ldr	r3, [r7, #32]
 800dc5e:	695b      	ldr	r3, [r3, #20]
 800dc60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10a      	bne.n	800dc7e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	69fa      	ldr	r2, [r7, #28]
 800dc72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc7a:	6053      	str	r3, [r2, #4]
            break;
 800dc7c:	e007      	b.n	800dc8e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	3301      	adds	r3, #1
 800dc82:	627b      	str	r3, [r7, #36]	; 0x24
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d3b4      	bcc.n	800dbf8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	695a      	ldr	r2, [r3, #20]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800dc9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f005 fa34 	bl	8013110 <USB_ReadInterrupts>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dcae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcb2:	d10a      	bne.n	800dcca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f00a ffcf 	bl	8018c58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	695a      	ldr	r2, [r3, #20]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800dcc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f005 fa1e 	bl	8013110 <USB_ReadInterrupts>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	f003 0304 	and.w	r3, r3, #4
 800dcda:	2b04      	cmp	r3, #4
 800dcdc:	d115      	bne.n	800dd0a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	f003 0304 	and.w	r3, r3, #4
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f00a ffbf 	bl	8018c74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	6859      	ldr	r1, [r3, #4]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	69ba      	ldr	r2, [r7, #24]
 800dd02:	430a      	orrs	r2, r1
 800dd04:	605a      	str	r2, [r3, #4]
 800dd06:	e000      	b.n	800dd0a <HAL_PCD_IRQHandler+0x938>
      return;
 800dd08:	bf00      	nop
    }
  }
}
 800dd0a:	3734      	adds	r7, #52	; 0x34
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd90      	pop	{r4, r7, pc}

0800dd10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d101      	bne.n	800dd2a <HAL_PCD_SetAddress+0x1a>
 800dd26:	2302      	movs	r3, #2
 800dd28:	e013      	b.n	800dd52 <HAL_PCD_SetAddress+0x42>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	78fa      	ldrb	r2, [r7, #3]
 800dd36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	78fa      	ldrb	r2, [r7, #3]
 800dd40:	4611      	mov	r1, r2
 800dd42:	4618      	mov	r0, r3
 800dd44:	f005 f97c 	bl	8013040 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b084      	sub	sp, #16
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	4608      	mov	r0, r1
 800dd64:	4611      	mov	r1, r2
 800dd66:	461a      	mov	r2, r3
 800dd68:	4603      	mov	r3, r0
 800dd6a:	70fb      	strb	r3, [r7, #3]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	803b      	strh	r3, [r7, #0]
 800dd70:	4613      	mov	r3, r2
 800dd72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dd78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	da0f      	bge.n	800dda0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	f003 020f 	and.w	r2, r3, #15
 800dd86:	4613      	mov	r3, r2
 800dd88:	00db      	lsls	r3, r3, #3
 800dd8a:	4413      	add	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	3338      	adds	r3, #56	; 0x38
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	4413      	add	r3, r2
 800dd94:	3304      	adds	r3, #4
 800dd96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	705a      	strb	r2, [r3, #1]
 800dd9e:	e00f      	b.n	800ddc0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dda0:	78fb      	ldrb	r3, [r7, #3]
 800dda2:	f003 020f 	and.w	r2, r3, #15
 800dda6:	4613      	mov	r3, r2
 800dda8:	00db      	lsls	r3, r3, #3
 800ddaa:	4413      	add	r3, r2
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ddc0:	78fb      	ldrb	r3, [r7, #3]
 800ddc2:	f003 030f 	and.w	r3, r3, #15
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ddcc:	883a      	ldrh	r2, [r7, #0]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	78ba      	ldrb	r2, [r7, #2]
 800ddd6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	785b      	ldrb	r3, [r3, #1]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d004      	beq.n	800ddea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	b29a      	uxth	r2, r3
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ddea:	78bb      	ldrb	r3, [r7, #2]
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d102      	bne.n	800ddf6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d101      	bne.n	800de04 <HAL_PCD_EP_Open+0xaa>
 800de00:	2302      	movs	r3, #2
 800de02:	e00e      	b.n	800de22 <HAL_PCD_EP_Open+0xc8>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68f9      	ldr	r1, [r7, #12]
 800de12:	4618      	mov	r0, r3
 800de14:	f004 f9fc 	bl	8012210 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800de20:	7afb      	ldrb	r3, [r7, #11]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b084      	sub	sp, #16
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
 800de32:	460b      	mov	r3, r1
 800de34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800de36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	da0f      	bge.n	800de5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800de3e:	78fb      	ldrb	r3, [r7, #3]
 800de40:	f003 020f 	and.w	r2, r3, #15
 800de44:	4613      	mov	r3, r2
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	4413      	add	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	3338      	adds	r3, #56	; 0x38
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	4413      	add	r3, r2
 800de52:	3304      	adds	r3, #4
 800de54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2201      	movs	r2, #1
 800de5a:	705a      	strb	r2, [r3, #1]
 800de5c:	e00f      	b.n	800de7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800de5e:	78fb      	ldrb	r3, [r7, #3]
 800de60:	f003 020f 	and.w	r2, r3, #15
 800de64:	4613      	mov	r3, r2
 800de66:	00db      	lsls	r3, r3, #3
 800de68:	4413      	add	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	4413      	add	r3, r2
 800de74:	3304      	adds	r3, #4
 800de76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2200      	movs	r2, #0
 800de7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800de7e:	78fb      	ldrb	r3, [r7, #3]
 800de80:	f003 030f 	and.w	r3, r3, #15
 800de84:	b2da      	uxtb	r2, r3
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800de90:	2b01      	cmp	r3, #1
 800de92:	d101      	bne.n	800de98 <HAL_PCD_EP_Close+0x6e>
 800de94:	2302      	movs	r3, #2
 800de96:	e00e      	b.n	800deb6 <HAL_PCD_EP_Close+0x8c>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	68f9      	ldr	r1, [r7, #12]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f004 fa3a 	bl	8012320 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b086      	sub	sp, #24
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	60f8      	str	r0, [r7, #12]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	603b      	str	r3, [r7, #0]
 800deca:	460b      	mov	r3, r1
 800decc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dece:	7afb      	ldrb	r3, [r7, #11]
 800ded0:	f003 020f 	and.w	r2, r3, #15
 800ded4:	4613      	mov	r3, r2
 800ded6:	00db      	lsls	r3, r3, #3
 800ded8:	4413      	add	r3, r2
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	4413      	add	r3, r2
 800dee4:	3304      	adds	r3, #4
 800dee6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	683a      	ldr	r2, [r7, #0]
 800def2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2200      	movs	r2, #0
 800def8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2200      	movs	r2, #0
 800defe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800df00:	7afb      	ldrb	r3, [r7, #11]
 800df02:	f003 030f 	and.w	r3, r3, #15
 800df06:	b2da      	uxtb	r2, r3
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	691b      	ldr	r3, [r3, #16]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d102      	bne.n	800df1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800df1a:	7afb      	ldrb	r3, [r7, #11]
 800df1c:	f003 030f 	and.w	r3, r3, #15
 800df20:	2b00      	cmp	r3, #0
 800df22:	d109      	bne.n	800df38 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6818      	ldr	r0, [r3, #0]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	461a      	mov	r2, r3
 800df30:	6979      	ldr	r1, [r7, #20]
 800df32:	f004 fd19 	bl	8012968 <USB_EP0StartXfer>
 800df36:	e008      	b.n	800df4a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	6818      	ldr	r0, [r3, #0]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	691b      	ldr	r3, [r3, #16]
 800df40:	b2db      	uxtb	r3, r3
 800df42:	461a      	mov	r2, r3
 800df44:	6979      	ldr	r1, [r7, #20]
 800df46:	f004 fac7 	bl	80124d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3718      	adds	r7, #24
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	460b      	mov	r3, r1
 800df5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800df60:	78fb      	ldrb	r3, [r7, #3]
 800df62:	f003 020f 	and.w	r2, r3, #15
 800df66:	6879      	ldr	r1, [r7, #4]
 800df68:	4613      	mov	r3, r2
 800df6a:	00db      	lsls	r3, r3, #3
 800df6c:	4413      	add	r3, r2
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	440b      	add	r3, r1
 800df72:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800df76:	681b      	ldr	r3, [r3, #0]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	607a      	str	r2, [r7, #4]
 800df8e:	603b      	str	r3, [r7, #0]
 800df90:	460b      	mov	r3, r1
 800df92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800df94:	7afb      	ldrb	r3, [r7, #11]
 800df96:	f003 020f 	and.w	r2, r3, #15
 800df9a:	4613      	mov	r3, r2
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	3338      	adds	r3, #56	; 0x38
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dfc4:	7afb      	ldrb	r3, [r7, #11]
 800dfc6:	f003 030f 	and.w	r3, r3, #15
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d102      	bne.n	800dfde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800dfde:	7afb      	ldrb	r3, [r7, #11]
 800dfe0:	f003 030f 	and.w	r3, r3, #15
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d109      	bne.n	800dffc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	6818      	ldr	r0, [r3, #0]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	691b      	ldr	r3, [r3, #16]
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	461a      	mov	r2, r3
 800dff4:	6979      	ldr	r1, [r7, #20]
 800dff6:	f004 fcb7 	bl	8012968 <USB_EP0StartXfer>
 800dffa:	e008      	b.n	800e00e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6818      	ldr	r0, [r3, #0]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	b2db      	uxtb	r3, r3
 800e006:	461a      	mov	r2, r3
 800e008:	6979      	ldr	r1, [r7, #20]
 800e00a:	f004 fa65 	bl	80124d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800e00e:	2300      	movs	r3, #0
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	460b      	mov	r3, r1
 800e022:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e024:	78fb      	ldrb	r3, [r7, #3]
 800e026:	f003 020f 	and.w	r2, r3, #15
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d901      	bls.n	800e036 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e032:	2301      	movs	r3, #1
 800e034:	e050      	b.n	800e0d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	da0f      	bge.n	800e05e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e03e:	78fb      	ldrb	r3, [r7, #3]
 800e040:	f003 020f 	and.w	r2, r3, #15
 800e044:	4613      	mov	r3, r2
 800e046:	00db      	lsls	r3, r3, #3
 800e048:	4413      	add	r3, r2
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	3338      	adds	r3, #56	; 0x38
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	4413      	add	r3, r2
 800e052:	3304      	adds	r3, #4
 800e054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2201      	movs	r2, #1
 800e05a:	705a      	strb	r2, [r3, #1]
 800e05c:	e00d      	b.n	800e07a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e05e:	78fa      	ldrb	r2, [r7, #3]
 800e060:	4613      	mov	r3, r2
 800e062:	00db      	lsls	r3, r3, #3
 800e064:	4413      	add	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	4413      	add	r3, r2
 800e070:	3304      	adds	r3, #4
 800e072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2200      	movs	r2, #0
 800e078:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2201      	movs	r2, #1
 800e07e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e080:	78fb      	ldrb	r3, [r7, #3]
 800e082:	f003 030f 	and.w	r3, r3, #15
 800e086:	b2da      	uxtb	r2, r3
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e092:	2b01      	cmp	r3, #1
 800e094:	d101      	bne.n	800e09a <HAL_PCD_EP_SetStall+0x82>
 800e096:	2302      	movs	r3, #2
 800e098:	e01e      	b.n	800e0d8 <HAL_PCD_EP_SetStall+0xc0>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68f9      	ldr	r1, [r7, #12]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f004 fef5 	bl	8012e98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e0ae:	78fb      	ldrb	r3, [r7, #3]
 800e0b0:	f003 030f 	and.w	r3, r3, #15
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10a      	bne.n	800e0ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6818      	ldr	r0, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	b2d9      	uxtb	r1, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	f005 f8e5 	bl	8013298 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e0ec:	78fb      	ldrb	r3, [r7, #3]
 800e0ee:	f003 020f 	and.w	r2, r3, #15
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d901      	bls.n	800e0fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e042      	b.n	800e184 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e0fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e102:	2b00      	cmp	r3, #0
 800e104:	da0f      	bge.n	800e126 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e106:	78fb      	ldrb	r3, [r7, #3]
 800e108:	f003 020f 	and.w	r2, r3, #15
 800e10c:	4613      	mov	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	4413      	add	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	3338      	adds	r3, #56	; 0x38
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	4413      	add	r3, r2
 800e11a:	3304      	adds	r3, #4
 800e11c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2201      	movs	r2, #1
 800e122:	705a      	strb	r2, [r3, #1]
 800e124:	e00f      	b.n	800e146 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e126:	78fb      	ldrb	r3, [r7, #3]
 800e128:	f003 020f 	and.w	r2, r3, #15
 800e12c:	4613      	mov	r3, r2
 800e12e:	00db      	lsls	r3, r3, #3
 800e130:	4413      	add	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	4413      	add	r3, r2
 800e13c:	3304      	adds	r3, #4
 800e13e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e14c:	78fb      	ldrb	r3, [r7, #3]
 800e14e:	f003 030f 	and.w	r3, r3, #15
 800e152:	b2da      	uxtb	r2, r3
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d101      	bne.n	800e166 <HAL_PCD_EP_ClrStall+0x86>
 800e162:	2302      	movs	r3, #2
 800e164:	e00e      	b.n	800e184 <HAL_PCD_EP_ClrStall+0xa4>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2201      	movs	r2, #1
 800e16a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	68f9      	ldr	r1, [r7, #12]
 800e174:	4618      	mov	r0, r3
 800e176:	f004 fefd 	bl	8012f74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800e198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	da0c      	bge.n	800e1ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e1a0:	78fb      	ldrb	r3, [r7, #3]
 800e1a2:	f003 020f 	and.w	r2, r3, #15
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	00db      	lsls	r3, r3, #3
 800e1aa:	4413      	add	r3, r2
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	3338      	adds	r3, #56	; 0x38
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	60fb      	str	r3, [r7, #12]
 800e1b8:	e00c      	b.n	800e1d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e1ba:	78fb      	ldrb	r3, [r7, #3]
 800e1bc:	f003 020f 	and.w	r2, r3, #15
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	00db      	lsls	r3, r3, #3
 800e1c4:	4413      	add	r3, r2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	3304      	adds	r3, #4
 800e1d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68f9      	ldr	r1, [r7, #12]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f004 fd1c 	bl	8012c18 <USB_EPStopXfer>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800e1e4:	7afb      	ldrb	r3, [r7, #11]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b08a      	sub	sp, #40	; 0x28
 800e1f2:	af02      	add	r7, sp, #8
 800e1f4:	6078      	str	r0, [r7, #4]
 800e1f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800e202:	683a      	ldr	r2, [r7, #0]
 800e204:	4613      	mov	r3, r2
 800e206:	00db      	lsls	r3, r3, #3
 800e208:	4413      	add	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	3338      	adds	r3, #56	; 0x38
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	4413      	add	r3, r2
 800e212:	3304      	adds	r3, #4
 800e214:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6a1a      	ldr	r2, [r3, #32]
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	699b      	ldr	r3, [r3, #24]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d901      	bls.n	800e226 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	e06c      	b.n	800e300 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	699a      	ldr	r2, [r3, #24]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6a1b      	ldr	r3, [r3, #32]
 800e22e:	1ad3      	subs	r3, r2, r3
 800e230:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d902      	bls.n	800e242 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	3303      	adds	r3, #3
 800e246:	089b      	lsrs	r3, r3, #2
 800e248:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e24a:	e02b      	b.n	800e2a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	699a      	ldr	r2, [r3, #24]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	69fa      	ldr	r2, [r7, #28]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d902      	bls.n	800e268 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	3303      	adds	r3, #3
 800e26c:	089b      	lsrs	r3, r3, #2
 800e26e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6919      	ldr	r1, [r3, #16]
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	b2da      	uxtb	r2, r3
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e280:	b2db      	uxtb	r3, r3
 800e282:	9300      	str	r3, [sp, #0]
 800e284:	4603      	mov	r3, r0
 800e286:	6978      	ldr	r0, [r7, #20]
 800e288:	f004 fd70 	bl	8012d6c <USB_WritePacket>

    ep->xfer_buff  += len;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	691a      	ldr	r2, [r3, #16]
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	441a      	add	r2, r3
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6a1a      	ldr	r2, [r3, #32]
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	441a      	add	r2, r3
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	015a      	lsls	r2, r3, #5
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e2b4:	69ba      	ldr	r2, [r7, #24]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d809      	bhi.n	800e2ce <PCD_WriteEmptyTxFifo+0xe0>
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6a1a      	ldr	r2, [r3, #32]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d203      	bcs.n	800e2ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	699b      	ldr	r3, [r3, #24]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d1be      	bne.n	800e24c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	699a      	ldr	r2, [r3, #24]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6a1b      	ldr	r3, [r3, #32]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d811      	bhi.n	800e2fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	f003 030f 	and.w	r3, r3, #15
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	43db      	mvns	r3, r3
 800e2f4:	6939      	ldr	r1, [r7, #16]
 800e2f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	3720      	adds	r7, #32
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b088      	sub	sp, #32
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	333c      	adds	r3, #60	; 0x3c
 800e320:	3304      	adds	r3, #4
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	015a      	lsls	r2, r3, #5
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	4413      	add	r3, r2
 800e32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d17b      	bne.n	800e436 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	f003 0308 	and.w	r3, r3, #8
 800e344:	2b00      	cmp	r3, #0
 800e346:	d015      	beq.n	800e374 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	4a61      	ldr	r2, [pc, #388]	; (800e4d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	f240 80b9 	bls.w	800e4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f000 80b3 	beq.w	800e4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	015a      	lsls	r2, r3, #5
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	4413      	add	r3, r2
 800e366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e36a:	461a      	mov	r2, r3
 800e36c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e370:	6093      	str	r3, [r2, #8]
 800e372:	e0a7      	b.n	800e4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	f003 0320 	and.w	r3, r3, #32
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d009      	beq.n	800e392 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	015a      	lsls	r2, r3, #5
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	4413      	add	r3, r2
 800e386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e38a:	461a      	mov	r2, r3
 800e38c:	2320      	movs	r3, #32
 800e38e:	6093      	str	r3, [r2, #8]
 800e390:	e098      	b.n	800e4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f040 8093 	bne.w	800e4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	4a4b      	ldr	r2, [pc, #300]	; (800e4d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d90f      	bls.n	800e3c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00a      	beq.n	800e3c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	015a      	lsls	r2, r3, #5
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3bc:	461a      	mov	r2, r3
 800e3be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3c2:	6093      	str	r3, [r2, #8]
 800e3c4:	e07e      	b.n	800e4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800e3c6:	683a      	ldr	r2, [r7, #0]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	00db      	lsls	r3, r3, #3
 800e3cc:	4413      	add	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	3304      	adds	r3, #4
 800e3da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	69da      	ldr	r2, [r3, #28]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	0159      	lsls	r1, r3, #5
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	440b      	add	r3, r1
 800e3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3f2:	1ad2      	subs	r2, r2, r3
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d114      	bne.n	800e428 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	699b      	ldr	r3, [r3, #24]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d109      	bne.n	800e41a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6818      	ldr	r0, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e410:	461a      	mov	r2, r3
 800e412:	2101      	movs	r1, #1
 800e414:	f004 ff40 	bl	8013298 <USB_EP0_OutStart>
 800e418:	e006      	b.n	800e428 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	691a      	ldr	r2, [r3, #16]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6a1b      	ldr	r3, [r3, #32]
 800e422:	441a      	add	r2, r3
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	4619      	mov	r1, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f00a fb4e 	bl	8018ad0 <HAL_PCD_DataOutStageCallback>
 800e434:	e046      	b.n	800e4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	4a26      	ldr	r2, [pc, #152]	; (800e4d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d124      	bne.n	800e488 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00a      	beq.n	800e45e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	015a      	lsls	r2, r3, #5
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	4413      	add	r3, r2
 800e450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e454:	461a      	mov	r2, r3
 800e456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e45a:	6093      	str	r3, [r2, #8]
 800e45c:	e032      	b.n	800e4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	f003 0320 	and.w	r3, r3, #32
 800e464:	2b00      	cmp	r3, #0
 800e466:	d008      	beq.n	800e47a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	015a      	lsls	r2, r3, #5
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	4413      	add	r3, r2
 800e470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e474:	461a      	mov	r2, r3
 800e476:	2320      	movs	r3, #32
 800e478:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	4619      	mov	r1, r3
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f00a fb25 	bl	8018ad0 <HAL_PCD_DataOutStageCallback>
 800e486:	e01d      	b.n	800e4c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d114      	bne.n	800e4b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800e48e:	6879      	ldr	r1, [r7, #4]
 800e490:	683a      	ldr	r2, [r7, #0]
 800e492:	4613      	mov	r3, r2
 800e494:	00db      	lsls	r3, r3, #3
 800e496:	4413      	add	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	440b      	add	r3, r1
 800e49c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d108      	bne.n	800e4b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6818      	ldr	r0, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	f004 fef0 	bl	8013298 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	4619      	mov	r1, r3
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f00a fb06 	bl	8018ad0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800e4c4:	2300      	movs	r3, #0
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3720      	adds	r7, #32
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	4f54300a 	.word	0x4f54300a
 800e4d4:	4f54310a 	.word	0x4f54310a

0800e4d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b086      	sub	sp, #24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	333c      	adds	r3, #60	; 0x3c
 800e4f0:	3304      	adds	r3, #4
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	015a      	lsls	r2, r3, #5
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	4a15      	ldr	r2, [pc, #84]	; (800e560 <PCD_EP_OutSetupPacket_int+0x88>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d90e      	bls.n	800e52c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e514:	2b00      	cmp	r3, #0
 800e516:	d009      	beq.n	800e52c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e524:	461a      	mov	r2, r3
 800e526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e52a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f00a fabd 	bl	8018aac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	4a0a      	ldr	r2, [pc, #40]	; (800e560 <PCD_EP_OutSetupPacket_int+0x88>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d90c      	bls.n	800e554 <PCD_EP_OutSetupPacket_int+0x7c>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	691b      	ldr	r3, [r3, #16]
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d108      	bne.n	800e554 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6818      	ldr	r0, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e54c:	461a      	mov	r2, r3
 800e54e:	2101      	movs	r1, #1
 800e550:	f004 fea2 	bl	8013298 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3718      	adds	r7, #24
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	4f54300a 	.word	0x4f54300a

0800e564 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	460b      	mov	r3, r1
 800e56e:	70fb      	strb	r3, [r7, #3]
 800e570:	4613      	mov	r3, r2
 800e572:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800e57c:	78fb      	ldrb	r3, [r7, #3]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d107      	bne.n	800e592 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e582:	883b      	ldrh	r3, [r7, #0]
 800e584:	0419      	lsls	r1, r3, #16
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	430a      	orrs	r2, r1
 800e58e:	629a      	str	r2, [r3, #40]	; 0x28
 800e590:	e028      	b.n	800e5e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e598:	0c1b      	lsrs	r3, r3, #16
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	4413      	add	r3, r2
 800e59e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	73fb      	strb	r3, [r7, #15]
 800e5a4:	e00d      	b.n	800e5c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	7bfb      	ldrb	r3, [r7, #15]
 800e5ac:	3340      	adds	r3, #64	; 0x40
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4413      	add	r3, r2
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	0c1b      	lsrs	r3, r3, #16
 800e5b6:	68ba      	ldr	r2, [r7, #8]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	73fb      	strb	r3, [r7, #15]
 800e5c2:	7bfa      	ldrb	r2, [r7, #15]
 800e5c4:	78fb      	ldrb	r3, [r7, #3]
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d3ec      	bcc.n	800e5a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e5cc:	883b      	ldrh	r3, [r7, #0]
 800e5ce:	0418      	lsls	r0, r3, #16
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6819      	ldr	r1, [r3, #0]
 800e5d4:	78fb      	ldrb	r3, [r7, #3]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	4302      	orrs	r2, r0
 800e5dc:	3340      	adds	r3, #64	; 0x40
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	440b      	add	r3, r1
 800e5e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e5f2:	b480      	push	{r7}
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	887a      	ldrh	r2, [r7, #2]
 800e604:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800e606:	2300      	movs	r3, #0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	460b      	mov	r3, r1
 800e61e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e620:	bf00      	nop
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	e267      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f003 0301 	and.w	r3, r3, #1
 800e646:	2b00      	cmp	r3, #0
 800e648:	d075      	beq.n	800e736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e64a:	4b88      	ldr	r3, [pc, #544]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	f003 030c 	and.w	r3, r3, #12
 800e652:	2b04      	cmp	r3, #4
 800e654:	d00c      	beq.n	800e670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e656:	4b85      	ldr	r3, [pc, #532]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e65e:	2b08      	cmp	r3, #8
 800e660:	d112      	bne.n	800e688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e662:	4b82      	ldr	r3, [pc, #520]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e66a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e66e:	d10b      	bne.n	800e688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e670:	4b7e      	ldr	r3, [pc, #504]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d05b      	beq.n	800e734 <HAL_RCC_OscConfig+0x108>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d157      	bne.n	800e734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e684:	2301      	movs	r3, #1
 800e686:	e242      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e690:	d106      	bne.n	800e6a0 <HAL_RCC_OscConfig+0x74>
 800e692:	4b76      	ldr	r3, [pc, #472]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a75      	ldr	r2, [pc, #468]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e69c:	6013      	str	r3, [r2, #0]
 800e69e:	e01d      	b.n	800e6dc <HAL_RCC_OscConfig+0xb0>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e6a8:	d10c      	bne.n	800e6c4 <HAL_RCC_OscConfig+0x98>
 800e6aa:	4b70      	ldr	r3, [pc, #448]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4a6f      	ldr	r2, [pc, #444]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e6b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e6b4:	6013      	str	r3, [r2, #0]
 800e6b6:	4b6d      	ldr	r3, [pc, #436]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a6c      	ldr	r2, [pc, #432]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e6bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6c0:	6013      	str	r3, [r2, #0]
 800e6c2:	e00b      	b.n	800e6dc <HAL_RCC_OscConfig+0xb0>
 800e6c4:	4b69      	ldr	r3, [pc, #420]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a68      	ldr	r2, [pc, #416]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e6ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6ce:	6013      	str	r3, [r2, #0]
 800e6d0:	4b66      	ldr	r3, [pc, #408]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a65      	ldr	r2, [pc, #404]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e6d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e6da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d013      	beq.n	800e70c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e6e4:	f7fa ffca 	bl	800967c <HAL_GetTick>
 800e6e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6ea:	e008      	b.n	800e6fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e6ec:	f7fa ffc6 	bl	800967c <HAL_GetTick>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	1ad3      	subs	r3, r2, r3
 800e6f6:	2b64      	cmp	r3, #100	; 0x64
 800e6f8:	d901      	bls.n	800e6fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e6fa:	2303      	movs	r3, #3
 800e6fc:	e207      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6fe:	4b5b      	ldr	r3, [pc, #364]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0f0      	beq.n	800e6ec <HAL_RCC_OscConfig+0xc0>
 800e70a:	e014      	b.n	800e736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e70c:	f7fa ffb6 	bl	800967c <HAL_GetTick>
 800e710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e712:	e008      	b.n	800e726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e714:	f7fa ffb2 	bl	800967c <HAL_GetTick>
 800e718:	4602      	mov	r2, r0
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	2b64      	cmp	r3, #100	; 0x64
 800e720:	d901      	bls.n	800e726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e722:	2303      	movs	r3, #3
 800e724:	e1f3      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e726:	4b51      	ldr	r3, [pc, #324]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1f0      	bne.n	800e714 <HAL_RCC_OscConfig+0xe8>
 800e732:	e000      	b.n	800e736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f003 0302 	and.w	r3, r3, #2
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d063      	beq.n	800e80a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e742:	4b4a      	ldr	r3, [pc, #296]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e744:	689b      	ldr	r3, [r3, #8]
 800e746:	f003 030c 	and.w	r3, r3, #12
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00b      	beq.n	800e766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e74e:	4b47      	ldr	r3, [pc, #284]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e750:	689b      	ldr	r3, [r3, #8]
 800e752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e756:	2b08      	cmp	r3, #8
 800e758:	d11c      	bne.n	800e794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e75a:	4b44      	ldr	r3, [pc, #272]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e762:	2b00      	cmp	r3, #0
 800e764:	d116      	bne.n	800e794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e766:	4b41      	ldr	r3, [pc, #260]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f003 0302 	and.w	r3, r3, #2
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d005      	beq.n	800e77e <HAL_RCC_OscConfig+0x152>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d001      	beq.n	800e77e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e77a:	2301      	movs	r3, #1
 800e77c:	e1c7      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e77e:	4b3b      	ldr	r3, [pc, #236]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	00db      	lsls	r3, r3, #3
 800e78c:	4937      	ldr	r1, [pc, #220]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e78e:	4313      	orrs	r3, r2
 800e790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e792:	e03a      	b.n	800e80a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d020      	beq.n	800e7de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e79c:	4b34      	ldr	r3, [pc, #208]	; (800e870 <HAL_RCC_OscConfig+0x244>)
 800e79e:	2201      	movs	r2, #1
 800e7a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7a2:	f7fa ff6b 	bl	800967c <HAL_GetTick>
 800e7a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7a8:	e008      	b.n	800e7bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e7aa:	f7fa ff67 	bl	800967c <HAL_GetTick>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d901      	bls.n	800e7bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	e1a8      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7bc:	4b2b      	ldr	r3, [pc, #172]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f003 0302 	and.w	r3, r3, #2
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d0f0      	beq.n	800e7aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7c8:	4b28      	ldr	r3, [pc, #160]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	00db      	lsls	r3, r3, #3
 800e7d6:	4925      	ldr	r1, [pc, #148]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	600b      	str	r3, [r1, #0]
 800e7dc:	e015      	b.n	800e80a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e7de:	4b24      	ldr	r3, [pc, #144]	; (800e870 <HAL_RCC_OscConfig+0x244>)
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7e4:	f7fa ff4a 	bl	800967c <HAL_GetTick>
 800e7e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7ea:	e008      	b.n	800e7fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e7ec:	f7fa ff46 	bl	800967c <HAL_GetTick>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d901      	bls.n	800e7fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e7fa:	2303      	movs	r3, #3
 800e7fc:	e187      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7fe:	4b1b      	ldr	r3, [pc, #108]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f003 0302 	and.w	r3, r3, #2
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1f0      	bne.n	800e7ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f003 0308 	and.w	r3, r3, #8
 800e812:	2b00      	cmp	r3, #0
 800e814:	d036      	beq.n	800e884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	695b      	ldr	r3, [r3, #20]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d016      	beq.n	800e84c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e81e:	4b15      	ldr	r3, [pc, #84]	; (800e874 <HAL_RCC_OscConfig+0x248>)
 800e820:	2201      	movs	r2, #1
 800e822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e824:	f7fa ff2a 	bl	800967c <HAL_GetTick>
 800e828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e82a:	e008      	b.n	800e83e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e82c:	f7fa ff26 	bl	800967c <HAL_GetTick>
 800e830:	4602      	mov	r2, r0
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	2b02      	cmp	r3, #2
 800e838:	d901      	bls.n	800e83e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e83a:	2303      	movs	r3, #3
 800e83c:	e167      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e83e:	4b0b      	ldr	r3, [pc, #44]	; (800e86c <HAL_RCC_OscConfig+0x240>)
 800e840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e842:	f003 0302 	and.w	r3, r3, #2
 800e846:	2b00      	cmp	r3, #0
 800e848:	d0f0      	beq.n	800e82c <HAL_RCC_OscConfig+0x200>
 800e84a:	e01b      	b.n	800e884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e84c:	4b09      	ldr	r3, [pc, #36]	; (800e874 <HAL_RCC_OscConfig+0x248>)
 800e84e:	2200      	movs	r2, #0
 800e850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e852:	f7fa ff13 	bl	800967c <HAL_GetTick>
 800e856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e858:	e00e      	b.n	800e878 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e85a:	f7fa ff0f 	bl	800967c <HAL_GetTick>
 800e85e:	4602      	mov	r2, r0
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	2b02      	cmp	r3, #2
 800e866:	d907      	bls.n	800e878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e868:	2303      	movs	r3, #3
 800e86a:	e150      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
 800e86c:	40023800 	.word	0x40023800
 800e870:	42470000 	.word	0x42470000
 800e874:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e878:	4b88      	ldr	r3, [pc, #544]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e87a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e87c:	f003 0302 	and.w	r3, r3, #2
 800e880:	2b00      	cmp	r3, #0
 800e882:	d1ea      	bne.n	800e85a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f003 0304 	and.w	r3, r3, #4
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f000 8097 	beq.w	800e9c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e892:	2300      	movs	r3, #0
 800e894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e896:	4b81      	ldr	r3, [pc, #516]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10f      	bne.n	800e8c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	60bb      	str	r3, [r7, #8]
 800e8a6:	4b7d      	ldr	r3, [pc, #500]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8aa:	4a7c      	ldr	r2, [pc, #496]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e8ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8b0:	6413      	str	r3, [r2, #64]	; 0x40
 800e8b2:	4b7a      	ldr	r3, [pc, #488]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8ba:	60bb      	str	r3, [r7, #8]
 800e8bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8c2:	4b77      	ldr	r3, [pc, #476]	; (800eaa0 <HAL_RCC_OscConfig+0x474>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d118      	bne.n	800e900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e8ce:	4b74      	ldr	r3, [pc, #464]	; (800eaa0 <HAL_RCC_OscConfig+0x474>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	4a73      	ldr	r2, [pc, #460]	; (800eaa0 <HAL_RCC_OscConfig+0x474>)
 800e8d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e8da:	f7fa fecf 	bl	800967c <HAL_GetTick>
 800e8de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8e0:	e008      	b.n	800e8f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e8e2:	f7fa fecb 	bl	800967c <HAL_GetTick>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	1ad3      	subs	r3, r2, r3
 800e8ec:	2b02      	cmp	r3, #2
 800e8ee:	d901      	bls.n	800e8f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e8f0:	2303      	movs	r3, #3
 800e8f2:	e10c      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8f4:	4b6a      	ldr	r3, [pc, #424]	; (800eaa0 <HAL_RCC_OscConfig+0x474>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d0f0      	beq.n	800e8e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	689b      	ldr	r3, [r3, #8]
 800e904:	2b01      	cmp	r3, #1
 800e906:	d106      	bne.n	800e916 <HAL_RCC_OscConfig+0x2ea>
 800e908:	4b64      	ldr	r3, [pc, #400]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e90a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90c:	4a63      	ldr	r2, [pc, #396]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e90e:	f043 0301 	orr.w	r3, r3, #1
 800e912:	6713      	str	r3, [r2, #112]	; 0x70
 800e914:	e01c      	b.n	800e950 <HAL_RCC_OscConfig+0x324>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	2b05      	cmp	r3, #5
 800e91c:	d10c      	bne.n	800e938 <HAL_RCC_OscConfig+0x30c>
 800e91e:	4b5f      	ldr	r3, [pc, #380]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e922:	4a5e      	ldr	r2, [pc, #376]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e924:	f043 0304 	orr.w	r3, r3, #4
 800e928:	6713      	str	r3, [r2, #112]	; 0x70
 800e92a:	4b5c      	ldr	r3, [pc, #368]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e92e:	4a5b      	ldr	r2, [pc, #364]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e930:	f043 0301 	orr.w	r3, r3, #1
 800e934:	6713      	str	r3, [r2, #112]	; 0x70
 800e936:	e00b      	b.n	800e950 <HAL_RCC_OscConfig+0x324>
 800e938:	4b58      	ldr	r3, [pc, #352]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e93c:	4a57      	ldr	r2, [pc, #348]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e93e:	f023 0301 	bic.w	r3, r3, #1
 800e942:	6713      	str	r3, [r2, #112]	; 0x70
 800e944:	4b55      	ldr	r3, [pc, #340]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e948:	4a54      	ldr	r2, [pc, #336]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e94a:	f023 0304 	bic.w	r3, r3, #4
 800e94e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d015      	beq.n	800e984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e958:	f7fa fe90 	bl	800967c <HAL_GetTick>
 800e95c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e95e:	e00a      	b.n	800e976 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e960:	f7fa fe8c 	bl	800967c <HAL_GetTick>
 800e964:	4602      	mov	r2, r0
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e96e:	4293      	cmp	r3, r2
 800e970:	d901      	bls.n	800e976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e972:	2303      	movs	r3, #3
 800e974:	e0cb      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e976:	4b49      	ldr	r3, [pc, #292]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e97a:	f003 0302 	and.w	r3, r3, #2
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d0ee      	beq.n	800e960 <HAL_RCC_OscConfig+0x334>
 800e982:	e014      	b.n	800e9ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e984:	f7fa fe7a 	bl	800967c <HAL_GetTick>
 800e988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e98a:	e00a      	b.n	800e9a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e98c:	f7fa fe76 	bl	800967c <HAL_GetTick>
 800e990:	4602      	mov	r2, r0
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	f241 3288 	movw	r2, #5000	; 0x1388
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d901      	bls.n	800e9a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e99e:	2303      	movs	r3, #3
 800e9a0:	e0b5      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e9a2:	4b3e      	ldr	r3, [pc, #248]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9a6:	f003 0302 	and.w	r3, r3, #2
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d1ee      	bne.n	800e98c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d105      	bne.n	800e9c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e9b4:	4b39      	ldr	r3, [pc, #228]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b8:	4a38      	ldr	r2, [pc, #224]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e9ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e9be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	699b      	ldr	r3, [r3, #24]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	f000 80a1 	beq.w	800eb0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e9ca:	4b34      	ldr	r3, [pc, #208]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	f003 030c 	and.w	r3, r3, #12
 800e9d2:	2b08      	cmp	r3, #8
 800e9d4:	d05c      	beq.n	800ea90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	699b      	ldr	r3, [r3, #24]
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	d141      	bne.n	800ea62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e9de:	4b31      	ldr	r3, [pc, #196]	; (800eaa4 <HAL_RCC_OscConfig+0x478>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9e4:	f7fa fe4a 	bl	800967c <HAL_GetTick>
 800e9e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9ea:	e008      	b.n	800e9fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e9ec:	f7fa fe46 	bl	800967c <HAL_GetTick>
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	1ad3      	subs	r3, r2, r3
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	d901      	bls.n	800e9fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e9fa:	2303      	movs	r3, #3
 800e9fc:	e087      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9fe:	4b27      	ldr	r3, [pc, #156]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d1f0      	bne.n	800e9ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	69da      	ldr	r2, [r3, #28]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a1b      	ldr	r3, [r3, #32]
 800ea12:	431a      	orrs	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea18:	019b      	lsls	r3, r3, #6
 800ea1a:	431a      	orrs	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea20:	085b      	lsrs	r3, r3, #1
 800ea22:	3b01      	subs	r3, #1
 800ea24:	041b      	lsls	r3, r3, #16
 800ea26:	431a      	orrs	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea2c:	061b      	lsls	r3, r3, #24
 800ea2e:	491b      	ldr	r1, [pc, #108]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800ea30:	4313      	orrs	r3, r2
 800ea32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ea34:	4b1b      	ldr	r3, [pc, #108]	; (800eaa4 <HAL_RCC_OscConfig+0x478>)
 800ea36:	2201      	movs	r2, #1
 800ea38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea3a:	f7fa fe1f 	bl	800967c <HAL_GetTick>
 800ea3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea40:	e008      	b.n	800ea54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea42:	f7fa fe1b 	bl	800967c <HAL_GetTick>
 800ea46:	4602      	mov	r2, r0
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	d901      	bls.n	800ea54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ea50:	2303      	movs	r3, #3
 800ea52:	e05c      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea54:	4b11      	ldr	r3, [pc, #68]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d0f0      	beq.n	800ea42 <HAL_RCC_OscConfig+0x416>
 800ea60:	e054      	b.n	800eb0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea62:	4b10      	ldr	r3, [pc, #64]	; (800eaa4 <HAL_RCC_OscConfig+0x478>)
 800ea64:	2200      	movs	r2, #0
 800ea66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea68:	f7fa fe08 	bl	800967c <HAL_GetTick>
 800ea6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea6e:	e008      	b.n	800ea82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea70:	f7fa fe04 	bl	800967c <HAL_GetTick>
 800ea74:	4602      	mov	r2, r0
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d901      	bls.n	800ea82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ea7e:	2303      	movs	r3, #3
 800ea80:	e045      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea82:	4b06      	ldr	r3, [pc, #24]	; (800ea9c <HAL_RCC_OscConfig+0x470>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d1f0      	bne.n	800ea70 <HAL_RCC_OscConfig+0x444>
 800ea8e:	e03d      	b.n	800eb0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	699b      	ldr	r3, [r3, #24]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d107      	bne.n	800eaa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	e038      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
 800ea9c:	40023800 	.word	0x40023800
 800eaa0:	40007000 	.word	0x40007000
 800eaa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800eaa8:	4b1b      	ldr	r3, [pc, #108]	; (800eb18 <HAL_RCC_OscConfig+0x4ec>)
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	699b      	ldr	r3, [r3, #24]
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d028      	beq.n	800eb08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d121      	bne.n	800eb08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eace:	429a      	cmp	r2, r3
 800ead0:	d11a      	bne.n	800eb08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ead8:	4013      	ands	r3, r2
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800eade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d111      	bne.n	800eb08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaee:	085b      	lsrs	r3, r3, #1
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d107      	bne.n	800eb08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d001      	beq.n	800eb0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	e000      	b.n	800eb0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3718      	adds	r7, #24
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	40023800 	.word	0x40023800

0800eb1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d101      	bne.n	800eb30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e0cc      	b.n	800ecca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eb30:	4b68      	ldr	r3, [pc, #416]	; (800ecd4 <HAL_RCC_ClockConfig+0x1b8>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f003 0307 	and.w	r3, r3, #7
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d90c      	bls.n	800eb58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb3e:	4b65      	ldr	r3, [pc, #404]	; (800ecd4 <HAL_RCC_ClockConfig+0x1b8>)
 800eb40:	683a      	ldr	r2, [r7, #0]
 800eb42:	b2d2      	uxtb	r2, r2
 800eb44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb46:	4b63      	ldr	r3, [pc, #396]	; (800ecd4 <HAL_RCC_ClockConfig+0x1b8>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f003 0307 	and.w	r3, r3, #7
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d001      	beq.n	800eb58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eb54:	2301      	movs	r3, #1
 800eb56:	e0b8      	b.n	800ecca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f003 0302 	and.w	r3, r3, #2
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d020      	beq.n	800eba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f003 0304 	and.w	r3, r3, #4
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d005      	beq.n	800eb7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800eb70:	4b59      	ldr	r3, [pc, #356]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	4a58      	ldr	r2, [pc, #352]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800eb76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800eb7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f003 0308 	and.w	r3, r3, #8
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d005      	beq.n	800eb94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eb88:	4b53      	ldr	r3, [pc, #332]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	4a52      	ldr	r2, [pc, #328]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800eb8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800eb92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eb94:	4b50      	ldr	r3, [pc, #320]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	494d      	ldr	r1, [pc, #308]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800eba2:	4313      	orrs	r3, r2
 800eba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d044      	beq.n	800ec3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d107      	bne.n	800ebca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ebba:	4b47      	ldr	r3, [pc, #284]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d119      	bne.n	800ebfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e07f      	b.n	800ecca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	2b02      	cmp	r3, #2
 800ebd0:	d003      	beq.n	800ebda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ebd6:	2b03      	cmp	r3, #3
 800ebd8:	d107      	bne.n	800ebea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ebda:	4b3f      	ldr	r3, [pc, #252]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d109      	bne.n	800ebfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e06f      	b.n	800ecca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ebea:	4b3b      	ldr	r3, [pc, #236]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f003 0302 	and.w	r3, r3, #2
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d101      	bne.n	800ebfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	e067      	b.n	800ecca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ebfa:	4b37      	ldr	r3, [pc, #220]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	f023 0203 	bic.w	r2, r3, #3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	4934      	ldr	r1, [pc, #208]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ec0c:	f7fa fd36 	bl	800967c <HAL_GetTick>
 800ec10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec12:	e00a      	b.n	800ec2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ec14:	f7fa fd32 	bl	800967c <HAL_GetTick>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d901      	bls.n	800ec2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ec26:	2303      	movs	r3, #3
 800ec28:	e04f      	b.n	800ecca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec2a:	4b2b      	ldr	r3, [pc, #172]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	f003 020c 	and.w	r2, r3, #12
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d1eb      	bne.n	800ec14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ec3c:	4b25      	ldr	r3, [pc, #148]	; (800ecd4 <HAL_RCC_ClockConfig+0x1b8>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f003 0307 	and.w	r3, r3, #7
 800ec44:	683a      	ldr	r2, [r7, #0]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d20c      	bcs.n	800ec64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec4a:	4b22      	ldr	r3, [pc, #136]	; (800ecd4 <HAL_RCC_ClockConfig+0x1b8>)
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	b2d2      	uxtb	r2, r2
 800ec50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec52:	4b20      	ldr	r3, [pc, #128]	; (800ecd4 <HAL_RCC_ClockConfig+0x1b8>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f003 0307 	and.w	r3, r3, #7
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d001      	beq.n	800ec64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ec60:	2301      	movs	r3, #1
 800ec62:	e032      	b.n	800ecca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f003 0304 	and.w	r3, r3, #4
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d008      	beq.n	800ec82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ec70:	4b19      	ldr	r3, [pc, #100]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	4916      	ldr	r1, [pc, #88]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f003 0308 	and.w	r3, r3, #8
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d009      	beq.n	800eca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ec8e:	4b12      	ldr	r3, [pc, #72]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	691b      	ldr	r3, [r3, #16]
 800ec9a:	00db      	lsls	r3, r3, #3
 800ec9c:	490e      	ldr	r1, [pc, #56]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800eca2:	f000 f821 	bl	800ece8 <HAL_RCC_GetSysClockFreq>
 800eca6:	4602      	mov	r2, r0
 800eca8:	4b0b      	ldr	r3, [pc, #44]	; (800ecd8 <HAL_RCC_ClockConfig+0x1bc>)
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	091b      	lsrs	r3, r3, #4
 800ecae:	f003 030f 	and.w	r3, r3, #15
 800ecb2:	490a      	ldr	r1, [pc, #40]	; (800ecdc <HAL_RCC_ClockConfig+0x1c0>)
 800ecb4:	5ccb      	ldrb	r3, [r1, r3]
 800ecb6:	fa22 f303 	lsr.w	r3, r2, r3
 800ecba:	4a09      	ldr	r2, [pc, #36]	; (800ece0 <HAL_RCC_ClockConfig+0x1c4>)
 800ecbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ecbe:	4b09      	ldr	r3, [pc, #36]	; (800ece4 <HAL_RCC_ClockConfig+0x1c8>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7f4 fefe 	bl	8003ac4 <HAL_InitTick>

  return HAL_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	40023c00 	.word	0x40023c00
 800ecd8:	40023800 	.word	0x40023800
 800ecdc:	0801f978 	.word	0x0801f978
 800ece0:	20000004 	.word	0x20000004
 800ece4:	20000010 	.word	0x20000010

0800ece8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ece8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecec:	b090      	sub	sp, #64	; 0x40
 800ecee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	637b      	str	r3, [r7, #52]	; 0x34
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed00:	4b59      	ldr	r3, [pc, #356]	; (800ee68 <HAL_RCC_GetSysClockFreq+0x180>)
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	f003 030c 	and.w	r3, r3, #12
 800ed08:	2b08      	cmp	r3, #8
 800ed0a:	d00d      	beq.n	800ed28 <HAL_RCC_GetSysClockFreq+0x40>
 800ed0c:	2b08      	cmp	r3, #8
 800ed0e:	f200 80a1 	bhi.w	800ee54 <HAL_RCC_GetSysClockFreq+0x16c>
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d002      	beq.n	800ed1c <HAL_RCC_GetSysClockFreq+0x34>
 800ed16:	2b04      	cmp	r3, #4
 800ed18:	d003      	beq.n	800ed22 <HAL_RCC_GetSysClockFreq+0x3a>
 800ed1a:	e09b      	b.n	800ee54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ed1c:	4b53      	ldr	r3, [pc, #332]	; (800ee6c <HAL_RCC_GetSysClockFreq+0x184>)
 800ed1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800ed20:	e09b      	b.n	800ee5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ed22:	4b53      	ldr	r3, [pc, #332]	; (800ee70 <HAL_RCC_GetSysClockFreq+0x188>)
 800ed24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ed26:	e098      	b.n	800ee5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ed28:	4b4f      	ldr	r3, [pc, #316]	; (800ee68 <HAL_RCC_GetSysClockFreq+0x180>)
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ed32:	4b4d      	ldr	r3, [pc, #308]	; (800ee68 <HAL_RCC_GetSysClockFreq+0x180>)
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d028      	beq.n	800ed90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ed3e:	4b4a      	ldr	r3, [pc, #296]	; (800ee68 <HAL_RCC_GetSysClockFreq+0x180>)
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	099b      	lsrs	r3, r3, #6
 800ed44:	2200      	movs	r2, #0
 800ed46:	623b      	str	r3, [r7, #32]
 800ed48:	627a      	str	r2, [r7, #36]	; 0x24
 800ed4a:	6a3b      	ldr	r3, [r7, #32]
 800ed4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ed50:	2100      	movs	r1, #0
 800ed52:	4b47      	ldr	r3, [pc, #284]	; (800ee70 <HAL_RCC_GetSysClockFreq+0x188>)
 800ed54:	fb03 f201 	mul.w	r2, r3, r1
 800ed58:	2300      	movs	r3, #0
 800ed5a:	fb00 f303 	mul.w	r3, r0, r3
 800ed5e:	4413      	add	r3, r2
 800ed60:	4a43      	ldr	r2, [pc, #268]	; (800ee70 <HAL_RCC_GetSysClockFreq+0x188>)
 800ed62:	fba0 1202 	umull	r1, r2, r0, r2
 800ed66:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed68:	460a      	mov	r2, r1
 800ed6a:	62ba      	str	r2, [r7, #40]	; 0x28
 800ed6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed6e:	4413      	add	r3, r2
 800ed70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed74:	2200      	movs	r2, #0
 800ed76:	61bb      	str	r3, [r7, #24]
 800ed78:	61fa      	str	r2, [r7, #28]
 800ed7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ed7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ed82:	f7f1 ff81 	bl	8000c88 <__aeabi_uldivmod>
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed8e:	e053      	b.n	800ee38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ed90:	4b35      	ldr	r3, [pc, #212]	; (800ee68 <HAL_RCC_GetSysClockFreq+0x180>)
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	099b      	lsrs	r3, r3, #6
 800ed96:	2200      	movs	r2, #0
 800ed98:	613b      	str	r3, [r7, #16]
 800ed9a:	617a      	str	r2, [r7, #20]
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800eda2:	f04f 0b00 	mov.w	fp, #0
 800eda6:	4652      	mov	r2, sl
 800eda8:	465b      	mov	r3, fp
 800edaa:	f04f 0000 	mov.w	r0, #0
 800edae:	f04f 0100 	mov.w	r1, #0
 800edb2:	0159      	lsls	r1, r3, #5
 800edb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800edb8:	0150      	lsls	r0, r2, #5
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	ebb2 080a 	subs.w	r8, r2, sl
 800edc2:	eb63 090b 	sbc.w	r9, r3, fp
 800edc6:	f04f 0200 	mov.w	r2, #0
 800edca:	f04f 0300 	mov.w	r3, #0
 800edce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800edd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800edd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800edda:	ebb2 0408 	subs.w	r4, r2, r8
 800edde:	eb63 0509 	sbc.w	r5, r3, r9
 800ede2:	f04f 0200 	mov.w	r2, #0
 800ede6:	f04f 0300 	mov.w	r3, #0
 800edea:	00eb      	lsls	r3, r5, #3
 800edec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800edf0:	00e2      	lsls	r2, r4, #3
 800edf2:	4614      	mov	r4, r2
 800edf4:	461d      	mov	r5, r3
 800edf6:	eb14 030a 	adds.w	r3, r4, sl
 800edfa:	603b      	str	r3, [r7, #0]
 800edfc:	eb45 030b 	adc.w	r3, r5, fp
 800ee00:	607b      	str	r3, [r7, #4]
 800ee02:	f04f 0200 	mov.w	r2, #0
 800ee06:	f04f 0300 	mov.w	r3, #0
 800ee0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ee0e:	4629      	mov	r1, r5
 800ee10:	028b      	lsls	r3, r1, #10
 800ee12:	4621      	mov	r1, r4
 800ee14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ee18:	4621      	mov	r1, r4
 800ee1a:	028a      	lsls	r2, r1, #10
 800ee1c:	4610      	mov	r0, r2
 800ee1e:	4619      	mov	r1, r3
 800ee20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee22:	2200      	movs	r2, #0
 800ee24:	60bb      	str	r3, [r7, #8]
 800ee26:	60fa      	str	r2, [r7, #12]
 800ee28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee2c:	f7f1 ff2c 	bl	8000c88 <__aeabi_uldivmod>
 800ee30:	4602      	mov	r2, r0
 800ee32:	460b      	mov	r3, r1
 800ee34:	4613      	mov	r3, r2
 800ee36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ee38:	4b0b      	ldr	r3, [pc, #44]	; (800ee68 <HAL_RCC_GetSysClockFreq+0x180>)
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	0c1b      	lsrs	r3, r3, #16
 800ee3e:	f003 0303 	and.w	r3, r3, #3
 800ee42:	3301      	adds	r3, #1
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800ee48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ee52:	e002      	b.n	800ee5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ee54:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <HAL_RCC_GetSysClockFreq+0x184>)
 800ee56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ee58:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3740      	adds	r7, #64	; 0x40
 800ee60:	46bd      	mov	sp, r7
 800ee62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ee66:	bf00      	nop
 800ee68:	40023800 	.word	0x40023800
 800ee6c:	00f42400 	.word	0x00f42400
 800ee70:	00b71b00 	.word	0x00b71b00

0800ee74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ee74:	b480      	push	{r7}
 800ee76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ee78:	4b03      	ldr	r3, [pc, #12]	; (800ee88 <HAL_RCC_GetHCLKFreq+0x14>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	20000004 	.word	0x20000004

0800ee8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ee90:	f7ff fff0 	bl	800ee74 <HAL_RCC_GetHCLKFreq>
 800ee94:	4602      	mov	r2, r0
 800ee96:	4b05      	ldr	r3, [pc, #20]	; (800eeac <HAL_RCC_GetPCLK1Freq+0x20>)
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	0a9b      	lsrs	r3, r3, #10
 800ee9c:	f003 0307 	and.w	r3, r3, #7
 800eea0:	4903      	ldr	r1, [pc, #12]	; (800eeb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eea2:	5ccb      	ldrb	r3, [r1, r3]
 800eea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	40023800 	.word	0x40023800
 800eeb0:	0801f988 	.word	0x0801f988

0800eeb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800eeb8:	f7ff ffdc 	bl	800ee74 <HAL_RCC_GetHCLKFreq>
 800eebc:	4602      	mov	r2, r0
 800eebe:	4b05      	ldr	r3, [pc, #20]	; (800eed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	0b5b      	lsrs	r3, r3, #13
 800eec4:	f003 0307 	and.w	r3, r3, #7
 800eec8:	4903      	ldr	r1, [pc, #12]	; (800eed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800eeca:	5ccb      	ldrb	r3, [r1, r3]
 800eecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	40023800 	.word	0x40023800
 800eed8:	0801f988 	.word	0x0801f988

0800eedc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	220f      	movs	r2, #15
 800eeea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800eeec:	4b12      	ldr	r3, [pc, #72]	; (800ef38 <HAL_RCC_GetClockConfig+0x5c>)
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f003 0203 	and.w	r2, r3, #3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800eef8:	4b0f      	ldr	r3, [pc, #60]	; (800ef38 <HAL_RCC_GetClockConfig+0x5c>)
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ef04:	4b0c      	ldr	r3, [pc, #48]	; (800ef38 <HAL_RCC_GetClockConfig+0x5c>)
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ef10:	4b09      	ldr	r3, [pc, #36]	; (800ef38 <HAL_RCC_GetClockConfig+0x5c>)
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	08db      	lsrs	r3, r3, #3
 800ef16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef1e:	4b07      	ldr	r3, [pc, #28]	; (800ef3c <HAL_RCC_GetClockConfig+0x60>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f003 0207 	and.w	r2, r3, #7
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	601a      	str	r2, [r3, #0]
}
 800ef2a:	bf00      	nop
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop
 800ef38:	40023800 	.word	0x40023800
 800ef3c:	40023c00 	.word	0x40023c00

0800ef40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e01c      	b.n	800ef8c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	795b      	ldrb	r3, [r3, #5]
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d105      	bne.n	800ef68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f7f4 fc5e 	bl	8003824 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f042 0204 	orr.w	r2, r2, #4
 800ef7c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2201      	movs	r2, #1
 800ef82:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800efa2:	2301      	movs	r3, #1
 800efa4:	e07b      	b.n	800f09e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d108      	bne.n	800efc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efb6:	d009      	beq.n	800efcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	61da      	str	r2, [r3, #28]
 800efbe:	e005      	b.n	800efcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d106      	bne.n	800efec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7f4 fc74 	bl	80038d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2202      	movs	r2, #2
 800eff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f002:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	689b      	ldr	r3, [r3, #8]
 800f010:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f014:	431a      	orrs	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f01e:	431a      	orrs	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	f003 0302 	and.w	r3, r3, #2
 800f028:	431a      	orrs	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	695b      	ldr	r3, [r3, #20]
 800f02e:	f003 0301 	and.w	r3, r3, #1
 800f032:	431a      	orrs	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	699b      	ldr	r3, [r3, #24]
 800f038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f03c:	431a      	orrs	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	69db      	ldr	r3, [r3, #28]
 800f042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f046:	431a      	orrs	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a1b      	ldr	r3, [r3, #32]
 800f04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f050:	ea42 0103 	orr.w	r1, r2, r3
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f058:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	430a      	orrs	r2, r1
 800f062:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	699b      	ldr	r3, [r3, #24]
 800f068:	0c1b      	lsrs	r3, r3, #16
 800f06a:	f003 0104 	and.w	r1, r3, #4
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f072:	f003 0210 	and.w	r2, r3, #16
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	430a      	orrs	r2, r1
 800f07c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	69da      	ldr	r2, [r3, #28]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f08c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b088      	sub	sp, #32
 800f0aa:	af02      	add	r7, sp, #8
 800f0ac:	60f8      	str	r0, [r7, #12]
 800f0ae:	60b9      	str	r1, [r7, #8]
 800f0b0:	603b      	str	r3, [r7, #0]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f0c2:	d112      	bne.n	800f0ea <HAL_SPI_Receive+0x44>
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10e      	bne.n	800f0ea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2204      	movs	r2, #4
 800f0d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f0d4:	88fa      	ldrh	r2, [r7, #6]
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	68b9      	ldr	r1, [r7, #8]
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f000 f8f1 	bl	800f2c8 <HAL_SPI_TransmitReceive>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	e0ea      	b.n	800f2c0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d101      	bne.n	800f0f8 <HAL_SPI_Receive+0x52>
 800f0f4:	2302      	movs	r3, #2
 800f0f6:	e0e3      	b.n	800f2c0 <HAL_SPI_Receive+0x21a>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f100:	f7fa fabc 	bl	800967c <HAL_GetTick>
 800f104:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d002      	beq.n	800f118 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800f112:	2302      	movs	r3, #2
 800f114:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f116:	e0ca      	b.n	800f2ae <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d002      	beq.n	800f124 <HAL_SPI_Receive+0x7e>
 800f11e:	88fb      	ldrh	r3, [r7, #6]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d102      	bne.n	800f12a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f124:	2301      	movs	r3, #1
 800f126:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f128:	e0c1      	b.n	800f2ae <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2204      	movs	r2, #4
 800f12e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2200      	movs	r2, #0
 800f136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	68ba      	ldr	r2, [r7, #8]
 800f13c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	88fa      	ldrh	r2, [r7, #6]
 800f142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	88fa      	ldrh	r2, [r7, #6]
 800f148:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2200      	movs	r2, #0
 800f14e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2200      	movs	r2, #0
 800f154:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2200      	movs	r2, #0
 800f166:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f170:	d10f      	bne.n	800f192 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f180:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f190:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f19c:	2b40      	cmp	r3, #64	; 0x40
 800f19e:	d007      	beq.n	800f1b0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d162      	bne.n	800f27e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f1b8:	e02e      	b.n	800f218 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	f003 0301 	and.w	r3, r3, #1
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d115      	bne.n	800f1f4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f103 020c 	add.w	r2, r3, #12
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d4:	7812      	ldrb	r2, [r2, #0]
 800f1d6:	b2d2      	uxtb	r2, r2
 800f1d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1de:	1c5a      	adds	r2, r3, #1
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	3b01      	subs	r3, #1
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f1f2:	e011      	b.n	800f218 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1f4:	f7fa fa42 	bl	800967c <HAL_GetTick>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	429a      	cmp	r2, r3
 800f202:	d803      	bhi.n	800f20c <HAL_SPI_Receive+0x166>
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f20a:	d102      	bne.n	800f212 <HAL_SPI_Receive+0x16c>
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d102      	bne.n	800f218 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800f212:	2303      	movs	r3, #3
 800f214:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f216:	e04a      	b.n	800f2ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1cb      	bne.n	800f1ba <HAL_SPI_Receive+0x114>
 800f222:	e031      	b.n	800f288 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	f003 0301 	and.w	r3, r3, #1
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d113      	bne.n	800f25a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	68da      	ldr	r2, [r3, #12]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23c:	b292      	uxth	r2, r2
 800f23e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f244:	1c9a      	adds	r2, r3, #2
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f24e:	b29b      	uxth	r3, r3
 800f250:	3b01      	subs	r3, #1
 800f252:	b29a      	uxth	r2, r3
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f258:	e011      	b.n	800f27e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f25a:	f7fa fa0f 	bl	800967c <HAL_GetTick>
 800f25e:	4602      	mov	r2, r0
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	1ad3      	subs	r3, r2, r3
 800f264:	683a      	ldr	r2, [r7, #0]
 800f266:	429a      	cmp	r2, r3
 800f268:	d803      	bhi.n	800f272 <HAL_SPI_Receive+0x1cc>
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f270:	d102      	bne.n	800f278 <HAL_SPI_Receive+0x1d2>
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d102      	bne.n	800f27e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800f278:	2303      	movs	r3, #3
 800f27a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f27c:	e017      	b.n	800f2ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f282:	b29b      	uxth	r3, r3
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1cd      	bne.n	800f224 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f288:	693a      	ldr	r2, [r7, #16]
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	68f8      	ldr	r0, [r7, #12]
 800f28e:	f000 fa45 	bl	800f71c <SPI_EndRxTransaction>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d002      	beq.n	800f29e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2220      	movs	r2, #32
 800f29c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d002      	beq.n	800f2ac <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	75fb      	strb	r3, [r7, #23]
 800f2aa:	e000      	b.n	800f2ae <HAL_SPI_Receive+0x208>
  }

error :
 800f2ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b08c      	sub	sp, #48	; 0x30
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
 800f2d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d101      	bne.n	800f2ee <HAL_SPI_TransmitReceive+0x26>
 800f2ea:	2302      	movs	r3, #2
 800f2ec:	e18a      	b.n	800f604 <HAL_SPI_TransmitReceive+0x33c>
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f2f6:	f7fa f9c1 	bl	800967c <HAL_GetTick>
 800f2fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f30c:	887b      	ldrh	r3, [r7, #2]
 800f30e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f314:	2b01      	cmp	r3, #1
 800f316:	d00f      	beq.n	800f338 <HAL_SPI_TransmitReceive+0x70>
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f31e:	d107      	bne.n	800f330 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d103      	bne.n	800f330 <HAL_SPI_TransmitReceive+0x68>
 800f328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f32c:	2b04      	cmp	r3, #4
 800f32e:	d003      	beq.n	800f338 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f330:	2302      	movs	r3, #2
 800f332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f336:	e15b      	b.n	800f5f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d005      	beq.n	800f34a <HAL_SPI_TransmitReceive+0x82>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d002      	beq.n	800f34a <HAL_SPI_TransmitReceive+0x82>
 800f344:	887b      	ldrh	r3, [r7, #2]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d103      	bne.n	800f352 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f34a:	2301      	movs	r3, #1
 800f34c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f350:	e14e      	b.n	800f5f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b04      	cmp	r3, #4
 800f35c:	d003      	beq.n	800f366 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2205      	movs	r2, #5
 800f362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2200      	movs	r2, #0
 800f36a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	887a      	ldrh	r2, [r7, #2]
 800f376:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	887a      	ldrh	r2, [r7, #2]
 800f37c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	68ba      	ldr	r2, [r7, #8]
 800f382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	887a      	ldrh	r2, [r7, #2]
 800f388:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	887a      	ldrh	r2, [r7, #2]
 800f38e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	2200      	movs	r2, #0
 800f394:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2200      	movs	r2, #0
 800f39a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a6:	2b40      	cmp	r3, #64	; 0x40
 800f3a8:	d007      	beq.n	800f3ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f3b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f3c2:	d178      	bne.n	800f4b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d002      	beq.n	800f3d2 <HAL_SPI_TransmitReceive+0x10a>
 800f3cc:	8b7b      	ldrh	r3, [r7, #26]
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d166      	bne.n	800f4a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3d6:	881a      	ldrh	r2, [r3, #0]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e2:	1c9a      	adds	r2, r3, #2
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	b29a      	uxth	r2, r3
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f3f6:	e053      	b.n	800f4a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	f003 0302 	and.w	r3, r3, #2
 800f402:	2b02      	cmp	r3, #2
 800f404:	d11b      	bne.n	800f43e <HAL_SPI_TransmitReceive+0x176>
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d016      	beq.n	800f43e <HAL_SPI_TransmitReceive+0x176>
 800f410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f412:	2b01      	cmp	r3, #1
 800f414:	d113      	bne.n	800f43e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f41a:	881a      	ldrh	r2, [r3, #0]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f426:	1c9a      	adds	r2, r3, #2
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f430:	b29b      	uxth	r3, r3
 800f432:	3b01      	subs	r3, #1
 800f434:	b29a      	uxth	r2, r3
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f43a:	2300      	movs	r3, #0
 800f43c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	f003 0301 	and.w	r3, r3, #1
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d119      	bne.n	800f480 <HAL_SPI_TransmitReceive+0x1b8>
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f450:	b29b      	uxth	r3, r3
 800f452:	2b00      	cmp	r3, #0
 800f454:	d014      	beq.n	800f480 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	68da      	ldr	r2, [r3, #12]
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f460:	b292      	uxth	r2, r2
 800f462:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f468:	1c9a      	adds	r2, r3, #2
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f472:	b29b      	uxth	r3, r3
 800f474:	3b01      	subs	r3, #1
 800f476:	b29a      	uxth	r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f47c:	2301      	movs	r3, #1
 800f47e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f480:	f7fa f8fc 	bl	800967c <HAL_GetTick>
 800f484:	4602      	mov	r2, r0
 800f486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f488:	1ad3      	subs	r3, r2, r3
 800f48a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d807      	bhi.n	800f4a0 <HAL_SPI_TransmitReceive+0x1d8>
 800f490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f496:	d003      	beq.n	800f4a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f498:	2303      	movs	r3, #3
 800f49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f49e:	e0a7      	b.n	800f5f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d1a6      	bne.n	800f3f8 <HAL_SPI_TransmitReceive+0x130>
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d1a1      	bne.n	800f3f8 <HAL_SPI_TransmitReceive+0x130>
 800f4b4:	e07c      	b.n	800f5b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d002      	beq.n	800f4c4 <HAL_SPI_TransmitReceive+0x1fc>
 800f4be:	8b7b      	ldrh	r3, [r7, #26]
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d16b      	bne.n	800f59c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	330c      	adds	r3, #12
 800f4ce:	7812      	ldrb	r2, [r2, #0]
 800f4d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4d6:	1c5a      	adds	r2, r3, #1
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f4ea:	e057      	b.n	800f59c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	f003 0302 	and.w	r3, r3, #2
 800f4f6:	2b02      	cmp	r3, #2
 800f4f8:	d11c      	bne.n	800f534 <HAL_SPI_TransmitReceive+0x26c>
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	d017      	beq.n	800f534 <HAL_SPI_TransmitReceive+0x26c>
 800f504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f506:	2b01      	cmp	r3, #1
 800f508:	d114      	bne.n	800f534 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	330c      	adds	r3, #12
 800f514:	7812      	ldrb	r2, [r2, #0]
 800f516:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f51c:	1c5a      	adds	r2, r3, #1
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f526:	b29b      	uxth	r3, r3
 800f528:	3b01      	subs	r3, #1
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f530:	2300      	movs	r3, #0
 800f532:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	689b      	ldr	r3, [r3, #8]
 800f53a:	f003 0301 	and.w	r3, r3, #1
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d119      	bne.n	800f576 <HAL_SPI_TransmitReceive+0x2ae>
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f546:	b29b      	uxth	r3, r3
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d014      	beq.n	800f576 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68da      	ldr	r2, [r3, #12]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f556:	b2d2      	uxtb	r2, r2
 800f558:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f55e:	1c5a      	adds	r2, r3, #1
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f568:	b29b      	uxth	r3, r3
 800f56a:	3b01      	subs	r3, #1
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f572:	2301      	movs	r3, #1
 800f574:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f576:	f7fa f881 	bl	800967c <HAL_GetTick>
 800f57a:	4602      	mov	r2, r0
 800f57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57e:	1ad3      	subs	r3, r2, r3
 800f580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f582:	429a      	cmp	r2, r3
 800f584:	d803      	bhi.n	800f58e <HAL_SPI_TransmitReceive+0x2c6>
 800f586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f58c:	d102      	bne.n	800f594 <HAL_SPI_TransmitReceive+0x2cc>
 800f58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f590:	2b00      	cmp	r3, #0
 800f592:	d103      	bne.n	800f59c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f594:	2303      	movs	r3, #3
 800f596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f59a:	e029      	b.n	800f5f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1a2      	bne.n	800f4ec <HAL_SPI_TransmitReceive+0x224>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d19d      	bne.n	800f4ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f000 f917 	bl	800f7e8 <SPI_EndRxTxTransaction>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d006      	beq.n	800f5ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2220      	movs	r2, #32
 800f5ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f5cc:	e010      	b.n	800f5f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d10b      	bne.n	800f5ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	617b      	str	r3, [r7, #20]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	617b      	str	r3, [r7, #20]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	617b      	str	r3, [r7, #20]
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	e000      	b.n	800f5f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f5ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f604:	4618      	mov	r0, r3
 800f606:	3730      	adds	r7, #48	; 0x30
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b088      	sub	sp, #32
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	603b      	str	r3, [r7, #0]
 800f618:	4613      	mov	r3, r2
 800f61a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f61c:	f7fa f82e 	bl	800967c <HAL_GetTick>
 800f620:	4602      	mov	r2, r0
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	1a9b      	subs	r3, r3, r2
 800f626:	683a      	ldr	r2, [r7, #0]
 800f628:	4413      	add	r3, r2
 800f62a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f62c:	f7fa f826 	bl	800967c <HAL_GetTick>
 800f630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f632:	4b39      	ldr	r3, [pc, #228]	; (800f718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	015b      	lsls	r3, r3, #5
 800f638:	0d1b      	lsrs	r3, r3, #20
 800f63a:	69fa      	ldr	r2, [r7, #28]
 800f63c:	fb02 f303 	mul.w	r3, r2, r3
 800f640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f642:	e054      	b.n	800f6ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f64a:	d050      	beq.n	800f6ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f64c:	f7fa f816 	bl	800967c <HAL_GetTick>
 800f650:	4602      	mov	r2, r0
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	1ad3      	subs	r3, r2, r3
 800f656:	69fa      	ldr	r2, [r7, #28]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d902      	bls.n	800f662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d13d      	bne.n	800f6de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	685a      	ldr	r2, [r3, #4]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f67a:	d111      	bne.n	800f6a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f684:	d004      	beq.n	800f690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	689b      	ldr	r3, [r3, #8]
 800f68a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f68e:	d107      	bne.n	800f6a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f69e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6a8:	d10f      	bne.n	800f6ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f6c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f6da:	2303      	movs	r3, #3
 800f6dc:	e017      	b.n	800f70e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d101      	bne.n	800f6e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	689a      	ldr	r2, [r3, #8]
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	4013      	ands	r3, r2
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	bf0c      	ite	eq
 800f6fe:	2301      	moveq	r3, #1
 800f700:	2300      	movne	r3, #0
 800f702:	b2db      	uxtb	r3, r3
 800f704:	461a      	mov	r2, r3
 800f706:	79fb      	ldrb	r3, [r7, #7]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d19b      	bne.n	800f644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f70c:	2300      	movs	r3, #0
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3720      	adds	r7, #32
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	20000004 	.word	0x20000004

0800f71c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af02      	add	r7, sp, #8
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f730:	d111      	bne.n	800f756 <SPI_EndRxTransaction+0x3a>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f73a:	d004      	beq.n	800f746 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f744:	d107      	bne.n	800f756 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f754:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f75e:	d12a      	bne.n	800f7b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f768:	d012      	beq.n	800f790 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	2200      	movs	r2, #0
 800f772:	2180      	movs	r1, #128	; 0x80
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f7ff ff49 	bl	800f60c <SPI_WaitFlagStateUntilTimeout>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d02d      	beq.n	800f7dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f784:	f043 0220 	orr.w	r2, r3, #32
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f78c:	2303      	movs	r3, #3
 800f78e:	e026      	b.n	800f7de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	2200      	movs	r2, #0
 800f798:	2101      	movs	r1, #1
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f7ff ff36 	bl	800f60c <SPI_WaitFlagStateUntilTimeout>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d01a      	beq.n	800f7dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7aa:	f043 0220 	orr.w	r2, r3, #32
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f7b2:	2303      	movs	r3, #3
 800f7b4:	e013      	b.n	800f7de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	9300      	str	r3, [sp, #0]
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	2101      	movs	r1, #1
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f7ff ff23 	bl	800f60c <SPI_WaitFlagStateUntilTimeout>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d007      	beq.n	800f7dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7d0:	f043 0220 	orr.w	r2, r3, #32
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f7d8:	2303      	movs	r3, #3
 800f7da:	e000      	b.n	800f7de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
	...

0800f7e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b088      	sub	sp, #32
 800f7ec:	af02      	add	r7, sp, #8
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f7f4:	4b1b      	ldr	r3, [pc, #108]	; (800f864 <SPI_EndRxTxTransaction+0x7c>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4a1b      	ldr	r2, [pc, #108]	; (800f868 <SPI_EndRxTxTransaction+0x80>)
 800f7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f7fe:	0d5b      	lsrs	r3, r3, #21
 800f800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f804:	fb02 f303 	mul.w	r3, r2, r3
 800f808:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f812:	d112      	bne.n	800f83a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2200      	movs	r2, #0
 800f81c:	2180      	movs	r1, #128	; 0x80
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f7ff fef4 	bl	800f60c <SPI_WaitFlagStateUntilTimeout>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d016      	beq.n	800f858 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f82e:	f043 0220 	orr.w	r2, r3, #32
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f836:	2303      	movs	r3, #3
 800f838:	e00f      	b.n	800f85a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d00a      	beq.n	800f856 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	3b01      	subs	r3, #1
 800f844:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f850:	2b80      	cmp	r3, #128	; 0x80
 800f852:	d0f2      	beq.n	800f83a <SPI_EndRxTxTransaction+0x52>
 800f854:	e000      	b.n	800f858 <SPI_EndRxTxTransaction+0x70>
        break;
 800f856:	bf00      	nop
  }

  return HAL_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3718      	adds	r7, #24
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	20000004 	.word	0x20000004
 800f868:	165e9f81 	.word	0x165e9f81

0800f86c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d101      	bne.n	800f87e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f87a:	2301      	movs	r3, #1
 800f87c:	e041      	b.n	800f902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f884:	b2db      	uxtb	r3, r3
 800f886:	2b00      	cmp	r3, #0
 800f888:	d106      	bne.n	800f898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7f4 fdc2 	bl	800441c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2202      	movs	r2, #2
 800f89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	3304      	adds	r3, #4
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	4610      	mov	r0, r2
 800f8ac:	f000 fd8c 	bl	80103c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f900:	2300      	movs	r3, #0
}
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
	...

0800f90c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d001      	beq.n	800f924 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f920:	2301      	movs	r3, #1
 800f922:	e046      	b.n	800f9b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2202      	movs	r2, #2
 800f928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a23      	ldr	r2, [pc, #140]	; (800f9c0 <HAL_TIM_Base_Start+0xb4>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d022      	beq.n	800f97c <HAL_TIM_Base_Start+0x70>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f93e:	d01d      	beq.n	800f97c <HAL_TIM_Base_Start+0x70>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a1f      	ldr	r2, [pc, #124]	; (800f9c4 <HAL_TIM_Base_Start+0xb8>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d018      	beq.n	800f97c <HAL_TIM_Base_Start+0x70>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a1e      	ldr	r2, [pc, #120]	; (800f9c8 <HAL_TIM_Base_Start+0xbc>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d013      	beq.n	800f97c <HAL_TIM_Base_Start+0x70>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4a1c      	ldr	r2, [pc, #112]	; (800f9cc <HAL_TIM_Base_Start+0xc0>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d00e      	beq.n	800f97c <HAL_TIM_Base_Start+0x70>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4a1b      	ldr	r2, [pc, #108]	; (800f9d0 <HAL_TIM_Base_Start+0xc4>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d009      	beq.n	800f97c <HAL_TIM_Base_Start+0x70>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a19      	ldr	r2, [pc, #100]	; (800f9d4 <HAL_TIM_Base_Start+0xc8>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d004      	beq.n	800f97c <HAL_TIM_Base_Start+0x70>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4a18      	ldr	r2, [pc, #96]	; (800f9d8 <HAL_TIM_Base_Start+0xcc>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d111      	bne.n	800f9a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	689b      	ldr	r3, [r3, #8]
 800f982:	f003 0307 	and.w	r3, r3, #7
 800f986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2b06      	cmp	r3, #6
 800f98c:	d010      	beq.n	800f9b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f042 0201 	orr.w	r2, r2, #1
 800f99c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f99e:	e007      	b.n	800f9b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f042 0201 	orr.w	r2, r2, #1
 800f9ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	40010000 	.word	0x40010000
 800f9c4:	40000400 	.word	0x40000400
 800f9c8:	40000800 	.word	0x40000800
 800f9cc:	40000c00 	.word	0x40000c00
 800f9d0:	40010400 	.word	0x40010400
 800f9d4:	40014000 	.word	0x40014000
 800f9d8:	40001800 	.word	0x40001800

0800f9dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b085      	sub	sp, #20
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d001      	beq.n	800f9f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e04e      	b.n	800fa92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2202      	movs	r2, #2
 800f9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68da      	ldr	r2, [r3, #12]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f042 0201 	orr.w	r2, r2, #1
 800fa0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4a23      	ldr	r2, [pc, #140]	; (800faa0 <HAL_TIM_Base_Start_IT+0xc4>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d022      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x80>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa1e:	d01d      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x80>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4a1f      	ldr	r2, [pc, #124]	; (800faa4 <HAL_TIM_Base_Start_IT+0xc8>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d018      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x80>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4a1e      	ldr	r2, [pc, #120]	; (800faa8 <HAL_TIM_Base_Start_IT+0xcc>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d013      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x80>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a1c      	ldr	r2, [pc, #112]	; (800faac <HAL_TIM_Base_Start_IT+0xd0>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d00e      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x80>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a1b      	ldr	r2, [pc, #108]	; (800fab0 <HAL_TIM_Base_Start_IT+0xd4>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d009      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x80>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4a19      	ldr	r2, [pc, #100]	; (800fab4 <HAL_TIM_Base_Start_IT+0xd8>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d004      	beq.n	800fa5c <HAL_TIM_Base_Start_IT+0x80>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a18      	ldr	r2, [pc, #96]	; (800fab8 <HAL_TIM_Base_Start_IT+0xdc>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d111      	bne.n	800fa80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	689b      	ldr	r3, [r3, #8]
 800fa62:	f003 0307 	and.w	r3, r3, #7
 800fa66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2b06      	cmp	r3, #6
 800fa6c:	d010      	beq.n	800fa90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f042 0201 	orr.w	r2, r2, #1
 800fa7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa7e:	e007      	b.n	800fa90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f042 0201 	orr.w	r2, r2, #1
 800fa8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa90:	2300      	movs	r3, #0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	40010000 	.word	0x40010000
 800faa4:	40000400 	.word	0x40000400
 800faa8:	40000800 	.word	0x40000800
 800faac:	40000c00 	.word	0x40000c00
 800fab0:	40010400 	.word	0x40010400
 800fab4:	40014000 	.word	0x40014000
 800fab8:	40001800 	.word	0x40001800

0800fabc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d101      	bne.n	800face <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800faca:	2301      	movs	r3, #1
 800facc:	e041      	b.n	800fb52 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d106      	bne.n	800fae8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f839 	bl	800fb5a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2202      	movs	r2, #2
 800faec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	3304      	adds	r3, #4
 800faf8:	4619      	mov	r1, r3
 800fafa:	4610      	mov	r0, r2
 800fafc:	f000 fc64 	bl	80103c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2201      	movs	r2, #1
 800fb04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2201      	movs	r2, #1
 800fb14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2201      	movs	r2, #1
 800fb24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2201      	movs	r2, #1
 800fb34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb50:	2300      	movs	r3, #0
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800fb5a:	b480      	push	{r7}
 800fb5c:	b083      	sub	sp, #12
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800fb62:	bf00      	nop
 800fb64:	370c      	adds	r7, #12
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr

0800fb6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b082      	sub	sp, #8
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d101      	bne.n	800fb80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e041      	b.n	800fc04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d106      	bne.n	800fb9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f7f4 fbf3 	bl	8004380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2202      	movs	r2, #2
 800fb9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	3304      	adds	r3, #4
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4610      	mov	r0, r2
 800fbae:	f000 fc0b 	bl	80103c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2201      	movs	r2, #1
 800fbee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc02:	2300      	movs	r3, #0
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d109      	bne.n	800fc30 <HAL_TIM_PWM_Start+0x24>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	bf14      	ite	ne
 800fc28:	2301      	movne	r3, #1
 800fc2a:	2300      	moveq	r3, #0
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	e022      	b.n	800fc76 <HAL_TIM_PWM_Start+0x6a>
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	2b04      	cmp	r3, #4
 800fc34:	d109      	bne.n	800fc4a <HAL_TIM_PWM_Start+0x3e>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	bf14      	ite	ne
 800fc42:	2301      	movne	r3, #1
 800fc44:	2300      	moveq	r3, #0
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	e015      	b.n	800fc76 <HAL_TIM_PWM_Start+0x6a>
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	2b08      	cmp	r3, #8
 800fc4e:	d109      	bne.n	800fc64 <HAL_TIM_PWM_Start+0x58>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	bf14      	ite	ne
 800fc5c:	2301      	movne	r3, #1
 800fc5e:	2300      	moveq	r3, #0
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	e008      	b.n	800fc76 <HAL_TIM_PWM_Start+0x6a>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	bf14      	ite	ne
 800fc70:	2301      	movne	r3, #1
 800fc72:	2300      	moveq	r3, #0
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e07c      	b.n	800fd78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d104      	bne.n	800fc8e <HAL_TIM_PWM_Start+0x82>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2202      	movs	r2, #2
 800fc88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc8c:	e013      	b.n	800fcb6 <HAL_TIM_PWM_Start+0xaa>
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	2b04      	cmp	r3, #4
 800fc92:	d104      	bne.n	800fc9e <HAL_TIM_PWM_Start+0x92>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2202      	movs	r2, #2
 800fc98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc9c:	e00b      	b.n	800fcb6 <HAL_TIM_PWM_Start+0xaa>
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	2b08      	cmp	r3, #8
 800fca2:	d104      	bne.n	800fcae <HAL_TIM_PWM_Start+0xa2>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2202      	movs	r2, #2
 800fca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fcac:	e003      	b.n	800fcb6 <HAL_TIM_PWM_Start+0xaa>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2202      	movs	r2, #2
 800fcb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	6839      	ldr	r1, [r7, #0]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 fe6c 	bl	801099c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	4a2d      	ldr	r2, [pc, #180]	; (800fd80 <HAL_TIM_PWM_Start+0x174>)
 800fcca:	4293      	cmp	r3, r2
 800fccc:	d004      	beq.n	800fcd8 <HAL_TIM_PWM_Start+0xcc>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a2c      	ldr	r2, [pc, #176]	; (800fd84 <HAL_TIM_PWM_Start+0x178>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d101      	bne.n	800fcdc <HAL_TIM_PWM_Start+0xd0>
 800fcd8:	2301      	movs	r3, #1
 800fcda:	e000      	b.n	800fcde <HAL_TIM_PWM_Start+0xd2>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d007      	beq.n	800fcf2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fcf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4a22      	ldr	r2, [pc, #136]	; (800fd80 <HAL_TIM_PWM_Start+0x174>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d022      	beq.n	800fd42 <HAL_TIM_PWM_Start+0x136>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd04:	d01d      	beq.n	800fd42 <HAL_TIM_PWM_Start+0x136>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a1f      	ldr	r2, [pc, #124]	; (800fd88 <HAL_TIM_PWM_Start+0x17c>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d018      	beq.n	800fd42 <HAL_TIM_PWM_Start+0x136>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a1d      	ldr	r2, [pc, #116]	; (800fd8c <HAL_TIM_PWM_Start+0x180>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d013      	beq.n	800fd42 <HAL_TIM_PWM_Start+0x136>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a1c      	ldr	r2, [pc, #112]	; (800fd90 <HAL_TIM_PWM_Start+0x184>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d00e      	beq.n	800fd42 <HAL_TIM_PWM_Start+0x136>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4a16      	ldr	r2, [pc, #88]	; (800fd84 <HAL_TIM_PWM_Start+0x178>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d009      	beq.n	800fd42 <HAL_TIM_PWM_Start+0x136>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4a18      	ldr	r2, [pc, #96]	; (800fd94 <HAL_TIM_PWM_Start+0x188>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d004      	beq.n	800fd42 <HAL_TIM_PWM_Start+0x136>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	4a16      	ldr	r2, [pc, #88]	; (800fd98 <HAL_TIM_PWM_Start+0x18c>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d111      	bne.n	800fd66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	f003 0307 	and.w	r3, r3, #7
 800fd4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2b06      	cmp	r3, #6
 800fd52:	d010      	beq.n	800fd76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f042 0201 	orr.w	r2, r2, #1
 800fd62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd64:	e007      	b.n	800fd76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f042 0201 	orr.w	r2, r2, #1
 800fd74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fd76:	2300      	movs	r3, #0
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	40010000 	.word	0x40010000
 800fd84:	40010400 	.word	0x40010400
 800fd88:	40000400 	.word	0x40000400
 800fd8c:	40000800 	.word	0x40000800
 800fd90:	40000c00 	.word	0x40000c00
 800fd94:	40014000 	.word	0x40014000
 800fd98:	40001800 	.word	0x40001800

0800fd9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	691b      	ldr	r3, [r3, #16]
 800fdaa:	f003 0302 	and.w	r3, r3, #2
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d122      	bne.n	800fdf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d11b      	bne.n	800fdf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f06f 0202 	mvn.w	r2, #2
 800fdc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2201      	movs	r2, #1
 800fdce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	699b      	ldr	r3, [r3, #24]
 800fdd6:	f003 0303 	and.w	r3, r3, #3
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d003      	beq.n	800fde6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 fad3 	bl	801038a <HAL_TIM_IC_CaptureCallback>
 800fde4:	e005      	b.n	800fdf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 fac5 	bl	8010376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 fad6 	bl	801039e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	691b      	ldr	r3, [r3, #16]
 800fdfe:	f003 0304 	and.w	r3, r3, #4
 800fe02:	2b04      	cmp	r3, #4
 800fe04:	d122      	bne.n	800fe4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	f003 0304 	and.w	r3, r3, #4
 800fe10:	2b04      	cmp	r3, #4
 800fe12:	d11b      	bne.n	800fe4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f06f 0204 	mvn.w	r2, #4
 800fe1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2202      	movs	r2, #2
 800fe22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	699b      	ldr	r3, [r3, #24]
 800fe2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d003      	beq.n	800fe3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 faa9 	bl	801038a <HAL_TIM_IC_CaptureCallback>
 800fe38:	e005      	b.n	800fe46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 fa9b 	bl	8010376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 faac 	bl	801039e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	691b      	ldr	r3, [r3, #16]
 800fe52:	f003 0308 	and.w	r3, r3, #8
 800fe56:	2b08      	cmp	r3, #8
 800fe58:	d122      	bne.n	800fea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	f003 0308 	and.w	r3, r3, #8
 800fe64:	2b08      	cmp	r3, #8
 800fe66:	d11b      	bne.n	800fea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f06f 0208 	mvn.w	r2, #8
 800fe70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2204      	movs	r2, #4
 800fe76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	69db      	ldr	r3, [r3, #28]
 800fe7e:	f003 0303 	and.w	r3, r3, #3
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d003      	beq.n	800fe8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 fa7f 	bl	801038a <HAL_TIM_IC_CaptureCallback>
 800fe8c:	e005      	b.n	800fe9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 fa71 	bl	8010376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 fa82 	bl	801039e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	691b      	ldr	r3, [r3, #16]
 800fea6:	f003 0310 	and.w	r3, r3, #16
 800feaa:	2b10      	cmp	r3, #16
 800feac:	d122      	bne.n	800fef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	f003 0310 	and.w	r3, r3, #16
 800feb8:	2b10      	cmp	r3, #16
 800feba:	d11b      	bne.n	800fef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	f06f 0210 	mvn.w	r2, #16
 800fec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2208      	movs	r2, #8
 800feca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	69db      	ldr	r3, [r3, #28]
 800fed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d003      	beq.n	800fee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f000 fa55 	bl	801038a <HAL_TIM_IC_CaptureCallback>
 800fee0:	e005      	b.n	800feee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 fa47 	bl	8010376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 fa58 	bl	801039e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	f003 0301 	and.w	r3, r3, #1
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d10e      	bne.n	800ff20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	f003 0301 	and.w	r3, r3, #1
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d107      	bne.n	800ff20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f06f 0201 	mvn.w	r2, #1
 800ff18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7f3 fc5a 	bl	80037d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	691b      	ldr	r3, [r3, #16]
 800ff26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff2a:	2b80      	cmp	r3, #128	; 0x80
 800ff2c:	d10e      	bne.n	800ff4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff38:	2b80      	cmp	r3, #128	; 0x80
 800ff3a:	d107      	bne.n	800ff4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ff44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 fe26 	bl	8010b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	691b      	ldr	r3, [r3, #16]
 800ff52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff56:	2b40      	cmp	r3, #64	; 0x40
 800ff58:	d10e      	bne.n	800ff78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff64:	2b40      	cmp	r3, #64	; 0x40
 800ff66:	d107      	bne.n	800ff78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ff70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 fa1d 	bl	80103b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	f003 0320 	and.w	r3, r3, #32
 800ff82:	2b20      	cmp	r3, #32
 800ff84:	d10e      	bne.n	800ffa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	f003 0320 	and.w	r3, r3, #32
 800ff90:	2b20      	cmp	r3, #32
 800ff92:	d107      	bne.n	800ffa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f06f 0220 	mvn.w	r2, #32
 800ff9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 fdf0 	bl	8010b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ffa4:	bf00      	nop
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b086      	sub	sp, #24
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d101      	bne.n	800ffca <HAL_TIM_OC_ConfigChannel+0x1e>
 800ffc6:	2302      	movs	r3, #2
 800ffc8:	e048      	b.n	801005c <HAL_TIM_OC_ConfigChannel+0xb0>
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2b0c      	cmp	r3, #12
 800ffd6:	d839      	bhi.n	801004c <HAL_TIM_OC_ConfigChannel+0xa0>
 800ffd8:	a201      	add	r2, pc, #4	; (adr r2, 800ffe0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800ffda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffde:	bf00      	nop
 800ffe0:	08010015 	.word	0x08010015
 800ffe4:	0801004d 	.word	0x0801004d
 800ffe8:	0801004d 	.word	0x0801004d
 800ffec:	0801004d 	.word	0x0801004d
 800fff0:	08010023 	.word	0x08010023
 800fff4:	0801004d 	.word	0x0801004d
 800fff8:	0801004d 	.word	0x0801004d
 800fffc:	0801004d 	.word	0x0801004d
 8010000:	08010031 	.word	0x08010031
 8010004:	0801004d 	.word	0x0801004d
 8010008:	0801004d 	.word	0x0801004d
 801000c:	0801004d 	.word	0x0801004d
 8010010:	0801003f 	.word	0x0801003f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	68b9      	ldr	r1, [r7, #8]
 801001a:	4618      	mov	r0, r3
 801001c:	f000 fa74 	bl	8010508 <TIM_OC1_SetConfig>
      break;
 8010020:	e017      	b.n	8010052 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	68b9      	ldr	r1, [r7, #8]
 8010028:	4618      	mov	r0, r3
 801002a:	f000 fadd 	bl	80105e8 <TIM_OC2_SetConfig>
      break;
 801002e:	e010      	b.n	8010052 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68b9      	ldr	r1, [r7, #8]
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fb4c 	bl	80106d4 <TIM_OC3_SetConfig>
      break;
 801003c:	e009      	b.n	8010052 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	68b9      	ldr	r1, [r7, #8]
 8010044:	4618      	mov	r0, r3
 8010046:	f000 fbb9 	bl	80107bc <TIM_OC4_SetConfig>
      break;
 801004a:	e002      	b.n	8010052 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801004c:	2301      	movs	r3, #1
 801004e:	75fb      	strb	r3, [r7, #23]
      break;
 8010050:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2200      	movs	r2, #0
 8010056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801005a:	7dfb      	ldrb	r3, [r7, #23]
}
 801005c:	4618      	mov	r0, r3
 801005e:	3718      	adds	r7, #24
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010070:	2300      	movs	r3, #0
 8010072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801007a:	2b01      	cmp	r3, #1
 801007c:	d101      	bne.n	8010082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801007e:	2302      	movs	r3, #2
 8010080:	e0ae      	b.n	80101e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2201      	movs	r2, #1
 8010086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2b0c      	cmp	r3, #12
 801008e:	f200 809f 	bhi.w	80101d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8010092:	a201      	add	r2, pc, #4	; (adr r2, 8010098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010098:	080100cd 	.word	0x080100cd
 801009c:	080101d1 	.word	0x080101d1
 80100a0:	080101d1 	.word	0x080101d1
 80100a4:	080101d1 	.word	0x080101d1
 80100a8:	0801010d 	.word	0x0801010d
 80100ac:	080101d1 	.word	0x080101d1
 80100b0:	080101d1 	.word	0x080101d1
 80100b4:	080101d1 	.word	0x080101d1
 80100b8:	0801014f 	.word	0x0801014f
 80100bc:	080101d1 	.word	0x080101d1
 80100c0:	080101d1 	.word	0x080101d1
 80100c4:	080101d1 	.word	0x080101d1
 80100c8:	0801018f 	.word	0x0801018f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	68b9      	ldr	r1, [r7, #8]
 80100d2:	4618      	mov	r0, r3
 80100d4:	f000 fa18 	bl	8010508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	699a      	ldr	r2, [r3, #24]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f042 0208 	orr.w	r2, r2, #8
 80100e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	699a      	ldr	r2, [r3, #24]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f022 0204 	bic.w	r2, r2, #4
 80100f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	6999      	ldr	r1, [r3, #24]
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	691a      	ldr	r2, [r3, #16]
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	430a      	orrs	r2, r1
 8010108:	619a      	str	r2, [r3, #24]
      break;
 801010a:	e064      	b.n	80101d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	68b9      	ldr	r1, [r7, #8]
 8010112:	4618      	mov	r0, r3
 8010114:	f000 fa68 	bl	80105e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	699a      	ldr	r2, [r3, #24]
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	699a      	ldr	r2, [r3, #24]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	6999      	ldr	r1, [r3, #24]
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	021a      	lsls	r2, r3, #8
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	430a      	orrs	r2, r1
 801014a:	619a      	str	r2, [r3, #24]
      break;
 801014c:	e043      	b.n	80101d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68b9      	ldr	r1, [r7, #8]
 8010154:	4618      	mov	r0, r3
 8010156:	f000 fabd 	bl	80106d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	69da      	ldr	r2, [r3, #28]
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	f042 0208 	orr.w	r2, r2, #8
 8010168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	69da      	ldr	r2, [r3, #28]
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f022 0204 	bic.w	r2, r2, #4
 8010178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	69d9      	ldr	r1, [r3, #28]
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	691a      	ldr	r2, [r3, #16]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	430a      	orrs	r2, r1
 801018a:	61da      	str	r2, [r3, #28]
      break;
 801018c:	e023      	b.n	80101d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	68b9      	ldr	r1, [r7, #8]
 8010194:	4618      	mov	r0, r3
 8010196:	f000 fb11 	bl	80107bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	69da      	ldr	r2, [r3, #28]
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	69da      	ldr	r2, [r3, #28]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80101b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	69d9      	ldr	r1, [r3, #28]
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	021a      	lsls	r2, r3, #8
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	430a      	orrs	r2, r1
 80101cc:	61da      	str	r2, [r3, #28]
      break;
 80101ce:	e002      	b.n	80101d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80101d0:	2301      	movs	r3, #1
 80101d2:	75fb      	strb	r3, [r7, #23]
      break;
 80101d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2200      	movs	r2, #0
 80101da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80101de:	7dfb      	ldrb	r3, [r7, #23]
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3718      	adds	r7, #24
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80101f2:	2300      	movs	r3, #0
 80101f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d101      	bne.n	8010204 <HAL_TIM_ConfigClockSource+0x1c>
 8010200:	2302      	movs	r3, #2
 8010202:	e0b4      	b.n	801036e <HAL_TIM_ConfigClockSource+0x186>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2201      	movs	r2, #1
 8010208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2202      	movs	r2, #2
 8010210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	689b      	ldr	r3, [r3, #8]
 801021a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801022a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801023c:	d03e      	beq.n	80102bc <HAL_TIM_ConfigClockSource+0xd4>
 801023e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010242:	f200 8087 	bhi.w	8010354 <HAL_TIM_ConfigClockSource+0x16c>
 8010246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801024a:	f000 8086 	beq.w	801035a <HAL_TIM_ConfigClockSource+0x172>
 801024e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010252:	d87f      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x16c>
 8010254:	2b70      	cmp	r3, #112	; 0x70
 8010256:	d01a      	beq.n	801028e <HAL_TIM_ConfigClockSource+0xa6>
 8010258:	2b70      	cmp	r3, #112	; 0x70
 801025a:	d87b      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x16c>
 801025c:	2b60      	cmp	r3, #96	; 0x60
 801025e:	d050      	beq.n	8010302 <HAL_TIM_ConfigClockSource+0x11a>
 8010260:	2b60      	cmp	r3, #96	; 0x60
 8010262:	d877      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x16c>
 8010264:	2b50      	cmp	r3, #80	; 0x50
 8010266:	d03c      	beq.n	80102e2 <HAL_TIM_ConfigClockSource+0xfa>
 8010268:	2b50      	cmp	r3, #80	; 0x50
 801026a:	d873      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x16c>
 801026c:	2b40      	cmp	r3, #64	; 0x40
 801026e:	d058      	beq.n	8010322 <HAL_TIM_ConfigClockSource+0x13a>
 8010270:	2b40      	cmp	r3, #64	; 0x40
 8010272:	d86f      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x16c>
 8010274:	2b30      	cmp	r3, #48	; 0x30
 8010276:	d064      	beq.n	8010342 <HAL_TIM_ConfigClockSource+0x15a>
 8010278:	2b30      	cmp	r3, #48	; 0x30
 801027a:	d86b      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x16c>
 801027c:	2b20      	cmp	r3, #32
 801027e:	d060      	beq.n	8010342 <HAL_TIM_ConfigClockSource+0x15a>
 8010280:	2b20      	cmp	r3, #32
 8010282:	d867      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x16c>
 8010284:	2b00      	cmp	r3, #0
 8010286:	d05c      	beq.n	8010342 <HAL_TIM_ConfigClockSource+0x15a>
 8010288:	2b10      	cmp	r3, #16
 801028a:	d05a      	beq.n	8010342 <HAL_TIM_ConfigClockSource+0x15a>
 801028c:	e062      	b.n	8010354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6818      	ldr	r0, [r3, #0]
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	6899      	ldr	r1, [r3, #8]
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	685a      	ldr	r2, [r3, #4]
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	f000 fb5d 	bl	801095c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80102b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	609a      	str	r2, [r3, #8]
      break;
 80102ba:	e04f      	b.n	801035c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6818      	ldr	r0, [r3, #0]
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	6899      	ldr	r1, [r3, #8]
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	f000 fb46 	bl	801095c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	689a      	ldr	r2, [r3, #8]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80102de:	609a      	str	r2, [r3, #8]
      break;
 80102e0:	e03c      	b.n	801035c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6818      	ldr	r0, [r3, #0]
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	6859      	ldr	r1, [r3, #4]
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	68db      	ldr	r3, [r3, #12]
 80102ee:	461a      	mov	r2, r3
 80102f0:	f000 faba 	bl	8010868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2150      	movs	r1, #80	; 0x50
 80102fa:	4618      	mov	r0, r3
 80102fc:	f000 fb13 	bl	8010926 <TIM_ITRx_SetConfig>
      break;
 8010300:	e02c      	b.n	801035c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6818      	ldr	r0, [r3, #0]
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	6859      	ldr	r1, [r3, #4]
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	68db      	ldr	r3, [r3, #12]
 801030e:	461a      	mov	r2, r3
 8010310:	f000 fad9 	bl	80108c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2160      	movs	r1, #96	; 0x60
 801031a:	4618      	mov	r0, r3
 801031c:	f000 fb03 	bl	8010926 <TIM_ITRx_SetConfig>
      break;
 8010320:	e01c      	b.n	801035c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6818      	ldr	r0, [r3, #0]
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	6859      	ldr	r1, [r3, #4]
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	461a      	mov	r2, r3
 8010330:	f000 fa9a 	bl	8010868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2140      	movs	r1, #64	; 0x40
 801033a:	4618      	mov	r0, r3
 801033c:	f000 faf3 	bl	8010926 <TIM_ITRx_SetConfig>
      break;
 8010340:	e00c      	b.n	801035c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4619      	mov	r1, r3
 801034c:	4610      	mov	r0, r2
 801034e:	f000 faea 	bl	8010926 <TIM_ITRx_SetConfig>
      break;
 8010352:	e003      	b.n	801035c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010354:	2301      	movs	r3, #1
 8010356:	73fb      	strb	r3, [r7, #15]
      break;
 8010358:	e000      	b.n	801035c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801035a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2201      	movs	r2, #1
 8010360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801036c:	7bfb      	ldrb	r3, [r7, #15]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010376:	b480      	push	{r7}
 8010378:	b083      	sub	sp, #12
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801037e:	bf00      	nop
 8010380:	370c      	adds	r7, #12
 8010382:	46bd      	mov	sp, r7
 8010384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010388:	4770      	bx	lr

0801038a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801038a:	b480      	push	{r7}
 801038c:	b083      	sub	sp, #12
 801038e:	af00      	add	r7, sp, #0
 8010390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010392:	bf00      	nop
 8010394:	370c      	adds	r7, #12
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr

0801039e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801039e:	b480      	push	{r7}
 80103a0:	b083      	sub	sp, #12
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80103a6:	bf00      	nop
 80103a8:	370c      	adds	r7, #12
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr

080103b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80103b2:	b480      	push	{r7}
 80103b4:	b083      	sub	sp, #12
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80103ba:	bf00      	nop
 80103bc:	370c      	adds	r7, #12
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
	...

080103c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b085      	sub	sp, #20
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	4a40      	ldr	r2, [pc, #256]	; (80104dc <TIM_Base_SetConfig+0x114>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d013      	beq.n	8010408 <TIM_Base_SetConfig+0x40>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103e6:	d00f      	beq.n	8010408 <TIM_Base_SetConfig+0x40>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	4a3d      	ldr	r2, [pc, #244]	; (80104e0 <TIM_Base_SetConfig+0x118>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d00b      	beq.n	8010408 <TIM_Base_SetConfig+0x40>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	4a3c      	ldr	r2, [pc, #240]	; (80104e4 <TIM_Base_SetConfig+0x11c>)
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d007      	beq.n	8010408 <TIM_Base_SetConfig+0x40>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	4a3b      	ldr	r2, [pc, #236]	; (80104e8 <TIM_Base_SetConfig+0x120>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d003      	beq.n	8010408 <TIM_Base_SetConfig+0x40>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4a3a      	ldr	r2, [pc, #232]	; (80104ec <TIM_Base_SetConfig+0x124>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d108      	bne.n	801041a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801040e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	68fa      	ldr	r2, [r7, #12]
 8010416:	4313      	orrs	r3, r2
 8010418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4a2f      	ldr	r2, [pc, #188]	; (80104dc <TIM_Base_SetConfig+0x114>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d02b      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010428:	d027      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	4a2c      	ldr	r2, [pc, #176]	; (80104e0 <TIM_Base_SetConfig+0x118>)
 801042e:	4293      	cmp	r3, r2
 8010430:	d023      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4a2b      	ldr	r2, [pc, #172]	; (80104e4 <TIM_Base_SetConfig+0x11c>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d01f      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4a2a      	ldr	r2, [pc, #168]	; (80104e8 <TIM_Base_SetConfig+0x120>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d01b      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	4a29      	ldr	r2, [pc, #164]	; (80104ec <TIM_Base_SetConfig+0x124>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d017      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4a28      	ldr	r2, [pc, #160]	; (80104f0 <TIM_Base_SetConfig+0x128>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d013      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	4a27      	ldr	r2, [pc, #156]	; (80104f4 <TIM_Base_SetConfig+0x12c>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d00f      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4a26      	ldr	r2, [pc, #152]	; (80104f8 <TIM_Base_SetConfig+0x130>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d00b      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4a25      	ldr	r2, [pc, #148]	; (80104fc <TIM_Base_SetConfig+0x134>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d007      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4a24      	ldr	r2, [pc, #144]	; (8010500 <TIM_Base_SetConfig+0x138>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d003      	beq.n	801047a <TIM_Base_SetConfig+0xb2>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4a23      	ldr	r2, [pc, #140]	; (8010504 <TIM_Base_SetConfig+0x13c>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d108      	bne.n	801048c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	68fa      	ldr	r2, [r7, #12]
 8010488:	4313      	orrs	r3, r2
 801048a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	695b      	ldr	r3, [r3, #20]
 8010496:	4313      	orrs	r3, r2
 8010498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	689a      	ldr	r2, [r3, #8]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4a0a      	ldr	r2, [pc, #40]	; (80104dc <TIM_Base_SetConfig+0x114>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d003      	beq.n	80104c0 <TIM_Base_SetConfig+0xf8>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	4a0c      	ldr	r2, [pc, #48]	; (80104ec <TIM_Base_SetConfig+0x124>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d103      	bne.n	80104c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	691a      	ldr	r2, [r3, #16]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	615a      	str	r2, [r3, #20]
}
 80104ce:	bf00      	nop
 80104d0:	3714      	adds	r7, #20
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr
 80104da:	bf00      	nop
 80104dc:	40010000 	.word	0x40010000
 80104e0:	40000400 	.word	0x40000400
 80104e4:	40000800 	.word	0x40000800
 80104e8:	40000c00 	.word	0x40000c00
 80104ec:	40010400 	.word	0x40010400
 80104f0:	40014000 	.word	0x40014000
 80104f4:	40014400 	.word	0x40014400
 80104f8:	40014800 	.word	0x40014800
 80104fc:	40001800 	.word	0x40001800
 8010500:	40001c00 	.word	0x40001c00
 8010504:	40002000 	.word	0x40002000

08010508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010508:	b480      	push	{r7}
 801050a:	b087      	sub	sp, #28
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6a1b      	ldr	r3, [r3, #32]
 8010516:	f023 0201 	bic.w	r2, r3, #1
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6a1b      	ldr	r3, [r3, #32]
 8010522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	699b      	ldr	r3, [r3, #24]
 801052e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f023 0303 	bic.w	r3, r3, #3
 801053e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	4313      	orrs	r3, r2
 8010548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	f023 0302 	bic.w	r3, r3, #2
 8010550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	697a      	ldr	r2, [r7, #20]
 8010558:	4313      	orrs	r3, r2
 801055a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	4a20      	ldr	r2, [pc, #128]	; (80105e0 <TIM_OC1_SetConfig+0xd8>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d003      	beq.n	801056c <TIM_OC1_SetConfig+0x64>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	4a1f      	ldr	r2, [pc, #124]	; (80105e4 <TIM_OC1_SetConfig+0xdc>)
 8010568:	4293      	cmp	r3, r2
 801056a:	d10c      	bne.n	8010586 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	f023 0308 	bic.w	r3, r3, #8
 8010572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	4313      	orrs	r3, r2
 801057c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f023 0304 	bic.w	r3, r3, #4
 8010584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4a15      	ldr	r2, [pc, #84]	; (80105e0 <TIM_OC1_SetConfig+0xd8>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d003      	beq.n	8010596 <TIM_OC1_SetConfig+0x8e>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4a14      	ldr	r2, [pc, #80]	; (80105e4 <TIM_OC1_SetConfig+0xdc>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d111      	bne.n	80105ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801059c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80105a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	695b      	ldr	r3, [r3, #20]
 80105aa:	693a      	ldr	r2, [r7, #16]
 80105ac:	4313      	orrs	r3, r2
 80105ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	699b      	ldr	r3, [r3, #24]
 80105b4:	693a      	ldr	r2, [r7, #16]
 80105b6:	4313      	orrs	r3, r2
 80105b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	693a      	ldr	r2, [r7, #16]
 80105be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	685a      	ldr	r2, [r3, #4]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	697a      	ldr	r2, [r7, #20]
 80105d2:	621a      	str	r2, [r3, #32]
}
 80105d4:	bf00      	nop
 80105d6:	371c      	adds	r7, #28
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr
 80105e0:	40010000 	.word	0x40010000
 80105e4:	40010400 	.word	0x40010400

080105e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b087      	sub	sp, #28
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6a1b      	ldr	r3, [r3, #32]
 80105f6:	f023 0210 	bic.w	r2, r3, #16
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6a1b      	ldr	r3, [r3, #32]
 8010602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	699b      	ldr	r3, [r3, #24]
 801060e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801061e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	021b      	lsls	r3, r3, #8
 8010626:	68fa      	ldr	r2, [r7, #12]
 8010628:	4313      	orrs	r3, r2
 801062a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	f023 0320 	bic.w	r3, r3, #32
 8010632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	689b      	ldr	r3, [r3, #8]
 8010638:	011b      	lsls	r3, r3, #4
 801063a:	697a      	ldr	r2, [r7, #20]
 801063c:	4313      	orrs	r3, r2
 801063e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	4a22      	ldr	r2, [pc, #136]	; (80106cc <TIM_OC2_SetConfig+0xe4>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d003      	beq.n	8010650 <TIM_OC2_SetConfig+0x68>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4a21      	ldr	r2, [pc, #132]	; (80106d0 <TIM_OC2_SetConfig+0xe8>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d10d      	bne.n	801066c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	011b      	lsls	r3, r3, #4
 801065e:	697a      	ldr	r2, [r7, #20]
 8010660:	4313      	orrs	r3, r2
 8010662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801066a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	4a17      	ldr	r2, [pc, #92]	; (80106cc <TIM_OC2_SetConfig+0xe4>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d003      	beq.n	801067c <TIM_OC2_SetConfig+0x94>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	4a16      	ldr	r2, [pc, #88]	; (80106d0 <TIM_OC2_SetConfig+0xe8>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d113      	bne.n	80106a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801068a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	695b      	ldr	r3, [r3, #20]
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	693a      	ldr	r2, [r7, #16]
 8010694:	4313      	orrs	r3, r2
 8010696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	699b      	ldr	r3, [r3, #24]
 801069c:	009b      	lsls	r3, r3, #2
 801069e:	693a      	ldr	r2, [r7, #16]
 80106a0:	4313      	orrs	r3, r2
 80106a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	693a      	ldr	r2, [r7, #16]
 80106a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	685a      	ldr	r2, [r3, #4]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	697a      	ldr	r2, [r7, #20]
 80106bc:	621a      	str	r2, [r3, #32]
}
 80106be:	bf00      	nop
 80106c0:	371c      	adds	r7, #28
 80106c2:	46bd      	mov	sp, r7
 80106c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c8:	4770      	bx	lr
 80106ca:	bf00      	nop
 80106cc:	40010000 	.word	0x40010000
 80106d0:	40010400 	.word	0x40010400

080106d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b087      	sub	sp, #28
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6a1b      	ldr	r3, [r3, #32]
 80106e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6a1b      	ldr	r3, [r3, #32]
 80106ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	69db      	ldr	r3, [r3, #28]
 80106fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f023 0303 	bic.w	r3, r3, #3
 801070a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	4313      	orrs	r3, r2
 8010714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801071c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	689b      	ldr	r3, [r3, #8]
 8010722:	021b      	lsls	r3, r3, #8
 8010724:	697a      	ldr	r2, [r7, #20]
 8010726:	4313      	orrs	r3, r2
 8010728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	4a21      	ldr	r2, [pc, #132]	; (80107b4 <TIM_OC3_SetConfig+0xe0>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d003      	beq.n	801073a <TIM_OC3_SetConfig+0x66>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	4a20      	ldr	r2, [pc, #128]	; (80107b8 <TIM_OC3_SetConfig+0xe4>)
 8010736:	4293      	cmp	r3, r2
 8010738:	d10d      	bne.n	8010756 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	021b      	lsls	r3, r3, #8
 8010748:	697a      	ldr	r2, [r7, #20]
 801074a:	4313      	orrs	r3, r2
 801074c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4a16      	ldr	r2, [pc, #88]	; (80107b4 <TIM_OC3_SetConfig+0xe0>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d003      	beq.n	8010766 <TIM_OC3_SetConfig+0x92>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	4a15      	ldr	r2, [pc, #84]	; (80107b8 <TIM_OC3_SetConfig+0xe4>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d113      	bne.n	801078e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801076c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	695b      	ldr	r3, [r3, #20]
 801077a:	011b      	lsls	r3, r3, #4
 801077c:	693a      	ldr	r2, [r7, #16]
 801077e:	4313      	orrs	r3, r2
 8010780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	699b      	ldr	r3, [r3, #24]
 8010786:	011b      	lsls	r3, r3, #4
 8010788:	693a      	ldr	r2, [r7, #16]
 801078a:	4313      	orrs	r3, r2
 801078c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	693a      	ldr	r2, [r7, #16]
 8010792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	685a      	ldr	r2, [r3, #4]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	697a      	ldr	r2, [r7, #20]
 80107a6:	621a      	str	r2, [r3, #32]
}
 80107a8:	bf00      	nop
 80107aa:	371c      	adds	r7, #28
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr
 80107b4:	40010000 	.word	0x40010000
 80107b8:	40010400 	.word	0x40010400

080107bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80107bc:	b480      	push	{r7}
 80107be:	b087      	sub	sp, #28
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a1b      	ldr	r3, [r3, #32]
 80107ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6a1b      	ldr	r3, [r3, #32]
 80107d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	021b      	lsls	r3, r3, #8
 80107fa:	68fa      	ldr	r2, [r7, #12]
 80107fc:	4313      	orrs	r3, r2
 80107fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	031b      	lsls	r3, r3, #12
 801080e:	693a      	ldr	r2, [r7, #16]
 8010810:	4313      	orrs	r3, r2
 8010812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	4a12      	ldr	r2, [pc, #72]	; (8010860 <TIM_OC4_SetConfig+0xa4>)
 8010818:	4293      	cmp	r3, r2
 801081a:	d003      	beq.n	8010824 <TIM_OC4_SetConfig+0x68>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	4a11      	ldr	r2, [pc, #68]	; (8010864 <TIM_OC4_SetConfig+0xa8>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d109      	bne.n	8010838 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801082a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	695b      	ldr	r3, [r3, #20]
 8010830:	019b      	lsls	r3, r3, #6
 8010832:	697a      	ldr	r2, [r7, #20]
 8010834:	4313      	orrs	r3, r2
 8010836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	697a      	ldr	r2, [r7, #20]
 801083c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	68fa      	ldr	r2, [r7, #12]
 8010842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	685a      	ldr	r2, [r3, #4]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	693a      	ldr	r2, [r7, #16]
 8010850:	621a      	str	r2, [r3, #32]
}
 8010852:	bf00      	nop
 8010854:	371c      	adds	r7, #28
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	40010000 	.word	0x40010000
 8010864:	40010400 	.word	0x40010400

08010868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010868:	b480      	push	{r7}
 801086a:	b087      	sub	sp, #28
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6a1b      	ldr	r3, [r3, #32]
 8010878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	6a1b      	ldr	r3, [r3, #32]
 801087e:	f023 0201 	bic.w	r2, r3, #1
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	699b      	ldr	r3, [r3, #24]
 801088a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	011b      	lsls	r3, r3, #4
 8010898:	693a      	ldr	r2, [r7, #16]
 801089a:	4313      	orrs	r3, r2
 801089c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	f023 030a 	bic.w	r3, r3, #10
 80108a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	4313      	orrs	r3, r2
 80108ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	693a      	ldr	r2, [r7, #16]
 80108b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	697a      	ldr	r2, [r7, #20]
 80108b8:	621a      	str	r2, [r3, #32]
}
 80108ba:	bf00      	nop
 80108bc:	371c      	adds	r7, #28
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80108c6:	b480      	push	{r7}
 80108c8:	b087      	sub	sp, #28
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	60f8      	str	r0, [r7, #12]
 80108ce:	60b9      	str	r1, [r7, #8]
 80108d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	6a1b      	ldr	r3, [r3, #32]
 80108d6:	f023 0210 	bic.w	r2, r3, #16
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	699b      	ldr	r3, [r3, #24]
 80108e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6a1b      	ldr	r3, [r3, #32]
 80108e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80108f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	031b      	lsls	r3, r3, #12
 80108f6:	697a      	ldr	r2, [r7, #20]
 80108f8:	4313      	orrs	r3, r2
 80108fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	011b      	lsls	r3, r3, #4
 8010908:	693a      	ldr	r2, [r7, #16]
 801090a:	4313      	orrs	r3, r2
 801090c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	697a      	ldr	r2, [r7, #20]
 8010912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	693a      	ldr	r2, [r7, #16]
 8010918:	621a      	str	r2, [r3, #32]
}
 801091a:	bf00      	nop
 801091c:	371c      	adds	r7, #28
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010926:	b480      	push	{r7}
 8010928:	b085      	sub	sp, #20
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
 801092e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801093c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801093e:	683a      	ldr	r2, [r7, #0]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	4313      	orrs	r3, r2
 8010944:	f043 0307 	orr.w	r3, r3, #7
 8010948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	609a      	str	r2, [r3, #8]
}
 8010950:	bf00      	nop
 8010952:	3714      	adds	r7, #20
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr

0801095c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801095c:	b480      	push	{r7}
 801095e:	b087      	sub	sp, #28
 8010960:	af00      	add	r7, sp, #0
 8010962:	60f8      	str	r0, [r7, #12]
 8010964:	60b9      	str	r1, [r7, #8]
 8010966:	607a      	str	r2, [r7, #4]
 8010968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	021a      	lsls	r2, r3, #8
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	431a      	orrs	r2, r3
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	4313      	orrs	r3, r2
 8010984:	697a      	ldr	r2, [r7, #20]
 8010986:	4313      	orrs	r3, r2
 8010988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	697a      	ldr	r2, [r7, #20]
 801098e:	609a      	str	r2, [r3, #8]
}
 8010990:	bf00      	nop
 8010992:	371c      	adds	r7, #28
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801099c:	b480      	push	{r7}
 801099e:	b087      	sub	sp, #28
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	f003 031f 	and.w	r3, r3, #31
 80109ae:	2201      	movs	r2, #1
 80109b0:	fa02 f303 	lsl.w	r3, r2, r3
 80109b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	6a1a      	ldr	r2, [r3, #32]
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	43db      	mvns	r3, r3
 80109be:	401a      	ands	r2, r3
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6a1a      	ldr	r2, [r3, #32]
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	f003 031f 	and.w	r3, r3, #31
 80109ce:	6879      	ldr	r1, [r7, #4]
 80109d0:	fa01 f303 	lsl.w	r3, r1, r3
 80109d4:	431a      	orrs	r2, r3
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	621a      	str	r2, [r3, #32]
}
 80109da:	bf00      	nop
 80109dc:	371c      	adds	r7, #28
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr
	...

080109e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b085      	sub	sp, #20
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d101      	bne.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80109fc:	2302      	movs	r3, #2
 80109fe:	e05a      	b.n	8010ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2201      	movs	r2, #1
 8010a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2202      	movs	r2, #2
 8010a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	689b      	ldr	r3, [r3, #8]
 8010a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	68fa      	ldr	r2, [r7, #12]
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a21      	ldr	r2, [pc, #132]	; (8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d022      	beq.n	8010a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a4c:	d01d      	beq.n	8010a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4a1d      	ldr	r2, [pc, #116]	; (8010ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d018      	beq.n	8010a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a1b      	ldr	r2, [pc, #108]	; (8010acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d013      	beq.n	8010a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	4a1a      	ldr	r2, [pc, #104]	; (8010ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d00e      	beq.n	8010a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4a18      	ldr	r2, [pc, #96]	; (8010ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d009      	beq.n	8010a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a17      	ldr	r2, [pc, #92]	; (8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d004      	beq.n	8010a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a15      	ldr	r2, [pc, #84]	; (8010adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d10c      	bne.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	4313      	orrs	r3, r2
 8010a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	68ba      	ldr	r2, [r7, #8]
 8010aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010ab4:	2300      	movs	r3, #0
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	40010000 	.word	0x40010000
 8010ac8:	40000400 	.word	0x40000400
 8010acc:	40000800 	.word	0x40000800
 8010ad0:	40000c00 	.word	0x40000c00
 8010ad4:	40010400 	.word	0x40010400
 8010ad8:	40014000 	.word	0x40014000
 8010adc:	40001800 	.word	0x40001800

08010ae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b085      	sub	sp, #20
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010aea:	2300      	movs	r3, #0
 8010aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d101      	bne.n	8010afc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010af8:	2302      	movs	r3, #2
 8010afa:	e03d      	b.n	8010b78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2201      	movs	r2, #1
 8010b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	4313      	orrs	r3, r2
 8010b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	4313      	orrs	r3, r2
 8010b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	4313      	orrs	r3, r2
 8010b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	69db      	ldr	r3, [r3, #28]
 8010b62:	4313      	orrs	r3, r2
 8010b64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010b76:	2300      	movs	r3, #0
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3714      	adds	r7, #20
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr

08010b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010b8c:	bf00      	nop
 8010b8e:	370c      	adds	r7, #12
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b083      	sub	sp, #12
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010ba0:	bf00      	nop
 8010ba2:	370c      	adds	r7, #12
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010baa:	4770      	bx	lr

08010bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d101      	bne.n	8010bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	e03f      	b.n	8010c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d106      	bne.n	8010bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7f3 fd94 	bl	8004700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2224      	movs	r2, #36	; 0x24
 8010bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	68da      	ldr	r2, [r3, #12]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f000 fd21 	bl	8011638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	691a      	ldr	r2, [r3, #16]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	695a      	ldr	r2, [r3, #20]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	68da      	ldr	r2, [r3, #12]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2220      	movs	r2, #32
 8010c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2220      	movs	r2, #32
 8010c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b090      	sub	sp, #64	; 0x40
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	695b      	ldr	r3, [r3, #20]
 8010c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c5c:	2b80      	cmp	r3, #128	; 0x80
 8010c5e:	bf0c      	ite	eq
 8010c60:	2301      	moveq	r3, #1
 8010c62:	2300      	movne	r3, #0
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	2b21      	cmp	r3, #33	; 0x21
 8010c72:	d128      	bne.n	8010cc6 <HAL_UART_DMAStop+0x80>
 8010c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d025      	beq.n	8010cc6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	3314      	adds	r3, #20
 8010c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c84:	e853 3f00 	ldrex	r3, [r3]
 8010c88:	623b      	str	r3, [r7, #32]
   return(result);
 8010c8a:	6a3b      	ldr	r3, [r7, #32]
 8010c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	3314      	adds	r3, #20
 8010c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8010c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ca2:	e841 2300 	strex	r3, r2, [r1]
 8010ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d1e5      	bne.n	8010c7a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d004      	beq.n	8010cc0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7f9 ffd8 	bl	800ac70 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 faf7 	bl	80112b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	695b      	ldr	r3, [r3, #20]
 8010ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cd0:	2b40      	cmp	r3, #64	; 0x40
 8010cd2:	bf0c      	ite	eq
 8010cd4:	2301      	moveq	r3, #1
 8010cd6:	2300      	movne	r3, #0
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	2b22      	cmp	r3, #34	; 0x22
 8010ce6:	d128      	bne.n	8010d3a <HAL_UART_DMAStop+0xf4>
 8010ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d025      	beq.n	8010d3a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	3314      	adds	r3, #20
 8010cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	e853 3f00 	ldrex	r3, [r3]
 8010cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d04:	637b      	str	r3, [r7, #52]	; 0x34
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	3314      	adds	r3, #20
 8010d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d0e:	61fa      	str	r2, [r7, #28]
 8010d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d12:	69b9      	ldr	r1, [r7, #24]
 8010d14:	69fa      	ldr	r2, [r7, #28]
 8010d16:	e841 2300 	strex	r3, r2, [r1]
 8010d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d1e5      	bne.n	8010cee <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d004      	beq.n	8010d34 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f9 ff9e 	bl	800ac70 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f000 fae5 	bl	8011304 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8010d3a:	2300      	movs	r3, #0
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3740      	adds	r7, #64	; 0x40
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b0ba      	sub	sp, #232	; 0xe8
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	695b      	ldr	r3, [r3, #20]
 8010d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010d70:	2300      	movs	r3, #0
 8010d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d7a:	f003 030f 	and.w	r3, r3, #15
 8010d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d10f      	bne.n	8010daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d8e:	f003 0320 	and.w	r3, r3, #32
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d009      	beq.n	8010daa <HAL_UART_IRQHandler+0x66>
 8010d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d9a:	f003 0320 	and.w	r3, r3, #32
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d003      	beq.n	8010daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	f000 fb8d 	bl	80114c2 <UART_Receive_IT>
      return;
 8010da8:	e256      	b.n	8011258 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f000 80de 	beq.w	8010f70 <HAL_UART_IRQHandler+0x22c>
 8010db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010db8:	f003 0301 	and.w	r3, r3, #1
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d106      	bne.n	8010dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	f000 80d1 	beq.w	8010f70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dd2:	f003 0301 	and.w	r3, r3, #1
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d00b      	beq.n	8010df2 <HAL_UART_IRQHandler+0xae>
 8010dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d005      	beq.n	8010df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dea:	f043 0201 	orr.w	r2, r3, #1
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010df6:	f003 0304 	and.w	r3, r3, #4
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00b      	beq.n	8010e16 <HAL_UART_IRQHandler+0xd2>
 8010dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e02:	f003 0301 	and.w	r3, r3, #1
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d005      	beq.n	8010e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e0e:	f043 0202 	orr.w	r2, r3, #2
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e1a:	f003 0302 	and.w	r3, r3, #2
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d00b      	beq.n	8010e3a <HAL_UART_IRQHandler+0xf6>
 8010e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e26:	f003 0301 	and.w	r3, r3, #1
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d005      	beq.n	8010e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e32:	f043 0204 	orr.w	r2, r3, #4
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e3e:	f003 0308 	and.w	r3, r3, #8
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d011      	beq.n	8010e6a <HAL_UART_IRQHandler+0x126>
 8010e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e4a:	f003 0320 	and.w	r3, r3, #32
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d105      	bne.n	8010e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e56:	f003 0301 	and.w	r3, r3, #1
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d005      	beq.n	8010e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e62:	f043 0208 	orr.w	r2, r3, #8
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f000 81ed 	beq.w	801124e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e78:	f003 0320 	and.w	r3, r3, #32
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d008      	beq.n	8010e92 <HAL_UART_IRQHandler+0x14e>
 8010e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e84:	f003 0320 	and.w	r3, r3, #32
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f000 fb18 	bl	80114c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	695b      	ldr	r3, [r3, #20]
 8010e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e9c:	2b40      	cmp	r3, #64	; 0x40
 8010e9e:	bf0c      	ite	eq
 8010ea0:	2301      	moveq	r3, #1
 8010ea2:	2300      	movne	r3, #0
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eae:	f003 0308 	and.w	r3, r3, #8
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d103      	bne.n	8010ebe <HAL_UART_IRQHandler+0x17a>
 8010eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d04f      	beq.n	8010f5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 fa20 	bl	8011304 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	695b      	ldr	r3, [r3, #20]
 8010eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ece:	2b40      	cmp	r3, #64	; 0x40
 8010ed0:	d141      	bne.n	8010f56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	3314      	adds	r3, #20
 8010ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ee0:	e853 3f00 	ldrex	r3, [r3]
 8010ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	3314      	adds	r3, #20
 8010efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010f0e:	e841 2300 	strex	r3, r2, [r1]
 8010f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1d9      	bne.n	8010ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d013      	beq.n	8010f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f2a:	4a7d      	ldr	r2, [pc, #500]	; (8011120 <HAL_UART_IRQHandler+0x3dc>)
 8010f2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7f9 ff0c 	bl	800ad50 <HAL_DMA_Abort_IT>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d016      	beq.n	8010f6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010f48:	4610      	mov	r0, r2
 8010f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f4c:	e00e      	b.n	8010f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f000 f99a 	bl	8011288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f54:	e00a      	b.n	8010f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 f996 	bl	8011288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f5c:	e006      	b.n	8010f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 f992 	bl	8011288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2200      	movs	r2, #0
 8010f68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010f6a:	e170      	b.n	801124e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f6c:	bf00      	nop
    return;
 8010f6e:	e16e      	b.n	801124e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	f040 814a 	bne.w	801120e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f7e:	f003 0310 	and.w	r3, r3, #16
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f000 8143 	beq.w	801120e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f8c:	f003 0310 	and.w	r3, r3, #16
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f000 813c 	beq.w	801120e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010f96:	2300      	movs	r3, #0
 8010f98:	60bb      	str	r3, [r7, #8]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	60bb      	str	r3, [r7, #8]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	60bb      	str	r3, [r7, #8]
 8010faa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	695b      	ldr	r3, [r3, #20]
 8010fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fb6:	2b40      	cmp	r3, #64	; 0x40
 8010fb8:	f040 80b4 	bne.w	8011124 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	f000 8140 	beq.w	8011252 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	f080 8139 	bcs.w	8011252 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010fe6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fec:	69db      	ldr	r3, [r3, #28]
 8010fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ff2:	f000 8088 	beq.w	8011106 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	330c      	adds	r3, #12
 8010ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011004:	e853 3f00 	ldrex	r3, [r3]
 8011008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801100c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	330c      	adds	r3, #12
 801101e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801102a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801102e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011032:	e841 2300 	strex	r3, r2, [r1]
 8011036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801103a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801103e:	2b00      	cmp	r3, #0
 8011040:	d1d9      	bne.n	8010ff6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	3314      	adds	r3, #20
 8011048:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801104a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801104c:	e853 3f00 	ldrex	r3, [r3]
 8011050:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011054:	f023 0301 	bic.w	r3, r3, #1
 8011058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	3314      	adds	r3, #20
 8011062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011066:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801106a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801106c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801106e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011072:	e841 2300 	strex	r3, r2, [r1]
 8011076:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801107a:	2b00      	cmp	r3, #0
 801107c:	d1e1      	bne.n	8011042 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	3314      	adds	r3, #20
 8011084:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011088:	e853 3f00 	ldrex	r3, [r3]
 801108c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801108e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	3314      	adds	r3, #20
 801109e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80110a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80110a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80110a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80110aa:	e841 2300 	strex	r3, r2, [r1]
 80110ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80110b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d1e3      	bne.n	801107e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2220      	movs	r2, #32
 80110ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	330c      	adds	r3, #12
 80110ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ce:	e853 3f00 	ldrex	r3, [r3]
 80110d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80110d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110d6:	f023 0310 	bic.w	r3, r3, #16
 80110da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	330c      	adds	r3, #12
 80110e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80110e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80110ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80110ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80110f0:	e841 2300 	strex	r3, r2, [r1]
 80110f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80110f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d1e3      	bne.n	80110c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011100:	4618      	mov	r0, r3
 8011102:	f7f9 fdb5 	bl	800ac70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801110e:	b29b      	uxth	r3, r3
 8011110:	1ad3      	subs	r3, r2, r3
 8011112:	b29b      	uxth	r3, r3
 8011114:	4619      	mov	r1, r3
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f000 f8c0 	bl	801129c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801111c:	e099      	b.n	8011252 <HAL_UART_IRQHandler+0x50e>
 801111e:	bf00      	nop
 8011120:	080113cb 	.word	0x080113cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801112c:	b29b      	uxth	r3, r3
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011138:	b29b      	uxth	r3, r3
 801113a:	2b00      	cmp	r3, #0
 801113c:	f000 808b 	beq.w	8011256 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011144:	2b00      	cmp	r3, #0
 8011146:	f000 8086 	beq.w	8011256 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	330c      	adds	r3, #12
 8011150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011154:	e853 3f00 	ldrex	r3, [r3]
 8011158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	330c      	adds	r3, #12
 801116a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801116e:	647a      	str	r2, [r7, #68]	; 0x44
 8011170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011176:	e841 2300 	strex	r3, r2, [r1]
 801117a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801117c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801117e:	2b00      	cmp	r3, #0
 8011180:	d1e3      	bne.n	801114a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	3314      	adds	r3, #20
 8011188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118c:	e853 3f00 	ldrex	r3, [r3]
 8011190:	623b      	str	r3, [r7, #32]
   return(result);
 8011192:	6a3b      	ldr	r3, [r7, #32]
 8011194:	f023 0301 	bic.w	r3, r3, #1
 8011198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	3314      	adds	r3, #20
 80111a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80111a6:	633a      	str	r2, [r7, #48]	; 0x30
 80111a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111ae:	e841 2300 	strex	r3, r2, [r1]
 80111b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80111b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d1e3      	bne.n	8011182 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2220      	movs	r2, #32
 80111be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2200      	movs	r2, #0
 80111c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	330c      	adds	r3, #12
 80111ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	e853 3f00 	ldrex	r3, [r3]
 80111d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f023 0310 	bic.w	r3, r3, #16
 80111de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	330c      	adds	r3, #12
 80111e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80111ec:	61fa      	str	r2, [r7, #28]
 80111ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111f0:	69b9      	ldr	r1, [r7, #24]
 80111f2:	69fa      	ldr	r2, [r7, #28]
 80111f4:	e841 2300 	strex	r3, r2, [r1]
 80111f8:	617b      	str	r3, [r7, #20]
   return(result);
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1e3      	bne.n	80111c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011204:	4619      	mov	r1, r3
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 f848 	bl	801129c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801120c:	e023      	b.n	8011256 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801120e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011216:	2b00      	cmp	r3, #0
 8011218:	d009      	beq.n	801122e <HAL_UART_IRQHandler+0x4ea>
 801121a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011222:	2b00      	cmp	r3, #0
 8011224:	d003      	beq.n	801122e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 f8e3 	bl	80113f2 <UART_Transmit_IT>
    return;
 801122c:	e014      	b.n	8011258 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801122e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00e      	beq.n	8011258 <HAL_UART_IRQHandler+0x514>
 801123a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801123e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011242:	2b00      	cmp	r3, #0
 8011244:	d008      	beq.n	8011258 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f000 f923 	bl	8011492 <UART_EndTransmit_IT>
    return;
 801124c:	e004      	b.n	8011258 <HAL_UART_IRQHandler+0x514>
    return;
 801124e:	bf00      	nop
 8011250:	e002      	b.n	8011258 <HAL_UART_IRQHandler+0x514>
      return;
 8011252:	bf00      	nop
 8011254:	e000      	b.n	8011258 <HAL_UART_IRQHandler+0x514>
      return;
 8011256:	bf00      	nop
  }
}
 8011258:	37e8      	adds	r7, #232	; 0xe8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop

08011260 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011268:	bf00      	nop
 801126a:	370c      	adds	r7, #12
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr

08011274 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011274:	b480      	push	{r7}
 8011276:	b083      	sub	sp, #12
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801127c:	bf00      	nop
 801127e:	370c      	adds	r7, #12
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011290:	bf00      	nop
 8011292:	370c      	adds	r7, #12
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr

0801129c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	460b      	mov	r3, r1
 80112a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80112a8:	bf00      	nop
 80112aa:	370c      	adds	r7, #12
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr

080112b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b089      	sub	sp, #36	; 0x24
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	330c      	adds	r3, #12
 80112c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	e853 3f00 	ldrex	r3, [r3]
 80112ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80112d2:	61fb      	str	r3, [r7, #28]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	330c      	adds	r3, #12
 80112da:	69fa      	ldr	r2, [r7, #28]
 80112dc:	61ba      	str	r2, [r7, #24]
 80112de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112e0:	6979      	ldr	r1, [r7, #20]
 80112e2:	69ba      	ldr	r2, [r7, #24]
 80112e4:	e841 2300 	strex	r3, r2, [r1]
 80112e8:	613b      	str	r3, [r7, #16]
   return(result);
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1e5      	bne.n	80112bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2220      	movs	r2, #32
 80112f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80112f8:	bf00      	nop
 80112fa:	3724      	adds	r7, #36	; 0x24
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011304:	b480      	push	{r7}
 8011306:	b095      	sub	sp, #84	; 0x54
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	330c      	adds	r3, #12
 8011312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011316:	e853 3f00 	ldrex	r3, [r3]
 801131a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	330c      	adds	r3, #12
 801132a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801132c:	643a      	str	r2, [r7, #64]	; 0x40
 801132e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011334:	e841 2300 	strex	r3, r2, [r1]
 8011338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801133a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133c:	2b00      	cmp	r3, #0
 801133e:	d1e5      	bne.n	801130c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	3314      	adds	r3, #20
 8011346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011348:	6a3b      	ldr	r3, [r7, #32]
 801134a:	e853 3f00 	ldrex	r3, [r3]
 801134e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	f023 0301 	bic.w	r3, r3, #1
 8011356:	64bb      	str	r3, [r7, #72]	; 0x48
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	3314      	adds	r3, #20
 801135e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011368:	e841 2300 	strex	r3, r2, [r1]
 801136c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1e5      	bne.n	8011340 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011378:	2b01      	cmp	r3, #1
 801137a:	d119      	bne.n	80113b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	330c      	adds	r3, #12
 8011382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	e853 3f00 	ldrex	r3, [r3]
 801138a:	60bb      	str	r3, [r7, #8]
   return(result);
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	f023 0310 	bic.w	r3, r3, #16
 8011392:	647b      	str	r3, [r7, #68]	; 0x44
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	330c      	adds	r3, #12
 801139a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801139c:	61ba      	str	r2, [r7, #24]
 801139e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a0:	6979      	ldr	r1, [r7, #20]
 80113a2:	69ba      	ldr	r2, [r7, #24]
 80113a4:	e841 2300 	strex	r3, r2, [r1]
 80113a8:	613b      	str	r3, [r7, #16]
   return(result);
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d1e5      	bne.n	801137c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2220      	movs	r2, #32
 80113b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2200      	movs	r2, #0
 80113bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80113be:	bf00      	nop
 80113c0:	3754      	adds	r7, #84	; 0x54
 80113c2:	46bd      	mov	sp, r7
 80113c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c8:	4770      	bx	lr

080113ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80113ca:	b580      	push	{r7, lr}
 80113cc:	b084      	sub	sp, #16
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	2200      	movs	r2, #0
 80113dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2200      	movs	r2, #0
 80113e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f7ff ff4f 	bl	8011288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80113ea:	bf00      	nop
 80113ec:	3710      	adds	r7, #16
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}

080113f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80113f2:	b480      	push	{r7}
 80113f4:	b085      	sub	sp, #20
 80113f6:	af00      	add	r7, sp, #0
 80113f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011400:	b2db      	uxtb	r3, r3
 8011402:	2b21      	cmp	r3, #33	; 0x21
 8011404:	d13e      	bne.n	8011484 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	689b      	ldr	r3, [r3, #8]
 801140a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801140e:	d114      	bne.n	801143a <UART_Transmit_IT+0x48>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	691b      	ldr	r3, [r3, #16]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d110      	bne.n	801143a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6a1b      	ldr	r3, [r3, #32]
 801141c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	881b      	ldrh	r3, [r3, #0]
 8011422:	461a      	mov	r2, r3
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801142c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6a1b      	ldr	r3, [r3, #32]
 8011432:	1c9a      	adds	r2, r3, #2
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	621a      	str	r2, [r3, #32]
 8011438:	e008      	b.n	801144c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6a1b      	ldr	r3, [r3, #32]
 801143e:	1c59      	adds	r1, r3, #1
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	6211      	str	r1, [r2, #32]
 8011444:	781a      	ldrb	r2, [r3, #0]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011450:	b29b      	uxth	r3, r3
 8011452:	3b01      	subs	r3, #1
 8011454:	b29b      	uxth	r3, r3
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	4619      	mov	r1, r3
 801145a:	84d1      	strh	r1, [r2, #38]	; 0x26
 801145c:	2b00      	cmp	r3, #0
 801145e:	d10f      	bne.n	8011480 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	68da      	ldr	r2, [r3, #12]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801146e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	68da      	ldr	r2, [r3, #12]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801147e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011480:	2300      	movs	r3, #0
 8011482:	e000      	b.n	8011486 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011484:	2302      	movs	r3, #2
  }
}
 8011486:	4618      	mov	r0, r3
 8011488:	3714      	adds	r7, #20
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr

08011492 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011492:	b580      	push	{r7, lr}
 8011494:	b082      	sub	sp, #8
 8011496:	af00      	add	r7, sp, #0
 8011498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	68da      	ldr	r2, [r3, #12]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80114a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2220      	movs	r2, #32
 80114ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7ff fed4 	bl	8011260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3708      	adds	r7, #8
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}

080114c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b08c      	sub	sp, #48	; 0x30
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	2b22      	cmp	r3, #34	; 0x22
 80114d4:	f040 80ab 	bne.w	801162e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114e0:	d117      	bne.n	8011512 <UART_Receive_IT+0x50>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	691b      	ldr	r3, [r3, #16]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d113      	bne.n	8011512 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80114ea:	2300      	movs	r3, #0
 80114ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011500:	b29a      	uxth	r2, r3
 8011502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011504:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801150a:	1c9a      	adds	r2, r3, #2
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	629a      	str	r2, [r3, #40]	; 0x28
 8011510:	e026      	b.n	8011560 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011516:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011518:	2300      	movs	r3, #0
 801151a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	689b      	ldr	r3, [r3, #8]
 8011520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011524:	d007      	beq.n	8011536 <UART_Receive_IT+0x74>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	689b      	ldr	r3, [r3, #8]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d10a      	bne.n	8011544 <UART_Receive_IT+0x82>
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	691b      	ldr	r3, [r3, #16]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d106      	bne.n	8011544 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	b2da      	uxtb	r2, r3
 801153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011540:	701a      	strb	r2, [r3, #0]
 8011542:	e008      	b.n	8011556 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	b2db      	uxtb	r3, r3
 801154c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011550:	b2da      	uxtb	r2, r3
 8011552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011554:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801155a:	1c5a      	adds	r2, r3, #1
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011564:	b29b      	uxth	r3, r3
 8011566:	3b01      	subs	r3, #1
 8011568:	b29b      	uxth	r3, r3
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	4619      	mov	r1, r3
 801156e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011570:	2b00      	cmp	r3, #0
 8011572:	d15a      	bne.n	801162a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	68da      	ldr	r2, [r3, #12]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f022 0220 	bic.w	r2, r2, #32
 8011582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	68da      	ldr	r2, [r3, #12]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	695a      	ldr	r2, [r3, #20]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f022 0201 	bic.w	r2, r2, #1
 80115a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2220      	movs	r2, #32
 80115a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	d135      	bne.n	8011620 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2200      	movs	r2, #0
 80115b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	330c      	adds	r3, #12
 80115c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	e853 3f00 	ldrex	r3, [r3]
 80115c8:	613b      	str	r3, [r7, #16]
   return(result);
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	f023 0310 	bic.w	r3, r3, #16
 80115d0:	627b      	str	r3, [r7, #36]	; 0x24
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	330c      	adds	r3, #12
 80115d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115da:	623a      	str	r2, [r7, #32]
 80115dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115de:	69f9      	ldr	r1, [r7, #28]
 80115e0:	6a3a      	ldr	r2, [r7, #32]
 80115e2:	e841 2300 	strex	r3, r2, [r1]
 80115e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80115e8:	69bb      	ldr	r3, [r7, #24]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1e5      	bne.n	80115ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f003 0310 	and.w	r3, r3, #16
 80115f8:	2b10      	cmp	r3, #16
 80115fa:	d10a      	bne.n	8011612 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80115fc:	2300      	movs	r3, #0
 80115fe:	60fb      	str	r3, [r7, #12]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	60fb      	str	r3, [r7, #12]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	60fb      	str	r3, [r7, #12]
 8011610:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011616:	4619      	mov	r1, r3
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f7ff fe3f 	bl	801129c <HAL_UARTEx_RxEventCallback>
 801161e:	e002      	b.n	8011626 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f7ff fe27 	bl	8011274 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011626:	2300      	movs	r3, #0
 8011628:	e002      	b.n	8011630 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801162a:	2300      	movs	r3, #0
 801162c:	e000      	b.n	8011630 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801162e:	2302      	movs	r3, #2
  }
}
 8011630:	4618      	mov	r0, r3
 8011632:	3730      	adds	r7, #48	; 0x30
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801163c:	b0c0      	sub	sp, #256	; 0x100
 801163e:	af00      	add	r7, sp, #0
 8011640:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	691b      	ldr	r3, [r3, #16]
 801164c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011654:	68d9      	ldr	r1, [r3, #12]
 8011656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	ea40 0301 	orr.w	r3, r0, r1
 8011660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011666:	689a      	ldr	r2, [r3, #8]
 8011668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801166c:	691b      	ldr	r3, [r3, #16]
 801166e:	431a      	orrs	r2, r3
 8011670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011674:	695b      	ldr	r3, [r3, #20]
 8011676:	431a      	orrs	r2, r3
 8011678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801167c:	69db      	ldr	r3, [r3, #28]
 801167e:	4313      	orrs	r3, r2
 8011680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	68db      	ldr	r3, [r3, #12]
 801168c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011690:	f021 010c 	bic.w	r1, r1, #12
 8011694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801169e:	430b      	orrs	r3, r1
 80116a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80116a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	695b      	ldr	r3, [r3, #20]
 80116aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80116ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116b2:	6999      	ldr	r1, [r3, #24]
 80116b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	ea40 0301 	orr.w	r3, r0, r1
 80116be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80116c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	4b8f      	ldr	r3, [pc, #572]	; (8011904 <UART_SetConfig+0x2cc>)
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d005      	beq.n	80116d8 <UART_SetConfig+0xa0>
 80116cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	4b8d      	ldr	r3, [pc, #564]	; (8011908 <UART_SetConfig+0x2d0>)
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d104      	bne.n	80116e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80116d8:	f7fd fbec 	bl	800eeb4 <HAL_RCC_GetPCLK2Freq>
 80116dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80116e0:	e003      	b.n	80116ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80116e2:	f7fd fbd3 	bl	800ee8c <HAL_RCC_GetPCLK1Freq>
 80116e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116ee:	69db      	ldr	r3, [r3, #28]
 80116f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80116f4:	f040 810c 	bne.w	8011910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80116f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80116fc:	2200      	movs	r2, #0
 80116fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011702:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801170a:	4622      	mov	r2, r4
 801170c:	462b      	mov	r3, r5
 801170e:	1891      	adds	r1, r2, r2
 8011710:	65b9      	str	r1, [r7, #88]	; 0x58
 8011712:	415b      	adcs	r3, r3
 8011714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801171a:	4621      	mov	r1, r4
 801171c:	eb12 0801 	adds.w	r8, r2, r1
 8011720:	4629      	mov	r1, r5
 8011722:	eb43 0901 	adc.w	r9, r3, r1
 8011726:	f04f 0200 	mov.w	r2, #0
 801172a:	f04f 0300 	mov.w	r3, #0
 801172e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801173a:	4690      	mov	r8, r2
 801173c:	4699      	mov	r9, r3
 801173e:	4623      	mov	r3, r4
 8011740:	eb18 0303 	adds.w	r3, r8, r3
 8011744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011748:	462b      	mov	r3, r5
 801174a:	eb49 0303 	adc.w	r3, r9, r3
 801174e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	2200      	movs	r2, #0
 801175a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801175e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011766:	460b      	mov	r3, r1
 8011768:	18db      	adds	r3, r3, r3
 801176a:	653b      	str	r3, [r7, #80]	; 0x50
 801176c:	4613      	mov	r3, r2
 801176e:	eb42 0303 	adc.w	r3, r2, r3
 8011772:	657b      	str	r3, [r7, #84]	; 0x54
 8011774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801177c:	f7ef fa84 	bl	8000c88 <__aeabi_uldivmod>
 8011780:	4602      	mov	r2, r0
 8011782:	460b      	mov	r3, r1
 8011784:	4b61      	ldr	r3, [pc, #388]	; (801190c <UART_SetConfig+0x2d4>)
 8011786:	fba3 2302 	umull	r2, r3, r3, r2
 801178a:	095b      	lsrs	r3, r3, #5
 801178c:	011c      	lsls	r4, r3, #4
 801178e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011792:	2200      	movs	r2, #0
 8011794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011798:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801179c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80117a0:	4642      	mov	r2, r8
 80117a2:	464b      	mov	r3, r9
 80117a4:	1891      	adds	r1, r2, r2
 80117a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80117a8:	415b      	adcs	r3, r3
 80117aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80117b0:	4641      	mov	r1, r8
 80117b2:	eb12 0a01 	adds.w	sl, r2, r1
 80117b6:	4649      	mov	r1, r9
 80117b8:	eb43 0b01 	adc.w	fp, r3, r1
 80117bc:	f04f 0200 	mov.w	r2, #0
 80117c0:	f04f 0300 	mov.w	r3, #0
 80117c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80117c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80117cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80117d0:	4692      	mov	sl, r2
 80117d2:	469b      	mov	fp, r3
 80117d4:	4643      	mov	r3, r8
 80117d6:	eb1a 0303 	adds.w	r3, sl, r3
 80117da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80117de:	464b      	mov	r3, r9
 80117e0:	eb4b 0303 	adc.w	r3, fp, r3
 80117e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80117e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	2200      	movs	r2, #0
 80117f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80117f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80117f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80117fc:	460b      	mov	r3, r1
 80117fe:	18db      	adds	r3, r3, r3
 8011800:	643b      	str	r3, [r7, #64]	; 0x40
 8011802:	4613      	mov	r3, r2
 8011804:	eb42 0303 	adc.w	r3, r2, r3
 8011808:	647b      	str	r3, [r7, #68]	; 0x44
 801180a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801180e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011812:	f7ef fa39 	bl	8000c88 <__aeabi_uldivmod>
 8011816:	4602      	mov	r2, r0
 8011818:	460b      	mov	r3, r1
 801181a:	4611      	mov	r1, r2
 801181c:	4b3b      	ldr	r3, [pc, #236]	; (801190c <UART_SetConfig+0x2d4>)
 801181e:	fba3 2301 	umull	r2, r3, r3, r1
 8011822:	095b      	lsrs	r3, r3, #5
 8011824:	2264      	movs	r2, #100	; 0x64
 8011826:	fb02 f303 	mul.w	r3, r2, r3
 801182a:	1acb      	subs	r3, r1, r3
 801182c:	00db      	lsls	r3, r3, #3
 801182e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011832:	4b36      	ldr	r3, [pc, #216]	; (801190c <UART_SetConfig+0x2d4>)
 8011834:	fba3 2302 	umull	r2, r3, r3, r2
 8011838:	095b      	lsrs	r3, r3, #5
 801183a:	005b      	lsls	r3, r3, #1
 801183c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011840:	441c      	add	r4, r3
 8011842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011846:	2200      	movs	r2, #0
 8011848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801184c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011854:	4642      	mov	r2, r8
 8011856:	464b      	mov	r3, r9
 8011858:	1891      	adds	r1, r2, r2
 801185a:	63b9      	str	r1, [r7, #56]	; 0x38
 801185c:	415b      	adcs	r3, r3
 801185e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011864:	4641      	mov	r1, r8
 8011866:	1851      	adds	r1, r2, r1
 8011868:	6339      	str	r1, [r7, #48]	; 0x30
 801186a:	4649      	mov	r1, r9
 801186c:	414b      	adcs	r3, r1
 801186e:	637b      	str	r3, [r7, #52]	; 0x34
 8011870:	f04f 0200 	mov.w	r2, #0
 8011874:	f04f 0300 	mov.w	r3, #0
 8011878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801187c:	4659      	mov	r1, fp
 801187e:	00cb      	lsls	r3, r1, #3
 8011880:	4651      	mov	r1, sl
 8011882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011886:	4651      	mov	r1, sl
 8011888:	00ca      	lsls	r2, r1, #3
 801188a:	4610      	mov	r0, r2
 801188c:	4619      	mov	r1, r3
 801188e:	4603      	mov	r3, r0
 8011890:	4642      	mov	r2, r8
 8011892:	189b      	adds	r3, r3, r2
 8011894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011898:	464b      	mov	r3, r9
 801189a:	460a      	mov	r2, r1
 801189c:	eb42 0303 	adc.w	r3, r2, r3
 80118a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80118a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80118b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80118b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80118b8:	460b      	mov	r3, r1
 80118ba:	18db      	adds	r3, r3, r3
 80118bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80118be:	4613      	mov	r3, r2
 80118c0:	eb42 0303 	adc.w	r3, r2, r3
 80118c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80118ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80118ce:	f7ef f9db 	bl	8000c88 <__aeabi_uldivmod>
 80118d2:	4602      	mov	r2, r0
 80118d4:	460b      	mov	r3, r1
 80118d6:	4b0d      	ldr	r3, [pc, #52]	; (801190c <UART_SetConfig+0x2d4>)
 80118d8:	fba3 1302 	umull	r1, r3, r3, r2
 80118dc:	095b      	lsrs	r3, r3, #5
 80118de:	2164      	movs	r1, #100	; 0x64
 80118e0:	fb01 f303 	mul.w	r3, r1, r3
 80118e4:	1ad3      	subs	r3, r2, r3
 80118e6:	00db      	lsls	r3, r3, #3
 80118e8:	3332      	adds	r3, #50	; 0x32
 80118ea:	4a08      	ldr	r2, [pc, #32]	; (801190c <UART_SetConfig+0x2d4>)
 80118ec:	fba2 2303 	umull	r2, r3, r2, r3
 80118f0:	095b      	lsrs	r3, r3, #5
 80118f2:	f003 0207 	and.w	r2, r3, #7
 80118f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4422      	add	r2, r4
 80118fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011900:	e106      	b.n	8011b10 <UART_SetConfig+0x4d8>
 8011902:	bf00      	nop
 8011904:	40011000 	.word	0x40011000
 8011908:	40011400 	.word	0x40011400
 801190c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011914:	2200      	movs	r2, #0
 8011916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801191a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801191e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011922:	4642      	mov	r2, r8
 8011924:	464b      	mov	r3, r9
 8011926:	1891      	adds	r1, r2, r2
 8011928:	6239      	str	r1, [r7, #32]
 801192a:	415b      	adcs	r3, r3
 801192c:	627b      	str	r3, [r7, #36]	; 0x24
 801192e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011932:	4641      	mov	r1, r8
 8011934:	1854      	adds	r4, r2, r1
 8011936:	4649      	mov	r1, r9
 8011938:	eb43 0501 	adc.w	r5, r3, r1
 801193c:	f04f 0200 	mov.w	r2, #0
 8011940:	f04f 0300 	mov.w	r3, #0
 8011944:	00eb      	lsls	r3, r5, #3
 8011946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801194a:	00e2      	lsls	r2, r4, #3
 801194c:	4614      	mov	r4, r2
 801194e:	461d      	mov	r5, r3
 8011950:	4643      	mov	r3, r8
 8011952:	18e3      	adds	r3, r4, r3
 8011954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011958:	464b      	mov	r3, r9
 801195a:	eb45 0303 	adc.w	r3, r5, r3
 801195e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	2200      	movs	r2, #0
 801196a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801196e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011972:	f04f 0200 	mov.w	r2, #0
 8011976:	f04f 0300 	mov.w	r3, #0
 801197a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801197e:	4629      	mov	r1, r5
 8011980:	008b      	lsls	r3, r1, #2
 8011982:	4621      	mov	r1, r4
 8011984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011988:	4621      	mov	r1, r4
 801198a:	008a      	lsls	r2, r1, #2
 801198c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011990:	f7ef f97a 	bl	8000c88 <__aeabi_uldivmod>
 8011994:	4602      	mov	r2, r0
 8011996:	460b      	mov	r3, r1
 8011998:	4b60      	ldr	r3, [pc, #384]	; (8011b1c <UART_SetConfig+0x4e4>)
 801199a:	fba3 2302 	umull	r2, r3, r3, r2
 801199e:	095b      	lsrs	r3, r3, #5
 80119a0:	011c      	lsls	r4, r3, #4
 80119a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80119a6:	2200      	movs	r2, #0
 80119a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80119ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80119b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80119b4:	4642      	mov	r2, r8
 80119b6:	464b      	mov	r3, r9
 80119b8:	1891      	adds	r1, r2, r2
 80119ba:	61b9      	str	r1, [r7, #24]
 80119bc:	415b      	adcs	r3, r3
 80119be:	61fb      	str	r3, [r7, #28]
 80119c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80119c4:	4641      	mov	r1, r8
 80119c6:	1851      	adds	r1, r2, r1
 80119c8:	6139      	str	r1, [r7, #16]
 80119ca:	4649      	mov	r1, r9
 80119cc:	414b      	adcs	r3, r1
 80119ce:	617b      	str	r3, [r7, #20]
 80119d0:	f04f 0200 	mov.w	r2, #0
 80119d4:	f04f 0300 	mov.w	r3, #0
 80119d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80119dc:	4659      	mov	r1, fp
 80119de:	00cb      	lsls	r3, r1, #3
 80119e0:	4651      	mov	r1, sl
 80119e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80119e6:	4651      	mov	r1, sl
 80119e8:	00ca      	lsls	r2, r1, #3
 80119ea:	4610      	mov	r0, r2
 80119ec:	4619      	mov	r1, r3
 80119ee:	4603      	mov	r3, r0
 80119f0:	4642      	mov	r2, r8
 80119f2:	189b      	adds	r3, r3, r2
 80119f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80119f8:	464b      	mov	r3, r9
 80119fa:	460a      	mov	r2, r1
 80119fc:	eb42 0303 	adc.w	r3, r2, r3
 8011a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8011a0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011a10:	f04f 0200 	mov.w	r2, #0
 8011a14:	f04f 0300 	mov.w	r3, #0
 8011a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011a1c:	4649      	mov	r1, r9
 8011a1e:	008b      	lsls	r3, r1, #2
 8011a20:	4641      	mov	r1, r8
 8011a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011a26:	4641      	mov	r1, r8
 8011a28:	008a      	lsls	r2, r1, #2
 8011a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011a2e:	f7ef f92b 	bl	8000c88 <__aeabi_uldivmod>
 8011a32:	4602      	mov	r2, r0
 8011a34:	460b      	mov	r3, r1
 8011a36:	4611      	mov	r1, r2
 8011a38:	4b38      	ldr	r3, [pc, #224]	; (8011b1c <UART_SetConfig+0x4e4>)
 8011a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8011a3e:	095b      	lsrs	r3, r3, #5
 8011a40:	2264      	movs	r2, #100	; 0x64
 8011a42:	fb02 f303 	mul.w	r3, r2, r3
 8011a46:	1acb      	subs	r3, r1, r3
 8011a48:	011b      	lsls	r3, r3, #4
 8011a4a:	3332      	adds	r3, #50	; 0x32
 8011a4c:	4a33      	ldr	r2, [pc, #204]	; (8011b1c <UART_SetConfig+0x4e4>)
 8011a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a52:	095b      	lsrs	r3, r3, #5
 8011a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a58:	441c      	add	r4, r3
 8011a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a5e:	2200      	movs	r2, #0
 8011a60:	673b      	str	r3, [r7, #112]	; 0x70
 8011a62:	677a      	str	r2, [r7, #116]	; 0x74
 8011a64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011a68:	4642      	mov	r2, r8
 8011a6a:	464b      	mov	r3, r9
 8011a6c:	1891      	adds	r1, r2, r2
 8011a6e:	60b9      	str	r1, [r7, #8]
 8011a70:	415b      	adcs	r3, r3
 8011a72:	60fb      	str	r3, [r7, #12]
 8011a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011a78:	4641      	mov	r1, r8
 8011a7a:	1851      	adds	r1, r2, r1
 8011a7c:	6039      	str	r1, [r7, #0]
 8011a7e:	4649      	mov	r1, r9
 8011a80:	414b      	adcs	r3, r1
 8011a82:	607b      	str	r3, [r7, #4]
 8011a84:	f04f 0200 	mov.w	r2, #0
 8011a88:	f04f 0300 	mov.w	r3, #0
 8011a8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011a90:	4659      	mov	r1, fp
 8011a92:	00cb      	lsls	r3, r1, #3
 8011a94:	4651      	mov	r1, sl
 8011a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011a9a:	4651      	mov	r1, sl
 8011a9c:	00ca      	lsls	r2, r1, #3
 8011a9e:	4610      	mov	r0, r2
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	4642      	mov	r2, r8
 8011aa6:	189b      	adds	r3, r3, r2
 8011aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8011aaa:	464b      	mov	r3, r9
 8011aac:	460a      	mov	r2, r1
 8011aae:	eb42 0303 	adc.w	r3, r2, r3
 8011ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	2200      	movs	r2, #0
 8011abc:	663b      	str	r3, [r7, #96]	; 0x60
 8011abe:	667a      	str	r2, [r7, #100]	; 0x64
 8011ac0:	f04f 0200 	mov.w	r2, #0
 8011ac4:	f04f 0300 	mov.w	r3, #0
 8011ac8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8011acc:	4649      	mov	r1, r9
 8011ace:	008b      	lsls	r3, r1, #2
 8011ad0:	4641      	mov	r1, r8
 8011ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011ad6:	4641      	mov	r1, r8
 8011ad8:	008a      	lsls	r2, r1, #2
 8011ada:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011ade:	f7ef f8d3 	bl	8000c88 <__aeabi_uldivmod>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	4b0d      	ldr	r3, [pc, #52]	; (8011b1c <UART_SetConfig+0x4e4>)
 8011ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8011aec:	095b      	lsrs	r3, r3, #5
 8011aee:	2164      	movs	r1, #100	; 0x64
 8011af0:	fb01 f303 	mul.w	r3, r1, r3
 8011af4:	1ad3      	subs	r3, r2, r3
 8011af6:	011b      	lsls	r3, r3, #4
 8011af8:	3332      	adds	r3, #50	; 0x32
 8011afa:	4a08      	ldr	r2, [pc, #32]	; (8011b1c <UART_SetConfig+0x4e4>)
 8011afc:	fba2 2303 	umull	r2, r3, r2, r3
 8011b00:	095b      	lsrs	r3, r3, #5
 8011b02:	f003 020f 	and.w	r2, r3, #15
 8011b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	4422      	add	r2, r4
 8011b0e:	609a      	str	r2, [r3, #8]
}
 8011b10:	bf00      	nop
 8011b12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011b16:	46bd      	mov	sp, r7
 8011b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b1c:	51eb851f 	.word	0x51eb851f

08011b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011b20:	b084      	sub	sp, #16
 8011b22:	b580      	push	{r7, lr}
 8011b24:	b084      	sub	sp, #16
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
 8011b2a:	f107 001c 	add.w	r0, r7, #28
 8011b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d122      	bne.n	8011b7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b50:	687a      	ldr	r2, [r7, #4]
 8011b52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	d105      	bne.n	8011b72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f001 fbee 	bl	8013354 <USB_CoreReset>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	73fb      	strb	r3, [r7, #15]
 8011b7c:	e01a      	b.n	8011bb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f001 fbe2 	bl	8013354 <USB_CoreReset>
 8011b90:	4603      	mov	r3, r0
 8011b92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d106      	bne.n	8011ba8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8011ba6:	e005      	b.n	8011bb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d10b      	bne.n	8011bd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	689b      	ldr	r3, [r3, #8]
 8011bbe:	f043 0206 	orr.w	r2, r3, #6
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	f043 0220 	orr.w	r2, r3, #32
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3710      	adds	r7, #16
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011bde:	b004      	add	sp, #16
 8011be0:	4770      	bx	lr
	...

08011be4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011be4:	b480      	push	{r7}
 8011be6:	b087      	sub	sp, #28
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	4613      	mov	r3, r2
 8011bf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011bf2:	79fb      	ldrb	r3, [r7, #7]
 8011bf4:	2b02      	cmp	r3, #2
 8011bf6:	d165      	bne.n	8011cc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	4a41      	ldr	r2, [pc, #260]	; (8011d00 <USB_SetTurnaroundTime+0x11c>)
 8011bfc:	4293      	cmp	r3, r2
 8011bfe:	d906      	bls.n	8011c0e <USB_SetTurnaroundTime+0x2a>
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	4a40      	ldr	r2, [pc, #256]	; (8011d04 <USB_SetTurnaroundTime+0x120>)
 8011c04:	4293      	cmp	r3, r2
 8011c06:	d202      	bcs.n	8011c0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011c08:	230f      	movs	r3, #15
 8011c0a:	617b      	str	r3, [r7, #20]
 8011c0c:	e062      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	4a3c      	ldr	r2, [pc, #240]	; (8011d04 <USB_SetTurnaroundTime+0x120>)
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d306      	bcc.n	8011c24 <USB_SetTurnaroundTime+0x40>
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	4a3b      	ldr	r2, [pc, #236]	; (8011d08 <USB_SetTurnaroundTime+0x124>)
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d202      	bcs.n	8011c24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011c1e:	230e      	movs	r3, #14
 8011c20:	617b      	str	r3, [r7, #20]
 8011c22:	e057      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	4a38      	ldr	r2, [pc, #224]	; (8011d08 <USB_SetTurnaroundTime+0x124>)
 8011c28:	4293      	cmp	r3, r2
 8011c2a:	d306      	bcc.n	8011c3a <USB_SetTurnaroundTime+0x56>
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	4a37      	ldr	r2, [pc, #220]	; (8011d0c <USB_SetTurnaroundTime+0x128>)
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d202      	bcs.n	8011c3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011c34:	230d      	movs	r3, #13
 8011c36:	617b      	str	r3, [r7, #20]
 8011c38:	e04c      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	4a33      	ldr	r2, [pc, #204]	; (8011d0c <USB_SetTurnaroundTime+0x128>)
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d306      	bcc.n	8011c50 <USB_SetTurnaroundTime+0x6c>
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	4a32      	ldr	r2, [pc, #200]	; (8011d10 <USB_SetTurnaroundTime+0x12c>)
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d802      	bhi.n	8011c50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011c4a:	230c      	movs	r3, #12
 8011c4c:	617b      	str	r3, [r7, #20]
 8011c4e:	e041      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	4a2f      	ldr	r2, [pc, #188]	; (8011d10 <USB_SetTurnaroundTime+0x12c>)
 8011c54:	4293      	cmp	r3, r2
 8011c56:	d906      	bls.n	8011c66 <USB_SetTurnaroundTime+0x82>
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	4a2e      	ldr	r2, [pc, #184]	; (8011d14 <USB_SetTurnaroundTime+0x130>)
 8011c5c:	4293      	cmp	r3, r2
 8011c5e:	d802      	bhi.n	8011c66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011c60:	230b      	movs	r3, #11
 8011c62:	617b      	str	r3, [r7, #20]
 8011c64:	e036      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	4a2a      	ldr	r2, [pc, #168]	; (8011d14 <USB_SetTurnaroundTime+0x130>)
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	d906      	bls.n	8011c7c <USB_SetTurnaroundTime+0x98>
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	4a29      	ldr	r2, [pc, #164]	; (8011d18 <USB_SetTurnaroundTime+0x134>)
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d802      	bhi.n	8011c7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011c76:	230a      	movs	r3, #10
 8011c78:	617b      	str	r3, [r7, #20]
 8011c7a:	e02b      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	4a26      	ldr	r2, [pc, #152]	; (8011d18 <USB_SetTurnaroundTime+0x134>)
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d906      	bls.n	8011c92 <USB_SetTurnaroundTime+0xae>
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	4a25      	ldr	r2, [pc, #148]	; (8011d1c <USB_SetTurnaroundTime+0x138>)
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	d202      	bcs.n	8011c92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011c8c:	2309      	movs	r3, #9
 8011c8e:	617b      	str	r3, [r7, #20]
 8011c90:	e020      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	4a21      	ldr	r2, [pc, #132]	; (8011d1c <USB_SetTurnaroundTime+0x138>)
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d306      	bcc.n	8011ca8 <USB_SetTurnaroundTime+0xc4>
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	4a20      	ldr	r2, [pc, #128]	; (8011d20 <USB_SetTurnaroundTime+0x13c>)
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d802      	bhi.n	8011ca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011ca2:	2308      	movs	r3, #8
 8011ca4:	617b      	str	r3, [r7, #20]
 8011ca6:	e015      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	4a1d      	ldr	r2, [pc, #116]	; (8011d20 <USB_SetTurnaroundTime+0x13c>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d906      	bls.n	8011cbe <USB_SetTurnaroundTime+0xda>
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	4a1c      	ldr	r2, [pc, #112]	; (8011d24 <USB_SetTurnaroundTime+0x140>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d202      	bcs.n	8011cbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011cb8:	2307      	movs	r3, #7
 8011cba:	617b      	str	r3, [r7, #20]
 8011cbc:	e00a      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011cbe:	2306      	movs	r3, #6
 8011cc0:	617b      	str	r3, [r7, #20]
 8011cc2:	e007      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011cc4:	79fb      	ldrb	r3, [r7, #7]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d102      	bne.n	8011cd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011cca:	2309      	movs	r3, #9
 8011ccc:	617b      	str	r3, [r7, #20]
 8011cce:	e001      	b.n	8011cd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011cd0:	2309      	movs	r3, #9
 8011cd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	68da      	ldr	r2, [r3, #12]
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	029b      	lsls	r3, r3, #10
 8011ce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011cec:	431a      	orrs	r2, r3
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011cf2:	2300      	movs	r3, #0
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	371c      	adds	r7, #28
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr
 8011d00:	00d8acbf 	.word	0x00d8acbf
 8011d04:	00e4e1c0 	.word	0x00e4e1c0
 8011d08:	00f42400 	.word	0x00f42400
 8011d0c:	01067380 	.word	0x01067380
 8011d10:	011a499f 	.word	0x011a499f
 8011d14:	01312cff 	.word	0x01312cff
 8011d18:	014ca43f 	.word	0x014ca43f
 8011d1c:	016e3600 	.word	0x016e3600
 8011d20:	01a6ab1f 	.word	0x01a6ab1f
 8011d24:	01e84800 	.word	0x01e84800

08011d28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	689b      	ldr	r3, [r3, #8]
 8011d34:	f043 0201 	orr.w	r2, r3, #1
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d3c:	2300      	movs	r3, #0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	370c      	adds	r7, #12
 8011d42:	46bd      	mov	sp, r7
 8011d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d48:	4770      	bx	lr

08011d4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d4a:	b480      	push	{r7}
 8011d4c:	b083      	sub	sp, #12
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	689b      	ldr	r3, [r3, #8]
 8011d56:	f023 0201 	bic.w	r2, r3, #1
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d5e:	2300      	movs	r3, #0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	370c      	adds	r7, #12
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr

08011d6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	460b      	mov	r3, r1
 8011d76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011d88:	78fb      	ldrb	r3, [r7, #3]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d115      	bne.n	8011dba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011d9a:	2001      	movs	r0, #1
 8011d9c:	f7f7 fc7a 	bl	8009694 <HAL_Delay>
      ms++;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	3301      	adds	r3, #1
 8011da4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f001 fa45 	bl	8013236 <USB_GetMode>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b01      	cmp	r3, #1
 8011db0:	d01e      	beq.n	8011df0 <USB_SetCurrentMode+0x84>
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2b31      	cmp	r3, #49	; 0x31
 8011db6:	d9f0      	bls.n	8011d9a <USB_SetCurrentMode+0x2e>
 8011db8:	e01a      	b.n	8011df0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011dba:	78fb      	ldrb	r3, [r7, #3]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d115      	bne.n	8011dec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011dcc:	2001      	movs	r0, #1
 8011dce:	f7f7 fc61 	bl	8009694 <HAL_Delay>
      ms++;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f001 fa2c 	bl	8013236 <USB_GetMode>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d005      	beq.n	8011df0 <USB_SetCurrentMode+0x84>
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	2b31      	cmp	r3, #49	; 0x31
 8011de8:	d9f0      	bls.n	8011dcc <USB_SetCurrentMode+0x60>
 8011dea:	e001      	b.n	8011df0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011dec:	2301      	movs	r3, #1
 8011dee:	e005      	b.n	8011dfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	2b32      	cmp	r3, #50	; 0x32
 8011df4:	d101      	bne.n	8011dfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011df6:	2301      	movs	r3, #1
 8011df8:	e000      	b.n	8011dfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3710      	adds	r7, #16
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011e04:	b084      	sub	sp, #16
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b086      	sub	sp, #24
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
 8011e0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011e16:	2300      	movs	r3, #0
 8011e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011e1e:	2300      	movs	r3, #0
 8011e20:	613b      	str	r3, [r7, #16]
 8011e22:	e009      	b.n	8011e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011e24:	687a      	ldr	r2, [r7, #4]
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	3340      	adds	r3, #64	; 0x40
 8011e2a:	009b      	lsls	r3, r3, #2
 8011e2c:	4413      	add	r3, r2
 8011e2e:	2200      	movs	r2, #0
 8011e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	3301      	adds	r3, #1
 8011e36:	613b      	str	r3, [r7, #16]
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	2b0e      	cmp	r3, #14
 8011e3c:	d9f2      	bls.n	8011e24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d11c      	bne.n	8011e7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	68fa      	ldr	r2, [r7, #12]
 8011e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e52:	f043 0302 	orr.w	r3, r3, #2
 8011e56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	639a      	str	r2, [r3, #56]	; 0x38
 8011e7c:	e00b      	b.n	8011e96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	680b      	ldr	r3, [r1, #0]
 8011eb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d10c      	bne.n	8011ed6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d104      	bne.n	8011ecc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 f965 	bl	8012194 <USB_SetDevSpeed>
 8011eca:	e008      	b.n	8011ede <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011ecc:	2101      	movs	r1, #1
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f000 f960 	bl	8012194 <USB_SetDevSpeed>
 8011ed4:	e003      	b.n	8011ede <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011ed6:	2103      	movs	r1, #3
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 f95b 	bl	8012194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011ede:	2110      	movs	r1, #16
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 f8f3 	bl	80120cc <USB_FlushTxFifo>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d001      	beq.n	8011ef0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8011eec:	2301      	movs	r3, #1
 8011eee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 f91f 	bl	8012134 <USB_FlushRxFifo>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d001      	beq.n	8011f00 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8011efc:	2301      	movs	r3, #1
 8011efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f06:	461a      	mov	r2, r3
 8011f08:	2300      	movs	r3, #0
 8011f0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f12:	461a      	mov	r2, r3
 8011f14:	2300      	movs	r3, #0
 8011f16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f1e:	461a      	mov	r2, r3
 8011f20:	2300      	movs	r3, #0
 8011f22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f24:	2300      	movs	r3, #0
 8011f26:	613b      	str	r3, [r7, #16]
 8011f28:	e043      	b.n	8011fb2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	015a      	lsls	r2, r3, #5
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	4413      	add	r3, r2
 8011f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f40:	d118      	bne.n	8011f74 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d10a      	bne.n	8011f5e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	015a      	lsls	r2, r3, #5
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	4413      	add	r3, r2
 8011f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f54:	461a      	mov	r2, r3
 8011f56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011f5a:	6013      	str	r3, [r2, #0]
 8011f5c:	e013      	b.n	8011f86 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	015a      	lsls	r2, r3, #5
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	4413      	add	r3, r2
 8011f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011f70:	6013      	str	r3, [r2, #0]
 8011f72:	e008      	b.n	8011f86 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	015a      	lsls	r2, r3, #5
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	4413      	add	r3, r2
 8011f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f80:	461a      	mov	r2, r3
 8011f82:	2300      	movs	r3, #0
 8011f84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	015a      	lsls	r2, r3, #5
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f92:	461a      	mov	r2, r3
 8011f94:	2300      	movs	r3, #0
 8011f96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	015a      	lsls	r2, r3, #5
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	4413      	add	r3, r2
 8011fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fa4:	461a      	mov	r2, r3
 8011fa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011faa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	613b      	str	r3, [r7, #16]
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	693a      	ldr	r2, [r7, #16]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d3b7      	bcc.n	8011f2a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011fba:	2300      	movs	r3, #0
 8011fbc:	613b      	str	r3, [r7, #16]
 8011fbe:	e043      	b.n	8012048 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	015a      	lsls	r2, r3, #5
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011fd6:	d118      	bne.n	801200a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8011fd8:	693b      	ldr	r3, [r7, #16]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d10a      	bne.n	8011ff4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	015a      	lsls	r2, r3, #5
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	4413      	add	r3, r2
 8011fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fea:	461a      	mov	r2, r3
 8011fec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011ff0:	6013      	str	r3, [r2, #0]
 8011ff2:	e013      	b.n	801201c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	015a      	lsls	r2, r3, #5
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	4413      	add	r3, r2
 8011ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012000:	461a      	mov	r2, r3
 8012002:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012006:	6013      	str	r3, [r2, #0]
 8012008:	e008      	b.n	801201c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	015a      	lsls	r2, r3, #5
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	4413      	add	r3, r2
 8012012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012016:	461a      	mov	r2, r3
 8012018:	2300      	movs	r3, #0
 801201a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	015a      	lsls	r2, r3, #5
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	4413      	add	r3, r2
 8012024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012028:	461a      	mov	r2, r3
 801202a:	2300      	movs	r3, #0
 801202c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	015a      	lsls	r2, r3, #5
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	4413      	add	r3, r2
 8012036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801203a:	461a      	mov	r2, r3
 801203c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012040:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	3301      	adds	r3, #1
 8012046:	613b      	str	r3, [r7, #16]
 8012048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204a:	693a      	ldr	r2, [r7, #16]
 801204c:	429a      	cmp	r2, r3
 801204e:	d3b7      	bcc.n	8011fc0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012056:	691b      	ldr	r3, [r3, #16]
 8012058:	68fa      	ldr	r2, [r7, #12]
 801205a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801205e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012062:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012070:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012074:	2b00      	cmp	r3, #0
 8012076:	d105      	bne.n	8012084 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	699b      	ldr	r3, [r3, #24]
 801207c:	f043 0210 	orr.w	r2, r3, #16
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	699a      	ldr	r2, [r3, #24]
 8012088:	4b0f      	ldr	r3, [pc, #60]	; (80120c8 <USB_DevInit+0x2c4>)
 801208a:	4313      	orrs	r3, r2
 801208c:	687a      	ldr	r2, [r7, #4]
 801208e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012092:	2b00      	cmp	r3, #0
 8012094:	d005      	beq.n	80120a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	699b      	ldr	r3, [r3, #24]
 801209a:	f043 0208 	orr.w	r2, r3, #8
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80120a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d107      	bne.n	80120b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	699b      	ldr	r3, [r3, #24]
 80120ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120b0:	f043 0304 	orr.w	r3, r3, #4
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80120b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3718      	adds	r7, #24
 80120be:	46bd      	mov	sp, r7
 80120c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80120c4:	b004      	add	sp, #16
 80120c6:	4770      	bx	lr
 80120c8:	803c3800 	.word	0x803c3800

080120cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b085      	sub	sp, #20
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80120d6:	2300      	movs	r3, #0
 80120d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	3301      	adds	r3, #1
 80120de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	4a13      	ldr	r2, [pc, #76]	; (8012130 <USB_FlushTxFifo+0x64>)
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d901      	bls.n	80120ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80120e8:	2303      	movs	r3, #3
 80120ea:	e01b      	b.n	8012124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	691b      	ldr	r3, [r3, #16]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	daf2      	bge.n	80120da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80120f4:	2300      	movs	r3, #0
 80120f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	019b      	lsls	r3, r3, #6
 80120fc:	f043 0220 	orr.w	r2, r3, #32
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	3301      	adds	r3, #1
 8012108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	4a08      	ldr	r2, [pc, #32]	; (8012130 <USB_FlushTxFifo+0x64>)
 801210e:	4293      	cmp	r3, r2
 8012110:	d901      	bls.n	8012116 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012112:	2303      	movs	r3, #3
 8012114:	e006      	b.n	8012124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	691b      	ldr	r3, [r3, #16]
 801211a:	f003 0320 	and.w	r3, r3, #32
 801211e:	2b20      	cmp	r3, #32
 8012120:	d0f0      	beq.n	8012104 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012122:	2300      	movs	r3, #0
}
 8012124:	4618      	mov	r0, r3
 8012126:	3714      	adds	r7, #20
 8012128:	46bd      	mov	sp, r7
 801212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212e:	4770      	bx	lr
 8012130:	00030d40 	.word	0x00030d40

08012134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012134:	b480      	push	{r7}
 8012136:	b085      	sub	sp, #20
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801213c:	2300      	movs	r3, #0
 801213e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	3301      	adds	r3, #1
 8012144:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	4a11      	ldr	r2, [pc, #68]	; (8012190 <USB_FlushRxFifo+0x5c>)
 801214a:	4293      	cmp	r3, r2
 801214c:	d901      	bls.n	8012152 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801214e:	2303      	movs	r3, #3
 8012150:	e018      	b.n	8012184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	691b      	ldr	r3, [r3, #16]
 8012156:	2b00      	cmp	r3, #0
 8012158:	daf2      	bge.n	8012140 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801215a:	2300      	movs	r3, #0
 801215c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2210      	movs	r2, #16
 8012162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	3301      	adds	r3, #1
 8012168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	4a08      	ldr	r2, [pc, #32]	; (8012190 <USB_FlushRxFifo+0x5c>)
 801216e:	4293      	cmp	r3, r2
 8012170:	d901      	bls.n	8012176 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012172:	2303      	movs	r3, #3
 8012174:	e006      	b.n	8012184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	691b      	ldr	r3, [r3, #16]
 801217a:	f003 0310 	and.w	r3, r3, #16
 801217e:	2b10      	cmp	r3, #16
 8012180:	d0f0      	beq.n	8012164 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012182:	2300      	movs	r3, #0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3714      	adds	r7, #20
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr
 8012190:	00030d40 	.word	0x00030d40

08012194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	460b      	mov	r3, r1
 801219e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	78fb      	ldrb	r3, [r7, #3]
 80121ae:	68f9      	ldr	r1, [r7, #12]
 80121b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121b4:	4313      	orrs	r3, r2
 80121b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80121b8:	2300      	movs	r3, #0
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3714      	adds	r7, #20
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr

080121c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80121c6:	b480      	push	{r7}
 80121c8:	b087      	sub	sp, #28
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	f003 0306 	and.w	r3, r3, #6
 80121de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d102      	bne.n	80121ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80121e6:	2300      	movs	r3, #0
 80121e8:	75fb      	strb	r3, [r7, #23]
 80121ea:	e00a      	b.n	8012202 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	d002      	beq.n	80121f8 <USB_GetDevSpeed+0x32>
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2b06      	cmp	r3, #6
 80121f6:	d102      	bne.n	80121fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80121f8:	2302      	movs	r3, #2
 80121fa:	75fb      	strb	r3, [r7, #23]
 80121fc:	e001      	b.n	8012202 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80121fe:	230f      	movs	r3, #15
 8012200:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012202:	7dfb      	ldrb	r3, [r7, #23]
}
 8012204:	4618      	mov	r0, r3
 8012206:	371c      	adds	r7, #28
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr

08012210 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012210:	b480      	push	{r7}
 8012212:	b085      	sub	sp, #20
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	785b      	ldrb	r3, [r3, #1]
 8012228:	2b01      	cmp	r3, #1
 801222a:	d13a      	bne.n	80122a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012232:	69da      	ldr	r2, [r3, #28]
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	f003 030f 	and.w	r3, r3, #15
 801223c:	2101      	movs	r1, #1
 801223e:	fa01 f303 	lsl.w	r3, r1, r3
 8012242:	b29b      	uxth	r3, r3
 8012244:	68f9      	ldr	r1, [r7, #12]
 8012246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801224a:	4313      	orrs	r3, r2
 801224c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	015a      	lsls	r2, r3, #5
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	4413      	add	r3, r2
 8012256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012260:	2b00      	cmp	r3, #0
 8012262:	d155      	bne.n	8012310 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	015a      	lsls	r2, r3, #5
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	4413      	add	r3, r2
 801226c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	791b      	ldrb	r3, [r3, #4]
 801227e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012280:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	059b      	lsls	r3, r3, #22
 8012286:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012288:	4313      	orrs	r3, r2
 801228a:	68ba      	ldr	r2, [r7, #8]
 801228c:	0151      	lsls	r1, r2, #5
 801228e:	68fa      	ldr	r2, [r7, #12]
 8012290:	440a      	add	r2, r1
 8012292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801229a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801229e:	6013      	str	r3, [r2, #0]
 80122a0:	e036      	b.n	8012310 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122a8:	69da      	ldr	r2, [r3, #28]
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	f003 030f 	and.w	r3, r3, #15
 80122b2:	2101      	movs	r1, #1
 80122b4:	fa01 f303 	lsl.w	r3, r1, r3
 80122b8:	041b      	lsls	r3, r3, #16
 80122ba:	68f9      	ldr	r1, [r7, #12]
 80122bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122c0:	4313      	orrs	r3, r2
 80122c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	015a      	lsls	r2, r3, #5
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	4413      	add	r3, r2
 80122cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d11a      	bne.n	8012310 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	015a      	lsls	r2, r3, #5
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	4413      	add	r3, r2
 80122e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	791b      	ldrb	r3, [r3, #4]
 80122f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122f6:	430b      	orrs	r3, r1
 80122f8:	4313      	orrs	r3, r2
 80122fa:	68ba      	ldr	r2, [r7, #8]
 80122fc:	0151      	lsls	r1, r2, #5
 80122fe:	68fa      	ldr	r2, [r7, #12]
 8012300:	440a      	add	r2, r1
 8012302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801230a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801230e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012310:	2300      	movs	r3, #0
}
 8012312:	4618      	mov	r0, r3
 8012314:	3714      	adds	r7, #20
 8012316:	46bd      	mov	sp, r7
 8012318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231c:	4770      	bx	lr
	...

08012320 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	785b      	ldrb	r3, [r3, #1]
 8012338:	2b01      	cmp	r3, #1
 801233a:	d161      	bne.n	8012400 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	015a      	lsls	r2, r3, #5
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	4413      	add	r3, r2
 8012344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801234e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012352:	d11f      	bne.n	8012394 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	015a      	lsls	r2, r3, #5
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	4413      	add	r3, r2
 801235c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	68ba      	ldr	r2, [r7, #8]
 8012364:	0151      	lsls	r1, r2, #5
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	440a      	add	r2, r1
 801236a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801236e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012372:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	015a      	lsls	r2, r3, #5
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	4413      	add	r3, r2
 801237c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	68ba      	ldr	r2, [r7, #8]
 8012384:	0151      	lsls	r1, r2, #5
 8012386:	68fa      	ldr	r2, [r7, #12]
 8012388:	440a      	add	r2, r1
 801238a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801238e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012392:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801239a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	f003 030f 	and.w	r3, r3, #15
 80123a4:	2101      	movs	r1, #1
 80123a6:	fa01 f303 	lsl.w	r3, r1, r3
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	43db      	mvns	r3, r3
 80123ae:	68f9      	ldr	r1, [r7, #12]
 80123b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123b4:	4013      	ands	r3, r2
 80123b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123be:	69da      	ldr	r2, [r3, #28]
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	f003 030f 	and.w	r3, r3, #15
 80123c8:	2101      	movs	r1, #1
 80123ca:	fa01 f303 	lsl.w	r3, r1, r3
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	43db      	mvns	r3, r3
 80123d2:	68f9      	ldr	r1, [r7, #12]
 80123d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123d8:	4013      	ands	r3, r2
 80123da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	015a      	lsls	r2, r3, #5
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	4413      	add	r3, r2
 80123e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	0159      	lsls	r1, r3, #5
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	440b      	add	r3, r1
 80123f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123f6:	4619      	mov	r1, r3
 80123f8:	4b35      	ldr	r3, [pc, #212]	; (80124d0 <USB_DeactivateEndpoint+0x1b0>)
 80123fa:	4013      	ands	r3, r2
 80123fc:	600b      	str	r3, [r1, #0]
 80123fe:	e060      	b.n	80124c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	015a      	lsls	r2, r3, #5
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	4413      	add	r3, r2
 8012408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012416:	d11f      	bne.n	8012458 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	015a      	lsls	r2, r3, #5
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	4413      	add	r3, r2
 8012420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	68ba      	ldr	r2, [r7, #8]
 8012428:	0151      	lsls	r1, r2, #5
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	440a      	add	r2, r1
 801242e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012436:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	015a      	lsls	r2, r3, #5
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	4413      	add	r3, r2
 8012440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	68ba      	ldr	r2, [r7, #8]
 8012448:	0151      	lsls	r1, r2, #5
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	440a      	add	r2, r1
 801244e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012456:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801245e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	f003 030f 	and.w	r3, r3, #15
 8012468:	2101      	movs	r1, #1
 801246a:	fa01 f303 	lsl.w	r3, r1, r3
 801246e:	041b      	lsls	r3, r3, #16
 8012470:	43db      	mvns	r3, r3
 8012472:	68f9      	ldr	r1, [r7, #12]
 8012474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012478:	4013      	ands	r3, r2
 801247a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012482:	69da      	ldr	r2, [r3, #28]
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	f003 030f 	and.w	r3, r3, #15
 801248c:	2101      	movs	r1, #1
 801248e:	fa01 f303 	lsl.w	r3, r1, r3
 8012492:	041b      	lsls	r3, r3, #16
 8012494:	43db      	mvns	r3, r3
 8012496:	68f9      	ldr	r1, [r7, #12]
 8012498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801249c:	4013      	ands	r3, r2
 801249e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	015a      	lsls	r2, r3, #5
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	4413      	add	r3, r2
 80124a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	0159      	lsls	r1, r3, #5
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	440b      	add	r3, r1
 80124b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124ba:	4619      	mov	r1, r3
 80124bc:	4b05      	ldr	r3, [pc, #20]	; (80124d4 <USB_DeactivateEndpoint+0x1b4>)
 80124be:	4013      	ands	r3, r2
 80124c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80124c2:	2300      	movs	r3, #0
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3714      	adds	r7, #20
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr
 80124d0:	ec337800 	.word	0xec337800
 80124d4:	eff37800 	.word	0xeff37800

080124d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b08a      	sub	sp, #40	; 0x28
 80124dc:	af02      	add	r7, sp, #8
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	4613      	mov	r3, r2
 80124e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	781b      	ldrb	r3, [r3, #0]
 80124ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	785b      	ldrb	r3, [r3, #1]
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	f040 815c 	bne.w	80127b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	699b      	ldr	r3, [r3, #24]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d132      	bne.n	8012568 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	015a      	lsls	r2, r3, #5
 8012506:	69fb      	ldr	r3, [r7, #28]
 8012508:	4413      	add	r3, r2
 801250a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801250e:	691b      	ldr	r3, [r3, #16]
 8012510:	69ba      	ldr	r2, [r7, #24]
 8012512:	0151      	lsls	r1, r2, #5
 8012514:	69fa      	ldr	r2, [r7, #28]
 8012516:	440a      	add	r2, r1
 8012518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801251c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012520:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	015a      	lsls	r2, r3, #5
 801252a:	69fb      	ldr	r3, [r7, #28]
 801252c:	4413      	add	r3, r2
 801252e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012532:	691b      	ldr	r3, [r3, #16]
 8012534:	69ba      	ldr	r2, [r7, #24]
 8012536:	0151      	lsls	r1, r2, #5
 8012538:	69fa      	ldr	r2, [r7, #28]
 801253a:	440a      	add	r2, r1
 801253c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	015a      	lsls	r2, r3, #5
 801254a:	69fb      	ldr	r3, [r7, #28]
 801254c:	4413      	add	r3, r2
 801254e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012552:	691b      	ldr	r3, [r3, #16]
 8012554:	69ba      	ldr	r2, [r7, #24]
 8012556:	0151      	lsls	r1, r2, #5
 8012558:	69fa      	ldr	r2, [r7, #28]
 801255a:	440a      	add	r2, r1
 801255c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012560:	0cdb      	lsrs	r3, r3, #19
 8012562:	04db      	lsls	r3, r3, #19
 8012564:	6113      	str	r3, [r2, #16]
 8012566:	e074      	b.n	8012652 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	015a      	lsls	r2, r3, #5
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	4413      	add	r3, r2
 8012570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012574:	691b      	ldr	r3, [r3, #16]
 8012576:	69ba      	ldr	r2, [r7, #24]
 8012578:	0151      	lsls	r1, r2, #5
 801257a:	69fa      	ldr	r2, [r7, #28]
 801257c:	440a      	add	r2, r1
 801257e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012582:	0cdb      	lsrs	r3, r3, #19
 8012584:	04db      	lsls	r3, r3, #19
 8012586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	015a      	lsls	r2, r3, #5
 801258c:	69fb      	ldr	r3, [r7, #28]
 801258e:	4413      	add	r3, r2
 8012590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	69ba      	ldr	r2, [r7, #24]
 8012598:	0151      	lsls	r1, r2, #5
 801259a:	69fa      	ldr	r2, [r7, #28]
 801259c:	440a      	add	r2, r1
 801259e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80125a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80125aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80125ac:	69bb      	ldr	r3, [r7, #24]
 80125ae:	015a      	lsls	r2, r3, #5
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	4413      	add	r3, r2
 80125b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	6999      	ldr	r1, [r3, #24]
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	440b      	add	r3, r1
 80125c4:	1e59      	subs	r1, r3, #1
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	68db      	ldr	r3, [r3, #12]
 80125ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80125ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80125d0:	4b9d      	ldr	r3, [pc, #628]	; (8012848 <USB_EPStartXfer+0x370>)
 80125d2:	400b      	ands	r3, r1
 80125d4:	69b9      	ldr	r1, [r7, #24]
 80125d6:	0148      	lsls	r0, r1, #5
 80125d8:	69f9      	ldr	r1, [r7, #28]
 80125da:	4401      	add	r1, r0
 80125dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80125e0:	4313      	orrs	r3, r2
 80125e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80125e4:	69bb      	ldr	r3, [r7, #24]
 80125e6:	015a      	lsls	r2, r3, #5
 80125e8:	69fb      	ldr	r3, [r7, #28]
 80125ea:	4413      	add	r3, r2
 80125ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125f0:	691a      	ldr	r2, [r3, #16]
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	699b      	ldr	r3, [r3, #24]
 80125f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125fa:	69b9      	ldr	r1, [r7, #24]
 80125fc:	0148      	lsls	r0, r1, #5
 80125fe:	69f9      	ldr	r1, [r7, #28]
 8012600:	4401      	add	r1, r0
 8012602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012606:	4313      	orrs	r3, r2
 8012608:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	791b      	ldrb	r3, [r3, #4]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d11f      	bne.n	8012652 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	015a      	lsls	r2, r3, #5
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	4413      	add	r3, r2
 801261a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801261e:	691b      	ldr	r3, [r3, #16]
 8012620:	69ba      	ldr	r2, [r7, #24]
 8012622:	0151      	lsls	r1, r2, #5
 8012624:	69fa      	ldr	r2, [r7, #28]
 8012626:	440a      	add	r2, r1
 8012628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801262c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012630:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012632:	69bb      	ldr	r3, [r7, #24]
 8012634:	015a      	lsls	r2, r3, #5
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	4413      	add	r3, r2
 801263a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801263e:	691b      	ldr	r3, [r3, #16]
 8012640:	69ba      	ldr	r2, [r7, #24]
 8012642:	0151      	lsls	r1, r2, #5
 8012644:	69fa      	ldr	r2, [r7, #28]
 8012646:	440a      	add	r2, r1
 8012648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801264c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012650:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012652:	79fb      	ldrb	r3, [r7, #7]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d14b      	bne.n	80126f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	695b      	ldr	r3, [r3, #20]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d009      	beq.n	8012674 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	015a      	lsls	r2, r3, #5
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	4413      	add	r3, r2
 8012668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801266c:	461a      	mov	r2, r3
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	695b      	ldr	r3, [r3, #20]
 8012672:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	791b      	ldrb	r3, [r3, #4]
 8012678:	2b01      	cmp	r3, #1
 801267a:	d128      	bne.n	80126ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012688:	2b00      	cmp	r3, #0
 801268a:	d110      	bne.n	80126ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801268c:	69bb      	ldr	r3, [r7, #24]
 801268e:	015a      	lsls	r2, r3, #5
 8012690:	69fb      	ldr	r3, [r7, #28]
 8012692:	4413      	add	r3, r2
 8012694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	69ba      	ldr	r2, [r7, #24]
 801269c:	0151      	lsls	r1, r2, #5
 801269e:	69fa      	ldr	r2, [r7, #28]
 80126a0:	440a      	add	r2, r1
 80126a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80126aa:	6013      	str	r3, [r2, #0]
 80126ac:	e00f      	b.n	80126ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80126ae:	69bb      	ldr	r3, [r7, #24]
 80126b0:	015a      	lsls	r2, r3, #5
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	4413      	add	r3, r2
 80126b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	69ba      	ldr	r2, [r7, #24]
 80126be:	0151      	lsls	r1, r2, #5
 80126c0:	69fa      	ldr	r2, [r7, #28]
 80126c2:	440a      	add	r2, r1
 80126c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80126ce:	69bb      	ldr	r3, [r7, #24]
 80126d0:	015a      	lsls	r2, r3, #5
 80126d2:	69fb      	ldr	r3, [r7, #28]
 80126d4:	4413      	add	r3, r2
 80126d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	69ba      	ldr	r2, [r7, #24]
 80126de:	0151      	lsls	r1, r2, #5
 80126e0:	69fa      	ldr	r2, [r7, #28]
 80126e2:	440a      	add	r2, r1
 80126e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80126ec:	6013      	str	r3, [r2, #0]
 80126ee:	e133      	b.n	8012958 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	015a      	lsls	r2, r3, #5
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	4413      	add	r3, r2
 80126f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	69ba      	ldr	r2, [r7, #24]
 8012700:	0151      	lsls	r1, r2, #5
 8012702:	69fa      	ldr	r2, [r7, #28]
 8012704:	440a      	add	r2, r1
 8012706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801270a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801270e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	791b      	ldrb	r3, [r3, #4]
 8012714:	2b01      	cmp	r3, #1
 8012716:	d015      	beq.n	8012744 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	699b      	ldr	r3, [r3, #24]
 801271c:	2b00      	cmp	r3, #0
 801271e:	f000 811b 	beq.w	8012958 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	f003 030f 	and.w	r3, r3, #15
 8012732:	2101      	movs	r1, #1
 8012734:	fa01 f303 	lsl.w	r3, r1, r3
 8012738:	69f9      	ldr	r1, [r7, #28]
 801273a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801273e:	4313      	orrs	r3, r2
 8012740:	634b      	str	r3, [r1, #52]	; 0x34
 8012742:	e109      	b.n	8012958 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801274a:	689b      	ldr	r3, [r3, #8]
 801274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012750:	2b00      	cmp	r3, #0
 8012752:	d110      	bne.n	8012776 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012754:	69bb      	ldr	r3, [r7, #24]
 8012756:	015a      	lsls	r2, r3, #5
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	4413      	add	r3, r2
 801275c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	69ba      	ldr	r2, [r7, #24]
 8012764:	0151      	lsls	r1, r2, #5
 8012766:	69fa      	ldr	r2, [r7, #28]
 8012768:	440a      	add	r2, r1
 801276a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801276e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012772:	6013      	str	r3, [r2, #0]
 8012774:	e00f      	b.n	8012796 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012776:	69bb      	ldr	r3, [r7, #24]
 8012778:	015a      	lsls	r2, r3, #5
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	4413      	add	r3, r2
 801277e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	69ba      	ldr	r2, [r7, #24]
 8012786:	0151      	lsls	r1, r2, #5
 8012788:	69fa      	ldr	r2, [r7, #28]
 801278a:	440a      	add	r2, r1
 801278c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012794:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	6919      	ldr	r1, [r3, #16]
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	781a      	ldrb	r2, [r3, #0]
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	699b      	ldr	r3, [r3, #24]
 80127a2:	b298      	uxth	r0, r3
 80127a4:	79fb      	ldrb	r3, [r7, #7]
 80127a6:	9300      	str	r3, [sp, #0]
 80127a8:	4603      	mov	r3, r0
 80127aa:	68f8      	ldr	r0, [r7, #12]
 80127ac:	f000 fade 	bl	8012d6c <USB_WritePacket>
 80127b0:	e0d2      	b.n	8012958 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	015a      	lsls	r2, r3, #5
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	4413      	add	r3, r2
 80127ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127be:	691b      	ldr	r3, [r3, #16]
 80127c0:	69ba      	ldr	r2, [r7, #24]
 80127c2:	0151      	lsls	r1, r2, #5
 80127c4:	69fa      	ldr	r2, [r7, #28]
 80127c6:	440a      	add	r2, r1
 80127c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127cc:	0cdb      	lsrs	r3, r3, #19
 80127ce:	04db      	lsls	r3, r3, #19
 80127d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	015a      	lsls	r2, r3, #5
 80127d6:	69fb      	ldr	r3, [r7, #28]
 80127d8:	4413      	add	r3, r2
 80127da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127de:	691b      	ldr	r3, [r3, #16]
 80127e0:	69ba      	ldr	r2, [r7, #24]
 80127e2:	0151      	lsls	r1, r2, #5
 80127e4:	69fa      	ldr	r2, [r7, #28]
 80127e6:	440a      	add	r2, r1
 80127e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80127f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80127f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	699b      	ldr	r3, [r3, #24]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d126      	bne.n	801284c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80127fe:	69bb      	ldr	r3, [r7, #24]
 8012800:	015a      	lsls	r2, r3, #5
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	4413      	add	r3, r2
 8012806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801280a:	691a      	ldr	r2, [r3, #16]
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	68db      	ldr	r3, [r3, #12]
 8012810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012814:	69b9      	ldr	r1, [r7, #24]
 8012816:	0148      	lsls	r0, r1, #5
 8012818:	69f9      	ldr	r1, [r7, #28]
 801281a:	4401      	add	r1, r0
 801281c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012820:	4313      	orrs	r3, r2
 8012822:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012824:	69bb      	ldr	r3, [r7, #24]
 8012826:	015a      	lsls	r2, r3, #5
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	4413      	add	r3, r2
 801282c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012830:	691b      	ldr	r3, [r3, #16]
 8012832:	69ba      	ldr	r2, [r7, #24]
 8012834:	0151      	lsls	r1, r2, #5
 8012836:	69fa      	ldr	r2, [r7, #28]
 8012838:	440a      	add	r2, r1
 801283a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801283e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012842:	6113      	str	r3, [r2, #16]
 8012844:	e03a      	b.n	80128bc <USB_EPStartXfer+0x3e4>
 8012846:	bf00      	nop
 8012848:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	699a      	ldr	r2, [r3, #24]
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	68db      	ldr	r3, [r3, #12]
 8012854:	4413      	add	r3, r2
 8012856:	1e5a      	subs	r2, r3, #1
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012860:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	8afa      	ldrh	r2, [r7, #22]
 8012868:	fb03 f202 	mul.w	r2, r3, r2
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	015a      	lsls	r2, r3, #5
 8012874:	69fb      	ldr	r3, [r7, #28]
 8012876:	4413      	add	r3, r2
 8012878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801287c:	691a      	ldr	r2, [r3, #16]
 801287e:	8afb      	ldrh	r3, [r7, #22]
 8012880:	04d9      	lsls	r1, r3, #19
 8012882:	4b38      	ldr	r3, [pc, #224]	; (8012964 <USB_EPStartXfer+0x48c>)
 8012884:	400b      	ands	r3, r1
 8012886:	69b9      	ldr	r1, [r7, #24]
 8012888:	0148      	lsls	r0, r1, #5
 801288a:	69f9      	ldr	r1, [r7, #28]
 801288c:	4401      	add	r1, r0
 801288e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012892:	4313      	orrs	r3, r2
 8012894:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	015a      	lsls	r2, r3, #5
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	4413      	add	r3, r2
 801289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128a2:	691a      	ldr	r2, [r3, #16]
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	69db      	ldr	r3, [r3, #28]
 80128a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128ac:	69b9      	ldr	r1, [r7, #24]
 80128ae:	0148      	lsls	r0, r1, #5
 80128b0:	69f9      	ldr	r1, [r7, #28]
 80128b2:	4401      	add	r1, r0
 80128b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80128b8:	4313      	orrs	r3, r2
 80128ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80128bc:	79fb      	ldrb	r3, [r7, #7]
 80128be:	2b01      	cmp	r3, #1
 80128c0:	d10d      	bne.n	80128de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	691b      	ldr	r3, [r3, #16]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d009      	beq.n	80128de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	6919      	ldr	r1, [r3, #16]
 80128ce:	69bb      	ldr	r3, [r7, #24]
 80128d0:	015a      	lsls	r2, r3, #5
 80128d2:	69fb      	ldr	r3, [r7, #28]
 80128d4:	4413      	add	r3, r2
 80128d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128da:	460a      	mov	r2, r1
 80128dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	791b      	ldrb	r3, [r3, #4]
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d128      	bne.n	8012938 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80128e6:	69fb      	ldr	r3, [r7, #28]
 80128e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128ec:	689b      	ldr	r3, [r3, #8]
 80128ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d110      	bne.n	8012918 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	015a      	lsls	r2, r3, #5
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	4413      	add	r3, r2
 80128fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	69ba      	ldr	r2, [r7, #24]
 8012906:	0151      	lsls	r1, r2, #5
 8012908:	69fa      	ldr	r2, [r7, #28]
 801290a:	440a      	add	r2, r1
 801290c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012914:	6013      	str	r3, [r2, #0]
 8012916:	e00f      	b.n	8012938 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	015a      	lsls	r2, r3, #5
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	4413      	add	r3, r2
 8012920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	69ba      	ldr	r2, [r7, #24]
 8012928:	0151      	lsls	r1, r2, #5
 801292a:	69fa      	ldr	r2, [r7, #28]
 801292c:	440a      	add	r2, r1
 801292e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012936:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	015a      	lsls	r2, r3, #5
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	4413      	add	r3, r2
 8012940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	69ba      	ldr	r2, [r7, #24]
 8012948:	0151      	lsls	r1, r2, #5
 801294a:	69fa      	ldr	r2, [r7, #28]
 801294c:	440a      	add	r2, r1
 801294e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3720      	adds	r7, #32
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	1ff80000 	.word	0x1ff80000

08012968 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012968:	b480      	push	{r7}
 801296a:	b087      	sub	sp, #28
 801296c:	af00      	add	r7, sp, #0
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	4613      	mov	r3, r2
 8012974:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	785b      	ldrb	r3, [r3, #1]
 8012984:	2b01      	cmp	r3, #1
 8012986:	f040 80ce 	bne.w	8012b26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	699b      	ldr	r3, [r3, #24]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d132      	bne.n	80129f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	015a      	lsls	r2, r3, #5
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	4413      	add	r3, r2
 801299a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801299e:	691b      	ldr	r3, [r3, #16]
 80129a0:	693a      	ldr	r2, [r7, #16]
 80129a2:	0151      	lsls	r1, r2, #5
 80129a4:	697a      	ldr	r2, [r7, #20]
 80129a6:	440a      	add	r2, r1
 80129a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80129b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80129b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	015a      	lsls	r2, r3, #5
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	4413      	add	r3, r2
 80129be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129c2:	691b      	ldr	r3, [r3, #16]
 80129c4:	693a      	ldr	r2, [r7, #16]
 80129c6:	0151      	lsls	r1, r2, #5
 80129c8:	697a      	ldr	r2, [r7, #20]
 80129ca:	440a      	add	r2, r1
 80129cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80129d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	015a      	lsls	r2, r3, #5
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	4413      	add	r3, r2
 80129de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129e2:	691b      	ldr	r3, [r3, #16]
 80129e4:	693a      	ldr	r2, [r7, #16]
 80129e6:	0151      	lsls	r1, r2, #5
 80129e8:	697a      	ldr	r2, [r7, #20]
 80129ea:	440a      	add	r2, r1
 80129ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129f0:	0cdb      	lsrs	r3, r3, #19
 80129f2:	04db      	lsls	r3, r3, #19
 80129f4:	6113      	str	r3, [r2, #16]
 80129f6:	e04e      	b.n	8012a96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	015a      	lsls	r2, r3, #5
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	4413      	add	r3, r2
 8012a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a04:	691b      	ldr	r3, [r3, #16]
 8012a06:	693a      	ldr	r2, [r7, #16]
 8012a08:	0151      	lsls	r1, r2, #5
 8012a0a:	697a      	ldr	r2, [r7, #20]
 8012a0c:	440a      	add	r2, r1
 8012a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a12:	0cdb      	lsrs	r3, r3, #19
 8012a14:	04db      	lsls	r3, r3, #19
 8012a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	015a      	lsls	r2, r3, #5
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	4413      	add	r3, r2
 8012a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a24:	691b      	ldr	r3, [r3, #16]
 8012a26:	693a      	ldr	r2, [r7, #16]
 8012a28:	0151      	lsls	r1, r2, #5
 8012a2a:	697a      	ldr	r2, [r7, #20]
 8012a2c:	440a      	add	r2, r1
 8012a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012a36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012a3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	699a      	ldr	r2, [r3, #24]
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	68db      	ldr	r3, [r3, #12]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d903      	bls.n	8012a50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	68da      	ldr	r2, [r3, #12]
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	015a      	lsls	r2, r3, #5
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	4413      	add	r3, r2
 8012a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a5c:	691b      	ldr	r3, [r3, #16]
 8012a5e:	693a      	ldr	r2, [r7, #16]
 8012a60:	0151      	lsls	r1, r2, #5
 8012a62:	697a      	ldr	r2, [r7, #20]
 8012a64:	440a      	add	r2, r1
 8012a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	015a      	lsls	r2, r3, #5
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	4413      	add	r3, r2
 8012a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a7c:	691a      	ldr	r2, [r3, #16]
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	699b      	ldr	r3, [r3, #24]
 8012a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a86:	6939      	ldr	r1, [r7, #16]
 8012a88:	0148      	lsls	r0, r1, #5
 8012a8a:	6979      	ldr	r1, [r7, #20]
 8012a8c:	4401      	add	r1, r0
 8012a8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012a92:	4313      	orrs	r3, r2
 8012a94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012a96:	79fb      	ldrb	r3, [r7, #7]
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d11e      	bne.n	8012ada <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	695b      	ldr	r3, [r3, #20]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d009      	beq.n	8012ab8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	015a      	lsls	r2, r3, #5
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	4413      	add	r3, r2
 8012aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	695b      	ldr	r3, [r3, #20]
 8012ab6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	015a      	lsls	r2, r3, #5
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	4413      	add	r3, r2
 8012ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	693a      	ldr	r2, [r7, #16]
 8012ac8:	0151      	lsls	r1, r2, #5
 8012aca:	697a      	ldr	r2, [r7, #20]
 8012acc:	440a      	add	r2, r1
 8012ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ad2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012ad6:	6013      	str	r3, [r2, #0]
 8012ad8:	e097      	b.n	8012c0a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	015a      	lsls	r2, r3, #5
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	693a      	ldr	r2, [r7, #16]
 8012aea:	0151      	lsls	r1, r2, #5
 8012aec:	697a      	ldr	r2, [r7, #20]
 8012aee:	440a      	add	r2, r1
 8012af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012af4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012af8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	699b      	ldr	r3, [r3, #24]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	f000 8083 	beq.w	8012c0a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	f003 030f 	and.w	r3, r3, #15
 8012b14:	2101      	movs	r1, #1
 8012b16:	fa01 f303 	lsl.w	r3, r1, r3
 8012b1a:	6979      	ldr	r1, [r7, #20]
 8012b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b20:	4313      	orrs	r3, r2
 8012b22:	634b      	str	r3, [r1, #52]	; 0x34
 8012b24:	e071      	b.n	8012c0a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	015a      	lsls	r2, r3, #5
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b32:	691b      	ldr	r3, [r3, #16]
 8012b34:	693a      	ldr	r2, [r7, #16]
 8012b36:	0151      	lsls	r1, r2, #5
 8012b38:	697a      	ldr	r2, [r7, #20]
 8012b3a:	440a      	add	r2, r1
 8012b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b40:	0cdb      	lsrs	r3, r3, #19
 8012b42:	04db      	lsls	r3, r3, #19
 8012b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	015a      	lsls	r2, r3, #5
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b52:	691b      	ldr	r3, [r3, #16]
 8012b54:	693a      	ldr	r2, [r7, #16]
 8012b56:	0151      	lsls	r1, r2, #5
 8012b58:	697a      	ldr	r2, [r7, #20]
 8012b5a:	440a      	add	r2, r1
 8012b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012b68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	699b      	ldr	r3, [r3, #24]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d003      	beq.n	8012b7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	68da      	ldr	r2, [r3, #12]
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	68da      	ldr	r2, [r3, #12]
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	015a      	lsls	r2, r3, #5
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	4413      	add	r3, r2
 8012b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b8e:	691b      	ldr	r3, [r3, #16]
 8012b90:	693a      	ldr	r2, [r7, #16]
 8012b92:	0151      	lsls	r1, r2, #5
 8012b94:	697a      	ldr	r2, [r7, #20]
 8012b96:	440a      	add	r2, r1
 8012b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ba0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	015a      	lsls	r2, r3, #5
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	4413      	add	r3, r2
 8012baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bae:	691a      	ldr	r2, [r3, #16]
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	69db      	ldr	r3, [r3, #28]
 8012bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012bb8:	6939      	ldr	r1, [r7, #16]
 8012bba:	0148      	lsls	r0, r1, #5
 8012bbc:	6979      	ldr	r1, [r7, #20]
 8012bbe:	4401      	add	r1, r0
 8012bc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012bc4:	4313      	orrs	r3, r2
 8012bc6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012bc8:	79fb      	ldrb	r3, [r7, #7]
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d10d      	bne.n	8012bea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	691b      	ldr	r3, [r3, #16]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d009      	beq.n	8012bea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	6919      	ldr	r1, [r3, #16]
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	015a      	lsls	r2, r3, #5
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	4413      	add	r3, r2
 8012be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be6:	460a      	mov	r2, r1
 8012be8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	015a      	lsls	r2, r3, #5
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	4413      	add	r3, r2
 8012bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	693a      	ldr	r2, [r7, #16]
 8012bfa:	0151      	lsls	r1, r2, #5
 8012bfc:	697a      	ldr	r2, [r7, #20]
 8012bfe:	440a      	add	r2, r1
 8012c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012c0a:	2300      	movs	r3, #0
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	371c      	adds	r7, #28
 8012c10:	46bd      	mov	sp, r7
 8012c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c16:	4770      	bx	lr

08012c18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b087      	sub	sp, #28
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012c22:	2300      	movs	r3, #0
 8012c24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012c26:	2300      	movs	r3, #0
 8012c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	785b      	ldrb	r3, [r3, #1]
 8012c32:	2b01      	cmp	r3, #1
 8012c34:	d14a      	bne.n	8012ccc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	015a      	lsls	r2, r3, #5
 8012c3c:	693b      	ldr	r3, [r7, #16]
 8012c3e:	4413      	add	r3, r2
 8012c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c4e:	f040 8086 	bne.w	8012d5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	015a      	lsls	r2, r3, #5
 8012c58:	693b      	ldr	r3, [r7, #16]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	683a      	ldr	r2, [r7, #0]
 8012c64:	7812      	ldrb	r2, [r2, #0]
 8012c66:	0151      	lsls	r1, r2, #5
 8012c68:	693a      	ldr	r2, [r7, #16]
 8012c6a:	440a      	add	r2, r1
 8012c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012c74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	015a      	lsls	r2, r3, #5
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	4413      	add	r3, r2
 8012c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	7812      	ldrb	r2, [r2, #0]
 8012c8a:	0151      	lsls	r1, r2, #5
 8012c8c:	693a      	ldr	r2, [r7, #16]
 8012c8e:	440a      	add	r2, r1
 8012c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	f242 7210 	movw	r2, #10000	; 0x2710
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d902      	bls.n	8012cb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012caa:	2301      	movs	r3, #1
 8012cac:	75fb      	strb	r3, [r7, #23]
          break;
 8012cae:	e056      	b.n	8012d5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	015a      	lsls	r2, r3, #5
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	4413      	add	r3, r2
 8012cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012cc8:	d0e7      	beq.n	8012c9a <USB_EPStopXfer+0x82>
 8012cca:	e048      	b.n	8012d5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	781b      	ldrb	r3, [r3, #0]
 8012cd0:	015a      	lsls	r2, r3, #5
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ce4:	d13b      	bne.n	8012d5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	015a      	lsls	r2, r3, #5
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	4413      	add	r3, r2
 8012cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	683a      	ldr	r2, [r7, #0]
 8012cf8:	7812      	ldrb	r2, [r2, #0]
 8012cfa:	0151      	lsls	r1, r2, #5
 8012cfc:	693a      	ldr	r2, [r7, #16]
 8012cfe:	440a      	add	r2, r1
 8012d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012d08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	015a      	lsls	r2, r3, #5
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	4413      	add	r3, r2
 8012d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	683a      	ldr	r2, [r7, #0]
 8012d1c:	7812      	ldrb	r2, [r2, #0]
 8012d1e:	0151      	lsls	r1, r2, #5
 8012d20:	693a      	ldr	r2, [r7, #16]
 8012d22:	440a      	add	r2, r1
 8012d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012d2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	3301      	adds	r3, #1
 8012d32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	f242 7210 	movw	r2, #10000	; 0x2710
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d902      	bls.n	8012d44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	75fb      	strb	r3, [r7, #23]
          break;
 8012d42:	e00c      	b.n	8012d5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	015a      	lsls	r2, r3, #5
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d5c:	d0e7      	beq.n	8012d2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	371c      	adds	r7, #28
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr

08012d6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b089      	sub	sp, #36	; 0x24
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	4611      	mov	r1, r2
 8012d78:	461a      	mov	r2, r3
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	71fb      	strb	r3, [r7, #7]
 8012d7e:	4613      	mov	r3, r2
 8012d80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d123      	bne.n	8012dda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012d92:	88bb      	ldrh	r3, [r7, #4]
 8012d94:	3303      	adds	r3, #3
 8012d96:	089b      	lsrs	r3, r3, #2
 8012d98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	61bb      	str	r3, [r7, #24]
 8012d9e:	e018      	b.n	8012dd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012da0:	79fb      	ldrb	r3, [r7, #7]
 8012da2:	031a      	lsls	r2, r3, #12
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	4413      	add	r3, r2
 8012da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012dac:	461a      	mov	r2, r3
 8012dae:	69fb      	ldr	r3, [r7, #28]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012db4:	69fb      	ldr	r3, [r7, #28]
 8012db6:	3301      	adds	r3, #1
 8012db8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012dc6:	69fb      	ldr	r3, [r7, #28]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012dcc:	69bb      	ldr	r3, [r7, #24]
 8012dce:	3301      	adds	r3, #1
 8012dd0:	61bb      	str	r3, [r7, #24]
 8012dd2:	69ba      	ldr	r2, [r7, #24]
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d3e2      	bcc.n	8012da0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012dda:	2300      	movs	r3, #0
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3724      	adds	r7, #36	; 0x24
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr

08012de8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b08b      	sub	sp, #44	; 0x2c
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	60b9      	str	r1, [r7, #8]
 8012df2:	4613      	mov	r3, r2
 8012df4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012dfe:	88fb      	ldrh	r3, [r7, #6]
 8012e00:	089b      	lsrs	r3, r3, #2
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012e06:	88fb      	ldrh	r3, [r7, #6]
 8012e08:	f003 0303 	and.w	r3, r3, #3
 8012e0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012e0e:	2300      	movs	r3, #0
 8012e10:	623b      	str	r3, [r7, #32]
 8012e12:	e014      	b.n	8012e3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012e14:	69bb      	ldr	r3, [r7, #24]
 8012e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012e1a:	681a      	ldr	r2, [r3, #0]
 8012e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8012e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e22:	3301      	adds	r3, #1
 8012e24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e28:	3301      	adds	r3, #1
 8012e2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e2e:	3301      	adds	r3, #1
 8012e30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e34:	3301      	adds	r3, #1
 8012e36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012e38:	6a3b      	ldr	r3, [r7, #32]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	623b      	str	r3, [r7, #32]
 8012e3e:	6a3a      	ldr	r2, [r7, #32]
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d3e6      	bcc.n	8012e14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012e46:	8bfb      	ldrh	r3, [r7, #30]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d01e      	beq.n	8012e8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012e56:	461a      	mov	r2, r3
 8012e58:	f107 0310 	add.w	r3, r7, #16
 8012e5c:	6812      	ldr	r2, [r2, #0]
 8012e5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012e60:	693a      	ldr	r2, [r7, #16]
 8012e62:	6a3b      	ldr	r3, [r7, #32]
 8012e64:	b2db      	uxtb	r3, r3
 8012e66:	00db      	lsls	r3, r3, #3
 8012e68:	fa22 f303 	lsr.w	r3, r2, r3
 8012e6c:	b2da      	uxtb	r2, r3
 8012e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e70:	701a      	strb	r2, [r3, #0]
      i++;
 8012e72:	6a3b      	ldr	r3, [r7, #32]
 8012e74:	3301      	adds	r3, #1
 8012e76:	623b      	str	r3, [r7, #32]
      pDest++;
 8012e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8012e7e:	8bfb      	ldrh	r3, [r7, #30]
 8012e80:	3b01      	subs	r3, #1
 8012e82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012e84:	8bfb      	ldrh	r3, [r7, #30]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d1ea      	bne.n	8012e60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	372c      	adds	r7, #44	; 0x2c
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr

08012e98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	785b      	ldrb	r3, [r3, #1]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d12c      	bne.n	8012f0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	015a      	lsls	r2, r3, #5
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	4413      	add	r3, r2
 8012ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	db12      	blt.n	8012eec <USB_EPSetStall+0x54>
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d00f      	beq.n	8012eec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	015a      	lsls	r2, r3, #5
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	4413      	add	r3, r2
 8012ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	68ba      	ldr	r2, [r7, #8]
 8012edc:	0151      	lsls	r1, r2, #5
 8012ede:	68fa      	ldr	r2, [r7, #12]
 8012ee0:	440a      	add	r2, r1
 8012ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ee6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012eea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	015a      	lsls	r2, r3, #5
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	68ba      	ldr	r2, [r7, #8]
 8012efc:	0151      	lsls	r1, r2, #5
 8012efe:	68fa      	ldr	r2, [r7, #12]
 8012f00:	440a      	add	r2, r1
 8012f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012f0a:	6013      	str	r3, [r2, #0]
 8012f0c:	e02b      	b.n	8012f66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	015a      	lsls	r2, r3, #5
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	4413      	add	r3, r2
 8012f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	db12      	blt.n	8012f46 <USB_EPSetStall+0xae>
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d00f      	beq.n	8012f46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	015a      	lsls	r2, r3, #5
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	4413      	add	r3, r2
 8012f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	68ba      	ldr	r2, [r7, #8]
 8012f36:	0151      	lsls	r1, r2, #5
 8012f38:	68fa      	ldr	r2, [r7, #12]
 8012f3a:	440a      	add	r2, r1
 8012f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012f44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	015a      	lsls	r2, r3, #5
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	68ba      	ldr	r2, [r7, #8]
 8012f56:	0151      	lsls	r1, r2, #5
 8012f58:	68fa      	ldr	r2, [r7, #12]
 8012f5a:	440a      	add	r2, r1
 8012f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012f64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012f66:	2300      	movs	r3, #0
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3714      	adds	r7, #20
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr

08012f74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012f74:	b480      	push	{r7}
 8012f76:	b085      	sub	sp, #20
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	785b      	ldrb	r3, [r3, #1]
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	d128      	bne.n	8012fe2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	015a      	lsls	r2, r3, #5
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	4413      	add	r3, r2
 8012f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	68ba      	ldr	r2, [r7, #8]
 8012fa0:	0151      	lsls	r1, r2, #5
 8012fa2:	68fa      	ldr	r2, [r7, #12]
 8012fa4:	440a      	add	r2, r1
 8012fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012faa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012fae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	791b      	ldrb	r3, [r3, #4]
 8012fb4:	2b03      	cmp	r3, #3
 8012fb6:	d003      	beq.n	8012fc0 <USB_EPClearStall+0x4c>
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	791b      	ldrb	r3, [r3, #4]
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	d138      	bne.n	8013032 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	015a      	lsls	r2, r3, #5
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	4413      	add	r3, r2
 8012fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	68ba      	ldr	r2, [r7, #8]
 8012fd0:	0151      	lsls	r1, r2, #5
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	440a      	add	r2, r1
 8012fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012fde:	6013      	str	r3, [r2, #0]
 8012fe0:	e027      	b.n	8013032 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	015a      	lsls	r2, r3, #5
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	4413      	add	r3, r2
 8012fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	68ba      	ldr	r2, [r7, #8]
 8012ff2:	0151      	lsls	r1, r2, #5
 8012ff4:	68fa      	ldr	r2, [r7, #12]
 8012ff6:	440a      	add	r2, r1
 8012ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013000:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	791b      	ldrb	r3, [r3, #4]
 8013006:	2b03      	cmp	r3, #3
 8013008:	d003      	beq.n	8013012 <USB_EPClearStall+0x9e>
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	791b      	ldrb	r3, [r3, #4]
 801300e:	2b02      	cmp	r3, #2
 8013010:	d10f      	bne.n	8013032 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	015a      	lsls	r2, r3, #5
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	4413      	add	r3, r2
 801301a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	68ba      	ldr	r2, [r7, #8]
 8013022:	0151      	lsls	r1, r2, #5
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	440a      	add	r2, r1
 8013028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801302c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013030:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013032:	2300      	movs	r3, #0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3714      	adds	r7, #20
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr

08013040 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013040:	b480      	push	{r7}
 8013042:	b085      	sub	sp, #20
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	460b      	mov	r3, r1
 801304a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	68fa      	ldr	r2, [r7, #12]
 801305a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801305e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013062:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	78fb      	ldrb	r3, [r7, #3]
 801306e:	011b      	lsls	r3, r3, #4
 8013070:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013074:	68f9      	ldr	r1, [r7, #12]
 8013076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801307a:	4313      	orrs	r3, r2
 801307c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801307e:	2300      	movs	r3, #0
}
 8013080:	4618      	mov	r0, r3
 8013082:	3714      	adds	r7, #20
 8013084:	46bd      	mov	sp, r7
 8013086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308a:	4770      	bx	lr

0801308c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80130a6:	f023 0303 	bic.w	r3, r3, #3
 80130aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	68fa      	ldr	r2, [r7, #12]
 80130b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80130ba:	f023 0302 	bic.w	r3, r3, #2
 80130be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80130c0:	2300      	movs	r3, #0
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3714      	adds	r7, #20
 80130c6:	46bd      	mov	sp, r7
 80130c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130cc:	4770      	bx	lr

080130ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80130ce:	b480      	push	{r7}
 80130d0:	b085      	sub	sp, #20
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	68fa      	ldr	r2, [r7, #12]
 80130e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80130e8:	f023 0303 	bic.w	r3, r3, #3
 80130ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	68fa      	ldr	r2, [r7, #12]
 80130f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80130fc:	f043 0302 	orr.w	r3, r3, #2
 8013100:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013102:	2300      	movs	r3, #0
}
 8013104:	4618      	mov	r0, r3
 8013106:	3714      	adds	r7, #20
 8013108:	46bd      	mov	sp, r7
 801310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310e:	4770      	bx	lr

08013110 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013110:	b480      	push	{r7}
 8013112:	b085      	sub	sp, #20
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	695b      	ldr	r3, [r3, #20]
 801311c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	699b      	ldr	r3, [r3, #24]
 8013122:	68fa      	ldr	r2, [r7, #12]
 8013124:	4013      	ands	r3, r2
 8013126:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013128:	68fb      	ldr	r3, [r7, #12]
}
 801312a:	4618      	mov	r0, r3
 801312c:	3714      	adds	r7, #20
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr

08013136 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013136:	b480      	push	{r7}
 8013138:	b085      	sub	sp, #20
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013148:	699b      	ldr	r3, [r3, #24]
 801314a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013152:	69db      	ldr	r3, [r3, #28]
 8013154:	68ba      	ldr	r2, [r7, #8]
 8013156:	4013      	ands	r3, r2
 8013158:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	0c1b      	lsrs	r3, r3, #16
}
 801315e:	4618      	mov	r0, r3
 8013160:	3714      	adds	r7, #20
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr

0801316a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801316a:	b480      	push	{r7}
 801316c:	b085      	sub	sp, #20
 801316e:	af00      	add	r7, sp, #0
 8013170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801317c:	699b      	ldr	r3, [r3, #24]
 801317e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013186:	69db      	ldr	r3, [r3, #28]
 8013188:	68ba      	ldr	r2, [r7, #8]
 801318a:	4013      	ands	r3, r2
 801318c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	b29b      	uxth	r3, r3
}
 8013192:	4618      	mov	r0, r3
 8013194:	3714      	adds	r7, #20
 8013196:	46bd      	mov	sp, r7
 8013198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319c:	4770      	bx	lr

0801319e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801319e:	b480      	push	{r7}
 80131a0:	b085      	sub	sp, #20
 80131a2:	af00      	add	r7, sp, #0
 80131a4:	6078      	str	r0, [r7, #4]
 80131a6:	460b      	mov	r3, r1
 80131a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80131ae:	78fb      	ldrb	r3, [r7, #3]
 80131b0:	015a      	lsls	r2, r3, #5
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	4413      	add	r3, r2
 80131b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131c4:	695b      	ldr	r3, [r3, #20]
 80131c6:	68ba      	ldr	r2, [r7, #8]
 80131c8:	4013      	ands	r3, r2
 80131ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80131cc:	68bb      	ldr	r3, [r7, #8]
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3714      	adds	r7, #20
 80131d2:	46bd      	mov	sp, r7
 80131d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d8:	4770      	bx	lr

080131da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80131da:	b480      	push	{r7}
 80131dc:	b087      	sub	sp, #28
 80131de:	af00      	add	r7, sp, #0
 80131e0:	6078      	str	r0, [r7, #4]
 80131e2:	460b      	mov	r3, r1
 80131e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131f0:	691b      	ldr	r3, [r3, #16]
 80131f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80131fe:	78fb      	ldrb	r3, [r7, #3]
 8013200:	f003 030f 	and.w	r3, r3, #15
 8013204:	68fa      	ldr	r2, [r7, #12]
 8013206:	fa22 f303 	lsr.w	r3, r2, r3
 801320a:	01db      	lsls	r3, r3, #7
 801320c:	b2db      	uxtb	r3, r3
 801320e:	693a      	ldr	r2, [r7, #16]
 8013210:	4313      	orrs	r3, r2
 8013212:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013214:	78fb      	ldrb	r3, [r7, #3]
 8013216:	015a      	lsls	r2, r3, #5
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	4413      	add	r3, r2
 801321c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	693a      	ldr	r2, [r7, #16]
 8013224:	4013      	ands	r3, r2
 8013226:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013228:	68bb      	ldr	r3, [r7, #8]
}
 801322a:	4618      	mov	r0, r3
 801322c:	371c      	adds	r7, #28
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr

08013236 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013236:	b480      	push	{r7}
 8013238:	b083      	sub	sp, #12
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	695b      	ldr	r3, [r3, #20]
 8013242:	f003 0301 	and.w	r3, r3, #1
}
 8013246:	4618      	mov	r0, r3
 8013248:	370c      	adds	r7, #12
 801324a:	46bd      	mov	sp, r7
 801324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013250:	4770      	bx	lr

08013252 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013252:	b480      	push	{r7}
 8013254:	b085      	sub	sp, #20
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	68fa      	ldr	r2, [r7, #12]
 8013268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801326c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013270:	f023 0307 	bic.w	r3, r3, #7
 8013274:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	68fa      	ldr	r2, [r7, #12]
 8013280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013288:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801328a:	2300      	movs	r3, #0
}
 801328c:	4618      	mov	r0, r3
 801328e:	3714      	adds	r7, #20
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013298:	b480      	push	{r7}
 801329a:	b087      	sub	sp, #28
 801329c:	af00      	add	r7, sp, #0
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	460b      	mov	r3, r1
 80132a2:	607a      	str	r2, [r7, #4]
 80132a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	333c      	adds	r3, #60	; 0x3c
 80132ae:	3304      	adds	r3, #4
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	4a26      	ldr	r2, [pc, #152]	; (8013350 <USB_EP0_OutStart+0xb8>)
 80132b8:	4293      	cmp	r3, r2
 80132ba:	d90a      	bls.n	80132d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132cc:	d101      	bne.n	80132d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80132ce:	2300      	movs	r3, #0
 80132d0:	e037      	b.n	8013342 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132d8:	461a      	mov	r2, r3
 80132da:	2300      	movs	r3, #0
 80132dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132e4:	691b      	ldr	r3, [r3, #16]
 80132e6:	697a      	ldr	r2, [r7, #20]
 80132e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80132f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132f8:	691b      	ldr	r3, [r3, #16]
 80132fa:	697a      	ldr	r2, [r7, #20]
 80132fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013300:	f043 0318 	orr.w	r3, r3, #24
 8013304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801330c:	691b      	ldr	r3, [r3, #16]
 801330e:	697a      	ldr	r2, [r7, #20]
 8013310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013314:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013318:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801331a:	7afb      	ldrb	r3, [r7, #11]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d10f      	bne.n	8013340 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013326:	461a      	mov	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	697a      	ldr	r2, [r7, #20]
 8013336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801333a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801333e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013340:	2300      	movs	r3, #0
}
 8013342:	4618      	mov	r0, r3
 8013344:	371c      	adds	r7, #28
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr
 801334e:	bf00      	nop
 8013350:	4f54300a 	.word	0x4f54300a

08013354 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013354:	b480      	push	{r7}
 8013356:	b085      	sub	sp, #20
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801335c:	2300      	movs	r3, #0
 801335e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	3301      	adds	r3, #1
 8013364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	4a13      	ldr	r2, [pc, #76]	; (80133b8 <USB_CoreReset+0x64>)
 801336a:	4293      	cmp	r3, r2
 801336c:	d901      	bls.n	8013372 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801336e:	2303      	movs	r3, #3
 8013370:	e01b      	b.n	80133aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	691b      	ldr	r3, [r3, #16]
 8013376:	2b00      	cmp	r3, #0
 8013378:	daf2      	bge.n	8013360 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801337a:	2300      	movs	r3, #0
 801337c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	691b      	ldr	r3, [r3, #16]
 8013382:	f043 0201 	orr.w	r2, r3, #1
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	3301      	adds	r3, #1
 801338e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	4a09      	ldr	r2, [pc, #36]	; (80133b8 <USB_CoreReset+0x64>)
 8013394:	4293      	cmp	r3, r2
 8013396:	d901      	bls.n	801339c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013398:	2303      	movs	r3, #3
 801339a:	e006      	b.n	80133aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	691b      	ldr	r3, [r3, #16]
 80133a0:	f003 0301 	and.w	r3, r3, #1
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d0f0      	beq.n	801338a <USB_CoreReset+0x36>

  return HAL_OK;
 80133a8:	2300      	movs	r3, #0
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3714      	adds	r7, #20
 80133ae:	46bd      	mov	sp, r7
 80133b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b4:	4770      	bx	lr
 80133b6:	bf00      	nop
 80133b8:	00030d40 	.word	0x00030d40

080133bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b084      	sub	sp, #16
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	460b      	mov	r3, r1
 80133c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80133c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80133cc:	f005 fdea 	bl	8018fa4 <USBD_static_malloc>
 80133d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d109      	bne.n	80133ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	32b0      	adds	r2, #176	; 0xb0
 80133e2:	2100      	movs	r1, #0
 80133e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80133e8:	2302      	movs	r3, #2
 80133ea:	e0d4      	b.n	8013596 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80133ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80133f0:	2100      	movs	r1, #0
 80133f2:	68f8      	ldr	r0, [r7, #12]
 80133f4:	f006 fda3 	bl	8019f3e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	32b0      	adds	r2, #176	; 0xb0
 8013402:	68f9      	ldr	r1, [r7, #12]
 8013404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	32b0      	adds	r2, #176	; 0xb0
 8013412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	7c1b      	ldrb	r3, [r3, #16]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d138      	bne.n	8013496 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013424:	4b5e      	ldr	r3, [pc, #376]	; (80135a0 <USBD_CDC_Init+0x1e4>)
 8013426:	7819      	ldrb	r1, [r3, #0]
 8013428:	f44f 7300 	mov.w	r3, #512	; 0x200
 801342c:	2202      	movs	r2, #2
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f005 fc95 	bl	8018d5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013434:	4b5a      	ldr	r3, [pc, #360]	; (80135a0 <USBD_CDC_Init+0x1e4>)
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	f003 020f 	and.w	r2, r3, #15
 801343c:	6879      	ldr	r1, [r7, #4]
 801343e:	4613      	mov	r3, r2
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	4413      	add	r3, r2
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	440b      	add	r3, r1
 8013448:	3324      	adds	r3, #36	; 0x24
 801344a:	2201      	movs	r2, #1
 801344c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801344e:	4b55      	ldr	r3, [pc, #340]	; (80135a4 <USBD_CDC_Init+0x1e8>)
 8013450:	7819      	ldrb	r1, [r3, #0]
 8013452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013456:	2202      	movs	r2, #2
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f005 fc80 	bl	8018d5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801345e:	4b51      	ldr	r3, [pc, #324]	; (80135a4 <USBD_CDC_Init+0x1e8>)
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	f003 020f 	and.w	r2, r3, #15
 8013466:	6879      	ldr	r1, [r7, #4]
 8013468:	4613      	mov	r3, r2
 801346a:	009b      	lsls	r3, r3, #2
 801346c:	4413      	add	r3, r2
 801346e:	009b      	lsls	r3, r3, #2
 8013470:	440b      	add	r3, r1
 8013472:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013476:	2201      	movs	r2, #1
 8013478:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801347a:	4b4b      	ldr	r3, [pc, #300]	; (80135a8 <USBD_CDC_Init+0x1ec>)
 801347c:	781b      	ldrb	r3, [r3, #0]
 801347e:	f003 020f 	and.w	r2, r3, #15
 8013482:	6879      	ldr	r1, [r7, #4]
 8013484:	4613      	mov	r3, r2
 8013486:	009b      	lsls	r3, r3, #2
 8013488:	4413      	add	r3, r2
 801348a:	009b      	lsls	r3, r3, #2
 801348c:	440b      	add	r3, r1
 801348e:	3326      	adds	r3, #38	; 0x26
 8013490:	2210      	movs	r2, #16
 8013492:	801a      	strh	r2, [r3, #0]
 8013494:	e035      	b.n	8013502 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013496:	4b42      	ldr	r3, [pc, #264]	; (80135a0 <USBD_CDC_Init+0x1e4>)
 8013498:	7819      	ldrb	r1, [r3, #0]
 801349a:	2340      	movs	r3, #64	; 0x40
 801349c:	2202      	movs	r2, #2
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f005 fc5d 	bl	8018d5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80134a4:	4b3e      	ldr	r3, [pc, #248]	; (80135a0 <USBD_CDC_Init+0x1e4>)
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	f003 020f 	and.w	r2, r3, #15
 80134ac:	6879      	ldr	r1, [r7, #4]
 80134ae:	4613      	mov	r3, r2
 80134b0:	009b      	lsls	r3, r3, #2
 80134b2:	4413      	add	r3, r2
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	440b      	add	r3, r1
 80134b8:	3324      	adds	r3, #36	; 0x24
 80134ba:	2201      	movs	r2, #1
 80134bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80134be:	4b39      	ldr	r3, [pc, #228]	; (80135a4 <USBD_CDC_Init+0x1e8>)
 80134c0:	7819      	ldrb	r1, [r3, #0]
 80134c2:	2340      	movs	r3, #64	; 0x40
 80134c4:	2202      	movs	r2, #2
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f005 fc49 	bl	8018d5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80134cc:	4b35      	ldr	r3, [pc, #212]	; (80135a4 <USBD_CDC_Init+0x1e8>)
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	f003 020f 	and.w	r2, r3, #15
 80134d4:	6879      	ldr	r1, [r7, #4]
 80134d6:	4613      	mov	r3, r2
 80134d8:	009b      	lsls	r3, r3, #2
 80134da:	4413      	add	r3, r2
 80134dc:	009b      	lsls	r3, r3, #2
 80134de:	440b      	add	r3, r1
 80134e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80134e4:	2201      	movs	r2, #1
 80134e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80134e8:	4b2f      	ldr	r3, [pc, #188]	; (80135a8 <USBD_CDC_Init+0x1ec>)
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	f003 020f 	and.w	r2, r3, #15
 80134f0:	6879      	ldr	r1, [r7, #4]
 80134f2:	4613      	mov	r3, r2
 80134f4:	009b      	lsls	r3, r3, #2
 80134f6:	4413      	add	r3, r2
 80134f8:	009b      	lsls	r3, r3, #2
 80134fa:	440b      	add	r3, r1
 80134fc:	3326      	adds	r3, #38	; 0x26
 80134fe:	2210      	movs	r2, #16
 8013500:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013502:	4b29      	ldr	r3, [pc, #164]	; (80135a8 <USBD_CDC_Init+0x1ec>)
 8013504:	7819      	ldrb	r1, [r3, #0]
 8013506:	2308      	movs	r3, #8
 8013508:	2203      	movs	r2, #3
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f005 fc27 	bl	8018d5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013510:	4b25      	ldr	r3, [pc, #148]	; (80135a8 <USBD_CDC_Init+0x1ec>)
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	f003 020f 	and.w	r2, r3, #15
 8013518:	6879      	ldr	r1, [r7, #4]
 801351a:	4613      	mov	r3, r2
 801351c:	009b      	lsls	r3, r3, #2
 801351e:	4413      	add	r3, r2
 8013520:	009b      	lsls	r3, r3, #2
 8013522:	440b      	add	r3, r1
 8013524:	3324      	adds	r3, #36	; 0x24
 8013526:	2201      	movs	r2, #1
 8013528:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	2200      	movs	r2, #0
 801352e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013538:	687a      	ldr	r2, [r7, #4]
 801353a:	33b0      	adds	r3, #176	; 0xb0
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	4413      	add	r3, r2
 8013540:	685b      	ldr	r3, [r3, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	2200      	movs	r2, #0
 801354a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2200      	movs	r2, #0
 8013552:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801355c:	2b00      	cmp	r3, #0
 801355e:	d101      	bne.n	8013564 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013560:	2302      	movs	r3, #2
 8013562:	e018      	b.n	8013596 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	7c1b      	ldrb	r3, [r3, #16]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10a      	bne.n	8013582 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801356c:	4b0d      	ldr	r3, [pc, #52]	; (80135a4 <USBD_CDC_Init+0x1e8>)
 801356e:	7819      	ldrb	r1, [r3, #0]
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013576:	f44f 7300 	mov.w	r3, #512	; 0x200
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f005 fcde 	bl	8018f3c <USBD_LL_PrepareReceive>
 8013580:	e008      	b.n	8013594 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013582:	4b08      	ldr	r3, [pc, #32]	; (80135a4 <USBD_CDC_Init+0x1e8>)
 8013584:	7819      	ldrb	r1, [r3, #0]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801358c:	2340      	movs	r3, #64	; 0x40
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f005 fcd4 	bl	8018f3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013594:	2300      	movs	r3, #0
}
 8013596:	4618      	mov	r0, r3
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	2000009f 	.word	0x2000009f
 80135a4:	200000a0 	.word	0x200000a0
 80135a8:	200000a1 	.word	0x200000a1

080135ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	460b      	mov	r3, r1
 80135b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80135b8:	4b3a      	ldr	r3, [pc, #232]	; (80136a4 <USBD_CDC_DeInit+0xf8>)
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	4619      	mov	r1, r3
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f005 fbf3 	bl	8018daa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80135c4:	4b37      	ldr	r3, [pc, #220]	; (80136a4 <USBD_CDC_DeInit+0xf8>)
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	f003 020f 	and.w	r2, r3, #15
 80135cc:	6879      	ldr	r1, [r7, #4]
 80135ce:	4613      	mov	r3, r2
 80135d0:	009b      	lsls	r3, r3, #2
 80135d2:	4413      	add	r3, r2
 80135d4:	009b      	lsls	r3, r3, #2
 80135d6:	440b      	add	r3, r1
 80135d8:	3324      	adds	r3, #36	; 0x24
 80135da:	2200      	movs	r2, #0
 80135dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80135de:	4b32      	ldr	r3, [pc, #200]	; (80136a8 <USBD_CDC_DeInit+0xfc>)
 80135e0:	781b      	ldrb	r3, [r3, #0]
 80135e2:	4619      	mov	r1, r3
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f005 fbe0 	bl	8018daa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80135ea:	4b2f      	ldr	r3, [pc, #188]	; (80136a8 <USBD_CDC_DeInit+0xfc>)
 80135ec:	781b      	ldrb	r3, [r3, #0]
 80135ee:	f003 020f 	and.w	r2, r3, #15
 80135f2:	6879      	ldr	r1, [r7, #4]
 80135f4:	4613      	mov	r3, r2
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	4413      	add	r3, r2
 80135fa:	009b      	lsls	r3, r3, #2
 80135fc:	440b      	add	r3, r1
 80135fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013602:	2200      	movs	r2, #0
 8013604:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013606:	4b29      	ldr	r3, [pc, #164]	; (80136ac <USBD_CDC_DeInit+0x100>)
 8013608:	781b      	ldrb	r3, [r3, #0]
 801360a:	4619      	mov	r1, r3
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f005 fbcc 	bl	8018daa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8013612:	4b26      	ldr	r3, [pc, #152]	; (80136ac <USBD_CDC_DeInit+0x100>)
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	f003 020f 	and.w	r2, r3, #15
 801361a:	6879      	ldr	r1, [r7, #4]
 801361c:	4613      	mov	r3, r2
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	4413      	add	r3, r2
 8013622:	009b      	lsls	r3, r3, #2
 8013624:	440b      	add	r3, r1
 8013626:	3324      	adds	r3, #36	; 0x24
 8013628:	2200      	movs	r2, #0
 801362a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801362c:	4b1f      	ldr	r3, [pc, #124]	; (80136ac <USBD_CDC_DeInit+0x100>)
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	f003 020f 	and.w	r2, r3, #15
 8013634:	6879      	ldr	r1, [r7, #4]
 8013636:	4613      	mov	r3, r2
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	4413      	add	r3, r2
 801363c:	009b      	lsls	r3, r3, #2
 801363e:	440b      	add	r3, r1
 8013640:	3326      	adds	r3, #38	; 0x26
 8013642:	2200      	movs	r2, #0
 8013644:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	32b0      	adds	r2, #176	; 0xb0
 8013650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d01f      	beq.n	8013698 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	33b0      	adds	r3, #176	; 0xb0
 8013662:	009b      	lsls	r3, r3, #2
 8013664:	4413      	add	r3, r2
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	32b0      	adds	r2, #176	; 0xb0
 8013676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801367a:	4618      	mov	r0, r3
 801367c:	f005 fca0 	bl	8018fc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	32b0      	adds	r2, #176	; 0xb0
 801368a:	2100      	movs	r1, #0
 801368c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2200      	movs	r2, #0
 8013694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013698:	2300      	movs	r3, #0
}
 801369a:	4618      	mov	r0, r3
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	2000009f 	.word	0x2000009f
 80136a8:	200000a0 	.word	0x200000a0
 80136ac:	200000a1 	.word	0x200000a1

080136b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b086      	sub	sp, #24
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	32b0      	adds	r2, #176	; 0xb0
 80136c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80136ca:	2300      	movs	r3, #0
 80136cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80136ce:	2300      	movs	r3, #0
 80136d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80136d2:	2300      	movs	r3, #0
 80136d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d101      	bne.n	80136e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80136dc:	2303      	movs	r3, #3
 80136de:	e0bf      	b.n	8013860 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d050      	beq.n	801378e <USBD_CDC_Setup+0xde>
 80136ec:	2b20      	cmp	r3, #32
 80136ee:	f040 80af 	bne.w	8013850 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	88db      	ldrh	r3, [r3, #6]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d03a      	beq.n	8013770 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	b25b      	sxtb	r3, r3
 8013700:	2b00      	cmp	r3, #0
 8013702:	da1b      	bge.n	801373c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	33b0      	adds	r3, #176	; 0xb0
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	4413      	add	r3, r2
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	689b      	ldr	r3, [r3, #8]
 8013716:	683a      	ldr	r2, [r7, #0]
 8013718:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801371a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801371c:	683a      	ldr	r2, [r7, #0]
 801371e:	88d2      	ldrh	r2, [r2, #6]
 8013720:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	88db      	ldrh	r3, [r3, #6]
 8013726:	2b07      	cmp	r3, #7
 8013728:	bf28      	it	cs
 801372a:	2307      	movcs	r3, #7
 801372c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	89fa      	ldrh	r2, [r7, #14]
 8013732:	4619      	mov	r1, r3
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f001 fd43 	bl	80151c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801373a:	e090      	b.n	801385e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	785a      	ldrb	r2, [r3, #1]
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	88db      	ldrh	r3, [r3, #6]
 801374a:	2b3f      	cmp	r3, #63	; 0x3f
 801374c:	d803      	bhi.n	8013756 <USBD_CDC_Setup+0xa6>
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	88db      	ldrh	r3, [r3, #6]
 8013752:	b2da      	uxtb	r2, r3
 8013754:	e000      	b.n	8013758 <USBD_CDC_Setup+0xa8>
 8013756:	2240      	movs	r2, #64	; 0x40
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801375e:	6939      	ldr	r1, [r7, #16]
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013766:	461a      	mov	r2, r3
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f001 fd55 	bl	8015218 <USBD_CtlPrepareRx>
      break;
 801376e:	e076      	b.n	801385e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013776:	687a      	ldr	r2, [r7, #4]
 8013778:	33b0      	adds	r3, #176	; 0xb0
 801377a:	009b      	lsls	r3, r3, #2
 801377c:	4413      	add	r3, r2
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	689b      	ldr	r3, [r3, #8]
 8013782:	683a      	ldr	r2, [r7, #0]
 8013784:	7850      	ldrb	r0, [r2, #1]
 8013786:	2200      	movs	r2, #0
 8013788:	6839      	ldr	r1, [r7, #0]
 801378a:	4798      	blx	r3
      break;
 801378c:	e067      	b.n	801385e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	785b      	ldrb	r3, [r3, #1]
 8013792:	2b0b      	cmp	r3, #11
 8013794:	d851      	bhi.n	801383a <USBD_CDC_Setup+0x18a>
 8013796:	a201      	add	r2, pc, #4	; (adr r2, 801379c <USBD_CDC_Setup+0xec>)
 8013798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801379c:	080137cd 	.word	0x080137cd
 80137a0:	08013849 	.word	0x08013849
 80137a4:	0801383b 	.word	0x0801383b
 80137a8:	0801383b 	.word	0x0801383b
 80137ac:	0801383b 	.word	0x0801383b
 80137b0:	0801383b 	.word	0x0801383b
 80137b4:	0801383b 	.word	0x0801383b
 80137b8:	0801383b 	.word	0x0801383b
 80137bc:	0801383b 	.word	0x0801383b
 80137c0:	0801383b 	.word	0x0801383b
 80137c4:	080137f7 	.word	0x080137f7
 80137c8:	08013821 	.word	0x08013821
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137d2:	b2db      	uxtb	r3, r3
 80137d4:	2b03      	cmp	r3, #3
 80137d6:	d107      	bne.n	80137e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80137d8:	f107 030a 	add.w	r3, r7, #10
 80137dc:	2202      	movs	r2, #2
 80137de:	4619      	mov	r1, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f001 fced 	bl	80151c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80137e6:	e032      	b.n	801384e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80137e8:	6839      	ldr	r1, [r7, #0]
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f001 fc77 	bl	80150de <USBD_CtlError>
            ret = USBD_FAIL;
 80137f0:	2303      	movs	r3, #3
 80137f2:	75fb      	strb	r3, [r7, #23]
          break;
 80137f4:	e02b      	b.n	801384e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	2b03      	cmp	r3, #3
 8013800:	d107      	bne.n	8013812 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013802:	f107 030d 	add.w	r3, r7, #13
 8013806:	2201      	movs	r2, #1
 8013808:	4619      	mov	r1, r3
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f001 fcd8 	bl	80151c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013810:	e01d      	b.n	801384e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013812:	6839      	ldr	r1, [r7, #0]
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f001 fc62 	bl	80150de <USBD_CtlError>
            ret = USBD_FAIL;
 801381a:	2303      	movs	r3, #3
 801381c:	75fb      	strb	r3, [r7, #23]
          break;
 801381e:	e016      	b.n	801384e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013826:	b2db      	uxtb	r3, r3
 8013828:	2b03      	cmp	r3, #3
 801382a:	d00f      	beq.n	801384c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801382c:	6839      	ldr	r1, [r7, #0]
 801382e:	6878      	ldr	r0, [r7, #4]
 8013830:	f001 fc55 	bl	80150de <USBD_CtlError>
            ret = USBD_FAIL;
 8013834:	2303      	movs	r3, #3
 8013836:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013838:	e008      	b.n	801384c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801383a:	6839      	ldr	r1, [r7, #0]
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f001 fc4e 	bl	80150de <USBD_CtlError>
          ret = USBD_FAIL;
 8013842:	2303      	movs	r3, #3
 8013844:	75fb      	strb	r3, [r7, #23]
          break;
 8013846:	e002      	b.n	801384e <USBD_CDC_Setup+0x19e>
          break;
 8013848:	bf00      	nop
 801384a:	e008      	b.n	801385e <USBD_CDC_Setup+0x1ae>
          break;
 801384c:	bf00      	nop
      }
      break;
 801384e:	e006      	b.n	801385e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013850:	6839      	ldr	r1, [r7, #0]
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f001 fc43 	bl	80150de <USBD_CtlError>
      ret = USBD_FAIL;
 8013858:	2303      	movs	r3, #3
 801385a:	75fb      	strb	r3, [r7, #23]
      break;
 801385c:	bf00      	nop
  }

  return (uint8_t)ret;
 801385e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013860:	4618      	mov	r0, r3
 8013862:	3718      	adds	r7, #24
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b084      	sub	sp, #16
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	460b      	mov	r3, r1
 8013872:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801387a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	32b0      	adds	r2, #176	; 0xb0
 8013886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d101      	bne.n	8013892 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801388e:	2303      	movs	r3, #3
 8013890:	e065      	b.n	801395e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	32b0      	adds	r2, #176	; 0xb0
 801389c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80138a2:	78fb      	ldrb	r3, [r7, #3]
 80138a4:	f003 020f 	and.w	r2, r3, #15
 80138a8:	6879      	ldr	r1, [r7, #4]
 80138aa:	4613      	mov	r3, r2
 80138ac:	009b      	lsls	r3, r3, #2
 80138ae:	4413      	add	r3, r2
 80138b0:	009b      	lsls	r3, r3, #2
 80138b2:	440b      	add	r3, r1
 80138b4:	3318      	adds	r3, #24
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d02f      	beq.n	801391c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80138bc:	78fb      	ldrb	r3, [r7, #3]
 80138be:	f003 020f 	and.w	r2, r3, #15
 80138c2:	6879      	ldr	r1, [r7, #4]
 80138c4:	4613      	mov	r3, r2
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	4413      	add	r3, r2
 80138ca:	009b      	lsls	r3, r3, #2
 80138cc:	440b      	add	r3, r1
 80138ce:	3318      	adds	r3, #24
 80138d0:	681a      	ldr	r2, [r3, #0]
 80138d2:	78fb      	ldrb	r3, [r7, #3]
 80138d4:	f003 010f 	and.w	r1, r3, #15
 80138d8:	68f8      	ldr	r0, [r7, #12]
 80138da:	460b      	mov	r3, r1
 80138dc:	00db      	lsls	r3, r3, #3
 80138de:	440b      	add	r3, r1
 80138e0:	009b      	lsls	r3, r3, #2
 80138e2:	4403      	add	r3, r0
 80138e4:	3348      	adds	r3, #72	; 0x48
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80138ec:	fb01 f303 	mul.w	r3, r1, r3
 80138f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d112      	bne.n	801391c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80138f6:	78fb      	ldrb	r3, [r7, #3]
 80138f8:	f003 020f 	and.w	r2, r3, #15
 80138fc:	6879      	ldr	r1, [r7, #4]
 80138fe:	4613      	mov	r3, r2
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	4413      	add	r3, r2
 8013904:	009b      	lsls	r3, r3, #2
 8013906:	440b      	add	r3, r1
 8013908:	3318      	adds	r3, #24
 801390a:	2200      	movs	r2, #0
 801390c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801390e:	78f9      	ldrb	r1, [r7, #3]
 8013910:	2300      	movs	r3, #0
 8013912:	2200      	movs	r2, #0
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f005 faf0 	bl	8018efa <USBD_LL_Transmit>
 801391a:	e01f      	b.n	801395c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2200      	movs	r2, #0
 8013920:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801392a:	687a      	ldr	r2, [r7, #4]
 801392c:	33b0      	adds	r3, #176	; 0xb0
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	4413      	add	r3, r2
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	691b      	ldr	r3, [r3, #16]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d010      	beq.n	801395c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013940:	687a      	ldr	r2, [r7, #4]
 8013942:	33b0      	adds	r3, #176	; 0xb0
 8013944:	009b      	lsls	r3, r3, #2
 8013946:	4413      	add	r3, r2
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	691b      	ldr	r3, [r3, #16]
 801394c:	68ba      	ldr	r2, [r7, #8]
 801394e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013952:	68ba      	ldr	r2, [r7, #8]
 8013954:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013958:	78fa      	ldrb	r2, [r7, #3]
 801395a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801395c:	2300      	movs	r3, #0
}
 801395e:	4618      	mov	r0, r3
 8013960:	3710      	adds	r7, #16
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}

08013966 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013966:	b580      	push	{r7, lr}
 8013968:	b084      	sub	sp, #16
 801396a:	af00      	add	r7, sp, #0
 801396c:	6078      	str	r0, [r7, #4]
 801396e:	460b      	mov	r3, r1
 8013970:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	32b0      	adds	r2, #176	; 0xb0
 801397c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013980:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	32b0      	adds	r2, #176	; 0xb0
 801398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d101      	bne.n	8013998 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013994:	2303      	movs	r3, #3
 8013996:	e01a      	b.n	80139ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013998:	78fb      	ldrb	r3, [r7, #3]
 801399a:	4619      	mov	r1, r3
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f005 faee 	bl	8018f7e <USBD_LL_GetRxDataSize>
 80139a2:	4602      	mov	r2, r0
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	33b0      	adds	r3, #176	; 0xb0
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	4413      	add	r3, r2
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	68db      	ldr	r3, [r3, #12]
 80139bc:	68fa      	ldr	r2, [r7, #12]
 80139be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80139c2:	68fa      	ldr	r2, [r7, #12]
 80139c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80139c8:	4611      	mov	r1, r2
 80139ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80139cc:	2300      	movs	r3, #0
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3710      	adds	r7, #16
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}

080139d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80139d6:	b580      	push	{r7, lr}
 80139d8:	b084      	sub	sp, #16
 80139da:	af00      	add	r7, sp, #0
 80139dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	32b0      	adds	r2, #176	; 0xb0
 80139e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d101      	bne.n	80139f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80139f4:	2303      	movs	r3, #3
 80139f6:	e025      	b.n	8013a44 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80139fe:	687a      	ldr	r2, [r7, #4]
 8013a00:	33b0      	adds	r3, #176	; 0xb0
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	4413      	add	r3, r2
 8013a06:	685b      	ldr	r3, [r3, #4]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d01a      	beq.n	8013a42 <USBD_CDC_EP0_RxReady+0x6c>
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013a12:	2bff      	cmp	r3, #255	; 0xff
 8013a14:	d015      	beq.n	8013a42 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	33b0      	adds	r3, #176	; 0xb0
 8013a20:	009b      	lsls	r3, r3, #2
 8013a22:	4413      	add	r3, r2
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	689b      	ldr	r3, [r3, #8]
 8013a28:	68fa      	ldr	r2, [r7, #12]
 8013a2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8013a2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013a30:	68fa      	ldr	r2, [r7, #12]
 8013a32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013a36:	b292      	uxth	r2, r2
 8013a38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	22ff      	movs	r2, #255	; 0xff
 8013a3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013a42:	2300      	movs	r3, #0
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	3710      	adds	r7, #16
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}

08013a4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b086      	sub	sp, #24
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013a54:	2182      	movs	r1, #130	; 0x82
 8013a56:	4818      	ldr	r0, [pc, #96]	; (8013ab8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013a58:	f000 fd09 	bl	801446e <USBD_GetEpDesc>
 8013a5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013a5e:	2101      	movs	r1, #1
 8013a60:	4815      	ldr	r0, [pc, #84]	; (8013ab8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013a62:	f000 fd04 	bl	801446e <USBD_GetEpDesc>
 8013a66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013a68:	2181      	movs	r1, #129	; 0x81
 8013a6a:	4813      	ldr	r0, [pc, #76]	; (8013ab8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013a6c:	f000 fcff 	bl	801446e <USBD_GetEpDesc>
 8013a70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013a72:	697b      	ldr	r3, [r7, #20]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d002      	beq.n	8013a7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013a78:	697b      	ldr	r3, [r7, #20]
 8013a7a:	2210      	movs	r2, #16
 8013a7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d006      	beq.n	8013a92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	2200      	movs	r2, #0
 8013a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013a8c:	711a      	strb	r2, [r3, #4]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d006      	beq.n	8013aa6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013aa0:	711a      	strb	r2, [r3, #4]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2243      	movs	r2, #67	; 0x43
 8013aaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013aac:	4b02      	ldr	r3, [pc, #8]	; (8013ab8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	3718      	adds	r7, #24
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	2000005c 	.word	0x2000005c

08013abc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b086      	sub	sp, #24
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013ac4:	2182      	movs	r1, #130	; 0x82
 8013ac6:	4818      	ldr	r0, [pc, #96]	; (8013b28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013ac8:	f000 fcd1 	bl	801446e <USBD_GetEpDesc>
 8013acc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013ace:	2101      	movs	r1, #1
 8013ad0:	4815      	ldr	r0, [pc, #84]	; (8013b28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013ad2:	f000 fccc 	bl	801446e <USBD_GetEpDesc>
 8013ad6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013ad8:	2181      	movs	r1, #129	; 0x81
 8013ada:	4813      	ldr	r0, [pc, #76]	; (8013b28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013adc:	f000 fcc7 	bl	801446e <USBD_GetEpDesc>
 8013ae0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d002      	beq.n	8013aee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	2210      	movs	r2, #16
 8013aec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d006      	beq.n	8013b02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	2200      	movs	r2, #0
 8013af8:	711a      	strb	r2, [r3, #4]
 8013afa:	2200      	movs	r2, #0
 8013afc:	f042 0202 	orr.w	r2, r2, #2
 8013b00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d006      	beq.n	8013b16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	711a      	strb	r2, [r3, #4]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	f042 0202 	orr.w	r2, r2, #2
 8013b14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2243      	movs	r2, #67	; 0x43
 8013b1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013b1c:	4b02      	ldr	r3, [pc, #8]	; (8013b28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3718      	adds	r7, #24
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
 8013b26:	bf00      	nop
 8013b28:	2000005c 	.word	0x2000005c

08013b2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b086      	sub	sp, #24
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013b34:	2182      	movs	r1, #130	; 0x82
 8013b36:	4818      	ldr	r0, [pc, #96]	; (8013b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013b38:	f000 fc99 	bl	801446e <USBD_GetEpDesc>
 8013b3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013b3e:	2101      	movs	r1, #1
 8013b40:	4815      	ldr	r0, [pc, #84]	; (8013b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013b42:	f000 fc94 	bl	801446e <USBD_GetEpDesc>
 8013b46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013b48:	2181      	movs	r1, #129	; 0x81
 8013b4a:	4813      	ldr	r0, [pc, #76]	; (8013b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013b4c:	f000 fc8f 	bl	801446e <USBD_GetEpDesc>
 8013b50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d002      	beq.n	8013b5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	2210      	movs	r2, #16
 8013b5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d006      	beq.n	8013b72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	2200      	movs	r2, #0
 8013b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b6c:	711a      	strb	r2, [r3, #4]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d006      	beq.n	8013b86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b80:	711a      	strb	r2, [r3, #4]
 8013b82:	2200      	movs	r2, #0
 8013b84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2243      	movs	r2, #67	; 0x43
 8013b8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013b8c:	4b02      	ldr	r3, [pc, #8]	; (8013b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3718      	adds	r7, #24
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	2000005c 	.word	0x2000005c

08013b9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	220a      	movs	r2, #10
 8013ba8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013baa:	4b03      	ldr	r3, [pc, #12]	; (8013bb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	370c      	adds	r7, #12
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb6:	4770      	bx	lr
 8013bb8:	20000018 	.word	0x20000018

08013bbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	b083      	sub	sp, #12
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d101      	bne.n	8013bd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013bcc:	2303      	movs	r3, #3
 8013bce:	e009      	b.n	8013be4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013bd6:	687a      	ldr	r2, [r7, #4]
 8013bd8:	33b0      	adds	r3, #176	; 0xb0
 8013bda:	009b      	lsls	r3, r3, #2
 8013bdc:	4413      	add	r3, r2
 8013bde:	683a      	ldr	r2, [r7, #0]
 8013be0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013be2:	2300      	movs	r3, #0
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	370c      	adds	r7, #12
 8013be8:	46bd      	mov	sp, r7
 8013bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bee:	4770      	bx	lr

08013bf0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b087      	sub	sp, #28
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	32b0      	adds	r2, #176	; 0xb0
 8013c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c0a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013c12:	2303      	movs	r3, #3
 8013c14:	e008      	b.n	8013c28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	68ba      	ldr	r2, [r7, #8]
 8013c1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	687a      	ldr	r2, [r7, #4]
 8013c22:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013c26:	2300      	movs	r3, #0
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	371c      	adds	r7, #28
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr

08013c34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013c34:	b480      	push	{r7}
 8013c36:	b085      	sub	sp, #20
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
 8013c3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	32b0      	adds	r2, #176	; 0xb0
 8013c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d101      	bne.n	8013c58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013c54:	2303      	movs	r3, #3
 8013c56:	e004      	b.n	8013c62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	683a      	ldr	r2, [r7, #0]
 8013c5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013c60:	2300      	movs	r3, #0
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	3714      	adds	r7, #20
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr
	...

08013c70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b084      	sub	sp, #16
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	32b0      	adds	r2, #176	; 0xb0
 8013c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	32b0      	adds	r2, #176	; 0xb0
 8013c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d101      	bne.n	8013c9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013c9a:	2303      	movs	r3, #3
 8013c9c:	e018      	b.n	8013cd0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	7c1b      	ldrb	r3, [r3, #16]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d10a      	bne.n	8013cbc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013ca6:	4b0c      	ldr	r3, [pc, #48]	; (8013cd8 <USBD_CDC_ReceivePacket+0x68>)
 8013ca8:	7819      	ldrb	r1, [r3, #0]
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f005 f941 	bl	8018f3c <USBD_LL_PrepareReceive>
 8013cba:	e008      	b.n	8013cce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013cbc:	4b06      	ldr	r3, [pc, #24]	; (8013cd8 <USBD_CDC_ReceivePacket+0x68>)
 8013cbe:	7819      	ldrb	r1, [r3, #0]
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013cc6:	2340      	movs	r3, #64	; 0x40
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f005 f937 	bl	8018f3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013cce:	2300      	movs	r3, #0
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3710      	adds	r7, #16
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}
 8013cd8:	200000a0 	.word	0x200000a0

08013cdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b086      	sub	sp, #24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	4613      	mov	r3, r2
 8013ce8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d101      	bne.n	8013cf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013cf0:	2303      	movs	r3, #3
 8013cf2:	e01f      	b.n	8013d34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2200      	movs	r2, #0
 8013d08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d003      	beq.n	8013d1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	68ba      	ldr	r2, [r7, #8]
 8013d16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	2201      	movs	r2, #1
 8013d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	79fa      	ldrb	r2, [r7, #7]
 8013d26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013d28:	68f8      	ldr	r0, [r7, #12]
 8013d2a:	f004 ffb1 	bl	8018c90 <USBD_LL_Init>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3718      	adds	r7, #24
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}

08013d3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b084      	sub	sp, #16
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013d46:	2300      	movs	r3, #0
 8013d48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d101      	bne.n	8013d54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013d50:	2303      	movs	r3, #3
 8013d52:	e025      	b.n	8013da0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	683a      	ldr	r2, [r7, #0]
 8013d58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	32ae      	adds	r2, #174	; 0xae
 8013d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d00f      	beq.n	8013d90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	32ae      	adds	r2, #174	; 0xae
 8013d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d80:	f107 020e 	add.w	r2, r7, #14
 8013d84:	4610      	mov	r0, r2
 8013d86:	4798      	blx	r3
 8013d88:	4602      	mov	r2, r0
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013d96:	1c5a      	adds	r2, r3, #1
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013d9e:	2300      	movs	r3, #0
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3710      	adds	r7, #16
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f004 ffb9 	bl	8018d28 <USBD_LL_Start>
 8013db6:	4603      	mov	r3, r0
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	3708      	adds	r7, #8
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b083      	sub	sp, #12
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013dc8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	370c      	adds	r7, #12
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd4:	4770      	bx	lr

08013dd6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b084      	sub	sp, #16
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	460b      	mov	r3, r1
 8013de0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013de2:	2300      	movs	r3, #0
 8013de4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d009      	beq.n	8013e04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	78fa      	ldrb	r2, [r7, #3]
 8013dfa:	4611      	mov	r1, r2
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	4798      	blx	r3
 8013e00:	4603      	mov	r3, r0
 8013e02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3710      	adds	r7, #16
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}

08013e0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	b084      	sub	sp, #16
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
 8013e16:	460b      	mov	r3, r1
 8013e18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	78fa      	ldrb	r2, [r7, #3]
 8013e28:	4611      	mov	r1, r2
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	4798      	blx	r3
 8013e2e:	4603      	mov	r3, r0
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d001      	beq.n	8013e38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013e34:	2303      	movs	r3, #3
 8013e36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3710      	adds	r7, #16
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}

08013e42 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013e42:	b580      	push	{r7, lr}
 8013e44:	b084      	sub	sp, #16
 8013e46:	af00      	add	r7, sp, #0
 8013e48:	6078      	str	r0, [r7, #4]
 8013e4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013e52:	6839      	ldr	r1, [r7, #0]
 8013e54:	4618      	mov	r0, r3
 8013e56:	f001 f908 	bl	801506a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2201      	movs	r2, #1
 8013e5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013e68:	461a      	mov	r2, r3
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013e76:	f003 031f 	and.w	r3, r3, #31
 8013e7a:	2b02      	cmp	r3, #2
 8013e7c:	d01a      	beq.n	8013eb4 <USBD_LL_SetupStage+0x72>
 8013e7e:	2b02      	cmp	r3, #2
 8013e80:	d822      	bhi.n	8013ec8 <USBD_LL_SetupStage+0x86>
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d002      	beq.n	8013e8c <USBD_LL_SetupStage+0x4a>
 8013e86:	2b01      	cmp	r3, #1
 8013e88:	d00a      	beq.n	8013ea0 <USBD_LL_SetupStage+0x5e>
 8013e8a:	e01d      	b.n	8013ec8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013e92:	4619      	mov	r1, r3
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f000 fb5f 	bl	8014558 <USBD_StdDevReq>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8013e9e:	e020      	b.n	8013ee2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f000 fbc7 	bl	801463c <USBD_StdItfReq>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8013eb2:	e016      	b.n	8013ee2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013eba:	4619      	mov	r1, r3
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f000 fc29 	bl	8014714 <USBD_StdEPReq>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8013ec6:	e00c      	b.n	8013ee2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013ece:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f004 ff86 	bl	8018de8 <USBD_LL_StallEP>
 8013edc:	4603      	mov	r3, r0
 8013ede:	73fb      	strb	r3, [r7, #15]
      break;
 8013ee0:	bf00      	nop
  }

  return ret;
 8013ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3710      	adds	r7, #16
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}

08013eec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b086      	sub	sp, #24
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	607a      	str	r2, [r7, #4]
 8013ef8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013efa:	2300      	movs	r3, #0
 8013efc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013efe:	7afb      	ldrb	r3, [r7, #11]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d16e      	bne.n	8013fe2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013f0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013f12:	2b03      	cmp	r3, #3
 8013f14:	f040 8098 	bne.w	8014048 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	689a      	ldr	r2, [r3, #8]
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	68db      	ldr	r3, [r3, #12]
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d913      	bls.n	8013f4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	689a      	ldr	r2, [r3, #8]
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	68db      	ldr	r3, [r3, #12]
 8013f2c:	1ad2      	subs	r2, r2, r3
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	68da      	ldr	r2, [r3, #12]
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	689b      	ldr	r3, [r3, #8]
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	bf28      	it	cs
 8013f3e:	4613      	movcs	r3, r2
 8013f40:	461a      	mov	r2, r3
 8013f42:	6879      	ldr	r1, [r7, #4]
 8013f44:	68f8      	ldr	r0, [r7, #12]
 8013f46:	f001 f984 	bl	8015252 <USBD_CtlContinueRx>
 8013f4a:	e07d      	b.n	8014048 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013f52:	f003 031f 	and.w	r3, r3, #31
 8013f56:	2b02      	cmp	r3, #2
 8013f58:	d014      	beq.n	8013f84 <USBD_LL_DataOutStage+0x98>
 8013f5a:	2b02      	cmp	r3, #2
 8013f5c:	d81d      	bhi.n	8013f9a <USBD_LL_DataOutStage+0xae>
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d002      	beq.n	8013f68 <USBD_LL_DataOutStage+0x7c>
 8013f62:	2b01      	cmp	r3, #1
 8013f64:	d003      	beq.n	8013f6e <USBD_LL_DataOutStage+0x82>
 8013f66:	e018      	b.n	8013f9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	75bb      	strb	r3, [r7, #22]
            break;
 8013f6c:	e018      	b.n	8013fa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	4619      	mov	r1, r3
 8013f78:	68f8      	ldr	r0, [r7, #12]
 8013f7a:	f000 fa5e 	bl	801443a <USBD_CoreFindIF>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	75bb      	strb	r3, [r7, #22]
            break;
 8013f82:	e00d      	b.n	8013fa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013f8a:	b2db      	uxtb	r3, r3
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	68f8      	ldr	r0, [r7, #12]
 8013f90:	f000 fa60 	bl	8014454 <USBD_CoreFindEP>
 8013f94:	4603      	mov	r3, r0
 8013f96:	75bb      	strb	r3, [r7, #22]
            break;
 8013f98:	e002      	b.n	8013fa0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	75bb      	strb	r3, [r7, #22]
            break;
 8013f9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013fa0:	7dbb      	ldrb	r3, [r7, #22]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d119      	bne.n	8013fda <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fac:	b2db      	uxtb	r3, r3
 8013fae:	2b03      	cmp	r3, #3
 8013fb0:	d113      	bne.n	8013fda <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013fb2:	7dba      	ldrb	r2, [r7, #22]
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	32ae      	adds	r2, #174	; 0xae
 8013fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fbc:	691b      	ldr	r3, [r3, #16]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d00b      	beq.n	8013fda <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013fc2:	7dba      	ldrb	r2, [r7, #22]
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013fca:	7dba      	ldrb	r2, [r7, #22]
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	32ae      	adds	r2, #174	; 0xae
 8013fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd4:	691b      	ldr	r3, [r3, #16]
 8013fd6:	68f8      	ldr	r0, [r7, #12]
 8013fd8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013fda:	68f8      	ldr	r0, [r7, #12]
 8013fdc:	f001 f94a 	bl	8015274 <USBD_CtlSendStatus>
 8013fe0:	e032      	b.n	8014048 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013fe2:	7afb      	ldrb	r3, [r7, #11]
 8013fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	4619      	mov	r1, r3
 8013fec:	68f8      	ldr	r0, [r7, #12]
 8013fee:	f000 fa31 	bl	8014454 <USBD_CoreFindEP>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ff6:	7dbb      	ldrb	r3, [r7, #22]
 8013ff8:	2bff      	cmp	r3, #255	; 0xff
 8013ffa:	d025      	beq.n	8014048 <USBD_LL_DataOutStage+0x15c>
 8013ffc:	7dbb      	ldrb	r3, [r7, #22]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d122      	bne.n	8014048 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014008:	b2db      	uxtb	r3, r3
 801400a:	2b03      	cmp	r3, #3
 801400c:	d117      	bne.n	801403e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801400e:	7dba      	ldrb	r2, [r7, #22]
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	32ae      	adds	r2, #174	; 0xae
 8014014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014018:	699b      	ldr	r3, [r3, #24]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d00f      	beq.n	801403e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801401e:	7dba      	ldrb	r2, [r7, #22]
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014026:	7dba      	ldrb	r2, [r7, #22]
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	32ae      	adds	r2, #174	; 0xae
 801402c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014030:	699b      	ldr	r3, [r3, #24]
 8014032:	7afa      	ldrb	r2, [r7, #11]
 8014034:	4611      	mov	r1, r2
 8014036:	68f8      	ldr	r0, [r7, #12]
 8014038:	4798      	blx	r3
 801403a:	4603      	mov	r3, r0
 801403c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801403e:	7dfb      	ldrb	r3, [r7, #23]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d001      	beq.n	8014048 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014044:	7dfb      	ldrb	r3, [r7, #23]
 8014046:	e000      	b.n	801404a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014048:	2300      	movs	r3, #0
}
 801404a:	4618      	mov	r0, r3
 801404c:	3718      	adds	r7, #24
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}

08014052 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014052:	b580      	push	{r7, lr}
 8014054:	b086      	sub	sp, #24
 8014056:	af00      	add	r7, sp, #0
 8014058:	60f8      	str	r0, [r7, #12]
 801405a:	460b      	mov	r3, r1
 801405c:	607a      	str	r2, [r7, #4]
 801405e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014060:	7afb      	ldrb	r3, [r7, #11]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d16f      	bne.n	8014146 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	3314      	adds	r3, #20
 801406a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014072:	2b02      	cmp	r3, #2
 8014074:	d15a      	bne.n	801412c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	689a      	ldr	r2, [r3, #8]
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	429a      	cmp	r2, r3
 8014080:	d914      	bls.n	80140ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	689a      	ldr	r2, [r3, #8]
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	1ad2      	subs	r2, r2, r3
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	689b      	ldr	r3, [r3, #8]
 8014094:	461a      	mov	r2, r3
 8014096:	6879      	ldr	r1, [r7, #4]
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	f001 f8ac 	bl	80151f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801409e:	2300      	movs	r3, #0
 80140a0:	2200      	movs	r2, #0
 80140a2:	2100      	movs	r1, #0
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f004 ff49 	bl	8018f3c <USBD_LL_PrepareReceive>
 80140aa:	e03f      	b.n	801412c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	68da      	ldr	r2, [r3, #12]
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	689b      	ldr	r3, [r3, #8]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d11c      	bne.n	80140f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	685a      	ldr	r2, [r3, #4]
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d316      	bcc.n	80140f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	685a      	ldr	r2, [r3, #4]
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d20f      	bcs.n	80140f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80140d2:	2200      	movs	r2, #0
 80140d4:	2100      	movs	r1, #0
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f001 f88d 	bl	80151f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	2200      	movs	r2, #0
 80140e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80140e4:	2300      	movs	r3, #0
 80140e6:	2200      	movs	r2, #0
 80140e8:	2100      	movs	r1, #0
 80140ea:	68f8      	ldr	r0, [r7, #12]
 80140ec:	f004 ff26 	bl	8018f3c <USBD_LL_PrepareReceive>
 80140f0:	e01c      	b.n	801412c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140f8:	b2db      	uxtb	r3, r3
 80140fa:	2b03      	cmp	r3, #3
 80140fc:	d10f      	bne.n	801411e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d009      	beq.n	801411e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2200      	movs	r2, #0
 801410e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014118:	68db      	ldr	r3, [r3, #12]
 801411a:	68f8      	ldr	r0, [r7, #12]
 801411c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801411e:	2180      	movs	r1, #128	; 0x80
 8014120:	68f8      	ldr	r0, [r7, #12]
 8014122:	f004 fe61 	bl	8018de8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014126:	68f8      	ldr	r0, [r7, #12]
 8014128:	f001 f8b7 	bl	801529a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d03a      	beq.n	80141ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014136:	68f8      	ldr	r0, [r7, #12]
 8014138:	f7ff fe42 	bl	8013dc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	2200      	movs	r2, #0
 8014140:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014144:	e032      	b.n	80141ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014146:	7afb      	ldrb	r3, [r7, #11]
 8014148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801414c:	b2db      	uxtb	r3, r3
 801414e:	4619      	mov	r1, r3
 8014150:	68f8      	ldr	r0, [r7, #12]
 8014152:	f000 f97f 	bl	8014454 <USBD_CoreFindEP>
 8014156:	4603      	mov	r3, r0
 8014158:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801415a:	7dfb      	ldrb	r3, [r7, #23]
 801415c:	2bff      	cmp	r3, #255	; 0xff
 801415e:	d025      	beq.n	80141ac <USBD_LL_DataInStage+0x15a>
 8014160:	7dfb      	ldrb	r3, [r7, #23]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d122      	bne.n	80141ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801416c:	b2db      	uxtb	r3, r3
 801416e:	2b03      	cmp	r3, #3
 8014170:	d11c      	bne.n	80141ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014172:	7dfa      	ldrb	r2, [r7, #23]
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	32ae      	adds	r2, #174	; 0xae
 8014178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801417c:	695b      	ldr	r3, [r3, #20]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d014      	beq.n	80141ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014182:	7dfa      	ldrb	r2, [r7, #23]
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801418a:	7dfa      	ldrb	r2, [r7, #23]
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	32ae      	adds	r2, #174	; 0xae
 8014190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014194:	695b      	ldr	r3, [r3, #20]
 8014196:	7afa      	ldrb	r2, [r7, #11]
 8014198:	4611      	mov	r1, r2
 801419a:	68f8      	ldr	r0, [r7, #12]
 801419c:	4798      	blx	r3
 801419e:	4603      	mov	r3, r0
 80141a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80141a2:	7dbb      	ldrb	r3, [r7, #22]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d001      	beq.n	80141ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80141a8:	7dbb      	ldrb	r3, [r7, #22]
 80141aa:	e000      	b.n	80141ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80141ac:	2300      	movs	r3, #0
}
 80141ae:	4618      	mov	r0, r3
 80141b0:	3718      	adds	r7, #24
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80141b6:	b580      	push	{r7, lr}
 80141b8:	b084      	sub	sp, #16
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80141be:	2300      	movs	r3, #0
 80141c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2201      	movs	r2, #1
 80141c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2200      	movs	r2, #0
 80141ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2200      	movs	r2, #0
 80141d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2200      	movs	r2, #0
 80141dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2200      	movs	r2, #0
 80141e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d014      	beq.n	801421c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d00e      	beq.n	801421c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	687a      	ldr	r2, [r7, #4]
 8014208:	6852      	ldr	r2, [r2, #4]
 801420a:	b2d2      	uxtb	r2, r2
 801420c:	4611      	mov	r1, r2
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	4798      	blx	r3
 8014212:	4603      	mov	r3, r0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d001      	beq.n	801421c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014218:	2303      	movs	r3, #3
 801421a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801421c:	2340      	movs	r3, #64	; 0x40
 801421e:	2200      	movs	r2, #0
 8014220:	2100      	movs	r1, #0
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	f004 fd9b 	bl	8018d5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2201      	movs	r2, #1
 801422c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2240      	movs	r2, #64	; 0x40
 8014234:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014238:	2340      	movs	r3, #64	; 0x40
 801423a:	2200      	movs	r2, #0
 801423c:	2180      	movs	r1, #128	; 0x80
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f004 fd8d 	bl	8018d5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2201      	movs	r2, #1
 8014248:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2240      	movs	r2, #64	; 0x40
 801424e:	621a      	str	r2, [r3, #32]

  return ret;
 8014250:	7bfb      	ldrb	r3, [r7, #15]
}
 8014252:	4618      	mov	r0, r3
 8014254:	3710      	adds	r7, #16
 8014256:	46bd      	mov	sp, r7
 8014258:	bd80      	pop	{r7, pc}

0801425a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801425a:	b480      	push	{r7}
 801425c:	b083      	sub	sp, #12
 801425e:	af00      	add	r7, sp, #0
 8014260:	6078      	str	r0, [r7, #4]
 8014262:	460b      	mov	r3, r1
 8014264:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	78fa      	ldrb	r2, [r7, #3]
 801426a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801426c:	2300      	movs	r3, #0
}
 801426e:	4618      	mov	r0, r3
 8014270:	370c      	adds	r7, #12
 8014272:	46bd      	mov	sp, r7
 8014274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014278:	4770      	bx	lr

0801427a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801427a:	b480      	push	{r7}
 801427c:	b083      	sub	sp, #12
 801427e:	af00      	add	r7, sp, #0
 8014280:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014288:	b2da      	uxtb	r2, r3
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2204      	movs	r2, #4
 8014294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014298:	2300      	movs	r3, #0
}
 801429a:	4618      	mov	r0, r3
 801429c:	370c      	adds	r7, #12
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr

080142a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80142a6:	b480      	push	{r7}
 80142a8:	b083      	sub	sp, #12
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	2b04      	cmp	r3, #4
 80142b8:	d106      	bne.n	80142c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80142c0:	b2da      	uxtb	r2, r3
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80142c8:	2300      	movs	r3, #0
}
 80142ca:	4618      	mov	r0, r3
 80142cc:	370c      	adds	r7, #12
 80142ce:	46bd      	mov	sp, r7
 80142d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d4:	4770      	bx	lr

080142d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80142d6:	b580      	push	{r7, lr}
 80142d8:	b082      	sub	sp, #8
 80142da:	af00      	add	r7, sp, #0
 80142dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b03      	cmp	r3, #3
 80142e8:	d110      	bne.n	801430c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d00b      	beq.n	801430c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142fa:	69db      	ldr	r3, [r3, #28]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d005      	beq.n	801430c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014306:	69db      	ldr	r3, [r3, #28]
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801430c:	2300      	movs	r3, #0
}
 801430e:	4618      	mov	r0, r3
 8014310:	3708      	adds	r7, #8
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}

08014316 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014316:	b580      	push	{r7, lr}
 8014318:	b082      	sub	sp, #8
 801431a:	af00      	add	r7, sp, #0
 801431c:	6078      	str	r0, [r7, #4]
 801431e:	460b      	mov	r3, r1
 8014320:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	32ae      	adds	r2, #174	; 0xae
 801432c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d101      	bne.n	8014338 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014334:	2303      	movs	r3, #3
 8014336:	e01c      	b.n	8014372 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801433e:	b2db      	uxtb	r3, r3
 8014340:	2b03      	cmp	r3, #3
 8014342:	d115      	bne.n	8014370 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	32ae      	adds	r2, #174	; 0xae
 801434e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014352:	6a1b      	ldr	r3, [r3, #32]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d00b      	beq.n	8014370 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	32ae      	adds	r2, #174	; 0xae
 8014362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014366:	6a1b      	ldr	r3, [r3, #32]
 8014368:	78fa      	ldrb	r2, [r7, #3]
 801436a:	4611      	mov	r1, r2
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014370:	2300      	movs	r3, #0
}
 8014372:	4618      	mov	r0, r3
 8014374:	3708      	adds	r7, #8
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}

0801437a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801437a:	b580      	push	{r7, lr}
 801437c:	b082      	sub	sp, #8
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
 8014382:	460b      	mov	r3, r1
 8014384:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	32ae      	adds	r2, #174	; 0xae
 8014390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d101      	bne.n	801439c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014398:	2303      	movs	r3, #3
 801439a:	e01c      	b.n	80143d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	2b03      	cmp	r3, #3
 80143a6:	d115      	bne.n	80143d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	32ae      	adds	r2, #174	; 0xae
 80143b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d00b      	beq.n	80143d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	32ae      	adds	r2, #174	; 0xae
 80143c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143cc:	78fa      	ldrb	r2, [r7, #3]
 80143ce:	4611      	mov	r1, r2
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80143d4:	2300      	movs	r3, #0
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3708      	adds	r7, #8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}

080143de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80143de:	b480      	push	{r7}
 80143e0:	b083      	sub	sp, #12
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80143e6:	2300      	movs	r3, #0
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	370c      	adds	r7, #12
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr

080143f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80143fc:	2300      	movs	r3, #0
 80143fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2201      	movs	r2, #1
 8014404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801440e:	2b00      	cmp	r3, #0
 8014410:	d00e      	beq.n	8014430 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014418:	685b      	ldr	r3, [r3, #4]
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	6852      	ldr	r2, [r2, #4]
 801441e:	b2d2      	uxtb	r2, r2
 8014420:	4611      	mov	r1, r2
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	4798      	blx	r3
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	d001      	beq.n	8014430 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801442c:	2303      	movs	r3, #3
 801442e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014430:	7bfb      	ldrb	r3, [r7, #15]
}
 8014432:	4618      	mov	r0, r3
 8014434:	3710      	adds	r7, #16
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}

0801443a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801443a:	b480      	push	{r7}
 801443c:	b083      	sub	sp, #12
 801443e:	af00      	add	r7, sp, #0
 8014440:	6078      	str	r0, [r7, #4]
 8014442:	460b      	mov	r3, r1
 8014444:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014446:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014448:	4618      	mov	r0, r3
 801444a:	370c      	adds	r7, #12
 801444c:	46bd      	mov	sp, r7
 801444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014452:	4770      	bx	lr

08014454 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	460b      	mov	r3, r1
 801445e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014460:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014462:	4618      	mov	r0, r3
 8014464:	370c      	adds	r7, #12
 8014466:	46bd      	mov	sp, r7
 8014468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446c:	4770      	bx	lr

0801446e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801446e:	b580      	push	{r7, lr}
 8014470:	b086      	sub	sp, #24
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
 8014476:	460b      	mov	r3, r1
 8014478:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014482:	2300      	movs	r3, #0
 8014484:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	885b      	ldrh	r3, [r3, #2]
 801448a:	b29a      	uxth	r2, r3
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	b29b      	uxth	r3, r3
 8014492:	429a      	cmp	r2, r3
 8014494:	d920      	bls.n	80144d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	b29b      	uxth	r3, r3
 801449c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801449e:	e013      	b.n	80144c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80144a0:	f107 030a 	add.w	r3, r7, #10
 80144a4:	4619      	mov	r1, r3
 80144a6:	6978      	ldr	r0, [r7, #20]
 80144a8:	f000 f81b 	bl	80144e2 <USBD_GetNextDesc>
 80144ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80144ae:	697b      	ldr	r3, [r7, #20]
 80144b0:	785b      	ldrb	r3, [r3, #1]
 80144b2:	2b05      	cmp	r3, #5
 80144b4:	d108      	bne.n	80144c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	789b      	ldrb	r3, [r3, #2]
 80144be:	78fa      	ldrb	r2, [r7, #3]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	d008      	beq.n	80144d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80144c4:	2300      	movs	r3, #0
 80144c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	885b      	ldrh	r3, [r3, #2]
 80144cc:	b29a      	uxth	r2, r3
 80144ce:	897b      	ldrh	r3, [r7, #10]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d8e5      	bhi.n	80144a0 <USBD_GetEpDesc+0x32>
 80144d4:	e000      	b.n	80144d8 <USBD_GetEpDesc+0x6a>
          break;
 80144d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80144d8:	693b      	ldr	r3, [r7, #16]
}
 80144da:	4618      	mov	r0, r3
 80144dc:	3718      	adds	r7, #24
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}

080144e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80144e2:	b480      	push	{r7}
 80144e4:	b085      	sub	sp, #20
 80144e6:	af00      	add	r7, sp, #0
 80144e8:	6078      	str	r0, [r7, #4]
 80144ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	881a      	ldrh	r2, [r3, #0]
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	4413      	add	r3, r2
 80144fc:	b29a      	uxth	r2, r3
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	461a      	mov	r2, r3
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	4413      	add	r3, r2
 801450c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801450e:	68fb      	ldr	r3, [r7, #12]
}
 8014510:	4618      	mov	r0, r3
 8014512:	3714      	adds	r7, #20
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801451c:	b480      	push	{r7}
 801451e:	b087      	sub	sp, #28
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014528:	697b      	ldr	r3, [r7, #20]
 801452a:	781b      	ldrb	r3, [r3, #0]
 801452c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	3301      	adds	r3, #1
 8014532:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014534:	697b      	ldr	r3, [r7, #20]
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801453a:	8a3b      	ldrh	r3, [r7, #16]
 801453c:	021b      	lsls	r3, r3, #8
 801453e:	b21a      	sxth	r2, r3
 8014540:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014544:	4313      	orrs	r3, r2
 8014546:	b21b      	sxth	r3, r3
 8014548:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801454a:	89fb      	ldrh	r3, [r7, #14]
}
 801454c:	4618      	mov	r0, r3
 801454e:	371c      	adds	r7, #28
 8014550:	46bd      	mov	sp, r7
 8014552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014556:	4770      	bx	lr

08014558 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014562:	2300      	movs	r3, #0
 8014564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801456e:	2b40      	cmp	r3, #64	; 0x40
 8014570:	d005      	beq.n	801457e <USBD_StdDevReq+0x26>
 8014572:	2b40      	cmp	r3, #64	; 0x40
 8014574:	d857      	bhi.n	8014626 <USBD_StdDevReq+0xce>
 8014576:	2b00      	cmp	r3, #0
 8014578:	d00f      	beq.n	801459a <USBD_StdDevReq+0x42>
 801457a:	2b20      	cmp	r3, #32
 801457c:	d153      	bne.n	8014626 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	32ae      	adds	r2, #174	; 0xae
 8014588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801458c:	689b      	ldr	r3, [r3, #8]
 801458e:	6839      	ldr	r1, [r7, #0]
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	4798      	blx	r3
 8014594:	4603      	mov	r3, r0
 8014596:	73fb      	strb	r3, [r7, #15]
      break;
 8014598:	e04a      	b.n	8014630 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	785b      	ldrb	r3, [r3, #1]
 801459e:	2b09      	cmp	r3, #9
 80145a0:	d83b      	bhi.n	801461a <USBD_StdDevReq+0xc2>
 80145a2:	a201      	add	r2, pc, #4	; (adr r2, 80145a8 <USBD_StdDevReq+0x50>)
 80145a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145a8:	080145fd 	.word	0x080145fd
 80145ac:	08014611 	.word	0x08014611
 80145b0:	0801461b 	.word	0x0801461b
 80145b4:	08014607 	.word	0x08014607
 80145b8:	0801461b 	.word	0x0801461b
 80145bc:	080145db 	.word	0x080145db
 80145c0:	080145d1 	.word	0x080145d1
 80145c4:	0801461b 	.word	0x0801461b
 80145c8:	080145f3 	.word	0x080145f3
 80145cc:	080145e5 	.word	0x080145e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80145d0:	6839      	ldr	r1, [r7, #0]
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f000 fa3c 	bl	8014a50 <USBD_GetDescriptor>
          break;
 80145d8:	e024      	b.n	8014624 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80145da:	6839      	ldr	r1, [r7, #0]
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f000 fba1 	bl	8014d24 <USBD_SetAddress>
          break;
 80145e2:	e01f      	b.n	8014624 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80145e4:	6839      	ldr	r1, [r7, #0]
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f000 fbe0 	bl	8014dac <USBD_SetConfig>
 80145ec:	4603      	mov	r3, r0
 80145ee:	73fb      	strb	r3, [r7, #15]
          break;
 80145f0:	e018      	b.n	8014624 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80145f2:	6839      	ldr	r1, [r7, #0]
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f000 fc83 	bl	8014f00 <USBD_GetConfig>
          break;
 80145fa:	e013      	b.n	8014624 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80145fc:	6839      	ldr	r1, [r7, #0]
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f000 fcb4 	bl	8014f6c <USBD_GetStatus>
          break;
 8014604:	e00e      	b.n	8014624 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014606:	6839      	ldr	r1, [r7, #0]
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f000 fce3 	bl	8014fd4 <USBD_SetFeature>
          break;
 801460e:	e009      	b.n	8014624 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014610:	6839      	ldr	r1, [r7, #0]
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f000 fd07 	bl	8015026 <USBD_ClrFeature>
          break;
 8014618:	e004      	b.n	8014624 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801461a:	6839      	ldr	r1, [r7, #0]
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f000 fd5e 	bl	80150de <USBD_CtlError>
          break;
 8014622:	bf00      	nop
      }
      break;
 8014624:	e004      	b.n	8014630 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014626:	6839      	ldr	r1, [r7, #0]
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f000 fd58 	bl	80150de <USBD_CtlError>
      break;
 801462e:	bf00      	nop
  }

  return ret;
 8014630:	7bfb      	ldrb	r3, [r7, #15]
}
 8014632:	4618      	mov	r0, r3
 8014634:	3710      	adds	r7, #16
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop

0801463c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b084      	sub	sp, #16
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014646:	2300      	movs	r3, #0
 8014648:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014652:	2b40      	cmp	r3, #64	; 0x40
 8014654:	d005      	beq.n	8014662 <USBD_StdItfReq+0x26>
 8014656:	2b40      	cmp	r3, #64	; 0x40
 8014658:	d852      	bhi.n	8014700 <USBD_StdItfReq+0xc4>
 801465a:	2b00      	cmp	r3, #0
 801465c:	d001      	beq.n	8014662 <USBD_StdItfReq+0x26>
 801465e:	2b20      	cmp	r3, #32
 8014660:	d14e      	bne.n	8014700 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014668:	b2db      	uxtb	r3, r3
 801466a:	3b01      	subs	r3, #1
 801466c:	2b02      	cmp	r3, #2
 801466e:	d840      	bhi.n	80146f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	889b      	ldrh	r3, [r3, #4]
 8014674:	b2db      	uxtb	r3, r3
 8014676:	2b01      	cmp	r3, #1
 8014678:	d836      	bhi.n	80146e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	889b      	ldrh	r3, [r3, #4]
 801467e:	b2db      	uxtb	r3, r3
 8014680:	4619      	mov	r1, r3
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f7ff fed9 	bl	801443a <USBD_CoreFindIF>
 8014688:	4603      	mov	r3, r0
 801468a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801468c:	7bbb      	ldrb	r3, [r7, #14]
 801468e:	2bff      	cmp	r3, #255	; 0xff
 8014690:	d01d      	beq.n	80146ce <USBD_StdItfReq+0x92>
 8014692:	7bbb      	ldrb	r3, [r7, #14]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d11a      	bne.n	80146ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014698:	7bba      	ldrb	r2, [r7, #14]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	32ae      	adds	r2, #174	; 0xae
 801469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146a2:	689b      	ldr	r3, [r3, #8]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d00f      	beq.n	80146c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80146a8:	7bba      	ldrb	r2, [r7, #14]
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80146b0:	7bba      	ldrb	r2, [r7, #14]
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	32ae      	adds	r2, #174	; 0xae
 80146b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146ba:	689b      	ldr	r3, [r3, #8]
 80146bc:	6839      	ldr	r1, [r7, #0]
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	4798      	blx	r3
 80146c2:	4603      	mov	r3, r0
 80146c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80146c6:	e004      	b.n	80146d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80146c8:	2303      	movs	r3, #3
 80146ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80146cc:	e001      	b.n	80146d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80146ce:	2303      	movs	r3, #3
 80146d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	88db      	ldrh	r3, [r3, #6]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d110      	bne.n	80146fc <USBD_StdItfReq+0xc0>
 80146da:	7bfb      	ldrb	r3, [r7, #15]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d10d      	bne.n	80146fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f000 fdc7 	bl	8015274 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80146e6:	e009      	b.n	80146fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80146e8:	6839      	ldr	r1, [r7, #0]
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f000 fcf7 	bl	80150de <USBD_CtlError>
          break;
 80146f0:	e004      	b.n	80146fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80146f2:	6839      	ldr	r1, [r7, #0]
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f000 fcf2 	bl	80150de <USBD_CtlError>
          break;
 80146fa:	e000      	b.n	80146fe <USBD_StdItfReq+0xc2>
          break;
 80146fc:	bf00      	nop
      }
      break;
 80146fe:	e004      	b.n	801470a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014700:	6839      	ldr	r1, [r7, #0]
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f000 fceb 	bl	80150de <USBD_CtlError>
      break;
 8014708:	bf00      	nop
  }

  return ret;
 801470a:	7bfb      	ldrb	r3, [r7, #15]
}
 801470c:	4618      	mov	r0, r3
 801470e:	3710      	adds	r7, #16
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}

08014714 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b084      	sub	sp, #16
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801471e:	2300      	movs	r3, #0
 8014720:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	889b      	ldrh	r3, [r3, #4]
 8014726:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014730:	2b40      	cmp	r3, #64	; 0x40
 8014732:	d007      	beq.n	8014744 <USBD_StdEPReq+0x30>
 8014734:	2b40      	cmp	r3, #64	; 0x40
 8014736:	f200 817f 	bhi.w	8014a38 <USBD_StdEPReq+0x324>
 801473a:	2b00      	cmp	r3, #0
 801473c:	d02a      	beq.n	8014794 <USBD_StdEPReq+0x80>
 801473e:	2b20      	cmp	r3, #32
 8014740:	f040 817a 	bne.w	8014a38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014744:	7bbb      	ldrb	r3, [r7, #14]
 8014746:	4619      	mov	r1, r3
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f7ff fe83 	bl	8014454 <USBD_CoreFindEP>
 801474e:	4603      	mov	r3, r0
 8014750:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014752:	7b7b      	ldrb	r3, [r7, #13]
 8014754:	2bff      	cmp	r3, #255	; 0xff
 8014756:	f000 8174 	beq.w	8014a42 <USBD_StdEPReq+0x32e>
 801475a:	7b7b      	ldrb	r3, [r7, #13]
 801475c:	2b00      	cmp	r3, #0
 801475e:	f040 8170 	bne.w	8014a42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014762:	7b7a      	ldrb	r2, [r7, #13]
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801476a:	7b7a      	ldrb	r2, [r7, #13]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	32ae      	adds	r2, #174	; 0xae
 8014770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014774:	689b      	ldr	r3, [r3, #8]
 8014776:	2b00      	cmp	r3, #0
 8014778:	f000 8163 	beq.w	8014a42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801477c:	7b7a      	ldrb	r2, [r7, #13]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	32ae      	adds	r2, #174	; 0xae
 8014782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014786:	689b      	ldr	r3, [r3, #8]
 8014788:	6839      	ldr	r1, [r7, #0]
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	4798      	blx	r3
 801478e:	4603      	mov	r3, r0
 8014790:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014792:	e156      	b.n	8014a42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	785b      	ldrb	r3, [r3, #1]
 8014798:	2b03      	cmp	r3, #3
 801479a:	d008      	beq.n	80147ae <USBD_StdEPReq+0x9a>
 801479c:	2b03      	cmp	r3, #3
 801479e:	f300 8145 	bgt.w	8014a2c <USBD_StdEPReq+0x318>
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	f000 809b 	beq.w	80148de <USBD_StdEPReq+0x1ca>
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d03c      	beq.n	8014826 <USBD_StdEPReq+0x112>
 80147ac:	e13e      	b.n	8014a2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147b4:	b2db      	uxtb	r3, r3
 80147b6:	2b02      	cmp	r3, #2
 80147b8:	d002      	beq.n	80147c0 <USBD_StdEPReq+0xac>
 80147ba:	2b03      	cmp	r3, #3
 80147bc:	d016      	beq.n	80147ec <USBD_StdEPReq+0xd8>
 80147be:	e02c      	b.n	801481a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147c0:	7bbb      	ldrb	r3, [r7, #14]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d00d      	beq.n	80147e2 <USBD_StdEPReq+0xce>
 80147c6:	7bbb      	ldrb	r3, [r7, #14]
 80147c8:	2b80      	cmp	r3, #128	; 0x80
 80147ca:	d00a      	beq.n	80147e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80147cc:	7bbb      	ldrb	r3, [r7, #14]
 80147ce:	4619      	mov	r1, r3
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f004 fb09 	bl	8018de8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80147d6:	2180      	movs	r1, #128	; 0x80
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f004 fb05 	bl	8018de8 <USBD_LL_StallEP>
 80147de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80147e0:	e020      	b.n	8014824 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80147e2:	6839      	ldr	r1, [r7, #0]
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f000 fc7a 	bl	80150de <USBD_CtlError>
              break;
 80147ea:	e01b      	b.n	8014824 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	885b      	ldrh	r3, [r3, #2]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d10e      	bne.n	8014812 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80147f4:	7bbb      	ldrb	r3, [r7, #14]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d00b      	beq.n	8014812 <USBD_StdEPReq+0xfe>
 80147fa:	7bbb      	ldrb	r3, [r7, #14]
 80147fc:	2b80      	cmp	r3, #128	; 0x80
 80147fe:	d008      	beq.n	8014812 <USBD_StdEPReq+0xfe>
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	88db      	ldrh	r3, [r3, #6]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d104      	bne.n	8014812 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014808:	7bbb      	ldrb	r3, [r7, #14]
 801480a:	4619      	mov	r1, r3
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f004 faeb 	bl	8018de8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f000 fd2e 	bl	8015274 <USBD_CtlSendStatus>

              break;
 8014818:	e004      	b.n	8014824 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801481a:	6839      	ldr	r1, [r7, #0]
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	f000 fc5e 	bl	80150de <USBD_CtlError>
              break;
 8014822:	bf00      	nop
          }
          break;
 8014824:	e107      	b.n	8014a36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801482c:	b2db      	uxtb	r3, r3
 801482e:	2b02      	cmp	r3, #2
 8014830:	d002      	beq.n	8014838 <USBD_StdEPReq+0x124>
 8014832:	2b03      	cmp	r3, #3
 8014834:	d016      	beq.n	8014864 <USBD_StdEPReq+0x150>
 8014836:	e04b      	b.n	80148d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014838:	7bbb      	ldrb	r3, [r7, #14]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d00d      	beq.n	801485a <USBD_StdEPReq+0x146>
 801483e:	7bbb      	ldrb	r3, [r7, #14]
 8014840:	2b80      	cmp	r3, #128	; 0x80
 8014842:	d00a      	beq.n	801485a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014844:	7bbb      	ldrb	r3, [r7, #14]
 8014846:	4619      	mov	r1, r3
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f004 facd 	bl	8018de8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801484e:	2180      	movs	r1, #128	; 0x80
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f004 fac9 	bl	8018de8 <USBD_LL_StallEP>
 8014856:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014858:	e040      	b.n	80148dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801485a:	6839      	ldr	r1, [r7, #0]
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f000 fc3e 	bl	80150de <USBD_CtlError>
              break;
 8014862:	e03b      	b.n	80148dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	885b      	ldrh	r3, [r3, #2]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d136      	bne.n	80148da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801486c:	7bbb      	ldrb	r3, [r7, #14]
 801486e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014872:	2b00      	cmp	r3, #0
 8014874:	d004      	beq.n	8014880 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014876:	7bbb      	ldrb	r3, [r7, #14]
 8014878:	4619      	mov	r1, r3
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f004 fad3 	bl	8018e26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 fcf7 	bl	8015274 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014886:	7bbb      	ldrb	r3, [r7, #14]
 8014888:	4619      	mov	r1, r3
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f7ff fde2 	bl	8014454 <USBD_CoreFindEP>
 8014890:	4603      	mov	r3, r0
 8014892:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014894:	7b7b      	ldrb	r3, [r7, #13]
 8014896:	2bff      	cmp	r3, #255	; 0xff
 8014898:	d01f      	beq.n	80148da <USBD_StdEPReq+0x1c6>
 801489a:	7b7b      	ldrb	r3, [r7, #13]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d11c      	bne.n	80148da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80148a0:	7b7a      	ldrb	r2, [r7, #13]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80148a8:	7b7a      	ldrb	r2, [r7, #13]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	32ae      	adds	r2, #174	; 0xae
 80148ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b2:	689b      	ldr	r3, [r3, #8]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d010      	beq.n	80148da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80148b8:	7b7a      	ldrb	r2, [r7, #13]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	32ae      	adds	r2, #174	; 0xae
 80148be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148c2:	689b      	ldr	r3, [r3, #8]
 80148c4:	6839      	ldr	r1, [r7, #0]
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	4798      	blx	r3
 80148ca:	4603      	mov	r3, r0
 80148cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80148ce:	e004      	b.n	80148da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80148d0:	6839      	ldr	r1, [r7, #0]
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f000 fc03 	bl	80150de <USBD_CtlError>
              break;
 80148d8:	e000      	b.n	80148dc <USBD_StdEPReq+0x1c8>
              break;
 80148da:	bf00      	nop
          }
          break;
 80148dc:	e0ab      	b.n	8014a36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148e4:	b2db      	uxtb	r3, r3
 80148e6:	2b02      	cmp	r3, #2
 80148e8:	d002      	beq.n	80148f0 <USBD_StdEPReq+0x1dc>
 80148ea:	2b03      	cmp	r3, #3
 80148ec:	d032      	beq.n	8014954 <USBD_StdEPReq+0x240>
 80148ee:	e097      	b.n	8014a20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80148f0:	7bbb      	ldrb	r3, [r7, #14]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d007      	beq.n	8014906 <USBD_StdEPReq+0x1f2>
 80148f6:	7bbb      	ldrb	r3, [r7, #14]
 80148f8:	2b80      	cmp	r3, #128	; 0x80
 80148fa:	d004      	beq.n	8014906 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80148fc:	6839      	ldr	r1, [r7, #0]
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f000 fbed 	bl	80150de <USBD_CtlError>
                break;
 8014904:	e091      	b.n	8014a2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801490a:	2b00      	cmp	r3, #0
 801490c:	da0b      	bge.n	8014926 <USBD_StdEPReq+0x212>
 801490e:	7bbb      	ldrb	r3, [r7, #14]
 8014910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014914:	4613      	mov	r3, r2
 8014916:	009b      	lsls	r3, r3, #2
 8014918:	4413      	add	r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	3310      	adds	r3, #16
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	4413      	add	r3, r2
 8014922:	3304      	adds	r3, #4
 8014924:	e00b      	b.n	801493e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014926:	7bbb      	ldrb	r3, [r7, #14]
 8014928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801492c:	4613      	mov	r3, r2
 801492e:	009b      	lsls	r3, r3, #2
 8014930:	4413      	add	r3, r2
 8014932:	009b      	lsls	r3, r3, #2
 8014934:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014938:	687a      	ldr	r2, [r7, #4]
 801493a:	4413      	add	r3, r2
 801493c:	3304      	adds	r3, #4
 801493e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	2200      	movs	r2, #0
 8014944:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	2202      	movs	r2, #2
 801494a:	4619      	mov	r1, r3
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f000 fc37 	bl	80151c0 <USBD_CtlSendData>
              break;
 8014952:	e06a      	b.n	8014a2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014958:	2b00      	cmp	r3, #0
 801495a:	da11      	bge.n	8014980 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801495c:	7bbb      	ldrb	r3, [r7, #14]
 801495e:	f003 020f 	and.w	r2, r3, #15
 8014962:	6879      	ldr	r1, [r7, #4]
 8014964:	4613      	mov	r3, r2
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4413      	add	r3, r2
 801496a:	009b      	lsls	r3, r3, #2
 801496c:	440b      	add	r3, r1
 801496e:	3324      	adds	r3, #36	; 0x24
 8014970:	881b      	ldrh	r3, [r3, #0]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d117      	bne.n	80149a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014976:	6839      	ldr	r1, [r7, #0]
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f000 fbb0 	bl	80150de <USBD_CtlError>
                  break;
 801497e:	e054      	b.n	8014a2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014980:	7bbb      	ldrb	r3, [r7, #14]
 8014982:	f003 020f 	and.w	r2, r3, #15
 8014986:	6879      	ldr	r1, [r7, #4]
 8014988:	4613      	mov	r3, r2
 801498a:	009b      	lsls	r3, r3, #2
 801498c:	4413      	add	r3, r2
 801498e:	009b      	lsls	r3, r3, #2
 8014990:	440b      	add	r3, r1
 8014992:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014996:	881b      	ldrh	r3, [r3, #0]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d104      	bne.n	80149a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801499c:	6839      	ldr	r1, [r7, #0]
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f000 fb9d 	bl	80150de <USBD_CtlError>
                  break;
 80149a4:	e041      	b.n	8014a2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	da0b      	bge.n	80149c6 <USBD_StdEPReq+0x2b2>
 80149ae:	7bbb      	ldrb	r3, [r7, #14]
 80149b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80149b4:	4613      	mov	r3, r2
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	4413      	add	r3, r2
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	3310      	adds	r3, #16
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	4413      	add	r3, r2
 80149c2:	3304      	adds	r3, #4
 80149c4:	e00b      	b.n	80149de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80149c6:	7bbb      	ldrb	r3, [r7, #14]
 80149c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149cc:	4613      	mov	r3, r2
 80149ce:	009b      	lsls	r3, r3, #2
 80149d0:	4413      	add	r3, r2
 80149d2:	009b      	lsls	r3, r3, #2
 80149d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	4413      	add	r3, r2
 80149dc:	3304      	adds	r3, #4
 80149de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80149e0:	7bbb      	ldrb	r3, [r7, #14]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d002      	beq.n	80149ec <USBD_StdEPReq+0x2d8>
 80149e6:	7bbb      	ldrb	r3, [r7, #14]
 80149e8:	2b80      	cmp	r3, #128	; 0x80
 80149ea:	d103      	bne.n	80149f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	2200      	movs	r2, #0
 80149f0:	601a      	str	r2, [r3, #0]
 80149f2:	e00e      	b.n	8014a12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80149f4:	7bbb      	ldrb	r3, [r7, #14]
 80149f6:	4619      	mov	r1, r3
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f004 fa33 	bl	8018e64 <USBD_LL_IsStallEP>
 80149fe:	4603      	mov	r3, r0
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d003      	beq.n	8014a0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	2201      	movs	r2, #1
 8014a08:	601a      	str	r2, [r3, #0]
 8014a0a:	e002      	b.n	8014a12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	2202      	movs	r2, #2
 8014a16:	4619      	mov	r1, r3
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f000 fbd1 	bl	80151c0 <USBD_CtlSendData>
              break;
 8014a1e:	e004      	b.n	8014a2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014a20:	6839      	ldr	r1, [r7, #0]
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f000 fb5b 	bl	80150de <USBD_CtlError>
              break;
 8014a28:	bf00      	nop
          }
          break;
 8014a2a:	e004      	b.n	8014a36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014a2c:	6839      	ldr	r1, [r7, #0]
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f000 fb55 	bl	80150de <USBD_CtlError>
          break;
 8014a34:	bf00      	nop
      }
      break;
 8014a36:	e005      	b.n	8014a44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014a38:	6839      	ldr	r1, [r7, #0]
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f000 fb4f 	bl	80150de <USBD_CtlError>
      break;
 8014a40:	e000      	b.n	8014a44 <USBD_StdEPReq+0x330>
      break;
 8014a42:	bf00      	nop
  }

  return ret;
 8014a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3710      	adds	r7, #16
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
	...

08014a50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b084      	sub	sp, #16
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014a62:	2300      	movs	r3, #0
 8014a64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	885b      	ldrh	r3, [r3, #2]
 8014a6a:	0a1b      	lsrs	r3, r3, #8
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	3b01      	subs	r3, #1
 8014a70:	2b06      	cmp	r3, #6
 8014a72:	f200 8128 	bhi.w	8014cc6 <USBD_GetDescriptor+0x276>
 8014a76:	a201      	add	r2, pc, #4	; (adr r2, 8014a7c <USBD_GetDescriptor+0x2c>)
 8014a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a7c:	08014a99 	.word	0x08014a99
 8014a80:	08014ab1 	.word	0x08014ab1
 8014a84:	08014af1 	.word	0x08014af1
 8014a88:	08014cc7 	.word	0x08014cc7
 8014a8c:	08014cc7 	.word	0x08014cc7
 8014a90:	08014c67 	.word	0x08014c67
 8014a94:	08014c93 	.word	0x08014c93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	7c12      	ldrb	r2, [r2, #16]
 8014aa4:	f107 0108 	add.w	r1, r7, #8
 8014aa8:	4610      	mov	r0, r2
 8014aaa:	4798      	blx	r3
 8014aac:	60f8      	str	r0, [r7, #12]
      break;
 8014aae:	e112      	b.n	8014cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	7c1b      	ldrb	r3, [r3, #16]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d10d      	bne.n	8014ad4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ac0:	f107 0208 	add.w	r2, r7, #8
 8014ac4:	4610      	mov	r0, r2
 8014ac6:	4798      	blx	r3
 8014ac8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	3301      	adds	r3, #1
 8014ace:	2202      	movs	r2, #2
 8014ad0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014ad2:	e100      	b.n	8014cd6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014adc:	f107 0208 	add.w	r2, r7, #8
 8014ae0:	4610      	mov	r0, r2
 8014ae2:	4798      	blx	r3
 8014ae4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	2202      	movs	r2, #2
 8014aec:	701a      	strb	r2, [r3, #0]
      break;
 8014aee:	e0f2      	b.n	8014cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	885b      	ldrh	r3, [r3, #2]
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	2b05      	cmp	r3, #5
 8014af8:	f200 80ac 	bhi.w	8014c54 <USBD_GetDescriptor+0x204>
 8014afc:	a201      	add	r2, pc, #4	; (adr r2, 8014b04 <USBD_GetDescriptor+0xb4>)
 8014afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b02:	bf00      	nop
 8014b04:	08014b1d 	.word	0x08014b1d
 8014b08:	08014b51 	.word	0x08014b51
 8014b0c:	08014b85 	.word	0x08014b85
 8014b10:	08014bb9 	.word	0x08014bb9
 8014b14:	08014bed 	.word	0x08014bed
 8014b18:	08014c21 	.word	0x08014c21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d00b      	beq.n	8014b40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b2e:	685b      	ldr	r3, [r3, #4]
 8014b30:	687a      	ldr	r2, [r7, #4]
 8014b32:	7c12      	ldrb	r2, [r2, #16]
 8014b34:	f107 0108 	add.w	r1, r7, #8
 8014b38:	4610      	mov	r0, r2
 8014b3a:	4798      	blx	r3
 8014b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b3e:	e091      	b.n	8014c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014b40:	6839      	ldr	r1, [r7, #0]
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 facb 	bl	80150de <USBD_CtlError>
            err++;
 8014b48:	7afb      	ldrb	r3, [r7, #11]
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8014b4e:	e089      	b.n	8014c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b56:	689b      	ldr	r3, [r3, #8]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d00b      	beq.n	8014b74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b62:	689b      	ldr	r3, [r3, #8]
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	7c12      	ldrb	r2, [r2, #16]
 8014b68:	f107 0108 	add.w	r1, r7, #8
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	4798      	blx	r3
 8014b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b72:	e077      	b.n	8014c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014b74:	6839      	ldr	r1, [r7, #0]
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f000 fab1 	bl	80150de <USBD_CtlError>
            err++;
 8014b7c:	7afb      	ldrb	r3, [r7, #11]
 8014b7e:	3301      	adds	r3, #1
 8014b80:	72fb      	strb	r3, [r7, #11]
          break;
 8014b82:	e06f      	b.n	8014c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b8a:	68db      	ldr	r3, [r3, #12]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d00b      	beq.n	8014ba8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b96:	68db      	ldr	r3, [r3, #12]
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	7c12      	ldrb	r2, [r2, #16]
 8014b9c:	f107 0108 	add.w	r1, r7, #8
 8014ba0:	4610      	mov	r0, r2
 8014ba2:	4798      	blx	r3
 8014ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ba6:	e05d      	b.n	8014c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014ba8:	6839      	ldr	r1, [r7, #0]
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f000 fa97 	bl	80150de <USBD_CtlError>
            err++;
 8014bb0:	7afb      	ldrb	r3, [r7, #11]
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8014bb6:	e055      	b.n	8014c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014bbe:	691b      	ldr	r3, [r3, #16]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d00b      	beq.n	8014bdc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014bca:	691b      	ldr	r3, [r3, #16]
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	7c12      	ldrb	r2, [r2, #16]
 8014bd0:	f107 0108 	add.w	r1, r7, #8
 8014bd4:	4610      	mov	r0, r2
 8014bd6:	4798      	blx	r3
 8014bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bda:	e043      	b.n	8014c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014bdc:	6839      	ldr	r1, [r7, #0]
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f000 fa7d 	bl	80150de <USBD_CtlError>
            err++;
 8014be4:	7afb      	ldrb	r3, [r7, #11]
 8014be6:	3301      	adds	r3, #1
 8014be8:	72fb      	strb	r3, [r7, #11]
          break;
 8014bea:	e03b      	b.n	8014c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014bf2:	695b      	ldr	r3, [r3, #20]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d00b      	beq.n	8014c10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014bfe:	695b      	ldr	r3, [r3, #20]
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	7c12      	ldrb	r2, [r2, #16]
 8014c04:	f107 0108 	add.w	r1, r7, #8
 8014c08:	4610      	mov	r0, r2
 8014c0a:	4798      	blx	r3
 8014c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c0e:	e029      	b.n	8014c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014c10:	6839      	ldr	r1, [r7, #0]
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f000 fa63 	bl	80150de <USBD_CtlError>
            err++;
 8014c18:	7afb      	ldrb	r3, [r7, #11]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8014c1e:	e021      	b.n	8014c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c26:	699b      	ldr	r3, [r3, #24]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d00b      	beq.n	8014c44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c32:	699b      	ldr	r3, [r3, #24]
 8014c34:	687a      	ldr	r2, [r7, #4]
 8014c36:	7c12      	ldrb	r2, [r2, #16]
 8014c38:	f107 0108 	add.w	r1, r7, #8
 8014c3c:	4610      	mov	r0, r2
 8014c3e:	4798      	blx	r3
 8014c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c42:	e00f      	b.n	8014c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014c44:	6839      	ldr	r1, [r7, #0]
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f000 fa49 	bl	80150de <USBD_CtlError>
            err++;
 8014c4c:	7afb      	ldrb	r3, [r7, #11]
 8014c4e:	3301      	adds	r3, #1
 8014c50:	72fb      	strb	r3, [r7, #11]
          break;
 8014c52:	e007      	b.n	8014c64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014c54:	6839      	ldr	r1, [r7, #0]
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f000 fa41 	bl	80150de <USBD_CtlError>
          err++;
 8014c5c:	7afb      	ldrb	r3, [r7, #11]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014c62:	bf00      	nop
      }
      break;
 8014c64:	e037      	b.n	8014cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	7c1b      	ldrb	r3, [r3, #16]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d109      	bne.n	8014c82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c76:	f107 0208 	add.w	r2, r7, #8
 8014c7a:	4610      	mov	r0, r2
 8014c7c:	4798      	blx	r3
 8014c7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014c80:	e029      	b.n	8014cd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014c82:	6839      	ldr	r1, [r7, #0]
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f000 fa2a 	bl	80150de <USBD_CtlError>
        err++;
 8014c8a:	7afb      	ldrb	r3, [r7, #11]
 8014c8c:	3301      	adds	r3, #1
 8014c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8014c90:	e021      	b.n	8014cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	7c1b      	ldrb	r3, [r3, #16]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d10d      	bne.n	8014cb6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ca2:	f107 0208 	add.w	r2, r7, #8
 8014ca6:	4610      	mov	r0, r2
 8014ca8:	4798      	blx	r3
 8014caa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	3301      	adds	r3, #1
 8014cb0:	2207      	movs	r2, #7
 8014cb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014cb4:	e00f      	b.n	8014cd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014cb6:	6839      	ldr	r1, [r7, #0]
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f000 fa10 	bl	80150de <USBD_CtlError>
        err++;
 8014cbe:	7afb      	ldrb	r3, [r7, #11]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	72fb      	strb	r3, [r7, #11]
      break;
 8014cc4:	e007      	b.n	8014cd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014cc6:	6839      	ldr	r1, [r7, #0]
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	f000 fa08 	bl	80150de <USBD_CtlError>
      err++;
 8014cce:	7afb      	ldrb	r3, [r7, #11]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	72fb      	strb	r3, [r7, #11]
      break;
 8014cd4:	bf00      	nop
  }

  if (err != 0U)
 8014cd6:	7afb      	ldrb	r3, [r7, #11]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d11e      	bne.n	8014d1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	88db      	ldrh	r3, [r3, #6]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d016      	beq.n	8014d12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014ce4:	893b      	ldrh	r3, [r7, #8]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d00e      	beq.n	8014d08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	88da      	ldrh	r2, [r3, #6]
 8014cee:	893b      	ldrh	r3, [r7, #8]
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	bf28      	it	cs
 8014cf4:	4613      	movcs	r3, r2
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014cfa:	893b      	ldrh	r3, [r7, #8]
 8014cfc:	461a      	mov	r2, r3
 8014cfe:	68f9      	ldr	r1, [r7, #12]
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f000 fa5d 	bl	80151c0 <USBD_CtlSendData>
 8014d06:	e009      	b.n	8014d1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014d08:	6839      	ldr	r1, [r7, #0]
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f000 f9e7 	bl	80150de <USBD_CtlError>
 8014d10:	e004      	b.n	8014d1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	f000 faae 	bl	8015274 <USBD_CtlSendStatus>
 8014d18:	e000      	b.n	8014d1c <USBD_GetDescriptor+0x2cc>
    return;
 8014d1a:	bf00      	nop
  }
}
 8014d1c:	3710      	adds	r7, #16
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}
 8014d22:	bf00      	nop

08014d24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	889b      	ldrh	r3, [r3, #4]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d131      	bne.n	8014d9a <USBD_SetAddress+0x76>
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	88db      	ldrh	r3, [r3, #6]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d12d      	bne.n	8014d9a <USBD_SetAddress+0x76>
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	885b      	ldrh	r3, [r3, #2]
 8014d42:	2b7f      	cmp	r3, #127	; 0x7f
 8014d44:	d829      	bhi.n	8014d9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	885b      	ldrh	r3, [r3, #2]
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d58:	b2db      	uxtb	r3, r3
 8014d5a:	2b03      	cmp	r3, #3
 8014d5c:	d104      	bne.n	8014d68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014d5e:	6839      	ldr	r1, [r7, #0]
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f000 f9bc 	bl	80150de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d66:	e01d      	b.n	8014da4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	7bfa      	ldrb	r2, [r7, #15]
 8014d6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014d70:	7bfb      	ldrb	r3, [r7, #15]
 8014d72:	4619      	mov	r1, r3
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f004 f8a1 	bl	8018ebc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014d7a:	6878      	ldr	r0, [r7, #4]
 8014d7c:	f000 fa7a 	bl	8015274 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014d80:	7bfb      	ldrb	r3, [r7, #15]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d004      	beq.n	8014d90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2202      	movs	r2, #2
 8014d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d8e:	e009      	b.n	8014da4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	2201      	movs	r2, #1
 8014d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d98:	e004      	b.n	8014da4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014d9a:	6839      	ldr	r1, [r7, #0]
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f000 f99e 	bl	80150de <USBD_CtlError>
  }
}
 8014da2:	bf00      	nop
 8014da4:	bf00      	nop
 8014da6:	3710      	adds	r7, #16
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}

08014dac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b084      	sub	sp, #16
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014db6:	2300      	movs	r3, #0
 8014db8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	885b      	ldrh	r3, [r3, #2]
 8014dbe:	b2da      	uxtb	r2, r3
 8014dc0:	4b4e      	ldr	r3, [pc, #312]	; (8014efc <USBD_SetConfig+0x150>)
 8014dc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014dc4:	4b4d      	ldr	r3, [pc, #308]	; (8014efc <USBD_SetConfig+0x150>)
 8014dc6:	781b      	ldrb	r3, [r3, #0]
 8014dc8:	2b01      	cmp	r3, #1
 8014dca:	d905      	bls.n	8014dd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014dcc:	6839      	ldr	r1, [r7, #0]
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f000 f985 	bl	80150de <USBD_CtlError>
    return USBD_FAIL;
 8014dd4:	2303      	movs	r3, #3
 8014dd6:	e08c      	b.n	8014ef2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014dde:	b2db      	uxtb	r3, r3
 8014de0:	2b02      	cmp	r3, #2
 8014de2:	d002      	beq.n	8014dea <USBD_SetConfig+0x3e>
 8014de4:	2b03      	cmp	r3, #3
 8014de6:	d029      	beq.n	8014e3c <USBD_SetConfig+0x90>
 8014de8:	e075      	b.n	8014ed6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014dea:	4b44      	ldr	r3, [pc, #272]	; (8014efc <USBD_SetConfig+0x150>)
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d020      	beq.n	8014e34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014df2:	4b42      	ldr	r3, [pc, #264]	; (8014efc <USBD_SetConfig+0x150>)
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	461a      	mov	r2, r3
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014dfc:	4b3f      	ldr	r3, [pc, #252]	; (8014efc <USBD_SetConfig+0x150>)
 8014dfe:	781b      	ldrb	r3, [r3, #0]
 8014e00:	4619      	mov	r1, r3
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f7fe ffe7 	bl	8013dd6 <USBD_SetClassConfig>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014e0c:	7bfb      	ldrb	r3, [r7, #15]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d008      	beq.n	8014e24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014e12:	6839      	ldr	r1, [r7, #0]
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f000 f962 	bl	80150de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2202      	movs	r2, #2
 8014e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014e22:	e065      	b.n	8014ef0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014e24:	6878      	ldr	r0, [r7, #4]
 8014e26:	f000 fa25 	bl	8015274 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2203      	movs	r2, #3
 8014e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014e32:	e05d      	b.n	8014ef0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f000 fa1d 	bl	8015274 <USBD_CtlSendStatus>
      break;
 8014e3a:	e059      	b.n	8014ef0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014e3c:	4b2f      	ldr	r3, [pc, #188]	; (8014efc <USBD_SetConfig+0x150>)
 8014e3e:	781b      	ldrb	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d112      	bne.n	8014e6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2202      	movs	r2, #2
 8014e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014e4c:	4b2b      	ldr	r3, [pc, #172]	; (8014efc <USBD_SetConfig+0x150>)
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	461a      	mov	r2, r3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014e56:	4b29      	ldr	r3, [pc, #164]	; (8014efc <USBD_SetConfig+0x150>)
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f7fe ffd6 	bl	8013e0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f000 fa06 	bl	8015274 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014e68:	e042      	b.n	8014ef0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014e6a:	4b24      	ldr	r3, [pc, #144]	; (8014efc <USBD_SetConfig+0x150>)
 8014e6c:	781b      	ldrb	r3, [r3, #0]
 8014e6e:	461a      	mov	r2, r3
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	429a      	cmp	r2, r3
 8014e76:	d02a      	beq.n	8014ece <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	4619      	mov	r1, r3
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f7fe ffc4 	bl	8013e0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014e86:	4b1d      	ldr	r3, [pc, #116]	; (8014efc <USBD_SetConfig+0x150>)
 8014e88:	781b      	ldrb	r3, [r3, #0]
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014e90:	4b1a      	ldr	r3, [pc, #104]	; (8014efc <USBD_SetConfig+0x150>)
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	4619      	mov	r1, r3
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f7fe ff9d 	bl	8013dd6 <USBD_SetClassConfig>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014ea0:	7bfb      	ldrb	r3, [r7, #15]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d00f      	beq.n	8014ec6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014ea6:	6839      	ldr	r1, [r7, #0]
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f000 f918 	bl	80150de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	b2db      	uxtb	r3, r3
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f7fe ffa9 	bl	8013e0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2202      	movs	r2, #2
 8014ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014ec4:	e014      	b.n	8014ef0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f000 f9d4 	bl	8015274 <USBD_CtlSendStatus>
      break;
 8014ecc:	e010      	b.n	8014ef0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f000 f9d0 	bl	8015274 <USBD_CtlSendStatus>
      break;
 8014ed4:	e00c      	b.n	8014ef0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014ed6:	6839      	ldr	r1, [r7, #0]
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f000 f900 	bl	80150de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014ede:	4b07      	ldr	r3, [pc, #28]	; (8014efc <USBD_SetConfig+0x150>)
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	6878      	ldr	r0, [r7, #4]
 8014ee6:	f7fe ff92 	bl	8013e0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014eea:	2303      	movs	r3, #3
 8014eec:	73fb      	strb	r3, [r7, #15]
      break;
 8014eee:	bf00      	nop
  }

  return ret;
 8014ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3710      	adds	r7, #16
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}
 8014efa:	bf00      	nop
 8014efc:	20002970 	.word	0x20002970

08014f00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b082      	sub	sp, #8
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	88db      	ldrh	r3, [r3, #6]
 8014f0e:	2b01      	cmp	r3, #1
 8014f10:	d004      	beq.n	8014f1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014f12:	6839      	ldr	r1, [r7, #0]
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f000 f8e2 	bl	80150de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014f1a:	e023      	b.n	8014f64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	2b02      	cmp	r3, #2
 8014f26:	dc02      	bgt.n	8014f2e <USBD_GetConfig+0x2e>
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	dc03      	bgt.n	8014f34 <USBD_GetConfig+0x34>
 8014f2c:	e015      	b.n	8014f5a <USBD_GetConfig+0x5a>
 8014f2e:	2b03      	cmp	r3, #3
 8014f30:	d00b      	beq.n	8014f4a <USBD_GetConfig+0x4a>
 8014f32:	e012      	b.n	8014f5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2200      	movs	r2, #0
 8014f38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	3308      	adds	r3, #8
 8014f3e:	2201      	movs	r2, #1
 8014f40:	4619      	mov	r1, r3
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f000 f93c 	bl	80151c0 <USBD_CtlSendData>
        break;
 8014f48:	e00c      	b.n	8014f64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	3304      	adds	r3, #4
 8014f4e:	2201      	movs	r2, #1
 8014f50:	4619      	mov	r1, r3
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f000 f934 	bl	80151c0 <USBD_CtlSendData>
        break;
 8014f58:	e004      	b.n	8014f64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014f5a:	6839      	ldr	r1, [r7, #0]
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f000 f8be 	bl	80150de <USBD_CtlError>
        break;
 8014f62:	bf00      	nop
}
 8014f64:	bf00      	nop
 8014f66:	3708      	adds	r7, #8
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b082      	sub	sp, #8
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
 8014f74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f7c:	b2db      	uxtb	r3, r3
 8014f7e:	3b01      	subs	r3, #1
 8014f80:	2b02      	cmp	r3, #2
 8014f82:	d81e      	bhi.n	8014fc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	88db      	ldrh	r3, [r3, #6]
 8014f88:	2b02      	cmp	r3, #2
 8014f8a:	d004      	beq.n	8014f96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014f8c:	6839      	ldr	r1, [r7, #0]
 8014f8e:	6878      	ldr	r0, [r7, #4]
 8014f90:	f000 f8a5 	bl	80150de <USBD_CtlError>
        break;
 8014f94:	e01a      	b.n	8014fcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2201      	movs	r2, #1
 8014f9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d005      	beq.n	8014fb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	68db      	ldr	r3, [r3, #12]
 8014faa:	f043 0202 	orr.w	r2, r3, #2
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	330c      	adds	r3, #12
 8014fb6:	2202      	movs	r2, #2
 8014fb8:	4619      	mov	r1, r3
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 f900 	bl	80151c0 <USBD_CtlSendData>
      break;
 8014fc0:	e004      	b.n	8014fcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014fc2:	6839      	ldr	r1, [r7, #0]
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f000 f88a 	bl	80150de <USBD_CtlError>
      break;
 8014fca:	bf00      	nop
  }
}
 8014fcc:	bf00      	nop
 8014fce:	3708      	adds	r7, #8
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	885b      	ldrh	r3, [r3, #2]
 8014fe2:	2b01      	cmp	r3, #1
 8014fe4:	d107      	bne.n	8014ff6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2201      	movs	r2, #1
 8014fea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f000 f940 	bl	8015274 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014ff4:	e013      	b.n	801501e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	885b      	ldrh	r3, [r3, #2]
 8014ffa:	2b02      	cmp	r3, #2
 8014ffc:	d10b      	bne.n	8015016 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	889b      	ldrh	r3, [r3, #4]
 8015002:	0a1b      	lsrs	r3, r3, #8
 8015004:	b29b      	uxth	r3, r3
 8015006:	b2da      	uxtb	r2, r3
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f000 f930 	bl	8015274 <USBD_CtlSendStatus>
}
 8015014:	e003      	b.n	801501e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015016:	6839      	ldr	r1, [r7, #0]
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f000 f860 	bl	80150de <USBD_CtlError>
}
 801501e:	bf00      	nop
 8015020:	3708      	adds	r7, #8
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}

08015026 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015026:	b580      	push	{r7, lr}
 8015028:	b082      	sub	sp, #8
 801502a:	af00      	add	r7, sp, #0
 801502c:	6078      	str	r0, [r7, #4]
 801502e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015036:	b2db      	uxtb	r3, r3
 8015038:	3b01      	subs	r3, #1
 801503a:	2b02      	cmp	r3, #2
 801503c:	d80b      	bhi.n	8015056 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	885b      	ldrh	r3, [r3, #2]
 8015042:	2b01      	cmp	r3, #1
 8015044:	d10c      	bne.n	8015060 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2200      	movs	r2, #0
 801504a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f000 f910 	bl	8015274 <USBD_CtlSendStatus>
      }
      break;
 8015054:	e004      	b.n	8015060 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015056:	6839      	ldr	r1, [r7, #0]
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f000 f840 	bl	80150de <USBD_CtlError>
      break;
 801505e:	e000      	b.n	8015062 <USBD_ClrFeature+0x3c>
      break;
 8015060:	bf00      	nop
  }
}
 8015062:	bf00      	nop
 8015064:	3708      	adds	r7, #8
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}

0801506a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801506a:	b580      	push	{r7, lr}
 801506c:	b084      	sub	sp, #16
 801506e:	af00      	add	r7, sp, #0
 8015070:	6078      	str	r0, [r7, #4]
 8015072:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	781a      	ldrb	r2, [r3, #0]
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	3301      	adds	r3, #1
 8015084:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	781a      	ldrb	r2, [r3, #0]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	3301      	adds	r3, #1
 8015092:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015094:	68f8      	ldr	r0, [r7, #12]
 8015096:	f7ff fa41 	bl	801451c <SWAPBYTE>
 801509a:	4603      	mov	r3, r0
 801509c:	461a      	mov	r2, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	3301      	adds	r3, #1
 80150a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	3301      	adds	r3, #1
 80150ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80150ae:	68f8      	ldr	r0, [r7, #12]
 80150b0:	f7ff fa34 	bl	801451c <SWAPBYTE>
 80150b4:	4603      	mov	r3, r0
 80150b6:	461a      	mov	r2, r3
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	3301      	adds	r3, #1
 80150c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	3301      	adds	r3, #1
 80150c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80150c8:	68f8      	ldr	r0, [r7, #12]
 80150ca:	f7ff fa27 	bl	801451c <SWAPBYTE>
 80150ce:	4603      	mov	r3, r0
 80150d0:	461a      	mov	r2, r3
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	80da      	strh	r2, [r3, #6]
}
 80150d6:	bf00      	nop
 80150d8:	3710      	adds	r7, #16
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}

080150de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	b082      	sub	sp, #8
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
 80150e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80150e8:	2180      	movs	r1, #128	; 0x80
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f003 fe7c 	bl	8018de8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80150f0:	2100      	movs	r1, #0
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	f003 fe78 	bl	8018de8 <USBD_LL_StallEP>
}
 80150f8:	bf00      	nop
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b086      	sub	sp, #24
 8015104:	af00      	add	r7, sp, #0
 8015106:	60f8      	str	r0, [r7, #12]
 8015108:	60b9      	str	r1, [r7, #8]
 801510a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801510c:	2300      	movs	r3, #0
 801510e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d036      	beq.n	8015184 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801511a:	6938      	ldr	r0, [r7, #16]
 801511c:	f000 f836 	bl	801518c <USBD_GetLen>
 8015120:	4603      	mov	r3, r0
 8015122:	3301      	adds	r3, #1
 8015124:	b29b      	uxth	r3, r3
 8015126:	005b      	lsls	r3, r3, #1
 8015128:	b29a      	uxth	r2, r3
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801512e:	7dfb      	ldrb	r3, [r7, #23]
 8015130:	68ba      	ldr	r2, [r7, #8]
 8015132:	4413      	add	r3, r2
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	7812      	ldrb	r2, [r2, #0]
 8015138:	701a      	strb	r2, [r3, #0]
  idx++;
 801513a:	7dfb      	ldrb	r3, [r7, #23]
 801513c:	3301      	adds	r3, #1
 801513e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015140:	7dfb      	ldrb	r3, [r7, #23]
 8015142:	68ba      	ldr	r2, [r7, #8]
 8015144:	4413      	add	r3, r2
 8015146:	2203      	movs	r2, #3
 8015148:	701a      	strb	r2, [r3, #0]
  idx++;
 801514a:	7dfb      	ldrb	r3, [r7, #23]
 801514c:	3301      	adds	r3, #1
 801514e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015150:	e013      	b.n	801517a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015152:	7dfb      	ldrb	r3, [r7, #23]
 8015154:	68ba      	ldr	r2, [r7, #8]
 8015156:	4413      	add	r3, r2
 8015158:	693a      	ldr	r2, [r7, #16]
 801515a:	7812      	ldrb	r2, [r2, #0]
 801515c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	3301      	adds	r3, #1
 8015162:	613b      	str	r3, [r7, #16]
    idx++;
 8015164:	7dfb      	ldrb	r3, [r7, #23]
 8015166:	3301      	adds	r3, #1
 8015168:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801516a:	7dfb      	ldrb	r3, [r7, #23]
 801516c:	68ba      	ldr	r2, [r7, #8]
 801516e:	4413      	add	r3, r2
 8015170:	2200      	movs	r2, #0
 8015172:	701a      	strb	r2, [r3, #0]
    idx++;
 8015174:	7dfb      	ldrb	r3, [r7, #23]
 8015176:	3301      	adds	r3, #1
 8015178:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d1e7      	bne.n	8015152 <USBD_GetString+0x52>
 8015182:	e000      	b.n	8015186 <USBD_GetString+0x86>
    return;
 8015184:	bf00      	nop
  }
}
 8015186:	3718      	adds	r7, #24
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}

0801518c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801518c:	b480      	push	{r7}
 801518e:	b085      	sub	sp, #20
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015194:	2300      	movs	r3, #0
 8015196:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801519c:	e005      	b.n	80151aa <USBD_GetLen+0x1e>
  {
    len++;
 801519e:	7bfb      	ldrb	r3, [r7, #15]
 80151a0:	3301      	adds	r3, #1
 80151a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	3301      	adds	r3, #1
 80151a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	781b      	ldrb	r3, [r3, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d1f5      	bne.n	801519e <USBD_GetLen+0x12>
  }

  return len;
 80151b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3714      	adds	r7, #20
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr

080151c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	60f8      	str	r0, [r7, #12]
 80151c8:	60b9      	str	r1, [r7, #8]
 80151ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2202      	movs	r2, #2
 80151d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	687a      	ldr	r2, [r7, #4]
 80151d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	687a      	ldr	r2, [r7, #4]
 80151de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	68ba      	ldr	r2, [r7, #8]
 80151e4:	2100      	movs	r1, #0
 80151e6:	68f8      	ldr	r0, [r7, #12]
 80151e8:	f003 fe87 	bl	8018efa <USBD_LL_Transmit>

  return USBD_OK;
 80151ec:	2300      	movs	r3, #0
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3710      	adds	r7, #16
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80151f6:	b580      	push	{r7, lr}
 80151f8:	b084      	sub	sp, #16
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	60f8      	str	r0, [r7, #12]
 80151fe:	60b9      	str	r1, [r7, #8]
 8015200:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	68ba      	ldr	r2, [r7, #8]
 8015206:	2100      	movs	r1, #0
 8015208:	68f8      	ldr	r0, [r7, #12]
 801520a:	f003 fe76 	bl	8018efa <USBD_LL_Transmit>

  return USBD_OK;
 801520e:	2300      	movs	r3, #0
}
 8015210:	4618      	mov	r0, r3
 8015212:	3710      	adds	r7, #16
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}

08015218 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b084      	sub	sp, #16
 801521c:	af00      	add	r7, sp, #0
 801521e:	60f8      	str	r0, [r7, #12]
 8015220:	60b9      	str	r1, [r7, #8]
 8015222:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	2203      	movs	r2, #3
 8015228:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	687a      	ldr	r2, [r7, #4]
 8015230:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	687a      	ldr	r2, [r7, #4]
 8015238:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	68ba      	ldr	r2, [r7, #8]
 8015240:	2100      	movs	r1, #0
 8015242:	68f8      	ldr	r0, [r7, #12]
 8015244:	f003 fe7a 	bl	8018f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015248:	2300      	movs	r3, #0
}
 801524a:	4618      	mov	r0, r3
 801524c:	3710      	adds	r7, #16
 801524e:	46bd      	mov	sp, r7
 8015250:	bd80      	pop	{r7, pc}

08015252 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015252:	b580      	push	{r7, lr}
 8015254:	b084      	sub	sp, #16
 8015256:	af00      	add	r7, sp, #0
 8015258:	60f8      	str	r0, [r7, #12]
 801525a:	60b9      	str	r1, [r7, #8]
 801525c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	68ba      	ldr	r2, [r7, #8]
 8015262:	2100      	movs	r1, #0
 8015264:	68f8      	ldr	r0, [r7, #12]
 8015266:	f003 fe69 	bl	8018f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801526a:	2300      	movs	r3, #0
}
 801526c:	4618      	mov	r0, r3
 801526e:	3710      	adds	r7, #16
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2204      	movs	r2, #4
 8015280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015284:	2300      	movs	r3, #0
 8015286:	2200      	movs	r2, #0
 8015288:	2100      	movs	r1, #0
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f003 fe35 	bl	8018efa <USBD_LL_Transmit>

  return USBD_OK;
 8015290:	2300      	movs	r3, #0
}
 8015292:	4618      	mov	r0, r3
 8015294:	3708      	adds	r7, #8
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}

0801529a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801529a:	b580      	push	{r7, lr}
 801529c:	b082      	sub	sp, #8
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2205      	movs	r2, #5
 80152a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80152aa:	2300      	movs	r3, #0
 80152ac:	2200      	movs	r2, #0
 80152ae:	2100      	movs	r1, #0
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f003 fe43 	bl	8018f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80152b6:	2300      	movs	r3, #0
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3708      	adds	r7, #8
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}

080152c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80152c0:	b480      	push	{r7}
 80152c2:	b085      	sub	sp, #20
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	4603      	mov	r3, r0
 80152c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80152ca:	2300      	movs	r3, #0
 80152cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80152ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80152d2:	2b84      	cmp	r3, #132	; 0x84
 80152d4:	d005      	beq.n	80152e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80152d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	4413      	add	r3, r2
 80152de:	3303      	adds	r3, #3
 80152e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80152e2:	68fb      	ldr	r3, [r7, #12]
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3714      	adds	r7, #20
 80152e8:	46bd      	mov	sp, r7
 80152ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ee:	4770      	bx	lr

080152f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80152f4:	f001 fa98 	bl	8016828 <vTaskStartScheduler>
  
  return osOK;
 80152f8:	2300      	movs	r3, #0
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	bd80      	pop	{r7, pc}

080152fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80152fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015300:	b089      	sub	sp, #36	; 0x24
 8015302:	af04      	add	r7, sp, #16
 8015304:	6078      	str	r0, [r7, #4]
 8015306:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	695b      	ldr	r3, [r3, #20]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d020      	beq.n	8015352 <osThreadCreate+0x54>
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	699b      	ldr	r3, [r3, #24]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d01c      	beq.n	8015352 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	685c      	ldr	r4, [r3, #4]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	691e      	ldr	r6, [r3, #16]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801532a:	4618      	mov	r0, r3
 801532c:	f7ff ffc8 	bl	80152c0 <makeFreeRtosPriority>
 8015330:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	695b      	ldr	r3, [r3, #20]
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801533a:	9202      	str	r2, [sp, #8]
 801533c:	9301      	str	r3, [sp, #4]
 801533e:	9100      	str	r1, [sp, #0]
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	4632      	mov	r2, r6
 8015344:	4629      	mov	r1, r5
 8015346:	4620      	mov	r0, r4
 8015348:	f001 f802 	bl	8016350 <xTaskCreateStatic>
 801534c:	4603      	mov	r3, r0
 801534e:	60fb      	str	r3, [r7, #12]
 8015350:	e01c      	b.n	801538c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	685c      	ldr	r4, [r3, #4]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801535e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015366:	4618      	mov	r0, r3
 8015368:	f7ff ffaa 	bl	80152c0 <makeFreeRtosPriority>
 801536c:	4602      	mov	r2, r0
 801536e:	f107 030c 	add.w	r3, r7, #12
 8015372:	9301      	str	r3, [sp, #4]
 8015374:	9200      	str	r2, [sp, #0]
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	4632      	mov	r2, r6
 801537a:	4629      	mov	r1, r5
 801537c:	4620      	mov	r0, r4
 801537e:	f001 f844 	bl	801640a <xTaskCreate>
 8015382:	4603      	mov	r3, r0
 8015384:	2b01      	cmp	r3, #1
 8015386:	d001      	beq.n	801538c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015388:	2300      	movs	r3, #0
 801538a:	e000      	b.n	801538e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801538c:	68fb      	ldr	r3, [r7, #12]
}
 801538e:	4618      	mov	r0, r3
 8015390:	3714      	adds	r7, #20
 8015392:	46bd      	mov	sp, r7
 8015394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015396 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015396:	b580      	push	{r7, lr}
 8015398:	b084      	sub	sp, #16
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d001      	beq.n	80153ac <osDelay+0x16>
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	e000      	b.n	80153ae <osDelay+0x18>
 80153ac:	2301      	movs	r3, #1
 80153ae:	4618      	mov	r0, r3
 80153b0:	f001 fa06 	bl	80167c0 <vTaskDelay>
  
  return osOK;
 80153b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}

080153be <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b082      	sub	sp, #8
 80153c2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80153c4:	2020      	movs	r0, #32
 80153c6:	f002 ff0f 	bl	80181e8 <pvPortMalloc>
 80153ca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d00a      	beq.n	80153e8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2200      	movs	r2, #0
 80153d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	3304      	adds	r3, #4
 80153dc:	4618      	mov	r0, r3
 80153de:	f000 f9dd 	bl	801579c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2200      	movs	r2, #0
 80153e6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80153e8:	687b      	ldr	r3, [r7, #4]
	}
 80153ea:	4618      	mov	r0, r3
 80153ec:	3708      	adds	r7, #8
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}
	...

080153f4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b090      	sub	sp, #64	; 0x40
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	607a      	str	r2, [r7, #4]
 8015400:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8015406:	2300      	movs	r3, #0
 8015408:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801540a:	2300      	movs	r3, #0
 801540c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d10a      	bne.n	801542a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015418:	f383 8811 	msr	BASEPRI, r3
 801541c:	f3bf 8f6f 	isb	sy
 8015420:	f3bf 8f4f 	dsb	sy
 8015424:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015426:	bf00      	nop
 8015428:	e7fe      	b.n	8015428 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015430:	2b00      	cmp	r3, #0
 8015432:	d00a      	beq.n	801544a <xEventGroupWaitBits+0x56>
	__asm volatile
 8015434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015438:	f383 8811 	msr	BASEPRI, r3
 801543c:	f3bf 8f6f 	isb	sy
 8015440:	f3bf 8f4f 	dsb	sy
 8015444:	61fb      	str	r3, [r7, #28]
}
 8015446:	bf00      	nop
 8015448:	e7fe      	b.n	8015448 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d10a      	bne.n	8015466 <xEventGroupWaitBits+0x72>
	__asm volatile
 8015450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015454:	f383 8811 	msr	BASEPRI, r3
 8015458:	f3bf 8f6f 	isb	sy
 801545c:	f3bf 8f4f 	dsb	sy
 8015460:	61bb      	str	r3, [r7, #24]
}
 8015462:	bf00      	nop
 8015464:	e7fe      	b.n	8015464 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015466:	f001 feff 	bl	8017268 <xTaskGetSchedulerState>
 801546a:	4603      	mov	r3, r0
 801546c:	2b00      	cmp	r3, #0
 801546e:	d102      	bne.n	8015476 <xEventGroupWaitBits+0x82>
 8015470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015472:	2b00      	cmp	r3, #0
 8015474:	d101      	bne.n	801547a <xEventGroupWaitBits+0x86>
 8015476:	2301      	movs	r3, #1
 8015478:	e000      	b.n	801547c <xEventGroupWaitBits+0x88>
 801547a:	2300      	movs	r3, #0
 801547c:	2b00      	cmp	r3, #0
 801547e:	d10a      	bne.n	8015496 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8015480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015484:	f383 8811 	msr	BASEPRI, r3
 8015488:	f3bf 8f6f 	isb	sy
 801548c:	f3bf 8f4f 	dsb	sy
 8015490:	617b      	str	r3, [r7, #20]
}
 8015492:	bf00      	nop
 8015494:	e7fe      	b.n	8015494 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8015496:	f001 fa39 	bl	801690c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80154a0:	683a      	ldr	r2, [r7, #0]
 80154a2:	68b9      	ldr	r1, [r7, #8]
 80154a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80154a6:	f000 f943 	bl	8015730 <prvTestWaitCondition>
 80154aa:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80154ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d00e      	beq.n	80154d0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80154b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154b4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80154b6:	2300      	movs	r3, #0
 80154b8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d028      	beq.n	8015512 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80154c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154c2:	681a      	ldr	r2, [r3, #0]
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	43db      	mvns	r3, r3
 80154c8:	401a      	ands	r2, r3
 80154ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154cc:	601a      	str	r2, [r3, #0]
 80154ce:	e020      	b.n	8015512 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80154d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d104      	bne.n	80154e0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80154d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154d8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80154da:	2301      	movs	r3, #1
 80154dc:	633b      	str	r3, [r7, #48]	; 0x30
 80154de:	e018      	b.n	8015512 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d003      	beq.n	80154ee <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80154e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80154ec:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d003      	beq.n	80154fc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80154f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80154fa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80154fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154fe:	1d18      	adds	r0, r3, #4
 8015500:	68ba      	ldr	r2, [r7, #8]
 8015502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015504:	4313      	orrs	r3, r2
 8015506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015508:	4619      	mov	r1, r3
 801550a:	f001 fc23 	bl	8016d54 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801550e:	2300      	movs	r3, #0
 8015510:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8015512:	f001 fa09 	bl	8016928 <xTaskResumeAll>
 8015516:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8015518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801551a:	2b00      	cmp	r3, #0
 801551c:	d031      	beq.n	8015582 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015520:	2b00      	cmp	r3, #0
 8015522:	d107      	bne.n	8015534 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8015524:	4b19      	ldr	r3, [pc, #100]	; (801558c <xEventGroupWaitBits+0x198>)
 8015526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801552a:	601a      	str	r2, [r3, #0]
 801552c:	f3bf 8f4f 	dsb	sy
 8015530:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8015534:	f001 ff3c 	bl	80173b0 <uxTaskResetEventItemValue>
 8015538:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801553c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015540:	2b00      	cmp	r3, #0
 8015542:	d11a      	bne.n	801557a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8015544:	f002 fd2e 	bl	8017fa4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8015548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801554e:	683a      	ldr	r2, [r7, #0]
 8015550:	68b9      	ldr	r1, [r7, #8]
 8015552:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015554:	f000 f8ec 	bl	8015730 <prvTestWaitCondition>
 8015558:	4603      	mov	r3, r0
 801555a:	2b00      	cmp	r3, #0
 801555c:	d009      	beq.n	8015572 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d006      	beq.n	8015572 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8015564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015566:	681a      	ldr	r2, [r3, #0]
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	43db      	mvns	r3, r3
 801556c:	401a      	ands	r2, r3
 801556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015570:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8015572:	2301      	movs	r3, #1
 8015574:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8015576:	f002 fd45 	bl	8018004 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801557c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015580:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8015582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015584:	4618      	mov	r0, r3
 8015586:	3740      	adds	r7, #64	; 0x40
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	e000ed04 	.word	0xe000ed04

08015590 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b086      	sub	sp, #24
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
 8015598:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d10a      	bne.n	80155ba <xEventGroupClearBits+0x2a>
	__asm volatile
 80155a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155a8:	f383 8811 	msr	BASEPRI, r3
 80155ac:	f3bf 8f6f 	isb	sy
 80155b0:	f3bf 8f4f 	dsb	sy
 80155b4:	60fb      	str	r3, [r7, #12]
}
 80155b6:	bf00      	nop
 80155b8:	e7fe      	b.n	80155b8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d00a      	beq.n	80155da <xEventGroupClearBits+0x4a>
	__asm volatile
 80155c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155c8:	f383 8811 	msr	BASEPRI, r3
 80155cc:	f3bf 8f6f 	isb	sy
 80155d0:	f3bf 8f4f 	dsb	sy
 80155d4:	60bb      	str	r3, [r7, #8]
}
 80155d6:	bf00      	nop
 80155d8:	e7fe      	b.n	80155d8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80155da:	f002 fce3 	bl	8017fa4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80155de:	697b      	ldr	r3, [r7, #20]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	681a      	ldr	r2, [r3, #0]
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	43db      	mvns	r3, r3
 80155ec:	401a      	ands	r2, r3
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80155f2:	f002 fd07 	bl	8018004 <vPortExitCritical>

	return uxReturn;
 80155f6:	693b      	ldr	r3, [r7, #16]
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3718      	adds	r7, #24
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}

08015600 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b08e      	sub	sp, #56	; 0x38
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
 8015608:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801560a:	2300      	movs	r3, #0
 801560c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8015612:	2300      	movs	r3, #0
 8015614:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d10a      	bne.n	8015632 <xEventGroupSetBits+0x32>
	__asm volatile
 801561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015620:	f383 8811 	msr	BASEPRI, r3
 8015624:	f3bf 8f6f 	isb	sy
 8015628:	f3bf 8f4f 	dsb	sy
 801562c:	613b      	str	r3, [r7, #16]
}
 801562e:	bf00      	nop
 8015630:	e7fe      	b.n	8015630 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015638:	2b00      	cmp	r3, #0
 801563a:	d00a      	beq.n	8015652 <xEventGroupSetBits+0x52>
	__asm volatile
 801563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015640:	f383 8811 	msr	BASEPRI, r3
 8015644:	f3bf 8f6f 	isb	sy
 8015648:	f3bf 8f4f 	dsb	sy
 801564c:	60fb      	str	r3, [r7, #12]
}
 801564e:	bf00      	nop
 8015650:	e7fe      	b.n	8015650 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8015652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015654:	3304      	adds	r3, #4
 8015656:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801565a:	3308      	adds	r3, #8
 801565c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801565e:	f001 f955 	bl	801690c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8015662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015664:	68db      	ldr	r3, [r3, #12]
 8015666:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8015668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801566a:	681a      	ldr	r2, [r3, #0]
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	431a      	orrs	r2, r3
 8015670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015672:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8015674:	e03c      	b.n	80156f0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8015676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8015682:	2300      	movs	r3, #0
 8015684:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8015686:	69bb      	ldr	r3, [r7, #24]
 8015688:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801568c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801568e:	69bb      	ldr	r3, [r7, #24]
 8015690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015694:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801569c:	2b00      	cmp	r3, #0
 801569e:	d108      	bne.n	80156b2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80156a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a2:	681a      	ldr	r2, [r3, #0]
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	4013      	ands	r3, r2
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d00b      	beq.n	80156c4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80156ac:	2301      	movs	r3, #1
 80156ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156b0:	e008      	b.n	80156c4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80156b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b4:	681a      	ldr	r2, [r3, #0]
 80156b6:	69bb      	ldr	r3, [r7, #24]
 80156b8:	4013      	ands	r3, r2
 80156ba:	69ba      	ldr	r2, [r7, #24]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d101      	bne.n	80156c4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80156c0:	2301      	movs	r3, #1
 80156c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80156c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d010      	beq.n	80156ec <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d003      	beq.n	80156dc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80156d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156d6:	69bb      	ldr	r3, [r7, #24]
 80156d8:	4313      	orrs	r3, r2
 80156da:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80156dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80156e4:	4619      	mov	r1, r3
 80156e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80156e8:	f001 fbfe 	bl	8016ee8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80156ec:	69fb      	ldr	r3, [r7, #28]
 80156ee:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80156f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156f2:	6a3b      	ldr	r3, [r7, #32]
 80156f4:	429a      	cmp	r2, r3
 80156f6:	d1be      	bne.n	8015676 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80156f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156fa:	681a      	ldr	r2, [r3, #0]
 80156fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156fe:	43db      	mvns	r3, r3
 8015700:	401a      	ands	r2, r3
 8015702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015704:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8015706:	f001 f90f 	bl	8016928 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801570c:	681b      	ldr	r3, [r3, #0]
}
 801570e:	4618      	mov	r0, r3
 8015710:	3738      	adds	r7, #56	; 0x38
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8015716:	b580      	push	{r7, lr}
 8015718:	b082      	sub	sp, #8
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
 801571e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8015720:	6839      	ldr	r1, [r7, #0]
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f7ff ff6c 	bl	8015600 <xEventGroupSetBits>
}
 8015728:	bf00      	nop
 801572a:	3708      	adds	r7, #8
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8015730:	b480      	push	{r7}
 8015732:	b087      	sub	sp, #28
 8015734:	af00      	add	r7, sp, #0
 8015736:	60f8      	str	r0, [r7, #12]
 8015738:	60b9      	str	r1, [r7, #8]
 801573a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801573c:	2300      	movs	r3, #0
 801573e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d107      	bne.n	8015756 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8015746:	68fa      	ldr	r2, [r7, #12]
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	4013      	ands	r3, r2
 801574c:	2b00      	cmp	r3, #0
 801574e:	d00a      	beq.n	8015766 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8015750:	2301      	movs	r3, #1
 8015752:	617b      	str	r3, [r7, #20]
 8015754:	e007      	b.n	8015766 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8015756:	68fa      	ldr	r2, [r7, #12]
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	4013      	ands	r3, r2
 801575c:	68ba      	ldr	r2, [r7, #8]
 801575e:	429a      	cmp	r2, r3
 8015760:	d101      	bne.n	8015766 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8015762:	2301      	movs	r3, #1
 8015764:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8015766:	697b      	ldr	r3, [r7, #20]
}
 8015768:	4618      	mov	r0, r3
 801576a:	371c      	adds	r7, #28
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr

08015774 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015774:	b580      	push	{r7, lr}
 8015776:	b086      	sub	sp, #24
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	68ba      	ldr	r2, [r7, #8]
 8015784:	68f9      	ldr	r1, [r7, #12]
 8015786:	4804      	ldr	r0, [pc, #16]	; (8015798 <xEventGroupSetBitsFromISR+0x24>)
 8015788:	f002 fabe 	bl	8017d08 <xTimerPendFunctionCallFromISR>
 801578c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801578e:	697b      	ldr	r3, [r7, #20]
	}
 8015790:	4618      	mov	r0, r3
 8015792:	3718      	adds	r7, #24
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}
 8015798:	08015717 	.word	0x08015717

0801579c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801579c:	b480      	push	{r7}
 801579e:	b083      	sub	sp, #12
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f103 0208 	add.w	r2, r3, #8
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f04f 32ff 	mov.w	r2, #4294967295
 80157b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	f103 0208 	add.w	r2, r3, #8
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f103 0208 	add.w	r2, r3, #8
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2200      	movs	r2, #0
 80157ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80157d0:	bf00      	nop
 80157d2:	370c      	adds	r7, #12
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr

080157dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80157dc:	b480      	push	{r7}
 80157de:	b083      	sub	sp, #12
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	2200      	movs	r2, #0
 80157e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80157ea:	bf00      	nop
 80157ec:	370c      	adds	r7, #12
 80157ee:	46bd      	mov	sp, r7
 80157f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f4:	4770      	bx	lr

080157f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80157f6:	b480      	push	{r7}
 80157f8:	b085      	sub	sp, #20
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
 80157fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	685b      	ldr	r3, [r3, #4]
 8015804:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	68fa      	ldr	r2, [r7, #12]
 801580a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	689a      	ldr	r2, [r3, #8]
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	689b      	ldr	r3, [r3, #8]
 8015818:	683a      	ldr	r2, [r7, #0]
 801581a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	683a      	ldr	r2, [r7, #0]
 8015820:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	687a      	ldr	r2, [r7, #4]
 8015826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	1c5a      	adds	r2, r3, #1
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	601a      	str	r2, [r3, #0]
}
 8015832:	bf00      	nop
 8015834:	3714      	adds	r7, #20
 8015836:	46bd      	mov	sp, r7
 8015838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583c:	4770      	bx	lr

0801583e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801583e:	b480      	push	{r7}
 8015840:	b085      	sub	sp, #20
 8015842:	af00      	add	r7, sp, #0
 8015844:	6078      	str	r0, [r7, #4]
 8015846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015854:	d103      	bne.n	801585e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	691b      	ldr	r3, [r3, #16]
 801585a:	60fb      	str	r3, [r7, #12]
 801585c:	e00c      	b.n	8015878 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	3308      	adds	r3, #8
 8015862:	60fb      	str	r3, [r7, #12]
 8015864:	e002      	b.n	801586c <vListInsert+0x2e>
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	685b      	ldr	r3, [r3, #4]
 801586a:	60fb      	str	r3, [r7, #12]
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	685b      	ldr	r3, [r3, #4]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	68ba      	ldr	r2, [r7, #8]
 8015874:	429a      	cmp	r2, r3
 8015876:	d2f6      	bcs.n	8015866 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	685a      	ldr	r2, [r3, #4]
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	683a      	ldr	r2, [r7, #0]
 8015886:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	68fa      	ldr	r2, [r7, #12]
 801588c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	683a      	ldr	r2, [r7, #0]
 8015892:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	687a      	ldr	r2, [r7, #4]
 8015898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	1c5a      	adds	r2, r3, #1
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	601a      	str	r2, [r3, #0]
}
 80158a4:	bf00      	nop
 80158a6:	3714      	adds	r7, #20
 80158a8:	46bd      	mov	sp, r7
 80158aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ae:	4770      	bx	lr

080158b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80158b0:	b480      	push	{r7}
 80158b2:	b085      	sub	sp, #20
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	691b      	ldr	r3, [r3, #16]
 80158bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	685b      	ldr	r3, [r3, #4]
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	6892      	ldr	r2, [r2, #8]
 80158c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	689b      	ldr	r3, [r3, #8]
 80158cc:	687a      	ldr	r2, [r7, #4]
 80158ce:	6852      	ldr	r2, [r2, #4]
 80158d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	687a      	ldr	r2, [r7, #4]
 80158d8:	429a      	cmp	r2, r3
 80158da:	d103      	bne.n	80158e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	689a      	ldr	r2, [r3, #8]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2200      	movs	r2, #0
 80158e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	1e5a      	subs	r2, r3, #1
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	681b      	ldr	r3, [r3, #0]
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3714      	adds	r7, #20
 80158fc:	46bd      	mov	sp, r7
 80158fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015902:	4770      	bx	lr

08015904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b084      	sub	sp, #16
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d10a      	bne.n	801592e <xQueueGenericReset+0x2a>
	__asm volatile
 8015918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801591c:	f383 8811 	msr	BASEPRI, r3
 8015920:	f3bf 8f6f 	isb	sy
 8015924:	f3bf 8f4f 	dsb	sy
 8015928:	60bb      	str	r3, [r7, #8]
}
 801592a:	bf00      	nop
 801592c:	e7fe      	b.n	801592c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801592e:	f002 fb39 	bl	8017fa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801593a:	68f9      	ldr	r1, [r7, #12]
 801593c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801593e:	fb01 f303 	mul.w	r3, r1, r3
 8015942:	441a      	add	r2, r3
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	2200      	movs	r2, #0
 801594c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801595e:	3b01      	subs	r3, #1
 8015960:	68f9      	ldr	r1, [r7, #12]
 8015962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015964:	fb01 f303 	mul.w	r3, r1, r3
 8015968:	441a      	add	r2, r3
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	22ff      	movs	r2, #255	; 0xff
 8015972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	22ff      	movs	r2, #255	; 0xff
 801597a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d114      	bne.n	80159ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	691b      	ldr	r3, [r3, #16]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d01a      	beq.n	80159c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	3310      	adds	r3, #16
 8015990:	4618      	mov	r0, r3
 8015992:	f001 fa47 	bl	8016e24 <xTaskRemoveFromEventList>
 8015996:	4603      	mov	r3, r0
 8015998:	2b00      	cmp	r3, #0
 801599a:	d012      	beq.n	80159c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801599c:	4b0c      	ldr	r3, [pc, #48]	; (80159d0 <xQueueGenericReset+0xcc>)
 801599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159a2:	601a      	str	r2, [r3, #0]
 80159a4:	f3bf 8f4f 	dsb	sy
 80159a8:	f3bf 8f6f 	isb	sy
 80159ac:	e009      	b.n	80159c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	3310      	adds	r3, #16
 80159b2:	4618      	mov	r0, r3
 80159b4:	f7ff fef2 	bl	801579c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	3324      	adds	r3, #36	; 0x24
 80159bc:	4618      	mov	r0, r3
 80159be:	f7ff feed 	bl	801579c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80159c2:	f002 fb1f 	bl	8018004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80159c6:	2301      	movs	r3, #1
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	3710      	adds	r7, #16
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	e000ed04 	.word	0xe000ed04

080159d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b08e      	sub	sp, #56	; 0x38
 80159d8:	af02      	add	r7, sp, #8
 80159da:	60f8      	str	r0, [r7, #12]
 80159dc:	60b9      	str	r1, [r7, #8]
 80159de:	607a      	str	r2, [r7, #4]
 80159e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10a      	bne.n	80159fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80159e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ec:	f383 8811 	msr	BASEPRI, r3
 80159f0:	f3bf 8f6f 	isb	sy
 80159f4:	f3bf 8f4f 	dsb	sy
 80159f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80159fa:	bf00      	nop
 80159fc:	e7fe      	b.n	80159fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d10a      	bne.n	8015a1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a08:	f383 8811 	msr	BASEPRI, r3
 8015a0c:	f3bf 8f6f 	isb	sy
 8015a10:	f3bf 8f4f 	dsb	sy
 8015a14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015a16:	bf00      	nop
 8015a18:	e7fe      	b.n	8015a18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d002      	beq.n	8015a26 <xQueueGenericCreateStatic+0x52>
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d001      	beq.n	8015a2a <xQueueGenericCreateStatic+0x56>
 8015a26:	2301      	movs	r3, #1
 8015a28:	e000      	b.n	8015a2c <xQueueGenericCreateStatic+0x58>
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d10a      	bne.n	8015a46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a34:	f383 8811 	msr	BASEPRI, r3
 8015a38:	f3bf 8f6f 	isb	sy
 8015a3c:	f3bf 8f4f 	dsb	sy
 8015a40:	623b      	str	r3, [r7, #32]
}
 8015a42:	bf00      	nop
 8015a44:	e7fe      	b.n	8015a44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d102      	bne.n	8015a52 <xQueueGenericCreateStatic+0x7e>
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d101      	bne.n	8015a56 <xQueueGenericCreateStatic+0x82>
 8015a52:	2301      	movs	r3, #1
 8015a54:	e000      	b.n	8015a58 <xQueueGenericCreateStatic+0x84>
 8015a56:	2300      	movs	r3, #0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d10a      	bne.n	8015a72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a60:	f383 8811 	msr	BASEPRI, r3
 8015a64:	f3bf 8f6f 	isb	sy
 8015a68:	f3bf 8f4f 	dsb	sy
 8015a6c:	61fb      	str	r3, [r7, #28]
}
 8015a6e:	bf00      	nop
 8015a70:	e7fe      	b.n	8015a70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015a72:	2350      	movs	r3, #80	; 0x50
 8015a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015a76:	697b      	ldr	r3, [r7, #20]
 8015a78:	2b50      	cmp	r3, #80	; 0x50
 8015a7a:	d00a      	beq.n	8015a92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a80:	f383 8811 	msr	BASEPRI, r3
 8015a84:	f3bf 8f6f 	isb	sy
 8015a88:	f3bf 8f4f 	dsb	sy
 8015a8c:	61bb      	str	r3, [r7, #24]
}
 8015a8e:	bf00      	nop
 8015a90:	e7fe      	b.n	8015a90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015a92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d00d      	beq.n	8015aba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa0:	2201      	movs	r2, #1
 8015aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015aa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aac:	9300      	str	r3, [sp, #0]
 8015aae:	4613      	mov	r3, r2
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	68b9      	ldr	r1, [r7, #8]
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	f000 f83f 	bl	8015b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3730      	adds	r7, #48	; 0x30
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}

08015ac4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b08a      	sub	sp, #40	; 0x28
 8015ac8:	af02      	add	r7, sp, #8
 8015aca:	60f8      	str	r0, [r7, #12]
 8015acc:	60b9      	str	r1, [r7, #8]
 8015ace:	4613      	mov	r3, r2
 8015ad0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d10a      	bne.n	8015aee <xQueueGenericCreate+0x2a>
	__asm volatile
 8015ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015adc:	f383 8811 	msr	BASEPRI, r3
 8015ae0:	f3bf 8f6f 	isb	sy
 8015ae4:	f3bf 8f4f 	dsb	sy
 8015ae8:	613b      	str	r3, [r7, #16]
}
 8015aea:	bf00      	nop
 8015aec:	e7fe      	b.n	8015aec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	68ba      	ldr	r2, [r7, #8]
 8015af2:	fb02 f303 	mul.w	r3, r2, r3
 8015af6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015af8:	69fb      	ldr	r3, [r7, #28]
 8015afa:	3350      	adds	r3, #80	; 0x50
 8015afc:	4618      	mov	r0, r3
 8015afe:	f002 fb73 	bl	80181e8 <pvPortMalloc>
 8015b02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015b04:	69bb      	ldr	r3, [r7, #24]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d011      	beq.n	8015b2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015b0a:	69bb      	ldr	r3, [r7, #24]
 8015b0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015b0e:	697b      	ldr	r3, [r7, #20]
 8015b10:	3350      	adds	r3, #80	; 0x50
 8015b12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015b14:	69bb      	ldr	r3, [r7, #24]
 8015b16:	2200      	movs	r2, #0
 8015b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015b1c:	79fa      	ldrb	r2, [r7, #7]
 8015b1e:	69bb      	ldr	r3, [r7, #24]
 8015b20:	9300      	str	r3, [sp, #0]
 8015b22:	4613      	mov	r3, r2
 8015b24:	697a      	ldr	r2, [r7, #20]
 8015b26:	68b9      	ldr	r1, [r7, #8]
 8015b28:	68f8      	ldr	r0, [r7, #12]
 8015b2a:	f000 f805 	bl	8015b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015b2e:	69bb      	ldr	r3, [r7, #24]
	}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3720      	adds	r7, #32
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	60f8      	str	r0, [r7, #12]
 8015b40:	60b9      	str	r1, [r7, #8]
 8015b42:	607a      	str	r2, [r7, #4]
 8015b44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d103      	bne.n	8015b54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015b4c:	69bb      	ldr	r3, [r7, #24]
 8015b4e:	69ba      	ldr	r2, [r7, #24]
 8015b50:	601a      	str	r2, [r3, #0]
 8015b52:	e002      	b.n	8015b5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015b54:	69bb      	ldr	r3, [r7, #24]
 8015b56:	687a      	ldr	r2, [r7, #4]
 8015b58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015b5a:	69bb      	ldr	r3, [r7, #24]
 8015b5c:	68fa      	ldr	r2, [r7, #12]
 8015b5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015b60:	69bb      	ldr	r3, [r7, #24]
 8015b62:	68ba      	ldr	r2, [r7, #8]
 8015b64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015b66:	2101      	movs	r1, #1
 8015b68:	69b8      	ldr	r0, [r7, #24]
 8015b6a:	f7ff fecb 	bl	8015904 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015b6e:	69bb      	ldr	r3, [r7, #24]
 8015b70:	78fa      	ldrb	r2, [r7, #3]
 8015b72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015b76:	bf00      	nop
 8015b78:	3710      	adds	r7, #16
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}
	...

08015b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b08e      	sub	sp, #56	; 0x38
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	60f8      	str	r0, [r7, #12]
 8015b88:	60b9      	str	r1, [r7, #8]
 8015b8a:	607a      	str	r2, [r7, #4]
 8015b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d10a      	bne.n	8015bb2 <xQueueGenericSend+0x32>
	__asm volatile
 8015b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba0:	f383 8811 	msr	BASEPRI, r3
 8015ba4:	f3bf 8f6f 	isb	sy
 8015ba8:	f3bf 8f4f 	dsb	sy
 8015bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015bae:	bf00      	nop
 8015bb0:	e7fe      	b.n	8015bb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015bb2:	68bb      	ldr	r3, [r7, #8]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d103      	bne.n	8015bc0 <xQueueGenericSend+0x40>
 8015bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d101      	bne.n	8015bc4 <xQueueGenericSend+0x44>
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	e000      	b.n	8015bc6 <xQueueGenericSend+0x46>
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d10a      	bne.n	8015be0 <xQueueGenericSend+0x60>
	__asm volatile
 8015bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bce:	f383 8811 	msr	BASEPRI, r3
 8015bd2:	f3bf 8f6f 	isb	sy
 8015bd6:	f3bf 8f4f 	dsb	sy
 8015bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015bdc:	bf00      	nop
 8015bde:	e7fe      	b.n	8015bde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015be0:	683b      	ldr	r3, [r7, #0]
 8015be2:	2b02      	cmp	r3, #2
 8015be4:	d103      	bne.n	8015bee <xQueueGenericSend+0x6e>
 8015be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d101      	bne.n	8015bf2 <xQueueGenericSend+0x72>
 8015bee:	2301      	movs	r3, #1
 8015bf0:	e000      	b.n	8015bf4 <xQueueGenericSend+0x74>
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d10a      	bne.n	8015c0e <xQueueGenericSend+0x8e>
	__asm volatile
 8015bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bfc:	f383 8811 	msr	BASEPRI, r3
 8015c00:	f3bf 8f6f 	isb	sy
 8015c04:	f3bf 8f4f 	dsb	sy
 8015c08:	623b      	str	r3, [r7, #32]
}
 8015c0a:	bf00      	nop
 8015c0c:	e7fe      	b.n	8015c0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015c0e:	f001 fb2b 	bl	8017268 <xTaskGetSchedulerState>
 8015c12:	4603      	mov	r3, r0
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d102      	bne.n	8015c1e <xQueueGenericSend+0x9e>
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d101      	bne.n	8015c22 <xQueueGenericSend+0xa2>
 8015c1e:	2301      	movs	r3, #1
 8015c20:	e000      	b.n	8015c24 <xQueueGenericSend+0xa4>
 8015c22:	2300      	movs	r3, #0
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d10a      	bne.n	8015c3e <xQueueGenericSend+0xbe>
	__asm volatile
 8015c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c2c:	f383 8811 	msr	BASEPRI, r3
 8015c30:	f3bf 8f6f 	isb	sy
 8015c34:	f3bf 8f4f 	dsb	sy
 8015c38:	61fb      	str	r3, [r7, #28]
}
 8015c3a:	bf00      	nop
 8015c3c:	e7fe      	b.n	8015c3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015c3e:	f002 f9b1 	bl	8017fa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d302      	bcc.n	8015c54 <xQueueGenericSend+0xd4>
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	2b02      	cmp	r3, #2
 8015c52:	d129      	bne.n	8015ca8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015c54:	683a      	ldr	r2, [r7, #0]
 8015c56:	68b9      	ldr	r1, [r7, #8]
 8015c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c5a:	f000 fa0b 	bl	8016074 <prvCopyDataToQueue>
 8015c5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d010      	beq.n	8015c8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c6a:	3324      	adds	r3, #36	; 0x24
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f001 f8d9 	bl	8016e24 <xTaskRemoveFromEventList>
 8015c72:	4603      	mov	r3, r0
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d013      	beq.n	8015ca0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015c78:	4b3f      	ldr	r3, [pc, #252]	; (8015d78 <xQueueGenericSend+0x1f8>)
 8015c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c7e:	601a      	str	r2, [r3, #0]
 8015c80:	f3bf 8f4f 	dsb	sy
 8015c84:	f3bf 8f6f 	isb	sy
 8015c88:	e00a      	b.n	8015ca0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d007      	beq.n	8015ca0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015c90:	4b39      	ldr	r3, [pc, #228]	; (8015d78 <xQueueGenericSend+0x1f8>)
 8015c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c96:	601a      	str	r2, [r3, #0]
 8015c98:	f3bf 8f4f 	dsb	sy
 8015c9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015ca0:	f002 f9b0 	bl	8018004 <vPortExitCritical>
				return pdPASS;
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	e063      	b.n	8015d70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d103      	bne.n	8015cb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015cae:	f002 f9a9 	bl	8018004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	e05c      	b.n	8015d70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d106      	bne.n	8015cca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015cbc:	f107 0314 	add.w	r3, r7, #20
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f001 f973 	bl	8016fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015cc6:	2301      	movs	r3, #1
 8015cc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015cca:	f002 f99b 	bl	8018004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015cce:	f000 fe1d 	bl	801690c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015cd2:	f002 f967 	bl	8017fa4 <vPortEnterCritical>
 8015cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015cdc:	b25b      	sxtb	r3, r3
 8015cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ce2:	d103      	bne.n	8015cec <xQueueGenericSend+0x16c>
 8015ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015cf2:	b25b      	sxtb	r3, r3
 8015cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cf8:	d103      	bne.n	8015d02 <xQueueGenericSend+0x182>
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015d02:	f002 f97f 	bl	8018004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015d06:	1d3a      	adds	r2, r7, #4
 8015d08:	f107 0314 	add.w	r3, r7, #20
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f001 f962 	bl	8016fd8 <xTaskCheckForTimeOut>
 8015d14:	4603      	mov	r3, r0
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d124      	bne.n	8015d64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d1c:	f000 faa2 	bl	8016264 <prvIsQueueFull>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d018      	beq.n	8015d58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d28:	3310      	adds	r3, #16
 8015d2a:	687a      	ldr	r2, [r7, #4]
 8015d2c:	4611      	mov	r1, r2
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f000 ffec 	bl	8016d0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d36:	f000 fa2d 	bl	8016194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015d3a:	f000 fdf5 	bl	8016928 <xTaskResumeAll>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	f47f af7c 	bne.w	8015c3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015d46:	4b0c      	ldr	r3, [pc, #48]	; (8015d78 <xQueueGenericSend+0x1f8>)
 8015d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d4c:	601a      	str	r2, [r3, #0]
 8015d4e:	f3bf 8f4f 	dsb	sy
 8015d52:	f3bf 8f6f 	isb	sy
 8015d56:	e772      	b.n	8015c3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d5a:	f000 fa1b 	bl	8016194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015d5e:	f000 fde3 	bl	8016928 <xTaskResumeAll>
 8015d62:	e76c      	b.n	8015c3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d66:	f000 fa15 	bl	8016194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015d6a:	f000 fddd 	bl	8016928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015d6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3738      	adds	r7, #56	; 0x38
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	e000ed04 	.word	0xe000ed04

08015d7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b090      	sub	sp, #64	; 0x40
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	60f8      	str	r0, [r7, #12]
 8015d84:	60b9      	str	r1, [r7, #8]
 8015d86:	607a      	str	r2, [r7, #4]
 8015d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d10a      	bne.n	8015daa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d98:	f383 8811 	msr	BASEPRI, r3
 8015d9c:	f3bf 8f6f 	isb	sy
 8015da0:	f3bf 8f4f 	dsb	sy
 8015da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015da6:	bf00      	nop
 8015da8:	e7fe      	b.n	8015da8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d103      	bne.n	8015db8 <xQueueGenericSendFromISR+0x3c>
 8015db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d101      	bne.n	8015dbc <xQueueGenericSendFromISR+0x40>
 8015db8:	2301      	movs	r3, #1
 8015dba:	e000      	b.n	8015dbe <xQueueGenericSendFromISR+0x42>
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d10a      	bne.n	8015dd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dc6:	f383 8811 	msr	BASEPRI, r3
 8015dca:	f3bf 8f6f 	isb	sy
 8015dce:	f3bf 8f4f 	dsb	sy
 8015dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015dd4:	bf00      	nop
 8015dd6:	e7fe      	b.n	8015dd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	2b02      	cmp	r3, #2
 8015ddc:	d103      	bne.n	8015de6 <xQueueGenericSendFromISR+0x6a>
 8015dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015de2:	2b01      	cmp	r3, #1
 8015de4:	d101      	bne.n	8015dea <xQueueGenericSendFromISR+0x6e>
 8015de6:	2301      	movs	r3, #1
 8015de8:	e000      	b.n	8015dec <xQueueGenericSendFromISR+0x70>
 8015dea:	2300      	movs	r3, #0
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d10a      	bne.n	8015e06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df4:	f383 8811 	msr	BASEPRI, r3
 8015df8:	f3bf 8f6f 	isb	sy
 8015dfc:	f3bf 8f4f 	dsb	sy
 8015e00:	623b      	str	r3, [r7, #32]
}
 8015e02:	bf00      	nop
 8015e04:	e7fe      	b.n	8015e04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e06:	f002 f9af 	bl	8018168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8015e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e12:	f383 8811 	msr	BASEPRI, r3
 8015e16:	f3bf 8f6f 	isb	sy
 8015e1a:	f3bf 8f4f 	dsb	sy
 8015e1e:	61fa      	str	r2, [r7, #28]
 8015e20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015e22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015e24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e2e:	429a      	cmp	r2, r3
 8015e30:	d302      	bcc.n	8015e38 <xQueueGenericSendFromISR+0xbc>
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	2b02      	cmp	r3, #2
 8015e36:	d12f      	bne.n	8015e98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015e48:	683a      	ldr	r2, [r7, #0]
 8015e4a:	68b9      	ldr	r1, [r7, #8]
 8015e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015e4e:	f000 f911 	bl	8016074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015e52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e5a:	d112      	bne.n	8015e82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d016      	beq.n	8015e92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e66:	3324      	adds	r3, #36	; 0x24
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f000 ffdb 	bl	8016e24 <xTaskRemoveFromEventList>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d00e      	beq.n	8015e92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d00b      	beq.n	8015e92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	2201      	movs	r2, #1
 8015e7e:	601a      	str	r2, [r3, #0]
 8015e80:	e007      	b.n	8015e92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015e82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015e86:	3301      	adds	r3, #1
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	b25a      	sxtb	r2, r3
 8015e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015e92:	2301      	movs	r3, #1
 8015e94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015e96:	e001      	b.n	8015e9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015ea6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3740      	adds	r7, #64	; 0x40
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
	...

08015eb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b08c      	sub	sp, #48	; 0x30
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	60f8      	str	r0, [r7, #12]
 8015ebc:	60b9      	str	r1, [r7, #8]
 8015ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d10a      	bne.n	8015ee4 <xQueueReceive+0x30>
	__asm volatile
 8015ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ed2:	f383 8811 	msr	BASEPRI, r3
 8015ed6:	f3bf 8f6f 	isb	sy
 8015eda:	f3bf 8f4f 	dsb	sy
 8015ede:	623b      	str	r3, [r7, #32]
}
 8015ee0:	bf00      	nop
 8015ee2:	e7fe      	b.n	8015ee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d103      	bne.n	8015ef2 <xQueueReceive+0x3e>
 8015eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d101      	bne.n	8015ef6 <xQueueReceive+0x42>
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	e000      	b.n	8015ef8 <xQueueReceive+0x44>
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10a      	bne.n	8015f12 <xQueueReceive+0x5e>
	__asm volatile
 8015efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f00:	f383 8811 	msr	BASEPRI, r3
 8015f04:	f3bf 8f6f 	isb	sy
 8015f08:	f3bf 8f4f 	dsb	sy
 8015f0c:	61fb      	str	r3, [r7, #28]
}
 8015f0e:	bf00      	nop
 8015f10:	e7fe      	b.n	8015f10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f12:	f001 f9a9 	bl	8017268 <xTaskGetSchedulerState>
 8015f16:	4603      	mov	r3, r0
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d102      	bne.n	8015f22 <xQueueReceive+0x6e>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d101      	bne.n	8015f26 <xQueueReceive+0x72>
 8015f22:	2301      	movs	r3, #1
 8015f24:	e000      	b.n	8015f28 <xQueueReceive+0x74>
 8015f26:	2300      	movs	r3, #0
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d10a      	bne.n	8015f42 <xQueueReceive+0x8e>
	__asm volatile
 8015f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f30:	f383 8811 	msr	BASEPRI, r3
 8015f34:	f3bf 8f6f 	isb	sy
 8015f38:	f3bf 8f4f 	dsb	sy
 8015f3c:	61bb      	str	r3, [r7, #24]
}
 8015f3e:	bf00      	nop
 8015f40:	e7fe      	b.n	8015f40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015f42:	f002 f82f 	bl	8017fa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d01f      	beq.n	8015f92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015f52:	68b9      	ldr	r1, [r7, #8]
 8015f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f56:	f000 f8f7 	bl	8016148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5c:	1e5a      	subs	r2, r3, #1
 8015f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f64:	691b      	ldr	r3, [r3, #16]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d00f      	beq.n	8015f8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6c:	3310      	adds	r3, #16
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f000 ff58 	bl	8016e24 <xTaskRemoveFromEventList>
 8015f74:	4603      	mov	r3, r0
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d007      	beq.n	8015f8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015f7a:	4b3d      	ldr	r3, [pc, #244]	; (8016070 <xQueueReceive+0x1bc>)
 8015f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f80:	601a      	str	r2, [r3, #0]
 8015f82:	f3bf 8f4f 	dsb	sy
 8015f86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015f8a:	f002 f83b 	bl	8018004 <vPortExitCritical>
				return pdPASS;
 8015f8e:	2301      	movs	r3, #1
 8015f90:	e069      	b.n	8016066 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d103      	bne.n	8015fa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015f98:	f002 f834 	bl	8018004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	e062      	b.n	8016066 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d106      	bne.n	8015fb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015fa6:	f107 0310 	add.w	r3, r7, #16
 8015faa:	4618      	mov	r0, r3
 8015fac:	f000 fffe 	bl	8016fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015fb0:	2301      	movs	r3, #1
 8015fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015fb4:	f002 f826 	bl	8018004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015fb8:	f000 fca8 	bl	801690c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015fbc:	f001 fff2 	bl	8017fa4 <vPortEnterCritical>
 8015fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fc6:	b25b      	sxtb	r3, r3
 8015fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fcc:	d103      	bne.n	8015fd6 <xQueueReceive+0x122>
 8015fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fdc:	b25b      	sxtb	r3, r3
 8015fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fe2:	d103      	bne.n	8015fec <xQueueReceive+0x138>
 8015fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015fec:	f002 f80a 	bl	8018004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015ff0:	1d3a      	adds	r2, r7, #4
 8015ff2:	f107 0310 	add.w	r3, r7, #16
 8015ff6:	4611      	mov	r1, r2
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f000 ffed 	bl	8016fd8 <xTaskCheckForTimeOut>
 8015ffe:	4603      	mov	r3, r0
 8016000:	2b00      	cmp	r3, #0
 8016002:	d123      	bne.n	801604c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016006:	f000 f917 	bl	8016238 <prvIsQueueEmpty>
 801600a:	4603      	mov	r3, r0
 801600c:	2b00      	cmp	r3, #0
 801600e:	d017      	beq.n	8016040 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016012:	3324      	adds	r3, #36	; 0x24
 8016014:	687a      	ldr	r2, [r7, #4]
 8016016:	4611      	mov	r1, r2
 8016018:	4618      	mov	r0, r3
 801601a:	f000 fe77 	bl	8016d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801601e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016020:	f000 f8b8 	bl	8016194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016024:	f000 fc80 	bl	8016928 <xTaskResumeAll>
 8016028:	4603      	mov	r3, r0
 801602a:	2b00      	cmp	r3, #0
 801602c:	d189      	bne.n	8015f42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801602e:	4b10      	ldr	r3, [pc, #64]	; (8016070 <xQueueReceive+0x1bc>)
 8016030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016034:	601a      	str	r2, [r3, #0]
 8016036:	f3bf 8f4f 	dsb	sy
 801603a:	f3bf 8f6f 	isb	sy
 801603e:	e780      	b.n	8015f42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016042:	f000 f8a7 	bl	8016194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016046:	f000 fc6f 	bl	8016928 <xTaskResumeAll>
 801604a:	e77a      	b.n	8015f42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801604c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801604e:	f000 f8a1 	bl	8016194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016052:	f000 fc69 	bl	8016928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016058:	f000 f8ee 	bl	8016238 <prvIsQueueEmpty>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	f43f af6f 	beq.w	8015f42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016064:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016066:	4618      	mov	r0, r3
 8016068:	3730      	adds	r7, #48	; 0x30
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	e000ed04 	.word	0xe000ed04

08016074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b086      	sub	sp, #24
 8016078:	af00      	add	r7, sp, #0
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	60b9      	str	r1, [r7, #8]
 801607e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016080:	2300      	movs	r3, #0
 8016082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801608e:	2b00      	cmp	r3, #0
 8016090:	d10d      	bne.n	80160ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d14d      	bne.n	8016136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	689b      	ldr	r3, [r3, #8]
 801609e:	4618      	mov	r0, r3
 80160a0:	f001 f900 	bl	80172a4 <xTaskPriorityDisinherit>
 80160a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	2200      	movs	r2, #0
 80160aa:	609a      	str	r2, [r3, #8]
 80160ac:	e043      	b.n	8016136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d119      	bne.n	80160e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	6858      	ldr	r0, [r3, #4]
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160bc:	461a      	mov	r2, r3
 80160be:	68b9      	ldr	r1, [r7, #8]
 80160c0:	f004 f812 	bl	801a0e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	685a      	ldr	r2, [r3, #4]
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160cc:	441a      	add	r2, r3
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	685a      	ldr	r2, [r3, #4]
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	689b      	ldr	r3, [r3, #8]
 80160da:	429a      	cmp	r2, r3
 80160dc:	d32b      	bcc.n	8016136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	605a      	str	r2, [r3, #4]
 80160e6:	e026      	b.n	8016136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	68d8      	ldr	r0, [r3, #12]
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160f0:	461a      	mov	r2, r3
 80160f2:	68b9      	ldr	r1, [r7, #8]
 80160f4:	f003 fff8 	bl	801a0e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	68da      	ldr	r2, [r3, #12]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016100:	425b      	negs	r3, r3
 8016102:	441a      	add	r2, r3
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	68da      	ldr	r2, [r3, #12]
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	429a      	cmp	r2, r3
 8016112:	d207      	bcs.n	8016124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	689a      	ldr	r2, [r3, #8]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801611c:	425b      	negs	r3, r3
 801611e:	441a      	add	r2, r3
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2b02      	cmp	r3, #2
 8016128:	d105      	bne.n	8016136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d002      	beq.n	8016136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016130:	693b      	ldr	r3, [r7, #16]
 8016132:	3b01      	subs	r3, #1
 8016134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	1c5a      	adds	r2, r3, #1
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801613e:	697b      	ldr	r3, [r7, #20]
}
 8016140:	4618      	mov	r0, r3
 8016142:	3718      	adds	r7, #24
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b082      	sub	sp, #8
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016156:	2b00      	cmp	r3, #0
 8016158:	d018      	beq.n	801618c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	68da      	ldr	r2, [r3, #12]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016162:	441a      	add	r2, r3
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	68da      	ldr	r2, [r3, #12]
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	429a      	cmp	r2, r3
 8016172:	d303      	bcc.n	801617c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681a      	ldr	r2, [r3, #0]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	68d9      	ldr	r1, [r3, #12]
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016184:	461a      	mov	r2, r3
 8016186:	6838      	ldr	r0, [r7, #0]
 8016188:	f003 ffae 	bl	801a0e8 <memcpy>
	}
}
 801618c:	bf00      	nop
 801618e:	3708      	adds	r7, #8
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}

08016194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b084      	sub	sp, #16
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801619c:	f001 ff02 	bl	8017fa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80161a8:	e011      	b.n	80161ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d012      	beq.n	80161d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	3324      	adds	r3, #36	; 0x24
 80161b6:	4618      	mov	r0, r3
 80161b8:	f000 fe34 	bl	8016e24 <xTaskRemoveFromEventList>
 80161bc:	4603      	mov	r3, r0
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d001      	beq.n	80161c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80161c2:	f000 ff6b 	bl	801709c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80161c6:	7bfb      	ldrb	r3, [r7, #15]
 80161c8:	3b01      	subs	r3, #1
 80161ca:	b2db      	uxtb	r3, r3
 80161cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80161ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	dce9      	bgt.n	80161aa <prvUnlockQueue+0x16>
 80161d6:	e000      	b.n	80161da <prvUnlockQueue+0x46>
					break;
 80161d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	22ff      	movs	r2, #255	; 0xff
 80161de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80161e2:	f001 ff0f 	bl	8018004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80161e6:	f001 fedd 	bl	8017fa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80161f2:	e011      	b.n	8016218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	691b      	ldr	r3, [r3, #16]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d012      	beq.n	8016222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	3310      	adds	r3, #16
 8016200:	4618      	mov	r0, r3
 8016202:	f000 fe0f 	bl	8016e24 <xTaskRemoveFromEventList>
 8016206:	4603      	mov	r3, r0
 8016208:	2b00      	cmp	r3, #0
 801620a:	d001      	beq.n	8016210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801620c:	f000 ff46 	bl	801709c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016210:	7bbb      	ldrb	r3, [r7, #14]
 8016212:	3b01      	subs	r3, #1
 8016214:	b2db      	uxtb	r3, r3
 8016216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801621c:	2b00      	cmp	r3, #0
 801621e:	dce9      	bgt.n	80161f4 <prvUnlockQueue+0x60>
 8016220:	e000      	b.n	8016224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	22ff      	movs	r2, #255	; 0xff
 8016228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801622c:	f001 feea 	bl	8018004 <vPortExitCritical>
}
 8016230:	bf00      	nop
 8016232:	3710      	adds	r7, #16
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b084      	sub	sp, #16
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016240:	f001 feb0 	bl	8017fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016248:	2b00      	cmp	r3, #0
 801624a:	d102      	bne.n	8016252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801624c:	2301      	movs	r3, #1
 801624e:	60fb      	str	r3, [r7, #12]
 8016250:	e001      	b.n	8016256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016252:	2300      	movs	r3, #0
 8016254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016256:	f001 fed5 	bl	8018004 <vPortExitCritical>

	return xReturn;
 801625a:	68fb      	ldr	r3, [r7, #12]
}
 801625c:	4618      	mov	r0, r3
 801625e:	3710      	adds	r7, #16
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801626c:	f001 fe9a 	bl	8017fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016278:	429a      	cmp	r2, r3
 801627a:	d102      	bne.n	8016282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801627c:	2301      	movs	r3, #1
 801627e:	60fb      	str	r3, [r7, #12]
 8016280:	e001      	b.n	8016286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016282:	2300      	movs	r3, #0
 8016284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016286:	f001 febd 	bl	8018004 <vPortExitCritical>

	return xReturn;
 801628a:	68fb      	ldr	r3, [r7, #12]
}
 801628c:	4618      	mov	r0, r3
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}

08016294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016294:	b480      	push	{r7}
 8016296:	b085      	sub	sp, #20
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
 801629c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801629e:	2300      	movs	r3, #0
 80162a0:	60fb      	str	r3, [r7, #12]
 80162a2:	e014      	b.n	80162ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80162a4:	4a0f      	ldr	r2, [pc, #60]	; (80162e4 <vQueueAddToRegistry+0x50>)
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d10b      	bne.n	80162c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80162b0:	490c      	ldr	r1, [pc, #48]	; (80162e4 <vQueueAddToRegistry+0x50>)
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	683a      	ldr	r2, [r7, #0]
 80162b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80162ba:	4a0a      	ldr	r2, [pc, #40]	; (80162e4 <vQueueAddToRegistry+0x50>)
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	00db      	lsls	r3, r3, #3
 80162c0:	4413      	add	r3, r2
 80162c2:	687a      	ldr	r2, [r7, #4]
 80162c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80162c6:	e006      	b.n	80162d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	3301      	adds	r3, #1
 80162cc:	60fb      	str	r3, [r7, #12]
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	2b07      	cmp	r3, #7
 80162d2:	d9e7      	bls.n	80162a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80162d4:	bf00      	nop
 80162d6:	bf00      	nop
 80162d8:	3714      	adds	r7, #20
 80162da:	46bd      	mov	sp, r7
 80162dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e0:	4770      	bx	lr
 80162e2:	bf00      	nop
 80162e4:	20002974 	.word	0x20002974

080162e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b086      	sub	sp, #24
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	60f8      	str	r0, [r7, #12]
 80162f0:	60b9      	str	r1, [r7, #8]
 80162f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80162f8:	f001 fe54 	bl	8017fa4 <vPortEnterCritical>
 80162fc:	697b      	ldr	r3, [r7, #20]
 80162fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016302:	b25b      	sxtb	r3, r3
 8016304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016308:	d103      	bne.n	8016312 <vQueueWaitForMessageRestricted+0x2a>
 801630a:	697b      	ldr	r3, [r7, #20]
 801630c:	2200      	movs	r2, #0
 801630e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016312:	697b      	ldr	r3, [r7, #20]
 8016314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016318:	b25b      	sxtb	r3, r3
 801631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801631e:	d103      	bne.n	8016328 <vQueueWaitForMessageRestricted+0x40>
 8016320:	697b      	ldr	r3, [r7, #20]
 8016322:	2200      	movs	r2, #0
 8016324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016328:	f001 fe6c 	bl	8018004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801632c:	697b      	ldr	r3, [r7, #20]
 801632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016330:	2b00      	cmp	r3, #0
 8016332:	d106      	bne.n	8016342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	3324      	adds	r3, #36	; 0x24
 8016338:	687a      	ldr	r2, [r7, #4]
 801633a:	68b9      	ldr	r1, [r7, #8]
 801633c:	4618      	mov	r0, r3
 801633e:	f000 fd45 	bl	8016dcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016342:	6978      	ldr	r0, [r7, #20]
 8016344:	f7ff ff26 	bl	8016194 <prvUnlockQueue>
	}
 8016348:	bf00      	nop
 801634a:	3718      	adds	r7, #24
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}

08016350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016350:	b580      	push	{r7, lr}
 8016352:	b08e      	sub	sp, #56	; 0x38
 8016354:	af04      	add	r7, sp, #16
 8016356:	60f8      	str	r0, [r7, #12]
 8016358:	60b9      	str	r1, [r7, #8]
 801635a:	607a      	str	r2, [r7, #4]
 801635c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801635e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016360:	2b00      	cmp	r3, #0
 8016362:	d10a      	bne.n	801637a <xTaskCreateStatic+0x2a>
	__asm volatile
 8016364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016368:	f383 8811 	msr	BASEPRI, r3
 801636c:	f3bf 8f6f 	isb	sy
 8016370:	f3bf 8f4f 	dsb	sy
 8016374:	623b      	str	r3, [r7, #32]
}
 8016376:	bf00      	nop
 8016378:	e7fe      	b.n	8016378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801637c:	2b00      	cmp	r3, #0
 801637e:	d10a      	bne.n	8016396 <xTaskCreateStatic+0x46>
	__asm volatile
 8016380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016384:	f383 8811 	msr	BASEPRI, r3
 8016388:	f3bf 8f6f 	isb	sy
 801638c:	f3bf 8f4f 	dsb	sy
 8016390:	61fb      	str	r3, [r7, #28]
}
 8016392:	bf00      	nop
 8016394:	e7fe      	b.n	8016394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016396:	23ac      	movs	r3, #172	; 0xac
 8016398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	2bac      	cmp	r3, #172	; 0xac
 801639e:	d00a      	beq.n	80163b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80163a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a4:	f383 8811 	msr	BASEPRI, r3
 80163a8:	f3bf 8f6f 	isb	sy
 80163ac:	f3bf 8f4f 	dsb	sy
 80163b0:	61bb      	str	r3, [r7, #24]
}
 80163b2:	bf00      	nop
 80163b4:	e7fe      	b.n	80163b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80163b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80163b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d01e      	beq.n	80163fc <xTaskCreateStatic+0xac>
 80163be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d01b      	beq.n	80163fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80163c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80163c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80163ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d0:	2202      	movs	r2, #2
 80163d2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80163d6:	2300      	movs	r3, #0
 80163d8:	9303      	str	r3, [sp, #12]
 80163da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163dc:	9302      	str	r3, [sp, #8]
 80163de:	f107 0314 	add.w	r3, r7, #20
 80163e2:	9301      	str	r3, [sp, #4]
 80163e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e6:	9300      	str	r3, [sp, #0]
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	687a      	ldr	r2, [r7, #4]
 80163ec:	68b9      	ldr	r1, [r7, #8]
 80163ee:	68f8      	ldr	r0, [r7, #12]
 80163f0:	f000 f850 	bl	8016494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80163f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163f6:	f000 f8f7 	bl	80165e8 <prvAddNewTaskToReadyList>
 80163fa:	e001      	b.n	8016400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80163fc:	2300      	movs	r3, #0
 80163fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016400:	697b      	ldr	r3, [r7, #20]
	}
 8016402:	4618      	mov	r0, r3
 8016404:	3728      	adds	r7, #40	; 0x28
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}

0801640a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801640a:	b580      	push	{r7, lr}
 801640c:	b08c      	sub	sp, #48	; 0x30
 801640e:	af04      	add	r7, sp, #16
 8016410:	60f8      	str	r0, [r7, #12]
 8016412:	60b9      	str	r1, [r7, #8]
 8016414:	603b      	str	r3, [r7, #0]
 8016416:	4613      	mov	r3, r2
 8016418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801641a:	88fb      	ldrh	r3, [r7, #6]
 801641c:	009b      	lsls	r3, r3, #2
 801641e:	4618      	mov	r0, r3
 8016420:	f001 fee2 	bl	80181e8 <pvPortMalloc>
 8016424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016426:	697b      	ldr	r3, [r7, #20]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d00e      	beq.n	801644a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801642c:	20ac      	movs	r0, #172	; 0xac
 801642e:	f001 fedb 	bl	80181e8 <pvPortMalloc>
 8016432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016434:	69fb      	ldr	r3, [r7, #28]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d003      	beq.n	8016442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801643a:	69fb      	ldr	r3, [r7, #28]
 801643c:	697a      	ldr	r2, [r7, #20]
 801643e:	631a      	str	r2, [r3, #48]	; 0x30
 8016440:	e005      	b.n	801644e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016442:	6978      	ldr	r0, [r7, #20]
 8016444:	f001 ff9c 	bl	8018380 <vPortFree>
 8016448:	e001      	b.n	801644e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801644a:	2300      	movs	r3, #0
 801644c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801644e:	69fb      	ldr	r3, [r7, #28]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d017      	beq.n	8016484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016454:	69fb      	ldr	r3, [r7, #28]
 8016456:	2200      	movs	r2, #0
 8016458:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801645c:	88fa      	ldrh	r2, [r7, #6]
 801645e:	2300      	movs	r3, #0
 8016460:	9303      	str	r3, [sp, #12]
 8016462:	69fb      	ldr	r3, [r7, #28]
 8016464:	9302      	str	r3, [sp, #8]
 8016466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016468:	9301      	str	r3, [sp, #4]
 801646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646c:	9300      	str	r3, [sp, #0]
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	68b9      	ldr	r1, [r7, #8]
 8016472:	68f8      	ldr	r0, [r7, #12]
 8016474:	f000 f80e 	bl	8016494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016478:	69f8      	ldr	r0, [r7, #28]
 801647a:	f000 f8b5 	bl	80165e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801647e:	2301      	movs	r3, #1
 8016480:	61bb      	str	r3, [r7, #24]
 8016482:	e002      	b.n	801648a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016484:	f04f 33ff 	mov.w	r3, #4294967295
 8016488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801648a:	69bb      	ldr	r3, [r7, #24]
	}
 801648c:	4618      	mov	r0, r3
 801648e:	3720      	adds	r7, #32
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b088      	sub	sp, #32
 8016498:	af00      	add	r7, sp, #0
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
 80164a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80164a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	009b      	lsls	r3, r3, #2
 80164aa:	461a      	mov	r2, r3
 80164ac:	21a5      	movs	r1, #165	; 0xa5
 80164ae:	f003 fd46 	bl	8019f3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80164b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80164bc:	3b01      	subs	r3, #1
 80164be:	009b      	lsls	r3, r3, #2
 80164c0:	4413      	add	r3, r2
 80164c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80164c4:	69bb      	ldr	r3, [r7, #24]
 80164c6:	f023 0307 	bic.w	r3, r3, #7
 80164ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80164cc:	69bb      	ldr	r3, [r7, #24]
 80164ce:	f003 0307 	and.w	r3, r3, #7
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d00a      	beq.n	80164ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80164d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164da:	f383 8811 	msr	BASEPRI, r3
 80164de:	f3bf 8f6f 	isb	sy
 80164e2:	f3bf 8f4f 	dsb	sy
 80164e6:	617b      	str	r3, [r7, #20]
}
 80164e8:	bf00      	nop
 80164ea:	e7fe      	b.n	80164ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80164ec:	68bb      	ldr	r3, [r7, #8]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d01f      	beq.n	8016532 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80164f2:	2300      	movs	r3, #0
 80164f4:	61fb      	str	r3, [r7, #28]
 80164f6:	e012      	b.n	801651e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80164f8:	68ba      	ldr	r2, [r7, #8]
 80164fa:	69fb      	ldr	r3, [r7, #28]
 80164fc:	4413      	add	r3, r2
 80164fe:	7819      	ldrb	r1, [r3, #0]
 8016500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016502:	69fb      	ldr	r3, [r7, #28]
 8016504:	4413      	add	r3, r2
 8016506:	3334      	adds	r3, #52	; 0x34
 8016508:	460a      	mov	r2, r1
 801650a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801650c:	68ba      	ldr	r2, [r7, #8]
 801650e:	69fb      	ldr	r3, [r7, #28]
 8016510:	4413      	add	r3, r2
 8016512:	781b      	ldrb	r3, [r3, #0]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d006      	beq.n	8016526 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016518:	69fb      	ldr	r3, [r7, #28]
 801651a:	3301      	adds	r3, #1
 801651c:	61fb      	str	r3, [r7, #28]
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	2b0f      	cmp	r3, #15
 8016522:	d9e9      	bls.n	80164f8 <prvInitialiseNewTask+0x64>
 8016524:	e000      	b.n	8016528 <prvInitialiseNewTask+0x94>
			{
				break;
 8016526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801652a:	2200      	movs	r2, #0
 801652c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016530:	e003      	b.n	801653a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016534:	2200      	movs	r2, #0
 8016536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801653c:	2b0e      	cmp	r3, #14
 801653e:	d901      	bls.n	8016544 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016540:	230e      	movs	r3, #14
 8016542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801654c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801654e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016552:	2200      	movs	r2, #0
 8016554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016558:	3304      	adds	r3, #4
 801655a:	4618      	mov	r0, r3
 801655c:	f7ff f93e 	bl	80157dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016562:	3318      	adds	r3, #24
 8016564:	4618      	mov	r0, r3
 8016566:	f7ff f939 	bl	80157dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801656c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801656e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016572:	f1c3 020f 	rsb	r2, r3, #15
 8016576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801657c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801657e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8016580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016582:	2200      	movs	r2, #0
 8016584:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016588:	2200      	movs	r2, #0
 801658a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016590:	2200      	movs	r2, #0
 8016592:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016598:	3358      	adds	r3, #88	; 0x58
 801659a:	224c      	movs	r2, #76	; 0x4c
 801659c:	2100      	movs	r1, #0
 801659e:	4618      	mov	r0, r3
 80165a0:	f003 fccd 	bl	8019f3e <memset>
 80165a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a6:	4a0d      	ldr	r2, [pc, #52]	; (80165dc <prvInitialiseNewTask+0x148>)
 80165a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80165aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ac:	4a0c      	ldr	r2, [pc, #48]	; (80165e0 <prvInitialiseNewTask+0x14c>)
 80165ae:	661a      	str	r2, [r3, #96]	; 0x60
 80165b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b2:	4a0c      	ldr	r2, [pc, #48]	; (80165e4 <prvInitialiseNewTask+0x150>)
 80165b4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80165b6:	683a      	ldr	r2, [r7, #0]
 80165b8:	68f9      	ldr	r1, [r7, #12]
 80165ba:	69b8      	ldr	r0, [r7, #24]
 80165bc:	f001 fbc4 	bl	8017d48 <pxPortInitialiseStack>
 80165c0:	4602      	mov	r2, r0
 80165c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80165c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d002      	beq.n	80165d2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80165cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80165d2:	bf00      	nop
 80165d4:	3720      	adds	r7, #32
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}
 80165da:	bf00      	nop
 80165dc:	2000e52c 	.word	0x2000e52c
 80165e0:	2000e594 	.word	0x2000e594
 80165e4:	2000e5fc 	.word	0x2000e5fc

080165e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b082      	sub	sp, #8
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80165f0:	f001 fcd8 	bl	8017fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80165f4:	4b2c      	ldr	r3, [pc, #176]	; (80166a8 <prvAddNewTaskToReadyList+0xc0>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	3301      	adds	r3, #1
 80165fa:	4a2b      	ldr	r2, [pc, #172]	; (80166a8 <prvAddNewTaskToReadyList+0xc0>)
 80165fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80165fe:	4b2b      	ldr	r3, [pc, #172]	; (80166ac <prvAddNewTaskToReadyList+0xc4>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d109      	bne.n	801661a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016606:	4a29      	ldr	r2, [pc, #164]	; (80166ac <prvAddNewTaskToReadyList+0xc4>)
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801660c:	4b26      	ldr	r3, [pc, #152]	; (80166a8 <prvAddNewTaskToReadyList+0xc0>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	2b01      	cmp	r3, #1
 8016612:	d110      	bne.n	8016636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016614:	f000 fd66 	bl	80170e4 <prvInitialiseTaskLists>
 8016618:	e00d      	b.n	8016636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801661a:	4b25      	ldr	r3, [pc, #148]	; (80166b0 <prvAddNewTaskToReadyList+0xc8>)
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d109      	bne.n	8016636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016622:	4b22      	ldr	r3, [pc, #136]	; (80166ac <prvAddNewTaskToReadyList+0xc4>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801662c:	429a      	cmp	r2, r3
 801662e:	d802      	bhi.n	8016636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016630:	4a1e      	ldr	r2, [pc, #120]	; (80166ac <prvAddNewTaskToReadyList+0xc4>)
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016636:	4b1f      	ldr	r3, [pc, #124]	; (80166b4 <prvAddNewTaskToReadyList+0xcc>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	3301      	adds	r3, #1
 801663c:	4a1d      	ldr	r2, [pc, #116]	; (80166b4 <prvAddNewTaskToReadyList+0xcc>)
 801663e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016640:	4b1c      	ldr	r3, [pc, #112]	; (80166b4 <prvAddNewTaskToReadyList+0xcc>)
 8016642:	681a      	ldr	r2, [r3, #0]
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801664c:	2201      	movs	r2, #1
 801664e:	409a      	lsls	r2, r3
 8016650:	4b19      	ldr	r3, [pc, #100]	; (80166b8 <prvAddNewTaskToReadyList+0xd0>)
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	4313      	orrs	r3, r2
 8016656:	4a18      	ldr	r2, [pc, #96]	; (80166b8 <prvAddNewTaskToReadyList+0xd0>)
 8016658:	6013      	str	r3, [r2, #0]
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801665e:	4613      	mov	r3, r2
 8016660:	009b      	lsls	r3, r3, #2
 8016662:	4413      	add	r3, r2
 8016664:	009b      	lsls	r3, r3, #2
 8016666:	4a15      	ldr	r2, [pc, #84]	; (80166bc <prvAddNewTaskToReadyList+0xd4>)
 8016668:	441a      	add	r2, r3
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	3304      	adds	r3, #4
 801666e:	4619      	mov	r1, r3
 8016670:	4610      	mov	r0, r2
 8016672:	f7ff f8c0 	bl	80157f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016676:	f001 fcc5 	bl	8018004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801667a:	4b0d      	ldr	r3, [pc, #52]	; (80166b0 <prvAddNewTaskToReadyList+0xc8>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d00e      	beq.n	80166a0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016682:	4b0a      	ldr	r3, [pc, #40]	; (80166ac <prvAddNewTaskToReadyList+0xc4>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801668c:	429a      	cmp	r2, r3
 801668e:	d207      	bcs.n	80166a0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016690:	4b0b      	ldr	r3, [pc, #44]	; (80166c0 <prvAddNewTaskToReadyList+0xd8>)
 8016692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016696:	601a      	str	r2, [r3, #0]
 8016698:	f3bf 8f4f 	dsb	sy
 801669c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80166a0:	bf00      	nop
 80166a2:	3708      	adds	r7, #8
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}
 80166a8:	20002b54 	.word	0x20002b54
 80166ac:	200029b4 	.word	0x200029b4
 80166b0:	20002b60 	.word	0x20002b60
 80166b4:	20002b70 	.word	0x20002b70
 80166b8:	20002b5c 	.word	0x20002b5c
 80166bc:	200029b8 	.word	0x200029b8
 80166c0:	e000ed04 	.word	0xe000ed04

080166c4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b08a      	sub	sp, #40	; 0x28
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80166ce:	2300      	movs	r3, #0
 80166d0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d10a      	bne.n	80166ee <vTaskDelayUntil+0x2a>
	__asm volatile
 80166d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166dc:	f383 8811 	msr	BASEPRI, r3
 80166e0:	f3bf 8f6f 	isb	sy
 80166e4:	f3bf 8f4f 	dsb	sy
 80166e8:	617b      	str	r3, [r7, #20]
}
 80166ea:	bf00      	nop
 80166ec:	e7fe      	b.n	80166ec <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d10a      	bne.n	801670a <vTaskDelayUntil+0x46>
	__asm volatile
 80166f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166f8:	f383 8811 	msr	BASEPRI, r3
 80166fc:	f3bf 8f6f 	isb	sy
 8016700:	f3bf 8f4f 	dsb	sy
 8016704:	613b      	str	r3, [r7, #16]
}
 8016706:	bf00      	nop
 8016708:	e7fe      	b.n	8016708 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801670a:	4b2a      	ldr	r3, [pc, #168]	; (80167b4 <vTaskDelayUntil+0xf0>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d00a      	beq.n	8016728 <vTaskDelayUntil+0x64>
	__asm volatile
 8016712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016716:	f383 8811 	msr	BASEPRI, r3
 801671a:	f3bf 8f6f 	isb	sy
 801671e:	f3bf 8f4f 	dsb	sy
 8016722:	60fb      	str	r3, [r7, #12]
}
 8016724:	bf00      	nop
 8016726:	e7fe      	b.n	8016726 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8016728:	f000 f8f0 	bl	801690c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801672c:	4b22      	ldr	r3, [pc, #136]	; (80167b8 <vTaskDelayUntil+0xf4>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	683a      	ldr	r2, [r7, #0]
 8016738:	4413      	add	r3, r2
 801673a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	6a3a      	ldr	r2, [r7, #32]
 8016742:	429a      	cmp	r2, r3
 8016744:	d20b      	bcs.n	801675e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	69fa      	ldr	r2, [r7, #28]
 801674c:	429a      	cmp	r2, r3
 801674e:	d211      	bcs.n	8016774 <vTaskDelayUntil+0xb0>
 8016750:	69fa      	ldr	r2, [r7, #28]
 8016752:	6a3b      	ldr	r3, [r7, #32]
 8016754:	429a      	cmp	r2, r3
 8016756:	d90d      	bls.n	8016774 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016758:	2301      	movs	r3, #1
 801675a:	627b      	str	r3, [r7, #36]	; 0x24
 801675c:	e00a      	b.n	8016774 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	69fa      	ldr	r2, [r7, #28]
 8016764:	429a      	cmp	r2, r3
 8016766:	d303      	bcc.n	8016770 <vTaskDelayUntil+0xac>
 8016768:	69fa      	ldr	r2, [r7, #28]
 801676a:	6a3b      	ldr	r3, [r7, #32]
 801676c:	429a      	cmp	r2, r3
 801676e:	d901      	bls.n	8016774 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016770:	2301      	movs	r3, #1
 8016772:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	69fa      	ldr	r2, [r7, #28]
 8016778:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801677c:	2b00      	cmp	r3, #0
 801677e:	d006      	beq.n	801678e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8016780:	69fa      	ldr	r2, [r7, #28]
 8016782:	6a3b      	ldr	r3, [r7, #32]
 8016784:	1ad3      	subs	r3, r2, r3
 8016786:	2100      	movs	r1, #0
 8016788:	4618      	mov	r0, r3
 801678a:	f000 ff09 	bl	80175a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801678e:	f000 f8cb 	bl	8016928 <xTaskResumeAll>
 8016792:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016794:	69bb      	ldr	r3, [r7, #24]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d107      	bne.n	80167aa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801679a:	4b08      	ldr	r3, [pc, #32]	; (80167bc <vTaskDelayUntil+0xf8>)
 801679c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167a0:	601a      	str	r2, [r3, #0]
 80167a2:	f3bf 8f4f 	dsb	sy
 80167a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80167aa:	bf00      	nop
 80167ac:	3728      	adds	r7, #40	; 0x28
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop
 80167b4:	20002b7c 	.word	0x20002b7c
 80167b8:	20002b58 	.word	0x20002b58
 80167bc:	e000ed04 	.word	0xe000ed04

080167c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b084      	sub	sp, #16
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80167c8:	2300      	movs	r3, #0
 80167ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d017      	beq.n	8016802 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80167d2:	4b13      	ldr	r3, [pc, #76]	; (8016820 <vTaskDelay+0x60>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d00a      	beq.n	80167f0 <vTaskDelay+0x30>
	__asm volatile
 80167da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167de:	f383 8811 	msr	BASEPRI, r3
 80167e2:	f3bf 8f6f 	isb	sy
 80167e6:	f3bf 8f4f 	dsb	sy
 80167ea:	60bb      	str	r3, [r7, #8]
}
 80167ec:	bf00      	nop
 80167ee:	e7fe      	b.n	80167ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80167f0:	f000 f88c 	bl	801690c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80167f4:	2100      	movs	r1, #0
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f000 fed2 	bl	80175a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80167fc:	f000 f894 	bl	8016928 <xTaskResumeAll>
 8016800:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d107      	bne.n	8016818 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016808:	4b06      	ldr	r3, [pc, #24]	; (8016824 <vTaskDelay+0x64>)
 801680a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801680e:	601a      	str	r2, [r3, #0]
 8016810:	f3bf 8f4f 	dsb	sy
 8016814:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016818:	bf00      	nop
 801681a:	3710      	adds	r7, #16
 801681c:	46bd      	mov	sp, r7
 801681e:	bd80      	pop	{r7, pc}
 8016820:	20002b7c 	.word	0x20002b7c
 8016824:	e000ed04 	.word	0xe000ed04

08016828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b08a      	sub	sp, #40	; 0x28
 801682c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801682e:	2300      	movs	r3, #0
 8016830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016832:	2300      	movs	r3, #0
 8016834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016836:	463a      	mov	r2, r7
 8016838:	1d39      	adds	r1, r7, #4
 801683a:	f107 0308 	add.w	r3, r7, #8
 801683e:	4618      	mov	r0, r3
 8016840:	f7ec fbde 	bl	8003000 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016844:	6839      	ldr	r1, [r7, #0]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	68ba      	ldr	r2, [r7, #8]
 801684a:	9202      	str	r2, [sp, #8]
 801684c:	9301      	str	r3, [sp, #4]
 801684e:	2300      	movs	r3, #0
 8016850:	9300      	str	r3, [sp, #0]
 8016852:	2300      	movs	r3, #0
 8016854:	460a      	mov	r2, r1
 8016856:	4925      	ldr	r1, [pc, #148]	; (80168ec <vTaskStartScheduler+0xc4>)
 8016858:	4825      	ldr	r0, [pc, #148]	; (80168f0 <vTaskStartScheduler+0xc8>)
 801685a:	f7ff fd79 	bl	8016350 <xTaskCreateStatic>
 801685e:	4603      	mov	r3, r0
 8016860:	4a24      	ldr	r2, [pc, #144]	; (80168f4 <vTaskStartScheduler+0xcc>)
 8016862:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016864:	4b23      	ldr	r3, [pc, #140]	; (80168f4 <vTaskStartScheduler+0xcc>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d002      	beq.n	8016872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801686c:	2301      	movs	r3, #1
 801686e:	617b      	str	r3, [r7, #20]
 8016870:	e001      	b.n	8016876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016872:	2300      	movs	r3, #0
 8016874:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016876:	697b      	ldr	r3, [r7, #20]
 8016878:	2b01      	cmp	r3, #1
 801687a:	d102      	bne.n	8016882 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801687c:	f000 fef6 	bl	801766c <xTimerCreateTimerTask>
 8016880:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016882:	697b      	ldr	r3, [r7, #20]
 8016884:	2b01      	cmp	r3, #1
 8016886:	d11d      	bne.n	80168c4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8016888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801688c:	f383 8811 	msr	BASEPRI, r3
 8016890:	f3bf 8f6f 	isb	sy
 8016894:	f3bf 8f4f 	dsb	sy
 8016898:	613b      	str	r3, [r7, #16]
}
 801689a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801689c:	4b16      	ldr	r3, [pc, #88]	; (80168f8 <vTaskStartScheduler+0xd0>)
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	3358      	adds	r3, #88	; 0x58
 80168a2:	4a16      	ldr	r2, [pc, #88]	; (80168fc <vTaskStartScheduler+0xd4>)
 80168a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80168a6:	4b16      	ldr	r3, [pc, #88]	; (8016900 <vTaskStartScheduler+0xd8>)
 80168a8:	f04f 32ff 	mov.w	r2, #4294967295
 80168ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80168ae:	4b15      	ldr	r3, [pc, #84]	; (8016904 <vTaskStartScheduler+0xdc>)
 80168b0:	2201      	movs	r2, #1
 80168b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80168b4:	4b14      	ldr	r3, [pc, #80]	; (8016908 <vTaskStartScheduler+0xe0>)
 80168b6:	2200      	movs	r2, #0
 80168b8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80168ba:	f7ec fb87 	bl	8002fcc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80168be:	f001 facf 	bl	8017e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80168c2:	e00e      	b.n	80168e2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80168c4:	697b      	ldr	r3, [r7, #20]
 80168c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ca:	d10a      	bne.n	80168e2 <vTaskStartScheduler+0xba>
	__asm volatile
 80168cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168d0:	f383 8811 	msr	BASEPRI, r3
 80168d4:	f3bf 8f6f 	isb	sy
 80168d8:	f3bf 8f4f 	dsb	sy
 80168dc:	60fb      	str	r3, [r7, #12]
}
 80168de:	bf00      	nop
 80168e0:	e7fe      	b.n	80168e0 <vTaskStartScheduler+0xb8>
}
 80168e2:	bf00      	nop
 80168e4:	3718      	adds	r7, #24
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	0801f5f0 	.word	0x0801f5f0
 80168f0:	080170b5 	.word	0x080170b5
 80168f4:	20002b78 	.word	0x20002b78
 80168f8:	200029b4 	.word	0x200029b4
 80168fc:	20000164 	.word	0x20000164
 8016900:	20002b74 	.word	0x20002b74
 8016904:	20002b60 	.word	0x20002b60
 8016908:	20002b58 	.word	0x20002b58

0801690c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801690c:	b480      	push	{r7}
 801690e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016910:	4b04      	ldr	r3, [pc, #16]	; (8016924 <vTaskSuspendAll+0x18>)
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	3301      	adds	r3, #1
 8016916:	4a03      	ldr	r2, [pc, #12]	; (8016924 <vTaskSuspendAll+0x18>)
 8016918:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801691a:	bf00      	nop
 801691c:	46bd      	mov	sp, r7
 801691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016922:	4770      	bx	lr
 8016924:	20002b7c 	.word	0x20002b7c

08016928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b084      	sub	sp, #16
 801692c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801692e:	2300      	movs	r3, #0
 8016930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016932:	2300      	movs	r3, #0
 8016934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016936:	4b41      	ldr	r3, [pc, #260]	; (8016a3c <xTaskResumeAll+0x114>)
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d10a      	bne.n	8016954 <xTaskResumeAll+0x2c>
	__asm volatile
 801693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016942:	f383 8811 	msr	BASEPRI, r3
 8016946:	f3bf 8f6f 	isb	sy
 801694a:	f3bf 8f4f 	dsb	sy
 801694e:	603b      	str	r3, [r7, #0]
}
 8016950:	bf00      	nop
 8016952:	e7fe      	b.n	8016952 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016954:	f001 fb26 	bl	8017fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016958:	4b38      	ldr	r3, [pc, #224]	; (8016a3c <xTaskResumeAll+0x114>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	3b01      	subs	r3, #1
 801695e:	4a37      	ldr	r2, [pc, #220]	; (8016a3c <xTaskResumeAll+0x114>)
 8016960:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016962:	4b36      	ldr	r3, [pc, #216]	; (8016a3c <xTaskResumeAll+0x114>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d161      	bne.n	8016a2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801696a:	4b35      	ldr	r3, [pc, #212]	; (8016a40 <xTaskResumeAll+0x118>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d05d      	beq.n	8016a2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016972:	e02e      	b.n	80169d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016974:	4b33      	ldr	r3, [pc, #204]	; (8016a44 <xTaskResumeAll+0x11c>)
 8016976:	68db      	ldr	r3, [r3, #12]
 8016978:	68db      	ldr	r3, [r3, #12]
 801697a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	3318      	adds	r3, #24
 8016980:	4618      	mov	r0, r3
 8016982:	f7fe ff95 	bl	80158b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	3304      	adds	r3, #4
 801698a:	4618      	mov	r0, r3
 801698c:	f7fe ff90 	bl	80158b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016994:	2201      	movs	r2, #1
 8016996:	409a      	lsls	r2, r3
 8016998:	4b2b      	ldr	r3, [pc, #172]	; (8016a48 <xTaskResumeAll+0x120>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	4313      	orrs	r3, r2
 801699e:	4a2a      	ldr	r2, [pc, #168]	; (8016a48 <xTaskResumeAll+0x120>)
 80169a0:	6013      	str	r3, [r2, #0]
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169a6:	4613      	mov	r3, r2
 80169a8:	009b      	lsls	r3, r3, #2
 80169aa:	4413      	add	r3, r2
 80169ac:	009b      	lsls	r3, r3, #2
 80169ae:	4a27      	ldr	r2, [pc, #156]	; (8016a4c <xTaskResumeAll+0x124>)
 80169b0:	441a      	add	r2, r3
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	3304      	adds	r3, #4
 80169b6:	4619      	mov	r1, r3
 80169b8:	4610      	mov	r0, r2
 80169ba:	f7fe ff1c 	bl	80157f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169c2:	4b23      	ldr	r3, [pc, #140]	; (8016a50 <xTaskResumeAll+0x128>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169c8:	429a      	cmp	r2, r3
 80169ca:	d302      	bcc.n	80169d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80169cc:	4b21      	ldr	r3, [pc, #132]	; (8016a54 <xTaskResumeAll+0x12c>)
 80169ce:	2201      	movs	r2, #1
 80169d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80169d2:	4b1c      	ldr	r3, [pc, #112]	; (8016a44 <xTaskResumeAll+0x11c>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d1cc      	bne.n	8016974 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d001      	beq.n	80169e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80169e0:	f000 fc22 	bl	8017228 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80169e4:	4b1c      	ldr	r3, [pc, #112]	; (8016a58 <xTaskResumeAll+0x130>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d010      	beq.n	8016a12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80169f0:	f000 f846 	bl	8016a80 <xTaskIncrementTick>
 80169f4:	4603      	mov	r3, r0
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d002      	beq.n	8016a00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80169fa:	4b16      	ldr	r3, [pc, #88]	; (8016a54 <xTaskResumeAll+0x12c>)
 80169fc:	2201      	movs	r2, #1
 80169fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	3b01      	subs	r3, #1
 8016a04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d1f1      	bne.n	80169f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8016a0c:	4b12      	ldr	r3, [pc, #72]	; (8016a58 <xTaskResumeAll+0x130>)
 8016a0e:	2200      	movs	r2, #0
 8016a10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016a12:	4b10      	ldr	r3, [pc, #64]	; (8016a54 <xTaskResumeAll+0x12c>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d009      	beq.n	8016a2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016a1a:	2301      	movs	r3, #1
 8016a1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016a1e:	4b0f      	ldr	r3, [pc, #60]	; (8016a5c <xTaskResumeAll+0x134>)
 8016a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a24:	601a      	str	r2, [r3, #0]
 8016a26:	f3bf 8f4f 	dsb	sy
 8016a2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016a2e:	f001 fae9 	bl	8018004 <vPortExitCritical>

	return xAlreadyYielded;
 8016a32:	68bb      	ldr	r3, [r7, #8]
}
 8016a34:	4618      	mov	r0, r3
 8016a36:	3710      	adds	r7, #16
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	bd80      	pop	{r7, pc}
 8016a3c:	20002b7c 	.word	0x20002b7c
 8016a40:	20002b54 	.word	0x20002b54
 8016a44:	20002b14 	.word	0x20002b14
 8016a48:	20002b5c 	.word	0x20002b5c
 8016a4c:	200029b8 	.word	0x200029b8
 8016a50:	200029b4 	.word	0x200029b4
 8016a54:	20002b68 	.word	0x20002b68
 8016a58:	20002b64 	.word	0x20002b64
 8016a5c:	e000ed04 	.word	0xe000ed04

08016a60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016a60:	b480      	push	{r7}
 8016a62:	b083      	sub	sp, #12
 8016a64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016a66:	4b05      	ldr	r3, [pc, #20]	; (8016a7c <xTaskGetTickCount+0x1c>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016a6c:	687b      	ldr	r3, [r7, #4]
}
 8016a6e:	4618      	mov	r0, r3
 8016a70:	370c      	adds	r7, #12
 8016a72:	46bd      	mov	sp, r7
 8016a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a78:	4770      	bx	lr
 8016a7a:	bf00      	nop
 8016a7c:	20002b58 	.word	0x20002b58

08016a80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b086      	sub	sp, #24
 8016a84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016a86:	2300      	movs	r3, #0
 8016a88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a8a:	4b4e      	ldr	r3, [pc, #312]	; (8016bc4 <xTaskIncrementTick+0x144>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	f040 808e 	bne.w	8016bb0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016a94:	4b4c      	ldr	r3, [pc, #304]	; (8016bc8 <xTaskIncrementTick+0x148>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	3301      	adds	r3, #1
 8016a9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016a9c:	4a4a      	ldr	r2, [pc, #296]	; (8016bc8 <xTaskIncrementTick+0x148>)
 8016a9e:	693b      	ldr	r3, [r7, #16]
 8016aa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016aa2:	693b      	ldr	r3, [r7, #16]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d120      	bne.n	8016aea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016aa8:	4b48      	ldr	r3, [pc, #288]	; (8016bcc <xTaskIncrementTick+0x14c>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d00a      	beq.n	8016ac8 <xTaskIncrementTick+0x48>
	__asm volatile
 8016ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab6:	f383 8811 	msr	BASEPRI, r3
 8016aba:	f3bf 8f6f 	isb	sy
 8016abe:	f3bf 8f4f 	dsb	sy
 8016ac2:	603b      	str	r3, [r7, #0]
}
 8016ac4:	bf00      	nop
 8016ac6:	e7fe      	b.n	8016ac6 <xTaskIncrementTick+0x46>
 8016ac8:	4b40      	ldr	r3, [pc, #256]	; (8016bcc <xTaskIncrementTick+0x14c>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	60fb      	str	r3, [r7, #12]
 8016ace:	4b40      	ldr	r3, [pc, #256]	; (8016bd0 <xTaskIncrementTick+0x150>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	4a3e      	ldr	r2, [pc, #248]	; (8016bcc <xTaskIncrementTick+0x14c>)
 8016ad4:	6013      	str	r3, [r2, #0]
 8016ad6:	4a3e      	ldr	r2, [pc, #248]	; (8016bd0 <xTaskIncrementTick+0x150>)
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	6013      	str	r3, [r2, #0]
 8016adc:	4b3d      	ldr	r3, [pc, #244]	; (8016bd4 <xTaskIncrementTick+0x154>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	4a3c      	ldr	r2, [pc, #240]	; (8016bd4 <xTaskIncrementTick+0x154>)
 8016ae4:	6013      	str	r3, [r2, #0]
 8016ae6:	f000 fb9f 	bl	8017228 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016aea:	4b3b      	ldr	r3, [pc, #236]	; (8016bd8 <xTaskIncrementTick+0x158>)
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	693a      	ldr	r2, [r7, #16]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d348      	bcc.n	8016b86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016af4:	4b35      	ldr	r3, [pc, #212]	; (8016bcc <xTaskIncrementTick+0x14c>)
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d104      	bne.n	8016b08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016afe:	4b36      	ldr	r3, [pc, #216]	; (8016bd8 <xTaskIncrementTick+0x158>)
 8016b00:	f04f 32ff 	mov.w	r2, #4294967295
 8016b04:	601a      	str	r2, [r3, #0]
					break;
 8016b06:	e03e      	b.n	8016b86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b08:	4b30      	ldr	r3, [pc, #192]	; (8016bcc <xTaskIncrementTick+0x14c>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	68db      	ldr	r3, [r3, #12]
 8016b0e:	68db      	ldr	r3, [r3, #12]
 8016b10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016b12:	68bb      	ldr	r3, [r7, #8]
 8016b14:	685b      	ldr	r3, [r3, #4]
 8016b16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016b18:	693a      	ldr	r2, [r7, #16]
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	429a      	cmp	r2, r3
 8016b1e:	d203      	bcs.n	8016b28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016b20:	4a2d      	ldr	r2, [pc, #180]	; (8016bd8 <xTaskIncrementTick+0x158>)
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016b26:	e02e      	b.n	8016b86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	3304      	adds	r3, #4
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7fe febf 	bl	80158b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016b32:	68bb      	ldr	r3, [r7, #8]
 8016b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d004      	beq.n	8016b44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	3318      	adds	r3, #24
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f7fe feb6 	bl	80158b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016b44:	68bb      	ldr	r3, [r7, #8]
 8016b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b48:	2201      	movs	r2, #1
 8016b4a:	409a      	lsls	r2, r3
 8016b4c:	4b23      	ldr	r3, [pc, #140]	; (8016bdc <xTaskIncrementTick+0x15c>)
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	4313      	orrs	r3, r2
 8016b52:	4a22      	ldr	r2, [pc, #136]	; (8016bdc <xTaskIncrementTick+0x15c>)
 8016b54:	6013      	str	r3, [r2, #0]
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b5a:	4613      	mov	r3, r2
 8016b5c:	009b      	lsls	r3, r3, #2
 8016b5e:	4413      	add	r3, r2
 8016b60:	009b      	lsls	r3, r3, #2
 8016b62:	4a1f      	ldr	r2, [pc, #124]	; (8016be0 <xTaskIncrementTick+0x160>)
 8016b64:	441a      	add	r2, r3
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	3304      	adds	r3, #4
 8016b6a:	4619      	mov	r1, r3
 8016b6c:	4610      	mov	r0, r2
 8016b6e:	f7fe fe42 	bl	80157f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b76:	4b1b      	ldr	r3, [pc, #108]	; (8016be4 <xTaskIncrementTick+0x164>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b7c:	429a      	cmp	r2, r3
 8016b7e:	d3b9      	bcc.n	8016af4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016b80:	2301      	movs	r3, #1
 8016b82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016b84:	e7b6      	b.n	8016af4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016b86:	4b17      	ldr	r3, [pc, #92]	; (8016be4 <xTaskIncrementTick+0x164>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b8c:	4914      	ldr	r1, [pc, #80]	; (8016be0 <xTaskIncrementTick+0x160>)
 8016b8e:	4613      	mov	r3, r2
 8016b90:	009b      	lsls	r3, r3, #2
 8016b92:	4413      	add	r3, r2
 8016b94:	009b      	lsls	r3, r3, #2
 8016b96:	440b      	add	r3, r1
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	2b01      	cmp	r3, #1
 8016b9c:	d901      	bls.n	8016ba2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016ba2:	4b11      	ldr	r3, [pc, #68]	; (8016be8 <xTaskIncrementTick+0x168>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d007      	beq.n	8016bba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8016baa:	2301      	movs	r3, #1
 8016bac:	617b      	str	r3, [r7, #20]
 8016bae:	e004      	b.n	8016bba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016bb0:	4b0e      	ldr	r3, [pc, #56]	; (8016bec <xTaskIncrementTick+0x16c>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	3301      	adds	r3, #1
 8016bb6:	4a0d      	ldr	r2, [pc, #52]	; (8016bec <xTaskIncrementTick+0x16c>)
 8016bb8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016bba:	697b      	ldr	r3, [r7, #20]
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3718      	adds	r7, #24
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}
 8016bc4:	20002b7c 	.word	0x20002b7c
 8016bc8:	20002b58 	.word	0x20002b58
 8016bcc:	20002b0c 	.word	0x20002b0c
 8016bd0:	20002b10 	.word	0x20002b10
 8016bd4:	20002b6c 	.word	0x20002b6c
 8016bd8:	20002b74 	.word	0x20002b74
 8016bdc:	20002b5c 	.word	0x20002b5c
 8016be0:	200029b8 	.word	0x200029b8
 8016be4:	200029b4 	.word	0x200029b4
 8016be8:	20002b68 	.word	0x20002b68
 8016bec:	20002b64 	.word	0x20002b64

08016bf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b086      	sub	sp, #24
 8016bf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016bf6:	4b3d      	ldr	r3, [pc, #244]	; (8016cec <vTaskSwitchContext+0xfc>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d003      	beq.n	8016c06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016bfe:	4b3c      	ldr	r3, [pc, #240]	; (8016cf0 <vTaskSwitchContext+0x100>)
 8016c00:	2201      	movs	r2, #1
 8016c02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016c04:	e06e      	b.n	8016ce4 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8016c06:	4b3a      	ldr	r3, [pc, #232]	; (8016cf0 <vTaskSwitchContext+0x100>)
 8016c08:	2200      	movs	r2, #0
 8016c0a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8016c0c:	f7ec f9e5 	bl	8002fda <getRunTimeCounterValue>
 8016c10:	4603      	mov	r3, r0
 8016c12:	4a38      	ldr	r2, [pc, #224]	; (8016cf4 <vTaskSwitchContext+0x104>)
 8016c14:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8016c16:	4b37      	ldr	r3, [pc, #220]	; (8016cf4 <vTaskSwitchContext+0x104>)
 8016c18:	681a      	ldr	r2, [r3, #0]
 8016c1a:	4b37      	ldr	r3, [pc, #220]	; (8016cf8 <vTaskSwitchContext+0x108>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d909      	bls.n	8016c36 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8016c22:	4b36      	ldr	r3, [pc, #216]	; (8016cfc <vTaskSwitchContext+0x10c>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016c28:	4a32      	ldr	r2, [pc, #200]	; (8016cf4 <vTaskSwitchContext+0x104>)
 8016c2a:	6810      	ldr	r0, [r2, #0]
 8016c2c:	4a32      	ldr	r2, [pc, #200]	; (8016cf8 <vTaskSwitchContext+0x108>)
 8016c2e:	6812      	ldr	r2, [r2, #0]
 8016c30:	1a82      	subs	r2, r0, r2
 8016c32:	440a      	add	r2, r1
 8016c34:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8016c36:	4b2f      	ldr	r3, [pc, #188]	; (8016cf4 <vTaskSwitchContext+0x104>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	4a2f      	ldr	r2, [pc, #188]	; (8016cf8 <vTaskSwitchContext+0x108>)
 8016c3c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016c3e:	4b2f      	ldr	r3, [pc, #188]	; (8016cfc <vTaskSwitchContext+0x10c>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	681a      	ldr	r2, [r3, #0]
 8016c44:	4b2d      	ldr	r3, [pc, #180]	; (8016cfc <vTaskSwitchContext+0x10c>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d808      	bhi.n	8016c60 <vTaskSwitchContext+0x70>
 8016c4e:	4b2b      	ldr	r3, [pc, #172]	; (8016cfc <vTaskSwitchContext+0x10c>)
 8016c50:	681a      	ldr	r2, [r3, #0]
 8016c52:	4b2a      	ldr	r3, [pc, #168]	; (8016cfc <vTaskSwitchContext+0x10c>)
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	3334      	adds	r3, #52	; 0x34
 8016c58:	4619      	mov	r1, r3
 8016c5a:	4610      	mov	r0, r2
 8016c5c:	f7ec f9c5 	bl	8002fea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c60:	4b27      	ldr	r3, [pc, #156]	; (8016d00 <vTaskSwitchContext+0x110>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	fab3 f383 	clz	r3, r3
 8016c6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016c6e:	7afb      	ldrb	r3, [r7, #11]
 8016c70:	f1c3 031f 	rsb	r3, r3, #31
 8016c74:	617b      	str	r3, [r7, #20]
 8016c76:	4923      	ldr	r1, [pc, #140]	; (8016d04 <vTaskSwitchContext+0x114>)
 8016c78:	697a      	ldr	r2, [r7, #20]
 8016c7a:	4613      	mov	r3, r2
 8016c7c:	009b      	lsls	r3, r3, #2
 8016c7e:	4413      	add	r3, r2
 8016c80:	009b      	lsls	r3, r3, #2
 8016c82:	440b      	add	r3, r1
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d10a      	bne.n	8016ca0 <vTaskSwitchContext+0xb0>
	__asm volatile
 8016c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c8e:	f383 8811 	msr	BASEPRI, r3
 8016c92:	f3bf 8f6f 	isb	sy
 8016c96:	f3bf 8f4f 	dsb	sy
 8016c9a:	607b      	str	r3, [r7, #4]
}
 8016c9c:	bf00      	nop
 8016c9e:	e7fe      	b.n	8016c9e <vTaskSwitchContext+0xae>
 8016ca0:	697a      	ldr	r2, [r7, #20]
 8016ca2:	4613      	mov	r3, r2
 8016ca4:	009b      	lsls	r3, r3, #2
 8016ca6:	4413      	add	r3, r2
 8016ca8:	009b      	lsls	r3, r3, #2
 8016caa:	4a16      	ldr	r2, [pc, #88]	; (8016d04 <vTaskSwitchContext+0x114>)
 8016cac:	4413      	add	r3, r2
 8016cae:	613b      	str	r3, [r7, #16]
 8016cb0:	693b      	ldr	r3, [r7, #16]
 8016cb2:	685b      	ldr	r3, [r3, #4]
 8016cb4:	685a      	ldr	r2, [r3, #4]
 8016cb6:	693b      	ldr	r3, [r7, #16]
 8016cb8:	605a      	str	r2, [r3, #4]
 8016cba:	693b      	ldr	r3, [r7, #16]
 8016cbc:	685a      	ldr	r2, [r3, #4]
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	3308      	adds	r3, #8
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	d104      	bne.n	8016cd0 <vTaskSwitchContext+0xe0>
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	685a      	ldr	r2, [r3, #4]
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	605a      	str	r2, [r3, #4]
 8016cd0:	693b      	ldr	r3, [r7, #16]
 8016cd2:	685b      	ldr	r3, [r3, #4]
 8016cd4:	68db      	ldr	r3, [r3, #12]
 8016cd6:	4a09      	ldr	r2, [pc, #36]	; (8016cfc <vTaskSwitchContext+0x10c>)
 8016cd8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016cda:	4b08      	ldr	r3, [pc, #32]	; (8016cfc <vTaskSwitchContext+0x10c>)
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	3358      	adds	r3, #88	; 0x58
 8016ce0:	4a09      	ldr	r2, [pc, #36]	; (8016d08 <vTaskSwitchContext+0x118>)
 8016ce2:	6013      	str	r3, [r2, #0]
}
 8016ce4:	bf00      	nop
 8016ce6:	3718      	adds	r7, #24
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}
 8016cec:	20002b7c 	.word	0x20002b7c
 8016cf0:	20002b68 	.word	0x20002b68
 8016cf4:	20002b84 	.word	0x20002b84
 8016cf8:	20002b80 	.word	0x20002b80
 8016cfc:	200029b4 	.word	0x200029b4
 8016d00:	20002b5c 	.word	0x20002b5c
 8016d04:	200029b8 	.word	0x200029b8
 8016d08:	20000164 	.word	0x20000164

08016d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b084      	sub	sp, #16
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
 8016d14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d10a      	bne.n	8016d32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d20:	f383 8811 	msr	BASEPRI, r3
 8016d24:	f3bf 8f6f 	isb	sy
 8016d28:	f3bf 8f4f 	dsb	sy
 8016d2c:	60fb      	str	r3, [r7, #12]
}
 8016d2e:	bf00      	nop
 8016d30:	e7fe      	b.n	8016d30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016d32:	4b07      	ldr	r3, [pc, #28]	; (8016d50 <vTaskPlaceOnEventList+0x44>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	3318      	adds	r3, #24
 8016d38:	4619      	mov	r1, r3
 8016d3a:	6878      	ldr	r0, [r7, #4]
 8016d3c:	f7fe fd7f 	bl	801583e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016d40:	2101      	movs	r1, #1
 8016d42:	6838      	ldr	r0, [r7, #0]
 8016d44:	f000 fc2c 	bl	80175a0 <prvAddCurrentTaskToDelayedList>
}
 8016d48:	bf00      	nop
 8016d4a:	3710      	adds	r7, #16
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	200029b4 	.word	0x200029b4

08016d54 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b086      	sub	sp, #24
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	60f8      	str	r0, [r7, #12]
 8016d5c:	60b9      	str	r1, [r7, #8]
 8016d5e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d10a      	bne.n	8016d7c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8016d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d6a:	f383 8811 	msr	BASEPRI, r3
 8016d6e:	f3bf 8f6f 	isb	sy
 8016d72:	f3bf 8f4f 	dsb	sy
 8016d76:	617b      	str	r3, [r7, #20]
}
 8016d78:	bf00      	nop
 8016d7a:	e7fe      	b.n	8016d7a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8016d7c:	4b11      	ldr	r3, [pc, #68]	; (8016dc4 <vTaskPlaceOnUnorderedEventList+0x70>)
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d10a      	bne.n	8016d9a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8016d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d88:	f383 8811 	msr	BASEPRI, r3
 8016d8c:	f3bf 8f6f 	isb	sy
 8016d90:	f3bf 8f4f 	dsb	sy
 8016d94:	613b      	str	r3, [r7, #16]
}
 8016d96:	bf00      	nop
 8016d98:	e7fe      	b.n	8016d98 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016d9a:	4b0b      	ldr	r3, [pc, #44]	; (8016dc8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	68ba      	ldr	r2, [r7, #8]
 8016da0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8016da4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016da6:	4b08      	ldr	r3, [pc, #32]	; (8016dc8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	3318      	adds	r3, #24
 8016dac:	4619      	mov	r1, r3
 8016dae:	68f8      	ldr	r0, [r7, #12]
 8016db0:	f7fe fd21 	bl	80157f6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016db4:	2101      	movs	r1, #1
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f000 fbf2 	bl	80175a0 <prvAddCurrentTaskToDelayedList>
}
 8016dbc:	bf00      	nop
 8016dbe:	3718      	adds	r7, #24
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	20002b7c 	.word	0x20002b7c
 8016dc8:	200029b4 	.word	0x200029b4

08016dcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b086      	sub	sp, #24
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	60f8      	str	r0, [r7, #12]
 8016dd4:	60b9      	str	r1, [r7, #8]
 8016dd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d10a      	bne.n	8016df4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de2:	f383 8811 	msr	BASEPRI, r3
 8016de6:	f3bf 8f6f 	isb	sy
 8016dea:	f3bf 8f4f 	dsb	sy
 8016dee:	617b      	str	r3, [r7, #20]
}
 8016df0:	bf00      	nop
 8016df2:	e7fe      	b.n	8016df2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016df4:	4b0a      	ldr	r3, [pc, #40]	; (8016e20 <vTaskPlaceOnEventListRestricted+0x54>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	3318      	adds	r3, #24
 8016dfa:	4619      	mov	r1, r3
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f7fe fcfa 	bl	80157f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d002      	beq.n	8016e0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016e08:	f04f 33ff 	mov.w	r3, #4294967295
 8016e0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016e0e:	6879      	ldr	r1, [r7, #4]
 8016e10:	68b8      	ldr	r0, [r7, #8]
 8016e12:	f000 fbc5 	bl	80175a0 <prvAddCurrentTaskToDelayedList>
	}
 8016e16:	bf00      	nop
 8016e18:	3718      	adds	r7, #24
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
 8016e1e:	bf00      	nop
 8016e20:	200029b4 	.word	0x200029b4

08016e24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b086      	sub	sp, #24
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	68db      	ldr	r3, [r3, #12]
 8016e30:	68db      	ldr	r3, [r3, #12]
 8016e32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016e34:	693b      	ldr	r3, [r7, #16]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d10a      	bne.n	8016e50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e3e:	f383 8811 	msr	BASEPRI, r3
 8016e42:	f3bf 8f6f 	isb	sy
 8016e46:	f3bf 8f4f 	dsb	sy
 8016e4a:	60fb      	str	r3, [r7, #12]
}
 8016e4c:	bf00      	nop
 8016e4e:	e7fe      	b.n	8016e4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016e50:	693b      	ldr	r3, [r7, #16]
 8016e52:	3318      	adds	r3, #24
 8016e54:	4618      	mov	r0, r3
 8016e56:	f7fe fd2b 	bl	80158b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e5a:	4b1d      	ldr	r3, [pc, #116]	; (8016ed0 <xTaskRemoveFromEventList+0xac>)
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d11c      	bne.n	8016e9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016e62:	693b      	ldr	r3, [r7, #16]
 8016e64:	3304      	adds	r3, #4
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7fe fd22 	bl	80158b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e70:	2201      	movs	r2, #1
 8016e72:	409a      	lsls	r2, r3
 8016e74:	4b17      	ldr	r3, [pc, #92]	; (8016ed4 <xTaskRemoveFromEventList+0xb0>)
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	4313      	orrs	r3, r2
 8016e7a:	4a16      	ldr	r2, [pc, #88]	; (8016ed4 <xTaskRemoveFromEventList+0xb0>)
 8016e7c:	6013      	str	r3, [r2, #0]
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e82:	4613      	mov	r3, r2
 8016e84:	009b      	lsls	r3, r3, #2
 8016e86:	4413      	add	r3, r2
 8016e88:	009b      	lsls	r3, r3, #2
 8016e8a:	4a13      	ldr	r2, [pc, #76]	; (8016ed8 <xTaskRemoveFromEventList+0xb4>)
 8016e8c:	441a      	add	r2, r3
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	3304      	adds	r3, #4
 8016e92:	4619      	mov	r1, r3
 8016e94:	4610      	mov	r0, r2
 8016e96:	f7fe fcae 	bl	80157f6 <vListInsertEnd>
 8016e9a:	e005      	b.n	8016ea8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016e9c:	693b      	ldr	r3, [r7, #16]
 8016e9e:	3318      	adds	r3, #24
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	480e      	ldr	r0, [pc, #56]	; (8016edc <xTaskRemoveFromEventList+0xb8>)
 8016ea4:	f7fe fca7 	bl	80157f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016eac:	4b0c      	ldr	r3, [pc, #48]	; (8016ee0 <xTaskRemoveFromEventList+0xbc>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eb2:	429a      	cmp	r2, r3
 8016eb4:	d905      	bls.n	8016ec2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016eba:	4b0a      	ldr	r3, [pc, #40]	; (8016ee4 <xTaskRemoveFromEventList+0xc0>)
 8016ebc:	2201      	movs	r2, #1
 8016ebe:	601a      	str	r2, [r3, #0]
 8016ec0:	e001      	b.n	8016ec6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016ec6:	697b      	ldr	r3, [r7, #20]
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3718      	adds	r7, #24
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	20002b7c 	.word	0x20002b7c
 8016ed4:	20002b5c 	.word	0x20002b5c
 8016ed8:	200029b8 	.word	0x200029b8
 8016edc:	20002b14 	.word	0x20002b14
 8016ee0:	200029b4 	.word	0x200029b4
 8016ee4:	20002b68 	.word	0x20002b68

08016ee8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b086      	sub	sp, #24
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
 8016ef0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8016ef2:	4b29      	ldr	r3, [pc, #164]	; (8016f98 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d10a      	bne.n	8016f10 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8016efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016efe:	f383 8811 	msr	BASEPRI, r3
 8016f02:	f3bf 8f6f 	isb	sy
 8016f06:	f3bf 8f4f 	dsb	sy
 8016f0a:	613b      	str	r3, [r7, #16]
}
 8016f0c:	bf00      	nop
 8016f0e:	e7fe      	b.n	8016f0e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	68db      	ldr	r3, [r3, #12]
 8016f1e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8016f20:	697b      	ldr	r3, [r7, #20]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d10a      	bne.n	8016f3c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8016f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f2a:	f383 8811 	msr	BASEPRI, r3
 8016f2e:	f3bf 8f6f 	isb	sy
 8016f32:	f3bf 8f4f 	dsb	sy
 8016f36:	60fb      	str	r3, [r7, #12]
}
 8016f38:	bf00      	nop
 8016f3a:	e7fe      	b.n	8016f3a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f7fe fcb7 	bl	80158b0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016f42:	697b      	ldr	r3, [r7, #20]
 8016f44:	3304      	adds	r3, #4
 8016f46:	4618      	mov	r0, r3
 8016f48:	f7fe fcb2 	bl	80158b0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8016f4c:	697b      	ldr	r3, [r7, #20]
 8016f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f50:	2201      	movs	r2, #1
 8016f52:	409a      	lsls	r2, r3
 8016f54:	4b11      	ldr	r3, [pc, #68]	; (8016f9c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	4313      	orrs	r3, r2
 8016f5a:	4a10      	ldr	r2, [pc, #64]	; (8016f9c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016f5c:	6013      	str	r3, [r2, #0]
 8016f5e:	697b      	ldr	r3, [r7, #20]
 8016f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f62:	4613      	mov	r3, r2
 8016f64:	009b      	lsls	r3, r3, #2
 8016f66:	4413      	add	r3, r2
 8016f68:	009b      	lsls	r3, r3, #2
 8016f6a:	4a0d      	ldr	r2, [pc, #52]	; (8016fa0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8016f6c:	441a      	add	r2, r3
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	3304      	adds	r3, #4
 8016f72:	4619      	mov	r1, r3
 8016f74:	4610      	mov	r0, r2
 8016f76:	f7fe fc3e 	bl	80157f6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016f7a:	697b      	ldr	r3, [r7, #20]
 8016f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f7e:	4b09      	ldr	r3, [pc, #36]	; (8016fa4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d902      	bls.n	8016f8e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8016f88:	4b07      	ldr	r3, [pc, #28]	; (8016fa8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8016f8a:	2201      	movs	r2, #1
 8016f8c:	601a      	str	r2, [r3, #0]
	}
}
 8016f8e:	bf00      	nop
 8016f90:	3718      	adds	r7, #24
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	20002b7c 	.word	0x20002b7c
 8016f9c:	20002b5c 	.word	0x20002b5c
 8016fa0:	200029b8 	.word	0x200029b8
 8016fa4:	200029b4 	.word	0x200029b4
 8016fa8:	20002b68 	.word	0x20002b68

08016fac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016fac:	b480      	push	{r7}
 8016fae:	b083      	sub	sp, #12
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016fb4:	4b06      	ldr	r3, [pc, #24]	; (8016fd0 <vTaskInternalSetTimeOutState+0x24>)
 8016fb6:	681a      	ldr	r2, [r3, #0]
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016fbc:	4b05      	ldr	r3, [pc, #20]	; (8016fd4 <vTaskInternalSetTimeOutState+0x28>)
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	605a      	str	r2, [r3, #4]
}
 8016fc4:	bf00      	nop
 8016fc6:	370c      	adds	r7, #12
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fce:	4770      	bx	lr
 8016fd0:	20002b6c 	.word	0x20002b6c
 8016fd4:	20002b58 	.word	0x20002b58

08016fd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b088      	sub	sp, #32
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d10a      	bne.n	8016ffe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fec:	f383 8811 	msr	BASEPRI, r3
 8016ff0:	f3bf 8f6f 	isb	sy
 8016ff4:	f3bf 8f4f 	dsb	sy
 8016ff8:	613b      	str	r3, [r7, #16]
}
 8016ffa:	bf00      	nop
 8016ffc:	e7fe      	b.n	8016ffc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d10a      	bne.n	801701a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017008:	f383 8811 	msr	BASEPRI, r3
 801700c:	f3bf 8f6f 	isb	sy
 8017010:	f3bf 8f4f 	dsb	sy
 8017014:	60fb      	str	r3, [r7, #12]
}
 8017016:	bf00      	nop
 8017018:	e7fe      	b.n	8017018 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801701a:	f000 ffc3 	bl	8017fa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801701e:	4b1d      	ldr	r3, [pc, #116]	; (8017094 <xTaskCheckForTimeOut+0xbc>)
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	685b      	ldr	r3, [r3, #4]
 8017028:	69ba      	ldr	r2, [r7, #24]
 801702a:	1ad3      	subs	r3, r2, r3
 801702c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017036:	d102      	bne.n	801703e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017038:	2300      	movs	r3, #0
 801703a:	61fb      	str	r3, [r7, #28]
 801703c:	e023      	b.n	8017086 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	681a      	ldr	r2, [r3, #0]
 8017042:	4b15      	ldr	r3, [pc, #84]	; (8017098 <xTaskCheckForTimeOut+0xc0>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	429a      	cmp	r2, r3
 8017048:	d007      	beq.n	801705a <xTaskCheckForTimeOut+0x82>
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	685b      	ldr	r3, [r3, #4]
 801704e:	69ba      	ldr	r2, [r7, #24]
 8017050:	429a      	cmp	r2, r3
 8017052:	d302      	bcc.n	801705a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017054:	2301      	movs	r3, #1
 8017056:	61fb      	str	r3, [r7, #28]
 8017058:	e015      	b.n	8017086 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801705a:	683b      	ldr	r3, [r7, #0]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	697a      	ldr	r2, [r7, #20]
 8017060:	429a      	cmp	r2, r3
 8017062:	d20b      	bcs.n	801707c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	681a      	ldr	r2, [r3, #0]
 8017068:	697b      	ldr	r3, [r7, #20]
 801706a:	1ad2      	subs	r2, r2, r3
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f7ff ff9b 	bl	8016fac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017076:	2300      	movs	r3, #0
 8017078:	61fb      	str	r3, [r7, #28]
 801707a:	e004      	b.n	8017086 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801707c:	683b      	ldr	r3, [r7, #0]
 801707e:	2200      	movs	r2, #0
 8017080:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017082:	2301      	movs	r3, #1
 8017084:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017086:	f000 ffbd 	bl	8018004 <vPortExitCritical>

	return xReturn;
 801708a:	69fb      	ldr	r3, [r7, #28]
}
 801708c:	4618      	mov	r0, r3
 801708e:	3720      	adds	r7, #32
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	20002b58 	.word	0x20002b58
 8017098:	20002b6c 	.word	0x20002b6c

0801709c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801709c:	b480      	push	{r7}
 801709e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80170a0:	4b03      	ldr	r3, [pc, #12]	; (80170b0 <vTaskMissedYield+0x14>)
 80170a2:	2201      	movs	r2, #1
 80170a4:	601a      	str	r2, [r3, #0]
}
 80170a6:	bf00      	nop
 80170a8:	46bd      	mov	sp, r7
 80170aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ae:	4770      	bx	lr
 80170b0:	20002b68 	.word	0x20002b68

080170b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b082      	sub	sp, #8
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80170bc:	f000 f852 	bl	8017164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80170c0:	4b06      	ldr	r3, [pc, #24]	; (80170dc <prvIdleTask+0x28>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	2b01      	cmp	r3, #1
 80170c6:	d9f9      	bls.n	80170bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80170c8:	4b05      	ldr	r3, [pc, #20]	; (80170e0 <prvIdleTask+0x2c>)
 80170ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170ce:	601a      	str	r2, [r3, #0]
 80170d0:	f3bf 8f4f 	dsb	sy
 80170d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80170d8:	e7f0      	b.n	80170bc <prvIdleTask+0x8>
 80170da:	bf00      	nop
 80170dc:	200029b8 	.word	0x200029b8
 80170e0:	e000ed04 	.word	0xe000ed04

080170e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b082      	sub	sp, #8
 80170e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80170ea:	2300      	movs	r3, #0
 80170ec:	607b      	str	r3, [r7, #4]
 80170ee:	e00c      	b.n	801710a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80170f0:	687a      	ldr	r2, [r7, #4]
 80170f2:	4613      	mov	r3, r2
 80170f4:	009b      	lsls	r3, r3, #2
 80170f6:	4413      	add	r3, r2
 80170f8:	009b      	lsls	r3, r3, #2
 80170fa:	4a12      	ldr	r2, [pc, #72]	; (8017144 <prvInitialiseTaskLists+0x60>)
 80170fc:	4413      	add	r3, r2
 80170fe:	4618      	mov	r0, r3
 8017100:	f7fe fb4c 	bl	801579c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	3301      	adds	r3, #1
 8017108:	607b      	str	r3, [r7, #4]
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	2b0e      	cmp	r3, #14
 801710e:	d9ef      	bls.n	80170f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017110:	480d      	ldr	r0, [pc, #52]	; (8017148 <prvInitialiseTaskLists+0x64>)
 8017112:	f7fe fb43 	bl	801579c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017116:	480d      	ldr	r0, [pc, #52]	; (801714c <prvInitialiseTaskLists+0x68>)
 8017118:	f7fe fb40 	bl	801579c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801711c:	480c      	ldr	r0, [pc, #48]	; (8017150 <prvInitialiseTaskLists+0x6c>)
 801711e:	f7fe fb3d 	bl	801579c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017122:	480c      	ldr	r0, [pc, #48]	; (8017154 <prvInitialiseTaskLists+0x70>)
 8017124:	f7fe fb3a 	bl	801579c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017128:	480b      	ldr	r0, [pc, #44]	; (8017158 <prvInitialiseTaskLists+0x74>)
 801712a:	f7fe fb37 	bl	801579c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801712e:	4b0b      	ldr	r3, [pc, #44]	; (801715c <prvInitialiseTaskLists+0x78>)
 8017130:	4a05      	ldr	r2, [pc, #20]	; (8017148 <prvInitialiseTaskLists+0x64>)
 8017132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017134:	4b0a      	ldr	r3, [pc, #40]	; (8017160 <prvInitialiseTaskLists+0x7c>)
 8017136:	4a05      	ldr	r2, [pc, #20]	; (801714c <prvInitialiseTaskLists+0x68>)
 8017138:	601a      	str	r2, [r3, #0]
}
 801713a:	bf00      	nop
 801713c:	3708      	adds	r7, #8
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
 8017142:	bf00      	nop
 8017144:	200029b8 	.word	0x200029b8
 8017148:	20002ae4 	.word	0x20002ae4
 801714c:	20002af8 	.word	0x20002af8
 8017150:	20002b14 	.word	0x20002b14
 8017154:	20002b28 	.word	0x20002b28
 8017158:	20002b40 	.word	0x20002b40
 801715c:	20002b0c 	.word	0x20002b0c
 8017160:	20002b10 	.word	0x20002b10

08017164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b082      	sub	sp, #8
 8017168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801716a:	e019      	b.n	80171a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801716c:	f000 ff1a 	bl	8017fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017170:	4b10      	ldr	r3, [pc, #64]	; (80171b4 <prvCheckTasksWaitingTermination+0x50>)
 8017172:	68db      	ldr	r3, [r3, #12]
 8017174:	68db      	ldr	r3, [r3, #12]
 8017176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	3304      	adds	r3, #4
 801717c:	4618      	mov	r0, r3
 801717e:	f7fe fb97 	bl	80158b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017182:	4b0d      	ldr	r3, [pc, #52]	; (80171b8 <prvCheckTasksWaitingTermination+0x54>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	3b01      	subs	r3, #1
 8017188:	4a0b      	ldr	r2, [pc, #44]	; (80171b8 <prvCheckTasksWaitingTermination+0x54>)
 801718a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801718c:	4b0b      	ldr	r3, [pc, #44]	; (80171bc <prvCheckTasksWaitingTermination+0x58>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	3b01      	subs	r3, #1
 8017192:	4a0a      	ldr	r2, [pc, #40]	; (80171bc <prvCheckTasksWaitingTermination+0x58>)
 8017194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017196:	f000 ff35 	bl	8018004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801719a:	6878      	ldr	r0, [r7, #4]
 801719c:	f000 f810 	bl	80171c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80171a0:	4b06      	ldr	r3, [pc, #24]	; (80171bc <prvCheckTasksWaitingTermination+0x58>)
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d1e1      	bne.n	801716c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80171a8:	bf00      	nop
 80171aa:	bf00      	nop
 80171ac:	3708      	adds	r7, #8
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	bf00      	nop
 80171b4:	20002b28 	.word	0x20002b28
 80171b8:	20002b54 	.word	0x20002b54
 80171bc:	20002b3c 	.word	0x20002b3c

080171c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b084      	sub	sp, #16
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	3358      	adds	r3, #88	; 0x58
 80171cc:	4618      	mov	r0, r3
 80171ce:	f002 fed3 	bl	8019f78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d108      	bne.n	80171ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171e0:	4618      	mov	r0, r3
 80171e2:	f001 f8cd 	bl	8018380 <vPortFree>
				vPortFree( pxTCB );
 80171e6:	6878      	ldr	r0, [r7, #4]
 80171e8:	f001 f8ca 	bl	8018380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80171ec:	e018      	b.n	8017220 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80171f4:	2b01      	cmp	r3, #1
 80171f6:	d103      	bne.n	8017200 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80171f8:	6878      	ldr	r0, [r7, #4]
 80171fa:	f001 f8c1 	bl	8018380 <vPortFree>
	}
 80171fe:	e00f      	b.n	8017220 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8017206:	2b02      	cmp	r3, #2
 8017208:	d00a      	beq.n	8017220 <prvDeleteTCB+0x60>
	__asm volatile
 801720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801720e:	f383 8811 	msr	BASEPRI, r3
 8017212:	f3bf 8f6f 	isb	sy
 8017216:	f3bf 8f4f 	dsb	sy
 801721a:	60fb      	str	r3, [r7, #12]
}
 801721c:	bf00      	nop
 801721e:	e7fe      	b.n	801721e <prvDeleteTCB+0x5e>
	}
 8017220:	bf00      	nop
 8017222:	3710      	adds	r7, #16
 8017224:	46bd      	mov	sp, r7
 8017226:	bd80      	pop	{r7, pc}

08017228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017228:	b480      	push	{r7}
 801722a:	b083      	sub	sp, #12
 801722c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801722e:	4b0c      	ldr	r3, [pc, #48]	; (8017260 <prvResetNextTaskUnblockTime+0x38>)
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d104      	bne.n	8017242 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017238:	4b0a      	ldr	r3, [pc, #40]	; (8017264 <prvResetNextTaskUnblockTime+0x3c>)
 801723a:	f04f 32ff 	mov.w	r2, #4294967295
 801723e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017240:	e008      	b.n	8017254 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017242:	4b07      	ldr	r3, [pc, #28]	; (8017260 <prvResetNextTaskUnblockTime+0x38>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	68db      	ldr	r3, [r3, #12]
 8017248:	68db      	ldr	r3, [r3, #12]
 801724a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	4a04      	ldr	r2, [pc, #16]	; (8017264 <prvResetNextTaskUnblockTime+0x3c>)
 8017252:	6013      	str	r3, [r2, #0]
}
 8017254:	bf00      	nop
 8017256:	370c      	adds	r7, #12
 8017258:	46bd      	mov	sp, r7
 801725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725e:	4770      	bx	lr
 8017260:	20002b0c 	.word	0x20002b0c
 8017264:	20002b74 	.word	0x20002b74

08017268 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017268:	b480      	push	{r7}
 801726a:	b083      	sub	sp, #12
 801726c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801726e:	4b0b      	ldr	r3, [pc, #44]	; (801729c <xTaskGetSchedulerState+0x34>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d102      	bne.n	801727c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017276:	2301      	movs	r3, #1
 8017278:	607b      	str	r3, [r7, #4]
 801727a:	e008      	b.n	801728e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801727c:	4b08      	ldr	r3, [pc, #32]	; (80172a0 <xTaskGetSchedulerState+0x38>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d102      	bne.n	801728a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017284:	2302      	movs	r3, #2
 8017286:	607b      	str	r3, [r7, #4]
 8017288:	e001      	b.n	801728e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801728a:	2300      	movs	r3, #0
 801728c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801728e:	687b      	ldr	r3, [r7, #4]
	}
 8017290:	4618      	mov	r0, r3
 8017292:	370c      	adds	r7, #12
 8017294:	46bd      	mov	sp, r7
 8017296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729a:	4770      	bx	lr
 801729c:	20002b60 	.word	0x20002b60
 80172a0:	20002b7c 	.word	0x20002b7c

080172a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b086      	sub	sp, #24
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80172b0:	2300      	movs	r3, #0
 80172b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d06e      	beq.n	8017398 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80172ba:	4b3a      	ldr	r3, [pc, #232]	; (80173a4 <xTaskPriorityDisinherit+0x100>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	693a      	ldr	r2, [r7, #16]
 80172c0:	429a      	cmp	r2, r3
 80172c2:	d00a      	beq.n	80172da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80172c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172c8:	f383 8811 	msr	BASEPRI, r3
 80172cc:	f3bf 8f6f 	isb	sy
 80172d0:	f3bf 8f4f 	dsb	sy
 80172d4:	60fb      	str	r3, [r7, #12]
}
 80172d6:	bf00      	nop
 80172d8:	e7fe      	b.n	80172d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80172da:	693b      	ldr	r3, [r7, #16]
 80172dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d10a      	bne.n	80172f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80172e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172e6:	f383 8811 	msr	BASEPRI, r3
 80172ea:	f3bf 8f6f 	isb	sy
 80172ee:	f3bf 8f4f 	dsb	sy
 80172f2:	60bb      	str	r3, [r7, #8]
}
 80172f4:	bf00      	nop
 80172f6:	e7fe      	b.n	80172f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80172f8:	693b      	ldr	r3, [r7, #16]
 80172fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172fc:	1e5a      	subs	r2, r3, #1
 80172fe:	693b      	ldr	r3, [r7, #16]
 8017300:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017302:	693b      	ldr	r3, [r7, #16]
 8017304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017306:	693b      	ldr	r3, [r7, #16]
 8017308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801730a:	429a      	cmp	r2, r3
 801730c:	d044      	beq.n	8017398 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801730e:	693b      	ldr	r3, [r7, #16]
 8017310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017312:	2b00      	cmp	r3, #0
 8017314:	d140      	bne.n	8017398 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017316:	693b      	ldr	r3, [r7, #16]
 8017318:	3304      	adds	r3, #4
 801731a:	4618      	mov	r0, r3
 801731c:	f7fe fac8 	bl	80158b0 <uxListRemove>
 8017320:	4603      	mov	r3, r0
 8017322:	2b00      	cmp	r3, #0
 8017324:	d115      	bne.n	8017352 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017326:	693b      	ldr	r3, [r7, #16]
 8017328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801732a:	491f      	ldr	r1, [pc, #124]	; (80173a8 <xTaskPriorityDisinherit+0x104>)
 801732c:	4613      	mov	r3, r2
 801732e:	009b      	lsls	r3, r3, #2
 8017330:	4413      	add	r3, r2
 8017332:	009b      	lsls	r3, r3, #2
 8017334:	440b      	add	r3, r1
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d10a      	bne.n	8017352 <xTaskPriorityDisinherit+0xae>
 801733c:	693b      	ldr	r3, [r7, #16]
 801733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017340:	2201      	movs	r2, #1
 8017342:	fa02 f303 	lsl.w	r3, r2, r3
 8017346:	43da      	mvns	r2, r3
 8017348:	4b18      	ldr	r3, [pc, #96]	; (80173ac <xTaskPriorityDisinherit+0x108>)
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	4013      	ands	r3, r2
 801734e:	4a17      	ldr	r2, [pc, #92]	; (80173ac <xTaskPriorityDisinherit+0x108>)
 8017350:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017352:	693b      	ldr	r3, [r7, #16]
 8017354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801735a:	693b      	ldr	r3, [r7, #16]
 801735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801735e:	f1c3 020f 	rsb	r2, r3, #15
 8017362:	693b      	ldr	r3, [r7, #16]
 8017364:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017366:	693b      	ldr	r3, [r7, #16]
 8017368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801736a:	2201      	movs	r2, #1
 801736c:	409a      	lsls	r2, r3
 801736e:	4b0f      	ldr	r3, [pc, #60]	; (80173ac <xTaskPriorityDisinherit+0x108>)
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	4313      	orrs	r3, r2
 8017374:	4a0d      	ldr	r2, [pc, #52]	; (80173ac <xTaskPriorityDisinherit+0x108>)
 8017376:	6013      	str	r3, [r2, #0]
 8017378:	693b      	ldr	r3, [r7, #16]
 801737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801737c:	4613      	mov	r3, r2
 801737e:	009b      	lsls	r3, r3, #2
 8017380:	4413      	add	r3, r2
 8017382:	009b      	lsls	r3, r3, #2
 8017384:	4a08      	ldr	r2, [pc, #32]	; (80173a8 <xTaskPriorityDisinherit+0x104>)
 8017386:	441a      	add	r2, r3
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	3304      	adds	r3, #4
 801738c:	4619      	mov	r1, r3
 801738e:	4610      	mov	r0, r2
 8017390:	f7fe fa31 	bl	80157f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017394:	2301      	movs	r3, #1
 8017396:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017398:	697b      	ldr	r3, [r7, #20]
	}
 801739a:	4618      	mov	r0, r3
 801739c:	3718      	adds	r7, #24
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	200029b4 	.word	0x200029b4
 80173a8:	200029b8 	.word	0x200029b8
 80173ac:	20002b5c 	.word	0x20002b5c

080173b0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80173b0:	b480      	push	{r7}
 80173b2:	b083      	sub	sp, #12
 80173b4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80173b6:	4b09      	ldr	r3, [pc, #36]	; (80173dc <uxTaskResetEventItemValue+0x2c>)
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	699b      	ldr	r3, [r3, #24]
 80173bc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80173be:	4b07      	ldr	r3, [pc, #28]	; (80173dc <uxTaskResetEventItemValue+0x2c>)
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173c4:	4b05      	ldr	r3, [pc, #20]	; (80173dc <uxTaskResetEventItemValue+0x2c>)
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	f1c2 020f 	rsb	r2, r2, #15
 80173cc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80173ce:	687b      	ldr	r3, [r7, #4]
}
 80173d0:	4618      	mov	r0, r3
 80173d2:	370c      	adds	r7, #12
 80173d4:	46bd      	mov	sp, r7
 80173d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173da:	4770      	bx	lr
 80173dc:	200029b4 	.word	0x200029b4

080173e0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b084      	sub	sp, #16
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
 80173e8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80173ea:	f000 fddb 	bl	8017fa4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80173ee:	4b20      	ldr	r3, [pc, #128]	; (8017470 <ulTaskNotifyTake+0x90>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d113      	bne.n	8017422 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80173fa:	4b1d      	ldr	r3, [pc, #116]	; (8017470 <ulTaskNotifyTake+0x90>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	2201      	movs	r2, #1
 8017400:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8017404:	683b      	ldr	r3, [r7, #0]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d00b      	beq.n	8017422 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801740a:	2101      	movs	r1, #1
 801740c:	6838      	ldr	r0, [r7, #0]
 801740e:	f000 f8c7 	bl	80175a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8017412:	4b18      	ldr	r3, [pc, #96]	; (8017474 <ulTaskNotifyTake+0x94>)
 8017414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017418:	601a      	str	r2, [r3, #0]
 801741a:	f3bf 8f4f 	dsb	sy
 801741e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017422:	f000 fdef 	bl	8018004 <vPortExitCritical>

		taskENTER_CRITICAL();
 8017426:	f000 fdbd 	bl	8017fa4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801742a:	4b11      	ldr	r3, [pc, #68]	; (8017470 <ulTaskNotifyTake+0x90>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017432:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d00e      	beq.n	8017458 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d005      	beq.n	801744c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8017440:	4b0b      	ldr	r3, [pc, #44]	; (8017470 <ulTaskNotifyTake+0x90>)
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	2200      	movs	r2, #0
 8017446:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 801744a:	e005      	b.n	8017458 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801744c:	4b08      	ldr	r3, [pc, #32]	; (8017470 <ulTaskNotifyTake+0x90>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	68fa      	ldr	r2, [r7, #12]
 8017452:	3a01      	subs	r2, #1
 8017454:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017458:	4b05      	ldr	r3, [pc, #20]	; (8017470 <ulTaskNotifyTake+0x90>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	2200      	movs	r2, #0
 801745e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 8017462:	f000 fdcf 	bl	8018004 <vPortExitCritical>

		return ulReturn;
 8017466:	68fb      	ldr	r3, [r7, #12]
	}
 8017468:	4618      	mov	r0, r3
 801746a:	3710      	adds	r7, #16
 801746c:	46bd      	mov	sp, r7
 801746e:	bd80      	pop	{r7, pc}
 8017470:	200029b4 	.word	0x200029b4
 8017474:	e000ed04 	.word	0xe000ed04

08017478 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017478:	b580      	push	{r7, lr}
 801747a:	b08a      	sub	sp, #40	; 0x28
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d10a      	bne.n	801749e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8017488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801748c:	f383 8811 	msr	BASEPRI, r3
 8017490:	f3bf 8f6f 	isb	sy
 8017494:	f3bf 8f4f 	dsb	sy
 8017498:	61bb      	str	r3, [r7, #24]
}
 801749a:	bf00      	nop
 801749c:	e7fe      	b.n	801749c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801749e:	f000 fe63 	bl	8018168 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80174a6:	f3ef 8211 	mrs	r2, BASEPRI
 80174aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ae:	f383 8811 	msr	BASEPRI, r3
 80174b2:	f3bf 8f6f 	isb	sy
 80174b6:	f3bf 8f4f 	dsb	sy
 80174ba:	617a      	str	r2, [r7, #20]
 80174bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80174be:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80174c0:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80174c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174c4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80174c8:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80174ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174cc:	2202      	movs	r2, #2
 80174ce:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80174d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80174d8:	1c5a      	adds	r2, r3, #1
 80174da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80174e0:	7ffb      	ldrb	r3, [r7, #31]
 80174e2:	2b01      	cmp	r3, #1
 80174e4:	d145      	bne.n	8017572 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80174e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d00a      	beq.n	8017504 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80174ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174f2:	f383 8811 	msr	BASEPRI, r3
 80174f6:	f3bf 8f6f 	isb	sy
 80174fa:	f3bf 8f4f 	dsb	sy
 80174fe:	60fb      	str	r3, [r7, #12]
}
 8017500:	bf00      	nop
 8017502:	e7fe      	b.n	8017502 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017504:	4b20      	ldr	r3, [pc, #128]	; (8017588 <vTaskNotifyGiveFromISR+0x110>)
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d11c      	bne.n	8017546 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801750e:	3304      	adds	r3, #4
 8017510:	4618      	mov	r0, r3
 8017512:	f7fe f9cd 	bl	80158b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801751a:	2201      	movs	r2, #1
 801751c:	409a      	lsls	r2, r3
 801751e:	4b1b      	ldr	r3, [pc, #108]	; (801758c <vTaskNotifyGiveFromISR+0x114>)
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	4313      	orrs	r3, r2
 8017524:	4a19      	ldr	r2, [pc, #100]	; (801758c <vTaskNotifyGiveFromISR+0x114>)
 8017526:	6013      	str	r3, [r2, #0]
 8017528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801752a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801752c:	4613      	mov	r3, r2
 801752e:	009b      	lsls	r3, r3, #2
 8017530:	4413      	add	r3, r2
 8017532:	009b      	lsls	r3, r3, #2
 8017534:	4a16      	ldr	r2, [pc, #88]	; (8017590 <vTaskNotifyGiveFromISR+0x118>)
 8017536:	441a      	add	r2, r3
 8017538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801753a:	3304      	adds	r3, #4
 801753c:	4619      	mov	r1, r3
 801753e:	4610      	mov	r0, r2
 8017540:	f7fe f959 	bl	80157f6 <vListInsertEnd>
 8017544:	e005      	b.n	8017552 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017548:	3318      	adds	r3, #24
 801754a:	4619      	mov	r1, r3
 801754c:	4811      	ldr	r0, [pc, #68]	; (8017594 <vTaskNotifyGiveFromISR+0x11c>)
 801754e:	f7fe f952 	bl	80157f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017556:	4b10      	ldr	r3, [pc, #64]	; (8017598 <vTaskNotifyGiveFromISR+0x120>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801755c:	429a      	cmp	r2, r3
 801755e:	d908      	bls.n	8017572 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d002      	beq.n	801756c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	2201      	movs	r2, #1
 801756a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801756c:	4b0b      	ldr	r3, [pc, #44]	; (801759c <vTaskNotifyGiveFromISR+0x124>)
 801756e:	2201      	movs	r2, #1
 8017570:	601a      	str	r2, [r3, #0]
 8017572:	6a3b      	ldr	r3, [r7, #32]
 8017574:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	f383 8811 	msr	BASEPRI, r3
}
 801757c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 801757e:	bf00      	nop
 8017580:	3728      	adds	r7, #40	; 0x28
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}
 8017586:	bf00      	nop
 8017588:	20002b7c 	.word	0x20002b7c
 801758c:	20002b5c 	.word	0x20002b5c
 8017590:	200029b8 	.word	0x200029b8
 8017594:	20002b14 	.word	0x20002b14
 8017598:	200029b4 	.word	0x200029b4
 801759c:	20002b68 	.word	0x20002b68

080175a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b084      	sub	sp, #16
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
 80175a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80175aa:	4b29      	ldr	r3, [pc, #164]	; (8017650 <prvAddCurrentTaskToDelayedList+0xb0>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80175b0:	4b28      	ldr	r3, [pc, #160]	; (8017654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	3304      	adds	r3, #4
 80175b6:	4618      	mov	r0, r3
 80175b8:	f7fe f97a 	bl	80158b0 <uxListRemove>
 80175bc:	4603      	mov	r3, r0
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d10b      	bne.n	80175da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80175c2:	4b24      	ldr	r3, [pc, #144]	; (8017654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175c8:	2201      	movs	r2, #1
 80175ca:	fa02 f303 	lsl.w	r3, r2, r3
 80175ce:	43da      	mvns	r2, r3
 80175d0:	4b21      	ldr	r3, [pc, #132]	; (8017658 <prvAddCurrentTaskToDelayedList+0xb8>)
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	4013      	ands	r3, r2
 80175d6:	4a20      	ldr	r2, [pc, #128]	; (8017658 <prvAddCurrentTaskToDelayedList+0xb8>)
 80175d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175e0:	d10a      	bne.n	80175f8 <prvAddCurrentTaskToDelayedList+0x58>
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d007      	beq.n	80175f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80175e8:	4b1a      	ldr	r3, [pc, #104]	; (8017654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	3304      	adds	r3, #4
 80175ee:	4619      	mov	r1, r3
 80175f0:	481a      	ldr	r0, [pc, #104]	; (801765c <prvAddCurrentTaskToDelayedList+0xbc>)
 80175f2:	f7fe f900 	bl	80157f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80175f6:	e026      	b.n	8017646 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80175f8:	68fa      	ldr	r2, [r7, #12]
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	4413      	add	r3, r2
 80175fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017600:	4b14      	ldr	r3, [pc, #80]	; (8017654 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	68ba      	ldr	r2, [r7, #8]
 8017606:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017608:	68ba      	ldr	r2, [r7, #8]
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	429a      	cmp	r2, r3
 801760e:	d209      	bcs.n	8017624 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017610:	4b13      	ldr	r3, [pc, #76]	; (8017660 <prvAddCurrentTaskToDelayedList+0xc0>)
 8017612:	681a      	ldr	r2, [r3, #0]
 8017614:	4b0f      	ldr	r3, [pc, #60]	; (8017654 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	3304      	adds	r3, #4
 801761a:	4619      	mov	r1, r3
 801761c:	4610      	mov	r0, r2
 801761e:	f7fe f90e 	bl	801583e <vListInsert>
}
 8017622:	e010      	b.n	8017646 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017624:	4b0f      	ldr	r3, [pc, #60]	; (8017664 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017626:	681a      	ldr	r2, [r3, #0]
 8017628:	4b0a      	ldr	r3, [pc, #40]	; (8017654 <prvAddCurrentTaskToDelayedList+0xb4>)
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	3304      	adds	r3, #4
 801762e:	4619      	mov	r1, r3
 8017630:	4610      	mov	r0, r2
 8017632:	f7fe f904 	bl	801583e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017636:	4b0c      	ldr	r3, [pc, #48]	; (8017668 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	68ba      	ldr	r2, [r7, #8]
 801763c:	429a      	cmp	r2, r3
 801763e:	d202      	bcs.n	8017646 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017640:	4a09      	ldr	r2, [pc, #36]	; (8017668 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017642:	68bb      	ldr	r3, [r7, #8]
 8017644:	6013      	str	r3, [r2, #0]
}
 8017646:	bf00      	nop
 8017648:	3710      	adds	r7, #16
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}
 801764e:	bf00      	nop
 8017650:	20002b58 	.word	0x20002b58
 8017654:	200029b4 	.word	0x200029b4
 8017658:	20002b5c 	.word	0x20002b5c
 801765c:	20002b40 	.word	0x20002b40
 8017660:	20002b10 	.word	0x20002b10
 8017664:	20002b0c 	.word	0x20002b0c
 8017668:	20002b74 	.word	0x20002b74

0801766c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b08a      	sub	sp, #40	; 0x28
 8017670:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017672:	2300      	movs	r3, #0
 8017674:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017676:	f000 fb07 	bl	8017c88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801767a:	4b1c      	ldr	r3, [pc, #112]	; (80176ec <xTimerCreateTimerTask+0x80>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d021      	beq.n	80176c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017682:	2300      	movs	r3, #0
 8017684:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017686:	2300      	movs	r3, #0
 8017688:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801768a:	1d3a      	adds	r2, r7, #4
 801768c:	f107 0108 	add.w	r1, r7, #8
 8017690:	f107 030c 	add.w	r3, r7, #12
 8017694:	4618      	mov	r0, r3
 8017696:	f7eb fccd 	bl	8003034 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801769a:	6879      	ldr	r1, [r7, #4]
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	68fa      	ldr	r2, [r7, #12]
 80176a0:	9202      	str	r2, [sp, #8]
 80176a2:	9301      	str	r3, [sp, #4]
 80176a4:	2302      	movs	r3, #2
 80176a6:	9300      	str	r3, [sp, #0]
 80176a8:	2300      	movs	r3, #0
 80176aa:	460a      	mov	r2, r1
 80176ac:	4910      	ldr	r1, [pc, #64]	; (80176f0 <xTimerCreateTimerTask+0x84>)
 80176ae:	4811      	ldr	r0, [pc, #68]	; (80176f4 <xTimerCreateTimerTask+0x88>)
 80176b0:	f7fe fe4e 	bl	8016350 <xTaskCreateStatic>
 80176b4:	4603      	mov	r3, r0
 80176b6:	4a10      	ldr	r2, [pc, #64]	; (80176f8 <xTimerCreateTimerTask+0x8c>)
 80176b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80176ba:	4b0f      	ldr	r3, [pc, #60]	; (80176f8 <xTimerCreateTimerTask+0x8c>)
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d001      	beq.n	80176c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80176c2:	2301      	movs	r3, #1
 80176c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80176c6:	697b      	ldr	r3, [r7, #20]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d10a      	bne.n	80176e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80176cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d0:	f383 8811 	msr	BASEPRI, r3
 80176d4:	f3bf 8f6f 	isb	sy
 80176d8:	f3bf 8f4f 	dsb	sy
 80176dc:	613b      	str	r3, [r7, #16]
}
 80176de:	bf00      	nop
 80176e0:	e7fe      	b.n	80176e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80176e2:	697b      	ldr	r3, [r7, #20]
}
 80176e4:	4618      	mov	r0, r3
 80176e6:	3718      	adds	r7, #24
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}
 80176ec:	20002bb8 	.word	0x20002bb8
 80176f0:	0801f620 	.word	0x0801f620
 80176f4:	08017831 	.word	0x08017831
 80176f8:	20002bbc 	.word	0x20002bbc

080176fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b08a      	sub	sp, #40	; 0x28
 8017700:	af00      	add	r7, sp, #0
 8017702:	60f8      	str	r0, [r7, #12]
 8017704:	60b9      	str	r1, [r7, #8]
 8017706:	607a      	str	r2, [r7, #4]
 8017708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801770a:	2300      	movs	r3, #0
 801770c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d10a      	bne.n	801772a <xTimerGenericCommand+0x2e>
	__asm volatile
 8017714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017718:	f383 8811 	msr	BASEPRI, r3
 801771c:	f3bf 8f6f 	isb	sy
 8017720:	f3bf 8f4f 	dsb	sy
 8017724:	623b      	str	r3, [r7, #32]
}
 8017726:	bf00      	nop
 8017728:	e7fe      	b.n	8017728 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801772a:	4b1a      	ldr	r3, [pc, #104]	; (8017794 <xTimerGenericCommand+0x98>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d02a      	beq.n	8017788 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017732:	68bb      	ldr	r3, [r7, #8]
 8017734:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801773e:	68bb      	ldr	r3, [r7, #8]
 8017740:	2b05      	cmp	r3, #5
 8017742:	dc18      	bgt.n	8017776 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017744:	f7ff fd90 	bl	8017268 <xTaskGetSchedulerState>
 8017748:	4603      	mov	r3, r0
 801774a:	2b02      	cmp	r3, #2
 801774c:	d109      	bne.n	8017762 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801774e:	4b11      	ldr	r3, [pc, #68]	; (8017794 <xTimerGenericCommand+0x98>)
 8017750:	6818      	ldr	r0, [r3, #0]
 8017752:	f107 0110 	add.w	r1, r7, #16
 8017756:	2300      	movs	r3, #0
 8017758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801775a:	f7fe fa11 	bl	8015b80 <xQueueGenericSend>
 801775e:	6278      	str	r0, [r7, #36]	; 0x24
 8017760:	e012      	b.n	8017788 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017762:	4b0c      	ldr	r3, [pc, #48]	; (8017794 <xTimerGenericCommand+0x98>)
 8017764:	6818      	ldr	r0, [r3, #0]
 8017766:	f107 0110 	add.w	r1, r7, #16
 801776a:	2300      	movs	r3, #0
 801776c:	2200      	movs	r2, #0
 801776e:	f7fe fa07 	bl	8015b80 <xQueueGenericSend>
 8017772:	6278      	str	r0, [r7, #36]	; 0x24
 8017774:	e008      	b.n	8017788 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017776:	4b07      	ldr	r3, [pc, #28]	; (8017794 <xTimerGenericCommand+0x98>)
 8017778:	6818      	ldr	r0, [r3, #0]
 801777a:	f107 0110 	add.w	r1, r7, #16
 801777e:	2300      	movs	r3, #0
 8017780:	683a      	ldr	r2, [r7, #0]
 8017782:	f7fe fafb 	bl	8015d7c <xQueueGenericSendFromISR>
 8017786:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801778a:	4618      	mov	r0, r3
 801778c:	3728      	adds	r7, #40	; 0x28
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}
 8017792:	bf00      	nop
 8017794:	20002bb8 	.word	0x20002bb8

08017798 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b088      	sub	sp, #32
 801779c:	af02      	add	r7, sp, #8
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177a2:	4b22      	ldr	r3, [pc, #136]	; (801782c <prvProcessExpiredTimer+0x94>)
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	68db      	ldr	r3, [r3, #12]
 80177a8:	68db      	ldr	r3, [r3, #12]
 80177aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80177ac:	697b      	ldr	r3, [r7, #20]
 80177ae:	3304      	adds	r3, #4
 80177b0:	4618      	mov	r0, r3
 80177b2:	f7fe f87d 	bl	80158b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80177b6:	697b      	ldr	r3, [r7, #20]
 80177b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80177bc:	f003 0304 	and.w	r3, r3, #4
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d022      	beq.n	801780a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80177c4:	697b      	ldr	r3, [r7, #20]
 80177c6:	699a      	ldr	r2, [r3, #24]
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	18d1      	adds	r1, r2, r3
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	683a      	ldr	r2, [r7, #0]
 80177d0:	6978      	ldr	r0, [r7, #20]
 80177d2:	f000 f8d1 	bl	8017978 <prvInsertTimerInActiveList>
 80177d6:	4603      	mov	r3, r0
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d01f      	beq.n	801781c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80177dc:	2300      	movs	r3, #0
 80177de:	9300      	str	r3, [sp, #0]
 80177e0:	2300      	movs	r3, #0
 80177e2:	687a      	ldr	r2, [r7, #4]
 80177e4:	2100      	movs	r1, #0
 80177e6:	6978      	ldr	r0, [r7, #20]
 80177e8:	f7ff ff88 	bl	80176fc <xTimerGenericCommand>
 80177ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80177ee:	693b      	ldr	r3, [r7, #16]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d113      	bne.n	801781c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80177f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f8:	f383 8811 	msr	BASEPRI, r3
 80177fc:	f3bf 8f6f 	isb	sy
 8017800:	f3bf 8f4f 	dsb	sy
 8017804:	60fb      	str	r3, [r7, #12]
}
 8017806:	bf00      	nop
 8017808:	e7fe      	b.n	8017808 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801780a:	697b      	ldr	r3, [r7, #20]
 801780c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017810:	f023 0301 	bic.w	r3, r3, #1
 8017814:	b2da      	uxtb	r2, r3
 8017816:	697b      	ldr	r3, [r7, #20]
 8017818:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801781c:	697b      	ldr	r3, [r7, #20]
 801781e:	6a1b      	ldr	r3, [r3, #32]
 8017820:	6978      	ldr	r0, [r7, #20]
 8017822:	4798      	blx	r3
}
 8017824:	bf00      	nop
 8017826:	3718      	adds	r7, #24
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}
 801782c:	20002bb0 	.word	0x20002bb0

08017830 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b084      	sub	sp, #16
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017838:	f107 0308 	add.w	r3, r7, #8
 801783c:	4618      	mov	r0, r3
 801783e:	f000 f857 	bl	80178f0 <prvGetNextExpireTime>
 8017842:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017844:	68bb      	ldr	r3, [r7, #8]
 8017846:	4619      	mov	r1, r3
 8017848:	68f8      	ldr	r0, [r7, #12]
 801784a:	f000 f803 	bl	8017854 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801784e:	f000 f8d5 	bl	80179fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017852:	e7f1      	b.n	8017838 <prvTimerTask+0x8>

08017854 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b084      	sub	sp, #16
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
 801785c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801785e:	f7ff f855 	bl	801690c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017862:	f107 0308 	add.w	r3, r7, #8
 8017866:	4618      	mov	r0, r3
 8017868:	f000 f866 	bl	8017938 <prvSampleTimeNow>
 801786c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d130      	bne.n	80178d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017874:	683b      	ldr	r3, [r7, #0]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d10a      	bne.n	8017890 <prvProcessTimerOrBlockTask+0x3c>
 801787a:	687a      	ldr	r2, [r7, #4]
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	429a      	cmp	r2, r3
 8017880:	d806      	bhi.n	8017890 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017882:	f7ff f851 	bl	8016928 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017886:	68f9      	ldr	r1, [r7, #12]
 8017888:	6878      	ldr	r0, [r7, #4]
 801788a:	f7ff ff85 	bl	8017798 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801788e:	e024      	b.n	80178da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017890:	683b      	ldr	r3, [r7, #0]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d008      	beq.n	80178a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017896:	4b13      	ldr	r3, [pc, #76]	; (80178e4 <prvProcessTimerOrBlockTask+0x90>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d101      	bne.n	80178a4 <prvProcessTimerOrBlockTask+0x50>
 80178a0:	2301      	movs	r3, #1
 80178a2:	e000      	b.n	80178a6 <prvProcessTimerOrBlockTask+0x52>
 80178a4:	2300      	movs	r3, #0
 80178a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80178a8:	4b0f      	ldr	r3, [pc, #60]	; (80178e8 <prvProcessTimerOrBlockTask+0x94>)
 80178aa:	6818      	ldr	r0, [r3, #0]
 80178ac:	687a      	ldr	r2, [r7, #4]
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	1ad3      	subs	r3, r2, r3
 80178b2:	683a      	ldr	r2, [r7, #0]
 80178b4:	4619      	mov	r1, r3
 80178b6:	f7fe fd17 	bl	80162e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80178ba:	f7ff f835 	bl	8016928 <xTaskResumeAll>
 80178be:	4603      	mov	r3, r0
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d10a      	bne.n	80178da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80178c4:	4b09      	ldr	r3, [pc, #36]	; (80178ec <prvProcessTimerOrBlockTask+0x98>)
 80178c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178ca:	601a      	str	r2, [r3, #0]
 80178cc:	f3bf 8f4f 	dsb	sy
 80178d0:	f3bf 8f6f 	isb	sy
}
 80178d4:	e001      	b.n	80178da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80178d6:	f7ff f827 	bl	8016928 <xTaskResumeAll>
}
 80178da:	bf00      	nop
 80178dc:	3710      	adds	r7, #16
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	20002bb4 	.word	0x20002bb4
 80178e8:	20002bb8 	.word	0x20002bb8
 80178ec:	e000ed04 	.word	0xe000ed04

080178f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80178f0:	b480      	push	{r7}
 80178f2:	b085      	sub	sp, #20
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80178f8:	4b0e      	ldr	r3, [pc, #56]	; (8017934 <prvGetNextExpireTime+0x44>)
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d101      	bne.n	8017906 <prvGetNextExpireTime+0x16>
 8017902:	2201      	movs	r2, #1
 8017904:	e000      	b.n	8017908 <prvGetNextExpireTime+0x18>
 8017906:	2200      	movs	r2, #0
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d105      	bne.n	8017920 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017914:	4b07      	ldr	r3, [pc, #28]	; (8017934 <prvGetNextExpireTime+0x44>)
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	68db      	ldr	r3, [r3, #12]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	60fb      	str	r3, [r7, #12]
 801791e:	e001      	b.n	8017924 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017920:	2300      	movs	r3, #0
 8017922:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017924:	68fb      	ldr	r3, [r7, #12]
}
 8017926:	4618      	mov	r0, r3
 8017928:	3714      	adds	r7, #20
 801792a:	46bd      	mov	sp, r7
 801792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017930:	4770      	bx	lr
 8017932:	bf00      	nop
 8017934:	20002bb0 	.word	0x20002bb0

08017938 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b084      	sub	sp, #16
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017940:	f7ff f88e 	bl	8016a60 <xTaskGetTickCount>
 8017944:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017946:	4b0b      	ldr	r3, [pc, #44]	; (8017974 <prvSampleTimeNow+0x3c>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	68fa      	ldr	r2, [r7, #12]
 801794c:	429a      	cmp	r2, r3
 801794e:	d205      	bcs.n	801795c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017950:	f000 f936 	bl	8017bc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2201      	movs	r2, #1
 8017958:	601a      	str	r2, [r3, #0]
 801795a:	e002      	b.n	8017962 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2200      	movs	r2, #0
 8017960:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017962:	4a04      	ldr	r2, [pc, #16]	; (8017974 <prvSampleTimeNow+0x3c>)
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017968:	68fb      	ldr	r3, [r7, #12]
}
 801796a:	4618      	mov	r0, r3
 801796c:	3710      	adds	r7, #16
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
 8017972:	bf00      	nop
 8017974:	20002bc0 	.word	0x20002bc0

08017978 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b086      	sub	sp, #24
 801797c:	af00      	add	r7, sp, #0
 801797e:	60f8      	str	r0, [r7, #12]
 8017980:	60b9      	str	r1, [r7, #8]
 8017982:	607a      	str	r2, [r7, #4]
 8017984:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017986:	2300      	movs	r3, #0
 8017988:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	68ba      	ldr	r2, [r7, #8]
 801798e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	68fa      	ldr	r2, [r7, #12]
 8017994:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017996:	68ba      	ldr	r2, [r7, #8]
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	429a      	cmp	r2, r3
 801799c:	d812      	bhi.n	80179c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801799e:	687a      	ldr	r2, [r7, #4]
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	1ad2      	subs	r2, r2, r3
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	699b      	ldr	r3, [r3, #24]
 80179a8:	429a      	cmp	r2, r3
 80179aa:	d302      	bcc.n	80179b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80179ac:	2301      	movs	r3, #1
 80179ae:	617b      	str	r3, [r7, #20]
 80179b0:	e01b      	b.n	80179ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80179b2:	4b10      	ldr	r3, [pc, #64]	; (80179f4 <prvInsertTimerInActiveList+0x7c>)
 80179b4:	681a      	ldr	r2, [r3, #0]
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	3304      	adds	r3, #4
 80179ba:	4619      	mov	r1, r3
 80179bc:	4610      	mov	r0, r2
 80179be:	f7fd ff3e 	bl	801583e <vListInsert>
 80179c2:	e012      	b.n	80179ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80179c4:	687a      	ldr	r2, [r7, #4]
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d206      	bcs.n	80179da <prvInsertTimerInActiveList+0x62>
 80179cc:	68ba      	ldr	r2, [r7, #8]
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	429a      	cmp	r2, r3
 80179d2:	d302      	bcc.n	80179da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80179d4:	2301      	movs	r3, #1
 80179d6:	617b      	str	r3, [r7, #20]
 80179d8:	e007      	b.n	80179ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80179da:	4b07      	ldr	r3, [pc, #28]	; (80179f8 <prvInsertTimerInActiveList+0x80>)
 80179dc:	681a      	ldr	r2, [r3, #0]
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	3304      	adds	r3, #4
 80179e2:	4619      	mov	r1, r3
 80179e4:	4610      	mov	r0, r2
 80179e6:	f7fd ff2a 	bl	801583e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80179ea:	697b      	ldr	r3, [r7, #20]
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3718      	adds	r7, #24
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}
 80179f4:	20002bb4 	.word	0x20002bb4
 80179f8:	20002bb0 	.word	0x20002bb0

080179fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b08e      	sub	sp, #56	; 0x38
 8017a00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017a02:	e0ca      	b.n	8017b9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	da18      	bge.n	8017a3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017a0a:	1d3b      	adds	r3, r7, #4
 8017a0c:	3304      	adds	r3, #4
 8017a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d10a      	bne.n	8017a2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a1a:	f383 8811 	msr	BASEPRI, r3
 8017a1e:	f3bf 8f6f 	isb	sy
 8017a22:	f3bf 8f4f 	dsb	sy
 8017a26:	61fb      	str	r3, [r7, #28]
}
 8017a28:	bf00      	nop
 8017a2a:	e7fe      	b.n	8017a2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a32:	6850      	ldr	r0, [r2, #4]
 8017a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a36:	6892      	ldr	r2, [r2, #8]
 8017a38:	4611      	mov	r1, r2
 8017a3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	f2c0 80ab 	blt.w	8017b9a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a4a:	695b      	ldr	r3, [r3, #20]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d004      	beq.n	8017a5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a52:	3304      	adds	r3, #4
 8017a54:	4618      	mov	r0, r3
 8017a56:	f7fd ff2b 	bl	80158b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017a5a:	463b      	mov	r3, r7
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f7ff ff6b 	bl	8017938 <prvSampleTimeNow>
 8017a62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2b09      	cmp	r3, #9
 8017a68:	f200 8096 	bhi.w	8017b98 <prvProcessReceivedCommands+0x19c>
 8017a6c:	a201      	add	r2, pc, #4	; (adr r2, 8017a74 <prvProcessReceivedCommands+0x78>)
 8017a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a72:	bf00      	nop
 8017a74:	08017a9d 	.word	0x08017a9d
 8017a78:	08017a9d 	.word	0x08017a9d
 8017a7c:	08017a9d 	.word	0x08017a9d
 8017a80:	08017b11 	.word	0x08017b11
 8017a84:	08017b25 	.word	0x08017b25
 8017a88:	08017b6f 	.word	0x08017b6f
 8017a8c:	08017a9d 	.word	0x08017a9d
 8017a90:	08017a9d 	.word	0x08017a9d
 8017a94:	08017b11 	.word	0x08017b11
 8017a98:	08017b25 	.word	0x08017b25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017aa2:	f043 0301 	orr.w	r3, r3, #1
 8017aa6:	b2da      	uxtb	r2, r3
 8017aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017aae:	68ba      	ldr	r2, [r7, #8]
 8017ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ab2:	699b      	ldr	r3, [r3, #24]
 8017ab4:	18d1      	adds	r1, r2, r3
 8017ab6:	68bb      	ldr	r3, [r7, #8]
 8017ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017abc:	f7ff ff5c 	bl	8017978 <prvInsertTimerInActiveList>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d069      	beq.n	8017b9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ac8:	6a1b      	ldr	r3, [r3, #32]
 8017aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017acc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ad4:	f003 0304 	and.w	r3, r3, #4
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d05e      	beq.n	8017b9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017adc:	68ba      	ldr	r2, [r7, #8]
 8017ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae0:	699b      	ldr	r3, [r3, #24]
 8017ae2:	441a      	add	r2, r3
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	9300      	str	r3, [sp, #0]
 8017ae8:	2300      	movs	r3, #0
 8017aea:	2100      	movs	r1, #0
 8017aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017aee:	f7ff fe05 	bl	80176fc <xTimerGenericCommand>
 8017af2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017af4:	6a3b      	ldr	r3, [r7, #32]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d14f      	bne.n	8017b9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017afe:	f383 8811 	msr	BASEPRI, r3
 8017b02:	f3bf 8f6f 	isb	sy
 8017b06:	f3bf 8f4f 	dsb	sy
 8017b0a:	61bb      	str	r3, [r7, #24]
}
 8017b0c:	bf00      	nop
 8017b0e:	e7fe      	b.n	8017b0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b16:	f023 0301 	bic.w	r3, r3, #1
 8017b1a:	b2da      	uxtb	r2, r3
 8017b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017b22:	e03a      	b.n	8017b9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b2a:	f043 0301 	orr.w	r3, r3, #1
 8017b2e:	b2da      	uxtb	r2, r3
 8017b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017b36:	68ba      	ldr	r2, [r7, #8]
 8017b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b3e:	699b      	ldr	r3, [r3, #24]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d10a      	bne.n	8017b5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b48:	f383 8811 	msr	BASEPRI, r3
 8017b4c:	f3bf 8f6f 	isb	sy
 8017b50:	f3bf 8f4f 	dsb	sy
 8017b54:	617b      	str	r3, [r7, #20]
}
 8017b56:	bf00      	nop
 8017b58:	e7fe      	b.n	8017b58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b5c:	699a      	ldr	r2, [r3, #24]
 8017b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b60:	18d1      	adds	r1, r2, r3
 8017b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b68:	f7ff ff06 	bl	8017978 <prvInsertTimerInActiveList>
					break;
 8017b6c:	e015      	b.n	8017b9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b74:	f003 0302 	and.w	r3, r3, #2
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d103      	bne.n	8017b84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b7e:	f000 fbff 	bl	8018380 <vPortFree>
 8017b82:	e00a      	b.n	8017b9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b8a:	f023 0301 	bic.w	r3, r3, #1
 8017b8e:	b2da      	uxtb	r2, r3
 8017b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017b96:	e000      	b.n	8017b9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8017b98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017b9a:	4b08      	ldr	r3, [pc, #32]	; (8017bbc <prvProcessReceivedCommands+0x1c0>)
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	1d39      	adds	r1, r7, #4
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7fe f986 	bl	8015eb4 <xQueueReceive>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	f47f af2a 	bne.w	8017a04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8017bb0:	bf00      	nop
 8017bb2:	bf00      	nop
 8017bb4:	3730      	adds	r7, #48	; 0x30
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}
 8017bba:	bf00      	nop
 8017bbc:	20002bb8 	.word	0x20002bb8

08017bc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b088      	sub	sp, #32
 8017bc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017bc6:	e048      	b.n	8017c5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017bc8:	4b2d      	ldr	r3, [pc, #180]	; (8017c80 <prvSwitchTimerLists+0xc0>)
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	68db      	ldr	r3, [r3, #12]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bd2:	4b2b      	ldr	r3, [pc, #172]	; (8017c80 <prvSwitchTimerLists+0xc0>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	68db      	ldr	r3, [r3, #12]
 8017bd8:	68db      	ldr	r3, [r3, #12]
 8017bda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	3304      	adds	r3, #4
 8017be0:	4618      	mov	r0, r3
 8017be2:	f7fd fe65 	bl	80158b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	6a1b      	ldr	r3, [r3, #32]
 8017bea:	68f8      	ldr	r0, [r7, #12]
 8017bec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017bf4:	f003 0304 	and.w	r3, r3, #4
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d02e      	beq.n	8017c5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	699b      	ldr	r3, [r3, #24]
 8017c00:	693a      	ldr	r2, [r7, #16]
 8017c02:	4413      	add	r3, r2
 8017c04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017c06:	68ba      	ldr	r2, [r7, #8]
 8017c08:	693b      	ldr	r3, [r7, #16]
 8017c0a:	429a      	cmp	r2, r3
 8017c0c:	d90e      	bls.n	8017c2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	68ba      	ldr	r2, [r7, #8]
 8017c12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	68fa      	ldr	r2, [r7, #12]
 8017c18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017c1a:	4b19      	ldr	r3, [pc, #100]	; (8017c80 <prvSwitchTimerLists+0xc0>)
 8017c1c:	681a      	ldr	r2, [r3, #0]
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	3304      	adds	r3, #4
 8017c22:	4619      	mov	r1, r3
 8017c24:	4610      	mov	r0, r2
 8017c26:	f7fd fe0a 	bl	801583e <vListInsert>
 8017c2a:	e016      	b.n	8017c5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	9300      	str	r3, [sp, #0]
 8017c30:	2300      	movs	r3, #0
 8017c32:	693a      	ldr	r2, [r7, #16]
 8017c34:	2100      	movs	r1, #0
 8017c36:	68f8      	ldr	r0, [r7, #12]
 8017c38:	f7ff fd60 	bl	80176fc <xTimerGenericCommand>
 8017c3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d10a      	bne.n	8017c5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c48:	f383 8811 	msr	BASEPRI, r3
 8017c4c:	f3bf 8f6f 	isb	sy
 8017c50:	f3bf 8f4f 	dsb	sy
 8017c54:	603b      	str	r3, [r7, #0]
}
 8017c56:	bf00      	nop
 8017c58:	e7fe      	b.n	8017c58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017c5a:	4b09      	ldr	r3, [pc, #36]	; (8017c80 <prvSwitchTimerLists+0xc0>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d1b1      	bne.n	8017bc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017c64:	4b06      	ldr	r3, [pc, #24]	; (8017c80 <prvSwitchTimerLists+0xc0>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017c6a:	4b06      	ldr	r3, [pc, #24]	; (8017c84 <prvSwitchTimerLists+0xc4>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	4a04      	ldr	r2, [pc, #16]	; (8017c80 <prvSwitchTimerLists+0xc0>)
 8017c70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017c72:	4a04      	ldr	r2, [pc, #16]	; (8017c84 <prvSwitchTimerLists+0xc4>)
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	6013      	str	r3, [r2, #0]
}
 8017c78:	bf00      	nop
 8017c7a:	3718      	adds	r7, #24
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}
 8017c80:	20002bb0 	.word	0x20002bb0
 8017c84:	20002bb4 	.word	0x20002bb4

08017c88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b082      	sub	sp, #8
 8017c8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017c8e:	f000 f989 	bl	8017fa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017c92:	4b15      	ldr	r3, [pc, #84]	; (8017ce8 <prvCheckForValidListAndQueue+0x60>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d120      	bne.n	8017cdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017c9a:	4814      	ldr	r0, [pc, #80]	; (8017cec <prvCheckForValidListAndQueue+0x64>)
 8017c9c:	f7fd fd7e 	bl	801579c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017ca0:	4813      	ldr	r0, [pc, #76]	; (8017cf0 <prvCheckForValidListAndQueue+0x68>)
 8017ca2:	f7fd fd7b 	bl	801579c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017ca6:	4b13      	ldr	r3, [pc, #76]	; (8017cf4 <prvCheckForValidListAndQueue+0x6c>)
 8017ca8:	4a10      	ldr	r2, [pc, #64]	; (8017cec <prvCheckForValidListAndQueue+0x64>)
 8017caa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017cac:	4b12      	ldr	r3, [pc, #72]	; (8017cf8 <prvCheckForValidListAndQueue+0x70>)
 8017cae:	4a10      	ldr	r2, [pc, #64]	; (8017cf0 <prvCheckForValidListAndQueue+0x68>)
 8017cb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	9300      	str	r3, [sp, #0]
 8017cb6:	4b11      	ldr	r3, [pc, #68]	; (8017cfc <prvCheckForValidListAndQueue+0x74>)
 8017cb8:	4a11      	ldr	r2, [pc, #68]	; (8017d00 <prvCheckForValidListAndQueue+0x78>)
 8017cba:	2110      	movs	r1, #16
 8017cbc:	200a      	movs	r0, #10
 8017cbe:	f7fd fe89 	bl	80159d4 <xQueueGenericCreateStatic>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	4a08      	ldr	r2, [pc, #32]	; (8017ce8 <prvCheckForValidListAndQueue+0x60>)
 8017cc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017cc8:	4b07      	ldr	r3, [pc, #28]	; (8017ce8 <prvCheckForValidListAndQueue+0x60>)
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d005      	beq.n	8017cdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017cd0:	4b05      	ldr	r3, [pc, #20]	; (8017ce8 <prvCheckForValidListAndQueue+0x60>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	490b      	ldr	r1, [pc, #44]	; (8017d04 <prvCheckForValidListAndQueue+0x7c>)
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fe fadc 	bl	8016294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017cdc:	f000 f992 	bl	8018004 <vPortExitCritical>
}
 8017ce0:	bf00      	nop
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	bd80      	pop	{r7, pc}
 8017ce6:	bf00      	nop
 8017ce8:	20002bb8 	.word	0x20002bb8
 8017cec:	20002b88 	.word	0x20002b88
 8017cf0:	20002b9c 	.word	0x20002b9c
 8017cf4:	20002bb0 	.word	0x20002bb0
 8017cf8:	20002bb4 	.word	0x20002bb4
 8017cfc:	20002c64 	.word	0x20002c64
 8017d00:	20002bc4 	.word	0x20002bc4
 8017d04:	0801f628 	.word	0x0801f628

08017d08 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b08a      	sub	sp, #40	; 0x28
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	60f8      	str	r0, [r7, #12]
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	607a      	str	r2, [r7, #4]
 8017d14:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8017d16:	f06f 0301 	mvn.w	r3, #1
 8017d1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017d28:	4b06      	ldr	r3, [pc, #24]	; (8017d44 <xTimerPendFunctionCallFromISR+0x3c>)
 8017d2a:	6818      	ldr	r0, [r3, #0]
 8017d2c:	f107 0114 	add.w	r1, r7, #20
 8017d30:	2300      	movs	r3, #0
 8017d32:	683a      	ldr	r2, [r7, #0]
 8017d34:	f7fe f822 	bl	8015d7c <xQueueGenericSendFromISR>
 8017d38:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8017d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	3728      	adds	r7, #40	; 0x28
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}
 8017d44:	20002bb8 	.word	0x20002bb8

08017d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017d48:	b480      	push	{r7}
 8017d4a:	b085      	sub	sp, #20
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	60f8      	str	r0, [r7, #12]
 8017d50:	60b9      	str	r1, [r7, #8]
 8017d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	3b04      	subs	r3, #4
 8017d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	3b04      	subs	r3, #4
 8017d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017d68:	68bb      	ldr	r3, [r7, #8]
 8017d6a:	f023 0201 	bic.w	r2, r3, #1
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	3b04      	subs	r3, #4
 8017d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017d78:	4a0c      	ldr	r2, [pc, #48]	; (8017dac <pxPortInitialiseStack+0x64>)
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	3b14      	subs	r3, #20
 8017d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017d84:	687a      	ldr	r2, [r7, #4]
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	3b04      	subs	r3, #4
 8017d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f06f 0202 	mvn.w	r2, #2
 8017d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	3b20      	subs	r3, #32
 8017d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017d9e:	68fb      	ldr	r3, [r7, #12]
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	3714      	adds	r7, #20
 8017da4:	46bd      	mov	sp, r7
 8017da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017daa:	4770      	bx	lr
 8017dac:	08017db1 	.word	0x08017db1

08017db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017db0:	b480      	push	{r7}
 8017db2:	b085      	sub	sp, #20
 8017db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017db6:	2300      	movs	r3, #0
 8017db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017dba:	4b12      	ldr	r3, [pc, #72]	; (8017e04 <prvTaskExitError+0x54>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dc2:	d00a      	beq.n	8017dda <prvTaskExitError+0x2a>
	__asm volatile
 8017dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dc8:	f383 8811 	msr	BASEPRI, r3
 8017dcc:	f3bf 8f6f 	isb	sy
 8017dd0:	f3bf 8f4f 	dsb	sy
 8017dd4:	60fb      	str	r3, [r7, #12]
}
 8017dd6:	bf00      	nop
 8017dd8:	e7fe      	b.n	8017dd8 <prvTaskExitError+0x28>
	__asm volatile
 8017dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dde:	f383 8811 	msr	BASEPRI, r3
 8017de2:	f3bf 8f6f 	isb	sy
 8017de6:	f3bf 8f4f 	dsb	sy
 8017dea:	60bb      	str	r3, [r7, #8]
}
 8017dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017dee:	bf00      	nop
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d0fc      	beq.n	8017df0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017df6:	bf00      	nop
 8017df8:	bf00      	nop
 8017dfa:	3714      	adds	r7, #20
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr
 8017e04:	200000a4 	.word	0x200000a4
	...

08017e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017e10:	4b07      	ldr	r3, [pc, #28]	; (8017e30 <pxCurrentTCBConst2>)
 8017e12:	6819      	ldr	r1, [r3, #0]
 8017e14:	6808      	ldr	r0, [r1, #0]
 8017e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e1a:	f380 8809 	msr	PSP, r0
 8017e1e:	f3bf 8f6f 	isb	sy
 8017e22:	f04f 0000 	mov.w	r0, #0
 8017e26:	f380 8811 	msr	BASEPRI, r0
 8017e2a:	4770      	bx	lr
 8017e2c:	f3af 8000 	nop.w

08017e30 <pxCurrentTCBConst2>:
 8017e30:	200029b4 	.word	0x200029b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017e34:	bf00      	nop
 8017e36:	bf00      	nop

08017e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017e38:	4808      	ldr	r0, [pc, #32]	; (8017e5c <prvPortStartFirstTask+0x24>)
 8017e3a:	6800      	ldr	r0, [r0, #0]
 8017e3c:	6800      	ldr	r0, [r0, #0]
 8017e3e:	f380 8808 	msr	MSP, r0
 8017e42:	f04f 0000 	mov.w	r0, #0
 8017e46:	f380 8814 	msr	CONTROL, r0
 8017e4a:	b662      	cpsie	i
 8017e4c:	b661      	cpsie	f
 8017e4e:	f3bf 8f4f 	dsb	sy
 8017e52:	f3bf 8f6f 	isb	sy
 8017e56:	df00      	svc	0
 8017e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017e5a:	bf00      	nop
 8017e5c:	e000ed08 	.word	0xe000ed08

08017e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b086      	sub	sp, #24
 8017e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017e66:	4b46      	ldr	r3, [pc, #280]	; (8017f80 <xPortStartScheduler+0x120>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	4a46      	ldr	r2, [pc, #280]	; (8017f84 <xPortStartScheduler+0x124>)
 8017e6c:	4293      	cmp	r3, r2
 8017e6e:	d10a      	bne.n	8017e86 <xPortStartScheduler+0x26>
	__asm volatile
 8017e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e74:	f383 8811 	msr	BASEPRI, r3
 8017e78:	f3bf 8f6f 	isb	sy
 8017e7c:	f3bf 8f4f 	dsb	sy
 8017e80:	613b      	str	r3, [r7, #16]
}
 8017e82:	bf00      	nop
 8017e84:	e7fe      	b.n	8017e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017e86:	4b3e      	ldr	r3, [pc, #248]	; (8017f80 <xPortStartScheduler+0x120>)
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	4a3f      	ldr	r2, [pc, #252]	; (8017f88 <xPortStartScheduler+0x128>)
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	d10a      	bne.n	8017ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8017e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e94:	f383 8811 	msr	BASEPRI, r3
 8017e98:	f3bf 8f6f 	isb	sy
 8017e9c:	f3bf 8f4f 	dsb	sy
 8017ea0:	60fb      	str	r3, [r7, #12]
}
 8017ea2:	bf00      	nop
 8017ea4:	e7fe      	b.n	8017ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017ea6:	4b39      	ldr	r3, [pc, #228]	; (8017f8c <xPortStartScheduler+0x12c>)
 8017ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017eaa:	697b      	ldr	r3, [r7, #20]
 8017eac:	781b      	ldrb	r3, [r3, #0]
 8017eae:	b2db      	uxtb	r3, r3
 8017eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017eb2:	697b      	ldr	r3, [r7, #20]
 8017eb4:	22ff      	movs	r2, #255	; 0xff
 8017eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017eb8:	697b      	ldr	r3, [r7, #20]
 8017eba:	781b      	ldrb	r3, [r3, #0]
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017ec0:	78fb      	ldrb	r3, [r7, #3]
 8017ec2:	b2db      	uxtb	r3, r3
 8017ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017ec8:	b2da      	uxtb	r2, r3
 8017eca:	4b31      	ldr	r3, [pc, #196]	; (8017f90 <xPortStartScheduler+0x130>)
 8017ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017ece:	4b31      	ldr	r3, [pc, #196]	; (8017f94 <xPortStartScheduler+0x134>)
 8017ed0:	2207      	movs	r2, #7
 8017ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017ed4:	e009      	b.n	8017eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017ed6:	4b2f      	ldr	r3, [pc, #188]	; (8017f94 <xPortStartScheduler+0x134>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	3b01      	subs	r3, #1
 8017edc:	4a2d      	ldr	r2, [pc, #180]	; (8017f94 <xPortStartScheduler+0x134>)
 8017ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017ee0:	78fb      	ldrb	r3, [r7, #3]
 8017ee2:	b2db      	uxtb	r3, r3
 8017ee4:	005b      	lsls	r3, r3, #1
 8017ee6:	b2db      	uxtb	r3, r3
 8017ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017eea:	78fb      	ldrb	r3, [r7, #3]
 8017eec:	b2db      	uxtb	r3, r3
 8017eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017ef2:	2b80      	cmp	r3, #128	; 0x80
 8017ef4:	d0ef      	beq.n	8017ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017ef6:	4b27      	ldr	r3, [pc, #156]	; (8017f94 <xPortStartScheduler+0x134>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	f1c3 0307 	rsb	r3, r3, #7
 8017efe:	2b04      	cmp	r3, #4
 8017f00:	d00a      	beq.n	8017f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8017f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f06:	f383 8811 	msr	BASEPRI, r3
 8017f0a:	f3bf 8f6f 	isb	sy
 8017f0e:	f3bf 8f4f 	dsb	sy
 8017f12:	60bb      	str	r3, [r7, #8]
}
 8017f14:	bf00      	nop
 8017f16:	e7fe      	b.n	8017f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017f18:	4b1e      	ldr	r3, [pc, #120]	; (8017f94 <xPortStartScheduler+0x134>)
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	021b      	lsls	r3, r3, #8
 8017f1e:	4a1d      	ldr	r2, [pc, #116]	; (8017f94 <xPortStartScheduler+0x134>)
 8017f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017f22:	4b1c      	ldr	r3, [pc, #112]	; (8017f94 <xPortStartScheduler+0x134>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017f2a:	4a1a      	ldr	r2, [pc, #104]	; (8017f94 <xPortStartScheduler+0x134>)
 8017f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	b2da      	uxtb	r2, r3
 8017f32:	697b      	ldr	r3, [r7, #20]
 8017f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017f36:	4b18      	ldr	r3, [pc, #96]	; (8017f98 <xPortStartScheduler+0x138>)
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	4a17      	ldr	r2, [pc, #92]	; (8017f98 <xPortStartScheduler+0x138>)
 8017f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017f42:	4b15      	ldr	r3, [pc, #84]	; (8017f98 <xPortStartScheduler+0x138>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	4a14      	ldr	r2, [pc, #80]	; (8017f98 <xPortStartScheduler+0x138>)
 8017f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017f4e:	f000 f8dd 	bl	801810c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017f52:	4b12      	ldr	r3, [pc, #72]	; (8017f9c <xPortStartScheduler+0x13c>)
 8017f54:	2200      	movs	r2, #0
 8017f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017f58:	f000 f8fc 	bl	8018154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017f5c:	4b10      	ldr	r3, [pc, #64]	; (8017fa0 <xPortStartScheduler+0x140>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	4a0f      	ldr	r2, [pc, #60]	; (8017fa0 <xPortStartScheduler+0x140>)
 8017f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017f68:	f7ff ff66 	bl	8017e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017f6c:	f7fe fe40 	bl	8016bf0 <vTaskSwitchContext>
	prvTaskExitError();
 8017f70:	f7ff ff1e 	bl	8017db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017f74:	2300      	movs	r3, #0
}
 8017f76:	4618      	mov	r0, r3
 8017f78:	3718      	adds	r7, #24
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd80      	pop	{r7, pc}
 8017f7e:	bf00      	nop
 8017f80:	e000ed00 	.word	0xe000ed00
 8017f84:	410fc271 	.word	0x410fc271
 8017f88:	410fc270 	.word	0x410fc270
 8017f8c:	e000e400 	.word	0xe000e400
 8017f90:	20002cb4 	.word	0x20002cb4
 8017f94:	20002cb8 	.word	0x20002cb8
 8017f98:	e000ed20 	.word	0xe000ed20
 8017f9c:	200000a4 	.word	0x200000a4
 8017fa0:	e000ef34 	.word	0xe000ef34

08017fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017fa4:	b480      	push	{r7}
 8017fa6:	b083      	sub	sp, #12
 8017fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8017faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fae:	f383 8811 	msr	BASEPRI, r3
 8017fb2:	f3bf 8f6f 	isb	sy
 8017fb6:	f3bf 8f4f 	dsb	sy
 8017fba:	607b      	str	r3, [r7, #4]
}
 8017fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017fbe:	4b0f      	ldr	r3, [pc, #60]	; (8017ffc <vPortEnterCritical+0x58>)
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	3301      	adds	r3, #1
 8017fc4:	4a0d      	ldr	r2, [pc, #52]	; (8017ffc <vPortEnterCritical+0x58>)
 8017fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017fc8:	4b0c      	ldr	r3, [pc, #48]	; (8017ffc <vPortEnterCritical+0x58>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	2b01      	cmp	r3, #1
 8017fce:	d10f      	bne.n	8017ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017fd0:	4b0b      	ldr	r3, [pc, #44]	; (8018000 <vPortEnterCritical+0x5c>)
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	b2db      	uxtb	r3, r3
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d00a      	beq.n	8017ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8017fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fde:	f383 8811 	msr	BASEPRI, r3
 8017fe2:	f3bf 8f6f 	isb	sy
 8017fe6:	f3bf 8f4f 	dsb	sy
 8017fea:	603b      	str	r3, [r7, #0]
}
 8017fec:	bf00      	nop
 8017fee:	e7fe      	b.n	8017fee <vPortEnterCritical+0x4a>
	}
}
 8017ff0:	bf00      	nop
 8017ff2:	370c      	adds	r7, #12
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffa:	4770      	bx	lr
 8017ffc:	200000a4 	.word	0x200000a4
 8018000:	e000ed04 	.word	0xe000ed04

08018004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018004:	b480      	push	{r7}
 8018006:	b083      	sub	sp, #12
 8018008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801800a:	4b12      	ldr	r3, [pc, #72]	; (8018054 <vPortExitCritical+0x50>)
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d10a      	bne.n	8018028 <vPortExitCritical+0x24>
	__asm volatile
 8018012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018016:	f383 8811 	msr	BASEPRI, r3
 801801a:	f3bf 8f6f 	isb	sy
 801801e:	f3bf 8f4f 	dsb	sy
 8018022:	607b      	str	r3, [r7, #4]
}
 8018024:	bf00      	nop
 8018026:	e7fe      	b.n	8018026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018028:	4b0a      	ldr	r3, [pc, #40]	; (8018054 <vPortExitCritical+0x50>)
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	3b01      	subs	r3, #1
 801802e:	4a09      	ldr	r2, [pc, #36]	; (8018054 <vPortExitCritical+0x50>)
 8018030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018032:	4b08      	ldr	r3, [pc, #32]	; (8018054 <vPortExitCritical+0x50>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d105      	bne.n	8018046 <vPortExitCritical+0x42>
 801803a:	2300      	movs	r3, #0
 801803c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801803e:	683b      	ldr	r3, [r7, #0]
 8018040:	f383 8811 	msr	BASEPRI, r3
}
 8018044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018046:	bf00      	nop
 8018048:	370c      	adds	r7, #12
 801804a:	46bd      	mov	sp, r7
 801804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018050:	4770      	bx	lr
 8018052:	bf00      	nop
 8018054:	200000a4 	.word	0x200000a4
	...

08018060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018060:	f3ef 8009 	mrs	r0, PSP
 8018064:	f3bf 8f6f 	isb	sy
 8018068:	4b15      	ldr	r3, [pc, #84]	; (80180c0 <pxCurrentTCBConst>)
 801806a:	681a      	ldr	r2, [r3, #0]
 801806c:	f01e 0f10 	tst.w	lr, #16
 8018070:	bf08      	it	eq
 8018072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801807a:	6010      	str	r0, [r2, #0]
 801807c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018084:	f380 8811 	msr	BASEPRI, r0
 8018088:	f3bf 8f4f 	dsb	sy
 801808c:	f3bf 8f6f 	isb	sy
 8018090:	f7fe fdae 	bl	8016bf0 <vTaskSwitchContext>
 8018094:	f04f 0000 	mov.w	r0, #0
 8018098:	f380 8811 	msr	BASEPRI, r0
 801809c:	bc09      	pop	{r0, r3}
 801809e:	6819      	ldr	r1, [r3, #0]
 80180a0:	6808      	ldr	r0, [r1, #0]
 80180a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180a6:	f01e 0f10 	tst.w	lr, #16
 80180aa:	bf08      	it	eq
 80180ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80180b0:	f380 8809 	msr	PSP, r0
 80180b4:	f3bf 8f6f 	isb	sy
 80180b8:	4770      	bx	lr
 80180ba:	bf00      	nop
 80180bc:	f3af 8000 	nop.w

080180c0 <pxCurrentTCBConst>:
 80180c0:	200029b4 	.word	0x200029b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80180c4:	bf00      	nop
 80180c6:	bf00      	nop

080180c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b082      	sub	sp, #8
 80180cc:	af00      	add	r7, sp, #0
	__asm volatile
 80180ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180d2:	f383 8811 	msr	BASEPRI, r3
 80180d6:	f3bf 8f6f 	isb	sy
 80180da:	f3bf 8f4f 	dsb	sy
 80180de:	607b      	str	r3, [r7, #4]
}
 80180e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80180e2:	f7fe fccd 	bl	8016a80 <xTaskIncrementTick>
 80180e6:	4603      	mov	r3, r0
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d003      	beq.n	80180f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80180ec:	4b06      	ldr	r3, [pc, #24]	; (8018108 <SysTick_Handler+0x40>)
 80180ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180f2:	601a      	str	r2, [r3, #0]
 80180f4:	2300      	movs	r3, #0
 80180f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	f383 8811 	msr	BASEPRI, r3
}
 80180fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018100:	bf00      	nop
 8018102:	3708      	adds	r7, #8
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}
 8018108:	e000ed04 	.word	0xe000ed04

0801810c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801810c:	b480      	push	{r7}
 801810e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018110:	4b0b      	ldr	r3, [pc, #44]	; (8018140 <vPortSetupTimerInterrupt+0x34>)
 8018112:	2200      	movs	r2, #0
 8018114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018116:	4b0b      	ldr	r3, [pc, #44]	; (8018144 <vPortSetupTimerInterrupt+0x38>)
 8018118:	2200      	movs	r2, #0
 801811a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801811c:	4b0a      	ldr	r3, [pc, #40]	; (8018148 <vPortSetupTimerInterrupt+0x3c>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	4a0a      	ldr	r2, [pc, #40]	; (801814c <vPortSetupTimerInterrupt+0x40>)
 8018122:	fba2 2303 	umull	r2, r3, r2, r3
 8018126:	099b      	lsrs	r3, r3, #6
 8018128:	4a09      	ldr	r2, [pc, #36]	; (8018150 <vPortSetupTimerInterrupt+0x44>)
 801812a:	3b01      	subs	r3, #1
 801812c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801812e:	4b04      	ldr	r3, [pc, #16]	; (8018140 <vPortSetupTimerInterrupt+0x34>)
 8018130:	2207      	movs	r2, #7
 8018132:	601a      	str	r2, [r3, #0]
}
 8018134:	bf00      	nop
 8018136:	46bd      	mov	sp, r7
 8018138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801813c:	4770      	bx	lr
 801813e:	bf00      	nop
 8018140:	e000e010 	.word	0xe000e010
 8018144:	e000e018 	.word	0xe000e018
 8018148:	20000004 	.word	0x20000004
 801814c:	10624dd3 	.word	0x10624dd3
 8018150:	e000e014 	.word	0xe000e014

08018154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018164 <vPortEnableVFP+0x10>
 8018158:	6801      	ldr	r1, [r0, #0]
 801815a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801815e:	6001      	str	r1, [r0, #0]
 8018160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018162:	bf00      	nop
 8018164:	e000ed88 	.word	0xe000ed88

08018168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018168:	b480      	push	{r7}
 801816a:	b085      	sub	sp, #20
 801816c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801816e:	f3ef 8305 	mrs	r3, IPSR
 8018172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	2b0f      	cmp	r3, #15
 8018178:	d914      	bls.n	80181a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801817a:	4a17      	ldr	r2, [pc, #92]	; (80181d8 <vPortValidateInterruptPriority+0x70>)
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	4413      	add	r3, r2
 8018180:	781b      	ldrb	r3, [r3, #0]
 8018182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018184:	4b15      	ldr	r3, [pc, #84]	; (80181dc <vPortValidateInterruptPriority+0x74>)
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	7afa      	ldrb	r2, [r7, #11]
 801818a:	429a      	cmp	r2, r3
 801818c:	d20a      	bcs.n	80181a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018192:	f383 8811 	msr	BASEPRI, r3
 8018196:	f3bf 8f6f 	isb	sy
 801819a:	f3bf 8f4f 	dsb	sy
 801819e:	607b      	str	r3, [r7, #4]
}
 80181a0:	bf00      	nop
 80181a2:	e7fe      	b.n	80181a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80181a4:	4b0e      	ldr	r3, [pc, #56]	; (80181e0 <vPortValidateInterruptPriority+0x78>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80181ac:	4b0d      	ldr	r3, [pc, #52]	; (80181e4 <vPortValidateInterruptPriority+0x7c>)
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	429a      	cmp	r2, r3
 80181b2:	d90a      	bls.n	80181ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80181b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b8:	f383 8811 	msr	BASEPRI, r3
 80181bc:	f3bf 8f6f 	isb	sy
 80181c0:	f3bf 8f4f 	dsb	sy
 80181c4:	603b      	str	r3, [r7, #0]
}
 80181c6:	bf00      	nop
 80181c8:	e7fe      	b.n	80181c8 <vPortValidateInterruptPriority+0x60>
	}
 80181ca:	bf00      	nop
 80181cc:	3714      	adds	r7, #20
 80181ce:	46bd      	mov	sp, r7
 80181d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d4:	4770      	bx	lr
 80181d6:	bf00      	nop
 80181d8:	e000e3f0 	.word	0xe000e3f0
 80181dc:	20002cb4 	.word	0x20002cb4
 80181e0:	e000ed0c 	.word	0xe000ed0c
 80181e4:	20002cb8 	.word	0x20002cb8

080181e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b08a      	sub	sp, #40	; 0x28
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80181f0:	2300      	movs	r3, #0
 80181f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80181f4:	f7fe fb8a 	bl	801690c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80181f8:	4b5b      	ldr	r3, [pc, #364]	; (8018368 <pvPortMalloc+0x180>)
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d101      	bne.n	8018204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018200:	f000 f920 	bl	8018444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018204:	4b59      	ldr	r3, [pc, #356]	; (801836c <pvPortMalloc+0x184>)
 8018206:	681a      	ldr	r2, [r3, #0]
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	4013      	ands	r3, r2
 801820c:	2b00      	cmp	r3, #0
 801820e:	f040 8093 	bne.w	8018338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d01d      	beq.n	8018254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018218:	2208      	movs	r2, #8
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	4413      	add	r3, r2
 801821e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f003 0307 	and.w	r3, r3, #7
 8018226:	2b00      	cmp	r3, #0
 8018228:	d014      	beq.n	8018254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	f023 0307 	bic.w	r3, r3, #7
 8018230:	3308      	adds	r3, #8
 8018232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f003 0307 	and.w	r3, r3, #7
 801823a:	2b00      	cmp	r3, #0
 801823c:	d00a      	beq.n	8018254 <pvPortMalloc+0x6c>
	__asm volatile
 801823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018242:	f383 8811 	msr	BASEPRI, r3
 8018246:	f3bf 8f6f 	isb	sy
 801824a:	f3bf 8f4f 	dsb	sy
 801824e:	617b      	str	r3, [r7, #20]
}
 8018250:	bf00      	nop
 8018252:	e7fe      	b.n	8018252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d06e      	beq.n	8018338 <pvPortMalloc+0x150>
 801825a:	4b45      	ldr	r3, [pc, #276]	; (8018370 <pvPortMalloc+0x188>)
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	687a      	ldr	r2, [r7, #4]
 8018260:	429a      	cmp	r2, r3
 8018262:	d869      	bhi.n	8018338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018264:	4b43      	ldr	r3, [pc, #268]	; (8018374 <pvPortMalloc+0x18c>)
 8018266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018268:	4b42      	ldr	r3, [pc, #264]	; (8018374 <pvPortMalloc+0x18c>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801826e:	e004      	b.n	801827a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801827c:	685b      	ldr	r3, [r3, #4]
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	429a      	cmp	r2, r3
 8018282:	d903      	bls.n	801828c <pvPortMalloc+0xa4>
 8018284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d1f1      	bne.n	8018270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801828c:	4b36      	ldr	r3, [pc, #216]	; (8018368 <pvPortMalloc+0x180>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018292:	429a      	cmp	r2, r3
 8018294:	d050      	beq.n	8018338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018296:	6a3b      	ldr	r3, [r7, #32]
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	2208      	movs	r2, #8
 801829c:	4413      	add	r3, r2
 801829e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80182a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a2:	681a      	ldr	r2, [r3, #0]
 80182a4:	6a3b      	ldr	r3, [r7, #32]
 80182a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80182a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182aa:	685a      	ldr	r2, [r3, #4]
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	1ad2      	subs	r2, r2, r3
 80182b0:	2308      	movs	r3, #8
 80182b2:	005b      	lsls	r3, r3, #1
 80182b4:	429a      	cmp	r2, r3
 80182b6:	d91f      	bls.n	80182f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80182b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	4413      	add	r3, r2
 80182be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80182c0:	69bb      	ldr	r3, [r7, #24]
 80182c2:	f003 0307 	and.w	r3, r3, #7
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d00a      	beq.n	80182e0 <pvPortMalloc+0xf8>
	__asm volatile
 80182ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ce:	f383 8811 	msr	BASEPRI, r3
 80182d2:	f3bf 8f6f 	isb	sy
 80182d6:	f3bf 8f4f 	dsb	sy
 80182da:	613b      	str	r3, [r7, #16]
}
 80182dc:	bf00      	nop
 80182de:	e7fe      	b.n	80182de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80182e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182e2:	685a      	ldr	r2, [r3, #4]
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	1ad2      	subs	r2, r2, r3
 80182e8:	69bb      	ldr	r3, [r7, #24]
 80182ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80182ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ee:	687a      	ldr	r2, [r7, #4]
 80182f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80182f2:	69b8      	ldr	r0, [r7, #24]
 80182f4:	f000 f908 	bl	8018508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80182f8:	4b1d      	ldr	r3, [pc, #116]	; (8018370 <pvPortMalloc+0x188>)
 80182fa:	681a      	ldr	r2, [r3, #0]
 80182fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182fe:	685b      	ldr	r3, [r3, #4]
 8018300:	1ad3      	subs	r3, r2, r3
 8018302:	4a1b      	ldr	r2, [pc, #108]	; (8018370 <pvPortMalloc+0x188>)
 8018304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018306:	4b1a      	ldr	r3, [pc, #104]	; (8018370 <pvPortMalloc+0x188>)
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	4b1b      	ldr	r3, [pc, #108]	; (8018378 <pvPortMalloc+0x190>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	429a      	cmp	r2, r3
 8018310:	d203      	bcs.n	801831a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018312:	4b17      	ldr	r3, [pc, #92]	; (8018370 <pvPortMalloc+0x188>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	4a18      	ldr	r2, [pc, #96]	; (8018378 <pvPortMalloc+0x190>)
 8018318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801831c:	685a      	ldr	r2, [r3, #4]
 801831e:	4b13      	ldr	r3, [pc, #76]	; (801836c <pvPortMalloc+0x184>)
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	431a      	orrs	r2, r3
 8018324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801832a:	2200      	movs	r2, #0
 801832c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801832e:	4b13      	ldr	r3, [pc, #76]	; (801837c <pvPortMalloc+0x194>)
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	3301      	adds	r3, #1
 8018334:	4a11      	ldr	r2, [pc, #68]	; (801837c <pvPortMalloc+0x194>)
 8018336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018338:	f7fe faf6 	bl	8016928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801833c:	69fb      	ldr	r3, [r7, #28]
 801833e:	f003 0307 	and.w	r3, r3, #7
 8018342:	2b00      	cmp	r3, #0
 8018344:	d00a      	beq.n	801835c <pvPortMalloc+0x174>
	__asm volatile
 8018346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801834a:	f383 8811 	msr	BASEPRI, r3
 801834e:	f3bf 8f6f 	isb	sy
 8018352:	f3bf 8f4f 	dsb	sy
 8018356:	60fb      	str	r3, [r7, #12]
}
 8018358:	bf00      	nop
 801835a:	e7fe      	b.n	801835a <pvPortMalloc+0x172>
	return pvReturn;
 801835c:	69fb      	ldr	r3, [r7, #28]
}
 801835e:	4618      	mov	r0, r3
 8018360:	3728      	adds	r7, #40	; 0x28
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}
 8018366:	bf00      	nop
 8018368:	2000c904 	.word	0x2000c904
 801836c:	2000c918 	.word	0x2000c918
 8018370:	2000c908 	.word	0x2000c908
 8018374:	2000c8fc 	.word	0x2000c8fc
 8018378:	2000c90c 	.word	0x2000c90c
 801837c:	2000c910 	.word	0x2000c910

08018380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018380:	b580      	push	{r7, lr}
 8018382:	b086      	sub	sp, #24
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d04d      	beq.n	801842e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018392:	2308      	movs	r3, #8
 8018394:	425b      	negs	r3, r3
 8018396:	697a      	ldr	r2, [r7, #20]
 8018398:	4413      	add	r3, r2
 801839a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801839c:	697b      	ldr	r3, [r7, #20]
 801839e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80183a0:	693b      	ldr	r3, [r7, #16]
 80183a2:	685a      	ldr	r2, [r3, #4]
 80183a4:	4b24      	ldr	r3, [pc, #144]	; (8018438 <vPortFree+0xb8>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	4013      	ands	r3, r2
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d10a      	bne.n	80183c4 <vPortFree+0x44>
	__asm volatile
 80183ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183b2:	f383 8811 	msr	BASEPRI, r3
 80183b6:	f3bf 8f6f 	isb	sy
 80183ba:	f3bf 8f4f 	dsb	sy
 80183be:	60fb      	str	r3, [r7, #12]
}
 80183c0:	bf00      	nop
 80183c2:	e7fe      	b.n	80183c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80183c4:	693b      	ldr	r3, [r7, #16]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d00a      	beq.n	80183e2 <vPortFree+0x62>
	__asm volatile
 80183cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183d0:	f383 8811 	msr	BASEPRI, r3
 80183d4:	f3bf 8f6f 	isb	sy
 80183d8:	f3bf 8f4f 	dsb	sy
 80183dc:	60bb      	str	r3, [r7, #8]
}
 80183de:	bf00      	nop
 80183e0:	e7fe      	b.n	80183e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80183e2:	693b      	ldr	r3, [r7, #16]
 80183e4:	685a      	ldr	r2, [r3, #4]
 80183e6:	4b14      	ldr	r3, [pc, #80]	; (8018438 <vPortFree+0xb8>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	4013      	ands	r3, r2
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d01e      	beq.n	801842e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80183f0:	693b      	ldr	r3, [r7, #16]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d11a      	bne.n	801842e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80183f8:	693b      	ldr	r3, [r7, #16]
 80183fa:	685a      	ldr	r2, [r3, #4]
 80183fc:	4b0e      	ldr	r3, [pc, #56]	; (8018438 <vPortFree+0xb8>)
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	43db      	mvns	r3, r3
 8018402:	401a      	ands	r2, r3
 8018404:	693b      	ldr	r3, [r7, #16]
 8018406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018408:	f7fe fa80 	bl	801690c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	685a      	ldr	r2, [r3, #4]
 8018410:	4b0a      	ldr	r3, [pc, #40]	; (801843c <vPortFree+0xbc>)
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	4413      	add	r3, r2
 8018416:	4a09      	ldr	r2, [pc, #36]	; (801843c <vPortFree+0xbc>)
 8018418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801841a:	6938      	ldr	r0, [r7, #16]
 801841c:	f000 f874 	bl	8018508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018420:	4b07      	ldr	r3, [pc, #28]	; (8018440 <vPortFree+0xc0>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	3301      	adds	r3, #1
 8018426:	4a06      	ldr	r2, [pc, #24]	; (8018440 <vPortFree+0xc0>)
 8018428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801842a:	f7fe fa7d 	bl	8016928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801842e:	bf00      	nop
 8018430:	3718      	adds	r7, #24
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
 8018436:	bf00      	nop
 8018438:	2000c918 	.word	0x2000c918
 801843c:	2000c908 	.word	0x2000c908
 8018440:	2000c914 	.word	0x2000c914

08018444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018444:	b480      	push	{r7}
 8018446:	b085      	sub	sp, #20
 8018448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801844a:	f649 4340 	movw	r3, #40000	; 0x9c40
 801844e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018450:	4b27      	ldr	r3, [pc, #156]	; (80184f0 <prvHeapInit+0xac>)
 8018452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	f003 0307 	and.w	r3, r3, #7
 801845a:	2b00      	cmp	r3, #0
 801845c:	d00c      	beq.n	8018478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	3307      	adds	r3, #7
 8018462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	f023 0307 	bic.w	r3, r3, #7
 801846a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801846c:	68ba      	ldr	r2, [r7, #8]
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	1ad3      	subs	r3, r2, r3
 8018472:	4a1f      	ldr	r2, [pc, #124]	; (80184f0 <prvHeapInit+0xac>)
 8018474:	4413      	add	r3, r2
 8018476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801847c:	4a1d      	ldr	r2, [pc, #116]	; (80184f4 <prvHeapInit+0xb0>)
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018482:	4b1c      	ldr	r3, [pc, #112]	; (80184f4 <prvHeapInit+0xb0>)
 8018484:	2200      	movs	r2, #0
 8018486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	68ba      	ldr	r2, [r7, #8]
 801848c:	4413      	add	r3, r2
 801848e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018490:	2208      	movs	r2, #8
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	1a9b      	subs	r3, r3, r2
 8018496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	f023 0307 	bic.w	r3, r3, #7
 801849e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	4a15      	ldr	r2, [pc, #84]	; (80184f8 <prvHeapInit+0xb4>)
 80184a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80184a6:	4b14      	ldr	r3, [pc, #80]	; (80184f8 <prvHeapInit+0xb4>)
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	2200      	movs	r2, #0
 80184ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80184ae:	4b12      	ldr	r3, [pc, #72]	; (80184f8 <prvHeapInit+0xb4>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	2200      	movs	r2, #0
 80184b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80184ba:	683b      	ldr	r3, [r7, #0]
 80184bc:	68fa      	ldr	r2, [r7, #12]
 80184be:	1ad2      	subs	r2, r2, r3
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80184c4:	4b0c      	ldr	r3, [pc, #48]	; (80184f8 <prvHeapInit+0xb4>)
 80184c6:	681a      	ldr	r2, [r3, #0]
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80184cc:	683b      	ldr	r3, [r7, #0]
 80184ce:	685b      	ldr	r3, [r3, #4]
 80184d0:	4a0a      	ldr	r2, [pc, #40]	; (80184fc <prvHeapInit+0xb8>)
 80184d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	685b      	ldr	r3, [r3, #4]
 80184d8:	4a09      	ldr	r2, [pc, #36]	; (8018500 <prvHeapInit+0xbc>)
 80184da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80184dc:	4b09      	ldr	r3, [pc, #36]	; (8018504 <prvHeapInit+0xc0>)
 80184de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80184e2:	601a      	str	r2, [r3, #0]
}
 80184e4:	bf00      	nop
 80184e6:	3714      	adds	r7, #20
 80184e8:	46bd      	mov	sp, r7
 80184ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ee:	4770      	bx	lr
 80184f0:	20002cbc 	.word	0x20002cbc
 80184f4:	2000c8fc 	.word	0x2000c8fc
 80184f8:	2000c904 	.word	0x2000c904
 80184fc:	2000c90c 	.word	0x2000c90c
 8018500:	2000c908 	.word	0x2000c908
 8018504:	2000c918 	.word	0x2000c918

08018508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018508:	b480      	push	{r7}
 801850a:	b085      	sub	sp, #20
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018510:	4b28      	ldr	r3, [pc, #160]	; (80185b4 <prvInsertBlockIntoFreeList+0xac>)
 8018512:	60fb      	str	r3, [r7, #12]
 8018514:	e002      	b.n	801851c <prvInsertBlockIntoFreeList+0x14>
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	60fb      	str	r3, [r7, #12]
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	687a      	ldr	r2, [r7, #4]
 8018522:	429a      	cmp	r2, r3
 8018524:	d8f7      	bhi.n	8018516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	685b      	ldr	r3, [r3, #4]
 801852e:	68ba      	ldr	r2, [r7, #8]
 8018530:	4413      	add	r3, r2
 8018532:	687a      	ldr	r2, [r7, #4]
 8018534:	429a      	cmp	r2, r3
 8018536:	d108      	bne.n	801854a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	685a      	ldr	r2, [r3, #4]
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	685b      	ldr	r3, [r3, #4]
 8018540:	441a      	add	r2, r3
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	685b      	ldr	r3, [r3, #4]
 8018552:	68ba      	ldr	r2, [r7, #8]
 8018554:	441a      	add	r2, r3
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	429a      	cmp	r2, r3
 801855c:	d118      	bne.n	8018590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	681a      	ldr	r2, [r3, #0]
 8018562:	4b15      	ldr	r3, [pc, #84]	; (80185b8 <prvInsertBlockIntoFreeList+0xb0>)
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	429a      	cmp	r2, r3
 8018568:	d00d      	beq.n	8018586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	685a      	ldr	r2, [r3, #4]
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	685b      	ldr	r3, [r3, #4]
 8018574:	441a      	add	r2, r3
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	681a      	ldr	r2, [r3, #0]
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	601a      	str	r2, [r3, #0]
 8018584:	e008      	b.n	8018598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018586:	4b0c      	ldr	r3, [pc, #48]	; (80185b8 <prvInsertBlockIntoFreeList+0xb0>)
 8018588:	681a      	ldr	r2, [r3, #0]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	601a      	str	r2, [r3, #0]
 801858e:	e003      	b.n	8018598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	681a      	ldr	r2, [r3, #0]
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018598:	68fa      	ldr	r2, [r7, #12]
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	429a      	cmp	r2, r3
 801859e:	d002      	beq.n	80185a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	687a      	ldr	r2, [r7, #4]
 80185a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80185a6:	bf00      	nop
 80185a8:	3714      	adds	r7, #20
 80185aa:	46bd      	mov	sp, r7
 80185ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b0:	4770      	bx	lr
 80185b2:	bf00      	nop
 80185b4:	2000c8fc 	.word	0x2000c8fc
 80185b8:	2000c904 	.word	0x2000c904

080185bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80185c0:	2200      	movs	r2, #0
 80185c2:	4912      	ldr	r1, [pc, #72]	; (801860c <MX_USB_DEVICE_Init+0x50>)
 80185c4:	4812      	ldr	r0, [pc, #72]	; (8018610 <MX_USB_DEVICE_Init+0x54>)
 80185c6:	f7fb fb89 	bl	8013cdc <USBD_Init>
 80185ca:	4603      	mov	r3, r0
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d001      	beq.n	80185d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80185d0:	f7eb f90f 	bl	80037f2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80185d4:	490f      	ldr	r1, [pc, #60]	; (8018614 <MX_USB_DEVICE_Init+0x58>)
 80185d6:	480e      	ldr	r0, [pc, #56]	; (8018610 <MX_USB_DEVICE_Init+0x54>)
 80185d8:	f7fb fbb0 	bl	8013d3c <USBD_RegisterClass>
 80185dc:	4603      	mov	r3, r0
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d001      	beq.n	80185e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80185e2:	f7eb f906 	bl	80037f2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80185e6:	490c      	ldr	r1, [pc, #48]	; (8018618 <MX_USB_DEVICE_Init+0x5c>)
 80185e8:	4809      	ldr	r0, [pc, #36]	; (8018610 <MX_USB_DEVICE_Init+0x54>)
 80185ea:	f7fb fae7 	bl	8013bbc <USBD_CDC_RegisterInterface>
 80185ee:	4603      	mov	r3, r0
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d001      	beq.n	80185f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80185f4:	f7eb f8fd 	bl	80037f2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80185f8:	4805      	ldr	r0, [pc, #20]	; (8018610 <MX_USB_DEVICE_Init+0x54>)
 80185fa:	f7fb fbd5 	bl	8013da8 <USBD_Start>
 80185fe:	4603      	mov	r3, r0
 8018600:	2b00      	cmp	r3, #0
 8018602:	d001      	beq.n	8018608 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018604:	f7eb f8f5 	bl	80037f2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018608:	bf00      	nop
 801860a:	bd80      	pop	{r7, pc}
 801860c:	200000bc 	.word	0x200000bc
 8018610:	2000c91c 	.word	0x2000c91c
 8018614:	20000024 	.word	0x20000024
 8018618:	200000a8 	.word	0x200000a8

0801861c <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 801861c:	b580      	push	{r7, lr}
 801861e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018620:	2200      	movs	r2, #0
 8018622:	4905      	ldr	r1, [pc, #20]	; (8018638 <CDC_Init_FS+0x1c>)
 8018624:	4805      	ldr	r0, [pc, #20]	; (801863c <CDC_Init_FS+0x20>)
 8018626:	f7fb fae3 	bl	8013bf0 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801862a:	4905      	ldr	r1, [pc, #20]	; (8018640 <CDC_Init_FS+0x24>)
 801862c:	4803      	ldr	r0, [pc, #12]	; (801863c <CDC_Init_FS+0x20>)
 801862e:	f7fb fb01 	bl	8013c34 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8018632:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8018634:	4618      	mov	r0, r3
 8018636:	bd80      	pop	{r7, pc}
 8018638:	2000d400 	.word	0x2000d400
 801863c:	2000c91c 	.word	0x2000c91c
 8018640:	2000cc00 	.word	0x2000cc00

08018644 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8018644:	b480      	push	{r7}
 8018646:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8018648:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 801864a:	4618      	mov	r0, r3
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr

08018654 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8018654:	b480      	push	{r7}
 8018656:	b083      	sub	sp, #12
 8018658:	af00      	add	r7, sp, #0
 801865a:	4603      	mov	r3, r0
 801865c:	6039      	str	r1, [r7, #0]
 801865e:	71fb      	strb	r3, [r7, #7]
 8018660:	4613      	mov	r3, r2
 8018662:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8018664:	79fb      	ldrb	r3, [r7, #7]
 8018666:	2b23      	cmp	r3, #35	; 0x23
 8018668:	f200 808c 	bhi.w	8018784 <CDC_Control_FS+0x130>
 801866c:	a201      	add	r2, pc, #4	; (adr r2, 8018674 <CDC_Control_FS+0x20>)
 801866e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018672:	bf00      	nop
 8018674:	08018785 	.word	0x08018785
 8018678:	08018785 	.word	0x08018785
 801867c:	08018785 	.word	0x08018785
 8018680:	08018785 	.word	0x08018785
 8018684:	08018785 	.word	0x08018785
 8018688:	08018785 	.word	0x08018785
 801868c:	08018785 	.word	0x08018785
 8018690:	08018785 	.word	0x08018785
 8018694:	08018785 	.word	0x08018785
 8018698:	08018785 	.word	0x08018785
 801869c:	08018785 	.word	0x08018785
 80186a0:	08018785 	.word	0x08018785
 80186a4:	08018785 	.word	0x08018785
 80186a8:	08018785 	.word	0x08018785
 80186ac:	08018785 	.word	0x08018785
 80186b0:	08018785 	.word	0x08018785
 80186b4:	08018785 	.word	0x08018785
 80186b8:	08018785 	.word	0x08018785
 80186bc:	08018785 	.word	0x08018785
 80186c0:	08018785 	.word	0x08018785
 80186c4:	08018785 	.word	0x08018785
 80186c8:	08018785 	.word	0x08018785
 80186cc:	08018785 	.word	0x08018785
 80186d0:	08018785 	.word	0x08018785
 80186d4:	08018785 	.word	0x08018785
 80186d8:	08018785 	.word	0x08018785
 80186dc:	08018785 	.word	0x08018785
 80186e0:	08018785 	.word	0x08018785
 80186e4:	08018785 	.word	0x08018785
 80186e8:	08018785 	.word	0x08018785
 80186ec:	08018785 	.word	0x08018785
 80186f0:	08018785 	.word	0x08018785
 80186f4:	08018705 	.word	0x08018705
 80186f8:	0801873f 	.word	0x0801873f
 80186fc:	08018785 	.word	0x08018785
 8018700:	08018785 	.word	0x08018785
		/*                                        3 - Mark                             */
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/
	case CDC_SET_LINE_CODING:
		tempbuf[0] = pbuf[0];
 8018704:	683b      	ldr	r3, [r7, #0]
 8018706:	781a      	ldrb	r2, [r3, #0]
 8018708:	4b22      	ldr	r3, [pc, #136]	; (8018794 <CDC_Control_FS+0x140>)
 801870a:	701a      	strb	r2, [r3, #0]
		tempbuf[1] = pbuf[1];
 801870c:	683b      	ldr	r3, [r7, #0]
 801870e:	785a      	ldrb	r2, [r3, #1]
 8018710:	4b20      	ldr	r3, [pc, #128]	; (8018794 <CDC_Control_FS+0x140>)
 8018712:	705a      	strb	r2, [r3, #1]
		tempbuf[2] = pbuf[2];
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	789a      	ldrb	r2, [r3, #2]
 8018718:	4b1e      	ldr	r3, [pc, #120]	; (8018794 <CDC_Control_FS+0x140>)
 801871a:	709a      	strb	r2, [r3, #2]
		tempbuf[3] = pbuf[3];
 801871c:	683b      	ldr	r3, [r7, #0]
 801871e:	78da      	ldrb	r2, [r3, #3]
 8018720:	4b1c      	ldr	r3, [pc, #112]	; (8018794 <CDC_Control_FS+0x140>)
 8018722:	70da      	strb	r2, [r3, #3]
		tempbuf[4] = pbuf[4];
 8018724:	683b      	ldr	r3, [r7, #0]
 8018726:	791a      	ldrb	r2, [r3, #4]
 8018728:	4b1a      	ldr	r3, [pc, #104]	; (8018794 <CDC_Control_FS+0x140>)
 801872a:	711a      	strb	r2, [r3, #4]
		tempbuf[5] = pbuf[5];
 801872c:	683b      	ldr	r3, [r7, #0]
 801872e:	795a      	ldrb	r2, [r3, #5]
 8018730:	4b18      	ldr	r3, [pc, #96]	; (8018794 <CDC_Control_FS+0x140>)
 8018732:	715a      	strb	r2, [r3, #5]
		tempbuf[6] = pbuf[6];
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	799a      	ldrb	r2, [r3, #6]
 8018738:	4b16      	ldr	r3, [pc, #88]	; (8018794 <CDC_Control_FS+0x140>)
 801873a:	719a      	strb	r2, [r3, #6]
		break;
 801873c:	e023      	b.n	8018786 <CDC_Control_FS+0x132>

	case CDC_GET_LINE_CODING:
		pbuf[0] = tempbuf[0];
 801873e:	4b15      	ldr	r3, [pc, #84]	; (8018794 <CDC_Control_FS+0x140>)
 8018740:	781a      	ldrb	r2, [r3, #0]
 8018742:	683b      	ldr	r3, [r7, #0]
 8018744:	701a      	strb	r2, [r3, #0]
		pbuf[1] = tempbuf[1];
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	3301      	adds	r3, #1
 801874a:	4a12      	ldr	r2, [pc, #72]	; (8018794 <CDC_Control_FS+0x140>)
 801874c:	7852      	ldrb	r2, [r2, #1]
 801874e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = tempbuf[2];
 8018750:	683b      	ldr	r3, [r7, #0]
 8018752:	3302      	adds	r3, #2
 8018754:	4a0f      	ldr	r2, [pc, #60]	; (8018794 <CDC_Control_FS+0x140>)
 8018756:	7892      	ldrb	r2, [r2, #2]
 8018758:	701a      	strb	r2, [r3, #0]
		pbuf[3] = tempbuf[3];
 801875a:	683b      	ldr	r3, [r7, #0]
 801875c:	3303      	adds	r3, #3
 801875e:	4a0d      	ldr	r2, [pc, #52]	; (8018794 <CDC_Control_FS+0x140>)
 8018760:	78d2      	ldrb	r2, [r2, #3]
 8018762:	701a      	strb	r2, [r3, #0]
		pbuf[4] = tempbuf[4];
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	3304      	adds	r3, #4
 8018768:	4a0a      	ldr	r2, [pc, #40]	; (8018794 <CDC_Control_FS+0x140>)
 801876a:	7912      	ldrb	r2, [r2, #4]
 801876c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = tempbuf[5];
 801876e:	683b      	ldr	r3, [r7, #0]
 8018770:	3305      	adds	r3, #5
 8018772:	4a08      	ldr	r2, [pc, #32]	; (8018794 <CDC_Control_FS+0x140>)
 8018774:	7952      	ldrb	r2, [r2, #5]
 8018776:	701a      	strb	r2, [r3, #0]
		pbuf[6] = tempbuf[6];
 8018778:	683b      	ldr	r3, [r7, #0]
 801877a:	3306      	adds	r3, #6
 801877c:	4a05      	ldr	r2, [pc, #20]	; (8018794 <CDC_Control_FS+0x140>)
 801877e:	7992      	ldrb	r2, [r2, #6]
 8018780:	701a      	strb	r2, [r3, #0]
		break;
 8018782:	e000      	b.n	8018786 <CDC_Control_FS+0x132>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8018784:	bf00      	nop
	}

	return (USBD_OK);
 8018786:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8018788:	4618      	mov	r0, r3
 801878a:	370c      	adds	r7, #12
 801878c:	46bd      	mov	sp, r7
 801878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018792:	4770      	bx	lr
 8018794:	2000cbf8 	.word	0x2000cbf8

08018798 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8018798:	b580      	push	{r7, lr}
 801879a:	b082      	sub	sp, #8
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
 80187a0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80187a2:	6879      	ldr	r1, [r7, #4]
 80187a4:	4805      	ldr	r0, [pc, #20]	; (80187bc <CDC_Receive_FS+0x24>)
 80187a6:	f7fb fa45 	bl	8013c34 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80187aa:	4804      	ldr	r0, [pc, #16]	; (80187bc <CDC_Receive_FS+0x24>)
 80187ac:	f7fb fa60 	bl	8013c70 <USBD_CDC_ReceivePacket>
//  usb_vcp_processing(Buf, Len);
	return (USBD_OK);
 80187b0:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 80187b2:	4618      	mov	r0, r3
 80187b4:	3708      	adds	r7, #8
 80187b6:	46bd      	mov	sp, r7
 80187b8:	bd80      	pop	{r7, pc}
 80187ba:	bf00      	nop
 80187bc:	2000c91c 	.word	0x2000c91c

080187c0 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 80187c0:	b480      	push	{r7}
 80187c2:	b087      	sub	sp, #28
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	60f8      	str	r0, [r7, #12]
 80187c8:	60b9      	str	r1, [r7, #8]
 80187ca:	4613      	mov	r3, r2
 80187cc:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 80187ce:	2300      	movs	r3, #0
 80187d0:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 80187d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80187d6:	4618      	mov	r0, r3
 80187d8:	371c      	adds	r7, #28
 80187da:	46bd      	mov	sp, r7
 80187dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e0:	4770      	bx	lr
	...

080187e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187e4:	b480      	push	{r7}
 80187e6:	b083      	sub	sp, #12
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	4603      	mov	r3, r0
 80187ec:	6039      	str	r1, [r7, #0]
 80187ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	2212      	movs	r2, #18
 80187f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80187f6:	4b03      	ldr	r3, [pc, #12]	; (8018804 <USBD_FS_DeviceDescriptor+0x20>)
}
 80187f8:	4618      	mov	r0, r3
 80187fa:	370c      	adds	r7, #12
 80187fc:	46bd      	mov	sp, r7
 80187fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018802:	4770      	bx	lr
 8018804:	200000d8 	.word	0x200000d8

08018808 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018808:	b480      	push	{r7}
 801880a:	b083      	sub	sp, #12
 801880c:	af00      	add	r7, sp, #0
 801880e:	4603      	mov	r3, r0
 8018810:	6039      	str	r1, [r7, #0]
 8018812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	2204      	movs	r2, #4
 8018818:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801881a:	4b03      	ldr	r3, [pc, #12]	; (8018828 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801881c:	4618      	mov	r0, r3
 801881e:	370c      	adds	r7, #12
 8018820:	46bd      	mov	sp, r7
 8018822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018826:	4770      	bx	lr
 8018828:	200000ec 	.word	0x200000ec

0801882c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b082      	sub	sp, #8
 8018830:	af00      	add	r7, sp, #0
 8018832:	4603      	mov	r3, r0
 8018834:	6039      	str	r1, [r7, #0]
 8018836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018838:	79fb      	ldrb	r3, [r7, #7]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d105      	bne.n	801884a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801883e:	683a      	ldr	r2, [r7, #0]
 8018840:	4907      	ldr	r1, [pc, #28]	; (8018860 <USBD_FS_ProductStrDescriptor+0x34>)
 8018842:	4808      	ldr	r0, [pc, #32]	; (8018864 <USBD_FS_ProductStrDescriptor+0x38>)
 8018844:	f7fc fc5c 	bl	8015100 <USBD_GetString>
 8018848:	e004      	b.n	8018854 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801884a:	683a      	ldr	r2, [r7, #0]
 801884c:	4904      	ldr	r1, [pc, #16]	; (8018860 <USBD_FS_ProductStrDescriptor+0x34>)
 801884e:	4805      	ldr	r0, [pc, #20]	; (8018864 <USBD_FS_ProductStrDescriptor+0x38>)
 8018850:	f7fc fc56 	bl	8015100 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018854:	4b02      	ldr	r3, [pc, #8]	; (8018860 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018856:	4618      	mov	r0, r3
 8018858:	3708      	adds	r7, #8
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}
 801885e:	bf00      	nop
 8018860:	2000dc00 	.word	0x2000dc00
 8018864:	0801f630 	.word	0x0801f630

08018868 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b082      	sub	sp, #8
 801886c:	af00      	add	r7, sp, #0
 801886e:	4603      	mov	r3, r0
 8018870:	6039      	str	r1, [r7, #0]
 8018872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018874:	683a      	ldr	r2, [r7, #0]
 8018876:	4904      	ldr	r1, [pc, #16]	; (8018888 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018878:	4804      	ldr	r0, [pc, #16]	; (801888c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801887a:	f7fc fc41 	bl	8015100 <USBD_GetString>
  return USBD_StrDesc;
 801887e:	4b02      	ldr	r3, [pc, #8]	; (8018888 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018880:	4618      	mov	r0, r3
 8018882:	3708      	adds	r7, #8
 8018884:	46bd      	mov	sp, r7
 8018886:	bd80      	pop	{r7, pc}
 8018888:	2000dc00 	.word	0x2000dc00
 801888c:	0801f648 	.word	0x0801f648

08018890 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b082      	sub	sp, #8
 8018894:	af00      	add	r7, sp, #0
 8018896:	4603      	mov	r3, r0
 8018898:	6039      	str	r1, [r7, #0]
 801889a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	221a      	movs	r2, #26
 80188a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80188a2:	f000 f843 	bl	801892c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80188a6:	4b02      	ldr	r3, [pc, #8]	; (80188b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3708      	adds	r7, #8
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}
 80188b0:	200000f0 	.word	0x200000f0

080188b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b082      	sub	sp, #8
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	4603      	mov	r3, r0
 80188bc:	6039      	str	r1, [r7, #0]
 80188be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80188c0:	79fb      	ldrb	r3, [r7, #7]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d105      	bne.n	80188d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80188c6:	683a      	ldr	r2, [r7, #0]
 80188c8:	4907      	ldr	r1, [pc, #28]	; (80188e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80188ca:	4808      	ldr	r0, [pc, #32]	; (80188ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80188cc:	f7fc fc18 	bl	8015100 <USBD_GetString>
 80188d0:	e004      	b.n	80188dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80188d2:	683a      	ldr	r2, [r7, #0]
 80188d4:	4904      	ldr	r1, [pc, #16]	; (80188e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80188d6:	4805      	ldr	r0, [pc, #20]	; (80188ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80188d8:	f7fc fc12 	bl	8015100 <USBD_GetString>
  }
  return USBD_StrDesc;
 80188dc:	4b02      	ldr	r3, [pc, #8]	; (80188e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80188de:	4618      	mov	r0, r3
 80188e0:	3708      	adds	r7, #8
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd80      	pop	{r7, pc}
 80188e6:	bf00      	nop
 80188e8:	2000dc00 	.word	0x2000dc00
 80188ec:	0801f65c 	.word	0x0801f65c

080188f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b082      	sub	sp, #8
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	4603      	mov	r3, r0
 80188f8:	6039      	str	r1, [r7, #0]
 80188fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80188fc:	79fb      	ldrb	r3, [r7, #7]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d105      	bne.n	801890e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018902:	683a      	ldr	r2, [r7, #0]
 8018904:	4907      	ldr	r1, [pc, #28]	; (8018924 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018906:	4808      	ldr	r0, [pc, #32]	; (8018928 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018908:	f7fc fbfa 	bl	8015100 <USBD_GetString>
 801890c:	e004      	b.n	8018918 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801890e:	683a      	ldr	r2, [r7, #0]
 8018910:	4904      	ldr	r1, [pc, #16]	; (8018924 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018912:	4805      	ldr	r0, [pc, #20]	; (8018928 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018914:	f7fc fbf4 	bl	8015100 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018918:	4b02      	ldr	r3, [pc, #8]	; (8018924 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801891a:	4618      	mov	r0, r3
 801891c:	3708      	adds	r7, #8
 801891e:	46bd      	mov	sp, r7
 8018920:	bd80      	pop	{r7, pc}
 8018922:	bf00      	nop
 8018924:	2000dc00 	.word	0x2000dc00
 8018928:	0801f668 	.word	0x0801f668

0801892c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b084      	sub	sp, #16
 8018930:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018932:	4b0f      	ldr	r3, [pc, #60]	; (8018970 <Get_SerialNum+0x44>)
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018938:	4b0e      	ldr	r3, [pc, #56]	; (8018974 <Get_SerialNum+0x48>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801893e:	4b0e      	ldr	r3, [pc, #56]	; (8018978 <Get_SerialNum+0x4c>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018944:	68fa      	ldr	r2, [r7, #12]
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	4413      	add	r3, r2
 801894a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d009      	beq.n	8018966 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018952:	2208      	movs	r2, #8
 8018954:	4909      	ldr	r1, [pc, #36]	; (801897c <Get_SerialNum+0x50>)
 8018956:	68f8      	ldr	r0, [r7, #12]
 8018958:	f000 f814 	bl	8018984 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801895c:	2204      	movs	r2, #4
 801895e:	4908      	ldr	r1, [pc, #32]	; (8018980 <Get_SerialNum+0x54>)
 8018960:	68b8      	ldr	r0, [r7, #8]
 8018962:	f000 f80f 	bl	8018984 <IntToUnicode>
  }
}
 8018966:	bf00      	nop
 8018968:	3710      	adds	r7, #16
 801896a:	46bd      	mov	sp, r7
 801896c:	bd80      	pop	{r7, pc}
 801896e:	bf00      	nop
 8018970:	1fff7a10 	.word	0x1fff7a10
 8018974:	1fff7a14 	.word	0x1fff7a14
 8018978:	1fff7a18 	.word	0x1fff7a18
 801897c:	200000f2 	.word	0x200000f2
 8018980:	20000102 	.word	0x20000102

08018984 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018984:	b480      	push	{r7}
 8018986:	b087      	sub	sp, #28
 8018988:	af00      	add	r7, sp, #0
 801898a:	60f8      	str	r0, [r7, #12]
 801898c:	60b9      	str	r1, [r7, #8]
 801898e:	4613      	mov	r3, r2
 8018990:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018992:	2300      	movs	r3, #0
 8018994:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018996:	2300      	movs	r3, #0
 8018998:	75fb      	strb	r3, [r7, #23]
 801899a:	e027      	b.n	80189ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	0f1b      	lsrs	r3, r3, #28
 80189a0:	2b09      	cmp	r3, #9
 80189a2:	d80b      	bhi.n	80189bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	0f1b      	lsrs	r3, r3, #28
 80189a8:	b2da      	uxtb	r2, r3
 80189aa:	7dfb      	ldrb	r3, [r7, #23]
 80189ac:	005b      	lsls	r3, r3, #1
 80189ae:	4619      	mov	r1, r3
 80189b0:	68bb      	ldr	r3, [r7, #8]
 80189b2:	440b      	add	r3, r1
 80189b4:	3230      	adds	r2, #48	; 0x30
 80189b6:	b2d2      	uxtb	r2, r2
 80189b8:	701a      	strb	r2, [r3, #0]
 80189ba:	e00a      	b.n	80189d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	0f1b      	lsrs	r3, r3, #28
 80189c0:	b2da      	uxtb	r2, r3
 80189c2:	7dfb      	ldrb	r3, [r7, #23]
 80189c4:	005b      	lsls	r3, r3, #1
 80189c6:	4619      	mov	r1, r3
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	440b      	add	r3, r1
 80189cc:	3237      	adds	r2, #55	; 0x37
 80189ce:	b2d2      	uxtb	r2, r2
 80189d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	011b      	lsls	r3, r3, #4
 80189d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80189d8:	7dfb      	ldrb	r3, [r7, #23]
 80189da:	005b      	lsls	r3, r3, #1
 80189dc:	3301      	adds	r3, #1
 80189de:	68ba      	ldr	r2, [r7, #8]
 80189e0:	4413      	add	r3, r2
 80189e2:	2200      	movs	r2, #0
 80189e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80189e6:	7dfb      	ldrb	r3, [r7, #23]
 80189e8:	3301      	adds	r3, #1
 80189ea:	75fb      	strb	r3, [r7, #23]
 80189ec:	7dfa      	ldrb	r2, [r7, #23]
 80189ee:	79fb      	ldrb	r3, [r7, #7]
 80189f0:	429a      	cmp	r2, r3
 80189f2:	d3d3      	bcc.n	801899c <IntToUnicode+0x18>
  }
}
 80189f4:	bf00      	nop
 80189f6:	bf00      	nop
 80189f8:	371c      	adds	r7, #28
 80189fa:	46bd      	mov	sp, r7
 80189fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a00:	4770      	bx	lr
	...

08018a04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b08a      	sub	sp, #40	; 0x28
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018a0c:	f107 0314 	add.w	r3, r7, #20
 8018a10:	2200      	movs	r2, #0
 8018a12:	601a      	str	r2, [r3, #0]
 8018a14:	605a      	str	r2, [r3, #4]
 8018a16:	609a      	str	r2, [r3, #8]
 8018a18:	60da      	str	r2, [r3, #12]
 8018a1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018a24:	d13a      	bne.n	8018a9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018a26:	2300      	movs	r3, #0
 8018a28:	613b      	str	r3, [r7, #16]
 8018a2a:	4b1e      	ldr	r3, [pc, #120]	; (8018aa4 <HAL_PCD_MspInit+0xa0>)
 8018a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a2e:	4a1d      	ldr	r2, [pc, #116]	; (8018aa4 <HAL_PCD_MspInit+0xa0>)
 8018a30:	f043 0301 	orr.w	r3, r3, #1
 8018a34:	6313      	str	r3, [r2, #48]	; 0x30
 8018a36:	4b1b      	ldr	r3, [pc, #108]	; (8018aa4 <HAL_PCD_MspInit+0xa0>)
 8018a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a3a:	f003 0301 	and.w	r3, r3, #1
 8018a3e:	613b      	str	r3, [r7, #16]
 8018a40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8018a42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018a48:	2302      	movs	r3, #2
 8018a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018a50:	2303      	movs	r3, #3
 8018a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018a54:	230a      	movs	r3, #10
 8018a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018a58:	f107 0314 	add.w	r3, r7, #20
 8018a5c:	4619      	mov	r1, r3
 8018a5e:	4812      	ldr	r0, [pc, #72]	; (8018aa8 <HAL_PCD_MspInit+0xa4>)
 8018a60:	f7f2 fc0e 	bl	800b280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018a64:	4b0f      	ldr	r3, [pc, #60]	; (8018aa4 <HAL_PCD_MspInit+0xa0>)
 8018a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a68:	4a0e      	ldr	r2, [pc, #56]	; (8018aa4 <HAL_PCD_MspInit+0xa0>)
 8018a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a6e:	6353      	str	r3, [r2, #52]	; 0x34
 8018a70:	2300      	movs	r3, #0
 8018a72:	60fb      	str	r3, [r7, #12]
 8018a74:	4b0b      	ldr	r3, [pc, #44]	; (8018aa4 <HAL_PCD_MspInit+0xa0>)
 8018a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a78:	4a0a      	ldr	r2, [pc, #40]	; (8018aa4 <HAL_PCD_MspInit+0xa0>)
 8018a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018a7e:	6453      	str	r3, [r2, #68]	; 0x44
 8018a80:	4b08      	ldr	r3, [pc, #32]	; (8018aa4 <HAL_PCD_MspInit+0xa0>)
 8018a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018a88:	60fb      	str	r3, [r7, #12]
 8018a8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	2105      	movs	r1, #5
 8018a90:	2043      	movs	r0, #67	; 0x43
 8018a92:	f7f1 ffbd 	bl	800aa10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018a96:	2043      	movs	r0, #67	; 0x43
 8018a98:	f7f1 ffd6 	bl	800aa48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018a9c:	bf00      	nop
 8018a9e:	3728      	adds	r7, #40	; 0x28
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}
 8018aa4:	40023800 	.word	0x40023800
 8018aa8:	40020000 	.word	0x40020000

08018aac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b082      	sub	sp, #8
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018ac0:	4619      	mov	r1, r3
 8018ac2:	4610      	mov	r0, r2
 8018ac4:	f7fb f9bd 	bl	8013e42 <USBD_LL_SetupStage>
}
 8018ac8:	bf00      	nop
 8018aca:	3708      	adds	r7, #8
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}

08018ad0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b082      	sub	sp, #8
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
 8018ad8:	460b      	mov	r3, r1
 8018ada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018ae2:	78fa      	ldrb	r2, [r7, #3]
 8018ae4:	6879      	ldr	r1, [r7, #4]
 8018ae6:	4613      	mov	r3, r2
 8018ae8:	00db      	lsls	r3, r3, #3
 8018aea:	4413      	add	r3, r2
 8018aec:	009b      	lsls	r3, r3, #2
 8018aee:	440b      	add	r3, r1
 8018af0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018af4:	681a      	ldr	r2, [r3, #0]
 8018af6:	78fb      	ldrb	r3, [r7, #3]
 8018af8:	4619      	mov	r1, r3
 8018afa:	f7fb f9f7 	bl	8013eec <USBD_LL_DataOutStage>
}
 8018afe:	bf00      	nop
 8018b00:	3708      	adds	r7, #8
 8018b02:	46bd      	mov	sp, r7
 8018b04:	bd80      	pop	{r7, pc}

08018b06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b06:	b580      	push	{r7, lr}
 8018b08:	b082      	sub	sp, #8
 8018b0a:	af00      	add	r7, sp, #0
 8018b0c:	6078      	str	r0, [r7, #4]
 8018b0e:	460b      	mov	r3, r1
 8018b10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018b18:	78fa      	ldrb	r2, [r7, #3]
 8018b1a:	6879      	ldr	r1, [r7, #4]
 8018b1c:	4613      	mov	r3, r2
 8018b1e:	00db      	lsls	r3, r3, #3
 8018b20:	4413      	add	r3, r2
 8018b22:	009b      	lsls	r3, r3, #2
 8018b24:	440b      	add	r3, r1
 8018b26:	334c      	adds	r3, #76	; 0x4c
 8018b28:	681a      	ldr	r2, [r3, #0]
 8018b2a:	78fb      	ldrb	r3, [r7, #3]
 8018b2c:	4619      	mov	r1, r3
 8018b2e:	f7fb fa90 	bl	8014052 <USBD_LL_DataInStage>
}
 8018b32:	bf00      	nop
 8018b34:	3708      	adds	r7, #8
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bd80      	pop	{r7, pc}

08018b3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b3a:	b580      	push	{r7, lr}
 8018b3c:	b082      	sub	sp, #8
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018b48:	4618      	mov	r0, r3
 8018b4a:	f7fb fbc4 	bl	80142d6 <USBD_LL_SOF>
}
 8018b4e:	bf00      	nop
 8018b50:	3708      	adds	r7, #8
 8018b52:	46bd      	mov	sp, r7
 8018b54:	bd80      	pop	{r7, pc}

08018b56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b56:	b580      	push	{r7, lr}
 8018b58:	b084      	sub	sp, #16
 8018b5a:	af00      	add	r7, sp, #0
 8018b5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018b5e:	2301      	movs	r3, #1
 8018b60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	68db      	ldr	r3, [r3, #12]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d102      	bne.n	8018b70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	73fb      	strb	r3, [r7, #15]
 8018b6e:	e008      	b.n	8018b82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	68db      	ldr	r3, [r3, #12]
 8018b74:	2b02      	cmp	r3, #2
 8018b76:	d102      	bne.n	8018b7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018b78:	2301      	movs	r3, #1
 8018b7a:	73fb      	strb	r3, [r7, #15]
 8018b7c:	e001      	b.n	8018b82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018b7e:	f7ea fe38 	bl	80037f2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018b88:	7bfa      	ldrb	r2, [r7, #15]
 8018b8a:	4611      	mov	r1, r2
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	f7fb fb64 	bl	801425a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f7fb fb0c 	bl	80141b6 <USBD_LL_Reset>
}
 8018b9e:	bf00      	nop
 8018ba0:	3710      	adds	r7, #16
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	bd80      	pop	{r7, pc}
	...

08018ba8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b082      	sub	sp, #8
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f7fb fb5f 	bl	801427a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	687a      	ldr	r2, [r7, #4]
 8018bc8:	6812      	ldr	r2, [r2, #0]
 8018bca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018bce:	f043 0301 	orr.w	r3, r3, #1
 8018bd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	6a1b      	ldr	r3, [r3, #32]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d005      	beq.n	8018be8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018bdc:	4b04      	ldr	r3, [pc, #16]	; (8018bf0 <HAL_PCD_SuspendCallback+0x48>)
 8018bde:	691b      	ldr	r3, [r3, #16]
 8018be0:	4a03      	ldr	r2, [pc, #12]	; (8018bf0 <HAL_PCD_SuspendCallback+0x48>)
 8018be2:	f043 0306 	orr.w	r3, r3, #6
 8018be6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018be8:	bf00      	nop
 8018bea:	3708      	adds	r7, #8
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	e000ed00 	.word	0xe000ed00

08018bf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b082      	sub	sp, #8
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7fb fb4f 	bl	80142a6 <USBD_LL_Resume>
}
 8018c08:	bf00      	nop
 8018c0a:	3708      	adds	r7, #8
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	bd80      	pop	{r7, pc}

08018c10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	b082      	sub	sp, #8
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
 8018c18:	460b      	mov	r3, r1
 8018c1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018c22:	78fa      	ldrb	r2, [r7, #3]
 8018c24:	4611      	mov	r1, r2
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7fb fba7 	bl	801437a <USBD_LL_IsoOUTIncomplete>
}
 8018c2c:	bf00      	nop
 8018c2e:	3708      	adds	r7, #8
 8018c30:	46bd      	mov	sp, r7
 8018c32:	bd80      	pop	{r7, pc}

08018c34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b082      	sub	sp, #8
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
 8018c3c:	460b      	mov	r3, r1
 8018c3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018c46:	78fa      	ldrb	r2, [r7, #3]
 8018c48:	4611      	mov	r1, r2
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7fb fb63 	bl	8014316 <USBD_LL_IsoINIncomplete>
}
 8018c50:	bf00      	nop
 8018c52:	3708      	adds	r7, #8
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}

08018c58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b082      	sub	sp, #8
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018c66:	4618      	mov	r0, r3
 8018c68:	f7fb fbb9 	bl	80143de <USBD_LL_DevConnected>
}
 8018c6c:	bf00      	nop
 8018c6e:	3708      	adds	r7, #8
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}

08018c74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b082      	sub	sp, #8
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018c82:	4618      	mov	r0, r3
 8018c84:	f7fb fbb6 	bl	80143f4 <USBD_LL_DevDisconnected>
}
 8018c88:	bf00      	nop
 8018c8a:	3708      	adds	r7, #8
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}

08018c90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b082      	sub	sp, #8
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	781b      	ldrb	r3, [r3, #0]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d13c      	bne.n	8018d1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018ca0:	4a20      	ldr	r2, [pc, #128]	; (8018d24 <USBD_LL_Init+0x94>)
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	4a1e      	ldr	r2, [pc, #120]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018cb0:	4b1c      	ldr	r3, [pc, #112]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018cb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018cb8:	4b1a      	ldr	r3, [pc, #104]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cba:	2204      	movs	r2, #4
 8018cbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018cbe:	4b19      	ldr	r3, [pc, #100]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cc0:	2202      	movs	r2, #2
 8018cc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018cc4:	4b17      	ldr	r3, [pc, #92]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cc6:	2200      	movs	r2, #0
 8018cc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018cca:	4b16      	ldr	r3, [pc, #88]	; (8018d24 <USBD_LL_Init+0x94>)
 8018ccc:	2202      	movs	r2, #2
 8018cce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018cd0:	4b14      	ldr	r3, [pc, #80]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018cd6:	4b13      	ldr	r3, [pc, #76]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cd8:	2200      	movs	r2, #0
 8018cda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018cdc:	4b11      	ldr	r3, [pc, #68]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cde:	2200      	movs	r2, #0
 8018ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018ce2:	4b10      	ldr	r3, [pc, #64]	; (8018d24 <USBD_LL_Init+0x94>)
 8018ce4:	2200      	movs	r2, #0
 8018ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018ce8:	4b0e      	ldr	r3, [pc, #56]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cea:	2200      	movs	r2, #0
 8018cec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018cee:	480d      	ldr	r0, [pc, #52]	; (8018d24 <USBD_LL_Init+0x94>)
 8018cf0:	f7f4 fa1f 	bl	800d132 <HAL_PCD_Init>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d001      	beq.n	8018cfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018cfa:	f7ea fd7a 	bl	80037f2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018cfe:	2180      	movs	r1, #128	; 0x80
 8018d00:	4808      	ldr	r0, [pc, #32]	; (8018d24 <USBD_LL_Init+0x94>)
 8018d02:	f7f5 fc76 	bl	800e5f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018d06:	2240      	movs	r2, #64	; 0x40
 8018d08:	2100      	movs	r1, #0
 8018d0a:	4806      	ldr	r0, [pc, #24]	; (8018d24 <USBD_LL_Init+0x94>)
 8018d0c:	f7f5 fc2a 	bl	800e564 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018d10:	2280      	movs	r2, #128	; 0x80
 8018d12:	2101      	movs	r1, #1
 8018d14:	4803      	ldr	r0, [pc, #12]	; (8018d24 <USBD_LL_Init+0x94>)
 8018d16:	f7f5 fc25 	bl	800e564 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018d1a:	2300      	movs	r3, #0
}
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	3708      	adds	r7, #8
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}
 8018d24:	2000de00 	.word	0x2000de00

08018d28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b084      	sub	sp, #16
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d30:	2300      	movs	r3, #0
 8018d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d34:	2300      	movs	r3, #0
 8018d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7f4 fb14 	bl	800d36c <HAL_PCD_Start>
 8018d44:	4603      	mov	r3, r0
 8018d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d48:	7bfb      	ldrb	r3, [r7, #15]
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f000 f942 	bl	8018fd4 <USBD_Get_USB_Status>
 8018d50:	4603      	mov	r3, r0
 8018d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d56:	4618      	mov	r0, r3
 8018d58:	3710      	adds	r7, #16
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}

08018d5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018d5e:	b580      	push	{r7, lr}
 8018d60:	b084      	sub	sp, #16
 8018d62:	af00      	add	r7, sp, #0
 8018d64:	6078      	str	r0, [r7, #4]
 8018d66:	4608      	mov	r0, r1
 8018d68:	4611      	mov	r1, r2
 8018d6a:	461a      	mov	r2, r3
 8018d6c:	4603      	mov	r3, r0
 8018d6e:	70fb      	strb	r3, [r7, #3]
 8018d70:	460b      	mov	r3, r1
 8018d72:	70bb      	strb	r3, [r7, #2]
 8018d74:	4613      	mov	r3, r2
 8018d76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d78:	2300      	movs	r3, #0
 8018d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018d86:	78bb      	ldrb	r3, [r7, #2]
 8018d88:	883a      	ldrh	r2, [r7, #0]
 8018d8a:	78f9      	ldrb	r1, [r7, #3]
 8018d8c:	f7f4 ffe5 	bl	800dd5a <HAL_PCD_EP_Open>
 8018d90:	4603      	mov	r3, r0
 8018d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d94:	7bfb      	ldrb	r3, [r7, #15]
 8018d96:	4618      	mov	r0, r3
 8018d98:	f000 f91c 	bl	8018fd4 <USBD_Get_USB_Status>
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018da2:	4618      	mov	r0, r3
 8018da4:	3710      	adds	r7, #16
 8018da6:	46bd      	mov	sp, r7
 8018da8:	bd80      	pop	{r7, pc}

08018daa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018daa:	b580      	push	{r7, lr}
 8018dac:	b084      	sub	sp, #16
 8018dae:	af00      	add	r7, sp, #0
 8018db0:	6078      	str	r0, [r7, #4]
 8018db2:	460b      	mov	r3, r1
 8018db4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018db6:	2300      	movs	r3, #0
 8018db8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018dba:	2300      	movs	r3, #0
 8018dbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018dc4:	78fa      	ldrb	r2, [r7, #3]
 8018dc6:	4611      	mov	r1, r2
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7f5 f82e 	bl	800de2a <HAL_PCD_EP_Close>
 8018dce:	4603      	mov	r3, r0
 8018dd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018dd2:	7bfb      	ldrb	r3, [r7, #15]
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f000 f8fd 	bl	8018fd4 <USBD_Get_USB_Status>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8018de0:	4618      	mov	r0, r3
 8018de2:	3710      	adds	r7, #16
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd80      	pop	{r7, pc}

08018de8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b084      	sub	sp, #16
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
 8018df0:	460b      	mov	r3, r1
 8018df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018df4:	2300      	movs	r3, #0
 8018df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018e02:	78fa      	ldrb	r2, [r7, #3]
 8018e04:	4611      	mov	r1, r2
 8018e06:	4618      	mov	r0, r3
 8018e08:	f7f5 f906 	bl	800e018 <HAL_PCD_EP_SetStall>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e10:	7bfb      	ldrb	r3, [r7, #15]
 8018e12:	4618      	mov	r0, r3
 8018e14:	f000 f8de 	bl	8018fd4 <USBD_Get_USB_Status>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e1e:	4618      	mov	r0, r3
 8018e20:	3710      	adds	r7, #16
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}

08018e26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e26:	b580      	push	{r7, lr}
 8018e28:	b084      	sub	sp, #16
 8018e2a:	af00      	add	r7, sp, #0
 8018e2c:	6078      	str	r0, [r7, #4]
 8018e2e:	460b      	mov	r3, r1
 8018e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e32:	2300      	movs	r3, #0
 8018e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e36:	2300      	movs	r3, #0
 8018e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018e40:	78fa      	ldrb	r2, [r7, #3]
 8018e42:	4611      	mov	r1, r2
 8018e44:	4618      	mov	r0, r3
 8018e46:	f7f5 f94b 	bl	800e0e0 <HAL_PCD_EP_ClrStall>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e4e:	7bfb      	ldrb	r3, [r7, #15]
 8018e50:	4618      	mov	r0, r3
 8018e52:	f000 f8bf 	bl	8018fd4 <USBD_Get_USB_Status>
 8018e56:	4603      	mov	r3, r0
 8018e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	3710      	adds	r7, #16
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e64:	b480      	push	{r7}
 8018e66:	b085      	sub	sp, #20
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	460b      	mov	r3, r1
 8018e6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018e76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	da0b      	bge.n	8018e98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018e80:	78fb      	ldrb	r3, [r7, #3]
 8018e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018e86:	68f9      	ldr	r1, [r7, #12]
 8018e88:	4613      	mov	r3, r2
 8018e8a:	00db      	lsls	r3, r3, #3
 8018e8c:	4413      	add	r3, r2
 8018e8e:	009b      	lsls	r3, r3, #2
 8018e90:	440b      	add	r3, r1
 8018e92:	333e      	adds	r3, #62	; 0x3e
 8018e94:	781b      	ldrb	r3, [r3, #0]
 8018e96:	e00b      	b.n	8018eb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018e98:	78fb      	ldrb	r3, [r7, #3]
 8018e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018e9e:	68f9      	ldr	r1, [r7, #12]
 8018ea0:	4613      	mov	r3, r2
 8018ea2:	00db      	lsls	r3, r3, #3
 8018ea4:	4413      	add	r3, r2
 8018ea6:	009b      	lsls	r3, r3, #2
 8018ea8:	440b      	add	r3, r1
 8018eaa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018eae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	3714      	adds	r7, #20
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eba:	4770      	bx	lr

08018ebc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b084      	sub	sp, #16
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
 8018ec4:	460b      	mov	r3, r1
 8018ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ec8:	2300      	movs	r3, #0
 8018eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ecc:	2300      	movs	r3, #0
 8018ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018ed6:	78fa      	ldrb	r2, [r7, #3]
 8018ed8:	4611      	mov	r1, r2
 8018eda:	4618      	mov	r0, r3
 8018edc:	f7f4 ff18 	bl	800dd10 <HAL_PCD_SetAddress>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ee4:	7bfb      	ldrb	r3, [r7, #15]
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f000 f874 	bl	8018fd4 <USBD_Get_USB_Status>
 8018eec:	4603      	mov	r3, r0
 8018eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	3710      	adds	r7, #16
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd80      	pop	{r7, pc}

08018efa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018efa:	b580      	push	{r7, lr}
 8018efc:	b086      	sub	sp, #24
 8018efe:	af00      	add	r7, sp, #0
 8018f00:	60f8      	str	r0, [r7, #12]
 8018f02:	607a      	str	r2, [r7, #4]
 8018f04:	603b      	str	r3, [r7, #0]
 8018f06:	460b      	mov	r3, r1
 8018f08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018f18:	7af9      	ldrb	r1, [r7, #11]
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	687a      	ldr	r2, [r7, #4]
 8018f1e:	f7f5 f831 	bl	800df84 <HAL_PCD_EP_Transmit>
 8018f22:	4603      	mov	r3, r0
 8018f24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f26:	7dfb      	ldrb	r3, [r7, #23]
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f000 f853 	bl	8018fd4 <USBD_Get_USB_Status>
 8018f2e:	4603      	mov	r3, r0
 8018f30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018f32:	7dbb      	ldrb	r3, [r7, #22]
}
 8018f34:	4618      	mov	r0, r3
 8018f36:	3718      	adds	r7, #24
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}

08018f3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b086      	sub	sp, #24
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	60f8      	str	r0, [r7, #12]
 8018f44:	607a      	str	r2, [r7, #4]
 8018f46:	603b      	str	r3, [r7, #0]
 8018f48:	460b      	mov	r3, r1
 8018f4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f50:	2300      	movs	r3, #0
 8018f52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018f5a:	7af9      	ldrb	r1, [r7, #11]
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	687a      	ldr	r2, [r7, #4]
 8018f60:	f7f4 ffad 	bl	800debe <HAL_PCD_EP_Receive>
 8018f64:	4603      	mov	r3, r0
 8018f66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f68:	7dfb      	ldrb	r3, [r7, #23]
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f000 f832 	bl	8018fd4 <USBD_Get_USB_Status>
 8018f70:	4603      	mov	r3, r0
 8018f72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018f74:	7dbb      	ldrb	r3, [r7, #22]
}
 8018f76:	4618      	mov	r0, r3
 8018f78:	3718      	adds	r7, #24
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}

08018f7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f7e:	b580      	push	{r7, lr}
 8018f80:	b082      	sub	sp, #8
 8018f82:	af00      	add	r7, sp, #0
 8018f84:	6078      	str	r0, [r7, #4]
 8018f86:	460b      	mov	r3, r1
 8018f88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018f90:	78fa      	ldrb	r2, [r7, #3]
 8018f92:	4611      	mov	r1, r2
 8018f94:	4618      	mov	r0, r3
 8018f96:	f7f4 ffdd 	bl	800df54 <HAL_PCD_EP_GetRxCount>
 8018f9a:	4603      	mov	r3, r0
}
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	3708      	adds	r7, #8
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd80      	pop	{r7, pc}

08018fa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018fa4:	b480      	push	{r7}
 8018fa6:	b083      	sub	sp, #12
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018fac:	4b03      	ldr	r3, [pc, #12]	; (8018fbc <USBD_static_malloc+0x18>)
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	370c      	adds	r7, #12
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb8:	4770      	bx	lr
 8018fba:	bf00      	nop
 8018fbc:	2000e30c 	.word	0x2000e30c

08018fc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018fc0:	b480      	push	{r7}
 8018fc2:	b083      	sub	sp, #12
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]

}
 8018fc8:	bf00      	nop
 8018fca:	370c      	adds	r7, #12
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd2:	4770      	bx	lr

08018fd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018fd4:	b480      	push	{r7}
 8018fd6:	b085      	sub	sp, #20
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	4603      	mov	r3, r0
 8018fdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fde:	2300      	movs	r3, #0
 8018fe0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018fe2:	79fb      	ldrb	r3, [r7, #7]
 8018fe4:	2b03      	cmp	r3, #3
 8018fe6:	d817      	bhi.n	8019018 <USBD_Get_USB_Status+0x44>
 8018fe8:	a201      	add	r2, pc, #4	; (adr r2, 8018ff0 <USBD_Get_USB_Status+0x1c>)
 8018fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fee:	bf00      	nop
 8018ff0:	08019001 	.word	0x08019001
 8018ff4:	08019007 	.word	0x08019007
 8018ff8:	0801900d 	.word	0x0801900d
 8018ffc:	08019013 	.word	0x08019013
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019000:	2300      	movs	r3, #0
 8019002:	73fb      	strb	r3, [r7, #15]
    break;
 8019004:	e00b      	b.n	801901e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019006:	2303      	movs	r3, #3
 8019008:	73fb      	strb	r3, [r7, #15]
    break;
 801900a:	e008      	b.n	801901e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801900c:	2301      	movs	r3, #1
 801900e:	73fb      	strb	r3, [r7, #15]
    break;
 8019010:	e005      	b.n	801901e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019012:	2303      	movs	r3, #3
 8019014:	73fb      	strb	r3, [r7, #15]
    break;
 8019016:	e002      	b.n	801901e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019018:	2303      	movs	r3, #3
 801901a:	73fb      	strb	r3, [r7, #15]
    break;
 801901c:	bf00      	nop
  }
  return usb_status;
 801901e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019020:	4618      	mov	r0, r3
 8019022:	3714      	adds	r7, #20
 8019024:	46bd      	mov	sp, r7
 8019026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902a:	4770      	bx	lr

0801902c <__cvt>:
 801902c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019030:	ec55 4b10 	vmov	r4, r5, d0
 8019034:	2d00      	cmp	r5, #0
 8019036:	460e      	mov	r6, r1
 8019038:	4619      	mov	r1, r3
 801903a:	462b      	mov	r3, r5
 801903c:	bfbb      	ittet	lt
 801903e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019042:	461d      	movlt	r5, r3
 8019044:	2300      	movge	r3, #0
 8019046:	232d      	movlt	r3, #45	; 0x2d
 8019048:	700b      	strb	r3, [r1, #0]
 801904a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801904c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019050:	4691      	mov	r9, r2
 8019052:	f023 0820 	bic.w	r8, r3, #32
 8019056:	bfbc      	itt	lt
 8019058:	4622      	movlt	r2, r4
 801905a:	4614      	movlt	r4, r2
 801905c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019060:	d005      	beq.n	801906e <__cvt+0x42>
 8019062:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019066:	d100      	bne.n	801906a <__cvt+0x3e>
 8019068:	3601      	adds	r6, #1
 801906a:	2102      	movs	r1, #2
 801906c:	e000      	b.n	8019070 <__cvt+0x44>
 801906e:	2103      	movs	r1, #3
 8019070:	ab03      	add	r3, sp, #12
 8019072:	9301      	str	r3, [sp, #4]
 8019074:	ab02      	add	r3, sp, #8
 8019076:	9300      	str	r3, [sp, #0]
 8019078:	ec45 4b10 	vmov	d0, r4, r5
 801907c:	4653      	mov	r3, sl
 801907e:	4632      	mov	r2, r6
 8019080:	f001 f8ce 	bl	801a220 <_dtoa_r>
 8019084:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019088:	4607      	mov	r7, r0
 801908a:	d102      	bne.n	8019092 <__cvt+0x66>
 801908c:	f019 0f01 	tst.w	r9, #1
 8019090:	d022      	beq.n	80190d8 <__cvt+0xac>
 8019092:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019096:	eb07 0906 	add.w	r9, r7, r6
 801909a:	d110      	bne.n	80190be <__cvt+0x92>
 801909c:	783b      	ldrb	r3, [r7, #0]
 801909e:	2b30      	cmp	r3, #48	; 0x30
 80190a0:	d10a      	bne.n	80190b8 <__cvt+0x8c>
 80190a2:	2200      	movs	r2, #0
 80190a4:	2300      	movs	r3, #0
 80190a6:	4620      	mov	r0, r4
 80190a8:	4629      	mov	r1, r5
 80190aa:	f7e7 fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80190ae:	b918      	cbnz	r0, 80190b8 <__cvt+0x8c>
 80190b0:	f1c6 0601 	rsb	r6, r6, #1
 80190b4:	f8ca 6000 	str.w	r6, [sl]
 80190b8:	f8da 3000 	ldr.w	r3, [sl]
 80190bc:	4499      	add	r9, r3
 80190be:	2200      	movs	r2, #0
 80190c0:	2300      	movs	r3, #0
 80190c2:	4620      	mov	r0, r4
 80190c4:	4629      	mov	r1, r5
 80190c6:	f7e7 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 80190ca:	b108      	cbz	r0, 80190d0 <__cvt+0xa4>
 80190cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80190d0:	2230      	movs	r2, #48	; 0x30
 80190d2:	9b03      	ldr	r3, [sp, #12]
 80190d4:	454b      	cmp	r3, r9
 80190d6:	d307      	bcc.n	80190e8 <__cvt+0xbc>
 80190d8:	9b03      	ldr	r3, [sp, #12]
 80190da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80190dc:	1bdb      	subs	r3, r3, r7
 80190de:	4638      	mov	r0, r7
 80190e0:	6013      	str	r3, [r2, #0]
 80190e2:	b004      	add	sp, #16
 80190e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190e8:	1c59      	adds	r1, r3, #1
 80190ea:	9103      	str	r1, [sp, #12]
 80190ec:	701a      	strb	r2, [r3, #0]
 80190ee:	e7f0      	b.n	80190d2 <__cvt+0xa6>

080190f0 <__exponent>:
 80190f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190f2:	4603      	mov	r3, r0
 80190f4:	2900      	cmp	r1, #0
 80190f6:	bfb8      	it	lt
 80190f8:	4249      	neglt	r1, r1
 80190fa:	f803 2b02 	strb.w	r2, [r3], #2
 80190fe:	bfb4      	ite	lt
 8019100:	222d      	movlt	r2, #45	; 0x2d
 8019102:	222b      	movge	r2, #43	; 0x2b
 8019104:	2909      	cmp	r1, #9
 8019106:	7042      	strb	r2, [r0, #1]
 8019108:	dd2a      	ble.n	8019160 <__exponent+0x70>
 801910a:	f10d 0207 	add.w	r2, sp, #7
 801910e:	4617      	mov	r7, r2
 8019110:	260a      	movs	r6, #10
 8019112:	4694      	mov	ip, r2
 8019114:	fb91 f5f6 	sdiv	r5, r1, r6
 8019118:	fb06 1415 	mls	r4, r6, r5, r1
 801911c:	3430      	adds	r4, #48	; 0x30
 801911e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8019122:	460c      	mov	r4, r1
 8019124:	2c63      	cmp	r4, #99	; 0x63
 8019126:	f102 32ff 	add.w	r2, r2, #4294967295
 801912a:	4629      	mov	r1, r5
 801912c:	dcf1      	bgt.n	8019112 <__exponent+0x22>
 801912e:	3130      	adds	r1, #48	; 0x30
 8019130:	f1ac 0402 	sub.w	r4, ip, #2
 8019134:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019138:	1c41      	adds	r1, r0, #1
 801913a:	4622      	mov	r2, r4
 801913c:	42ba      	cmp	r2, r7
 801913e:	d30a      	bcc.n	8019156 <__exponent+0x66>
 8019140:	f10d 0209 	add.w	r2, sp, #9
 8019144:	eba2 020c 	sub.w	r2, r2, ip
 8019148:	42bc      	cmp	r4, r7
 801914a:	bf88      	it	hi
 801914c:	2200      	movhi	r2, #0
 801914e:	4413      	add	r3, r2
 8019150:	1a18      	subs	r0, r3, r0
 8019152:	b003      	add	sp, #12
 8019154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019156:	f812 5b01 	ldrb.w	r5, [r2], #1
 801915a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801915e:	e7ed      	b.n	801913c <__exponent+0x4c>
 8019160:	2330      	movs	r3, #48	; 0x30
 8019162:	3130      	adds	r1, #48	; 0x30
 8019164:	7083      	strb	r3, [r0, #2]
 8019166:	70c1      	strb	r1, [r0, #3]
 8019168:	1d03      	adds	r3, r0, #4
 801916a:	e7f1      	b.n	8019150 <__exponent+0x60>

0801916c <_printf_float>:
 801916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019170:	ed2d 8b02 	vpush	{d8}
 8019174:	b08d      	sub	sp, #52	; 0x34
 8019176:	460c      	mov	r4, r1
 8019178:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801917c:	4616      	mov	r6, r2
 801917e:	461f      	mov	r7, r3
 8019180:	4605      	mov	r5, r0
 8019182:	f000 fee5 	bl	8019f50 <_localeconv_r>
 8019186:	f8d0 a000 	ldr.w	sl, [r0]
 801918a:	4650      	mov	r0, sl
 801918c:	f7e7 f870 	bl	8000270 <strlen>
 8019190:	2300      	movs	r3, #0
 8019192:	930a      	str	r3, [sp, #40]	; 0x28
 8019194:	6823      	ldr	r3, [r4, #0]
 8019196:	9305      	str	r3, [sp, #20]
 8019198:	f8d8 3000 	ldr.w	r3, [r8]
 801919c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80191a0:	3307      	adds	r3, #7
 80191a2:	f023 0307 	bic.w	r3, r3, #7
 80191a6:	f103 0208 	add.w	r2, r3, #8
 80191aa:	f8c8 2000 	str.w	r2, [r8]
 80191ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80191b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80191b6:	9307      	str	r3, [sp, #28]
 80191b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80191bc:	ee08 0a10 	vmov	s16, r0
 80191c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80191c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80191c8:	4b9e      	ldr	r3, [pc, #632]	; (8019444 <_printf_float+0x2d8>)
 80191ca:	f04f 32ff 	mov.w	r2, #4294967295
 80191ce:	f7e7 fcad 	bl	8000b2c <__aeabi_dcmpun>
 80191d2:	bb88      	cbnz	r0, 8019238 <_printf_float+0xcc>
 80191d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80191d8:	4b9a      	ldr	r3, [pc, #616]	; (8019444 <_printf_float+0x2d8>)
 80191da:	f04f 32ff 	mov.w	r2, #4294967295
 80191de:	f7e7 fc87 	bl	8000af0 <__aeabi_dcmple>
 80191e2:	bb48      	cbnz	r0, 8019238 <_printf_float+0xcc>
 80191e4:	2200      	movs	r2, #0
 80191e6:	2300      	movs	r3, #0
 80191e8:	4640      	mov	r0, r8
 80191ea:	4649      	mov	r1, r9
 80191ec:	f7e7 fc76 	bl	8000adc <__aeabi_dcmplt>
 80191f0:	b110      	cbz	r0, 80191f8 <_printf_float+0x8c>
 80191f2:	232d      	movs	r3, #45	; 0x2d
 80191f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80191f8:	4a93      	ldr	r2, [pc, #588]	; (8019448 <_printf_float+0x2dc>)
 80191fa:	4b94      	ldr	r3, [pc, #592]	; (801944c <_printf_float+0x2e0>)
 80191fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019200:	bf94      	ite	ls
 8019202:	4690      	movls	r8, r2
 8019204:	4698      	movhi	r8, r3
 8019206:	2303      	movs	r3, #3
 8019208:	6123      	str	r3, [r4, #16]
 801920a:	9b05      	ldr	r3, [sp, #20]
 801920c:	f023 0304 	bic.w	r3, r3, #4
 8019210:	6023      	str	r3, [r4, #0]
 8019212:	f04f 0900 	mov.w	r9, #0
 8019216:	9700      	str	r7, [sp, #0]
 8019218:	4633      	mov	r3, r6
 801921a:	aa0b      	add	r2, sp, #44	; 0x2c
 801921c:	4621      	mov	r1, r4
 801921e:	4628      	mov	r0, r5
 8019220:	f000 f9da 	bl	80195d8 <_printf_common>
 8019224:	3001      	adds	r0, #1
 8019226:	f040 8090 	bne.w	801934a <_printf_float+0x1de>
 801922a:	f04f 30ff 	mov.w	r0, #4294967295
 801922e:	b00d      	add	sp, #52	; 0x34
 8019230:	ecbd 8b02 	vpop	{d8}
 8019234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019238:	4642      	mov	r2, r8
 801923a:	464b      	mov	r3, r9
 801923c:	4640      	mov	r0, r8
 801923e:	4649      	mov	r1, r9
 8019240:	f7e7 fc74 	bl	8000b2c <__aeabi_dcmpun>
 8019244:	b140      	cbz	r0, 8019258 <_printf_float+0xec>
 8019246:	464b      	mov	r3, r9
 8019248:	2b00      	cmp	r3, #0
 801924a:	bfbc      	itt	lt
 801924c:	232d      	movlt	r3, #45	; 0x2d
 801924e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019252:	4a7f      	ldr	r2, [pc, #508]	; (8019450 <_printf_float+0x2e4>)
 8019254:	4b7f      	ldr	r3, [pc, #508]	; (8019454 <_printf_float+0x2e8>)
 8019256:	e7d1      	b.n	80191fc <_printf_float+0x90>
 8019258:	6863      	ldr	r3, [r4, #4]
 801925a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801925e:	9206      	str	r2, [sp, #24]
 8019260:	1c5a      	adds	r2, r3, #1
 8019262:	d13f      	bne.n	80192e4 <_printf_float+0x178>
 8019264:	2306      	movs	r3, #6
 8019266:	6063      	str	r3, [r4, #4]
 8019268:	9b05      	ldr	r3, [sp, #20]
 801926a:	6861      	ldr	r1, [r4, #4]
 801926c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019270:	2300      	movs	r3, #0
 8019272:	9303      	str	r3, [sp, #12]
 8019274:	ab0a      	add	r3, sp, #40	; 0x28
 8019276:	e9cd b301 	strd	fp, r3, [sp, #4]
 801927a:	ab09      	add	r3, sp, #36	; 0x24
 801927c:	ec49 8b10 	vmov	d0, r8, r9
 8019280:	9300      	str	r3, [sp, #0]
 8019282:	6022      	str	r2, [r4, #0]
 8019284:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019288:	4628      	mov	r0, r5
 801928a:	f7ff fecf 	bl	801902c <__cvt>
 801928e:	9b06      	ldr	r3, [sp, #24]
 8019290:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019292:	2b47      	cmp	r3, #71	; 0x47
 8019294:	4680      	mov	r8, r0
 8019296:	d108      	bne.n	80192aa <_printf_float+0x13e>
 8019298:	1cc8      	adds	r0, r1, #3
 801929a:	db02      	blt.n	80192a2 <_printf_float+0x136>
 801929c:	6863      	ldr	r3, [r4, #4]
 801929e:	4299      	cmp	r1, r3
 80192a0:	dd41      	ble.n	8019326 <_printf_float+0x1ba>
 80192a2:	f1ab 0302 	sub.w	r3, fp, #2
 80192a6:	fa5f fb83 	uxtb.w	fp, r3
 80192aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80192ae:	d820      	bhi.n	80192f2 <_printf_float+0x186>
 80192b0:	3901      	subs	r1, #1
 80192b2:	465a      	mov	r2, fp
 80192b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80192b8:	9109      	str	r1, [sp, #36]	; 0x24
 80192ba:	f7ff ff19 	bl	80190f0 <__exponent>
 80192be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80192c0:	1813      	adds	r3, r2, r0
 80192c2:	2a01      	cmp	r2, #1
 80192c4:	4681      	mov	r9, r0
 80192c6:	6123      	str	r3, [r4, #16]
 80192c8:	dc02      	bgt.n	80192d0 <_printf_float+0x164>
 80192ca:	6822      	ldr	r2, [r4, #0]
 80192cc:	07d2      	lsls	r2, r2, #31
 80192ce:	d501      	bpl.n	80192d4 <_printf_float+0x168>
 80192d0:	3301      	adds	r3, #1
 80192d2:	6123      	str	r3, [r4, #16]
 80192d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d09c      	beq.n	8019216 <_printf_float+0xaa>
 80192dc:	232d      	movs	r3, #45	; 0x2d
 80192de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80192e2:	e798      	b.n	8019216 <_printf_float+0xaa>
 80192e4:	9a06      	ldr	r2, [sp, #24]
 80192e6:	2a47      	cmp	r2, #71	; 0x47
 80192e8:	d1be      	bne.n	8019268 <_printf_float+0xfc>
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d1bc      	bne.n	8019268 <_printf_float+0xfc>
 80192ee:	2301      	movs	r3, #1
 80192f0:	e7b9      	b.n	8019266 <_printf_float+0xfa>
 80192f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80192f6:	d118      	bne.n	801932a <_printf_float+0x1be>
 80192f8:	2900      	cmp	r1, #0
 80192fa:	6863      	ldr	r3, [r4, #4]
 80192fc:	dd0b      	ble.n	8019316 <_printf_float+0x1aa>
 80192fe:	6121      	str	r1, [r4, #16]
 8019300:	b913      	cbnz	r3, 8019308 <_printf_float+0x19c>
 8019302:	6822      	ldr	r2, [r4, #0]
 8019304:	07d0      	lsls	r0, r2, #31
 8019306:	d502      	bpl.n	801930e <_printf_float+0x1a2>
 8019308:	3301      	adds	r3, #1
 801930a:	440b      	add	r3, r1
 801930c:	6123      	str	r3, [r4, #16]
 801930e:	65a1      	str	r1, [r4, #88]	; 0x58
 8019310:	f04f 0900 	mov.w	r9, #0
 8019314:	e7de      	b.n	80192d4 <_printf_float+0x168>
 8019316:	b913      	cbnz	r3, 801931e <_printf_float+0x1b2>
 8019318:	6822      	ldr	r2, [r4, #0]
 801931a:	07d2      	lsls	r2, r2, #31
 801931c:	d501      	bpl.n	8019322 <_printf_float+0x1b6>
 801931e:	3302      	adds	r3, #2
 8019320:	e7f4      	b.n	801930c <_printf_float+0x1a0>
 8019322:	2301      	movs	r3, #1
 8019324:	e7f2      	b.n	801930c <_printf_float+0x1a0>
 8019326:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801932a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801932c:	4299      	cmp	r1, r3
 801932e:	db05      	blt.n	801933c <_printf_float+0x1d0>
 8019330:	6823      	ldr	r3, [r4, #0]
 8019332:	6121      	str	r1, [r4, #16]
 8019334:	07d8      	lsls	r0, r3, #31
 8019336:	d5ea      	bpl.n	801930e <_printf_float+0x1a2>
 8019338:	1c4b      	adds	r3, r1, #1
 801933a:	e7e7      	b.n	801930c <_printf_float+0x1a0>
 801933c:	2900      	cmp	r1, #0
 801933e:	bfd4      	ite	le
 8019340:	f1c1 0202 	rsble	r2, r1, #2
 8019344:	2201      	movgt	r2, #1
 8019346:	4413      	add	r3, r2
 8019348:	e7e0      	b.n	801930c <_printf_float+0x1a0>
 801934a:	6823      	ldr	r3, [r4, #0]
 801934c:	055a      	lsls	r2, r3, #21
 801934e:	d407      	bmi.n	8019360 <_printf_float+0x1f4>
 8019350:	6923      	ldr	r3, [r4, #16]
 8019352:	4642      	mov	r2, r8
 8019354:	4631      	mov	r1, r6
 8019356:	4628      	mov	r0, r5
 8019358:	47b8      	blx	r7
 801935a:	3001      	adds	r0, #1
 801935c:	d12c      	bne.n	80193b8 <_printf_float+0x24c>
 801935e:	e764      	b.n	801922a <_printf_float+0xbe>
 8019360:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019364:	f240 80e0 	bls.w	8019528 <_printf_float+0x3bc>
 8019368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801936c:	2200      	movs	r2, #0
 801936e:	2300      	movs	r3, #0
 8019370:	f7e7 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8019374:	2800      	cmp	r0, #0
 8019376:	d034      	beq.n	80193e2 <_printf_float+0x276>
 8019378:	4a37      	ldr	r2, [pc, #220]	; (8019458 <_printf_float+0x2ec>)
 801937a:	2301      	movs	r3, #1
 801937c:	4631      	mov	r1, r6
 801937e:	4628      	mov	r0, r5
 8019380:	47b8      	blx	r7
 8019382:	3001      	adds	r0, #1
 8019384:	f43f af51 	beq.w	801922a <_printf_float+0xbe>
 8019388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801938c:	429a      	cmp	r2, r3
 801938e:	db02      	blt.n	8019396 <_printf_float+0x22a>
 8019390:	6823      	ldr	r3, [r4, #0]
 8019392:	07d8      	lsls	r0, r3, #31
 8019394:	d510      	bpl.n	80193b8 <_printf_float+0x24c>
 8019396:	ee18 3a10 	vmov	r3, s16
 801939a:	4652      	mov	r2, sl
 801939c:	4631      	mov	r1, r6
 801939e:	4628      	mov	r0, r5
 80193a0:	47b8      	blx	r7
 80193a2:	3001      	adds	r0, #1
 80193a4:	f43f af41 	beq.w	801922a <_printf_float+0xbe>
 80193a8:	f04f 0800 	mov.w	r8, #0
 80193ac:	f104 091a 	add.w	r9, r4, #26
 80193b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193b2:	3b01      	subs	r3, #1
 80193b4:	4543      	cmp	r3, r8
 80193b6:	dc09      	bgt.n	80193cc <_printf_float+0x260>
 80193b8:	6823      	ldr	r3, [r4, #0]
 80193ba:	079b      	lsls	r3, r3, #30
 80193bc:	f100 8107 	bmi.w	80195ce <_printf_float+0x462>
 80193c0:	68e0      	ldr	r0, [r4, #12]
 80193c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193c4:	4298      	cmp	r0, r3
 80193c6:	bfb8      	it	lt
 80193c8:	4618      	movlt	r0, r3
 80193ca:	e730      	b.n	801922e <_printf_float+0xc2>
 80193cc:	2301      	movs	r3, #1
 80193ce:	464a      	mov	r2, r9
 80193d0:	4631      	mov	r1, r6
 80193d2:	4628      	mov	r0, r5
 80193d4:	47b8      	blx	r7
 80193d6:	3001      	adds	r0, #1
 80193d8:	f43f af27 	beq.w	801922a <_printf_float+0xbe>
 80193dc:	f108 0801 	add.w	r8, r8, #1
 80193e0:	e7e6      	b.n	80193b0 <_printf_float+0x244>
 80193e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	dc39      	bgt.n	801945c <_printf_float+0x2f0>
 80193e8:	4a1b      	ldr	r2, [pc, #108]	; (8019458 <_printf_float+0x2ec>)
 80193ea:	2301      	movs	r3, #1
 80193ec:	4631      	mov	r1, r6
 80193ee:	4628      	mov	r0, r5
 80193f0:	47b8      	blx	r7
 80193f2:	3001      	adds	r0, #1
 80193f4:	f43f af19 	beq.w	801922a <_printf_float+0xbe>
 80193f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80193fc:	4313      	orrs	r3, r2
 80193fe:	d102      	bne.n	8019406 <_printf_float+0x29a>
 8019400:	6823      	ldr	r3, [r4, #0]
 8019402:	07d9      	lsls	r1, r3, #31
 8019404:	d5d8      	bpl.n	80193b8 <_printf_float+0x24c>
 8019406:	ee18 3a10 	vmov	r3, s16
 801940a:	4652      	mov	r2, sl
 801940c:	4631      	mov	r1, r6
 801940e:	4628      	mov	r0, r5
 8019410:	47b8      	blx	r7
 8019412:	3001      	adds	r0, #1
 8019414:	f43f af09 	beq.w	801922a <_printf_float+0xbe>
 8019418:	f04f 0900 	mov.w	r9, #0
 801941c:	f104 0a1a 	add.w	sl, r4, #26
 8019420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019422:	425b      	negs	r3, r3
 8019424:	454b      	cmp	r3, r9
 8019426:	dc01      	bgt.n	801942c <_printf_float+0x2c0>
 8019428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801942a:	e792      	b.n	8019352 <_printf_float+0x1e6>
 801942c:	2301      	movs	r3, #1
 801942e:	4652      	mov	r2, sl
 8019430:	4631      	mov	r1, r6
 8019432:	4628      	mov	r0, r5
 8019434:	47b8      	blx	r7
 8019436:	3001      	adds	r0, #1
 8019438:	f43f aef7 	beq.w	801922a <_printf_float+0xbe>
 801943c:	f109 0901 	add.w	r9, r9, #1
 8019440:	e7ee      	b.n	8019420 <_printf_float+0x2b4>
 8019442:	bf00      	nop
 8019444:	7fefffff 	.word	0x7fefffff
 8019448:	0801fc88 	.word	0x0801fc88
 801944c:	0801fc8c 	.word	0x0801fc8c
 8019450:	0801fc90 	.word	0x0801fc90
 8019454:	0801fc94 	.word	0x0801fc94
 8019458:	0801fc98 	.word	0x0801fc98
 801945c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801945e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019460:	429a      	cmp	r2, r3
 8019462:	bfa8      	it	ge
 8019464:	461a      	movge	r2, r3
 8019466:	2a00      	cmp	r2, #0
 8019468:	4691      	mov	r9, r2
 801946a:	dc37      	bgt.n	80194dc <_printf_float+0x370>
 801946c:	f04f 0b00 	mov.w	fp, #0
 8019470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019474:	f104 021a 	add.w	r2, r4, #26
 8019478:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801947a:	9305      	str	r3, [sp, #20]
 801947c:	eba3 0309 	sub.w	r3, r3, r9
 8019480:	455b      	cmp	r3, fp
 8019482:	dc33      	bgt.n	80194ec <_printf_float+0x380>
 8019484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019488:	429a      	cmp	r2, r3
 801948a:	db3b      	blt.n	8019504 <_printf_float+0x398>
 801948c:	6823      	ldr	r3, [r4, #0]
 801948e:	07da      	lsls	r2, r3, #31
 8019490:	d438      	bmi.n	8019504 <_printf_float+0x398>
 8019492:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8019496:	eba2 0903 	sub.w	r9, r2, r3
 801949a:	9b05      	ldr	r3, [sp, #20]
 801949c:	1ad2      	subs	r2, r2, r3
 801949e:	4591      	cmp	r9, r2
 80194a0:	bfa8      	it	ge
 80194a2:	4691      	movge	r9, r2
 80194a4:	f1b9 0f00 	cmp.w	r9, #0
 80194a8:	dc35      	bgt.n	8019516 <_printf_float+0x3aa>
 80194aa:	f04f 0800 	mov.w	r8, #0
 80194ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80194b2:	f104 0a1a 	add.w	sl, r4, #26
 80194b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80194ba:	1a9b      	subs	r3, r3, r2
 80194bc:	eba3 0309 	sub.w	r3, r3, r9
 80194c0:	4543      	cmp	r3, r8
 80194c2:	f77f af79 	ble.w	80193b8 <_printf_float+0x24c>
 80194c6:	2301      	movs	r3, #1
 80194c8:	4652      	mov	r2, sl
 80194ca:	4631      	mov	r1, r6
 80194cc:	4628      	mov	r0, r5
 80194ce:	47b8      	blx	r7
 80194d0:	3001      	adds	r0, #1
 80194d2:	f43f aeaa 	beq.w	801922a <_printf_float+0xbe>
 80194d6:	f108 0801 	add.w	r8, r8, #1
 80194da:	e7ec      	b.n	80194b6 <_printf_float+0x34a>
 80194dc:	4613      	mov	r3, r2
 80194de:	4631      	mov	r1, r6
 80194e0:	4642      	mov	r2, r8
 80194e2:	4628      	mov	r0, r5
 80194e4:	47b8      	blx	r7
 80194e6:	3001      	adds	r0, #1
 80194e8:	d1c0      	bne.n	801946c <_printf_float+0x300>
 80194ea:	e69e      	b.n	801922a <_printf_float+0xbe>
 80194ec:	2301      	movs	r3, #1
 80194ee:	4631      	mov	r1, r6
 80194f0:	4628      	mov	r0, r5
 80194f2:	9205      	str	r2, [sp, #20]
 80194f4:	47b8      	blx	r7
 80194f6:	3001      	adds	r0, #1
 80194f8:	f43f ae97 	beq.w	801922a <_printf_float+0xbe>
 80194fc:	9a05      	ldr	r2, [sp, #20]
 80194fe:	f10b 0b01 	add.w	fp, fp, #1
 8019502:	e7b9      	b.n	8019478 <_printf_float+0x30c>
 8019504:	ee18 3a10 	vmov	r3, s16
 8019508:	4652      	mov	r2, sl
 801950a:	4631      	mov	r1, r6
 801950c:	4628      	mov	r0, r5
 801950e:	47b8      	blx	r7
 8019510:	3001      	adds	r0, #1
 8019512:	d1be      	bne.n	8019492 <_printf_float+0x326>
 8019514:	e689      	b.n	801922a <_printf_float+0xbe>
 8019516:	9a05      	ldr	r2, [sp, #20]
 8019518:	464b      	mov	r3, r9
 801951a:	4442      	add	r2, r8
 801951c:	4631      	mov	r1, r6
 801951e:	4628      	mov	r0, r5
 8019520:	47b8      	blx	r7
 8019522:	3001      	adds	r0, #1
 8019524:	d1c1      	bne.n	80194aa <_printf_float+0x33e>
 8019526:	e680      	b.n	801922a <_printf_float+0xbe>
 8019528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801952a:	2a01      	cmp	r2, #1
 801952c:	dc01      	bgt.n	8019532 <_printf_float+0x3c6>
 801952e:	07db      	lsls	r3, r3, #31
 8019530:	d53a      	bpl.n	80195a8 <_printf_float+0x43c>
 8019532:	2301      	movs	r3, #1
 8019534:	4642      	mov	r2, r8
 8019536:	4631      	mov	r1, r6
 8019538:	4628      	mov	r0, r5
 801953a:	47b8      	blx	r7
 801953c:	3001      	adds	r0, #1
 801953e:	f43f ae74 	beq.w	801922a <_printf_float+0xbe>
 8019542:	ee18 3a10 	vmov	r3, s16
 8019546:	4652      	mov	r2, sl
 8019548:	4631      	mov	r1, r6
 801954a:	4628      	mov	r0, r5
 801954c:	47b8      	blx	r7
 801954e:	3001      	adds	r0, #1
 8019550:	f43f ae6b 	beq.w	801922a <_printf_float+0xbe>
 8019554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019558:	2200      	movs	r2, #0
 801955a:	2300      	movs	r3, #0
 801955c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8019560:	f7e7 fab2 	bl	8000ac8 <__aeabi_dcmpeq>
 8019564:	b9d8      	cbnz	r0, 801959e <_printf_float+0x432>
 8019566:	f10a 33ff 	add.w	r3, sl, #4294967295
 801956a:	f108 0201 	add.w	r2, r8, #1
 801956e:	4631      	mov	r1, r6
 8019570:	4628      	mov	r0, r5
 8019572:	47b8      	blx	r7
 8019574:	3001      	adds	r0, #1
 8019576:	d10e      	bne.n	8019596 <_printf_float+0x42a>
 8019578:	e657      	b.n	801922a <_printf_float+0xbe>
 801957a:	2301      	movs	r3, #1
 801957c:	4652      	mov	r2, sl
 801957e:	4631      	mov	r1, r6
 8019580:	4628      	mov	r0, r5
 8019582:	47b8      	blx	r7
 8019584:	3001      	adds	r0, #1
 8019586:	f43f ae50 	beq.w	801922a <_printf_float+0xbe>
 801958a:	f108 0801 	add.w	r8, r8, #1
 801958e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019590:	3b01      	subs	r3, #1
 8019592:	4543      	cmp	r3, r8
 8019594:	dcf1      	bgt.n	801957a <_printf_float+0x40e>
 8019596:	464b      	mov	r3, r9
 8019598:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801959c:	e6da      	b.n	8019354 <_printf_float+0x1e8>
 801959e:	f04f 0800 	mov.w	r8, #0
 80195a2:	f104 0a1a 	add.w	sl, r4, #26
 80195a6:	e7f2      	b.n	801958e <_printf_float+0x422>
 80195a8:	2301      	movs	r3, #1
 80195aa:	4642      	mov	r2, r8
 80195ac:	e7df      	b.n	801956e <_printf_float+0x402>
 80195ae:	2301      	movs	r3, #1
 80195b0:	464a      	mov	r2, r9
 80195b2:	4631      	mov	r1, r6
 80195b4:	4628      	mov	r0, r5
 80195b6:	47b8      	blx	r7
 80195b8:	3001      	adds	r0, #1
 80195ba:	f43f ae36 	beq.w	801922a <_printf_float+0xbe>
 80195be:	f108 0801 	add.w	r8, r8, #1
 80195c2:	68e3      	ldr	r3, [r4, #12]
 80195c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80195c6:	1a5b      	subs	r3, r3, r1
 80195c8:	4543      	cmp	r3, r8
 80195ca:	dcf0      	bgt.n	80195ae <_printf_float+0x442>
 80195cc:	e6f8      	b.n	80193c0 <_printf_float+0x254>
 80195ce:	f04f 0800 	mov.w	r8, #0
 80195d2:	f104 0919 	add.w	r9, r4, #25
 80195d6:	e7f4      	b.n	80195c2 <_printf_float+0x456>

080195d8 <_printf_common>:
 80195d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195dc:	4616      	mov	r6, r2
 80195de:	4699      	mov	r9, r3
 80195e0:	688a      	ldr	r2, [r1, #8]
 80195e2:	690b      	ldr	r3, [r1, #16]
 80195e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80195e8:	4293      	cmp	r3, r2
 80195ea:	bfb8      	it	lt
 80195ec:	4613      	movlt	r3, r2
 80195ee:	6033      	str	r3, [r6, #0]
 80195f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80195f4:	4607      	mov	r7, r0
 80195f6:	460c      	mov	r4, r1
 80195f8:	b10a      	cbz	r2, 80195fe <_printf_common+0x26>
 80195fa:	3301      	adds	r3, #1
 80195fc:	6033      	str	r3, [r6, #0]
 80195fe:	6823      	ldr	r3, [r4, #0]
 8019600:	0699      	lsls	r1, r3, #26
 8019602:	bf42      	ittt	mi
 8019604:	6833      	ldrmi	r3, [r6, #0]
 8019606:	3302      	addmi	r3, #2
 8019608:	6033      	strmi	r3, [r6, #0]
 801960a:	6825      	ldr	r5, [r4, #0]
 801960c:	f015 0506 	ands.w	r5, r5, #6
 8019610:	d106      	bne.n	8019620 <_printf_common+0x48>
 8019612:	f104 0a19 	add.w	sl, r4, #25
 8019616:	68e3      	ldr	r3, [r4, #12]
 8019618:	6832      	ldr	r2, [r6, #0]
 801961a:	1a9b      	subs	r3, r3, r2
 801961c:	42ab      	cmp	r3, r5
 801961e:	dc26      	bgt.n	801966e <_printf_common+0x96>
 8019620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019624:	1e13      	subs	r3, r2, #0
 8019626:	6822      	ldr	r2, [r4, #0]
 8019628:	bf18      	it	ne
 801962a:	2301      	movne	r3, #1
 801962c:	0692      	lsls	r2, r2, #26
 801962e:	d42b      	bmi.n	8019688 <_printf_common+0xb0>
 8019630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019634:	4649      	mov	r1, r9
 8019636:	4638      	mov	r0, r7
 8019638:	47c0      	blx	r8
 801963a:	3001      	adds	r0, #1
 801963c:	d01e      	beq.n	801967c <_printf_common+0xa4>
 801963e:	6823      	ldr	r3, [r4, #0]
 8019640:	6922      	ldr	r2, [r4, #16]
 8019642:	f003 0306 	and.w	r3, r3, #6
 8019646:	2b04      	cmp	r3, #4
 8019648:	bf02      	ittt	eq
 801964a:	68e5      	ldreq	r5, [r4, #12]
 801964c:	6833      	ldreq	r3, [r6, #0]
 801964e:	1aed      	subeq	r5, r5, r3
 8019650:	68a3      	ldr	r3, [r4, #8]
 8019652:	bf0c      	ite	eq
 8019654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019658:	2500      	movne	r5, #0
 801965a:	4293      	cmp	r3, r2
 801965c:	bfc4      	itt	gt
 801965e:	1a9b      	subgt	r3, r3, r2
 8019660:	18ed      	addgt	r5, r5, r3
 8019662:	2600      	movs	r6, #0
 8019664:	341a      	adds	r4, #26
 8019666:	42b5      	cmp	r5, r6
 8019668:	d11a      	bne.n	80196a0 <_printf_common+0xc8>
 801966a:	2000      	movs	r0, #0
 801966c:	e008      	b.n	8019680 <_printf_common+0xa8>
 801966e:	2301      	movs	r3, #1
 8019670:	4652      	mov	r2, sl
 8019672:	4649      	mov	r1, r9
 8019674:	4638      	mov	r0, r7
 8019676:	47c0      	blx	r8
 8019678:	3001      	adds	r0, #1
 801967a:	d103      	bne.n	8019684 <_printf_common+0xac>
 801967c:	f04f 30ff 	mov.w	r0, #4294967295
 8019680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019684:	3501      	adds	r5, #1
 8019686:	e7c6      	b.n	8019616 <_printf_common+0x3e>
 8019688:	18e1      	adds	r1, r4, r3
 801968a:	1c5a      	adds	r2, r3, #1
 801968c:	2030      	movs	r0, #48	; 0x30
 801968e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019692:	4422      	add	r2, r4
 8019694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801969c:	3302      	adds	r3, #2
 801969e:	e7c7      	b.n	8019630 <_printf_common+0x58>
 80196a0:	2301      	movs	r3, #1
 80196a2:	4622      	mov	r2, r4
 80196a4:	4649      	mov	r1, r9
 80196a6:	4638      	mov	r0, r7
 80196a8:	47c0      	blx	r8
 80196aa:	3001      	adds	r0, #1
 80196ac:	d0e6      	beq.n	801967c <_printf_common+0xa4>
 80196ae:	3601      	adds	r6, #1
 80196b0:	e7d9      	b.n	8019666 <_printf_common+0x8e>
	...

080196b4 <_printf_i>:
 80196b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80196b8:	7e0f      	ldrb	r7, [r1, #24]
 80196ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80196bc:	2f78      	cmp	r7, #120	; 0x78
 80196be:	4691      	mov	r9, r2
 80196c0:	4680      	mov	r8, r0
 80196c2:	460c      	mov	r4, r1
 80196c4:	469a      	mov	sl, r3
 80196c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80196ca:	d807      	bhi.n	80196dc <_printf_i+0x28>
 80196cc:	2f62      	cmp	r7, #98	; 0x62
 80196ce:	d80a      	bhi.n	80196e6 <_printf_i+0x32>
 80196d0:	2f00      	cmp	r7, #0
 80196d2:	f000 80d4 	beq.w	801987e <_printf_i+0x1ca>
 80196d6:	2f58      	cmp	r7, #88	; 0x58
 80196d8:	f000 80c0 	beq.w	801985c <_printf_i+0x1a8>
 80196dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80196e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80196e4:	e03a      	b.n	801975c <_printf_i+0xa8>
 80196e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80196ea:	2b15      	cmp	r3, #21
 80196ec:	d8f6      	bhi.n	80196dc <_printf_i+0x28>
 80196ee:	a101      	add	r1, pc, #4	; (adr r1, 80196f4 <_printf_i+0x40>)
 80196f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80196f4:	0801974d 	.word	0x0801974d
 80196f8:	08019761 	.word	0x08019761
 80196fc:	080196dd 	.word	0x080196dd
 8019700:	080196dd 	.word	0x080196dd
 8019704:	080196dd 	.word	0x080196dd
 8019708:	080196dd 	.word	0x080196dd
 801970c:	08019761 	.word	0x08019761
 8019710:	080196dd 	.word	0x080196dd
 8019714:	080196dd 	.word	0x080196dd
 8019718:	080196dd 	.word	0x080196dd
 801971c:	080196dd 	.word	0x080196dd
 8019720:	08019865 	.word	0x08019865
 8019724:	0801978d 	.word	0x0801978d
 8019728:	0801981f 	.word	0x0801981f
 801972c:	080196dd 	.word	0x080196dd
 8019730:	080196dd 	.word	0x080196dd
 8019734:	08019887 	.word	0x08019887
 8019738:	080196dd 	.word	0x080196dd
 801973c:	0801978d 	.word	0x0801978d
 8019740:	080196dd 	.word	0x080196dd
 8019744:	080196dd 	.word	0x080196dd
 8019748:	08019827 	.word	0x08019827
 801974c:	682b      	ldr	r3, [r5, #0]
 801974e:	1d1a      	adds	r2, r3, #4
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	602a      	str	r2, [r5, #0]
 8019754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801975c:	2301      	movs	r3, #1
 801975e:	e09f      	b.n	80198a0 <_printf_i+0x1ec>
 8019760:	6820      	ldr	r0, [r4, #0]
 8019762:	682b      	ldr	r3, [r5, #0]
 8019764:	0607      	lsls	r7, r0, #24
 8019766:	f103 0104 	add.w	r1, r3, #4
 801976a:	6029      	str	r1, [r5, #0]
 801976c:	d501      	bpl.n	8019772 <_printf_i+0xbe>
 801976e:	681e      	ldr	r6, [r3, #0]
 8019770:	e003      	b.n	801977a <_printf_i+0xc6>
 8019772:	0646      	lsls	r6, r0, #25
 8019774:	d5fb      	bpl.n	801976e <_printf_i+0xba>
 8019776:	f9b3 6000 	ldrsh.w	r6, [r3]
 801977a:	2e00      	cmp	r6, #0
 801977c:	da03      	bge.n	8019786 <_printf_i+0xd2>
 801977e:	232d      	movs	r3, #45	; 0x2d
 8019780:	4276      	negs	r6, r6
 8019782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019786:	485a      	ldr	r0, [pc, #360]	; (80198f0 <_printf_i+0x23c>)
 8019788:	230a      	movs	r3, #10
 801978a:	e012      	b.n	80197b2 <_printf_i+0xfe>
 801978c:	682b      	ldr	r3, [r5, #0]
 801978e:	6820      	ldr	r0, [r4, #0]
 8019790:	1d19      	adds	r1, r3, #4
 8019792:	6029      	str	r1, [r5, #0]
 8019794:	0605      	lsls	r5, r0, #24
 8019796:	d501      	bpl.n	801979c <_printf_i+0xe8>
 8019798:	681e      	ldr	r6, [r3, #0]
 801979a:	e002      	b.n	80197a2 <_printf_i+0xee>
 801979c:	0641      	lsls	r1, r0, #25
 801979e:	d5fb      	bpl.n	8019798 <_printf_i+0xe4>
 80197a0:	881e      	ldrh	r6, [r3, #0]
 80197a2:	4853      	ldr	r0, [pc, #332]	; (80198f0 <_printf_i+0x23c>)
 80197a4:	2f6f      	cmp	r7, #111	; 0x6f
 80197a6:	bf0c      	ite	eq
 80197a8:	2308      	moveq	r3, #8
 80197aa:	230a      	movne	r3, #10
 80197ac:	2100      	movs	r1, #0
 80197ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80197b2:	6865      	ldr	r5, [r4, #4]
 80197b4:	60a5      	str	r5, [r4, #8]
 80197b6:	2d00      	cmp	r5, #0
 80197b8:	bfa2      	ittt	ge
 80197ba:	6821      	ldrge	r1, [r4, #0]
 80197bc:	f021 0104 	bicge.w	r1, r1, #4
 80197c0:	6021      	strge	r1, [r4, #0]
 80197c2:	b90e      	cbnz	r6, 80197c8 <_printf_i+0x114>
 80197c4:	2d00      	cmp	r5, #0
 80197c6:	d04b      	beq.n	8019860 <_printf_i+0x1ac>
 80197c8:	4615      	mov	r5, r2
 80197ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80197ce:	fb03 6711 	mls	r7, r3, r1, r6
 80197d2:	5dc7      	ldrb	r7, [r0, r7]
 80197d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80197d8:	4637      	mov	r7, r6
 80197da:	42bb      	cmp	r3, r7
 80197dc:	460e      	mov	r6, r1
 80197de:	d9f4      	bls.n	80197ca <_printf_i+0x116>
 80197e0:	2b08      	cmp	r3, #8
 80197e2:	d10b      	bne.n	80197fc <_printf_i+0x148>
 80197e4:	6823      	ldr	r3, [r4, #0]
 80197e6:	07de      	lsls	r6, r3, #31
 80197e8:	d508      	bpl.n	80197fc <_printf_i+0x148>
 80197ea:	6923      	ldr	r3, [r4, #16]
 80197ec:	6861      	ldr	r1, [r4, #4]
 80197ee:	4299      	cmp	r1, r3
 80197f0:	bfde      	ittt	le
 80197f2:	2330      	movle	r3, #48	; 0x30
 80197f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80197f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80197fc:	1b52      	subs	r2, r2, r5
 80197fe:	6122      	str	r2, [r4, #16]
 8019800:	f8cd a000 	str.w	sl, [sp]
 8019804:	464b      	mov	r3, r9
 8019806:	aa03      	add	r2, sp, #12
 8019808:	4621      	mov	r1, r4
 801980a:	4640      	mov	r0, r8
 801980c:	f7ff fee4 	bl	80195d8 <_printf_common>
 8019810:	3001      	adds	r0, #1
 8019812:	d14a      	bne.n	80198aa <_printf_i+0x1f6>
 8019814:	f04f 30ff 	mov.w	r0, #4294967295
 8019818:	b004      	add	sp, #16
 801981a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801981e:	6823      	ldr	r3, [r4, #0]
 8019820:	f043 0320 	orr.w	r3, r3, #32
 8019824:	6023      	str	r3, [r4, #0]
 8019826:	4833      	ldr	r0, [pc, #204]	; (80198f4 <_printf_i+0x240>)
 8019828:	2778      	movs	r7, #120	; 0x78
 801982a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801982e:	6823      	ldr	r3, [r4, #0]
 8019830:	6829      	ldr	r1, [r5, #0]
 8019832:	061f      	lsls	r7, r3, #24
 8019834:	f851 6b04 	ldr.w	r6, [r1], #4
 8019838:	d402      	bmi.n	8019840 <_printf_i+0x18c>
 801983a:	065f      	lsls	r7, r3, #25
 801983c:	bf48      	it	mi
 801983e:	b2b6      	uxthmi	r6, r6
 8019840:	07df      	lsls	r7, r3, #31
 8019842:	bf48      	it	mi
 8019844:	f043 0320 	orrmi.w	r3, r3, #32
 8019848:	6029      	str	r1, [r5, #0]
 801984a:	bf48      	it	mi
 801984c:	6023      	strmi	r3, [r4, #0]
 801984e:	b91e      	cbnz	r6, 8019858 <_printf_i+0x1a4>
 8019850:	6823      	ldr	r3, [r4, #0]
 8019852:	f023 0320 	bic.w	r3, r3, #32
 8019856:	6023      	str	r3, [r4, #0]
 8019858:	2310      	movs	r3, #16
 801985a:	e7a7      	b.n	80197ac <_printf_i+0xf8>
 801985c:	4824      	ldr	r0, [pc, #144]	; (80198f0 <_printf_i+0x23c>)
 801985e:	e7e4      	b.n	801982a <_printf_i+0x176>
 8019860:	4615      	mov	r5, r2
 8019862:	e7bd      	b.n	80197e0 <_printf_i+0x12c>
 8019864:	682b      	ldr	r3, [r5, #0]
 8019866:	6826      	ldr	r6, [r4, #0]
 8019868:	6961      	ldr	r1, [r4, #20]
 801986a:	1d18      	adds	r0, r3, #4
 801986c:	6028      	str	r0, [r5, #0]
 801986e:	0635      	lsls	r5, r6, #24
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	d501      	bpl.n	8019878 <_printf_i+0x1c4>
 8019874:	6019      	str	r1, [r3, #0]
 8019876:	e002      	b.n	801987e <_printf_i+0x1ca>
 8019878:	0670      	lsls	r0, r6, #25
 801987a:	d5fb      	bpl.n	8019874 <_printf_i+0x1c0>
 801987c:	8019      	strh	r1, [r3, #0]
 801987e:	2300      	movs	r3, #0
 8019880:	6123      	str	r3, [r4, #16]
 8019882:	4615      	mov	r5, r2
 8019884:	e7bc      	b.n	8019800 <_printf_i+0x14c>
 8019886:	682b      	ldr	r3, [r5, #0]
 8019888:	1d1a      	adds	r2, r3, #4
 801988a:	602a      	str	r2, [r5, #0]
 801988c:	681d      	ldr	r5, [r3, #0]
 801988e:	6862      	ldr	r2, [r4, #4]
 8019890:	2100      	movs	r1, #0
 8019892:	4628      	mov	r0, r5
 8019894:	f7e6 fc9c 	bl	80001d0 <memchr>
 8019898:	b108      	cbz	r0, 801989e <_printf_i+0x1ea>
 801989a:	1b40      	subs	r0, r0, r5
 801989c:	6060      	str	r0, [r4, #4]
 801989e:	6863      	ldr	r3, [r4, #4]
 80198a0:	6123      	str	r3, [r4, #16]
 80198a2:	2300      	movs	r3, #0
 80198a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80198a8:	e7aa      	b.n	8019800 <_printf_i+0x14c>
 80198aa:	6923      	ldr	r3, [r4, #16]
 80198ac:	462a      	mov	r2, r5
 80198ae:	4649      	mov	r1, r9
 80198b0:	4640      	mov	r0, r8
 80198b2:	47d0      	blx	sl
 80198b4:	3001      	adds	r0, #1
 80198b6:	d0ad      	beq.n	8019814 <_printf_i+0x160>
 80198b8:	6823      	ldr	r3, [r4, #0]
 80198ba:	079b      	lsls	r3, r3, #30
 80198bc:	d413      	bmi.n	80198e6 <_printf_i+0x232>
 80198be:	68e0      	ldr	r0, [r4, #12]
 80198c0:	9b03      	ldr	r3, [sp, #12]
 80198c2:	4298      	cmp	r0, r3
 80198c4:	bfb8      	it	lt
 80198c6:	4618      	movlt	r0, r3
 80198c8:	e7a6      	b.n	8019818 <_printf_i+0x164>
 80198ca:	2301      	movs	r3, #1
 80198cc:	4632      	mov	r2, r6
 80198ce:	4649      	mov	r1, r9
 80198d0:	4640      	mov	r0, r8
 80198d2:	47d0      	blx	sl
 80198d4:	3001      	adds	r0, #1
 80198d6:	d09d      	beq.n	8019814 <_printf_i+0x160>
 80198d8:	3501      	adds	r5, #1
 80198da:	68e3      	ldr	r3, [r4, #12]
 80198dc:	9903      	ldr	r1, [sp, #12]
 80198de:	1a5b      	subs	r3, r3, r1
 80198e0:	42ab      	cmp	r3, r5
 80198e2:	dcf2      	bgt.n	80198ca <_printf_i+0x216>
 80198e4:	e7eb      	b.n	80198be <_printf_i+0x20a>
 80198e6:	2500      	movs	r5, #0
 80198e8:	f104 0619 	add.w	r6, r4, #25
 80198ec:	e7f5      	b.n	80198da <_printf_i+0x226>
 80198ee:	bf00      	nop
 80198f0:	0801fc9a 	.word	0x0801fc9a
 80198f4:	0801fcab 	.word	0x0801fcab

080198f8 <_scanf_float>:
 80198f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198fc:	b087      	sub	sp, #28
 80198fe:	4617      	mov	r7, r2
 8019900:	9303      	str	r3, [sp, #12]
 8019902:	688b      	ldr	r3, [r1, #8]
 8019904:	1e5a      	subs	r2, r3, #1
 8019906:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801990a:	bf83      	ittte	hi
 801990c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019910:	195b      	addhi	r3, r3, r5
 8019912:	9302      	strhi	r3, [sp, #8]
 8019914:	2300      	movls	r3, #0
 8019916:	bf86      	itte	hi
 8019918:	f240 135d 	movwhi	r3, #349	; 0x15d
 801991c:	608b      	strhi	r3, [r1, #8]
 801991e:	9302      	strls	r3, [sp, #8]
 8019920:	680b      	ldr	r3, [r1, #0]
 8019922:	468b      	mov	fp, r1
 8019924:	2500      	movs	r5, #0
 8019926:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801992a:	f84b 3b1c 	str.w	r3, [fp], #28
 801992e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019932:	4680      	mov	r8, r0
 8019934:	460c      	mov	r4, r1
 8019936:	465e      	mov	r6, fp
 8019938:	46aa      	mov	sl, r5
 801993a:	46a9      	mov	r9, r5
 801993c:	9501      	str	r5, [sp, #4]
 801993e:	68a2      	ldr	r2, [r4, #8]
 8019940:	b152      	cbz	r2, 8019958 <_scanf_float+0x60>
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	781b      	ldrb	r3, [r3, #0]
 8019946:	2b4e      	cmp	r3, #78	; 0x4e
 8019948:	d864      	bhi.n	8019a14 <_scanf_float+0x11c>
 801994a:	2b40      	cmp	r3, #64	; 0x40
 801994c:	d83c      	bhi.n	80199c8 <_scanf_float+0xd0>
 801994e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019952:	b2c8      	uxtb	r0, r1
 8019954:	280e      	cmp	r0, #14
 8019956:	d93a      	bls.n	80199ce <_scanf_float+0xd6>
 8019958:	f1b9 0f00 	cmp.w	r9, #0
 801995c:	d003      	beq.n	8019966 <_scanf_float+0x6e>
 801995e:	6823      	ldr	r3, [r4, #0]
 8019960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019964:	6023      	str	r3, [r4, #0]
 8019966:	f10a 3aff 	add.w	sl, sl, #4294967295
 801996a:	f1ba 0f01 	cmp.w	sl, #1
 801996e:	f200 8113 	bhi.w	8019b98 <_scanf_float+0x2a0>
 8019972:	455e      	cmp	r6, fp
 8019974:	f200 8105 	bhi.w	8019b82 <_scanf_float+0x28a>
 8019978:	2501      	movs	r5, #1
 801997a:	4628      	mov	r0, r5
 801997c:	b007      	add	sp, #28
 801997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019982:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019986:	2a0d      	cmp	r2, #13
 8019988:	d8e6      	bhi.n	8019958 <_scanf_float+0x60>
 801998a:	a101      	add	r1, pc, #4	; (adr r1, 8019990 <_scanf_float+0x98>)
 801998c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019990:	08019acf 	.word	0x08019acf
 8019994:	08019959 	.word	0x08019959
 8019998:	08019959 	.word	0x08019959
 801999c:	08019959 	.word	0x08019959
 80199a0:	08019b2f 	.word	0x08019b2f
 80199a4:	08019b07 	.word	0x08019b07
 80199a8:	08019959 	.word	0x08019959
 80199ac:	08019959 	.word	0x08019959
 80199b0:	08019add 	.word	0x08019add
 80199b4:	08019959 	.word	0x08019959
 80199b8:	08019959 	.word	0x08019959
 80199bc:	08019959 	.word	0x08019959
 80199c0:	08019959 	.word	0x08019959
 80199c4:	08019a95 	.word	0x08019a95
 80199c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80199cc:	e7db      	b.n	8019986 <_scanf_float+0x8e>
 80199ce:	290e      	cmp	r1, #14
 80199d0:	d8c2      	bhi.n	8019958 <_scanf_float+0x60>
 80199d2:	a001      	add	r0, pc, #4	; (adr r0, 80199d8 <_scanf_float+0xe0>)
 80199d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80199d8:	08019a87 	.word	0x08019a87
 80199dc:	08019959 	.word	0x08019959
 80199e0:	08019a87 	.word	0x08019a87
 80199e4:	08019b1b 	.word	0x08019b1b
 80199e8:	08019959 	.word	0x08019959
 80199ec:	08019a35 	.word	0x08019a35
 80199f0:	08019a71 	.word	0x08019a71
 80199f4:	08019a71 	.word	0x08019a71
 80199f8:	08019a71 	.word	0x08019a71
 80199fc:	08019a71 	.word	0x08019a71
 8019a00:	08019a71 	.word	0x08019a71
 8019a04:	08019a71 	.word	0x08019a71
 8019a08:	08019a71 	.word	0x08019a71
 8019a0c:	08019a71 	.word	0x08019a71
 8019a10:	08019a71 	.word	0x08019a71
 8019a14:	2b6e      	cmp	r3, #110	; 0x6e
 8019a16:	d809      	bhi.n	8019a2c <_scanf_float+0x134>
 8019a18:	2b60      	cmp	r3, #96	; 0x60
 8019a1a:	d8b2      	bhi.n	8019982 <_scanf_float+0x8a>
 8019a1c:	2b54      	cmp	r3, #84	; 0x54
 8019a1e:	d077      	beq.n	8019b10 <_scanf_float+0x218>
 8019a20:	2b59      	cmp	r3, #89	; 0x59
 8019a22:	d199      	bne.n	8019958 <_scanf_float+0x60>
 8019a24:	2d07      	cmp	r5, #7
 8019a26:	d197      	bne.n	8019958 <_scanf_float+0x60>
 8019a28:	2508      	movs	r5, #8
 8019a2a:	e029      	b.n	8019a80 <_scanf_float+0x188>
 8019a2c:	2b74      	cmp	r3, #116	; 0x74
 8019a2e:	d06f      	beq.n	8019b10 <_scanf_float+0x218>
 8019a30:	2b79      	cmp	r3, #121	; 0x79
 8019a32:	e7f6      	b.n	8019a22 <_scanf_float+0x12a>
 8019a34:	6821      	ldr	r1, [r4, #0]
 8019a36:	05c8      	lsls	r0, r1, #23
 8019a38:	d51a      	bpl.n	8019a70 <_scanf_float+0x178>
 8019a3a:	9b02      	ldr	r3, [sp, #8]
 8019a3c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019a40:	6021      	str	r1, [r4, #0]
 8019a42:	f109 0901 	add.w	r9, r9, #1
 8019a46:	b11b      	cbz	r3, 8019a50 <_scanf_float+0x158>
 8019a48:	3b01      	subs	r3, #1
 8019a4a:	3201      	adds	r2, #1
 8019a4c:	9302      	str	r3, [sp, #8]
 8019a4e:	60a2      	str	r2, [r4, #8]
 8019a50:	68a3      	ldr	r3, [r4, #8]
 8019a52:	3b01      	subs	r3, #1
 8019a54:	60a3      	str	r3, [r4, #8]
 8019a56:	6923      	ldr	r3, [r4, #16]
 8019a58:	3301      	adds	r3, #1
 8019a5a:	6123      	str	r3, [r4, #16]
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	3b01      	subs	r3, #1
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	607b      	str	r3, [r7, #4]
 8019a64:	f340 8084 	ble.w	8019b70 <_scanf_float+0x278>
 8019a68:	683b      	ldr	r3, [r7, #0]
 8019a6a:	3301      	adds	r3, #1
 8019a6c:	603b      	str	r3, [r7, #0]
 8019a6e:	e766      	b.n	801993e <_scanf_float+0x46>
 8019a70:	eb1a 0f05 	cmn.w	sl, r5
 8019a74:	f47f af70 	bne.w	8019958 <_scanf_float+0x60>
 8019a78:	6822      	ldr	r2, [r4, #0]
 8019a7a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8019a7e:	6022      	str	r2, [r4, #0]
 8019a80:	f806 3b01 	strb.w	r3, [r6], #1
 8019a84:	e7e4      	b.n	8019a50 <_scanf_float+0x158>
 8019a86:	6822      	ldr	r2, [r4, #0]
 8019a88:	0610      	lsls	r0, r2, #24
 8019a8a:	f57f af65 	bpl.w	8019958 <_scanf_float+0x60>
 8019a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019a92:	e7f4      	b.n	8019a7e <_scanf_float+0x186>
 8019a94:	f1ba 0f00 	cmp.w	sl, #0
 8019a98:	d10e      	bne.n	8019ab8 <_scanf_float+0x1c0>
 8019a9a:	f1b9 0f00 	cmp.w	r9, #0
 8019a9e:	d10e      	bne.n	8019abe <_scanf_float+0x1c6>
 8019aa0:	6822      	ldr	r2, [r4, #0]
 8019aa2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019aa6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019aaa:	d108      	bne.n	8019abe <_scanf_float+0x1c6>
 8019aac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019ab0:	6022      	str	r2, [r4, #0]
 8019ab2:	f04f 0a01 	mov.w	sl, #1
 8019ab6:	e7e3      	b.n	8019a80 <_scanf_float+0x188>
 8019ab8:	f1ba 0f02 	cmp.w	sl, #2
 8019abc:	d055      	beq.n	8019b6a <_scanf_float+0x272>
 8019abe:	2d01      	cmp	r5, #1
 8019ac0:	d002      	beq.n	8019ac8 <_scanf_float+0x1d0>
 8019ac2:	2d04      	cmp	r5, #4
 8019ac4:	f47f af48 	bne.w	8019958 <_scanf_float+0x60>
 8019ac8:	3501      	adds	r5, #1
 8019aca:	b2ed      	uxtb	r5, r5
 8019acc:	e7d8      	b.n	8019a80 <_scanf_float+0x188>
 8019ace:	f1ba 0f01 	cmp.w	sl, #1
 8019ad2:	f47f af41 	bne.w	8019958 <_scanf_float+0x60>
 8019ad6:	f04f 0a02 	mov.w	sl, #2
 8019ada:	e7d1      	b.n	8019a80 <_scanf_float+0x188>
 8019adc:	b97d      	cbnz	r5, 8019afe <_scanf_float+0x206>
 8019ade:	f1b9 0f00 	cmp.w	r9, #0
 8019ae2:	f47f af3c 	bne.w	801995e <_scanf_float+0x66>
 8019ae6:	6822      	ldr	r2, [r4, #0]
 8019ae8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019aec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019af0:	f47f af39 	bne.w	8019966 <_scanf_float+0x6e>
 8019af4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019af8:	6022      	str	r2, [r4, #0]
 8019afa:	2501      	movs	r5, #1
 8019afc:	e7c0      	b.n	8019a80 <_scanf_float+0x188>
 8019afe:	2d03      	cmp	r5, #3
 8019b00:	d0e2      	beq.n	8019ac8 <_scanf_float+0x1d0>
 8019b02:	2d05      	cmp	r5, #5
 8019b04:	e7de      	b.n	8019ac4 <_scanf_float+0x1cc>
 8019b06:	2d02      	cmp	r5, #2
 8019b08:	f47f af26 	bne.w	8019958 <_scanf_float+0x60>
 8019b0c:	2503      	movs	r5, #3
 8019b0e:	e7b7      	b.n	8019a80 <_scanf_float+0x188>
 8019b10:	2d06      	cmp	r5, #6
 8019b12:	f47f af21 	bne.w	8019958 <_scanf_float+0x60>
 8019b16:	2507      	movs	r5, #7
 8019b18:	e7b2      	b.n	8019a80 <_scanf_float+0x188>
 8019b1a:	6822      	ldr	r2, [r4, #0]
 8019b1c:	0591      	lsls	r1, r2, #22
 8019b1e:	f57f af1b 	bpl.w	8019958 <_scanf_float+0x60>
 8019b22:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8019b26:	6022      	str	r2, [r4, #0]
 8019b28:	f8cd 9004 	str.w	r9, [sp, #4]
 8019b2c:	e7a8      	b.n	8019a80 <_scanf_float+0x188>
 8019b2e:	6822      	ldr	r2, [r4, #0]
 8019b30:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8019b34:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019b38:	d006      	beq.n	8019b48 <_scanf_float+0x250>
 8019b3a:	0550      	lsls	r0, r2, #21
 8019b3c:	f57f af0c 	bpl.w	8019958 <_scanf_float+0x60>
 8019b40:	f1b9 0f00 	cmp.w	r9, #0
 8019b44:	f43f af0f 	beq.w	8019966 <_scanf_float+0x6e>
 8019b48:	0591      	lsls	r1, r2, #22
 8019b4a:	bf58      	it	pl
 8019b4c:	9901      	ldrpl	r1, [sp, #4]
 8019b4e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019b52:	bf58      	it	pl
 8019b54:	eba9 0101 	subpl.w	r1, r9, r1
 8019b58:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019b5c:	bf58      	it	pl
 8019b5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019b62:	6022      	str	r2, [r4, #0]
 8019b64:	f04f 0900 	mov.w	r9, #0
 8019b68:	e78a      	b.n	8019a80 <_scanf_float+0x188>
 8019b6a:	f04f 0a03 	mov.w	sl, #3
 8019b6e:	e787      	b.n	8019a80 <_scanf_float+0x188>
 8019b70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019b74:	4639      	mov	r1, r7
 8019b76:	4640      	mov	r0, r8
 8019b78:	4798      	blx	r3
 8019b7a:	2800      	cmp	r0, #0
 8019b7c:	f43f aedf 	beq.w	801993e <_scanf_float+0x46>
 8019b80:	e6ea      	b.n	8019958 <_scanf_float+0x60>
 8019b82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019b86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019b8a:	463a      	mov	r2, r7
 8019b8c:	4640      	mov	r0, r8
 8019b8e:	4798      	blx	r3
 8019b90:	6923      	ldr	r3, [r4, #16]
 8019b92:	3b01      	subs	r3, #1
 8019b94:	6123      	str	r3, [r4, #16]
 8019b96:	e6ec      	b.n	8019972 <_scanf_float+0x7a>
 8019b98:	1e6b      	subs	r3, r5, #1
 8019b9a:	2b06      	cmp	r3, #6
 8019b9c:	d825      	bhi.n	8019bea <_scanf_float+0x2f2>
 8019b9e:	2d02      	cmp	r5, #2
 8019ba0:	d836      	bhi.n	8019c10 <_scanf_float+0x318>
 8019ba2:	455e      	cmp	r6, fp
 8019ba4:	f67f aee8 	bls.w	8019978 <_scanf_float+0x80>
 8019ba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019bac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019bb0:	463a      	mov	r2, r7
 8019bb2:	4640      	mov	r0, r8
 8019bb4:	4798      	blx	r3
 8019bb6:	6923      	ldr	r3, [r4, #16]
 8019bb8:	3b01      	subs	r3, #1
 8019bba:	6123      	str	r3, [r4, #16]
 8019bbc:	e7f1      	b.n	8019ba2 <_scanf_float+0x2aa>
 8019bbe:	9802      	ldr	r0, [sp, #8]
 8019bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019bc4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019bc8:	9002      	str	r0, [sp, #8]
 8019bca:	463a      	mov	r2, r7
 8019bcc:	4640      	mov	r0, r8
 8019bce:	4798      	blx	r3
 8019bd0:	6923      	ldr	r3, [r4, #16]
 8019bd2:	3b01      	subs	r3, #1
 8019bd4:	6123      	str	r3, [r4, #16]
 8019bd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019bda:	fa5f fa8a 	uxtb.w	sl, sl
 8019bde:	f1ba 0f02 	cmp.w	sl, #2
 8019be2:	d1ec      	bne.n	8019bbe <_scanf_float+0x2c6>
 8019be4:	3d03      	subs	r5, #3
 8019be6:	b2ed      	uxtb	r5, r5
 8019be8:	1b76      	subs	r6, r6, r5
 8019bea:	6823      	ldr	r3, [r4, #0]
 8019bec:	05da      	lsls	r2, r3, #23
 8019bee:	d52f      	bpl.n	8019c50 <_scanf_float+0x358>
 8019bf0:	055b      	lsls	r3, r3, #21
 8019bf2:	d510      	bpl.n	8019c16 <_scanf_float+0x31e>
 8019bf4:	455e      	cmp	r6, fp
 8019bf6:	f67f aebf 	bls.w	8019978 <_scanf_float+0x80>
 8019bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019bfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019c02:	463a      	mov	r2, r7
 8019c04:	4640      	mov	r0, r8
 8019c06:	4798      	blx	r3
 8019c08:	6923      	ldr	r3, [r4, #16]
 8019c0a:	3b01      	subs	r3, #1
 8019c0c:	6123      	str	r3, [r4, #16]
 8019c0e:	e7f1      	b.n	8019bf4 <_scanf_float+0x2fc>
 8019c10:	46aa      	mov	sl, r5
 8019c12:	9602      	str	r6, [sp, #8]
 8019c14:	e7df      	b.n	8019bd6 <_scanf_float+0x2de>
 8019c16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019c1a:	6923      	ldr	r3, [r4, #16]
 8019c1c:	2965      	cmp	r1, #101	; 0x65
 8019c1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8019c22:	f106 35ff 	add.w	r5, r6, #4294967295
 8019c26:	6123      	str	r3, [r4, #16]
 8019c28:	d00c      	beq.n	8019c44 <_scanf_float+0x34c>
 8019c2a:	2945      	cmp	r1, #69	; 0x45
 8019c2c:	d00a      	beq.n	8019c44 <_scanf_float+0x34c>
 8019c2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019c32:	463a      	mov	r2, r7
 8019c34:	4640      	mov	r0, r8
 8019c36:	4798      	blx	r3
 8019c38:	6923      	ldr	r3, [r4, #16]
 8019c3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019c3e:	3b01      	subs	r3, #1
 8019c40:	1eb5      	subs	r5, r6, #2
 8019c42:	6123      	str	r3, [r4, #16]
 8019c44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019c48:	463a      	mov	r2, r7
 8019c4a:	4640      	mov	r0, r8
 8019c4c:	4798      	blx	r3
 8019c4e:	462e      	mov	r6, r5
 8019c50:	6825      	ldr	r5, [r4, #0]
 8019c52:	f015 0510 	ands.w	r5, r5, #16
 8019c56:	d158      	bne.n	8019d0a <_scanf_float+0x412>
 8019c58:	7035      	strb	r5, [r6, #0]
 8019c5a:	6823      	ldr	r3, [r4, #0]
 8019c5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019c64:	d11c      	bne.n	8019ca0 <_scanf_float+0x3a8>
 8019c66:	9b01      	ldr	r3, [sp, #4]
 8019c68:	454b      	cmp	r3, r9
 8019c6a:	eba3 0209 	sub.w	r2, r3, r9
 8019c6e:	d124      	bne.n	8019cba <_scanf_float+0x3c2>
 8019c70:	2200      	movs	r2, #0
 8019c72:	4659      	mov	r1, fp
 8019c74:	4640      	mov	r0, r8
 8019c76:	f002 fc7f 	bl	801c578 <_strtod_r>
 8019c7a:	9b03      	ldr	r3, [sp, #12]
 8019c7c:	6821      	ldr	r1, [r4, #0]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	f011 0f02 	tst.w	r1, #2
 8019c84:	ec57 6b10 	vmov	r6, r7, d0
 8019c88:	f103 0204 	add.w	r2, r3, #4
 8019c8c:	d020      	beq.n	8019cd0 <_scanf_float+0x3d8>
 8019c8e:	9903      	ldr	r1, [sp, #12]
 8019c90:	600a      	str	r2, [r1, #0]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	e9c3 6700 	strd	r6, r7, [r3]
 8019c98:	68e3      	ldr	r3, [r4, #12]
 8019c9a:	3301      	adds	r3, #1
 8019c9c:	60e3      	str	r3, [r4, #12]
 8019c9e:	e66c      	b.n	801997a <_scanf_float+0x82>
 8019ca0:	9b04      	ldr	r3, [sp, #16]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d0e4      	beq.n	8019c70 <_scanf_float+0x378>
 8019ca6:	9905      	ldr	r1, [sp, #20]
 8019ca8:	230a      	movs	r3, #10
 8019caa:	462a      	mov	r2, r5
 8019cac:	3101      	adds	r1, #1
 8019cae:	4640      	mov	r0, r8
 8019cb0:	f002 fcea 	bl	801c688 <_strtol_r>
 8019cb4:	9b04      	ldr	r3, [sp, #16]
 8019cb6:	9e05      	ldr	r6, [sp, #20]
 8019cb8:	1ac2      	subs	r2, r0, r3
 8019cba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019cbe:	429e      	cmp	r6, r3
 8019cc0:	bf28      	it	cs
 8019cc2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019cc6:	4912      	ldr	r1, [pc, #72]	; (8019d10 <_scanf_float+0x418>)
 8019cc8:	4630      	mov	r0, r6
 8019cca:	f000 f8d5 	bl	8019e78 <siprintf>
 8019cce:	e7cf      	b.n	8019c70 <_scanf_float+0x378>
 8019cd0:	f011 0f04 	tst.w	r1, #4
 8019cd4:	9903      	ldr	r1, [sp, #12]
 8019cd6:	600a      	str	r2, [r1, #0]
 8019cd8:	d1db      	bne.n	8019c92 <_scanf_float+0x39a>
 8019cda:	f8d3 8000 	ldr.w	r8, [r3]
 8019cde:	ee10 2a10 	vmov	r2, s0
 8019ce2:	ee10 0a10 	vmov	r0, s0
 8019ce6:	463b      	mov	r3, r7
 8019ce8:	4639      	mov	r1, r7
 8019cea:	f7e6 ff1f 	bl	8000b2c <__aeabi_dcmpun>
 8019cee:	b128      	cbz	r0, 8019cfc <_scanf_float+0x404>
 8019cf0:	4808      	ldr	r0, [pc, #32]	; (8019d14 <_scanf_float+0x41c>)
 8019cf2:	f000 fa07 	bl	801a104 <nanf>
 8019cf6:	ed88 0a00 	vstr	s0, [r8]
 8019cfa:	e7cd      	b.n	8019c98 <_scanf_float+0x3a0>
 8019cfc:	4630      	mov	r0, r6
 8019cfe:	4639      	mov	r1, r7
 8019d00:	f7e6 ff72 	bl	8000be8 <__aeabi_d2f>
 8019d04:	f8c8 0000 	str.w	r0, [r8]
 8019d08:	e7c6      	b.n	8019c98 <_scanf_float+0x3a0>
 8019d0a:	2500      	movs	r5, #0
 8019d0c:	e635      	b.n	801997a <_scanf_float+0x82>
 8019d0e:	bf00      	nop
 8019d10:	0801fcbc 	.word	0x0801fcbc
 8019d14:	0802004d 	.word	0x0802004d

08019d18 <std>:
 8019d18:	2300      	movs	r3, #0
 8019d1a:	b510      	push	{r4, lr}
 8019d1c:	4604      	mov	r4, r0
 8019d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8019d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019d26:	6083      	str	r3, [r0, #8]
 8019d28:	8181      	strh	r1, [r0, #12]
 8019d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8019d2c:	81c2      	strh	r2, [r0, #14]
 8019d2e:	6183      	str	r3, [r0, #24]
 8019d30:	4619      	mov	r1, r3
 8019d32:	2208      	movs	r2, #8
 8019d34:	305c      	adds	r0, #92	; 0x5c
 8019d36:	f000 f902 	bl	8019f3e <memset>
 8019d3a:	4b05      	ldr	r3, [pc, #20]	; (8019d50 <std+0x38>)
 8019d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8019d3e:	4b05      	ldr	r3, [pc, #20]	; (8019d54 <std+0x3c>)
 8019d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8019d42:	4b05      	ldr	r3, [pc, #20]	; (8019d58 <std+0x40>)
 8019d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019d46:	4b05      	ldr	r3, [pc, #20]	; (8019d5c <std+0x44>)
 8019d48:	6224      	str	r4, [r4, #32]
 8019d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8019d4c:	bd10      	pop	{r4, pc}
 8019d4e:	bf00      	nop
 8019d50:	08019eb9 	.word	0x08019eb9
 8019d54:	08019edb 	.word	0x08019edb
 8019d58:	08019f13 	.word	0x08019f13
 8019d5c:	08019f37 	.word	0x08019f37

08019d60 <stdio_exit_handler>:
 8019d60:	4a02      	ldr	r2, [pc, #8]	; (8019d6c <stdio_exit_handler+0xc>)
 8019d62:	4903      	ldr	r1, [pc, #12]	; (8019d70 <stdio_exit_handler+0x10>)
 8019d64:	4803      	ldr	r0, [pc, #12]	; (8019d74 <stdio_exit_handler+0x14>)
 8019d66:	f000 b869 	b.w	8019e3c <_fwalk_sglue>
 8019d6a:	bf00      	nop
 8019d6c:	2000010c 	.word	0x2000010c
 8019d70:	0801ca49 	.word	0x0801ca49
 8019d74:	20000118 	.word	0x20000118

08019d78 <cleanup_stdio>:
 8019d78:	6841      	ldr	r1, [r0, #4]
 8019d7a:	4b0c      	ldr	r3, [pc, #48]	; (8019dac <cleanup_stdio+0x34>)
 8019d7c:	4299      	cmp	r1, r3
 8019d7e:	b510      	push	{r4, lr}
 8019d80:	4604      	mov	r4, r0
 8019d82:	d001      	beq.n	8019d88 <cleanup_stdio+0x10>
 8019d84:	f002 fe60 	bl	801ca48 <_fflush_r>
 8019d88:	68a1      	ldr	r1, [r4, #8]
 8019d8a:	4b09      	ldr	r3, [pc, #36]	; (8019db0 <cleanup_stdio+0x38>)
 8019d8c:	4299      	cmp	r1, r3
 8019d8e:	d002      	beq.n	8019d96 <cleanup_stdio+0x1e>
 8019d90:	4620      	mov	r0, r4
 8019d92:	f002 fe59 	bl	801ca48 <_fflush_r>
 8019d96:	68e1      	ldr	r1, [r4, #12]
 8019d98:	4b06      	ldr	r3, [pc, #24]	; (8019db4 <cleanup_stdio+0x3c>)
 8019d9a:	4299      	cmp	r1, r3
 8019d9c:	d004      	beq.n	8019da8 <cleanup_stdio+0x30>
 8019d9e:	4620      	mov	r0, r4
 8019da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019da4:	f002 be50 	b.w	801ca48 <_fflush_r>
 8019da8:	bd10      	pop	{r4, pc}
 8019daa:	bf00      	nop
 8019dac:	2000e52c 	.word	0x2000e52c
 8019db0:	2000e594 	.word	0x2000e594
 8019db4:	2000e5fc 	.word	0x2000e5fc

08019db8 <global_stdio_init.part.0>:
 8019db8:	b510      	push	{r4, lr}
 8019dba:	4b0b      	ldr	r3, [pc, #44]	; (8019de8 <global_stdio_init.part.0+0x30>)
 8019dbc:	4c0b      	ldr	r4, [pc, #44]	; (8019dec <global_stdio_init.part.0+0x34>)
 8019dbe:	4a0c      	ldr	r2, [pc, #48]	; (8019df0 <global_stdio_init.part.0+0x38>)
 8019dc0:	601a      	str	r2, [r3, #0]
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	2200      	movs	r2, #0
 8019dc6:	2104      	movs	r1, #4
 8019dc8:	f7ff ffa6 	bl	8019d18 <std>
 8019dcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019dd0:	2201      	movs	r2, #1
 8019dd2:	2109      	movs	r1, #9
 8019dd4:	f7ff ffa0 	bl	8019d18 <std>
 8019dd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019ddc:	2202      	movs	r2, #2
 8019dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019de2:	2112      	movs	r1, #18
 8019de4:	f7ff bf98 	b.w	8019d18 <std>
 8019de8:	2000e664 	.word	0x2000e664
 8019dec:	2000e52c 	.word	0x2000e52c
 8019df0:	08019d61 	.word	0x08019d61

08019df4 <__sfp_lock_acquire>:
 8019df4:	4801      	ldr	r0, [pc, #4]	; (8019dfc <__sfp_lock_acquire+0x8>)
 8019df6:	f000 b975 	b.w	801a0e4 <__retarget_lock_acquire_recursive>
 8019dfa:	bf00      	nop
 8019dfc:	2000e66d 	.word	0x2000e66d

08019e00 <__sfp_lock_release>:
 8019e00:	4801      	ldr	r0, [pc, #4]	; (8019e08 <__sfp_lock_release+0x8>)
 8019e02:	f000 b970 	b.w	801a0e6 <__retarget_lock_release_recursive>
 8019e06:	bf00      	nop
 8019e08:	2000e66d 	.word	0x2000e66d

08019e0c <__sinit>:
 8019e0c:	b510      	push	{r4, lr}
 8019e0e:	4604      	mov	r4, r0
 8019e10:	f7ff fff0 	bl	8019df4 <__sfp_lock_acquire>
 8019e14:	6a23      	ldr	r3, [r4, #32]
 8019e16:	b11b      	cbz	r3, 8019e20 <__sinit+0x14>
 8019e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e1c:	f7ff bff0 	b.w	8019e00 <__sfp_lock_release>
 8019e20:	4b04      	ldr	r3, [pc, #16]	; (8019e34 <__sinit+0x28>)
 8019e22:	6223      	str	r3, [r4, #32]
 8019e24:	4b04      	ldr	r3, [pc, #16]	; (8019e38 <__sinit+0x2c>)
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d1f5      	bne.n	8019e18 <__sinit+0xc>
 8019e2c:	f7ff ffc4 	bl	8019db8 <global_stdio_init.part.0>
 8019e30:	e7f2      	b.n	8019e18 <__sinit+0xc>
 8019e32:	bf00      	nop
 8019e34:	08019d79 	.word	0x08019d79
 8019e38:	2000e664 	.word	0x2000e664

08019e3c <_fwalk_sglue>:
 8019e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e40:	4607      	mov	r7, r0
 8019e42:	4688      	mov	r8, r1
 8019e44:	4614      	mov	r4, r2
 8019e46:	2600      	movs	r6, #0
 8019e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8019e50:	d505      	bpl.n	8019e5e <_fwalk_sglue+0x22>
 8019e52:	6824      	ldr	r4, [r4, #0]
 8019e54:	2c00      	cmp	r4, #0
 8019e56:	d1f7      	bne.n	8019e48 <_fwalk_sglue+0xc>
 8019e58:	4630      	mov	r0, r6
 8019e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e5e:	89ab      	ldrh	r3, [r5, #12]
 8019e60:	2b01      	cmp	r3, #1
 8019e62:	d907      	bls.n	8019e74 <_fwalk_sglue+0x38>
 8019e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e68:	3301      	adds	r3, #1
 8019e6a:	d003      	beq.n	8019e74 <_fwalk_sglue+0x38>
 8019e6c:	4629      	mov	r1, r5
 8019e6e:	4638      	mov	r0, r7
 8019e70:	47c0      	blx	r8
 8019e72:	4306      	orrs	r6, r0
 8019e74:	3568      	adds	r5, #104	; 0x68
 8019e76:	e7e9      	b.n	8019e4c <_fwalk_sglue+0x10>

08019e78 <siprintf>:
 8019e78:	b40e      	push	{r1, r2, r3}
 8019e7a:	b500      	push	{lr}
 8019e7c:	b09c      	sub	sp, #112	; 0x70
 8019e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8019e80:	9002      	str	r0, [sp, #8]
 8019e82:	9006      	str	r0, [sp, #24]
 8019e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019e88:	4809      	ldr	r0, [pc, #36]	; (8019eb0 <siprintf+0x38>)
 8019e8a:	9107      	str	r1, [sp, #28]
 8019e8c:	9104      	str	r1, [sp, #16]
 8019e8e:	4909      	ldr	r1, [pc, #36]	; (8019eb4 <siprintf+0x3c>)
 8019e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e94:	9105      	str	r1, [sp, #20]
 8019e96:	6800      	ldr	r0, [r0, #0]
 8019e98:	9301      	str	r3, [sp, #4]
 8019e9a:	a902      	add	r1, sp, #8
 8019e9c:	f002 fc50 	bl	801c740 <_svfiprintf_r>
 8019ea0:	9b02      	ldr	r3, [sp, #8]
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	701a      	strb	r2, [r3, #0]
 8019ea6:	b01c      	add	sp, #112	; 0x70
 8019ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019eac:	b003      	add	sp, #12
 8019eae:	4770      	bx	lr
 8019eb0:	20000164 	.word	0x20000164
 8019eb4:	ffff0208 	.word	0xffff0208

08019eb8 <__sread>:
 8019eb8:	b510      	push	{r4, lr}
 8019eba:	460c      	mov	r4, r1
 8019ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ec0:	f000 f8c2 	bl	801a048 <_read_r>
 8019ec4:	2800      	cmp	r0, #0
 8019ec6:	bfab      	itete	ge
 8019ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019eca:	89a3      	ldrhlt	r3, [r4, #12]
 8019ecc:	181b      	addge	r3, r3, r0
 8019ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019ed2:	bfac      	ite	ge
 8019ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8019ed6:	81a3      	strhlt	r3, [r4, #12]
 8019ed8:	bd10      	pop	{r4, pc}

08019eda <__swrite>:
 8019eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ede:	461f      	mov	r7, r3
 8019ee0:	898b      	ldrh	r3, [r1, #12]
 8019ee2:	05db      	lsls	r3, r3, #23
 8019ee4:	4605      	mov	r5, r0
 8019ee6:	460c      	mov	r4, r1
 8019ee8:	4616      	mov	r6, r2
 8019eea:	d505      	bpl.n	8019ef8 <__swrite+0x1e>
 8019eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ef0:	2302      	movs	r3, #2
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	f000 f896 	bl	801a024 <_lseek_r>
 8019ef8:	89a3      	ldrh	r3, [r4, #12]
 8019efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019f02:	81a3      	strh	r3, [r4, #12]
 8019f04:	4632      	mov	r2, r6
 8019f06:	463b      	mov	r3, r7
 8019f08:	4628      	mov	r0, r5
 8019f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f0e:	f000 b8ad 	b.w	801a06c <_write_r>

08019f12 <__sseek>:
 8019f12:	b510      	push	{r4, lr}
 8019f14:	460c      	mov	r4, r1
 8019f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f1a:	f000 f883 	bl	801a024 <_lseek_r>
 8019f1e:	1c43      	adds	r3, r0, #1
 8019f20:	89a3      	ldrh	r3, [r4, #12]
 8019f22:	bf15      	itete	ne
 8019f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8019f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019f2e:	81a3      	strheq	r3, [r4, #12]
 8019f30:	bf18      	it	ne
 8019f32:	81a3      	strhne	r3, [r4, #12]
 8019f34:	bd10      	pop	{r4, pc}

08019f36 <__sclose>:
 8019f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f3a:	f000 b80d 	b.w	8019f58 <_close_r>

08019f3e <memset>:
 8019f3e:	4402      	add	r2, r0
 8019f40:	4603      	mov	r3, r0
 8019f42:	4293      	cmp	r3, r2
 8019f44:	d100      	bne.n	8019f48 <memset+0xa>
 8019f46:	4770      	bx	lr
 8019f48:	f803 1b01 	strb.w	r1, [r3], #1
 8019f4c:	e7f9      	b.n	8019f42 <memset+0x4>
	...

08019f50 <_localeconv_r>:
 8019f50:	4800      	ldr	r0, [pc, #0]	; (8019f54 <_localeconv_r+0x4>)
 8019f52:	4770      	bx	lr
 8019f54:	20000258 	.word	0x20000258

08019f58 <_close_r>:
 8019f58:	b538      	push	{r3, r4, r5, lr}
 8019f5a:	4d06      	ldr	r5, [pc, #24]	; (8019f74 <_close_r+0x1c>)
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	4604      	mov	r4, r0
 8019f60:	4608      	mov	r0, r1
 8019f62:	602b      	str	r3, [r5, #0]
 8019f64:	f7e9 ff71 	bl	8003e4a <_close>
 8019f68:	1c43      	adds	r3, r0, #1
 8019f6a:	d102      	bne.n	8019f72 <_close_r+0x1a>
 8019f6c:	682b      	ldr	r3, [r5, #0]
 8019f6e:	b103      	cbz	r3, 8019f72 <_close_r+0x1a>
 8019f70:	6023      	str	r3, [r4, #0]
 8019f72:	bd38      	pop	{r3, r4, r5, pc}
 8019f74:	2000e668 	.word	0x2000e668

08019f78 <_reclaim_reent>:
 8019f78:	4b29      	ldr	r3, [pc, #164]	; (801a020 <_reclaim_reent+0xa8>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	4283      	cmp	r3, r0
 8019f7e:	b570      	push	{r4, r5, r6, lr}
 8019f80:	4604      	mov	r4, r0
 8019f82:	d04b      	beq.n	801a01c <_reclaim_reent+0xa4>
 8019f84:	69c3      	ldr	r3, [r0, #28]
 8019f86:	b143      	cbz	r3, 8019f9a <_reclaim_reent+0x22>
 8019f88:	68db      	ldr	r3, [r3, #12]
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d144      	bne.n	801a018 <_reclaim_reent+0xa0>
 8019f8e:	69e3      	ldr	r3, [r4, #28]
 8019f90:	6819      	ldr	r1, [r3, #0]
 8019f92:	b111      	cbz	r1, 8019f9a <_reclaim_reent+0x22>
 8019f94:	4620      	mov	r0, r4
 8019f96:	f000 ff35 	bl	801ae04 <_free_r>
 8019f9a:	6961      	ldr	r1, [r4, #20]
 8019f9c:	b111      	cbz	r1, 8019fa4 <_reclaim_reent+0x2c>
 8019f9e:	4620      	mov	r0, r4
 8019fa0:	f000 ff30 	bl	801ae04 <_free_r>
 8019fa4:	69e1      	ldr	r1, [r4, #28]
 8019fa6:	b111      	cbz	r1, 8019fae <_reclaim_reent+0x36>
 8019fa8:	4620      	mov	r0, r4
 8019faa:	f000 ff2b 	bl	801ae04 <_free_r>
 8019fae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019fb0:	b111      	cbz	r1, 8019fb8 <_reclaim_reent+0x40>
 8019fb2:	4620      	mov	r0, r4
 8019fb4:	f000 ff26 	bl	801ae04 <_free_r>
 8019fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fba:	b111      	cbz	r1, 8019fc2 <_reclaim_reent+0x4a>
 8019fbc:	4620      	mov	r0, r4
 8019fbe:	f000 ff21 	bl	801ae04 <_free_r>
 8019fc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019fc4:	b111      	cbz	r1, 8019fcc <_reclaim_reent+0x54>
 8019fc6:	4620      	mov	r0, r4
 8019fc8:	f000 ff1c 	bl	801ae04 <_free_r>
 8019fcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019fce:	b111      	cbz	r1, 8019fd6 <_reclaim_reent+0x5e>
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	f000 ff17 	bl	801ae04 <_free_r>
 8019fd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019fd8:	b111      	cbz	r1, 8019fe0 <_reclaim_reent+0x68>
 8019fda:	4620      	mov	r0, r4
 8019fdc:	f000 ff12 	bl	801ae04 <_free_r>
 8019fe0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8019fe2:	b111      	cbz	r1, 8019fea <_reclaim_reent+0x72>
 8019fe4:	4620      	mov	r0, r4
 8019fe6:	f000 ff0d 	bl	801ae04 <_free_r>
 8019fea:	6a23      	ldr	r3, [r4, #32]
 8019fec:	b1b3      	cbz	r3, 801a01c <_reclaim_reent+0xa4>
 8019fee:	4620      	mov	r0, r4
 8019ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ff4:	4718      	bx	r3
 8019ff6:	5949      	ldr	r1, [r1, r5]
 8019ff8:	b941      	cbnz	r1, 801a00c <_reclaim_reent+0x94>
 8019ffa:	3504      	adds	r5, #4
 8019ffc:	69e3      	ldr	r3, [r4, #28]
 8019ffe:	2d80      	cmp	r5, #128	; 0x80
 801a000:	68d9      	ldr	r1, [r3, #12]
 801a002:	d1f8      	bne.n	8019ff6 <_reclaim_reent+0x7e>
 801a004:	4620      	mov	r0, r4
 801a006:	f000 fefd 	bl	801ae04 <_free_r>
 801a00a:	e7c0      	b.n	8019f8e <_reclaim_reent+0x16>
 801a00c:	680e      	ldr	r6, [r1, #0]
 801a00e:	4620      	mov	r0, r4
 801a010:	f000 fef8 	bl	801ae04 <_free_r>
 801a014:	4631      	mov	r1, r6
 801a016:	e7ef      	b.n	8019ff8 <_reclaim_reent+0x80>
 801a018:	2500      	movs	r5, #0
 801a01a:	e7ef      	b.n	8019ffc <_reclaim_reent+0x84>
 801a01c:	bd70      	pop	{r4, r5, r6, pc}
 801a01e:	bf00      	nop
 801a020:	20000164 	.word	0x20000164

0801a024 <_lseek_r>:
 801a024:	b538      	push	{r3, r4, r5, lr}
 801a026:	4d07      	ldr	r5, [pc, #28]	; (801a044 <_lseek_r+0x20>)
 801a028:	4604      	mov	r4, r0
 801a02a:	4608      	mov	r0, r1
 801a02c:	4611      	mov	r1, r2
 801a02e:	2200      	movs	r2, #0
 801a030:	602a      	str	r2, [r5, #0]
 801a032:	461a      	mov	r2, r3
 801a034:	f7e9 ff30 	bl	8003e98 <_lseek>
 801a038:	1c43      	adds	r3, r0, #1
 801a03a:	d102      	bne.n	801a042 <_lseek_r+0x1e>
 801a03c:	682b      	ldr	r3, [r5, #0]
 801a03e:	b103      	cbz	r3, 801a042 <_lseek_r+0x1e>
 801a040:	6023      	str	r3, [r4, #0]
 801a042:	bd38      	pop	{r3, r4, r5, pc}
 801a044:	2000e668 	.word	0x2000e668

0801a048 <_read_r>:
 801a048:	b538      	push	{r3, r4, r5, lr}
 801a04a:	4d07      	ldr	r5, [pc, #28]	; (801a068 <_read_r+0x20>)
 801a04c:	4604      	mov	r4, r0
 801a04e:	4608      	mov	r0, r1
 801a050:	4611      	mov	r1, r2
 801a052:	2200      	movs	r2, #0
 801a054:	602a      	str	r2, [r5, #0]
 801a056:	461a      	mov	r2, r3
 801a058:	f7e9 febe 	bl	8003dd8 <_read>
 801a05c:	1c43      	adds	r3, r0, #1
 801a05e:	d102      	bne.n	801a066 <_read_r+0x1e>
 801a060:	682b      	ldr	r3, [r5, #0]
 801a062:	b103      	cbz	r3, 801a066 <_read_r+0x1e>
 801a064:	6023      	str	r3, [r4, #0]
 801a066:	bd38      	pop	{r3, r4, r5, pc}
 801a068:	2000e668 	.word	0x2000e668

0801a06c <_write_r>:
 801a06c:	b538      	push	{r3, r4, r5, lr}
 801a06e:	4d07      	ldr	r5, [pc, #28]	; (801a08c <_write_r+0x20>)
 801a070:	4604      	mov	r4, r0
 801a072:	4608      	mov	r0, r1
 801a074:	4611      	mov	r1, r2
 801a076:	2200      	movs	r2, #0
 801a078:	602a      	str	r2, [r5, #0]
 801a07a:	461a      	mov	r2, r3
 801a07c:	f7e9 fec9 	bl	8003e12 <_write>
 801a080:	1c43      	adds	r3, r0, #1
 801a082:	d102      	bne.n	801a08a <_write_r+0x1e>
 801a084:	682b      	ldr	r3, [r5, #0]
 801a086:	b103      	cbz	r3, 801a08a <_write_r+0x1e>
 801a088:	6023      	str	r3, [r4, #0]
 801a08a:	bd38      	pop	{r3, r4, r5, pc}
 801a08c:	2000e668 	.word	0x2000e668

0801a090 <__errno>:
 801a090:	4b01      	ldr	r3, [pc, #4]	; (801a098 <__errno+0x8>)
 801a092:	6818      	ldr	r0, [r3, #0]
 801a094:	4770      	bx	lr
 801a096:	bf00      	nop
 801a098:	20000164 	.word	0x20000164

0801a09c <__libc_init_array>:
 801a09c:	b570      	push	{r4, r5, r6, lr}
 801a09e:	4d0d      	ldr	r5, [pc, #52]	; (801a0d4 <__libc_init_array+0x38>)
 801a0a0:	4c0d      	ldr	r4, [pc, #52]	; (801a0d8 <__libc_init_array+0x3c>)
 801a0a2:	1b64      	subs	r4, r4, r5
 801a0a4:	10a4      	asrs	r4, r4, #2
 801a0a6:	2600      	movs	r6, #0
 801a0a8:	42a6      	cmp	r6, r4
 801a0aa:	d109      	bne.n	801a0c0 <__libc_init_array+0x24>
 801a0ac:	4d0b      	ldr	r5, [pc, #44]	; (801a0dc <__libc_init_array+0x40>)
 801a0ae:	4c0c      	ldr	r4, [pc, #48]	; (801a0e0 <__libc_init_array+0x44>)
 801a0b0:	f005 fa46 	bl	801f540 <_init>
 801a0b4:	1b64      	subs	r4, r4, r5
 801a0b6:	10a4      	asrs	r4, r4, #2
 801a0b8:	2600      	movs	r6, #0
 801a0ba:	42a6      	cmp	r6, r4
 801a0bc:	d105      	bne.n	801a0ca <__libc_init_array+0x2e>
 801a0be:	bd70      	pop	{r4, r5, r6, pc}
 801a0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0c4:	4798      	blx	r3
 801a0c6:	3601      	adds	r6, #1
 801a0c8:	e7ee      	b.n	801a0a8 <__libc_init_array+0xc>
 801a0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0ce:	4798      	blx	r3
 801a0d0:	3601      	adds	r6, #1
 801a0d2:	e7f2      	b.n	801a0ba <__libc_init_array+0x1e>
 801a0d4:	08020300 	.word	0x08020300
 801a0d8:	08020300 	.word	0x08020300
 801a0dc:	08020300 	.word	0x08020300
 801a0e0:	08020304 	.word	0x08020304

0801a0e4 <__retarget_lock_acquire_recursive>:
 801a0e4:	4770      	bx	lr

0801a0e6 <__retarget_lock_release_recursive>:
 801a0e6:	4770      	bx	lr

0801a0e8 <memcpy>:
 801a0e8:	440a      	add	r2, r1
 801a0ea:	4291      	cmp	r1, r2
 801a0ec:	f100 33ff 	add.w	r3, r0, #4294967295
 801a0f0:	d100      	bne.n	801a0f4 <memcpy+0xc>
 801a0f2:	4770      	bx	lr
 801a0f4:	b510      	push	{r4, lr}
 801a0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a0fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a0fe:	4291      	cmp	r1, r2
 801a100:	d1f9      	bne.n	801a0f6 <memcpy+0xe>
 801a102:	bd10      	pop	{r4, pc}

0801a104 <nanf>:
 801a104:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a10c <nanf+0x8>
 801a108:	4770      	bx	lr
 801a10a:	bf00      	nop
 801a10c:	7fc00000 	.word	0x7fc00000

0801a110 <quorem>:
 801a110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a114:	6903      	ldr	r3, [r0, #16]
 801a116:	690c      	ldr	r4, [r1, #16]
 801a118:	42a3      	cmp	r3, r4
 801a11a:	4607      	mov	r7, r0
 801a11c:	db7e      	blt.n	801a21c <quorem+0x10c>
 801a11e:	3c01      	subs	r4, #1
 801a120:	f101 0814 	add.w	r8, r1, #20
 801a124:	f100 0514 	add.w	r5, r0, #20
 801a128:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a12c:	9301      	str	r3, [sp, #4]
 801a12e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a136:	3301      	adds	r3, #1
 801a138:	429a      	cmp	r2, r3
 801a13a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a13e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a142:	fbb2 f6f3 	udiv	r6, r2, r3
 801a146:	d331      	bcc.n	801a1ac <quorem+0x9c>
 801a148:	f04f 0e00 	mov.w	lr, #0
 801a14c:	4640      	mov	r0, r8
 801a14e:	46ac      	mov	ip, r5
 801a150:	46f2      	mov	sl, lr
 801a152:	f850 2b04 	ldr.w	r2, [r0], #4
 801a156:	b293      	uxth	r3, r2
 801a158:	fb06 e303 	mla	r3, r6, r3, lr
 801a15c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a160:	0c1a      	lsrs	r2, r3, #16
 801a162:	b29b      	uxth	r3, r3
 801a164:	ebaa 0303 	sub.w	r3, sl, r3
 801a168:	f8dc a000 	ldr.w	sl, [ip]
 801a16c:	fa13 f38a 	uxtah	r3, r3, sl
 801a170:	fb06 220e 	mla	r2, r6, lr, r2
 801a174:	9300      	str	r3, [sp, #0]
 801a176:	9b00      	ldr	r3, [sp, #0]
 801a178:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a17c:	b292      	uxth	r2, r2
 801a17e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a182:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a186:	f8bd 3000 	ldrh.w	r3, [sp]
 801a18a:	4581      	cmp	r9, r0
 801a18c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a190:	f84c 3b04 	str.w	r3, [ip], #4
 801a194:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a198:	d2db      	bcs.n	801a152 <quorem+0x42>
 801a19a:	f855 300b 	ldr.w	r3, [r5, fp]
 801a19e:	b92b      	cbnz	r3, 801a1ac <quorem+0x9c>
 801a1a0:	9b01      	ldr	r3, [sp, #4]
 801a1a2:	3b04      	subs	r3, #4
 801a1a4:	429d      	cmp	r5, r3
 801a1a6:	461a      	mov	r2, r3
 801a1a8:	d32c      	bcc.n	801a204 <quorem+0xf4>
 801a1aa:	613c      	str	r4, [r7, #16]
 801a1ac:	4638      	mov	r0, r7
 801a1ae:	f001 f9ef 	bl	801b590 <__mcmp>
 801a1b2:	2800      	cmp	r0, #0
 801a1b4:	db22      	blt.n	801a1fc <quorem+0xec>
 801a1b6:	3601      	adds	r6, #1
 801a1b8:	4629      	mov	r1, r5
 801a1ba:	2000      	movs	r0, #0
 801a1bc:	f858 2b04 	ldr.w	r2, [r8], #4
 801a1c0:	f8d1 c000 	ldr.w	ip, [r1]
 801a1c4:	b293      	uxth	r3, r2
 801a1c6:	1ac3      	subs	r3, r0, r3
 801a1c8:	0c12      	lsrs	r2, r2, #16
 801a1ca:	fa13 f38c 	uxtah	r3, r3, ip
 801a1ce:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a1d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a1d6:	b29b      	uxth	r3, r3
 801a1d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a1dc:	45c1      	cmp	r9, r8
 801a1de:	f841 3b04 	str.w	r3, [r1], #4
 801a1e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a1e6:	d2e9      	bcs.n	801a1bc <quorem+0xac>
 801a1e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a1ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a1f0:	b922      	cbnz	r2, 801a1fc <quorem+0xec>
 801a1f2:	3b04      	subs	r3, #4
 801a1f4:	429d      	cmp	r5, r3
 801a1f6:	461a      	mov	r2, r3
 801a1f8:	d30a      	bcc.n	801a210 <quorem+0x100>
 801a1fa:	613c      	str	r4, [r7, #16]
 801a1fc:	4630      	mov	r0, r6
 801a1fe:	b003      	add	sp, #12
 801a200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a204:	6812      	ldr	r2, [r2, #0]
 801a206:	3b04      	subs	r3, #4
 801a208:	2a00      	cmp	r2, #0
 801a20a:	d1ce      	bne.n	801a1aa <quorem+0x9a>
 801a20c:	3c01      	subs	r4, #1
 801a20e:	e7c9      	b.n	801a1a4 <quorem+0x94>
 801a210:	6812      	ldr	r2, [r2, #0]
 801a212:	3b04      	subs	r3, #4
 801a214:	2a00      	cmp	r2, #0
 801a216:	d1f0      	bne.n	801a1fa <quorem+0xea>
 801a218:	3c01      	subs	r4, #1
 801a21a:	e7eb      	b.n	801a1f4 <quorem+0xe4>
 801a21c:	2000      	movs	r0, #0
 801a21e:	e7ee      	b.n	801a1fe <quorem+0xee>

0801a220 <_dtoa_r>:
 801a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a224:	ed2d 8b04 	vpush	{d8-d9}
 801a228:	69c5      	ldr	r5, [r0, #28]
 801a22a:	b093      	sub	sp, #76	; 0x4c
 801a22c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a230:	ec57 6b10 	vmov	r6, r7, d0
 801a234:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a238:	9107      	str	r1, [sp, #28]
 801a23a:	4604      	mov	r4, r0
 801a23c:	920a      	str	r2, [sp, #40]	; 0x28
 801a23e:	930d      	str	r3, [sp, #52]	; 0x34
 801a240:	b975      	cbnz	r5, 801a260 <_dtoa_r+0x40>
 801a242:	2010      	movs	r0, #16
 801a244:	f000 fe2a 	bl	801ae9c <malloc>
 801a248:	4602      	mov	r2, r0
 801a24a:	61e0      	str	r0, [r4, #28]
 801a24c:	b920      	cbnz	r0, 801a258 <_dtoa_r+0x38>
 801a24e:	4bae      	ldr	r3, [pc, #696]	; (801a508 <_dtoa_r+0x2e8>)
 801a250:	21ef      	movs	r1, #239	; 0xef
 801a252:	48ae      	ldr	r0, [pc, #696]	; (801a50c <_dtoa_r+0x2ec>)
 801a254:	f002 fc64 	bl	801cb20 <__assert_func>
 801a258:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a25c:	6005      	str	r5, [r0, #0]
 801a25e:	60c5      	str	r5, [r0, #12]
 801a260:	69e3      	ldr	r3, [r4, #28]
 801a262:	6819      	ldr	r1, [r3, #0]
 801a264:	b151      	cbz	r1, 801a27c <_dtoa_r+0x5c>
 801a266:	685a      	ldr	r2, [r3, #4]
 801a268:	604a      	str	r2, [r1, #4]
 801a26a:	2301      	movs	r3, #1
 801a26c:	4093      	lsls	r3, r2
 801a26e:	608b      	str	r3, [r1, #8]
 801a270:	4620      	mov	r0, r4
 801a272:	f000 ff07 	bl	801b084 <_Bfree>
 801a276:	69e3      	ldr	r3, [r4, #28]
 801a278:	2200      	movs	r2, #0
 801a27a:	601a      	str	r2, [r3, #0]
 801a27c:	1e3b      	subs	r3, r7, #0
 801a27e:	bfbb      	ittet	lt
 801a280:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a284:	9303      	strlt	r3, [sp, #12]
 801a286:	2300      	movge	r3, #0
 801a288:	2201      	movlt	r2, #1
 801a28a:	bfac      	ite	ge
 801a28c:	f8c8 3000 	strge.w	r3, [r8]
 801a290:	f8c8 2000 	strlt.w	r2, [r8]
 801a294:	4b9e      	ldr	r3, [pc, #632]	; (801a510 <_dtoa_r+0x2f0>)
 801a296:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801a29a:	ea33 0308 	bics.w	r3, r3, r8
 801a29e:	d11b      	bne.n	801a2d8 <_dtoa_r+0xb8>
 801a2a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a2a2:	f242 730f 	movw	r3, #9999	; 0x270f
 801a2a6:	6013      	str	r3, [r2, #0]
 801a2a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801a2ac:	4333      	orrs	r3, r6
 801a2ae:	f000 8593 	beq.w	801add8 <_dtoa_r+0xbb8>
 801a2b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a2b4:	b963      	cbnz	r3, 801a2d0 <_dtoa_r+0xb0>
 801a2b6:	4b97      	ldr	r3, [pc, #604]	; (801a514 <_dtoa_r+0x2f4>)
 801a2b8:	e027      	b.n	801a30a <_dtoa_r+0xea>
 801a2ba:	4b97      	ldr	r3, [pc, #604]	; (801a518 <_dtoa_r+0x2f8>)
 801a2bc:	9300      	str	r3, [sp, #0]
 801a2be:	3308      	adds	r3, #8
 801a2c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a2c2:	6013      	str	r3, [r2, #0]
 801a2c4:	9800      	ldr	r0, [sp, #0]
 801a2c6:	b013      	add	sp, #76	; 0x4c
 801a2c8:	ecbd 8b04 	vpop	{d8-d9}
 801a2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2d0:	4b90      	ldr	r3, [pc, #576]	; (801a514 <_dtoa_r+0x2f4>)
 801a2d2:	9300      	str	r3, [sp, #0]
 801a2d4:	3303      	adds	r3, #3
 801a2d6:	e7f3      	b.n	801a2c0 <_dtoa_r+0xa0>
 801a2d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a2dc:	2200      	movs	r2, #0
 801a2de:	ec51 0b17 	vmov	r0, r1, d7
 801a2e2:	eeb0 8a47 	vmov.f32	s16, s14
 801a2e6:	eef0 8a67 	vmov.f32	s17, s15
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	f7e6 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 801a2f0:	4681      	mov	r9, r0
 801a2f2:	b160      	cbz	r0, 801a30e <_dtoa_r+0xee>
 801a2f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a2f6:	2301      	movs	r3, #1
 801a2f8:	6013      	str	r3, [r2, #0]
 801a2fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	f000 8568 	beq.w	801add2 <_dtoa_r+0xbb2>
 801a302:	4b86      	ldr	r3, [pc, #536]	; (801a51c <_dtoa_r+0x2fc>)
 801a304:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a306:	6013      	str	r3, [r2, #0]
 801a308:	3b01      	subs	r3, #1
 801a30a:	9300      	str	r3, [sp, #0]
 801a30c:	e7da      	b.n	801a2c4 <_dtoa_r+0xa4>
 801a30e:	aa10      	add	r2, sp, #64	; 0x40
 801a310:	a911      	add	r1, sp, #68	; 0x44
 801a312:	4620      	mov	r0, r4
 801a314:	eeb0 0a48 	vmov.f32	s0, s16
 801a318:	eef0 0a68 	vmov.f32	s1, s17
 801a31c:	f001 fa4e 	bl	801b7bc <__d2b>
 801a320:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801a324:	4682      	mov	sl, r0
 801a326:	2d00      	cmp	r5, #0
 801a328:	d07f      	beq.n	801a42a <_dtoa_r+0x20a>
 801a32a:	ee18 3a90 	vmov	r3, s17
 801a32e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a332:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801a336:	ec51 0b18 	vmov	r0, r1, d8
 801a33a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a33e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a342:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a346:	4619      	mov	r1, r3
 801a348:	2200      	movs	r2, #0
 801a34a:	4b75      	ldr	r3, [pc, #468]	; (801a520 <_dtoa_r+0x300>)
 801a34c:	f7e5 ff9c 	bl	8000288 <__aeabi_dsub>
 801a350:	a367      	add	r3, pc, #412	; (adr r3, 801a4f0 <_dtoa_r+0x2d0>)
 801a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a356:	f7e6 f94f 	bl	80005f8 <__aeabi_dmul>
 801a35a:	a367      	add	r3, pc, #412	; (adr r3, 801a4f8 <_dtoa_r+0x2d8>)
 801a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a360:	f7e5 ff94 	bl	800028c <__adddf3>
 801a364:	4606      	mov	r6, r0
 801a366:	4628      	mov	r0, r5
 801a368:	460f      	mov	r7, r1
 801a36a:	f7e6 f8db 	bl	8000524 <__aeabi_i2d>
 801a36e:	a364      	add	r3, pc, #400	; (adr r3, 801a500 <_dtoa_r+0x2e0>)
 801a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a374:	f7e6 f940 	bl	80005f8 <__aeabi_dmul>
 801a378:	4602      	mov	r2, r0
 801a37a:	460b      	mov	r3, r1
 801a37c:	4630      	mov	r0, r6
 801a37e:	4639      	mov	r1, r7
 801a380:	f7e5 ff84 	bl	800028c <__adddf3>
 801a384:	4606      	mov	r6, r0
 801a386:	460f      	mov	r7, r1
 801a388:	f7e6 fbe6 	bl	8000b58 <__aeabi_d2iz>
 801a38c:	2200      	movs	r2, #0
 801a38e:	4683      	mov	fp, r0
 801a390:	2300      	movs	r3, #0
 801a392:	4630      	mov	r0, r6
 801a394:	4639      	mov	r1, r7
 801a396:	f7e6 fba1 	bl	8000adc <__aeabi_dcmplt>
 801a39a:	b148      	cbz	r0, 801a3b0 <_dtoa_r+0x190>
 801a39c:	4658      	mov	r0, fp
 801a39e:	f7e6 f8c1 	bl	8000524 <__aeabi_i2d>
 801a3a2:	4632      	mov	r2, r6
 801a3a4:	463b      	mov	r3, r7
 801a3a6:	f7e6 fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 801a3aa:	b908      	cbnz	r0, 801a3b0 <_dtoa_r+0x190>
 801a3ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a3b0:	f1bb 0f16 	cmp.w	fp, #22
 801a3b4:	d857      	bhi.n	801a466 <_dtoa_r+0x246>
 801a3b6:	4b5b      	ldr	r3, [pc, #364]	; (801a524 <_dtoa_r+0x304>)
 801a3b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3c0:	ec51 0b18 	vmov	r0, r1, d8
 801a3c4:	f7e6 fb8a 	bl	8000adc <__aeabi_dcmplt>
 801a3c8:	2800      	cmp	r0, #0
 801a3ca:	d04e      	beq.n	801a46a <_dtoa_r+0x24a>
 801a3cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	930c      	str	r3, [sp, #48]	; 0x30
 801a3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a3d6:	1b5b      	subs	r3, r3, r5
 801a3d8:	1e5a      	subs	r2, r3, #1
 801a3da:	bf45      	ittet	mi
 801a3dc:	f1c3 0301 	rsbmi	r3, r3, #1
 801a3e0:	9305      	strmi	r3, [sp, #20]
 801a3e2:	2300      	movpl	r3, #0
 801a3e4:	2300      	movmi	r3, #0
 801a3e6:	9206      	str	r2, [sp, #24]
 801a3e8:	bf54      	ite	pl
 801a3ea:	9305      	strpl	r3, [sp, #20]
 801a3ec:	9306      	strmi	r3, [sp, #24]
 801a3ee:	f1bb 0f00 	cmp.w	fp, #0
 801a3f2:	db3c      	blt.n	801a46e <_dtoa_r+0x24e>
 801a3f4:	9b06      	ldr	r3, [sp, #24]
 801a3f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801a3fa:	445b      	add	r3, fp
 801a3fc:	9306      	str	r3, [sp, #24]
 801a3fe:	2300      	movs	r3, #0
 801a400:	9308      	str	r3, [sp, #32]
 801a402:	9b07      	ldr	r3, [sp, #28]
 801a404:	2b09      	cmp	r3, #9
 801a406:	d868      	bhi.n	801a4da <_dtoa_r+0x2ba>
 801a408:	2b05      	cmp	r3, #5
 801a40a:	bfc4      	itt	gt
 801a40c:	3b04      	subgt	r3, #4
 801a40e:	9307      	strgt	r3, [sp, #28]
 801a410:	9b07      	ldr	r3, [sp, #28]
 801a412:	f1a3 0302 	sub.w	r3, r3, #2
 801a416:	bfcc      	ite	gt
 801a418:	2500      	movgt	r5, #0
 801a41a:	2501      	movle	r5, #1
 801a41c:	2b03      	cmp	r3, #3
 801a41e:	f200 8085 	bhi.w	801a52c <_dtoa_r+0x30c>
 801a422:	e8df f003 	tbb	[pc, r3]
 801a426:	3b2e      	.short	0x3b2e
 801a428:	5839      	.short	0x5839
 801a42a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801a42e:	441d      	add	r5, r3
 801a430:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a434:	2b20      	cmp	r3, #32
 801a436:	bfc1      	itttt	gt
 801a438:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a43c:	fa08 f803 	lslgt.w	r8, r8, r3
 801a440:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801a444:	fa26 f303 	lsrgt.w	r3, r6, r3
 801a448:	bfd6      	itet	le
 801a44a:	f1c3 0320 	rsble	r3, r3, #32
 801a44e:	ea48 0003 	orrgt.w	r0, r8, r3
 801a452:	fa06 f003 	lslle.w	r0, r6, r3
 801a456:	f7e6 f855 	bl	8000504 <__aeabi_ui2d>
 801a45a:	2201      	movs	r2, #1
 801a45c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801a460:	3d01      	subs	r5, #1
 801a462:	920e      	str	r2, [sp, #56]	; 0x38
 801a464:	e76f      	b.n	801a346 <_dtoa_r+0x126>
 801a466:	2301      	movs	r3, #1
 801a468:	e7b3      	b.n	801a3d2 <_dtoa_r+0x1b2>
 801a46a:	900c      	str	r0, [sp, #48]	; 0x30
 801a46c:	e7b2      	b.n	801a3d4 <_dtoa_r+0x1b4>
 801a46e:	9b05      	ldr	r3, [sp, #20]
 801a470:	eba3 030b 	sub.w	r3, r3, fp
 801a474:	9305      	str	r3, [sp, #20]
 801a476:	f1cb 0300 	rsb	r3, fp, #0
 801a47a:	9308      	str	r3, [sp, #32]
 801a47c:	2300      	movs	r3, #0
 801a47e:	930b      	str	r3, [sp, #44]	; 0x2c
 801a480:	e7bf      	b.n	801a402 <_dtoa_r+0x1e2>
 801a482:	2300      	movs	r3, #0
 801a484:	9309      	str	r3, [sp, #36]	; 0x24
 801a486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a488:	2b00      	cmp	r3, #0
 801a48a:	dc52      	bgt.n	801a532 <_dtoa_r+0x312>
 801a48c:	2301      	movs	r3, #1
 801a48e:	9301      	str	r3, [sp, #4]
 801a490:	9304      	str	r3, [sp, #16]
 801a492:	461a      	mov	r2, r3
 801a494:	920a      	str	r2, [sp, #40]	; 0x28
 801a496:	e00b      	b.n	801a4b0 <_dtoa_r+0x290>
 801a498:	2301      	movs	r3, #1
 801a49a:	e7f3      	b.n	801a484 <_dtoa_r+0x264>
 801a49c:	2300      	movs	r3, #0
 801a49e:	9309      	str	r3, [sp, #36]	; 0x24
 801a4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4a2:	445b      	add	r3, fp
 801a4a4:	9301      	str	r3, [sp, #4]
 801a4a6:	3301      	adds	r3, #1
 801a4a8:	2b01      	cmp	r3, #1
 801a4aa:	9304      	str	r3, [sp, #16]
 801a4ac:	bfb8      	it	lt
 801a4ae:	2301      	movlt	r3, #1
 801a4b0:	69e0      	ldr	r0, [r4, #28]
 801a4b2:	2100      	movs	r1, #0
 801a4b4:	2204      	movs	r2, #4
 801a4b6:	f102 0614 	add.w	r6, r2, #20
 801a4ba:	429e      	cmp	r6, r3
 801a4bc:	d93d      	bls.n	801a53a <_dtoa_r+0x31a>
 801a4be:	6041      	str	r1, [r0, #4]
 801a4c0:	4620      	mov	r0, r4
 801a4c2:	f000 fd9f 	bl	801b004 <_Balloc>
 801a4c6:	9000      	str	r0, [sp, #0]
 801a4c8:	2800      	cmp	r0, #0
 801a4ca:	d139      	bne.n	801a540 <_dtoa_r+0x320>
 801a4cc:	4b16      	ldr	r3, [pc, #88]	; (801a528 <_dtoa_r+0x308>)
 801a4ce:	4602      	mov	r2, r0
 801a4d0:	f240 11af 	movw	r1, #431	; 0x1af
 801a4d4:	e6bd      	b.n	801a252 <_dtoa_r+0x32>
 801a4d6:	2301      	movs	r3, #1
 801a4d8:	e7e1      	b.n	801a49e <_dtoa_r+0x27e>
 801a4da:	2501      	movs	r5, #1
 801a4dc:	2300      	movs	r3, #0
 801a4de:	9307      	str	r3, [sp, #28]
 801a4e0:	9509      	str	r5, [sp, #36]	; 0x24
 801a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a4e6:	9301      	str	r3, [sp, #4]
 801a4e8:	9304      	str	r3, [sp, #16]
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	2312      	movs	r3, #18
 801a4ee:	e7d1      	b.n	801a494 <_dtoa_r+0x274>
 801a4f0:	636f4361 	.word	0x636f4361
 801a4f4:	3fd287a7 	.word	0x3fd287a7
 801a4f8:	8b60c8b3 	.word	0x8b60c8b3
 801a4fc:	3fc68a28 	.word	0x3fc68a28
 801a500:	509f79fb 	.word	0x509f79fb
 801a504:	3fd34413 	.word	0x3fd34413
 801a508:	0801fcce 	.word	0x0801fcce
 801a50c:	0801fce5 	.word	0x0801fce5
 801a510:	7ff00000 	.word	0x7ff00000
 801a514:	0801fcca 	.word	0x0801fcca
 801a518:	0801fcc1 	.word	0x0801fcc1
 801a51c:	0801fc99 	.word	0x0801fc99
 801a520:	3ff80000 	.word	0x3ff80000
 801a524:	0801fdd0 	.word	0x0801fdd0
 801a528:	0801fd3d 	.word	0x0801fd3d
 801a52c:	2301      	movs	r3, #1
 801a52e:	9309      	str	r3, [sp, #36]	; 0x24
 801a530:	e7d7      	b.n	801a4e2 <_dtoa_r+0x2c2>
 801a532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a534:	9301      	str	r3, [sp, #4]
 801a536:	9304      	str	r3, [sp, #16]
 801a538:	e7ba      	b.n	801a4b0 <_dtoa_r+0x290>
 801a53a:	3101      	adds	r1, #1
 801a53c:	0052      	lsls	r2, r2, #1
 801a53e:	e7ba      	b.n	801a4b6 <_dtoa_r+0x296>
 801a540:	69e3      	ldr	r3, [r4, #28]
 801a542:	9a00      	ldr	r2, [sp, #0]
 801a544:	601a      	str	r2, [r3, #0]
 801a546:	9b04      	ldr	r3, [sp, #16]
 801a548:	2b0e      	cmp	r3, #14
 801a54a:	f200 80a8 	bhi.w	801a69e <_dtoa_r+0x47e>
 801a54e:	2d00      	cmp	r5, #0
 801a550:	f000 80a5 	beq.w	801a69e <_dtoa_r+0x47e>
 801a554:	f1bb 0f00 	cmp.w	fp, #0
 801a558:	dd38      	ble.n	801a5cc <_dtoa_r+0x3ac>
 801a55a:	4bc0      	ldr	r3, [pc, #768]	; (801a85c <_dtoa_r+0x63c>)
 801a55c:	f00b 020f 	and.w	r2, fp, #15
 801a560:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a564:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a568:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a56c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801a570:	d019      	beq.n	801a5a6 <_dtoa_r+0x386>
 801a572:	4bbb      	ldr	r3, [pc, #748]	; (801a860 <_dtoa_r+0x640>)
 801a574:	ec51 0b18 	vmov	r0, r1, d8
 801a578:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a57c:	f7e6 f966 	bl	800084c <__aeabi_ddiv>
 801a580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a584:	f008 080f 	and.w	r8, r8, #15
 801a588:	2503      	movs	r5, #3
 801a58a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801a860 <_dtoa_r+0x640>
 801a58e:	f1b8 0f00 	cmp.w	r8, #0
 801a592:	d10a      	bne.n	801a5aa <_dtoa_r+0x38a>
 801a594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a598:	4632      	mov	r2, r6
 801a59a:	463b      	mov	r3, r7
 801a59c:	f7e6 f956 	bl	800084c <__aeabi_ddiv>
 801a5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a5a4:	e02b      	b.n	801a5fe <_dtoa_r+0x3de>
 801a5a6:	2502      	movs	r5, #2
 801a5a8:	e7ef      	b.n	801a58a <_dtoa_r+0x36a>
 801a5aa:	f018 0f01 	tst.w	r8, #1
 801a5ae:	d008      	beq.n	801a5c2 <_dtoa_r+0x3a2>
 801a5b0:	4630      	mov	r0, r6
 801a5b2:	4639      	mov	r1, r7
 801a5b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a5b8:	f7e6 f81e 	bl	80005f8 <__aeabi_dmul>
 801a5bc:	3501      	adds	r5, #1
 801a5be:	4606      	mov	r6, r0
 801a5c0:	460f      	mov	r7, r1
 801a5c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a5c6:	f109 0908 	add.w	r9, r9, #8
 801a5ca:	e7e0      	b.n	801a58e <_dtoa_r+0x36e>
 801a5cc:	f000 809f 	beq.w	801a70e <_dtoa_r+0x4ee>
 801a5d0:	f1cb 0600 	rsb	r6, fp, #0
 801a5d4:	4ba1      	ldr	r3, [pc, #644]	; (801a85c <_dtoa_r+0x63c>)
 801a5d6:	4fa2      	ldr	r7, [pc, #648]	; (801a860 <_dtoa_r+0x640>)
 801a5d8:	f006 020f 	and.w	r2, r6, #15
 801a5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5e4:	ec51 0b18 	vmov	r0, r1, d8
 801a5e8:	f7e6 f806 	bl	80005f8 <__aeabi_dmul>
 801a5ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a5f0:	1136      	asrs	r6, r6, #4
 801a5f2:	2300      	movs	r3, #0
 801a5f4:	2502      	movs	r5, #2
 801a5f6:	2e00      	cmp	r6, #0
 801a5f8:	d17e      	bne.n	801a6f8 <_dtoa_r+0x4d8>
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d1d0      	bne.n	801a5a0 <_dtoa_r+0x380>
 801a5fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a600:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a604:	2b00      	cmp	r3, #0
 801a606:	f000 8084 	beq.w	801a712 <_dtoa_r+0x4f2>
 801a60a:	4b96      	ldr	r3, [pc, #600]	; (801a864 <_dtoa_r+0x644>)
 801a60c:	2200      	movs	r2, #0
 801a60e:	4640      	mov	r0, r8
 801a610:	4649      	mov	r1, r9
 801a612:	f7e6 fa63 	bl	8000adc <__aeabi_dcmplt>
 801a616:	2800      	cmp	r0, #0
 801a618:	d07b      	beq.n	801a712 <_dtoa_r+0x4f2>
 801a61a:	9b04      	ldr	r3, [sp, #16]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d078      	beq.n	801a712 <_dtoa_r+0x4f2>
 801a620:	9b01      	ldr	r3, [sp, #4]
 801a622:	2b00      	cmp	r3, #0
 801a624:	dd39      	ble.n	801a69a <_dtoa_r+0x47a>
 801a626:	4b90      	ldr	r3, [pc, #576]	; (801a868 <_dtoa_r+0x648>)
 801a628:	2200      	movs	r2, #0
 801a62a:	4640      	mov	r0, r8
 801a62c:	4649      	mov	r1, r9
 801a62e:	f7e5 ffe3 	bl	80005f8 <__aeabi_dmul>
 801a632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a636:	9e01      	ldr	r6, [sp, #4]
 801a638:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a63c:	3501      	adds	r5, #1
 801a63e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a642:	4628      	mov	r0, r5
 801a644:	f7e5 ff6e 	bl	8000524 <__aeabi_i2d>
 801a648:	4642      	mov	r2, r8
 801a64a:	464b      	mov	r3, r9
 801a64c:	f7e5 ffd4 	bl	80005f8 <__aeabi_dmul>
 801a650:	4b86      	ldr	r3, [pc, #536]	; (801a86c <_dtoa_r+0x64c>)
 801a652:	2200      	movs	r2, #0
 801a654:	f7e5 fe1a 	bl	800028c <__adddf3>
 801a658:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801a65c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a660:	9303      	str	r3, [sp, #12]
 801a662:	2e00      	cmp	r6, #0
 801a664:	d158      	bne.n	801a718 <_dtoa_r+0x4f8>
 801a666:	4b82      	ldr	r3, [pc, #520]	; (801a870 <_dtoa_r+0x650>)
 801a668:	2200      	movs	r2, #0
 801a66a:	4640      	mov	r0, r8
 801a66c:	4649      	mov	r1, r9
 801a66e:	f7e5 fe0b 	bl	8000288 <__aeabi_dsub>
 801a672:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a676:	4680      	mov	r8, r0
 801a678:	4689      	mov	r9, r1
 801a67a:	f7e6 fa4d 	bl	8000b18 <__aeabi_dcmpgt>
 801a67e:	2800      	cmp	r0, #0
 801a680:	f040 8296 	bne.w	801abb0 <_dtoa_r+0x990>
 801a684:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a688:	4640      	mov	r0, r8
 801a68a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a68e:	4649      	mov	r1, r9
 801a690:	f7e6 fa24 	bl	8000adc <__aeabi_dcmplt>
 801a694:	2800      	cmp	r0, #0
 801a696:	f040 8289 	bne.w	801abac <_dtoa_r+0x98c>
 801a69a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a69e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	f2c0 814e 	blt.w	801a942 <_dtoa_r+0x722>
 801a6a6:	f1bb 0f0e 	cmp.w	fp, #14
 801a6aa:	f300 814a 	bgt.w	801a942 <_dtoa_r+0x722>
 801a6ae:	4b6b      	ldr	r3, [pc, #428]	; (801a85c <_dtoa_r+0x63c>)
 801a6b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a6b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	f280 80dc 	bge.w	801a878 <_dtoa_r+0x658>
 801a6c0:	9b04      	ldr	r3, [sp, #16]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	f300 80d8 	bgt.w	801a878 <_dtoa_r+0x658>
 801a6c8:	f040 826f 	bne.w	801abaa <_dtoa_r+0x98a>
 801a6cc:	4b68      	ldr	r3, [pc, #416]	; (801a870 <_dtoa_r+0x650>)
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	4640      	mov	r0, r8
 801a6d2:	4649      	mov	r1, r9
 801a6d4:	f7e5 ff90 	bl	80005f8 <__aeabi_dmul>
 801a6d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a6dc:	f7e6 fa12 	bl	8000b04 <__aeabi_dcmpge>
 801a6e0:	9e04      	ldr	r6, [sp, #16]
 801a6e2:	4637      	mov	r7, r6
 801a6e4:	2800      	cmp	r0, #0
 801a6e6:	f040 8245 	bne.w	801ab74 <_dtoa_r+0x954>
 801a6ea:	9d00      	ldr	r5, [sp, #0]
 801a6ec:	2331      	movs	r3, #49	; 0x31
 801a6ee:	f805 3b01 	strb.w	r3, [r5], #1
 801a6f2:	f10b 0b01 	add.w	fp, fp, #1
 801a6f6:	e241      	b.n	801ab7c <_dtoa_r+0x95c>
 801a6f8:	07f2      	lsls	r2, r6, #31
 801a6fa:	d505      	bpl.n	801a708 <_dtoa_r+0x4e8>
 801a6fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a700:	f7e5 ff7a 	bl	80005f8 <__aeabi_dmul>
 801a704:	3501      	adds	r5, #1
 801a706:	2301      	movs	r3, #1
 801a708:	1076      	asrs	r6, r6, #1
 801a70a:	3708      	adds	r7, #8
 801a70c:	e773      	b.n	801a5f6 <_dtoa_r+0x3d6>
 801a70e:	2502      	movs	r5, #2
 801a710:	e775      	b.n	801a5fe <_dtoa_r+0x3de>
 801a712:	9e04      	ldr	r6, [sp, #16]
 801a714:	465f      	mov	r7, fp
 801a716:	e792      	b.n	801a63e <_dtoa_r+0x41e>
 801a718:	9900      	ldr	r1, [sp, #0]
 801a71a:	4b50      	ldr	r3, [pc, #320]	; (801a85c <_dtoa_r+0x63c>)
 801a71c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a720:	4431      	add	r1, r6
 801a722:	9102      	str	r1, [sp, #8]
 801a724:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a726:	eeb0 9a47 	vmov.f32	s18, s14
 801a72a:	eef0 9a67 	vmov.f32	s19, s15
 801a72e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a732:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a736:	2900      	cmp	r1, #0
 801a738:	d044      	beq.n	801a7c4 <_dtoa_r+0x5a4>
 801a73a:	494e      	ldr	r1, [pc, #312]	; (801a874 <_dtoa_r+0x654>)
 801a73c:	2000      	movs	r0, #0
 801a73e:	f7e6 f885 	bl	800084c <__aeabi_ddiv>
 801a742:	ec53 2b19 	vmov	r2, r3, d9
 801a746:	f7e5 fd9f 	bl	8000288 <__aeabi_dsub>
 801a74a:	9d00      	ldr	r5, [sp, #0]
 801a74c:	ec41 0b19 	vmov	d9, r0, r1
 801a750:	4649      	mov	r1, r9
 801a752:	4640      	mov	r0, r8
 801a754:	f7e6 fa00 	bl	8000b58 <__aeabi_d2iz>
 801a758:	4606      	mov	r6, r0
 801a75a:	f7e5 fee3 	bl	8000524 <__aeabi_i2d>
 801a75e:	4602      	mov	r2, r0
 801a760:	460b      	mov	r3, r1
 801a762:	4640      	mov	r0, r8
 801a764:	4649      	mov	r1, r9
 801a766:	f7e5 fd8f 	bl	8000288 <__aeabi_dsub>
 801a76a:	3630      	adds	r6, #48	; 0x30
 801a76c:	f805 6b01 	strb.w	r6, [r5], #1
 801a770:	ec53 2b19 	vmov	r2, r3, d9
 801a774:	4680      	mov	r8, r0
 801a776:	4689      	mov	r9, r1
 801a778:	f7e6 f9b0 	bl	8000adc <__aeabi_dcmplt>
 801a77c:	2800      	cmp	r0, #0
 801a77e:	d164      	bne.n	801a84a <_dtoa_r+0x62a>
 801a780:	4642      	mov	r2, r8
 801a782:	464b      	mov	r3, r9
 801a784:	4937      	ldr	r1, [pc, #220]	; (801a864 <_dtoa_r+0x644>)
 801a786:	2000      	movs	r0, #0
 801a788:	f7e5 fd7e 	bl	8000288 <__aeabi_dsub>
 801a78c:	ec53 2b19 	vmov	r2, r3, d9
 801a790:	f7e6 f9a4 	bl	8000adc <__aeabi_dcmplt>
 801a794:	2800      	cmp	r0, #0
 801a796:	f040 80b6 	bne.w	801a906 <_dtoa_r+0x6e6>
 801a79a:	9b02      	ldr	r3, [sp, #8]
 801a79c:	429d      	cmp	r5, r3
 801a79e:	f43f af7c 	beq.w	801a69a <_dtoa_r+0x47a>
 801a7a2:	4b31      	ldr	r3, [pc, #196]	; (801a868 <_dtoa_r+0x648>)
 801a7a4:	ec51 0b19 	vmov	r0, r1, d9
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	f7e5 ff25 	bl	80005f8 <__aeabi_dmul>
 801a7ae:	4b2e      	ldr	r3, [pc, #184]	; (801a868 <_dtoa_r+0x648>)
 801a7b0:	ec41 0b19 	vmov	d9, r0, r1
 801a7b4:	2200      	movs	r2, #0
 801a7b6:	4640      	mov	r0, r8
 801a7b8:	4649      	mov	r1, r9
 801a7ba:	f7e5 ff1d 	bl	80005f8 <__aeabi_dmul>
 801a7be:	4680      	mov	r8, r0
 801a7c0:	4689      	mov	r9, r1
 801a7c2:	e7c5      	b.n	801a750 <_dtoa_r+0x530>
 801a7c4:	ec51 0b17 	vmov	r0, r1, d7
 801a7c8:	f7e5 ff16 	bl	80005f8 <__aeabi_dmul>
 801a7cc:	9b02      	ldr	r3, [sp, #8]
 801a7ce:	9d00      	ldr	r5, [sp, #0]
 801a7d0:	930f      	str	r3, [sp, #60]	; 0x3c
 801a7d2:	ec41 0b19 	vmov	d9, r0, r1
 801a7d6:	4649      	mov	r1, r9
 801a7d8:	4640      	mov	r0, r8
 801a7da:	f7e6 f9bd 	bl	8000b58 <__aeabi_d2iz>
 801a7de:	4606      	mov	r6, r0
 801a7e0:	f7e5 fea0 	bl	8000524 <__aeabi_i2d>
 801a7e4:	3630      	adds	r6, #48	; 0x30
 801a7e6:	4602      	mov	r2, r0
 801a7e8:	460b      	mov	r3, r1
 801a7ea:	4640      	mov	r0, r8
 801a7ec:	4649      	mov	r1, r9
 801a7ee:	f7e5 fd4b 	bl	8000288 <__aeabi_dsub>
 801a7f2:	f805 6b01 	strb.w	r6, [r5], #1
 801a7f6:	9b02      	ldr	r3, [sp, #8]
 801a7f8:	429d      	cmp	r5, r3
 801a7fa:	4680      	mov	r8, r0
 801a7fc:	4689      	mov	r9, r1
 801a7fe:	f04f 0200 	mov.w	r2, #0
 801a802:	d124      	bne.n	801a84e <_dtoa_r+0x62e>
 801a804:	4b1b      	ldr	r3, [pc, #108]	; (801a874 <_dtoa_r+0x654>)
 801a806:	ec51 0b19 	vmov	r0, r1, d9
 801a80a:	f7e5 fd3f 	bl	800028c <__adddf3>
 801a80e:	4602      	mov	r2, r0
 801a810:	460b      	mov	r3, r1
 801a812:	4640      	mov	r0, r8
 801a814:	4649      	mov	r1, r9
 801a816:	f7e6 f97f 	bl	8000b18 <__aeabi_dcmpgt>
 801a81a:	2800      	cmp	r0, #0
 801a81c:	d173      	bne.n	801a906 <_dtoa_r+0x6e6>
 801a81e:	ec53 2b19 	vmov	r2, r3, d9
 801a822:	4914      	ldr	r1, [pc, #80]	; (801a874 <_dtoa_r+0x654>)
 801a824:	2000      	movs	r0, #0
 801a826:	f7e5 fd2f 	bl	8000288 <__aeabi_dsub>
 801a82a:	4602      	mov	r2, r0
 801a82c:	460b      	mov	r3, r1
 801a82e:	4640      	mov	r0, r8
 801a830:	4649      	mov	r1, r9
 801a832:	f7e6 f953 	bl	8000adc <__aeabi_dcmplt>
 801a836:	2800      	cmp	r0, #0
 801a838:	f43f af2f 	beq.w	801a69a <_dtoa_r+0x47a>
 801a83c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801a83e:	1e6b      	subs	r3, r5, #1
 801a840:	930f      	str	r3, [sp, #60]	; 0x3c
 801a842:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a846:	2b30      	cmp	r3, #48	; 0x30
 801a848:	d0f8      	beq.n	801a83c <_dtoa_r+0x61c>
 801a84a:	46bb      	mov	fp, r7
 801a84c:	e04a      	b.n	801a8e4 <_dtoa_r+0x6c4>
 801a84e:	4b06      	ldr	r3, [pc, #24]	; (801a868 <_dtoa_r+0x648>)
 801a850:	f7e5 fed2 	bl	80005f8 <__aeabi_dmul>
 801a854:	4680      	mov	r8, r0
 801a856:	4689      	mov	r9, r1
 801a858:	e7bd      	b.n	801a7d6 <_dtoa_r+0x5b6>
 801a85a:	bf00      	nop
 801a85c:	0801fdd0 	.word	0x0801fdd0
 801a860:	0801fda8 	.word	0x0801fda8
 801a864:	3ff00000 	.word	0x3ff00000
 801a868:	40240000 	.word	0x40240000
 801a86c:	401c0000 	.word	0x401c0000
 801a870:	40140000 	.word	0x40140000
 801a874:	3fe00000 	.word	0x3fe00000
 801a878:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a87c:	9d00      	ldr	r5, [sp, #0]
 801a87e:	4642      	mov	r2, r8
 801a880:	464b      	mov	r3, r9
 801a882:	4630      	mov	r0, r6
 801a884:	4639      	mov	r1, r7
 801a886:	f7e5 ffe1 	bl	800084c <__aeabi_ddiv>
 801a88a:	f7e6 f965 	bl	8000b58 <__aeabi_d2iz>
 801a88e:	9001      	str	r0, [sp, #4]
 801a890:	f7e5 fe48 	bl	8000524 <__aeabi_i2d>
 801a894:	4642      	mov	r2, r8
 801a896:	464b      	mov	r3, r9
 801a898:	f7e5 feae 	bl	80005f8 <__aeabi_dmul>
 801a89c:	4602      	mov	r2, r0
 801a89e:	460b      	mov	r3, r1
 801a8a0:	4630      	mov	r0, r6
 801a8a2:	4639      	mov	r1, r7
 801a8a4:	f7e5 fcf0 	bl	8000288 <__aeabi_dsub>
 801a8a8:	9e01      	ldr	r6, [sp, #4]
 801a8aa:	9f04      	ldr	r7, [sp, #16]
 801a8ac:	3630      	adds	r6, #48	; 0x30
 801a8ae:	f805 6b01 	strb.w	r6, [r5], #1
 801a8b2:	9e00      	ldr	r6, [sp, #0]
 801a8b4:	1bae      	subs	r6, r5, r6
 801a8b6:	42b7      	cmp	r7, r6
 801a8b8:	4602      	mov	r2, r0
 801a8ba:	460b      	mov	r3, r1
 801a8bc:	d134      	bne.n	801a928 <_dtoa_r+0x708>
 801a8be:	f7e5 fce5 	bl	800028c <__adddf3>
 801a8c2:	4642      	mov	r2, r8
 801a8c4:	464b      	mov	r3, r9
 801a8c6:	4606      	mov	r6, r0
 801a8c8:	460f      	mov	r7, r1
 801a8ca:	f7e6 f925 	bl	8000b18 <__aeabi_dcmpgt>
 801a8ce:	b9c8      	cbnz	r0, 801a904 <_dtoa_r+0x6e4>
 801a8d0:	4642      	mov	r2, r8
 801a8d2:	464b      	mov	r3, r9
 801a8d4:	4630      	mov	r0, r6
 801a8d6:	4639      	mov	r1, r7
 801a8d8:	f7e6 f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 801a8dc:	b110      	cbz	r0, 801a8e4 <_dtoa_r+0x6c4>
 801a8de:	9b01      	ldr	r3, [sp, #4]
 801a8e0:	07db      	lsls	r3, r3, #31
 801a8e2:	d40f      	bmi.n	801a904 <_dtoa_r+0x6e4>
 801a8e4:	4651      	mov	r1, sl
 801a8e6:	4620      	mov	r0, r4
 801a8e8:	f000 fbcc 	bl	801b084 <_Bfree>
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a8f0:	702b      	strb	r3, [r5, #0]
 801a8f2:	f10b 0301 	add.w	r3, fp, #1
 801a8f6:	6013      	str	r3, [r2, #0]
 801a8f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	f43f ace2 	beq.w	801a2c4 <_dtoa_r+0xa4>
 801a900:	601d      	str	r5, [r3, #0]
 801a902:	e4df      	b.n	801a2c4 <_dtoa_r+0xa4>
 801a904:	465f      	mov	r7, fp
 801a906:	462b      	mov	r3, r5
 801a908:	461d      	mov	r5, r3
 801a90a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a90e:	2a39      	cmp	r2, #57	; 0x39
 801a910:	d106      	bne.n	801a920 <_dtoa_r+0x700>
 801a912:	9a00      	ldr	r2, [sp, #0]
 801a914:	429a      	cmp	r2, r3
 801a916:	d1f7      	bne.n	801a908 <_dtoa_r+0x6e8>
 801a918:	9900      	ldr	r1, [sp, #0]
 801a91a:	2230      	movs	r2, #48	; 0x30
 801a91c:	3701      	adds	r7, #1
 801a91e:	700a      	strb	r2, [r1, #0]
 801a920:	781a      	ldrb	r2, [r3, #0]
 801a922:	3201      	adds	r2, #1
 801a924:	701a      	strb	r2, [r3, #0]
 801a926:	e790      	b.n	801a84a <_dtoa_r+0x62a>
 801a928:	4ba3      	ldr	r3, [pc, #652]	; (801abb8 <_dtoa_r+0x998>)
 801a92a:	2200      	movs	r2, #0
 801a92c:	f7e5 fe64 	bl	80005f8 <__aeabi_dmul>
 801a930:	2200      	movs	r2, #0
 801a932:	2300      	movs	r3, #0
 801a934:	4606      	mov	r6, r0
 801a936:	460f      	mov	r7, r1
 801a938:	f7e6 f8c6 	bl	8000ac8 <__aeabi_dcmpeq>
 801a93c:	2800      	cmp	r0, #0
 801a93e:	d09e      	beq.n	801a87e <_dtoa_r+0x65e>
 801a940:	e7d0      	b.n	801a8e4 <_dtoa_r+0x6c4>
 801a942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a944:	2a00      	cmp	r2, #0
 801a946:	f000 80ca 	beq.w	801aade <_dtoa_r+0x8be>
 801a94a:	9a07      	ldr	r2, [sp, #28]
 801a94c:	2a01      	cmp	r2, #1
 801a94e:	f300 80ad 	bgt.w	801aaac <_dtoa_r+0x88c>
 801a952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a954:	2a00      	cmp	r2, #0
 801a956:	f000 80a5 	beq.w	801aaa4 <_dtoa_r+0x884>
 801a95a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a95e:	9e08      	ldr	r6, [sp, #32]
 801a960:	9d05      	ldr	r5, [sp, #20]
 801a962:	9a05      	ldr	r2, [sp, #20]
 801a964:	441a      	add	r2, r3
 801a966:	9205      	str	r2, [sp, #20]
 801a968:	9a06      	ldr	r2, [sp, #24]
 801a96a:	2101      	movs	r1, #1
 801a96c:	441a      	add	r2, r3
 801a96e:	4620      	mov	r0, r4
 801a970:	9206      	str	r2, [sp, #24]
 801a972:	f000 fc87 	bl	801b284 <__i2b>
 801a976:	4607      	mov	r7, r0
 801a978:	b165      	cbz	r5, 801a994 <_dtoa_r+0x774>
 801a97a:	9b06      	ldr	r3, [sp, #24]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	dd09      	ble.n	801a994 <_dtoa_r+0x774>
 801a980:	42ab      	cmp	r3, r5
 801a982:	9a05      	ldr	r2, [sp, #20]
 801a984:	bfa8      	it	ge
 801a986:	462b      	movge	r3, r5
 801a988:	1ad2      	subs	r2, r2, r3
 801a98a:	9205      	str	r2, [sp, #20]
 801a98c:	9a06      	ldr	r2, [sp, #24]
 801a98e:	1aed      	subs	r5, r5, r3
 801a990:	1ad3      	subs	r3, r2, r3
 801a992:	9306      	str	r3, [sp, #24]
 801a994:	9b08      	ldr	r3, [sp, #32]
 801a996:	b1f3      	cbz	r3, 801a9d6 <_dtoa_r+0x7b6>
 801a998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	f000 80a3 	beq.w	801aae6 <_dtoa_r+0x8c6>
 801a9a0:	2e00      	cmp	r6, #0
 801a9a2:	dd10      	ble.n	801a9c6 <_dtoa_r+0x7a6>
 801a9a4:	4639      	mov	r1, r7
 801a9a6:	4632      	mov	r2, r6
 801a9a8:	4620      	mov	r0, r4
 801a9aa:	f000 fd2b 	bl	801b404 <__pow5mult>
 801a9ae:	4652      	mov	r2, sl
 801a9b0:	4601      	mov	r1, r0
 801a9b2:	4607      	mov	r7, r0
 801a9b4:	4620      	mov	r0, r4
 801a9b6:	f000 fc7b 	bl	801b2b0 <__multiply>
 801a9ba:	4651      	mov	r1, sl
 801a9bc:	4680      	mov	r8, r0
 801a9be:	4620      	mov	r0, r4
 801a9c0:	f000 fb60 	bl	801b084 <_Bfree>
 801a9c4:	46c2      	mov	sl, r8
 801a9c6:	9b08      	ldr	r3, [sp, #32]
 801a9c8:	1b9a      	subs	r2, r3, r6
 801a9ca:	d004      	beq.n	801a9d6 <_dtoa_r+0x7b6>
 801a9cc:	4651      	mov	r1, sl
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	f000 fd18 	bl	801b404 <__pow5mult>
 801a9d4:	4682      	mov	sl, r0
 801a9d6:	2101      	movs	r1, #1
 801a9d8:	4620      	mov	r0, r4
 801a9da:	f000 fc53 	bl	801b284 <__i2b>
 801a9de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	4606      	mov	r6, r0
 801a9e4:	f340 8081 	ble.w	801aaea <_dtoa_r+0x8ca>
 801a9e8:	461a      	mov	r2, r3
 801a9ea:	4601      	mov	r1, r0
 801a9ec:	4620      	mov	r0, r4
 801a9ee:	f000 fd09 	bl	801b404 <__pow5mult>
 801a9f2:	9b07      	ldr	r3, [sp, #28]
 801a9f4:	2b01      	cmp	r3, #1
 801a9f6:	4606      	mov	r6, r0
 801a9f8:	dd7a      	ble.n	801aaf0 <_dtoa_r+0x8d0>
 801a9fa:	f04f 0800 	mov.w	r8, #0
 801a9fe:	6933      	ldr	r3, [r6, #16]
 801aa00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801aa04:	6918      	ldr	r0, [r3, #16]
 801aa06:	f000 fbef 	bl	801b1e8 <__hi0bits>
 801aa0a:	f1c0 0020 	rsb	r0, r0, #32
 801aa0e:	9b06      	ldr	r3, [sp, #24]
 801aa10:	4418      	add	r0, r3
 801aa12:	f010 001f 	ands.w	r0, r0, #31
 801aa16:	f000 8094 	beq.w	801ab42 <_dtoa_r+0x922>
 801aa1a:	f1c0 0320 	rsb	r3, r0, #32
 801aa1e:	2b04      	cmp	r3, #4
 801aa20:	f340 8085 	ble.w	801ab2e <_dtoa_r+0x90e>
 801aa24:	9b05      	ldr	r3, [sp, #20]
 801aa26:	f1c0 001c 	rsb	r0, r0, #28
 801aa2a:	4403      	add	r3, r0
 801aa2c:	9305      	str	r3, [sp, #20]
 801aa2e:	9b06      	ldr	r3, [sp, #24]
 801aa30:	4403      	add	r3, r0
 801aa32:	4405      	add	r5, r0
 801aa34:	9306      	str	r3, [sp, #24]
 801aa36:	9b05      	ldr	r3, [sp, #20]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	dd05      	ble.n	801aa48 <_dtoa_r+0x828>
 801aa3c:	4651      	mov	r1, sl
 801aa3e:	461a      	mov	r2, r3
 801aa40:	4620      	mov	r0, r4
 801aa42:	f000 fd39 	bl	801b4b8 <__lshift>
 801aa46:	4682      	mov	sl, r0
 801aa48:	9b06      	ldr	r3, [sp, #24]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	dd05      	ble.n	801aa5a <_dtoa_r+0x83a>
 801aa4e:	4631      	mov	r1, r6
 801aa50:	461a      	mov	r2, r3
 801aa52:	4620      	mov	r0, r4
 801aa54:	f000 fd30 	bl	801b4b8 <__lshift>
 801aa58:	4606      	mov	r6, r0
 801aa5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d072      	beq.n	801ab46 <_dtoa_r+0x926>
 801aa60:	4631      	mov	r1, r6
 801aa62:	4650      	mov	r0, sl
 801aa64:	f000 fd94 	bl	801b590 <__mcmp>
 801aa68:	2800      	cmp	r0, #0
 801aa6a:	da6c      	bge.n	801ab46 <_dtoa_r+0x926>
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	4651      	mov	r1, sl
 801aa70:	220a      	movs	r2, #10
 801aa72:	4620      	mov	r0, r4
 801aa74:	f000 fb28 	bl	801b0c8 <__multadd>
 801aa78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aa7e:	4682      	mov	sl, r0
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	f000 81b0 	beq.w	801ade6 <_dtoa_r+0xbc6>
 801aa86:	2300      	movs	r3, #0
 801aa88:	4639      	mov	r1, r7
 801aa8a:	220a      	movs	r2, #10
 801aa8c:	4620      	mov	r0, r4
 801aa8e:	f000 fb1b 	bl	801b0c8 <__multadd>
 801aa92:	9b01      	ldr	r3, [sp, #4]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	4607      	mov	r7, r0
 801aa98:	f300 8096 	bgt.w	801abc8 <_dtoa_r+0x9a8>
 801aa9c:	9b07      	ldr	r3, [sp, #28]
 801aa9e:	2b02      	cmp	r3, #2
 801aaa0:	dc59      	bgt.n	801ab56 <_dtoa_r+0x936>
 801aaa2:	e091      	b.n	801abc8 <_dtoa_r+0x9a8>
 801aaa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aaa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801aaaa:	e758      	b.n	801a95e <_dtoa_r+0x73e>
 801aaac:	9b04      	ldr	r3, [sp, #16]
 801aaae:	1e5e      	subs	r6, r3, #1
 801aab0:	9b08      	ldr	r3, [sp, #32]
 801aab2:	42b3      	cmp	r3, r6
 801aab4:	bfbf      	itttt	lt
 801aab6:	9b08      	ldrlt	r3, [sp, #32]
 801aab8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801aaba:	9608      	strlt	r6, [sp, #32]
 801aabc:	1af3      	sublt	r3, r6, r3
 801aabe:	bfb4      	ite	lt
 801aac0:	18d2      	addlt	r2, r2, r3
 801aac2:	1b9e      	subge	r6, r3, r6
 801aac4:	9b04      	ldr	r3, [sp, #16]
 801aac6:	bfbc      	itt	lt
 801aac8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801aaca:	2600      	movlt	r6, #0
 801aacc:	2b00      	cmp	r3, #0
 801aace:	bfb7      	itett	lt
 801aad0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801aad4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801aad8:	1a9d      	sublt	r5, r3, r2
 801aada:	2300      	movlt	r3, #0
 801aadc:	e741      	b.n	801a962 <_dtoa_r+0x742>
 801aade:	9e08      	ldr	r6, [sp, #32]
 801aae0:	9d05      	ldr	r5, [sp, #20]
 801aae2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801aae4:	e748      	b.n	801a978 <_dtoa_r+0x758>
 801aae6:	9a08      	ldr	r2, [sp, #32]
 801aae8:	e770      	b.n	801a9cc <_dtoa_r+0x7ac>
 801aaea:	9b07      	ldr	r3, [sp, #28]
 801aaec:	2b01      	cmp	r3, #1
 801aaee:	dc19      	bgt.n	801ab24 <_dtoa_r+0x904>
 801aaf0:	9b02      	ldr	r3, [sp, #8]
 801aaf2:	b9bb      	cbnz	r3, 801ab24 <_dtoa_r+0x904>
 801aaf4:	9b03      	ldr	r3, [sp, #12]
 801aaf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aafa:	b99b      	cbnz	r3, 801ab24 <_dtoa_r+0x904>
 801aafc:	9b03      	ldr	r3, [sp, #12]
 801aafe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ab02:	0d1b      	lsrs	r3, r3, #20
 801ab04:	051b      	lsls	r3, r3, #20
 801ab06:	b183      	cbz	r3, 801ab2a <_dtoa_r+0x90a>
 801ab08:	9b05      	ldr	r3, [sp, #20]
 801ab0a:	3301      	adds	r3, #1
 801ab0c:	9305      	str	r3, [sp, #20]
 801ab0e:	9b06      	ldr	r3, [sp, #24]
 801ab10:	3301      	adds	r3, #1
 801ab12:	9306      	str	r3, [sp, #24]
 801ab14:	f04f 0801 	mov.w	r8, #1
 801ab18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	f47f af6f 	bne.w	801a9fe <_dtoa_r+0x7de>
 801ab20:	2001      	movs	r0, #1
 801ab22:	e774      	b.n	801aa0e <_dtoa_r+0x7ee>
 801ab24:	f04f 0800 	mov.w	r8, #0
 801ab28:	e7f6      	b.n	801ab18 <_dtoa_r+0x8f8>
 801ab2a:	4698      	mov	r8, r3
 801ab2c:	e7f4      	b.n	801ab18 <_dtoa_r+0x8f8>
 801ab2e:	d082      	beq.n	801aa36 <_dtoa_r+0x816>
 801ab30:	9a05      	ldr	r2, [sp, #20]
 801ab32:	331c      	adds	r3, #28
 801ab34:	441a      	add	r2, r3
 801ab36:	9205      	str	r2, [sp, #20]
 801ab38:	9a06      	ldr	r2, [sp, #24]
 801ab3a:	441a      	add	r2, r3
 801ab3c:	441d      	add	r5, r3
 801ab3e:	9206      	str	r2, [sp, #24]
 801ab40:	e779      	b.n	801aa36 <_dtoa_r+0x816>
 801ab42:	4603      	mov	r3, r0
 801ab44:	e7f4      	b.n	801ab30 <_dtoa_r+0x910>
 801ab46:	9b04      	ldr	r3, [sp, #16]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	dc37      	bgt.n	801abbc <_dtoa_r+0x99c>
 801ab4c:	9b07      	ldr	r3, [sp, #28]
 801ab4e:	2b02      	cmp	r3, #2
 801ab50:	dd34      	ble.n	801abbc <_dtoa_r+0x99c>
 801ab52:	9b04      	ldr	r3, [sp, #16]
 801ab54:	9301      	str	r3, [sp, #4]
 801ab56:	9b01      	ldr	r3, [sp, #4]
 801ab58:	b963      	cbnz	r3, 801ab74 <_dtoa_r+0x954>
 801ab5a:	4631      	mov	r1, r6
 801ab5c:	2205      	movs	r2, #5
 801ab5e:	4620      	mov	r0, r4
 801ab60:	f000 fab2 	bl	801b0c8 <__multadd>
 801ab64:	4601      	mov	r1, r0
 801ab66:	4606      	mov	r6, r0
 801ab68:	4650      	mov	r0, sl
 801ab6a:	f000 fd11 	bl	801b590 <__mcmp>
 801ab6e:	2800      	cmp	r0, #0
 801ab70:	f73f adbb 	bgt.w	801a6ea <_dtoa_r+0x4ca>
 801ab74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab76:	9d00      	ldr	r5, [sp, #0]
 801ab78:	ea6f 0b03 	mvn.w	fp, r3
 801ab7c:	f04f 0800 	mov.w	r8, #0
 801ab80:	4631      	mov	r1, r6
 801ab82:	4620      	mov	r0, r4
 801ab84:	f000 fa7e 	bl	801b084 <_Bfree>
 801ab88:	2f00      	cmp	r7, #0
 801ab8a:	f43f aeab 	beq.w	801a8e4 <_dtoa_r+0x6c4>
 801ab8e:	f1b8 0f00 	cmp.w	r8, #0
 801ab92:	d005      	beq.n	801aba0 <_dtoa_r+0x980>
 801ab94:	45b8      	cmp	r8, r7
 801ab96:	d003      	beq.n	801aba0 <_dtoa_r+0x980>
 801ab98:	4641      	mov	r1, r8
 801ab9a:	4620      	mov	r0, r4
 801ab9c:	f000 fa72 	bl	801b084 <_Bfree>
 801aba0:	4639      	mov	r1, r7
 801aba2:	4620      	mov	r0, r4
 801aba4:	f000 fa6e 	bl	801b084 <_Bfree>
 801aba8:	e69c      	b.n	801a8e4 <_dtoa_r+0x6c4>
 801abaa:	2600      	movs	r6, #0
 801abac:	4637      	mov	r7, r6
 801abae:	e7e1      	b.n	801ab74 <_dtoa_r+0x954>
 801abb0:	46bb      	mov	fp, r7
 801abb2:	4637      	mov	r7, r6
 801abb4:	e599      	b.n	801a6ea <_dtoa_r+0x4ca>
 801abb6:	bf00      	nop
 801abb8:	40240000 	.word	0x40240000
 801abbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	f000 80c8 	beq.w	801ad54 <_dtoa_r+0xb34>
 801abc4:	9b04      	ldr	r3, [sp, #16]
 801abc6:	9301      	str	r3, [sp, #4]
 801abc8:	2d00      	cmp	r5, #0
 801abca:	dd05      	ble.n	801abd8 <_dtoa_r+0x9b8>
 801abcc:	4639      	mov	r1, r7
 801abce:	462a      	mov	r2, r5
 801abd0:	4620      	mov	r0, r4
 801abd2:	f000 fc71 	bl	801b4b8 <__lshift>
 801abd6:	4607      	mov	r7, r0
 801abd8:	f1b8 0f00 	cmp.w	r8, #0
 801abdc:	d05b      	beq.n	801ac96 <_dtoa_r+0xa76>
 801abde:	6879      	ldr	r1, [r7, #4]
 801abe0:	4620      	mov	r0, r4
 801abe2:	f000 fa0f 	bl	801b004 <_Balloc>
 801abe6:	4605      	mov	r5, r0
 801abe8:	b928      	cbnz	r0, 801abf6 <_dtoa_r+0x9d6>
 801abea:	4b83      	ldr	r3, [pc, #524]	; (801adf8 <_dtoa_r+0xbd8>)
 801abec:	4602      	mov	r2, r0
 801abee:	f240 21ef 	movw	r1, #751	; 0x2ef
 801abf2:	f7ff bb2e 	b.w	801a252 <_dtoa_r+0x32>
 801abf6:	693a      	ldr	r2, [r7, #16]
 801abf8:	3202      	adds	r2, #2
 801abfa:	0092      	lsls	r2, r2, #2
 801abfc:	f107 010c 	add.w	r1, r7, #12
 801ac00:	300c      	adds	r0, #12
 801ac02:	f7ff fa71 	bl	801a0e8 <memcpy>
 801ac06:	2201      	movs	r2, #1
 801ac08:	4629      	mov	r1, r5
 801ac0a:	4620      	mov	r0, r4
 801ac0c:	f000 fc54 	bl	801b4b8 <__lshift>
 801ac10:	9b00      	ldr	r3, [sp, #0]
 801ac12:	3301      	adds	r3, #1
 801ac14:	9304      	str	r3, [sp, #16]
 801ac16:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ac1a:	4413      	add	r3, r2
 801ac1c:	9308      	str	r3, [sp, #32]
 801ac1e:	9b02      	ldr	r3, [sp, #8]
 801ac20:	f003 0301 	and.w	r3, r3, #1
 801ac24:	46b8      	mov	r8, r7
 801ac26:	9306      	str	r3, [sp, #24]
 801ac28:	4607      	mov	r7, r0
 801ac2a:	9b04      	ldr	r3, [sp, #16]
 801ac2c:	4631      	mov	r1, r6
 801ac2e:	3b01      	subs	r3, #1
 801ac30:	4650      	mov	r0, sl
 801ac32:	9301      	str	r3, [sp, #4]
 801ac34:	f7ff fa6c 	bl	801a110 <quorem>
 801ac38:	4641      	mov	r1, r8
 801ac3a:	9002      	str	r0, [sp, #8]
 801ac3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ac40:	4650      	mov	r0, sl
 801ac42:	f000 fca5 	bl	801b590 <__mcmp>
 801ac46:	463a      	mov	r2, r7
 801ac48:	9005      	str	r0, [sp, #20]
 801ac4a:	4631      	mov	r1, r6
 801ac4c:	4620      	mov	r0, r4
 801ac4e:	f000 fcbb 	bl	801b5c8 <__mdiff>
 801ac52:	68c2      	ldr	r2, [r0, #12]
 801ac54:	4605      	mov	r5, r0
 801ac56:	bb02      	cbnz	r2, 801ac9a <_dtoa_r+0xa7a>
 801ac58:	4601      	mov	r1, r0
 801ac5a:	4650      	mov	r0, sl
 801ac5c:	f000 fc98 	bl	801b590 <__mcmp>
 801ac60:	4602      	mov	r2, r0
 801ac62:	4629      	mov	r1, r5
 801ac64:	4620      	mov	r0, r4
 801ac66:	9209      	str	r2, [sp, #36]	; 0x24
 801ac68:	f000 fa0c 	bl	801b084 <_Bfree>
 801ac6c:	9b07      	ldr	r3, [sp, #28]
 801ac6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac70:	9d04      	ldr	r5, [sp, #16]
 801ac72:	ea43 0102 	orr.w	r1, r3, r2
 801ac76:	9b06      	ldr	r3, [sp, #24]
 801ac78:	4319      	orrs	r1, r3
 801ac7a:	d110      	bne.n	801ac9e <_dtoa_r+0xa7e>
 801ac7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ac80:	d029      	beq.n	801acd6 <_dtoa_r+0xab6>
 801ac82:	9b05      	ldr	r3, [sp, #20]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	dd02      	ble.n	801ac8e <_dtoa_r+0xa6e>
 801ac88:	9b02      	ldr	r3, [sp, #8]
 801ac8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801ac8e:	9b01      	ldr	r3, [sp, #4]
 801ac90:	f883 9000 	strb.w	r9, [r3]
 801ac94:	e774      	b.n	801ab80 <_dtoa_r+0x960>
 801ac96:	4638      	mov	r0, r7
 801ac98:	e7ba      	b.n	801ac10 <_dtoa_r+0x9f0>
 801ac9a:	2201      	movs	r2, #1
 801ac9c:	e7e1      	b.n	801ac62 <_dtoa_r+0xa42>
 801ac9e:	9b05      	ldr	r3, [sp, #20]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	db04      	blt.n	801acae <_dtoa_r+0xa8e>
 801aca4:	9907      	ldr	r1, [sp, #28]
 801aca6:	430b      	orrs	r3, r1
 801aca8:	9906      	ldr	r1, [sp, #24]
 801acaa:	430b      	orrs	r3, r1
 801acac:	d120      	bne.n	801acf0 <_dtoa_r+0xad0>
 801acae:	2a00      	cmp	r2, #0
 801acb0:	dded      	ble.n	801ac8e <_dtoa_r+0xa6e>
 801acb2:	4651      	mov	r1, sl
 801acb4:	2201      	movs	r2, #1
 801acb6:	4620      	mov	r0, r4
 801acb8:	f000 fbfe 	bl	801b4b8 <__lshift>
 801acbc:	4631      	mov	r1, r6
 801acbe:	4682      	mov	sl, r0
 801acc0:	f000 fc66 	bl	801b590 <__mcmp>
 801acc4:	2800      	cmp	r0, #0
 801acc6:	dc03      	bgt.n	801acd0 <_dtoa_r+0xab0>
 801acc8:	d1e1      	bne.n	801ac8e <_dtoa_r+0xa6e>
 801acca:	f019 0f01 	tst.w	r9, #1
 801acce:	d0de      	beq.n	801ac8e <_dtoa_r+0xa6e>
 801acd0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801acd4:	d1d8      	bne.n	801ac88 <_dtoa_r+0xa68>
 801acd6:	9a01      	ldr	r2, [sp, #4]
 801acd8:	2339      	movs	r3, #57	; 0x39
 801acda:	7013      	strb	r3, [r2, #0]
 801acdc:	462b      	mov	r3, r5
 801acde:	461d      	mov	r5, r3
 801ace0:	3b01      	subs	r3, #1
 801ace2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ace6:	2a39      	cmp	r2, #57	; 0x39
 801ace8:	d06c      	beq.n	801adc4 <_dtoa_r+0xba4>
 801acea:	3201      	adds	r2, #1
 801acec:	701a      	strb	r2, [r3, #0]
 801acee:	e747      	b.n	801ab80 <_dtoa_r+0x960>
 801acf0:	2a00      	cmp	r2, #0
 801acf2:	dd07      	ble.n	801ad04 <_dtoa_r+0xae4>
 801acf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801acf8:	d0ed      	beq.n	801acd6 <_dtoa_r+0xab6>
 801acfa:	9a01      	ldr	r2, [sp, #4]
 801acfc:	f109 0301 	add.w	r3, r9, #1
 801ad00:	7013      	strb	r3, [r2, #0]
 801ad02:	e73d      	b.n	801ab80 <_dtoa_r+0x960>
 801ad04:	9b04      	ldr	r3, [sp, #16]
 801ad06:	9a08      	ldr	r2, [sp, #32]
 801ad08:	f803 9c01 	strb.w	r9, [r3, #-1]
 801ad0c:	4293      	cmp	r3, r2
 801ad0e:	d043      	beq.n	801ad98 <_dtoa_r+0xb78>
 801ad10:	4651      	mov	r1, sl
 801ad12:	2300      	movs	r3, #0
 801ad14:	220a      	movs	r2, #10
 801ad16:	4620      	mov	r0, r4
 801ad18:	f000 f9d6 	bl	801b0c8 <__multadd>
 801ad1c:	45b8      	cmp	r8, r7
 801ad1e:	4682      	mov	sl, r0
 801ad20:	f04f 0300 	mov.w	r3, #0
 801ad24:	f04f 020a 	mov.w	r2, #10
 801ad28:	4641      	mov	r1, r8
 801ad2a:	4620      	mov	r0, r4
 801ad2c:	d107      	bne.n	801ad3e <_dtoa_r+0xb1e>
 801ad2e:	f000 f9cb 	bl	801b0c8 <__multadd>
 801ad32:	4680      	mov	r8, r0
 801ad34:	4607      	mov	r7, r0
 801ad36:	9b04      	ldr	r3, [sp, #16]
 801ad38:	3301      	adds	r3, #1
 801ad3a:	9304      	str	r3, [sp, #16]
 801ad3c:	e775      	b.n	801ac2a <_dtoa_r+0xa0a>
 801ad3e:	f000 f9c3 	bl	801b0c8 <__multadd>
 801ad42:	4639      	mov	r1, r7
 801ad44:	4680      	mov	r8, r0
 801ad46:	2300      	movs	r3, #0
 801ad48:	220a      	movs	r2, #10
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	f000 f9bc 	bl	801b0c8 <__multadd>
 801ad50:	4607      	mov	r7, r0
 801ad52:	e7f0      	b.n	801ad36 <_dtoa_r+0xb16>
 801ad54:	9b04      	ldr	r3, [sp, #16]
 801ad56:	9301      	str	r3, [sp, #4]
 801ad58:	9d00      	ldr	r5, [sp, #0]
 801ad5a:	4631      	mov	r1, r6
 801ad5c:	4650      	mov	r0, sl
 801ad5e:	f7ff f9d7 	bl	801a110 <quorem>
 801ad62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ad66:	9b00      	ldr	r3, [sp, #0]
 801ad68:	f805 9b01 	strb.w	r9, [r5], #1
 801ad6c:	1aea      	subs	r2, r5, r3
 801ad6e:	9b01      	ldr	r3, [sp, #4]
 801ad70:	4293      	cmp	r3, r2
 801ad72:	dd07      	ble.n	801ad84 <_dtoa_r+0xb64>
 801ad74:	4651      	mov	r1, sl
 801ad76:	2300      	movs	r3, #0
 801ad78:	220a      	movs	r2, #10
 801ad7a:	4620      	mov	r0, r4
 801ad7c:	f000 f9a4 	bl	801b0c8 <__multadd>
 801ad80:	4682      	mov	sl, r0
 801ad82:	e7ea      	b.n	801ad5a <_dtoa_r+0xb3a>
 801ad84:	9b01      	ldr	r3, [sp, #4]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	bfc8      	it	gt
 801ad8a:	461d      	movgt	r5, r3
 801ad8c:	9b00      	ldr	r3, [sp, #0]
 801ad8e:	bfd8      	it	le
 801ad90:	2501      	movle	r5, #1
 801ad92:	441d      	add	r5, r3
 801ad94:	f04f 0800 	mov.w	r8, #0
 801ad98:	4651      	mov	r1, sl
 801ad9a:	2201      	movs	r2, #1
 801ad9c:	4620      	mov	r0, r4
 801ad9e:	f000 fb8b 	bl	801b4b8 <__lshift>
 801ada2:	4631      	mov	r1, r6
 801ada4:	4682      	mov	sl, r0
 801ada6:	f000 fbf3 	bl	801b590 <__mcmp>
 801adaa:	2800      	cmp	r0, #0
 801adac:	dc96      	bgt.n	801acdc <_dtoa_r+0xabc>
 801adae:	d102      	bne.n	801adb6 <_dtoa_r+0xb96>
 801adb0:	f019 0f01 	tst.w	r9, #1
 801adb4:	d192      	bne.n	801acdc <_dtoa_r+0xabc>
 801adb6:	462b      	mov	r3, r5
 801adb8:	461d      	mov	r5, r3
 801adba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801adbe:	2a30      	cmp	r2, #48	; 0x30
 801adc0:	d0fa      	beq.n	801adb8 <_dtoa_r+0xb98>
 801adc2:	e6dd      	b.n	801ab80 <_dtoa_r+0x960>
 801adc4:	9a00      	ldr	r2, [sp, #0]
 801adc6:	429a      	cmp	r2, r3
 801adc8:	d189      	bne.n	801acde <_dtoa_r+0xabe>
 801adca:	f10b 0b01 	add.w	fp, fp, #1
 801adce:	2331      	movs	r3, #49	; 0x31
 801add0:	e796      	b.n	801ad00 <_dtoa_r+0xae0>
 801add2:	4b0a      	ldr	r3, [pc, #40]	; (801adfc <_dtoa_r+0xbdc>)
 801add4:	f7ff ba99 	b.w	801a30a <_dtoa_r+0xea>
 801add8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801adda:	2b00      	cmp	r3, #0
 801addc:	f47f aa6d 	bne.w	801a2ba <_dtoa_r+0x9a>
 801ade0:	4b07      	ldr	r3, [pc, #28]	; (801ae00 <_dtoa_r+0xbe0>)
 801ade2:	f7ff ba92 	b.w	801a30a <_dtoa_r+0xea>
 801ade6:	9b01      	ldr	r3, [sp, #4]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	dcb5      	bgt.n	801ad58 <_dtoa_r+0xb38>
 801adec:	9b07      	ldr	r3, [sp, #28]
 801adee:	2b02      	cmp	r3, #2
 801adf0:	f73f aeb1 	bgt.w	801ab56 <_dtoa_r+0x936>
 801adf4:	e7b0      	b.n	801ad58 <_dtoa_r+0xb38>
 801adf6:	bf00      	nop
 801adf8:	0801fd3d 	.word	0x0801fd3d
 801adfc:	0801fc98 	.word	0x0801fc98
 801ae00:	0801fcc1 	.word	0x0801fcc1

0801ae04 <_free_r>:
 801ae04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae06:	2900      	cmp	r1, #0
 801ae08:	d044      	beq.n	801ae94 <_free_r+0x90>
 801ae0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae0e:	9001      	str	r0, [sp, #4]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	f1a1 0404 	sub.w	r4, r1, #4
 801ae16:	bfb8      	it	lt
 801ae18:	18e4      	addlt	r4, r4, r3
 801ae1a:	f000 f8e7 	bl	801afec <__malloc_lock>
 801ae1e:	4a1e      	ldr	r2, [pc, #120]	; (801ae98 <_free_r+0x94>)
 801ae20:	9801      	ldr	r0, [sp, #4]
 801ae22:	6813      	ldr	r3, [r2, #0]
 801ae24:	b933      	cbnz	r3, 801ae34 <_free_r+0x30>
 801ae26:	6063      	str	r3, [r4, #4]
 801ae28:	6014      	str	r4, [r2, #0]
 801ae2a:	b003      	add	sp, #12
 801ae2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae30:	f000 b8e2 	b.w	801aff8 <__malloc_unlock>
 801ae34:	42a3      	cmp	r3, r4
 801ae36:	d908      	bls.n	801ae4a <_free_r+0x46>
 801ae38:	6825      	ldr	r5, [r4, #0]
 801ae3a:	1961      	adds	r1, r4, r5
 801ae3c:	428b      	cmp	r3, r1
 801ae3e:	bf01      	itttt	eq
 801ae40:	6819      	ldreq	r1, [r3, #0]
 801ae42:	685b      	ldreq	r3, [r3, #4]
 801ae44:	1949      	addeq	r1, r1, r5
 801ae46:	6021      	streq	r1, [r4, #0]
 801ae48:	e7ed      	b.n	801ae26 <_free_r+0x22>
 801ae4a:	461a      	mov	r2, r3
 801ae4c:	685b      	ldr	r3, [r3, #4]
 801ae4e:	b10b      	cbz	r3, 801ae54 <_free_r+0x50>
 801ae50:	42a3      	cmp	r3, r4
 801ae52:	d9fa      	bls.n	801ae4a <_free_r+0x46>
 801ae54:	6811      	ldr	r1, [r2, #0]
 801ae56:	1855      	adds	r5, r2, r1
 801ae58:	42a5      	cmp	r5, r4
 801ae5a:	d10b      	bne.n	801ae74 <_free_r+0x70>
 801ae5c:	6824      	ldr	r4, [r4, #0]
 801ae5e:	4421      	add	r1, r4
 801ae60:	1854      	adds	r4, r2, r1
 801ae62:	42a3      	cmp	r3, r4
 801ae64:	6011      	str	r1, [r2, #0]
 801ae66:	d1e0      	bne.n	801ae2a <_free_r+0x26>
 801ae68:	681c      	ldr	r4, [r3, #0]
 801ae6a:	685b      	ldr	r3, [r3, #4]
 801ae6c:	6053      	str	r3, [r2, #4]
 801ae6e:	440c      	add	r4, r1
 801ae70:	6014      	str	r4, [r2, #0]
 801ae72:	e7da      	b.n	801ae2a <_free_r+0x26>
 801ae74:	d902      	bls.n	801ae7c <_free_r+0x78>
 801ae76:	230c      	movs	r3, #12
 801ae78:	6003      	str	r3, [r0, #0]
 801ae7a:	e7d6      	b.n	801ae2a <_free_r+0x26>
 801ae7c:	6825      	ldr	r5, [r4, #0]
 801ae7e:	1961      	adds	r1, r4, r5
 801ae80:	428b      	cmp	r3, r1
 801ae82:	bf04      	itt	eq
 801ae84:	6819      	ldreq	r1, [r3, #0]
 801ae86:	685b      	ldreq	r3, [r3, #4]
 801ae88:	6063      	str	r3, [r4, #4]
 801ae8a:	bf04      	itt	eq
 801ae8c:	1949      	addeq	r1, r1, r5
 801ae8e:	6021      	streq	r1, [r4, #0]
 801ae90:	6054      	str	r4, [r2, #4]
 801ae92:	e7ca      	b.n	801ae2a <_free_r+0x26>
 801ae94:	b003      	add	sp, #12
 801ae96:	bd30      	pop	{r4, r5, pc}
 801ae98:	2000e670 	.word	0x2000e670

0801ae9c <malloc>:
 801ae9c:	4b02      	ldr	r3, [pc, #8]	; (801aea8 <malloc+0xc>)
 801ae9e:	4601      	mov	r1, r0
 801aea0:	6818      	ldr	r0, [r3, #0]
 801aea2:	f000 b823 	b.w	801aeec <_malloc_r>
 801aea6:	bf00      	nop
 801aea8:	20000164 	.word	0x20000164

0801aeac <sbrk_aligned>:
 801aeac:	b570      	push	{r4, r5, r6, lr}
 801aeae:	4e0e      	ldr	r6, [pc, #56]	; (801aee8 <sbrk_aligned+0x3c>)
 801aeb0:	460c      	mov	r4, r1
 801aeb2:	6831      	ldr	r1, [r6, #0]
 801aeb4:	4605      	mov	r5, r0
 801aeb6:	b911      	cbnz	r1, 801aebe <sbrk_aligned+0x12>
 801aeb8:	f001 fe1a 	bl	801caf0 <_sbrk_r>
 801aebc:	6030      	str	r0, [r6, #0]
 801aebe:	4621      	mov	r1, r4
 801aec0:	4628      	mov	r0, r5
 801aec2:	f001 fe15 	bl	801caf0 <_sbrk_r>
 801aec6:	1c43      	adds	r3, r0, #1
 801aec8:	d00a      	beq.n	801aee0 <sbrk_aligned+0x34>
 801aeca:	1cc4      	adds	r4, r0, #3
 801aecc:	f024 0403 	bic.w	r4, r4, #3
 801aed0:	42a0      	cmp	r0, r4
 801aed2:	d007      	beq.n	801aee4 <sbrk_aligned+0x38>
 801aed4:	1a21      	subs	r1, r4, r0
 801aed6:	4628      	mov	r0, r5
 801aed8:	f001 fe0a 	bl	801caf0 <_sbrk_r>
 801aedc:	3001      	adds	r0, #1
 801aede:	d101      	bne.n	801aee4 <sbrk_aligned+0x38>
 801aee0:	f04f 34ff 	mov.w	r4, #4294967295
 801aee4:	4620      	mov	r0, r4
 801aee6:	bd70      	pop	{r4, r5, r6, pc}
 801aee8:	2000e674 	.word	0x2000e674

0801aeec <_malloc_r>:
 801aeec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aef0:	1ccd      	adds	r5, r1, #3
 801aef2:	f025 0503 	bic.w	r5, r5, #3
 801aef6:	3508      	adds	r5, #8
 801aef8:	2d0c      	cmp	r5, #12
 801aefa:	bf38      	it	cc
 801aefc:	250c      	movcc	r5, #12
 801aefe:	2d00      	cmp	r5, #0
 801af00:	4607      	mov	r7, r0
 801af02:	db01      	blt.n	801af08 <_malloc_r+0x1c>
 801af04:	42a9      	cmp	r1, r5
 801af06:	d905      	bls.n	801af14 <_malloc_r+0x28>
 801af08:	230c      	movs	r3, #12
 801af0a:	603b      	str	r3, [r7, #0]
 801af0c:	2600      	movs	r6, #0
 801af0e:	4630      	mov	r0, r6
 801af10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801afe8 <_malloc_r+0xfc>
 801af18:	f000 f868 	bl	801afec <__malloc_lock>
 801af1c:	f8d8 3000 	ldr.w	r3, [r8]
 801af20:	461c      	mov	r4, r3
 801af22:	bb5c      	cbnz	r4, 801af7c <_malloc_r+0x90>
 801af24:	4629      	mov	r1, r5
 801af26:	4638      	mov	r0, r7
 801af28:	f7ff ffc0 	bl	801aeac <sbrk_aligned>
 801af2c:	1c43      	adds	r3, r0, #1
 801af2e:	4604      	mov	r4, r0
 801af30:	d155      	bne.n	801afde <_malloc_r+0xf2>
 801af32:	f8d8 4000 	ldr.w	r4, [r8]
 801af36:	4626      	mov	r6, r4
 801af38:	2e00      	cmp	r6, #0
 801af3a:	d145      	bne.n	801afc8 <_malloc_r+0xdc>
 801af3c:	2c00      	cmp	r4, #0
 801af3e:	d048      	beq.n	801afd2 <_malloc_r+0xe6>
 801af40:	6823      	ldr	r3, [r4, #0]
 801af42:	4631      	mov	r1, r6
 801af44:	4638      	mov	r0, r7
 801af46:	eb04 0903 	add.w	r9, r4, r3
 801af4a:	f001 fdd1 	bl	801caf0 <_sbrk_r>
 801af4e:	4581      	cmp	r9, r0
 801af50:	d13f      	bne.n	801afd2 <_malloc_r+0xe6>
 801af52:	6821      	ldr	r1, [r4, #0]
 801af54:	1a6d      	subs	r5, r5, r1
 801af56:	4629      	mov	r1, r5
 801af58:	4638      	mov	r0, r7
 801af5a:	f7ff ffa7 	bl	801aeac <sbrk_aligned>
 801af5e:	3001      	adds	r0, #1
 801af60:	d037      	beq.n	801afd2 <_malloc_r+0xe6>
 801af62:	6823      	ldr	r3, [r4, #0]
 801af64:	442b      	add	r3, r5
 801af66:	6023      	str	r3, [r4, #0]
 801af68:	f8d8 3000 	ldr.w	r3, [r8]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d038      	beq.n	801afe2 <_malloc_r+0xf6>
 801af70:	685a      	ldr	r2, [r3, #4]
 801af72:	42a2      	cmp	r2, r4
 801af74:	d12b      	bne.n	801afce <_malloc_r+0xe2>
 801af76:	2200      	movs	r2, #0
 801af78:	605a      	str	r2, [r3, #4]
 801af7a:	e00f      	b.n	801af9c <_malloc_r+0xb0>
 801af7c:	6822      	ldr	r2, [r4, #0]
 801af7e:	1b52      	subs	r2, r2, r5
 801af80:	d41f      	bmi.n	801afc2 <_malloc_r+0xd6>
 801af82:	2a0b      	cmp	r2, #11
 801af84:	d917      	bls.n	801afb6 <_malloc_r+0xca>
 801af86:	1961      	adds	r1, r4, r5
 801af88:	42a3      	cmp	r3, r4
 801af8a:	6025      	str	r5, [r4, #0]
 801af8c:	bf18      	it	ne
 801af8e:	6059      	strne	r1, [r3, #4]
 801af90:	6863      	ldr	r3, [r4, #4]
 801af92:	bf08      	it	eq
 801af94:	f8c8 1000 	streq.w	r1, [r8]
 801af98:	5162      	str	r2, [r4, r5]
 801af9a:	604b      	str	r3, [r1, #4]
 801af9c:	4638      	mov	r0, r7
 801af9e:	f104 060b 	add.w	r6, r4, #11
 801afa2:	f000 f829 	bl	801aff8 <__malloc_unlock>
 801afa6:	f026 0607 	bic.w	r6, r6, #7
 801afaa:	1d23      	adds	r3, r4, #4
 801afac:	1af2      	subs	r2, r6, r3
 801afae:	d0ae      	beq.n	801af0e <_malloc_r+0x22>
 801afb0:	1b9b      	subs	r3, r3, r6
 801afb2:	50a3      	str	r3, [r4, r2]
 801afb4:	e7ab      	b.n	801af0e <_malloc_r+0x22>
 801afb6:	42a3      	cmp	r3, r4
 801afb8:	6862      	ldr	r2, [r4, #4]
 801afba:	d1dd      	bne.n	801af78 <_malloc_r+0x8c>
 801afbc:	f8c8 2000 	str.w	r2, [r8]
 801afc0:	e7ec      	b.n	801af9c <_malloc_r+0xb0>
 801afc2:	4623      	mov	r3, r4
 801afc4:	6864      	ldr	r4, [r4, #4]
 801afc6:	e7ac      	b.n	801af22 <_malloc_r+0x36>
 801afc8:	4634      	mov	r4, r6
 801afca:	6876      	ldr	r6, [r6, #4]
 801afcc:	e7b4      	b.n	801af38 <_malloc_r+0x4c>
 801afce:	4613      	mov	r3, r2
 801afd0:	e7cc      	b.n	801af6c <_malloc_r+0x80>
 801afd2:	230c      	movs	r3, #12
 801afd4:	603b      	str	r3, [r7, #0]
 801afd6:	4638      	mov	r0, r7
 801afd8:	f000 f80e 	bl	801aff8 <__malloc_unlock>
 801afdc:	e797      	b.n	801af0e <_malloc_r+0x22>
 801afde:	6025      	str	r5, [r4, #0]
 801afe0:	e7dc      	b.n	801af9c <_malloc_r+0xb0>
 801afe2:	605b      	str	r3, [r3, #4]
 801afe4:	deff      	udf	#255	; 0xff
 801afe6:	bf00      	nop
 801afe8:	2000e670 	.word	0x2000e670

0801afec <__malloc_lock>:
 801afec:	4801      	ldr	r0, [pc, #4]	; (801aff4 <__malloc_lock+0x8>)
 801afee:	f7ff b879 	b.w	801a0e4 <__retarget_lock_acquire_recursive>
 801aff2:	bf00      	nop
 801aff4:	2000e66c 	.word	0x2000e66c

0801aff8 <__malloc_unlock>:
 801aff8:	4801      	ldr	r0, [pc, #4]	; (801b000 <__malloc_unlock+0x8>)
 801affa:	f7ff b874 	b.w	801a0e6 <__retarget_lock_release_recursive>
 801affe:	bf00      	nop
 801b000:	2000e66c 	.word	0x2000e66c

0801b004 <_Balloc>:
 801b004:	b570      	push	{r4, r5, r6, lr}
 801b006:	69c6      	ldr	r6, [r0, #28]
 801b008:	4604      	mov	r4, r0
 801b00a:	460d      	mov	r5, r1
 801b00c:	b976      	cbnz	r6, 801b02c <_Balloc+0x28>
 801b00e:	2010      	movs	r0, #16
 801b010:	f7ff ff44 	bl	801ae9c <malloc>
 801b014:	4602      	mov	r2, r0
 801b016:	61e0      	str	r0, [r4, #28]
 801b018:	b920      	cbnz	r0, 801b024 <_Balloc+0x20>
 801b01a:	4b18      	ldr	r3, [pc, #96]	; (801b07c <_Balloc+0x78>)
 801b01c:	4818      	ldr	r0, [pc, #96]	; (801b080 <_Balloc+0x7c>)
 801b01e:	216b      	movs	r1, #107	; 0x6b
 801b020:	f001 fd7e 	bl	801cb20 <__assert_func>
 801b024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b028:	6006      	str	r6, [r0, #0]
 801b02a:	60c6      	str	r6, [r0, #12]
 801b02c:	69e6      	ldr	r6, [r4, #28]
 801b02e:	68f3      	ldr	r3, [r6, #12]
 801b030:	b183      	cbz	r3, 801b054 <_Balloc+0x50>
 801b032:	69e3      	ldr	r3, [r4, #28]
 801b034:	68db      	ldr	r3, [r3, #12]
 801b036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b03a:	b9b8      	cbnz	r0, 801b06c <_Balloc+0x68>
 801b03c:	2101      	movs	r1, #1
 801b03e:	fa01 f605 	lsl.w	r6, r1, r5
 801b042:	1d72      	adds	r2, r6, #5
 801b044:	0092      	lsls	r2, r2, #2
 801b046:	4620      	mov	r0, r4
 801b048:	f001 fd88 	bl	801cb5c <_calloc_r>
 801b04c:	b160      	cbz	r0, 801b068 <_Balloc+0x64>
 801b04e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b052:	e00e      	b.n	801b072 <_Balloc+0x6e>
 801b054:	2221      	movs	r2, #33	; 0x21
 801b056:	2104      	movs	r1, #4
 801b058:	4620      	mov	r0, r4
 801b05a:	f001 fd7f 	bl	801cb5c <_calloc_r>
 801b05e:	69e3      	ldr	r3, [r4, #28]
 801b060:	60f0      	str	r0, [r6, #12]
 801b062:	68db      	ldr	r3, [r3, #12]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d1e4      	bne.n	801b032 <_Balloc+0x2e>
 801b068:	2000      	movs	r0, #0
 801b06a:	bd70      	pop	{r4, r5, r6, pc}
 801b06c:	6802      	ldr	r2, [r0, #0]
 801b06e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b072:	2300      	movs	r3, #0
 801b074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b078:	e7f7      	b.n	801b06a <_Balloc+0x66>
 801b07a:	bf00      	nop
 801b07c:	0801fcce 	.word	0x0801fcce
 801b080:	0801fd4e 	.word	0x0801fd4e

0801b084 <_Bfree>:
 801b084:	b570      	push	{r4, r5, r6, lr}
 801b086:	69c6      	ldr	r6, [r0, #28]
 801b088:	4605      	mov	r5, r0
 801b08a:	460c      	mov	r4, r1
 801b08c:	b976      	cbnz	r6, 801b0ac <_Bfree+0x28>
 801b08e:	2010      	movs	r0, #16
 801b090:	f7ff ff04 	bl	801ae9c <malloc>
 801b094:	4602      	mov	r2, r0
 801b096:	61e8      	str	r0, [r5, #28]
 801b098:	b920      	cbnz	r0, 801b0a4 <_Bfree+0x20>
 801b09a:	4b09      	ldr	r3, [pc, #36]	; (801b0c0 <_Bfree+0x3c>)
 801b09c:	4809      	ldr	r0, [pc, #36]	; (801b0c4 <_Bfree+0x40>)
 801b09e:	218f      	movs	r1, #143	; 0x8f
 801b0a0:	f001 fd3e 	bl	801cb20 <__assert_func>
 801b0a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b0a8:	6006      	str	r6, [r0, #0]
 801b0aa:	60c6      	str	r6, [r0, #12]
 801b0ac:	b13c      	cbz	r4, 801b0be <_Bfree+0x3a>
 801b0ae:	69eb      	ldr	r3, [r5, #28]
 801b0b0:	6862      	ldr	r2, [r4, #4]
 801b0b2:	68db      	ldr	r3, [r3, #12]
 801b0b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b0b8:	6021      	str	r1, [r4, #0]
 801b0ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b0be:	bd70      	pop	{r4, r5, r6, pc}
 801b0c0:	0801fcce 	.word	0x0801fcce
 801b0c4:	0801fd4e 	.word	0x0801fd4e

0801b0c8 <__multadd>:
 801b0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0cc:	690d      	ldr	r5, [r1, #16]
 801b0ce:	4607      	mov	r7, r0
 801b0d0:	460c      	mov	r4, r1
 801b0d2:	461e      	mov	r6, r3
 801b0d4:	f101 0c14 	add.w	ip, r1, #20
 801b0d8:	2000      	movs	r0, #0
 801b0da:	f8dc 3000 	ldr.w	r3, [ip]
 801b0de:	b299      	uxth	r1, r3
 801b0e0:	fb02 6101 	mla	r1, r2, r1, r6
 801b0e4:	0c1e      	lsrs	r6, r3, #16
 801b0e6:	0c0b      	lsrs	r3, r1, #16
 801b0e8:	fb02 3306 	mla	r3, r2, r6, r3
 801b0ec:	b289      	uxth	r1, r1
 801b0ee:	3001      	adds	r0, #1
 801b0f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b0f4:	4285      	cmp	r5, r0
 801b0f6:	f84c 1b04 	str.w	r1, [ip], #4
 801b0fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b0fe:	dcec      	bgt.n	801b0da <__multadd+0x12>
 801b100:	b30e      	cbz	r6, 801b146 <__multadd+0x7e>
 801b102:	68a3      	ldr	r3, [r4, #8]
 801b104:	42ab      	cmp	r3, r5
 801b106:	dc19      	bgt.n	801b13c <__multadd+0x74>
 801b108:	6861      	ldr	r1, [r4, #4]
 801b10a:	4638      	mov	r0, r7
 801b10c:	3101      	adds	r1, #1
 801b10e:	f7ff ff79 	bl	801b004 <_Balloc>
 801b112:	4680      	mov	r8, r0
 801b114:	b928      	cbnz	r0, 801b122 <__multadd+0x5a>
 801b116:	4602      	mov	r2, r0
 801b118:	4b0c      	ldr	r3, [pc, #48]	; (801b14c <__multadd+0x84>)
 801b11a:	480d      	ldr	r0, [pc, #52]	; (801b150 <__multadd+0x88>)
 801b11c:	21ba      	movs	r1, #186	; 0xba
 801b11e:	f001 fcff 	bl	801cb20 <__assert_func>
 801b122:	6922      	ldr	r2, [r4, #16]
 801b124:	3202      	adds	r2, #2
 801b126:	f104 010c 	add.w	r1, r4, #12
 801b12a:	0092      	lsls	r2, r2, #2
 801b12c:	300c      	adds	r0, #12
 801b12e:	f7fe ffdb 	bl	801a0e8 <memcpy>
 801b132:	4621      	mov	r1, r4
 801b134:	4638      	mov	r0, r7
 801b136:	f7ff ffa5 	bl	801b084 <_Bfree>
 801b13a:	4644      	mov	r4, r8
 801b13c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b140:	3501      	adds	r5, #1
 801b142:	615e      	str	r6, [r3, #20]
 801b144:	6125      	str	r5, [r4, #16]
 801b146:	4620      	mov	r0, r4
 801b148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b14c:	0801fd3d 	.word	0x0801fd3d
 801b150:	0801fd4e 	.word	0x0801fd4e

0801b154 <__s2b>:
 801b154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b158:	460c      	mov	r4, r1
 801b15a:	4615      	mov	r5, r2
 801b15c:	461f      	mov	r7, r3
 801b15e:	2209      	movs	r2, #9
 801b160:	3308      	adds	r3, #8
 801b162:	4606      	mov	r6, r0
 801b164:	fb93 f3f2 	sdiv	r3, r3, r2
 801b168:	2100      	movs	r1, #0
 801b16a:	2201      	movs	r2, #1
 801b16c:	429a      	cmp	r2, r3
 801b16e:	db09      	blt.n	801b184 <__s2b+0x30>
 801b170:	4630      	mov	r0, r6
 801b172:	f7ff ff47 	bl	801b004 <_Balloc>
 801b176:	b940      	cbnz	r0, 801b18a <__s2b+0x36>
 801b178:	4602      	mov	r2, r0
 801b17a:	4b19      	ldr	r3, [pc, #100]	; (801b1e0 <__s2b+0x8c>)
 801b17c:	4819      	ldr	r0, [pc, #100]	; (801b1e4 <__s2b+0x90>)
 801b17e:	21d3      	movs	r1, #211	; 0xd3
 801b180:	f001 fcce 	bl	801cb20 <__assert_func>
 801b184:	0052      	lsls	r2, r2, #1
 801b186:	3101      	adds	r1, #1
 801b188:	e7f0      	b.n	801b16c <__s2b+0x18>
 801b18a:	9b08      	ldr	r3, [sp, #32]
 801b18c:	6143      	str	r3, [r0, #20]
 801b18e:	2d09      	cmp	r5, #9
 801b190:	f04f 0301 	mov.w	r3, #1
 801b194:	6103      	str	r3, [r0, #16]
 801b196:	dd16      	ble.n	801b1c6 <__s2b+0x72>
 801b198:	f104 0909 	add.w	r9, r4, #9
 801b19c:	46c8      	mov	r8, r9
 801b19e:	442c      	add	r4, r5
 801b1a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b1a4:	4601      	mov	r1, r0
 801b1a6:	3b30      	subs	r3, #48	; 0x30
 801b1a8:	220a      	movs	r2, #10
 801b1aa:	4630      	mov	r0, r6
 801b1ac:	f7ff ff8c 	bl	801b0c8 <__multadd>
 801b1b0:	45a0      	cmp	r8, r4
 801b1b2:	d1f5      	bne.n	801b1a0 <__s2b+0x4c>
 801b1b4:	f1a5 0408 	sub.w	r4, r5, #8
 801b1b8:	444c      	add	r4, r9
 801b1ba:	1b2d      	subs	r5, r5, r4
 801b1bc:	1963      	adds	r3, r4, r5
 801b1be:	42bb      	cmp	r3, r7
 801b1c0:	db04      	blt.n	801b1cc <__s2b+0x78>
 801b1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1c6:	340a      	adds	r4, #10
 801b1c8:	2509      	movs	r5, #9
 801b1ca:	e7f6      	b.n	801b1ba <__s2b+0x66>
 801b1cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b1d0:	4601      	mov	r1, r0
 801b1d2:	3b30      	subs	r3, #48	; 0x30
 801b1d4:	220a      	movs	r2, #10
 801b1d6:	4630      	mov	r0, r6
 801b1d8:	f7ff ff76 	bl	801b0c8 <__multadd>
 801b1dc:	e7ee      	b.n	801b1bc <__s2b+0x68>
 801b1de:	bf00      	nop
 801b1e0:	0801fd3d 	.word	0x0801fd3d
 801b1e4:	0801fd4e 	.word	0x0801fd4e

0801b1e8 <__hi0bits>:
 801b1e8:	0c03      	lsrs	r3, r0, #16
 801b1ea:	041b      	lsls	r3, r3, #16
 801b1ec:	b9d3      	cbnz	r3, 801b224 <__hi0bits+0x3c>
 801b1ee:	0400      	lsls	r0, r0, #16
 801b1f0:	2310      	movs	r3, #16
 801b1f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b1f6:	bf04      	itt	eq
 801b1f8:	0200      	lsleq	r0, r0, #8
 801b1fa:	3308      	addeq	r3, #8
 801b1fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b200:	bf04      	itt	eq
 801b202:	0100      	lsleq	r0, r0, #4
 801b204:	3304      	addeq	r3, #4
 801b206:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b20a:	bf04      	itt	eq
 801b20c:	0080      	lsleq	r0, r0, #2
 801b20e:	3302      	addeq	r3, #2
 801b210:	2800      	cmp	r0, #0
 801b212:	db05      	blt.n	801b220 <__hi0bits+0x38>
 801b214:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b218:	f103 0301 	add.w	r3, r3, #1
 801b21c:	bf08      	it	eq
 801b21e:	2320      	moveq	r3, #32
 801b220:	4618      	mov	r0, r3
 801b222:	4770      	bx	lr
 801b224:	2300      	movs	r3, #0
 801b226:	e7e4      	b.n	801b1f2 <__hi0bits+0xa>

0801b228 <__lo0bits>:
 801b228:	6803      	ldr	r3, [r0, #0]
 801b22a:	f013 0207 	ands.w	r2, r3, #7
 801b22e:	d00c      	beq.n	801b24a <__lo0bits+0x22>
 801b230:	07d9      	lsls	r1, r3, #31
 801b232:	d422      	bmi.n	801b27a <__lo0bits+0x52>
 801b234:	079a      	lsls	r2, r3, #30
 801b236:	bf49      	itett	mi
 801b238:	085b      	lsrmi	r3, r3, #1
 801b23a:	089b      	lsrpl	r3, r3, #2
 801b23c:	6003      	strmi	r3, [r0, #0]
 801b23e:	2201      	movmi	r2, #1
 801b240:	bf5c      	itt	pl
 801b242:	6003      	strpl	r3, [r0, #0]
 801b244:	2202      	movpl	r2, #2
 801b246:	4610      	mov	r0, r2
 801b248:	4770      	bx	lr
 801b24a:	b299      	uxth	r1, r3
 801b24c:	b909      	cbnz	r1, 801b252 <__lo0bits+0x2a>
 801b24e:	0c1b      	lsrs	r3, r3, #16
 801b250:	2210      	movs	r2, #16
 801b252:	b2d9      	uxtb	r1, r3
 801b254:	b909      	cbnz	r1, 801b25a <__lo0bits+0x32>
 801b256:	3208      	adds	r2, #8
 801b258:	0a1b      	lsrs	r3, r3, #8
 801b25a:	0719      	lsls	r1, r3, #28
 801b25c:	bf04      	itt	eq
 801b25e:	091b      	lsreq	r3, r3, #4
 801b260:	3204      	addeq	r2, #4
 801b262:	0799      	lsls	r1, r3, #30
 801b264:	bf04      	itt	eq
 801b266:	089b      	lsreq	r3, r3, #2
 801b268:	3202      	addeq	r2, #2
 801b26a:	07d9      	lsls	r1, r3, #31
 801b26c:	d403      	bmi.n	801b276 <__lo0bits+0x4e>
 801b26e:	085b      	lsrs	r3, r3, #1
 801b270:	f102 0201 	add.w	r2, r2, #1
 801b274:	d003      	beq.n	801b27e <__lo0bits+0x56>
 801b276:	6003      	str	r3, [r0, #0]
 801b278:	e7e5      	b.n	801b246 <__lo0bits+0x1e>
 801b27a:	2200      	movs	r2, #0
 801b27c:	e7e3      	b.n	801b246 <__lo0bits+0x1e>
 801b27e:	2220      	movs	r2, #32
 801b280:	e7e1      	b.n	801b246 <__lo0bits+0x1e>
	...

0801b284 <__i2b>:
 801b284:	b510      	push	{r4, lr}
 801b286:	460c      	mov	r4, r1
 801b288:	2101      	movs	r1, #1
 801b28a:	f7ff febb 	bl	801b004 <_Balloc>
 801b28e:	4602      	mov	r2, r0
 801b290:	b928      	cbnz	r0, 801b29e <__i2b+0x1a>
 801b292:	4b05      	ldr	r3, [pc, #20]	; (801b2a8 <__i2b+0x24>)
 801b294:	4805      	ldr	r0, [pc, #20]	; (801b2ac <__i2b+0x28>)
 801b296:	f240 1145 	movw	r1, #325	; 0x145
 801b29a:	f001 fc41 	bl	801cb20 <__assert_func>
 801b29e:	2301      	movs	r3, #1
 801b2a0:	6144      	str	r4, [r0, #20]
 801b2a2:	6103      	str	r3, [r0, #16]
 801b2a4:	bd10      	pop	{r4, pc}
 801b2a6:	bf00      	nop
 801b2a8:	0801fd3d 	.word	0x0801fd3d
 801b2ac:	0801fd4e 	.word	0x0801fd4e

0801b2b0 <__multiply>:
 801b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2b4:	4691      	mov	r9, r2
 801b2b6:	690a      	ldr	r2, [r1, #16]
 801b2b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b2bc:	429a      	cmp	r2, r3
 801b2be:	bfb8      	it	lt
 801b2c0:	460b      	movlt	r3, r1
 801b2c2:	460c      	mov	r4, r1
 801b2c4:	bfbc      	itt	lt
 801b2c6:	464c      	movlt	r4, r9
 801b2c8:	4699      	movlt	r9, r3
 801b2ca:	6927      	ldr	r7, [r4, #16]
 801b2cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b2d0:	68a3      	ldr	r3, [r4, #8]
 801b2d2:	6861      	ldr	r1, [r4, #4]
 801b2d4:	eb07 060a 	add.w	r6, r7, sl
 801b2d8:	42b3      	cmp	r3, r6
 801b2da:	b085      	sub	sp, #20
 801b2dc:	bfb8      	it	lt
 801b2de:	3101      	addlt	r1, #1
 801b2e0:	f7ff fe90 	bl	801b004 <_Balloc>
 801b2e4:	b930      	cbnz	r0, 801b2f4 <__multiply+0x44>
 801b2e6:	4602      	mov	r2, r0
 801b2e8:	4b44      	ldr	r3, [pc, #272]	; (801b3fc <__multiply+0x14c>)
 801b2ea:	4845      	ldr	r0, [pc, #276]	; (801b400 <__multiply+0x150>)
 801b2ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801b2f0:	f001 fc16 	bl	801cb20 <__assert_func>
 801b2f4:	f100 0514 	add.w	r5, r0, #20
 801b2f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b2fc:	462b      	mov	r3, r5
 801b2fe:	2200      	movs	r2, #0
 801b300:	4543      	cmp	r3, r8
 801b302:	d321      	bcc.n	801b348 <__multiply+0x98>
 801b304:	f104 0314 	add.w	r3, r4, #20
 801b308:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b30c:	f109 0314 	add.w	r3, r9, #20
 801b310:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b314:	9202      	str	r2, [sp, #8]
 801b316:	1b3a      	subs	r2, r7, r4
 801b318:	3a15      	subs	r2, #21
 801b31a:	f022 0203 	bic.w	r2, r2, #3
 801b31e:	3204      	adds	r2, #4
 801b320:	f104 0115 	add.w	r1, r4, #21
 801b324:	428f      	cmp	r7, r1
 801b326:	bf38      	it	cc
 801b328:	2204      	movcc	r2, #4
 801b32a:	9201      	str	r2, [sp, #4]
 801b32c:	9a02      	ldr	r2, [sp, #8]
 801b32e:	9303      	str	r3, [sp, #12]
 801b330:	429a      	cmp	r2, r3
 801b332:	d80c      	bhi.n	801b34e <__multiply+0x9e>
 801b334:	2e00      	cmp	r6, #0
 801b336:	dd03      	ble.n	801b340 <__multiply+0x90>
 801b338:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d05b      	beq.n	801b3f8 <__multiply+0x148>
 801b340:	6106      	str	r6, [r0, #16]
 801b342:	b005      	add	sp, #20
 801b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b348:	f843 2b04 	str.w	r2, [r3], #4
 801b34c:	e7d8      	b.n	801b300 <__multiply+0x50>
 801b34e:	f8b3 a000 	ldrh.w	sl, [r3]
 801b352:	f1ba 0f00 	cmp.w	sl, #0
 801b356:	d024      	beq.n	801b3a2 <__multiply+0xf2>
 801b358:	f104 0e14 	add.w	lr, r4, #20
 801b35c:	46a9      	mov	r9, r5
 801b35e:	f04f 0c00 	mov.w	ip, #0
 801b362:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b366:	f8d9 1000 	ldr.w	r1, [r9]
 801b36a:	fa1f fb82 	uxth.w	fp, r2
 801b36e:	b289      	uxth	r1, r1
 801b370:	fb0a 110b 	mla	r1, sl, fp, r1
 801b374:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b378:	f8d9 2000 	ldr.w	r2, [r9]
 801b37c:	4461      	add	r1, ip
 801b37e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b382:	fb0a c20b 	mla	r2, sl, fp, ip
 801b386:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b38a:	b289      	uxth	r1, r1
 801b38c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b390:	4577      	cmp	r7, lr
 801b392:	f849 1b04 	str.w	r1, [r9], #4
 801b396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b39a:	d8e2      	bhi.n	801b362 <__multiply+0xb2>
 801b39c:	9a01      	ldr	r2, [sp, #4]
 801b39e:	f845 c002 	str.w	ip, [r5, r2]
 801b3a2:	9a03      	ldr	r2, [sp, #12]
 801b3a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b3a8:	3304      	adds	r3, #4
 801b3aa:	f1b9 0f00 	cmp.w	r9, #0
 801b3ae:	d021      	beq.n	801b3f4 <__multiply+0x144>
 801b3b0:	6829      	ldr	r1, [r5, #0]
 801b3b2:	f104 0c14 	add.w	ip, r4, #20
 801b3b6:	46ae      	mov	lr, r5
 801b3b8:	f04f 0a00 	mov.w	sl, #0
 801b3bc:	f8bc b000 	ldrh.w	fp, [ip]
 801b3c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b3c4:	fb09 220b 	mla	r2, r9, fp, r2
 801b3c8:	4452      	add	r2, sl
 801b3ca:	b289      	uxth	r1, r1
 801b3cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b3d0:	f84e 1b04 	str.w	r1, [lr], #4
 801b3d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b3d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b3dc:	f8be 1000 	ldrh.w	r1, [lr]
 801b3e0:	fb09 110a 	mla	r1, r9, sl, r1
 801b3e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b3e8:	4567      	cmp	r7, ip
 801b3ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b3ee:	d8e5      	bhi.n	801b3bc <__multiply+0x10c>
 801b3f0:	9a01      	ldr	r2, [sp, #4]
 801b3f2:	50a9      	str	r1, [r5, r2]
 801b3f4:	3504      	adds	r5, #4
 801b3f6:	e799      	b.n	801b32c <__multiply+0x7c>
 801b3f8:	3e01      	subs	r6, #1
 801b3fa:	e79b      	b.n	801b334 <__multiply+0x84>
 801b3fc:	0801fd3d 	.word	0x0801fd3d
 801b400:	0801fd4e 	.word	0x0801fd4e

0801b404 <__pow5mult>:
 801b404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b408:	4615      	mov	r5, r2
 801b40a:	f012 0203 	ands.w	r2, r2, #3
 801b40e:	4606      	mov	r6, r0
 801b410:	460f      	mov	r7, r1
 801b412:	d007      	beq.n	801b424 <__pow5mult+0x20>
 801b414:	4c25      	ldr	r4, [pc, #148]	; (801b4ac <__pow5mult+0xa8>)
 801b416:	3a01      	subs	r2, #1
 801b418:	2300      	movs	r3, #0
 801b41a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b41e:	f7ff fe53 	bl	801b0c8 <__multadd>
 801b422:	4607      	mov	r7, r0
 801b424:	10ad      	asrs	r5, r5, #2
 801b426:	d03d      	beq.n	801b4a4 <__pow5mult+0xa0>
 801b428:	69f4      	ldr	r4, [r6, #28]
 801b42a:	b97c      	cbnz	r4, 801b44c <__pow5mult+0x48>
 801b42c:	2010      	movs	r0, #16
 801b42e:	f7ff fd35 	bl	801ae9c <malloc>
 801b432:	4602      	mov	r2, r0
 801b434:	61f0      	str	r0, [r6, #28]
 801b436:	b928      	cbnz	r0, 801b444 <__pow5mult+0x40>
 801b438:	4b1d      	ldr	r3, [pc, #116]	; (801b4b0 <__pow5mult+0xac>)
 801b43a:	481e      	ldr	r0, [pc, #120]	; (801b4b4 <__pow5mult+0xb0>)
 801b43c:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b440:	f001 fb6e 	bl	801cb20 <__assert_func>
 801b444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b448:	6004      	str	r4, [r0, #0]
 801b44a:	60c4      	str	r4, [r0, #12]
 801b44c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b454:	b94c      	cbnz	r4, 801b46a <__pow5mult+0x66>
 801b456:	f240 2171 	movw	r1, #625	; 0x271
 801b45a:	4630      	mov	r0, r6
 801b45c:	f7ff ff12 	bl	801b284 <__i2b>
 801b460:	2300      	movs	r3, #0
 801b462:	f8c8 0008 	str.w	r0, [r8, #8]
 801b466:	4604      	mov	r4, r0
 801b468:	6003      	str	r3, [r0, #0]
 801b46a:	f04f 0900 	mov.w	r9, #0
 801b46e:	07eb      	lsls	r3, r5, #31
 801b470:	d50a      	bpl.n	801b488 <__pow5mult+0x84>
 801b472:	4639      	mov	r1, r7
 801b474:	4622      	mov	r2, r4
 801b476:	4630      	mov	r0, r6
 801b478:	f7ff ff1a 	bl	801b2b0 <__multiply>
 801b47c:	4639      	mov	r1, r7
 801b47e:	4680      	mov	r8, r0
 801b480:	4630      	mov	r0, r6
 801b482:	f7ff fdff 	bl	801b084 <_Bfree>
 801b486:	4647      	mov	r7, r8
 801b488:	106d      	asrs	r5, r5, #1
 801b48a:	d00b      	beq.n	801b4a4 <__pow5mult+0xa0>
 801b48c:	6820      	ldr	r0, [r4, #0]
 801b48e:	b938      	cbnz	r0, 801b4a0 <__pow5mult+0x9c>
 801b490:	4622      	mov	r2, r4
 801b492:	4621      	mov	r1, r4
 801b494:	4630      	mov	r0, r6
 801b496:	f7ff ff0b 	bl	801b2b0 <__multiply>
 801b49a:	6020      	str	r0, [r4, #0]
 801b49c:	f8c0 9000 	str.w	r9, [r0]
 801b4a0:	4604      	mov	r4, r0
 801b4a2:	e7e4      	b.n	801b46e <__pow5mult+0x6a>
 801b4a4:	4638      	mov	r0, r7
 801b4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4aa:	bf00      	nop
 801b4ac:	0801fe98 	.word	0x0801fe98
 801b4b0:	0801fcce 	.word	0x0801fcce
 801b4b4:	0801fd4e 	.word	0x0801fd4e

0801b4b8 <__lshift>:
 801b4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4bc:	460c      	mov	r4, r1
 801b4be:	6849      	ldr	r1, [r1, #4]
 801b4c0:	6923      	ldr	r3, [r4, #16]
 801b4c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b4c6:	68a3      	ldr	r3, [r4, #8]
 801b4c8:	4607      	mov	r7, r0
 801b4ca:	4691      	mov	r9, r2
 801b4cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b4d0:	f108 0601 	add.w	r6, r8, #1
 801b4d4:	42b3      	cmp	r3, r6
 801b4d6:	db0b      	blt.n	801b4f0 <__lshift+0x38>
 801b4d8:	4638      	mov	r0, r7
 801b4da:	f7ff fd93 	bl	801b004 <_Balloc>
 801b4de:	4605      	mov	r5, r0
 801b4e0:	b948      	cbnz	r0, 801b4f6 <__lshift+0x3e>
 801b4e2:	4602      	mov	r2, r0
 801b4e4:	4b28      	ldr	r3, [pc, #160]	; (801b588 <__lshift+0xd0>)
 801b4e6:	4829      	ldr	r0, [pc, #164]	; (801b58c <__lshift+0xd4>)
 801b4e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b4ec:	f001 fb18 	bl	801cb20 <__assert_func>
 801b4f0:	3101      	adds	r1, #1
 801b4f2:	005b      	lsls	r3, r3, #1
 801b4f4:	e7ee      	b.n	801b4d4 <__lshift+0x1c>
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	f100 0114 	add.w	r1, r0, #20
 801b4fc:	f100 0210 	add.w	r2, r0, #16
 801b500:	4618      	mov	r0, r3
 801b502:	4553      	cmp	r3, sl
 801b504:	db33      	blt.n	801b56e <__lshift+0xb6>
 801b506:	6920      	ldr	r0, [r4, #16]
 801b508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b50c:	f104 0314 	add.w	r3, r4, #20
 801b510:	f019 091f 	ands.w	r9, r9, #31
 801b514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b518:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b51c:	d02b      	beq.n	801b576 <__lshift+0xbe>
 801b51e:	f1c9 0e20 	rsb	lr, r9, #32
 801b522:	468a      	mov	sl, r1
 801b524:	2200      	movs	r2, #0
 801b526:	6818      	ldr	r0, [r3, #0]
 801b528:	fa00 f009 	lsl.w	r0, r0, r9
 801b52c:	4310      	orrs	r0, r2
 801b52e:	f84a 0b04 	str.w	r0, [sl], #4
 801b532:	f853 2b04 	ldr.w	r2, [r3], #4
 801b536:	459c      	cmp	ip, r3
 801b538:	fa22 f20e 	lsr.w	r2, r2, lr
 801b53c:	d8f3      	bhi.n	801b526 <__lshift+0x6e>
 801b53e:	ebac 0304 	sub.w	r3, ip, r4
 801b542:	3b15      	subs	r3, #21
 801b544:	f023 0303 	bic.w	r3, r3, #3
 801b548:	3304      	adds	r3, #4
 801b54a:	f104 0015 	add.w	r0, r4, #21
 801b54e:	4584      	cmp	ip, r0
 801b550:	bf38      	it	cc
 801b552:	2304      	movcc	r3, #4
 801b554:	50ca      	str	r2, [r1, r3]
 801b556:	b10a      	cbz	r2, 801b55c <__lshift+0xa4>
 801b558:	f108 0602 	add.w	r6, r8, #2
 801b55c:	3e01      	subs	r6, #1
 801b55e:	4638      	mov	r0, r7
 801b560:	612e      	str	r6, [r5, #16]
 801b562:	4621      	mov	r1, r4
 801b564:	f7ff fd8e 	bl	801b084 <_Bfree>
 801b568:	4628      	mov	r0, r5
 801b56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b56e:	f842 0f04 	str.w	r0, [r2, #4]!
 801b572:	3301      	adds	r3, #1
 801b574:	e7c5      	b.n	801b502 <__lshift+0x4a>
 801b576:	3904      	subs	r1, #4
 801b578:	f853 2b04 	ldr.w	r2, [r3], #4
 801b57c:	f841 2f04 	str.w	r2, [r1, #4]!
 801b580:	459c      	cmp	ip, r3
 801b582:	d8f9      	bhi.n	801b578 <__lshift+0xc0>
 801b584:	e7ea      	b.n	801b55c <__lshift+0xa4>
 801b586:	bf00      	nop
 801b588:	0801fd3d 	.word	0x0801fd3d
 801b58c:	0801fd4e 	.word	0x0801fd4e

0801b590 <__mcmp>:
 801b590:	b530      	push	{r4, r5, lr}
 801b592:	6902      	ldr	r2, [r0, #16]
 801b594:	690c      	ldr	r4, [r1, #16]
 801b596:	1b12      	subs	r2, r2, r4
 801b598:	d10e      	bne.n	801b5b8 <__mcmp+0x28>
 801b59a:	f100 0314 	add.w	r3, r0, #20
 801b59e:	3114      	adds	r1, #20
 801b5a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b5a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b5a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b5ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b5b0:	42a5      	cmp	r5, r4
 801b5b2:	d003      	beq.n	801b5bc <__mcmp+0x2c>
 801b5b4:	d305      	bcc.n	801b5c2 <__mcmp+0x32>
 801b5b6:	2201      	movs	r2, #1
 801b5b8:	4610      	mov	r0, r2
 801b5ba:	bd30      	pop	{r4, r5, pc}
 801b5bc:	4283      	cmp	r3, r0
 801b5be:	d3f3      	bcc.n	801b5a8 <__mcmp+0x18>
 801b5c0:	e7fa      	b.n	801b5b8 <__mcmp+0x28>
 801b5c2:	f04f 32ff 	mov.w	r2, #4294967295
 801b5c6:	e7f7      	b.n	801b5b8 <__mcmp+0x28>

0801b5c8 <__mdiff>:
 801b5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5cc:	460c      	mov	r4, r1
 801b5ce:	4606      	mov	r6, r0
 801b5d0:	4611      	mov	r1, r2
 801b5d2:	4620      	mov	r0, r4
 801b5d4:	4690      	mov	r8, r2
 801b5d6:	f7ff ffdb 	bl	801b590 <__mcmp>
 801b5da:	1e05      	subs	r5, r0, #0
 801b5dc:	d110      	bne.n	801b600 <__mdiff+0x38>
 801b5de:	4629      	mov	r1, r5
 801b5e0:	4630      	mov	r0, r6
 801b5e2:	f7ff fd0f 	bl	801b004 <_Balloc>
 801b5e6:	b930      	cbnz	r0, 801b5f6 <__mdiff+0x2e>
 801b5e8:	4b3a      	ldr	r3, [pc, #232]	; (801b6d4 <__mdiff+0x10c>)
 801b5ea:	4602      	mov	r2, r0
 801b5ec:	f240 2137 	movw	r1, #567	; 0x237
 801b5f0:	4839      	ldr	r0, [pc, #228]	; (801b6d8 <__mdiff+0x110>)
 801b5f2:	f001 fa95 	bl	801cb20 <__assert_func>
 801b5f6:	2301      	movs	r3, #1
 801b5f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b5fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b600:	bfa4      	itt	ge
 801b602:	4643      	movge	r3, r8
 801b604:	46a0      	movge	r8, r4
 801b606:	4630      	mov	r0, r6
 801b608:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b60c:	bfa6      	itte	ge
 801b60e:	461c      	movge	r4, r3
 801b610:	2500      	movge	r5, #0
 801b612:	2501      	movlt	r5, #1
 801b614:	f7ff fcf6 	bl	801b004 <_Balloc>
 801b618:	b920      	cbnz	r0, 801b624 <__mdiff+0x5c>
 801b61a:	4b2e      	ldr	r3, [pc, #184]	; (801b6d4 <__mdiff+0x10c>)
 801b61c:	4602      	mov	r2, r0
 801b61e:	f240 2145 	movw	r1, #581	; 0x245
 801b622:	e7e5      	b.n	801b5f0 <__mdiff+0x28>
 801b624:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b628:	6926      	ldr	r6, [r4, #16]
 801b62a:	60c5      	str	r5, [r0, #12]
 801b62c:	f104 0914 	add.w	r9, r4, #20
 801b630:	f108 0514 	add.w	r5, r8, #20
 801b634:	f100 0e14 	add.w	lr, r0, #20
 801b638:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b63c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b640:	f108 0210 	add.w	r2, r8, #16
 801b644:	46f2      	mov	sl, lr
 801b646:	2100      	movs	r1, #0
 801b648:	f859 3b04 	ldr.w	r3, [r9], #4
 801b64c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b650:	fa11 f88b 	uxtah	r8, r1, fp
 801b654:	b299      	uxth	r1, r3
 801b656:	0c1b      	lsrs	r3, r3, #16
 801b658:	eba8 0801 	sub.w	r8, r8, r1
 801b65c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b660:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b664:	fa1f f888 	uxth.w	r8, r8
 801b668:	1419      	asrs	r1, r3, #16
 801b66a:	454e      	cmp	r6, r9
 801b66c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b670:	f84a 3b04 	str.w	r3, [sl], #4
 801b674:	d8e8      	bhi.n	801b648 <__mdiff+0x80>
 801b676:	1b33      	subs	r3, r6, r4
 801b678:	3b15      	subs	r3, #21
 801b67a:	f023 0303 	bic.w	r3, r3, #3
 801b67e:	3304      	adds	r3, #4
 801b680:	3415      	adds	r4, #21
 801b682:	42a6      	cmp	r6, r4
 801b684:	bf38      	it	cc
 801b686:	2304      	movcc	r3, #4
 801b688:	441d      	add	r5, r3
 801b68a:	4473      	add	r3, lr
 801b68c:	469e      	mov	lr, r3
 801b68e:	462e      	mov	r6, r5
 801b690:	4566      	cmp	r6, ip
 801b692:	d30e      	bcc.n	801b6b2 <__mdiff+0xea>
 801b694:	f10c 0203 	add.w	r2, ip, #3
 801b698:	1b52      	subs	r2, r2, r5
 801b69a:	f022 0203 	bic.w	r2, r2, #3
 801b69e:	3d03      	subs	r5, #3
 801b6a0:	45ac      	cmp	ip, r5
 801b6a2:	bf38      	it	cc
 801b6a4:	2200      	movcc	r2, #0
 801b6a6:	4413      	add	r3, r2
 801b6a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b6ac:	b17a      	cbz	r2, 801b6ce <__mdiff+0x106>
 801b6ae:	6107      	str	r7, [r0, #16]
 801b6b0:	e7a4      	b.n	801b5fc <__mdiff+0x34>
 801b6b2:	f856 8b04 	ldr.w	r8, [r6], #4
 801b6b6:	fa11 f288 	uxtah	r2, r1, r8
 801b6ba:	1414      	asrs	r4, r2, #16
 801b6bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b6c0:	b292      	uxth	r2, r2
 801b6c2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b6c6:	f84e 2b04 	str.w	r2, [lr], #4
 801b6ca:	1421      	asrs	r1, r4, #16
 801b6cc:	e7e0      	b.n	801b690 <__mdiff+0xc8>
 801b6ce:	3f01      	subs	r7, #1
 801b6d0:	e7ea      	b.n	801b6a8 <__mdiff+0xe0>
 801b6d2:	bf00      	nop
 801b6d4:	0801fd3d 	.word	0x0801fd3d
 801b6d8:	0801fd4e 	.word	0x0801fd4e

0801b6dc <__ulp>:
 801b6dc:	b082      	sub	sp, #8
 801b6de:	ed8d 0b00 	vstr	d0, [sp]
 801b6e2:	9a01      	ldr	r2, [sp, #4]
 801b6e4:	4b0f      	ldr	r3, [pc, #60]	; (801b724 <__ulp+0x48>)
 801b6e6:	4013      	ands	r3, r2
 801b6e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	dc08      	bgt.n	801b702 <__ulp+0x26>
 801b6f0:	425b      	negs	r3, r3
 801b6f2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801b6f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b6fa:	da04      	bge.n	801b706 <__ulp+0x2a>
 801b6fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801b700:	4113      	asrs	r3, r2
 801b702:	2200      	movs	r2, #0
 801b704:	e008      	b.n	801b718 <__ulp+0x3c>
 801b706:	f1a2 0314 	sub.w	r3, r2, #20
 801b70a:	2b1e      	cmp	r3, #30
 801b70c:	bfda      	itte	le
 801b70e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801b712:	40da      	lsrle	r2, r3
 801b714:	2201      	movgt	r2, #1
 801b716:	2300      	movs	r3, #0
 801b718:	4619      	mov	r1, r3
 801b71a:	4610      	mov	r0, r2
 801b71c:	ec41 0b10 	vmov	d0, r0, r1
 801b720:	b002      	add	sp, #8
 801b722:	4770      	bx	lr
 801b724:	7ff00000 	.word	0x7ff00000

0801b728 <__b2d>:
 801b728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b72c:	6906      	ldr	r6, [r0, #16]
 801b72e:	f100 0814 	add.w	r8, r0, #20
 801b732:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801b736:	1f37      	subs	r7, r6, #4
 801b738:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b73c:	4610      	mov	r0, r2
 801b73e:	f7ff fd53 	bl	801b1e8 <__hi0bits>
 801b742:	f1c0 0320 	rsb	r3, r0, #32
 801b746:	280a      	cmp	r0, #10
 801b748:	600b      	str	r3, [r1, #0]
 801b74a:	491b      	ldr	r1, [pc, #108]	; (801b7b8 <__b2d+0x90>)
 801b74c:	dc15      	bgt.n	801b77a <__b2d+0x52>
 801b74e:	f1c0 0c0b 	rsb	ip, r0, #11
 801b752:	fa22 f30c 	lsr.w	r3, r2, ip
 801b756:	45b8      	cmp	r8, r7
 801b758:	ea43 0501 	orr.w	r5, r3, r1
 801b75c:	bf34      	ite	cc
 801b75e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b762:	2300      	movcs	r3, #0
 801b764:	3015      	adds	r0, #21
 801b766:	fa02 f000 	lsl.w	r0, r2, r0
 801b76a:	fa23 f30c 	lsr.w	r3, r3, ip
 801b76e:	4303      	orrs	r3, r0
 801b770:	461c      	mov	r4, r3
 801b772:	ec45 4b10 	vmov	d0, r4, r5
 801b776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b77a:	45b8      	cmp	r8, r7
 801b77c:	bf3a      	itte	cc
 801b77e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b782:	f1a6 0708 	subcc.w	r7, r6, #8
 801b786:	2300      	movcs	r3, #0
 801b788:	380b      	subs	r0, #11
 801b78a:	d012      	beq.n	801b7b2 <__b2d+0x8a>
 801b78c:	f1c0 0120 	rsb	r1, r0, #32
 801b790:	fa23 f401 	lsr.w	r4, r3, r1
 801b794:	4082      	lsls	r2, r0
 801b796:	4322      	orrs	r2, r4
 801b798:	4547      	cmp	r7, r8
 801b79a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801b79e:	bf8c      	ite	hi
 801b7a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801b7a4:	2200      	movls	r2, #0
 801b7a6:	4083      	lsls	r3, r0
 801b7a8:	40ca      	lsrs	r2, r1
 801b7aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b7ae:	4313      	orrs	r3, r2
 801b7b0:	e7de      	b.n	801b770 <__b2d+0x48>
 801b7b2:	ea42 0501 	orr.w	r5, r2, r1
 801b7b6:	e7db      	b.n	801b770 <__b2d+0x48>
 801b7b8:	3ff00000 	.word	0x3ff00000

0801b7bc <__d2b>:
 801b7bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b7c0:	460f      	mov	r7, r1
 801b7c2:	2101      	movs	r1, #1
 801b7c4:	ec59 8b10 	vmov	r8, r9, d0
 801b7c8:	4616      	mov	r6, r2
 801b7ca:	f7ff fc1b 	bl	801b004 <_Balloc>
 801b7ce:	4604      	mov	r4, r0
 801b7d0:	b930      	cbnz	r0, 801b7e0 <__d2b+0x24>
 801b7d2:	4602      	mov	r2, r0
 801b7d4:	4b24      	ldr	r3, [pc, #144]	; (801b868 <__d2b+0xac>)
 801b7d6:	4825      	ldr	r0, [pc, #148]	; (801b86c <__d2b+0xb0>)
 801b7d8:	f240 310f 	movw	r1, #783	; 0x30f
 801b7dc:	f001 f9a0 	bl	801cb20 <__assert_func>
 801b7e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b7e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b7e8:	bb2d      	cbnz	r5, 801b836 <__d2b+0x7a>
 801b7ea:	9301      	str	r3, [sp, #4]
 801b7ec:	f1b8 0300 	subs.w	r3, r8, #0
 801b7f0:	d026      	beq.n	801b840 <__d2b+0x84>
 801b7f2:	4668      	mov	r0, sp
 801b7f4:	9300      	str	r3, [sp, #0]
 801b7f6:	f7ff fd17 	bl	801b228 <__lo0bits>
 801b7fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b7fe:	b1e8      	cbz	r0, 801b83c <__d2b+0x80>
 801b800:	f1c0 0320 	rsb	r3, r0, #32
 801b804:	fa02 f303 	lsl.w	r3, r2, r3
 801b808:	430b      	orrs	r3, r1
 801b80a:	40c2      	lsrs	r2, r0
 801b80c:	6163      	str	r3, [r4, #20]
 801b80e:	9201      	str	r2, [sp, #4]
 801b810:	9b01      	ldr	r3, [sp, #4]
 801b812:	61a3      	str	r3, [r4, #24]
 801b814:	2b00      	cmp	r3, #0
 801b816:	bf14      	ite	ne
 801b818:	2202      	movne	r2, #2
 801b81a:	2201      	moveq	r2, #1
 801b81c:	6122      	str	r2, [r4, #16]
 801b81e:	b1bd      	cbz	r5, 801b850 <__d2b+0x94>
 801b820:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b824:	4405      	add	r5, r0
 801b826:	603d      	str	r5, [r7, #0]
 801b828:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b82c:	6030      	str	r0, [r6, #0]
 801b82e:	4620      	mov	r0, r4
 801b830:	b003      	add	sp, #12
 801b832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b83a:	e7d6      	b.n	801b7ea <__d2b+0x2e>
 801b83c:	6161      	str	r1, [r4, #20]
 801b83e:	e7e7      	b.n	801b810 <__d2b+0x54>
 801b840:	a801      	add	r0, sp, #4
 801b842:	f7ff fcf1 	bl	801b228 <__lo0bits>
 801b846:	9b01      	ldr	r3, [sp, #4]
 801b848:	6163      	str	r3, [r4, #20]
 801b84a:	3020      	adds	r0, #32
 801b84c:	2201      	movs	r2, #1
 801b84e:	e7e5      	b.n	801b81c <__d2b+0x60>
 801b850:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b854:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b858:	6038      	str	r0, [r7, #0]
 801b85a:	6918      	ldr	r0, [r3, #16]
 801b85c:	f7ff fcc4 	bl	801b1e8 <__hi0bits>
 801b860:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b864:	e7e2      	b.n	801b82c <__d2b+0x70>
 801b866:	bf00      	nop
 801b868:	0801fd3d 	.word	0x0801fd3d
 801b86c:	0801fd4e 	.word	0x0801fd4e

0801b870 <__ratio>:
 801b870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b874:	4688      	mov	r8, r1
 801b876:	4669      	mov	r1, sp
 801b878:	4681      	mov	r9, r0
 801b87a:	f7ff ff55 	bl	801b728 <__b2d>
 801b87e:	a901      	add	r1, sp, #4
 801b880:	4640      	mov	r0, r8
 801b882:	ec55 4b10 	vmov	r4, r5, d0
 801b886:	f7ff ff4f 	bl	801b728 <__b2d>
 801b88a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b88e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b892:	eba3 0c02 	sub.w	ip, r3, r2
 801b896:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b89a:	1a9b      	subs	r3, r3, r2
 801b89c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801b8a0:	ec51 0b10 	vmov	r0, r1, d0
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	bfd6      	itet	le
 801b8a8:	460a      	movle	r2, r1
 801b8aa:	462a      	movgt	r2, r5
 801b8ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b8b0:	468b      	mov	fp, r1
 801b8b2:	462f      	mov	r7, r5
 801b8b4:	bfd4      	ite	le
 801b8b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801b8ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801b8be:	4620      	mov	r0, r4
 801b8c0:	ee10 2a10 	vmov	r2, s0
 801b8c4:	465b      	mov	r3, fp
 801b8c6:	4639      	mov	r1, r7
 801b8c8:	f7e4 ffc0 	bl	800084c <__aeabi_ddiv>
 801b8cc:	ec41 0b10 	vmov	d0, r0, r1
 801b8d0:	b003      	add	sp, #12
 801b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b8d6 <__copybits>:
 801b8d6:	3901      	subs	r1, #1
 801b8d8:	b570      	push	{r4, r5, r6, lr}
 801b8da:	1149      	asrs	r1, r1, #5
 801b8dc:	6914      	ldr	r4, [r2, #16]
 801b8de:	3101      	adds	r1, #1
 801b8e0:	f102 0314 	add.w	r3, r2, #20
 801b8e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b8e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b8ec:	1f05      	subs	r5, r0, #4
 801b8ee:	42a3      	cmp	r3, r4
 801b8f0:	d30c      	bcc.n	801b90c <__copybits+0x36>
 801b8f2:	1aa3      	subs	r3, r4, r2
 801b8f4:	3b11      	subs	r3, #17
 801b8f6:	f023 0303 	bic.w	r3, r3, #3
 801b8fa:	3211      	adds	r2, #17
 801b8fc:	42a2      	cmp	r2, r4
 801b8fe:	bf88      	it	hi
 801b900:	2300      	movhi	r3, #0
 801b902:	4418      	add	r0, r3
 801b904:	2300      	movs	r3, #0
 801b906:	4288      	cmp	r0, r1
 801b908:	d305      	bcc.n	801b916 <__copybits+0x40>
 801b90a:	bd70      	pop	{r4, r5, r6, pc}
 801b90c:	f853 6b04 	ldr.w	r6, [r3], #4
 801b910:	f845 6f04 	str.w	r6, [r5, #4]!
 801b914:	e7eb      	b.n	801b8ee <__copybits+0x18>
 801b916:	f840 3b04 	str.w	r3, [r0], #4
 801b91a:	e7f4      	b.n	801b906 <__copybits+0x30>

0801b91c <__any_on>:
 801b91c:	f100 0214 	add.w	r2, r0, #20
 801b920:	6900      	ldr	r0, [r0, #16]
 801b922:	114b      	asrs	r3, r1, #5
 801b924:	4298      	cmp	r0, r3
 801b926:	b510      	push	{r4, lr}
 801b928:	db11      	blt.n	801b94e <__any_on+0x32>
 801b92a:	dd0a      	ble.n	801b942 <__any_on+0x26>
 801b92c:	f011 011f 	ands.w	r1, r1, #31
 801b930:	d007      	beq.n	801b942 <__any_on+0x26>
 801b932:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b936:	fa24 f001 	lsr.w	r0, r4, r1
 801b93a:	fa00 f101 	lsl.w	r1, r0, r1
 801b93e:	428c      	cmp	r4, r1
 801b940:	d10b      	bne.n	801b95a <__any_on+0x3e>
 801b942:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b946:	4293      	cmp	r3, r2
 801b948:	d803      	bhi.n	801b952 <__any_on+0x36>
 801b94a:	2000      	movs	r0, #0
 801b94c:	bd10      	pop	{r4, pc}
 801b94e:	4603      	mov	r3, r0
 801b950:	e7f7      	b.n	801b942 <__any_on+0x26>
 801b952:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b956:	2900      	cmp	r1, #0
 801b958:	d0f5      	beq.n	801b946 <__any_on+0x2a>
 801b95a:	2001      	movs	r0, #1
 801b95c:	e7f6      	b.n	801b94c <__any_on+0x30>

0801b95e <sulp>:
 801b95e:	b570      	push	{r4, r5, r6, lr}
 801b960:	4604      	mov	r4, r0
 801b962:	460d      	mov	r5, r1
 801b964:	ec45 4b10 	vmov	d0, r4, r5
 801b968:	4616      	mov	r6, r2
 801b96a:	f7ff feb7 	bl	801b6dc <__ulp>
 801b96e:	ec51 0b10 	vmov	r0, r1, d0
 801b972:	b17e      	cbz	r6, 801b994 <sulp+0x36>
 801b974:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b978:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	dd09      	ble.n	801b994 <sulp+0x36>
 801b980:	051b      	lsls	r3, r3, #20
 801b982:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b986:	2400      	movs	r4, #0
 801b988:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b98c:	4622      	mov	r2, r4
 801b98e:	462b      	mov	r3, r5
 801b990:	f7e4 fe32 	bl	80005f8 <__aeabi_dmul>
 801b994:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b998 <_strtod_l>:
 801b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b99c:	ed2d 8b02 	vpush	{d8}
 801b9a0:	b09b      	sub	sp, #108	; 0x6c
 801b9a2:	4604      	mov	r4, r0
 801b9a4:	9213      	str	r2, [sp, #76]	; 0x4c
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	9216      	str	r2, [sp, #88]	; 0x58
 801b9aa:	460d      	mov	r5, r1
 801b9ac:	f04f 0800 	mov.w	r8, #0
 801b9b0:	f04f 0900 	mov.w	r9, #0
 801b9b4:	460a      	mov	r2, r1
 801b9b6:	9215      	str	r2, [sp, #84]	; 0x54
 801b9b8:	7811      	ldrb	r1, [r2, #0]
 801b9ba:	292b      	cmp	r1, #43	; 0x2b
 801b9bc:	d04c      	beq.n	801ba58 <_strtod_l+0xc0>
 801b9be:	d83a      	bhi.n	801ba36 <_strtod_l+0x9e>
 801b9c0:	290d      	cmp	r1, #13
 801b9c2:	d834      	bhi.n	801ba2e <_strtod_l+0x96>
 801b9c4:	2908      	cmp	r1, #8
 801b9c6:	d834      	bhi.n	801ba32 <_strtod_l+0x9a>
 801b9c8:	2900      	cmp	r1, #0
 801b9ca:	d03d      	beq.n	801ba48 <_strtod_l+0xb0>
 801b9cc:	2200      	movs	r2, #0
 801b9ce:	920a      	str	r2, [sp, #40]	; 0x28
 801b9d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801b9d2:	7832      	ldrb	r2, [r6, #0]
 801b9d4:	2a30      	cmp	r2, #48	; 0x30
 801b9d6:	f040 80b4 	bne.w	801bb42 <_strtod_l+0x1aa>
 801b9da:	7872      	ldrb	r2, [r6, #1]
 801b9dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801b9e0:	2a58      	cmp	r2, #88	; 0x58
 801b9e2:	d170      	bne.n	801bac6 <_strtod_l+0x12e>
 801b9e4:	9302      	str	r3, [sp, #8]
 801b9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9e8:	9301      	str	r3, [sp, #4]
 801b9ea:	ab16      	add	r3, sp, #88	; 0x58
 801b9ec:	9300      	str	r3, [sp, #0]
 801b9ee:	4a8e      	ldr	r2, [pc, #568]	; (801bc28 <_strtod_l+0x290>)
 801b9f0:	ab17      	add	r3, sp, #92	; 0x5c
 801b9f2:	a915      	add	r1, sp, #84	; 0x54
 801b9f4:	4620      	mov	r0, r4
 801b9f6:	f001 f92f 	bl	801cc58 <__gethex>
 801b9fa:	f010 070f 	ands.w	r7, r0, #15
 801b9fe:	4605      	mov	r5, r0
 801ba00:	d005      	beq.n	801ba0e <_strtod_l+0x76>
 801ba02:	2f06      	cmp	r7, #6
 801ba04:	d12a      	bne.n	801ba5c <_strtod_l+0xc4>
 801ba06:	3601      	adds	r6, #1
 801ba08:	2300      	movs	r3, #0
 801ba0a:	9615      	str	r6, [sp, #84]	; 0x54
 801ba0c:	930a      	str	r3, [sp, #40]	; 0x28
 801ba0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	f040 857f 	bne.w	801c514 <_strtod_l+0xb7c>
 801ba16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba18:	b1db      	cbz	r3, 801ba52 <_strtod_l+0xba>
 801ba1a:	4642      	mov	r2, r8
 801ba1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ba20:	ec43 2b10 	vmov	d0, r2, r3
 801ba24:	b01b      	add	sp, #108	; 0x6c
 801ba26:	ecbd 8b02 	vpop	{d8}
 801ba2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba2e:	2920      	cmp	r1, #32
 801ba30:	d1cc      	bne.n	801b9cc <_strtod_l+0x34>
 801ba32:	3201      	adds	r2, #1
 801ba34:	e7bf      	b.n	801b9b6 <_strtod_l+0x1e>
 801ba36:	292d      	cmp	r1, #45	; 0x2d
 801ba38:	d1c8      	bne.n	801b9cc <_strtod_l+0x34>
 801ba3a:	2101      	movs	r1, #1
 801ba3c:	910a      	str	r1, [sp, #40]	; 0x28
 801ba3e:	1c51      	adds	r1, r2, #1
 801ba40:	9115      	str	r1, [sp, #84]	; 0x54
 801ba42:	7852      	ldrb	r2, [r2, #1]
 801ba44:	2a00      	cmp	r2, #0
 801ba46:	d1c3      	bne.n	801b9d0 <_strtod_l+0x38>
 801ba48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ba4a:	9515      	str	r5, [sp, #84]	; 0x54
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	f040 855f 	bne.w	801c510 <_strtod_l+0xb78>
 801ba52:	4642      	mov	r2, r8
 801ba54:	464b      	mov	r3, r9
 801ba56:	e7e3      	b.n	801ba20 <_strtod_l+0x88>
 801ba58:	2100      	movs	r1, #0
 801ba5a:	e7ef      	b.n	801ba3c <_strtod_l+0xa4>
 801ba5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ba5e:	b13a      	cbz	r2, 801ba70 <_strtod_l+0xd8>
 801ba60:	2135      	movs	r1, #53	; 0x35
 801ba62:	a818      	add	r0, sp, #96	; 0x60
 801ba64:	f7ff ff37 	bl	801b8d6 <__copybits>
 801ba68:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ba6a:	4620      	mov	r0, r4
 801ba6c:	f7ff fb0a 	bl	801b084 <_Bfree>
 801ba70:	3f01      	subs	r7, #1
 801ba72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ba74:	2f04      	cmp	r7, #4
 801ba76:	d806      	bhi.n	801ba86 <_strtod_l+0xee>
 801ba78:	e8df f007 	tbb	[pc, r7]
 801ba7c:	201d0314 	.word	0x201d0314
 801ba80:	14          	.byte	0x14
 801ba81:	00          	.byte	0x00
 801ba82:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801ba86:	05e9      	lsls	r1, r5, #23
 801ba88:	bf48      	it	mi
 801ba8a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801ba8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ba92:	0d1b      	lsrs	r3, r3, #20
 801ba94:	051b      	lsls	r3, r3, #20
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d1b9      	bne.n	801ba0e <_strtod_l+0x76>
 801ba9a:	f7fe faf9 	bl	801a090 <__errno>
 801ba9e:	2322      	movs	r3, #34	; 0x22
 801baa0:	6003      	str	r3, [r0, #0]
 801baa2:	e7b4      	b.n	801ba0e <_strtod_l+0x76>
 801baa4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801baa8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801baac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801bab0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801bab4:	e7e7      	b.n	801ba86 <_strtod_l+0xee>
 801bab6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801bc30 <_strtod_l+0x298>
 801baba:	e7e4      	b.n	801ba86 <_strtod_l+0xee>
 801babc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801bac0:	f04f 38ff 	mov.w	r8, #4294967295
 801bac4:	e7df      	b.n	801ba86 <_strtod_l+0xee>
 801bac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bac8:	1c5a      	adds	r2, r3, #1
 801baca:	9215      	str	r2, [sp, #84]	; 0x54
 801bacc:	785b      	ldrb	r3, [r3, #1]
 801bace:	2b30      	cmp	r3, #48	; 0x30
 801bad0:	d0f9      	beq.n	801bac6 <_strtod_l+0x12e>
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d09b      	beq.n	801ba0e <_strtod_l+0x76>
 801bad6:	2301      	movs	r3, #1
 801bad8:	f04f 0a00 	mov.w	sl, #0
 801badc:	9304      	str	r3, [sp, #16]
 801bade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bae0:	930b      	str	r3, [sp, #44]	; 0x2c
 801bae2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801bae6:	46d3      	mov	fp, sl
 801bae8:	220a      	movs	r2, #10
 801baea:	9815      	ldr	r0, [sp, #84]	; 0x54
 801baec:	7806      	ldrb	r6, [r0, #0]
 801baee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801baf2:	b2d9      	uxtb	r1, r3
 801baf4:	2909      	cmp	r1, #9
 801baf6:	d926      	bls.n	801bb46 <_strtod_l+0x1ae>
 801baf8:	494c      	ldr	r1, [pc, #304]	; (801bc2c <_strtod_l+0x294>)
 801bafa:	2201      	movs	r2, #1
 801bafc:	f000 ffe6 	bl	801cacc <strncmp>
 801bb00:	2800      	cmp	r0, #0
 801bb02:	d030      	beq.n	801bb66 <_strtod_l+0x1ce>
 801bb04:	2000      	movs	r0, #0
 801bb06:	4632      	mov	r2, r6
 801bb08:	9005      	str	r0, [sp, #20]
 801bb0a:	465e      	mov	r6, fp
 801bb0c:	4603      	mov	r3, r0
 801bb0e:	2a65      	cmp	r2, #101	; 0x65
 801bb10:	d001      	beq.n	801bb16 <_strtod_l+0x17e>
 801bb12:	2a45      	cmp	r2, #69	; 0x45
 801bb14:	d113      	bne.n	801bb3e <_strtod_l+0x1a6>
 801bb16:	b91e      	cbnz	r6, 801bb20 <_strtod_l+0x188>
 801bb18:	9a04      	ldr	r2, [sp, #16]
 801bb1a:	4302      	orrs	r2, r0
 801bb1c:	d094      	beq.n	801ba48 <_strtod_l+0xb0>
 801bb1e:	2600      	movs	r6, #0
 801bb20:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801bb22:	1c6a      	adds	r2, r5, #1
 801bb24:	9215      	str	r2, [sp, #84]	; 0x54
 801bb26:	786a      	ldrb	r2, [r5, #1]
 801bb28:	2a2b      	cmp	r2, #43	; 0x2b
 801bb2a:	d074      	beq.n	801bc16 <_strtod_l+0x27e>
 801bb2c:	2a2d      	cmp	r2, #45	; 0x2d
 801bb2e:	d078      	beq.n	801bc22 <_strtod_l+0x28a>
 801bb30:	f04f 0c00 	mov.w	ip, #0
 801bb34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801bb38:	2909      	cmp	r1, #9
 801bb3a:	d97f      	bls.n	801bc3c <_strtod_l+0x2a4>
 801bb3c:	9515      	str	r5, [sp, #84]	; 0x54
 801bb3e:	2700      	movs	r7, #0
 801bb40:	e09e      	b.n	801bc80 <_strtod_l+0x2e8>
 801bb42:	2300      	movs	r3, #0
 801bb44:	e7c8      	b.n	801bad8 <_strtod_l+0x140>
 801bb46:	f1bb 0f08 	cmp.w	fp, #8
 801bb4a:	bfd8      	it	le
 801bb4c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801bb4e:	f100 0001 	add.w	r0, r0, #1
 801bb52:	bfda      	itte	le
 801bb54:	fb02 3301 	mlale	r3, r2, r1, r3
 801bb58:	9309      	strle	r3, [sp, #36]	; 0x24
 801bb5a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801bb5e:	f10b 0b01 	add.w	fp, fp, #1
 801bb62:	9015      	str	r0, [sp, #84]	; 0x54
 801bb64:	e7c1      	b.n	801baea <_strtod_l+0x152>
 801bb66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bb68:	1c5a      	adds	r2, r3, #1
 801bb6a:	9215      	str	r2, [sp, #84]	; 0x54
 801bb6c:	785a      	ldrb	r2, [r3, #1]
 801bb6e:	f1bb 0f00 	cmp.w	fp, #0
 801bb72:	d037      	beq.n	801bbe4 <_strtod_l+0x24c>
 801bb74:	9005      	str	r0, [sp, #20]
 801bb76:	465e      	mov	r6, fp
 801bb78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801bb7c:	2b09      	cmp	r3, #9
 801bb7e:	d912      	bls.n	801bba6 <_strtod_l+0x20e>
 801bb80:	2301      	movs	r3, #1
 801bb82:	e7c4      	b.n	801bb0e <_strtod_l+0x176>
 801bb84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bb86:	1c5a      	adds	r2, r3, #1
 801bb88:	9215      	str	r2, [sp, #84]	; 0x54
 801bb8a:	785a      	ldrb	r2, [r3, #1]
 801bb8c:	3001      	adds	r0, #1
 801bb8e:	2a30      	cmp	r2, #48	; 0x30
 801bb90:	d0f8      	beq.n	801bb84 <_strtod_l+0x1ec>
 801bb92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801bb96:	2b08      	cmp	r3, #8
 801bb98:	f200 84c1 	bhi.w	801c51e <_strtod_l+0xb86>
 801bb9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bb9e:	9005      	str	r0, [sp, #20]
 801bba0:	2000      	movs	r0, #0
 801bba2:	930b      	str	r3, [sp, #44]	; 0x2c
 801bba4:	4606      	mov	r6, r0
 801bba6:	3a30      	subs	r2, #48	; 0x30
 801bba8:	f100 0301 	add.w	r3, r0, #1
 801bbac:	d014      	beq.n	801bbd8 <_strtod_l+0x240>
 801bbae:	9905      	ldr	r1, [sp, #20]
 801bbb0:	4419      	add	r1, r3
 801bbb2:	9105      	str	r1, [sp, #20]
 801bbb4:	4633      	mov	r3, r6
 801bbb6:	eb00 0c06 	add.w	ip, r0, r6
 801bbba:	210a      	movs	r1, #10
 801bbbc:	4563      	cmp	r3, ip
 801bbbe:	d113      	bne.n	801bbe8 <_strtod_l+0x250>
 801bbc0:	1833      	adds	r3, r6, r0
 801bbc2:	2b08      	cmp	r3, #8
 801bbc4:	f106 0601 	add.w	r6, r6, #1
 801bbc8:	4406      	add	r6, r0
 801bbca:	dc1a      	bgt.n	801bc02 <_strtod_l+0x26a>
 801bbcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bbce:	230a      	movs	r3, #10
 801bbd0:	fb03 2301 	mla	r3, r3, r1, r2
 801bbd4:	9309      	str	r3, [sp, #36]	; 0x24
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801bbda:	1c51      	adds	r1, r2, #1
 801bbdc:	9115      	str	r1, [sp, #84]	; 0x54
 801bbde:	7852      	ldrb	r2, [r2, #1]
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	e7c9      	b.n	801bb78 <_strtod_l+0x1e0>
 801bbe4:	4658      	mov	r0, fp
 801bbe6:	e7d2      	b.n	801bb8e <_strtod_l+0x1f6>
 801bbe8:	2b08      	cmp	r3, #8
 801bbea:	f103 0301 	add.w	r3, r3, #1
 801bbee:	dc03      	bgt.n	801bbf8 <_strtod_l+0x260>
 801bbf0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801bbf2:	434f      	muls	r7, r1
 801bbf4:	9709      	str	r7, [sp, #36]	; 0x24
 801bbf6:	e7e1      	b.n	801bbbc <_strtod_l+0x224>
 801bbf8:	2b10      	cmp	r3, #16
 801bbfa:	bfd8      	it	le
 801bbfc:	fb01 fa0a 	mulle.w	sl, r1, sl
 801bc00:	e7dc      	b.n	801bbbc <_strtod_l+0x224>
 801bc02:	2e10      	cmp	r6, #16
 801bc04:	bfdc      	itt	le
 801bc06:	230a      	movle	r3, #10
 801bc08:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801bc0c:	e7e3      	b.n	801bbd6 <_strtod_l+0x23e>
 801bc0e:	2300      	movs	r3, #0
 801bc10:	9305      	str	r3, [sp, #20]
 801bc12:	2301      	movs	r3, #1
 801bc14:	e780      	b.n	801bb18 <_strtod_l+0x180>
 801bc16:	f04f 0c00 	mov.w	ip, #0
 801bc1a:	1caa      	adds	r2, r5, #2
 801bc1c:	9215      	str	r2, [sp, #84]	; 0x54
 801bc1e:	78aa      	ldrb	r2, [r5, #2]
 801bc20:	e788      	b.n	801bb34 <_strtod_l+0x19c>
 801bc22:	f04f 0c01 	mov.w	ip, #1
 801bc26:	e7f8      	b.n	801bc1a <_strtod_l+0x282>
 801bc28:	0801fea8 	.word	0x0801fea8
 801bc2c:	0801fea4 	.word	0x0801fea4
 801bc30:	7ff00000 	.word	0x7ff00000
 801bc34:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801bc36:	1c51      	adds	r1, r2, #1
 801bc38:	9115      	str	r1, [sp, #84]	; 0x54
 801bc3a:	7852      	ldrb	r2, [r2, #1]
 801bc3c:	2a30      	cmp	r2, #48	; 0x30
 801bc3e:	d0f9      	beq.n	801bc34 <_strtod_l+0x29c>
 801bc40:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801bc44:	2908      	cmp	r1, #8
 801bc46:	f63f af7a 	bhi.w	801bb3e <_strtod_l+0x1a6>
 801bc4a:	3a30      	subs	r2, #48	; 0x30
 801bc4c:	9208      	str	r2, [sp, #32]
 801bc4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801bc50:	920c      	str	r2, [sp, #48]	; 0x30
 801bc52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801bc54:	1c57      	adds	r7, r2, #1
 801bc56:	9715      	str	r7, [sp, #84]	; 0x54
 801bc58:	7852      	ldrb	r2, [r2, #1]
 801bc5a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801bc5e:	f1be 0f09 	cmp.w	lr, #9
 801bc62:	d938      	bls.n	801bcd6 <_strtod_l+0x33e>
 801bc64:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bc66:	1a7f      	subs	r7, r7, r1
 801bc68:	2f08      	cmp	r7, #8
 801bc6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801bc6e:	dc03      	bgt.n	801bc78 <_strtod_l+0x2e0>
 801bc70:	9908      	ldr	r1, [sp, #32]
 801bc72:	428f      	cmp	r7, r1
 801bc74:	bfa8      	it	ge
 801bc76:	460f      	movge	r7, r1
 801bc78:	f1bc 0f00 	cmp.w	ip, #0
 801bc7c:	d000      	beq.n	801bc80 <_strtod_l+0x2e8>
 801bc7e:	427f      	negs	r7, r7
 801bc80:	2e00      	cmp	r6, #0
 801bc82:	d14f      	bne.n	801bd24 <_strtod_l+0x38c>
 801bc84:	9904      	ldr	r1, [sp, #16]
 801bc86:	4301      	orrs	r1, r0
 801bc88:	f47f aec1 	bne.w	801ba0e <_strtod_l+0x76>
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	f47f aedb 	bne.w	801ba48 <_strtod_l+0xb0>
 801bc92:	2a69      	cmp	r2, #105	; 0x69
 801bc94:	d029      	beq.n	801bcea <_strtod_l+0x352>
 801bc96:	dc26      	bgt.n	801bce6 <_strtod_l+0x34e>
 801bc98:	2a49      	cmp	r2, #73	; 0x49
 801bc9a:	d026      	beq.n	801bcea <_strtod_l+0x352>
 801bc9c:	2a4e      	cmp	r2, #78	; 0x4e
 801bc9e:	f47f aed3 	bne.w	801ba48 <_strtod_l+0xb0>
 801bca2:	499b      	ldr	r1, [pc, #620]	; (801bf10 <_strtod_l+0x578>)
 801bca4:	a815      	add	r0, sp, #84	; 0x54
 801bca6:	f001 fa17 	bl	801d0d8 <__match>
 801bcaa:	2800      	cmp	r0, #0
 801bcac:	f43f aecc 	beq.w	801ba48 <_strtod_l+0xb0>
 801bcb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bcb2:	781b      	ldrb	r3, [r3, #0]
 801bcb4:	2b28      	cmp	r3, #40	; 0x28
 801bcb6:	d12f      	bne.n	801bd18 <_strtod_l+0x380>
 801bcb8:	4996      	ldr	r1, [pc, #600]	; (801bf14 <_strtod_l+0x57c>)
 801bcba:	aa18      	add	r2, sp, #96	; 0x60
 801bcbc:	a815      	add	r0, sp, #84	; 0x54
 801bcbe:	f001 fa1f 	bl	801d100 <__hexnan>
 801bcc2:	2805      	cmp	r0, #5
 801bcc4:	d128      	bne.n	801bd18 <_strtod_l+0x380>
 801bcc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bcc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801bccc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801bcd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801bcd4:	e69b      	b.n	801ba0e <_strtod_l+0x76>
 801bcd6:	9f08      	ldr	r7, [sp, #32]
 801bcd8:	210a      	movs	r1, #10
 801bcda:	fb01 2107 	mla	r1, r1, r7, r2
 801bcde:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801bce2:	9208      	str	r2, [sp, #32]
 801bce4:	e7b5      	b.n	801bc52 <_strtod_l+0x2ba>
 801bce6:	2a6e      	cmp	r2, #110	; 0x6e
 801bce8:	e7d9      	b.n	801bc9e <_strtod_l+0x306>
 801bcea:	498b      	ldr	r1, [pc, #556]	; (801bf18 <_strtod_l+0x580>)
 801bcec:	a815      	add	r0, sp, #84	; 0x54
 801bcee:	f001 f9f3 	bl	801d0d8 <__match>
 801bcf2:	2800      	cmp	r0, #0
 801bcf4:	f43f aea8 	beq.w	801ba48 <_strtod_l+0xb0>
 801bcf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bcfa:	4988      	ldr	r1, [pc, #544]	; (801bf1c <_strtod_l+0x584>)
 801bcfc:	3b01      	subs	r3, #1
 801bcfe:	a815      	add	r0, sp, #84	; 0x54
 801bd00:	9315      	str	r3, [sp, #84]	; 0x54
 801bd02:	f001 f9e9 	bl	801d0d8 <__match>
 801bd06:	b910      	cbnz	r0, 801bd0e <_strtod_l+0x376>
 801bd08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bd0a:	3301      	adds	r3, #1
 801bd0c:	9315      	str	r3, [sp, #84]	; 0x54
 801bd0e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801bf2c <_strtod_l+0x594>
 801bd12:	f04f 0800 	mov.w	r8, #0
 801bd16:	e67a      	b.n	801ba0e <_strtod_l+0x76>
 801bd18:	4881      	ldr	r0, [pc, #516]	; (801bf20 <_strtod_l+0x588>)
 801bd1a:	f000 fef9 	bl	801cb10 <nan>
 801bd1e:	ec59 8b10 	vmov	r8, r9, d0
 801bd22:	e674      	b.n	801ba0e <_strtod_l+0x76>
 801bd24:	9b05      	ldr	r3, [sp, #20]
 801bd26:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd28:	1afb      	subs	r3, r7, r3
 801bd2a:	f1bb 0f00 	cmp.w	fp, #0
 801bd2e:	bf08      	it	eq
 801bd30:	46b3      	moveq	fp, r6
 801bd32:	2e10      	cmp	r6, #16
 801bd34:	9308      	str	r3, [sp, #32]
 801bd36:	4635      	mov	r5, r6
 801bd38:	bfa8      	it	ge
 801bd3a:	2510      	movge	r5, #16
 801bd3c:	f7e4 fbe2 	bl	8000504 <__aeabi_ui2d>
 801bd40:	2e09      	cmp	r6, #9
 801bd42:	4680      	mov	r8, r0
 801bd44:	4689      	mov	r9, r1
 801bd46:	dd13      	ble.n	801bd70 <_strtod_l+0x3d8>
 801bd48:	4b76      	ldr	r3, [pc, #472]	; (801bf24 <_strtod_l+0x58c>)
 801bd4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bd4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801bd52:	f7e4 fc51 	bl	80005f8 <__aeabi_dmul>
 801bd56:	4680      	mov	r8, r0
 801bd58:	4650      	mov	r0, sl
 801bd5a:	4689      	mov	r9, r1
 801bd5c:	f7e4 fbd2 	bl	8000504 <__aeabi_ui2d>
 801bd60:	4602      	mov	r2, r0
 801bd62:	460b      	mov	r3, r1
 801bd64:	4640      	mov	r0, r8
 801bd66:	4649      	mov	r1, r9
 801bd68:	f7e4 fa90 	bl	800028c <__adddf3>
 801bd6c:	4680      	mov	r8, r0
 801bd6e:	4689      	mov	r9, r1
 801bd70:	2e0f      	cmp	r6, #15
 801bd72:	dc38      	bgt.n	801bde6 <_strtod_l+0x44e>
 801bd74:	9b08      	ldr	r3, [sp, #32]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	f43f ae49 	beq.w	801ba0e <_strtod_l+0x76>
 801bd7c:	dd24      	ble.n	801bdc8 <_strtod_l+0x430>
 801bd7e:	2b16      	cmp	r3, #22
 801bd80:	dc0b      	bgt.n	801bd9a <_strtod_l+0x402>
 801bd82:	4968      	ldr	r1, [pc, #416]	; (801bf24 <_strtod_l+0x58c>)
 801bd84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd8c:	4642      	mov	r2, r8
 801bd8e:	464b      	mov	r3, r9
 801bd90:	f7e4 fc32 	bl	80005f8 <__aeabi_dmul>
 801bd94:	4680      	mov	r8, r0
 801bd96:	4689      	mov	r9, r1
 801bd98:	e639      	b.n	801ba0e <_strtod_l+0x76>
 801bd9a:	9a08      	ldr	r2, [sp, #32]
 801bd9c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801bda0:	4293      	cmp	r3, r2
 801bda2:	db20      	blt.n	801bde6 <_strtod_l+0x44e>
 801bda4:	4c5f      	ldr	r4, [pc, #380]	; (801bf24 <_strtod_l+0x58c>)
 801bda6:	f1c6 060f 	rsb	r6, r6, #15
 801bdaa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801bdae:	4642      	mov	r2, r8
 801bdb0:	464b      	mov	r3, r9
 801bdb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bdb6:	f7e4 fc1f 	bl	80005f8 <__aeabi_dmul>
 801bdba:	9b08      	ldr	r3, [sp, #32]
 801bdbc:	1b9e      	subs	r6, r3, r6
 801bdbe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801bdc2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bdc6:	e7e3      	b.n	801bd90 <_strtod_l+0x3f8>
 801bdc8:	9b08      	ldr	r3, [sp, #32]
 801bdca:	3316      	adds	r3, #22
 801bdcc:	db0b      	blt.n	801bde6 <_strtod_l+0x44e>
 801bdce:	9b05      	ldr	r3, [sp, #20]
 801bdd0:	1bdf      	subs	r7, r3, r7
 801bdd2:	4b54      	ldr	r3, [pc, #336]	; (801bf24 <_strtod_l+0x58c>)
 801bdd4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801bdd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bddc:	4640      	mov	r0, r8
 801bdde:	4649      	mov	r1, r9
 801bde0:	f7e4 fd34 	bl	800084c <__aeabi_ddiv>
 801bde4:	e7d6      	b.n	801bd94 <_strtod_l+0x3fc>
 801bde6:	9b08      	ldr	r3, [sp, #32]
 801bde8:	1b75      	subs	r5, r6, r5
 801bdea:	441d      	add	r5, r3
 801bdec:	2d00      	cmp	r5, #0
 801bdee:	dd70      	ble.n	801bed2 <_strtod_l+0x53a>
 801bdf0:	f015 030f 	ands.w	r3, r5, #15
 801bdf4:	d00a      	beq.n	801be0c <_strtod_l+0x474>
 801bdf6:	494b      	ldr	r1, [pc, #300]	; (801bf24 <_strtod_l+0x58c>)
 801bdf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bdfc:	4642      	mov	r2, r8
 801bdfe:	464b      	mov	r3, r9
 801be00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be04:	f7e4 fbf8 	bl	80005f8 <__aeabi_dmul>
 801be08:	4680      	mov	r8, r0
 801be0a:	4689      	mov	r9, r1
 801be0c:	f035 050f 	bics.w	r5, r5, #15
 801be10:	d04d      	beq.n	801beae <_strtod_l+0x516>
 801be12:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801be16:	dd22      	ble.n	801be5e <_strtod_l+0x4c6>
 801be18:	2500      	movs	r5, #0
 801be1a:	46ab      	mov	fp, r5
 801be1c:	9509      	str	r5, [sp, #36]	; 0x24
 801be1e:	9505      	str	r5, [sp, #20]
 801be20:	2322      	movs	r3, #34	; 0x22
 801be22:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801bf2c <_strtod_l+0x594>
 801be26:	6023      	str	r3, [r4, #0]
 801be28:	f04f 0800 	mov.w	r8, #0
 801be2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be2e:	2b00      	cmp	r3, #0
 801be30:	f43f aded 	beq.w	801ba0e <_strtod_l+0x76>
 801be34:	9916      	ldr	r1, [sp, #88]	; 0x58
 801be36:	4620      	mov	r0, r4
 801be38:	f7ff f924 	bl	801b084 <_Bfree>
 801be3c:	9905      	ldr	r1, [sp, #20]
 801be3e:	4620      	mov	r0, r4
 801be40:	f7ff f920 	bl	801b084 <_Bfree>
 801be44:	4659      	mov	r1, fp
 801be46:	4620      	mov	r0, r4
 801be48:	f7ff f91c 	bl	801b084 <_Bfree>
 801be4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801be4e:	4620      	mov	r0, r4
 801be50:	f7ff f918 	bl	801b084 <_Bfree>
 801be54:	4629      	mov	r1, r5
 801be56:	4620      	mov	r0, r4
 801be58:	f7ff f914 	bl	801b084 <_Bfree>
 801be5c:	e5d7      	b.n	801ba0e <_strtod_l+0x76>
 801be5e:	4b32      	ldr	r3, [pc, #200]	; (801bf28 <_strtod_l+0x590>)
 801be60:	9304      	str	r3, [sp, #16]
 801be62:	2300      	movs	r3, #0
 801be64:	112d      	asrs	r5, r5, #4
 801be66:	4640      	mov	r0, r8
 801be68:	4649      	mov	r1, r9
 801be6a:	469a      	mov	sl, r3
 801be6c:	2d01      	cmp	r5, #1
 801be6e:	dc21      	bgt.n	801beb4 <_strtod_l+0x51c>
 801be70:	b10b      	cbz	r3, 801be76 <_strtod_l+0x4de>
 801be72:	4680      	mov	r8, r0
 801be74:	4689      	mov	r9, r1
 801be76:	492c      	ldr	r1, [pc, #176]	; (801bf28 <_strtod_l+0x590>)
 801be78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801be7c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801be80:	4642      	mov	r2, r8
 801be82:	464b      	mov	r3, r9
 801be84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be88:	f7e4 fbb6 	bl	80005f8 <__aeabi_dmul>
 801be8c:	4b27      	ldr	r3, [pc, #156]	; (801bf2c <_strtod_l+0x594>)
 801be8e:	460a      	mov	r2, r1
 801be90:	400b      	ands	r3, r1
 801be92:	4927      	ldr	r1, [pc, #156]	; (801bf30 <_strtod_l+0x598>)
 801be94:	428b      	cmp	r3, r1
 801be96:	4680      	mov	r8, r0
 801be98:	d8be      	bhi.n	801be18 <_strtod_l+0x480>
 801be9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801be9e:	428b      	cmp	r3, r1
 801bea0:	bf86      	itte	hi
 801bea2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801bf34 <_strtod_l+0x59c>
 801bea6:	f04f 38ff 	movhi.w	r8, #4294967295
 801beaa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801beae:	2300      	movs	r3, #0
 801beb0:	9304      	str	r3, [sp, #16]
 801beb2:	e07b      	b.n	801bfac <_strtod_l+0x614>
 801beb4:	07ea      	lsls	r2, r5, #31
 801beb6:	d505      	bpl.n	801bec4 <_strtod_l+0x52c>
 801beb8:	9b04      	ldr	r3, [sp, #16]
 801beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bebe:	f7e4 fb9b 	bl	80005f8 <__aeabi_dmul>
 801bec2:	2301      	movs	r3, #1
 801bec4:	9a04      	ldr	r2, [sp, #16]
 801bec6:	3208      	adds	r2, #8
 801bec8:	f10a 0a01 	add.w	sl, sl, #1
 801becc:	106d      	asrs	r5, r5, #1
 801bece:	9204      	str	r2, [sp, #16]
 801bed0:	e7cc      	b.n	801be6c <_strtod_l+0x4d4>
 801bed2:	d0ec      	beq.n	801beae <_strtod_l+0x516>
 801bed4:	426d      	negs	r5, r5
 801bed6:	f015 020f 	ands.w	r2, r5, #15
 801beda:	d00a      	beq.n	801bef2 <_strtod_l+0x55a>
 801bedc:	4b11      	ldr	r3, [pc, #68]	; (801bf24 <_strtod_l+0x58c>)
 801bede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bee2:	4640      	mov	r0, r8
 801bee4:	4649      	mov	r1, r9
 801bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beea:	f7e4 fcaf 	bl	800084c <__aeabi_ddiv>
 801beee:	4680      	mov	r8, r0
 801bef0:	4689      	mov	r9, r1
 801bef2:	112d      	asrs	r5, r5, #4
 801bef4:	d0db      	beq.n	801beae <_strtod_l+0x516>
 801bef6:	2d1f      	cmp	r5, #31
 801bef8:	dd1e      	ble.n	801bf38 <_strtod_l+0x5a0>
 801befa:	2500      	movs	r5, #0
 801befc:	46ab      	mov	fp, r5
 801befe:	9509      	str	r5, [sp, #36]	; 0x24
 801bf00:	9505      	str	r5, [sp, #20]
 801bf02:	2322      	movs	r3, #34	; 0x22
 801bf04:	f04f 0800 	mov.w	r8, #0
 801bf08:	f04f 0900 	mov.w	r9, #0
 801bf0c:	6023      	str	r3, [r4, #0]
 801bf0e:	e78d      	b.n	801be2c <_strtod_l+0x494>
 801bf10:	0801fc95 	.word	0x0801fc95
 801bf14:	0801febc 	.word	0x0801febc
 801bf18:	0801fc8d 	.word	0x0801fc8d
 801bf1c:	0801fcc4 	.word	0x0801fcc4
 801bf20:	0802004d 	.word	0x0802004d
 801bf24:	0801fdd0 	.word	0x0801fdd0
 801bf28:	0801fda8 	.word	0x0801fda8
 801bf2c:	7ff00000 	.word	0x7ff00000
 801bf30:	7ca00000 	.word	0x7ca00000
 801bf34:	7fefffff 	.word	0x7fefffff
 801bf38:	f015 0310 	ands.w	r3, r5, #16
 801bf3c:	bf18      	it	ne
 801bf3e:	236a      	movne	r3, #106	; 0x6a
 801bf40:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801c2e4 <_strtod_l+0x94c>
 801bf44:	9304      	str	r3, [sp, #16]
 801bf46:	4640      	mov	r0, r8
 801bf48:	4649      	mov	r1, r9
 801bf4a:	2300      	movs	r3, #0
 801bf4c:	07ea      	lsls	r2, r5, #31
 801bf4e:	d504      	bpl.n	801bf5a <_strtod_l+0x5c2>
 801bf50:	e9da 2300 	ldrd	r2, r3, [sl]
 801bf54:	f7e4 fb50 	bl	80005f8 <__aeabi_dmul>
 801bf58:	2301      	movs	r3, #1
 801bf5a:	106d      	asrs	r5, r5, #1
 801bf5c:	f10a 0a08 	add.w	sl, sl, #8
 801bf60:	d1f4      	bne.n	801bf4c <_strtod_l+0x5b4>
 801bf62:	b10b      	cbz	r3, 801bf68 <_strtod_l+0x5d0>
 801bf64:	4680      	mov	r8, r0
 801bf66:	4689      	mov	r9, r1
 801bf68:	9b04      	ldr	r3, [sp, #16]
 801bf6a:	b1bb      	cbz	r3, 801bf9c <_strtod_l+0x604>
 801bf6c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801bf70:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	4649      	mov	r1, r9
 801bf78:	dd10      	ble.n	801bf9c <_strtod_l+0x604>
 801bf7a:	2b1f      	cmp	r3, #31
 801bf7c:	f340 811e 	ble.w	801c1bc <_strtod_l+0x824>
 801bf80:	2b34      	cmp	r3, #52	; 0x34
 801bf82:	bfde      	ittt	le
 801bf84:	f04f 33ff 	movle.w	r3, #4294967295
 801bf88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801bf8c:	4093      	lslle	r3, r2
 801bf8e:	f04f 0800 	mov.w	r8, #0
 801bf92:	bfcc      	ite	gt
 801bf94:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801bf98:	ea03 0901 	andle.w	r9, r3, r1
 801bf9c:	2200      	movs	r2, #0
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	4640      	mov	r0, r8
 801bfa2:	4649      	mov	r1, r9
 801bfa4:	f7e4 fd90 	bl	8000ac8 <__aeabi_dcmpeq>
 801bfa8:	2800      	cmp	r0, #0
 801bfaa:	d1a6      	bne.n	801befa <_strtod_l+0x562>
 801bfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfae:	9300      	str	r3, [sp, #0]
 801bfb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bfb2:	4633      	mov	r3, r6
 801bfb4:	465a      	mov	r2, fp
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	f7ff f8cc 	bl	801b154 <__s2b>
 801bfbc:	9009      	str	r0, [sp, #36]	; 0x24
 801bfbe:	2800      	cmp	r0, #0
 801bfc0:	f43f af2a 	beq.w	801be18 <_strtod_l+0x480>
 801bfc4:	9a08      	ldr	r2, [sp, #32]
 801bfc6:	9b05      	ldr	r3, [sp, #20]
 801bfc8:	2a00      	cmp	r2, #0
 801bfca:	eba3 0307 	sub.w	r3, r3, r7
 801bfce:	bfa8      	it	ge
 801bfd0:	2300      	movge	r3, #0
 801bfd2:	930c      	str	r3, [sp, #48]	; 0x30
 801bfd4:	2500      	movs	r5, #0
 801bfd6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801bfda:	9312      	str	r3, [sp, #72]	; 0x48
 801bfdc:	46ab      	mov	fp, r5
 801bfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfe0:	4620      	mov	r0, r4
 801bfe2:	6859      	ldr	r1, [r3, #4]
 801bfe4:	f7ff f80e 	bl	801b004 <_Balloc>
 801bfe8:	9005      	str	r0, [sp, #20]
 801bfea:	2800      	cmp	r0, #0
 801bfec:	f43f af18 	beq.w	801be20 <_strtod_l+0x488>
 801bff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bff2:	691a      	ldr	r2, [r3, #16]
 801bff4:	3202      	adds	r2, #2
 801bff6:	f103 010c 	add.w	r1, r3, #12
 801bffa:	0092      	lsls	r2, r2, #2
 801bffc:	300c      	adds	r0, #12
 801bffe:	f7fe f873 	bl	801a0e8 <memcpy>
 801c002:	ec49 8b10 	vmov	d0, r8, r9
 801c006:	aa18      	add	r2, sp, #96	; 0x60
 801c008:	a917      	add	r1, sp, #92	; 0x5c
 801c00a:	4620      	mov	r0, r4
 801c00c:	f7ff fbd6 	bl	801b7bc <__d2b>
 801c010:	ec49 8b18 	vmov	d8, r8, r9
 801c014:	9016      	str	r0, [sp, #88]	; 0x58
 801c016:	2800      	cmp	r0, #0
 801c018:	f43f af02 	beq.w	801be20 <_strtod_l+0x488>
 801c01c:	2101      	movs	r1, #1
 801c01e:	4620      	mov	r0, r4
 801c020:	f7ff f930 	bl	801b284 <__i2b>
 801c024:	4683      	mov	fp, r0
 801c026:	2800      	cmp	r0, #0
 801c028:	f43f aefa 	beq.w	801be20 <_strtod_l+0x488>
 801c02c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c02e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c030:	2e00      	cmp	r6, #0
 801c032:	bfab      	itete	ge
 801c034:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801c036:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801c038:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801c03a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801c03e:	bfac      	ite	ge
 801c040:	eb06 0a03 	addge.w	sl, r6, r3
 801c044:	1b9f      	sublt	r7, r3, r6
 801c046:	9b04      	ldr	r3, [sp, #16]
 801c048:	1af6      	subs	r6, r6, r3
 801c04a:	4416      	add	r6, r2
 801c04c:	4ba0      	ldr	r3, [pc, #640]	; (801c2d0 <_strtod_l+0x938>)
 801c04e:	3e01      	subs	r6, #1
 801c050:	429e      	cmp	r6, r3
 801c052:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c056:	f280 80c4 	bge.w	801c1e2 <_strtod_l+0x84a>
 801c05a:	1b9b      	subs	r3, r3, r6
 801c05c:	2b1f      	cmp	r3, #31
 801c05e:	eba2 0203 	sub.w	r2, r2, r3
 801c062:	f04f 0101 	mov.w	r1, #1
 801c066:	f300 80b0 	bgt.w	801c1ca <_strtod_l+0x832>
 801c06a:	fa01 f303 	lsl.w	r3, r1, r3
 801c06e:	930e      	str	r3, [sp, #56]	; 0x38
 801c070:	2300      	movs	r3, #0
 801c072:	930d      	str	r3, [sp, #52]	; 0x34
 801c074:	eb0a 0602 	add.w	r6, sl, r2
 801c078:	9b04      	ldr	r3, [sp, #16]
 801c07a:	45b2      	cmp	sl, r6
 801c07c:	4417      	add	r7, r2
 801c07e:	441f      	add	r7, r3
 801c080:	4653      	mov	r3, sl
 801c082:	bfa8      	it	ge
 801c084:	4633      	movge	r3, r6
 801c086:	42bb      	cmp	r3, r7
 801c088:	bfa8      	it	ge
 801c08a:	463b      	movge	r3, r7
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	bfc2      	ittt	gt
 801c090:	1af6      	subgt	r6, r6, r3
 801c092:	1aff      	subgt	r7, r7, r3
 801c094:	ebaa 0a03 	subgt.w	sl, sl, r3
 801c098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	dd17      	ble.n	801c0ce <_strtod_l+0x736>
 801c09e:	4659      	mov	r1, fp
 801c0a0:	461a      	mov	r2, r3
 801c0a2:	4620      	mov	r0, r4
 801c0a4:	f7ff f9ae 	bl	801b404 <__pow5mult>
 801c0a8:	4683      	mov	fp, r0
 801c0aa:	2800      	cmp	r0, #0
 801c0ac:	f43f aeb8 	beq.w	801be20 <_strtod_l+0x488>
 801c0b0:	4601      	mov	r1, r0
 801c0b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	f7ff f8fb 	bl	801b2b0 <__multiply>
 801c0ba:	900b      	str	r0, [sp, #44]	; 0x2c
 801c0bc:	2800      	cmp	r0, #0
 801c0be:	f43f aeaf 	beq.w	801be20 <_strtod_l+0x488>
 801c0c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c0c4:	4620      	mov	r0, r4
 801c0c6:	f7fe ffdd 	bl	801b084 <_Bfree>
 801c0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0cc:	9316      	str	r3, [sp, #88]	; 0x58
 801c0ce:	2e00      	cmp	r6, #0
 801c0d0:	f300 808c 	bgt.w	801c1ec <_strtod_l+0x854>
 801c0d4:	9b08      	ldr	r3, [sp, #32]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	dd08      	ble.n	801c0ec <_strtod_l+0x754>
 801c0da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c0dc:	9905      	ldr	r1, [sp, #20]
 801c0de:	4620      	mov	r0, r4
 801c0e0:	f7ff f990 	bl	801b404 <__pow5mult>
 801c0e4:	9005      	str	r0, [sp, #20]
 801c0e6:	2800      	cmp	r0, #0
 801c0e8:	f43f ae9a 	beq.w	801be20 <_strtod_l+0x488>
 801c0ec:	2f00      	cmp	r7, #0
 801c0ee:	dd08      	ble.n	801c102 <_strtod_l+0x76a>
 801c0f0:	9905      	ldr	r1, [sp, #20]
 801c0f2:	463a      	mov	r2, r7
 801c0f4:	4620      	mov	r0, r4
 801c0f6:	f7ff f9df 	bl	801b4b8 <__lshift>
 801c0fa:	9005      	str	r0, [sp, #20]
 801c0fc:	2800      	cmp	r0, #0
 801c0fe:	f43f ae8f 	beq.w	801be20 <_strtod_l+0x488>
 801c102:	f1ba 0f00 	cmp.w	sl, #0
 801c106:	dd08      	ble.n	801c11a <_strtod_l+0x782>
 801c108:	4659      	mov	r1, fp
 801c10a:	4652      	mov	r2, sl
 801c10c:	4620      	mov	r0, r4
 801c10e:	f7ff f9d3 	bl	801b4b8 <__lshift>
 801c112:	4683      	mov	fp, r0
 801c114:	2800      	cmp	r0, #0
 801c116:	f43f ae83 	beq.w	801be20 <_strtod_l+0x488>
 801c11a:	9a05      	ldr	r2, [sp, #20]
 801c11c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c11e:	4620      	mov	r0, r4
 801c120:	f7ff fa52 	bl	801b5c8 <__mdiff>
 801c124:	4605      	mov	r5, r0
 801c126:	2800      	cmp	r0, #0
 801c128:	f43f ae7a 	beq.w	801be20 <_strtod_l+0x488>
 801c12c:	68c3      	ldr	r3, [r0, #12]
 801c12e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c130:	2300      	movs	r3, #0
 801c132:	60c3      	str	r3, [r0, #12]
 801c134:	4659      	mov	r1, fp
 801c136:	f7ff fa2b 	bl	801b590 <__mcmp>
 801c13a:	2800      	cmp	r0, #0
 801c13c:	da60      	bge.n	801c200 <_strtod_l+0x868>
 801c13e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c140:	ea53 0308 	orrs.w	r3, r3, r8
 801c144:	f040 8084 	bne.w	801c250 <_strtod_l+0x8b8>
 801c148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d17f      	bne.n	801c250 <_strtod_l+0x8b8>
 801c150:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c154:	0d1b      	lsrs	r3, r3, #20
 801c156:	051b      	lsls	r3, r3, #20
 801c158:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c15c:	d978      	bls.n	801c250 <_strtod_l+0x8b8>
 801c15e:	696b      	ldr	r3, [r5, #20]
 801c160:	b913      	cbnz	r3, 801c168 <_strtod_l+0x7d0>
 801c162:	692b      	ldr	r3, [r5, #16]
 801c164:	2b01      	cmp	r3, #1
 801c166:	dd73      	ble.n	801c250 <_strtod_l+0x8b8>
 801c168:	4629      	mov	r1, r5
 801c16a:	2201      	movs	r2, #1
 801c16c:	4620      	mov	r0, r4
 801c16e:	f7ff f9a3 	bl	801b4b8 <__lshift>
 801c172:	4659      	mov	r1, fp
 801c174:	4605      	mov	r5, r0
 801c176:	f7ff fa0b 	bl	801b590 <__mcmp>
 801c17a:	2800      	cmp	r0, #0
 801c17c:	dd68      	ble.n	801c250 <_strtod_l+0x8b8>
 801c17e:	9904      	ldr	r1, [sp, #16]
 801c180:	4a54      	ldr	r2, [pc, #336]	; (801c2d4 <_strtod_l+0x93c>)
 801c182:	464b      	mov	r3, r9
 801c184:	2900      	cmp	r1, #0
 801c186:	f000 8084 	beq.w	801c292 <_strtod_l+0x8fa>
 801c18a:	ea02 0109 	and.w	r1, r2, r9
 801c18e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c192:	dc7e      	bgt.n	801c292 <_strtod_l+0x8fa>
 801c194:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c198:	f77f aeb3 	ble.w	801bf02 <_strtod_l+0x56a>
 801c19c:	4b4e      	ldr	r3, [pc, #312]	; (801c2d8 <_strtod_l+0x940>)
 801c19e:	4640      	mov	r0, r8
 801c1a0:	4649      	mov	r1, r9
 801c1a2:	2200      	movs	r2, #0
 801c1a4:	f7e4 fa28 	bl	80005f8 <__aeabi_dmul>
 801c1a8:	4b4a      	ldr	r3, [pc, #296]	; (801c2d4 <_strtod_l+0x93c>)
 801c1aa:	400b      	ands	r3, r1
 801c1ac:	4680      	mov	r8, r0
 801c1ae:	4689      	mov	r9, r1
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	f47f ae3f 	bne.w	801be34 <_strtod_l+0x49c>
 801c1b6:	2322      	movs	r3, #34	; 0x22
 801c1b8:	6023      	str	r3, [r4, #0]
 801c1ba:	e63b      	b.n	801be34 <_strtod_l+0x49c>
 801c1bc:	f04f 32ff 	mov.w	r2, #4294967295
 801c1c0:	fa02 f303 	lsl.w	r3, r2, r3
 801c1c4:	ea03 0808 	and.w	r8, r3, r8
 801c1c8:	e6e8      	b.n	801bf9c <_strtod_l+0x604>
 801c1ca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801c1ce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801c1d2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801c1d6:	36e2      	adds	r6, #226	; 0xe2
 801c1d8:	fa01 f306 	lsl.w	r3, r1, r6
 801c1dc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801c1e0:	e748      	b.n	801c074 <_strtod_l+0x6dc>
 801c1e2:	2100      	movs	r1, #0
 801c1e4:	2301      	movs	r3, #1
 801c1e6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801c1ea:	e743      	b.n	801c074 <_strtod_l+0x6dc>
 801c1ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c1ee:	4632      	mov	r2, r6
 801c1f0:	4620      	mov	r0, r4
 801c1f2:	f7ff f961 	bl	801b4b8 <__lshift>
 801c1f6:	9016      	str	r0, [sp, #88]	; 0x58
 801c1f8:	2800      	cmp	r0, #0
 801c1fa:	f47f af6b 	bne.w	801c0d4 <_strtod_l+0x73c>
 801c1fe:	e60f      	b.n	801be20 <_strtod_l+0x488>
 801c200:	46ca      	mov	sl, r9
 801c202:	d171      	bne.n	801c2e8 <_strtod_l+0x950>
 801c204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c206:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c20a:	b352      	cbz	r2, 801c262 <_strtod_l+0x8ca>
 801c20c:	4a33      	ldr	r2, [pc, #204]	; (801c2dc <_strtod_l+0x944>)
 801c20e:	4293      	cmp	r3, r2
 801c210:	d12a      	bne.n	801c268 <_strtod_l+0x8d0>
 801c212:	9b04      	ldr	r3, [sp, #16]
 801c214:	4641      	mov	r1, r8
 801c216:	b1fb      	cbz	r3, 801c258 <_strtod_l+0x8c0>
 801c218:	4b2e      	ldr	r3, [pc, #184]	; (801c2d4 <_strtod_l+0x93c>)
 801c21a:	ea09 0303 	and.w	r3, r9, r3
 801c21e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c222:	f04f 32ff 	mov.w	r2, #4294967295
 801c226:	d81a      	bhi.n	801c25e <_strtod_l+0x8c6>
 801c228:	0d1b      	lsrs	r3, r3, #20
 801c22a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c22e:	fa02 f303 	lsl.w	r3, r2, r3
 801c232:	4299      	cmp	r1, r3
 801c234:	d118      	bne.n	801c268 <_strtod_l+0x8d0>
 801c236:	4b2a      	ldr	r3, [pc, #168]	; (801c2e0 <_strtod_l+0x948>)
 801c238:	459a      	cmp	sl, r3
 801c23a:	d102      	bne.n	801c242 <_strtod_l+0x8aa>
 801c23c:	3101      	adds	r1, #1
 801c23e:	f43f adef 	beq.w	801be20 <_strtod_l+0x488>
 801c242:	4b24      	ldr	r3, [pc, #144]	; (801c2d4 <_strtod_l+0x93c>)
 801c244:	ea0a 0303 	and.w	r3, sl, r3
 801c248:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801c24c:	f04f 0800 	mov.w	r8, #0
 801c250:	9b04      	ldr	r3, [sp, #16]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d1a2      	bne.n	801c19c <_strtod_l+0x804>
 801c256:	e5ed      	b.n	801be34 <_strtod_l+0x49c>
 801c258:	f04f 33ff 	mov.w	r3, #4294967295
 801c25c:	e7e9      	b.n	801c232 <_strtod_l+0x89a>
 801c25e:	4613      	mov	r3, r2
 801c260:	e7e7      	b.n	801c232 <_strtod_l+0x89a>
 801c262:	ea53 0308 	orrs.w	r3, r3, r8
 801c266:	d08a      	beq.n	801c17e <_strtod_l+0x7e6>
 801c268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c26a:	b1e3      	cbz	r3, 801c2a6 <_strtod_l+0x90e>
 801c26c:	ea13 0f0a 	tst.w	r3, sl
 801c270:	d0ee      	beq.n	801c250 <_strtod_l+0x8b8>
 801c272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c274:	9a04      	ldr	r2, [sp, #16]
 801c276:	4640      	mov	r0, r8
 801c278:	4649      	mov	r1, r9
 801c27a:	b1c3      	cbz	r3, 801c2ae <_strtod_l+0x916>
 801c27c:	f7ff fb6f 	bl	801b95e <sulp>
 801c280:	4602      	mov	r2, r0
 801c282:	460b      	mov	r3, r1
 801c284:	ec51 0b18 	vmov	r0, r1, d8
 801c288:	f7e4 f800 	bl	800028c <__adddf3>
 801c28c:	4680      	mov	r8, r0
 801c28e:	4689      	mov	r9, r1
 801c290:	e7de      	b.n	801c250 <_strtod_l+0x8b8>
 801c292:	4013      	ands	r3, r2
 801c294:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c298:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801c29c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801c2a0:	f04f 38ff 	mov.w	r8, #4294967295
 801c2a4:	e7d4      	b.n	801c250 <_strtod_l+0x8b8>
 801c2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2a8:	ea13 0f08 	tst.w	r3, r8
 801c2ac:	e7e0      	b.n	801c270 <_strtod_l+0x8d8>
 801c2ae:	f7ff fb56 	bl	801b95e <sulp>
 801c2b2:	4602      	mov	r2, r0
 801c2b4:	460b      	mov	r3, r1
 801c2b6:	ec51 0b18 	vmov	r0, r1, d8
 801c2ba:	f7e3 ffe5 	bl	8000288 <__aeabi_dsub>
 801c2be:	2200      	movs	r2, #0
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	4680      	mov	r8, r0
 801c2c4:	4689      	mov	r9, r1
 801c2c6:	f7e4 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 801c2ca:	2800      	cmp	r0, #0
 801c2cc:	d0c0      	beq.n	801c250 <_strtod_l+0x8b8>
 801c2ce:	e618      	b.n	801bf02 <_strtod_l+0x56a>
 801c2d0:	fffffc02 	.word	0xfffffc02
 801c2d4:	7ff00000 	.word	0x7ff00000
 801c2d8:	39500000 	.word	0x39500000
 801c2dc:	000fffff 	.word	0x000fffff
 801c2e0:	7fefffff 	.word	0x7fefffff
 801c2e4:	0801fed0 	.word	0x0801fed0
 801c2e8:	4659      	mov	r1, fp
 801c2ea:	4628      	mov	r0, r5
 801c2ec:	f7ff fac0 	bl	801b870 <__ratio>
 801c2f0:	ec57 6b10 	vmov	r6, r7, d0
 801c2f4:	ee10 0a10 	vmov	r0, s0
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c2fe:	4639      	mov	r1, r7
 801c300:	f7e4 fbf6 	bl	8000af0 <__aeabi_dcmple>
 801c304:	2800      	cmp	r0, #0
 801c306:	d071      	beq.n	801c3ec <_strtod_l+0xa54>
 801c308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d17c      	bne.n	801c408 <_strtod_l+0xa70>
 801c30e:	f1b8 0f00 	cmp.w	r8, #0
 801c312:	d15a      	bne.n	801c3ca <_strtod_l+0xa32>
 801c314:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d15d      	bne.n	801c3d8 <_strtod_l+0xa40>
 801c31c:	4b90      	ldr	r3, [pc, #576]	; (801c560 <_strtod_l+0xbc8>)
 801c31e:	2200      	movs	r2, #0
 801c320:	4630      	mov	r0, r6
 801c322:	4639      	mov	r1, r7
 801c324:	f7e4 fbda 	bl	8000adc <__aeabi_dcmplt>
 801c328:	2800      	cmp	r0, #0
 801c32a:	d15c      	bne.n	801c3e6 <_strtod_l+0xa4e>
 801c32c:	4630      	mov	r0, r6
 801c32e:	4639      	mov	r1, r7
 801c330:	4b8c      	ldr	r3, [pc, #560]	; (801c564 <_strtod_l+0xbcc>)
 801c332:	2200      	movs	r2, #0
 801c334:	f7e4 f960 	bl	80005f8 <__aeabi_dmul>
 801c338:	4606      	mov	r6, r0
 801c33a:	460f      	mov	r7, r1
 801c33c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801c340:	9606      	str	r6, [sp, #24]
 801c342:	9307      	str	r3, [sp, #28]
 801c344:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c348:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801c34c:	4b86      	ldr	r3, [pc, #536]	; (801c568 <_strtod_l+0xbd0>)
 801c34e:	ea0a 0303 	and.w	r3, sl, r3
 801c352:	930d      	str	r3, [sp, #52]	; 0x34
 801c354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c356:	4b85      	ldr	r3, [pc, #532]	; (801c56c <_strtod_l+0xbd4>)
 801c358:	429a      	cmp	r2, r3
 801c35a:	f040 8090 	bne.w	801c47e <_strtod_l+0xae6>
 801c35e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801c362:	ec49 8b10 	vmov	d0, r8, r9
 801c366:	f7ff f9b9 	bl	801b6dc <__ulp>
 801c36a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c36e:	ec51 0b10 	vmov	r0, r1, d0
 801c372:	f7e4 f941 	bl	80005f8 <__aeabi_dmul>
 801c376:	4642      	mov	r2, r8
 801c378:	464b      	mov	r3, r9
 801c37a:	f7e3 ff87 	bl	800028c <__adddf3>
 801c37e:	460b      	mov	r3, r1
 801c380:	4979      	ldr	r1, [pc, #484]	; (801c568 <_strtod_l+0xbd0>)
 801c382:	4a7b      	ldr	r2, [pc, #492]	; (801c570 <_strtod_l+0xbd8>)
 801c384:	4019      	ands	r1, r3
 801c386:	4291      	cmp	r1, r2
 801c388:	4680      	mov	r8, r0
 801c38a:	d944      	bls.n	801c416 <_strtod_l+0xa7e>
 801c38c:	ee18 2a90 	vmov	r2, s17
 801c390:	4b78      	ldr	r3, [pc, #480]	; (801c574 <_strtod_l+0xbdc>)
 801c392:	429a      	cmp	r2, r3
 801c394:	d104      	bne.n	801c3a0 <_strtod_l+0xa08>
 801c396:	ee18 3a10 	vmov	r3, s16
 801c39a:	3301      	adds	r3, #1
 801c39c:	f43f ad40 	beq.w	801be20 <_strtod_l+0x488>
 801c3a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801c574 <_strtod_l+0xbdc>
 801c3a4:	f04f 38ff 	mov.w	r8, #4294967295
 801c3a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c3aa:	4620      	mov	r0, r4
 801c3ac:	f7fe fe6a 	bl	801b084 <_Bfree>
 801c3b0:	9905      	ldr	r1, [sp, #20]
 801c3b2:	4620      	mov	r0, r4
 801c3b4:	f7fe fe66 	bl	801b084 <_Bfree>
 801c3b8:	4659      	mov	r1, fp
 801c3ba:	4620      	mov	r0, r4
 801c3bc:	f7fe fe62 	bl	801b084 <_Bfree>
 801c3c0:	4629      	mov	r1, r5
 801c3c2:	4620      	mov	r0, r4
 801c3c4:	f7fe fe5e 	bl	801b084 <_Bfree>
 801c3c8:	e609      	b.n	801bfde <_strtod_l+0x646>
 801c3ca:	f1b8 0f01 	cmp.w	r8, #1
 801c3ce:	d103      	bne.n	801c3d8 <_strtod_l+0xa40>
 801c3d0:	f1b9 0f00 	cmp.w	r9, #0
 801c3d4:	f43f ad95 	beq.w	801bf02 <_strtod_l+0x56a>
 801c3d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801c530 <_strtod_l+0xb98>
 801c3dc:	4f60      	ldr	r7, [pc, #384]	; (801c560 <_strtod_l+0xbc8>)
 801c3de:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c3e2:	2600      	movs	r6, #0
 801c3e4:	e7ae      	b.n	801c344 <_strtod_l+0x9ac>
 801c3e6:	4f5f      	ldr	r7, [pc, #380]	; (801c564 <_strtod_l+0xbcc>)
 801c3e8:	2600      	movs	r6, #0
 801c3ea:	e7a7      	b.n	801c33c <_strtod_l+0x9a4>
 801c3ec:	4b5d      	ldr	r3, [pc, #372]	; (801c564 <_strtod_l+0xbcc>)
 801c3ee:	4630      	mov	r0, r6
 801c3f0:	4639      	mov	r1, r7
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	f7e4 f900 	bl	80005f8 <__aeabi_dmul>
 801c3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c3fa:	4606      	mov	r6, r0
 801c3fc:	460f      	mov	r7, r1
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d09c      	beq.n	801c33c <_strtod_l+0x9a4>
 801c402:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801c406:	e79d      	b.n	801c344 <_strtod_l+0x9ac>
 801c408:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801c538 <_strtod_l+0xba0>
 801c40c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c410:	ec57 6b17 	vmov	r6, r7, d7
 801c414:	e796      	b.n	801c344 <_strtod_l+0x9ac>
 801c416:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801c41a:	9b04      	ldr	r3, [sp, #16]
 801c41c:	46ca      	mov	sl, r9
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d1c2      	bne.n	801c3a8 <_strtod_l+0xa10>
 801c422:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c428:	0d1b      	lsrs	r3, r3, #20
 801c42a:	051b      	lsls	r3, r3, #20
 801c42c:	429a      	cmp	r2, r3
 801c42e:	d1bb      	bne.n	801c3a8 <_strtod_l+0xa10>
 801c430:	4630      	mov	r0, r6
 801c432:	4639      	mov	r1, r7
 801c434:	f7e4 fc40 	bl	8000cb8 <__aeabi_d2lz>
 801c438:	f7e4 f8b0 	bl	800059c <__aeabi_l2d>
 801c43c:	4602      	mov	r2, r0
 801c43e:	460b      	mov	r3, r1
 801c440:	4630      	mov	r0, r6
 801c442:	4639      	mov	r1, r7
 801c444:	f7e3 ff20 	bl	8000288 <__aeabi_dsub>
 801c448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c44a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c44e:	ea43 0308 	orr.w	r3, r3, r8
 801c452:	4313      	orrs	r3, r2
 801c454:	4606      	mov	r6, r0
 801c456:	460f      	mov	r7, r1
 801c458:	d054      	beq.n	801c504 <_strtod_l+0xb6c>
 801c45a:	a339      	add	r3, pc, #228	; (adr r3, 801c540 <_strtod_l+0xba8>)
 801c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c460:	f7e4 fb3c 	bl	8000adc <__aeabi_dcmplt>
 801c464:	2800      	cmp	r0, #0
 801c466:	f47f ace5 	bne.w	801be34 <_strtod_l+0x49c>
 801c46a:	a337      	add	r3, pc, #220	; (adr r3, 801c548 <_strtod_l+0xbb0>)
 801c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c470:	4630      	mov	r0, r6
 801c472:	4639      	mov	r1, r7
 801c474:	f7e4 fb50 	bl	8000b18 <__aeabi_dcmpgt>
 801c478:	2800      	cmp	r0, #0
 801c47a:	d095      	beq.n	801c3a8 <_strtod_l+0xa10>
 801c47c:	e4da      	b.n	801be34 <_strtod_l+0x49c>
 801c47e:	9b04      	ldr	r3, [sp, #16]
 801c480:	b333      	cbz	r3, 801c4d0 <_strtod_l+0xb38>
 801c482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c484:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c488:	d822      	bhi.n	801c4d0 <_strtod_l+0xb38>
 801c48a:	a331      	add	r3, pc, #196	; (adr r3, 801c550 <_strtod_l+0xbb8>)
 801c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c490:	4630      	mov	r0, r6
 801c492:	4639      	mov	r1, r7
 801c494:	f7e4 fb2c 	bl	8000af0 <__aeabi_dcmple>
 801c498:	b1a0      	cbz	r0, 801c4c4 <_strtod_l+0xb2c>
 801c49a:	4639      	mov	r1, r7
 801c49c:	4630      	mov	r0, r6
 801c49e:	f7e4 fb83 	bl	8000ba8 <__aeabi_d2uiz>
 801c4a2:	2801      	cmp	r0, #1
 801c4a4:	bf38      	it	cc
 801c4a6:	2001      	movcc	r0, #1
 801c4a8:	f7e4 f82c 	bl	8000504 <__aeabi_ui2d>
 801c4ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c4ae:	4606      	mov	r6, r0
 801c4b0:	460f      	mov	r7, r1
 801c4b2:	bb23      	cbnz	r3, 801c4fe <_strtod_l+0xb66>
 801c4b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c4b8:	9010      	str	r0, [sp, #64]	; 0x40
 801c4ba:	9311      	str	r3, [sp, #68]	; 0x44
 801c4bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801c4c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801c4c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c4c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c4cc:	1a9b      	subs	r3, r3, r2
 801c4ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801c4d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801c4d4:	eeb0 0a48 	vmov.f32	s0, s16
 801c4d8:	eef0 0a68 	vmov.f32	s1, s17
 801c4dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801c4e0:	f7ff f8fc 	bl	801b6dc <__ulp>
 801c4e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801c4e8:	ec53 2b10 	vmov	r2, r3, d0
 801c4ec:	f7e4 f884 	bl	80005f8 <__aeabi_dmul>
 801c4f0:	ec53 2b18 	vmov	r2, r3, d8
 801c4f4:	f7e3 feca 	bl	800028c <__adddf3>
 801c4f8:	4680      	mov	r8, r0
 801c4fa:	4689      	mov	r9, r1
 801c4fc:	e78d      	b.n	801c41a <_strtod_l+0xa82>
 801c4fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801c502:	e7db      	b.n	801c4bc <_strtod_l+0xb24>
 801c504:	a314      	add	r3, pc, #80	; (adr r3, 801c558 <_strtod_l+0xbc0>)
 801c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c50a:	f7e4 fae7 	bl	8000adc <__aeabi_dcmplt>
 801c50e:	e7b3      	b.n	801c478 <_strtod_l+0xae0>
 801c510:	2300      	movs	r3, #0
 801c512:	930a      	str	r3, [sp, #40]	; 0x28
 801c514:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c518:	6013      	str	r3, [r2, #0]
 801c51a:	f7ff ba7c 	b.w	801ba16 <_strtod_l+0x7e>
 801c51e:	2a65      	cmp	r2, #101	; 0x65
 801c520:	f43f ab75 	beq.w	801bc0e <_strtod_l+0x276>
 801c524:	2a45      	cmp	r2, #69	; 0x45
 801c526:	f43f ab72 	beq.w	801bc0e <_strtod_l+0x276>
 801c52a:	2301      	movs	r3, #1
 801c52c:	f7ff bbaa 	b.w	801bc84 <_strtod_l+0x2ec>
 801c530:	00000000 	.word	0x00000000
 801c534:	bff00000 	.word	0xbff00000
 801c538:	00000000 	.word	0x00000000
 801c53c:	3ff00000 	.word	0x3ff00000
 801c540:	94a03595 	.word	0x94a03595
 801c544:	3fdfffff 	.word	0x3fdfffff
 801c548:	35afe535 	.word	0x35afe535
 801c54c:	3fe00000 	.word	0x3fe00000
 801c550:	ffc00000 	.word	0xffc00000
 801c554:	41dfffff 	.word	0x41dfffff
 801c558:	94a03595 	.word	0x94a03595
 801c55c:	3fcfffff 	.word	0x3fcfffff
 801c560:	3ff00000 	.word	0x3ff00000
 801c564:	3fe00000 	.word	0x3fe00000
 801c568:	7ff00000 	.word	0x7ff00000
 801c56c:	7fe00000 	.word	0x7fe00000
 801c570:	7c9fffff 	.word	0x7c9fffff
 801c574:	7fefffff 	.word	0x7fefffff

0801c578 <_strtod_r>:
 801c578:	4b01      	ldr	r3, [pc, #4]	; (801c580 <_strtod_r+0x8>)
 801c57a:	f7ff ba0d 	b.w	801b998 <_strtod_l>
 801c57e:	bf00      	nop
 801c580:	20000168 	.word	0x20000168

0801c584 <_strtol_l.constprop.0>:
 801c584:	2b01      	cmp	r3, #1
 801c586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c58a:	d001      	beq.n	801c590 <_strtol_l.constprop.0+0xc>
 801c58c:	2b24      	cmp	r3, #36	; 0x24
 801c58e:	d906      	bls.n	801c59e <_strtol_l.constprop.0+0x1a>
 801c590:	f7fd fd7e 	bl	801a090 <__errno>
 801c594:	2316      	movs	r3, #22
 801c596:	6003      	str	r3, [r0, #0]
 801c598:	2000      	movs	r0, #0
 801c59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c59e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801c684 <_strtol_l.constprop.0+0x100>
 801c5a2:	460d      	mov	r5, r1
 801c5a4:	462e      	mov	r6, r5
 801c5a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c5aa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801c5ae:	f017 0708 	ands.w	r7, r7, #8
 801c5b2:	d1f7      	bne.n	801c5a4 <_strtol_l.constprop.0+0x20>
 801c5b4:	2c2d      	cmp	r4, #45	; 0x2d
 801c5b6:	d132      	bne.n	801c61e <_strtol_l.constprop.0+0x9a>
 801c5b8:	782c      	ldrb	r4, [r5, #0]
 801c5ba:	2701      	movs	r7, #1
 801c5bc:	1cb5      	adds	r5, r6, #2
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d05b      	beq.n	801c67a <_strtol_l.constprop.0+0xf6>
 801c5c2:	2b10      	cmp	r3, #16
 801c5c4:	d109      	bne.n	801c5da <_strtol_l.constprop.0+0x56>
 801c5c6:	2c30      	cmp	r4, #48	; 0x30
 801c5c8:	d107      	bne.n	801c5da <_strtol_l.constprop.0+0x56>
 801c5ca:	782c      	ldrb	r4, [r5, #0]
 801c5cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c5d0:	2c58      	cmp	r4, #88	; 0x58
 801c5d2:	d14d      	bne.n	801c670 <_strtol_l.constprop.0+0xec>
 801c5d4:	786c      	ldrb	r4, [r5, #1]
 801c5d6:	2310      	movs	r3, #16
 801c5d8:	3502      	adds	r5, #2
 801c5da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801c5de:	f108 38ff 	add.w	r8, r8, #4294967295
 801c5e2:	f04f 0e00 	mov.w	lr, #0
 801c5e6:	fbb8 f9f3 	udiv	r9, r8, r3
 801c5ea:	4676      	mov	r6, lr
 801c5ec:	fb03 8a19 	mls	sl, r3, r9, r8
 801c5f0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801c5f4:	f1bc 0f09 	cmp.w	ip, #9
 801c5f8:	d816      	bhi.n	801c628 <_strtol_l.constprop.0+0xa4>
 801c5fa:	4664      	mov	r4, ip
 801c5fc:	42a3      	cmp	r3, r4
 801c5fe:	dd24      	ble.n	801c64a <_strtol_l.constprop.0+0xc6>
 801c600:	f1be 3fff 	cmp.w	lr, #4294967295
 801c604:	d008      	beq.n	801c618 <_strtol_l.constprop.0+0x94>
 801c606:	45b1      	cmp	r9, r6
 801c608:	d31c      	bcc.n	801c644 <_strtol_l.constprop.0+0xc0>
 801c60a:	d101      	bne.n	801c610 <_strtol_l.constprop.0+0x8c>
 801c60c:	45a2      	cmp	sl, r4
 801c60e:	db19      	blt.n	801c644 <_strtol_l.constprop.0+0xc0>
 801c610:	fb06 4603 	mla	r6, r6, r3, r4
 801c614:	f04f 0e01 	mov.w	lr, #1
 801c618:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c61c:	e7e8      	b.n	801c5f0 <_strtol_l.constprop.0+0x6c>
 801c61e:	2c2b      	cmp	r4, #43	; 0x2b
 801c620:	bf04      	itt	eq
 801c622:	782c      	ldrbeq	r4, [r5, #0]
 801c624:	1cb5      	addeq	r5, r6, #2
 801c626:	e7ca      	b.n	801c5be <_strtol_l.constprop.0+0x3a>
 801c628:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801c62c:	f1bc 0f19 	cmp.w	ip, #25
 801c630:	d801      	bhi.n	801c636 <_strtol_l.constprop.0+0xb2>
 801c632:	3c37      	subs	r4, #55	; 0x37
 801c634:	e7e2      	b.n	801c5fc <_strtol_l.constprop.0+0x78>
 801c636:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801c63a:	f1bc 0f19 	cmp.w	ip, #25
 801c63e:	d804      	bhi.n	801c64a <_strtol_l.constprop.0+0xc6>
 801c640:	3c57      	subs	r4, #87	; 0x57
 801c642:	e7db      	b.n	801c5fc <_strtol_l.constprop.0+0x78>
 801c644:	f04f 3eff 	mov.w	lr, #4294967295
 801c648:	e7e6      	b.n	801c618 <_strtol_l.constprop.0+0x94>
 801c64a:	f1be 3fff 	cmp.w	lr, #4294967295
 801c64e:	d105      	bne.n	801c65c <_strtol_l.constprop.0+0xd8>
 801c650:	2322      	movs	r3, #34	; 0x22
 801c652:	6003      	str	r3, [r0, #0]
 801c654:	4646      	mov	r6, r8
 801c656:	b942      	cbnz	r2, 801c66a <_strtol_l.constprop.0+0xe6>
 801c658:	4630      	mov	r0, r6
 801c65a:	e79e      	b.n	801c59a <_strtol_l.constprop.0+0x16>
 801c65c:	b107      	cbz	r7, 801c660 <_strtol_l.constprop.0+0xdc>
 801c65e:	4276      	negs	r6, r6
 801c660:	2a00      	cmp	r2, #0
 801c662:	d0f9      	beq.n	801c658 <_strtol_l.constprop.0+0xd4>
 801c664:	f1be 0f00 	cmp.w	lr, #0
 801c668:	d000      	beq.n	801c66c <_strtol_l.constprop.0+0xe8>
 801c66a:	1e69      	subs	r1, r5, #1
 801c66c:	6011      	str	r1, [r2, #0]
 801c66e:	e7f3      	b.n	801c658 <_strtol_l.constprop.0+0xd4>
 801c670:	2430      	movs	r4, #48	; 0x30
 801c672:	2b00      	cmp	r3, #0
 801c674:	d1b1      	bne.n	801c5da <_strtol_l.constprop.0+0x56>
 801c676:	2308      	movs	r3, #8
 801c678:	e7af      	b.n	801c5da <_strtol_l.constprop.0+0x56>
 801c67a:	2c30      	cmp	r4, #48	; 0x30
 801c67c:	d0a5      	beq.n	801c5ca <_strtol_l.constprop.0+0x46>
 801c67e:	230a      	movs	r3, #10
 801c680:	e7ab      	b.n	801c5da <_strtol_l.constprop.0+0x56>
 801c682:	bf00      	nop
 801c684:	0801fef9 	.word	0x0801fef9

0801c688 <_strtol_r>:
 801c688:	f7ff bf7c 	b.w	801c584 <_strtol_l.constprop.0>

0801c68c <__ssputs_r>:
 801c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c690:	688e      	ldr	r6, [r1, #8]
 801c692:	461f      	mov	r7, r3
 801c694:	42be      	cmp	r6, r7
 801c696:	680b      	ldr	r3, [r1, #0]
 801c698:	4682      	mov	sl, r0
 801c69a:	460c      	mov	r4, r1
 801c69c:	4690      	mov	r8, r2
 801c69e:	d82c      	bhi.n	801c6fa <__ssputs_r+0x6e>
 801c6a0:	898a      	ldrh	r2, [r1, #12]
 801c6a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c6a6:	d026      	beq.n	801c6f6 <__ssputs_r+0x6a>
 801c6a8:	6965      	ldr	r5, [r4, #20]
 801c6aa:	6909      	ldr	r1, [r1, #16]
 801c6ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c6b0:	eba3 0901 	sub.w	r9, r3, r1
 801c6b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c6b8:	1c7b      	adds	r3, r7, #1
 801c6ba:	444b      	add	r3, r9
 801c6bc:	106d      	asrs	r5, r5, #1
 801c6be:	429d      	cmp	r5, r3
 801c6c0:	bf38      	it	cc
 801c6c2:	461d      	movcc	r5, r3
 801c6c4:	0553      	lsls	r3, r2, #21
 801c6c6:	d527      	bpl.n	801c718 <__ssputs_r+0x8c>
 801c6c8:	4629      	mov	r1, r5
 801c6ca:	f7fe fc0f 	bl	801aeec <_malloc_r>
 801c6ce:	4606      	mov	r6, r0
 801c6d0:	b360      	cbz	r0, 801c72c <__ssputs_r+0xa0>
 801c6d2:	6921      	ldr	r1, [r4, #16]
 801c6d4:	464a      	mov	r2, r9
 801c6d6:	f7fd fd07 	bl	801a0e8 <memcpy>
 801c6da:	89a3      	ldrh	r3, [r4, #12]
 801c6dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c6e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c6e4:	81a3      	strh	r3, [r4, #12]
 801c6e6:	6126      	str	r6, [r4, #16]
 801c6e8:	6165      	str	r5, [r4, #20]
 801c6ea:	444e      	add	r6, r9
 801c6ec:	eba5 0509 	sub.w	r5, r5, r9
 801c6f0:	6026      	str	r6, [r4, #0]
 801c6f2:	60a5      	str	r5, [r4, #8]
 801c6f4:	463e      	mov	r6, r7
 801c6f6:	42be      	cmp	r6, r7
 801c6f8:	d900      	bls.n	801c6fc <__ssputs_r+0x70>
 801c6fa:	463e      	mov	r6, r7
 801c6fc:	6820      	ldr	r0, [r4, #0]
 801c6fe:	4632      	mov	r2, r6
 801c700:	4641      	mov	r1, r8
 801c702:	f000 f9c9 	bl	801ca98 <memmove>
 801c706:	68a3      	ldr	r3, [r4, #8]
 801c708:	1b9b      	subs	r3, r3, r6
 801c70a:	60a3      	str	r3, [r4, #8]
 801c70c:	6823      	ldr	r3, [r4, #0]
 801c70e:	4433      	add	r3, r6
 801c710:	6023      	str	r3, [r4, #0]
 801c712:	2000      	movs	r0, #0
 801c714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c718:	462a      	mov	r2, r5
 801c71a:	f000 fd9e 	bl	801d25a <_realloc_r>
 801c71e:	4606      	mov	r6, r0
 801c720:	2800      	cmp	r0, #0
 801c722:	d1e0      	bne.n	801c6e6 <__ssputs_r+0x5a>
 801c724:	6921      	ldr	r1, [r4, #16]
 801c726:	4650      	mov	r0, sl
 801c728:	f7fe fb6c 	bl	801ae04 <_free_r>
 801c72c:	230c      	movs	r3, #12
 801c72e:	f8ca 3000 	str.w	r3, [sl]
 801c732:	89a3      	ldrh	r3, [r4, #12]
 801c734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c738:	81a3      	strh	r3, [r4, #12]
 801c73a:	f04f 30ff 	mov.w	r0, #4294967295
 801c73e:	e7e9      	b.n	801c714 <__ssputs_r+0x88>

0801c740 <_svfiprintf_r>:
 801c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c744:	4698      	mov	r8, r3
 801c746:	898b      	ldrh	r3, [r1, #12]
 801c748:	061b      	lsls	r3, r3, #24
 801c74a:	b09d      	sub	sp, #116	; 0x74
 801c74c:	4607      	mov	r7, r0
 801c74e:	460d      	mov	r5, r1
 801c750:	4614      	mov	r4, r2
 801c752:	d50e      	bpl.n	801c772 <_svfiprintf_r+0x32>
 801c754:	690b      	ldr	r3, [r1, #16]
 801c756:	b963      	cbnz	r3, 801c772 <_svfiprintf_r+0x32>
 801c758:	2140      	movs	r1, #64	; 0x40
 801c75a:	f7fe fbc7 	bl	801aeec <_malloc_r>
 801c75e:	6028      	str	r0, [r5, #0]
 801c760:	6128      	str	r0, [r5, #16]
 801c762:	b920      	cbnz	r0, 801c76e <_svfiprintf_r+0x2e>
 801c764:	230c      	movs	r3, #12
 801c766:	603b      	str	r3, [r7, #0]
 801c768:	f04f 30ff 	mov.w	r0, #4294967295
 801c76c:	e0d0      	b.n	801c910 <_svfiprintf_r+0x1d0>
 801c76e:	2340      	movs	r3, #64	; 0x40
 801c770:	616b      	str	r3, [r5, #20]
 801c772:	2300      	movs	r3, #0
 801c774:	9309      	str	r3, [sp, #36]	; 0x24
 801c776:	2320      	movs	r3, #32
 801c778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c77c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c780:	2330      	movs	r3, #48	; 0x30
 801c782:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801c928 <_svfiprintf_r+0x1e8>
 801c786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c78a:	f04f 0901 	mov.w	r9, #1
 801c78e:	4623      	mov	r3, r4
 801c790:	469a      	mov	sl, r3
 801c792:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c796:	b10a      	cbz	r2, 801c79c <_svfiprintf_r+0x5c>
 801c798:	2a25      	cmp	r2, #37	; 0x25
 801c79a:	d1f9      	bne.n	801c790 <_svfiprintf_r+0x50>
 801c79c:	ebba 0b04 	subs.w	fp, sl, r4
 801c7a0:	d00b      	beq.n	801c7ba <_svfiprintf_r+0x7a>
 801c7a2:	465b      	mov	r3, fp
 801c7a4:	4622      	mov	r2, r4
 801c7a6:	4629      	mov	r1, r5
 801c7a8:	4638      	mov	r0, r7
 801c7aa:	f7ff ff6f 	bl	801c68c <__ssputs_r>
 801c7ae:	3001      	adds	r0, #1
 801c7b0:	f000 80a9 	beq.w	801c906 <_svfiprintf_r+0x1c6>
 801c7b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c7b6:	445a      	add	r2, fp
 801c7b8:	9209      	str	r2, [sp, #36]	; 0x24
 801c7ba:	f89a 3000 	ldrb.w	r3, [sl]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	f000 80a1 	beq.w	801c906 <_svfiprintf_r+0x1c6>
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	f04f 32ff 	mov.w	r2, #4294967295
 801c7ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c7ce:	f10a 0a01 	add.w	sl, sl, #1
 801c7d2:	9304      	str	r3, [sp, #16]
 801c7d4:	9307      	str	r3, [sp, #28]
 801c7d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c7da:	931a      	str	r3, [sp, #104]	; 0x68
 801c7dc:	4654      	mov	r4, sl
 801c7de:	2205      	movs	r2, #5
 801c7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c7e4:	4850      	ldr	r0, [pc, #320]	; (801c928 <_svfiprintf_r+0x1e8>)
 801c7e6:	f7e3 fcf3 	bl	80001d0 <memchr>
 801c7ea:	9a04      	ldr	r2, [sp, #16]
 801c7ec:	b9d8      	cbnz	r0, 801c826 <_svfiprintf_r+0xe6>
 801c7ee:	06d0      	lsls	r0, r2, #27
 801c7f0:	bf44      	itt	mi
 801c7f2:	2320      	movmi	r3, #32
 801c7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c7f8:	0711      	lsls	r1, r2, #28
 801c7fa:	bf44      	itt	mi
 801c7fc:	232b      	movmi	r3, #43	; 0x2b
 801c7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c802:	f89a 3000 	ldrb.w	r3, [sl]
 801c806:	2b2a      	cmp	r3, #42	; 0x2a
 801c808:	d015      	beq.n	801c836 <_svfiprintf_r+0xf6>
 801c80a:	9a07      	ldr	r2, [sp, #28]
 801c80c:	4654      	mov	r4, sl
 801c80e:	2000      	movs	r0, #0
 801c810:	f04f 0c0a 	mov.w	ip, #10
 801c814:	4621      	mov	r1, r4
 801c816:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c81a:	3b30      	subs	r3, #48	; 0x30
 801c81c:	2b09      	cmp	r3, #9
 801c81e:	d94d      	bls.n	801c8bc <_svfiprintf_r+0x17c>
 801c820:	b1b0      	cbz	r0, 801c850 <_svfiprintf_r+0x110>
 801c822:	9207      	str	r2, [sp, #28]
 801c824:	e014      	b.n	801c850 <_svfiprintf_r+0x110>
 801c826:	eba0 0308 	sub.w	r3, r0, r8
 801c82a:	fa09 f303 	lsl.w	r3, r9, r3
 801c82e:	4313      	orrs	r3, r2
 801c830:	9304      	str	r3, [sp, #16]
 801c832:	46a2      	mov	sl, r4
 801c834:	e7d2      	b.n	801c7dc <_svfiprintf_r+0x9c>
 801c836:	9b03      	ldr	r3, [sp, #12]
 801c838:	1d19      	adds	r1, r3, #4
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	9103      	str	r1, [sp, #12]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	bfbb      	ittet	lt
 801c842:	425b      	neglt	r3, r3
 801c844:	f042 0202 	orrlt.w	r2, r2, #2
 801c848:	9307      	strge	r3, [sp, #28]
 801c84a:	9307      	strlt	r3, [sp, #28]
 801c84c:	bfb8      	it	lt
 801c84e:	9204      	strlt	r2, [sp, #16]
 801c850:	7823      	ldrb	r3, [r4, #0]
 801c852:	2b2e      	cmp	r3, #46	; 0x2e
 801c854:	d10c      	bne.n	801c870 <_svfiprintf_r+0x130>
 801c856:	7863      	ldrb	r3, [r4, #1]
 801c858:	2b2a      	cmp	r3, #42	; 0x2a
 801c85a:	d134      	bne.n	801c8c6 <_svfiprintf_r+0x186>
 801c85c:	9b03      	ldr	r3, [sp, #12]
 801c85e:	1d1a      	adds	r2, r3, #4
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	9203      	str	r2, [sp, #12]
 801c864:	2b00      	cmp	r3, #0
 801c866:	bfb8      	it	lt
 801c868:	f04f 33ff 	movlt.w	r3, #4294967295
 801c86c:	3402      	adds	r4, #2
 801c86e:	9305      	str	r3, [sp, #20]
 801c870:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801c938 <_svfiprintf_r+0x1f8>
 801c874:	7821      	ldrb	r1, [r4, #0]
 801c876:	2203      	movs	r2, #3
 801c878:	4650      	mov	r0, sl
 801c87a:	f7e3 fca9 	bl	80001d0 <memchr>
 801c87e:	b138      	cbz	r0, 801c890 <_svfiprintf_r+0x150>
 801c880:	9b04      	ldr	r3, [sp, #16]
 801c882:	eba0 000a 	sub.w	r0, r0, sl
 801c886:	2240      	movs	r2, #64	; 0x40
 801c888:	4082      	lsls	r2, r0
 801c88a:	4313      	orrs	r3, r2
 801c88c:	3401      	adds	r4, #1
 801c88e:	9304      	str	r3, [sp, #16]
 801c890:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c894:	4825      	ldr	r0, [pc, #148]	; (801c92c <_svfiprintf_r+0x1ec>)
 801c896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c89a:	2206      	movs	r2, #6
 801c89c:	f7e3 fc98 	bl	80001d0 <memchr>
 801c8a0:	2800      	cmp	r0, #0
 801c8a2:	d038      	beq.n	801c916 <_svfiprintf_r+0x1d6>
 801c8a4:	4b22      	ldr	r3, [pc, #136]	; (801c930 <_svfiprintf_r+0x1f0>)
 801c8a6:	bb1b      	cbnz	r3, 801c8f0 <_svfiprintf_r+0x1b0>
 801c8a8:	9b03      	ldr	r3, [sp, #12]
 801c8aa:	3307      	adds	r3, #7
 801c8ac:	f023 0307 	bic.w	r3, r3, #7
 801c8b0:	3308      	adds	r3, #8
 801c8b2:	9303      	str	r3, [sp, #12]
 801c8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8b6:	4433      	add	r3, r6
 801c8b8:	9309      	str	r3, [sp, #36]	; 0x24
 801c8ba:	e768      	b.n	801c78e <_svfiprintf_r+0x4e>
 801c8bc:	fb0c 3202 	mla	r2, ip, r2, r3
 801c8c0:	460c      	mov	r4, r1
 801c8c2:	2001      	movs	r0, #1
 801c8c4:	e7a6      	b.n	801c814 <_svfiprintf_r+0xd4>
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	3401      	adds	r4, #1
 801c8ca:	9305      	str	r3, [sp, #20]
 801c8cc:	4619      	mov	r1, r3
 801c8ce:	f04f 0c0a 	mov.w	ip, #10
 801c8d2:	4620      	mov	r0, r4
 801c8d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c8d8:	3a30      	subs	r2, #48	; 0x30
 801c8da:	2a09      	cmp	r2, #9
 801c8dc:	d903      	bls.n	801c8e6 <_svfiprintf_r+0x1a6>
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d0c6      	beq.n	801c870 <_svfiprintf_r+0x130>
 801c8e2:	9105      	str	r1, [sp, #20]
 801c8e4:	e7c4      	b.n	801c870 <_svfiprintf_r+0x130>
 801c8e6:	fb0c 2101 	mla	r1, ip, r1, r2
 801c8ea:	4604      	mov	r4, r0
 801c8ec:	2301      	movs	r3, #1
 801c8ee:	e7f0      	b.n	801c8d2 <_svfiprintf_r+0x192>
 801c8f0:	ab03      	add	r3, sp, #12
 801c8f2:	9300      	str	r3, [sp, #0]
 801c8f4:	462a      	mov	r2, r5
 801c8f6:	4b0f      	ldr	r3, [pc, #60]	; (801c934 <_svfiprintf_r+0x1f4>)
 801c8f8:	a904      	add	r1, sp, #16
 801c8fa:	4638      	mov	r0, r7
 801c8fc:	f7fc fc36 	bl	801916c <_printf_float>
 801c900:	1c42      	adds	r2, r0, #1
 801c902:	4606      	mov	r6, r0
 801c904:	d1d6      	bne.n	801c8b4 <_svfiprintf_r+0x174>
 801c906:	89ab      	ldrh	r3, [r5, #12]
 801c908:	065b      	lsls	r3, r3, #25
 801c90a:	f53f af2d 	bmi.w	801c768 <_svfiprintf_r+0x28>
 801c90e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c910:	b01d      	add	sp, #116	; 0x74
 801c912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c916:	ab03      	add	r3, sp, #12
 801c918:	9300      	str	r3, [sp, #0]
 801c91a:	462a      	mov	r2, r5
 801c91c:	4b05      	ldr	r3, [pc, #20]	; (801c934 <_svfiprintf_r+0x1f4>)
 801c91e:	a904      	add	r1, sp, #16
 801c920:	4638      	mov	r0, r7
 801c922:	f7fc fec7 	bl	80196b4 <_printf_i>
 801c926:	e7eb      	b.n	801c900 <_svfiprintf_r+0x1c0>
 801c928:	0801fff9 	.word	0x0801fff9
 801c92c:	08020003 	.word	0x08020003
 801c930:	0801916d 	.word	0x0801916d
 801c934:	0801c68d 	.word	0x0801c68d
 801c938:	0801ffff 	.word	0x0801ffff

0801c93c <__sflush_r>:
 801c93c:	898a      	ldrh	r2, [r1, #12]
 801c93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c942:	4605      	mov	r5, r0
 801c944:	0710      	lsls	r0, r2, #28
 801c946:	460c      	mov	r4, r1
 801c948:	d458      	bmi.n	801c9fc <__sflush_r+0xc0>
 801c94a:	684b      	ldr	r3, [r1, #4]
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	dc05      	bgt.n	801c95c <__sflush_r+0x20>
 801c950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c952:	2b00      	cmp	r3, #0
 801c954:	dc02      	bgt.n	801c95c <__sflush_r+0x20>
 801c956:	2000      	movs	r0, #0
 801c958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c95c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c95e:	2e00      	cmp	r6, #0
 801c960:	d0f9      	beq.n	801c956 <__sflush_r+0x1a>
 801c962:	2300      	movs	r3, #0
 801c964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c968:	682f      	ldr	r7, [r5, #0]
 801c96a:	6a21      	ldr	r1, [r4, #32]
 801c96c:	602b      	str	r3, [r5, #0]
 801c96e:	d032      	beq.n	801c9d6 <__sflush_r+0x9a>
 801c970:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c972:	89a3      	ldrh	r3, [r4, #12]
 801c974:	075a      	lsls	r2, r3, #29
 801c976:	d505      	bpl.n	801c984 <__sflush_r+0x48>
 801c978:	6863      	ldr	r3, [r4, #4]
 801c97a:	1ac0      	subs	r0, r0, r3
 801c97c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c97e:	b10b      	cbz	r3, 801c984 <__sflush_r+0x48>
 801c980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c982:	1ac0      	subs	r0, r0, r3
 801c984:	2300      	movs	r3, #0
 801c986:	4602      	mov	r2, r0
 801c988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c98a:	6a21      	ldr	r1, [r4, #32]
 801c98c:	4628      	mov	r0, r5
 801c98e:	47b0      	blx	r6
 801c990:	1c43      	adds	r3, r0, #1
 801c992:	89a3      	ldrh	r3, [r4, #12]
 801c994:	d106      	bne.n	801c9a4 <__sflush_r+0x68>
 801c996:	6829      	ldr	r1, [r5, #0]
 801c998:	291d      	cmp	r1, #29
 801c99a:	d82b      	bhi.n	801c9f4 <__sflush_r+0xb8>
 801c99c:	4a29      	ldr	r2, [pc, #164]	; (801ca44 <__sflush_r+0x108>)
 801c99e:	410a      	asrs	r2, r1
 801c9a0:	07d6      	lsls	r6, r2, #31
 801c9a2:	d427      	bmi.n	801c9f4 <__sflush_r+0xb8>
 801c9a4:	2200      	movs	r2, #0
 801c9a6:	6062      	str	r2, [r4, #4]
 801c9a8:	04d9      	lsls	r1, r3, #19
 801c9aa:	6922      	ldr	r2, [r4, #16]
 801c9ac:	6022      	str	r2, [r4, #0]
 801c9ae:	d504      	bpl.n	801c9ba <__sflush_r+0x7e>
 801c9b0:	1c42      	adds	r2, r0, #1
 801c9b2:	d101      	bne.n	801c9b8 <__sflush_r+0x7c>
 801c9b4:	682b      	ldr	r3, [r5, #0]
 801c9b6:	b903      	cbnz	r3, 801c9ba <__sflush_r+0x7e>
 801c9b8:	6560      	str	r0, [r4, #84]	; 0x54
 801c9ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c9bc:	602f      	str	r7, [r5, #0]
 801c9be:	2900      	cmp	r1, #0
 801c9c0:	d0c9      	beq.n	801c956 <__sflush_r+0x1a>
 801c9c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c9c6:	4299      	cmp	r1, r3
 801c9c8:	d002      	beq.n	801c9d0 <__sflush_r+0x94>
 801c9ca:	4628      	mov	r0, r5
 801c9cc:	f7fe fa1a 	bl	801ae04 <_free_r>
 801c9d0:	2000      	movs	r0, #0
 801c9d2:	6360      	str	r0, [r4, #52]	; 0x34
 801c9d4:	e7c0      	b.n	801c958 <__sflush_r+0x1c>
 801c9d6:	2301      	movs	r3, #1
 801c9d8:	4628      	mov	r0, r5
 801c9da:	47b0      	blx	r6
 801c9dc:	1c41      	adds	r1, r0, #1
 801c9de:	d1c8      	bne.n	801c972 <__sflush_r+0x36>
 801c9e0:	682b      	ldr	r3, [r5, #0]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d0c5      	beq.n	801c972 <__sflush_r+0x36>
 801c9e6:	2b1d      	cmp	r3, #29
 801c9e8:	d001      	beq.n	801c9ee <__sflush_r+0xb2>
 801c9ea:	2b16      	cmp	r3, #22
 801c9ec:	d101      	bne.n	801c9f2 <__sflush_r+0xb6>
 801c9ee:	602f      	str	r7, [r5, #0]
 801c9f0:	e7b1      	b.n	801c956 <__sflush_r+0x1a>
 801c9f2:	89a3      	ldrh	r3, [r4, #12]
 801c9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c9f8:	81a3      	strh	r3, [r4, #12]
 801c9fa:	e7ad      	b.n	801c958 <__sflush_r+0x1c>
 801c9fc:	690f      	ldr	r7, [r1, #16]
 801c9fe:	2f00      	cmp	r7, #0
 801ca00:	d0a9      	beq.n	801c956 <__sflush_r+0x1a>
 801ca02:	0793      	lsls	r3, r2, #30
 801ca04:	680e      	ldr	r6, [r1, #0]
 801ca06:	bf08      	it	eq
 801ca08:	694b      	ldreq	r3, [r1, #20]
 801ca0a:	600f      	str	r7, [r1, #0]
 801ca0c:	bf18      	it	ne
 801ca0e:	2300      	movne	r3, #0
 801ca10:	eba6 0807 	sub.w	r8, r6, r7
 801ca14:	608b      	str	r3, [r1, #8]
 801ca16:	f1b8 0f00 	cmp.w	r8, #0
 801ca1a:	dd9c      	ble.n	801c956 <__sflush_r+0x1a>
 801ca1c:	6a21      	ldr	r1, [r4, #32]
 801ca1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ca20:	4643      	mov	r3, r8
 801ca22:	463a      	mov	r2, r7
 801ca24:	4628      	mov	r0, r5
 801ca26:	47b0      	blx	r6
 801ca28:	2800      	cmp	r0, #0
 801ca2a:	dc06      	bgt.n	801ca3a <__sflush_r+0xfe>
 801ca2c:	89a3      	ldrh	r3, [r4, #12]
 801ca2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ca32:	81a3      	strh	r3, [r4, #12]
 801ca34:	f04f 30ff 	mov.w	r0, #4294967295
 801ca38:	e78e      	b.n	801c958 <__sflush_r+0x1c>
 801ca3a:	4407      	add	r7, r0
 801ca3c:	eba8 0800 	sub.w	r8, r8, r0
 801ca40:	e7e9      	b.n	801ca16 <__sflush_r+0xda>
 801ca42:	bf00      	nop
 801ca44:	dfbffffe 	.word	0xdfbffffe

0801ca48 <_fflush_r>:
 801ca48:	b538      	push	{r3, r4, r5, lr}
 801ca4a:	690b      	ldr	r3, [r1, #16]
 801ca4c:	4605      	mov	r5, r0
 801ca4e:	460c      	mov	r4, r1
 801ca50:	b913      	cbnz	r3, 801ca58 <_fflush_r+0x10>
 801ca52:	2500      	movs	r5, #0
 801ca54:	4628      	mov	r0, r5
 801ca56:	bd38      	pop	{r3, r4, r5, pc}
 801ca58:	b118      	cbz	r0, 801ca62 <_fflush_r+0x1a>
 801ca5a:	6a03      	ldr	r3, [r0, #32]
 801ca5c:	b90b      	cbnz	r3, 801ca62 <_fflush_r+0x1a>
 801ca5e:	f7fd f9d5 	bl	8019e0c <__sinit>
 801ca62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d0f3      	beq.n	801ca52 <_fflush_r+0xa>
 801ca6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ca6c:	07d0      	lsls	r0, r2, #31
 801ca6e:	d404      	bmi.n	801ca7a <_fflush_r+0x32>
 801ca70:	0599      	lsls	r1, r3, #22
 801ca72:	d402      	bmi.n	801ca7a <_fflush_r+0x32>
 801ca74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca76:	f7fd fb35 	bl	801a0e4 <__retarget_lock_acquire_recursive>
 801ca7a:	4628      	mov	r0, r5
 801ca7c:	4621      	mov	r1, r4
 801ca7e:	f7ff ff5d 	bl	801c93c <__sflush_r>
 801ca82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca84:	07da      	lsls	r2, r3, #31
 801ca86:	4605      	mov	r5, r0
 801ca88:	d4e4      	bmi.n	801ca54 <_fflush_r+0xc>
 801ca8a:	89a3      	ldrh	r3, [r4, #12]
 801ca8c:	059b      	lsls	r3, r3, #22
 801ca8e:	d4e1      	bmi.n	801ca54 <_fflush_r+0xc>
 801ca90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca92:	f7fd fb28 	bl	801a0e6 <__retarget_lock_release_recursive>
 801ca96:	e7dd      	b.n	801ca54 <_fflush_r+0xc>

0801ca98 <memmove>:
 801ca98:	4288      	cmp	r0, r1
 801ca9a:	b510      	push	{r4, lr}
 801ca9c:	eb01 0402 	add.w	r4, r1, r2
 801caa0:	d902      	bls.n	801caa8 <memmove+0x10>
 801caa2:	4284      	cmp	r4, r0
 801caa4:	4623      	mov	r3, r4
 801caa6:	d807      	bhi.n	801cab8 <memmove+0x20>
 801caa8:	1e43      	subs	r3, r0, #1
 801caaa:	42a1      	cmp	r1, r4
 801caac:	d008      	beq.n	801cac0 <memmove+0x28>
 801caae:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cab6:	e7f8      	b.n	801caaa <memmove+0x12>
 801cab8:	4402      	add	r2, r0
 801caba:	4601      	mov	r1, r0
 801cabc:	428a      	cmp	r2, r1
 801cabe:	d100      	bne.n	801cac2 <memmove+0x2a>
 801cac0:	bd10      	pop	{r4, pc}
 801cac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801caca:	e7f7      	b.n	801cabc <memmove+0x24>

0801cacc <strncmp>:
 801cacc:	b510      	push	{r4, lr}
 801cace:	b16a      	cbz	r2, 801caec <strncmp+0x20>
 801cad0:	3901      	subs	r1, #1
 801cad2:	1884      	adds	r4, r0, r2
 801cad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cad8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801cadc:	429a      	cmp	r2, r3
 801cade:	d103      	bne.n	801cae8 <strncmp+0x1c>
 801cae0:	42a0      	cmp	r0, r4
 801cae2:	d001      	beq.n	801cae8 <strncmp+0x1c>
 801cae4:	2a00      	cmp	r2, #0
 801cae6:	d1f5      	bne.n	801cad4 <strncmp+0x8>
 801cae8:	1ad0      	subs	r0, r2, r3
 801caea:	bd10      	pop	{r4, pc}
 801caec:	4610      	mov	r0, r2
 801caee:	e7fc      	b.n	801caea <strncmp+0x1e>

0801caf0 <_sbrk_r>:
 801caf0:	b538      	push	{r3, r4, r5, lr}
 801caf2:	4d06      	ldr	r5, [pc, #24]	; (801cb0c <_sbrk_r+0x1c>)
 801caf4:	2300      	movs	r3, #0
 801caf6:	4604      	mov	r4, r0
 801caf8:	4608      	mov	r0, r1
 801cafa:	602b      	str	r3, [r5, #0]
 801cafc:	f7e7 f9da 	bl	8003eb4 <_sbrk>
 801cb00:	1c43      	adds	r3, r0, #1
 801cb02:	d102      	bne.n	801cb0a <_sbrk_r+0x1a>
 801cb04:	682b      	ldr	r3, [r5, #0]
 801cb06:	b103      	cbz	r3, 801cb0a <_sbrk_r+0x1a>
 801cb08:	6023      	str	r3, [r4, #0]
 801cb0a:	bd38      	pop	{r3, r4, r5, pc}
 801cb0c:	2000e668 	.word	0x2000e668

0801cb10 <nan>:
 801cb10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cb18 <nan+0x8>
 801cb14:	4770      	bx	lr
 801cb16:	bf00      	nop
 801cb18:	00000000 	.word	0x00000000
 801cb1c:	7ff80000 	.word	0x7ff80000

0801cb20 <__assert_func>:
 801cb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cb22:	4614      	mov	r4, r2
 801cb24:	461a      	mov	r2, r3
 801cb26:	4b09      	ldr	r3, [pc, #36]	; (801cb4c <__assert_func+0x2c>)
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	4605      	mov	r5, r0
 801cb2c:	68d8      	ldr	r0, [r3, #12]
 801cb2e:	b14c      	cbz	r4, 801cb44 <__assert_func+0x24>
 801cb30:	4b07      	ldr	r3, [pc, #28]	; (801cb50 <__assert_func+0x30>)
 801cb32:	9100      	str	r1, [sp, #0]
 801cb34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cb38:	4906      	ldr	r1, [pc, #24]	; (801cb54 <__assert_func+0x34>)
 801cb3a:	462b      	mov	r3, r5
 801cb3c:	f000 fbca 	bl	801d2d4 <fiprintf>
 801cb40:	f000 fbda 	bl	801d2f8 <abort>
 801cb44:	4b04      	ldr	r3, [pc, #16]	; (801cb58 <__assert_func+0x38>)
 801cb46:	461c      	mov	r4, r3
 801cb48:	e7f3      	b.n	801cb32 <__assert_func+0x12>
 801cb4a:	bf00      	nop
 801cb4c:	20000164 	.word	0x20000164
 801cb50:	08020012 	.word	0x08020012
 801cb54:	0802001f 	.word	0x0802001f
 801cb58:	0802004d 	.word	0x0802004d

0801cb5c <_calloc_r>:
 801cb5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb5e:	fba1 2402 	umull	r2, r4, r1, r2
 801cb62:	b94c      	cbnz	r4, 801cb78 <_calloc_r+0x1c>
 801cb64:	4611      	mov	r1, r2
 801cb66:	9201      	str	r2, [sp, #4]
 801cb68:	f7fe f9c0 	bl	801aeec <_malloc_r>
 801cb6c:	9a01      	ldr	r2, [sp, #4]
 801cb6e:	4605      	mov	r5, r0
 801cb70:	b930      	cbnz	r0, 801cb80 <_calloc_r+0x24>
 801cb72:	4628      	mov	r0, r5
 801cb74:	b003      	add	sp, #12
 801cb76:	bd30      	pop	{r4, r5, pc}
 801cb78:	220c      	movs	r2, #12
 801cb7a:	6002      	str	r2, [r0, #0]
 801cb7c:	2500      	movs	r5, #0
 801cb7e:	e7f8      	b.n	801cb72 <_calloc_r+0x16>
 801cb80:	4621      	mov	r1, r4
 801cb82:	f7fd f9dc 	bl	8019f3e <memset>
 801cb86:	e7f4      	b.n	801cb72 <_calloc_r+0x16>

0801cb88 <rshift>:
 801cb88:	6903      	ldr	r3, [r0, #16]
 801cb8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801cb8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cb92:	ea4f 1261 	mov.w	r2, r1, asr #5
 801cb96:	f100 0414 	add.w	r4, r0, #20
 801cb9a:	dd45      	ble.n	801cc28 <rshift+0xa0>
 801cb9c:	f011 011f 	ands.w	r1, r1, #31
 801cba0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801cba4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801cba8:	d10c      	bne.n	801cbc4 <rshift+0x3c>
 801cbaa:	f100 0710 	add.w	r7, r0, #16
 801cbae:	4629      	mov	r1, r5
 801cbb0:	42b1      	cmp	r1, r6
 801cbb2:	d334      	bcc.n	801cc1e <rshift+0x96>
 801cbb4:	1a9b      	subs	r3, r3, r2
 801cbb6:	009b      	lsls	r3, r3, #2
 801cbb8:	1eea      	subs	r2, r5, #3
 801cbba:	4296      	cmp	r6, r2
 801cbbc:	bf38      	it	cc
 801cbbe:	2300      	movcc	r3, #0
 801cbc0:	4423      	add	r3, r4
 801cbc2:	e015      	b.n	801cbf0 <rshift+0x68>
 801cbc4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801cbc8:	f1c1 0820 	rsb	r8, r1, #32
 801cbcc:	40cf      	lsrs	r7, r1
 801cbce:	f105 0e04 	add.w	lr, r5, #4
 801cbd2:	46a1      	mov	r9, r4
 801cbd4:	4576      	cmp	r6, lr
 801cbd6:	46f4      	mov	ip, lr
 801cbd8:	d815      	bhi.n	801cc06 <rshift+0x7e>
 801cbda:	1a9a      	subs	r2, r3, r2
 801cbdc:	0092      	lsls	r2, r2, #2
 801cbde:	3a04      	subs	r2, #4
 801cbe0:	3501      	adds	r5, #1
 801cbe2:	42ae      	cmp	r6, r5
 801cbe4:	bf38      	it	cc
 801cbe6:	2200      	movcc	r2, #0
 801cbe8:	18a3      	adds	r3, r4, r2
 801cbea:	50a7      	str	r7, [r4, r2]
 801cbec:	b107      	cbz	r7, 801cbf0 <rshift+0x68>
 801cbee:	3304      	adds	r3, #4
 801cbf0:	1b1a      	subs	r2, r3, r4
 801cbf2:	42a3      	cmp	r3, r4
 801cbf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cbf8:	bf08      	it	eq
 801cbfa:	2300      	moveq	r3, #0
 801cbfc:	6102      	str	r2, [r0, #16]
 801cbfe:	bf08      	it	eq
 801cc00:	6143      	streq	r3, [r0, #20]
 801cc02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc06:	f8dc c000 	ldr.w	ip, [ip]
 801cc0a:	fa0c fc08 	lsl.w	ip, ip, r8
 801cc0e:	ea4c 0707 	orr.w	r7, ip, r7
 801cc12:	f849 7b04 	str.w	r7, [r9], #4
 801cc16:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cc1a:	40cf      	lsrs	r7, r1
 801cc1c:	e7da      	b.n	801cbd4 <rshift+0x4c>
 801cc1e:	f851 cb04 	ldr.w	ip, [r1], #4
 801cc22:	f847 cf04 	str.w	ip, [r7, #4]!
 801cc26:	e7c3      	b.n	801cbb0 <rshift+0x28>
 801cc28:	4623      	mov	r3, r4
 801cc2a:	e7e1      	b.n	801cbf0 <rshift+0x68>

0801cc2c <__hexdig_fun>:
 801cc2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801cc30:	2b09      	cmp	r3, #9
 801cc32:	d802      	bhi.n	801cc3a <__hexdig_fun+0xe>
 801cc34:	3820      	subs	r0, #32
 801cc36:	b2c0      	uxtb	r0, r0
 801cc38:	4770      	bx	lr
 801cc3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801cc3e:	2b05      	cmp	r3, #5
 801cc40:	d801      	bhi.n	801cc46 <__hexdig_fun+0x1a>
 801cc42:	3847      	subs	r0, #71	; 0x47
 801cc44:	e7f7      	b.n	801cc36 <__hexdig_fun+0xa>
 801cc46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801cc4a:	2b05      	cmp	r3, #5
 801cc4c:	d801      	bhi.n	801cc52 <__hexdig_fun+0x26>
 801cc4e:	3827      	subs	r0, #39	; 0x27
 801cc50:	e7f1      	b.n	801cc36 <__hexdig_fun+0xa>
 801cc52:	2000      	movs	r0, #0
 801cc54:	4770      	bx	lr
	...

0801cc58 <__gethex>:
 801cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc5c:	4617      	mov	r7, r2
 801cc5e:	680a      	ldr	r2, [r1, #0]
 801cc60:	b085      	sub	sp, #20
 801cc62:	f102 0b02 	add.w	fp, r2, #2
 801cc66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801cc6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801cc6e:	4681      	mov	r9, r0
 801cc70:	468a      	mov	sl, r1
 801cc72:	9302      	str	r3, [sp, #8]
 801cc74:	32fe      	adds	r2, #254	; 0xfe
 801cc76:	eb02 030b 	add.w	r3, r2, fp
 801cc7a:	46d8      	mov	r8, fp
 801cc7c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801cc80:	9301      	str	r3, [sp, #4]
 801cc82:	2830      	cmp	r0, #48	; 0x30
 801cc84:	d0f7      	beq.n	801cc76 <__gethex+0x1e>
 801cc86:	f7ff ffd1 	bl	801cc2c <__hexdig_fun>
 801cc8a:	4604      	mov	r4, r0
 801cc8c:	2800      	cmp	r0, #0
 801cc8e:	d138      	bne.n	801cd02 <__gethex+0xaa>
 801cc90:	49a7      	ldr	r1, [pc, #668]	; (801cf30 <__gethex+0x2d8>)
 801cc92:	2201      	movs	r2, #1
 801cc94:	4640      	mov	r0, r8
 801cc96:	f7ff ff19 	bl	801cacc <strncmp>
 801cc9a:	4606      	mov	r6, r0
 801cc9c:	2800      	cmp	r0, #0
 801cc9e:	d169      	bne.n	801cd74 <__gethex+0x11c>
 801cca0:	f898 0001 	ldrb.w	r0, [r8, #1]
 801cca4:	465d      	mov	r5, fp
 801cca6:	f7ff ffc1 	bl	801cc2c <__hexdig_fun>
 801ccaa:	2800      	cmp	r0, #0
 801ccac:	d064      	beq.n	801cd78 <__gethex+0x120>
 801ccae:	465a      	mov	r2, fp
 801ccb0:	7810      	ldrb	r0, [r2, #0]
 801ccb2:	2830      	cmp	r0, #48	; 0x30
 801ccb4:	4690      	mov	r8, r2
 801ccb6:	f102 0201 	add.w	r2, r2, #1
 801ccba:	d0f9      	beq.n	801ccb0 <__gethex+0x58>
 801ccbc:	f7ff ffb6 	bl	801cc2c <__hexdig_fun>
 801ccc0:	2301      	movs	r3, #1
 801ccc2:	fab0 f480 	clz	r4, r0
 801ccc6:	0964      	lsrs	r4, r4, #5
 801ccc8:	465e      	mov	r6, fp
 801ccca:	9301      	str	r3, [sp, #4]
 801cccc:	4642      	mov	r2, r8
 801ccce:	4615      	mov	r5, r2
 801ccd0:	3201      	adds	r2, #1
 801ccd2:	7828      	ldrb	r0, [r5, #0]
 801ccd4:	f7ff ffaa 	bl	801cc2c <__hexdig_fun>
 801ccd8:	2800      	cmp	r0, #0
 801ccda:	d1f8      	bne.n	801ccce <__gethex+0x76>
 801ccdc:	4994      	ldr	r1, [pc, #592]	; (801cf30 <__gethex+0x2d8>)
 801ccde:	2201      	movs	r2, #1
 801cce0:	4628      	mov	r0, r5
 801cce2:	f7ff fef3 	bl	801cacc <strncmp>
 801cce6:	b978      	cbnz	r0, 801cd08 <__gethex+0xb0>
 801cce8:	b946      	cbnz	r6, 801ccfc <__gethex+0xa4>
 801ccea:	1c6e      	adds	r6, r5, #1
 801ccec:	4632      	mov	r2, r6
 801ccee:	4615      	mov	r5, r2
 801ccf0:	3201      	adds	r2, #1
 801ccf2:	7828      	ldrb	r0, [r5, #0]
 801ccf4:	f7ff ff9a 	bl	801cc2c <__hexdig_fun>
 801ccf8:	2800      	cmp	r0, #0
 801ccfa:	d1f8      	bne.n	801ccee <__gethex+0x96>
 801ccfc:	1b73      	subs	r3, r6, r5
 801ccfe:	009e      	lsls	r6, r3, #2
 801cd00:	e004      	b.n	801cd0c <__gethex+0xb4>
 801cd02:	2400      	movs	r4, #0
 801cd04:	4626      	mov	r6, r4
 801cd06:	e7e1      	b.n	801cccc <__gethex+0x74>
 801cd08:	2e00      	cmp	r6, #0
 801cd0a:	d1f7      	bne.n	801ccfc <__gethex+0xa4>
 801cd0c:	782b      	ldrb	r3, [r5, #0]
 801cd0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801cd12:	2b50      	cmp	r3, #80	; 0x50
 801cd14:	d13d      	bne.n	801cd92 <__gethex+0x13a>
 801cd16:	786b      	ldrb	r3, [r5, #1]
 801cd18:	2b2b      	cmp	r3, #43	; 0x2b
 801cd1a:	d02f      	beq.n	801cd7c <__gethex+0x124>
 801cd1c:	2b2d      	cmp	r3, #45	; 0x2d
 801cd1e:	d031      	beq.n	801cd84 <__gethex+0x12c>
 801cd20:	1c69      	adds	r1, r5, #1
 801cd22:	f04f 0b00 	mov.w	fp, #0
 801cd26:	7808      	ldrb	r0, [r1, #0]
 801cd28:	f7ff ff80 	bl	801cc2c <__hexdig_fun>
 801cd2c:	1e42      	subs	r2, r0, #1
 801cd2e:	b2d2      	uxtb	r2, r2
 801cd30:	2a18      	cmp	r2, #24
 801cd32:	d82e      	bhi.n	801cd92 <__gethex+0x13a>
 801cd34:	f1a0 0210 	sub.w	r2, r0, #16
 801cd38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801cd3c:	f7ff ff76 	bl	801cc2c <__hexdig_fun>
 801cd40:	f100 3cff 	add.w	ip, r0, #4294967295
 801cd44:	fa5f fc8c 	uxtb.w	ip, ip
 801cd48:	f1bc 0f18 	cmp.w	ip, #24
 801cd4c:	d91d      	bls.n	801cd8a <__gethex+0x132>
 801cd4e:	f1bb 0f00 	cmp.w	fp, #0
 801cd52:	d000      	beq.n	801cd56 <__gethex+0xfe>
 801cd54:	4252      	negs	r2, r2
 801cd56:	4416      	add	r6, r2
 801cd58:	f8ca 1000 	str.w	r1, [sl]
 801cd5c:	b1dc      	cbz	r4, 801cd96 <__gethex+0x13e>
 801cd5e:	9b01      	ldr	r3, [sp, #4]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	bf14      	ite	ne
 801cd64:	f04f 0800 	movne.w	r8, #0
 801cd68:	f04f 0806 	moveq.w	r8, #6
 801cd6c:	4640      	mov	r0, r8
 801cd6e:	b005      	add	sp, #20
 801cd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd74:	4645      	mov	r5, r8
 801cd76:	4626      	mov	r6, r4
 801cd78:	2401      	movs	r4, #1
 801cd7a:	e7c7      	b.n	801cd0c <__gethex+0xb4>
 801cd7c:	f04f 0b00 	mov.w	fp, #0
 801cd80:	1ca9      	adds	r1, r5, #2
 801cd82:	e7d0      	b.n	801cd26 <__gethex+0xce>
 801cd84:	f04f 0b01 	mov.w	fp, #1
 801cd88:	e7fa      	b.n	801cd80 <__gethex+0x128>
 801cd8a:	230a      	movs	r3, #10
 801cd8c:	fb03 0002 	mla	r0, r3, r2, r0
 801cd90:	e7d0      	b.n	801cd34 <__gethex+0xdc>
 801cd92:	4629      	mov	r1, r5
 801cd94:	e7e0      	b.n	801cd58 <__gethex+0x100>
 801cd96:	eba5 0308 	sub.w	r3, r5, r8
 801cd9a:	3b01      	subs	r3, #1
 801cd9c:	4621      	mov	r1, r4
 801cd9e:	2b07      	cmp	r3, #7
 801cda0:	dc0a      	bgt.n	801cdb8 <__gethex+0x160>
 801cda2:	4648      	mov	r0, r9
 801cda4:	f7fe f92e 	bl	801b004 <_Balloc>
 801cda8:	4604      	mov	r4, r0
 801cdaa:	b940      	cbnz	r0, 801cdbe <__gethex+0x166>
 801cdac:	4b61      	ldr	r3, [pc, #388]	; (801cf34 <__gethex+0x2dc>)
 801cdae:	4602      	mov	r2, r0
 801cdb0:	21e4      	movs	r1, #228	; 0xe4
 801cdb2:	4861      	ldr	r0, [pc, #388]	; (801cf38 <__gethex+0x2e0>)
 801cdb4:	f7ff feb4 	bl	801cb20 <__assert_func>
 801cdb8:	3101      	adds	r1, #1
 801cdba:	105b      	asrs	r3, r3, #1
 801cdbc:	e7ef      	b.n	801cd9e <__gethex+0x146>
 801cdbe:	f100 0a14 	add.w	sl, r0, #20
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	495a      	ldr	r1, [pc, #360]	; (801cf30 <__gethex+0x2d8>)
 801cdc6:	f8cd a004 	str.w	sl, [sp, #4]
 801cdca:	469b      	mov	fp, r3
 801cdcc:	45a8      	cmp	r8, r5
 801cdce:	d342      	bcc.n	801ce56 <__gethex+0x1fe>
 801cdd0:	9801      	ldr	r0, [sp, #4]
 801cdd2:	f840 bb04 	str.w	fp, [r0], #4
 801cdd6:	eba0 000a 	sub.w	r0, r0, sl
 801cdda:	1080      	asrs	r0, r0, #2
 801cddc:	6120      	str	r0, [r4, #16]
 801cdde:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801cde2:	4658      	mov	r0, fp
 801cde4:	f7fe fa00 	bl	801b1e8 <__hi0bits>
 801cde8:	683d      	ldr	r5, [r7, #0]
 801cdea:	eba8 0000 	sub.w	r0, r8, r0
 801cdee:	42a8      	cmp	r0, r5
 801cdf0:	dd59      	ble.n	801cea6 <__gethex+0x24e>
 801cdf2:	eba0 0805 	sub.w	r8, r0, r5
 801cdf6:	4641      	mov	r1, r8
 801cdf8:	4620      	mov	r0, r4
 801cdfa:	f7fe fd8f 	bl	801b91c <__any_on>
 801cdfe:	4683      	mov	fp, r0
 801ce00:	b1b8      	cbz	r0, 801ce32 <__gethex+0x1da>
 801ce02:	f108 33ff 	add.w	r3, r8, #4294967295
 801ce06:	1159      	asrs	r1, r3, #5
 801ce08:	f003 021f 	and.w	r2, r3, #31
 801ce0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ce10:	f04f 0b01 	mov.w	fp, #1
 801ce14:	fa0b f202 	lsl.w	r2, fp, r2
 801ce18:	420a      	tst	r2, r1
 801ce1a:	d00a      	beq.n	801ce32 <__gethex+0x1da>
 801ce1c:	455b      	cmp	r3, fp
 801ce1e:	dd06      	ble.n	801ce2e <__gethex+0x1d6>
 801ce20:	f1a8 0102 	sub.w	r1, r8, #2
 801ce24:	4620      	mov	r0, r4
 801ce26:	f7fe fd79 	bl	801b91c <__any_on>
 801ce2a:	2800      	cmp	r0, #0
 801ce2c:	d138      	bne.n	801cea0 <__gethex+0x248>
 801ce2e:	f04f 0b02 	mov.w	fp, #2
 801ce32:	4641      	mov	r1, r8
 801ce34:	4620      	mov	r0, r4
 801ce36:	f7ff fea7 	bl	801cb88 <rshift>
 801ce3a:	4446      	add	r6, r8
 801ce3c:	68bb      	ldr	r3, [r7, #8]
 801ce3e:	42b3      	cmp	r3, r6
 801ce40:	da41      	bge.n	801cec6 <__gethex+0x26e>
 801ce42:	4621      	mov	r1, r4
 801ce44:	4648      	mov	r0, r9
 801ce46:	f7fe f91d 	bl	801b084 <_Bfree>
 801ce4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ce4c:	2300      	movs	r3, #0
 801ce4e:	6013      	str	r3, [r2, #0]
 801ce50:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801ce54:	e78a      	b.n	801cd6c <__gethex+0x114>
 801ce56:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801ce5a:	2a2e      	cmp	r2, #46	; 0x2e
 801ce5c:	d014      	beq.n	801ce88 <__gethex+0x230>
 801ce5e:	2b20      	cmp	r3, #32
 801ce60:	d106      	bne.n	801ce70 <__gethex+0x218>
 801ce62:	9b01      	ldr	r3, [sp, #4]
 801ce64:	f843 bb04 	str.w	fp, [r3], #4
 801ce68:	f04f 0b00 	mov.w	fp, #0
 801ce6c:	9301      	str	r3, [sp, #4]
 801ce6e:	465b      	mov	r3, fp
 801ce70:	7828      	ldrb	r0, [r5, #0]
 801ce72:	9303      	str	r3, [sp, #12]
 801ce74:	f7ff feda 	bl	801cc2c <__hexdig_fun>
 801ce78:	9b03      	ldr	r3, [sp, #12]
 801ce7a:	f000 000f 	and.w	r0, r0, #15
 801ce7e:	4098      	lsls	r0, r3
 801ce80:	ea4b 0b00 	orr.w	fp, fp, r0
 801ce84:	3304      	adds	r3, #4
 801ce86:	e7a1      	b.n	801cdcc <__gethex+0x174>
 801ce88:	45a8      	cmp	r8, r5
 801ce8a:	d8e8      	bhi.n	801ce5e <__gethex+0x206>
 801ce8c:	2201      	movs	r2, #1
 801ce8e:	4628      	mov	r0, r5
 801ce90:	9303      	str	r3, [sp, #12]
 801ce92:	f7ff fe1b 	bl	801cacc <strncmp>
 801ce96:	4926      	ldr	r1, [pc, #152]	; (801cf30 <__gethex+0x2d8>)
 801ce98:	9b03      	ldr	r3, [sp, #12]
 801ce9a:	2800      	cmp	r0, #0
 801ce9c:	d1df      	bne.n	801ce5e <__gethex+0x206>
 801ce9e:	e795      	b.n	801cdcc <__gethex+0x174>
 801cea0:	f04f 0b03 	mov.w	fp, #3
 801cea4:	e7c5      	b.n	801ce32 <__gethex+0x1da>
 801cea6:	da0b      	bge.n	801cec0 <__gethex+0x268>
 801cea8:	eba5 0800 	sub.w	r8, r5, r0
 801ceac:	4621      	mov	r1, r4
 801ceae:	4642      	mov	r2, r8
 801ceb0:	4648      	mov	r0, r9
 801ceb2:	f7fe fb01 	bl	801b4b8 <__lshift>
 801ceb6:	eba6 0608 	sub.w	r6, r6, r8
 801ceba:	4604      	mov	r4, r0
 801cebc:	f100 0a14 	add.w	sl, r0, #20
 801cec0:	f04f 0b00 	mov.w	fp, #0
 801cec4:	e7ba      	b.n	801ce3c <__gethex+0x1e4>
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	42b3      	cmp	r3, r6
 801ceca:	dd73      	ble.n	801cfb4 <__gethex+0x35c>
 801cecc:	1b9e      	subs	r6, r3, r6
 801cece:	42b5      	cmp	r5, r6
 801ced0:	dc34      	bgt.n	801cf3c <__gethex+0x2e4>
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	2b02      	cmp	r3, #2
 801ced6:	d023      	beq.n	801cf20 <__gethex+0x2c8>
 801ced8:	2b03      	cmp	r3, #3
 801ceda:	d025      	beq.n	801cf28 <__gethex+0x2d0>
 801cedc:	2b01      	cmp	r3, #1
 801cede:	d115      	bne.n	801cf0c <__gethex+0x2b4>
 801cee0:	42b5      	cmp	r5, r6
 801cee2:	d113      	bne.n	801cf0c <__gethex+0x2b4>
 801cee4:	2d01      	cmp	r5, #1
 801cee6:	d10b      	bne.n	801cf00 <__gethex+0x2a8>
 801cee8:	9a02      	ldr	r2, [sp, #8]
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	6013      	str	r3, [r2, #0]
 801ceee:	2301      	movs	r3, #1
 801cef0:	6123      	str	r3, [r4, #16]
 801cef2:	f8ca 3000 	str.w	r3, [sl]
 801cef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cef8:	f04f 0862 	mov.w	r8, #98	; 0x62
 801cefc:	601c      	str	r4, [r3, #0]
 801cefe:	e735      	b.n	801cd6c <__gethex+0x114>
 801cf00:	1e69      	subs	r1, r5, #1
 801cf02:	4620      	mov	r0, r4
 801cf04:	f7fe fd0a 	bl	801b91c <__any_on>
 801cf08:	2800      	cmp	r0, #0
 801cf0a:	d1ed      	bne.n	801cee8 <__gethex+0x290>
 801cf0c:	4621      	mov	r1, r4
 801cf0e:	4648      	mov	r0, r9
 801cf10:	f7fe f8b8 	bl	801b084 <_Bfree>
 801cf14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cf16:	2300      	movs	r3, #0
 801cf18:	6013      	str	r3, [r2, #0]
 801cf1a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801cf1e:	e725      	b.n	801cd6c <__gethex+0x114>
 801cf20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d1f2      	bne.n	801cf0c <__gethex+0x2b4>
 801cf26:	e7df      	b.n	801cee8 <__gethex+0x290>
 801cf28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d1dc      	bne.n	801cee8 <__gethex+0x290>
 801cf2e:	e7ed      	b.n	801cf0c <__gethex+0x2b4>
 801cf30:	0801fea4 	.word	0x0801fea4
 801cf34:	0801fd3d 	.word	0x0801fd3d
 801cf38:	0802004e 	.word	0x0802004e
 801cf3c:	f106 38ff 	add.w	r8, r6, #4294967295
 801cf40:	f1bb 0f00 	cmp.w	fp, #0
 801cf44:	d133      	bne.n	801cfae <__gethex+0x356>
 801cf46:	f1b8 0f00 	cmp.w	r8, #0
 801cf4a:	d004      	beq.n	801cf56 <__gethex+0x2fe>
 801cf4c:	4641      	mov	r1, r8
 801cf4e:	4620      	mov	r0, r4
 801cf50:	f7fe fce4 	bl	801b91c <__any_on>
 801cf54:	4683      	mov	fp, r0
 801cf56:	ea4f 1268 	mov.w	r2, r8, asr #5
 801cf5a:	2301      	movs	r3, #1
 801cf5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801cf60:	f008 081f 	and.w	r8, r8, #31
 801cf64:	fa03 f308 	lsl.w	r3, r3, r8
 801cf68:	4213      	tst	r3, r2
 801cf6a:	4631      	mov	r1, r6
 801cf6c:	4620      	mov	r0, r4
 801cf6e:	bf18      	it	ne
 801cf70:	f04b 0b02 	orrne.w	fp, fp, #2
 801cf74:	1bad      	subs	r5, r5, r6
 801cf76:	f7ff fe07 	bl	801cb88 <rshift>
 801cf7a:	687e      	ldr	r6, [r7, #4]
 801cf7c:	f04f 0802 	mov.w	r8, #2
 801cf80:	f1bb 0f00 	cmp.w	fp, #0
 801cf84:	d04a      	beq.n	801d01c <__gethex+0x3c4>
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	2b02      	cmp	r3, #2
 801cf8a:	d016      	beq.n	801cfba <__gethex+0x362>
 801cf8c:	2b03      	cmp	r3, #3
 801cf8e:	d018      	beq.n	801cfc2 <__gethex+0x36a>
 801cf90:	2b01      	cmp	r3, #1
 801cf92:	d109      	bne.n	801cfa8 <__gethex+0x350>
 801cf94:	f01b 0f02 	tst.w	fp, #2
 801cf98:	d006      	beq.n	801cfa8 <__gethex+0x350>
 801cf9a:	f8da 3000 	ldr.w	r3, [sl]
 801cf9e:	ea4b 0b03 	orr.w	fp, fp, r3
 801cfa2:	f01b 0f01 	tst.w	fp, #1
 801cfa6:	d10f      	bne.n	801cfc8 <__gethex+0x370>
 801cfa8:	f048 0810 	orr.w	r8, r8, #16
 801cfac:	e036      	b.n	801d01c <__gethex+0x3c4>
 801cfae:	f04f 0b01 	mov.w	fp, #1
 801cfb2:	e7d0      	b.n	801cf56 <__gethex+0x2fe>
 801cfb4:	f04f 0801 	mov.w	r8, #1
 801cfb8:	e7e2      	b.n	801cf80 <__gethex+0x328>
 801cfba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cfbc:	f1c3 0301 	rsb	r3, r3, #1
 801cfc0:	930f      	str	r3, [sp, #60]	; 0x3c
 801cfc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	d0ef      	beq.n	801cfa8 <__gethex+0x350>
 801cfc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cfcc:	f104 0214 	add.w	r2, r4, #20
 801cfd0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801cfd4:	9301      	str	r3, [sp, #4]
 801cfd6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801cfda:	2300      	movs	r3, #0
 801cfdc:	4694      	mov	ip, r2
 801cfde:	f852 1b04 	ldr.w	r1, [r2], #4
 801cfe2:	f1b1 3fff 	cmp.w	r1, #4294967295
 801cfe6:	d01e      	beq.n	801d026 <__gethex+0x3ce>
 801cfe8:	3101      	adds	r1, #1
 801cfea:	f8cc 1000 	str.w	r1, [ip]
 801cfee:	f1b8 0f02 	cmp.w	r8, #2
 801cff2:	f104 0214 	add.w	r2, r4, #20
 801cff6:	d13d      	bne.n	801d074 <__gethex+0x41c>
 801cff8:	683b      	ldr	r3, [r7, #0]
 801cffa:	3b01      	subs	r3, #1
 801cffc:	42ab      	cmp	r3, r5
 801cffe:	d10b      	bne.n	801d018 <__gethex+0x3c0>
 801d000:	1169      	asrs	r1, r5, #5
 801d002:	2301      	movs	r3, #1
 801d004:	f005 051f 	and.w	r5, r5, #31
 801d008:	fa03 f505 	lsl.w	r5, r3, r5
 801d00c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d010:	421d      	tst	r5, r3
 801d012:	bf18      	it	ne
 801d014:	f04f 0801 	movne.w	r8, #1
 801d018:	f048 0820 	orr.w	r8, r8, #32
 801d01c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d01e:	601c      	str	r4, [r3, #0]
 801d020:	9b02      	ldr	r3, [sp, #8]
 801d022:	601e      	str	r6, [r3, #0]
 801d024:	e6a2      	b.n	801cd6c <__gethex+0x114>
 801d026:	4290      	cmp	r0, r2
 801d028:	f842 3c04 	str.w	r3, [r2, #-4]
 801d02c:	d8d6      	bhi.n	801cfdc <__gethex+0x384>
 801d02e:	68a2      	ldr	r2, [r4, #8]
 801d030:	4593      	cmp	fp, r2
 801d032:	db17      	blt.n	801d064 <__gethex+0x40c>
 801d034:	6861      	ldr	r1, [r4, #4]
 801d036:	4648      	mov	r0, r9
 801d038:	3101      	adds	r1, #1
 801d03a:	f7fd ffe3 	bl	801b004 <_Balloc>
 801d03e:	4682      	mov	sl, r0
 801d040:	b918      	cbnz	r0, 801d04a <__gethex+0x3f2>
 801d042:	4b1b      	ldr	r3, [pc, #108]	; (801d0b0 <__gethex+0x458>)
 801d044:	4602      	mov	r2, r0
 801d046:	2184      	movs	r1, #132	; 0x84
 801d048:	e6b3      	b.n	801cdb2 <__gethex+0x15a>
 801d04a:	6922      	ldr	r2, [r4, #16]
 801d04c:	3202      	adds	r2, #2
 801d04e:	f104 010c 	add.w	r1, r4, #12
 801d052:	0092      	lsls	r2, r2, #2
 801d054:	300c      	adds	r0, #12
 801d056:	f7fd f847 	bl	801a0e8 <memcpy>
 801d05a:	4621      	mov	r1, r4
 801d05c:	4648      	mov	r0, r9
 801d05e:	f7fe f811 	bl	801b084 <_Bfree>
 801d062:	4654      	mov	r4, sl
 801d064:	6922      	ldr	r2, [r4, #16]
 801d066:	1c51      	adds	r1, r2, #1
 801d068:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d06c:	6121      	str	r1, [r4, #16]
 801d06e:	2101      	movs	r1, #1
 801d070:	6151      	str	r1, [r2, #20]
 801d072:	e7bc      	b.n	801cfee <__gethex+0x396>
 801d074:	6921      	ldr	r1, [r4, #16]
 801d076:	4559      	cmp	r1, fp
 801d078:	dd0b      	ble.n	801d092 <__gethex+0x43a>
 801d07a:	2101      	movs	r1, #1
 801d07c:	4620      	mov	r0, r4
 801d07e:	f7ff fd83 	bl	801cb88 <rshift>
 801d082:	68bb      	ldr	r3, [r7, #8]
 801d084:	3601      	adds	r6, #1
 801d086:	42b3      	cmp	r3, r6
 801d088:	f6ff aedb 	blt.w	801ce42 <__gethex+0x1ea>
 801d08c:	f04f 0801 	mov.w	r8, #1
 801d090:	e7c2      	b.n	801d018 <__gethex+0x3c0>
 801d092:	f015 051f 	ands.w	r5, r5, #31
 801d096:	d0f9      	beq.n	801d08c <__gethex+0x434>
 801d098:	9b01      	ldr	r3, [sp, #4]
 801d09a:	441a      	add	r2, r3
 801d09c:	f1c5 0520 	rsb	r5, r5, #32
 801d0a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801d0a4:	f7fe f8a0 	bl	801b1e8 <__hi0bits>
 801d0a8:	42a8      	cmp	r0, r5
 801d0aa:	dbe6      	blt.n	801d07a <__gethex+0x422>
 801d0ac:	e7ee      	b.n	801d08c <__gethex+0x434>
 801d0ae:	bf00      	nop
 801d0b0:	0801fd3d 	.word	0x0801fd3d

0801d0b4 <L_shift>:
 801d0b4:	f1c2 0208 	rsb	r2, r2, #8
 801d0b8:	0092      	lsls	r2, r2, #2
 801d0ba:	b570      	push	{r4, r5, r6, lr}
 801d0bc:	f1c2 0620 	rsb	r6, r2, #32
 801d0c0:	6843      	ldr	r3, [r0, #4]
 801d0c2:	6804      	ldr	r4, [r0, #0]
 801d0c4:	fa03 f506 	lsl.w	r5, r3, r6
 801d0c8:	432c      	orrs	r4, r5
 801d0ca:	40d3      	lsrs	r3, r2
 801d0cc:	6004      	str	r4, [r0, #0]
 801d0ce:	f840 3f04 	str.w	r3, [r0, #4]!
 801d0d2:	4288      	cmp	r0, r1
 801d0d4:	d3f4      	bcc.n	801d0c0 <L_shift+0xc>
 801d0d6:	bd70      	pop	{r4, r5, r6, pc}

0801d0d8 <__match>:
 801d0d8:	b530      	push	{r4, r5, lr}
 801d0da:	6803      	ldr	r3, [r0, #0]
 801d0dc:	3301      	adds	r3, #1
 801d0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d0e2:	b914      	cbnz	r4, 801d0ea <__match+0x12>
 801d0e4:	6003      	str	r3, [r0, #0]
 801d0e6:	2001      	movs	r0, #1
 801d0e8:	bd30      	pop	{r4, r5, pc}
 801d0ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d0ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d0f2:	2d19      	cmp	r5, #25
 801d0f4:	bf98      	it	ls
 801d0f6:	3220      	addls	r2, #32
 801d0f8:	42a2      	cmp	r2, r4
 801d0fa:	d0f0      	beq.n	801d0de <__match+0x6>
 801d0fc:	2000      	movs	r0, #0
 801d0fe:	e7f3      	b.n	801d0e8 <__match+0x10>

0801d100 <__hexnan>:
 801d100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d104:	680b      	ldr	r3, [r1, #0]
 801d106:	6801      	ldr	r1, [r0, #0]
 801d108:	115e      	asrs	r6, r3, #5
 801d10a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d10e:	f013 031f 	ands.w	r3, r3, #31
 801d112:	b087      	sub	sp, #28
 801d114:	bf18      	it	ne
 801d116:	3604      	addne	r6, #4
 801d118:	2500      	movs	r5, #0
 801d11a:	1f37      	subs	r7, r6, #4
 801d11c:	4682      	mov	sl, r0
 801d11e:	4690      	mov	r8, r2
 801d120:	9301      	str	r3, [sp, #4]
 801d122:	f846 5c04 	str.w	r5, [r6, #-4]
 801d126:	46b9      	mov	r9, r7
 801d128:	463c      	mov	r4, r7
 801d12a:	9502      	str	r5, [sp, #8]
 801d12c:	46ab      	mov	fp, r5
 801d12e:	784a      	ldrb	r2, [r1, #1]
 801d130:	1c4b      	adds	r3, r1, #1
 801d132:	9303      	str	r3, [sp, #12]
 801d134:	b342      	cbz	r2, 801d188 <__hexnan+0x88>
 801d136:	4610      	mov	r0, r2
 801d138:	9105      	str	r1, [sp, #20]
 801d13a:	9204      	str	r2, [sp, #16]
 801d13c:	f7ff fd76 	bl	801cc2c <__hexdig_fun>
 801d140:	2800      	cmp	r0, #0
 801d142:	d14f      	bne.n	801d1e4 <__hexnan+0xe4>
 801d144:	9a04      	ldr	r2, [sp, #16]
 801d146:	9905      	ldr	r1, [sp, #20]
 801d148:	2a20      	cmp	r2, #32
 801d14a:	d818      	bhi.n	801d17e <__hexnan+0x7e>
 801d14c:	9b02      	ldr	r3, [sp, #8]
 801d14e:	459b      	cmp	fp, r3
 801d150:	dd13      	ble.n	801d17a <__hexnan+0x7a>
 801d152:	454c      	cmp	r4, r9
 801d154:	d206      	bcs.n	801d164 <__hexnan+0x64>
 801d156:	2d07      	cmp	r5, #7
 801d158:	dc04      	bgt.n	801d164 <__hexnan+0x64>
 801d15a:	462a      	mov	r2, r5
 801d15c:	4649      	mov	r1, r9
 801d15e:	4620      	mov	r0, r4
 801d160:	f7ff ffa8 	bl	801d0b4 <L_shift>
 801d164:	4544      	cmp	r4, r8
 801d166:	d950      	bls.n	801d20a <__hexnan+0x10a>
 801d168:	2300      	movs	r3, #0
 801d16a:	f1a4 0904 	sub.w	r9, r4, #4
 801d16e:	f844 3c04 	str.w	r3, [r4, #-4]
 801d172:	f8cd b008 	str.w	fp, [sp, #8]
 801d176:	464c      	mov	r4, r9
 801d178:	461d      	mov	r5, r3
 801d17a:	9903      	ldr	r1, [sp, #12]
 801d17c:	e7d7      	b.n	801d12e <__hexnan+0x2e>
 801d17e:	2a29      	cmp	r2, #41	; 0x29
 801d180:	d155      	bne.n	801d22e <__hexnan+0x12e>
 801d182:	3102      	adds	r1, #2
 801d184:	f8ca 1000 	str.w	r1, [sl]
 801d188:	f1bb 0f00 	cmp.w	fp, #0
 801d18c:	d04f      	beq.n	801d22e <__hexnan+0x12e>
 801d18e:	454c      	cmp	r4, r9
 801d190:	d206      	bcs.n	801d1a0 <__hexnan+0xa0>
 801d192:	2d07      	cmp	r5, #7
 801d194:	dc04      	bgt.n	801d1a0 <__hexnan+0xa0>
 801d196:	462a      	mov	r2, r5
 801d198:	4649      	mov	r1, r9
 801d19a:	4620      	mov	r0, r4
 801d19c:	f7ff ff8a 	bl	801d0b4 <L_shift>
 801d1a0:	4544      	cmp	r4, r8
 801d1a2:	d934      	bls.n	801d20e <__hexnan+0x10e>
 801d1a4:	f1a8 0204 	sub.w	r2, r8, #4
 801d1a8:	4623      	mov	r3, r4
 801d1aa:	f853 1b04 	ldr.w	r1, [r3], #4
 801d1ae:	f842 1f04 	str.w	r1, [r2, #4]!
 801d1b2:	429f      	cmp	r7, r3
 801d1b4:	d2f9      	bcs.n	801d1aa <__hexnan+0xaa>
 801d1b6:	1b3b      	subs	r3, r7, r4
 801d1b8:	f023 0303 	bic.w	r3, r3, #3
 801d1bc:	3304      	adds	r3, #4
 801d1be:	3e03      	subs	r6, #3
 801d1c0:	3401      	adds	r4, #1
 801d1c2:	42a6      	cmp	r6, r4
 801d1c4:	bf38      	it	cc
 801d1c6:	2304      	movcc	r3, #4
 801d1c8:	4443      	add	r3, r8
 801d1ca:	2200      	movs	r2, #0
 801d1cc:	f843 2b04 	str.w	r2, [r3], #4
 801d1d0:	429f      	cmp	r7, r3
 801d1d2:	d2fb      	bcs.n	801d1cc <__hexnan+0xcc>
 801d1d4:	683b      	ldr	r3, [r7, #0]
 801d1d6:	b91b      	cbnz	r3, 801d1e0 <__hexnan+0xe0>
 801d1d8:	4547      	cmp	r7, r8
 801d1da:	d126      	bne.n	801d22a <__hexnan+0x12a>
 801d1dc:	2301      	movs	r3, #1
 801d1de:	603b      	str	r3, [r7, #0]
 801d1e0:	2005      	movs	r0, #5
 801d1e2:	e025      	b.n	801d230 <__hexnan+0x130>
 801d1e4:	3501      	adds	r5, #1
 801d1e6:	2d08      	cmp	r5, #8
 801d1e8:	f10b 0b01 	add.w	fp, fp, #1
 801d1ec:	dd06      	ble.n	801d1fc <__hexnan+0xfc>
 801d1ee:	4544      	cmp	r4, r8
 801d1f0:	d9c3      	bls.n	801d17a <__hexnan+0x7a>
 801d1f2:	2300      	movs	r3, #0
 801d1f4:	f844 3c04 	str.w	r3, [r4, #-4]
 801d1f8:	2501      	movs	r5, #1
 801d1fa:	3c04      	subs	r4, #4
 801d1fc:	6822      	ldr	r2, [r4, #0]
 801d1fe:	f000 000f 	and.w	r0, r0, #15
 801d202:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801d206:	6020      	str	r0, [r4, #0]
 801d208:	e7b7      	b.n	801d17a <__hexnan+0x7a>
 801d20a:	2508      	movs	r5, #8
 801d20c:	e7b5      	b.n	801d17a <__hexnan+0x7a>
 801d20e:	9b01      	ldr	r3, [sp, #4]
 801d210:	2b00      	cmp	r3, #0
 801d212:	d0df      	beq.n	801d1d4 <__hexnan+0xd4>
 801d214:	f1c3 0320 	rsb	r3, r3, #32
 801d218:	f04f 32ff 	mov.w	r2, #4294967295
 801d21c:	40da      	lsrs	r2, r3
 801d21e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801d222:	4013      	ands	r3, r2
 801d224:	f846 3c04 	str.w	r3, [r6, #-4]
 801d228:	e7d4      	b.n	801d1d4 <__hexnan+0xd4>
 801d22a:	3f04      	subs	r7, #4
 801d22c:	e7d2      	b.n	801d1d4 <__hexnan+0xd4>
 801d22e:	2004      	movs	r0, #4
 801d230:	b007      	add	sp, #28
 801d232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d236 <__ascii_mbtowc>:
 801d236:	b082      	sub	sp, #8
 801d238:	b901      	cbnz	r1, 801d23c <__ascii_mbtowc+0x6>
 801d23a:	a901      	add	r1, sp, #4
 801d23c:	b142      	cbz	r2, 801d250 <__ascii_mbtowc+0x1a>
 801d23e:	b14b      	cbz	r3, 801d254 <__ascii_mbtowc+0x1e>
 801d240:	7813      	ldrb	r3, [r2, #0]
 801d242:	600b      	str	r3, [r1, #0]
 801d244:	7812      	ldrb	r2, [r2, #0]
 801d246:	1e10      	subs	r0, r2, #0
 801d248:	bf18      	it	ne
 801d24a:	2001      	movne	r0, #1
 801d24c:	b002      	add	sp, #8
 801d24e:	4770      	bx	lr
 801d250:	4610      	mov	r0, r2
 801d252:	e7fb      	b.n	801d24c <__ascii_mbtowc+0x16>
 801d254:	f06f 0001 	mvn.w	r0, #1
 801d258:	e7f8      	b.n	801d24c <__ascii_mbtowc+0x16>

0801d25a <_realloc_r>:
 801d25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d25e:	4680      	mov	r8, r0
 801d260:	4614      	mov	r4, r2
 801d262:	460e      	mov	r6, r1
 801d264:	b921      	cbnz	r1, 801d270 <_realloc_r+0x16>
 801d266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d26a:	4611      	mov	r1, r2
 801d26c:	f7fd be3e 	b.w	801aeec <_malloc_r>
 801d270:	b92a      	cbnz	r2, 801d27e <_realloc_r+0x24>
 801d272:	f7fd fdc7 	bl	801ae04 <_free_r>
 801d276:	4625      	mov	r5, r4
 801d278:	4628      	mov	r0, r5
 801d27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d27e:	f000 f842 	bl	801d306 <_malloc_usable_size_r>
 801d282:	4284      	cmp	r4, r0
 801d284:	4607      	mov	r7, r0
 801d286:	d802      	bhi.n	801d28e <_realloc_r+0x34>
 801d288:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d28c:	d812      	bhi.n	801d2b4 <_realloc_r+0x5a>
 801d28e:	4621      	mov	r1, r4
 801d290:	4640      	mov	r0, r8
 801d292:	f7fd fe2b 	bl	801aeec <_malloc_r>
 801d296:	4605      	mov	r5, r0
 801d298:	2800      	cmp	r0, #0
 801d29a:	d0ed      	beq.n	801d278 <_realloc_r+0x1e>
 801d29c:	42bc      	cmp	r4, r7
 801d29e:	4622      	mov	r2, r4
 801d2a0:	4631      	mov	r1, r6
 801d2a2:	bf28      	it	cs
 801d2a4:	463a      	movcs	r2, r7
 801d2a6:	f7fc ff1f 	bl	801a0e8 <memcpy>
 801d2aa:	4631      	mov	r1, r6
 801d2ac:	4640      	mov	r0, r8
 801d2ae:	f7fd fda9 	bl	801ae04 <_free_r>
 801d2b2:	e7e1      	b.n	801d278 <_realloc_r+0x1e>
 801d2b4:	4635      	mov	r5, r6
 801d2b6:	e7df      	b.n	801d278 <_realloc_r+0x1e>

0801d2b8 <__ascii_wctomb>:
 801d2b8:	b149      	cbz	r1, 801d2ce <__ascii_wctomb+0x16>
 801d2ba:	2aff      	cmp	r2, #255	; 0xff
 801d2bc:	bf85      	ittet	hi
 801d2be:	238a      	movhi	r3, #138	; 0x8a
 801d2c0:	6003      	strhi	r3, [r0, #0]
 801d2c2:	700a      	strbls	r2, [r1, #0]
 801d2c4:	f04f 30ff 	movhi.w	r0, #4294967295
 801d2c8:	bf98      	it	ls
 801d2ca:	2001      	movls	r0, #1
 801d2cc:	4770      	bx	lr
 801d2ce:	4608      	mov	r0, r1
 801d2d0:	4770      	bx	lr
	...

0801d2d4 <fiprintf>:
 801d2d4:	b40e      	push	{r1, r2, r3}
 801d2d6:	b503      	push	{r0, r1, lr}
 801d2d8:	4601      	mov	r1, r0
 801d2da:	ab03      	add	r3, sp, #12
 801d2dc:	4805      	ldr	r0, [pc, #20]	; (801d2f4 <fiprintf+0x20>)
 801d2de:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2e2:	6800      	ldr	r0, [r0, #0]
 801d2e4:	9301      	str	r3, [sp, #4]
 801d2e6:	f000 f83f 	bl	801d368 <_vfiprintf_r>
 801d2ea:	b002      	add	sp, #8
 801d2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 801d2f0:	b003      	add	sp, #12
 801d2f2:	4770      	bx	lr
 801d2f4:	20000164 	.word	0x20000164

0801d2f8 <abort>:
 801d2f8:	b508      	push	{r3, lr}
 801d2fa:	2006      	movs	r0, #6
 801d2fc:	f000 fa0c 	bl	801d718 <raise>
 801d300:	2001      	movs	r0, #1
 801d302:	f7e6 fd5f 	bl	8003dc4 <_exit>

0801d306 <_malloc_usable_size_r>:
 801d306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d30a:	1f18      	subs	r0, r3, #4
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	bfbc      	itt	lt
 801d310:	580b      	ldrlt	r3, [r1, r0]
 801d312:	18c0      	addlt	r0, r0, r3
 801d314:	4770      	bx	lr

0801d316 <__sfputc_r>:
 801d316:	6893      	ldr	r3, [r2, #8]
 801d318:	3b01      	subs	r3, #1
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	b410      	push	{r4}
 801d31e:	6093      	str	r3, [r2, #8]
 801d320:	da08      	bge.n	801d334 <__sfputc_r+0x1e>
 801d322:	6994      	ldr	r4, [r2, #24]
 801d324:	42a3      	cmp	r3, r4
 801d326:	db01      	blt.n	801d32c <__sfputc_r+0x16>
 801d328:	290a      	cmp	r1, #10
 801d32a:	d103      	bne.n	801d334 <__sfputc_r+0x1e>
 801d32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d330:	f000 b934 	b.w	801d59c <__swbuf_r>
 801d334:	6813      	ldr	r3, [r2, #0]
 801d336:	1c58      	adds	r0, r3, #1
 801d338:	6010      	str	r0, [r2, #0]
 801d33a:	7019      	strb	r1, [r3, #0]
 801d33c:	4608      	mov	r0, r1
 801d33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d342:	4770      	bx	lr

0801d344 <__sfputs_r>:
 801d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d346:	4606      	mov	r6, r0
 801d348:	460f      	mov	r7, r1
 801d34a:	4614      	mov	r4, r2
 801d34c:	18d5      	adds	r5, r2, r3
 801d34e:	42ac      	cmp	r4, r5
 801d350:	d101      	bne.n	801d356 <__sfputs_r+0x12>
 801d352:	2000      	movs	r0, #0
 801d354:	e007      	b.n	801d366 <__sfputs_r+0x22>
 801d356:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d35a:	463a      	mov	r2, r7
 801d35c:	4630      	mov	r0, r6
 801d35e:	f7ff ffda 	bl	801d316 <__sfputc_r>
 801d362:	1c43      	adds	r3, r0, #1
 801d364:	d1f3      	bne.n	801d34e <__sfputs_r+0xa>
 801d366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d368 <_vfiprintf_r>:
 801d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d36c:	460d      	mov	r5, r1
 801d36e:	b09d      	sub	sp, #116	; 0x74
 801d370:	4614      	mov	r4, r2
 801d372:	4698      	mov	r8, r3
 801d374:	4606      	mov	r6, r0
 801d376:	b118      	cbz	r0, 801d380 <_vfiprintf_r+0x18>
 801d378:	6a03      	ldr	r3, [r0, #32]
 801d37a:	b90b      	cbnz	r3, 801d380 <_vfiprintf_r+0x18>
 801d37c:	f7fc fd46 	bl	8019e0c <__sinit>
 801d380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d382:	07d9      	lsls	r1, r3, #31
 801d384:	d405      	bmi.n	801d392 <_vfiprintf_r+0x2a>
 801d386:	89ab      	ldrh	r3, [r5, #12]
 801d388:	059a      	lsls	r2, r3, #22
 801d38a:	d402      	bmi.n	801d392 <_vfiprintf_r+0x2a>
 801d38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d38e:	f7fc fea9 	bl	801a0e4 <__retarget_lock_acquire_recursive>
 801d392:	89ab      	ldrh	r3, [r5, #12]
 801d394:	071b      	lsls	r3, r3, #28
 801d396:	d501      	bpl.n	801d39c <_vfiprintf_r+0x34>
 801d398:	692b      	ldr	r3, [r5, #16]
 801d39a:	b99b      	cbnz	r3, 801d3c4 <_vfiprintf_r+0x5c>
 801d39c:	4629      	mov	r1, r5
 801d39e:	4630      	mov	r0, r6
 801d3a0:	f000 f93a 	bl	801d618 <__swsetup_r>
 801d3a4:	b170      	cbz	r0, 801d3c4 <_vfiprintf_r+0x5c>
 801d3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d3a8:	07dc      	lsls	r4, r3, #31
 801d3aa:	d504      	bpl.n	801d3b6 <_vfiprintf_r+0x4e>
 801d3ac:	f04f 30ff 	mov.w	r0, #4294967295
 801d3b0:	b01d      	add	sp, #116	; 0x74
 801d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3b6:	89ab      	ldrh	r3, [r5, #12]
 801d3b8:	0598      	lsls	r0, r3, #22
 801d3ba:	d4f7      	bmi.n	801d3ac <_vfiprintf_r+0x44>
 801d3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d3be:	f7fc fe92 	bl	801a0e6 <__retarget_lock_release_recursive>
 801d3c2:	e7f3      	b.n	801d3ac <_vfiprintf_r+0x44>
 801d3c4:	2300      	movs	r3, #0
 801d3c6:	9309      	str	r3, [sp, #36]	; 0x24
 801d3c8:	2320      	movs	r3, #32
 801d3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801d3d2:	2330      	movs	r3, #48	; 0x30
 801d3d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d588 <_vfiprintf_r+0x220>
 801d3d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d3dc:	f04f 0901 	mov.w	r9, #1
 801d3e0:	4623      	mov	r3, r4
 801d3e2:	469a      	mov	sl, r3
 801d3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d3e8:	b10a      	cbz	r2, 801d3ee <_vfiprintf_r+0x86>
 801d3ea:	2a25      	cmp	r2, #37	; 0x25
 801d3ec:	d1f9      	bne.n	801d3e2 <_vfiprintf_r+0x7a>
 801d3ee:	ebba 0b04 	subs.w	fp, sl, r4
 801d3f2:	d00b      	beq.n	801d40c <_vfiprintf_r+0xa4>
 801d3f4:	465b      	mov	r3, fp
 801d3f6:	4622      	mov	r2, r4
 801d3f8:	4629      	mov	r1, r5
 801d3fa:	4630      	mov	r0, r6
 801d3fc:	f7ff ffa2 	bl	801d344 <__sfputs_r>
 801d400:	3001      	adds	r0, #1
 801d402:	f000 80a9 	beq.w	801d558 <_vfiprintf_r+0x1f0>
 801d406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d408:	445a      	add	r2, fp
 801d40a:	9209      	str	r2, [sp, #36]	; 0x24
 801d40c:	f89a 3000 	ldrb.w	r3, [sl]
 801d410:	2b00      	cmp	r3, #0
 801d412:	f000 80a1 	beq.w	801d558 <_vfiprintf_r+0x1f0>
 801d416:	2300      	movs	r3, #0
 801d418:	f04f 32ff 	mov.w	r2, #4294967295
 801d41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d420:	f10a 0a01 	add.w	sl, sl, #1
 801d424:	9304      	str	r3, [sp, #16]
 801d426:	9307      	str	r3, [sp, #28]
 801d428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d42c:	931a      	str	r3, [sp, #104]	; 0x68
 801d42e:	4654      	mov	r4, sl
 801d430:	2205      	movs	r2, #5
 801d432:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d436:	4854      	ldr	r0, [pc, #336]	; (801d588 <_vfiprintf_r+0x220>)
 801d438:	f7e2 feca 	bl	80001d0 <memchr>
 801d43c:	9a04      	ldr	r2, [sp, #16]
 801d43e:	b9d8      	cbnz	r0, 801d478 <_vfiprintf_r+0x110>
 801d440:	06d1      	lsls	r1, r2, #27
 801d442:	bf44      	itt	mi
 801d444:	2320      	movmi	r3, #32
 801d446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d44a:	0713      	lsls	r3, r2, #28
 801d44c:	bf44      	itt	mi
 801d44e:	232b      	movmi	r3, #43	; 0x2b
 801d450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d454:	f89a 3000 	ldrb.w	r3, [sl]
 801d458:	2b2a      	cmp	r3, #42	; 0x2a
 801d45a:	d015      	beq.n	801d488 <_vfiprintf_r+0x120>
 801d45c:	9a07      	ldr	r2, [sp, #28]
 801d45e:	4654      	mov	r4, sl
 801d460:	2000      	movs	r0, #0
 801d462:	f04f 0c0a 	mov.w	ip, #10
 801d466:	4621      	mov	r1, r4
 801d468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d46c:	3b30      	subs	r3, #48	; 0x30
 801d46e:	2b09      	cmp	r3, #9
 801d470:	d94d      	bls.n	801d50e <_vfiprintf_r+0x1a6>
 801d472:	b1b0      	cbz	r0, 801d4a2 <_vfiprintf_r+0x13a>
 801d474:	9207      	str	r2, [sp, #28]
 801d476:	e014      	b.n	801d4a2 <_vfiprintf_r+0x13a>
 801d478:	eba0 0308 	sub.w	r3, r0, r8
 801d47c:	fa09 f303 	lsl.w	r3, r9, r3
 801d480:	4313      	orrs	r3, r2
 801d482:	9304      	str	r3, [sp, #16]
 801d484:	46a2      	mov	sl, r4
 801d486:	e7d2      	b.n	801d42e <_vfiprintf_r+0xc6>
 801d488:	9b03      	ldr	r3, [sp, #12]
 801d48a:	1d19      	adds	r1, r3, #4
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	9103      	str	r1, [sp, #12]
 801d490:	2b00      	cmp	r3, #0
 801d492:	bfbb      	ittet	lt
 801d494:	425b      	neglt	r3, r3
 801d496:	f042 0202 	orrlt.w	r2, r2, #2
 801d49a:	9307      	strge	r3, [sp, #28]
 801d49c:	9307      	strlt	r3, [sp, #28]
 801d49e:	bfb8      	it	lt
 801d4a0:	9204      	strlt	r2, [sp, #16]
 801d4a2:	7823      	ldrb	r3, [r4, #0]
 801d4a4:	2b2e      	cmp	r3, #46	; 0x2e
 801d4a6:	d10c      	bne.n	801d4c2 <_vfiprintf_r+0x15a>
 801d4a8:	7863      	ldrb	r3, [r4, #1]
 801d4aa:	2b2a      	cmp	r3, #42	; 0x2a
 801d4ac:	d134      	bne.n	801d518 <_vfiprintf_r+0x1b0>
 801d4ae:	9b03      	ldr	r3, [sp, #12]
 801d4b0:	1d1a      	adds	r2, r3, #4
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	9203      	str	r2, [sp, #12]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	bfb8      	it	lt
 801d4ba:	f04f 33ff 	movlt.w	r3, #4294967295
 801d4be:	3402      	adds	r4, #2
 801d4c0:	9305      	str	r3, [sp, #20]
 801d4c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d598 <_vfiprintf_r+0x230>
 801d4c6:	7821      	ldrb	r1, [r4, #0]
 801d4c8:	2203      	movs	r2, #3
 801d4ca:	4650      	mov	r0, sl
 801d4cc:	f7e2 fe80 	bl	80001d0 <memchr>
 801d4d0:	b138      	cbz	r0, 801d4e2 <_vfiprintf_r+0x17a>
 801d4d2:	9b04      	ldr	r3, [sp, #16]
 801d4d4:	eba0 000a 	sub.w	r0, r0, sl
 801d4d8:	2240      	movs	r2, #64	; 0x40
 801d4da:	4082      	lsls	r2, r0
 801d4dc:	4313      	orrs	r3, r2
 801d4de:	3401      	adds	r4, #1
 801d4e0:	9304      	str	r3, [sp, #16]
 801d4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d4e6:	4829      	ldr	r0, [pc, #164]	; (801d58c <_vfiprintf_r+0x224>)
 801d4e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d4ec:	2206      	movs	r2, #6
 801d4ee:	f7e2 fe6f 	bl	80001d0 <memchr>
 801d4f2:	2800      	cmp	r0, #0
 801d4f4:	d03f      	beq.n	801d576 <_vfiprintf_r+0x20e>
 801d4f6:	4b26      	ldr	r3, [pc, #152]	; (801d590 <_vfiprintf_r+0x228>)
 801d4f8:	bb1b      	cbnz	r3, 801d542 <_vfiprintf_r+0x1da>
 801d4fa:	9b03      	ldr	r3, [sp, #12]
 801d4fc:	3307      	adds	r3, #7
 801d4fe:	f023 0307 	bic.w	r3, r3, #7
 801d502:	3308      	adds	r3, #8
 801d504:	9303      	str	r3, [sp, #12]
 801d506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d508:	443b      	add	r3, r7
 801d50a:	9309      	str	r3, [sp, #36]	; 0x24
 801d50c:	e768      	b.n	801d3e0 <_vfiprintf_r+0x78>
 801d50e:	fb0c 3202 	mla	r2, ip, r2, r3
 801d512:	460c      	mov	r4, r1
 801d514:	2001      	movs	r0, #1
 801d516:	e7a6      	b.n	801d466 <_vfiprintf_r+0xfe>
 801d518:	2300      	movs	r3, #0
 801d51a:	3401      	adds	r4, #1
 801d51c:	9305      	str	r3, [sp, #20]
 801d51e:	4619      	mov	r1, r3
 801d520:	f04f 0c0a 	mov.w	ip, #10
 801d524:	4620      	mov	r0, r4
 801d526:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d52a:	3a30      	subs	r2, #48	; 0x30
 801d52c:	2a09      	cmp	r2, #9
 801d52e:	d903      	bls.n	801d538 <_vfiprintf_r+0x1d0>
 801d530:	2b00      	cmp	r3, #0
 801d532:	d0c6      	beq.n	801d4c2 <_vfiprintf_r+0x15a>
 801d534:	9105      	str	r1, [sp, #20]
 801d536:	e7c4      	b.n	801d4c2 <_vfiprintf_r+0x15a>
 801d538:	fb0c 2101 	mla	r1, ip, r1, r2
 801d53c:	4604      	mov	r4, r0
 801d53e:	2301      	movs	r3, #1
 801d540:	e7f0      	b.n	801d524 <_vfiprintf_r+0x1bc>
 801d542:	ab03      	add	r3, sp, #12
 801d544:	9300      	str	r3, [sp, #0]
 801d546:	462a      	mov	r2, r5
 801d548:	4b12      	ldr	r3, [pc, #72]	; (801d594 <_vfiprintf_r+0x22c>)
 801d54a:	a904      	add	r1, sp, #16
 801d54c:	4630      	mov	r0, r6
 801d54e:	f7fb fe0d 	bl	801916c <_printf_float>
 801d552:	4607      	mov	r7, r0
 801d554:	1c78      	adds	r0, r7, #1
 801d556:	d1d6      	bne.n	801d506 <_vfiprintf_r+0x19e>
 801d558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d55a:	07d9      	lsls	r1, r3, #31
 801d55c:	d405      	bmi.n	801d56a <_vfiprintf_r+0x202>
 801d55e:	89ab      	ldrh	r3, [r5, #12]
 801d560:	059a      	lsls	r2, r3, #22
 801d562:	d402      	bmi.n	801d56a <_vfiprintf_r+0x202>
 801d564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d566:	f7fc fdbe 	bl	801a0e6 <__retarget_lock_release_recursive>
 801d56a:	89ab      	ldrh	r3, [r5, #12]
 801d56c:	065b      	lsls	r3, r3, #25
 801d56e:	f53f af1d 	bmi.w	801d3ac <_vfiprintf_r+0x44>
 801d572:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d574:	e71c      	b.n	801d3b0 <_vfiprintf_r+0x48>
 801d576:	ab03      	add	r3, sp, #12
 801d578:	9300      	str	r3, [sp, #0]
 801d57a:	462a      	mov	r2, r5
 801d57c:	4b05      	ldr	r3, [pc, #20]	; (801d594 <_vfiprintf_r+0x22c>)
 801d57e:	a904      	add	r1, sp, #16
 801d580:	4630      	mov	r0, r6
 801d582:	f7fc f897 	bl	80196b4 <_printf_i>
 801d586:	e7e4      	b.n	801d552 <_vfiprintf_r+0x1ea>
 801d588:	0801fff9 	.word	0x0801fff9
 801d58c:	08020003 	.word	0x08020003
 801d590:	0801916d 	.word	0x0801916d
 801d594:	0801d345 	.word	0x0801d345
 801d598:	0801ffff 	.word	0x0801ffff

0801d59c <__swbuf_r>:
 801d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d59e:	460e      	mov	r6, r1
 801d5a0:	4614      	mov	r4, r2
 801d5a2:	4605      	mov	r5, r0
 801d5a4:	b118      	cbz	r0, 801d5ae <__swbuf_r+0x12>
 801d5a6:	6a03      	ldr	r3, [r0, #32]
 801d5a8:	b90b      	cbnz	r3, 801d5ae <__swbuf_r+0x12>
 801d5aa:	f7fc fc2f 	bl	8019e0c <__sinit>
 801d5ae:	69a3      	ldr	r3, [r4, #24]
 801d5b0:	60a3      	str	r3, [r4, #8]
 801d5b2:	89a3      	ldrh	r3, [r4, #12]
 801d5b4:	071a      	lsls	r2, r3, #28
 801d5b6:	d525      	bpl.n	801d604 <__swbuf_r+0x68>
 801d5b8:	6923      	ldr	r3, [r4, #16]
 801d5ba:	b31b      	cbz	r3, 801d604 <__swbuf_r+0x68>
 801d5bc:	6823      	ldr	r3, [r4, #0]
 801d5be:	6922      	ldr	r2, [r4, #16]
 801d5c0:	1a98      	subs	r0, r3, r2
 801d5c2:	6963      	ldr	r3, [r4, #20]
 801d5c4:	b2f6      	uxtb	r6, r6
 801d5c6:	4283      	cmp	r3, r0
 801d5c8:	4637      	mov	r7, r6
 801d5ca:	dc04      	bgt.n	801d5d6 <__swbuf_r+0x3a>
 801d5cc:	4621      	mov	r1, r4
 801d5ce:	4628      	mov	r0, r5
 801d5d0:	f7ff fa3a 	bl	801ca48 <_fflush_r>
 801d5d4:	b9e0      	cbnz	r0, 801d610 <__swbuf_r+0x74>
 801d5d6:	68a3      	ldr	r3, [r4, #8]
 801d5d8:	3b01      	subs	r3, #1
 801d5da:	60a3      	str	r3, [r4, #8]
 801d5dc:	6823      	ldr	r3, [r4, #0]
 801d5de:	1c5a      	adds	r2, r3, #1
 801d5e0:	6022      	str	r2, [r4, #0]
 801d5e2:	701e      	strb	r6, [r3, #0]
 801d5e4:	6962      	ldr	r2, [r4, #20]
 801d5e6:	1c43      	adds	r3, r0, #1
 801d5e8:	429a      	cmp	r2, r3
 801d5ea:	d004      	beq.n	801d5f6 <__swbuf_r+0x5a>
 801d5ec:	89a3      	ldrh	r3, [r4, #12]
 801d5ee:	07db      	lsls	r3, r3, #31
 801d5f0:	d506      	bpl.n	801d600 <__swbuf_r+0x64>
 801d5f2:	2e0a      	cmp	r6, #10
 801d5f4:	d104      	bne.n	801d600 <__swbuf_r+0x64>
 801d5f6:	4621      	mov	r1, r4
 801d5f8:	4628      	mov	r0, r5
 801d5fa:	f7ff fa25 	bl	801ca48 <_fflush_r>
 801d5fe:	b938      	cbnz	r0, 801d610 <__swbuf_r+0x74>
 801d600:	4638      	mov	r0, r7
 801d602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d604:	4621      	mov	r1, r4
 801d606:	4628      	mov	r0, r5
 801d608:	f000 f806 	bl	801d618 <__swsetup_r>
 801d60c:	2800      	cmp	r0, #0
 801d60e:	d0d5      	beq.n	801d5bc <__swbuf_r+0x20>
 801d610:	f04f 37ff 	mov.w	r7, #4294967295
 801d614:	e7f4      	b.n	801d600 <__swbuf_r+0x64>
	...

0801d618 <__swsetup_r>:
 801d618:	b538      	push	{r3, r4, r5, lr}
 801d61a:	4b2a      	ldr	r3, [pc, #168]	; (801d6c4 <__swsetup_r+0xac>)
 801d61c:	4605      	mov	r5, r0
 801d61e:	6818      	ldr	r0, [r3, #0]
 801d620:	460c      	mov	r4, r1
 801d622:	b118      	cbz	r0, 801d62c <__swsetup_r+0x14>
 801d624:	6a03      	ldr	r3, [r0, #32]
 801d626:	b90b      	cbnz	r3, 801d62c <__swsetup_r+0x14>
 801d628:	f7fc fbf0 	bl	8019e0c <__sinit>
 801d62c:	89a3      	ldrh	r3, [r4, #12]
 801d62e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d632:	0718      	lsls	r0, r3, #28
 801d634:	d422      	bmi.n	801d67c <__swsetup_r+0x64>
 801d636:	06d9      	lsls	r1, r3, #27
 801d638:	d407      	bmi.n	801d64a <__swsetup_r+0x32>
 801d63a:	2309      	movs	r3, #9
 801d63c:	602b      	str	r3, [r5, #0]
 801d63e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d642:	81a3      	strh	r3, [r4, #12]
 801d644:	f04f 30ff 	mov.w	r0, #4294967295
 801d648:	e034      	b.n	801d6b4 <__swsetup_r+0x9c>
 801d64a:	0758      	lsls	r0, r3, #29
 801d64c:	d512      	bpl.n	801d674 <__swsetup_r+0x5c>
 801d64e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d650:	b141      	cbz	r1, 801d664 <__swsetup_r+0x4c>
 801d652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d656:	4299      	cmp	r1, r3
 801d658:	d002      	beq.n	801d660 <__swsetup_r+0x48>
 801d65a:	4628      	mov	r0, r5
 801d65c:	f7fd fbd2 	bl	801ae04 <_free_r>
 801d660:	2300      	movs	r3, #0
 801d662:	6363      	str	r3, [r4, #52]	; 0x34
 801d664:	89a3      	ldrh	r3, [r4, #12]
 801d666:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d66a:	81a3      	strh	r3, [r4, #12]
 801d66c:	2300      	movs	r3, #0
 801d66e:	6063      	str	r3, [r4, #4]
 801d670:	6923      	ldr	r3, [r4, #16]
 801d672:	6023      	str	r3, [r4, #0]
 801d674:	89a3      	ldrh	r3, [r4, #12]
 801d676:	f043 0308 	orr.w	r3, r3, #8
 801d67a:	81a3      	strh	r3, [r4, #12]
 801d67c:	6923      	ldr	r3, [r4, #16]
 801d67e:	b94b      	cbnz	r3, 801d694 <__swsetup_r+0x7c>
 801d680:	89a3      	ldrh	r3, [r4, #12]
 801d682:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d68a:	d003      	beq.n	801d694 <__swsetup_r+0x7c>
 801d68c:	4621      	mov	r1, r4
 801d68e:	4628      	mov	r0, r5
 801d690:	f000 f884 	bl	801d79c <__smakebuf_r>
 801d694:	89a0      	ldrh	r0, [r4, #12]
 801d696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d69a:	f010 0301 	ands.w	r3, r0, #1
 801d69e:	d00a      	beq.n	801d6b6 <__swsetup_r+0x9e>
 801d6a0:	2300      	movs	r3, #0
 801d6a2:	60a3      	str	r3, [r4, #8]
 801d6a4:	6963      	ldr	r3, [r4, #20]
 801d6a6:	425b      	negs	r3, r3
 801d6a8:	61a3      	str	r3, [r4, #24]
 801d6aa:	6923      	ldr	r3, [r4, #16]
 801d6ac:	b943      	cbnz	r3, 801d6c0 <__swsetup_r+0xa8>
 801d6ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d6b2:	d1c4      	bne.n	801d63e <__swsetup_r+0x26>
 801d6b4:	bd38      	pop	{r3, r4, r5, pc}
 801d6b6:	0781      	lsls	r1, r0, #30
 801d6b8:	bf58      	it	pl
 801d6ba:	6963      	ldrpl	r3, [r4, #20]
 801d6bc:	60a3      	str	r3, [r4, #8]
 801d6be:	e7f4      	b.n	801d6aa <__swsetup_r+0x92>
 801d6c0:	2000      	movs	r0, #0
 801d6c2:	e7f7      	b.n	801d6b4 <__swsetup_r+0x9c>
 801d6c4:	20000164 	.word	0x20000164

0801d6c8 <_raise_r>:
 801d6c8:	291f      	cmp	r1, #31
 801d6ca:	b538      	push	{r3, r4, r5, lr}
 801d6cc:	4604      	mov	r4, r0
 801d6ce:	460d      	mov	r5, r1
 801d6d0:	d904      	bls.n	801d6dc <_raise_r+0x14>
 801d6d2:	2316      	movs	r3, #22
 801d6d4:	6003      	str	r3, [r0, #0]
 801d6d6:	f04f 30ff 	mov.w	r0, #4294967295
 801d6da:	bd38      	pop	{r3, r4, r5, pc}
 801d6dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d6de:	b112      	cbz	r2, 801d6e6 <_raise_r+0x1e>
 801d6e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d6e4:	b94b      	cbnz	r3, 801d6fa <_raise_r+0x32>
 801d6e6:	4620      	mov	r0, r4
 801d6e8:	f000 f830 	bl	801d74c <_getpid_r>
 801d6ec:	462a      	mov	r2, r5
 801d6ee:	4601      	mov	r1, r0
 801d6f0:	4620      	mov	r0, r4
 801d6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d6f6:	f000 b817 	b.w	801d728 <_kill_r>
 801d6fa:	2b01      	cmp	r3, #1
 801d6fc:	d00a      	beq.n	801d714 <_raise_r+0x4c>
 801d6fe:	1c59      	adds	r1, r3, #1
 801d700:	d103      	bne.n	801d70a <_raise_r+0x42>
 801d702:	2316      	movs	r3, #22
 801d704:	6003      	str	r3, [r0, #0]
 801d706:	2001      	movs	r0, #1
 801d708:	e7e7      	b.n	801d6da <_raise_r+0x12>
 801d70a:	2400      	movs	r4, #0
 801d70c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d710:	4628      	mov	r0, r5
 801d712:	4798      	blx	r3
 801d714:	2000      	movs	r0, #0
 801d716:	e7e0      	b.n	801d6da <_raise_r+0x12>

0801d718 <raise>:
 801d718:	4b02      	ldr	r3, [pc, #8]	; (801d724 <raise+0xc>)
 801d71a:	4601      	mov	r1, r0
 801d71c:	6818      	ldr	r0, [r3, #0]
 801d71e:	f7ff bfd3 	b.w	801d6c8 <_raise_r>
 801d722:	bf00      	nop
 801d724:	20000164 	.word	0x20000164

0801d728 <_kill_r>:
 801d728:	b538      	push	{r3, r4, r5, lr}
 801d72a:	4d07      	ldr	r5, [pc, #28]	; (801d748 <_kill_r+0x20>)
 801d72c:	2300      	movs	r3, #0
 801d72e:	4604      	mov	r4, r0
 801d730:	4608      	mov	r0, r1
 801d732:	4611      	mov	r1, r2
 801d734:	602b      	str	r3, [r5, #0]
 801d736:	f7e6 fb35 	bl	8003da4 <_kill>
 801d73a:	1c43      	adds	r3, r0, #1
 801d73c:	d102      	bne.n	801d744 <_kill_r+0x1c>
 801d73e:	682b      	ldr	r3, [r5, #0]
 801d740:	b103      	cbz	r3, 801d744 <_kill_r+0x1c>
 801d742:	6023      	str	r3, [r4, #0]
 801d744:	bd38      	pop	{r3, r4, r5, pc}
 801d746:	bf00      	nop
 801d748:	2000e668 	.word	0x2000e668

0801d74c <_getpid_r>:
 801d74c:	f7e6 bb22 	b.w	8003d94 <_getpid>

0801d750 <__swhatbuf_r>:
 801d750:	b570      	push	{r4, r5, r6, lr}
 801d752:	460c      	mov	r4, r1
 801d754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d758:	2900      	cmp	r1, #0
 801d75a:	b096      	sub	sp, #88	; 0x58
 801d75c:	4615      	mov	r5, r2
 801d75e:	461e      	mov	r6, r3
 801d760:	da0d      	bge.n	801d77e <__swhatbuf_r+0x2e>
 801d762:	89a3      	ldrh	r3, [r4, #12]
 801d764:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d768:	f04f 0100 	mov.w	r1, #0
 801d76c:	bf0c      	ite	eq
 801d76e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d772:	2340      	movne	r3, #64	; 0x40
 801d774:	2000      	movs	r0, #0
 801d776:	6031      	str	r1, [r6, #0]
 801d778:	602b      	str	r3, [r5, #0]
 801d77a:	b016      	add	sp, #88	; 0x58
 801d77c:	bd70      	pop	{r4, r5, r6, pc}
 801d77e:	466a      	mov	r2, sp
 801d780:	f000 f848 	bl	801d814 <_fstat_r>
 801d784:	2800      	cmp	r0, #0
 801d786:	dbec      	blt.n	801d762 <__swhatbuf_r+0x12>
 801d788:	9901      	ldr	r1, [sp, #4]
 801d78a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d78e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d792:	4259      	negs	r1, r3
 801d794:	4159      	adcs	r1, r3
 801d796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d79a:	e7eb      	b.n	801d774 <__swhatbuf_r+0x24>

0801d79c <__smakebuf_r>:
 801d79c:	898b      	ldrh	r3, [r1, #12]
 801d79e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d7a0:	079d      	lsls	r5, r3, #30
 801d7a2:	4606      	mov	r6, r0
 801d7a4:	460c      	mov	r4, r1
 801d7a6:	d507      	bpl.n	801d7b8 <__smakebuf_r+0x1c>
 801d7a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d7ac:	6023      	str	r3, [r4, #0]
 801d7ae:	6123      	str	r3, [r4, #16]
 801d7b0:	2301      	movs	r3, #1
 801d7b2:	6163      	str	r3, [r4, #20]
 801d7b4:	b002      	add	sp, #8
 801d7b6:	bd70      	pop	{r4, r5, r6, pc}
 801d7b8:	ab01      	add	r3, sp, #4
 801d7ba:	466a      	mov	r2, sp
 801d7bc:	f7ff ffc8 	bl	801d750 <__swhatbuf_r>
 801d7c0:	9900      	ldr	r1, [sp, #0]
 801d7c2:	4605      	mov	r5, r0
 801d7c4:	4630      	mov	r0, r6
 801d7c6:	f7fd fb91 	bl	801aeec <_malloc_r>
 801d7ca:	b948      	cbnz	r0, 801d7e0 <__smakebuf_r+0x44>
 801d7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d7d0:	059a      	lsls	r2, r3, #22
 801d7d2:	d4ef      	bmi.n	801d7b4 <__smakebuf_r+0x18>
 801d7d4:	f023 0303 	bic.w	r3, r3, #3
 801d7d8:	f043 0302 	orr.w	r3, r3, #2
 801d7dc:	81a3      	strh	r3, [r4, #12]
 801d7de:	e7e3      	b.n	801d7a8 <__smakebuf_r+0xc>
 801d7e0:	89a3      	ldrh	r3, [r4, #12]
 801d7e2:	6020      	str	r0, [r4, #0]
 801d7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d7e8:	81a3      	strh	r3, [r4, #12]
 801d7ea:	9b00      	ldr	r3, [sp, #0]
 801d7ec:	6163      	str	r3, [r4, #20]
 801d7ee:	9b01      	ldr	r3, [sp, #4]
 801d7f0:	6120      	str	r0, [r4, #16]
 801d7f2:	b15b      	cbz	r3, 801d80c <__smakebuf_r+0x70>
 801d7f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d7f8:	4630      	mov	r0, r6
 801d7fa:	f000 f81d 	bl	801d838 <_isatty_r>
 801d7fe:	b128      	cbz	r0, 801d80c <__smakebuf_r+0x70>
 801d800:	89a3      	ldrh	r3, [r4, #12]
 801d802:	f023 0303 	bic.w	r3, r3, #3
 801d806:	f043 0301 	orr.w	r3, r3, #1
 801d80a:	81a3      	strh	r3, [r4, #12]
 801d80c:	89a3      	ldrh	r3, [r4, #12]
 801d80e:	431d      	orrs	r5, r3
 801d810:	81a5      	strh	r5, [r4, #12]
 801d812:	e7cf      	b.n	801d7b4 <__smakebuf_r+0x18>

0801d814 <_fstat_r>:
 801d814:	b538      	push	{r3, r4, r5, lr}
 801d816:	4d07      	ldr	r5, [pc, #28]	; (801d834 <_fstat_r+0x20>)
 801d818:	2300      	movs	r3, #0
 801d81a:	4604      	mov	r4, r0
 801d81c:	4608      	mov	r0, r1
 801d81e:	4611      	mov	r1, r2
 801d820:	602b      	str	r3, [r5, #0]
 801d822:	f7e6 fb1e 	bl	8003e62 <_fstat>
 801d826:	1c43      	adds	r3, r0, #1
 801d828:	d102      	bne.n	801d830 <_fstat_r+0x1c>
 801d82a:	682b      	ldr	r3, [r5, #0]
 801d82c:	b103      	cbz	r3, 801d830 <_fstat_r+0x1c>
 801d82e:	6023      	str	r3, [r4, #0]
 801d830:	bd38      	pop	{r3, r4, r5, pc}
 801d832:	bf00      	nop
 801d834:	2000e668 	.word	0x2000e668

0801d838 <_isatty_r>:
 801d838:	b538      	push	{r3, r4, r5, lr}
 801d83a:	4d06      	ldr	r5, [pc, #24]	; (801d854 <_isatty_r+0x1c>)
 801d83c:	2300      	movs	r3, #0
 801d83e:	4604      	mov	r4, r0
 801d840:	4608      	mov	r0, r1
 801d842:	602b      	str	r3, [r5, #0]
 801d844:	f7e6 fb1d 	bl	8003e82 <_isatty>
 801d848:	1c43      	adds	r3, r0, #1
 801d84a:	d102      	bne.n	801d852 <_isatty_r+0x1a>
 801d84c:	682b      	ldr	r3, [r5, #0]
 801d84e:	b103      	cbz	r3, 801d852 <_isatty_r+0x1a>
 801d850:	6023      	str	r3, [r4, #0]
 801d852:	bd38      	pop	{r3, r4, r5, pc}
 801d854:	2000e668 	.word	0x2000e668

0801d858 <asin>:
 801d858:	b538      	push	{r3, r4, r5, lr}
 801d85a:	ed2d 8b02 	vpush	{d8}
 801d85e:	ec55 4b10 	vmov	r4, r5, d0
 801d862:	f000 fb99 	bl	801df98 <__ieee754_asin>
 801d866:	4622      	mov	r2, r4
 801d868:	462b      	mov	r3, r5
 801d86a:	4620      	mov	r0, r4
 801d86c:	4629      	mov	r1, r5
 801d86e:	eeb0 8a40 	vmov.f32	s16, s0
 801d872:	eef0 8a60 	vmov.f32	s17, s1
 801d876:	f7e3 f959 	bl	8000b2c <__aeabi_dcmpun>
 801d87a:	b9a8      	cbnz	r0, 801d8a8 <asin+0x50>
 801d87c:	ec45 4b10 	vmov	d0, r4, r5
 801d880:	f000 f8a2 	bl	801d9c8 <fabs>
 801d884:	4b0c      	ldr	r3, [pc, #48]	; (801d8b8 <asin+0x60>)
 801d886:	ec51 0b10 	vmov	r0, r1, d0
 801d88a:	2200      	movs	r2, #0
 801d88c:	f7e3 f944 	bl	8000b18 <__aeabi_dcmpgt>
 801d890:	b150      	cbz	r0, 801d8a8 <asin+0x50>
 801d892:	f7fc fbfd 	bl	801a090 <__errno>
 801d896:	ecbd 8b02 	vpop	{d8}
 801d89a:	2321      	movs	r3, #33	; 0x21
 801d89c:	6003      	str	r3, [r0, #0]
 801d89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d8a2:	4806      	ldr	r0, [pc, #24]	; (801d8bc <asin+0x64>)
 801d8a4:	f7ff b934 	b.w	801cb10 <nan>
 801d8a8:	eeb0 0a48 	vmov.f32	s0, s16
 801d8ac:	eef0 0a68 	vmov.f32	s1, s17
 801d8b0:	ecbd 8b02 	vpop	{d8}
 801d8b4:	bd38      	pop	{r3, r4, r5, pc}
 801d8b6:	bf00      	nop
 801d8b8:	3ff00000 	.word	0x3ff00000
 801d8bc:	0802004d 	.word	0x0802004d

0801d8c0 <atan2>:
 801d8c0:	f000 bd7e 	b.w	801e3c0 <__ieee754_atan2>

0801d8c4 <sqrt>:
 801d8c4:	b538      	push	{r3, r4, r5, lr}
 801d8c6:	ed2d 8b02 	vpush	{d8}
 801d8ca:	ec55 4b10 	vmov	r4, r5, d0
 801d8ce:	f000 f8fd 	bl	801dacc <__ieee754_sqrt>
 801d8d2:	4622      	mov	r2, r4
 801d8d4:	462b      	mov	r3, r5
 801d8d6:	4620      	mov	r0, r4
 801d8d8:	4629      	mov	r1, r5
 801d8da:	eeb0 8a40 	vmov.f32	s16, s0
 801d8de:	eef0 8a60 	vmov.f32	s17, s1
 801d8e2:	f7e3 f923 	bl	8000b2c <__aeabi_dcmpun>
 801d8e6:	b990      	cbnz	r0, 801d90e <sqrt+0x4a>
 801d8e8:	2200      	movs	r2, #0
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	4620      	mov	r0, r4
 801d8ee:	4629      	mov	r1, r5
 801d8f0:	f7e3 f8f4 	bl	8000adc <__aeabi_dcmplt>
 801d8f4:	b158      	cbz	r0, 801d90e <sqrt+0x4a>
 801d8f6:	f7fc fbcb 	bl	801a090 <__errno>
 801d8fa:	2321      	movs	r3, #33	; 0x21
 801d8fc:	6003      	str	r3, [r0, #0]
 801d8fe:	2200      	movs	r2, #0
 801d900:	2300      	movs	r3, #0
 801d902:	4610      	mov	r0, r2
 801d904:	4619      	mov	r1, r3
 801d906:	f7e2 ffa1 	bl	800084c <__aeabi_ddiv>
 801d90a:	ec41 0b18 	vmov	d8, r0, r1
 801d90e:	eeb0 0a48 	vmov.f32	s0, s16
 801d912:	eef0 0a68 	vmov.f32	s1, s17
 801d916:	ecbd 8b02 	vpop	{d8}
 801d91a:	bd38      	pop	{r3, r4, r5, pc}
 801d91c:	0000      	movs	r0, r0
	...

0801d920 <cos>:
 801d920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d922:	ec53 2b10 	vmov	r2, r3, d0
 801d926:	4826      	ldr	r0, [pc, #152]	; (801d9c0 <cos+0xa0>)
 801d928:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d92c:	4281      	cmp	r1, r0
 801d92e:	dc06      	bgt.n	801d93e <cos+0x1e>
 801d930:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801d9b8 <cos+0x98>
 801d934:	b005      	add	sp, #20
 801d936:	f85d eb04 	ldr.w	lr, [sp], #4
 801d93a:	f000 b9a5 	b.w	801dc88 <__kernel_cos>
 801d93e:	4821      	ldr	r0, [pc, #132]	; (801d9c4 <cos+0xa4>)
 801d940:	4281      	cmp	r1, r0
 801d942:	dd09      	ble.n	801d958 <cos+0x38>
 801d944:	ee10 0a10 	vmov	r0, s0
 801d948:	4619      	mov	r1, r3
 801d94a:	f7e2 fc9d 	bl	8000288 <__aeabi_dsub>
 801d94e:	ec41 0b10 	vmov	d0, r0, r1
 801d952:	b005      	add	sp, #20
 801d954:	f85d fb04 	ldr.w	pc, [sp], #4
 801d958:	4668      	mov	r0, sp
 801d95a:	f000 fdf9 	bl	801e550 <__ieee754_rem_pio2>
 801d95e:	f000 0003 	and.w	r0, r0, #3
 801d962:	2801      	cmp	r0, #1
 801d964:	d00b      	beq.n	801d97e <cos+0x5e>
 801d966:	2802      	cmp	r0, #2
 801d968:	d016      	beq.n	801d998 <cos+0x78>
 801d96a:	b9e0      	cbnz	r0, 801d9a6 <cos+0x86>
 801d96c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d970:	ed9d 0b00 	vldr	d0, [sp]
 801d974:	f000 f988 	bl	801dc88 <__kernel_cos>
 801d978:	ec51 0b10 	vmov	r0, r1, d0
 801d97c:	e7e7      	b.n	801d94e <cos+0x2e>
 801d97e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d982:	ed9d 0b00 	vldr	d0, [sp]
 801d986:	f000 fa47 	bl	801de18 <__kernel_sin>
 801d98a:	ec53 2b10 	vmov	r2, r3, d0
 801d98e:	ee10 0a10 	vmov	r0, s0
 801d992:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d996:	e7da      	b.n	801d94e <cos+0x2e>
 801d998:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d99c:	ed9d 0b00 	vldr	d0, [sp]
 801d9a0:	f000 f972 	bl	801dc88 <__kernel_cos>
 801d9a4:	e7f1      	b.n	801d98a <cos+0x6a>
 801d9a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d9aa:	ed9d 0b00 	vldr	d0, [sp]
 801d9ae:	2001      	movs	r0, #1
 801d9b0:	f000 fa32 	bl	801de18 <__kernel_sin>
 801d9b4:	e7e0      	b.n	801d978 <cos+0x58>
 801d9b6:	bf00      	nop
	...
 801d9c0:	3fe921fb 	.word	0x3fe921fb
 801d9c4:	7fefffff 	.word	0x7fefffff

0801d9c8 <fabs>:
 801d9c8:	ec51 0b10 	vmov	r0, r1, d0
 801d9cc:	ee10 2a10 	vmov	r2, s0
 801d9d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d9d4:	ec43 2b10 	vmov	d0, r2, r3
 801d9d8:	4770      	bx	lr
 801d9da:	0000      	movs	r0, r0
 801d9dc:	0000      	movs	r0, r0
	...

0801d9e0 <sin>:
 801d9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d9e2:	ec53 2b10 	vmov	r2, r3, d0
 801d9e6:	4828      	ldr	r0, [pc, #160]	; (801da88 <sin+0xa8>)
 801d9e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d9ec:	4281      	cmp	r1, r0
 801d9ee:	dc07      	bgt.n	801da00 <sin+0x20>
 801d9f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801da80 <sin+0xa0>
 801d9f4:	2000      	movs	r0, #0
 801d9f6:	b005      	add	sp, #20
 801d9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d9fc:	f000 ba0c 	b.w	801de18 <__kernel_sin>
 801da00:	4822      	ldr	r0, [pc, #136]	; (801da8c <sin+0xac>)
 801da02:	4281      	cmp	r1, r0
 801da04:	dd09      	ble.n	801da1a <sin+0x3a>
 801da06:	ee10 0a10 	vmov	r0, s0
 801da0a:	4619      	mov	r1, r3
 801da0c:	f7e2 fc3c 	bl	8000288 <__aeabi_dsub>
 801da10:	ec41 0b10 	vmov	d0, r0, r1
 801da14:	b005      	add	sp, #20
 801da16:	f85d fb04 	ldr.w	pc, [sp], #4
 801da1a:	4668      	mov	r0, sp
 801da1c:	f000 fd98 	bl	801e550 <__ieee754_rem_pio2>
 801da20:	f000 0003 	and.w	r0, r0, #3
 801da24:	2801      	cmp	r0, #1
 801da26:	d00c      	beq.n	801da42 <sin+0x62>
 801da28:	2802      	cmp	r0, #2
 801da2a:	d011      	beq.n	801da50 <sin+0x70>
 801da2c:	b9f0      	cbnz	r0, 801da6c <sin+0x8c>
 801da2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801da32:	ed9d 0b00 	vldr	d0, [sp]
 801da36:	2001      	movs	r0, #1
 801da38:	f000 f9ee 	bl	801de18 <__kernel_sin>
 801da3c:	ec51 0b10 	vmov	r0, r1, d0
 801da40:	e7e6      	b.n	801da10 <sin+0x30>
 801da42:	ed9d 1b02 	vldr	d1, [sp, #8]
 801da46:	ed9d 0b00 	vldr	d0, [sp]
 801da4a:	f000 f91d 	bl	801dc88 <__kernel_cos>
 801da4e:	e7f5      	b.n	801da3c <sin+0x5c>
 801da50:	ed9d 1b02 	vldr	d1, [sp, #8]
 801da54:	ed9d 0b00 	vldr	d0, [sp]
 801da58:	2001      	movs	r0, #1
 801da5a:	f000 f9dd 	bl	801de18 <__kernel_sin>
 801da5e:	ec53 2b10 	vmov	r2, r3, d0
 801da62:	ee10 0a10 	vmov	r0, s0
 801da66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801da6a:	e7d1      	b.n	801da10 <sin+0x30>
 801da6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801da70:	ed9d 0b00 	vldr	d0, [sp]
 801da74:	f000 f908 	bl	801dc88 <__kernel_cos>
 801da78:	e7f1      	b.n	801da5e <sin+0x7e>
 801da7a:	bf00      	nop
 801da7c:	f3af 8000 	nop.w
	...
 801da88:	3fe921fb 	.word	0x3fe921fb
 801da8c:	7fefffff 	.word	0x7fefffff

0801da90 <sqrtf>:
 801da90:	b508      	push	{r3, lr}
 801da92:	ed2d 8b02 	vpush	{d8}
 801da96:	eeb0 8a40 	vmov.f32	s16, s0
 801da9a:	f000 f8f1 	bl	801dc80 <__ieee754_sqrtf>
 801da9e:	eeb4 8a48 	vcmp.f32	s16, s16
 801daa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daa6:	d60c      	bvs.n	801dac2 <sqrtf+0x32>
 801daa8:	eddf 8a07 	vldr	s17, [pc, #28]	; 801dac8 <sqrtf+0x38>
 801daac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801dab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dab4:	d505      	bpl.n	801dac2 <sqrtf+0x32>
 801dab6:	f7fc faeb 	bl	801a090 <__errno>
 801daba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801dabe:	2321      	movs	r3, #33	; 0x21
 801dac0:	6003      	str	r3, [r0, #0]
 801dac2:	ecbd 8b02 	vpop	{d8}
 801dac6:	bd08      	pop	{r3, pc}
 801dac8:	00000000 	.word	0x00000000

0801dacc <__ieee754_sqrt>:
 801dacc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dad0:	ec55 4b10 	vmov	r4, r5, d0
 801dad4:	4e67      	ldr	r6, [pc, #412]	; (801dc74 <__ieee754_sqrt+0x1a8>)
 801dad6:	43ae      	bics	r6, r5
 801dad8:	ee10 0a10 	vmov	r0, s0
 801dadc:	ee10 2a10 	vmov	r2, s0
 801dae0:	4629      	mov	r1, r5
 801dae2:	462b      	mov	r3, r5
 801dae4:	d10d      	bne.n	801db02 <__ieee754_sqrt+0x36>
 801dae6:	f7e2 fd87 	bl	80005f8 <__aeabi_dmul>
 801daea:	4602      	mov	r2, r0
 801daec:	460b      	mov	r3, r1
 801daee:	4620      	mov	r0, r4
 801daf0:	4629      	mov	r1, r5
 801daf2:	f7e2 fbcb 	bl	800028c <__adddf3>
 801daf6:	4604      	mov	r4, r0
 801daf8:	460d      	mov	r5, r1
 801dafa:	ec45 4b10 	vmov	d0, r4, r5
 801dafe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db02:	2d00      	cmp	r5, #0
 801db04:	dc0b      	bgt.n	801db1e <__ieee754_sqrt+0x52>
 801db06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801db0a:	4326      	orrs	r6, r4
 801db0c:	d0f5      	beq.n	801dafa <__ieee754_sqrt+0x2e>
 801db0e:	b135      	cbz	r5, 801db1e <__ieee754_sqrt+0x52>
 801db10:	f7e2 fbba 	bl	8000288 <__aeabi_dsub>
 801db14:	4602      	mov	r2, r0
 801db16:	460b      	mov	r3, r1
 801db18:	f7e2 fe98 	bl	800084c <__aeabi_ddiv>
 801db1c:	e7eb      	b.n	801daf6 <__ieee754_sqrt+0x2a>
 801db1e:	1509      	asrs	r1, r1, #20
 801db20:	f000 808d 	beq.w	801dc3e <__ieee754_sqrt+0x172>
 801db24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801db28:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801db2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801db30:	07c9      	lsls	r1, r1, #31
 801db32:	bf5c      	itt	pl
 801db34:	005b      	lslpl	r3, r3, #1
 801db36:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801db3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801db3e:	bf58      	it	pl
 801db40:	0052      	lslpl	r2, r2, #1
 801db42:	2500      	movs	r5, #0
 801db44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801db48:	1076      	asrs	r6, r6, #1
 801db4a:	0052      	lsls	r2, r2, #1
 801db4c:	f04f 0e16 	mov.w	lr, #22
 801db50:	46ac      	mov	ip, r5
 801db52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801db56:	eb0c 0001 	add.w	r0, ip, r1
 801db5a:	4298      	cmp	r0, r3
 801db5c:	bfde      	ittt	le
 801db5e:	1a1b      	suble	r3, r3, r0
 801db60:	eb00 0c01 	addle.w	ip, r0, r1
 801db64:	186d      	addle	r5, r5, r1
 801db66:	005b      	lsls	r3, r3, #1
 801db68:	f1be 0e01 	subs.w	lr, lr, #1
 801db6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801db70:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801db74:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801db78:	d1ed      	bne.n	801db56 <__ieee754_sqrt+0x8a>
 801db7a:	4674      	mov	r4, lr
 801db7c:	2720      	movs	r7, #32
 801db7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801db82:	4563      	cmp	r3, ip
 801db84:	eb01 000e 	add.w	r0, r1, lr
 801db88:	dc02      	bgt.n	801db90 <__ieee754_sqrt+0xc4>
 801db8a:	d113      	bne.n	801dbb4 <__ieee754_sqrt+0xe8>
 801db8c:	4290      	cmp	r0, r2
 801db8e:	d811      	bhi.n	801dbb4 <__ieee754_sqrt+0xe8>
 801db90:	2800      	cmp	r0, #0
 801db92:	eb00 0e01 	add.w	lr, r0, r1
 801db96:	da57      	bge.n	801dc48 <__ieee754_sqrt+0x17c>
 801db98:	f1be 0f00 	cmp.w	lr, #0
 801db9c:	db54      	blt.n	801dc48 <__ieee754_sqrt+0x17c>
 801db9e:	f10c 0801 	add.w	r8, ip, #1
 801dba2:	eba3 030c 	sub.w	r3, r3, ip
 801dba6:	4290      	cmp	r0, r2
 801dba8:	bf88      	it	hi
 801dbaa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801dbae:	1a12      	subs	r2, r2, r0
 801dbb0:	440c      	add	r4, r1
 801dbb2:	46c4      	mov	ip, r8
 801dbb4:	005b      	lsls	r3, r3, #1
 801dbb6:	3f01      	subs	r7, #1
 801dbb8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801dbbc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801dbc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801dbc4:	d1dd      	bne.n	801db82 <__ieee754_sqrt+0xb6>
 801dbc6:	4313      	orrs	r3, r2
 801dbc8:	d01b      	beq.n	801dc02 <__ieee754_sqrt+0x136>
 801dbca:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801dc78 <__ieee754_sqrt+0x1ac>
 801dbce:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801dc7c <__ieee754_sqrt+0x1b0>
 801dbd2:	e9da 0100 	ldrd	r0, r1, [sl]
 801dbd6:	e9db 2300 	ldrd	r2, r3, [fp]
 801dbda:	f7e2 fb55 	bl	8000288 <__aeabi_dsub>
 801dbde:	e9da 8900 	ldrd	r8, r9, [sl]
 801dbe2:	4602      	mov	r2, r0
 801dbe4:	460b      	mov	r3, r1
 801dbe6:	4640      	mov	r0, r8
 801dbe8:	4649      	mov	r1, r9
 801dbea:	f7e2 ff81 	bl	8000af0 <__aeabi_dcmple>
 801dbee:	b140      	cbz	r0, 801dc02 <__ieee754_sqrt+0x136>
 801dbf0:	f1b4 3fff 	cmp.w	r4, #4294967295
 801dbf4:	e9da 0100 	ldrd	r0, r1, [sl]
 801dbf8:	e9db 2300 	ldrd	r2, r3, [fp]
 801dbfc:	d126      	bne.n	801dc4c <__ieee754_sqrt+0x180>
 801dbfe:	3501      	adds	r5, #1
 801dc00:	463c      	mov	r4, r7
 801dc02:	106a      	asrs	r2, r5, #1
 801dc04:	0863      	lsrs	r3, r4, #1
 801dc06:	07e9      	lsls	r1, r5, #31
 801dc08:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801dc0c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801dc10:	bf48      	it	mi
 801dc12:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801dc16:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801dc1a:	461c      	mov	r4, r3
 801dc1c:	e76d      	b.n	801dafa <__ieee754_sqrt+0x2e>
 801dc1e:	0ad3      	lsrs	r3, r2, #11
 801dc20:	3815      	subs	r0, #21
 801dc22:	0552      	lsls	r2, r2, #21
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d0fa      	beq.n	801dc1e <__ieee754_sqrt+0x152>
 801dc28:	02dc      	lsls	r4, r3, #11
 801dc2a:	d50a      	bpl.n	801dc42 <__ieee754_sqrt+0x176>
 801dc2c:	f1c1 0420 	rsb	r4, r1, #32
 801dc30:	fa22 f404 	lsr.w	r4, r2, r4
 801dc34:	1e4d      	subs	r5, r1, #1
 801dc36:	408a      	lsls	r2, r1
 801dc38:	4323      	orrs	r3, r4
 801dc3a:	1b41      	subs	r1, r0, r5
 801dc3c:	e772      	b.n	801db24 <__ieee754_sqrt+0x58>
 801dc3e:	4608      	mov	r0, r1
 801dc40:	e7f0      	b.n	801dc24 <__ieee754_sqrt+0x158>
 801dc42:	005b      	lsls	r3, r3, #1
 801dc44:	3101      	adds	r1, #1
 801dc46:	e7ef      	b.n	801dc28 <__ieee754_sqrt+0x15c>
 801dc48:	46e0      	mov	r8, ip
 801dc4a:	e7aa      	b.n	801dba2 <__ieee754_sqrt+0xd6>
 801dc4c:	f7e2 fb1e 	bl	800028c <__adddf3>
 801dc50:	e9da 8900 	ldrd	r8, r9, [sl]
 801dc54:	4602      	mov	r2, r0
 801dc56:	460b      	mov	r3, r1
 801dc58:	4640      	mov	r0, r8
 801dc5a:	4649      	mov	r1, r9
 801dc5c:	f7e2 ff3e 	bl	8000adc <__aeabi_dcmplt>
 801dc60:	b120      	cbz	r0, 801dc6c <__ieee754_sqrt+0x1a0>
 801dc62:	1ca0      	adds	r0, r4, #2
 801dc64:	bf08      	it	eq
 801dc66:	3501      	addeq	r5, #1
 801dc68:	3402      	adds	r4, #2
 801dc6a:	e7ca      	b.n	801dc02 <__ieee754_sqrt+0x136>
 801dc6c:	3401      	adds	r4, #1
 801dc6e:	f024 0401 	bic.w	r4, r4, #1
 801dc72:	e7c6      	b.n	801dc02 <__ieee754_sqrt+0x136>
 801dc74:	7ff00000 	.word	0x7ff00000
 801dc78:	200002d8 	.word	0x200002d8
 801dc7c:	200002e0 	.word	0x200002e0

0801dc80 <__ieee754_sqrtf>:
 801dc80:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801dc84:	4770      	bx	lr
	...

0801dc88 <__kernel_cos>:
 801dc88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc8c:	ec57 6b10 	vmov	r6, r7, d0
 801dc90:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801dc94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801dc98:	ed8d 1b00 	vstr	d1, [sp]
 801dc9c:	da07      	bge.n	801dcae <__kernel_cos+0x26>
 801dc9e:	ee10 0a10 	vmov	r0, s0
 801dca2:	4639      	mov	r1, r7
 801dca4:	f7e2 ff58 	bl	8000b58 <__aeabi_d2iz>
 801dca8:	2800      	cmp	r0, #0
 801dcaa:	f000 8088 	beq.w	801ddbe <__kernel_cos+0x136>
 801dcae:	4632      	mov	r2, r6
 801dcb0:	463b      	mov	r3, r7
 801dcb2:	4630      	mov	r0, r6
 801dcb4:	4639      	mov	r1, r7
 801dcb6:	f7e2 fc9f 	bl	80005f8 <__aeabi_dmul>
 801dcba:	4b51      	ldr	r3, [pc, #324]	; (801de00 <__kernel_cos+0x178>)
 801dcbc:	2200      	movs	r2, #0
 801dcbe:	4604      	mov	r4, r0
 801dcc0:	460d      	mov	r5, r1
 801dcc2:	f7e2 fc99 	bl	80005f8 <__aeabi_dmul>
 801dcc6:	a340      	add	r3, pc, #256	; (adr r3, 801ddc8 <__kernel_cos+0x140>)
 801dcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dccc:	4682      	mov	sl, r0
 801dcce:	468b      	mov	fp, r1
 801dcd0:	4620      	mov	r0, r4
 801dcd2:	4629      	mov	r1, r5
 801dcd4:	f7e2 fc90 	bl	80005f8 <__aeabi_dmul>
 801dcd8:	a33d      	add	r3, pc, #244	; (adr r3, 801ddd0 <__kernel_cos+0x148>)
 801dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcde:	f7e2 fad5 	bl	800028c <__adddf3>
 801dce2:	4622      	mov	r2, r4
 801dce4:	462b      	mov	r3, r5
 801dce6:	f7e2 fc87 	bl	80005f8 <__aeabi_dmul>
 801dcea:	a33b      	add	r3, pc, #236	; (adr r3, 801ddd8 <__kernel_cos+0x150>)
 801dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcf0:	f7e2 faca 	bl	8000288 <__aeabi_dsub>
 801dcf4:	4622      	mov	r2, r4
 801dcf6:	462b      	mov	r3, r5
 801dcf8:	f7e2 fc7e 	bl	80005f8 <__aeabi_dmul>
 801dcfc:	a338      	add	r3, pc, #224	; (adr r3, 801dde0 <__kernel_cos+0x158>)
 801dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd02:	f7e2 fac3 	bl	800028c <__adddf3>
 801dd06:	4622      	mov	r2, r4
 801dd08:	462b      	mov	r3, r5
 801dd0a:	f7e2 fc75 	bl	80005f8 <__aeabi_dmul>
 801dd0e:	a336      	add	r3, pc, #216	; (adr r3, 801dde8 <__kernel_cos+0x160>)
 801dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd14:	f7e2 fab8 	bl	8000288 <__aeabi_dsub>
 801dd18:	4622      	mov	r2, r4
 801dd1a:	462b      	mov	r3, r5
 801dd1c:	f7e2 fc6c 	bl	80005f8 <__aeabi_dmul>
 801dd20:	a333      	add	r3, pc, #204	; (adr r3, 801ddf0 <__kernel_cos+0x168>)
 801dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd26:	f7e2 fab1 	bl	800028c <__adddf3>
 801dd2a:	4622      	mov	r2, r4
 801dd2c:	462b      	mov	r3, r5
 801dd2e:	f7e2 fc63 	bl	80005f8 <__aeabi_dmul>
 801dd32:	4622      	mov	r2, r4
 801dd34:	462b      	mov	r3, r5
 801dd36:	f7e2 fc5f 	bl	80005f8 <__aeabi_dmul>
 801dd3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dd3e:	4604      	mov	r4, r0
 801dd40:	460d      	mov	r5, r1
 801dd42:	4630      	mov	r0, r6
 801dd44:	4639      	mov	r1, r7
 801dd46:	f7e2 fc57 	bl	80005f8 <__aeabi_dmul>
 801dd4a:	460b      	mov	r3, r1
 801dd4c:	4602      	mov	r2, r0
 801dd4e:	4629      	mov	r1, r5
 801dd50:	4620      	mov	r0, r4
 801dd52:	f7e2 fa99 	bl	8000288 <__aeabi_dsub>
 801dd56:	4b2b      	ldr	r3, [pc, #172]	; (801de04 <__kernel_cos+0x17c>)
 801dd58:	4598      	cmp	r8, r3
 801dd5a:	4606      	mov	r6, r0
 801dd5c:	460f      	mov	r7, r1
 801dd5e:	dc10      	bgt.n	801dd82 <__kernel_cos+0xfa>
 801dd60:	4602      	mov	r2, r0
 801dd62:	460b      	mov	r3, r1
 801dd64:	4650      	mov	r0, sl
 801dd66:	4659      	mov	r1, fp
 801dd68:	f7e2 fa8e 	bl	8000288 <__aeabi_dsub>
 801dd6c:	460b      	mov	r3, r1
 801dd6e:	4926      	ldr	r1, [pc, #152]	; (801de08 <__kernel_cos+0x180>)
 801dd70:	4602      	mov	r2, r0
 801dd72:	2000      	movs	r0, #0
 801dd74:	f7e2 fa88 	bl	8000288 <__aeabi_dsub>
 801dd78:	ec41 0b10 	vmov	d0, r0, r1
 801dd7c:	b003      	add	sp, #12
 801dd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd82:	4b22      	ldr	r3, [pc, #136]	; (801de0c <__kernel_cos+0x184>)
 801dd84:	4920      	ldr	r1, [pc, #128]	; (801de08 <__kernel_cos+0x180>)
 801dd86:	4598      	cmp	r8, r3
 801dd88:	bfcc      	ite	gt
 801dd8a:	4d21      	ldrgt	r5, [pc, #132]	; (801de10 <__kernel_cos+0x188>)
 801dd8c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801dd90:	2400      	movs	r4, #0
 801dd92:	4622      	mov	r2, r4
 801dd94:	462b      	mov	r3, r5
 801dd96:	2000      	movs	r0, #0
 801dd98:	f7e2 fa76 	bl	8000288 <__aeabi_dsub>
 801dd9c:	4622      	mov	r2, r4
 801dd9e:	4680      	mov	r8, r0
 801dda0:	4689      	mov	r9, r1
 801dda2:	462b      	mov	r3, r5
 801dda4:	4650      	mov	r0, sl
 801dda6:	4659      	mov	r1, fp
 801dda8:	f7e2 fa6e 	bl	8000288 <__aeabi_dsub>
 801ddac:	4632      	mov	r2, r6
 801ddae:	463b      	mov	r3, r7
 801ddb0:	f7e2 fa6a 	bl	8000288 <__aeabi_dsub>
 801ddb4:	4602      	mov	r2, r0
 801ddb6:	460b      	mov	r3, r1
 801ddb8:	4640      	mov	r0, r8
 801ddba:	4649      	mov	r1, r9
 801ddbc:	e7da      	b.n	801dd74 <__kernel_cos+0xec>
 801ddbe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801ddf8 <__kernel_cos+0x170>
 801ddc2:	e7db      	b.n	801dd7c <__kernel_cos+0xf4>
 801ddc4:	f3af 8000 	nop.w
 801ddc8:	be8838d4 	.word	0xbe8838d4
 801ddcc:	bda8fae9 	.word	0xbda8fae9
 801ddd0:	bdb4b1c4 	.word	0xbdb4b1c4
 801ddd4:	3e21ee9e 	.word	0x3e21ee9e
 801ddd8:	809c52ad 	.word	0x809c52ad
 801dddc:	3e927e4f 	.word	0x3e927e4f
 801dde0:	19cb1590 	.word	0x19cb1590
 801dde4:	3efa01a0 	.word	0x3efa01a0
 801dde8:	16c15177 	.word	0x16c15177
 801ddec:	3f56c16c 	.word	0x3f56c16c
 801ddf0:	5555554c 	.word	0x5555554c
 801ddf4:	3fa55555 	.word	0x3fa55555
 801ddf8:	00000000 	.word	0x00000000
 801ddfc:	3ff00000 	.word	0x3ff00000
 801de00:	3fe00000 	.word	0x3fe00000
 801de04:	3fd33332 	.word	0x3fd33332
 801de08:	3ff00000 	.word	0x3ff00000
 801de0c:	3fe90000 	.word	0x3fe90000
 801de10:	3fd20000 	.word	0x3fd20000
 801de14:	00000000 	.word	0x00000000

0801de18 <__kernel_sin>:
 801de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de1c:	ed2d 8b04 	vpush	{d8-d9}
 801de20:	eeb0 8a41 	vmov.f32	s16, s2
 801de24:	eef0 8a61 	vmov.f32	s17, s3
 801de28:	ec55 4b10 	vmov	r4, r5, d0
 801de2c:	b083      	sub	sp, #12
 801de2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801de32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801de36:	9001      	str	r0, [sp, #4]
 801de38:	da06      	bge.n	801de48 <__kernel_sin+0x30>
 801de3a:	ee10 0a10 	vmov	r0, s0
 801de3e:	4629      	mov	r1, r5
 801de40:	f7e2 fe8a 	bl	8000b58 <__aeabi_d2iz>
 801de44:	2800      	cmp	r0, #0
 801de46:	d051      	beq.n	801deec <__kernel_sin+0xd4>
 801de48:	4622      	mov	r2, r4
 801de4a:	462b      	mov	r3, r5
 801de4c:	4620      	mov	r0, r4
 801de4e:	4629      	mov	r1, r5
 801de50:	f7e2 fbd2 	bl	80005f8 <__aeabi_dmul>
 801de54:	4682      	mov	sl, r0
 801de56:	468b      	mov	fp, r1
 801de58:	4602      	mov	r2, r0
 801de5a:	460b      	mov	r3, r1
 801de5c:	4620      	mov	r0, r4
 801de5e:	4629      	mov	r1, r5
 801de60:	f7e2 fbca 	bl	80005f8 <__aeabi_dmul>
 801de64:	a341      	add	r3, pc, #260	; (adr r3, 801df6c <__kernel_sin+0x154>)
 801de66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de6a:	4680      	mov	r8, r0
 801de6c:	4689      	mov	r9, r1
 801de6e:	4650      	mov	r0, sl
 801de70:	4659      	mov	r1, fp
 801de72:	f7e2 fbc1 	bl	80005f8 <__aeabi_dmul>
 801de76:	a33f      	add	r3, pc, #252	; (adr r3, 801df74 <__kernel_sin+0x15c>)
 801de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de7c:	f7e2 fa04 	bl	8000288 <__aeabi_dsub>
 801de80:	4652      	mov	r2, sl
 801de82:	465b      	mov	r3, fp
 801de84:	f7e2 fbb8 	bl	80005f8 <__aeabi_dmul>
 801de88:	a33c      	add	r3, pc, #240	; (adr r3, 801df7c <__kernel_sin+0x164>)
 801de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de8e:	f7e2 f9fd 	bl	800028c <__adddf3>
 801de92:	4652      	mov	r2, sl
 801de94:	465b      	mov	r3, fp
 801de96:	f7e2 fbaf 	bl	80005f8 <__aeabi_dmul>
 801de9a:	a33a      	add	r3, pc, #232	; (adr r3, 801df84 <__kernel_sin+0x16c>)
 801de9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dea0:	f7e2 f9f2 	bl	8000288 <__aeabi_dsub>
 801dea4:	4652      	mov	r2, sl
 801dea6:	465b      	mov	r3, fp
 801dea8:	f7e2 fba6 	bl	80005f8 <__aeabi_dmul>
 801deac:	a337      	add	r3, pc, #220	; (adr r3, 801df8c <__kernel_sin+0x174>)
 801deae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801deb2:	f7e2 f9eb 	bl	800028c <__adddf3>
 801deb6:	9b01      	ldr	r3, [sp, #4]
 801deb8:	4606      	mov	r6, r0
 801deba:	460f      	mov	r7, r1
 801debc:	b9eb      	cbnz	r3, 801defa <__kernel_sin+0xe2>
 801debe:	4602      	mov	r2, r0
 801dec0:	460b      	mov	r3, r1
 801dec2:	4650      	mov	r0, sl
 801dec4:	4659      	mov	r1, fp
 801dec6:	f7e2 fb97 	bl	80005f8 <__aeabi_dmul>
 801deca:	a325      	add	r3, pc, #148	; (adr r3, 801df60 <__kernel_sin+0x148>)
 801decc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ded0:	f7e2 f9da 	bl	8000288 <__aeabi_dsub>
 801ded4:	4642      	mov	r2, r8
 801ded6:	464b      	mov	r3, r9
 801ded8:	f7e2 fb8e 	bl	80005f8 <__aeabi_dmul>
 801dedc:	4602      	mov	r2, r0
 801dede:	460b      	mov	r3, r1
 801dee0:	4620      	mov	r0, r4
 801dee2:	4629      	mov	r1, r5
 801dee4:	f7e2 f9d2 	bl	800028c <__adddf3>
 801dee8:	4604      	mov	r4, r0
 801deea:	460d      	mov	r5, r1
 801deec:	ec45 4b10 	vmov	d0, r4, r5
 801def0:	b003      	add	sp, #12
 801def2:	ecbd 8b04 	vpop	{d8-d9}
 801def6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801defa:	4b1b      	ldr	r3, [pc, #108]	; (801df68 <__kernel_sin+0x150>)
 801defc:	ec51 0b18 	vmov	r0, r1, d8
 801df00:	2200      	movs	r2, #0
 801df02:	f7e2 fb79 	bl	80005f8 <__aeabi_dmul>
 801df06:	4632      	mov	r2, r6
 801df08:	ec41 0b19 	vmov	d9, r0, r1
 801df0c:	463b      	mov	r3, r7
 801df0e:	4640      	mov	r0, r8
 801df10:	4649      	mov	r1, r9
 801df12:	f7e2 fb71 	bl	80005f8 <__aeabi_dmul>
 801df16:	4602      	mov	r2, r0
 801df18:	460b      	mov	r3, r1
 801df1a:	ec51 0b19 	vmov	r0, r1, d9
 801df1e:	f7e2 f9b3 	bl	8000288 <__aeabi_dsub>
 801df22:	4652      	mov	r2, sl
 801df24:	465b      	mov	r3, fp
 801df26:	f7e2 fb67 	bl	80005f8 <__aeabi_dmul>
 801df2a:	ec53 2b18 	vmov	r2, r3, d8
 801df2e:	f7e2 f9ab 	bl	8000288 <__aeabi_dsub>
 801df32:	a30b      	add	r3, pc, #44	; (adr r3, 801df60 <__kernel_sin+0x148>)
 801df34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df38:	4606      	mov	r6, r0
 801df3a:	460f      	mov	r7, r1
 801df3c:	4640      	mov	r0, r8
 801df3e:	4649      	mov	r1, r9
 801df40:	f7e2 fb5a 	bl	80005f8 <__aeabi_dmul>
 801df44:	4602      	mov	r2, r0
 801df46:	460b      	mov	r3, r1
 801df48:	4630      	mov	r0, r6
 801df4a:	4639      	mov	r1, r7
 801df4c:	f7e2 f99e 	bl	800028c <__adddf3>
 801df50:	4602      	mov	r2, r0
 801df52:	460b      	mov	r3, r1
 801df54:	4620      	mov	r0, r4
 801df56:	4629      	mov	r1, r5
 801df58:	f7e2 f996 	bl	8000288 <__aeabi_dsub>
 801df5c:	e7c4      	b.n	801dee8 <__kernel_sin+0xd0>
 801df5e:	bf00      	nop
 801df60:	55555549 	.word	0x55555549
 801df64:	3fc55555 	.word	0x3fc55555
 801df68:	3fe00000 	.word	0x3fe00000
 801df6c:	5acfd57c 	.word	0x5acfd57c
 801df70:	3de5d93a 	.word	0x3de5d93a
 801df74:	8a2b9ceb 	.word	0x8a2b9ceb
 801df78:	3e5ae5e6 	.word	0x3e5ae5e6
 801df7c:	57b1fe7d 	.word	0x57b1fe7d
 801df80:	3ec71de3 	.word	0x3ec71de3
 801df84:	19c161d5 	.word	0x19c161d5
 801df88:	3f2a01a0 	.word	0x3f2a01a0
 801df8c:	1110f8a6 	.word	0x1110f8a6
 801df90:	3f811111 	.word	0x3f811111
 801df94:	00000000 	.word	0x00000000

0801df98 <__ieee754_asin>:
 801df98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df9c:	ed2d 8b04 	vpush	{d8-d9}
 801dfa0:	ec55 4b10 	vmov	r4, r5, d0
 801dfa4:	4bcc      	ldr	r3, [pc, #816]	; (801e2d8 <__ieee754_asin+0x340>)
 801dfa6:	b083      	sub	sp, #12
 801dfa8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801dfac:	4598      	cmp	r8, r3
 801dfae:	9501      	str	r5, [sp, #4]
 801dfb0:	dd33      	ble.n	801e01a <__ieee754_asin+0x82>
 801dfb2:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801dfb6:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801dfba:	ea58 0804 	orrs.w	r8, r8, r4
 801dfbe:	d117      	bne.n	801dff0 <__ieee754_asin+0x58>
 801dfc0:	a3ab      	add	r3, pc, #684	; (adr r3, 801e270 <__ieee754_asin+0x2d8>)
 801dfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfc6:	ee10 0a10 	vmov	r0, s0
 801dfca:	4629      	mov	r1, r5
 801dfcc:	f7e2 fb14 	bl	80005f8 <__aeabi_dmul>
 801dfd0:	a3a9      	add	r3, pc, #676	; (adr r3, 801e278 <__ieee754_asin+0x2e0>)
 801dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfd6:	4606      	mov	r6, r0
 801dfd8:	460f      	mov	r7, r1
 801dfda:	4620      	mov	r0, r4
 801dfdc:	4629      	mov	r1, r5
 801dfde:	f7e2 fb0b 	bl	80005f8 <__aeabi_dmul>
 801dfe2:	4602      	mov	r2, r0
 801dfe4:	460b      	mov	r3, r1
 801dfe6:	4630      	mov	r0, r6
 801dfe8:	4639      	mov	r1, r7
 801dfea:	f7e2 f94f 	bl	800028c <__adddf3>
 801dfee:	e00b      	b.n	801e008 <__ieee754_asin+0x70>
 801dff0:	ee10 2a10 	vmov	r2, s0
 801dff4:	462b      	mov	r3, r5
 801dff6:	ee10 0a10 	vmov	r0, s0
 801dffa:	4629      	mov	r1, r5
 801dffc:	f7e2 f944 	bl	8000288 <__aeabi_dsub>
 801e000:	4602      	mov	r2, r0
 801e002:	460b      	mov	r3, r1
 801e004:	f7e2 fc22 	bl	800084c <__aeabi_ddiv>
 801e008:	4604      	mov	r4, r0
 801e00a:	460d      	mov	r5, r1
 801e00c:	ec45 4b10 	vmov	d0, r4, r5
 801e010:	b003      	add	sp, #12
 801e012:	ecbd 8b04 	vpop	{d8-d9}
 801e016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e01a:	4bb0      	ldr	r3, [pc, #704]	; (801e2dc <__ieee754_asin+0x344>)
 801e01c:	4598      	cmp	r8, r3
 801e01e:	dc11      	bgt.n	801e044 <__ieee754_asin+0xac>
 801e020:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801e024:	f280 80ae 	bge.w	801e184 <__ieee754_asin+0x1ec>
 801e028:	a395      	add	r3, pc, #596	; (adr r3, 801e280 <__ieee754_asin+0x2e8>)
 801e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e02e:	ee10 0a10 	vmov	r0, s0
 801e032:	4629      	mov	r1, r5
 801e034:	f7e2 f92a 	bl	800028c <__adddf3>
 801e038:	4ba9      	ldr	r3, [pc, #676]	; (801e2e0 <__ieee754_asin+0x348>)
 801e03a:	2200      	movs	r2, #0
 801e03c:	f7e2 fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 801e040:	2800      	cmp	r0, #0
 801e042:	d1e3      	bne.n	801e00c <__ieee754_asin+0x74>
 801e044:	ec45 4b10 	vmov	d0, r4, r5
 801e048:	f7ff fcbe 	bl	801d9c8 <fabs>
 801e04c:	49a4      	ldr	r1, [pc, #656]	; (801e2e0 <__ieee754_asin+0x348>)
 801e04e:	ec53 2b10 	vmov	r2, r3, d0
 801e052:	2000      	movs	r0, #0
 801e054:	f7e2 f918 	bl	8000288 <__aeabi_dsub>
 801e058:	4ba2      	ldr	r3, [pc, #648]	; (801e2e4 <__ieee754_asin+0x34c>)
 801e05a:	2200      	movs	r2, #0
 801e05c:	f7e2 facc 	bl	80005f8 <__aeabi_dmul>
 801e060:	a389      	add	r3, pc, #548	; (adr r3, 801e288 <__ieee754_asin+0x2f0>)
 801e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e066:	4604      	mov	r4, r0
 801e068:	460d      	mov	r5, r1
 801e06a:	f7e2 fac5 	bl	80005f8 <__aeabi_dmul>
 801e06e:	a388      	add	r3, pc, #544	; (adr r3, 801e290 <__ieee754_asin+0x2f8>)
 801e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e074:	f7e2 f90a 	bl	800028c <__adddf3>
 801e078:	4622      	mov	r2, r4
 801e07a:	462b      	mov	r3, r5
 801e07c:	f7e2 fabc 	bl	80005f8 <__aeabi_dmul>
 801e080:	a385      	add	r3, pc, #532	; (adr r3, 801e298 <__ieee754_asin+0x300>)
 801e082:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e086:	f7e2 f8ff 	bl	8000288 <__aeabi_dsub>
 801e08a:	4622      	mov	r2, r4
 801e08c:	462b      	mov	r3, r5
 801e08e:	f7e2 fab3 	bl	80005f8 <__aeabi_dmul>
 801e092:	a383      	add	r3, pc, #524	; (adr r3, 801e2a0 <__ieee754_asin+0x308>)
 801e094:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e098:	f7e2 f8f8 	bl	800028c <__adddf3>
 801e09c:	4622      	mov	r2, r4
 801e09e:	462b      	mov	r3, r5
 801e0a0:	f7e2 faaa 	bl	80005f8 <__aeabi_dmul>
 801e0a4:	a380      	add	r3, pc, #512	; (adr r3, 801e2a8 <__ieee754_asin+0x310>)
 801e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0aa:	f7e2 f8ed 	bl	8000288 <__aeabi_dsub>
 801e0ae:	4622      	mov	r2, r4
 801e0b0:	462b      	mov	r3, r5
 801e0b2:	f7e2 faa1 	bl	80005f8 <__aeabi_dmul>
 801e0b6:	a37e      	add	r3, pc, #504	; (adr r3, 801e2b0 <__ieee754_asin+0x318>)
 801e0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0bc:	f7e2 f8e6 	bl	800028c <__adddf3>
 801e0c0:	4622      	mov	r2, r4
 801e0c2:	462b      	mov	r3, r5
 801e0c4:	f7e2 fa98 	bl	80005f8 <__aeabi_dmul>
 801e0c8:	a37b      	add	r3, pc, #492	; (adr r3, 801e2b8 <__ieee754_asin+0x320>)
 801e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0ce:	ec41 0b18 	vmov	d8, r0, r1
 801e0d2:	4620      	mov	r0, r4
 801e0d4:	4629      	mov	r1, r5
 801e0d6:	f7e2 fa8f 	bl	80005f8 <__aeabi_dmul>
 801e0da:	a379      	add	r3, pc, #484	; (adr r3, 801e2c0 <__ieee754_asin+0x328>)
 801e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0e0:	f7e2 f8d2 	bl	8000288 <__aeabi_dsub>
 801e0e4:	4622      	mov	r2, r4
 801e0e6:	462b      	mov	r3, r5
 801e0e8:	f7e2 fa86 	bl	80005f8 <__aeabi_dmul>
 801e0ec:	a376      	add	r3, pc, #472	; (adr r3, 801e2c8 <__ieee754_asin+0x330>)
 801e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0f2:	f7e2 f8cb 	bl	800028c <__adddf3>
 801e0f6:	4622      	mov	r2, r4
 801e0f8:	462b      	mov	r3, r5
 801e0fa:	f7e2 fa7d 	bl	80005f8 <__aeabi_dmul>
 801e0fe:	a374      	add	r3, pc, #464	; (adr r3, 801e2d0 <__ieee754_asin+0x338>)
 801e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e104:	f7e2 f8c0 	bl	8000288 <__aeabi_dsub>
 801e108:	4622      	mov	r2, r4
 801e10a:	462b      	mov	r3, r5
 801e10c:	f7e2 fa74 	bl	80005f8 <__aeabi_dmul>
 801e110:	4b73      	ldr	r3, [pc, #460]	; (801e2e0 <__ieee754_asin+0x348>)
 801e112:	2200      	movs	r2, #0
 801e114:	f7e2 f8ba 	bl	800028c <__adddf3>
 801e118:	ec45 4b10 	vmov	d0, r4, r5
 801e11c:	4606      	mov	r6, r0
 801e11e:	460f      	mov	r7, r1
 801e120:	f7ff fcd4 	bl	801dacc <__ieee754_sqrt>
 801e124:	4b70      	ldr	r3, [pc, #448]	; (801e2e8 <__ieee754_asin+0x350>)
 801e126:	4598      	cmp	r8, r3
 801e128:	ec5b ab10 	vmov	sl, fp, d0
 801e12c:	f340 80de 	ble.w	801e2ec <__ieee754_asin+0x354>
 801e130:	4632      	mov	r2, r6
 801e132:	463b      	mov	r3, r7
 801e134:	ec51 0b18 	vmov	r0, r1, d8
 801e138:	f7e2 fb88 	bl	800084c <__aeabi_ddiv>
 801e13c:	4652      	mov	r2, sl
 801e13e:	465b      	mov	r3, fp
 801e140:	f7e2 fa5a 	bl	80005f8 <__aeabi_dmul>
 801e144:	4652      	mov	r2, sl
 801e146:	465b      	mov	r3, fp
 801e148:	f7e2 f8a0 	bl	800028c <__adddf3>
 801e14c:	4602      	mov	r2, r0
 801e14e:	460b      	mov	r3, r1
 801e150:	f7e2 f89c 	bl	800028c <__adddf3>
 801e154:	a348      	add	r3, pc, #288	; (adr r3, 801e278 <__ieee754_asin+0x2e0>)
 801e156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e15a:	f7e2 f895 	bl	8000288 <__aeabi_dsub>
 801e15e:	4602      	mov	r2, r0
 801e160:	460b      	mov	r3, r1
 801e162:	a143      	add	r1, pc, #268	; (adr r1, 801e270 <__ieee754_asin+0x2d8>)
 801e164:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e168:	f7e2 f88e 	bl	8000288 <__aeabi_dsub>
 801e16c:	9b01      	ldr	r3, [sp, #4]
 801e16e:	2b00      	cmp	r3, #0
 801e170:	bfdc      	itt	le
 801e172:	4602      	movle	r2, r0
 801e174:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801e178:	4604      	mov	r4, r0
 801e17a:	460d      	mov	r5, r1
 801e17c:	bfdc      	itt	le
 801e17e:	4614      	movle	r4, r2
 801e180:	461d      	movle	r5, r3
 801e182:	e743      	b.n	801e00c <__ieee754_asin+0x74>
 801e184:	ee10 2a10 	vmov	r2, s0
 801e188:	ee10 0a10 	vmov	r0, s0
 801e18c:	462b      	mov	r3, r5
 801e18e:	4629      	mov	r1, r5
 801e190:	f7e2 fa32 	bl	80005f8 <__aeabi_dmul>
 801e194:	a33c      	add	r3, pc, #240	; (adr r3, 801e288 <__ieee754_asin+0x2f0>)
 801e196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e19a:	4606      	mov	r6, r0
 801e19c:	460f      	mov	r7, r1
 801e19e:	f7e2 fa2b 	bl	80005f8 <__aeabi_dmul>
 801e1a2:	a33b      	add	r3, pc, #236	; (adr r3, 801e290 <__ieee754_asin+0x2f8>)
 801e1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1a8:	f7e2 f870 	bl	800028c <__adddf3>
 801e1ac:	4632      	mov	r2, r6
 801e1ae:	463b      	mov	r3, r7
 801e1b0:	f7e2 fa22 	bl	80005f8 <__aeabi_dmul>
 801e1b4:	a338      	add	r3, pc, #224	; (adr r3, 801e298 <__ieee754_asin+0x300>)
 801e1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1ba:	f7e2 f865 	bl	8000288 <__aeabi_dsub>
 801e1be:	4632      	mov	r2, r6
 801e1c0:	463b      	mov	r3, r7
 801e1c2:	f7e2 fa19 	bl	80005f8 <__aeabi_dmul>
 801e1c6:	a336      	add	r3, pc, #216	; (adr r3, 801e2a0 <__ieee754_asin+0x308>)
 801e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1cc:	f7e2 f85e 	bl	800028c <__adddf3>
 801e1d0:	4632      	mov	r2, r6
 801e1d2:	463b      	mov	r3, r7
 801e1d4:	f7e2 fa10 	bl	80005f8 <__aeabi_dmul>
 801e1d8:	a333      	add	r3, pc, #204	; (adr r3, 801e2a8 <__ieee754_asin+0x310>)
 801e1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1de:	f7e2 f853 	bl	8000288 <__aeabi_dsub>
 801e1e2:	4632      	mov	r2, r6
 801e1e4:	463b      	mov	r3, r7
 801e1e6:	f7e2 fa07 	bl	80005f8 <__aeabi_dmul>
 801e1ea:	a331      	add	r3, pc, #196	; (adr r3, 801e2b0 <__ieee754_asin+0x318>)
 801e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1f0:	f7e2 f84c 	bl	800028c <__adddf3>
 801e1f4:	4632      	mov	r2, r6
 801e1f6:	463b      	mov	r3, r7
 801e1f8:	f7e2 f9fe 	bl	80005f8 <__aeabi_dmul>
 801e1fc:	a32e      	add	r3, pc, #184	; (adr r3, 801e2b8 <__ieee754_asin+0x320>)
 801e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e202:	4680      	mov	r8, r0
 801e204:	4689      	mov	r9, r1
 801e206:	4630      	mov	r0, r6
 801e208:	4639      	mov	r1, r7
 801e20a:	f7e2 f9f5 	bl	80005f8 <__aeabi_dmul>
 801e20e:	a32c      	add	r3, pc, #176	; (adr r3, 801e2c0 <__ieee754_asin+0x328>)
 801e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e214:	f7e2 f838 	bl	8000288 <__aeabi_dsub>
 801e218:	4632      	mov	r2, r6
 801e21a:	463b      	mov	r3, r7
 801e21c:	f7e2 f9ec 	bl	80005f8 <__aeabi_dmul>
 801e220:	a329      	add	r3, pc, #164	; (adr r3, 801e2c8 <__ieee754_asin+0x330>)
 801e222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e226:	f7e2 f831 	bl	800028c <__adddf3>
 801e22a:	4632      	mov	r2, r6
 801e22c:	463b      	mov	r3, r7
 801e22e:	f7e2 f9e3 	bl	80005f8 <__aeabi_dmul>
 801e232:	a327      	add	r3, pc, #156	; (adr r3, 801e2d0 <__ieee754_asin+0x338>)
 801e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e238:	f7e2 f826 	bl	8000288 <__aeabi_dsub>
 801e23c:	4632      	mov	r2, r6
 801e23e:	463b      	mov	r3, r7
 801e240:	f7e2 f9da 	bl	80005f8 <__aeabi_dmul>
 801e244:	4b26      	ldr	r3, [pc, #152]	; (801e2e0 <__ieee754_asin+0x348>)
 801e246:	2200      	movs	r2, #0
 801e248:	f7e2 f820 	bl	800028c <__adddf3>
 801e24c:	4602      	mov	r2, r0
 801e24e:	460b      	mov	r3, r1
 801e250:	4640      	mov	r0, r8
 801e252:	4649      	mov	r1, r9
 801e254:	f7e2 fafa 	bl	800084c <__aeabi_ddiv>
 801e258:	4622      	mov	r2, r4
 801e25a:	462b      	mov	r3, r5
 801e25c:	f7e2 f9cc 	bl	80005f8 <__aeabi_dmul>
 801e260:	4602      	mov	r2, r0
 801e262:	460b      	mov	r3, r1
 801e264:	4620      	mov	r0, r4
 801e266:	4629      	mov	r1, r5
 801e268:	e6bf      	b.n	801dfea <__ieee754_asin+0x52>
 801e26a:	bf00      	nop
 801e26c:	f3af 8000 	nop.w
 801e270:	54442d18 	.word	0x54442d18
 801e274:	3ff921fb 	.word	0x3ff921fb
 801e278:	33145c07 	.word	0x33145c07
 801e27c:	3c91a626 	.word	0x3c91a626
 801e280:	8800759c 	.word	0x8800759c
 801e284:	7e37e43c 	.word	0x7e37e43c
 801e288:	0dfdf709 	.word	0x0dfdf709
 801e28c:	3f023de1 	.word	0x3f023de1
 801e290:	7501b288 	.word	0x7501b288
 801e294:	3f49efe0 	.word	0x3f49efe0
 801e298:	b5688f3b 	.word	0xb5688f3b
 801e29c:	3fa48228 	.word	0x3fa48228
 801e2a0:	0e884455 	.word	0x0e884455
 801e2a4:	3fc9c155 	.word	0x3fc9c155
 801e2a8:	03eb6f7d 	.word	0x03eb6f7d
 801e2ac:	3fd4d612 	.word	0x3fd4d612
 801e2b0:	55555555 	.word	0x55555555
 801e2b4:	3fc55555 	.word	0x3fc55555
 801e2b8:	b12e9282 	.word	0xb12e9282
 801e2bc:	3fb3b8c5 	.word	0x3fb3b8c5
 801e2c0:	1b8d0159 	.word	0x1b8d0159
 801e2c4:	3fe6066c 	.word	0x3fe6066c
 801e2c8:	9c598ac8 	.word	0x9c598ac8
 801e2cc:	40002ae5 	.word	0x40002ae5
 801e2d0:	1c8a2d4b 	.word	0x1c8a2d4b
 801e2d4:	40033a27 	.word	0x40033a27
 801e2d8:	3fefffff 	.word	0x3fefffff
 801e2dc:	3fdfffff 	.word	0x3fdfffff
 801e2e0:	3ff00000 	.word	0x3ff00000
 801e2e4:	3fe00000 	.word	0x3fe00000
 801e2e8:	3fef3332 	.word	0x3fef3332
 801e2ec:	ee10 2a10 	vmov	r2, s0
 801e2f0:	ee10 0a10 	vmov	r0, s0
 801e2f4:	465b      	mov	r3, fp
 801e2f6:	4659      	mov	r1, fp
 801e2f8:	f7e1 ffc8 	bl	800028c <__adddf3>
 801e2fc:	4632      	mov	r2, r6
 801e2fe:	463b      	mov	r3, r7
 801e300:	ec41 0b19 	vmov	d9, r0, r1
 801e304:	ec51 0b18 	vmov	r0, r1, d8
 801e308:	f7e2 faa0 	bl	800084c <__aeabi_ddiv>
 801e30c:	4602      	mov	r2, r0
 801e30e:	460b      	mov	r3, r1
 801e310:	ec51 0b19 	vmov	r0, r1, d9
 801e314:	f7e2 f970 	bl	80005f8 <__aeabi_dmul>
 801e318:	f04f 0800 	mov.w	r8, #0
 801e31c:	4606      	mov	r6, r0
 801e31e:	460f      	mov	r7, r1
 801e320:	4642      	mov	r2, r8
 801e322:	465b      	mov	r3, fp
 801e324:	4640      	mov	r0, r8
 801e326:	4659      	mov	r1, fp
 801e328:	f7e2 f966 	bl	80005f8 <__aeabi_dmul>
 801e32c:	4602      	mov	r2, r0
 801e32e:	460b      	mov	r3, r1
 801e330:	4620      	mov	r0, r4
 801e332:	4629      	mov	r1, r5
 801e334:	f7e1 ffa8 	bl	8000288 <__aeabi_dsub>
 801e338:	4642      	mov	r2, r8
 801e33a:	4604      	mov	r4, r0
 801e33c:	460d      	mov	r5, r1
 801e33e:	465b      	mov	r3, fp
 801e340:	4650      	mov	r0, sl
 801e342:	4659      	mov	r1, fp
 801e344:	f7e1 ffa2 	bl	800028c <__adddf3>
 801e348:	4602      	mov	r2, r0
 801e34a:	460b      	mov	r3, r1
 801e34c:	4620      	mov	r0, r4
 801e34e:	4629      	mov	r1, r5
 801e350:	f7e2 fa7c 	bl	800084c <__aeabi_ddiv>
 801e354:	4602      	mov	r2, r0
 801e356:	460b      	mov	r3, r1
 801e358:	f7e1 ff98 	bl	800028c <__adddf3>
 801e35c:	4602      	mov	r2, r0
 801e35e:	460b      	mov	r3, r1
 801e360:	a113      	add	r1, pc, #76	; (adr r1, 801e3b0 <__ieee754_asin+0x418>)
 801e362:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e366:	f7e1 ff8f 	bl	8000288 <__aeabi_dsub>
 801e36a:	4602      	mov	r2, r0
 801e36c:	460b      	mov	r3, r1
 801e36e:	4630      	mov	r0, r6
 801e370:	4639      	mov	r1, r7
 801e372:	f7e1 ff89 	bl	8000288 <__aeabi_dsub>
 801e376:	4642      	mov	r2, r8
 801e378:	4604      	mov	r4, r0
 801e37a:	460d      	mov	r5, r1
 801e37c:	465b      	mov	r3, fp
 801e37e:	4640      	mov	r0, r8
 801e380:	4659      	mov	r1, fp
 801e382:	f7e1 ff83 	bl	800028c <__adddf3>
 801e386:	4602      	mov	r2, r0
 801e388:	460b      	mov	r3, r1
 801e38a:	a10b      	add	r1, pc, #44	; (adr r1, 801e3b8 <__ieee754_asin+0x420>)
 801e38c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e390:	f7e1 ff7a 	bl	8000288 <__aeabi_dsub>
 801e394:	4602      	mov	r2, r0
 801e396:	460b      	mov	r3, r1
 801e398:	4620      	mov	r0, r4
 801e39a:	4629      	mov	r1, r5
 801e39c:	f7e1 ff74 	bl	8000288 <__aeabi_dsub>
 801e3a0:	4602      	mov	r2, r0
 801e3a2:	460b      	mov	r3, r1
 801e3a4:	a104      	add	r1, pc, #16	; (adr r1, 801e3b8 <__ieee754_asin+0x420>)
 801e3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e3aa:	e6dd      	b.n	801e168 <__ieee754_asin+0x1d0>
 801e3ac:	f3af 8000 	nop.w
 801e3b0:	33145c07 	.word	0x33145c07
 801e3b4:	3c91a626 	.word	0x3c91a626
 801e3b8:	54442d18 	.word	0x54442d18
 801e3bc:	3fe921fb 	.word	0x3fe921fb

0801e3c0 <__ieee754_atan2>:
 801e3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e3c4:	ec57 6b11 	vmov	r6, r7, d1
 801e3c8:	4273      	negs	r3, r6
 801e3ca:	f8df 817c 	ldr.w	r8, [pc, #380]	; 801e548 <__ieee754_atan2+0x188>
 801e3ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801e3d2:	4333      	orrs	r3, r6
 801e3d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e3d8:	4543      	cmp	r3, r8
 801e3da:	ec51 0b10 	vmov	r0, r1, d0
 801e3de:	ee11 5a10 	vmov	r5, s2
 801e3e2:	d80a      	bhi.n	801e3fa <__ieee754_atan2+0x3a>
 801e3e4:	4244      	negs	r4, r0
 801e3e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e3ea:	4304      	orrs	r4, r0
 801e3ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801e3f0:	4544      	cmp	r4, r8
 801e3f2:	ee10 9a10 	vmov	r9, s0
 801e3f6:	468e      	mov	lr, r1
 801e3f8:	d907      	bls.n	801e40a <__ieee754_atan2+0x4a>
 801e3fa:	4632      	mov	r2, r6
 801e3fc:	463b      	mov	r3, r7
 801e3fe:	f7e1 ff45 	bl	800028c <__adddf3>
 801e402:	ec41 0b10 	vmov	d0, r0, r1
 801e406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e40a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801e40e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e412:	4334      	orrs	r4, r6
 801e414:	d103      	bne.n	801e41e <__ieee754_atan2+0x5e>
 801e416:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e41a:	f000 baa1 	b.w	801e960 <atan>
 801e41e:	17bc      	asrs	r4, r7, #30
 801e420:	f004 0402 	and.w	r4, r4, #2
 801e424:	ea53 0909 	orrs.w	r9, r3, r9
 801e428:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801e42c:	d107      	bne.n	801e43e <__ieee754_atan2+0x7e>
 801e42e:	2c02      	cmp	r4, #2
 801e430:	d05f      	beq.n	801e4f2 <__ieee754_atan2+0x132>
 801e432:	2c03      	cmp	r4, #3
 801e434:	d1e5      	bne.n	801e402 <__ieee754_atan2+0x42>
 801e436:	a140      	add	r1, pc, #256	; (adr r1, 801e538 <__ieee754_atan2+0x178>)
 801e438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e43c:	e7e1      	b.n	801e402 <__ieee754_atan2+0x42>
 801e43e:	4315      	orrs	r5, r2
 801e440:	d106      	bne.n	801e450 <__ieee754_atan2+0x90>
 801e442:	f1be 0f00 	cmp.w	lr, #0
 801e446:	da5f      	bge.n	801e508 <__ieee754_atan2+0x148>
 801e448:	a13d      	add	r1, pc, #244	; (adr r1, 801e540 <__ieee754_atan2+0x180>)
 801e44a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e44e:	e7d8      	b.n	801e402 <__ieee754_atan2+0x42>
 801e450:	4542      	cmp	r2, r8
 801e452:	d10f      	bne.n	801e474 <__ieee754_atan2+0xb4>
 801e454:	4293      	cmp	r3, r2
 801e456:	f104 34ff 	add.w	r4, r4, #4294967295
 801e45a:	d107      	bne.n	801e46c <__ieee754_atan2+0xac>
 801e45c:	2c02      	cmp	r4, #2
 801e45e:	d84c      	bhi.n	801e4fa <__ieee754_atan2+0x13a>
 801e460:	4b33      	ldr	r3, [pc, #204]	; (801e530 <__ieee754_atan2+0x170>)
 801e462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e466:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e46a:	e7ca      	b.n	801e402 <__ieee754_atan2+0x42>
 801e46c:	2c02      	cmp	r4, #2
 801e46e:	d848      	bhi.n	801e502 <__ieee754_atan2+0x142>
 801e470:	4b30      	ldr	r3, [pc, #192]	; (801e534 <__ieee754_atan2+0x174>)
 801e472:	e7f6      	b.n	801e462 <__ieee754_atan2+0xa2>
 801e474:	4543      	cmp	r3, r8
 801e476:	d0e4      	beq.n	801e442 <__ieee754_atan2+0x82>
 801e478:	1a9b      	subs	r3, r3, r2
 801e47a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801e47e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e482:	da1e      	bge.n	801e4c2 <__ieee754_atan2+0x102>
 801e484:	2f00      	cmp	r7, #0
 801e486:	da01      	bge.n	801e48c <__ieee754_atan2+0xcc>
 801e488:	323c      	adds	r2, #60	; 0x3c
 801e48a:	db1e      	blt.n	801e4ca <__ieee754_atan2+0x10a>
 801e48c:	4632      	mov	r2, r6
 801e48e:	463b      	mov	r3, r7
 801e490:	f7e2 f9dc 	bl	800084c <__aeabi_ddiv>
 801e494:	ec41 0b10 	vmov	d0, r0, r1
 801e498:	f7ff fa96 	bl	801d9c8 <fabs>
 801e49c:	f000 fa60 	bl	801e960 <atan>
 801e4a0:	ec51 0b10 	vmov	r0, r1, d0
 801e4a4:	2c01      	cmp	r4, #1
 801e4a6:	d013      	beq.n	801e4d0 <__ieee754_atan2+0x110>
 801e4a8:	2c02      	cmp	r4, #2
 801e4aa:	d015      	beq.n	801e4d8 <__ieee754_atan2+0x118>
 801e4ac:	2c00      	cmp	r4, #0
 801e4ae:	d0a8      	beq.n	801e402 <__ieee754_atan2+0x42>
 801e4b0:	a317      	add	r3, pc, #92	; (adr r3, 801e510 <__ieee754_atan2+0x150>)
 801e4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4b6:	f7e1 fee7 	bl	8000288 <__aeabi_dsub>
 801e4ba:	a317      	add	r3, pc, #92	; (adr r3, 801e518 <__ieee754_atan2+0x158>)
 801e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4c0:	e014      	b.n	801e4ec <__ieee754_atan2+0x12c>
 801e4c2:	a117      	add	r1, pc, #92	; (adr r1, 801e520 <__ieee754_atan2+0x160>)
 801e4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e4c8:	e7ec      	b.n	801e4a4 <__ieee754_atan2+0xe4>
 801e4ca:	2000      	movs	r0, #0
 801e4cc:	2100      	movs	r1, #0
 801e4ce:	e7e9      	b.n	801e4a4 <__ieee754_atan2+0xe4>
 801e4d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e4d4:	4619      	mov	r1, r3
 801e4d6:	e794      	b.n	801e402 <__ieee754_atan2+0x42>
 801e4d8:	a30d      	add	r3, pc, #52	; (adr r3, 801e510 <__ieee754_atan2+0x150>)
 801e4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4de:	f7e1 fed3 	bl	8000288 <__aeabi_dsub>
 801e4e2:	4602      	mov	r2, r0
 801e4e4:	460b      	mov	r3, r1
 801e4e6:	a10c      	add	r1, pc, #48	; (adr r1, 801e518 <__ieee754_atan2+0x158>)
 801e4e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e4ec:	f7e1 fecc 	bl	8000288 <__aeabi_dsub>
 801e4f0:	e787      	b.n	801e402 <__ieee754_atan2+0x42>
 801e4f2:	a109      	add	r1, pc, #36	; (adr r1, 801e518 <__ieee754_atan2+0x158>)
 801e4f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e4f8:	e783      	b.n	801e402 <__ieee754_atan2+0x42>
 801e4fa:	a10b      	add	r1, pc, #44	; (adr r1, 801e528 <__ieee754_atan2+0x168>)
 801e4fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e500:	e77f      	b.n	801e402 <__ieee754_atan2+0x42>
 801e502:	2000      	movs	r0, #0
 801e504:	2100      	movs	r1, #0
 801e506:	e77c      	b.n	801e402 <__ieee754_atan2+0x42>
 801e508:	a105      	add	r1, pc, #20	; (adr r1, 801e520 <__ieee754_atan2+0x160>)
 801e50a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e50e:	e778      	b.n	801e402 <__ieee754_atan2+0x42>
 801e510:	33145c07 	.word	0x33145c07
 801e514:	3ca1a626 	.word	0x3ca1a626
 801e518:	54442d18 	.word	0x54442d18
 801e51c:	400921fb 	.word	0x400921fb
 801e520:	54442d18 	.word	0x54442d18
 801e524:	3ff921fb 	.word	0x3ff921fb
 801e528:	54442d18 	.word	0x54442d18
 801e52c:	3fe921fb 	.word	0x3fe921fb
 801e530:	080200b0 	.word	0x080200b0
 801e534:	080200c8 	.word	0x080200c8
 801e538:	54442d18 	.word	0x54442d18
 801e53c:	c00921fb 	.word	0xc00921fb
 801e540:	54442d18 	.word	0x54442d18
 801e544:	bff921fb 	.word	0xbff921fb
 801e548:	7ff00000 	.word	0x7ff00000
 801e54c:	00000000 	.word	0x00000000

0801e550 <__ieee754_rem_pio2>:
 801e550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e554:	ed2d 8b02 	vpush	{d8}
 801e558:	ec55 4b10 	vmov	r4, r5, d0
 801e55c:	4bca      	ldr	r3, [pc, #808]	; (801e888 <__ieee754_rem_pio2+0x338>)
 801e55e:	b08b      	sub	sp, #44	; 0x2c
 801e560:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801e564:	4598      	cmp	r8, r3
 801e566:	4682      	mov	sl, r0
 801e568:	9502      	str	r5, [sp, #8]
 801e56a:	dc08      	bgt.n	801e57e <__ieee754_rem_pio2+0x2e>
 801e56c:	2200      	movs	r2, #0
 801e56e:	2300      	movs	r3, #0
 801e570:	ed80 0b00 	vstr	d0, [r0]
 801e574:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e578:	f04f 0b00 	mov.w	fp, #0
 801e57c:	e028      	b.n	801e5d0 <__ieee754_rem_pio2+0x80>
 801e57e:	4bc3      	ldr	r3, [pc, #780]	; (801e88c <__ieee754_rem_pio2+0x33c>)
 801e580:	4598      	cmp	r8, r3
 801e582:	dc78      	bgt.n	801e676 <__ieee754_rem_pio2+0x126>
 801e584:	9b02      	ldr	r3, [sp, #8]
 801e586:	4ec2      	ldr	r6, [pc, #776]	; (801e890 <__ieee754_rem_pio2+0x340>)
 801e588:	2b00      	cmp	r3, #0
 801e58a:	ee10 0a10 	vmov	r0, s0
 801e58e:	a3b0      	add	r3, pc, #704	; (adr r3, 801e850 <__ieee754_rem_pio2+0x300>)
 801e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e594:	4629      	mov	r1, r5
 801e596:	dd39      	ble.n	801e60c <__ieee754_rem_pio2+0xbc>
 801e598:	f7e1 fe76 	bl	8000288 <__aeabi_dsub>
 801e59c:	45b0      	cmp	r8, r6
 801e59e:	4604      	mov	r4, r0
 801e5a0:	460d      	mov	r5, r1
 801e5a2:	d01b      	beq.n	801e5dc <__ieee754_rem_pio2+0x8c>
 801e5a4:	a3ac      	add	r3, pc, #688	; (adr r3, 801e858 <__ieee754_rem_pio2+0x308>)
 801e5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5aa:	f7e1 fe6d 	bl	8000288 <__aeabi_dsub>
 801e5ae:	4602      	mov	r2, r0
 801e5b0:	460b      	mov	r3, r1
 801e5b2:	e9ca 2300 	strd	r2, r3, [sl]
 801e5b6:	4620      	mov	r0, r4
 801e5b8:	4629      	mov	r1, r5
 801e5ba:	f7e1 fe65 	bl	8000288 <__aeabi_dsub>
 801e5be:	a3a6      	add	r3, pc, #664	; (adr r3, 801e858 <__ieee754_rem_pio2+0x308>)
 801e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c4:	f7e1 fe60 	bl	8000288 <__aeabi_dsub>
 801e5c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e5cc:	f04f 0b01 	mov.w	fp, #1
 801e5d0:	4658      	mov	r0, fp
 801e5d2:	b00b      	add	sp, #44	; 0x2c
 801e5d4:	ecbd 8b02 	vpop	{d8}
 801e5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5dc:	a3a0      	add	r3, pc, #640	; (adr r3, 801e860 <__ieee754_rem_pio2+0x310>)
 801e5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5e2:	f7e1 fe51 	bl	8000288 <__aeabi_dsub>
 801e5e6:	a3a0      	add	r3, pc, #640	; (adr r3, 801e868 <__ieee754_rem_pio2+0x318>)
 801e5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5ec:	4604      	mov	r4, r0
 801e5ee:	460d      	mov	r5, r1
 801e5f0:	f7e1 fe4a 	bl	8000288 <__aeabi_dsub>
 801e5f4:	4602      	mov	r2, r0
 801e5f6:	460b      	mov	r3, r1
 801e5f8:	e9ca 2300 	strd	r2, r3, [sl]
 801e5fc:	4620      	mov	r0, r4
 801e5fe:	4629      	mov	r1, r5
 801e600:	f7e1 fe42 	bl	8000288 <__aeabi_dsub>
 801e604:	a398      	add	r3, pc, #608	; (adr r3, 801e868 <__ieee754_rem_pio2+0x318>)
 801e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e60a:	e7db      	b.n	801e5c4 <__ieee754_rem_pio2+0x74>
 801e60c:	f7e1 fe3e 	bl	800028c <__adddf3>
 801e610:	45b0      	cmp	r8, r6
 801e612:	4604      	mov	r4, r0
 801e614:	460d      	mov	r5, r1
 801e616:	d016      	beq.n	801e646 <__ieee754_rem_pio2+0xf6>
 801e618:	a38f      	add	r3, pc, #572	; (adr r3, 801e858 <__ieee754_rem_pio2+0x308>)
 801e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e61e:	f7e1 fe35 	bl	800028c <__adddf3>
 801e622:	4602      	mov	r2, r0
 801e624:	460b      	mov	r3, r1
 801e626:	e9ca 2300 	strd	r2, r3, [sl]
 801e62a:	4620      	mov	r0, r4
 801e62c:	4629      	mov	r1, r5
 801e62e:	f7e1 fe2b 	bl	8000288 <__aeabi_dsub>
 801e632:	a389      	add	r3, pc, #548	; (adr r3, 801e858 <__ieee754_rem_pio2+0x308>)
 801e634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e638:	f7e1 fe28 	bl	800028c <__adddf3>
 801e63c:	f04f 3bff 	mov.w	fp, #4294967295
 801e640:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e644:	e7c4      	b.n	801e5d0 <__ieee754_rem_pio2+0x80>
 801e646:	a386      	add	r3, pc, #536	; (adr r3, 801e860 <__ieee754_rem_pio2+0x310>)
 801e648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e64c:	f7e1 fe1e 	bl	800028c <__adddf3>
 801e650:	a385      	add	r3, pc, #532	; (adr r3, 801e868 <__ieee754_rem_pio2+0x318>)
 801e652:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e656:	4604      	mov	r4, r0
 801e658:	460d      	mov	r5, r1
 801e65a:	f7e1 fe17 	bl	800028c <__adddf3>
 801e65e:	4602      	mov	r2, r0
 801e660:	460b      	mov	r3, r1
 801e662:	e9ca 2300 	strd	r2, r3, [sl]
 801e666:	4620      	mov	r0, r4
 801e668:	4629      	mov	r1, r5
 801e66a:	f7e1 fe0d 	bl	8000288 <__aeabi_dsub>
 801e66e:	a37e      	add	r3, pc, #504	; (adr r3, 801e868 <__ieee754_rem_pio2+0x318>)
 801e670:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e674:	e7e0      	b.n	801e638 <__ieee754_rem_pio2+0xe8>
 801e676:	4b87      	ldr	r3, [pc, #540]	; (801e894 <__ieee754_rem_pio2+0x344>)
 801e678:	4598      	cmp	r8, r3
 801e67a:	f300 80d8 	bgt.w	801e82e <__ieee754_rem_pio2+0x2de>
 801e67e:	f7ff f9a3 	bl	801d9c8 <fabs>
 801e682:	ec55 4b10 	vmov	r4, r5, d0
 801e686:	ee10 0a10 	vmov	r0, s0
 801e68a:	a379      	add	r3, pc, #484	; (adr r3, 801e870 <__ieee754_rem_pio2+0x320>)
 801e68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e690:	4629      	mov	r1, r5
 801e692:	f7e1 ffb1 	bl	80005f8 <__aeabi_dmul>
 801e696:	4b80      	ldr	r3, [pc, #512]	; (801e898 <__ieee754_rem_pio2+0x348>)
 801e698:	2200      	movs	r2, #0
 801e69a:	f7e1 fdf7 	bl	800028c <__adddf3>
 801e69e:	f7e2 fa5b 	bl	8000b58 <__aeabi_d2iz>
 801e6a2:	4683      	mov	fp, r0
 801e6a4:	f7e1 ff3e 	bl	8000524 <__aeabi_i2d>
 801e6a8:	4602      	mov	r2, r0
 801e6aa:	460b      	mov	r3, r1
 801e6ac:	ec43 2b18 	vmov	d8, r2, r3
 801e6b0:	a367      	add	r3, pc, #412	; (adr r3, 801e850 <__ieee754_rem_pio2+0x300>)
 801e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6b6:	f7e1 ff9f 	bl	80005f8 <__aeabi_dmul>
 801e6ba:	4602      	mov	r2, r0
 801e6bc:	460b      	mov	r3, r1
 801e6be:	4620      	mov	r0, r4
 801e6c0:	4629      	mov	r1, r5
 801e6c2:	f7e1 fde1 	bl	8000288 <__aeabi_dsub>
 801e6c6:	a364      	add	r3, pc, #400	; (adr r3, 801e858 <__ieee754_rem_pio2+0x308>)
 801e6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6cc:	4606      	mov	r6, r0
 801e6ce:	460f      	mov	r7, r1
 801e6d0:	ec51 0b18 	vmov	r0, r1, d8
 801e6d4:	f7e1 ff90 	bl	80005f8 <__aeabi_dmul>
 801e6d8:	f1bb 0f1f 	cmp.w	fp, #31
 801e6dc:	4604      	mov	r4, r0
 801e6de:	460d      	mov	r5, r1
 801e6e0:	dc0d      	bgt.n	801e6fe <__ieee754_rem_pio2+0x1ae>
 801e6e2:	4b6e      	ldr	r3, [pc, #440]	; (801e89c <__ieee754_rem_pio2+0x34c>)
 801e6e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801e6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e6ec:	4543      	cmp	r3, r8
 801e6ee:	d006      	beq.n	801e6fe <__ieee754_rem_pio2+0x1ae>
 801e6f0:	4622      	mov	r2, r4
 801e6f2:	462b      	mov	r3, r5
 801e6f4:	4630      	mov	r0, r6
 801e6f6:	4639      	mov	r1, r7
 801e6f8:	f7e1 fdc6 	bl	8000288 <__aeabi_dsub>
 801e6fc:	e00e      	b.n	801e71c <__ieee754_rem_pio2+0x1cc>
 801e6fe:	462b      	mov	r3, r5
 801e700:	4622      	mov	r2, r4
 801e702:	4630      	mov	r0, r6
 801e704:	4639      	mov	r1, r7
 801e706:	f7e1 fdbf 	bl	8000288 <__aeabi_dsub>
 801e70a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e70e:	9303      	str	r3, [sp, #12]
 801e710:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e714:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801e718:	2b10      	cmp	r3, #16
 801e71a:	dc02      	bgt.n	801e722 <__ieee754_rem_pio2+0x1d2>
 801e71c:	e9ca 0100 	strd	r0, r1, [sl]
 801e720:	e039      	b.n	801e796 <__ieee754_rem_pio2+0x246>
 801e722:	a34f      	add	r3, pc, #316	; (adr r3, 801e860 <__ieee754_rem_pio2+0x310>)
 801e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e728:	ec51 0b18 	vmov	r0, r1, d8
 801e72c:	f7e1 ff64 	bl	80005f8 <__aeabi_dmul>
 801e730:	4604      	mov	r4, r0
 801e732:	460d      	mov	r5, r1
 801e734:	4602      	mov	r2, r0
 801e736:	460b      	mov	r3, r1
 801e738:	4630      	mov	r0, r6
 801e73a:	4639      	mov	r1, r7
 801e73c:	f7e1 fda4 	bl	8000288 <__aeabi_dsub>
 801e740:	4602      	mov	r2, r0
 801e742:	460b      	mov	r3, r1
 801e744:	4680      	mov	r8, r0
 801e746:	4689      	mov	r9, r1
 801e748:	4630      	mov	r0, r6
 801e74a:	4639      	mov	r1, r7
 801e74c:	f7e1 fd9c 	bl	8000288 <__aeabi_dsub>
 801e750:	4622      	mov	r2, r4
 801e752:	462b      	mov	r3, r5
 801e754:	f7e1 fd98 	bl	8000288 <__aeabi_dsub>
 801e758:	a343      	add	r3, pc, #268	; (adr r3, 801e868 <__ieee754_rem_pio2+0x318>)
 801e75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e75e:	4604      	mov	r4, r0
 801e760:	460d      	mov	r5, r1
 801e762:	ec51 0b18 	vmov	r0, r1, d8
 801e766:	f7e1 ff47 	bl	80005f8 <__aeabi_dmul>
 801e76a:	4622      	mov	r2, r4
 801e76c:	462b      	mov	r3, r5
 801e76e:	f7e1 fd8b 	bl	8000288 <__aeabi_dsub>
 801e772:	4602      	mov	r2, r0
 801e774:	460b      	mov	r3, r1
 801e776:	4604      	mov	r4, r0
 801e778:	460d      	mov	r5, r1
 801e77a:	4640      	mov	r0, r8
 801e77c:	4649      	mov	r1, r9
 801e77e:	f7e1 fd83 	bl	8000288 <__aeabi_dsub>
 801e782:	9a03      	ldr	r2, [sp, #12]
 801e784:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e788:	1ad3      	subs	r3, r2, r3
 801e78a:	2b31      	cmp	r3, #49	; 0x31
 801e78c:	dc24      	bgt.n	801e7d8 <__ieee754_rem_pio2+0x288>
 801e78e:	e9ca 0100 	strd	r0, r1, [sl]
 801e792:	4646      	mov	r6, r8
 801e794:	464f      	mov	r7, r9
 801e796:	e9da 8900 	ldrd	r8, r9, [sl]
 801e79a:	4630      	mov	r0, r6
 801e79c:	4642      	mov	r2, r8
 801e79e:	464b      	mov	r3, r9
 801e7a0:	4639      	mov	r1, r7
 801e7a2:	f7e1 fd71 	bl	8000288 <__aeabi_dsub>
 801e7a6:	462b      	mov	r3, r5
 801e7a8:	4622      	mov	r2, r4
 801e7aa:	f7e1 fd6d 	bl	8000288 <__aeabi_dsub>
 801e7ae:	9b02      	ldr	r3, [sp, #8]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e7b6:	f6bf af0b 	bge.w	801e5d0 <__ieee754_rem_pio2+0x80>
 801e7ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e7be:	f8ca 3004 	str.w	r3, [sl, #4]
 801e7c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e7c6:	f8ca 8000 	str.w	r8, [sl]
 801e7ca:	f8ca 0008 	str.w	r0, [sl, #8]
 801e7ce:	f8ca 300c 	str.w	r3, [sl, #12]
 801e7d2:	f1cb 0b00 	rsb	fp, fp, #0
 801e7d6:	e6fb      	b.n	801e5d0 <__ieee754_rem_pio2+0x80>
 801e7d8:	a327      	add	r3, pc, #156	; (adr r3, 801e878 <__ieee754_rem_pio2+0x328>)
 801e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7de:	ec51 0b18 	vmov	r0, r1, d8
 801e7e2:	f7e1 ff09 	bl	80005f8 <__aeabi_dmul>
 801e7e6:	4604      	mov	r4, r0
 801e7e8:	460d      	mov	r5, r1
 801e7ea:	4602      	mov	r2, r0
 801e7ec:	460b      	mov	r3, r1
 801e7ee:	4640      	mov	r0, r8
 801e7f0:	4649      	mov	r1, r9
 801e7f2:	f7e1 fd49 	bl	8000288 <__aeabi_dsub>
 801e7f6:	4602      	mov	r2, r0
 801e7f8:	460b      	mov	r3, r1
 801e7fa:	4606      	mov	r6, r0
 801e7fc:	460f      	mov	r7, r1
 801e7fe:	4640      	mov	r0, r8
 801e800:	4649      	mov	r1, r9
 801e802:	f7e1 fd41 	bl	8000288 <__aeabi_dsub>
 801e806:	4622      	mov	r2, r4
 801e808:	462b      	mov	r3, r5
 801e80a:	f7e1 fd3d 	bl	8000288 <__aeabi_dsub>
 801e80e:	a31c      	add	r3, pc, #112	; (adr r3, 801e880 <__ieee754_rem_pio2+0x330>)
 801e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e814:	4604      	mov	r4, r0
 801e816:	460d      	mov	r5, r1
 801e818:	ec51 0b18 	vmov	r0, r1, d8
 801e81c:	f7e1 feec 	bl	80005f8 <__aeabi_dmul>
 801e820:	4622      	mov	r2, r4
 801e822:	462b      	mov	r3, r5
 801e824:	f7e1 fd30 	bl	8000288 <__aeabi_dsub>
 801e828:	4604      	mov	r4, r0
 801e82a:	460d      	mov	r5, r1
 801e82c:	e760      	b.n	801e6f0 <__ieee754_rem_pio2+0x1a0>
 801e82e:	4b1c      	ldr	r3, [pc, #112]	; (801e8a0 <__ieee754_rem_pio2+0x350>)
 801e830:	4598      	cmp	r8, r3
 801e832:	dd37      	ble.n	801e8a4 <__ieee754_rem_pio2+0x354>
 801e834:	ee10 2a10 	vmov	r2, s0
 801e838:	462b      	mov	r3, r5
 801e83a:	4620      	mov	r0, r4
 801e83c:	4629      	mov	r1, r5
 801e83e:	f7e1 fd23 	bl	8000288 <__aeabi_dsub>
 801e842:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e846:	e9ca 0100 	strd	r0, r1, [sl]
 801e84a:	e695      	b.n	801e578 <__ieee754_rem_pio2+0x28>
 801e84c:	f3af 8000 	nop.w
 801e850:	54400000 	.word	0x54400000
 801e854:	3ff921fb 	.word	0x3ff921fb
 801e858:	1a626331 	.word	0x1a626331
 801e85c:	3dd0b461 	.word	0x3dd0b461
 801e860:	1a600000 	.word	0x1a600000
 801e864:	3dd0b461 	.word	0x3dd0b461
 801e868:	2e037073 	.word	0x2e037073
 801e86c:	3ba3198a 	.word	0x3ba3198a
 801e870:	6dc9c883 	.word	0x6dc9c883
 801e874:	3fe45f30 	.word	0x3fe45f30
 801e878:	2e000000 	.word	0x2e000000
 801e87c:	3ba3198a 	.word	0x3ba3198a
 801e880:	252049c1 	.word	0x252049c1
 801e884:	397b839a 	.word	0x397b839a
 801e888:	3fe921fb 	.word	0x3fe921fb
 801e88c:	4002d97b 	.word	0x4002d97b
 801e890:	3ff921fb 	.word	0x3ff921fb
 801e894:	413921fb 	.word	0x413921fb
 801e898:	3fe00000 	.word	0x3fe00000
 801e89c:	080200e0 	.word	0x080200e0
 801e8a0:	7fefffff 	.word	0x7fefffff
 801e8a4:	ea4f 5628 	mov.w	r6, r8, asr #20
 801e8a8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801e8ac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801e8b0:	4620      	mov	r0, r4
 801e8b2:	460d      	mov	r5, r1
 801e8b4:	f7e2 f950 	bl	8000b58 <__aeabi_d2iz>
 801e8b8:	f7e1 fe34 	bl	8000524 <__aeabi_i2d>
 801e8bc:	4602      	mov	r2, r0
 801e8be:	460b      	mov	r3, r1
 801e8c0:	4620      	mov	r0, r4
 801e8c2:	4629      	mov	r1, r5
 801e8c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e8c8:	f7e1 fcde 	bl	8000288 <__aeabi_dsub>
 801e8cc:	4b21      	ldr	r3, [pc, #132]	; (801e954 <__ieee754_rem_pio2+0x404>)
 801e8ce:	2200      	movs	r2, #0
 801e8d0:	f7e1 fe92 	bl	80005f8 <__aeabi_dmul>
 801e8d4:	460d      	mov	r5, r1
 801e8d6:	4604      	mov	r4, r0
 801e8d8:	f7e2 f93e 	bl	8000b58 <__aeabi_d2iz>
 801e8dc:	f7e1 fe22 	bl	8000524 <__aeabi_i2d>
 801e8e0:	4602      	mov	r2, r0
 801e8e2:	460b      	mov	r3, r1
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	4629      	mov	r1, r5
 801e8e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e8ec:	f7e1 fccc 	bl	8000288 <__aeabi_dsub>
 801e8f0:	4b18      	ldr	r3, [pc, #96]	; (801e954 <__ieee754_rem_pio2+0x404>)
 801e8f2:	2200      	movs	r2, #0
 801e8f4:	f7e1 fe80 	bl	80005f8 <__aeabi_dmul>
 801e8f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801e8fc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801e900:	2703      	movs	r7, #3
 801e902:	2400      	movs	r4, #0
 801e904:	2500      	movs	r5, #0
 801e906:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801e90a:	4622      	mov	r2, r4
 801e90c:	462b      	mov	r3, r5
 801e90e:	46b9      	mov	r9, r7
 801e910:	3f01      	subs	r7, #1
 801e912:	f7e2 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 801e916:	2800      	cmp	r0, #0
 801e918:	d1f5      	bne.n	801e906 <__ieee754_rem_pio2+0x3b6>
 801e91a:	4b0f      	ldr	r3, [pc, #60]	; (801e958 <__ieee754_rem_pio2+0x408>)
 801e91c:	9301      	str	r3, [sp, #4]
 801e91e:	2302      	movs	r3, #2
 801e920:	9300      	str	r3, [sp, #0]
 801e922:	4632      	mov	r2, r6
 801e924:	464b      	mov	r3, r9
 801e926:	4651      	mov	r1, sl
 801e928:	a804      	add	r0, sp, #16
 801e92a:	f000 f9b9 	bl	801eca0 <__kernel_rem_pio2>
 801e92e:	9b02      	ldr	r3, [sp, #8]
 801e930:	2b00      	cmp	r3, #0
 801e932:	4683      	mov	fp, r0
 801e934:	f6bf ae4c 	bge.w	801e5d0 <__ieee754_rem_pio2+0x80>
 801e938:	e9da 2100 	ldrd	r2, r1, [sl]
 801e93c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e940:	e9ca 2300 	strd	r2, r3, [sl]
 801e944:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801e948:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e94c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801e950:	e73f      	b.n	801e7d2 <__ieee754_rem_pio2+0x282>
 801e952:	bf00      	nop
 801e954:	41700000 	.word	0x41700000
 801e958:	08020160 	.word	0x08020160
 801e95c:	00000000 	.word	0x00000000

0801e960 <atan>:
 801e960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e964:	ec55 4b10 	vmov	r4, r5, d0
 801e968:	4bc3      	ldr	r3, [pc, #780]	; (801ec78 <atan+0x318>)
 801e96a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e96e:	429e      	cmp	r6, r3
 801e970:	46ab      	mov	fp, r5
 801e972:	dd18      	ble.n	801e9a6 <atan+0x46>
 801e974:	4bc1      	ldr	r3, [pc, #772]	; (801ec7c <atan+0x31c>)
 801e976:	429e      	cmp	r6, r3
 801e978:	dc01      	bgt.n	801e97e <atan+0x1e>
 801e97a:	d109      	bne.n	801e990 <atan+0x30>
 801e97c:	b144      	cbz	r4, 801e990 <atan+0x30>
 801e97e:	4622      	mov	r2, r4
 801e980:	462b      	mov	r3, r5
 801e982:	4620      	mov	r0, r4
 801e984:	4629      	mov	r1, r5
 801e986:	f7e1 fc81 	bl	800028c <__adddf3>
 801e98a:	4604      	mov	r4, r0
 801e98c:	460d      	mov	r5, r1
 801e98e:	e006      	b.n	801e99e <atan+0x3e>
 801e990:	f1bb 0f00 	cmp.w	fp, #0
 801e994:	f300 8131 	bgt.w	801ebfa <atan+0x29a>
 801e998:	a59b      	add	r5, pc, #620	; (adr r5, 801ec08 <atan+0x2a8>)
 801e99a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e99e:	ec45 4b10 	vmov	d0, r4, r5
 801e9a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9a6:	4bb6      	ldr	r3, [pc, #728]	; (801ec80 <atan+0x320>)
 801e9a8:	429e      	cmp	r6, r3
 801e9aa:	dc14      	bgt.n	801e9d6 <atan+0x76>
 801e9ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801e9b0:	429e      	cmp	r6, r3
 801e9b2:	dc0d      	bgt.n	801e9d0 <atan+0x70>
 801e9b4:	a396      	add	r3, pc, #600	; (adr r3, 801ec10 <atan+0x2b0>)
 801e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9ba:	ee10 0a10 	vmov	r0, s0
 801e9be:	4629      	mov	r1, r5
 801e9c0:	f7e1 fc64 	bl	800028c <__adddf3>
 801e9c4:	4baf      	ldr	r3, [pc, #700]	; (801ec84 <atan+0x324>)
 801e9c6:	2200      	movs	r2, #0
 801e9c8:	f7e2 f8a6 	bl	8000b18 <__aeabi_dcmpgt>
 801e9cc:	2800      	cmp	r0, #0
 801e9ce:	d1e6      	bne.n	801e99e <atan+0x3e>
 801e9d0:	f04f 3aff 	mov.w	sl, #4294967295
 801e9d4:	e02b      	b.n	801ea2e <atan+0xce>
 801e9d6:	f7fe fff7 	bl	801d9c8 <fabs>
 801e9da:	4bab      	ldr	r3, [pc, #684]	; (801ec88 <atan+0x328>)
 801e9dc:	429e      	cmp	r6, r3
 801e9de:	ec55 4b10 	vmov	r4, r5, d0
 801e9e2:	f300 80bf 	bgt.w	801eb64 <atan+0x204>
 801e9e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801e9ea:	429e      	cmp	r6, r3
 801e9ec:	f300 80a0 	bgt.w	801eb30 <atan+0x1d0>
 801e9f0:	ee10 2a10 	vmov	r2, s0
 801e9f4:	ee10 0a10 	vmov	r0, s0
 801e9f8:	462b      	mov	r3, r5
 801e9fa:	4629      	mov	r1, r5
 801e9fc:	f7e1 fc46 	bl	800028c <__adddf3>
 801ea00:	4ba0      	ldr	r3, [pc, #640]	; (801ec84 <atan+0x324>)
 801ea02:	2200      	movs	r2, #0
 801ea04:	f7e1 fc40 	bl	8000288 <__aeabi_dsub>
 801ea08:	2200      	movs	r2, #0
 801ea0a:	4606      	mov	r6, r0
 801ea0c:	460f      	mov	r7, r1
 801ea0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ea12:	4620      	mov	r0, r4
 801ea14:	4629      	mov	r1, r5
 801ea16:	f7e1 fc39 	bl	800028c <__adddf3>
 801ea1a:	4602      	mov	r2, r0
 801ea1c:	460b      	mov	r3, r1
 801ea1e:	4630      	mov	r0, r6
 801ea20:	4639      	mov	r1, r7
 801ea22:	f7e1 ff13 	bl	800084c <__aeabi_ddiv>
 801ea26:	f04f 0a00 	mov.w	sl, #0
 801ea2a:	4604      	mov	r4, r0
 801ea2c:	460d      	mov	r5, r1
 801ea2e:	4622      	mov	r2, r4
 801ea30:	462b      	mov	r3, r5
 801ea32:	4620      	mov	r0, r4
 801ea34:	4629      	mov	r1, r5
 801ea36:	f7e1 fddf 	bl	80005f8 <__aeabi_dmul>
 801ea3a:	4602      	mov	r2, r0
 801ea3c:	460b      	mov	r3, r1
 801ea3e:	4680      	mov	r8, r0
 801ea40:	4689      	mov	r9, r1
 801ea42:	f7e1 fdd9 	bl	80005f8 <__aeabi_dmul>
 801ea46:	a374      	add	r3, pc, #464	; (adr r3, 801ec18 <atan+0x2b8>)
 801ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea4c:	4606      	mov	r6, r0
 801ea4e:	460f      	mov	r7, r1
 801ea50:	f7e1 fdd2 	bl	80005f8 <__aeabi_dmul>
 801ea54:	a372      	add	r3, pc, #456	; (adr r3, 801ec20 <atan+0x2c0>)
 801ea56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea5a:	f7e1 fc17 	bl	800028c <__adddf3>
 801ea5e:	4632      	mov	r2, r6
 801ea60:	463b      	mov	r3, r7
 801ea62:	f7e1 fdc9 	bl	80005f8 <__aeabi_dmul>
 801ea66:	a370      	add	r3, pc, #448	; (adr r3, 801ec28 <atan+0x2c8>)
 801ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea6c:	f7e1 fc0e 	bl	800028c <__adddf3>
 801ea70:	4632      	mov	r2, r6
 801ea72:	463b      	mov	r3, r7
 801ea74:	f7e1 fdc0 	bl	80005f8 <__aeabi_dmul>
 801ea78:	a36d      	add	r3, pc, #436	; (adr r3, 801ec30 <atan+0x2d0>)
 801ea7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea7e:	f7e1 fc05 	bl	800028c <__adddf3>
 801ea82:	4632      	mov	r2, r6
 801ea84:	463b      	mov	r3, r7
 801ea86:	f7e1 fdb7 	bl	80005f8 <__aeabi_dmul>
 801ea8a:	a36b      	add	r3, pc, #428	; (adr r3, 801ec38 <atan+0x2d8>)
 801ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea90:	f7e1 fbfc 	bl	800028c <__adddf3>
 801ea94:	4632      	mov	r2, r6
 801ea96:	463b      	mov	r3, r7
 801ea98:	f7e1 fdae 	bl	80005f8 <__aeabi_dmul>
 801ea9c:	a368      	add	r3, pc, #416	; (adr r3, 801ec40 <atan+0x2e0>)
 801ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa2:	f7e1 fbf3 	bl	800028c <__adddf3>
 801eaa6:	4642      	mov	r2, r8
 801eaa8:	464b      	mov	r3, r9
 801eaaa:	f7e1 fda5 	bl	80005f8 <__aeabi_dmul>
 801eaae:	a366      	add	r3, pc, #408	; (adr r3, 801ec48 <atan+0x2e8>)
 801eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eab4:	4680      	mov	r8, r0
 801eab6:	4689      	mov	r9, r1
 801eab8:	4630      	mov	r0, r6
 801eaba:	4639      	mov	r1, r7
 801eabc:	f7e1 fd9c 	bl	80005f8 <__aeabi_dmul>
 801eac0:	a363      	add	r3, pc, #396	; (adr r3, 801ec50 <atan+0x2f0>)
 801eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eac6:	f7e1 fbdf 	bl	8000288 <__aeabi_dsub>
 801eaca:	4632      	mov	r2, r6
 801eacc:	463b      	mov	r3, r7
 801eace:	f7e1 fd93 	bl	80005f8 <__aeabi_dmul>
 801ead2:	a361      	add	r3, pc, #388	; (adr r3, 801ec58 <atan+0x2f8>)
 801ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ead8:	f7e1 fbd6 	bl	8000288 <__aeabi_dsub>
 801eadc:	4632      	mov	r2, r6
 801eade:	463b      	mov	r3, r7
 801eae0:	f7e1 fd8a 	bl	80005f8 <__aeabi_dmul>
 801eae4:	a35e      	add	r3, pc, #376	; (adr r3, 801ec60 <atan+0x300>)
 801eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaea:	f7e1 fbcd 	bl	8000288 <__aeabi_dsub>
 801eaee:	4632      	mov	r2, r6
 801eaf0:	463b      	mov	r3, r7
 801eaf2:	f7e1 fd81 	bl	80005f8 <__aeabi_dmul>
 801eaf6:	a35c      	add	r3, pc, #368	; (adr r3, 801ec68 <atan+0x308>)
 801eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eafc:	f7e1 fbc4 	bl	8000288 <__aeabi_dsub>
 801eb00:	4632      	mov	r2, r6
 801eb02:	463b      	mov	r3, r7
 801eb04:	f7e1 fd78 	bl	80005f8 <__aeabi_dmul>
 801eb08:	4602      	mov	r2, r0
 801eb0a:	460b      	mov	r3, r1
 801eb0c:	4640      	mov	r0, r8
 801eb0e:	4649      	mov	r1, r9
 801eb10:	f7e1 fbbc 	bl	800028c <__adddf3>
 801eb14:	4622      	mov	r2, r4
 801eb16:	462b      	mov	r3, r5
 801eb18:	f7e1 fd6e 	bl	80005f8 <__aeabi_dmul>
 801eb1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801eb20:	4602      	mov	r2, r0
 801eb22:	460b      	mov	r3, r1
 801eb24:	d14b      	bne.n	801ebbe <atan+0x25e>
 801eb26:	4620      	mov	r0, r4
 801eb28:	4629      	mov	r1, r5
 801eb2a:	f7e1 fbad 	bl	8000288 <__aeabi_dsub>
 801eb2e:	e72c      	b.n	801e98a <atan+0x2a>
 801eb30:	ee10 0a10 	vmov	r0, s0
 801eb34:	4b53      	ldr	r3, [pc, #332]	; (801ec84 <atan+0x324>)
 801eb36:	2200      	movs	r2, #0
 801eb38:	4629      	mov	r1, r5
 801eb3a:	f7e1 fba5 	bl	8000288 <__aeabi_dsub>
 801eb3e:	4b51      	ldr	r3, [pc, #324]	; (801ec84 <atan+0x324>)
 801eb40:	4606      	mov	r6, r0
 801eb42:	460f      	mov	r7, r1
 801eb44:	2200      	movs	r2, #0
 801eb46:	4620      	mov	r0, r4
 801eb48:	4629      	mov	r1, r5
 801eb4a:	f7e1 fb9f 	bl	800028c <__adddf3>
 801eb4e:	4602      	mov	r2, r0
 801eb50:	460b      	mov	r3, r1
 801eb52:	4630      	mov	r0, r6
 801eb54:	4639      	mov	r1, r7
 801eb56:	f7e1 fe79 	bl	800084c <__aeabi_ddiv>
 801eb5a:	f04f 0a01 	mov.w	sl, #1
 801eb5e:	4604      	mov	r4, r0
 801eb60:	460d      	mov	r5, r1
 801eb62:	e764      	b.n	801ea2e <atan+0xce>
 801eb64:	4b49      	ldr	r3, [pc, #292]	; (801ec8c <atan+0x32c>)
 801eb66:	429e      	cmp	r6, r3
 801eb68:	da1d      	bge.n	801eba6 <atan+0x246>
 801eb6a:	ee10 0a10 	vmov	r0, s0
 801eb6e:	4b48      	ldr	r3, [pc, #288]	; (801ec90 <atan+0x330>)
 801eb70:	2200      	movs	r2, #0
 801eb72:	4629      	mov	r1, r5
 801eb74:	f7e1 fb88 	bl	8000288 <__aeabi_dsub>
 801eb78:	4b45      	ldr	r3, [pc, #276]	; (801ec90 <atan+0x330>)
 801eb7a:	4606      	mov	r6, r0
 801eb7c:	460f      	mov	r7, r1
 801eb7e:	2200      	movs	r2, #0
 801eb80:	4620      	mov	r0, r4
 801eb82:	4629      	mov	r1, r5
 801eb84:	f7e1 fd38 	bl	80005f8 <__aeabi_dmul>
 801eb88:	4b3e      	ldr	r3, [pc, #248]	; (801ec84 <atan+0x324>)
 801eb8a:	2200      	movs	r2, #0
 801eb8c:	f7e1 fb7e 	bl	800028c <__adddf3>
 801eb90:	4602      	mov	r2, r0
 801eb92:	460b      	mov	r3, r1
 801eb94:	4630      	mov	r0, r6
 801eb96:	4639      	mov	r1, r7
 801eb98:	f7e1 fe58 	bl	800084c <__aeabi_ddiv>
 801eb9c:	f04f 0a02 	mov.w	sl, #2
 801eba0:	4604      	mov	r4, r0
 801eba2:	460d      	mov	r5, r1
 801eba4:	e743      	b.n	801ea2e <atan+0xce>
 801eba6:	462b      	mov	r3, r5
 801eba8:	ee10 2a10 	vmov	r2, s0
 801ebac:	4939      	ldr	r1, [pc, #228]	; (801ec94 <atan+0x334>)
 801ebae:	2000      	movs	r0, #0
 801ebb0:	f7e1 fe4c 	bl	800084c <__aeabi_ddiv>
 801ebb4:	f04f 0a03 	mov.w	sl, #3
 801ebb8:	4604      	mov	r4, r0
 801ebba:	460d      	mov	r5, r1
 801ebbc:	e737      	b.n	801ea2e <atan+0xce>
 801ebbe:	4b36      	ldr	r3, [pc, #216]	; (801ec98 <atan+0x338>)
 801ebc0:	4e36      	ldr	r6, [pc, #216]	; (801ec9c <atan+0x33c>)
 801ebc2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ebc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebca:	f7e1 fb5d 	bl	8000288 <__aeabi_dsub>
 801ebce:	4622      	mov	r2, r4
 801ebd0:	462b      	mov	r3, r5
 801ebd2:	f7e1 fb59 	bl	8000288 <__aeabi_dsub>
 801ebd6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801ebda:	4602      	mov	r2, r0
 801ebdc:	460b      	mov	r3, r1
 801ebde:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ebe2:	f7e1 fb51 	bl	8000288 <__aeabi_dsub>
 801ebe6:	f1bb 0f00 	cmp.w	fp, #0
 801ebea:	4604      	mov	r4, r0
 801ebec:	460d      	mov	r5, r1
 801ebee:	f6bf aed6 	bge.w	801e99e <atan+0x3e>
 801ebf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ebf6:	461d      	mov	r5, r3
 801ebf8:	e6d1      	b.n	801e99e <atan+0x3e>
 801ebfa:	a51d      	add	r5, pc, #116	; (adr r5, 801ec70 <atan+0x310>)
 801ebfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ec00:	e6cd      	b.n	801e99e <atan+0x3e>
 801ec02:	bf00      	nop
 801ec04:	f3af 8000 	nop.w
 801ec08:	54442d18 	.word	0x54442d18
 801ec0c:	bff921fb 	.word	0xbff921fb
 801ec10:	8800759c 	.word	0x8800759c
 801ec14:	7e37e43c 	.word	0x7e37e43c
 801ec18:	e322da11 	.word	0xe322da11
 801ec1c:	3f90ad3a 	.word	0x3f90ad3a
 801ec20:	24760deb 	.word	0x24760deb
 801ec24:	3fa97b4b 	.word	0x3fa97b4b
 801ec28:	a0d03d51 	.word	0xa0d03d51
 801ec2c:	3fb10d66 	.word	0x3fb10d66
 801ec30:	c54c206e 	.word	0xc54c206e
 801ec34:	3fb745cd 	.word	0x3fb745cd
 801ec38:	920083ff 	.word	0x920083ff
 801ec3c:	3fc24924 	.word	0x3fc24924
 801ec40:	5555550d 	.word	0x5555550d
 801ec44:	3fd55555 	.word	0x3fd55555
 801ec48:	2c6a6c2f 	.word	0x2c6a6c2f
 801ec4c:	bfa2b444 	.word	0xbfa2b444
 801ec50:	52defd9a 	.word	0x52defd9a
 801ec54:	3fadde2d 	.word	0x3fadde2d
 801ec58:	af749a6d 	.word	0xaf749a6d
 801ec5c:	3fb3b0f2 	.word	0x3fb3b0f2
 801ec60:	fe231671 	.word	0xfe231671
 801ec64:	3fbc71c6 	.word	0x3fbc71c6
 801ec68:	9998ebc4 	.word	0x9998ebc4
 801ec6c:	3fc99999 	.word	0x3fc99999
 801ec70:	54442d18 	.word	0x54442d18
 801ec74:	3ff921fb 	.word	0x3ff921fb
 801ec78:	440fffff 	.word	0x440fffff
 801ec7c:	7ff00000 	.word	0x7ff00000
 801ec80:	3fdbffff 	.word	0x3fdbffff
 801ec84:	3ff00000 	.word	0x3ff00000
 801ec88:	3ff2ffff 	.word	0x3ff2ffff
 801ec8c:	40038000 	.word	0x40038000
 801ec90:	3ff80000 	.word	0x3ff80000
 801ec94:	bff00000 	.word	0xbff00000
 801ec98:	08020288 	.word	0x08020288
 801ec9c:	08020268 	.word	0x08020268

0801eca0 <__kernel_rem_pio2>:
 801eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eca4:	ed2d 8b02 	vpush	{d8}
 801eca8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801ecac:	f112 0f14 	cmn.w	r2, #20
 801ecb0:	9306      	str	r3, [sp, #24]
 801ecb2:	9104      	str	r1, [sp, #16]
 801ecb4:	4bc2      	ldr	r3, [pc, #776]	; (801efc0 <__kernel_rem_pio2+0x320>)
 801ecb6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801ecb8:	9009      	str	r0, [sp, #36]	; 0x24
 801ecba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ecbe:	9300      	str	r3, [sp, #0]
 801ecc0:	9b06      	ldr	r3, [sp, #24]
 801ecc2:	f103 33ff 	add.w	r3, r3, #4294967295
 801ecc6:	bfa8      	it	ge
 801ecc8:	1ed4      	subge	r4, r2, #3
 801ecca:	9305      	str	r3, [sp, #20]
 801eccc:	bfb2      	itee	lt
 801ecce:	2400      	movlt	r4, #0
 801ecd0:	2318      	movge	r3, #24
 801ecd2:	fb94 f4f3 	sdivge	r4, r4, r3
 801ecd6:	f06f 0317 	mvn.w	r3, #23
 801ecda:	fb04 3303 	mla	r3, r4, r3, r3
 801ecde:	eb03 0a02 	add.w	sl, r3, r2
 801ece2:	9b00      	ldr	r3, [sp, #0]
 801ece4:	9a05      	ldr	r2, [sp, #20]
 801ece6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801efb0 <__kernel_rem_pio2+0x310>
 801ecea:	eb03 0802 	add.w	r8, r3, r2
 801ecee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801ecf0:	1aa7      	subs	r7, r4, r2
 801ecf2:	ae20      	add	r6, sp, #128	; 0x80
 801ecf4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ecf8:	2500      	movs	r5, #0
 801ecfa:	4545      	cmp	r5, r8
 801ecfc:	dd13      	ble.n	801ed26 <__kernel_rem_pio2+0x86>
 801ecfe:	9b06      	ldr	r3, [sp, #24]
 801ed00:	aa20      	add	r2, sp, #128	; 0x80
 801ed02:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ed06:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801ed0a:	f04f 0800 	mov.w	r8, #0
 801ed0e:	9b00      	ldr	r3, [sp, #0]
 801ed10:	4598      	cmp	r8, r3
 801ed12:	dc31      	bgt.n	801ed78 <__kernel_rem_pio2+0xd8>
 801ed14:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801efb0 <__kernel_rem_pio2+0x310>
 801ed18:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ed1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ed20:	462f      	mov	r7, r5
 801ed22:	2600      	movs	r6, #0
 801ed24:	e01b      	b.n	801ed5e <__kernel_rem_pio2+0xbe>
 801ed26:	42ef      	cmn	r7, r5
 801ed28:	d407      	bmi.n	801ed3a <__kernel_rem_pio2+0x9a>
 801ed2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ed2e:	f7e1 fbf9 	bl	8000524 <__aeabi_i2d>
 801ed32:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ed36:	3501      	adds	r5, #1
 801ed38:	e7df      	b.n	801ecfa <__kernel_rem_pio2+0x5a>
 801ed3a:	ec51 0b18 	vmov	r0, r1, d8
 801ed3e:	e7f8      	b.n	801ed32 <__kernel_rem_pio2+0x92>
 801ed40:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ed44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ed48:	f7e1 fc56 	bl	80005f8 <__aeabi_dmul>
 801ed4c:	4602      	mov	r2, r0
 801ed4e:	460b      	mov	r3, r1
 801ed50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed54:	f7e1 fa9a 	bl	800028c <__adddf3>
 801ed58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed5c:	3601      	adds	r6, #1
 801ed5e:	9b05      	ldr	r3, [sp, #20]
 801ed60:	429e      	cmp	r6, r3
 801ed62:	f1a7 0708 	sub.w	r7, r7, #8
 801ed66:	ddeb      	ble.n	801ed40 <__kernel_rem_pio2+0xa0>
 801ed68:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ed6c:	f108 0801 	add.w	r8, r8, #1
 801ed70:	ecab 7b02 	vstmia	fp!, {d7}
 801ed74:	3508      	adds	r5, #8
 801ed76:	e7ca      	b.n	801ed0e <__kernel_rem_pio2+0x6e>
 801ed78:	9b00      	ldr	r3, [sp, #0]
 801ed7a:	aa0c      	add	r2, sp, #48	; 0x30
 801ed7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ed80:	930b      	str	r3, [sp, #44]	; 0x2c
 801ed82:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801ed84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ed88:	9c00      	ldr	r4, [sp, #0]
 801ed8a:	930a      	str	r3, [sp, #40]	; 0x28
 801ed8c:	00e3      	lsls	r3, r4, #3
 801ed8e:	9308      	str	r3, [sp, #32]
 801ed90:	ab98      	add	r3, sp, #608	; 0x260
 801ed92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ed96:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801ed9a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801ed9e:	ab70      	add	r3, sp, #448	; 0x1c0
 801eda0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801eda4:	46c3      	mov	fp, r8
 801eda6:	46a1      	mov	r9, r4
 801eda8:	f1b9 0f00 	cmp.w	r9, #0
 801edac:	f1a5 0508 	sub.w	r5, r5, #8
 801edb0:	dc77      	bgt.n	801eea2 <__kernel_rem_pio2+0x202>
 801edb2:	ec47 6b10 	vmov	d0, r6, r7
 801edb6:	4650      	mov	r0, sl
 801edb8:	f000 fac2 	bl	801f340 <scalbn>
 801edbc:	ec57 6b10 	vmov	r6, r7, d0
 801edc0:	2200      	movs	r2, #0
 801edc2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801edc6:	ee10 0a10 	vmov	r0, s0
 801edca:	4639      	mov	r1, r7
 801edcc:	f7e1 fc14 	bl	80005f8 <__aeabi_dmul>
 801edd0:	ec41 0b10 	vmov	d0, r0, r1
 801edd4:	f000 fb34 	bl	801f440 <floor>
 801edd8:	4b7a      	ldr	r3, [pc, #488]	; (801efc4 <__kernel_rem_pio2+0x324>)
 801edda:	ec51 0b10 	vmov	r0, r1, d0
 801edde:	2200      	movs	r2, #0
 801ede0:	f7e1 fc0a 	bl	80005f8 <__aeabi_dmul>
 801ede4:	4602      	mov	r2, r0
 801ede6:	460b      	mov	r3, r1
 801ede8:	4630      	mov	r0, r6
 801edea:	4639      	mov	r1, r7
 801edec:	f7e1 fa4c 	bl	8000288 <__aeabi_dsub>
 801edf0:	460f      	mov	r7, r1
 801edf2:	4606      	mov	r6, r0
 801edf4:	f7e1 feb0 	bl	8000b58 <__aeabi_d2iz>
 801edf8:	9002      	str	r0, [sp, #8]
 801edfa:	f7e1 fb93 	bl	8000524 <__aeabi_i2d>
 801edfe:	4602      	mov	r2, r0
 801ee00:	460b      	mov	r3, r1
 801ee02:	4630      	mov	r0, r6
 801ee04:	4639      	mov	r1, r7
 801ee06:	f7e1 fa3f 	bl	8000288 <__aeabi_dsub>
 801ee0a:	f1ba 0f00 	cmp.w	sl, #0
 801ee0e:	4606      	mov	r6, r0
 801ee10:	460f      	mov	r7, r1
 801ee12:	dd6d      	ble.n	801eef0 <__kernel_rem_pio2+0x250>
 801ee14:	1e61      	subs	r1, r4, #1
 801ee16:	ab0c      	add	r3, sp, #48	; 0x30
 801ee18:	9d02      	ldr	r5, [sp, #8]
 801ee1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ee1e:	f1ca 0018 	rsb	r0, sl, #24
 801ee22:	fa43 f200 	asr.w	r2, r3, r0
 801ee26:	4415      	add	r5, r2
 801ee28:	4082      	lsls	r2, r0
 801ee2a:	1a9b      	subs	r3, r3, r2
 801ee2c:	aa0c      	add	r2, sp, #48	; 0x30
 801ee2e:	9502      	str	r5, [sp, #8]
 801ee30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ee34:	f1ca 0217 	rsb	r2, sl, #23
 801ee38:	fa43 fb02 	asr.w	fp, r3, r2
 801ee3c:	f1bb 0f00 	cmp.w	fp, #0
 801ee40:	dd65      	ble.n	801ef0e <__kernel_rem_pio2+0x26e>
 801ee42:	9b02      	ldr	r3, [sp, #8]
 801ee44:	2200      	movs	r2, #0
 801ee46:	3301      	adds	r3, #1
 801ee48:	9302      	str	r3, [sp, #8]
 801ee4a:	4615      	mov	r5, r2
 801ee4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801ee50:	4294      	cmp	r4, r2
 801ee52:	f300 809f 	bgt.w	801ef94 <__kernel_rem_pio2+0x2f4>
 801ee56:	f1ba 0f00 	cmp.w	sl, #0
 801ee5a:	dd07      	ble.n	801ee6c <__kernel_rem_pio2+0x1cc>
 801ee5c:	f1ba 0f01 	cmp.w	sl, #1
 801ee60:	f000 80c1 	beq.w	801efe6 <__kernel_rem_pio2+0x346>
 801ee64:	f1ba 0f02 	cmp.w	sl, #2
 801ee68:	f000 80c7 	beq.w	801effa <__kernel_rem_pio2+0x35a>
 801ee6c:	f1bb 0f02 	cmp.w	fp, #2
 801ee70:	d14d      	bne.n	801ef0e <__kernel_rem_pio2+0x26e>
 801ee72:	4632      	mov	r2, r6
 801ee74:	463b      	mov	r3, r7
 801ee76:	4954      	ldr	r1, [pc, #336]	; (801efc8 <__kernel_rem_pio2+0x328>)
 801ee78:	2000      	movs	r0, #0
 801ee7a:	f7e1 fa05 	bl	8000288 <__aeabi_dsub>
 801ee7e:	4606      	mov	r6, r0
 801ee80:	460f      	mov	r7, r1
 801ee82:	2d00      	cmp	r5, #0
 801ee84:	d043      	beq.n	801ef0e <__kernel_rem_pio2+0x26e>
 801ee86:	4650      	mov	r0, sl
 801ee88:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801efb8 <__kernel_rem_pio2+0x318>
 801ee8c:	f000 fa58 	bl	801f340 <scalbn>
 801ee90:	4630      	mov	r0, r6
 801ee92:	4639      	mov	r1, r7
 801ee94:	ec53 2b10 	vmov	r2, r3, d0
 801ee98:	f7e1 f9f6 	bl	8000288 <__aeabi_dsub>
 801ee9c:	4606      	mov	r6, r0
 801ee9e:	460f      	mov	r7, r1
 801eea0:	e035      	b.n	801ef0e <__kernel_rem_pio2+0x26e>
 801eea2:	4b4a      	ldr	r3, [pc, #296]	; (801efcc <__kernel_rem_pio2+0x32c>)
 801eea4:	2200      	movs	r2, #0
 801eea6:	4630      	mov	r0, r6
 801eea8:	4639      	mov	r1, r7
 801eeaa:	f7e1 fba5 	bl	80005f8 <__aeabi_dmul>
 801eeae:	f7e1 fe53 	bl	8000b58 <__aeabi_d2iz>
 801eeb2:	f7e1 fb37 	bl	8000524 <__aeabi_i2d>
 801eeb6:	4602      	mov	r2, r0
 801eeb8:	460b      	mov	r3, r1
 801eeba:	ec43 2b18 	vmov	d8, r2, r3
 801eebe:	4b44      	ldr	r3, [pc, #272]	; (801efd0 <__kernel_rem_pio2+0x330>)
 801eec0:	2200      	movs	r2, #0
 801eec2:	f7e1 fb99 	bl	80005f8 <__aeabi_dmul>
 801eec6:	4602      	mov	r2, r0
 801eec8:	460b      	mov	r3, r1
 801eeca:	4630      	mov	r0, r6
 801eecc:	4639      	mov	r1, r7
 801eece:	f7e1 f9db 	bl	8000288 <__aeabi_dsub>
 801eed2:	f7e1 fe41 	bl	8000b58 <__aeabi_d2iz>
 801eed6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801eeda:	f84b 0b04 	str.w	r0, [fp], #4
 801eede:	ec51 0b18 	vmov	r0, r1, d8
 801eee2:	f7e1 f9d3 	bl	800028c <__adddf3>
 801eee6:	f109 39ff 	add.w	r9, r9, #4294967295
 801eeea:	4606      	mov	r6, r0
 801eeec:	460f      	mov	r7, r1
 801eeee:	e75b      	b.n	801eda8 <__kernel_rem_pio2+0x108>
 801eef0:	d106      	bne.n	801ef00 <__kernel_rem_pio2+0x260>
 801eef2:	1e63      	subs	r3, r4, #1
 801eef4:	aa0c      	add	r2, sp, #48	; 0x30
 801eef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801eefa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801eefe:	e79d      	b.n	801ee3c <__kernel_rem_pio2+0x19c>
 801ef00:	4b34      	ldr	r3, [pc, #208]	; (801efd4 <__kernel_rem_pio2+0x334>)
 801ef02:	2200      	movs	r2, #0
 801ef04:	f7e1 fdfe 	bl	8000b04 <__aeabi_dcmpge>
 801ef08:	2800      	cmp	r0, #0
 801ef0a:	d140      	bne.n	801ef8e <__kernel_rem_pio2+0x2ee>
 801ef0c:	4683      	mov	fp, r0
 801ef0e:	2200      	movs	r2, #0
 801ef10:	2300      	movs	r3, #0
 801ef12:	4630      	mov	r0, r6
 801ef14:	4639      	mov	r1, r7
 801ef16:	f7e1 fdd7 	bl	8000ac8 <__aeabi_dcmpeq>
 801ef1a:	2800      	cmp	r0, #0
 801ef1c:	f000 80c1 	beq.w	801f0a2 <__kernel_rem_pio2+0x402>
 801ef20:	1e65      	subs	r5, r4, #1
 801ef22:	462b      	mov	r3, r5
 801ef24:	2200      	movs	r2, #0
 801ef26:	9900      	ldr	r1, [sp, #0]
 801ef28:	428b      	cmp	r3, r1
 801ef2a:	da6d      	bge.n	801f008 <__kernel_rem_pio2+0x368>
 801ef2c:	2a00      	cmp	r2, #0
 801ef2e:	f000 808a 	beq.w	801f046 <__kernel_rem_pio2+0x3a6>
 801ef32:	ab0c      	add	r3, sp, #48	; 0x30
 801ef34:	f1aa 0a18 	sub.w	sl, sl, #24
 801ef38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	f000 80ae 	beq.w	801f09e <__kernel_rem_pio2+0x3fe>
 801ef42:	4650      	mov	r0, sl
 801ef44:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801efb8 <__kernel_rem_pio2+0x318>
 801ef48:	f000 f9fa 	bl	801f340 <scalbn>
 801ef4c:	1c6b      	adds	r3, r5, #1
 801ef4e:	00da      	lsls	r2, r3, #3
 801ef50:	9205      	str	r2, [sp, #20]
 801ef52:	ec57 6b10 	vmov	r6, r7, d0
 801ef56:	aa70      	add	r2, sp, #448	; 0x1c0
 801ef58:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801efcc <__kernel_rem_pio2+0x32c>
 801ef5c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801ef60:	462c      	mov	r4, r5
 801ef62:	f04f 0800 	mov.w	r8, #0
 801ef66:	2c00      	cmp	r4, #0
 801ef68:	f280 80d4 	bge.w	801f114 <__kernel_rem_pio2+0x474>
 801ef6c:	462c      	mov	r4, r5
 801ef6e:	2c00      	cmp	r4, #0
 801ef70:	f2c0 8102 	blt.w	801f178 <__kernel_rem_pio2+0x4d8>
 801ef74:	4b18      	ldr	r3, [pc, #96]	; (801efd8 <__kernel_rem_pio2+0x338>)
 801ef76:	461e      	mov	r6, r3
 801ef78:	ab70      	add	r3, sp, #448	; 0x1c0
 801ef7a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801ef7e:	1b2b      	subs	r3, r5, r4
 801ef80:	f04f 0900 	mov.w	r9, #0
 801ef84:	f04f 0a00 	mov.w	sl, #0
 801ef88:	2700      	movs	r7, #0
 801ef8a:	9306      	str	r3, [sp, #24]
 801ef8c:	e0e6      	b.n	801f15c <__kernel_rem_pio2+0x4bc>
 801ef8e:	f04f 0b02 	mov.w	fp, #2
 801ef92:	e756      	b.n	801ee42 <__kernel_rem_pio2+0x1a2>
 801ef94:	f8d8 3000 	ldr.w	r3, [r8]
 801ef98:	bb05      	cbnz	r5, 801efdc <__kernel_rem_pio2+0x33c>
 801ef9a:	b123      	cbz	r3, 801efa6 <__kernel_rem_pio2+0x306>
 801ef9c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801efa0:	f8c8 3000 	str.w	r3, [r8]
 801efa4:	2301      	movs	r3, #1
 801efa6:	3201      	adds	r2, #1
 801efa8:	f108 0804 	add.w	r8, r8, #4
 801efac:	461d      	mov	r5, r3
 801efae:	e74f      	b.n	801ee50 <__kernel_rem_pio2+0x1b0>
	...
 801efbc:	3ff00000 	.word	0x3ff00000
 801efc0:	080202e8 	.word	0x080202e8
 801efc4:	40200000 	.word	0x40200000
 801efc8:	3ff00000 	.word	0x3ff00000
 801efcc:	3e700000 	.word	0x3e700000
 801efd0:	41700000 	.word	0x41700000
 801efd4:	3fe00000 	.word	0x3fe00000
 801efd8:	080202a8 	.word	0x080202a8
 801efdc:	1acb      	subs	r3, r1, r3
 801efde:	f8c8 3000 	str.w	r3, [r8]
 801efe2:	462b      	mov	r3, r5
 801efe4:	e7df      	b.n	801efa6 <__kernel_rem_pio2+0x306>
 801efe6:	1e62      	subs	r2, r4, #1
 801efe8:	ab0c      	add	r3, sp, #48	; 0x30
 801efea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801efee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801eff2:	a90c      	add	r1, sp, #48	; 0x30
 801eff4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801eff8:	e738      	b.n	801ee6c <__kernel_rem_pio2+0x1cc>
 801effa:	1e62      	subs	r2, r4, #1
 801effc:	ab0c      	add	r3, sp, #48	; 0x30
 801effe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f002:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f006:	e7f4      	b.n	801eff2 <__kernel_rem_pio2+0x352>
 801f008:	a90c      	add	r1, sp, #48	; 0x30
 801f00a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f00e:	3b01      	subs	r3, #1
 801f010:	430a      	orrs	r2, r1
 801f012:	e788      	b.n	801ef26 <__kernel_rem_pio2+0x286>
 801f014:	3301      	adds	r3, #1
 801f016:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801f01a:	2900      	cmp	r1, #0
 801f01c:	d0fa      	beq.n	801f014 <__kernel_rem_pio2+0x374>
 801f01e:	9a08      	ldr	r2, [sp, #32]
 801f020:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801f024:	446a      	add	r2, sp
 801f026:	3a98      	subs	r2, #152	; 0x98
 801f028:	9208      	str	r2, [sp, #32]
 801f02a:	9a06      	ldr	r2, [sp, #24]
 801f02c:	a920      	add	r1, sp, #128	; 0x80
 801f02e:	18a2      	adds	r2, r4, r2
 801f030:	18e3      	adds	r3, r4, r3
 801f032:	f104 0801 	add.w	r8, r4, #1
 801f036:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801f03a:	9302      	str	r3, [sp, #8]
 801f03c:	9b02      	ldr	r3, [sp, #8]
 801f03e:	4543      	cmp	r3, r8
 801f040:	da04      	bge.n	801f04c <__kernel_rem_pio2+0x3ac>
 801f042:	461c      	mov	r4, r3
 801f044:	e6a2      	b.n	801ed8c <__kernel_rem_pio2+0xec>
 801f046:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f048:	2301      	movs	r3, #1
 801f04a:	e7e4      	b.n	801f016 <__kernel_rem_pio2+0x376>
 801f04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f04e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801f052:	f7e1 fa67 	bl	8000524 <__aeabi_i2d>
 801f056:	e8e5 0102 	strd	r0, r1, [r5], #8
 801f05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f05c:	46ab      	mov	fp, r5
 801f05e:	461c      	mov	r4, r3
 801f060:	f04f 0900 	mov.w	r9, #0
 801f064:	2600      	movs	r6, #0
 801f066:	2700      	movs	r7, #0
 801f068:	9b05      	ldr	r3, [sp, #20]
 801f06a:	4599      	cmp	r9, r3
 801f06c:	dd06      	ble.n	801f07c <__kernel_rem_pio2+0x3dc>
 801f06e:	9b08      	ldr	r3, [sp, #32]
 801f070:	e8e3 6702 	strd	r6, r7, [r3], #8
 801f074:	f108 0801 	add.w	r8, r8, #1
 801f078:	9308      	str	r3, [sp, #32]
 801f07a:	e7df      	b.n	801f03c <__kernel_rem_pio2+0x39c>
 801f07c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801f080:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801f084:	f7e1 fab8 	bl	80005f8 <__aeabi_dmul>
 801f088:	4602      	mov	r2, r0
 801f08a:	460b      	mov	r3, r1
 801f08c:	4630      	mov	r0, r6
 801f08e:	4639      	mov	r1, r7
 801f090:	f7e1 f8fc 	bl	800028c <__adddf3>
 801f094:	f109 0901 	add.w	r9, r9, #1
 801f098:	4606      	mov	r6, r0
 801f09a:	460f      	mov	r7, r1
 801f09c:	e7e4      	b.n	801f068 <__kernel_rem_pio2+0x3c8>
 801f09e:	3d01      	subs	r5, #1
 801f0a0:	e747      	b.n	801ef32 <__kernel_rem_pio2+0x292>
 801f0a2:	ec47 6b10 	vmov	d0, r6, r7
 801f0a6:	f1ca 0000 	rsb	r0, sl, #0
 801f0aa:	f000 f949 	bl	801f340 <scalbn>
 801f0ae:	ec57 6b10 	vmov	r6, r7, d0
 801f0b2:	4ba0      	ldr	r3, [pc, #640]	; (801f334 <__kernel_rem_pio2+0x694>)
 801f0b4:	ee10 0a10 	vmov	r0, s0
 801f0b8:	2200      	movs	r2, #0
 801f0ba:	4639      	mov	r1, r7
 801f0bc:	f7e1 fd22 	bl	8000b04 <__aeabi_dcmpge>
 801f0c0:	b1f8      	cbz	r0, 801f102 <__kernel_rem_pio2+0x462>
 801f0c2:	4b9d      	ldr	r3, [pc, #628]	; (801f338 <__kernel_rem_pio2+0x698>)
 801f0c4:	2200      	movs	r2, #0
 801f0c6:	4630      	mov	r0, r6
 801f0c8:	4639      	mov	r1, r7
 801f0ca:	f7e1 fa95 	bl	80005f8 <__aeabi_dmul>
 801f0ce:	f7e1 fd43 	bl	8000b58 <__aeabi_d2iz>
 801f0d2:	4680      	mov	r8, r0
 801f0d4:	f7e1 fa26 	bl	8000524 <__aeabi_i2d>
 801f0d8:	4b96      	ldr	r3, [pc, #600]	; (801f334 <__kernel_rem_pio2+0x694>)
 801f0da:	2200      	movs	r2, #0
 801f0dc:	f7e1 fa8c 	bl	80005f8 <__aeabi_dmul>
 801f0e0:	460b      	mov	r3, r1
 801f0e2:	4602      	mov	r2, r0
 801f0e4:	4639      	mov	r1, r7
 801f0e6:	4630      	mov	r0, r6
 801f0e8:	f7e1 f8ce 	bl	8000288 <__aeabi_dsub>
 801f0ec:	f7e1 fd34 	bl	8000b58 <__aeabi_d2iz>
 801f0f0:	1c65      	adds	r5, r4, #1
 801f0f2:	ab0c      	add	r3, sp, #48	; 0x30
 801f0f4:	f10a 0a18 	add.w	sl, sl, #24
 801f0f8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f0fc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801f100:	e71f      	b.n	801ef42 <__kernel_rem_pio2+0x2a2>
 801f102:	4630      	mov	r0, r6
 801f104:	4639      	mov	r1, r7
 801f106:	f7e1 fd27 	bl	8000b58 <__aeabi_d2iz>
 801f10a:	ab0c      	add	r3, sp, #48	; 0x30
 801f10c:	4625      	mov	r5, r4
 801f10e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f112:	e716      	b.n	801ef42 <__kernel_rem_pio2+0x2a2>
 801f114:	ab0c      	add	r3, sp, #48	; 0x30
 801f116:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f11a:	f7e1 fa03 	bl	8000524 <__aeabi_i2d>
 801f11e:	4632      	mov	r2, r6
 801f120:	463b      	mov	r3, r7
 801f122:	f7e1 fa69 	bl	80005f8 <__aeabi_dmul>
 801f126:	4642      	mov	r2, r8
 801f128:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801f12c:	464b      	mov	r3, r9
 801f12e:	4630      	mov	r0, r6
 801f130:	4639      	mov	r1, r7
 801f132:	f7e1 fa61 	bl	80005f8 <__aeabi_dmul>
 801f136:	3c01      	subs	r4, #1
 801f138:	4606      	mov	r6, r0
 801f13a:	460f      	mov	r7, r1
 801f13c:	e713      	b.n	801ef66 <__kernel_rem_pio2+0x2c6>
 801f13e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801f142:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801f146:	f7e1 fa57 	bl	80005f8 <__aeabi_dmul>
 801f14a:	4602      	mov	r2, r0
 801f14c:	460b      	mov	r3, r1
 801f14e:	4648      	mov	r0, r9
 801f150:	4651      	mov	r1, sl
 801f152:	f7e1 f89b 	bl	800028c <__adddf3>
 801f156:	3701      	adds	r7, #1
 801f158:	4681      	mov	r9, r0
 801f15a:	468a      	mov	sl, r1
 801f15c:	9b00      	ldr	r3, [sp, #0]
 801f15e:	429f      	cmp	r7, r3
 801f160:	dc02      	bgt.n	801f168 <__kernel_rem_pio2+0x4c8>
 801f162:	9b06      	ldr	r3, [sp, #24]
 801f164:	429f      	cmp	r7, r3
 801f166:	ddea      	ble.n	801f13e <__kernel_rem_pio2+0x49e>
 801f168:	9a06      	ldr	r2, [sp, #24]
 801f16a:	ab48      	add	r3, sp, #288	; 0x120
 801f16c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801f170:	e9c6 9a00 	strd	r9, sl, [r6]
 801f174:	3c01      	subs	r4, #1
 801f176:	e6fa      	b.n	801ef6e <__kernel_rem_pio2+0x2ce>
 801f178:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801f17a:	2b02      	cmp	r3, #2
 801f17c:	dc0b      	bgt.n	801f196 <__kernel_rem_pio2+0x4f6>
 801f17e:	2b00      	cmp	r3, #0
 801f180:	dc39      	bgt.n	801f1f6 <__kernel_rem_pio2+0x556>
 801f182:	d05d      	beq.n	801f240 <__kernel_rem_pio2+0x5a0>
 801f184:	9b02      	ldr	r3, [sp, #8]
 801f186:	f003 0007 	and.w	r0, r3, #7
 801f18a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801f18e:	ecbd 8b02 	vpop	{d8}
 801f192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f196:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801f198:	2b03      	cmp	r3, #3
 801f19a:	d1f3      	bne.n	801f184 <__kernel_rem_pio2+0x4e4>
 801f19c:	9b05      	ldr	r3, [sp, #20]
 801f19e:	9500      	str	r5, [sp, #0]
 801f1a0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801f1a4:	eb0d 0403 	add.w	r4, sp, r3
 801f1a8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801f1ac:	46a2      	mov	sl, r4
 801f1ae:	9b00      	ldr	r3, [sp, #0]
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	f1aa 0a08 	sub.w	sl, sl, #8
 801f1b6:	dc69      	bgt.n	801f28c <__kernel_rem_pio2+0x5ec>
 801f1b8:	46aa      	mov	sl, r5
 801f1ba:	f1ba 0f01 	cmp.w	sl, #1
 801f1be:	f1a4 0408 	sub.w	r4, r4, #8
 801f1c2:	f300 8083 	bgt.w	801f2cc <__kernel_rem_pio2+0x62c>
 801f1c6:	9c05      	ldr	r4, [sp, #20]
 801f1c8:	ab48      	add	r3, sp, #288	; 0x120
 801f1ca:	441c      	add	r4, r3
 801f1cc:	2000      	movs	r0, #0
 801f1ce:	2100      	movs	r1, #0
 801f1d0:	2d01      	cmp	r5, #1
 801f1d2:	f300 809a 	bgt.w	801f30a <__kernel_rem_pio2+0x66a>
 801f1d6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801f1da:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801f1de:	f1bb 0f00 	cmp.w	fp, #0
 801f1e2:	f040 8098 	bne.w	801f316 <__kernel_rem_pio2+0x676>
 801f1e6:	9b04      	ldr	r3, [sp, #16]
 801f1e8:	e9c3 7800 	strd	r7, r8, [r3]
 801f1ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801f1f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f1f4:	e7c6      	b.n	801f184 <__kernel_rem_pio2+0x4e4>
 801f1f6:	9e05      	ldr	r6, [sp, #20]
 801f1f8:	ab48      	add	r3, sp, #288	; 0x120
 801f1fa:	441e      	add	r6, r3
 801f1fc:	462c      	mov	r4, r5
 801f1fe:	2000      	movs	r0, #0
 801f200:	2100      	movs	r1, #0
 801f202:	2c00      	cmp	r4, #0
 801f204:	da33      	bge.n	801f26e <__kernel_rem_pio2+0x5ce>
 801f206:	f1bb 0f00 	cmp.w	fp, #0
 801f20a:	d036      	beq.n	801f27a <__kernel_rem_pio2+0x5da>
 801f20c:	4602      	mov	r2, r0
 801f20e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f212:	9c04      	ldr	r4, [sp, #16]
 801f214:	e9c4 2300 	strd	r2, r3, [r4]
 801f218:	4602      	mov	r2, r0
 801f21a:	460b      	mov	r3, r1
 801f21c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801f220:	f7e1 f832 	bl	8000288 <__aeabi_dsub>
 801f224:	ae4a      	add	r6, sp, #296	; 0x128
 801f226:	2401      	movs	r4, #1
 801f228:	42a5      	cmp	r5, r4
 801f22a:	da29      	bge.n	801f280 <__kernel_rem_pio2+0x5e0>
 801f22c:	f1bb 0f00 	cmp.w	fp, #0
 801f230:	d002      	beq.n	801f238 <__kernel_rem_pio2+0x598>
 801f232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f236:	4619      	mov	r1, r3
 801f238:	9b04      	ldr	r3, [sp, #16]
 801f23a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f23e:	e7a1      	b.n	801f184 <__kernel_rem_pio2+0x4e4>
 801f240:	9c05      	ldr	r4, [sp, #20]
 801f242:	ab48      	add	r3, sp, #288	; 0x120
 801f244:	441c      	add	r4, r3
 801f246:	2000      	movs	r0, #0
 801f248:	2100      	movs	r1, #0
 801f24a:	2d00      	cmp	r5, #0
 801f24c:	da09      	bge.n	801f262 <__kernel_rem_pio2+0x5c2>
 801f24e:	f1bb 0f00 	cmp.w	fp, #0
 801f252:	d002      	beq.n	801f25a <__kernel_rem_pio2+0x5ba>
 801f254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f258:	4619      	mov	r1, r3
 801f25a:	9b04      	ldr	r3, [sp, #16]
 801f25c:	e9c3 0100 	strd	r0, r1, [r3]
 801f260:	e790      	b.n	801f184 <__kernel_rem_pio2+0x4e4>
 801f262:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f266:	f7e1 f811 	bl	800028c <__adddf3>
 801f26a:	3d01      	subs	r5, #1
 801f26c:	e7ed      	b.n	801f24a <__kernel_rem_pio2+0x5aa>
 801f26e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801f272:	f7e1 f80b 	bl	800028c <__adddf3>
 801f276:	3c01      	subs	r4, #1
 801f278:	e7c3      	b.n	801f202 <__kernel_rem_pio2+0x562>
 801f27a:	4602      	mov	r2, r0
 801f27c:	460b      	mov	r3, r1
 801f27e:	e7c8      	b.n	801f212 <__kernel_rem_pio2+0x572>
 801f280:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801f284:	f7e1 f802 	bl	800028c <__adddf3>
 801f288:	3401      	adds	r4, #1
 801f28a:	e7cd      	b.n	801f228 <__kernel_rem_pio2+0x588>
 801f28c:	e9da 8900 	ldrd	r8, r9, [sl]
 801f290:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801f294:	9b00      	ldr	r3, [sp, #0]
 801f296:	3b01      	subs	r3, #1
 801f298:	9300      	str	r3, [sp, #0]
 801f29a:	4632      	mov	r2, r6
 801f29c:	463b      	mov	r3, r7
 801f29e:	4640      	mov	r0, r8
 801f2a0:	4649      	mov	r1, r9
 801f2a2:	f7e0 fff3 	bl	800028c <__adddf3>
 801f2a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f2aa:	4602      	mov	r2, r0
 801f2ac:	460b      	mov	r3, r1
 801f2ae:	4640      	mov	r0, r8
 801f2b0:	4649      	mov	r1, r9
 801f2b2:	f7e0 ffe9 	bl	8000288 <__aeabi_dsub>
 801f2b6:	4632      	mov	r2, r6
 801f2b8:	463b      	mov	r3, r7
 801f2ba:	f7e0 ffe7 	bl	800028c <__adddf3>
 801f2be:	ed9d 7b06 	vldr	d7, [sp, #24]
 801f2c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801f2c6:	ed8a 7b00 	vstr	d7, [sl]
 801f2ca:	e770      	b.n	801f1ae <__kernel_rem_pio2+0x50e>
 801f2cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 801f2d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801f2d4:	4640      	mov	r0, r8
 801f2d6:	4632      	mov	r2, r6
 801f2d8:	463b      	mov	r3, r7
 801f2da:	4649      	mov	r1, r9
 801f2dc:	f7e0 ffd6 	bl	800028c <__adddf3>
 801f2e0:	e9cd 0100 	strd	r0, r1, [sp]
 801f2e4:	4602      	mov	r2, r0
 801f2e6:	460b      	mov	r3, r1
 801f2e8:	4640      	mov	r0, r8
 801f2ea:	4649      	mov	r1, r9
 801f2ec:	f7e0 ffcc 	bl	8000288 <__aeabi_dsub>
 801f2f0:	4632      	mov	r2, r6
 801f2f2:	463b      	mov	r3, r7
 801f2f4:	f7e0 ffca 	bl	800028c <__adddf3>
 801f2f8:	ed9d 7b00 	vldr	d7, [sp]
 801f2fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f300:	ed84 7b00 	vstr	d7, [r4]
 801f304:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f308:	e757      	b.n	801f1ba <__kernel_rem_pio2+0x51a>
 801f30a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f30e:	f7e0 ffbd 	bl	800028c <__adddf3>
 801f312:	3d01      	subs	r5, #1
 801f314:	e75c      	b.n	801f1d0 <__kernel_rem_pio2+0x530>
 801f316:	9b04      	ldr	r3, [sp, #16]
 801f318:	9a04      	ldr	r2, [sp, #16]
 801f31a:	601f      	str	r7, [r3, #0]
 801f31c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801f320:	605c      	str	r4, [r3, #4]
 801f322:	609d      	str	r5, [r3, #8]
 801f324:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801f328:	60d3      	str	r3, [r2, #12]
 801f32a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f32e:	6110      	str	r0, [r2, #16]
 801f330:	6153      	str	r3, [r2, #20]
 801f332:	e727      	b.n	801f184 <__kernel_rem_pio2+0x4e4>
 801f334:	41700000 	.word	0x41700000
 801f338:	3e700000 	.word	0x3e700000
 801f33c:	00000000 	.word	0x00000000

0801f340 <scalbn>:
 801f340:	b570      	push	{r4, r5, r6, lr}
 801f342:	ec55 4b10 	vmov	r4, r5, d0
 801f346:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801f34a:	4606      	mov	r6, r0
 801f34c:	462b      	mov	r3, r5
 801f34e:	b999      	cbnz	r1, 801f378 <scalbn+0x38>
 801f350:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f354:	4323      	orrs	r3, r4
 801f356:	d03f      	beq.n	801f3d8 <scalbn+0x98>
 801f358:	4b35      	ldr	r3, [pc, #212]	; (801f430 <scalbn+0xf0>)
 801f35a:	4629      	mov	r1, r5
 801f35c:	ee10 0a10 	vmov	r0, s0
 801f360:	2200      	movs	r2, #0
 801f362:	f7e1 f949 	bl	80005f8 <__aeabi_dmul>
 801f366:	4b33      	ldr	r3, [pc, #204]	; (801f434 <scalbn+0xf4>)
 801f368:	429e      	cmp	r6, r3
 801f36a:	4604      	mov	r4, r0
 801f36c:	460d      	mov	r5, r1
 801f36e:	da10      	bge.n	801f392 <scalbn+0x52>
 801f370:	a327      	add	r3, pc, #156	; (adr r3, 801f410 <scalbn+0xd0>)
 801f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f376:	e01f      	b.n	801f3b8 <scalbn+0x78>
 801f378:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801f37c:	4291      	cmp	r1, r2
 801f37e:	d10c      	bne.n	801f39a <scalbn+0x5a>
 801f380:	ee10 2a10 	vmov	r2, s0
 801f384:	4620      	mov	r0, r4
 801f386:	4629      	mov	r1, r5
 801f388:	f7e0 ff80 	bl	800028c <__adddf3>
 801f38c:	4604      	mov	r4, r0
 801f38e:	460d      	mov	r5, r1
 801f390:	e022      	b.n	801f3d8 <scalbn+0x98>
 801f392:	460b      	mov	r3, r1
 801f394:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801f398:	3936      	subs	r1, #54	; 0x36
 801f39a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801f39e:	4296      	cmp	r6, r2
 801f3a0:	dd0d      	ble.n	801f3be <scalbn+0x7e>
 801f3a2:	2d00      	cmp	r5, #0
 801f3a4:	a11c      	add	r1, pc, #112	; (adr r1, 801f418 <scalbn+0xd8>)
 801f3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f3aa:	da02      	bge.n	801f3b2 <scalbn+0x72>
 801f3ac:	a11c      	add	r1, pc, #112	; (adr r1, 801f420 <scalbn+0xe0>)
 801f3ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f3b2:	a319      	add	r3, pc, #100	; (adr r3, 801f418 <scalbn+0xd8>)
 801f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3b8:	f7e1 f91e 	bl	80005f8 <__aeabi_dmul>
 801f3bc:	e7e6      	b.n	801f38c <scalbn+0x4c>
 801f3be:	1872      	adds	r2, r6, r1
 801f3c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f3c4:	428a      	cmp	r2, r1
 801f3c6:	dcec      	bgt.n	801f3a2 <scalbn+0x62>
 801f3c8:	2a00      	cmp	r2, #0
 801f3ca:	dd08      	ble.n	801f3de <scalbn+0x9e>
 801f3cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f3d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f3d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f3d8:	ec45 4b10 	vmov	d0, r4, r5
 801f3dc:	bd70      	pop	{r4, r5, r6, pc}
 801f3de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f3e2:	da08      	bge.n	801f3f6 <scalbn+0xb6>
 801f3e4:	2d00      	cmp	r5, #0
 801f3e6:	a10a      	add	r1, pc, #40	; (adr r1, 801f410 <scalbn+0xd0>)
 801f3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f3ec:	dac0      	bge.n	801f370 <scalbn+0x30>
 801f3ee:	a10e      	add	r1, pc, #56	; (adr r1, 801f428 <scalbn+0xe8>)
 801f3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f3f4:	e7bc      	b.n	801f370 <scalbn+0x30>
 801f3f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f3fa:	3236      	adds	r2, #54	; 0x36
 801f3fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f400:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f404:	4620      	mov	r0, r4
 801f406:	4b0c      	ldr	r3, [pc, #48]	; (801f438 <scalbn+0xf8>)
 801f408:	2200      	movs	r2, #0
 801f40a:	e7d5      	b.n	801f3b8 <scalbn+0x78>
 801f40c:	f3af 8000 	nop.w
 801f410:	c2f8f359 	.word	0xc2f8f359
 801f414:	01a56e1f 	.word	0x01a56e1f
 801f418:	8800759c 	.word	0x8800759c
 801f41c:	7e37e43c 	.word	0x7e37e43c
 801f420:	8800759c 	.word	0x8800759c
 801f424:	fe37e43c 	.word	0xfe37e43c
 801f428:	c2f8f359 	.word	0xc2f8f359
 801f42c:	81a56e1f 	.word	0x81a56e1f
 801f430:	43500000 	.word	0x43500000
 801f434:	ffff3cb0 	.word	0xffff3cb0
 801f438:	3c900000 	.word	0x3c900000
 801f43c:	00000000 	.word	0x00000000

0801f440 <floor>:
 801f440:	ec51 0b10 	vmov	r0, r1, d0
 801f444:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801f448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f44c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801f450:	2e13      	cmp	r6, #19
 801f452:	ee10 5a10 	vmov	r5, s0
 801f456:	ee10 8a10 	vmov	r8, s0
 801f45a:	460c      	mov	r4, r1
 801f45c:	dc31      	bgt.n	801f4c2 <floor+0x82>
 801f45e:	2e00      	cmp	r6, #0
 801f460:	da14      	bge.n	801f48c <floor+0x4c>
 801f462:	a333      	add	r3, pc, #204	; (adr r3, 801f530 <floor+0xf0>)
 801f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f468:	f7e0 ff10 	bl	800028c <__adddf3>
 801f46c:	2200      	movs	r2, #0
 801f46e:	2300      	movs	r3, #0
 801f470:	f7e1 fb52 	bl	8000b18 <__aeabi_dcmpgt>
 801f474:	b138      	cbz	r0, 801f486 <floor+0x46>
 801f476:	2c00      	cmp	r4, #0
 801f478:	da53      	bge.n	801f522 <floor+0xe2>
 801f47a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801f47e:	4325      	orrs	r5, r4
 801f480:	d052      	beq.n	801f528 <floor+0xe8>
 801f482:	4c2d      	ldr	r4, [pc, #180]	; (801f538 <floor+0xf8>)
 801f484:	2500      	movs	r5, #0
 801f486:	4621      	mov	r1, r4
 801f488:	4628      	mov	r0, r5
 801f48a:	e024      	b.n	801f4d6 <floor+0x96>
 801f48c:	4f2b      	ldr	r7, [pc, #172]	; (801f53c <floor+0xfc>)
 801f48e:	4137      	asrs	r7, r6
 801f490:	ea01 0307 	and.w	r3, r1, r7
 801f494:	4303      	orrs	r3, r0
 801f496:	d01e      	beq.n	801f4d6 <floor+0x96>
 801f498:	a325      	add	r3, pc, #148	; (adr r3, 801f530 <floor+0xf0>)
 801f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f49e:	f7e0 fef5 	bl	800028c <__adddf3>
 801f4a2:	2200      	movs	r2, #0
 801f4a4:	2300      	movs	r3, #0
 801f4a6:	f7e1 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 801f4aa:	2800      	cmp	r0, #0
 801f4ac:	d0eb      	beq.n	801f486 <floor+0x46>
 801f4ae:	2c00      	cmp	r4, #0
 801f4b0:	bfbe      	ittt	lt
 801f4b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801f4b6:	4133      	asrlt	r3, r6
 801f4b8:	18e4      	addlt	r4, r4, r3
 801f4ba:	ea24 0407 	bic.w	r4, r4, r7
 801f4be:	2500      	movs	r5, #0
 801f4c0:	e7e1      	b.n	801f486 <floor+0x46>
 801f4c2:	2e33      	cmp	r6, #51	; 0x33
 801f4c4:	dd0b      	ble.n	801f4de <floor+0x9e>
 801f4c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f4ca:	d104      	bne.n	801f4d6 <floor+0x96>
 801f4cc:	ee10 2a10 	vmov	r2, s0
 801f4d0:	460b      	mov	r3, r1
 801f4d2:	f7e0 fedb 	bl	800028c <__adddf3>
 801f4d6:	ec41 0b10 	vmov	d0, r0, r1
 801f4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f4de:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801f4e2:	f04f 37ff 	mov.w	r7, #4294967295
 801f4e6:	40df      	lsrs	r7, r3
 801f4e8:	4238      	tst	r0, r7
 801f4ea:	d0f4      	beq.n	801f4d6 <floor+0x96>
 801f4ec:	a310      	add	r3, pc, #64	; (adr r3, 801f530 <floor+0xf0>)
 801f4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4f2:	f7e0 fecb 	bl	800028c <__adddf3>
 801f4f6:	2200      	movs	r2, #0
 801f4f8:	2300      	movs	r3, #0
 801f4fa:	f7e1 fb0d 	bl	8000b18 <__aeabi_dcmpgt>
 801f4fe:	2800      	cmp	r0, #0
 801f500:	d0c1      	beq.n	801f486 <floor+0x46>
 801f502:	2c00      	cmp	r4, #0
 801f504:	da0a      	bge.n	801f51c <floor+0xdc>
 801f506:	2e14      	cmp	r6, #20
 801f508:	d101      	bne.n	801f50e <floor+0xce>
 801f50a:	3401      	adds	r4, #1
 801f50c:	e006      	b.n	801f51c <floor+0xdc>
 801f50e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801f512:	2301      	movs	r3, #1
 801f514:	40b3      	lsls	r3, r6
 801f516:	441d      	add	r5, r3
 801f518:	45a8      	cmp	r8, r5
 801f51a:	d8f6      	bhi.n	801f50a <floor+0xca>
 801f51c:	ea25 0507 	bic.w	r5, r5, r7
 801f520:	e7b1      	b.n	801f486 <floor+0x46>
 801f522:	2500      	movs	r5, #0
 801f524:	462c      	mov	r4, r5
 801f526:	e7ae      	b.n	801f486 <floor+0x46>
 801f528:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801f52c:	e7ab      	b.n	801f486 <floor+0x46>
 801f52e:	bf00      	nop
 801f530:	8800759c 	.word	0x8800759c
 801f534:	7e37e43c 	.word	0x7e37e43c
 801f538:	bff00000 	.word	0xbff00000
 801f53c:	000fffff 	.word	0x000fffff

0801f540 <_init>:
 801f540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f542:	bf00      	nop
 801f544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f546:	bc08      	pop	{r3}
 801f548:	469e      	mov	lr, r3
 801f54a:	4770      	bx	lr

0801f54c <_fini>:
 801f54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f54e:	bf00      	nop
 801f550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f552:	bc08      	pop	{r3}
 801f554:	469e      	mov	lr, r3
 801f556:	4770      	bx	lr
