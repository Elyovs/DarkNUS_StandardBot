
standard_bot_v5clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f454  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e20  0801f5e8  0801f5e8  0002f5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020408  08020408  000402e0  2**0
                  CONTENTS
  4 .ARM          00000008  08020408  08020408  00030408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020410  08020410  000402e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020410  08020410  00030410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020414  08020414  00030414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08020418  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e27c  200002e0  080206f8  000402e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000e55c  080206f8  0004e55c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b866  00000000  00000000  00040310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000097a6  00000000  00000000  0007bb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b38  00000000  00000000  00085320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002708  00000000  00000000  00087e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000350d2  00000000  00000000  0008a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046334  00000000  00000000  000bf632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3c89  00000000  00000000  00105966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f95ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c890  00000000  00000000  001f9640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00205ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00205f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f5cc 	.word	0x0801f5cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	0801f5cc 	.word	0x0801f5cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <get_CRC8_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      ucCRC8:��ʼCRC8
  * @retval         �������CRC8
  */
uint8_t get_CRC8_check_sum(unsigned char *pch_message,unsigned int dw_length,unsigned char ucCRC8)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	4613      	mov	r3, r2
 8001004:	71fb      	strb	r3, [r7, #7]
    unsigned char uc_index;
    while (dw_length--)
 8001006:	e00a      	b.n	800101e <get_CRC8_check_sum+0x26>
    {
        uc_index = ucCRC8^(*pch_message++);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60fa      	str	r2, [r7, #12]
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4053      	eors	r3, r2
 8001014:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <get_CRC8_check_sum+0x40>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	71fb      	strb	r3, [r7, #7]
    while (dw_length--)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	60ba      	str	r2, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ef      	bne.n	8001008 <get_CRC8_check_sum+0x10>
    }
    return(ucCRC8);
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	0801f708 	.word	0x0801f708

0800103c <verify_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
    unsigned char ucExpected = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <verify_CRC8_check_sum+0x1a>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d801      	bhi.n	800105a <verify_CRC8_check_sum+0x1e>
    {
        return 0;
 8001056:	2300      	movs	r3, #0
 8001058:	e013      	b.n	8001082 <verify_CRC8_check_sum+0x46>
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3b01      	subs	r3, #1
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffc8 	bl	8000ff8 <get_CRC8_check_sum>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
    return ( ucExpected == pch_message[dw_length - 1] );
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	429a      	cmp	r2, r3
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <get_CRC16_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      wCRC:��ʼCRC16
  * @retval         �������CRC16
  */
uint16_t get_CRC16_check_sum(uint8_t *pch_message,uint32_t dw_length,uint16_t wCRC)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d113      	bne.n	80010c8 <get_CRC16_check_sum+0x3c>
    {
        return 0xFFFF;
 80010a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a4:	e016      	b.n	80010d4 <get_CRC16_check_sum+0x48>
    }
    while(dw_length--)
    {
        chData = *pch_message++;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	60fa      	str	r2, [r7, #12]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	88f9      	ldrh	r1, [r7, #6]
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	404b      	eors	r3, r1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <get_CRC16_check_sum+0x54>)
 80010c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010c4:	4053      	eors	r3, r2
 80010c6:	80fb      	strh	r3, [r7, #6]
    while(dw_length--)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1e5a      	subs	r2, r3, #1
 80010cc:	60ba      	str	r2, [r7, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1e9      	bne.n	80010a6 <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 80010d2:	88fb      	ldrh	r3, [r7, #6]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	0801f808 	.word	0x0801f808

080010e4 <verify_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <verify_CRC16_check_sum+0x1a>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d801      	bhi.n	8001102 <verify_CRC16_check_sum+0x1e>
    {
        return 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	e020      	b.n	8001144 <verify_CRC16_check_sum+0x60>
    }
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	3b02      	subs	r3, #2
 8001106:	4a11      	ldr	r2, [pc, #68]	; (800114c <verify_CRC16_check_sum+0x68>)
 8001108:	8812      	ldrh	r2, [r2, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffbd 	bl	800108c <get_CRC16_check_sum>
 8001112:	4603      	mov	r3, r0
 8001114:	81fb      	strh	r3, [r7, #14]
    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	3a02      	subs	r2, #2
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	440a      	add	r2, r1
 8001122:	7812      	ldrb	r2, [r2, #0]
 8001124:	4293      	cmp	r3, r2
 8001126:	d10c      	bne.n	8001142 <verify_CRC16_check_sum+0x5e>
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	3a01      	subs	r2, #1
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	440a      	add	r2, r1
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <verify_CRC16_check_sum+0x5e>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <verify_CRC16_check_sum+0x60>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000

08001150 <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d104      	bne.n	800116a <buzzer+0x1a>
	{
		htim4.Instance->CCR3 = 0;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <buzzer+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
		htim4.Instance->CCR3 = 500;
	}
}
 8001168:	e00c      	b.n	8001184 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001170:	fb92 f2f3 	sdiv	r2, r2, r3
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <buzzer+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
		htim4.Instance->CCR3 = 500;
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <buzzer+0x40>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20001518 	.word	0x20001518

08001194 <buzzer_init>:


void buzzer_init()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001198:	2108      	movs	r1, #8
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <buzzer_init+0x18>)
 800119c:	f00e fc4e 	bl	800fa3c <HAL_TIM_PWM_Start>
	  htim4.Instance->CCR3 = 0;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <buzzer_init+0x18>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2200      	movs	r2, #0
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20001518 	.word	0x20001518

080011b0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f003 fd15 	bl	8004be8 <can_ISR>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f003 fd0a 	bl	8004be8 <can_ISR>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	2100      	movs	r1, #0
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f008 fee1 	bl	8009fb6 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	2101      	movs	r1, #1
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f008 fed0 	bl	8009fb6 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2228      	movs	r2, #40	; 0x28
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f017 ff3c 	bl	80190b2 <memset>
    can_filter_st.FilterActivation = ENABLE;
 800123a:	2301      	movs	r3, #1
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001242:	2301      	movs	r3, #1
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	0c1b      	lsrs	r3, r3, #16
 800124a:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	b29b      	uxth	r3, r3
 8001250:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	0c1b      	lsrs	r3, r3, #16
 8001256:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	b29b      	uxth	r3, r3
 800125c:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <can_start+0xa4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d111      	bne.n	800128c <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f008 fc9e 	bl	8009bb8 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f008 fd7b 	bl	8009d78 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001282:	2102      	movs	r1, #2
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f008 ffa8 	bl	800a1da <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 800128a:	e017      	b.n	80012bc <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <can_start+0xa8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d112      	bne.n	80012bc <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 8001296:	2301      	movs	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 800129a:	230e      	movs	r3, #14
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
		can_filter_st.FilterBank = 14;
 800129e:	230e      	movs	r3, #14
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f008 fc85 	bl	8009bb8 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f008 fd62 	bl	8009d78 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 80012b4:	2110      	movs	r1, #16
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f008 ff8f 	bl	800a1da <HAL_CAN_ActivateNotification>
}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40006400 	.word	0x40006400
 80012c8:	40006800 	.word	0x40006800

080012cc <dbus_remote_ISR>:

uint8_t remote_raw_data[REMOTE_DATA_SIZE] = {0};
remote_cmd_t remote_cmd = { 0 };


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 80012d4:	4b71      	ldr	r3, [pc, #452]	; (800149c <dbus_remote_ISR+0x1d0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b70      	ldr	r3, [pc, #448]	; (800149c <dbus_remote_ISR+0x1d0>)
 80012dc:	785b      	ldrb	r3, [r3, #1]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	4b6c      	ldr	r3, [pc, #432]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 80012ee:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 80012f0:	4b6b      	ldr	r3, [pc, #428]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001302:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8001304:	4b65      	ldr	r3, [pc, #404]	; (800149c <dbus_remote_ISR+0x1d0>)
 8001306:	785b      	ldrb	r3, [r3, #1]
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b63      	ldr	r3, [pc, #396]	; (800149c <dbus_remote_ISR+0x1d0>)
 8001310:	789b      	ldrb	r3, [r3, #2]
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800131e:	b21a      	sxth	r2, r3
 8001320:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001322:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 8001324:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001326:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800132a:	b29b      	uxth	r3, r3
 800132c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001330:	b29b      	uxth	r3, r3
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b5a      	ldr	r3, [pc, #360]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001336:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 8001338:	4b58      	ldr	r3, [pc, #352]	; (800149c <dbus_remote_ISR+0x1d0>)
 800133a:	789b      	ldrb	r3, [r3, #2]
 800133c:	099b      	lsrs	r3, r3, #6
 800133e:	b2db      	uxtb	r3, r3
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b56      	ldr	r3, [pc, #344]	; (800149c <dbus_remote_ISR+0x1d0>)
 8001344:	78db      	ldrb	r3, [r3, #3]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 800134e:	4b53      	ldr	r3, [pc, #332]	; (800149c <dbus_remote_ISR+0x1d0>)
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	029b      	lsls	r3, r3, #10
 8001354:	b21b      	sxth	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b21b      	sxth	r3, r3
 800135a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135e:	b21a      	sxth	r2, r3
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 8001360:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001362:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 8001364:	4b4e      	ldr	r3, [pc, #312]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001366:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800136a:	b29b      	uxth	r3, r3
 800136c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001370:	b29b      	uxth	r3, r3
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001376:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <dbus_remote_ISR+0x1d0>)
 800137a:	791b      	ldrb	r3, [r3, #4]
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	b21a      	sxth	r2, r3
 8001382:	4b46      	ldr	r3, [pc, #280]	; (800149c <dbus_remote_ISR+0x1d0>)
 8001384:	795b      	ldrb	r3, [r3, #5]
 8001386:	01db      	lsls	r3, r3, #7
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001392:	b21a      	sxth	r2, r3
 8001394:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001396:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 8001398:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 800139a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 80013aa:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <dbus_remote_ISR+0x1d0>)
 80013ae:	795b      	ldrb	r3, [r3, #5]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	109b      	asrs	r3, r3, #2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	b25a      	sxtb	r2, r3
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 80013c0:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <dbus_remote_ISR+0x1d0>)
 80013c4:	795b      	ldrb	r3, [r3, #5]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	b25a      	sxtb	r2, r3
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 80013d4:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <dbus_remote_ISR+0x1d0>)
 80013d8:	799b      	ldrb	r3, [r3, #6]
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <dbus_remote_ISR+0x1d0>)
 80013de:	79db      	ldrb	r3, [r3, #7]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 80013ea:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <dbus_remote_ISR+0x1d0>)
 80013ee:	7a1b      	ldrb	r3, [r3, #8]
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <dbus_remote_ISR+0x1d0>)
 80013f4:	7a5b      	ldrb	r3, [r3, #9]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001400:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <dbus_remote_ISR+0x1d0>)
 8001404:	7a9b      	ldrb	r3, [r3, #10]
 8001406:	b21a      	sxth	r2, r3
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <dbus_remote_ISR+0x1d0>)
 800140a:	7adb      	ldrb	r3, [r3, #11]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001416:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <dbus_remote_ISR+0x1d0>)
 800141a:	7b1b      	ldrb	r3, [r3, #12]
 800141c:	b25a      	sxtb	r2, r3
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001420:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <dbus_remote_ISR+0x1d0>)
 8001424:	7b5b      	ldrb	r3, [r3, #13]
 8001426:	b25a      	sxtb	r2, r3
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 800142a:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <dbus_remote_ISR+0x1d0>)
 800142e:	7b9b      	ldrb	r3, [r3, #14]
 8001430:	b29a      	uxth	r2, r3
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001434:	835a      	strh	r2, [r3, #26]
	remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <dbus_remote_ISR+0x1d0>)
 8001438:	7c1b      	ldrb	r3, [r3, #16]
 800143a:	b21a      	sxth	r2, r3
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <dbus_remote_ISR+0x1d0>)
 800143e:	7c5b      	ldrb	r3, [r3, #17]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 800144a:	839a      	strh	r2, [r3, #28]
	remote_cmd.side_dial -= JOYSTICK_OFFSET;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 800144e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001452:	b29b      	uxth	r3, r3
 8001454:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001458:	b29b      	uxth	r3, r3
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 800145e:	839a      	strh	r2, [r3, #28]
	remote_cmd.last_time = HAL_GetTick();
 8001460:	f008 f81c 	bl	800949c <HAL_GetTick>
 8001464:	4603      	mov	r3, r0
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <dbus_remote_ISR+0x1d4>)
 8001468:	6213      	str	r3, [r2, #32]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <dbus_remote_ISR+0x1d8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f107 020c 	add.w	r2, r7, #12
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f015 ff15 	bl	80172a8 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <dbus_remote_ISR+0x1c8>
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <dbus_remote_ISR+0x1dc>)
 8001486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	f3bf 8f4f 	dsb	sy
 8001490:	f3bf 8f6f 	isb	sy
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200002fc 	.word	0x200002fc
 80014a0:	20000310 	.word	0x20000310
 80014a4:	20000448 	.word	0x20000448
 80014a8:	e000ed04 	.word	0xe000ed04

080014ac <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
	uint8_t *pData = remote_raw_data;
 80014b2:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <dbus_remote_start+0x13c>)
 80014b4:	60fb      	str	r3, [r7, #12]
	UART_HandleTypeDef *huart = &DBUS_UART;
 80014b6:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <dbus_remote_start+0x140>)
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 80014ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b20      	cmp	r3, #32
 80014c4:	f040 808b 	bne.w	80015de <dbus_remote_start+0x132>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <dbus_remote_start+0x26>
			return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e086      	b.n	80015e0 <dbus_remote_start+0x134>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <dbus_remote_start+0x34>
 80014dc:	2302      	movs	r3, #2
 80014de:	e07f      	b.n	80015e0 <dbus_remote_start+0x134>
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	2201      	movs	r2, #1
 80014ec:	631a      	str	r2, [r3, #48]	; 0x30
		huart->pRxBuffPtr = pData;
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 80014f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f6:	2212      	movs	r2, #18
 80014f8:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	2200      	movs	r2, #0
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	2222      	movs	r2, #34	; 0x22
 8001504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150c:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <dbus_remote_start+0x144>)
 800150e:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	2200      	movs	r2, #0
 8001516:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3304      	adds	r3, #4
 8001528:	4619      	mov	r1, r3
 800152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2312      	movs	r3, #18
 8001530:	f009 fa56 	bl	800a9e0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001560:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
		in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	695a      	ldr	r2, [r3, #20]
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001580:	615a      	str	r2, [r3, #20]

		if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	2b01      	cmp	r3, #1
 8001588:	d125      	bne.n	80015d6 <dbus_remote_start+0x12a>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	330c      	adds	r3, #12
 80015a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	e853 3f00 	ldrex	r3, [r3]
 80015ae:	613b      	str	r3, [r7, #16]
   return(result);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
 80015b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	330c      	adds	r3, #12
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	623a      	str	r2, [r7, #32]
 80015c2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015c4:	69f9      	ldr	r1, [r7, #28]
 80015c6:	6a3a      	ldr	r2, [r7, #32]
 80015c8:	e841 2300 	strex	r3, r2, [r1]
 80015cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e5      	bne.n	80015a0 <dbus_remote_start+0xf4>
 80015d4:	e001      	b.n	80015da <dbus_remote_start+0x12e>
		{
			/* In case of errors already pending when reception is started,
			   Interrupts may have already been raised and lead to reception abortion.
			   (Overrun error for instance).
			   In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
			return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e002      	b.n	80015e0 <dbus_remote_start+0x134>
		}
		return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <dbus_remote_start+0x134>
	} else {
		return HAL_BUSY;
 80015de:	2302      	movs	r3, #2
	}
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3730      	adds	r7, #48	; 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002fc 	.word	0x200002fc
 80015ec:	20001634 	.word	0x20001634
 80015f0:	080012cd 	.word	0x080012cd

080015f4 <laser_on>:
 */
#include "board_lib.h"
#include "bsp_gpio.h"

void laser_on()
{ //set to reset for open day
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fe:	4802      	ldr	r0, [pc, #8]	; (8001608 <laser_on+0x14>)
 8001600:	f009 feea 	bl	800b3d8 <HAL_GPIO_WritePin>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40020800 	.word	0x40020800

0800160c <laser_off>:

void laser_off()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001616:	4802      	ldr	r0, [pc, #8]	; (8001620 <laser_off+0x14>)
 8001618:	f009 fede 	bl	800b3d8 <HAL_GPIO_WritePin>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020800 	.word	0x40020800

08001624 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001628:	f3bf 8f4f 	dsb	sy
}
 800162c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <__NVIC_SystemReset+0x24>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001636:	4904      	ldr	r1, [pc, #16]	; (8001648 <__NVIC_SystemReset+0x24>)
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <__NVIC_SystemReset+0x28>)
 800163a:	4313      	orrs	r3, r2
 800163c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800163e:	f3bf 8f4f 	dsb	sy
}
 8001642:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <__NVIC_SystemReset+0x20>
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	05fa0004 	.word	0x05fa0004

08001650 <inv_sqrt>:
 * @brief  fast inverse square-root, to calculate 1/Sqrt(x)
 * @param  x: the number need to be calculated
 * @retval 1/Sqrt(x)
 * @usage  call in imu_ahrs_update() function
 */
float inv_sqrt(float x) {
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800165a:	edd7 7a01 	vldr	s15, [r7, #4]
 800165e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]

	i = 0x5f3759df - (i >> 1);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	105a      	asrs	r2, r3, #1
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <inv_sqrt+0x74>)
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001688:	ed97 7a04 	vldr	s14, [r7, #16]
 800168c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001694:	edd7 7a04 	vldr	s15, [r7, #16]
 8001698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80016a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ac:	edc7 7a04 	vstr	s15, [r7, #16]

	return y;
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	ee07 3a90 	vmov	s15, r3
}
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	5f3759df 	.word	0x5f3759df

080016c8 <gyro_write_byte>:

void gyro_write_byte(uint8_t const reg, uint8_t const data) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	4603      	mov	r3, r0
 80016d0:	460a      	mov	r2, r1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	4613      	mov	r3, r2
 80016d6:	71bb      	strb	r3, [r7, #6]
	BMI_GYRO_NSS_LOW;
 80016d8:	2200      	movs	r2, #0
 80016da:	2101      	movs	r1, #1
 80016dc:	4811      	ldr	r0, [pc, #68]	; (8001724 <gyro_write_byte+0x5c>)
 80016de:	f009 fe7b 	bl	800b3d8 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg;
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80016e6:	f107 020e 	add.w	r2, r7, #14
 80016ea:	f107 010f 	add.w	r1, r7, #15
 80016ee:	2364      	movs	r3, #100	; 0x64
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2301      	movs	r3, #1
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <gyro_write_byte+0x60>)
 80016f6:	f00d fcff 	bl	800f0f8 <HAL_SPI_TransmitReceive>
	tx = data;
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80016fe:	f107 020e 	add.w	r2, r7, #14
 8001702:	f107 010f 	add.w	r1, r7, #15
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2301      	movs	r3, #1
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <gyro_write_byte+0x60>)
 800170e:	f00d fcf3 	bl	800f0f8 <HAL_SPI_TransmitReceive>
	BMI_GYRO_NSS_HIGH;
 8001712:	2201      	movs	r2, #1
 8001714:	2101      	movs	r1, #1
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <gyro_write_byte+0x5c>)
 8001718:	f009 fe5e 	bl	800b3d8 <HAL_GPIO_WritePin>
	return;
 800171c:	bf00      	nop
}
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40020400 	.word	0x40020400
 8001728:	20001328 	.word	0x20001328

0800172c <gyro_read_byte>:

uint8_t gyro_read_byte(uint8_t const reg) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af02      	add	r7, sp, #8
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	BMI_GYRO_NSS_LOW;
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <gyro_read_byte+0x54>)
 800173c:	f009 fe4c 	bl	800b3d8 <HAL_GPIO_WritePin>
	uint8_t rx, tx;
	tx = reg | 0x80;
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001746:	b2db      	uxtb	r3, r3
 8001748:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800174a:	f107 020f 	add.w	r2, r7, #15
 800174e:	f107 010e 	add.w	r1, r7, #14
 8001752:	2364      	movs	r3, #100	; 0x64
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2301      	movs	r3, #1
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <gyro_read_byte+0x58>)
 800175a:	f00d fccd 	bl	800f0f8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 800175e:	f107 010f 	add.w	r1, r7, #15
 8001762:	2364      	movs	r3, #100	; 0x64
 8001764:	2201      	movs	r2, #1
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <gyro_read_byte+0x58>)
 8001768:	f00d fbb5 	bl	800eed6 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 800176c:	2201      	movs	r2, #1
 800176e:	2101      	movs	r1, #1
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <gyro_read_byte+0x54>)
 8001772:	f009 fe31 	bl	800b3d8 <HAL_GPIO_WritePin>
	return rx;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40020400 	.word	0x40020400
 8001784:	20001328 	.word	0x20001328

08001788 <gyro_read_bytes>:

uint8_t gyro_read_bytes(uint8_t const reg, uint8_t *pData, uint8_t len) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af02      	add	r7, sp, #8
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	4613      	mov	r3, r2
 8001796:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_GYRO_NSS_LOW;
 8001798:	2200      	movs	r2, #0
 800179a:	2101      	movs	r1, #1
 800179c:	4811      	ldr	r0, [pc, #68]	; (80017e4 <gyro_read_bytes+0x5c>)
 800179e:	f009 fe1b 	bl	800b3d8 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80017ac:	f107 020e 	add.w	r2, r7, #14
 80017b0:	f107 010f 	add.w	r1, r7, #15
 80017b4:	2364      	movs	r3, #100	; 0x64
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2301      	movs	r3, #1
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <gyro_read_bytes+0x60>)
 80017bc:	f00d fc9c 	bl	800f0f8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <gyro_read_bytes+0x60>)
 80017ca:	f00d fb84 	bl	800eed6 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 80017ce:	2201      	movs	r2, #1
 80017d0:	2101      	movs	r1, #1
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <gyro_read_bytes+0x5c>)
 80017d4:	f009 fe00 	bl	800b3d8 <HAL_GPIO_WritePin>
	return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40020400 	.word	0x40020400
 80017e8:	20001328 	.word	0x20001328

080017ec <accel_write_byte>:
		return 1;
	}
	return 0;
}

void accel_write_byte(uint8_t const reg, uint8_t const data) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	4603      	mov	r3, r0
 80017f4:	460a      	mov	r2, r1
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 80017fc:	2200      	movs	r2, #0
 80017fe:	2110      	movs	r1, #16
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <accel_write_byte+0x5c>)
 8001802:	f009 fde9 	bl	800b3d8 <HAL_GPIO_WritePin>
	tx = reg;
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800180a:	f107 020e 	add.w	r2, r7, #14
 800180e:	f107 010f 	add.w	r1, r7, #15
 8001812:	2364      	movs	r3, #100	; 0x64
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <accel_write_byte+0x60>)
 800181a:	f00d fc6d 	bl	800f0f8 <HAL_SPI_TransmitReceive>
	tx = data;
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001822:	f107 020e 	add.w	r2, r7, #14
 8001826:	f107 010f 	add.w	r1, r7, #15
 800182a:	2364      	movs	r3, #100	; 0x64
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <accel_write_byte+0x60>)
 8001832:	f00d fc61 	bl	800f0f8 <HAL_SPI_TransmitReceive>
	BMI_ACCEL_NSS_HIGH;
 8001836:	2201      	movs	r2, #1
 8001838:	2110      	movs	r1, #16
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <accel_write_byte+0x5c>)
 800183c:	f009 fdcc 	bl	800b3d8 <HAL_GPIO_WritePin>
	return;
 8001840:	bf00      	nop
}
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40020000 	.word	0x40020000
 800184c:	20001328 	.word	0x20001328

08001850 <accel_read_byte>:

uint8_t accel_read_byte(uint8_t const reg) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af02      	add	r7, sp, #8
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 800185a:	2200      	movs	r2, #0
 800185c:	2110      	movs	r1, #16
 800185e:	4816      	ldr	r0, [pc, #88]	; (80018b8 <accel_read_byte+0x68>)
 8001860:	f009 fdba 	bl	800b3d8 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800186a:	b2db      	uxtb	r3, r3
 800186c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800186e:	f107 020e 	add.w	r2, r7, #14
 8001872:	f107 010f 	add.w	r1, r7, #15
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2301      	movs	r3, #1
 800187c:	480f      	ldr	r0, [pc, #60]	; (80018bc <accel_read_byte+0x6c>)
 800187e:	f00d fc3b 	bl	800f0f8 <HAL_SPI_TransmitReceive>
	tx = 0x55;
 8001882:	2355      	movs	r3, #85	; 0x55
 8001884:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001886:	f107 010e 	add.w	r1, r7, #14
 800188a:	2364      	movs	r3, #100	; 0x64
 800188c:	2201      	movs	r2, #1
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <accel_read_byte+0x6c>)
 8001890:	f00d fb21 	bl	800eed6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001894:	f107 010e 	add.w	r1, r7, #14
 8001898:	2364      	movs	r3, #100	; 0x64
 800189a:	2201      	movs	r2, #1
 800189c:	4807      	ldr	r0, [pc, #28]	; (80018bc <accel_read_byte+0x6c>)
 800189e:	f00d fb1a 	bl	800eed6 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 80018a2:	2201      	movs	r2, #1
 80018a4:	2110      	movs	r1, #16
 80018a6:	4804      	ldr	r0, [pc, #16]	; (80018b8 <accel_read_byte+0x68>)
 80018a8:	f009 fd96 	bl	800b3d8 <HAL_GPIO_WritePin>
	return rx;
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40020000 	.word	0x40020000
 80018bc:	20001328 	.word	0x20001328

080018c0 <accel_read_bytes>:

uint8_t accel_read_bytes(uint8_t reg, uint8_t pData[], uint8_t len) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	71bb      	strb	r3, [r7, #6]
	BMI_ACCEL_NSS_LOW;
 80018d0:	2200      	movs	r2, #0
 80018d2:	2110      	movs	r1, #16
 80018d4:	4814      	ldr	r0, [pc, #80]	; (8001928 <accel_read_bytes+0x68>)
 80018d6:	f009 fd7f 	bl	800b3d8 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg | 0x80;
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018e4:	f107 020e 	add.w	r2, r7, #14
 80018e8:	f107 010f 	add.w	r1, r7, #15
 80018ec:	2364      	movs	r3, #100	; 0x64
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2301      	movs	r3, #1
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <accel_read_bytes+0x6c>)
 80018f4:	f00d fc00 	bl	800f0f8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 80018f8:	f107 010e 	add.w	r1, r7, #14
 80018fc:	2364      	movs	r3, #100	; 0x64
 80018fe:	2201      	movs	r2, #1
 8001900:	480a      	ldr	r0, [pc, #40]	; (800192c <accel_read_bytes+0x6c>)
 8001902:	f00d fae8 	bl	800eed6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 8001906:	79bb      	ldrb	r3, [r7, #6]
 8001908:	b29a      	uxth	r2, r3
 800190a:	2364      	movs	r3, #100	; 0x64
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	4807      	ldr	r0, [pc, #28]	; (800192c <accel_read_bytes+0x6c>)
 8001910:	f00d fae1 	bl	800eed6 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 8001914:	2201      	movs	r2, #1
 8001916:	2110      	movs	r1, #16
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <accel_read_bytes+0x68>)
 800191a:	f009 fd5d 	bl	800b3d8 <HAL_GPIO_WritePin>
	return 0;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40020000 	.word	0x40020000
 800192c:	20001328 	.word	0x20001328

08001930 <gyro_init>:
		return 1;
	}
	return 0;
}

uint8_t gyro_init() {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 8001936:	21b6      	movs	r1, #182	; 0xb6
 8001938:	2014      	movs	r0, #20
 800193a:	f7ff fec5 	bl	80016c8 <gyro_write_byte>
	HAL_Delay(10);
 800193e:	200a      	movs	r0, #10
 8001940:	f007 fdb8 	bl	80094b4 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE);
 8001944:	2100      	movs	r1, #0
 8001946:	2011      	movs	r0, #17
 8001948:	f7ff febe 	bl	80016c8 <gyro_write_byte>
	HAL_Delay(2);
 800194c:	2002      	movs	r0, #2
 800194e:	f007 fdb1 	bl	80094b4 <HAL_Delay>
	int16_t gyro_id = gyro_read_byte(BMI088_GYRO_CHIP_ID);
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff feea 	bl	800172c <gyro_read_byte>
 8001958:	4603      	mov	r3, r0
 800195a:	80fb      	strh	r3, [r7, #6]
	if (gyro_id != BMI088_GYRO_CHIP_ID_VALUE) {
 800195c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d001      	beq.n	8001968 <gyro_init+0x38>
		NVIC_SystemReset();
 8001964:	f7ff fe5e 	bl	8001624 <__NVIC_SystemReset>
		return 1;
	}
	HAL_Delay(2);
 8001968:	2002      	movs	r0, #2
 800196a:	f007 fda3 	bl	80094b4 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_RANGE, BMI088_GYRO_500);
 800196e:	2102      	movs	r1, #2
 8001970:	200f      	movs	r0, #15
 8001972:	f7ff fea9 	bl	80016c8 <gyro_write_byte>
	HAL_Delay(2);
 8001976:	2002      	movs	r0, #2
 8001978:	f007 fd9c 	bl	80094b4 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_BANDWIDTH,
 800197c:	2182      	movs	r1, #130	; 0x82
 800197e:	2010      	movs	r0, #16
 8001980:	f7ff fea2 	bl	80016c8 <gyro_write_byte>
			(BMI088_GYRO_BANDWIDTH_MUST_Set | BMI088_GYRO_1000_116_HZ));
	HAL_Delay(2);
 8001984:	2002      	movs	r0, #2
 8001986:	f007 fd95 	bl	80094b4 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_CONF,
 800198a:	2101      	movs	r1, #1
 800198c:	2016      	movs	r0, #22
 800198e:	f7ff fe9b 	bl	80016c8 <gyro_write_byte>
			(BMI088_GYRO_INT3_GPIO_HIGH | BMI088_GYRO_INT3_GPIO_PP));
	HAL_Delay(2);
 8001992:	2002      	movs	r0, #2
 8001994:	f007 fd8e 	bl	80094b4 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3);
 8001998:	2101      	movs	r1, #1
 800199a:	2018      	movs	r0, #24
 800199c:	f7ff fe94 	bl	80016c8 <gyro_write_byte>
	HAL_Delay(2);
 80019a0:	2002      	movs	r0, #2
 80019a2:	f007 fd87 	bl	80094b4 <HAL_Delay>

	return 0;
 80019a6:	2300      	movs	r3, #0
	//blah
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <accel_init>:

uint8_t accel_init() {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	uint8_t accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff ff4a 	bl	8001850 <accel_read_byte>
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80019c0:	2002      	movs	r0, #2
 80019c2:	f007 fd77 	bl	80094b4 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff ff42 	bl	8001850 <accel_read_byte>
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80019d0:	2002      	movs	r0, #2
 80019d2:	f007 fd6f 	bl	80094b4 <HAL_Delay>
	accel_write_byte(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 80019d6:	21b6      	movs	r1, #182	; 0xb6
 80019d8:	207e      	movs	r0, #126	; 0x7e
 80019da:	f7ff ff07 	bl	80017ec <accel_write_byte>
	HAL_Delay(10);
 80019de:	200a      	movs	r0, #10
 80019e0:	f007 fd68 	bl	80094b4 <HAL_Delay>

	//Attempt to read...twice because once doesn't cause it to initiate
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff ff33 	bl	8001850 <accel_read_byte>
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80019ee:	2002      	movs	r0, #2
 80019f0:	f007 fd60 	bl	80094b4 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff ff2b 	bl	8001850 <accel_read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f007 fd58 	bl	80094b4 <HAL_Delay>
	if (accel_id != BMI088_ACC_CHIP_ID_VALUE) {
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b1e      	cmp	r3, #30
 8001a08:	d001      	beq.n	8001a0e <accel_init+0x5e>
		//add in an error code for this someday
		return 1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e023      	b.n	8001a56 <accel_init+0xa6>
	}

	accel_write_byte(BMI088_ACC_PWR_CTRL, BMI088_ACC_ENABLE_ACC_ON);
 8001a0e:	2104      	movs	r1, #4
 8001a10:	207d      	movs	r0, #125	; 0x7d
 8001a12:	f7ff feeb 	bl	80017ec <accel_write_byte>
	HAL_Delay(2);
 8001a16:	2002      	movs	r0, #2
 8001a18:	f007 fd4c 	bl	80094b4 <HAL_Delay>
	accel_write_byte(BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	207c      	movs	r0, #124	; 0x7c
 8001a20:	f7ff fee4 	bl	80017ec <accel_write_byte>
	HAL_Delay(2);
 8001a24:	2002      	movs	r0, #2
 8001a26:	f007 fd45 	bl	80094b4 <HAL_Delay>

	//set accelerometer to normal from suspend
	accel_write_byte(BMI088_ACC_CONF,
 8001a2a:	21a8      	movs	r1, #168	; 0xa8
 8001a2c:	2040      	movs	r0, #64	; 0x40
 8001a2e:	f7ff fedd 	bl	80017ec <accel_write_byte>
			(BMI088_ACC_NORMAL | BMI088_ACC_100_HZ | BMI088_ACC_CONF_MUST_Set));
	HAL_Delay(2);
 8001a32:	2002      	movs	r0, #2
 8001a34:	f007 fd3e 	bl	80094b4 <HAL_Delay>

	accel_write_byte(BMI088_ACC_RANGE, BMI088_ACC_RANGE_6G);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2041      	movs	r0, #65	; 0x41
 8001a3c:	f7ff fed6 	bl	80017ec <accel_write_byte>
	HAL_Delay(2);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f007 fd37 	bl	80094b4 <HAL_Delay>

	accel_write_byte(BMI088_INT1_IO_CTRL,
 8001a46:	2108      	movs	r1, #8
 8001a48:	2053      	movs	r0, #83	; 0x53
 8001a4a:	f7ff fecf 	bl	80017ec <accel_write_byte>
			(BMI088_ACC_INT1_IO_ENABLE | BMI088_ACC_INT1_GPIO_PP | BMI088_ACC_INT1_GPIO_LOW));
	HAL_Delay(2);
 8001a4e:	2002      	movs	r0, #2
 8001a50:	f007 fd30 	bl	80094b4 <HAL_Delay>
	return 0;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <mag_read_single_reg>:
	}
	float temperature = temp_int11 * 0.125 / temp_buff[1] + 23;
	return temperature;
}

uint8_t mag_read_single_reg(uint8_t reg) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	2305      	movs	r3, #5
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2301      	movs	r3, #1
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	f107 030f 	add.w	r3, r7, #15
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	211c      	movs	r1, #28
 8001a84:	4803      	ldr	r0, [pc, #12]	; (8001a94 <mag_read_single_reg+0x34>)
 8001a86:	f009 ff17 	bl	800b8b8 <HAL_I2C_Mem_Read>
	return data;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20001204 	.word	0x20001204

08001a98 <mag_write_single_reg>:

void mag_write_single_reg(uint8_t reg, uint8_t data) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	2305      	movs	r3, #5
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	1dbb      	adds	r3, r7, #6
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	211c      	movs	r1, #28
 8001abc:	4803      	ldr	r0, [pc, #12]	; (8001acc <mag_write_single_reg+0x34>)
 8001abe:	f009 fe01 	bl	800b6c4 <HAL_I2C_Mem_Write>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20001204 	.word	0x20001204

08001ad0 <mag_read_multi_reg_dma>:

void mag_read_multi_reg(uint8_t reg, uint16_t len, uint8_t *data) {
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 10);
}

void mag_read_multi_reg_dma(uint8_t reg, uint16_t len, uint8_t *data) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	603a      	str	r2, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	460b      	mov	r3, r1
 8001ade:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c3, IST8310_ADDRESS << 1, reg,
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	88bb      	ldrh	r3, [r7, #4]
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2301      	movs	r3, #1
 8001aee:	211c      	movs	r1, #28
 8001af0:	4803      	ldr	r0, [pc, #12]	; (8001b00 <mag_read_multi_reg_dma+0x30>)
 8001af2:	f00a f907 	bl	800bd04 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, data, len);
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20001204 	.word	0x20001204

08001b04 <imu_init>:
	imu_data.gy_offset = gyro_y_total / 100;
	imu_data.gz_offset = gyro_z_total / 100;

}

void imu_init() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	//trigger NSS low and high for both to initialise both gyro and accel into SPI mode
	BMI_ACCEL_NSS_LOW;
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	480e      	ldr	r0, [pc, #56]	; (8001b48 <imu_init+0x44>)
 8001b0e:	f009 fc63 	bl	800b3d8 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_LOW;
 8001b12:	2200      	movs	r2, #0
 8001b14:	2101      	movs	r1, #1
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <imu_init+0x48>)
 8001b18:	f009 fc5e 	bl	800b3d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b1c:	2064      	movs	r0, #100	; 0x64
 8001b1e:	f007 fcc9 	bl	80094b4 <HAL_Delay>
	BMI_ACCEL_NSS_HIGH;
 8001b22:	2201      	movs	r2, #1
 8001b24:	2110      	movs	r1, #16
 8001b26:	4808      	ldr	r0, [pc, #32]	; (8001b48 <imu_init+0x44>)
 8001b28:	f009 fc56 	bl	800b3d8 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_HIGH;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <imu_init+0x48>)
 8001b32:	f009 fc51 	bl	800b3d8 <HAL_GPIO_WritePin>
	gyro_init();
 8001b36:	f7ff fefb 	bl	8001930 <gyro_init>
	accel_init();
 8001b3a:	f7ff ff39 	bl	80019b0 <accel_init>
	ist8310_init();
 8001b3e:	f000 f905 	bl	8001d4c <ist8310_init>
//	gyro_offset_cali();

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40020400 	.word	0x40020400

08001b50 <imu_start_ints>:

void imu_start_ints() {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_CTRL, BMI088_DRDY_ON);
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	2015      	movs	r0, #21
 8001b58:	f7ff fdb6 	bl	80016c8 <gyro_write_byte>
	vTaskDelay(10);
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f014 fd47 	bl	80165f0 <vTaskDelay>
	accel_write_byte(BMI088_INT_MAP_DATA, BMI088_ACC_INT1_DRDY_INTERRUPT);
 8001b62:	2104      	movs	r1, #4
 8001b64:	2058      	movs	r0, #88	; 0x58
 8001b66:	f7ff fe41 	bl	80017ec <accel_write_byte>
	vTaskDelay(10);
 8001b6a:	200a      	movs	r0, #10
 8001b6c:	f014 fd40 	bl	80165f0 <vTaskDelay>
	mag_write_single_reg(0x0B, 0x08); //enable drdy pin, pull to low on drdy
 8001b70:	2108      	movs	r1, #8
 8001b72:	200b      	movs	r0, #11
 8001b74:	f7ff ff90 	bl	8001a98 <mag_write_single_reg>
	imu_init_status = 1;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <imu_start_ints+0x34>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000384 	.word	0x20000384

08001b88 <accel_get_data>:

void accel_get_data() {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	accel_read_bytes(BMI088_ACCEL_XOUT_L, accel_buff, 6);
 8001b8c:	2206      	movs	r2, #6
 8001b8e:	4903      	ldr	r1, [pc, #12]	; (8001b9c <accel_get_data+0x14>)
 8001b90:	2012      	movs	r0, #18
 8001b92:	f7ff fe95 	bl	80018c0 <accel_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		accel_rx = 1;
//	}
	//imu_data.temp = get_bmi_temp();
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000334 	.word	0x20000334

08001ba0 <accel_process_data>:

void accel_process_data() {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
	int16_t accel_data;
	accel_data = (accel_buff[1] << 8 | accel_buff[0]);
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <accel_process_data+0xa8>)
 8001ba8:	785b      	ldrb	r3, [r3, #1]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <accel_process_data+0xa8>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ax = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001c4c <accel_process_data+0xac>
 8001bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bcc:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <accel_process_data+0xb0>)
 8001bce:	edc3 7a04 	vstr	s15, [r3, #16]
	accel_data = (accel_buff[3] << 8 | accel_buff[2]);
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <accel_process_data+0xa8>)
 8001bd4:	78db      	ldrb	r3, [r3, #3]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <accel_process_data+0xa8>)
 8001bdc:	789b      	ldrb	r3, [r3, #2]
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ay = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001c4c <accel_process_data+0xac>
 8001bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <accel_process_data+0xb0>)
 8001bfa:	edc3 7a05 	vstr	s15, [r3, #20]
	accel_data = (accel_buff[5] << 8 | accel_buff[4]);
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <accel_process_data+0xa8>)
 8001c00:	795b      	ldrb	r3, [r3, #5]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <accel_process_data+0xa8>)
 8001c08:	791b      	ldrb	r3, [r3, #4]
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.az = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c4c <accel_process_data+0xac>
 8001c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <accel_process_data+0xb0>)
 8001c26:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_data.accel_data.last_accel_update = HAL_GetTick();
 8001c2a:	f007 fc37 	bl	800949c <HAL_GetTick>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <accel_process_data+0xb0>)
 8001c32:	61d3      	str	r3, [r2, #28]

	//send data into the imu processing task
	accel_data_ready(imu_data.accel_data);
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <accel_process_data+0xb0>)
 8001c36:	3310      	adds	r3, #16
 8001c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c3a:	f004 fa0b 	bl	8006054 <accel_data_ready>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000334 	.word	0x20000334
 8001c4c:	3aeb3333 	.word	0x3aeb3333
 8001c50:	2000034c 	.word	0x2000034c

08001c54 <gyro_get_data>:

void gyro_get_data() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001c58:	2206      	movs	r2, #6
 8001c5a:	4903      	ldr	r1, [pc, #12]	; (8001c68 <gyro_get_data+0x14>)
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f7ff fd93 	bl	8001788 <gyro_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		gyro_rx = 1;
//	}
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000033c 	.word	0x2000033c

08001c6c <gyro_process_data>:

void gyro_process_data() {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
	int16_t gyro_data;
	gyro_data = (gyro_buff[1] << 8 | gyro_buff[0]);
 8001c72:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <gyro_process_data+0xd4>)
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <gyro_process_data+0xd4>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gx_offset;
 8001c84:	88fa      	ldrh	r2, [r7, #6]
 8001c86:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <gyro_process_data+0xd8>)
 8001c88:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	80fb      	strh	r3, [r7, #6]
	//convert raw data into radians/s
	imu_data.gyro_data.gx = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001c94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001d48 <gyro_process_data+0xdc>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <gyro_process_data+0xd8>)
 8001caa:	edc3 7a00 	vstr	s15, [r3]
	gyro_data = (gyro_buff[3] << 8 | gyro_buff[2]);
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <gyro_process_data+0xd4>)
 8001cb0:	78db      	ldrb	r3, [r3, #3]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <gyro_process_data+0xd4>)
 8001cb8:	789b      	ldrb	r3, [r3, #2]
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gy_offset;
 8001cc0:	88fa      	ldrh	r2, [r7, #6]
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <gyro_process_data+0xd8>)
 8001cc4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gy = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cdc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001d48 <gyro_process_data+0xdc>
 8001ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <gyro_process_data+0xd8>)
 8001ce6:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_data = (gyro_buff[5] << 8 | gyro_buff[4]);
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <gyro_process_data+0xd4>)
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <gyro_process_data+0xd4>)
 8001cf4:	791b      	ldrb	r3, [r3, #4]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gz_offset;
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <gyro_process_data+0xd8>)
 8001d00:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gz = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d18:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001d48 <gyro_process_data+0xdc>
 8001d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <gyro_process_data+0xd8>)
 8001d22:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.gyro_data.last_gyro_update = HAL_GetTick();
 8001d26:	f007 fbb9 	bl	800949c <HAL_GetTick>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <gyro_process_data+0xd8>)
 8001d2e:	60d3      	str	r3, [r2, #12]
	//send data into the imu processing task
	gyro_data_ready(imu_data.gyro_data);
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <gyro_process_data+0xd8>)
 8001d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d34:	f004 f962 	bl	8005ffc <gyro_data_ready>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000033c 	.word	0x2000033c
 8001d44:	2000034c 	.word	0x2000034c
 8001d48:	398ba058 	.word	0x398ba058

08001d4c <ist8310_init>:

uint8_t ist8310_init() {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2140      	movs	r1, #64	; 0x40
 8001d56:	481d      	ldr	r0, [pc, #116]	; (8001dcc <ist8310_init+0x80>)
 8001d58:	f009 fb3e 	bl	800b3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f007 fba9 	bl	80094b4 <HAL_Delay>
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2140      	movs	r1, #64	; 0x40
 8001d66:	4819      	ldr	r0, [pc, #100]	; (8001dcc <ist8310_init+0x80>)
 8001d68:	f009 fb36 	bl	800b3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f007 fba1 	bl	80094b4 <HAL_Delay>

	uint8_t ist_id = mag_read_single_reg(IST8310_WHO_AM_I);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fe74 	bl	8001a60 <mag_read_single_reg>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
	if (ist_id != IST8310_DEVICE_ID_A) {
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d00a      	beq.n	8001d98 <ist8310_init+0x4c>
		//reset mag values
		imu_data.mag_data.mx = 0;
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <ist8310_init+0x84>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	841a      	strh	r2, [r3, #32]
		imu_data.mag_data.my = 0;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <ist8310_init+0x84>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	845a      	strh	r2, [r3, #34]	; 0x22
		imu_data.mag_data.mz = 0;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <ist8310_init+0x84>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	849a      	strh	r2, [r3, #36]	; 0x24
		return 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e015      	b.n	8001dc4 <ist8310_init+0x78>
	}
	HAL_Delay(2);
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f007 fb8b 	bl	80094b4 <HAL_Delay>
	mag_write_single_reg(0x41, 0x09); //average over 2 data
 8001d9e:	2109      	movs	r1, #9
 8001da0:	2041      	movs	r0, #65	; 0x41
 8001da2:	f7ff fe79 	bl	8001a98 <mag_write_single_reg>
	HAL_Delay(2);
 8001da6:	2002      	movs	r0, #2
 8001da8:	f007 fb84 	bl	80094b4 <HAL_Delay>
	mag_write_single_reg(0x42, 0xC0); //set to C0
 8001dac:	21c0      	movs	r1, #192	; 0xc0
 8001dae:	2042      	movs	r0, #66	; 0x42
 8001db0:	f7ff fe72 	bl	8001a98 <mag_write_single_reg>
	HAL_Delay(2);
 8001db4:	2002      	movs	r0, #2
 8001db6:	f007 fb7d 	bl	80094b4 <HAL_Delay>
	mag_write_single_reg(0x0A, 0x0B); //100Hz
 8001dba:	210b      	movs	r1, #11
 8001dbc:	200a      	movs	r0, #10
 8001dbe:	f7ff fe6b 	bl	8001a98 <mag_write_single_reg>
	//mag_en_flag = 1;

	return 0;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	2000034c 	.word	0x2000034c

08001dd4 <ist8310_get_data>:

void ist8310_get_data() {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	//fun
	mag_read_multi_reg_dma(IST8310_R_XL, 5, ist_read_buffer);
 8001dd8:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <ist8310_get_data+0x1c>)
 8001dda:	2105      	movs	r1, #5
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f7ff fe77 	bl	8001ad0 <mag_read_multi_reg_dma>
	imu_data.mag_data.last_mag_update = HAL_GetTick();
 8001de2:	f007 fb5b 	bl	800949c <HAL_GetTick>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a02      	ldr	r2, [pc, #8]	; (8001df4 <ist8310_get_data+0x20>)
 8001dea:	6293      	str	r3, [r2, #40]	; 0x28

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000344 	.word	0x20000344
 8001df4:	2000034c 	.word	0x2000034c

08001df8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1) {
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_GPIO_EXTI_Callback+0x58>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d11e      	bne.n	8001e48 <HAL_GPIO_EXTI_Callback+0x50>
		if (hspi1.State == HAL_SPI_STATE_READY) {
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10d      	bne.n	8001e32 <HAL_GPIO_EXTI_Callback+0x3a>
			if (GPIO_Pin == GYRO_INT_Pin) {
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d103      	bne.n	8001e24 <HAL_GPIO_EXTI_Callback+0x2c>
				gyro_get_data();
 8001e1c:	f7ff ff1a 	bl	8001c54 <gyro_get_data>
				gyro_process_data();
 8001e20:	f7ff ff24 	bl	8001c6c <gyro_process_data>
				//ist8310_get_data();
			}
			if (GPIO_Pin == ACC_INT_Pin) {
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d103      	bne.n	8001e32 <HAL_GPIO_EXTI_Callback+0x3a>
				accel_get_data();
 8001e2a:	f7ff fead 	bl	8001b88 <accel_get_data>
				accel_process_data();
 8001e2e:	f7ff feb7 	bl	8001ba0 <accel_process_data>
			}
		}
		if (GPIO_Pin == IST_INT_Pin) {
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d107      	bne.n	8001e48 <HAL_GPIO_EXTI_Callback+0x50>
			if (hi2c3.State == HAL_I2C_STATE_READY) {
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_GPIO_EXTI_Callback+0x60>)
 8001e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d101      	bne.n	8001e48 <HAL_GPIO_EXTI_Callback+0x50>
				ist8310_get_data();
 8001e44:	f7ff ffc6 	bl	8001dd4 <ist8310_get_data>
			}
		}
	}
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000384 	.word	0x20000384
 8001e54:	20001328 	.word	0x20001328
 8001e58:	20001204 	.word	0x20001204

08001e5c <HAL_I2C_MemRxCpltCallback>:
	spi_rdy = 1;
	spi_timeout = HAL_GetTick();
}
*/

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	int16_t mag_buffer[3];
	mag_buffer[0] = ist_read_buffer[1] << 8 | ist_read_buffer[0];
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	813b      	strh	r3, [r7, #8]
	mag_buffer[1] = ist_read_buffer[3] << 8 | ist_read_buffer[2];
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e7a:	78db      	ldrb	r3, [r3, #3]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e82:	789b      	ldrb	r3, [r3, #2]
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	817b      	strh	r3, [r7, #10]
	mag_buffer[2] = ist_read_buffer[5] << 8 | ist_read_buffer[4];
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e8e:	795b      	ldrb	r3, [r3, #5]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	81bb      	strh	r3, [r7, #12]

	imu_data.mag_data.mx = mag_buffer[0];
 8001ea0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001ea6:	841a      	strh	r2, [r3, #32]
	imu_data.mag_data.my = mag_buffer[1];
 8001ea8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001eae:	845a      	strh	r2, [r3, #34]	; 0x22
	imu_data.mag_data.mz = mag_buffer[2];
 8001eb0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001eb6:	849a      	strh	r2, [r3, #36]	; 0x24
	mag_data_ready(imu_data.mag_data);
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001eba:	3320      	adds	r3, #32
 8001ebc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ec0:	f004 f8f4 	bl	80060ac <mag_data_ready>
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000344 	.word	0x20000344
 8001ed0:	2000034c 	.word	0x2000034c

08001ed4 <led_green_off>:


/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	htim5.Instance->CCR2 = 0;
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <led_green_off+0x18>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2200      	movs	r2, #0
 8001ede:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20001560 	.word	0x20001560

08001ef0 <led_on>:
	htim5.Instance->CCR3 = 0;
	htim5.Instance->CCR2 = 0;
	htim5.Instance->CCR1 = 0;
}

void led_on(void){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	480c      	ldr	r0, [pc, #48]	; (8001f28 <led_on+0x38>)
 8001ef8:	f00d fda0 	bl	800fa3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001efc:	2104      	movs	r1, #4
 8001efe:	480a      	ldr	r0, [pc, #40]	; (8001f28 <led_on+0x38>)
 8001f00:	f00d fd9c 	bl	800fa3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001f04:	2108      	movs	r1, #8
 8001f06:	4808      	ldr	r0, [pc, #32]	; (8001f28 <led_on+0x38>)
 8001f08:	f00d fd98 	bl	800fa3c <HAL_TIM_PWM_Start>
	htim5.Instance->CCR3 = 255;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <led_on+0x38>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	63da      	str	r2, [r3, #60]	; 0x3c
	htim5.Instance->CCR2 = 255;
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <led_on+0x38>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	22ff      	movs	r2, #255	; 0xff
 8001f1a:	639a      	str	r2, [r3, #56]	; 0x38
	htim5.Instance->CCR1 = 255;
 8001f1c:	4b02      	ldr	r3, [pc, #8]	; (8001f28 <led_on+0x38>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	22ff      	movs	r2, #255	; 0xff
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20001560 	.word	0x20001560

08001f2c <led_toggle>:
void led_toggle(void){
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	460a      	mov	r2, r1
 8001f46:	80fb      	strh	r3, [r7, #6]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));
	if (led_state == on_led)
 8001f4c:	797b      	ldrb	r3, [r7, #5]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 808f 	bne.w	8002072 <status_led+0x136>
	{
	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
		switch(led_no)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	f200 808c 	bhi.w	8002076 <status_led+0x13a>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <status_led+0x28>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f89 	.word	0x08001f89
 8001f68:	08001fa3 	.word	0x08001fa3
 8001f6c:	08001fbd 	.word	0x08001fbd
 8001f70:	08001fd7 	.word	0x08001fd7
 8001f74:	08001ff1 	.word	0x08001ff1
 8001f78:	0800200b 	.word	0x0800200b
 8001f7c:	08002025 	.word	0x08002025
 8001f80:	0800203f 	.word	0x0800203f
 8001f84:	08002059 	.word	0x08002059
		{
		case 1:
			htim5.Instance->CCR3 = 255;//(0x94);
 8001f88:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <status_led+0x148>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	22ff      	movs	r2, #255	; 0xff
 8001f8e:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0xe1);
 8001f90:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <status_led+0x148>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;///(0xa0);
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <status_led+0x148>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001fa0:	e06a      	b.n	8002078 <status_led+0x13c>
		case 2:
			htim5.Instance->CCR3 = 0;//(0x25);
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <status_led+0x148>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 255;//(0x25);
 8001faa:	4b36      	ldr	r3, [pc, #216]	; (8002084 <status_led+0x148>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	22ff      	movs	r2, #255	; 0xff
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;//(0x64);
 8001fb2:	4b34      	ldr	r3, [pc, #208]	; (8002084 <status_led+0x148>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001fba:	e05d      	b.n	8002078 <status_led+0x13c>
		case 3:
			htim5.Instance->CCR3 = 0;//(0x52);
 8001fbc:	4b31      	ldr	r3, [pc, #196]	; (8002084 <status_led+0x148>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x0c);
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <status_led+0x148>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xcf);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <status_led+0x148>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	22ff      	movs	r2, #255	; 0xff
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001fd4:	e050      	b.n	8002078 <status_led+0x13c>
		case 4:
			htim5.Instance->CCR3 = 255;//(0x6e);
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <status_led+0x148>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	22ff      	movs	r2, #255	; 0xff
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x7a);
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <status_led+0x148>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xf4);
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <status_led+0x148>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	22ff      	movs	r2, #255	; 0xff
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001fee:	e043      	b.n	8002078 <status_led+0x13c>
		case 5:
			htim5.Instance->CCR3 = 0;
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <status_led+0x148>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <status_led+0x148>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <status_led+0x148>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002008:	e036      	b.n	8002078 <status_led+0x13c>
		case 6:
			htim5.Instance->CCR3 = 0;
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <status_led+0x148>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <status_led+0x148>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <status_led+0x148>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002022:	e029      	b.n	8002078 <status_led+0x13c>
		case 7:
			htim5.Instance->CCR3 = 0;
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <status_led+0x148>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <status_led+0x148>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <status_led+0x148>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2200      	movs	r2, #0
 800203a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800203c:	e01c      	b.n	8002078 <status_led+0x13c>
		case 8:
			htim5.Instance->CCR3 = 0;
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <status_led+0x148>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <status_led+0x148>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <status_led+0x148>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002056:	e00f      	b.n	8002078 <status_led+0x13c>
		case 9:
			htim5.Instance->CCR3 = 0;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <status_led+0x148>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <status_led+0x148>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <status_led+0x148>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002070:	e002      	b.n	8002078 <status_led+0x13c>

		default:
			break;
		}
	}
 8002072:	bf00      	nop
 8002074:	e000      	b.n	8002078 <status_led+0x13c>
			break;
 8002076:	bf00      	nop

}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	20001560 	.word	0x20001560

08002088 <micros_tick>:
#include "robot_config.h"

uint32_t gv_curr_micros = 0;
uint32_t gv_overflow_times = 0;

void micros_tick(){
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
	if (gv_curr_micros == 4294967295) //2^32 - 1
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <micros_tick+0x2c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d104      	bne.n	80020a0 <micros_tick+0x18>
		gv_overflow_times ++;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <micros_tick+0x30>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3301      	adds	r3, #1
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <micros_tick+0x30>)
 800209e:	6013      	str	r3, [r2, #0]
	gv_curr_micros ++;
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <micros_tick+0x2c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a03      	ldr	r2, [pc, #12]	; (80020b4 <micros_tick+0x2c>)
 80020a8:	6013      	str	r3, [r2, #0]
}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	20000388 	.word	0x20000388
 80020b8:	2000038c 	.word	0x2000038c

080020bc <start_micros_timer>:

void start_micros_timer()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	configASSERT(TIMER_FREQ <= 1000000);
	__HAL_TIM_SET_AUTORELOAD(&htim3, (999999/TIMER_FREQ) + 1);
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <start_micros_timer+0x2c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2264      	movs	r2, #100	; 0x64
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <start_micros_timer+0x2c>)
 80020ca:	2264      	movs	r2, #100	; 0x64
 80020cc:	60da      	str	r2, [r3, #12]
	htim3.Instance->DIER |= TIM_DIER_UIE; //enable update interrupt
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <start_micros_timer+0x2c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <start_micros_timer+0x2c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim3);
 80020de:	4802      	ldr	r0, [pc, #8]	; (80020e8 <start_micros_timer+0x2c>)
 80020e0:	f00d fb2c 	bl	800f73c <HAL_TIM_Base_Start>
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200014d0 	.word	0x200014d0

080020ec <get_microseconds>:



uint32_t get_microseconds()
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
	return gv_curr_micros;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <get_microseconds+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000388 	.word	0x20000388

08002104 <queue_init>:
#include "bsp_queue.h"
#include <string.h>



QueueOpStat_t queue_init(queue_t* queue){
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	723b      	strb	r3, [r7, #8]
	if (queue == NULL){
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d104      	bne.n	8002120 <queue_init+0x1c>
		op_stat.op_status = Q_INVALID;
 8002116:	2304      	movs	r3, #4
 8002118:	723b      	strb	r3, [r7, #8]
		return op_stat;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e015      	b.n	800214c <queue_init+0x48>
	}
	queue->curr_byte_pos = 0;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	queue->last_byte_pos=0;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	queue->last_proc = 0;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	queue->last_time=0;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	queue->stored_bytes=0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	return op_stat;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60fb      	str	r3, [r7, #12]
}
 800214c:	2300      	movs	r3, #0
 800214e:	89ba      	ldrh	r2, [r7, #12]
 8002150:	f362 030f 	bfi	r3, r2, #0, #16
 8002154:	89fa      	ldrh	r2, [r7, #14]
 8002156:	f362 431f 	bfi	r3, r2, #16, #16
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <queue_append_byte>:

/*
 * Adds a byte to the end of the byte_queue
 * Add one byte at a time!
 */
QueueOpStat_t queue_append_byte(queue_t* queue, uint8_t data){
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	723b      	strb	r3, [r7, #8]
	queue->last_time = HAL_GetTick();
 8002176:	f007 f991 	bl	800949c <HAL_GetTick>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	queue->queue[queue->last_byte_pos] = data;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800218a:	4619      	mov	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	545a      	strb	r2, [r3, r1]
	op_stat.bytes_appended = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	817b      	strh	r3, [r7, #10]
	queue->last_byte_pos = (queue->last_byte_pos >= TQUEUE_SIZE-1) ? 0 : queue->last_byte_pos + 1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800219c:	2bfe      	cmp	r3, #254	; 0xfe
 800219e:	d805      	bhi.n	80021ac <queue_append_byte+0x46>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80021a6:	3301      	adds	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	e000      	b.n	80021ae <queue_append_byte+0x48>
 80021ac:	2200      	movs	r2, #0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	if (queue->stored_bytes > TQUEUE_SIZE) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80021ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021be:	d918      	bls.n	80021f2 <queue_append_byte+0x8c>
		queue->stored_bytes = TQUEUE_SIZE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		queue->curr_byte_pos = (queue->curr_byte_pos == TQUEUE_SIZE-1) ? 0 : queue->curr_byte_pos+1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80021d0:	2bff      	cmp	r3, #255	; 0xff
 80021d2:	d005      	beq.n	80021e0 <queue_append_byte+0x7a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80021da:	3301      	adds	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	e000      	b.n	80021e2 <queue_append_byte+0x7c>
 80021e0:	2200      	movs	r2, #0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		op_stat.op_status = Q_FULL;
 80021e8:	2301      	movs	r3, #1
 80021ea:	723b      	strb	r3, [r7, #8]
		return op_stat;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e009      	b.n	8002206 <queue_append_byte+0xa0>
	}
	queue->stored_bytes+=1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80021f8:	3301      	adds	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	return op_stat;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	60fb      	str	r3, [r7, #12]
}
 8002206:	2300      	movs	r3, #0
 8002208:	89ba      	ldrh	r2, [r7, #12]
 800220a:	f362 030f 	bfi	r3, r2, #0, #16
 800220e:	89fa      	ldrh	r2, [r7, #14]
 8002210:	f362 431f 	bfi	r3, r2, #16, #16
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <queue_pop_element>:
	}
	op_stat.bytes_appended = len;
	return op_stat;
}

uint8_t queue_pop_element(queue_t* queue){
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

	if (queue->stored_bytes == 0){
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <queue_pop_element+0x16>
		return 0;
 800222e:	2300      	movs	r3, #0
 8002230:	e024      	b.n	800227c <queue_pop_element+0x60>
	} else {
		uint8_t temp =queue->queue[queue->curr_byte_pos];
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002238:	461a      	mov	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	5c9b      	ldrb	r3, [r3, r2]
 800223e:	73fb      	strb	r3, [r7, #15]
		queue->curr_byte_pos +=1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002246:	3301      	adds	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002256:	2bff      	cmp	r3, #255	; 0xff
 8002258:	d803      	bhi.n	8002262 <queue_pop_element+0x46>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8002260:	e000      	b.n	8002264 <queue_pop_element+0x48>
 8002262:	2200      	movs	r2, #0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
				0:queue->curr_byte_pos;
		queue->stored_bytes -= 1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		return temp;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <queue_pop_elements>:


QueueOpStat_t queue_pop_elements(queue_t* queue, uint8_t* data, uint16_t len){
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	80fb      	strh	r3, [r7, #6]
		QueueOpStat_t op_stat;

		op_stat = queue_peek_number(queue, data, len);
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	461a      	mov	r2, r3
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f82d 	bl	80022fc <queue_peek_number>
 80022a2:	4603      	mov	r3, r0
 80022a4:	61bb      	str	r3, [r7, #24]
		QueueOpStat_t remove_stat;
		remove_stat = queue_remove_number(queue, op_stat.bytes_appended);
 80022a6:	8b7b      	ldrh	r3, [r7, #26]
 80022a8:	4619      	mov	r1, r3
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f87c 	bl	80023a8 <queue_remove_number>
 80022b0:	4603      	mov	r3, r0
 80022b2:	617b      	str	r3, [r7, #20]
	return op_stat;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	2300      	movs	r3, #0
 80022ba:	8bba      	ldrh	r2, [r7, #28]
 80022bc:	f362 030f 	bfi	r3, r2, #0, #16
 80022c0:	8bfa      	ldrh	r2, [r7, #30]
 80022c2:	f362 431f 	bfi	r3, r2, #16, #16
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <queue_peek>:

uint8_t queue_peek(queue_t* queue){
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	if (queue->stored_bytes>0){
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <queue_peek+0x20>
		return queue->queue[queue->curr_byte_pos];
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80022e6:	461a      	mov	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	5c9b      	ldrb	r3, [r3, r2]
 80022ec:	e000      	b.n	80022f0 <queue_peek+0x22>
	}
	else{
		return 0;
 80022ee:	2300      	movs	r3, #0
	}
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <queue_peek_number>:

QueueOpStat_t queue_peek_number(queue_t* queue, uint8_t* buffer,uint16_t size){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
	QueueOpStat_t op_stat;
	queue->last_time = HAL_GetTick();
 800230a:	f007 f8c7 	bl	800949c <HAL_GetTick>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	op_stat.op_status = Q_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	753b      	strb	r3, [r7, #20]
	uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002322:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002326:	83fb      	strh	r3, [r7, #30]
	if (queue->stored_bytes < size){
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	429a      	cmp	r2, r3
 8002332:	d905      	bls.n	8002340 <queue_peek_number+0x44>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 8002334:	2303      	movs	r3, #3
 8002336:	753b      	strb	r3, [r7, #20]
		size = queue->stored_bytes;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800233e:	80fb      	strh	r3, [r7, #6]
	}

	if (bytes_to_end >= size){
 8002340:	8bfa      	ldrh	r2, [r7, #30]
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	429a      	cmp	r2, r3
 8002346:	d30b      	bcc.n	8002360 <queue_peek_number+0x64>
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], size);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	4619      	mov	r1, r3
 8002358:	68b8      	ldr	r0, [r7, #8]
 800235a:	f016 fe9c 	bl	8019096 <memcpy>
 800235e:	e014      	b.n	800238a <queue_peek_number+0x8e>
	} else {
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	8bfa      	ldrh	r2, [r7, #30]
 800236e:	4619      	mov	r1, r3
 8002370:	68b8      	ldr	r0, [r7, #8]
 8002372:	f016 fe90 	bl	8019096 <memcpy>
		memcpy(buffer+bytes_to_end, queue->queue,size-bytes_to_end);
 8002376:	8bfb      	ldrh	r3, [r7, #30]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	18d0      	adds	r0, r2, r3
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	88fa      	ldrh	r2, [r7, #6]
 8002380:	8bfb      	ldrh	r3, [r7, #30]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	461a      	mov	r2, r3
 8002386:	f016 fe86 	bl	8019096 <memcpy>
	}
	op_stat.bytes_appended = size;
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	82fb      	strh	r3, [r7, #22]
	return op_stat;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	2300      	movs	r3, #0
 8002394:	8b3a      	ldrh	r2, [r7, #24]
 8002396:	f362 030f 	bfi	r3, r2, #0, #16
 800239a:	8b7a      	ldrh	r2, [r7, #26]
 800239c:	f362 431f 	bfi	r3, r2, #16, #16
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <queue_remove_number>:

QueueOpStat_t queue_remove_number(queue_t* queue, uint16_t size){
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
//	queue_sanity_check(queue);
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	723b      	strb	r3, [r7, #8]
	if (queue->stored_bytes < size){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d905      	bls.n	80023d0 <queue_remove_number+0x28>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80023c4:	2303      	movs	r3, #3
 80023c6:	723b      	strb	r3, [r7, #8]
		size = queue->stored_bytes;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023ce:	807b      	strh	r3, [r7, #2]
	}

	queue->curr_byte_pos += size;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	4413      	add	r3, r2
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	queue->stored_bytes -= size;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023fa:	2bff      	cmp	r3, #255	; 0xff
 80023fc:	d906      	bls.n	800240c <queue_remove_number+0x64>
			queue->curr_byte_pos-TQUEUE_SIZE : queue->curr_byte_pos;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
	queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 8002404:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002408:	b29b      	uxth	r3, r3
 800240a:	e002      	b.n	8002412 <queue_remove_number+0x6a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
	op_stat.bytes_appended = size;
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	817b      	strh	r3, [r7, #10]
	return op_stat;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	2300      	movs	r3, #0
 8002422:	89ba      	ldrh	r2, [r7, #12]
 8002424:	f362 030f 	bfi	r3, r2, #0, #16
 8002428:	89fa      	ldrh	r2, [r7, #14]
 800242a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <queue_get_size>:

uint16_t queue_get_size(queue_t* queue){
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
	return queue->stored_bytes;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <ref_process_data>:
	HEADER,
	DATA
};


ref_processing_status_t ref_process_data(queue_t *uart_queue, ref_msg_t *proc_msg){
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b097      	sub	sp, #92	; 0x5c
 8002458:	af00      	add	r7, sp, #0
 800245a:	6578      	str	r0, [r7, #84]	; 0x54
 800245c:	6539      	str	r1, [r7, #80]	; 0x50
	static uint8_t state = 0;
	static ref_frame_header_t header;
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 800245e:	e064      	b.n	800252a <ref_process_data+0xd6>
		switch(state){
 8002460:	4b37      	ldr	r3, [pc, #220]	; (8002540 <ref_process_data+0xec>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <ref_process_data+0x1a>
 8002468:	2b01      	cmp	r3, #1
 800246a:	d037      	beq.n	80024dc <ref_process_data+0x88>
 800246c:	e05d      	b.n	800252a <ref_process_data+0xd6>
			case HEADER:
				if (queue_get_size(uart_queue)< REF_HEADER_SIZE+2 ){
 800246e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002470:	f7ff ffe3 	bl	800243a <queue_get_size>
 8002474:	4603      	mov	r3, r0
 8002476:	2b06      	cmp	r3, #6
 8002478:	d801      	bhi.n	800247e <ref_process_data+0x2a>
					return INSUFFICIENT_DATA;
 800247a:	2302      	movs	r3, #2
 800247c:	e05c      	b.n	8002538 <ref_process_data+0xe4>
				}
				if (queue_peek(uart_queue) != 0xA5){
 800247e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002480:	f7ff ff25 	bl	80022ce <queue_peek>
 8002484:	4603      	mov	r3, r0
 8002486:	2ba5      	cmp	r3, #165	; 0xa5
 8002488:	d003      	beq.n	8002492 <ref_process_data+0x3e>
					queue_pop_element(uart_queue);
 800248a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800248c:	f7ff fec6 	bl	800221c <queue_pop_element>
 8002490:	e04b      	b.n	800252a <ref_process_data+0xd6>
				}else {
					if (queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 8002492:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002494:	f7ff ffd1 	bl	800243a <queue_get_size>
 8002498:	4603      	mov	r3, r0
 800249a:	2b07      	cmp	r3, #7
 800249c:	d91c      	bls.n	80024d8 <ref_process_data+0x84>
						header = ref_get_header(uart_queue);
 800249e:	4c29      	ldr	r4, [pc, #164]	; (8002544 <ref_process_data+0xf0>)
 80024a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f84e 	bl	8002548 <ref_get_header>
 80024ac:	4622      	mov	r2, r4
 80024ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	6010      	str	r0, [r2, #0]
 80024b6:	8899      	ldrh	r1, [r3, #4]
 80024b8:	799b      	ldrb	r3, [r3, #6]
 80024ba:	8091      	strh	r1, [r2, #4]
 80024bc:	7193      	strb	r3, [r2, #6]
						if (header.cmd_id == 0xFFFF){
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <ref_process_data+0xf0>)
 80024c0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d100      	bne.n	80024d0 <ref_process_data+0x7c>
							//invalid data, continue checking
							break;
 80024ce:	e02c      	b.n	800252a <ref_process_data+0xd6>
						}
						//header is valid, remove header bytes and start finding data
						state = DATA;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <ref_process_data+0xec>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e028      	b.n	800252a <ref_process_data+0xd6>
					} else {
						return INSUFFICIENT_DATA;
 80024d8:	2302      	movs	r3, #2
 80024da:	e02d      	b.n	8002538 <ref_process_data+0xe4>
					}
				}
				break;
			case DATA:
				//wait until enough data to fill data
				if (queue_get_size(uart_queue) > header.data_length+4+REF_HEADER_SIZE){
 80024dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80024de:	f7ff ffac 	bl	800243a <queue_get_size>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <ref_process_data+0xf0>)
 80024e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3309      	adds	r3, #9
 80024f0:	429a      	cmp	r2, r3
 80024f2:	dd18      	ble.n	8002526 <ref_process_data+0xd2>
					state = HEADER;
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <ref_process_data+0xec>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
					*proc_msg = ref_get_msg(header,uart_queue);
 80024fa:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80024fc:	4638      	mov	r0, r7
 80024fe:	4a11      	ldr	r2, [pc, #68]	; (8002544 <ref_process_data+0xf0>)
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	ca06      	ldmia	r2, {r1, r2}
 8002504:	f000 f898 	bl	8002638 <ref_get_msg>
 8002508:	4620      	mov	r0, r4
 800250a:	463b      	mov	r3, r7
 800250c:	2242      	movs	r2, #66	; 0x42
 800250e:	4619      	mov	r1, r3
 8002510:	f016 fdc1 	bl	8019096 <memcpy>
					if (proc_msg->cmd_id!= 0xFFFF){
 8002514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <ref_process_data+0xd6>
						return PROCESS_SUCCESS;
 8002522:	2300      	movs	r3, #0
 8002524:	e008      	b.n	8002538 <ref_process_data+0xe4>
					} else {
						break;
					}
				} else{
					return INSUFFICIENT_DATA;
 8002526:	2302      	movs	r3, #2
 8002528:	e006      	b.n	8002538 <ref_process_data+0xe4>
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 800252a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800252c:	f7ff ff85 	bl	800243a <queue_get_size>
 8002530:	4603      	mov	r3, r0
 8002532:	2b05      	cmp	r3, #5
 8002534:	d894      	bhi.n	8002460 <ref_process_data+0xc>
				}
				break;
			}
	}
	return INSUFFICIENT_DATA;
 8002536:	2302      	movs	r3, #2
}
 8002538:	4618      	mov	r0, r3
 800253a:	375c      	adds	r7, #92	; 0x5c
 800253c:	46bd      	mov	sp, r7
 800253e:	bd90      	pop	{r4, r7, pc}
 8002540:	20000390 	.word	0x20000390
 8002544:	20000394 	.word	0x20000394

08002548 <ref_get_header>:

ref_frame_header_t ref_get_header(queue_t *data_buffer){
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	ref_frame_header_t ret_header;
	//+2 for cmd ID
	uint8_t temp_data[REF_HEADER_SIZE+2];
	queue_peek_number(data_buffer, temp_data, 7);
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	2207      	movs	r2, #7
 8002558:	4619      	mov	r1, r3
 800255a:	6838      	ldr	r0, [r7, #0]
 800255c:	f7ff fece 	bl	80022fc <queue_peek_number>
	ret_header.start_frame = temp_data[0];
 8002560:	7b3b      	ldrb	r3, [r7, #12]
 8002562:	753b      	strb	r3, [r7, #20]
	if (ret_header.start_frame!= 0xA5){
 8002564:	7d3b      	ldrb	r3, [r7, #20]
 8002566:	2ba5      	cmp	r3, #165	; 0xa5
 8002568:	d013      	beq.n	8002592 <ref_get_header+0x4a>
		queue_pop_element(data_buffer);
 800256a:	6838      	ldr	r0, [r7, #0]
 800256c:	f7ff fe56 	bl	800221c <queue_pop_element>
		ret_header.cmd_id=0xFFFF;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
 8002574:	767b      	strb	r3, [r7, #25]
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	76bb      	strb	r3, [r7, #26]
		return ret_header;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	6010      	str	r0, [r2, #0]
 8002588:	8899      	ldrh	r1, [r3, #4]
 800258a:	799b      	ldrb	r3, [r3, #6]
 800258c:	8091      	strh	r1, [r2, #4]
 800258e:	7193      	strb	r3, [r2, #6]
 8002590:	e04d      	b.n	800262e <ref_get_header+0xe6>
	}

	ret_header.data_length = ((uint16_t) temp_data[2] << 8 | temp_data[1]);
 8002592:	7bbb      	ldrb	r3, [r7, #14]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21a      	sxth	r2, r3
 8002598:	7b7b      	ldrb	r3, [r7, #13]
 800259a:	b21b      	sxth	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	b21b      	sxth	r3, r3
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f8a7 3015 	strh.w	r3, [r7, #21]
	ret_header.seq = temp_data[3];
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	75fb      	strb	r3, [r7, #23]
	ret_header.crc = temp_data[4];
 80025aa:	7c3b      	ldrb	r3, [r7, #16]
 80025ac:	763b      	strb	r3, [r7, #24]
	int crc_check = verify_CRC8_check_sum(temp_data, 5);
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	2105      	movs	r1, #5
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fd41 	bl	800103c <verify_CRC8_check_sum>
 80025ba:	4603      	mov	r3, r0
 80025bc:	61fb      	str	r3, [r7, #28]
	ret_header.cmd_id = (temp_data[6]) << 8 | temp_data[5];
 80025be:	7cbb      	ldrb	r3, [r7, #18]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	7c7b      	ldrb	r3, [r7, #17]
 80025c6:	b21b      	sxth	r3, r3
 80025c8:	4313      	orrs	r3, r2
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f8a7 3019 	strh.w	r3, [r7, #25]
	if (!crc_check || ret_header.data_length > TQUEUE_SIZE || ret_header.cmd_id > 0x305) {
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00c      	beq.n	80025f2 <ref_get_header+0xaa>
 80025d8:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e2:	d806      	bhi.n	80025f2 <ref_get_header+0xaa>
 80025e4:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f240 3205 	movw	r2, #773	; 0x305
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d913      	bls.n	800261a <ref_get_header+0xd2>
		ret_header.cmd_id=0xFFFF;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	767b      	strb	r3, [r7, #25]
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	76bb      	strb	r3, [r7, #26]
		queue_pop_element(data_buffer);
 80025fe:	6838      	ldr	r0, [r7, #0]
 8002600:	f7ff fe0c 	bl	800221c <queue_pop_element>
		return ret_header;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	461a      	mov	r2, r3
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	6010      	str	r0, [r2, #0]
 8002610:	8899      	ldrh	r1, [r3, #4]
 8002612:	799b      	ldrb	r3, [r3, #6]
 8002614:	8091      	strh	r1, [r2, #4]
 8002616:	7193      	strb	r3, [r2, #6]
 8002618:	e009      	b.n	800262e <ref_get_header+0xe6>
	}
//	queue_remove_number(data_buffer, REF_HEADER_SIZE);
	return ret_header;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	461a      	mov	r2, r3
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	6010      	str	r0, [r2, #0]
 8002626:	8899      	ldrh	r1, [r3, #4]
 8002628:	799b      	ldrb	r3, [r3, #6]
 800262a:	8091      	strh	r1, [r2, #4]
 800262c:	7193      	strb	r3, [r2, #6]
}
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <ref_get_msg>:



ref_msg_t ref_get_msg(ref_frame_header_t header,queue_t *uart_queue) {
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b0d8      	sub	sp, #352	; 0x160
 800263c:	af00      	add	r7, sp, #0
 800263e:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 8002642:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 8002646:	6020      	str	r0, [r4, #0]
 8002648:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 800264c:	f5a0 70ae 	sub.w	r0, r0, #348	; 0x15c
 8002650:	e880 0006 	stmia.w	r0, {r1, r2}
 8002654:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002658:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800265c:	6013      	str	r3, [r2, #0]
	uint8_t temp_buffer[TQUEUE_SIZE];
	ref_msg_t buffer_msg;
	//+ 2 for CRC16
	queue_pop_elements(uart_queue, temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 800265e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002662:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002666:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800266a:	b29b      	uxth	r3, r3
 800266c:	3309      	adds	r3, #9
 800266e:	b29a      	uxth	r2, r3
 8002670:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002674:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002678:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	f7ff fe03 	bl	8002288 <queue_pop_elements>

	uint32_t crc_test = verify_CRC16_check_sum(temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002682:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002686:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800268a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800268e:	b29b      	uxth	r3, r3
 8002690:	3309      	adds	r3, #9
 8002692:	461a      	mov	r2, r3
 8002694:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fd22 	bl	80010e4 <verify_CRC16_check_sum>
 80026a0:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	if (!crc_test){
 80026a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d116      	bne.n	80026da <ref_get_msg+0xa2>
		buffer_msg.cmd_id = 0xFFFF;
 80026ac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b8:	801a      	strh	r2, [r3, #0]
		return buffer_msg;
 80026ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	2342      	movs	r3, #66	; 0x42
 80026d2:	461a      	mov	r2, r3
 80026d4:	f016 fcdf 	bl	8019096 <memcpy>
 80026d8:	e19f      	b.n	8002a1a <ref_get_msg+0x3e2>
	}
	//shift 2 bytes to the right to get pointer to the actual start of data
	uint8_t* data_buffer = temp_buffer+2+REF_HEADER_SIZE;
 80026da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026de:	3307      	adds	r3, #7
 80026e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	buffer_msg.cmd_id = header.cmd_id;
 80026e4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026e8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80026ec:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026fa:	801a      	strh	r2, [r3, #0]
	switch (header.cmd_id) {
 80026fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002700:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002704:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002708:	b29b      	uxth	r3, r3
 800270a:	f240 3202 	movw	r2, #770	; 0x302
 800270e:	4293      	cmp	r3, r2
 8002710:	f000 815c 	beq.w	80029cc <ref_get_msg+0x394>
 8002714:	f240 3202 	movw	r2, #770	; 0x302
 8002718:	4293      	cmp	r3, r2
 800271a:	f300 8167 	bgt.w	80029ec <ref_get_msg+0x3b4>
 800271e:	f240 3201 	movw	r2, #769	; 0x301
 8002722:	4293      	cmp	r3, r2
 8002724:	f000 8146 	beq.w	80029b4 <ref_get_msg+0x37c>
 8002728:	f240 3201 	movw	r2, #769	; 0x301
 800272c:	4293      	cmp	r3, r2
 800272e:	f300 815d 	bgt.w	80029ec <ref_get_msg+0x3b4>
 8002732:	f240 220a 	movw	r2, #522	; 0x20a
 8002736:	4293      	cmp	r3, r2
 8002738:	f300 8158 	bgt.w	80029ec <ref_get_msg+0x3b4>
 800273c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002740:	dc04      	bgt.n	800274c <ref_get_msg+0x114>
 8002742:	2b04      	cmp	r3, #4
 8002744:	dc40      	bgt.n	80027c8 <ref_get_msg+0x190>
 8002746:	2b00      	cmp	r3, #0
 8002748:	dc2e      	bgt.n	80027a8 <ref_get_msg+0x170>
 800274a:	e14f      	b.n	80029ec <ref_get_msg+0x3b4>
 800274c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8002750:	2b09      	cmp	r3, #9
 8002752:	f200 814b 	bhi.w	80029ec <ref_get_msg+0x3b4>
 8002756:	a201      	add	r2, pc, #4	; (adr r2, 800275c <ref_get_msg+0x124>)
 8002758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275c:	080028b1 	.word	0x080028b1
 8002760:	080028e1 	.word	0x080028e1
 8002764:	08002901 	.word	0x08002901
 8002768:	08002921 	.word	0x08002921
 800276c:	08002933 	.word	0x08002933
 8002770:	08002945 	.word	0x08002945
 8002774:	08002957 	.word	0x08002957
 8002778:	08002973 	.word	0x08002973
 800277c:	0800298b 	.word	0x0800298b
 8002780:	080029a1 	.word	0x080029a1
 8002784:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002788:	2b04      	cmp	r3, #4
 800278a:	f200 812f 	bhi.w	80029ec <ref_get_msg+0x3b4>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <ref_get_msg+0x15c>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	08002847 	.word	0x08002847
 8002798:	0800285d 	.word	0x0800285d
 800279c:	08002873 	.word	0x08002873
 80027a0:	0800288b 	.word	0x0800288b
 80027a4:	0800289f 	.word	0x0800289f
 80027a8:	3b01      	subs	r3, #1
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	f200 811e 	bhi.w	80029ec <ref_get_msg+0x3b4>
 80027b0:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <ref_get_msg+0x180>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027d9 	.word	0x080027d9
 80027bc:	080027f1 	.word	0x080027f1
 80027c0:	08002803 	.word	0x08002803
 80027c4:	0800282f 	.word	0x0800282f
 80027c8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80027cc:	f280 810e 	bge.w	80029ec <ref_get_msg+0x3b4>
 80027d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d4:	dcd6      	bgt.n	8002784 <ref_get_msg+0x14c>
 80027d6:	e109      	b.n	80029ec <ref_get_msg+0x3b4>
	case REF_GAME_STATE_CMD_ID:
		memcpy(&buffer_msg.data.game_state, 	(data_buffer), sizeof(ref_game_state_t));
 80027d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80027dc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027e0:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80027e4:	3302      	adds	r3, #2
 80027e6:	8811      	ldrh	r1, [r2, #0]
 80027e8:	7892      	ldrb	r2, [r2, #2]
 80027ea:	8019      	strh	r1, [r3, #0]
 80027ec:	709a      	strb	r2, [r3, #2]
		break;
 80027ee:	e105      	b.n	80029fc <ref_get_msg+0x3c4>
 80027f0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80027f4:	781a      	ldrb	r2, [r3, #0]
	case REF_GAME_RESULT_ID:
		memcpy(&buffer_msg.data.game_result, 	(data_buffer), sizeof(ref_game_result_t));
 80027f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80027fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027fe:	709a      	strb	r2, [r3, #2]
		break;
 8002800:	e0fc      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_ROBOT_HP_CMD_ID:
		memcpy(&buffer_msg.data.robot_hp, 		(data_buffer), sizeof(ref_game_robot_HP_t));
 8002802:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002806:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800280a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800280e:	3302      	adds	r3, #2
 8002810:	6814      	ldr	r4, [r2, #0]
 8002812:	6850      	ldr	r0, [r2, #4]
 8002814:	6891      	ldr	r1, [r2, #8]
 8002816:	68d5      	ldr	r5, [r2, #12]
 8002818:	601c      	str	r4, [r3, #0]
 800281a:	6058      	str	r0, [r3, #4]
 800281c:	6099      	str	r1, [r3, #8]
 800281e:	60dd      	str	r5, [r3, #12]
 8002820:	6914      	ldr	r4, [r2, #16]
 8002822:	6950      	ldr	r0, [r2, #20]
 8002824:	6991      	ldr	r1, [r2, #24]
 8002826:	611c      	str	r4, [r3, #16]
 8002828:	6158      	str	r0, [r3, #20]
 800282a:	6199      	str	r1, [r3, #24]
		break;
 800282c:	e0e6      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_DART_LAUNCH_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_status, 	(data_buffer), sizeof(ref_dart_status_t));
 800282e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002832:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002836:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800283a:	3302      	adds	r3, #2
 800283c:	8811      	ldrh	r1, [r2, #0]
 800283e:	7892      	ldrb	r2, [r2, #2]
 8002840:	8019      	strh	r1, [r3, #0]
 8002842:	709a      	strb	r2, [r3, #2]
		break;
 8002844:	e0da      	b.n	80029fc <ref_get_msg+0x3c4>
 8002846:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
	case REF_GAME_EVENT_CMD_ID:
		memcpy(&buffer_msg.data.game_event, 	(data_buffer), sizeof(ref_game_event_data_t));
 800284e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002852:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002856:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 800285a:	e0cf      	b.n	80029fc <ref_get_msg+0x3c4>
 800285c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
	case REF_SUPPLIER_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_state, (data_buffer),sizeof(ref_supply_projectile_data_t));
 8002864:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002868:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800286c:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002870:	e0c4      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_SUPPLIER_BOOKING_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_queue, (data_buffer),sizeof(ref_supply_projectile_booking_t));
 8002872:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002876:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800287a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800287e:	3302      	adds	r3, #2
 8002880:	8811      	ldrh	r1, [r2, #0]
 8002882:	7892      	ldrb	r2, [r2, #2]
 8002884:	8019      	strh	r1, [r3, #0]
 8002886:	709a      	strb	r2, [r3, #2]
		break;
 8002888:	e0b8      	b.n	80029fc <ref_get_msg+0x3c4>
 800288a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b29a      	uxth	r2, r3
	case REF_FOUL_CMD_ID:
		memcpy(&buffer_msg.data.referee_warning,(data_buffer), sizeof(ref_referee_warning_t));
 8002892:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002896:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800289a:	805a      	strh	r2, [r3, #2]
		break;
 800289c:	e0ae      	b.n	80029fc <ref_get_msg+0x3c4>
 800289e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028a2:	781a      	ldrb	r2, [r3, #0]
	case REF_DART_COOLDOWN_CMD_ID:
		memcpy(&buffer_msg.data.dart_cooldown, 	(data_buffer), sizeof(ref_dart_cooldown_t));
 80028a4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028ac:	709a      	strb	r2, [r3, #2]
		break;
 80028ae:	e0a5      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_ROBOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_state, 	(data_buffer), sizeof(ref_game_robot_data_t));
 80028b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028b8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80028bc:	3302      	adds	r3, #2
 80028be:	6810      	ldr	r0, [r2, #0]
 80028c0:	6851      	ldr	r1, [r2, #4]
 80028c2:	6895      	ldr	r5, [r2, #8]
 80028c4:	68d4      	ldr	r4, [r2, #12]
 80028c6:	6018      	str	r0, [r3, #0]
 80028c8:	6059      	str	r1, [r3, #4]
 80028ca:	609d      	str	r5, [r3, #8]
 80028cc:	60dc      	str	r4, [r3, #12]
 80028ce:	6910      	ldr	r0, [r2, #16]
 80028d0:	6951      	ldr	r1, [r2, #20]
 80028d2:	6118      	str	r0, [r3, #16]
 80028d4:	6159      	str	r1, [r3, #20]
 80028d6:	8b11      	ldrh	r1, [r2, #24]
 80028d8:	7e92      	ldrb	r2, [r2, #26]
 80028da:	8319      	strh	r1, [r3, #24]
 80028dc:	769a      	strb	r2, [r3, #26]
		break;
 80028de:	e08d      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_ROBOT_POWER_DATA_CMD_ID:
		memcpy(&buffer_msg.data.power_data, 	(data_buffer), sizeof(ref_robot_power_data_t));
 80028e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028e8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80028ec:	3302      	adds	r3, #2
 80028ee:	6814      	ldr	r4, [r2, #0]
 80028f0:	6850      	ldr	r0, [r2, #4]
 80028f2:	6891      	ldr	r1, [r2, #8]
 80028f4:	601c      	str	r4, [r3, #0]
 80028f6:	6058      	str	r0, [r3, #4]
 80028f8:	6099      	str	r1, [r3, #8]
 80028fa:	8992      	ldrh	r2, [r2, #12]
 80028fc:	819a      	strh	r2, [r3, #12]
		break;
 80028fe:	e07d      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_ROBOT_POS_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_pos, 		(data_buffer), sizeof(ref_game_robot_pos_t));
 8002900:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002904:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002908:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800290c:	3302      	adds	r3, #2
 800290e:	6814      	ldr	r4, [r2, #0]
 8002910:	6850      	ldr	r0, [r2, #4]
 8002912:	6891      	ldr	r1, [r2, #8]
 8002914:	68d2      	ldr	r2, [r2, #12]
 8002916:	601c      	str	r4, [r3, #0]
 8002918:	6058      	str	r0, [r3, #4]
 800291a:	6099      	str	r1, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
		break;
 800291e:	e06d      	b.n	80029fc <ref_get_msg+0x3c4>
 8002920:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002924:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_buff, 	(data_buffer), sizeof(ref_buff_data_t));
 8002926:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800292a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800292e:	709a      	strb	r2, [r3, #2]
		break;
 8002930:	e064      	b.n	80029fc <ref_get_msg+0x3c4>
 8002932:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002936:	781a      	ldrb	r2, [r3, #0]
	case REF_AERIAL_ENERGY_DATA_CMD_ID:
		memcpy(&buffer_msg.data.aerial_energy, 	(data_buffer), sizeof(ref_aerial_robot_energy_t));
 8002938:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800293c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002940:	709a      	strb	r2, [r3, #2]
		break;
 8002942:	e05b      	b.n	80029fc <ref_get_msg+0x3c4>
 8002944:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002948:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_DMG_DATA_CMD_ID:
		memcpy(&buffer_msg.data.damage_data, 	(data_buffer), sizeof(ref_robot_dmg_t));
 800294a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800294e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002952:	709a      	strb	r2, [r3, #2]
		break;
 8002954:	e052      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_ROBOT_SHOOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.shooting_data, 	(data_buffer), sizeof(ref_shoot_data_t));
 8002956:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800295a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800295e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002962:	3302      	adds	r3, #2
 8002964:	6811      	ldr	r1, [r2, #0]
 8002966:	6019      	str	r1, [r3, #0]
 8002968:	8891      	ldrh	r1, [r2, #4]
 800296a:	7992      	ldrb	r2, [r2, #6]
 800296c:	8099      	strh	r1, [r3, #4]
 800296e:	719a      	strb	r2, [r3, #6]
		break;
 8002970:	e044      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_ROBOT_MAGAZINE_DATA_CMD_ID:
		memcpy(&buffer_msg.data.magazine_data, 	(data_buffer), sizeof(ref_magazine_data_t));
 8002972:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002976:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800297a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800297e:	3302      	adds	r3, #2
 8002980:	6811      	ldr	r1, [r2, #0]
 8002982:	6019      	str	r1, [r3, #0]
 8002984:	8892      	ldrh	r2, [r2, #4]
 8002986:	809a      	strh	r2, [r3, #4]
		break;
 8002988:	e038      	b.n	80029fc <ref_get_msg+0x3c4>
 800298a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
	case REF_ROBOT_RFID_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.rfid_buff, 		(data_buffer), sizeof(ref_rfid_status_t));
 8002992:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002996:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800299a:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 800299e:	e02d      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_DART_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_cmd, 		(data_buffer), sizeof(ref_dart_status_t));
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	3302      	adds	r3, #2
 80029a6:	2203      	movs	r2, #3
 80029a8:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80029ac:	4618      	mov	r0, r3
 80029ae:	f016 fb72 	bl	8019096 <memcpy>
		break;
 80029b2:	e023      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_ROBOT_COMMS_CMD_ID:
		memcpy(&buffer_msg.data.robot_comms, 	(data_buffer), sizeof(ref_inter_robot_data_t));
 80029b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029bc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80029c0:	3302      	adds	r3, #2
 80029c2:	6811      	ldr	r1, [r2, #0]
 80029c4:	6019      	str	r1, [r3, #0]
 80029c6:	8892      	ldrh	r2, [r2, #4]
 80029c8:	809a      	strh	r2, [r3, #4]
		break;
 80029ca:	e017      	b.n	80029fc <ref_get_msg+0x3c4>
	case REF_CUSTOM_DATA_CMD_ID:
		memcpy(&buffer_msg.data.custom_data, 	(data_buffer), sizeof(ref_custom_data_t));
 80029cc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029d4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80029d8:	3302      	adds	r3, #2
 80029da:	6814      	ldr	r4, [r2, #0]
 80029dc:	6850      	ldr	r0, [r2, #4]
 80029de:	6891      	ldr	r1, [r2, #8]
 80029e0:	601c      	str	r4, [r3, #0]
 80029e2:	6058      	str	r0, [r3, #4]
 80029e4:	6099      	str	r1, [r3, #8]
 80029e6:	7b12      	ldrb	r2, [r2, #12]
 80029e8:	731a      	strb	r2, [r3, #12]
		break;
 80029ea:	e007      	b.n	80029fc <ref_get_msg+0x3c4>
	default:
		buffer_msg.cmd_id = 0xFFFF;
 80029ec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f8:	801a      	strh	r2, [r3, #0]
		break;
 80029fa:	bf00      	nop
	}
	//remove cmd id + data
	return buffer_msg;
 80029fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a00:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	2342      	movs	r3, #66	; 0x42
 8002a14:	461a      	mov	r2, r3
 8002a16:	f016 fb3e 	bl	8019096 <memcpy>
}
 8002a1a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bdb0      	pop	{r4, r5, r7, pc}

08002a2c <ref_usart_start>:
HAL_StatusTypeDef ref_usart_send(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size){
	return HAL_UART_Transmit_DMA(huart, pData, Size);
}

HAL_StatusTypeDef ref_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	ref_UART_queue = uart_queue;
 8002a3c:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <ref_usart_start+0xfc>)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6013      	str	r3, [r2, #0]
	queue_init(ref_UART_queue);
 8002a42:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <ref_usart_start+0xfc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fb5c 	bl	8002104 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d162      	bne.n	8002b1e <ref_usart_start+0xf2>
		if ((pData == NULL) || (Size == 0U))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <ref_usart_start+0x38>
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <ref_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e05b      	b.n	8002b20 <ref_usart_start+0xf4>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <ref_usart_start+0x4a>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e054      	b.n	8002b20 <ref_usart_start+0xf4>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2222      	movs	r2, #34	; 0x22
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback 	= ref_full_cplt_isr;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <ref_usart_start+0x100>)
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = ref_half_cplt_isr;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <ref_usart_start+0x104>)
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	2200      	movs	r2, #0
 8002aae:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002ab0:	f107 0308 	add.w	r3, r7, #8
 8002ab4:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	f007 ff8a 	bl	800a9e0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af8:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b18:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <ref_usart_start+0xf4>
	} else {
		return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
	}
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	2000039c 	.word	0x2000039c
 8002b2c:	08002b5d 	.word	0x08002b5d
 8002b30:	08002b35 	.word	0x08002b35

08002b34 <ref_half_cplt_isr>:


void ref_half_cplt_isr(DMA_HandleTypeDef *hdma){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <ref_half_cplt_isr+0x24>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f7ff fb0b 	bl	8002166 <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	2000039c 	.word	0x2000039c

08002b5c <ref_full_cplt_isr>:

void ref_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M0AR+1));
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <ref_full_cplt_isr+0x28>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f7ff faf6 	bl	8002166 <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M1AR+1));
//	}
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000039c 	.word	0x2000039c

08002b88 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b8e:	463b      	mov	r3, r7
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002b9c:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <MX_ADC3_Init+0x9c>)
 8002b9e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ba0:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002ba2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ba6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bc2:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <MX_ADC3_Init+0xa0>)
 8002bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002be8:	480d      	ldr	r0, [pc, #52]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002bea:	f006 fc87 	bl	80094fc <HAL_ADC_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002bf4:	f000 fe03 	bl	80037fe <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c04:	463b      	mov	r3, r7
 8002c06:	4619      	mov	r1, r3
 8002c08:	4805      	ldr	r0, [pc, #20]	; (8002c20 <MX_ADC3_Init+0x98>)
 8002c0a:	f006 fcbb 	bl	8009584 <HAL_ADC_ConfigChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002c14:	f000 fdf3 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200003a0 	.word	0x200003a0
 8002c24:	40012200 	.word	0x40012200
 8002c28:	0f000001 	.word	0x0f000001

08002c2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <HAL_ADC_MspInit+0x7c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d128      	bne.n	8002ca0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_ADC_MspInit+0x80>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a15      	ldr	r2, [pc, #84]	; (8002cac <HAL_ADC_MspInit+0x80>)
 8002c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_ADC_MspInit+0x80>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <HAL_ADC_MspInit+0x80>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <HAL_ADC_MspInit+0x80>)
 8002c74:	f043 0320 	orr.w	r3, r3, #32
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_ADC_MspInit+0x80>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <HAL_ADC_MspInit+0x84>)
 8002c9c:	f008 fa00 	bl	800b0a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40012200 	.word	0x40012200
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40021400 	.word	0x40021400

08002cb4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002cb8:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002cba:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <MX_CAN1_Init+0x68>)
 8002cbc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002cbe:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002cd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cd6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002cda:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002cde:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002d04:	4804      	ldr	r0, [pc, #16]	; (8002d18 <MX_CAN1_Init+0x64>)
 8002d06:	f006 fe5b 	bl	80099c0 <HAL_CAN_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002d10:	f000 fd75 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200003e8 	.word	0x200003e8
 8002d1c:	40006400 	.word	0x40006400

08002d20 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <MX_CAN2_Init+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d42:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d46:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002d4a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002d70:	4804      	ldr	r0, [pc, #16]	; (8002d84 <MX_CAN2_Init+0x64>)
 8002d72:	f006 fe25 	bl	80099c0 <HAL_CAN_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002d7c:	f000 fd3f 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000410 	.word	0x20000410
 8002d88:	40006800 	.word	0x40006800

08002d8c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_CAN_MspInit+0x168>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d145      	bne.n	8002e3a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002dae:	4b52      	ldr	r3, [pc, #328]	; (8002ef8 <HAL_CAN_MspInit+0x16c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	4a50      	ldr	r2, [pc, #320]	; (8002ef8 <HAL_CAN_MspInit+0x16c>)
 8002db6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002db8:	4b4f      	ldr	r3, [pc, #316]	; (8002ef8 <HAL_CAN_MspInit+0x16c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10d      	bne.n	8002ddc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	4a4c      	ldr	r2, [pc, #304]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dce:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd0:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	4a45      	ldr	r2, [pc, #276]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6313      	str	r3, [r2, #48]	; 0x30
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002e08:	2309      	movs	r3, #9
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	4619      	mov	r1, r3
 8002e12:	483b      	ldr	r0, [pc, #236]	; (8002f00 <HAL_CAN_MspInit+0x174>)
 8002e14:	f008 f944 	bl	800b0a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2105      	movs	r1, #5
 8002e1c:	2014      	movs	r0, #20
 8002e1e:	f007 fd07 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002e22:	2014      	movs	r0, #20
 8002e24:	f007 fd20 	bl	800a868 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2105      	movs	r1, #5
 8002e2c:	2015      	movs	r0, #21
 8002e2e:	f007 fcff 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002e32:	2015      	movs	r0, #21
 8002e34:	f007 fd18 	bl	800a868 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002e38:	e057      	b.n	8002eea <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <HAL_CAN_MspInit+0x178>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d152      	bne.n	8002eea <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e52:	6413      	str	r3, [r2, #64]	; 0x40
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e60:	4b25      	ldr	r3, [pc, #148]	; (8002ef8 <HAL_CAN_MspInit+0x16c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <HAL_CAN_MspInit+0x16c>)
 8002e68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_CAN_MspInit+0x16c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10d      	bne.n	8002e8e <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b21      	ldr	r3, [pc, #132]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a20      	ldr	r2, [pc, #128]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002e7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_CAN_MspInit+0x170>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002eaa:	2360      	movs	r3, #96	; 0x60
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002eba:	2309      	movs	r3, #9
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4810      	ldr	r0, [pc, #64]	; (8002f08 <HAL_CAN_MspInit+0x17c>)
 8002ec6:	f008 f8eb 	bl	800b0a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2105      	movs	r1, #5
 8002ece:	2040      	movs	r0, #64	; 0x40
 8002ed0:	f007 fcae 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002ed4:	2040      	movs	r0, #64	; 0x40
 8002ed6:	f007 fcc7 	bl	800a868 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2105      	movs	r1, #5
 8002ede:	2041      	movs	r0, #65	; 0x41
 8002ee0:	f007 fca6 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002ee4:	2041      	movs	r0, #65	; 0x41
 8002ee6:	f007 fcbf 	bl	800a868 <HAL_NVIC_EnableIRQ>
}
 8002eea:	bf00      	nop
 8002eec:	3730      	adds	r7, #48	; 0x30
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40006400 	.word	0x40006400
 8002ef8:	20000438 	.word	0x20000438
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40006800 	.word	0x40006800
 8002f08:	40020400 	.word	0x40020400

08002f0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <MX_DMA_Init+0xc8>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a2e      	ldr	r2, [pc, #184]	; (8002fd4 <MX_DMA_Init+0xc8>)
 8002f1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <MX_DMA_Init+0xc8>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <MX_DMA_Init+0xc8>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <MX_DMA_Init+0xc8>)
 8002f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <MX_DMA_Init+0xc8>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2105      	movs	r1, #5
 8002f4e:	200c      	movs	r0, #12
 8002f50:	f007 fc6e 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002f54:	200c      	movs	r0, #12
 8002f56:	f007 fc87 	bl	800a868 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2105      	movs	r1, #5
 8002f5e:	200d      	movs	r0, #13
 8002f60:	f007 fc66 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002f64:	200d      	movs	r0, #13
 8002f66:	f007 fc7f 	bl	800a868 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2105      	movs	r1, #5
 8002f6e:	200f      	movs	r0, #15
 8002f70:	f007 fc5e 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002f74:	200f      	movs	r0, #15
 8002f76:	f007 fc77 	bl	800a868 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2105      	movs	r1, #5
 8002f7e:	2038      	movs	r0, #56	; 0x38
 8002f80:	f007 fc56 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002f84:	2038      	movs	r0, #56	; 0x38
 8002f86:	f007 fc6f 	bl	800a868 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2105      	movs	r1, #5
 8002f8e:	2039      	movs	r0, #57	; 0x39
 8002f90:	f007 fc4e 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002f94:	2039      	movs	r0, #57	; 0x39
 8002f96:	f007 fc67 	bl	800a868 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2105      	movs	r1, #5
 8002f9e:	203b      	movs	r0, #59	; 0x3b
 8002fa0:	f007 fc46 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002fa4:	203b      	movs	r0, #59	; 0x3b
 8002fa6:	f007 fc5f 	bl	800a868 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2105      	movs	r1, #5
 8002fae:	2044      	movs	r0, #68	; 0x44
 8002fb0:	f007 fc3e 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002fb4:	2044      	movs	r0, #68	; 0x44
 8002fb6:	f007 fc57 	bl	800a868 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2105      	movs	r1, #5
 8002fbe:	2045      	movs	r0, #69	; 0x45
 8002fc0:	f007 fc36 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002fc4:	2045      	movs	r0, #69	; 0x45
 8002fc6:	f007 fc4f 	bl	800a868 <HAL_NVIC_EnableIRQ>

}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
	return 0;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <vApplicationGetIdleTaskMemory+0x2c>)
 800301c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4a06      	ldr	r2, [pc, #24]	; (800303c <vApplicationGetIdleTaskMemory+0x30>)
 8003022:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f44f 7280 	mov.w	r2, #256	; 0x100
 800302a:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	20000484 	.word	0x20000484
 800303c:	20000544 	.word	0x20000544

08003040 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <vApplicationGetTimerTaskMemory+0x2c>)
 8003050:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4a06      	ldr	r2, [pc, #24]	; (8003070 <vApplicationGetTimerTaskMemory+0x30>)
 8003056:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305e:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	20000944 	.word	0x20000944
 8003070:	20000a04 	.word	0x20000a04

08003074 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003074:	b5b0      	push	{r4, r5, r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af02      	add	r7, sp, #8
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	gimbal_event_group = xEventGroupCreate();
 800307a:	f012 f8b8 	bl	80151ee <xEventGroupCreate>
 800307e:	4603      	mov	r3, r0
 8003080:	4a5a      	ldr	r2, [pc, #360]	; (80031ec <MX_FREERTOS_Init+0x178>)
 8003082:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 8003084:	f012 f8b3 	bl	80151ee <xEventGroupCreate>
 8003088:	4603      	mov	r3, r0
 800308a:	4a59      	ldr	r2, [pc, #356]	; (80031f0 <MX_FREERTOS_Init+0x17c>)
 800308c:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 800308e:	f012 f8ae 	bl	80151ee <xEventGroupCreate>
 8003092:	4603      	mov	r3, r0
 8003094:	4a57      	ldr	r2, [pc, #348]	; (80031f4 <MX_FREERTOS_Init+0x180>)
 8003096:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 8003098:	2203      	movs	r2, #3
 800309a:	2100      	movs	r1, #0
 800309c:	2001      	movs	r0, #1
 800309e:	f012 fc29 	bl	80158f4 <xQueueGenericCreate>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a54      	ldr	r2, [pc, #336]	; (80031f8 <MX_FREERTOS_Init+0x184>)
 80030a6:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 80030a8:	2200      	movs	r2, #0
 80030aa:	2110      	movs	r1, #16
 80030ac:	2005      	movs	r0, #5
 80030ae:	f012 fc21 	bl	80158f4 <xQueueGenericCreate>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4a51      	ldr	r2, [pc, #324]	; (80031fc <MX_FREERTOS_Init+0x188>)
 80030b6:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 80030b8:	2200      	movs	r2, #0
 80030ba:	2110      	movs	r1, #16
 80030bc:	2005      	movs	r0, #5
 80030be:	f012 fc19 	bl	80158f4 <xQueueGenericCreate>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4a4e      	ldr	r2, [pc, #312]	; (8003200 <MX_FREERTOS_Init+0x18c>)
 80030c6:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 80030c8:	2200      	movs	r2, #0
 80030ca:	210c      	movs	r1, #12
 80030cc:	2005      	movs	r0, #5
 80030ce:	f012 fc11 	bl	80158f4 <xQueueGenericCreate>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4a4b      	ldr	r2, [pc, #300]	; (8003204 <MX_FREERTOS_Init+0x190>)
 80030d6:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	buzzing_task_msg = xQueueCreate(48, sizeof(uint8_t));
 80030d8:	2200      	movs	r2, #0
 80030da:	2101      	movs	r1, #1
 80030dc:	2030      	movs	r0, #48	; 0x30
 80030de:	f012 fc09 	bl	80158f4 <xQueueGenericCreate>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4a48      	ldr	r2, [pc, #288]	; (8003208 <MX_FREERTOS_Init+0x194>)
 80030e6:	6013      	str	r3, [r2, #0]
	uart_data_queue = xQueueCreate(5, sizeof(ref_msg_t));
 80030e8:	2200      	movs	r2, #0
 80030ea:	2142      	movs	r1, #66	; 0x42
 80030ec:	2005      	movs	r0, #5
 80030ee:	f012 fc01 	bl	80158f4 <xQueueGenericCreate>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4a45      	ldr	r2, [pc, #276]	; (800320c <MX_FREERTOS_Init+0x198>)
 80030f6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80030f8:	4b45      	ldr	r3, [pc, #276]	; (8003210 <MX_FREERTOS_Init+0x19c>)
 80030fa:	1d3c      	adds	r4, r7, #4
 80030fc:	461d      	mov	r5, r3
 80030fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003102:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f012 f80d 	bl	801512e <osThreadCreate>
 8003114:	4603      	mov	r3, r0
 8003116:	4a3f      	ldr	r2, [pc, #252]	; (8003214 <MX_FREERTOS_Init+0x1a0>)
 8003118:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//todo: adjust priorities
	//Threads creation
	xTaskCreate(imu_processing_task, "IMU_task",
 800311a:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <MX_FREERTOS_Init+0x1a4>)
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	230f      	movs	r3, #15
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2301      	movs	r3, #1
 8003124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003128:	493c      	ldr	r1, [pc, #240]	; (800321c <MX_FREERTOS_Init+0x1a8>)
 800312a:	483d      	ldr	r0, [pc, #244]	; (8003220 <MX_FREERTOS_Init+0x1ac>)
 800312c:	f013 f885 	bl	801623a <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 15,
			&imu_processing_task_handle);

	xTaskCreate(motor_calib_task, "motor_calib_task",
 8003130:	4b3c      	ldr	r3, [pc, #240]	; (8003224 <MX_FREERTOS_Init+0x1b0>)
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	2309      	movs	r3, #9
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2301      	movs	r3, #1
 800313a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313e:	493a      	ldr	r1, [pc, #232]	; (8003228 <MX_FREERTOS_Init+0x1b4>)
 8003140:	483a      	ldr	r0, [pc, #232]	; (800322c <MX_FREERTOS_Init+0x1b8>)
 8003142:	f013 f87a 	bl	801623a <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 9,
			&motor_calib_task_handle);

	if (gimbal_event_group == NULL) {
 8003146:	4b29      	ldr	r3, [pc, #164]	; (80031ec <MX_FREERTOS_Init+0x178>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <MX_FREERTOS_Init+0xf0>
		//error handler implement next time!
	} else {
		xTaskCreate(gimbal_control_task, "gimbal_task",
 800314e:	4b38      	ldr	r3, [pc, #224]	; (8003230 <MX_FREERTOS_Init+0x1bc>)
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	2307      	movs	r3, #7
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	2301      	movs	r3, #1
 8003158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800315c:	4935      	ldr	r1, [pc, #212]	; (8003234 <MX_FREERTOS_Init+0x1c0>)
 800315e:	4836      	ldr	r0, [pc, #216]	; (8003238 <MX_FREERTOS_Init+0x1c4>)
 8003160:	f013 f86b 	bl	801623a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 7,
				&gimbal_control_task_handle);

	}

	if (chassis_event_group == NULL) {
 8003164:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <MX_FREERTOS_Init+0x17c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <MX_FREERTOS_Init+0x10e>
		//error handler
	} else {
		xTaskCreate(movement_control_task, "chassis_task",
 800316c:	4b33      	ldr	r3, [pc, #204]	; (800323c <MX_FREERTOS_Init+0x1c8>)
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	2304      	movs	r3, #4
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2301      	movs	r3, #1
 8003176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800317a:	4931      	ldr	r1, [pc, #196]	; (8003240 <MX_FREERTOS_Init+0x1cc>)
 800317c:	4831      	ldr	r0, [pc, #196]	; (8003244 <MX_FREERTOS_Init+0x1d0>)
 800317e:	f013 f85c 	bl	801623a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&movement_control_task_handle);
	}

	if (launcher_event_group == NULL) {
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <MX_FREERTOS_Init+0x180>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <MX_FREERTOS_Init+0x12c>
		//error handler
	} else {
		xTaskCreate(launcher_control_task, "launcher_task",
 800318a:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <MX_FREERTOS_Init+0x1d4>)
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	2304      	movs	r3, #4
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2301      	movs	r3, #1
 8003194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003198:	492c      	ldr	r1, [pc, #176]	; (800324c <MX_FREERTOS_Init+0x1d8>)
 800319a:	482d      	ldr	r0, [pc, #180]	; (8003250 <MX_FREERTOS_Init+0x1dc>)
 800319c:	f013 f84d 	bl	801623a <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&launcher_control_task_handle);
	}

	xTaskCreate(control_input_task, "RC_task",
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <MX_FREERTOS_Init+0x1e0>)
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	2304      	movs	r3, #4
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2301      	movs	r3, #1
 80031aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ae:	492a      	ldr	r1, [pc, #168]	; (8003258 <MX_FREERTOS_Init+0x1e4>)
 80031b0:	482a      	ldr	r0, [pc, #168]	; (800325c <MX_FREERTOS_Init+0x1e8>)
 80031b2:	f013 f842 	bl	801623a <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 4,
			&control_input_task_handle);
	xTaskCreate(referee_processing_task, "referee_task", 2048, (void*) 1,
 80031b6:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <MX_FREERTOS_Init+0x1ec>)
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	2302      	movs	r3, #2
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2301      	movs	r3, #1
 80031c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c4:	4927      	ldr	r1, [pc, #156]	; (8003264 <MX_FREERTOS_Init+0x1f0>)
 80031c6:	4828      	ldr	r0, [pc, #160]	; (8003268 <MX_FREERTOS_Init+0x1f4>)
 80031c8:	f013 f837 	bl	801623a <xTaskCreate>
			(UBaseType_t) 2, &referee_processing_task_handle);
	xTaskCreate(buzzing_task, "buzzer_task",
 80031cc:	4b27      	ldr	r3, [pc, #156]	; (800326c <MX_FREERTOS_Init+0x1f8>)
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	2301      	movs	r3, #1
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2301      	movs	r3, #1
 80031d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031da:	4925      	ldr	r1, [pc, #148]	; (8003270 <MX_FREERTOS_Init+0x1fc>)
 80031dc:	4825      	ldr	r0, [pc, #148]	; (8003274 <MX_FREERTOS_Init+0x200>)
 80031de:	f013 f82c 	bl	801623a <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &buzzing_task_handle);


  /* USER CODE END RTOS_THREADS */

}
 80031e2:	bf00      	nop
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000045c 	.word	0x2000045c
 80031f0:	20000460 	.word	0x20000460
 80031f4:	20000464 	.word	0x20000464
 80031f8:	20000468 	.word	0x20000468
 80031fc:	2000046c 	.word	0x2000046c
 8003200:	20000470 	.word	0x20000470
 8003204:	20000474 	.word	0x20000474
 8003208:	20000478 	.word	0x20000478
 800320c:	2000047c 	.word	0x2000047c
 8003210:	0801f664 	.word	0x0801f664
 8003214:	20000480 	.word	0x20000480
 8003218:	20000458 	.word	0x20000458
 800321c:	0801f5f4 	.word	0x0801f5f4
 8003220:	080060f9 	.word	0x080060f9
 8003224:	20000454 	.word	0x20000454
 8003228:	0801f600 	.word	0x0801f600
 800322c:	08007ccd 	.word	0x08007ccd
 8003230:	2000043c 	.word	0x2000043c
 8003234:	0801f614 	.word	0x0801f614
 8003238:	08005c0d 	.word	0x08005c0d
 800323c:	20000440 	.word	0x20000440
 8003240:	0801f620 	.word	0x0801f620
 8003244:	080089d1 	.word	0x080089d1
 8003248:	2000044c 	.word	0x2000044c
 800324c:	0801f630 	.word	0x0801f630
 8003250:	08006de5 	.word	0x08006de5
 8003254:	20000448 	.word	0x20000448
 8003258:	0801f640 	.word	0x0801f640
 800325c:	080052bd 	.word	0x080052bd
 8003260:	20000444 	.word	0x20000444
 8003264:	0801f648 	.word	0x0801f648
 8003268:	08009001 	.word	0x08009001
 800326c:	20000450 	.word	0x20000450
 8003270:	0801f658 	.word	0x0801f658
 8003274:	08004951 	.word	0x08004951

08003278 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003280:	f015 f8b4 	bl	80183ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8003284:	2001      	movs	r0, #1
 8003286:	f011 ff9e 	bl	80151c6 <osDelay>
 800328a:	e7fb      	b.n	8003284 <StartDefaultTask+0xc>

0800328c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08e      	sub	sp, #56	; 0x38
 8003290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
 80032a6:	4b79      	ldr	r3, [pc, #484]	; (800348c <MX_GPIO_Init+0x200>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a78      	ldr	r2, [pc, #480]	; (800348c <MX_GPIO_Init+0x200>)
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b76      	ldr	r3, [pc, #472]	; (800348c <MX_GPIO_Init+0x200>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	623b      	str	r3, [r7, #32]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <MX_GPIO_Init+0x200>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4a71      	ldr	r2, [pc, #452]	; (800348c <MX_GPIO_Init+0x200>)
 80032c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032cc:	6313      	str	r3, [r2, #48]	; 0x30
 80032ce:	4b6f      	ldr	r3, [pc, #444]	; (800348c <MX_GPIO_Init+0x200>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	4b6b      	ldr	r3, [pc, #428]	; (800348c <MX_GPIO_Init+0x200>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	4a6a      	ldr	r2, [pc, #424]	; (800348c <MX_GPIO_Init+0x200>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ea:	4b68      	ldr	r3, [pc, #416]	; (800348c <MX_GPIO_Init+0x200>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	4b64      	ldr	r3, [pc, #400]	; (800348c <MX_GPIO_Init+0x200>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	4a63      	ldr	r2, [pc, #396]	; (800348c <MX_GPIO_Init+0x200>)
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	6313      	str	r3, [r2, #48]	; 0x30
 8003306:	4b61      	ldr	r3, [pc, #388]	; (800348c <MX_GPIO_Init+0x200>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	4b5d      	ldr	r3, [pc, #372]	; (800348c <MX_GPIO_Init+0x200>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a5c      	ldr	r2, [pc, #368]	; (800348c <MX_GPIO_Init+0x200>)
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b5a      	ldr	r3, [pc, #360]	; (800348c <MX_GPIO_Init+0x200>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b56      	ldr	r3, [pc, #344]	; (800348c <MX_GPIO_Init+0x200>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a55      	ldr	r2, [pc, #340]	; (800348c <MX_GPIO_Init+0x200>)
 8003338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b53      	ldr	r3, [pc, #332]	; (800348c <MX_GPIO_Init+0x200>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b4f      	ldr	r3, [pc, #316]	; (800348c <MX_GPIO_Init+0x200>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a4e      	ldr	r2, [pc, #312]	; (800348c <MX_GPIO_Init+0x200>)
 8003354:	f043 0320 	orr.w	r3, r3, #32
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b4c      	ldr	r3, [pc, #304]	; (800348c <MX_GPIO_Init+0x200>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <MX_GPIO_Init+0x200>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a47      	ldr	r2, [pc, #284]	; (800348c <MX_GPIO_Init+0x200>)
 8003370:	f043 0310 	orr.w	r3, r3, #16
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b45      	ldr	r3, [pc, #276]	; (800348c <MX_GPIO_Init+0x200>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8003382:	2200      	movs	r2, #0
 8003384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003388:	4841      	ldr	r0, [pc, #260]	; (8003490 <MX_GPIO_Init+0x204>)
 800338a:	f008 f825 	bl	800b3d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 800338e:	2200      	movs	r2, #0
 8003390:	2140      	movs	r1, #64	; 0x40
 8003392:	4840      	ldr	r0, [pc, #256]	; (8003494 <MX_GPIO_Init+0x208>)
 8003394:	f008 f820 	bl	800b3d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003398:	2201      	movs	r2, #1
 800339a:	2110      	movs	r1, #16
 800339c:	483e      	ldr	r0, [pc, #248]	; (8003498 <MX_GPIO_Init+0x20c>)
 800339e:	f008 f81b 	bl	800b3d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80033a2:	2201      	movs	r2, #1
 80033a4:	2101      	movs	r1, #1
 80033a6:	483d      	ldr	r0, [pc, #244]	; (800349c <MX_GPIO_Init+0x210>)
 80033a8:	f008 f816 	bl	800b3d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_GPIO_Pin;
 80033ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b2:	2301      	movs	r3, #1
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LASER_GPIO_GPIO_Port, &GPIO_InitStruct);
 80033be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c2:	4619      	mov	r1, r3
 80033c4:	4832      	ldr	r0, [pc, #200]	; (8003490 <MX_GPIO_Init+0x204>)
 80033c6:	f007 fe6b 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_RST_Pin;
 80033ca:	2340      	movs	r3, #64	; 0x40
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ce:	2301      	movs	r3, #1
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IST_RST_GPIO_Port, &GPIO_InitStruct);
 80033da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033de:	4619      	mov	r1, r3
 80033e0:	482c      	ldr	r0, [pc, #176]	; (8003494 <MX_GPIO_Init+0x208>)
 80033e2:	f007 fe5d 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 80033e6:	2308      	movs	r3, #8
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f0:	2301      	movs	r3, #1
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 80033f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f8:	4619      	mov	r1, r3
 80033fa:	4826      	ldr	r0, [pc, #152]	; (8003494 <MX_GPIO_Init+0x208>)
 80033fc:	f007 fe50 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003400:	2310      	movs	r3, #16
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003404:	2301      	movs	r3, #1
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	2300      	movs	r3, #0
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003414:	4619      	mov	r1, r3
 8003416:	4820      	ldr	r0, [pc, #128]	; (8003498 <MX_GPIO_Init+0x20c>)
 8003418:	f007 fe42 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin|GYRO_INT_Pin;
 800341c:	2330      	movs	r3, #48	; 0x30
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003420:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003426:	2301      	movs	r3, #1
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800342e:	4619      	mov	r1, r3
 8003430:	4817      	ldr	r0, [pc, #92]	; (8003490 <MX_GPIO_Init+0x204>)
 8003432:	f007 fe35 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003436:	2301      	movs	r3, #1
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800343a:	2301      	movs	r3, #1
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003442:	2300      	movs	r3, #0
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344a:	4619      	mov	r1, r3
 800344c:	4813      	ldr	r0, [pc, #76]	; (800349c <MX_GPIO_Init+0x210>)
 800344e:	f007 fe27 	bl	800b0a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2105      	movs	r1, #5
 8003456:	2009      	movs	r0, #9
 8003458:	f007 f9ea 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800345c:	2009      	movs	r0, #9
 800345e:	f007 fa03 	bl	800a868 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003462:	2200      	movs	r2, #0
 8003464:	2105      	movs	r1, #5
 8003466:	200a      	movs	r0, #10
 8003468:	f007 f9e2 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800346c:	200a      	movs	r0, #10
 800346e:	f007 f9fb 	bl	800a868 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2105      	movs	r1, #5
 8003476:	2017      	movs	r0, #23
 8003478:	f007 f9da 	bl	800a830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800347c:	2017      	movs	r0, #23
 800347e:	f007 f9f3 	bl	800a868 <HAL_NVIC_EnableIRQ>

}
 8003482:	bf00      	nop
 8003484:	3738      	adds	r7, #56	; 0x38
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40020800 	.word	0x40020800
 8003494:	40021800 	.word	0x40021800
 8003498:	40020000 	.word	0x40020000
 800349c:	40020400 	.word	0x40020400

080034a0 <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034a6:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <MX_I2C3_Init+0x54>)
 80034a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034ac:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <MX_I2C3_Init+0x58>)
 80034ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034b0:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034d8:	2200      	movs	r2, #0
 80034da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034dc:	4804      	ldr	r0, [pc, #16]	; (80034f0 <MX_I2C3_Init+0x50>)
 80034de:	f007 ffad 	bl	800b43c <HAL_I2C_Init>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80034e8:	f000 f989 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034ec:	bf00      	nop
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20001204 	.word	0x20001204
 80034f4:	40005c00 	.word	0x40005c00
 80034f8:	00061a80 	.word	0x00061a80

080034fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a5b      	ldr	r2, [pc, #364]	; (8003688 <HAL_I2C_MspInit+0x18c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f040 80b0 	bne.w	8003680 <HAL_I2C_MspInit+0x184>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_I2C_MspInit+0x190>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_I2C_MspInit+0x190>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6313      	str	r3, [r2, #48]	; 0x30
 8003530:	4b56      	ldr	r3, [pc, #344]	; (800368c <HAL_I2C_MspInit+0x190>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	4b52      	ldr	r3, [pc, #328]	; (800368c <HAL_I2C_MspInit+0x190>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4a51      	ldr	r2, [pc, #324]	; (800368c <HAL_I2C_MspInit+0x190>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6313      	str	r3, [r2, #48]	; 0x30
 800354c:	4b4f      	ldr	r3, [pc, #316]	; (800368c <HAL_I2C_MspInit+0x190>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800355c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800355e:	2312      	movs	r3, #18
 8003560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003562:	2301      	movs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003566:	2303      	movs	r3, #3
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800356a:	2304      	movs	r3, #4
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	4846      	ldr	r0, [pc, #280]	; (8003690 <HAL_I2C_MspInit+0x194>)
 8003576:	f007 fd93 	bl	800b0a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800357a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800357e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003580:	2312      	movs	r3, #18
 8003582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003584:	2301      	movs	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003588:	2303      	movs	r3, #3
 800358a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800358c:	2304      	movs	r3, #4
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	483f      	ldr	r0, [pc, #252]	; (8003694 <HAL_I2C_MspInit+0x198>)
 8003598:	f007 fd82 	bl	800b0a0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	4b3a      	ldr	r3, [pc, #232]	; (800368c <HAL_I2C_MspInit+0x190>)
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	4a39      	ldr	r2, [pc, #228]	; (800368c <HAL_I2C_MspInit+0x190>)
 80035a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035aa:	6413      	str	r3, [r2, #64]	; 0x40
 80035ac:	4b37      	ldr	r3, [pc, #220]	; (800368c <HAL_I2C_MspInit+0x190>)
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 80035b8:	4b37      	ldr	r3, [pc, #220]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035ba:	4a38      	ldr	r2, [pc, #224]	; (800369c <HAL_I2C_MspInit+0x1a0>)
 80035bc:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 80035be:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80035c4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035cc:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d8:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035da:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035dc:	2200      	movs	r2, #0
 80035de:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035e0:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80035e6:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80035f8:	4827      	ldr	r0, [pc, #156]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 80035fa:	f007 f943 	bl	800a884 <HAL_DMA_Init>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8003604:	f000 f8fb 	bl	80037fe <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
 800360e:	4a22      	ldr	r2, [pc, #136]	; (8003698 <HAL_I2C_MspInit+0x19c>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8003614:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 8003616:	4a23      	ldr	r2, [pc, #140]	; (80036a4 <HAL_I2C_MspInit+0x1a8>)
 8003618:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 800361c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003620:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 8003624:	2240      	movs	r2, #64	; 0x40
 8003626:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 800362a:	2200      	movs	r2, #0
 800362c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 8003630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003634:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 8003638:	2200      	movs	r2, #0
 800363a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 800363e:	2200      	movs	r2, #0
 8003640:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 8003644:	2200      	movs	r2, #0
 8003646:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 800364a:	2200      	movs	r2, #0
 800364c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 8003650:	2200      	movs	r2, #0
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8003654:	4812      	ldr	r0, [pc, #72]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 8003656:	f007 f915 	bl	800a884 <HAL_DMA_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8003660:	f000 f8cd 	bl	80037fe <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 8003668:	635a      	str	r2, [r3, #52]	; 0x34
 800366a:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <HAL_I2C_MspInit+0x1a4>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8003670:	2200      	movs	r2, #0
 8003672:	2105      	movs	r1, #5
 8003674:	2049      	movs	r0, #73	; 0x49
 8003676:	f007 f8db 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800367a:	2049      	movs	r0, #73	; 0x49
 800367c:	f007 f8f4 	bl	800a868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003680:	bf00      	nop
 8003682:	3728      	adds	r7, #40	; 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40005c00 	.word	0x40005c00
 800368c:	40023800 	.word	0x40023800
 8003690:	40020800 	.word	0x40020800
 8003694:	40020000 	.word	0x40020000
 8003698:	20001258 	.word	0x20001258
 800369c:	40026040 	.word	0x40026040
 80036a0:	200012b8 	.word	0x200012b8
 80036a4:	40026070 	.word	0x40026070

080036a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036ac:	f005 fec0 	bl	8009430 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036b0:	f000 f82c 	bl	800370c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036b4:	f7ff fdea 	bl	800328c <MX_GPIO_Init>
  MX_DMA_Init();
 80036b8:	f7ff fc28 	bl	8002f0c <MX_DMA_Init>
  MX_CAN1_Init();
 80036bc:	f7ff fafa 	bl	8002cb4 <MX_CAN1_Init>
  MX_CAN2_Init();
 80036c0:	f7ff fb2e 	bl	8002d20 <MX_CAN2_Init>
  MX_TIM5_Init();
 80036c4:	f000 fcde 	bl	8004084 <MX_TIM5_Init>
  MX_TIM10_Init();
 80036c8:	f000 fd4c 	bl	8004164 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80036cc:	f000 fed8 	bl	8004480 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80036d0:	f000 ff00 	bl	80044d4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80036d4:	f000 ff2a 	bl	800452c <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80036d8:	f000 f8cc 	bl	8003874 <MX_SPI1_Init>
  MX_I2C3_Init();
 80036dc:	f7ff fee0 	bl	80034a0 <MX_I2C3_Init>
  MX_ADC3_Init();
 80036e0:	f7ff fa52 	bl	8002b88 <MX_ADC3_Init>
  MX_TIM3_Init();
 80036e4:	f000 fc02 	bl	8003eec <MX_TIM3_Init>
  MX_TIM4_Init();
 80036e8:	f000 fc72 	bl	8003fd0 <MX_TIM4_Init>
  MX_TIM1_Init();
 80036ec:	f000 fb6e 	bl	8003dcc <MX_TIM1_Init>
  MX_RNG_Init();
 80036f0:	f000 f88a 	bl	8003808 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  startup_task();
 80036f4:	f005 fe8c 	bl	8009410 <startup_task>
  HAL_TIM_Base_Start(&htim3); //start micros clock
 80036f8:	4803      	ldr	r0, [pc, #12]	; (8003708 <main+0x60>)
 80036fa:	f00c f81f 	bl	800f73c <HAL_TIM_Base_Start>
//  HAL_RNG_GenerateRandomNumber(hrng, random32bit)
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80036fe:	f7ff fcb9 	bl	8003074 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003702:	f011 fd0d 	bl	8015120 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003706:	e7fe      	b.n	8003706 <main+0x5e>
 8003708:	200014d0 	.word	0x200014d0

0800370c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b094      	sub	sp, #80	; 0x50
 8003710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003712:	f107 0320 	add.w	r3, r7, #32
 8003716:	2230      	movs	r2, #48	; 0x30
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f015 fcc9 	bl	80190b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <SystemClock_Config+0xcc>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	4a27      	ldr	r2, [pc, #156]	; (80037d8 <SystemClock_Config+0xcc>)
 800373a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373e:	6413      	str	r3, [r2, #64]	; 0x40
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <SystemClock_Config+0xcc>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800374c:	2300      	movs	r3, #0
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <SystemClock_Config+0xd0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a21      	ldr	r2, [pc, #132]	; (80037dc <SystemClock_Config+0xd0>)
 8003756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <SystemClock_Config+0xd0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003768:	2301      	movs	r3, #1
 800376a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800376c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003772:	2302      	movs	r3, #2
 8003774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800377c:	2306      	movs	r3, #6
 800377e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003780:	23a8      	movs	r3, #168	; 0xa8
 8003782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003784:	2302      	movs	r3, #2
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003788:	2307      	movs	r3, #7
 800378a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800378c:	f107 0320 	add.w	r3, r7, #32
 8003790:	4618      	mov	r0, r3
 8003792:	f00a fe63 	bl	800e45c <HAL_RCC_OscConfig>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800379c:	f000 f82f 	bl	80037fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037a0:	230f      	movs	r3, #15
 80037a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037a4:	2302      	movs	r3, #2
 80037a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	2105      	movs	r1, #5
 80037be:	4618      	mov	r0, r3
 80037c0:	f00b f8c4 	bl	800e94c <HAL_RCC_ClockConfig>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037ca:	f000 f818 	bl	80037fe <Error_Handler>
  }
}
 80037ce:	bf00      	nop
 80037d0:	3750      	adds	r7, #80	; 0x50
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40007000 	.word	0x40007000

080037e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d101      	bne.n	80037f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80037f2:	f005 fe3f 	bl	8009474 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037fe:	b480      	push	{r7}
 8003800:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003802:	b672      	cpsid	i
}
 8003804:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003806:	e7fe      	b.n	8003806 <Error_Handler+0x8>

08003808 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <MX_RNG_Init+0x20>)
 800380e:	4a07      	ldr	r2, [pc, #28]	; (800382c <MX_RNG_Init+0x24>)
 8003810:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003812:	4805      	ldr	r0, [pc, #20]	; (8003828 <MX_RNG_Init+0x20>)
 8003814:	f00b faac 	bl	800ed70 <HAL_RNG_Init>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800381e:	f7ff ffee 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20001318 	.word	0x20001318
 800382c:	50060800 	.word	0x50060800

08003830 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0b      	ldr	r2, [pc, #44]	; (800386c <HAL_RNG_MspInit+0x3c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10d      	bne.n	800385e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_RNG_MspInit+0x40>)
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <HAL_RNG_MspInit+0x40>)
 800384c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003850:	6353      	str	r3, [r2, #52]	; 0x34
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_RNG_MspInit+0x40>)
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	50060800 	.word	0x50060800
 8003870:	40023800 	.word	0x40023800

08003874 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003878:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <MX_SPI1_Init+0x64>)
 800387a:	4a18      	ldr	r2, [pc, #96]	; (80038dc <MX_SPI1_Init+0x68>)
 800387c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <MX_SPI1_Init+0x64>)
 8003880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <MX_SPI1_Init+0x64>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <MX_SPI1_Init+0x64>)
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <MX_SPI1_Init+0x64>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <MX_SPI1_Init+0x64>)
 800389a:	2200      	movs	r2, #0
 800389c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <MX_SPI1_Init+0x64>)
 80038a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <MX_SPI1_Init+0x64>)
 80038a8:	2228      	movs	r2, #40	; 0x28
 80038aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <MX_SPI1_Init+0x64>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <MX_SPI1_Init+0x64>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <MX_SPI1_Init+0x64>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <MX_SPI1_Init+0x64>)
 80038c0:	220a      	movs	r2, #10
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038c4:	4804      	ldr	r0, [pc, #16]	; (80038d8 <MX_SPI1_Init+0x64>)
 80038c6:	f00b fa7d 	bl	800edc4 <HAL_SPI_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038d0:	f7ff ff95 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20001328 	.word	0x20001328
 80038dc:	40013000 	.word	0x40013000

080038e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a56      	ldr	r2, [pc, #344]	; (8003a58 <HAL_SPI_MspInit+0x178>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	f040 80a6 	bne.w	8003a50 <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	4b54      	ldr	r3, [pc, #336]	; (8003a5c <HAL_SPI_MspInit+0x17c>)
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	4a53      	ldr	r2, [pc, #332]	; (8003a5c <HAL_SPI_MspInit+0x17c>)
 800390e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003912:	6453      	str	r3, [r2, #68]	; 0x44
 8003914:	4b51      	ldr	r3, [pc, #324]	; (8003a5c <HAL_SPI_MspInit+0x17c>)
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	4b4d      	ldr	r3, [pc, #308]	; (8003a5c <HAL_SPI_MspInit+0x17c>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	4a4c      	ldr	r2, [pc, #304]	; (8003a5c <HAL_SPI_MspInit+0x17c>)
 800392a:	f043 0302 	orr.w	r3, r3, #2
 800392e:	6313      	str	r3, [r2, #48]	; 0x30
 8003930:	4b4a      	ldr	r3, [pc, #296]	; (8003a5c <HAL_SPI_MspInit+0x17c>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <HAL_SPI_MspInit+0x17c>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	4a45      	ldr	r2, [pc, #276]	; (8003a5c <HAL_SPI_MspInit+0x17c>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6313      	str	r3, [r2, #48]	; 0x30
 800394c:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_SPI_MspInit+0x17c>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003958:	2318      	movs	r3, #24
 800395a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003968:	2305      	movs	r3, #5
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	4619      	mov	r1, r3
 8003972:	483b      	ldr	r0, [pc, #236]	; (8003a60 <HAL_SPI_MspInit+0x180>)
 8003974:	f007 fb94 	bl	800b0a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003984:	2303      	movs	r3, #3
 8003986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003988:	2305      	movs	r3, #5
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	4619      	mov	r1, r3
 8003992:	4834      	ldr	r0, [pc, #208]	; (8003a64 <HAL_SPI_MspInit+0x184>)
 8003994:	f007 fb84 	bl	800b0a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003998:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 800399a:	4a34      	ldr	r2, [pc, #208]	; (8003a6c <HAL_SPI_MspInit+0x18c>)
 800399c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800399e:	4b32      	ldr	r3, [pc, #200]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80039a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039a6:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ac:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039b2:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039bc:	2200      	movs	r2, #0
 80039be:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039c0:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039cc:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039d2:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80039d8:	4823      	ldr	r0, [pc, #140]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039da:	f006 ff53 	bl	800a884 <HAL_DMA_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80039e4:	f7ff ff0b 	bl	80037fe <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_SPI_MspInit+0x188>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_SPI_MspInit+0x194>)
 80039f8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 80039fc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003a00:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a04:	2240      	movs	r2, #64	; 0x40
 8003a06:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0e:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a14:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a1c:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a22:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a34:	480e      	ldr	r0, [pc, #56]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a36:	f006 ff25 	bl	800a884 <HAL_DMA_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8003a40:	f7ff fedd 	bl	80037fe <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a48:	649a      	str	r2, [r3, #72]	; 0x48
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <HAL_SPI_MspInit+0x190>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a50:	bf00      	nop
 8003a52:	3728      	adds	r7, #40	; 0x28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40013000 	.word	0x40013000
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40020400 	.word	0x40020400
 8003a64:	40020000 	.word	0x40020000
 8003a68:	20001380 	.word	0x20001380
 8003a6c:	40026410 	.word	0x40026410
 8003a70:	200013e0 	.word	0x200013e0
 8003a74:	40026458 	.word	0x40026458

08003a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_MspInit+0x54>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4a11      	ldr	r2, [pc, #68]	; (8003acc <HAL_MspInit+0x54>)
 8003a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_MspInit+0x54>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_MspInit+0x54>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <HAL_MspInit+0x54>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_MspInit+0x54>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	210f      	movs	r1, #15
 8003aba:	f06f 0001 	mvn.w	r0, #1
 8003abe:	f006 feb7 	bl	800a830 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800

08003ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08e      	sub	sp, #56	; 0x38
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <HAL_InitTick+0xe8>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	4a33      	ldr	r2, [pc, #204]	; (8003bb8 <HAL_InitTick+0xe8>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6413      	str	r3, [r2, #64]	; 0x40
 8003af0:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <HAL_InitTick+0xe8>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003afc:	f107 0210 	add.w	r2, r7, #16
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f00b f900 	bl	800ed0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b16:	f00b f8d1 	bl	800ecbc <HAL_RCC_GetPCLK1Freq>
 8003b1a:	6378      	str	r0, [r7, #52]	; 0x34
 8003b1c:	e004      	b.n	8003b28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b1e:	f00b f8cd 	bl	800ecbc <HAL_RCC_GetPCLK1Freq>
 8003b22:	4603      	mov	r3, r0
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2a:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <HAL_InitTick+0xec>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	0c9b      	lsrs	r3, r3, #18
 8003b32:	3b01      	subs	r3, #1
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_InitTick+0xf0>)
 8003b38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_InitTick+0xf0>)
 8003b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b44:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003b46:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <HAL_InitTick+0xf0>)
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <HAL_InitTick+0xf0>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b52:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_InitTick+0xf0>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_InitTick+0xf0>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003b5e:	4818      	ldr	r0, [pc, #96]	; (8003bc0 <HAL_InitTick+0xf0>)
 8003b60:	f00b fd9c 	bl	800f69c <HAL_TIM_Base_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11b      	bne.n	8003baa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003b72:	4813      	ldr	r0, [pc, #76]	; (8003bc0 <HAL_InitTick+0xf0>)
 8003b74:	f00b fe4a 	bl	800f80c <HAL_TIM_Base_Start_IT>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d111      	bne.n	8003baa <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b86:	201c      	movs	r0, #28
 8003b88:	f006 fe6e 	bl	800a868 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	d808      	bhi.n	8003ba4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003b92:	2200      	movs	r2, #0
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	201c      	movs	r0, #28
 8003b98:	f006 fe4a 	bl	800a830 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b9c:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <HAL_InitTick+0xf4>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e002      	b.n	8003baa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003baa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3738      	adds	r7, #56	; 0x38
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	431bde83 	.word	0x431bde83
 8003bc0:	20001440 	.word	0x20001440
 8003bc4:	20000010 	.word	0x20000010

08003bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <NMI_Handler+0x4>

08003bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd2:	e7fe      	b.n	8003bd2 <HardFault_Handler+0x4>

08003bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd8:	e7fe      	b.n	8003bd8 <MemManage_Handler+0x4>

08003bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bde:	e7fe      	b.n	8003bde <BusFault_Handler+0x4>

08003be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be4:	e7fe      	b.n	8003be4 <UsageFault_Handler+0x4>

08003be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8003bf8:	2008      	movs	r0, #8
 8003bfa:	f007 fc07 	bl	800b40c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8003c06:	2010      	movs	r0, #16
 8003c08:	f007 fc00 	bl	800b40c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <DMA1_Stream1_IRQHandler+0x10>)
 8003c16:	f006 ffcd 	bl	800abb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2000171c 	.word	0x2000171c

08003c24 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <DMA1_Stream2_IRQHandler+0x10>)
 8003c2a:	f006 ffc3 	bl	800abb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20001258 	.word	0x20001258

08003c38 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <DMA1_Stream4_IRQHandler+0x10>)
 8003c3e:	f006 ffb9 	bl	800abb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200012b8 	.word	0x200012b8

08003c4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <CAN1_RX0_IRQHandler+0x10>)
 8003c52:	f006 fb0f 	bl	800a274 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200003e8 	.word	0x200003e8

08003c60 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <CAN1_RX1_IRQHandler+0x10>)
 8003c66:	f006 fb05 	bl	800a274 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200003e8 	.word	0x200003e8

08003c74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8003c78:	2020      	movs	r0, #32
 8003c7a:	f007 fbc7 	bl	800b40c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <TIM2_IRQHandler+0x10>)
 8003c8a:	f00b ff9f 	bl	800fbcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20001440 	.word	0x20001440

08003c98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c9c:	4803      	ldr	r0, [pc, #12]	; (8003cac <TIM3_IRQHandler+0x14>)
 8003c9e:	f00b ff95 	bl	800fbcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  if (__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_UPDATE) == 1){
	  micros_tick();
 8003ca2:	f7fe f9f1 	bl	8002088 <micros_tick>
//  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200014d0 	.word	0x200014d0

08003cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <USART1_IRQHandler+0x10>)
 8003cb6:	f00c ff5d 	bl	8010b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200015f0 	.word	0x200015f0

08003cc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003cc8:	4802      	ldr	r0, [pc, #8]	; (8003cd4 <USART3_IRQHandler+0x10>)
 8003cca:	f00c ff53 	bl	8010b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20001634 	.word	0x20001634

08003cd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <DMA2_Stream0_IRQHandler+0x10>)
 8003cde:	f006 ff69 	bl	800abb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20001380 	.word	0x20001380

08003cec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003cf0:	4802      	ldr	r0, [pc, #8]	; (8003cfc <DMA2_Stream1_IRQHandler+0x10>)
 8003cf2:	f006 ff5f 	bl	800abb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2000177c 	.word	0x2000177c

08003d00 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <DMA2_Stream3_IRQHandler+0x10>)
 8003d06:	f006 ff55 	bl	800abb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200013e0 	.word	0x200013e0

08003d14 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d18:	4802      	ldr	r0, [pc, #8]	; (8003d24 <CAN2_RX0_IRQHandler+0x10>)
 8003d1a:	f006 faab 	bl	800a274 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000410 	.word	0x20000410

08003d28 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d2c:	4802      	ldr	r0, [pc, #8]	; (8003d38 <CAN2_RX1_IRQHandler+0x10>)
 8003d2e:	f006 faa1 	bl	800a274 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000410 	.word	0x20000410

08003d3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003d40:	4802      	ldr	r0, [pc, #8]	; (8003d4c <OTG_FS_IRQHandler+0x10>)
 8003d42:	f009 fa5e 	bl	800d202 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	2000de1c 	.word	0x2000de1c

08003d50 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <DMA2_Stream5_IRQHandler+0x10>)
 8003d56:	f006 ff2d 	bl	800abb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200016bc 	.word	0x200016bc

08003d64 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <DMA2_Stream6_IRQHandler+0x10>)
 8003d6a:	f006 ff23 	bl	800abb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200017dc 	.word	0x200017dc

08003d78 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <USART6_IRQHandler+0x10>)
 8003d7e:	f00c fef9 	bl	8010b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20001678 	.word	0x20001678

08003d8c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003d90:	4802      	ldr	r0, [pc, #8]	; (8003d9c <I2C3_ER_IRQHandler+0x10>)
 8003d92:	f008 f94b 	bl	800c02c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20001204 	.word	0x20001204

08003da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003da4:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <SystemInit+0x28>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <SystemInit+0x28>)
 8003dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <SystemInit+0x28>)
 8003db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dba:	609a      	str	r2, [r3, #8]
#endif
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b092      	sub	sp, #72	; 0x48
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]
 8003dec:	615a      	str	r2, [r3, #20]
 8003dee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	2220      	movs	r2, #32
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f015 f95b 	bl	80190b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dfc:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003dfe:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <MX_TIM1_Init+0x11c>)
 8003e00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8003e02:	4b38      	ldr	r3, [pc, #224]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e04:	22a7      	movs	r2, #167	; 0xa7
 8003e06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e08:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003e0e:	4b35      	ldr	r3, [pc, #212]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e10:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003e14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e1c:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e22:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e28:	482e      	ldr	r0, [pc, #184]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e2a:	f00b fdb8 	bl	800f99e <HAL_TIM_PWM_Init>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003e34:	f7ff fce3 	bl	80037fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e44:	4619      	mov	r1, r3
 8003e46:	4827      	ldr	r0, [pc, #156]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e48:	f00c fce6 	bl	8010818 <HAL_TIMEx_MasterConfigSynchronization>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003e52:	f7ff fcd4 	bl	80037fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e56:	2360      	movs	r3, #96	; 0x60
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e62:	2300      	movs	r3, #0
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e76:	2200      	movs	r2, #0
 8003e78:	4619      	mov	r1, r3
 8003e7a:	481a      	ldr	r0, [pc, #104]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e7c:	f00c f80a 	bl	800fe94 <HAL_TIM_PWM_ConfigChannel>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003e86:	f7ff fcba 	bl	80037fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e8e:	2204      	movs	r2, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4814      	ldr	r0, [pc, #80]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003e94:	f00b fffe 	bl	800fe94 <HAL_TIM_PWM_ConfigChannel>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003e9e:	f7ff fcae 	bl	80037fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4807      	ldr	r0, [pc, #28]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003ec6:	f00c fd23 	bl	8010910 <HAL_TIMEx_ConfigBreakDeadTime>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003ed0:	f7ff fc95 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ed4:	4803      	ldr	r0, [pc, #12]	; (8003ee4 <MX_TIM1_Init+0x118>)
 8003ed6:	f000 fa1f 	bl	8004318 <HAL_TIM_MspPostInit>

}
 8003eda:	bf00      	nop
 8003edc:	3748      	adds	r7, #72	; 0x48
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20001488 	.word	0x20001488
 8003ee8:	40010000 	.word	0x40010000

08003eec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08e      	sub	sp, #56	; 0x38
 8003ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f00:	f107 0320 	add.w	r3, r7, #32
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
 8003f18:	615a      	str	r2, [r3, #20]
 8003f1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f1e:	4a2b      	ldr	r2, [pc, #172]	; (8003fcc <MX_TIM3_Init+0xe0>)
 8003f20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 8003f22:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f24:	22a7      	movs	r2, #167	; 0xa7
 8003f26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f28:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f34:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f3a:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f40:	4821      	ldr	r0, [pc, #132]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f42:	f00b fbab 	bl	800f69c <HAL_TIM_Base_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003f4c:	f7ff fc57 	bl	80037fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	481a      	ldr	r0, [pc, #104]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f5e:	f00c f85b 	bl	8010018 <HAL_TIM_ConfigClockSource>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003f68:	f7ff fc49 	bl	80037fe <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003f6c:	4816      	ldr	r0, [pc, #88]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f6e:	f00b fcbd 	bl	800f8ec <HAL_TIM_OC_Init>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003f78:	f7ff fc41 	bl	80037fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f84:	f107 0320 	add.w	r3, r7, #32
 8003f88:	4619      	mov	r1, r3
 8003f8a:	480f      	ldr	r0, [pc, #60]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003f8c:	f00c fc44 	bl	8010818 <HAL_TIMEx_MasterConfigSynchronization>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003f96:	f7ff fc32 	bl	80037fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	2200      	movs	r2, #0
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <MX_TIM3_Init+0xdc>)
 8003fb2:	f00b ff13 	bl	800fddc <HAL_TIM_OC_ConfigChannel>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003fbc:	f7ff fc1f 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003fc0:	bf00      	nop
 8003fc2:	3738      	adds	r7, #56	; 0x38
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200014d0 	.word	0x200014d0
 8003fcc:	40000400 	.word	0x40000400

08003fd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fd6:	f107 0320 	add.w	r3, r7, #32
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	611a      	str	r2, [r3, #16]
 8003fee:	615a      	str	r2, [r3, #20]
 8003ff0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <MX_TIM4_Init+0xac>)
 8003ff4:	4a22      	ldr	r2, [pc, #136]	; (8004080 <MX_TIM4_Init+0xb0>)
 8003ff6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8003ff8:	4b20      	ldr	r3, [pc, #128]	; (800407c <MX_TIM4_Init+0xac>)
 8003ffa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ffe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <MX_TIM4_Init+0xac>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004006:	4b1d      	ldr	r3, [pc, #116]	; (800407c <MX_TIM4_Init+0xac>)
 8004008:	f240 32e7 	movw	r2, #999	; 0x3e7
 800400c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <MX_TIM4_Init+0xac>)
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004014:	4b19      	ldr	r3, [pc, #100]	; (800407c <MX_TIM4_Init+0xac>)
 8004016:	2200      	movs	r2, #0
 8004018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800401a:	4818      	ldr	r0, [pc, #96]	; (800407c <MX_TIM4_Init+0xac>)
 800401c:	f00b fcbf 	bl	800f99e <HAL_TIM_PWM_Init>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8004026:	f7ff fbea 	bl	80037fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800402e:	2300      	movs	r3, #0
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004032:	f107 0320 	add.w	r3, r7, #32
 8004036:	4619      	mov	r1, r3
 8004038:	4810      	ldr	r0, [pc, #64]	; (800407c <MX_TIM4_Init+0xac>)
 800403a:	f00c fbed 	bl	8010818 <HAL_TIMEx_MasterConfigSynchronization>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004044:	f7ff fbdb 	bl	80037fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004048:	2360      	movs	r3, #96	; 0x60
 800404a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	2208      	movs	r2, #8
 800405c:	4619      	mov	r1, r3
 800405e:	4807      	ldr	r0, [pc, #28]	; (800407c <MX_TIM4_Init+0xac>)
 8004060:	f00b ff18 	bl	800fe94 <HAL_TIM_PWM_ConfigChannel>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800406a:	f7ff fbc8 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800406e:	4803      	ldr	r0, [pc, #12]	; (800407c <MX_TIM4_Init+0xac>)
 8004070:	f000 f952 	bl	8004318 <HAL_TIM_MspPostInit>

}
 8004074:	bf00      	nop
 8004076:	3728      	adds	r7, #40	; 0x28
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20001518 	.word	0x20001518
 8004080:	40000800 	.word	0x40000800

08004084 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800408a:	f107 0320 	add.w	r3, r7, #32
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004094:	1d3b      	adds	r3, r7, #4
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	615a      	str	r2, [r3, #20]
 80040a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80040a6:	4b2d      	ldr	r3, [pc, #180]	; (800415c <MX_TIM5_Init+0xd8>)
 80040a8:	4a2d      	ldr	r2, [pc, #180]	; (8004160 <MX_TIM5_Init+0xdc>)
 80040aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1317;
 80040ac:	4b2b      	ldr	r3, [pc, #172]	; (800415c <MX_TIM5_Init+0xd8>)
 80040ae:	f240 5225 	movw	r2, #1317	; 0x525
 80040b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b4:	4b29      	ldr	r3, [pc, #164]	; (800415c <MX_TIM5_Init+0xd8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 80040ba:	4b28      	ldr	r3, [pc, #160]	; (800415c <MX_TIM5_Init+0xd8>)
 80040bc:	22ff      	movs	r2, #255	; 0xff
 80040be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c0:	4b26      	ldr	r3, [pc, #152]	; (800415c <MX_TIM5_Init+0xd8>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040c6:	4b25      	ldr	r3, [pc, #148]	; (800415c <MX_TIM5_Init+0xd8>)
 80040c8:	2280      	movs	r2, #128	; 0x80
 80040ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80040cc:	4823      	ldr	r0, [pc, #140]	; (800415c <MX_TIM5_Init+0xd8>)
 80040ce:	f00b fc66 	bl	800f99e <HAL_TIM_PWM_Init>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80040d8:	f7ff fb91 	bl	80037fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040dc:	2300      	movs	r3, #0
 80040de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80040e4:	f107 0320 	add.w	r3, r7, #32
 80040e8:	4619      	mov	r1, r3
 80040ea:	481c      	ldr	r0, [pc, #112]	; (800415c <MX_TIM5_Init+0xd8>)
 80040ec:	f00c fb94 	bl	8010818 <HAL_TIMEx_MasterConfigSynchronization>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80040f6:	f7ff fb82 	bl	80037fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040fa:	2360      	movs	r3, #96	; 0x60
 80040fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004102:	2302      	movs	r3, #2
 8004104:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004106:	2304      	movs	r3, #4
 8004108:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	2200      	movs	r2, #0
 800410e:	4619      	mov	r1, r3
 8004110:	4812      	ldr	r0, [pc, #72]	; (800415c <MX_TIM5_Init+0xd8>)
 8004112:	f00b febf 	bl	800fe94 <HAL_TIM_PWM_ConfigChannel>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800411c:	f7ff fb6f 	bl	80037fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	2204      	movs	r2, #4
 8004124:	4619      	mov	r1, r3
 8004126:	480d      	ldr	r0, [pc, #52]	; (800415c <MX_TIM5_Init+0xd8>)
 8004128:	f00b feb4 	bl	800fe94 <HAL_TIM_PWM_ConfigChannel>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8004132:	f7ff fb64 	bl	80037fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	2208      	movs	r2, #8
 800413a:	4619      	mov	r1, r3
 800413c:	4807      	ldr	r0, [pc, #28]	; (800415c <MX_TIM5_Init+0xd8>)
 800413e:	f00b fea9 	bl	800fe94 <HAL_TIM_PWM_ConfigChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8004148:	f7ff fb59 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800414c:	4803      	ldr	r0, [pc, #12]	; (800415c <MX_TIM5_Init+0xd8>)
 800414e:	f000 f8e3 	bl	8004318 <HAL_TIM_MspPostInit>

}
 8004152:	bf00      	nop
 8004154:	3728      	adds	r7, #40	; 0x28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20001560 	.word	0x20001560
 8004160:	40000c00 	.word	0x40000c00

08004164 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
 8004178:	615a      	str	r2, [r3, #20]
 800417a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800417c:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <MX_TIM10_Init+0x94>)
 800417e:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <MX_TIM10_Init+0x98>)
 8004180:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <MX_TIM10_Init+0x94>)
 8004184:	2200      	movs	r2, #0
 8004186:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004188:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <MX_TIM10_Init+0x94>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800418e:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <MX_TIM10_Init+0x94>)
 8004190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004194:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <MX_TIM10_Init+0x94>)
 8004198:	2200      	movs	r2, #0
 800419a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <MX_TIM10_Init+0x94>)
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80041a2:	4815      	ldr	r0, [pc, #84]	; (80041f8 <MX_TIM10_Init+0x94>)
 80041a4:	f00b fa7a 	bl	800f69c <HAL_TIM_Base_Init>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80041ae:	f7ff fb26 	bl	80037fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80041b2:	4811      	ldr	r0, [pc, #68]	; (80041f8 <MX_TIM10_Init+0x94>)
 80041b4:	f00b fbf3 	bl	800f99e <HAL_TIM_PWM_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80041be:	f7ff fb1e 	bl	80037fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041c2:	2360      	movs	r3, #96	; 0x60
 80041c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041d2:	1d3b      	adds	r3, r7, #4
 80041d4:	2200      	movs	r2, #0
 80041d6:	4619      	mov	r1, r3
 80041d8:	4807      	ldr	r0, [pc, #28]	; (80041f8 <MX_TIM10_Init+0x94>)
 80041da:	f00b fe5b 	bl	800fe94 <HAL_TIM_PWM_ConfigChannel>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80041e4:	f7ff fb0b 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80041e8:	4803      	ldr	r0, [pc, #12]	; (80041f8 <MX_TIM10_Init+0x94>)
 80041ea:	f000 f895 	bl	8004318 <HAL_TIM_MspPostInit>

}
 80041ee:	bf00      	nop
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200015a8 	.word	0x200015a8
 80041fc:	40014400 	.word	0x40014400

08004200 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_TIM_PWM_MspInit+0x8c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_TIM_PWM_MspInit+0x90>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <HAL_TIM_PWM_MspInit+0x90>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6453      	str	r3, [r2, #68]	; 0x44
 8004222:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <HAL_TIM_PWM_MspInit+0x90>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800422e:	e026      	b.n	800427e <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a17      	ldr	r2, [pc, #92]	; (8004294 <HAL_TIM_PWM_MspInit+0x94>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	4b14      	ldr	r3, [pc, #80]	; (8004290 <HAL_TIM_PWM_MspInit+0x90>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	4a13      	ldr	r2, [pc, #76]	; (8004290 <HAL_TIM_PWM_MspInit+0x90>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6413      	str	r3, [r2, #64]	; 0x40
 800424a:	4b11      	ldr	r3, [pc, #68]	; (8004290 <HAL_TIM_PWM_MspInit+0x90>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]
}
 8004256:	e012      	b.n	800427e <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <HAL_TIM_PWM_MspInit+0x98>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d10d      	bne.n	800427e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_TIM_PWM_MspInit+0x90>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <HAL_TIM_PWM_MspInit+0x90>)
 800426c:	f043 0308 	orr.w	r3, r3, #8
 8004270:	6413      	str	r3, [r2, #64]	; 0x40
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <HAL_TIM_PWM_MspInit+0x90>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000
 8004290:	40023800 	.word	0x40023800
 8004294:	40000800 	.word	0x40000800
 8004298:	40000c00 	.word	0x40000c00

0800429c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a18      	ldr	r2, [pc, #96]	; (800430c <HAL_TIM_Base_MspInit+0x70>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d116      	bne.n	80042dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <HAL_TIM_Base_MspInit+0x74>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a16      	ldr	r2, [pc, #88]	; (8004310 <HAL_TIM_Base_MspInit+0x74>)
 80042b8:	f043 0302 	orr.w	r3, r3, #2
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_TIM_Base_MspInit+0x74>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2105      	movs	r1, #5
 80042ce:	201d      	movs	r0, #29
 80042d0:	f006 faae 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042d4:	201d      	movs	r0, #29
 80042d6:	f006 fac7 	bl	800a868 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80042da:	e012      	b.n	8004302 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0c      	ldr	r2, [pc, #48]	; (8004314 <HAL_TIM_Base_MspInit+0x78>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10d      	bne.n	8004302 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_TIM_Base_MspInit+0x74>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	4a08      	ldr	r2, [pc, #32]	; (8004310 <HAL_TIM_Base_MspInit+0x74>)
 80042f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f4:	6453      	str	r3, [r2, #68]	; 0x44
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_TIM_Base_MspInit+0x74>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40000400 	.word	0x40000400
 8004310:	40023800 	.word	0x40023800
 8004314:	40014400 	.word	0x40014400

08004318 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08c      	sub	sp, #48	; 0x30
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004320:	f107 031c 	add.w	r3, r7, #28
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a49      	ldr	r2, [pc, #292]	; (800445c <HAL_TIM_MspPostInit+0x144>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d11f      	bne.n	800437a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	4b48      	ldr	r3, [pc, #288]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4a47      	ldr	r2, [pc, #284]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 8004344:	f043 0310 	orr.w	r3, r3, #16
 8004348:	6313      	str	r3, [r2, #48]	; 0x30
 800434a:	4b45      	ldr	r3, [pc, #276]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004356:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800435a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2302      	movs	r3, #2
 800435e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004364:	2300      	movs	r3, #0
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004368:	2301      	movs	r3, #1
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800436c:	f107 031c 	add.w	r3, r7, #28
 8004370:	4619      	mov	r1, r3
 8004372:	483c      	ldr	r0, [pc, #240]	; (8004464 <HAL_TIM_MspPostInit+0x14c>)
 8004374:	f006 fe94 	bl	800b0a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004378:	e06c      	b.n	8004454 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a3a      	ldr	r2, [pc, #232]	; (8004468 <HAL_TIM_MspPostInit+0x150>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d11f      	bne.n	80043c4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	4b35      	ldr	r3, [pc, #212]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	4a34      	ldr	r2, [pc, #208]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 800438e:	f043 0308 	orr.w	r3, r3, #8
 8004392:	6313      	str	r3, [r2, #48]	; 0x30
 8004394:	4b32      	ldr	r3, [pc, #200]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80043a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a6:	2302      	movs	r3, #2
 80043a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ae:	2300      	movs	r3, #0
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043b2:	2302      	movs	r3, #2
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80043b6:	f107 031c 	add.w	r3, r7, #28
 80043ba:	4619      	mov	r1, r3
 80043bc:	482b      	ldr	r0, [pc, #172]	; (800446c <HAL_TIM_MspPostInit+0x154>)
 80043be:	f006 fe6f 	bl	800b0a0 <HAL_GPIO_Init>
}
 80043c2:	e047      	b.n	8004454 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM5)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a29      	ldr	r2, [pc, #164]	; (8004470 <HAL_TIM_MspPostInit+0x158>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d11f      	bne.n	800440e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	4a22      	ldr	r2, [pc, #136]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 80043d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043dc:	6313      	str	r3, [r2, #48]	; 0x30
 80043de:	4b20      	ldr	r3, [pc, #128]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GREEN_LED_TIM_Pin|RED_LED_TIM_Pin|BLUE_LED_TIM_Pin;
 80043ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80043ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f0:	2302      	movs	r3, #2
 80043f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80043fc:	2302      	movs	r3, #2
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004400:	f107 031c 	add.w	r3, r7, #28
 8004404:	4619      	mov	r1, r3
 8004406:	481b      	ldr	r0, [pc, #108]	; (8004474 <HAL_TIM_MspPostInit+0x15c>)
 8004408:	f006 fe4a 	bl	800b0a0 <HAL_GPIO_Init>
}
 800440c:	e022      	b.n	8004454 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM10)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a19      	ldr	r2, [pc, #100]	; (8004478 <HAL_TIM_MspPostInit+0x160>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d11d      	bne.n	8004454 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	4b10      	ldr	r3, [pc, #64]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	4a0f      	ldr	r2, [pc, #60]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 8004422:	f043 0320 	orr.w	r3, r3, #32
 8004426:	6313      	str	r3, [r2, #48]	; 0x30
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <HAL_TIM_MspPostInit+0x148>)
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_HEAT_TIM_Pin;
 8004434:	2340      	movs	r3, #64	; 0x40
 8004436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004440:	2300      	movs	r3, #0
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004444:	2303      	movs	r3, #3
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMU_HEAT_TIM_GPIO_Port, &GPIO_InitStruct);
 8004448:	f107 031c 	add.w	r3, r7, #28
 800444c:	4619      	mov	r1, r3
 800444e:	480b      	ldr	r0, [pc, #44]	; (800447c <HAL_TIM_MspPostInit+0x164>)
 8004450:	f006 fe26 	bl	800b0a0 <HAL_GPIO_Init>
}
 8004454:	bf00      	nop
 8004456:	3730      	adds	r7, #48	; 0x30
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40010000 	.word	0x40010000
 8004460:	40023800 	.word	0x40023800
 8004464:	40021000 	.word	0x40021000
 8004468:	40000800 	.word	0x40000800
 800446c:	40020c00 	.word	0x40020c00
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40021c00 	.word	0x40021c00
 8004478:	40014400 	.word	0x40014400
 800447c:	40021400 	.word	0x40021400

08004480 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <MX_USART1_UART_Init+0x4c>)
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <MX_USART1_UART_Init+0x50>)
 8004488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <MX_USART1_UART_Init+0x4c>)
 800448c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004492:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <MX_USART1_UART_Init+0x4c>)
 8004494:	2200      	movs	r2, #0
 8004496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <MX_USART1_UART_Init+0x4c>)
 800449a:	2200      	movs	r2, #0
 800449c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <MX_USART1_UART_Init+0x4c>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <MX_USART1_UART_Init+0x4c>)
 80044a6:	220c      	movs	r2, #12
 80044a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <MX_USART1_UART_Init+0x4c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <MX_USART1_UART_Init+0x4c>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044b6:	4805      	ldr	r0, [pc, #20]	; (80044cc <MX_USART1_UART_Init+0x4c>)
 80044b8:	f00c fa90 	bl	80109dc <HAL_UART_Init>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044c2:	f7ff f99c 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200015f0 	.word	0x200015f0
 80044d0:	40011000 	.word	0x40011000

080044d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <MX_USART3_UART_Init+0x4c>)
 80044da:	4a12      	ldr	r2, [pc, #72]	; (8004524 <MX_USART3_UART_Init+0x50>)
 80044dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <MX_USART3_UART_Init+0x4c>)
 80044e0:	4a11      	ldr	r2, [pc, #68]	; (8004528 <MX_USART3_UART_Init+0x54>)
 80044e2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80044e4:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <MX_USART3_UART_Init+0x4c>)
 80044e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <MX_USART3_UART_Init+0x4c>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <MX_USART3_UART_Init+0x4c>)
 80044f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <MX_USART3_UART_Init+0x4c>)
 80044fc:	220c      	movs	r2, #12
 80044fe:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004500:	4b07      	ldr	r3, [pc, #28]	; (8004520 <MX_USART3_UART_Init+0x4c>)
 8004502:	2200      	movs	r2, #0
 8004504:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <MX_USART3_UART_Init+0x4c>)
 8004508:	2200      	movs	r2, #0
 800450a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800450c:	4804      	ldr	r0, [pc, #16]	; (8004520 <MX_USART3_UART_Init+0x4c>)
 800450e:	f00c fa65 	bl	80109dc <HAL_UART_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8004518:	f7ff f971 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20001634 	.word	0x20001634
 8004524:	40004800 	.word	0x40004800
 8004528:	000186a0 	.word	0x000186a0

0800452c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004530:	4b11      	ldr	r3, [pc, #68]	; (8004578 <MX_USART6_UART_Init+0x4c>)
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <MX_USART6_UART_Init+0x50>)
 8004534:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <MX_USART6_UART_Init+0x4c>)
 8004538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800453c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <MX_USART6_UART_Init+0x4c>)
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <MX_USART6_UART_Init+0x4c>)
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <MX_USART6_UART_Init+0x4c>)
 800454c:	2200      	movs	r2, #0
 800454e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <MX_USART6_UART_Init+0x4c>)
 8004552:	220c      	movs	r2, #12
 8004554:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <MX_USART6_UART_Init+0x4c>)
 8004558:	2200      	movs	r2, #0
 800455a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <MX_USART6_UART_Init+0x4c>)
 800455e:	2200      	movs	r2, #0
 8004560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004562:	4805      	ldr	r0, [pc, #20]	; (8004578 <MX_USART6_UART_Init+0x4c>)
 8004564:	f00c fa3a 	bl	80109dc <HAL_UART_Init>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800456e:	f7ff f946 	bl	80037fe <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20001678 	.word	0x20001678
 800457c:	40011400 	.word	0x40011400

08004580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08e      	sub	sp, #56	; 0x38
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a78      	ldr	r2, [pc, #480]	; (8004780 <HAL_UART_MspInit+0x200>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	f040 8083 	bne.w	80046aa <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045a4:	2300      	movs	r3, #0
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	4b76      	ldr	r3, [pc, #472]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	4a75      	ldr	r2, [pc, #468]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045ae:	f043 0310 	orr.w	r3, r3, #16
 80045b2:	6453      	str	r3, [r2, #68]	; 0x44
 80045b4:	4b73      	ldr	r3, [pc, #460]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	4b6f      	ldr	r3, [pc, #444]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4a6e      	ldr	r2, [pc, #440]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045ca:	f043 0302 	orr.w	r3, r3, #2
 80045ce:	6313      	str	r3, [r2, #48]	; 0x30
 80045d0:	4b6c      	ldr	r3, [pc, #432]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	4b68      	ldr	r3, [pc, #416]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4a67      	ldr	r2, [pc, #412]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6313      	str	r3, [r2, #48]	; 0x30
 80045ec:	4b65      	ldr	r3, [pc, #404]	; (8004784 <HAL_UART_MspInit+0x204>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fc:	2302      	movs	r3, #2
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004604:	2303      	movs	r3, #3
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004608:	2307      	movs	r3, #7
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800460c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004610:	4619      	mov	r1, r3
 8004612:	485d      	ldr	r0, [pc, #372]	; (8004788 <HAL_UART_MspInit+0x208>)
 8004614:	f006 fd44 	bl	800b0a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461e:	2302      	movs	r3, #2
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004622:	2300      	movs	r3, #0
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004626:	2303      	movs	r3, #3
 8004628:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800462a:	2307      	movs	r3, #7
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800462e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004632:	4619      	mov	r1, r3
 8004634:	4855      	ldr	r0, [pc, #340]	; (800478c <HAL_UART_MspInit+0x20c>)
 8004636:	f006 fd33 	bl	800b0a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800463a:	4b55      	ldr	r3, [pc, #340]	; (8004790 <HAL_UART_MspInit+0x210>)
 800463c:	4a55      	ldr	r2, [pc, #340]	; (8004794 <HAL_UART_MspInit+0x214>)
 800463e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004640:	4b53      	ldr	r3, [pc, #332]	; (8004790 <HAL_UART_MspInit+0x210>)
 8004642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004646:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004648:	4b51      	ldr	r3, [pc, #324]	; (8004790 <HAL_UART_MspInit+0x210>)
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800464e:	4b50      	ldr	r3, [pc, #320]	; (8004790 <HAL_UART_MspInit+0x210>)
 8004650:	2200      	movs	r2, #0
 8004652:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004654:	4b4e      	ldr	r3, [pc, #312]	; (8004790 <HAL_UART_MspInit+0x210>)
 8004656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800465a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800465c:	4b4c      	ldr	r3, [pc, #304]	; (8004790 <HAL_UART_MspInit+0x210>)
 800465e:	2200      	movs	r2, #0
 8004660:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004662:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <HAL_UART_MspInit+0x210>)
 8004664:	2200      	movs	r2, #0
 8004666:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004668:	4b49      	ldr	r3, [pc, #292]	; (8004790 <HAL_UART_MspInit+0x210>)
 800466a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800466e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004670:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_UART_MspInit+0x210>)
 8004672:	2200      	movs	r2, #0
 8004674:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004676:	4b46      	ldr	r3, [pc, #280]	; (8004790 <HAL_UART_MspInit+0x210>)
 8004678:	2200      	movs	r2, #0
 800467a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800467c:	4844      	ldr	r0, [pc, #272]	; (8004790 <HAL_UART_MspInit+0x210>)
 800467e:	f006 f901 	bl	800a884 <HAL_DMA_Init>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004688:	f7ff f8b9 	bl	80037fe <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a40      	ldr	r2, [pc, #256]	; (8004790 <HAL_UART_MspInit+0x210>)
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
 8004692:	4a3f      	ldr	r2, [pc, #252]	; (8004790 <HAL_UART_MspInit+0x210>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004698:	2200      	movs	r2, #0
 800469a:	2105      	movs	r1, #5
 800469c:	2025      	movs	r0, #37	; 0x25
 800469e:	f006 f8c7 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046a2:	2025      	movs	r0, #37	; 0x25
 80046a4:	f006 f8e0 	bl	800a868 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80046a8:	e116      	b.n	80048d8 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART3)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <HAL_UART_MspInit+0x218>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d179      	bne.n	80047a8 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	4b32      	ldr	r3, [pc, #200]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	4a31      	ldr	r2, [pc, #196]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c2:	6413      	str	r3, [r2, #64]	; 0x40
 80046c4:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	4a2a      	ldr	r2, [pc, #168]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046da:	f043 0304 	orr.w	r3, r3, #4
 80046de:	6313      	str	r3, [r2, #48]	; 0x30
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_UART_MspInit+0x204>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80046ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f2:	2302      	movs	r3, #2
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046fa:	2303      	movs	r3, #3
 80046fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046fe:	2307      	movs	r3, #7
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004706:	4619      	mov	r1, r3
 8004708:	4824      	ldr	r0, [pc, #144]	; (800479c <HAL_UART_MspInit+0x21c>)
 800470a:	f006 fcc9 	bl	800b0a0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800470e:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004710:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <HAL_UART_MspInit+0x224>)
 8004712:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004714:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004716:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800471a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800471c:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004722:	4b1f      	ldr	r3, [pc, #124]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004724:	2200      	movs	r2, #0
 8004726:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004728:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800472a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800472e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004732:	2200      	movs	r2, #0
 8004734:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004736:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004738:	2200      	movs	r2, #0
 800473a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800473c:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800473e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004742:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004744:	4b16      	ldr	r3, [pc, #88]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004746:	2200      	movs	r2, #0
 8004748:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_UART_MspInit+0x220>)
 800474c:	2200      	movs	r2, #0
 800474e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004750:	4813      	ldr	r0, [pc, #76]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004752:	f006 f897 	bl	800a884 <HAL_DMA_Init>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 800475c:	f7ff f84f 	bl	80037fe <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a0f      	ldr	r2, [pc, #60]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
 8004766:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <HAL_UART_MspInit+0x220>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800476c:	2200      	movs	r2, #0
 800476e:	2105      	movs	r1, #5
 8004770:	2027      	movs	r0, #39	; 0x27
 8004772:	f006 f85d 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004776:	2027      	movs	r0, #39	; 0x27
 8004778:	f006 f876 	bl	800a868 <HAL_NVIC_EnableIRQ>
}
 800477c:	e0ac      	b.n	80048d8 <HAL_UART_MspInit+0x358>
 800477e:	bf00      	nop
 8004780:	40011000 	.word	0x40011000
 8004784:	40023800 	.word	0x40023800
 8004788:	40020400 	.word	0x40020400
 800478c:	40020000 	.word	0x40020000
 8004790:	200016bc 	.word	0x200016bc
 8004794:	40026488 	.word	0x40026488
 8004798:	40004800 	.word	0x40004800
 800479c:	40020800 	.word	0x40020800
 80047a0:	2000171c 	.word	0x2000171c
 80047a4:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a4c      	ldr	r2, [pc, #304]	; (80048e0 <HAL_UART_MspInit+0x360>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	f040 8092 	bne.w	80048d8 <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	4b4a      	ldr	r3, [pc, #296]	; (80048e4 <HAL_UART_MspInit+0x364>)
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	4a49      	ldr	r2, [pc, #292]	; (80048e4 <HAL_UART_MspInit+0x364>)
 80047be:	f043 0320 	orr.w	r3, r3, #32
 80047c2:	6453      	str	r3, [r2, #68]	; 0x44
 80047c4:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <HAL_UART_MspInit+0x364>)
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_UART_MspInit+0x364>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	4a42      	ldr	r2, [pc, #264]	; (80048e4 <HAL_UART_MspInit+0x364>)
 80047da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047de:	6313      	str	r3, [r2, #48]	; 0x30
 80047e0:	4b40      	ldr	r3, [pc, #256]	; (80048e4 <HAL_UART_MspInit+0x364>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80047ec:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f2:	2302      	movs	r3, #2
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fa:	2303      	movs	r3, #3
 80047fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80047fe:	2308      	movs	r3, #8
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004806:	4619      	mov	r1, r3
 8004808:	4837      	ldr	r0, [pc, #220]	; (80048e8 <HAL_UART_MspInit+0x368>)
 800480a:	f006 fc49 	bl	800b0a0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800480e:	4b37      	ldr	r3, [pc, #220]	; (80048ec <HAL_UART_MspInit+0x36c>)
 8004810:	4a37      	ldr	r2, [pc, #220]	; (80048f0 <HAL_UART_MspInit+0x370>)
 8004812:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004814:	4b35      	ldr	r3, [pc, #212]	; (80048ec <HAL_UART_MspInit+0x36c>)
 8004816:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800481a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800481c:	4b33      	ldr	r3, [pc, #204]	; (80048ec <HAL_UART_MspInit+0x36c>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004822:	4b32      	ldr	r3, [pc, #200]	; (80048ec <HAL_UART_MspInit+0x36c>)
 8004824:	2200      	movs	r2, #0
 8004826:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004828:	4b30      	ldr	r3, [pc, #192]	; (80048ec <HAL_UART_MspInit+0x36c>)
 800482a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800482e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004830:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <HAL_UART_MspInit+0x36c>)
 8004832:	2200      	movs	r2, #0
 8004834:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004836:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <HAL_UART_MspInit+0x36c>)
 8004838:	2200      	movs	r2, #0
 800483a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800483c:	4b2b      	ldr	r3, [pc, #172]	; (80048ec <HAL_UART_MspInit+0x36c>)
 800483e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004842:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004844:	4b29      	ldr	r3, [pc, #164]	; (80048ec <HAL_UART_MspInit+0x36c>)
 8004846:	2200      	movs	r2, #0
 8004848:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800484a:	4b28      	ldr	r3, [pc, #160]	; (80048ec <HAL_UART_MspInit+0x36c>)
 800484c:	2200      	movs	r2, #0
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004850:	4826      	ldr	r0, [pc, #152]	; (80048ec <HAL_UART_MspInit+0x36c>)
 8004852:	f006 f817 	bl	800a884 <HAL_DMA_Init>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 800485c:	f7fe ffcf 	bl	80037fe <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a22      	ldr	r2, [pc, #136]	; (80048ec <HAL_UART_MspInit+0x36c>)
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
 8004866:	4a21      	ldr	r2, [pc, #132]	; (80048ec <HAL_UART_MspInit+0x36c>)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800486c:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <HAL_UART_MspInit+0x374>)
 800486e:	4a22      	ldr	r2, [pc, #136]	; (80048f8 <HAL_UART_MspInit+0x378>)
 8004870:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <HAL_UART_MspInit+0x374>)
 8004874:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004878:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800487a:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <HAL_UART_MspInit+0x374>)
 800487c:	2240      	movs	r2, #64	; 0x40
 800487e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004880:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <HAL_UART_MspInit+0x374>)
 8004882:	2200      	movs	r2, #0
 8004884:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004886:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <HAL_UART_MspInit+0x374>)
 8004888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800488c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800488e:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <HAL_UART_MspInit+0x374>)
 8004890:	2200      	movs	r2, #0
 8004892:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004894:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <HAL_UART_MspInit+0x374>)
 8004896:	2200      	movs	r2, #0
 8004898:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800489a:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <HAL_UART_MspInit+0x374>)
 800489c:	2200      	movs	r2, #0
 800489e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <HAL_UART_MspInit+0x374>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048a6:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <HAL_UART_MspInit+0x374>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80048ac:	4811      	ldr	r0, [pc, #68]	; (80048f4 <HAL_UART_MspInit+0x374>)
 80048ae:	f005 ffe9 	bl	800a884 <HAL_DMA_Init>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_UART_MspInit+0x33c>
      Error_Handler();
 80048b8:	f7fe ffa1 	bl	80037fe <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <HAL_UART_MspInit+0x374>)
 80048c0:	635a      	str	r2, [r3, #52]	; 0x34
 80048c2:	4a0c      	ldr	r2, [pc, #48]	; (80048f4 <HAL_UART_MspInit+0x374>)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80048c8:	2200      	movs	r2, #0
 80048ca:	2105      	movs	r1, #5
 80048cc:	2047      	movs	r0, #71	; 0x47
 80048ce:	f005 ffaf 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80048d2:	2047      	movs	r0, #71	; 0x47
 80048d4:	f005 ffc8 	bl	800a868 <HAL_NVIC_EnableIRQ>
}
 80048d8:	bf00      	nop
 80048da:	3738      	adds	r7, #56	; 0x38
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40011400 	.word	0x40011400
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40021800 	.word	0x40021800
 80048ec:	2000177c 	.word	0x2000177c
 80048f0:	40026428 	.word	0x40026428
 80048f4:	200017dc 	.word	0x200017dc
 80048f8:	400264a0 	.word	0x400264a0

080048fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
////////////////////////////////////////////////////////////////..
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 80048fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004934 <LoopFillZerobss+0x14>


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004900:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004902:	e003      	b.n	800490c <LoopCopyDataInit>

08004904 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004906:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004908:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800490a:	3104      	adds	r1, #4

0800490c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800490c:	480b      	ldr	r0, [pc, #44]	; (800493c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004910:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004912:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004914:	d3f6      	bcc.n	8004904 <CopyDataInit>
  ldr  r2, =_sbss
 8004916:	4a0b      	ldr	r2, [pc, #44]	; (8004944 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004918:	e002      	b.n	8004920 <LoopFillZerobss>

0800491a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800491a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800491c:	f842 3b04 	str.w	r3, [r2], #4

08004920 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004922:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004924:	d3f9      	bcc.n	800491a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004926:	f7ff fa3b 	bl	8003da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800492a:	f014 fb8d 	bl	8019048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800492e:	f7fe febb 	bl	80036a8 <main>
  bx  lr    
 8004932:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004934:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004938:	08020418 	.word	0x08020418
  ldr  r0, =_sdata
 800493c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004940:	200002e0 	.word	0x200002e0
  ldr  r2, =_sbss
 8004944:	200002e0 	.word	0x200002e0
  ldr  r3, = _ebss
 8004948:	2000e55c 	.word	0x2000e55c

0800494c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800494c:	e7fe      	b.n	800494c <ADC_IRQHandler>
	...

08004950 <buzzing_task>:
 4, 3, 1, 8
 };
*/

//fun
void buzzing_task(void *argument) {
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000.0 / (4 * TEMPO);
 8004958:	4b9f      	ldr	r3, [pc, #636]	; (8004bd8 <buzzing_task+0x288>)
 800495a:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 800495c:	4b9f      	ldr	r3, [pc, #636]	; (8004bdc <buzzing_task+0x28c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f107 010d 	add.w	r1, r7, #13
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	4618      	mov	r0, r3
 800496a:	f011 f9bb 	bl	8015ce4 <xQueueReceive>
		switch (buzzing_type) {
 800496e:	7b7b      	ldrb	r3, [r7, #13]
 8004970:	2b0a      	cmp	r3, #10
 8004972:	f200 8120 	bhi.w	8004bb6 <buzzing_task+0x266>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <buzzing_task+0x2c>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049a9 	.word	0x080049a9
 8004980:	08004a4f 	.word	0x08004a4f
 8004984:	08004a81 	.word	0x08004a81
 8004988:	08004b05 	.word	0x08004b05
 800498c:	08004ad3 	.word	0x08004ad3
 8004990:	08004b3d 	.word	0x08004b3d
 8004994:	08004b97 	.word	0x08004b97
 8004998:	08004ba7 	.word	0x08004ba7
 800499c:	08004b69 	.word	0x08004b69
 80049a0:	08004b79 	.word	0x08004b79
 80049a4:	08004b89 	.word	0x08004b89
		case song:
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 80049a8:	2300      	movs	r3, #0
 80049aa:	82fb      	strh	r3, [r7, #22]
 80049ac:	e04b      	b.n	8004a46 <buzzing_task+0xf6>
				last_wake_time = xTaskGetTickCount();
 80049ae:	f011 ff6f 	bl	8016890 <xTaskGetTickCount>
 80049b2:	4603      	mov	r3, r0
 80049b4:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 80049b6:	8afb      	ldrh	r3, [r7, #22]
 80049b8:	4a89      	ldr	r2, [pc, #548]	; (8004be0 <buzzing_task+0x290>)
 80049ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fc fbc6 	bl	8001150 <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 80049c4:	8afb      	ldrh	r3, [r7, #22]
 80049c6:	4a87      	ldr	r2, [pc, #540]	; (8004be4 <buzzing_task+0x294>)
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	ed93 7a00 	vldr	s14, [r3]
 80049d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80049d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049dc:	ee17 3a90 	vmov	r3, s15
 80049e0:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time*0.95);
 80049e2:	89fb      	ldrh	r3, [r7, #14]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fb fd9d 	bl	8000524 <__aeabi_i2d>
 80049ea:	a377      	add	r3, pc, #476	; (adr r3, 8004bc8 <buzzing_task+0x278>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fe02 	bl	80005f8 <__aeabi_dmul>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4610      	mov	r0, r2
 80049fa:	4619      	mov	r1, r3
 80049fc:	f7fc f8d4 	bl	8000ba8 <__aeabi_d2uiz>
 8004a00:	4602      	mov	r2, r0
 8004a02:	f107 0308 	add.w	r3, r7, #8
 8004a06:	4611      	mov	r1, r2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f011 fd73 	bl	80164f4 <vTaskDelayUntil>
				buzzer(0);
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f7fc fb9e 	bl	8001150 <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time*0.05);
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fb fd84 	bl	8000524 <__aeabi_i2d>
 8004a1c:	a36c      	add	r3, pc, #432	; (adr r3, 8004bd0 <buzzing_task+0x280>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fde9 	bl	80005f8 <__aeabi_dmul>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f7fc f8bb 	bl	8000ba8 <__aeabi_d2uiz>
 8004a32:	4602      	mov	r2, r0
 8004a34:	f107 0308 	add.w	r3, r7, #8
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f011 fd5a 	bl	80164f4 <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004a40:	8afb      	ldrh	r3, [r7, #22]
 8004a42:	3301      	adds	r3, #1
 8004a44:	82fb      	strh	r3, [r7, #22]
 8004a46:	8afb      	ldrh	r3, [r7, #22]
 8004a48:	2b7c      	cmp	r3, #124	; 0x7c
 8004a4a:	d9b0      	bls.n	80049ae <buzzing_task+0x5e>
			}
			break;
 8004a4c:	e0b3      	b.n	8004bb6 <buzzing_task+0x266>
		case ok:
			last_wake_time = xTaskGetTickCount();
 8004a4e:	f011 ff1f 	bl	8016890 <xTaskGetTickCount>
 8004a52:	4603      	mov	r3, r0
 8004a54:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004a56:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004a5a:	f7fc fb79 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004a5e:	2064      	movs	r0, #100	; 0x64
 8004a60:	f011 fdc6 	bl	80165f0 <vTaskDelay>
			buzzer(0);
 8004a64:	2000      	movs	r0, #0
 8004a66:	f7fc fb73 	bl	8001150 <buzzer>
			vTaskDelay(GAP_TIME);
 8004a6a:	2032      	movs	r0, #50	; 0x32
 8004a6c:	f011 fdc0 	bl	80165f0 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004a70:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004a74:	f7fc fb6c 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004a78:	2064      	movs	r0, #100	; 0x64
 8004a7a:	f011 fdb9 	bl	80165f0 <vTaskDelay>
			break;
 8004a7e:	e09a      	b.n	8004bb6 <buzzing_task+0x266>
		case not_ok:
			last_wake_time = xTaskGetTickCount();
 8004a80:	f011 ff06 	bl	8016890 <xTaskGetTickCount>
 8004a84:	4603      	mov	r3, r0
 8004a86:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004a88:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004a8c:	f7fc fb60 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004a90:	2064      	movs	r0, #100	; 0x64
 8004a92:	f011 fdad 	bl	80165f0 <vTaskDelay>
			buzzer(0);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7fc fb5a 	bl	8001150 <buzzer>
			vTaskDelay(GAP_TIME);
 8004a9c:	2032      	movs	r0, #50	; 0x32
 8004a9e:	f011 fda7 	bl	80165f0 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004aa2:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004aa6:	f7fc fb53 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004aaa:	2064      	movs	r0, #100	; 0x64
 8004aac:	f011 fda0 	bl	80165f0 <vTaskDelay>
			buzzer(0);
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f7fc fb4d 	bl	8001150 <buzzer>
			vTaskDelay(GAP_TIME);
 8004ab6:	2032      	movs	r0, #50	; 0x32
 8004ab8:	f011 fd9a 	bl	80165f0 <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8004abc:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004ac0:	f7fc fb46 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004ac4:	2064      	movs	r0, #100	; 0x64
 8004ac6:	f011 fd93 	bl	80165f0 <vTaskDelay>
			buzzer(0);
 8004aca:	2000      	movs	r0, #0
 8004acc:	f7fc fb40 	bl	8001150 <buzzer>
			break;
 8004ad0:	e071      	b.n	8004bb6 <buzzing_task+0x266>
		case control_control:
			last_wake_time = xTaskGetTickCount();
 8004ad2:	f011 fedd 	bl	8016890 <xTaskGetTickCount>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 8004ada:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004ade:	f7fc fb37 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004ae2:	2064      	movs	r0, #100	; 0x64
 8004ae4:	f011 fd84 	bl	80165f0 <vTaskDelay>
			buzzer(0);
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f7fc fb31 	bl	8001150 <buzzer>
			vTaskDelay(GAP_TIME);
 8004aee:	2032      	movs	r0, #50	; 0x32
 8004af0:	f011 fd7e 	bl	80165f0 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004af4:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004af8:	f7fc fb2a 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004afc:	2064      	movs	r0, #100	; 0x64
 8004afe:	f011 fd77 	bl	80165f0 <vTaskDelay>
			break;
 8004b02:	e058      	b.n	8004bb6 <buzzing_task+0x266>
		case control_keyboard:
			last_wake_time = xTaskGetTickCount();
 8004b04:	f011 fec4 	bl	8016890 <xTaskGetTickCount>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004b0c:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004b10:	f7fc fb1e 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004b14:	2064      	movs	r0, #100	; 0x64
 8004b16:	f011 fd6b 	bl	80165f0 <vTaskDelay>
			buzzer(0);
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f7fc fb18 	bl	8001150 <buzzer>
			vTaskDelay(GAP_TIME);
 8004b20:	2032      	movs	r0, #50	; 0x32
 8004b22:	f011 fd65 	bl	80165f0 <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8004b26:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004b2a:	f7fc fb11 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004b2e:	2064      	movs	r0, #100	; 0x64
 8004b30:	f011 fd5e 	bl	80165f0 <vTaskDelay>
			buzzer(BUZZ_TIME);
 8004b34:	2064      	movs	r0, #100	; 0x64
 8004b36:	f7fc fb0b 	bl	8001150 <buzzer>
			break;
 8004b3a:	e03c      	b.n	8004bb6 <buzzing_task+0x266>

		case control_sbc:
			buzzer(BUZZER_LOW);
 8004b3c:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004b40:	f7fc fb06 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004b44:	2064      	movs	r0, #100	; 0x64
 8004b46:	f011 fd53 	bl	80165f0 <vTaskDelay>
			buzzer((BUZZER_HIGH+BUZZER_LOW)/2);
 8004b4a:	f240 404c 	movw	r0, #1100	; 0x44c
 8004b4e:	f7fc faff 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004b52:	2064      	movs	r0, #100	; 0x64
 8004b54:	f011 fd4c 	bl	80165f0 <vTaskDelay>
			buzzer(BUZZER_HIGH);;
 8004b58:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004b5c:	f7fc faf8 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004b60:	2064      	movs	r0, #100	; 0x64
 8004b62:	f011 fd45 	bl	80165f0 <vTaskDelay>
			break;
 8004b66:	e026      	b.n	8004bb6 <buzzing_task+0x266>


		case bz_debug_low:
			buzzer(DEBUG_LOW_FREQ);
 8004b68:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8004b6c:	f7fc faf0 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004b70:	2064      	movs	r0, #100	; 0x64
 8004b72:	f011 fd3d 	bl	80165f0 <vTaskDelay>
			break;
 8004b76:	e01e      	b.n	8004bb6 <buzzing_task+0x266>

		case bz_debug_high:
			buzzer(DEBUG_HIGH_FREQ);
 8004b78:	f640 1082 	movw	r0, #2434	; 0x982
 8004b7c:	f7fc fae8 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004b80:	2064      	movs	r0, #100	; 0x64
 8004b82:	f011 fd35 	bl	80165f0 <vTaskDelay>
			break;
 8004b86:	e016      	b.n	8004bb6 <buzzing_task+0x266>

		case bz_debug_rest:
			buzzer(0);
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f7fc fae1 	bl	8001150 <buzzer>
			vTaskDelay(GAP_TIME);
 8004b8e:	2032      	movs	r0, #50	; 0x32
 8004b90:	f011 fd2e 	bl	80165f0 <vTaskDelay>
			break;
 8004b94:	e00f      	b.n	8004bb6 <buzzing_task+0x266>
		case bz_high:
			buzzer(BUZZER_HIGH);
 8004b96:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004b9a:	f7fc fad9 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004b9e:	2064      	movs	r0, #100	; 0x64
 8004ba0:	f011 fd26 	bl	80165f0 <vTaskDelay>
			break;
 8004ba4:	e007      	b.n	8004bb6 <buzzing_task+0x266>
		case bz_low:
			buzzer(BUZZER_LOW);
 8004ba6:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004baa:	f7fc fad1 	bl	8001150 <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004bae:	2064      	movs	r0, #100	; 0x64
 8004bb0:	f011 fd1e 	bl	80165f0 <vTaskDelay>
			break;
 8004bb4:	bf00      	nop
		}
		buzzer(0);
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7fc faca 	bl	8001150 <buzzer>
		vTaskDelay(GAP_TIME);
 8004bbc:	2032      	movs	r0, #50	; 0x32
 8004bbe:	f011 fd17 	bl	80165f0 <vTaskDelay>
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004bc2:	e6cb      	b.n	800495c <buzzing_task+0xc>
 8004bc4:	f3af 8000 	nop.w
 8004bc8:	66666666 	.word	0x66666666
 8004bcc:	3fee6666 	.word	0x3fee6666
 8004bd0:	9999999a 	.word	0x9999999a
 8004bd4:	3fa99999 	.word	0x3fa99999
 8004bd8:	42fa0000 	.word	0x42fa0000
 8004bdc:	20000478 	.word	0x20000478
 8004be0:	0801fa20 	.word	0x0801fa20
 8004be4:	0801fb1c 	.word	0x0801fb1c

08004be8 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08c      	sub	sp, #48	; 0x30
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	//check which CAN bus received it
	//required because the 2 canbuses use seperate FIFOs for receive
	if (hcan->Instance == CAN1) {
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <can_ISR+0x8c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d118      	bne.n	8004c2c <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 8004bfa:	210e      	movs	r1, #14
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f005 fb12 	bl	800a226 <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 8004c02:	f107 020c 	add.w	r2, r7, #12
 8004c06:	f107 0314 	add.w	r3, r7, #20
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	481a      	ldr	r0, [pc, #104]	; (8004c78 <can_ISR+0x90>)
 8004c0e:	f7fc fae5 	bl	80011dc <can1_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId, rx_buffer);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f107 020c 	add.w	r2, r7, #12
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4817      	ldr	r0, [pc, #92]	; (8004c7c <can_ISR+0x94>)
 8004c1e:	f000 f833 	bl	8004c88 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004c22:	210e      	movs	r1, #14
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f005 fad8 	bl	800a1da <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 8004c2a:	e01e      	b.n	8004c6a <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <can_ISR+0x98>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d119      	bne.n	8004c6a <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 8004c36:	2170      	movs	r1, #112	; 0x70
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f005 faf4 	bl	800a226 <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8004c3e:	f107 020c 	add.w	r2, r7, #12
 8004c42:	f107 0314 	add.w	r3, r7, #20
 8004c46:	4619      	mov	r1, r3
 8004c48:	480e      	ldr	r0, [pc, #56]	; (8004c84 <can_ISR+0x9c>)
 8004c4a:	f7fc fad8 	bl	80011fe <can2_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId + 12, rx_buffer);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	330c      	adds	r3, #12
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f107 020c 	add.w	r2, r7, #12
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4807      	ldr	r0, [pc, #28]	; (8004c7c <can_ISR+0x94>)
 8004c5e:	f000 f813 	bl	8004c88 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004c62:	2170      	movs	r1, #112	; 0x70
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f005 fab8 	bl	800a1da <HAL_CAN_ActivateNotification>
}
 8004c6a:	bf00      	nop
 8004c6c:	3730      	adds	r7, #48	; 0x30
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40006400 	.word	0x40006400
 8004c78:	200003e8 	.word	0x200003e8
 8004c7c:	2000183c 	.word	0x2000183c
 8004c80:	40006800 	.word	0x40006800
 8004c84:	20000410 	.word	0x20000410

08004c88 <convert_raw_can_data>:
 * in the struct for the motor.
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id, uint8_t *rx_buffer) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	460b      	mov	r3, r1
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	817b      	strh	r3, [r7, #10]
	uint16_t idnum = motor_id - 0x201;
 8004c96:	897b      	ldrh	r3, [r7, #10]
 8004c98:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8004c9c:	847b      	strh	r3, [r7, #34]	; 0x22

	//if idnum > 24, it's not a DJI motor. Add in a seperate processing function if other CAN devices are added
	if (idnum > 24)
 8004c9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ca0:	2b18      	cmp	r3, #24
 8004ca2:	f200 8156 	bhi.w	8004f52 <convert_raw_can_data+0x2ca>
	{
		return;
	}
	motor_data_t* curr_motor = &can_motor_data[idnum];
 8004ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ca8:	22a4      	movs	r2, #164	; 0xa4
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	61fb      	str	r3, [r7, #28]
	//motor must be initialised in motor_config.c first
	if (curr_motor->motor_type > 0) {
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	789b      	ldrb	r3, [r3, #2]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8147 	beq.w	8004f4c <convert_raw_can_data+0x2c4>
		//convert the raw data back into the respective values
		curr_motor->id 				= motor_id;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	897a      	ldrh	r2, [r7, #10]
 8004cc2:	801a      	strh	r2, [r3, #0]
		curr_motor->raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	b21a      	sxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	b21b      	sxth	r3, r3
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	b21a      	sxth	r2, r3
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm						=(rx_buffer[2] << 8) | rx_buffer[3];
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3302      	adds	r3, #2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3303      	adds	r3, #3
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b21b      	sxth	r3, r3
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	833b      	strh	r3, [r7, #24]
		curr_motor->raw_data.rpm 		= curr_motor->raw_data.rpm * SPEED_LPF + temp_rpm * (1-SPEED_LPF);
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	8b3a      	ldrh	r2, [r7, #24]
 8004cf6:	811a      	strh	r2, [r3, #8]
		curr_motor->raw_data.torque 	= (rx_buffer[4] << 8) | rx_buffer[5];
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	b21a      	sxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3305      	adds	r3, #5
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	b21b      	sxth	r3, r3
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	b21a      	sxth	r2, r3
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	815a      	strh	r2, [r3, #10]
		curr_motor->raw_data.temp 	= (rx_buffer[6]);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	799a      	ldrb	r2, [r3, #6]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	731a      	strb	r2, [r3, #12]
		curr_motor->last_time[1] 		= curr_motor->last_time[0];
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		curr_motor->last_time[0]	 	= get_microseconds();
 8004d26:	f7fd f9e1 	bl	80020ec <get_microseconds>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		float rds_passed = (float)(curr_motor->raw_data.angle[0] - curr_motor->raw_data.angle[1]) /8192;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d4a:	eddf 6a84 	vldr	s13, [pc, #528]	; 8004f5c <convert_raw_can_data+0x2d4>
 8004d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d52:	edc7 7a05 	vstr	s15, [r7, #20]
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 8004d56:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d5a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004f60 <convert_raw_can_data+0x2d8>
 8004d5e:	ee67 6a87 	vmul.f32	s13, s15, s14
				/ curr_motor->last_time[0] - curr_motor->last_time[1]) * 60;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d86:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8004f64 <convert_raw_can_data+0x2dc>
 8004d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
		//process the angle data differently depending on the motor type to get radians in the
		//adj_angle value
		switch (curr_motor->motor_type) {
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	789b      	ldrb	r3, [r3, #2]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d83b      	bhi.n	8004e16 <convert_raw_can_data+0x18e>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <convert_raw_can_data+0x11c>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004e17 	.word	0x08004e17
 8004dac:	08004e17 	.word	0x08004e17
 8004db0:	08004e17 	.word	0x08004e17
 8004db4:	08004ddb 	.word	0x08004ddb
 8004db8:	08004ddb 	.word	0x08004ddb
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004df1 	.word	0x08004df1
 8004dc4:	08004df1 	.word	0x08004df1
		case TYPE_GM6020:
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3370      	adds	r3, #112	; 0x70
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f000 f8d0 	bl	8004f78 <angle_offset>
			break;
 8004dd8:	e01e      	b.n	8004e18 <convert_raw_can_data+0x190>
		case TYPE_M2006:
		case TYPE_M3508:
			break;
		case TYPE_M2006_STEPS:
		case TYPE_M3508_STEPS:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	1d18      	adds	r0, r3, #4
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f103 0170 	add.w	r1, r3, #112	; 0x70
					curr_motor->last_time);
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	339c      	adds	r3, #156	; 0x9c
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004de8:	461a      	mov	r2, r3
 8004dea:	f000 f981 	bl	80050f0 <motor_calc_odometry>
			break;
 8004dee:	e013      	b.n	8004e18 <convert_raw_can_data+0x190>
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	1d18      	adds	r0, r3, #4
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f103 0170 	add.w	r1, r3, #112	; 0x70
					curr_motor->last_time);
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	339c      	adds	r3, #156	; 0x9c
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f000 f976 	bl	80050f0 <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	1d1a      	adds	r2, r3, #4
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	3370      	adds	r3, #112	; 0x70
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 f8b2 	bl	8004f78 <angle_offset>
			break;
 8004e14:	e000      	b.n	8004e18 <convert_raw_can_data+0x190>
		default:
			break;
 8004e16:	bf00      	nop

		}

		//initialise task switching variables
		BaseType_t xHigherPriorityTaskWoken, xResult;
		xHigherPriorityTaskWoken = pdFALSE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]

		//set event group bits so that the tasks and PIDs only trigger upon updated data
		//also checks if the respective tasks are set to ready
		switch (idnum + 1) {
 8004e1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e1e:	3301      	adds	r3, #1
 8004e20:	3b01      	subs	r3, #1
 8004e22:	2b11      	cmp	r3, #17
 8004e24:	f200 8082 	bhi.w	8004f2c <convert_raw_can_data+0x2a4>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <convert_raw_can_data+0x1a8>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004edd 	.word	0x08004edd
 8004e34:	08004ec9 	.word	0x08004ec9
 8004e38:	08004ef1 	.word	0x08004ef1
 8004e3c:	08004f2d 	.word	0x08004f2d
 8004e40:	08004f2d 	.word	0x08004f2d
 8004e44:	08004f2d 	.word	0x08004f2d
 8004e48:	08004f2d 	.word	0x08004f2d
 8004e4c:	08004f2d 	.word	0x08004f2d
 8004e50:	08004f2d 	.word	0x08004f2d
 8004e54:	08004f2d 	.word	0x08004f2d
 8004e58:	08004f2d 	.word	0x08004f2d
 8004e5c:	08004f2d 	.word	0x08004f2d
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08004e79 	.word	0x08004e79
 8004e68:	08004eb5 	.word	0x08004eb5
 8004e6c:	08004ea1 	.word	0x08004ea1
 8004e70:	08004f05 	.word	0x08004f05
 8004e74:	08004f19 	.word	0x08004f19
		#ifndef CHASSIS_MCU
				case FR_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 8004e78:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <convert_raw_can_data+0x2e0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f107 0210 	add.w	r2, r7, #16
 8004e80:	2108      	movs	r1, #8
 8004e82:	4618      	mov	r0, r3
 8004e84:	f010 fb8e 	bl	80155a4 <xEventGroupSetBitsFromISR>
 8004e88:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8004e8a:	e050      	b.n	8004f2e <convert_raw_can_data+0x2a6>
				case FL_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 8004e8c:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <convert_raw_can_data+0x2e0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f107 0210 	add.w	r2, r7, #16
 8004e94:	2104      	movs	r1, #4
 8004e96:	4618      	mov	r0, r3
 8004e98:	f010 fb84 	bl	80155a4 <xEventGroupSetBitsFromISR>
 8004e9c:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8004e9e:	e046      	b.n	8004f2e <convert_raw_can_data+0x2a6>
				case BL_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0010,
 8004ea0:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <convert_raw_can_data+0x2e0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f107 0210 	add.w	r2, r7, #16
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f010 fb7a 	bl	80155a4 <xEventGroupSetBitsFromISR>
 8004eb0:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8004eb2:	e03c      	b.n	8004f2e <convert_raw_can_data+0x2a6>
				case BR_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
 8004eb4:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <convert_raw_can_data+0x2e0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f107 0210 	add.w	r2, r7, #16
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f010 fb70 	bl	80155a4 <xEventGroupSetBitsFromISR>
 8004ec4:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8004ec6:	e032      	b.n	8004f2e <convert_raw_can_data+0x2a6>
		#endif
				case LFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 8004ec8:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <convert_raw_can_data+0x2e4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f107 0210 	add.w	r2, r7, #16
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f010 fb66 	bl	80155a4 <xEventGroupSetBitsFromISR>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8004eda:	e028      	b.n	8004f2e <convert_raw_can_data+0x2a6>
				case RFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 8004edc:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <convert_raw_can_data+0x2e4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f107 0210 	add.w	r2, r7, #16
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f010 fb5c 	bl	80155a4 <xEventGroupSetBitsFromISR>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8004eee:	e01e      	b.n	8004f2e <convert_raw_can_data+0x2a6>
				case FEEDER_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 8004ef0:	4b1e      	ldr	r3, [pc, #120]	; (8004f6c <convert_raw_can_data+0x2e4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f107 0210 	add.w	r2, r7, #16
 8004ef8:	2104      	movs	r1, #4
 8004efa:	4618      	mov	r0, r3
 8004efc:	f010 fb52 	bl	80155a4 <xEventGroupSetBitsFromISR>
 8004f00:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8004f02:	e014      	b.n	8004f2e <convert_raw_can_data+0x2a6>
				case PITCH_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <convert_raw_can_data+0x2e8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f107 0210 	add.w	r2, r7, #16
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f010 fb48 	bl	80155a4 <xEventGroupSetBitsFromISR>
 8004f14:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8004f16:	e00a      	b.n	8004f2e <convert_raw_can_data+0x2a6>
				case YAW_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 8004f18:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <convert_raw_can_data+0x2e8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f107 0210 	add.w	r2, r7, #16
 8004f20:	2102      	movs	r1, #2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f010 fb3e 	bl	80155a4 <xEventGroupSetBitsFromISR>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8004f2a:	e000      	b.n	8004f2e <convert_raw_can_data+0x2a6>
				default:
					idnum = idnum;
					//error handler
					break;
 8004f2c:	bf00      	nop
				}

				//switches tasks if a higher priority task is ready.
				//required because the function is in an ISR
				if (xResult != pdFAIL) {
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00f      	beq.n	8004f54 <convert_raw_can_data+0x2cc>
					portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00c      	beq.n	8004f54 <convert_raw_can_data+0x2cc>
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <convert_raw_can_data+0x2ec>)
 8004f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	e003      	b.n	8004f54 <convert_raw_can_data+0x2cc>
				}
			} else {
				//this is a useless statement so that it is possible to set a breakpoint here lol
				uint8_t stopper = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	76fb      	strb	r3, [r7, #27]
 8004f50:	e000      	b.n	8004f54 <convert_raw_can_data+0x2cc>
		return;
 8004f52:	bf00      	nop
				//error handler
		}
}
 8004f54:	3728      	adds	r7, #40	; 0x28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	46000000 	.word	0x46000000
 8004f60:	461c4000 	.word	0x461c4000
 8004f64:	42700000 	.word	0x42700000
 8004f68:	20000460 	.word	0x20000460
 8004f6c:	20000464 	.word	0x20000464
 8004f70:	2000045c 	.word	0x2000045c
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]

	//if there's a gearbox, use the ticks after the gearbox.
	//make sure center angle is properly set with respect to the zero-ing angle
	//YOUR ROBOT MUST HAVE A WAY TO ZERO THIS ANGLE AND IMPLEMENT A ZEROING FUNCTION AT STARTUP
	//IF NOT IT WON'T WORK 							-wx
	if (angle_data->gearbox_ratio > 0) {
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	edd3 7a06 	vldr	s15, [r3, #24]
 8004f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	dd69      	ble.n	800506a <angle_offset+0xf2>
		temp_ang = angle_data->ticks - angle_data->center_ang;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	60fb      	str	r3, [r7, #12]
		if (temp_ang > (4096 * angle_data->gearbox_ratio)) {
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fb2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80050dc <angle_offset+0x164>
 8004fb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc2:	dd13      	ble.n	8004fec <angle_offset+0x74>
			temp_ang -= (8192 * angle_data->gearbox_ratio);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fd4:	eddf 6a42 	vldr	s13, [pc, #264]	; 80050e0 <angle_offset+0x168>
 8004fd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fe4:	ee17 3a90 	vmov	r3, s15
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e023      	b.n	8005034 <angle_offset+0xbc>
		} else if (temp_ang < (-4096 * angle_data->gearbox_ratio)) {
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	edd3 7a06 	vldr	s15, [r3, #24]
 8004ffc:	eddf 6a39 	vldr	s13, [pc, #228]	; 80050e4 <angle_offset+0x16c>
 8005000:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500c:	d512      	bpl.n	8005034 <angle_offset+0xbc>
			temp_ang += 8192 * angle_data->gearbox_ratio;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	ee07 3a90 	vmov	s15, r3
 8005014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	edd3 7a06 	vldr	s15, [r3, #24]
 800501e:	eddf 6a30 	vldr	s13, [pc, #192]	; 80050e0 <angle_offset+0x168>
 8005022:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800502a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800502e:	ee17 3a90 	vmov	r3, s15
 8005032:	60fb      	str	r3, [r7, #12]
		}
		angle_data->ticks = temp_ang;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]
		angle_data->adj_ang = (float) temp_ang * 2 *PI / (8192 * angle_data->gearbox_ratio);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005044:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005048:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80050e8 <angle_offset+0x170>
 800504c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	edd3 7a06 	vldr	s15, [r3, #24]
 8005056:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80050e0 <angle_offset+0x168>
 800505a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800505e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	edc3 7a07 	vstr	s15, [r3, #28]
		} else if (temp_ang < -4096) {
			temp_ang += 8192;
		}
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
	}
}
 8005068:	e031      	b.n	80050ce <angle_offset+0x156>
		temp_ang = (int32_t) (motor_data->angle[0]) - angle_data->center_ang;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005070:	461a      	mov	r2, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	60fb      	str	r3, [r7, #12]
		if (temp_ang > 4096) {
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005080:	dd04      	ble.n	800508c <angle_offset+0x114>
			temp_ang -= 8192;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e007      	b.n	800509c <angle_offset+0x124>
		} else if (temp_ang < -4096) {
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8005092:	da03      	bge.n	800509c <angle_offset+0x124>
			temp_ang += 8192;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800509a:	60fb      	str	r3, [r7, #12]
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	edd3 7a07 	vldr	s15, [r3, #28]
 80050a2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80050ec <angle_offset+0x174>
 80050a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80050e8 <angle_offset+0x170>
 80050b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80050bc:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80050dc <angle_offset+0x164>
 80050c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80050c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	45800000 	.word	0x45800000
 80050e0:	46000000 	.word	0x46000000
 80050e4:	c5800000 	.word	0xc5800000
 80050e8:	40490fdb 	.word	0x40490fdb
 80050ec:	00000000 	.word	0x00000000

080050f0 <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data,
		angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 80050f0:	b480      	push	{r7}
 80050f2:	b089      	sub	sp, #36	; 0x24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
	int8_t int_round_passed = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	77fb      	strb	r3, [r7, #31]
	//check to make sure it's not the same data point
	if (feedback_times[0] - feedback_times[1] >= 1) {
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d02e      	beq.n	800516c <motor_calc_odometry+0x7c>
		float rounds_passed = (((float)(feedback_times[0] - feedback_times[1]) * motor_data->rpm)/(60 * TIMER_FREQ));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005128:	ee07 3a90 	vmov	s15, r3
 800512c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005134:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80052a8 <motor_calc_odometry+0x1b8>
 8005138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800513c:	edc7 7a06 	vstr	s15, [r7, #24]
		if (fabs(rounds_passed) >= 1) {
 8005140:	edd7 7a06 	vldr	s15, [r7, #24]
 8005144:	eef0 7ae7 	vabs.f32	s15, s15
 8005148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800514c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005154:	db08      	blt.n	8005168 <motor_calc_odometry+0x78>
			int_round_passed = rounds_passed;
 8005156:	edd7 7a06 	vldr	s15, [r7, #24]
 800515a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800515e:	edc7 7a00 	vstr	s15, [r7]
 8005162:	783b      	ldrb	r3, [r7, #0]
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e001      	b.n	800516c <motor_calc_odometry+0x7c>
		} else {
			int_round_passed = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	77fb      	strb	r3, [r7, #31]
		}
	}
	int16_t abs_angle_diff;
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800517a:	b29b      	uxth	r3, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	b29b      	uxth	r3, r3
 8005180:	83bb      	strh	r3, [r7, #28]
	//generally the motor won't exceed half a turn between each feedback
	if (abs_angle_diff > 4096) {
 8005182:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518a:	dd05      	ble.n	8005198 <motor_calc_odometry+0xa8>
		abs_angle_diff -= 8192;
 800518c:	8bbb      	ldrh	r3, [r7, #28]
 800518e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8005192:	b29b      	uxth	r3, r3
 8005194:	83bb      	strh	r3, [r7, #28]
 8005196:	e009      	b.n	80051ac <motor_calc_odometry+0xbc>
	} else if (abs_angle_diff < -4096) {
 8005198:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800519c:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80051a0:	da04      	bge.n	80051ac <motor_calc_odometry+0xbc>
		abs_angle_diff += 8192;
 80051a2:	8bbb      	ldrh	r3, [r7, #28]
 80051a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	83bb      	strh	r3, [r7, #28]
	 } else {
	 abs_angle_diff = (8192-motor_data->angle[0]) - motor_data->angle[1];
	 }
	 }
	 */
	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80051b2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80052ac <motor_calc_odometry+0x1bc>
 80051b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051be:	ee17 3a90 	vmov	r3, s15
 80051c2:	82fb      	strh	r3, [r7, #22]
	angle_data->ticks += (int_round_passed * 8192) + abs_angle_diff;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80051cc:	0359      	lsls	r1, r3, #13
 80051ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80051d2:	440b      	add	r3, r1
 80051d4:	441a      	add	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	601a      	str	r2, [r3, #0]
	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80051ec:	ee67 6a27 	vmul.f32	s13, s14, s15
 80051f0:	8afb      	ldrh	r3, [r7, #22]
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	edc3 7a08 	vstr	s15, [r3, #32]
	angle_data->adj_ang = (float) (angle_data->ticks % gear_ticks ) * 2*PI/gear_ticks;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	8afa      	ldrh	r2, [r7, #22]
 800520a:	fb93 f1f2 	sdiv	r1, r3, r2
 800520e:	fb01 f202 	mul.w	r2, r1, r2
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800521c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005220:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80052b0 <motor_calc_odometry+0x1c0>
 8005224:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005228:	8afb      	ldrh	r3, [r7, #22]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_data->adj_ang = (angle_data->adj_ang > PI) ? (angle_data->adj_ang - 2*PI) : (angle_data->adj_ang < -PI) ? angle_data->adj_ang+2*PI : angle_data->adj_ang;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005242:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80052b0 <motor_calc_odometry+0x1c0>
 8005246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800524a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524e:	dd07      	ble.n	8005260 <motor_calc_odometry+0x170>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	edd3 7a07 	vldr	s15, [r3, #28]
 8005256:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80052b4 <motor_calc_odometry+0x1c4>
 800525a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800525e:	e014      	b.n	800528a <motor_calc_odometry+0x19a>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	edd3 7a07 	vldr	s15, [r3, #28]
 8005266:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80052b8 <motor_calc_odometry+0x1c8>
 800526a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800526e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005272:	d507      	bpl.n	8005284 <motor_calc_odometry+0x194>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	edd3 7a07 	vldr	s15, [r3, #28]
 800527a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80052b4 <motor_calc_odometry+0x1c4>
 800527e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005282:	e002      	b.n	800528a <motor_calc_odometry+0x19a>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	edd3 7a07 	vldr	s15, [r3, #28]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	edc3 7a07 	vstr	s15, [r3, #28]
	motor_data->angle[1] = motor_data->angle[0];
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	805a      	strh	r2, [r3, #2]
}
 800529a:	bf00      	nop
 800529c:	3724      	adds	r7, #36	; 0x24
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	49127c00 	.word	0x49127c00
 80052ac:	46000000 	.word	0x46000000
 80052b0:	40490fdb 	.word	0x40490fdb
 80052b4:	40c90fdb 	.word	0x40c90fdb
 80052b8:	c0490fdb 	.word	0xc0490fdb

080052bc <control_input_task>:

uint8_t control_mode = CONTROL_DEFAULT;
uint8_t safety_toggle = ARM_SWITCH;
uint8_t launcher_safety_toggle = ARM_SWITCH;

void control_input_task(void *argument) {
 80052bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c0:	b088      	sub	sp, #32
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
	TickType_t start_time;
	control_reset();
 80052c6:	f000 f935 	bl	8005534 <control_reset>
	chassis_yaw_pid_init();
 80052ca:	f000 fa25 	bl	8005718 <chassis_yaw_pid_init>
	gimbal_ctrl_data.imu_mode = GIMBAL_MODE;
 80052ce:	4b64      	ldr	r3, [pc, #400]	; (8005460 <control_input_task+0x1a4>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	721a      	strb	r2, [r3, #8]
	dbus_remote_start();
 80052d4:	f7fc f8ea 	bl	80014ac <dbus_remote_start>
	safety_toggle = 1;
 80052d8:	4b62      	ldr	r3, [pc, #392]	; (8005464 <control_input_task+0x1a8>)
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
	vTaskDelay(100);
 80052de:	2064      	movs	r0, #100	; 0x64
 80052e0:	f011 f986 	bl	80165f0 <vTaskDelay>

	//checks if any of the remote axes are not 0
	//if any axes isn't 0, remote packet might have been read in the middle so reset uart
	uint8_t rc_check;
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50
 80052e4:	e01a      	b.n	800531c <control_input_task+0x60>
			|| fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50) {
		uint8_t temp_msg;
		temp_msg = not_ok;
 80052e6:	2302      	movs	r3, #2
 80052e8:	75fb      	strb	r3, [r7, #23]
		xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80052ea:	4b5f      	ldr	r3, [pc, #380]	; (8005468 <control_input_task+0x1ac>)
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	f107 0117 	add.w	r1, r7, #23
 80052f2:	2300      	movs	r3, #0
 80052f4:	2200      	movs	r2, #0
 80052f6:	f010 fb5b 	bl	80159b0 <xQueueGenericSend>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 80052fa:	21c8      	movs	r1, #200	; 0xc8
 80052fc:	2001      	movs	r0, #1
 80052fe:	f011 ff87 	bl	8017210 <ulTaskNotifyTake>
 8005302:	4603      	mov	r3, r0
 8005304:	77fb      	strb	r3, [r7, #31]
		HAL_UART_DMAStop(&DBUS_UART);
 8005306:	4859      	ldr	r0, [pc, #356]	; (800546c <control_input_task+0x1b0>)
 8005308:	f00b fbb5 	bl	8010a76 <HAL_UART_DMAStop>
		dbus_remote_start();
 800530c:	f7fc f8ce 	bl	80014ac <dbus_remote_start>
		if (rc_check) {
 8005310:	7ffb      	ldrb	r3, [r7, #31]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <control_input_task+0x60>
			vTaskDelay(200);
 8005316:	20c8      	movs	r0, #200	; 0xc8
 8005318:	f011 f96a 	bl	80165f0 <vTaskDelay>
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50
 800531c:	4b54      	ldr	r3, [pc, #336]	; (8005470 <control_input_task+0x1b4>)
 800531e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb f8fe 	bl	8000524 <__aeabi_i2d>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4690      	mov	r8, r2
 800532e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	4b4f      	ldr	r3, [pc, #316]	; (8005474 <control_input_task+0x1b8>)
 8005338:	4640      	mov	r0, r8
 800533a:	4649      	mov	r1, r9
 800533c:	f7fb fbec 	bl	8000b18 <__aeabi_dcmpgt>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1cf      	bne.n	80052e6 <control_input_task+0x2a>
 8005346:	4b4a      	ldr	r3, [pc, #296]	; (8005470 <control_input_task+0x1b4>)
 8005348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800534c:	4618      	mov	r0, r3
 800534e:	f7fb f8e9 	bl	8000524 <__aeabi_i2d>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4692      	mov	sl, r2
 8005358:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	4b44      	ldr	r3, [pc, #272]	; (8005474 <control_input_task+0x1b8>)
 8005362:	4650      	mov	r0, sl
 8005364:	4659      	mov	r1, fp
 8005366:	f7fb fbd7 	bl	8000b18 <__aeabi_dcmpgt>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ba      	bne.n	80052e6 <control_input_task+0x2a>
			|| fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50) {
 8005370:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <control_input_task+0x1b4>)
 8005372:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fb f8d4 	bl	8000524 <__aeabi_i2d>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	603a      	str	r2, [r7, #0]
 8005382:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	4b39      	ldr	r3, [pc, #228]	; (8005474 <control_input_task+0x1b8>)
 800538e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005392:	f7fb fbc1 	bl	8000b18 <__aeabi_dcmpgt>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1a4      	bne.n	80052e6 <control_input_task+0x2a>
 800539c:	4b34      	ldr	r3, [pc, #208]	; (8005470 <control_input_task+0x1b4>)
 800539e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fb f8be 	bl	8000524 <__aeabi_i2d>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4614      	mov	r4, r2
 80053ae:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	4b2f      	ldr	r3, [pc, #188]	; (8005474 <control_input_task+0x1b8>)
 80053b8:	4620      	mov	r0, r4
 80053ba:	4629      	mov	r1, r5
 80053bc:	f7fb fbac 	bl	8000b18 <__aeabi_dcmpgt>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d18f      	bne.n	80052e6 <control_input_task+0x2a>
		}
	}

	safety_toggle = ARM_SWITCH;
 80053c6:	4b27      	ldr	r3, [pc, #156]	; (8005464 <control_input_task+0x1a8>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
	while (1) {
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 80053cc:	21c8      	movs	r1, #200	; 0xc8
 80053ce:	2001      	movs	r0, #1
 80053d0:	f011 ff1e 	bl	8017210 <ulTaskNotifyTake>
 80053d4:	4603      	mov	r3, r0
 80053d6:	77fb      	strb	r3, [r7, #31]
		if (rc_check) {
 80053d8:	7ffb      	ldrb	r3, [r7, #31]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d02f      	beq.n	800543e <control_input_task+0x182>
			status_led(1, on_led);
 80053de:	2100      	movs	r1, #0
 80053e0:	2001      	movs	r0, #1
 80053e2:	f7fc fdab 	bl	8001f3c <status_led>
			start_time = xTaskGetTickCount();
 80053e6:	f011 fa53 	bl	8016890 <xTaskGetTickCount>
 80053ea:	4603      	mov	r3, r0
 80053ec:	61bb      	str	r3, [r7, #24]
			if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 80053ee:	4b20      	ldr	r3, [pc, #128]	; (8005470 <control_input_task+0x1b4>)
 80053f0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d110      	bne.n	800541a <control_input_task+0x15e>
				laser_on();
 80053f8:	f7fc f8fc 	bl	80015f4 <laser_on>
				control_mode_change(remote_cmd.side_dial);
 80053fc:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <control_input_task+0x1b4>)
 80053fe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005402:	4618      	mov	r0, r3
 8005404:	f000 f8c8 	bl	8005598 <control_mode_change>
				safety_toggle = 0;
 8005408:	4b16      	ldr	r3, [pc, #88]	; (8005464 <control_input_task+0x1a8>)
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
				launcher_safety_toggle = 0;
 800540e:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <control_input_task+0x1bc>)
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
				control_reset();
 8005414:	f000 f88e 	bl	8005534 <control_reset>
 8005418:	e01b      	b.n	8005452 <control_input_task+0x196>
			} else {

				switch (control_mode) {
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <control_input_task+0x1c0>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d002      	beq.n	8005428 <control_input_task+0x16c>
 8005422:	2b02      	cmp	r3, #2
 8005424:	d003      	beq.n	800542e <control_input_task+0x172>
					break;
				case REMOTE_CTRL_MODE:
					remote_control_input();
					break;
				default:
					break;
 8005426:	e005      	b.n	8005434 <control_input_task+0x178>
					keyboard_control_input();
 8005428:	f000 f990 	bl	800574c <keyboard_control_input>
					break;
 800542c:	e002      	b.n	8005434 <control_input_task+0x178>
					remote_control_input();
 800542e:	f000 fadd 	bl	80059ec <remote_control_input>
					break;
 8005432:	bf00      	nop

				}
				status_led(1, off_led);
 8005434:	2101      	movs	r1, #1
 8005436:	2001      	movs	r0, #1
 8005438:	f7fc fd80 	bl	8001f3c <status_led>
 800543c:	e009      	b.n	8005452 <control_input_task+0x196>
			}
		} else {
			kill_can();
 800543e:	f003 fa85 	bl	800894c <kill_can>
			control_reset();
 8005442:	f000 f877 	bl	8005534 <control_reset>
			launcher_safety_toggle = LAUNCHER_SAFETY;
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <control_input_task+0x1bc>)
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
			safety_toggle = ARM_SWITCH;
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <control_input_task+0x1a8>)
 800544e:	2200      	movs	r2, #0
 8005450:	701a      	strb	r2, [r3, #0]

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 8005452:	f107 0318 	add.w	r3, r7, #24
 8005456:	2102      	movs	r1, #2
 8005458:	4618      	mov	r0, r3
 800545a:	f011 f84b 	bl	80164f4 <vTaskDelayUntil>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800545e:	e7b5      	b.n	80053cc <control_input_task+0x110>
 8005460:	200027bc 	.word	0x200027bc
 8005464:	200027fc 	.word	0x200027fc
 8005468:	20000478 	.word	0x20000478
 800546c:	20001634 	.word	0x20001634
 8005470:	20000310 	.word	0x20000310
 8005474:	40490000 	.word	0x40490000
 8005478:	200027fd 	.word	0x200027fd
 800547c:	20000008 	.word	0x20000008

08005480 <chassis_center_yaw>:
	}
	osThreadTerminate(NULL);
}

float chassis_center_yaw() {
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
	speed_pid(0, can_motors[YAW_MOTOR_ID - 1].angle_data.adj_ang,
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <chassis_center_yaw+0x40>)
 8005486:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fb f85b 	bl	8000548 <__aeabi_f2d>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	480b      	ldr	r0, [pc, #44]	; (80054c4 <chassis_center_yaw+0x44>)
 8005498:	ec43 2b11 	vmov	d1, r2, r3
 800549c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80054b8 <chassis_center_yaw+0x38>
 80054a0:	f002 ff22 	bl	80082e8 <speed_pid>
			&yaw_pid_data);
	return yaw_pid_data.output;
 80054a4:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <chassis_center_yaw+0x44>)
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	ee07 3a90 	vmov	s15, r3
}
 80054ac:	eeb0 0a67 	vmov.f32	s0, s15
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	f3af 8000 	nop.w
	...
 80054c0:	2000183c 	.word	0x2000183c
 80054c4:	200027c8 	.word	0x200027c8

080054c8 <chassis_set_ctrl>:

void chassis_set_ctrl(float forward, float horizontal, float yaw) {
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80054d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80054d6:	ed87 1a01 	vstr	s2, [r7, #4]
	chassis_ctrl_data.enabled = 1;
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <chassis_set_ctrl+0x38>)
 80054dc:	2201      	movs	r2, #1
 80054de:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.horizontal = horizontal;
 80054e0:	4a07      	ldr	r2, [pc, #28]	; (8005500 <chassis_set_ctrl+0x38>)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	6053      	str	r3, [r2, #4]
	chassis_ctrl_data.forward = forward;
 80054e6:	4a06      	ldr	r2, [pc, #24]	; (8005500 <chassis_set_ctrl+0x38>)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6013      	str	r3, [r2, #0]
	chassis_ctrl_data.yaw = yaw;
 80054ec:	4a04      	ldr	r2, [pc, #16]	; (8005500 <chassis_set_ctrl+0x38>)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6093      	str	r3, [r2, #8]
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	2000279c 	.word	0x2000279c

08005504 <chassis_kill_ctrl>:

void chassis_kill_ctrl() {
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
	chassis_ctrl_data.enabled = 0;
 8005508:	4b09      	ldr	r3, [pc, #36]	; (8005530 <chassis_kill_ctrl+0x2c>)
 800550a:	2200      	movs	r2, #0
 800550c:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.forward = 0;
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <chassis_kill_ctrl+0x2c>)
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <chassis_kill_ctrl+0x2c>)
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 800551e:	4b04      	ldr	r3, [pc, #16]	; (8005530 <chassis_kill_ctrl+0x2c>)
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
}
 8005526:	bf00      	nop
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	2000279c 	.word	0x2000279c

08005534 <control_reset>:

void control_reset() {
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 8005538:	4b13      	ldr	r3, [pc, #76]	; (8005588 <control_reset+0x54>)
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <control_reset+0x54>)
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 8005548:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <control_reset+0x54>)
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 8005550:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <control_reset+0x54>)
 8005552:	2200      	movs	r2, #0
 8005554:	751a      	strb	r2, [r3, #20]
	gimbal_ctrl_data.pitch = 0;
 8005556:	4b0d      	ldr	r3, [pc, #52]	; (800558c <control_reset+0x58>)
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
	gimbal_ctrl_data.yaw = imu_heading.yaw;
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <control_reset+0x5c>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4a0a      	ldr	r2, [pc, #40]	; (800558c <control_reset+0x58>)
 8005564:	6053      	str	r3, [r2, #4]
	gimbal_ctrl_data.enabled = 0;
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <control_reset+0x58>)
 8005568:	2200      	movs	r2, #0
 800556a:	725a      	strb	r2, [r3, #9]
	launcher_ctrl_data.gun_feeding_speed = 0;
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <control_reset+0x60>)
 800556e:	2200      	movs	r2, #0
 8005570:	805a      	strh	r2, [r3, #2]
	launcher_ctrl_data.projectile_speed = 0;
 8005572:	4b08      	ldr	r3, [pc, #32]	; (8005594 <control_reset+0x60>)
 8005574:	2200      	movs	r2, #0
 8005576:	801a      	strh	r2, [r3, #0]
	launcher_ctrl_data.enabled = 0;
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <control_reset+0x60>)
 800557a:	2200      	movs	r2, #0
 800557c:	715a      	strb	r2, [r3, #5]
	laser_off();
 800557e:	f7fc f845 	bl	800160c <laser_off>
}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	2000279c 	.word	0x2000279c
 800558c:	200027bc 	.word	0x200027bc
 8005590:	20002844 	.word	0x20002844
 8005594:	200027b4 	.word	0x200027b4

08005598 <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	80fb      	strh	r3, [r7, #6]
	uint8_t temp_msg;
	switch (control_mode) {
 80055a2:	4b2c      	ldr	r3, [pc, #176]	; (8005654 <control_mode_change+0xbc>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d002      	beq.n	80055b0 <control_mode_change+0x18>
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d025      	beq.n	80055fa <control_mode_change+0x62>
		} else {
			last_trig_time = HAL_GetTick();
		}
		break;
	default:
		break;
 80055ae:	e04c      	b.n	800564a <control_mode_change+0xb2>
		if (left_dial_input < -330) {
 80055b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b4:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80055b8:	da19      	bge.n	80055ee <control_mode_change+0x56>
			if (HAL_GetTick() - last_trig_time > 1000) {
 80055ba:	f003 ff6f 	bl	800949c <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	4b25      	ldr	r3, [pc, #148]	; (8005658 <control_mode_change+0xc0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ca:	d93b      	bls.n	8005644 <control_mode_change+0xac>
				control_mode = REMOTE_CTRL_MODE;
 80055cc:	4b21      	ldr	r3, [pc, #132]	; (8005654 <control_mode_change+0xbc>)
 80055ce:	2202      	movs	r2, #2
 80055d0:	701a      	strb	r2, [r3, #0]
				temp_msg = control_control;
 80055d2:	2304      	movs	r3, #4
 80055d4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80055d6:	4b21      	ldr	r3, [pc, #132]	; (800565c <control_mode_change+0xc4>)
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	f107 010f 	add.w	r1, r7, #15
 80055de:	2300      	movs	r3, #0
 80055e0:	2200      	movs	r2, #0
 80055e2:	f010 f9e5 	bl	80159b0 <xQueueGenericSend>
				launcher_safety_toggle = LAUNCHER_SAFETY;
 80055e6:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <control_mode_change+0xc8>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
		break;
 80055ec:	e02a      	b.n	8005644 <control_mode_change+0xac>
			last_trig_time = HAL_GetTick();
 80055ee:	f003 ff55 	bl	800949c <HAL_GetTick>
 80055f2:	4603      	mov	r3, r0
 80055f4:	4a18      	ldr	r2, [pc, #96]	; (8005658 <control_mode_change+0xc0>)
 80055f6:	6013      	str	r3, [r2, #0]
		break;
 80055f8:	e024      	b.n	8005644 <control_mode_change+0xac>
		if (left_dial_input > 330) {
 80055fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055fe:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8005602:	dd19      	ble.n	8005638 <control_mode_change+0xa0>
			if (HAL_GetTick() - last_trig_time > 1000) {
 8005604:	f003 ff4a 	bl	800949c <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	4b13      	ldr	r3, [pc, #76]	; (8005658 <control_mode_change+0xc0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005614:	d918      	bls.n	8005648 <control_mode_change+0xb0>
				control_mode = KEYBOARD_CTRL_MODE;
 8005616:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <control_mode_change+0xbc>)
 8005618:	2201      	movs	r2, #1
 800561a:	701a      	strb	r2, [r3, #0]
				temp_msg = control_keyboard;
 800561c:	2303      	movs	r3, #3
 800561e:	73fb      	strb	r3, [r7, #15]
				launcher_safety_toggle = LAUNCHER_SAFETY;
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <control_mode_change+0xc8>)
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
				xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005626:	4b0d      	ldr	r3, [pc, #52]	; (800565c <control_mode_change+0xc4>)
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	f107 010f 	add.w	r1, r7, #15
 800562e:	2300      	movs	r3, #0
 8005630:	2200      	movs	r2, #0
 8005632:	f010 f9bd 	bl	80159b0 <xQueueGenericSend>
		break;
 8005636:	e007      	b.n	8005648 <control_mode_change+0xb0>
			last_trig_time = HAL_GetTick();
 8005638:	f003 ff30 	bl	800949c <HAL_GetTick>
 800563c:	4603      	mov	r3, r0
 800563e:	4a06      	ldr	r2, [pc, #24]	; (8005658 <control_mode_change+0xc0>)
 8005640:	6013      	str	r3, [r2, #0]
		break;
 8005642:	e001      	b.n	8005648 <control_mode_change+0xb0>
		break;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <control_mode_change+0xb2>
		break;
 8005648:	bf00      	nop
	}
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000008 	.word	0x20000008
 8005658:	200027f8 	.word	0x200027f8
 800565c:	20000478 	.word	0x20000478
 8005660:	200027fd 	.word	0x200027fd

08005664 <gimbal_turn_ang>:

//ADDs angle to gimbal ctrl
void gimbal_turn_ang(float pit_radians, float yaw_radians) {
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	ed87 0a01 	vstr	s0, [r7, #4]
 800566e:	edc7 0a00 	vstr	s1, [r7]
	yaw_radians += gimbal_ctrl_data.yaw += yaw_radians;
 8005672:	4b25      	ldr	r3, [pc, #148]	; (8005708 <gimbal_turn_ang+0xa4>)
 8005674:	ed93 7a01 	vldr	s14, [r3, #4]
 8005678:	edd7 7a00 	vldr	s15, [r7]
 800567c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005680:	4b21      	ldr	r3, [pc, #132]	; (8005708 <gimbal_turn_ang+0xa4>)
 8005682:	edc3 7a01 	vstr	s15, [r3, #4]
 8005686:	4b20      	ldr	r3, [pc, #128]	; (8005708 <gimbal_turn_ang+0xa4>)
 8005688:	edd3 7a01 	vldr	s15, [r3, #4]
 800568c:	ed97 7a00 	vldr	s14, [r7]
 8005690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005694:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 8005698:	e007      	b.n	80056aa <gimbal_turn_ang+0x46>
		yaw_radians -= 2 * PI;
 800569a:	edd7 7a00 	vldr	s15, [r7]
 800569e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800570c <gimbal_turn_ang+0xa8>
 80056a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056a6:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 80056aa:	edd7 7a00 	vldr	s15, [r7]
 80056ae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005710 <gimbal_turn_ang+0xac>
 80056b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ba:	dcee      	bgt.n	800569a <gimbal_turn_ang+0x36>
	}
	while (yaw_radians < -PI) {
 80056bc:	e007      	b.n	80056ce <gimbal_turn_ang+0x6a>
		yaw_radians += 2 * PI;
 80056be:	edd7 7a00 	vldr	s15, [r7]
 80056c2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800570c <gimbal_turn_ang+0xa8>
 80056c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056ca:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians < -PI) {
 80056ce:	edd7 7a00 	vldr	s15, [r7]
 80056d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005714 <gimbal_turn_ang+0xb0>
 80056d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056de:	d4ee      	bmi.n	80056be <gimbal_turn_ang+0x5a>
	}
	gimbal_ctrl_data.pitch += pit_radians;
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <gimbal_turn_ang+0xa4>)
 80056e2:	ed93 7a00 	vldr	s14, [r3]
 80056e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80056ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <gimbal_turn_ang+0xa4>)
 80056f0:	edc3 7a00 	vstr	s15, [r3]
	gimbal_ctrl_data.yaw = yaw_radians;
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <gimbal_turn_ang+0xa4>)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6053      	str	r3, [r2, #4]
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	200027bc 	.word	0x200027bc
 800570c:	40c90fdb 	.word	0x40c90fdb
 8005710:	40490fdb 	.word	0x40490fdb
 8005714:	c0490fdb 	.word	0xc0490fdb

08005718 <chassis_yaw_pid_init>:
	}
	gimbal_ctrl_data.pitch = pit_radians;
	gimbal_ctrl_data.yaw = yaw_radians;
}

void chassis_yaw_pid_init() {
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
	yaw_pid_data.kp = CHASSIS_YAW_KP;
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <chassis_yaw_pid_init+0x30>)
 800571e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005722:	601a      	str	r2, [r3, #0]
	yaw_pid_data.ki = CHASSIS_YAW_KI;
 8005724:	4b08      	ldr	r3, [pc, #32]	; (8005748 <chassis_yaw_pid_init+0x30>)
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	605a      	str	r2, [r3, #4]
	yaw_pid_data.kd = CHASSIS_YAW_KD;
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <chassis_yaw_pid_init+0x30>)
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	609a      	str	r2, [r3, #8]
	yaw_pid_data.max_out = CHASSIS_YAW_MAX_RPM;
 8005734:	4b04      	ldr	r3, [pc, #16]	; (8005748 <chassis_yaw_pid_init+0x30>)
 8005736:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800573a:	61da      	str	r2, [r3, #28]
}
 800573c:	bf00      	nop
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	200027c8 	.word	0x200027c8

0800574c <keyboard_control_input>:

extern int g_spinspin_mode;



void keyboard_control_input() {
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
	mouse_gimbal_input();
 8005750:	f000 f882 	bl	8005858 <mouse_gimbal_input>
	keyboard_chassis_input();
 8005754:	f000 f804 	bl	8005760 <keyboard_chassis_input>
	mouse_launcher_control_input();
 8005758:	f000 f8ee 	bl	8005938 <mouse_launcher_control_input>
}
 800575c:	bf00      	nop
 800575e:	bd80      	pop	{r7, pc}

08005760 <keyboard_chassis_input>:

void keyboard_chassis_input() {
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8005766:	4b39      	ldr	r3, [pc, #228]	; (800584c <keyboard_chassis_input+0xec>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <keyboard_chassis_input+0x18>
 800576e:	4b38      	ldr	r3, [pc, #224]	; (8005850 <keyboard_chassis_input+0xf0>)
 8005770:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d00f      	beq.n	8005798 <keyboard_chassis_input+0x38>
		chassis_ctrl_data.enabled = 0;
 8005778:	4b36      	ldr	r3, [pc, #216]	; (8005854 <keyboard_chassis_input+0xf4>)
 800577a:	2200      	movs	r2, #0
 800577c:	751a      	strb	r2, [r3, #20]
		chassis_ctrl_data.horizontal = 0;
 800577e:	4b35      	ldr	r3, [pc, #212]	; (8005854 <keyboard_chassis_input+0xf4>)
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	605a      	str	r2, [r3, #4]
		chassis_ctrl_data.forward = 0;
 8005786:	4b33      	ldr	r3, [pc, #204]	; (8005854 <keyboard_chassis_input+0xf4>)
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
		chassis_ctrl_data.yaw = 0;
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <keyboard_chassis_input+0xf4>)
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	609a      	str	r2, [r3, #8]
			chassis_ctrl_data.horizontal = horizontal_input;
			chassis_ctrl_data.forward = forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 8005796:	e055      	b.n	8005844 <keyboard_chassis_input+0xe4>
		if (remote_cmd.right_switch == ge_RSW_ALL_ON) {
 8005798:	4b2d      	ldr	r3, [pc, #180]	; (8005850 <keyboard_chassis_input+0xf0>)
 800579a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d150      	bne.n	8005844 <keyboard_chassis_input+0xe4>
			chassis_ctrl_data.enabled = 1;
 80057a2:	4b2c      	ldr	r3, [pc, #176]	; (8005854 <keyboard_chassis_input+0xf4>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	607b      	str	r3, [r7, #4]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_W) {
 80057ba:	4b25      	ldr	r3, [pc, #148]	; (8005850 <keyboard_chassis_input+0xf0>)
 80057bc:	8b5b      	ldrh	r3, [r3, #26]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <keyboard_chassis_input+0x76>
				forward_input += KEYBD_MAX_SPD;
 80057c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80057ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057d2:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_S) {
 80057d6:	4b1e      	ldr	r3, [pc, #120]	; (8005850 <keyboard_chassis_input+0xf0>)
 80057d8:	8b5b      	ldrh	r3, [r3, #26]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <keyboard_chassis_input+0x92>
				forward_input -= KEYBD_MAX_SPD;
 80057e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80057e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057ee:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_A) {
 80057f2:	4b17      	ldr	r3, [pc, #92]	; (8005850 <keyboard_chassis_input+0xf0>)
 80057f4:	8b5b      	ldrh	r3, [r3, #26]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <keyboard_chassis_input+0xae>
				horizontal_input -= KEYBD_MAX_SPD;
 80057fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8005802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005806:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800580a:	edc7 7a03 	vstr	s15, [r7, #12]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_D) {
 800580e:	4b10      	ldr	r3, [pc, #64]	; (8005850 <keyboard_chassis_input+0xf0>)
 8005810:	8b5b      	ldrh	r3, [r3, #26]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <keyboard_chassis_input+0xca>
				horizontal_input += KEYBD_MAX_SPD;
 800581a:	edd7 7a03 	vldr	s15, [r7, #12]
 800581e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005822:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005826:	edc7 7a03 	vstr	s15, [r7, #12]
			yaw_input = chassis_center_yaw();
 800582a:	f7ff fe29 	bl	8005480 <chassis_center_yaw>
 800582e:	ed87 0a01 	vstr	s0, [r7, #4]
			chassis_ctrl_data.horizontal = horizontal_input;
 8005832:	4a08      	ldr	r2, [pc, #32]	; (8005854 <keyboard_chassis_input+0xf4>)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6053      	str	r3, [r2, #4]
			chassis_ctrl_data.forward = forward_input;
 8005838:	4a06      	ldr	r2, [pc, #24]	; (8005854 <keyboard_chassis_input+0xf4>)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 800583e:	4a05      	ldr	r2, [pc, #20]	; (8005854 <keyboard_chassis_input+0xf4>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6093      	str	r3, [r2, #8]
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	200027fc 	.word	0x200027fc
 8005850:	20000310 	.word	0x20000310
 8005854:	2000279c 	.word	0x2000279c

08005858 <mouse_gimbal_input>:

void mouse_gimbal_input() {
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 800585e:	4b30      	ldr	r3, [pc, #192]	; (8005920 <mouse_gimbal_input+0xc8>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d104      	bne.n	8005870 <mouse_gimbal_input+0x18>
 8005866:	4b2f      	ldr	r3, [pc, #188]	; (8005924 <mouse_gimbal_input+0xcc>)
 8005868:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d103      	bne.n	8005878 <mouse_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8005870:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <mouse_gimbal_input+0xd0>)
 8005872:	2200      	movs	r2, #0
 8005874:	725a      	strb	r2, [r3, #9]
 8005876:	e04e      	b.n	8005916 <mouse_gimbal_input+0xbe>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8005878:	4b2b      	ldr	r3, [pc, #172]	; (8005928 <mouse_gimbal_input+0xd0>)
 800587a:	2201      	movs	r2, #1
 800587c:	725a      	strb	r2, [r3, #9]
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 800587e:	4b29      	ldr	r3, [pc, #164]	; (8005924 <mouse_gimbal_input+0xcc>)
 8005880:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800588c:	ee17 0a90 	vmov	r0, s15
 8005890:	f7fa fe5a 	bl	8000548 <__aeabi_f2d>
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <mouse_gimbal_input+0xd4>)
 800589a:	f7fa fead 	bl	80005f8 <__aeabi_dmul>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	4b21      	ldr	r3, [pc, #132]	; (8005930 <mouse_gimbal_input+0xd8>)
 80058ac:	f7fa ffce 	bl	800084c <__aeabi_ddiv>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	f7fb f996 	bl	8000be8 <__aeabi_d2f>
 80058bc:	4603      	mov	r3, r0
 80058be:	607b      	str	r3, [r7, #4]
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 80058c0:	4b18      	ldr	r3, [pc, #96]	; (8005924 <mouse_gimbal_input+0xcc>)
 80058c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;
 80058ce:	eef1 7a67 	vneg.f32	s15, s15
 80058d2:	ee17 3a90 	vmov	r3, s15
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fa fe36 	bl	8000548 <__aeabi_f2d>
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	4b14      	ldr	r3, [pc, #80]	; (8005934 <mouse_gimbal_input+0xdc>)
 80058e2:	f7fa fe89 	bl	80005f8 <__aeabi_dmul>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <mouse_gimbal_input+0xd8>)
 80058f4:	f7fa ffaa 	bl	800084c <__aeabi_ddiv>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 80058fc:	4610      	mov	r0, r2
 80058fe:	4619      	mov	r1, r3
 8005900:	f7fb f972 	bl	8000be8 <__aeabi_d2f>
 8005904:	4603      	mov	r3, r0
 8005906:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_mouse, yaw_mouse);
 8005908:	edd7 0a00 	vldr	s1, [r7]
 800590c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005910:	f7ff fea8 	bl	8005664 <gimbal_turn_ang>
	}
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200027fc 	.word	0x200027fc
 8005924:	20000310 	.word	0x20000310
 8005928:	200027bc 	.word	0x200027bc
 800592c:	40240000 	.word	0x40240000
 8005930:	40e00000 	.word	0x40e00000
 8005934:	40340000 	.word	0x40340000

08005938 <mouse_launcher_control_input>:

void mouse_launcher_control_input() {
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
	if (safety_toggle || launcher_safety_toggle
 800593c:	4b27      	ldr	r3, [pc, #156]	; (80059dc <mouse_launcher_control_input+0xa4>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10d      	bne.n	8005960 <mouse_launcher_control_input+0x28>
 8005944:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <mouse_launcher_control_input+0xa8>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <mouse_launcher_control_input+0x28>
			|| remote_cmd.right_switch == ge_RSW_SHUTDOWN
 800594c:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <mouse_launcher_control_input+0xac>)
 800594e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d004      	beq.n	8005960 <mouse_launcher_control_input+0x28>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005956:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <mouse_launcher_control_input+0xac>)
 8005958:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d016      	beq.n	800598e <mouse_launcher_control_input+0x56>
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005960:	4b20      	ldr	r3, [pc, #128]	; (80059e4 <mouse_launcher_control_input+0xac>)
 8005962:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d102      	bne.n	8005970 <mouse_launcher_control_input+0x38>
			launcher_ctrl_data.enabled = 0;
 800596a:	4b1f      	ldr	r3, [pc, #124]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 800596c:	2200      	movs	r2, #0
 800596e:	715a      	strb	r2, [r3, #5]
		}
		launcher_ctrl_data.gun_feeding_speed = 0;
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 8005972:	2200      	movs	r2, #0
 8005974:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8005976:	4b1c      	ldr	r3, [pc, #112]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 8005978:	2200      	movs	r2, #0
 800597a:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <mouse_launcher_control_input+0xac>)
 800597e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d025      	beq.n	80059d2 <mouse_launcher_control_input+0x9a>
			launcher_safety_toggle = 0;
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <mouse_launcher_control_input+0xa8>)
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 800598c:	e021      	b.n	80059d2 <mouse_launcher_control_input+0x9a>
		}
	} else if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 800598e:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <mouse_launcher_control_input+0xac>)
 8005990:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d115      	bne.n	80059c4 <mouse_launcher_control_input+0x8c>
		launcher_ctrl_data.enabled = 1;
 8005998:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 800599a:	2201      	movs	r2, #1
 800599c:	715a      	strb	r2, [r3, #5]
		if (remote_cmd.mouse_left) {
 800599e:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <mouse_launcher_control_input+0xac>)
 80059a0:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <mouse_launcher_control_input+0x7e>
			launcher_ctrl_data.projectile_speed = 1;
 80059a8:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	801a      	strh	r2, [r3, #0]
			launcher_ctrl_data.gun_feeding_speed =1;
 80059ae:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	805a      	strh	r2, [r3, #2]
	} else {
		launcher_ctrl_data.gun_feeding_speed = 0;
		launcher_ctrl_data.projectile_speed = 0;

	}
}
 80059b4:	e00d      	b.n	80059d2 <mouse_launcher_control_input+0x9a>
			launcher_ctrl_data.projectile_speed = 0.5;
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	801a      	strh	r2, [r3, #0]
			launcher_ctrl_data.gun_feeding_speed = 0;
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 80059be:	2200      	movs	r2, #0
 80059c0:	805a      	strh	r2, [r3, #2]
}
 80059c2:	e006      	b.n	80059d2 <mouse_launcher_control_input+0x9a>
		launcher_ctrl_data.gun_feeding_speed = 0;
 80059c4:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <mouse_launcher_control_input+0xb0>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	801a      	strh	r2, [r3, #0]
}
 80059d0:	e7ff      	b.n	80059d2 <mouse_launcher_control_input+0x9a>
 80059d2:	bf00      	nop
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	200027fc 	.word	0x200027fc
 80059e0:	200027fd 	.word	0x200027fd
 80059e4:	20000310 	.word	0x20000310
 80059e8:	200027b4 	.word	0x200027b4

080059ec <remote_control_input>:
extern gimbal_control_t gimbal_ctrl_data;
extern uint8_t safety_toggle;
extern uint8_t launcher_safety_toggle;


void remote_control_input() {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
	remote_gimbal_input();
 80059f0:	f000 f85e 	bl	8005ab0 <remote_gimbal_input>
	remote_chassis_input();
 80059f4:	f000 f804 	bl	8005a00 <remote_chassis_input>
	remote_launcher_control_input();
 80059f8:	f000 f8c2 	bl	8005b80 <remote_launcher_control_input>
}
 80059fc:	bf00      	nop
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <remote_chassis_input>:

void remote_chassis_input() {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8005a06:	4b26      	ldr	r3, [pc, #152]	; (8005aa0 <remote_chassis_input+0xa0>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <remote_chassis_input+0x18>
 8005a0e:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <remote_chassis_input+0xa4>)
 8005a10:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d002      	beq.n	8005a1e <remote_chassis_input+0x1e>
//		chassis_ctrl_data.enabled = 0;
		chassis_kill_ctrl();
 8005a18:	f7ff fd74 	bl	8005504 <chassis_kill_ctrl>
 8005a1c:	e03b      	b.n	8005a96 <remote_chassis_input+0x96>
	} else {
			chassis_ctrl_data.enabled = 1;
 8005a1e:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <remote_chassis_input+0xa8>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	607b      	str	r3, [r7, #4]

			forward_input = (float) remote_cmd.left_y / RC_LIMITS;
 8005a36:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <remote_chassis_input+0xa4>)
 8005a38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a44:	eddf 6a19 	vldr	s13, [pc, #100]	; 8005aac <remote_chassis_input+0xac>
 8005a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a4c:	edc7 7a02 	vstr	s15, [r7, #8]
			horizontal_input = (float) remote_cmd.left_x / RC_LIMITS;
 8005a50:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <remote_chassis_input+0xa4>)
 8005a52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a5e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8005aac <remote_chassis_input+0xac>
 8005a62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a66:	edc7 7a03 	vstr	s15, [r7, #12]
//			yaw_input = chassis_center_yaw();
yaw_input = (float) remote_cmd.right_x * CHASSIS_YAW_MAX_RPM /RC_LIMITS;
 8005a6a:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <remote_chassis_input+0xa4>)
 8005a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a78:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005aac <remote_chassis_input+0xac>
 8005a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a80:	edc7 7a01 	vstr	s15, [r7, #4]
			chassis_set_ctrl(forward_input, horizontal_input, yaw_input);
 8005a84:	ed97 1a01 	vldr	s2, [r7, #4]
 8005a88:	edd7 0a03 	vldr	s1, [r7, #12]
 8005a8c:	ed97 0a02 	vldr	s0, [r7, #8]
 8005a90:	f7ff fd1a 	bl	80054c8 <chassis_set_ctrl>
	}
}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	200027fc 	.word	0x200027fc
 8005aa4:	20000310 	.word	0x20000310
 8005aa8:	2000279c 	.word	0x2000279c
 8005aac:	44250000 	.word	0x44250000

08005ab0 <remote_gimbal_input>:


void remote_gimbal_input() {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005ab6:	4b2e      	ldr	r3, [pc, #184]	; (8005b70 <remote_gimbal_input+0xc0>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <remote_gimbal_input+0x18>
 8005abe:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <remote_gimbal_input+0xc4>)
 8005ac0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d103      	bne.n	8005ad0 <remote_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8005ac8:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <remote_gimbal_input+0xc8>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	725a      	strb	r2, [r3, #9]
 8005ace:	e047      	b.n	8005b60 <remote_gimbal_input+0xb0>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8005ad0:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <remote_gimbal_input+0xc8>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	725a      	strb	r2, [r3, #9]
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 8005ad6:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <remote_gimbal_input+0xc4>)
 8005ad8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005adc:	ee07 3a90 	vmov	s15, r3
 8005ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ae4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005b7c <remote_gimbal_input+0xcc>
 8005ae8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aec:	eef1 7a67 	vneg.f32	s15, s15
 8005af0:	ee17 3a90 	vmov	r3, s15
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa fd27 	bl	8000548 <__aeabi_f2d>
				* REMOTE_PITCH_SPEED;
 8005afa:	a31b      	add	r3, pc, #108	; (adr r3, 8005b68 <remote_gimbal_input+0xb8>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f7fa fd7a 	bl	80005f8 <__aeabi_dmul>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f7fb f86c 	bl	8000be8 <__aeabi_d2f>
 8005b10:	4603      	mov	r3, r0
 8005b12:	607b      	str	r3, [r7, #4]
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 8005b14:	4b17      	ldr	r3, [pc, #92]	; (8005b74 <remote_gimbal_input+0xc4>)
 8005b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b22:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005b7c <remote_gimbal_input+0xcc>
 8005b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b2a:	eef1 7a67 	vneg.f32	s15, s15
 8005b2e:	ee17 3a90 	vmov	r3, s15
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fa fd08 	bl	8000548 <__aeabi_f2d>
				* REMOTE_YAW_SPEED;
 8005b38:	a30b      	add	r3, pc, #44	; (adr r3, 8005b68 <remote_gimbal_input+0xb8>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fd5b 	bl	80005f8 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fb f84d 	bl	8000be8 <__aeabi_d2f>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_remote, yaw_remote);
 8005b52:	edd7 0a00 	vldr	s1, [r7]
 8005b56:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b5a:	f7ff fd83 	bl	8005664 <gimbal_turn_ang>
	}
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	9999999a 	.word	0x9999999a
 8005b6c:	3fa99999 	.word	0x3fa99999
 8005b70:	200027fc 	.word	0x200027fc
 8005b74:	20000310 	.word	0x20000310
 8005b78:	200027bc 	.word	0x200027bc
 8005b7c:	44250000 	.word	0x44250000

08005b80 <remote_launcher_control_input>:


void remote_launcher_control_input() {
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN
 8005b84:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <remote_launcher_control_input+0x7c>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <remote_launcher_control_input+0x20>
 8005b8c:	4b1c      	ldr	r3, [pc, #112]	; (8005c00 <remote_launcher_control_input+0x80>)
 8005b8e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d004      	beq.n	8005ba0 <remote_launcher_control_input+0x20>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005b96:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <remote_launcher_control_input+0x80>)
 8005b98:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d016      	beq.n	8005bce <remote_launcher_control_input+0x4e>
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005ba0:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <remote_launcher_control_input+0x80>)
 8005ba2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d002      	beq.n	8005bb0 <remote_launcher_control_input+0x30>
			launcher_safety_toggle = 0;
 8005baa:	4b16      	ldr	r3, [pc, #88]	; (8005c04 <remote_launcher_control_input+0x84>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
		}
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 8005bb0:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <remote_launcher_control_input+0x80>)
 8005bb2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d102      	bne.n	8005bc0 <remote_launcher_control_input+0x40>
							launcher_ctrl_data.enabled = 0;
 8005bba:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <remote_launcher_control_input+0x88>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	715a      	strb	r2, [r3, #5]
				}
//		launcher_ctrl_data.enabled = 0;
		launcher_ctrl_data.gun_feeding_speed = 0;
 8005bc0:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <remote_launcher_control_input+0x88>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <remote_launcher_control_input+0x88>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	801a      	strh	r2, [r3, #0]
		} else {
			launcher_ctrl_data.gun_feeding_speed = 0;
		}
	}

}
 8005bcc:	e011      	b.n	8005bf2 <remote_launcher_control_input+0x72>
		launcher_ctrl_data.enabled = 1;
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <remote_launcher_control_input+0x88>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <remote_launcher_control_input+0x88>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <remote_launcher_control_input+0x80>)
 8005bdc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d103      	bne.n	8005bec <remote_launcher_control_input+0x6c>
			launcher_ctrl_data.gun_feeding_speed = 1;
 8005be4:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <remote_launcher_control_input+0x88>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	805a      	strh	r2, [r3, #2]
}
 8005bea:	e002      	b.n	8005bf2 <remote_launcher_control_input+0x72>
			launcher_ctrl_data.gun_feeding_speed = 0;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <remote_launcher_control_input+0x88>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	805a      	strh	r2, [r3, #2]
}
 8005bf2:	bf00      	nop
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	200027fc 	.word	0x200027fc
 8005c00:	20000310 	.word	0x20000310
 8005c04:	200027fd 	.word	0x200027fd
 8005c08:	200027b4 	.word	0x200027b4

08005c0c <gimbal_control_task>:
 *
 * FreeRTOS task for gimbal controls
 * Has HIGH2 priority
 *
 */
void gimbal_control_task(void *argument) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdTRUE,
 8005c14:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <gimbal_control_task+0x9c>)
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	2301      	movs	r3, #1
 8005c20:	2201      	movs	r2, #1
 8005c22:	2103      	movs	r1, #3
 8005c24:	f00f fafe 	bl	8015224 <xEventGroupWaitBits>
		portMAX_DELAY);
		start_time = xTaskGetTickCount();
 8005c28:	f010 fe32 	bl	8016890 <xTaskGetTickCount>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	60fb      	str	r3, [r7, #12]
		if (gimbal_ctrl_data.enabled) {
 8005c30:	4b1e      	ldr	r3, [pc, #120]	; (8005cac <gimbal_control_task+0xa0>)
 8005c32:	7a5b      	ldrb	r3, [r3, #9]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d011      	beq.n	8005c5c <gimbal_control_task+0x50>
			if (gimbal_ctrl_data.imu_mode) {
 8005c38:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <gimbal_control_task+0xa0>)
 8005c3a:	7a1b      	ldrb	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d006      	beq.n	8005c4e <gimbal_control_task+0x42>
				gimbal_control(can_motors + PITCH_MOTOR_ID - 1,
 8005c40:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <gimbal_control_task+0xa4>)
 8005c42:	4a1c      	ldr	r2, [pc, #112]	; (8005cb4 <gimbal_control_task+0xa8>)
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 f838 	bl	8005cbc <gimbal_control>
 8005c4c:	e01a      	b.n	8005c84 <gimbal_control_task+0x78>
						can_motors + YAW_MOTOR_ID - 1);
			} else {
				gimbal_angle_control(can_motors + PITCH_MOTOR_ID - 1,
 8005c4e:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <gimbal_control_task+0xa4>)
 8005c50:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <gimbal_control_task+0xa8>)
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 f92f 	bl	8005eb8 <gimbal_angle_control>
 8005c5a:	e013      	b.n	8005c84 <gimbal_control_task+0x78>
						can_motors + YAW_MOTOR_ID - 1);
			}
		} else {
			can_motors[PITCH_MOTOR_ID - 1].rpm_pid.output = 0;
 8005c5c:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <gimbal_control_task+0xac>)
 8005c5e:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
			can_motors[YAW_MOTOR_ID - 1].rpm_pid.output = 0;
 8005c68:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <gimbal_control_task+0xac>)
 8005c6a:	f603 3314 	addw	r3, r3, #2836	; 0xb14
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
			motor_send_can(can_motors, PITCH_MOTOR_ID, YAW_MOTOR_ID, 0, 0);
 8005c74:	2300      	movs	r3, #0
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	2212      	movs	r2, #18
 8005c7c:	2111      	movs	r1, #17
 8005c7e:	480e      	ldr	r0, [pc, #56]	; (8005cb8 <gimbal_control_task+0xac>)
 8005c80:	f002 fbd8 	bl	8008434 <motor_send_can>
		}
		status_led(2, off_led);
 8005c84:	2101      	movs	r1, #1
 8005c86:	2002      	movs	r0, #2
 8005c88:	f7fc f958 	bl	8001f3c <status_led>
		xEventGroupClearBits(gimbal_event_group, 0b11);
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <gimbal_control_task+0x9c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2103      	movs	r1, #3
 8005c92:	4618      	mov	r0, r3
 8005c94:	f00f fb94 	bl	80153c0 <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, GIMBAL_DELAY);
 8005c98:	f107 030c 	add.w	r3, r7, #12
 8005c9c:	2105      	movs	r1, #5
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f010 fc28 	bl	80164f4 <vTaskDelayUntil>
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdTRUE,
 8005ca4:	e7b6      	b.n	8005c14 <gimbal_control_task+0x8>
 8005ca6:	bf00      	nop
 8005ca8:	2000045c 	.word	0x2000045c
 8005cac:	200027bc 	.word	0x200027bc
 8005cb0:	2000227c 	.word	0x2000227c
 8005cb4:	20002320 	.word	0x20002320
 8005cb8:	2000183c 	.word	0x2000183c

08005cbc <gimbal_control>:
 * 			yaw_motor		Pointer to yaw motor struct
 * @note both pitch and yaw are currently on CAN2 with ID5 and 6.
 * Need to check if having ID4 (i.e. 0x208) + having the launcher motors (ID 1-3, 0x201 to 0x203)
 * still provides a fast enough response
 */
void gimbal_control(motor_data_t *pitch_motor, motor_data_t *yaw_motor) {
 8005cbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005cc0:	b088      	sub	sp, #32
 8005cc2:	af02      	add	r7, sp, #8
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
	static float prev_pit;
	static float prev_yaw;
	//todo: add in roll compensation
	uint8_t pit_lim = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	75fb      	strb	r3, [r7, #23]
	uint8_t yaw_lim = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	75bb      	strb	r3, [r7, #22]
	float rel_pitch_angle = pitch_motor->angle_data.adj_ang
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
			+ gimbal_ctrl_data.pitch - imu_heading.pit;
 8005cd6:	4b70      	ldr	r3, [pc, #448]	; (8005e98 <gimbal_control+0x1dc>)
 8005cd8:	edd3 7a00 	vldr	s15, [r3]
 8005cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ce0:	4b6e      	ldr	r3, [pc, #440]	; (8005e9c <gimbal_control+0x1e0>)
 8005ce2:	edd3 7a00 	vldr	s15, [r3]
	float rel_pitch_angle = pitch_motor->angle_data.adj_ang
 8005ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cea:	edc7 7a04 	vstr	s15, [r7, #16]
	if (rel_pitch_angle > pitch_motor->angle_data.max_ang) {
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005cf4:	ed97 7a04 	vldr	s14, [r7, #16]
 8005cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d00:	dd04      	ble.n	8005d0c <gimbal_control+0x50>
		rel_pitch_angle = pitch_motor->angle_data.max_ang;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d06:	613b      	str	r3, [r7, #16]
		pit_lim = 1;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
	}
	if (rel_pitch_angle < pitch_motor->angle_data.min_ang) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005d12:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1e:	d504      	bpl.n	8005d2a <gimbal_control+0x6e>
		rel_pitch_angle = pitch_motor->angle_data.min_ang;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d24:	613b      	str	r3, [r7, #16]
		pit_lim = 1;
 8005d26:	2301      	movs	r3, #1
 8005d28:	75fb      	strb	r3, [r7, #23]
	}
	if (pit_lim == 1) {
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d10e      	bne.n	8005d4e <gimbal_control+0x92>
		gimbal_ctrl_data.pitch = rel_pitch_angle + imu_heading.pit
 8005d30:	4b5a      	ldr	r3, [pc, #360]	; (8005e9c <gimbal_control+0x1e0>)
 8005d32:	ed93 7a00 	vldr	s14, [r3]
 8005d36:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d3a:	ee37 7a27 	vadd.f32	s14, s14, s15
				- pitch_motor->angle_data.adj_ang;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005d44:	ee77 7a67 	vsub.f32	s15, s14, s15
		gimbal_ctrl_data.pitch = rel_pitch_angle + imu_heading.pit
 8005d48:	4b53      	ldr	r3, [pc, #332]	; (8005e98 <gimbal_control+0x1dc>)
 8005d4a:	edc3 7a00 	vstr	s15, [r3]
	}

	yangle_pid(gimbal_ctrl_data.pitch,imu_heading.pit, pitch_motor,
 8005d4e:	4b52      	ldr	r3, [pc, #328]	; (8005e98 <gimbal_control+0x1dc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fa fbf8 	bl	8000548 <__aeabi_f2d>
 8005d58:	4604      	mov	r4, r0
 8005d5a:	460d      	mov	r5, r1
 8005d5c:	4b4f      	ldr	r3, [pc, #316]	; (8005e9c <gimbal_control+0x1e0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fa fbf1 	bl	8000548 <__aeabi_f2d>
 8005d66:	4680      	mov	r8, r0
 8005d68:	4689      	mov	r9, r1
 8005d6a:	4b4c      	ldr	r3, [pc, #304]	; (8005e9c <gimbal_control+0x1e0>)
 8005d6c:	edd3 7a00 	vldr	s15, [r3]
 8005d70:	494b      	ldr	r1, [pc, #300]	; (8005ea0 <gimbal_control+0x1e4>)
 8005d72:	eeb0 2a67 	vmov.f32	s4, s15
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	ec49 8b11 	vmov	d1, r8, r9
 8005d7c:	ec45 4b10 	vmov	d0, r4, r5
 8005d80:	f002 f8a6 	bl	8007ed0 <yangle_pid>
			imu_heading.pit, &prev_pit);


	float rel_yaw_angle = yaw_motor->angle_data.adj_ang + gimbal_ctrl_data.yaw
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005d8a:	4b43      	ldr	r3, [pc, #268]	; (8005e98 <gimbal_control+0x1dc>)
 8005d8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d90:	ee37 7a27 	vadd.f32	s14, s14, s15
			- imu_heading.yaw;
 8005d94:	4b41      	ldr	r3, [pc, #260]	; (8005e9c <gimbal_control+0x1e0>)
 8005d96:	edd3 7a02 	vldr	s15, [r3, #8]
	float rel_yaw_angle = yaw_motor->angle_data.adj_ang + gimbal_ctrl_data.yaw
 8005d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d9e:	edc7 7a03 	vstr	s15, [r7, #12]
	//if yaw has overflowed (i.e. goes to the next round) move it back into pi to -pi range
	if (rel_yaw_angle > PI) {
 8005da2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005da6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005ea4 <gimbal_control+0x1e8>
 8005daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db2:	dd07      	ble.n	8005dc4 <gimbal_control+0x108>
		rel_yaw_angle -= 2 * PI;
 8005db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005db8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005ea8 <gimbal_control+0x1ec>
 8005dbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dc0:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if (rel_yaw_angle < -PI) {
 8005dc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dc8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005eac <gimbal_control+0x1f0>
 8005dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd4:	d507      	bpl.n	8005de6 <gimbal_control+0x12a>
		rel_yaw_angle += 2 * PI;
 8005dd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dda:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005ea8 <gimbal_control+0x1ec>
 8005dde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005de2:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	//check limits
	if (rel_yaw_angle > yaw_motor->angle_data.max_ang) {
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005dec:	ed97 7a03 	vldr	s14, [r7, #12]
 8005df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df8:	dd04      	ble.n	8005e04 <gimbal_control+0x148>
		rel_yaw_angle = yaw_motor->angle_data.max_ang;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dfe:	60fb      	str	r3, [r7, #12]
		yaw_lim = 1;
 8005e00:	2301      	movs	r3, #1
 8005e02:	75bb      	strb	r3, [r7, #22]
	}
	if (rel_yaw_angle < yaw_motor->angle_data.min_ang) {
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005e0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e16:	d504      	bpl.n	8005e22 <gimbal_control+0x166>
		rel_yaw_angle = yaw_motor->angle_data.min_ang;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e1c:	60fb      	str	r3, [r7, #12]
		yaw_lim = 1;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75bb      	strb	r3, [r7, #22]
	}
	if (yaw_lim == 1) {
 8005e22:	7dbb      	ldrb	r3, [r7, #22]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10e      	bne.n	8005e46 <gimbal_control+0x18a>
		gimbal_ctrl_data.yaw = rel_yaw_angle + imu_heading.yaw
 8005e28:	4b1c      	ldr	r3, [pc, #112]	; (8005e9c <gimbal_control+0x1e0>)
 8005e2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e32:	ee37 7a27 	vadd.f32	s14, s14, s15
				- yaw_motor->angle_data.adj_ang;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
		gimbal_ctrl_data.yaw = rel_yaw_angle + imu_heading.yaw
 8005e40:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <gimbal_control+0x1dc>)
 8005e42:	edc3 7a01 	vstr	s15, [r3, #4]

	}

//	yangle_pid(gimbal_ctrl_data.yaw, yaw_motor->angle_data.adj_ang, yaw_motor,
//			imu_heading.yaw, &prev_yaw);
	yangle_pid(gimbal_ctrl_data.yaw, imu_heading.yaw, yaw_motor,
 8005e46:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <gimbal_control+0x1dc>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fa fb7c 	bl	8000548 <__aeabi_f2d>
 8005e50:	4604      	mov	r4, r0
 8005e52:	460d      	mov	r5, r1
 8005e54:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <gimbal_control+0x1e0>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fa fb75 	bl	8000548 <__aeabi_f2d>
 8005e5e:	4680      	mov	r8, r0
 8005e60:	4689      	mov	r9, r1
 8005e62:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <gimbal_control+0x1e0>)
 8005e64:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e68:	4911      	ldr	r1, [pc, #68]	; (8005eb0 <gimbal_control+0x1f4>)
 8005e6a:	eeb0 2a67 	vmov.f32	s4, s15
 8005e6e:	6838      	ldr	r0, [r7, #0]
 8005e70:	ec49 8b11 	vmov	d1, r8, r9
 8005e74:	ec45 4b10 	vmov	d0, r4, r5
 8005e78:	f002 f82a 	bl	8007ed0 <yangle_pid>
			imu_heading.yaw, &prev_yaw);
//	angle_pid(gimbal_ctrl_data.yaw, imu_heading.yaw, yaw_motor);

	motor_send_can(can_motors, PITCH_MOTOR_ID, YAW_MOTOR_ID, 0, 0);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	2300      	movs	r3, #0
 8005e82:	2212      	movs	r2, #18
 8005e84:	2111      	movs	r1, #17
 8005e86:	480b      	ldr	r0, [pc, #44]	; (8005eb4 <gimbal_control+0x1f8>)
 8005e88:	f002 fad4 	bl	8008434 <motor_send_can>


}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e96:	bf00      	nop
 8005e98:	200027bc 	.word	0x200027bc
 8005e9c:	20002844 	.word	0x20002844
 8005ea0:	20002800 	.word	0x20002800
 8005ea4:	40490fdb 	.word	0x40490fdb
 8005ea8:	40c90fdb 	.word	0x40c90fdb
 8005eac:	c0490fdb 	.word	0xc0490fdb
 8005eb0:	20002804 	.word	0x20002804
 8005eb4:	2000183c 	.word	0x2000183c

08005eb8 <gimbal_angle_control>:

void gimbal_angle_control(motor_data_t *pitch_motor, motor_data_t *yaw_motor) {
 8005eb8:	b5b0      	push	{r4, r5, r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]

	if (gimbal_ctrl_data.pitch > pitch_motor->angle_data.max_ang) {
 8005ec2:	4b3a      	ldr	r3, [pc, #232]	; (8005fac <gimbal_angle_control+0xf4>)
 8005ec4:	ed93 7a00 	vldr	s14, [r3]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed6:	dd03      	ble.n	8005ee0 <gimbal_angle_control+0x28>
		gimbal_ctrl_data.pitch = pitch_motor->angle_data.max_ang;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005edc:	4a33      	ldr	r2, [pc, #204]	; (8005fac <gimbal_angle_control+0xf4>)
 8005ede:	6013      	str	r3, [r2, #0]
	}
	if (gimbal_ctrl_data.pitch < pitch_motor->angle_data.min_ang) {
 8005ee0:	4b32      	ldr	r3, [pc, #200]	; (8005fac <gimbal_angle_control+0xf4>)
 8005ee2:	ed93 7a00 	vldr	s14, [r3]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef4:	d503      	bpl.n	8005efe <gimbal_angle_control+0x46>
		gimbal_ctrl_data.pitch = pitch_motor->angle_data.min_ang;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005efa:	4a2c      	ldr	r2, [pc, #176]	; (8005fac <gimbal_angle_control+0xf4>)
 8005efc:	6013      	str	r3, [r2, #0]
	}

	if (gimbal_ctrl_data.yaw > yaw_motor->angle_data.max_ang) {
 8005efe:	4b2b      	ldr	r3, [pc, #172]	; (8005fac <gimbal_angle_control+0xf4>)
 8005f00:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f12:	dd03      	ble.n	8005f1c <gimbal_angle_control+0x64>
		gimbal_ctrl_data.yaw = yaw_motor->angle_data.max_ang;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f18:	4a24      	ldr	r2, [pc, #144]	; (8005fac <gimbal_angle_control+0xf4>)
 8005f1a:	6053      	str	r3, [r2, #4]
	}
	if (gimbal_ctrl_data.yaw < yaw_motor->angle_data.min_ang) {
 8005f1c:	4b23      	ldr	r3, [pc, #140]	; (8005fac <gimbal_angle_control+0xf4>)
 8005f1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f30:	d503      	bpl.n	8005f3a <gimbal_angle_control+0x82>
		gimbal_ctrl_data.yaw = yaw_motor->angle_data.min_ang;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f36:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <gimbal_angle_control+0xf4>)
 8005f38:	6053      	str	r3, [r2, #4]
	}
	angle_pid(gimbal_ctrl_data.pitch, pitch_motor->angle_data.adj_ang,
 8005f3a:	4b1c      	ldr	r3, [pc, #112]	; (8005fac <gimbal_angle_control+0xf4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fa fb02 	bl	8000548 <__aeabi_f2d>
 8005f44:	4604      	mov	r4, r0
 8005f46:	460d      	mov	r5, r1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fa fafa 	bl	8000548 <__aeabi_f2d>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	ec43 2b11 	vmov	d1, r2, r3
 8005f5e:	ec45 4b10 	vmov	d0, r4, r5
 8005f62:	f002 f8f5 	bl	8008150 <angle_pid>
			pitch_motor);
	angle_pid(gimbal_ctrl_data.yaw, yaw_motor->angle_data.adj_ang, yaw_motor);
 8005f66:	4b11      	ldr	r3, [pc, #68]	; (8005fac <gimbal_angle_control+0xf4>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fa faec 	bl	8000548 <__aeabi_f2d>
 8005f70:	4604      	mov	r4, r0
 8005f72:	460d      	mov	r5, r1
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fa fae4 	bl	8000548 <__aeabi_f2d>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	6838      	ldr	r0, [r7, #0]
 8005f86:	ec43 2b11 	vmov	d1, r2, r3
 8005f8a:	ec45 4b10 	vmov	d0, r4, r5
 8005f8e:	f002 f8df 	bl	8008150 <angle_pid>
	motor_send_can(can_motors, PITCH_MOTOR_ID, YAW_MOTOR_ID, 0, 0);
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	2212      	movs	r2, #18
 8005f9a:	2111      	movs	r1, #17
 8005f9c:	4804      	ldr	r0, [pc, #16]	; (8005fb0 <gimbal_angle_control+0xf8>)
 8005f9e:	f002 fa49 	bl	8008434 <motor_send_can>
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8005faa:	bf00      	nop
 8005fac:	200027bc 	.word	0x200027bc
 8005fb0:	2000183c 	.word	0x2000183c

08005fb4 <imu_proc_task_notif>:
extern QueueHandle_t mag_data_queue;
extern TaskHandle_t imu_processing_task_handle;
static uint32_t last_proc_times[2];
static uint8_t update_flag = 0;

void imu_proc_task_notif() {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 8005fba:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <imu_proc_task_notif+0x3c>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 8005fc4:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <imu_proc_task_notif+0x40>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	1d3a      	adds	r2, r7, #4
 8005fca:	4611      	mov	r1, r2
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f011 f96b 	bl	80172a8 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <imu_proc_task_notif+0x34>
 8005fd8:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <imu_proc_task_notif+0x44>)
 8005fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	f3bf 8f6f 	isb	sy
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20002884 	.word	0x20002884
 8005ff4:	20000458 	.word	0x20000458
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 8005ffc:	b590      	push	{r4, r7, lr}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	463c      	mov	r4, r7
 8006004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gyro_proc_data.gx = gyro_data.gx;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4a10      	ldr	r2, [pc, #64]	; (800604c <gyro_data_ready+0x50>)
 800600c:	6013      	str	r3, [r2, #0]
	gyro_proc_data.gy = gyro_data.gy;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a0e      	ldr	r2, [pc, #56]	; (800604c <gyro_data_ready+0x50>)
 8006012:	6053      	str	r3, [r2, #4]
	gyro_proc_data.gz = gyro_data.gz;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a0d      	ldr	r2, [pc, #52]	; (800604c <gyro_data_ready+0x50>)
 8006018:	6093      	str	r3, [r2, #8]
	if (IMU_ORIENTATION == 2) {		// swap gyro inputs for vertically mounted devboard
		gyro_proc_data.gx = gyro_data.gz;
		gyro_proc_data.gy = gyro_data.gy;
		gyro_proc_data.gz = -gyro_data.gx;
	}
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a0b      	ldr	r2, [pc, #44]	; (800604c <gyro_data_ready+0x50>)
 800601e:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <gyro_data_ready+0x54>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <gyro_data_ready+0x54>)
 800602c:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if (update_flag == 0b111|| update_flag == 0b011) {
 800602e:	4b08      	ldr	r3, [pc, #32]	; (8006050 <gyro_data_ready+0x54>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b07      	cmp	r3, #7
 8006034:	d003      	beq.n	800603e <gyro_data_ready+0x42>
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <gyro_data_ready+0x54>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b03      	cmp	r3, #3
 800603c:	d101      	bne.n	8006042 <gyro_data_ready+0x46>
		imu_proc_task_notif();
 800603e:	f7ff ffb9 	bl	8005fb4 <imu_proc_task_notif>
	}
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	bd90      	pop	{r4, r7, pc}
 800604a:	bf00      	nop
 800604c:	20002860 	.word	0x20002860
 8006050:	20002884 	.word	0x20002884

08006054 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	463c      	mov	r4, r7
 800605c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	accel_proc_data.ax = accel_data.ax;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	4a10      	ldr	r2, [pc, #64]	; (80060a4 <accel_data_ready+0x50>)
 8006064:	6013      	str	r3, [r2, #0]
	accel_proc_data.ay = accel_data.ay;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a0e      	ldr	r2, [pc, #56]	; (80060a4 <accel_data_ready+0x50>)
 800606a:	6053      	str	r3, [r2, #4]
	accel_proc_data.az = accel_data.az;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4a0d      	ldr	r2, [pc, #52]	; (80060a4 <accel_data_ready+0x50>)
 8006070:	6093      	str	r3, [r2, #8]
		accel_proc_data.ax = accel_data.az;
		accel_proc_data.ay = accel_data.ay;
		accel_proc_data.az = -accel_data.ax;
	}

	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a0b      	ldr	r2, [pc, #44]	; (80060a4 <accel_data_ready+0x50>)
 8006076:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <accel_data_ready+0x54>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	f043 0302 	orr.w	r3, r3, #2
 8006080:	b2da      	uxtb	r2, r3
 8006082:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <accel_data_ready+0x54>)
 8006084:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if (update_flag == 0b111 || update_flag == 0b011) {
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <accel_data_ready+0x54>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b07      	cmp	r3, #7
 800608c:	d003      	beq.n	8006096 <accel_data_ready+0x42>
 800608e:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <accel_data_ready+0x54>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d101      	bne.n	800609a <accel_data_ready+0x46>
		imu_proc_task_notif();
 8006096:	f7ff ff8d 	bl	8005fb4 <imu_proc_task_notif>
	}
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd90      	pop	{r4, r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20002850 	.word	0x20002850
 80060a8:	20002884 	.word	0x20002884

080060ac <mag_data_ready>:

void mag_data_ready(mag_data_t mag_data) {
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mag_proc_data.mx = mag_data.mx;
 80060b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80060bc:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <mag_data_ready+0x44>)
 80060be:	801a      	strh	r2, [r3, #0]
	mag_proc_data.my = mag_data.my;
 80060c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <mag_data_ready+0x44>)
 80060c6:	805a      	strh	r2, [r3, #2]
	mag_proc_data.mz = mag_data.mz;
 80060c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80060cc:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <mag_data_ready+0x44>)
 80060ce:	809a      	strh	r2, [r3, #4]
	mag_proc_data.last_mag_update = mag_data.last_mag_update;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a07      	ldr	r2, [pc, #28]	; (80060f0 <mag_data_ready+0x44>)
 80060d4:	6093      	str	r3, [r2, #8]

	update_flag |= 1 << 2;
 80060d6:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <mag_data_ready+0x48>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f043 0304 	orr.w	r3, r3, #4
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <mag_data_ready+0x48>)
 80060e2:	701a      	strb	r2, [r3, #0]
	if (update_flag == 0b111) {
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}
 80060e4:	bf00      	nop
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	20002870 	.word	0x20002870
 80060f4:	20002884 	.word	0x20002884

080060f8 <imu_processing_task>:

void imu_processing_task(void *argument) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	imu_start_ints();
 8006100:	f7fb fd26 	bl	8001b50 <imu_start_ints>
	init_quaternion();
 8006104:	f000 f80a 	bl	800611c <init_quaternion>
	while (1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006108:	f04f 31ff 	mov.w	r1, #4294967295
 800610c:	2001      	movs	r0, #1
 800610e:	f011 f87f 	bl	8017210 <ulTaskNotifyTake>
		imu_ahrs_update();
 8006112:	f000 f93f 	bl	8006394 <imu_ahrs_update>
		imu_attitude_update();
 8006116:	f000 fd91 	bl	8006c3c <imu_attitude_update>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800611a:	e7f5      	b.n	8006108 <imu_processing_task+0x10>

0800611c <init_quaternion>:
	}
}

void init_quaternion(void) {
 800611c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
	int16_t hx, hy; //hz;

	hx = mag_proc_data.mx;
 8006124:	4b79      	ldr	r3, [pc, #484]	; (800630c <init_quaternion+0x1f0>)
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	81fb      	strh	r3, [r7, #14]
	hy = mag_proc_data.my;
 800612a:	4b78      	ldr	r3, [pc, #480]	; (800630c <init_quaternion+0x1f0>)
 800612c:	885b      	ldrh	r3, [r3, #2]
 800612e:	81bb      	strh	r3, [r7, #12]
			q2 = -0.56;
			q3 = 0.0045;
		}
	}
	#else
	if (hx < 0 && hy < 0) {
 8006130:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006134:	2b00      	cmp	r3, #0
 8006136:	da36      	bge.n	80061a6 <init_quaternion+0x8a>
 8006138:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	da32      	bge.n	80061a6 <init_quaternion+0x8a>
		if (fabs(hx / hy) >= 1) {
 8006140:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006144:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006148:	fb92 f3f3 	sdiv	r3, r2, r3
 800614c:	4618      	mov	r0, r3
 800614e:	f7fa f9e9 	bl	8000524 <__aeabi_i2d>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	603a      	str	r2, [r7, #0]
 8006158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	4b6b      	ldr	r3, [pc, #428]	; (8006310 <init_quaternion+0x1f4>)
 8006164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006168:	f7fa fccc 	bl	8000b04 <__aeabi_dcmpge>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <init_quaternion+0x70>
			q0 = 0.195;
 8006172:	4b68      	ldr	r3, [pc, #416]	; (8006314 <init_quaternion+0x1f8>)
 8006174:	4a68      	ldr	r2, [pc, #416]	; (8006318 <init_quaternion+0x1fc>)
 8006176:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8006178:	4b68      	ldr	r3, [pc, #416]	; (800631c <init_quaternion+0x200>)
 800617a:	4a69      	ldr	r2, [pc, #420]	; (8006320 <init_quaternion+0x204>)
 800617c:	601a      	str	r2, [r3, #0]
			q2 = 0.0043;
 800617e:	4b69      	ldr	r3, [pc, #420]	; (8006324 <init_quaternion+0x208>)
 8006180:	4a69      	ldr	r2, [pc, #420]	; (8006328 <init_quaternion+0x20c>)
 8006182:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8006184:	4b69      	ldr	r3, [pc, #420]	; (800632c <init_quaternion+0x210>)
 8006186:	4a6a      	ldr	r2, [pc, #424]	; (8006330 <init_quaternion+0x214>)
 8006188:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800618a:	e0ba      	b.n	8006302 <init_quaternion+0x1e6>
		} else {
			q0 = 0.555;
 800618c:	4b61      	ldr	r3, [pc, #388]	; (8006314 <init_quaternion+0x1f8>)
 800618e:	4a69      	ldr	r2, [pc, #420]	; (8006334 <init_quaternion+0x218>)
 8006190:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8006192:	4b62      	ldr	r3, [pc, #392]	; (800631c <init_quaternion+0x200>)
 8006194:	4a62      	ldr	r2, [pc, #392]	; (8006320 <init_quaternion+0x204>)
 8006196:	601a      	str	r2, [r3, #0]
			q2 = 0.006;
 8006198:	4b62      	ldr	r3, [pc, #392]	; (8006324 <init_quaternion+0x208>)
 800619a:	4a67      	ldr	r2, [pc, #412]	; (8006338 <init_quaternion+0x21c>)
 800619c:	601a      	str	r2, [r3, #0]
			q3 = 0.829;
 800619e:	4b63      	ldr	r3, [pc, #396]	; (800632c <init_quaternion+0x210>)
 80061a0:	4a66      	ldr	r2, [pc, #408]	; (800633c <init_quaternion+0x220>)
 80061a2:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80061a4:	e0ad      	b.n	8006302 <init_quaternion+0x1e6>
		}

	} else if (hx < 0 && hy > 0) {
 80061a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	da35      	bge.n	800621a <init_quaternion+0xfe>
 80061ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dd31      	ble.n	800621a <init_quaternion+0xfe>
		if (fabs(hx / hy) >= 1) {
 80061b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80061ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80061be:	fb92 f3f3 	sdiv	r3, r2, r3
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa f9ae 	bl	8000524 <__aeabi_i2d>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4692      	mov	sl, r2
 80061ce:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	4b4e      	ldr	r3, [pc, #312]	; (8006310 <init_quaternion+0x1f4>)
 80061d8:	4650      	mov	r0, sl
 80061da:	4659      	mov	r1, fp
 80061dc:	f7fa fc92 	bl	8000b04 <__aeabi_dcmpge>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <init_quaternion+0xe4>
			q0 = -0.193;
 80061e6:	4b4b      	ldr	r3, [pc, #300]	; (8006314 <init_quaternion+0x1f8>)
 80061e8:	4a55      	ldr	r2, [pc, #340]	; (8006340 <init_quaternion+0x224>)
 80061ea:	601a      	str	r2, [r3, #0]
			q1 = -0.009;
 80061ec:	4b4b      	ldr	r3, [pc, #300]	; (800631c <init_quaternion+0x200>)
 80061ee:	4a55      	ldr	r2, [pc, #340]	; (8006344 <init_quaternion+0x228>)
 80061f0:	601a      	str	r2, [r3, #0]
			q2 = -0.006;
 80061f2:	4b4c      	ldr	r3, [pc, #304]	; (8006324 <init_quaternion+0x208>)
 80061f4:	4a54      	ldr	r2, [pc, #336]	; (8006348 <init_quaternion+0x22c>)
 80061f6:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 80061f8:	4b4c      	ldr	r3, [pc, #304]	; (800632c <init_quaternion+0x210>)
 80061fa:	4a4d      	ldr	r2, [pc, #308]	; (8006330 <init_quaternion+0x214>)
 80061fc:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80061fe:	e080      	b.n	8006302 <init_quaternion+0x1e6>
		} else {
			q0 = -0.552;
 8006200:	4b44      	ldr	r3, [pc, #272]	; (8006314 <init_quaternion+0x1f8>)
 8006202:	4a52      	ldr	r2, [pc, #328]	; (800634c <init_quaternion+0x230>)
 8006204:	601a      	str	r2, [r3, #0]
			q1 = -0.0048;
 8006206:	4b45      	ldr	r3, [pc, #276]	; (800631c <init_quaternion+0x200>)
 8006208:	4a51      	ldr	r2, [pc, #324]	; (8006350 <init_quaternion+0x234>)
 800620a:	601a      	str	r2, [r3, #0]
			q2 = -0.0115;
 800620c:	4b45      	ldr	r3, [pc, #276]	; (8006324 <init_quaternion+0x208>)
 800620e:	4a51      	ldr	r2, [pc, #324]	; (8006354 <init_quaternion+0x238>)
 8006210:	601a      	str	r2, [r3, #0]
			q3 = 0.8313;
 8006212:	4b46      	ldr	r3, [pc, #280]	; (800632c <init_quaternion+0x210>)
 8006214:	4a50      	ldr	r2, [pc, #320]	; (8006358 <init_quaternion+0x23c>)
 8006216:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8006218:	e073      	b.n	8006302 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy > 0) {
 800621a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800621e:	2b00      	cmp	r3, #0
 8006220:	dd35      	ble.n	800628e <init_quaternion+0x172>
 8006222:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	dd31      	ble.n	800628e <init_quaternion+0x172>
		if (fabs(hx / hy) >= 1) {
 800622a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800622e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006232:	fb92 f3f3 	sdiv	r3, r2, r3
 8006236:	4618      	mov	r0, r3
 8006238:	f7fa f974 	bl	8000524 <__aeabi_i2d>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4690      	mov	r8, r2
 8006242:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	4b31      	ldr	r3, [pc, #196]	; (8006310 <init_quaternion+0x1f4>)
 800624c:	4640      	mov	r0, r8
 800624e:	4649      	mov	r1, r9
 8006250:	f7fa fc58 	bl	8000b04 <__aeabi_dcmpge>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <init_quaternion+0x158>
			q0 = -0.9785;
 800625a:	4b2e      	ldr	r3, [pc, #184]	; (8006314 <init_quaternion+0x1f8>)
 800625c:	4a3f      	ldr	r2, [pc, #252]	; (800635c <init_quaternion+0x240>)
 800625e:	601a      	str	r2, [r3, #0]
			q1 = 0.008;
 8006260:	4b2e      	ldr	r3, [pc, #184]	; (800631c <init_quaternion+0x200>)
 8006262:	4a3f      	ldr	r2, [pc, #252]	; (8006360 <init_quaternion+0x244>)
 8006264:	601a      	str	r2, [r3, #0]
			q2 = -0.02;
 8006266:	4b2f      	ldr	r3, [pc, #188]	; (8006324 <init_quaternion+0x208>)
 8006268:	4a3e      	ldr	r2, [pc, #248]	; (8006364 <init_quaternion+0x248>)
 800626a:	601a      	str	r2, [r3, #0]
			q3 = 0.195;
 800626c:	4b2f      	ldr	r3, [pc, #188]	; (800632c <init_quaternion+0x210>)
 800626e:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <init_quaternion+0x1fc>)
 8006270:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8006272:	e046      	b.n	8006302 <init_quaternion+0x1e6>
		} else {
			q0 = -0.9828;
 8006274:	4b27      	ldr	r3, [pc, #156]	; (8006314 <init_quaternion+0x1f8>)
 8006276:	4a3c      	ldr	r2, [pc, #240]	; (8006368 <init_quaternion+0x24c>)
 8006278:	601a      	str	r2, [r3, #0]
			q1 = 0.002;
 800627a:	4b28      	ldr	r3, [pc, #160]	; (800631c <init_quaternion+0x200>)
 800627c:	4a3b      	ldr	r2, [pc, #236]	; (800636c <init_quaternion+0x250>)
 800627e:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 8006280:	4b28      	ldr	r3, [pc, #160]	; (8006324 <init_quaternion+0x208>)
 8006282:	4a3b      	ldr	r2, [pc, #236]	; (8006370 <init_quaternion+0x254>)
 8006284:	601a      	str	r2, [r3, #0]
			q3 = 0.5557;
 8006286:	4b29      	ldr	r3, [pc, #164]	; (800632c <init_quaternion+0x210>)
 8006288:	4a3a      	ldr	r2, [pc, #232]	; (8006374 <init_quaternion+0x258>)
 800628a:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800628c:	e039      	b.n	8006302 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy < 0) {
 800628e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006292:	2b00      	cmp	r3, #0
 8006294:	dd35      	ble.n	8006302 <init_quaternion+0x1e6>
 8006296:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	da31      	bge.n	8006302 <init_quaternion+0x1e6>
		if (fabs(hx / hy) >= 1) {
 800629e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80062a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80062a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fa f93a 	bl	8000524 <__aeabi_i2d>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4614      	mov	r4, r2
 80062b6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	4b14      	ldr	r3, [pc, #80]	; (8006310 <init_quaternion+0x1f4>)
 80062c0:	4620      	mov	r0, r4
 80062c2:	4629      	mov	r1, r5
 80062c4:	f7fa fc1e 	bl	8000b04 <__aeabi_dcmpge>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <init_quaternion+0x1cc>
			q0 = -0.979;
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <init_quaternion+0x1f8>)
 80062d0:	4a29      	ldr	r2, [pc, #164]	; (8006378 <init_quaternion+0x25c>)
 80062d2:	601a      	str	r2, [r3, #0]
			q1 = 0.0116;
 80062d4:	4b11      	ldr	r3, [pc, #68]	; (800631c <init_quaternion+0x200>)
 80062d6:	4a29      	ldr	r2, [pc, #164]	; (800637c <init_quaternion+0x260>)
 80062d8:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <init_quaternion+0x208>)
 80062dc:	4a24      	ldr	r2, [pc, #144]	; (8006370 <init_quaternion+0x254>)
 80062de:	601a      	str	r2, [r3, #0]
			q3 = -0.195;
 80062e0:	4b12      	ldr	r3, [pc, #72]	; (800632c <init_quaternion+0x210>)
 80062e2:	4a27      	ldr	r2, [pc, #156]	; (8006380 <init_quaternion+0x264>)
 80062e4:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
			q3 = -0.556;
		}
	}
#endif
}
 80062e6:	e00c      	b.n	8006302 <init_quaternion+0x1e6>
			q0 = -0.83;
 80062e8:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <init_quaternion+0x1f8>)
 80062ea:	4a26      	ldr	r2, [pc, #152]	; (8006384 <init_quaternion+0x268>)
 80062ec:	601a      	str	r2, [r3, #0]
			q1 = 0.014;
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <init_quaternion+0x200>)
 80062f0:	4a25      	ldr	r2, [pc, #148]	; (8006388 <init_quaternion+0x26c>)
 80062f2:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
 80062f4:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <init_quaternion+0x208>)
 80062f6:	4a25      	ldr	r2, [pc, #148]	; (800638c <init_quaternion+0x270>)
 80062f8:	601a      	str	r2, [r3, #0]
			q3 = -0.556;
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <init_quaternion+0x210>)
 80062fc:	4a24      	ldr	r2, [pc, #144]	; (8006390 <init_quaternion+0x274>)
 80062fe:	601a      	str	r2, [r3, #0]
}
 8006300:	e7ff      	b.n	8006302 <init_quaternion+0x1e6>
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630c:	20002870 	.word	0x20002870
 8006310:	3ff00000 	.word	0x3ff00000
 8006314:	2000000c 	.word	0x2000000c
 8006318:	3e47ae14 	.word	0x3e47ae14
 800631c:	20002808 	.word	0x20002808
 8006320:	bc75c28f 	.word	0xbc75c28f
 8006324:	2000280c 	.word	0x2000280c
 8006328:	3b8ce704 	.word	0x3b8ce704
 800632c:	20002810 	.word	0x20002810
 8006330:	3f7a9fbe 	.word	0x3f7a9fbe
 8006334:	3f0e147b 	.word	0x3f0e147b
 8006338:	3bc49ba6 	.word	0x3bc49ba6
 800633c:	3f543958 	.word	0x3f543958
 8006340:	be45a1cb 	.word	0xbe45a1cb
 8006344:	bc1374bc 	.word	0xbc1374bc
 8006348:	bbc49ba6 	.word	0xbbc49ba6
 800634c:	bf0d4fdf 	.word	0xbf0d4fdf
 8006350:	bb9d4952 	.word	0xbb9d4952
 8006354:	bc3c6a7f 	.word	0xbc3c6a7f
 8006358:	3f54d014 	.word	0x3f54d014
 800635c:	bf7a7efa 	.word	0xbf7a7efa
 8006360:	3c03126f 	.word	0x3c03126f
 8006364:	bca3d70a 	.word	0xbca3d70a
 8006368:	bf7b98c8 	.word	0xbf7b98c8
 800636c:	3b03126f 	.word	0x3b03126f
 8006370:	bc88ce70 	.word	0xbc88ce70
 8006374:	3f0e425b 	.word	0x3f0e425b
 8006378:	bf7a9fbe 	.word	0xbf7a9fbe
 800637c:	3c3e0ded 	.word	0x3c3e0ded
 8006380:	be47ae14 	.word	0xbe47ae14
 8006384:	bf547ae1 	.word	0xbf547ae1
 8006388:	3c656042 	.word	0x3c656042
 800638c:	bc449ba6 	.word	0xbc449ba6
 8006390:	bf0e5604 	.word	0xbf0e5604

08006394 <imu_ahrs_update>:
	q1 = tempq1 * norm;
	q2 = tempq2 * norm;
	q3 = tempq3 * norm;
}

void imu_ahrs_update(void) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b09e      	sub	sp, #120	; 0x78
 8006398:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0, tempq1, tempq2, tempq3;

	float q0q0 = q0 * q0;
 800639a:	4bd3      	ldr	r3, [pc, #844]	; (80066e8 <imu_ahrs_update+0x354>)
 800639c:	ed93 7a00 	vldr	s14, [r3]
 80063a0:	4bd1      	ldr	r3, [pc, #836]	; (80066e8 <imu_ahrs_update+0x354>)
 80063a2:	edd3 7a00 	vldr	s15, [r3]
 80063a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063aa:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0 * q1;
 80063ae:	4bce      	ldr	r3, [pc, #824]	; (80066e8 <imu_ahrs_update+0x354>)
 80063b0:	ed93 7a00 	vldr	s14, [r3]
 80063b4:	4bcd      	ldr	r3, [pc, #820]	; (80066ec <imu_ahrs_update+0x358>)
 80063b6:	edd3 7a00 	vldr	s15, [r3]
 80063ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063be:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0 * q2;
 80063c2:	4bc9      	ldr	r3, [pc, #804]	; (80066e8 <imu_ahrs_update+0x354>)
 80063c4:	ed93 7a00 	vldr	s14, [r3]
 80063c8:	4bc9      	ldr	r3, [pc, #804]	; (80066f0 <imu_ahrs_update+0x35c>)
 80063ca:	edd3 7a00 	vldr	s15, [r3]
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0 * q3;
 80063d6:	4bc4      	ldr	r3, [pc, #784]	; (80066e8 <imu_ahrs_update+0x354>)
 80063d8:	ed93 7a00 	vldr	s14, [r3]
 80063dc:	4bc5      	ldr	r3, [pc, #788]	; (80066f4 <imu_ahrs_update+0x360>)
 80063de:	edd3 7a00 	vldr	s15, [r3]
 80063e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1 * q1;
 80063ea:	4bc0      	ldr	r3, [pc, #768]	; (80066ec <imu_ahrs_update+0x358>)
 80063ec:	ed93 7a00 	vldr	s14, [r3]
 80063f0:	4bbe      	ldr	r3, [pc, #760]	; (80066ec <imu_ahrs_update+0x358>)
 80063f2:	edd3 7a00 	vldr	s15, [r3]
 80063f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1 * q2;
 80063fe:	4bbb      	ldr	r3, [pc, #748]	; (80066ec <imu_ahrs_update+0x358>)
 8006400:	ed93 7a00 	vldr	s14, [r3]
 8006404:	4bba      	ldr	r3, [pc, #744]	; (80066f0 <imu_ahrs_update+0x35c>)
 8006406:	edd3 7a00 	vldr	s15, [r3]
 800640a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1 * q3;
 8006412:	4bb6      	ldr	r3, [pc, #728]	; (80066ec <imu_ahrs_update+0x358>)
 8006414:	ed93 7a00 	vldr	s14, [r3]
 8006418:	4bb6      	ldr	r3, [pc, #728]	; (80066f4 <imu_ahrs_update+0x360>)
 800641a:	edd3 7a00 	vldr	s15, [r3]
 800641e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006422:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2 * q2;
 8006426:	4bb2      	ldr	r3, [pc, #712]	; (80066f0 <imu_ahrs_update+0x35c>)
 8006428:	ed93 7a00 	vldr	s14, [r3]
 800642c:	4bb0      	ldr	r3, [pc, #704]	; (80066f0 <imu_ahrs_update+0x35c>)
 800642e:	edd3 7a00 	vldr	s15, [r3]
 8006432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006436:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2 * q3;
 800643a:	4bad      	ldr	r3, [pc, #692]	; (80066f0 <imu_ahrs_update+0x35c>)
 800643c:	ed93 7a00 	vldr	s14, [r3]
 8006440:	4bac      	ldr	r3, [pc, #688]	; (80066f4 <imu_ahrs_update+0x360>)
 8006442:	edd3 7a00 	vldr	s15, [r3]
 8006446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3 * q3;
 800644e:	4ba9      	ldr	r3, [pc, #676]	; (80066f4 <imu_ahrs_update+0x360>)
 8006450:	ed93 7a00 	vldr	s14, [r3]
 8006454:	4ba7      	ldr	r3, [pc, #668]	; (80066f4 <imu_ahrs_update+0x360>)
 8006456:	edd3 7a00 	vldr	s15, [r3]
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = gyro_proc_data.gx;
 8006462:	4ba5      	ldr	r3, [pc, #660]	; (80066f8 <imu_ahrs_update+0x364>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4aa5      	ldr	r2, [pc, #660]	; (80066fc <imu_ahrs_update+0x368>)
 8006468:	6013      	str	r3, [r2, #0]
	gy = gyro_proc_data.gy;
 800646a:	4ba3      	ldr	r3, [pc, #652]	; (80066f8 <imu_ahrs_update+0x364>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4aa4      	ldr	r2, [pc, #656]	; (8006700 <imu_ahrs_update+0x36c>)
 8006470:	6013      	str	r3, [r2, #0]
	gz = gyro_proc_data.gz;
 8006472:	4ba1      	ldr	r3, [pc, #644]	; (80066f8 <imu_ahrs_update+0x364>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	4aa3      	ldr	r2, [pc, #652]	; (8006704 <imu_ahrs_update+0x370>)
 8006478:	6013      	str	r3, [r2, #0]
	ax = accel_proc_data.ax;
 800647a:	4ba3      	ldr	r3, [pc, #652]	; (8006708 <imu_ahrs_update+0x374>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4aa3      	ldr	r2, [pc, #652]	; (800670c <imu_ahrs_update+0x378>)
 8006480:	6013      	str	r3, [r2, #0]
	ay = accel_proc_data.ay;
 8006482:	4ba1      	ldr	r3, [pc, #644]	; (8006708 <imu_ahrs_update+0x374>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	4aa2      	ldr	r2, [pc, #648]	; (8006710 <imu_ahrs_update+0x37c>)
 8006488:	6013      	str	r3, [r2, #0]
	az = accel_proc_data.az;
 800648a:	4b9f      	ldr	r3, [pc, #636]	; (8006708 <imu_ahrs_update+0x374>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	4aa1      	ldr	r2, [pc, #644]	; (8006714 <imu_ahrs_update+0x380>)
 8006490:	6013      	str	r3, [r2, #0]
	mx = mag_proc_data.mx;
 8006492:	4ba1      	ldr	r3, [pc, #644]	; (8006718 <imu_ahrs_update+0x384>)
 8006494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064a0:	4b9e      	ldr	r3, [pc, #632]	; (800671c <imu_ahrs_update+0x388>)
 80064a2:	edc3 7a00 	vstr	s15, [r3]
	my = mag_proc_data.my;
 80064a6:	4b9c      	ldr	r3, [pc, #624]	; (8006718 <imu_ahrs_update+0x384>)
 80064a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80064ac:	ee07 3a90 	vmov	s15, r3
 80064b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064b4:	4b9a      	ldr	r3, [pc, #616]	; (8006720 <imu_ahrs_update+0x38c>)
 80064b6:	edc3 7a00 	vstr	s15, [r3]
	mz = mag_proc_data.mz;
 80064ba:	4b97      	ldr	r3, [pc, #604]	; (8006718 <imu_ahrs_update+0x384>)
 80064bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80064c0:	ee07 3a90 	vmov	s15, r3
 80064c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064c8:	4b96      	ldr	r3, [pc, #600]	; (8006724 <imu_ahrs_update+0x390>)
 80064ca:	edc3 7a00 	vstr	s15, [r3]

	last_proc_times[0] = HAL_GetTick(); //ms
 80064ce:	f002 ffe5 	bl	800949c <HAL_GetTick>
 80064d2:	4603      	mov	r3, r0
 80064d4:	4a94      	ldr	r2, [pc, #592]	; (8006728 <imu_ahrs_update+0x394>)
 80064d6:	6013      	str	r3, [r2, #0]
	halfT = ((float) (last_proc_times[0] - last_proc_times[1]) / 2000.0f);
 80064d8:	4b93      	ldr	r3, [pc, #588]	; (8006728 <imu_ahrs_update+0x394>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b92      	ldr	r3, [pc, #584]	; (8006728 <imu_ahrs_update+0x394>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064ea:	eddf 6a90 	vldr	s13, [pc, #576]	; 800672c <imu_ahrs_update+0x398>
 80064ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064f2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_proc_times[1] = last_proc_times[0];
 80064f6:	4b8c      	ldr	r3, [pc, #560]	; (8006728 <imu_ahrs_update+0x394>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a8b      	ldr	r2, [pc, #556]	; (8006728 <imu_ahrs_update+0x394>)
 80064fc:	6053      	str	r3, [r2, #4]

	/* Fast inverse square-root */
	norm = inv_sqrt(ax * ax + ay * ay + az * az);
 80064fe:	4b83      	ldr	r3, [pc, #524]	; (800670c <imu_ahrs_update+0x378>)
 8006500:	ed93 7a00 	vldr	s14, [r3]
 8006504:	4b81      	ldr	r3, [pc, #516]	; (800670c <imu_ahrs_update+0x378>)
 8006506:	edd3 7a00 	vldr	s15, [r3]
 800650a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800650e:	4b80      	ldr	r3, [pc, #512]	; (8006710 <imu_ahrs_update+0x37c>)
 8006510:	edd3 6a00 	vldr	s13, [r3]
 8006514:	4b7e      	ldr	r3, [pc, #504]	; (8006710 <imu_ahrs_update+0x37c>)
 8006516:	edd3 7a00 	vldr	s15, [r3]
 800651a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800651e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006522:	4b7c      	ldr	r3, [pc, #496]	; (8006714 <imu_ahrs_update+0x380>)
 8006524:	edd3 6a00 	vldr	s13, [r3]
 8006528:	4b7a      	ldr	r3, [pc, #488]	; (8006714 <imu_ahrs_update+0x380>)
 800652a:	edd3 7a00 	vldr	s15, [r3]
 800652e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006536:	eeb0 0a67 	vmov.f32	s0, s15
 800653a:	f7fb f889 	bl	8001650 <inv_sqrt>
 800653e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 8006542:	4b72      	ldr	r3, [pc, #456]	; (800670c <imu_ahrs_update+0x378>)
 8006544:	ed93 7a00 	vldr	s14, [r3]
 8006548:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800654c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006550:	4b6e      	ldr	r3, [pc, #440]	; (800670c <imu_ahrs_update+0x378>)
 8006552:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 8006556:	4b6e      	ldr	r3, [pc, #440]	; (8006710 <imu_ahrs_update+0x37c>)
 8006558:	ed93 7a00 	vldr	s14, [r3]
 800655c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006564:	4b6a      	ldr	r3, [pc, #424]	; (8006710 <imu_ahrs_update+0x37c>)
 8006566:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 800656a:	4b6a      	ldr	r3, [pc, #424]	; (8006714 <imu_ahrs_update+0x380>)
 800656c:	ed93 7a00 	vldr	s14, [r3]
 8006570:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006578:	4b66      	ldr	r3, [pc, #408]	; (8006714 <imu_ahrs_update+0x380>)
 800657a:	edc3 7a00 	vstr	s15, [r3]
		norm = inv_sqrt(mx*mx + my*my + mz*mz);
		mx = mx * norm;
		my = my * norm;
		mz = mz * norm;
	#else
	mx = 0;
 800657e:	4b67      	ldr	r3, [pc, #412]	; (800671c <imu_ahrs_update+0x388>)
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
	my = 0;
 8006586:	4b66      	ldr	r3, [pc, #408]	; (8006720 <imu_ahrs_update+0x38c>)
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
	mz = 0;
 800658e:	4b65      	ldr	r3, [pc, #404]	; (8006724 <imu_ahrs_update+0x390>)
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
#endif
	/* compute reference direction of flux */
	hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 8006596:	4b61      	ldr	r3, [pc, #388]	; (800671c <imu_ahrs_update+0x388>)
 8006598:	edd3 7a00 	vldr	s15, [r3]
 800659c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80065a0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80065a4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80065a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80065ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80065b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065b8:	4b59      	ldr	r3, [pc, #356]	; (8006720 <imu_ahrs_update+0x38c>)
 80065ba:	edd3 7a00 	vldr	s15, [r3]
 80065be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80065c2:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80065c6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80065ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80065ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065d6:	4b53      	ldr	r3, [pc, #332]	; (8006724 <imu_ahrs_update+0x390>)
 80065d8:	edd3 7a00 	vldr	s15, [r3]
 80065dc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80065e0:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80065e4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80065e8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80065ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065f4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 80065f8:	4b48      	ldr	r3, [pc, #288]	; (800671c <imu_ahrs_update+0x388>)
 80065fa:	edd3 7a00 	vldr	s15, [r3]
 80065fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006602:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006606:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800660a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006612:	4b43      	ldr	r3, [pc, #268]	; (8006720 <imu_ahrs_update+0x38c>)
 8006614:	edd3 7a00 	vldr	s15, [r3]
 8006618:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800661c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006620:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006624:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006628:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800662c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006638:	4b3a      	ldr	r3, [pc, #232]	; (8006724 <imu_ahrs_update+0x390>)
 800663a:	edd3 7a00 	vldr	s15, [r3]
 800663e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006642:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8006646:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800664a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800664e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006656:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 800665a:	4b30      	ldr	r3, [pc, #192]	; (800671c <imu_ahrs_update+0x388>)
 800665c:	edd3 7a00 	vldr	s15, [r3]
 8006660:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006664:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006668:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800666c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006674:	4b2a      	ldr	r3, [pc, #168]	; (8006720 <imu_ahrs_update+0x38c>)
 8006676:	edd3 7a00 	vldr	s15, [r3]
 800667a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800667e:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8006682:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006686:	ee76 7a27 	vadd.f32	s15, s12, s15
 800668a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800668e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006692:	4b24      	ldr	r3, [pc, #144]	; (8006724 <imu_ahrs_update+0x390>)
 8006694:	edd3 7a00 	vldr	s15, [r3]
 8006698:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800669c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80066a0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80066a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80066a8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80066ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80066b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx * hx) + (hy * hy));
 80066bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80066c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80066c4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80066c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066d0:	ee17 0a90 	vmov	r0, s15
 80066d4:	f7f9 ff38 	bl	8000548 <__aeabi_f2d>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	ec43 2b10 	vmov	d0, r2, r3
 80066e0:	f017 f9ac 	bl	801da3c <sqrt>
 80066e4:	e024      	b.n	8006730 <imu_ahrs_update+0x39c>
 80066e6:	bf00      	nop
 80066e8:	2000000c 	.word	0x2000000c
 80066ec:	20002808 	.word	0x20002808
 80066f0:	2000280c 	.word	0x2000280c
 80066f4:	20002810 	.word	0x20002810
 80066f8:	20002860 	.word	0x20002860
 80066fc:	20002820 	.word	0x20002820
 8006700:	20002824 	.word	0x20002824
 8006704:	20002828 	.word	0x20002828
 8006708:	20002850 	.word	0x20002850
 800670c:	2000282c 	.word	0x2000282c
 8006710:	20002830 	.word	0x20002830
 8006714:	20002834 	.word	0x20002834
 8006718:	20002870 	.word	0x20002870
 800671c:	20002838 	.word	0x20002838
 8006720:	2000283c 	.word	0x2000283c
 8006724:	20002840 	.word	0x20002840
 8006728:	2000287c 	.word	0x2000287c
 800672c:	44fa0000 	.word	0x44fa0000
 8006730:	ec53 2b10 	vmov	r2, r3, d0
 8006734:	4610      	mov	r0, r2
 8006736:	4619      	mov	r1, r3
 8006738:	f7fa fa56 	bl	8000be8 <__aeabi_d2f>
 800673c:	4603      	mov	r3, r0
 800673e:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz;
 8006740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006742:	637b      	str	r3, [r7, #52]	; 0x34

	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f * (q1q3 - q0q2);
 8006744:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006748:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800674c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006750:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006754:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f * (q0q1 + q2q3);
 8006758:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800675c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006764:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006768:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 800676c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8006770:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006774:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006778:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800677c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006780:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006788:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 800678c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006790:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006794:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006798:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800679c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80067a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80067a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80067b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067b4:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80067b8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80067bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80067c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 80067cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80067d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067d4:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80067d8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80067dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80067e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067ec:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80067f0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80067f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80067f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006800:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 8006804:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006808:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800680c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8006810:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800681c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006820:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006824:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006828:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800682c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006830:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006834:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800683c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006840:	edc7 7a07 	vstr	s15, [r7, #28]

	/*
	 * error is sum of cross product between reference direction
	 * of fields and direction measured by sensors
	 */
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8006844:	4bde      	ldr	r3, [pc, #888]	; (8006bc0 <imu_ahrs_update+0x82c>)
 8006846:	ed93 7a00 	vldr	s14, [r3]
 800684a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800684e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006852:	4bdc      	ldr	r3, [pc, #880]	; (8006bc4 <imu_ahrs_update+0x830>)
 8006854:	edd3 6a00 	vldr	s13, [r3]
 8006858:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800685c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006860:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006864:	4bd8      	ldr	r3, [pc, #864]	; (8006bc8 <imu_ahrs_update+0x834>)
 8006866:	edd3 6a00 	vldr	s13, [r3]
 800686a:	edd7 7a07 	vldr	s15, [r7, #28]
 800686e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006872:	4bd6      	ldr	r3, [pc, #856]	; (8006bcc <imu_ahrs_update+0x838>)
 8006874:	ed93 6a00 	vldr	s12, [r3]
 8006878:	edd7 7a08 	vldr	s15, [r7, #32]
 800687c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006880:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006888:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 800688c:	4bcd      	ldr	r3, [pc, #820]	; (8006bc4 <imu_ahrs_update+0x830>)
 800688e:	ed93 7a00 	vldr	s14, [r3]
 8006892:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800689a:	4bcd      	ldr	r3, [pc, #820]	; (8006bd0 <imu_ahrs_update+0x83c>)
 800689c:	edd3 6a00 	vldr	s13, [r3]
 80068a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80068a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068ac:	4bc7      	ldr	r3, [pc, #796]	; (8006bcc <imu_ahrs_update+0x838>)
 80068ae:	edd3 6a00 	vldr	s13, [r3]
 80068b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80068b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068ba:	4bc6      	ldr	r3, [pc, #792]	; (8006bd4 <imu_ahrs_update+0x840>)
 80068bc:	ed93 6a00 	vldr	s12, [r3]
 80068c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80068c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80068c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068d0:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80068d4:	4bbe      	ldr	r3, [pc, #760]	; (8006bd0 <imu_ahrs_update+0x83c>)
 80068d6:	ed93 7a00 	vldr	s14, [r3]
 80068da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80068de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068e2:	4bb7      	ldr	r3, [pc, #732]	; (8006bc0 <imu_ahrs_update+0x82c>)
 80068e4:	edd3 6a00 	vldr	s13, [r3]
 80068e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80068ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068f4:	4bb7      	ldr	r3, [pc, #732]	; (8006bd4 <imu_ahrs_update+0x840>)
 80068f6:	edd3 6a00 	vldr	s13, [r3]
 80068fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80068fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006902:	4bb1      	ldr	r3, [pc, #708]	; (8006bc8 <imu_ahrs_update+0x834>)
 8006904:	ed93 6a00 	vldr	s12, [r3]
 8006908:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800690c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006910:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006918:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if (ex != 0.0f && ey != 0.0f && ez != 0.0f) {
 800691c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006920:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006928:	d07c      	beq.n	8006a24 <imu_ahrs_update+0x690>
 800692a:	edd7 7a05 	vldr	s15, [r7, #20]
 800692e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006936:	d075      	beq.n	8006a24 <imu_ahrs_update+0x690>
 8006938:	edd7 7a04 	vldr	s15, [r7, #16]
 800693c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006944:	d06e      	beq.n	8006a24 <imu_ahrs_update+0x690>
		exInt = exInt + ex * AHRSKi * halfT;
 8006946:	edd7 7a06 	vldr	s15, [r7, #24]
 800694a:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8006bd8 <imu_ahrs_update+0x844>
 800694e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006952:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800695a:	4ba0      	ldr	r3, [pc, #640]	; (8006bdc <imu_ahrs_update+0x848>)
 800695c:	edd3 7a00 	vldr	s15, [r3]
 8006960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006964:	4b9d      	ldr	r3, [pc, #628]	; (8006bdc <imu_ahrs_update+0x848>)
 8006966:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * AHRSKi * halfT;
 800696a:	edd7 7a05 	vldr	s15, [r7, #20]
 800696e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8006bd8 <imu_ahrs_update+0x844>
 8006972:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006976:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800697a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800697e:	4b98      	ldr	r3, [pc, #608]	; (8006be0 <imu_ahrs_update+0x84c>)
 8006980:	edd3 7a00 	vldr	s15, [r3]
 8006984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006988:	4b95      	ldr	r3, [pc, #596]	; (8006be0 <imu_ahrs_update+0x84c>)
 800698a:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * AHRSKi * halfT;
 800698e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006992:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006bd8 <imu_ahrs_update+0x844>
 8006996:	ee27 7a87 	vmul.f32	s14, s15, s14
 800699a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800699e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069a2:	4b90      	ldr	r3, [pc, #576]	; (8006be4 <imu_ahrs_update+0x850>)
 80069a4:	edd3 7a00 	vldr	s15, [r3]
 80069a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069ac:	4b8d      	ldr	r3, [pc, #564]	; (8006be4 <imu_ahrs_update+0x850>)
 80069ae:	edc3 7a00 	vstr	s15, [r3]

		gx = gx + AHRSKp * ex + exInt;
 80069b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80069b6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8006be8 <imu_ahrs_update+0x854>
 80069ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80069be:	4b8b      	ldr	r3, [pc, #556]	; (8006bec <imu_ahrs_update+0x858>)
 80069c0:	edd3 7a00 	vldr	s15, [r3]
 80069c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069c8:	4b84      	ldr	r3, [pc, #528]	; (8006bdc <imu_ahrs_update+0x848>)
 80069ca:	edd3 7a00 	vldr	s15, [r3]
 80069ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069d2:	4b86      	ldr	r3, [pc, #536]	; (8006bec <imu_ahrs_update+0x858>)
 80069d4:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + AHRSKp * ey + eyInt;
 80069d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80069dc:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8006be8 <imu_ahrs_update+0x854>
 80069e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80069e4:	4b82      	ldr	r3, [pc, #520]	; (8006bf0 <imu_ahrs_update+0x85c>)
 80069e6:	edd3 7a00 	vldr	s15, [r3]
 80069ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069ee:	4b7c      	ldr	r3, [pc, #496]	; (8006be0 <imu_ahrs_update+0x84c>)
 80069f0:	edd3 7a00 	vldr	s15, [r3]
 80069f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069f8:	4b7d      	ldr	r3, [pc, #500]	; (8006bf0 <imu_ahrs_update+0x85c>)
 80069fa:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + AHRSKp * ez + ezInt;
 80069fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a02:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8006be8 <imu_ahrs_update+0x854>
 8006a06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a0a:	4b7a      	ldr	r3, [pc, #488]	; (8006bf4 <imu_ahrs_update+0x860>)
 8006a0c:	edd3 7a00 	vldr	s15, [r3]
 8006a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a14:	4b73      	ldr	r3, [pc, #460]	; (8006be4 <imu_ahrs_update+0x850>)
 8006a16:	edd3 7a00 	vldr	s15, [r3]
 8006a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a1e:	4b75      	ldr	r3, [pc, #468]	; (8006bf4 <imu_ahrs_update+0x860>)
 8006a20:	edc3 7a00 	vstr	s15, [r3]
	}

	tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 8006a24:	4b74      	ldr	r3, [pc, #464]	; (8006bf8 <imu_ahrs_update+0x864>)
 8006a26:	edd3 7a00 	vldr	s15, [r3]
 8006a2a:	eeb1 7a67 	vneg.f32	s14, s15
 8006a2e:	4b6f      	ldr	r3, [pc, #444]	; (8006bec <imu_ahrs_update+0x858>)
 8006a30:	edd3 7a00 	vldr	s15, [r3]
 8006a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a38:	4b70      	ldr	r3, [pc, #448]	; (8006bfc <imu_ahrs_update+0x868>)
 8006a3a:	edd3 6a00 	vldr	s13, [r3]
 8006a3e:	4b6c      	ldr	r3, [pc, #432]	; (8006bf0 <imu_ahrs_update+0x85c>)
 8006a40:	edd3 7a00 	vldr	s15, [r3]
 8006a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a4c:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <imu_ahrs_update+0x86c>)
 8006a4e:	edd3 6a00 	vldr	s13, [r3]
 8006a52:	4b68      	ldr	r3, [pc, #416]	; (8006bf4 <imu_ahrs_update+0x860>)
 8006a54:	edd3 7a00 	vldr	s15, [r3]
 8006a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a60:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a68:	4b66      	ldr	r3, [pc, #408]	; (8006c04 <imu_ahrs_update+0x870>)
 8006a6a:	edd3 7a00 	vldr	s15, [r3]
 8006a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a72:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 8006a76:	4b63      	ldr	r3, [pc, #396]	; (8006c04 <imu_ahrs_update+0x870>)
 8006a78:	ed93 7a00 	vldr	s14, [r3]
 8006a7c:	4b5b      	ldr	r3, [pc, #364]	; (8006bec <imu_ahrs_update+0x858>)
 8006a7e:	edd3 7a00 	vldr	s15, [r3]
 8006a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a86:	4b5d      	ldr	r3, [pc, #372]	; (8006bfc <imu_ahrs_update+0x868>)
 8006a88:	edd3 6a00 	vldr	s13, [r3]
 8006a8c:	4b59      	ldr	r3, [pc, #356]	; (8006bf4 <imu_ahrs_update+0x860>)
 8006a8e:	edd3 7a00 	vldr	s15, [r3]
 8006a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a9a:	4b59      	ldr	r3, [pc, #356]	; (8006c00 <imu_ahrs_update+0x86c>)
 8006a9c:	edd3 6a00 	vldr	s13, [r3]
 8006aa0:	4b53      	ldr	r3, [pc, #332]	; (8006bf0 <imu_ahrs_update+0x85c>)
 8006aa2:	edd3 7a00 	vldr	s15, [r3]
 8006aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006aaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006aae:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ab6:	4b50      	ldr	r3, [pc, #320]	; (8006bf8 <imu_ahrs_update+0x864>)
 8006ab8:	edd3 7a00 	vldr	s15, [r3]
 8006abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ac0:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 8006ac4:	4b4f      	ldr	r3, [pc, #316]	; (8006c04 <imu_ahrs_update+0x870>)
 8006ac6:	ed93 7a00 	vldr	s14, [r3]
 8006aca:	4b49      	ldr	r3, [pc, #292]	; (8006bf0 <imu_ahrs_update+0x85c>)
 8006acc:	edd3 7a00 	vldr	s15, [r3]
 8006ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ad4:	4b48      	ldr	r3, [pc, #288]	; (8006bf8 <imu_ahrs_update+0x864>)
 8006ad6:	edd3 6a00 	vldr	s13, [r3]
 8006ada:	4b46      	ldr	r3, [pc, #280]	; (8006bf4 <imu_ahrs_update+0x860>)
 8006adc:	edd3 7a00 	vldr	s15, [r3]
 8006ae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ae8:	4b45      	ldr	r3, [pc, #276]	; (8006c00 <imu_ahrs_update+0x86c>)
 8006aea:	edd3 6a00 	vldr	s13, [r3]
 8006aee:	4b3f      	ldr	r3, [pc, #252]	; (8006bec <imu_ahrs_update+0x858>)
 8006af0:	edd3 7a00 	vldr	s15, [r3]
 8006af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006afc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b04:	4b3d      	ldr	r3, [pc, #244]	; (8006bfc <imu_ahrs_update+0x868>)
 8006b06:	edd3 7a00 	vldr	s15, [r3]
 8006b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b0e:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 8006b12:	4b3c      	ldr	r3, [pc, #240]	; (8006c04 <imu_ahrs_update+0x870>)
 8006b14:	ed93 7a00 	vldr	s14, [r3]
 8006b18:	4b36      	ldr	r3, [pc, #216]	; (8006bf4 <imu_ahrs_update+0x860>)
 8006b1a:	edd3 7a00 	vldr	s15, [r3]
 8006b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b22:	4b35      	ldr	r3, [pc, #212]	; (8006bf8 <imu_ahrs_update+0x864>)
 8006b24:	edd3 6a00 	vldr	s13, [r3]
 8006b28:	4b31      	ldr	r3, [pc, #196]	; (8006bf0 <imu_ahrs_update+0x85c>)
 8006b2a:	edd3 7a00 	vldr	s15, [r3]
 8006b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b36:	4b31      	ldr	r3, [pc, #196]	; (8006bfc <imu_ahrs_update+0x868>)
 8006b38:	edd3 6a00 	vldr	s13, [r3]
 8006b3c:	4b2b      	ldr	r3, [pc, #172]	; (8006bec <imu_ahrs_update+0x858>)
 8006b3e:	edd3 7a00 	vldr	s15, [r3]
 8006b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b4a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b52:	4b2b      	ldr	r3, [pc, #172]	; (8006c00 <imu_ahrs_update+0x86c>)
 8006b54:	edd3 7a00 	vldr	s15, [r3]
 8006b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b5c:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 8006b60:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b64:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006b68:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b74:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b80:	edd7 7a00 	vldr	s15, [r7]
 8006b84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b90:	f7fa fd5e 	bl	8001650 <inv_sqrt>
 8006b94:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 8006b98:	ed97 7a03 	vldr	s14, [r7, #12]
 8006b9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba4:	4b17      	ldr	r3, [pc, #92]	; (8006c04 <imu_ahrs_update+0x870>)
 8006ba6:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 8006baa:	ed97 7a02 	vldr	s14, [r7, #8]
 8006bae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <imu_ahrs_update+0x864>)
 8006bb8:	edc3 7a00 	vstr	s15, [r3]
 8006bbc:	e024      	b.n	8006c08 <imu_ahrs_update+0x874>
 8006bbe:	bf00      	nop
 8006bc0:	20002830 	.word	0x20002830
 8006bc4:	20002834 	.word	0x20002834
 8006bc8:	2000283c 	.word	0x2000283c
 8006bcc:	20002840 	.word	0x20002840
 8006bd0:	2000282c 	.word	0x2000282c
 8006bd4:	20002838 	.word	0x20002838
 8006bd8:	00000000 	.word	0x00000000
 8006bdc:	20002814 	.word	0x20002814
 8006be0:	20002818 	.word	0x20002818
 8006be4:	2000281c 	.word	0x2000281c
 8006be8:	3e19999a 	.word	0x3e19999a
 8006bec:	20002820 	.word	0x20002820
 8006bf0:	20002824 	.word	0x20002824
 8006bf4:	20002828 	.word	0x20002828
 8006bf8:	20002808 	.word	0x20002808
 8006bfc:	2000280c 	.word	0x2000280c
 8006c00:	20002810 	.word	0x20002810
 8006c04:	2000000c 	.word	0x2000000c
	q2 = tempq2 * norm;
 8006c08:	ed97 7a01 	vldr	s14, [r7, #4]
 8006c0c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c14:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <imu_ahrs_update+0x8a0>)
 8006c16:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 8006c1a:	ed97 7a00 	vldr	s14, [r7]
 8006c1e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c26:	4b04      	ldr	r3, [pc, #16]	; (8006c38 <imu_ahrs_update+0x8a4>)
 8006c28:	edc3 7a00 	vstr	s15, [r3]
}
 8006c2c:	bf00      	nop
 8006c2e:	3778      	adds	r7, #120	; 0x78
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	2000280c 	.word	0x2000280c
 8006c38:	20002810 	.word	0x20002810

08006c3c <imu_attitude_update>:

void imu_attitude_update(void) {
 8006c3c:	b5b0      	push	{r4, r5, r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
	if (IMU_ORIENTATION == 0) {
		/* yaw    -pi----pi */
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8006c40:	4b63      	ldr	r3, [pc, #396]	; (8006dd0 <imu_attitude_update+0x194>)
 8006c42:	edd3 7a00 	vldr	s15, [r3]
 8006c46:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006c4a:	4b62      	ldr	r3, [pc, #392]	; (8006dd4 <imu_attitude_update+0x198>)
 8006c4c:	edd3 7a00 	vldr	s15, [r3]
 8006c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c54:	4b60      	ldr	r3, [pc, #384]	; (8006dd8 <imu_attitude_update+0x19c>)
 8006c56:	edd3 7a00 	vldr	s15, [r3]
 8006c5a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006c5e:	4b5f      	ldr	r3, [pc, #380]	; (8006ddc <imu_attitude_update+0x1a0>)
 8006c60:	edd3 7a00 	vldr	s15, [r3]
 8006c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c68:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q2 * q2 - 2 * q3 * q3 + 1) * IMU_YAW_INVERT;
 8006c6c:	ee17 0a90 	vmov	r0, s15
 8006c70:	f7f9 fc6a 	bl	8000548 <__aeabi_f2d>
 8006c74:	4604      	mov	r4, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	4b56      	ldr	r3, [pc, #344]	; (8006dd4 <imu_attitude_update+0x198>)
 8006c7a:	edd3 7a00 	vldr	s15, [r3]
 8006c7e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8006c82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c86:	4b53      	ldr	r3, [pc, #332]	; (8006dd4 <imu_attitude_update+0x198>)
 8006c88:	edd3 7a00 	vldr	s15, [r3]
 8006c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c90:	4b52      	ldr	r3, [pc, #328]	; (8006ddc <imu_attitude_update+0x1a0>)
 8006c92:	edd3 7a00 	vldr	s15, [r3]
 8006c96:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006c9a:	4b50      	ldr	r3, [pc, #320]	; (8006ddc <imu_attitude_update+0x1a0>)
 8006c9c:	edd3 7a00 	vldr	s15, [r3]
 8006ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ca8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cb0:	ee17 0a90 	vmov	r0, s15
 8006cb4:	f7f9 fc48 	bl	8000548 <__aeabi_f2d>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	ec43 2b11 	vmov	d1, r2, r3
 8006cc0:	ec45 4b10 	vmov	d0, r4, r5
 8006cc4:	f016 feb8 	bl	801da38 <atan2>
 8006cc8:	ec53 2b10 	vmov	r2, r3, d0
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f7f9 ff8a 	bl	8000be8 <__aeabi_d2f>
 8006cd4:	4603      	mov	r3, r0
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8006cd6:	4a42      	ldr	r2, [pc, #264]	; (8006de0 <imu_attitude_update+0x1a4>)
 8006cd8:	6093      	str	r3, [r2, #8]
		/* pitch  -pi/2----pi/2 */
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
 8006cda:	4b3d      	ldr	r3, [pc, #244]	; (8006dd0 <imu_attitude_update+0x194>)
 8006cdc:	edd3 7a00 	vldr	s15, [r3]
 8006ce0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8006ce4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ce8:	4b3c      	ldr	r3, [pc, #240]	; (8006ddc <imu_attitude_update+0x1a0>)
 8006cea:	edd3 7a00 	vldr	s15, [r3]
 8006cee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cf2:	4b39      	ldr	r3, [pc, #228]	; (8006dd8 <imu_attitude_update+0x19c>)
 8006cf4:	edd3 7a00 	vldr	s15, [r3]
 8006cf8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006cfc:	4b35      	ldr	r3, [pc, #212]	; (8006dd4 <imu_attitude_update+0x198>)
 8006cfe:	edd3 7a00 	vldr	s15, [r3]
 8006d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d0a:	ee17 0a90 	vmov	r0, s15
 8006d0e:	f7f9 fc1b 	bl	8000548 <__aeabi_f2d>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	ec43 2b10 	vmov	d0, r2, r3
 8006d1a:	f016 fe59 	bl	801d9d0 <asin>
 8006d1e:	ec53 2b10 	vmov	r2, r3, d0
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	f7f9 ff5f 	bl	8000be8 <__aeabi_d2f>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4a2c      	ldr	r2, [pc, #176]	; (8006de0 <imu_attitude_update+0x1a4>)
 8006d2e:	6013      	str	r3, [r2, #0]
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8006d30:	4b28      	ldr	r3, [pc, #160]	; (8006dd4 <imu_attitude_update+0x198>)
 8006d32:	edd3 7a00 	vldr	s15, [r3]
 8006d36:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006d3a:	4b28      	ldr	r3, [pc, #160]	; (8006ddc <imu_attitude_update+0x1a0>)
 8006d3c:	edd3 7a00 	vldr	s15, [r3]
 8006d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d44:	4b24      	ldr	r3, [pc, #144]	; (8006dd8 <imu_attitude_update+0x19c>)
 8006d46:	edd3 7a00 	vldr	s15, [r3]
 8006d4a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006d4e:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <imu_attitude_update+0x194>)
 8006d50:	edd3 7a00 	vldr	s15, [r3]
 8006d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d58:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
 8006d5c:	ee17 0a90 	vmov	r0, s15
 8006d60:	f7f9 fbf2 	bl	8000548 <__aeabi_f2d>
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <imu_attitude_update+0x194>)
 8006d6a:	edd3 7a00 	vldr	s15, [r3]
 8006d6e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8006d72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d76:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <imu_attitude_update+0x194>)
 8006d78:	edd3 7a00 	vldr	s15, [r3]
 8006d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d80:	4b14      	ldr	r3, [pc, #80]	; (8006dd4 <imu_attitude_update+0x198>)
 8006d82:	edd3 7a00 	vldr	s15, [r3]
 8006d86:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006d8a:	4b12      	ldr	r3, [pc, #72]	; (8006dd4 <imu_attitude_update+0x198>)
 8006d8c:	edd3 7a00 	vldr	s15, [r3]
 8006d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006da0:	ee17 0a90 	vmov	r0, s15
 8006da4:	f7f9 fbd0 	bl	8000548 <__aeabi_f2d>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	ec43 2b11 	vmov	d1, r2, r3
 8006db0:	ec45 4b10 	vmov	d0, r4, r5
 8006db4:	f016 fe40 	bl	801da38 <atan2>
 8006db8:	ec53 2b10 	vmov	r2, r3, d0
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	f7f9 ff12 	bl	8000be8 <__aeabi_d2f>
 8006dc4:	4603      	mov	r3, r0
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8006dc6:	4a06      	ldr	r2, [pc, #24]	; (8006de0 <imu_attitude_update+0x1a4>)
 8006dc8:	6053      	str	r3, [r2, #4]
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
	}
}
 8006dca:	bf00      	nop
 8006dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20002808 	.word	0x20002808
 8006dd4:	2000280c 	.word	0x2000280c
 8006dd8:	2000000c 	.word	0x2000000c
 8006ddc:	20002810 	.word	0x20002810
 8006de0:	20002844 	.word	0x20002844

08006de4 <launcher_control_task>:
extern ref_magazine_data_t ref_mag_data;
extern uint32_t ref_mag_data_txno;
static uint32_t prev_power_data_no = 0;
static uint32_t prev_mag_data_no = 0;

void launcher_control_task(void *argument) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		//event flags!
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8006dec:	4b21      	ldr	r3, [pc, #132]	; (8006e74 <launcher_control_task+0x90>)
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	f04f 33ff 	mov.w	r3, #4294967295
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	2301      	movs	r3, #1
 8006df8:	2201      	movs	r2, #1
 8006dfa:	2107      	movs	r1, #7
 8006dfc:	f00e fa12 	bl	8015224 <xEventGroupWaitBits>
		portMAX_DELAY);
		status_led(4, on_led);
 8006e00:	2100      	movs	r1, #0
 8006e02:	2004      	movs	r0, #4
 8006e04:	f7fb f89a 	bl	8001f3c <status_led>
		start_time = xTaskGetTickCount();
 8006e08:	f00f fd42 	bl	8016890 <xTaskGetTickCount>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	60fb      	str	r3, [r7, #12]

		if (launcher_ctrl_data.enabled) {
 8006e10:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <launcher_control_task+0x94>)
 8006e12:	795b      	ldrb	r3, [r3, #5]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <launcher_control_task+0x42>
			launcher_control(can_motors + LFRICTION_MOTOR_ID - 1,
 8006e18:	4b18      	ldr	r3, [pc, #96]	; (8006e7c <launcher_control_task+0x98>)
 8006e1a:	4a19      	ldr	r2, [pc, #100]	; (8006e80 <launcher_control_task+0x9c>)
 8006e1c:	4919      	ldr	r1, [pc, #100]	; (8006e84 <launcher_control_task+0xa0>)
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f832 	bl	8006e88 <launcher_control>
 8006e24:	e015      	b.n	8006e52 <launcher_control_task+0x6e>
					can_motors + RFRICTION_MOTOR_ID - 1,
					can_motors + FEEDER_MOTOR_ID - 1);

		} else {
			can_motors[LFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8006e26:	4b17      	ldr	r3, [pc, #92]	; (8006e84 <launcher_control_task+0xa0>)
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			can_motors[RFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8006e30:	4b14      	ldr	r3, [pc, #80]	; (8006e84 <launcher_control_task+0xa0>)
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
			can_motors[FEEDER_MOTOR_ID - 1].rpm_pid.output = 0;
 8006e38:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <launcher_control_task+0xa0>)
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
			motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,
 8006e42:	2300      	movs	r3, #0
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	2301      	movs	r3, #1
 8006e48:	2202      	movs	r2, #2
 8006e4a:	2103      	movs	r1, #3
 8006e4c:	480d      	ldr	r0, [pc, #52]	; (8006e84 <launcher_control_task+0xa0>)
 8006e4e:	f001 faf1 	bl	8008434 <motor_send_can>
			RFRICTION_MOTOR_ID, 0);
		}
		status_led(4, off_led);
 8006e52:	2101      	movs	r1, #1
 8006e54:	2004      	movs	r0, #4
 8006e56:	f7fb f871 	bl	8001f3c <status_led>
		//vTaskDelay(CHASSIS_DELAY);
		xEventGroupClearBits(launcher_event_group, 0b111);
 8006e5a:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <launcher_control_task+0x90>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2107      	movs	r1, #7
 8006e60:	4618      	mov	r0, r3
 8006e62:	f00e faad 	bl	80153c0 <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 8006e66:	f107 030c 	add.w	r3, r7, #12
 8006e6a:	210a      	movs	r1, #10
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f00f fb41 	bl	80164f4 <vTaskDelayUntil>
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8006e72:	e7bb      	b.n	8006dec <launcher_control_task+0x8>
 8006e74:	20000464 	.word	0x20000464
 8006e78:	200027b4 	.word	0x200027b4
 8006e7c:	200018e0 	.word	0x200018e0
 8006e80:	20001984 	.word	0x20001984
 8006e84:	2000183c 	.word	0x2000183c

08006e88 <launcher_control>:
	}

}

void launcher_control(motor_data_t *left_friction_motor,
		motor_data_t *right_friction_motor, motor_data_t *feeder) {
 8006e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e8c:	b08a      	sub	sp, #40	; 0x28
 8006e8e:	af02      	add	r7, sp, #8
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]

	int16_t feeder_output = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	83fb      	strh	r3, [r7, #30]
	static uint32_t overheat_time;
	static float target_ang;
	uint32_t curr_time = HAL_GetTick();
 8006e9a:	f002 faff 	bl	800949c <HAL_GetTick>
 8006e9e:	61b8      	str	r0, [r7, #24]
	static uint32_t overheat_start;
	static uint32_t last_fire;
	static uint8_t fired;
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8006ea0:	4b51      	ldr	r3, [pc, #324]	; (8006fe8 <launcher_control+0x160>)
 8006ea2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ea6:	461a      	mov	r2, r3
			* referee_limiters.feeding_speed / FEEDER_SPEED_RATIO;
 8006ea8:	4b50      	ldr	r3, [pc, #320]	; (8006fec <launcher_control+0x164>)
 8006eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eae:	fb02 f303 	mul.w	r3, r2, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	da00      	bge.n	8006eb8 <launcher_control+0x30>
 8006eb6:	3307      	adds	r3, #7
 8006eb8:	10db      	asrs	r3, r3, #3
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8006eba:	82fb      	strh	r3, [r7, #22]

	if (launcher_ctrl_data.gun_feeding_speed == 0) {
 8006ebc:	4b4a      	ldr	r3, [pc, #296]	; (8006fe8 <launcher_control+0x160>)
 8006ebe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d11d      	bne.n	8006f02 <launcher_control+0x7a>
		feeder->rpm_pid.output = 0;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
		speed_pid(0, feeder->raw_data.rpm, &feeder->rpm_pid);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7f9 fb25 	bl	8000524 <__aeabi_i2d>
 8006eda:	4604      	mov	r4, r0
 8006edc:	460d      	mov	r5, r1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3310      	adds	r3, #16
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	ec45 4b11 	vmov	d1, r4, r5
 8006ee8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 8006fe0 <launcher_control+0x158>
 8006eec:	f001 f9fc 	bl	80082e8 <speed_pid>
		left_friction_motor->rpm_pid.output = 0;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	631a      	str	r2, [r3, #48]	; 0x30
		right_friction_motor->rpm_pid.output = 0;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
 8006f00:	e05e      	b.n	8006fc0 <launcher_control+0x138>
	} else {
		int16_t launcher_rpm = -referee_limiters.projectile_speed
 8006f02:	4b3a      	ldr	r3, [pc, #232]	; (8006fec <launcher_control+0x164>)
 8006f04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f08:	b29b      	uxth	r3, r3
				* FRICTION_INVERT * PROJECTILE_SPEED_RATIO;
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	0052      	lsls	r2, r2, #1
 8006f0e:	4413      	add	r3, r2
 8006f10:	461a      	mov	r2, r3
 8006f12:	0112      	lsls	r2, r2, #4
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	b29b      	uxth	r3, r3
		int16_t launcher_rpm = -referee_limiters.projectile_speed
 8006f1a:	82bb      	strh	r3, [r7, #20]

		speed_pid(launcher_rpm, left_friction_motor->raw_data.rpm,
 8006f1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7f9 faff 	bl	8000524 <__aeabi_i2d>
 8006f26:	4604      	mov	r4, r0
 8006f28:	460d      	mov	r5, r1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7f9 faf7 	bl	8000524 <__aeabi_i2d>
 8006f36:	4680      	mov	r8, r0
 8006f38:	4689      	mov	r9, r1
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3310      	adds	r3, #16
 8006f3e:	4618      	mov	r0, r3
 8006f40:	ec49 8b11 	vmov	d1, r8, r9
 8006f44:	ec45 4b10 	vmov	d0, r4, r5
 8006f48:	f001 f9ce 	bl	80082e8 <speed_pid>
				&left_friction_motor->rpm_pid);
		speed_pid(launcher_rpm, right_friction_motor->raw_data.rpm,
 8006f4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7f9 fae7 	bl	8000524 <__aeabi_i2d>
 8006f56:	4604      	mov	r4, r0
 8006f58:	460d      	mov	r5, r1
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7f9 fadf 	bl	8000524 <__aeabi_i2d>
 8006f66:	4680      	mov	r8, r0
 8006f68:	4689      	mov	r9, r1
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	3310      	adds	r3, #16
 8006f6e:	4618      	mov	r0, r3
 8006f70:	ec49 8b11 	vmov	d1, r8, r9
 8006f74:	ec45 4b10 	vmov	d0, r4, r5
 8006f78:	f001 f9b6 	bl	80082e8 <speed_pid>
				&right_friction_motor->rpm_pid);
		speed_pid(firing_speed * feeder->angle_data.gearbox_ratio,
 8006f7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006f80:	ee07 3a90 	vmov	s15, r3
 8006f84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	ee17 0a90 	vmov	r0, s15
 8006f96:	f7f9 fad7 	bl	8000548 <__aeabi_f2d>
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	460d      	mov	r5, r1
				feeder->raw_data.rpm, &feeder->rpm_pid);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(firing_speed * feeder->angle_data.gearbox_ratio,
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7f9 fabd 	bl	8000524 <__aeabi_i2d>
 8006faa:	4680      	mov	r8, r0
 8006fac:	4689      	mov	r9, r1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3310      	adds	r3, #16
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	ec49 8b11 	vmov	d1, r8, r9
 8006fb8:	ec45 4b10 	vmov	d0, r4, r5
 8006fbc:	f001 f994 	bl	80082e8 <speed_pid>
	}

	motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	2103      	movs	r1, #3
 8006fca:	4809      	ldr	r0, [pc, #36]	; (8006ff0 <launcher_control+0x168>)
 8006fcc:	f001 fa32 	bl	8008434 <motor_send_can>
	RFRICTION_MOTOR_ID, 0);
}
 8006fd0:	bf00      	nop
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006fda:	bf00      	nop
 8006fdc:	f3af 8000 	nop.w
	...
 8006fe8:	200027b4 	.word	0x200027b4
 8006fec:	2000289c 	.word	0x2000289c
 8006ff0:	2000183c 	.word	0x2000183c

08006ff4 <set_motor_config>:
#include "motor_config.h"

extern QueueHandle_t buzzing_task_msg;
uint16_t g_motor_fault;

void set_motor_config(motor_data_t* motor){
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	//general config:
		switch(motor->motor_type){
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	789b      	ldrb	r3, [r3, #2]
 8007000:	3b01      	subs	r3, #1
 8007002:	2b08      	cmp	r3, #8
 8007004:	d845      	bhi.n	8007092 <set_motor_config+0x9e>
 8007006:	a201      	add	r2, pc, #4	; (adr r2, 800700c <set_motor_config+0x18>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	08007063 	.word	0x08007063
 8007010:	0800707b 	.word	0x0800707b
 8007014:	08007031 	.word	0x08007031
 8007018:	08007049 	.word	0x08007049
 800701c:	08007031 	.word	0x08007031
 8007020:	0800707b 	.word	0x0800707b
 8007024:	0800707b 	.word	0x0800707b
 8007028:	08007031 	.word	0x08007031
 800702c:	08007063 	.word	0x08007063
		case TYPE_M3508_ANGLE:
		case TYPE_M3508_STEPS:
		case TYPE_M3508:
			motor->angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a1b      	ldr	r2, [pc, #108]	; (80070a0 <set_motor_config+0xac>)
 8007034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a1a      	ldr	r2, [pc, #104]	; (80070a4 <set_motor_config+0xb0>)
 800703c:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8007044:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8007046:	e025      	b.n	8007094 <set_motor_config+0xa0>
		case TYPE_M3508_NGEARBOX:
			motor->angle_data.gearbox_ratio = 1;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800704e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a13      	ldr	r2, [pc, #76]	; (80070a4 <set_motor_config+0xb0>)
 8007056:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800705e:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8007060:	e018      	b.n	8007094 <set_motor_config+0xa0>
		case TYPE_GM6020:
		case TYPE_GM6020_720:
			motor->angle_data.gearbox_ratio = 0;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = GM6020_MAX_RPM;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a0e      	ldr	r2, [pc, #56]	; (80070a8 <set_motor_config+0xb4>)
 8007070:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a0d      	ldr	r2, [pc, #52]	; (80070ac <set_motor_config+0xb8>)
 8007076:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8007078:	e00c      	b.n	8007094 <set_motor_config+0xa0>
		case TYPE_M2006:
		case TYPE_M2006_STEPS:
		case TYPE_M2006_ANGLE:
			motor->angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a0c      	ldr	r2, [pc, #48]	; (80070b0 <set_motor_config+0xbc>)
 800707e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			motor->angle_pid.physical_max = M2006_MAX_RPM;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a0b      	ldr	r2, [pc, #44]	; (80070b4 <set_motor_config+0xc0>)
 8007086:	665a      	str	r2, [r3, #100]	; 0x64
			motor->rpm_pid.physical_max = M2006_MAX_OUTPUT;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800708e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8007090:	e000      	b.n	8007094 <set_motor_config+0xa0>
		default:
			break;
 8007092:	bf00      	nop
		}

}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	4199999a 	.word	0x4199999a
 80070a4:	460ca000 	.word	0x460ca000
 80070a8:	43c80000 	.word	0x43c80000
 80070ac:	469c4000 	.word	0x469c4000
 80070b0:	42100000 	.word	0x42100000
 80070b4:	466a6000 	.word	0x466a6000

080070b8 <config_motors>:

extern motor_data_t can_motors[24];
void config_motors() {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= 24; i++) {
 80070be:	2300      	movs	r3, #0
 80070c0:	71fb      	strb	r3, [r7, #7]
 80070c2:	e03c      	b.n	800713e <config_motors+0x86>
		//reset all the values to 0
		can_motors[i].motor_type = 0;
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	4abb      	ldr	r2, [pc, #748]	; (80073b4 <config_motors+0x2fc>)
 80070c8:	21a4      	movs	r1, #164	; 0xa4
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	4413      	add	r3, r2
 80070d0:	3302      	adds	r3, #2
 80070d2:	2200      	movs	r2, #0
 80070d4:	701a      	strb	r2, [r3, #0]
		can_motors[i].rpm_pid.output = 0;
 80070d6:	79fb      	ldrb	r3, [r7, #7]
 80070d8:	4ab6      	ldr	r2, [pc, #728]	; (80073b4 <config_motors+0x2fc>)
 80070da:	21a4      	movs	r1, #164	; 0xa4
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	4413      	add	r3, r2
 80070e2:	3330      	adds	r3, #48	; 0x30
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
		can_motors[i].rpm_pid.integral = 0;
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	4ab1      	ldr	r2, [pc, #708]	; (80073b4 <config_motors+0x2fc>)
 80070ee:	21a4      	movs	r1, #164	; 0xa4
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	4413      	add	r3, r2
 80070f6:	3324      	adds	r3, #36	; 0x24
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.output = 0;
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	4aac      	ldr	r2, [pc, #688]	; (80073b4 <config_motors+0x2fc>)
 8007102:	21a4      	movs	r1, #164	; 0xa4
 8007104:	fb01 f303 	mul.w	r3, r1, r3
 8007108:	4413      	add	r3, r2
 800710a:	3360      	adds	r3, #96	; 0x60
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.integral = 0;
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	4aa7      	ldr	r2, [pc, #668]	; (80073b4 <config_motors+0x2fc>)
 8007116:	21a4      	movs	r1, #164	; 0xa4
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	4413      	add	r3, r2
 800711e:	3354      	adds	r3, #84	; 0x54
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_data.ticks = 0;
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	4aa2      	ldr	r2, [pc, #648]	; (80073b4 <config_motors+0x2fc>)
 800712a:	21a4      	movs	r1, #164	; 0xa4
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	4413      	add	r3, r2
 8007132:	3370      	adds	r3, #112	; 0x70
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i <= 24; i++) {
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	3301      	adds	r3, #1
 800713c:	71fb      	strb	r3, [r7, #7]
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	2b18      	cmp	r3, #24
 8007142:	d9bf      	bls.n	80070c4 <config_motors+0xc>
	}

	//initialise motor data
#ifdef FR_MOTOR_ID
	uint8_t motor_id = FR_MOTOR_ID - 1;
 8007144:	230d      	movs	r3, #13
 8007146:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_STEPS;
 8007148:	79bb      	ldrb	r3, [r7, #6]
 800714a:	4a9a      	ldr	r2, [pc, #616]	; (80073b4 <config_motors+0x2fc>)
 800714c:	21a4      	movs	r1, #164	; 0xa4
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	4413      	add	r3, r2
 8007154:	3302      	adds	r3, #2
 8007156:	2205      	movs	r2, #5
 8007158:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800715a:	79bb      	ldrb	r3, [r7, #6]
 800715c:	22a4      	movs	r2, #164	; 0xa4
 800715e:	fb02 f303 	mul.w	r3, r2, r3
 8007162:	4a94      	ldr	r2, [pc, #592]	; (80073b4 <config_motors+0x2fc>)
 8007164:	4413      	add	r3, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff ff44 	bl	8006ff4 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 800716c:	79bb      	ldrb	r3, [r7, #6]
 800716e:	4a91      	ldr	r2, [pc, #580]	; (80073b4 <config_motors+0x2fc>)
 8007170:	21a4      	movs	r1, #164	; 0xa4
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	3374      	adds	r3, #116	; 0x74
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 800717e:	79bb      	ldrb	r3, [r7, #6]
 8007180:	4a8c      	ldr	r2, [pc, #560]	; (80073b4 <config_motors+0x2fc>)
 8007182:	21a4      	movs	r1, #164	; 0xa4
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	4413      	add	r3, r2
 800718a:	337c      	adds	r3, #124	; 0x7c
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 8007192:	79bb      	ldrb	r3, [r7, #6]
 8007194:	4a87      	ldr	r2, [pc, #540]	; (80073b4 <config_motors+0x2fc>)
 8007196:	21a4      	movs	r1, #164	; 0xa4
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	4413      	add	r3, r2
 800719e:	3378      	adds	r3, #120	; 0x78
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 80071a6:	79bb      	ldrb	r3, [r7, #6]
 80071a8:	4a82      	ldr	r2, [pc, #520]	; (80073b4 <config_motors+0x2fc>)
 80071aa:	21a4      	movs	r1, #164	; 0xa4
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	4413      	add	r3, r2
 80071b2:	3310      	adds	r3, #16
 80071b4:	4a80      	ldr	r2, [pc, #512]	; (80073b8 <config_motors+0x300>)
 80071b6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 80071b8:	79bb      	ldrb	r3, [r7, #6]
 80071ba:	4a7e      	ldr	r2, [pc, #504]	; (80073b4 <config_motors+0x2fc>)
 80071bc:	21a4      	movs	r1, #164	; 0xa4
 80071be:	fb01 f303 	mul.w	r3, r1, r3
 80071c2:	4413      	add	r3, r2
 80071c4:	3314      	adds	r3, #20
 80071c6:	4a7d      	ldr	r2, [pc, #500]	; (80073bc <config_motors+0x304>)
 80071c8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 80071ca:	79bb      	ldrb	r3, [r7, #6]
 80071cc:	4a79      	ldr	r2, [pc, #484]	; (80073b4 <config_motors+0x2fc>)
 80071ce:	21a4      	movs	r1, #164	; 0xa4
 80071d0:	fb01 f303 	mul.w	r3, r1, r3
 80071d4:	4413      	add	r3, r2
 80071d6:	3318      	adds	r3, #24
 80071d8:	4a79      	ldr	r2, [pc, #484]	; (80073c0 <config_motors+0x308>)
 80071da:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 80071dc:	79bb      	ldrb	r3, [r7, #6]
 80071de:	4a75      	ldr	r2, [pc, #468]	; (80073b4 <config_motors+0x2fc>)
 80071e0:	21a4      	movs	r1, #164	; 0xa4
 80071e2:	fb01 f303 	mul.w	r3, r1, r3
 80071e6:	4413      	add	r3, r2
 80071e8:	3394      	adds	r3, #148	; 0x94
 80071ea:	4a76      	ldr	r2, [pc, #472]	; (80073c4 <config_motors+0x30c>)
 80071ec:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 80071ee:	79bb      	ldrb	r3, [r7, #6]
 80071f0:	4a70      	ldr	r2, [pc, #448]	; (80073b4 <config_motors+0x2fc>)
 80071f2:	21a4      	movs	r1, #164	; 0xa4
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	4413      	add	r3, r2
 80071fa:	3328      	adds	r3, #40	; 0x28
 80071fc:	4a72      	ldr	r2, [pc, #456]	; (80073c8 <config_motors+0x310>)
 80071fe:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 8007200:	79bb      	ldrb	r3, [r7, #6]
 8007202:	4a6c      	ldr	r2, [pc, #432]	; (80073b4 <config_motors+0x2fc>)
 8007204:	21a4      	movs	r1, #164	; 0xa4
 8007206:	fb01 f303 	mul.w	r3, r1, r3
 800720a:	4413      	add	r3, r2
 800720c:	332c      	adds	r3, #44	; 0x2c
 800720e:	4a6f      	ldr	r2, [pc, #444]	; (80073cc <config_motors+0x314>)
 8007210:	601a      	str	r2, [r3, #0]
#endif

#ifdef FL_MOTOR_ID
	motor_id = FL_MOTOR_ID - 1;
 8007212:	230c      	movs	r3, #12
 8007214:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8007216:	79bb      	ldrb	r3, [r7, #6]
 8007218:	4a66      	ldr	r2, [pc, #408]	; (80073b4 <config_motors+0x2fc>)
 800721a:	21a4      	movs	r1, #164	; 0xa4
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	4413      	add	r3, r2
 8007222:	3302      	adds	r3, #2
 8007224:	2203      	movs	r2, #3
 8007226:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8007228:	79bb      	ldrb	r3, [r7, #6]
 800722a:	22a4      	movs	r2, #164	; 0xa4
 800722c:	fb02 f303 	mul.w	r3, r2, r3
 8007230:	4a60      	ldr	r2, [pc, #384]	; (80073b4 <config_motors+0x2fc>)
 8007232:	4413      	add	r3, r2
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff fedd 	bl	8006ff4 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 800723a:	79bb      	ldrb	r3, [r7, #6]
 800723c:	4a5d      	ldr	r2, [pc, #372]	; (80073b4 <config_motors+0x2fc>)
 800723e:	21a4      	movs	r1, #164	; 0xa4
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	4413      	add	r3, r2
 8007246:	3374      	adds	r3, #116	; 0x74
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 800724c:	79bb      	ldrb	r3, [r7, #6]
 800724e:	4a59      	ldr	r2, [pc, #356]	; (80073b4 <config_motors+0x2fc>)
 8007250:	21a4      	movs	r1, #164	; 0xa4
 8007252:	fb01 f303 	mul.w	r3, r1, r3
 8007256:	4413      	add	r3, r2
 8007258:	337c      	adds	r3, #124	; 0x7c
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 8007260:	79bb      	ldrb	r3, [r7, #6]
 8007262:	4a54      	ldr	r2, [pc, #336]	; (80073b4 <config_motors+0x2fc>)
 8007264:	21a4      	movs	r1, #164	; 0xa4
 8007266:	fb01 f303 	mul.w	r3, r1, r3
 800726a:	4413      	add	r3, r2
 800726c:	3378      	adds	r3, #120	; 0x78
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8007274:	79bb      	ldrb	r3, [r7, #6]
 8007276:	4a4f      	ldr	r2, [pc, #316]	; (80073b4 <config_motors+0x2fc>)
 8007278:	21a4      	movs	r1, #164	; 0xa4
 800727a:	fb01 f303 	mul.w	r3, r1, r3
 800727e:	4413      	add	r3, r2
 8007280:	3384      	adds	r3, #132	; 0x84
 8007282:	4a53      	ldr	r2, [pc, #332]	; (80073d0 <config_motors+0x318>)
 8007284:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8007286:	79bb      	ldrb	r3, [r7, #6]
 8007288:	4a4a      	ldr	r2, [pc, #296]	; (80073b4 <config_motors+0x2fc>)
 800728a:	21a4      	movs	r1, #164	; 0xa4
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	4413      	add	r3, r2
 8007292:	3380      	adds	r3, #128	; 0x80
 8007294:	4a4f      	ldr	r2, [pc, #316]	; (80073d4 <config_motors+0x31c>)
 8007296:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 8007298:	79bb      	ldrb	r3, [r7, #6]
 800729a:	4a46      	ldr	r2, [pc, #280]	; (80073b4 <config_motors+0x2fc>)
 800729c:	21a4      	movs	r1, #164	; 0xa4
 800729e:	fb01 f303 	mul.w	r3, r1, r3
 80072a2:	4413      	add	r3, r2
 80072a4:	3394      	adds	r3, #148	; 0x94
 80072a6:	4a47      	ldr	r2, [pc, #284]	; (80073c4 <config_motors+0x30c>)
 80072a8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 80072aa:	79bb      	ldrb	r3, [r7, #6]
 80072ac:	4a41      	ldr	r2, [pc, #260]	; (80073b4 <config_motors+0x2fc>)
 80072ae:	21a4      	movs	r1, #164	; 0xa4
 80072b0:	fb01 f303 	mul.w	r3, r1, r3
 80072b4:	4413      	add	r3, r2
 80072b6:	3310      	adds	r3, #16
 80072b8:	4a3f      	ldr	r2, [pc, #252]	; (80073b8 <config_motors+0x300>)
 80072ba:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 80072bc:	79bb      	ldrb	r3, [r7, #6]
 80072be:	4a3d      	ldr	r2, [pc, #244]	; (80073b4 <config_motors+0x2fc>)
 80072c0:	21a4      	movs	r1, #164	; 0xa4
 80072c2:	fb01 f303 	mul.w	r3, r1, r3
 80072c6:	4413      	add	r3, r2
 80072c8:	3314      	adds	r3, #20
 80072ca:	4a3c      	ldr	r2, [pc, #240]	; (80073bc <config_motors+0x304>)
 80072cc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 80072ce:	79bb      	ldrb	r3, [r7, #6]
 80072d0:	4a38      	ldr	r2, [pc, #224]	; (80073b4 <config_motors+0x2fc>)
 80072d2:	21a4      	movs	r1, #164	; 0xa4
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	4413      	add	r3, r2
 80072da:	3318      	adds	r3, #24
 80072dc:	4a38      	ldr	r2, [pc, #224]	; (80073c0 <config_motors+0x308>)
 80072de:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 80072e0:	79bb      	ldrb	r3, [r7, #6]
 80072e2:	4a34      	ldr	r2, [pc, #208]	; (80073b4 <config_motors+0x2fc>)
 80072e4:	21a4      	movs	r1, #164	; 0xa4
 80072e6:	fb01 f303 	mul.w	r3, r1, r3
 80072ea:	4413      	add	r3, r2
 80072ec:	3328      	adds	r3, #40	; 0x28
 80072ee:	4a36      	ldr	r2, [pc, #216]	; (80073c8 <config_motors+0x310>)
 80072f0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 80072f2:	79bb      	ldrb	r3, [r7, #6]
 80072f4:	4a2f      	ldr	r2, [pc, #188]	; (80073b4 <config_motors+0x2fc>)
 80072f6:	21a4      	movs	r1, #164	; 0xa4
 80072f8:	fb01 f303 	mul.w	r3, r1, r3
 80072fc:	4413      	add	r3, r2
 80072fe:	332c      	adds	r3, #44	; 0x2c
 8007300:	4a32      	ldr	r2, [pc, #200]	; (80073cc <config_motors+0x314>)
 8007302:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID - 1;
 8007304:	230f      	movs	r3, #15
 8007306:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8007308:	79bb      	ldrb	r3, [r7, #6]
 800730a:	4a2a      	ldr	r2, [pc, #168]	; (80073b4 <config_motors+0x2fc>)
 800730c:	21a4      	movs	r1, #164	; 0xa4
 800730e:	fb01 f303 	mul.w	r3, r1, r3
 8007312:	4413      	add	r3, r2
 8007314:	3302      	adds	r3, #2
 8007316:	2203      	movs	r2, #3
 8007318:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800731a:	79bb      	ldrb	r3, [r7, #6]
 800731c:	22a4      	movs	r2, #164	; 0xa4
 800731e:	fb02 f303 	mul.w	r3, r2, r3
 8007322:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <config_motors+0x2fc>)
 8007324:	4413      	add	r3, r2
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff fe64 	bl	8006ff4 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 800732c:	79bb      	ldrb	r3, [r7, #6]
 800732e:	4a21      	ldr	r2, [pc, #132]	; (80073b4 <config_motors+0x2fc>)
 8007330:	21a4      	movs	r1, #164	; 0xa4
 8007332:	fb01 f303 	mul.w	r3, r1, r3
 8007336:	4413      	add	r3, r2
 8007338:	3374      	adds	r3, #116	; 0x74
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 800733e:	79bb      	ldrb	r3, [r7, #6]
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <config_motors+0x2fc>)
 8007342:	21a4      	movs	r1, #164	; 0xa4
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	4413      	add	r3, r2
 800734a:	337c      	adds	r3, #124	; 0x7c
 800734c:	f04f 0200 	mov.w	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 8007352:	79bb      	ldrb	r3, [r7, #6]
 8007354:	4a17      	ldr	r2, [pc, #92]	; (80073b4 <config_motors+0x2fc>)
 8007356:	21a4      	movs	r1, #164	; 0xa4
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	4413      	add	r3, r2
 800735e:	3378      	adds	r3, #120	; 0x78
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8007366:	79bb      	ldrb	r3, [r7, #6]
 8007368:	4a12      	ldr	r2, [pc, #72]	; (80073b4 <config_motors+0x2fc>)
 800736a:	21a4      	movs	r1, #164	; 0xa4
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	4413      	add	r3, r2
 8007372:	3384      	adds	r3, #132	; 0x84
 8007374:	4a16      	ldr	r2, [pc, #88]	; (80073d0 <config_motors+0x318>)
 8007376:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8007378:	79bb      	ldrb	r3, [r7, #6]
 800737a:	4a0e      	ldr	r2, [pc, #56]	; (80073b4 <config_motors+0x2fc>)
 800737c:	21a4      	movs	r1, #164	; 0xa4
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	4413      	add	r3, r2
 8007384:	3380      	adds	r3, #128	; 0x80
 8007386:	4a13      	ldr	r2, [pc, #76]	; (80073d4 <config_motors+0x31c>)
 8007388:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800738a:	79bb      	ldrb	r3, [r7, #6]
 800738c:	4a09      	ldr	r2, [pc, #36]	; (80073b4 <config_motors+0x2fc>)
 800738e:	21a4      	movs	r1, #164	; 0xa4
 8007390:	fb01 f303 	mul.w	r3, r1, r3
 8007394:	4413      	add	r3, r2
 8007396:	3394      	adds	r3, #148	; 0x94
 8007398:	4a0a      	ldr	r2, [pc, #40]	; (80073c4 <config_motors+0x30c>)
 800739a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 800739c:	79bb      	ldrb	r3, [r7, #6]
 800739e:	4a05      	ldr	r2, [pc, #20]	; (80073b4 <config_motors+0x2fc>)
 80073a0:	21a4      	movs	r1, #164	; 0xa4
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	3340      	adds	r3, #64	; 0x40
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 80073b0:	79bb      	ldrb	r3, [r7, #6]
 80073b2:	e011      	b.n	80073d8 <config_motors+0x320>
 80073b4:	2000183c 	.word	0x2000183c
 80073b8:	41200000 	.word	0x41200000
 80073bc:	3dcccccd 	.word	0x3dcccccd
 80073c0:	40a00000 	.word	0x40a00000
 80073c4:	40f40000 	.word	0x40f40000
 80073c8:	461c4000 	.word	0x461c4000
 80073cc:	457a0000 	.word	0x457a0000
 80073d0:	40c90fdb 	.word	0x40c90fdb
 80073d4:	c0c90fdb 	.word	0xc0c90fdb
 80073d8:	4abc      	ldr	r2, [pc, #752]	; (80076cc <config_motors+0x614>)
 80073da:	21a4      	movs	r1, #164	; 0xa4
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4413      	add	r3, r2
 80073e2:	3344      	adds	r3, #68	; 0x44
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 80073ea:	79bb      	ldrb	r3, [r7, #6]
 80073ec:	4ab7      	ldr	r2, [pc, #732]	; (80076cc <config_motors+0x614>)
 80073ee:	21a4      	movs	r1, #164	; 0xa4
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	4413      	add	r3, r2
 80073f6:	3348      	adds	r3, #72	; 0x48
 80073f8:	f04f 0200 	mov.w	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 80073fe:	79bb      	ldrb	r3, [r7, #6]
 8007400:	4ab2      	ldr	r2, [pc, #712]	; (80076cc <config_motors+0x614>)
 8007402:	21a4      	movs	r1, #164	; 0xa4
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	4413      	add	r3, r2
 800740a:	3358      	adds	r3, #88	; 0x58
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 8007412:	79bb      	ldrb	r3, [r7, #6]
 8007414:	4aad      	ldr	r2, [pc, #692]	; (80076cc <config_motors+0x614>)
 8007416:	21a4      	movs	r1, #164	; 0xa4
 8007418:	fb01 f303 	mul.w	r3, r1, r3
 800741c:	4413      	add	r3, r2
 800741e:	335c      	adds	r3, #92	; 0x5c
 8007420:	f04f 0200 	mov.w	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 8007426:	79bb      	ldrb	r3, [r7, #6]
 8007428:	4aa8      	ldr	r2, [pc, #672]	; (80076cc <config_motors+0x614>)
 800742a:	21a4      	movs	r1, #164	; 0xa4
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	4413      	add	r3, r2
 8007432:	3310      	adds	r3, #16
 8007434:	4aa6      	ldr	r2, [pc, #664]	; (80076d0 <config_motors+0x618>)
 8007436:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8007438:	79bb      	ldrb	r3, [r7, #6]
 800743a:	4aa4      	ldr	r2, [pc, #656]	; (80076cc <config_motors+0x614>)
 800743c:	21a4      	movs	r1, #164	; 0xa4
 800743e:	fb01 f303 	mul.w	r3, r1, r3
 8007442:	4413      	add	r3, r2
 8007444:	3314      	adds	r3, #20
 8007446:	4aa3      	ldr	r2, [pc, #652]	; (80076d4 <config_motors+0x61c>)
 8007448:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800744a:	79bb      	ldrb	r3, [r7, #6]
 800744c:	4a9f      	ldr	r2, [pc, #636]	; (80076cc <config_motors+0x614>)
 800744e:	21a4      	movs	r1, #164	; 0xa4
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	4413      	add	r3, r2
 8007456:	3318      	adds	r3, #24
 8007458:	4a9f      	ldr	r2, [pc, #636]	; (80076d8 <config_motors+0x620>)
 800745a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800745c:	79bb      	ldrb	r3, [r7, #6]
 800745e:	4a9b      	ldr	r2, [pc, #620]	; (80076cc <config_motors+0x614>)
 8007460:	21a4      	movs	r1, #164	; 0xa4
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	4413      	add	r3, r2
 8007468:	3328      	adds	r3, #40	; 0x28
 800746a:	4a9c      	ldr	r2, [pc, #624]	; (80076dc <config_motors+0x624>)
 800746c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800746e:	79bb      	ldrb	r3, [r7, #6]
 8007470:	4a96      	ldr	r2, [pc, #600]	; (80076cc <config_motors+0x614>)
 8007472:	21a4      	movs	r1, #164	; 0xa4
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	4413      	add	r3, r2
 800747a:	332c      	adds	r3, #44	; 0x2c
 800747c:	4a98      	ldr	r2, [pc, #608]	; (80076e0 <config_motors+0x628>)
 800747e:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID - 1;
 8007480:	230e      	movs	r3, #14
 8007482:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8007484:	79bb      	ldrb	r3, [r7, #6]
 8007486:	4a91      	ldr	r2, [pc, #580]	; (80076cc <config_motors+0x614>)
 8007488:	21a4      	movs	r1, #164	; 0xa4
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	3302      	adds	r3, #2
 8007492:	2203      	movs	r2, #3
 8007494:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8007496:	79bb      	ldrb	r3, [r7, #6]
 8007498:	22a4      	movs	r2, #164	; 0xa4
 800749a:	fb02 f303 	mul.w	r3, r2, r3
 800749e:	4a8b      	ldr	r2, [pc, #556]	; (80076cc <config_motors+0x614>)
 80074a0:	4413      	add	r3, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff fda6 	bl	8006ff4 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 80074a8:	79bb      	ldrb	r3, [r7, #6]
 80074aa:	4a88      	ldr	r2, [pc, #544]	; (80076cc <config_motors+0x614>)
 80074ac:	21a4      	movs	r1, #164	; 0xa4
 80074ae:	fb01 f303 	mul.w	r3, r1, r3
 80074b2:	4413      	add	r3, r2
 80074b4:	3374      	adds	r3, #116	; 0x74
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 80074ba:	79bb      	ldrb	r3, [r7, #6]
 80074bc:	4a83      	ldr	r2, [pc, #524]	; (80076cc <config_motors+0x614>)
 80074be:	21a4      	movs	r1, #164	; 0xa4
 80074c0:	fb01 f303 	mul.w	r3, r1, r3
 80074c4:	4413      	add	r3, r2
 80074c6:	337c      	adds	r3, #124	; 0x7c
 80074c8:	f04f 0200 	mov.w	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 80074ce:	79bb      	ldrb	r3, [r7, #6]
 80074d0:	4a7e      	ldr	r2, [pc, #504]	; (80076cc <config_motors+0x614>)
 80074d2:	21a4      	movs	r1, #164	; 0xa4
 80074d4:	fb01 f303 	mul.w	r3, r1, r3
 80074d8:	4413      	add	r3, r2
 80074da:	3378      	adds	r3, #120	; 0x78
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 80074e2:	79bb      	ldrb	r3, [r7, #6]
 80074e4:	4a79      	ldr	r2, [pc, #484]	; (80076cc <config_motors+0x614>)
 80074e6:	21a4      	movs	r1, #164	; 0xa4
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	3384      	adds	r3, #132	; 0x84
 80074f0:	4a7c      	ldr	r2, [pc, #496]	; (80076e4 <config_motors+0x62c>)
 80074f2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 80074f4:	79bb      	ldrb	r3, [r7, #6]
 80074f6:	4a75      	ldr	r2, [pc, #468]	; (80076cc <config_motors+0x614>)
 80074f8:	21a4      	movs	r1, #164	; 0xa4
 80074fa:	fb01 f303 	mul.w	r3, r1, r3
 80074fe:	4413      	add	r3, r2
 8007500:	3380      	adds	r3, #128	; 0x80
 8007502:	4a79      	ldr	r2, [pc, #484]	; (80076e8 <config_motors+0x630>)
 8007504:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 8007506:	79bb      	ldrb	r3, [r7, #6]
 8007508:	4a70      	ldr	r2, [pc, #448]	; (80076cc <config_motors+0x614>)
 800750a:	21a4      	movs	r1, #164	; 0xa4
 800750c:	fb01 f303 	mul.w	r3, r1, r3
 8007510:	4413      	add	r3, r2
 8007512:	3394      	adds	r3, #148	; 0x94
 8007514:	4a75      	ldr	r2, [pc, #468]	; (80076ec <config_motors+0x634>)
 8007516:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 8007518:	79bb      	ldrb	r3, [r7, #6]
 800751a:	4a6c      	ldr	r2, [pc, #432]	; (80076cc <config_motors+0x614>)
 800751c:	21a4      	movs	r1, #164	; 0xa4
 800751e:	fb01 f303 	mul.w	r3, r1, r3
 8007522:	4413      	add	r3, r2
 8007524:	3340      	adds	r3, #64	; 0x40
 8007526:	f04f 0200 	mov.w	r2, #0
 800752a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 800752c:	79bb      	ldrb	r3, [r7, #6]
 800752e:	4a67      	ldr	r2, [pc, #412]	; (80076cc <config_motors+0x614>)
 8007530:	21a4      	movs	r1, #164	; 0xa4
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	4413      	add	r3, r2
 8007538:	3344      	adds	r3, #68	; 0x44
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 8007540:	79bb      	ldrb	r3, [r7, #6]
 8007542:	4a62      	ldr	r2, [pc, #392]	; (80076cc <config_motors+0x614>)
 8007544:	21a4      	movs	r1, #164	; 0xa4
 8007546:	fb01 f303 	mul.w	r3, r1, r3
 800754a:	4413      	add	r3, r2
 800754c:	3348      	adds	r3, #72	; 0x48
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 8007554:	79bb      	ldrb	r3, [r7, #6]
 8007556:	4a5d      	ldr	r2, [pc, #372]	; (80076cc <config_motors+0x614>)
 8007558:	21a4      	movs	r1, #164	; 0xa4
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	4413      	add	r3, r2
 8007560:	3358      	adds	r3, #88	; 0x58
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 8007568:	79bb      	ldrb	r3, [r7, #6]
 800756a:	4a58      	ldr	r2, [pc, #352]	; (80076cc <config_motors+0x614>)
 800756c:	21a4      	movs	r1, #164	; 0xa4
 800756e:	fb01 f303 	mul.w	r3, r1, r3
 8007572:	4413      	add	r3, r2
 8007574:	335c      	adds	r3, #92	; 0x5c
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800757c:	79bb      	ldrb	r3, [r7, #6]
 800757e:	4a53      	ldr	r2, [pc, #332]	; (80076cc <config_motors+0x614>)
 8007580:	21a4      	movs	r1, #164	; 0xa4
 8007582:	fb01 f303 	mul.w	r3, r1, r3
 8007586:	4413      	add	r3, r2
 8007588:	3310      	adds	r3, #16
 800758a:	4a51      	ldr	r2, [pc, #324]	; (80076d0 <config_motors+0x618>)
 800758c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800758e:	79bb      	ldrb	r3, [r7, #6]
 8007590:	4a4e      	ldr	r2, [pc, #312]	; (80076cc <config_motors+0x614>)
 8007592:	21a4      	movs	r1, #164	; 0xa4
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	4413      	add	r3, r2
 800759a:	3314      	adds	r3, #20
 800759c:	4a4d      	ldr	r2, [pc, #308]	; (80076d4 <config_motors+0x61c>)
 800759e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 80075a0:	79bb      	ldrb	r3, [r7, #6]
 80075a2:	4a4a      	ldr	r2, [pc, #296]	; (80076cc <config_motors+0x614>)
 80075a4:	21a4      	movs	r1, #164	; 0xa4
 80075a6:	fb01 f303 	mul.w	r3, r1, r3
 80075aa:	4413      	add	r3, r2
 80075ac:	3318      	adds	r3, #24
 80075ae:	4a4a      	ldr	r2, [pc, #296]	; (80076d8 <config_motors+0x620>)
 80075b0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 80075b2:	79bb      	ldrb	r3, [r7, #6]
 80075b4:	4a45      	ldr	r2, [pc, #276]	; (80076cc <config_motors+0x614>)
 80075b6:	21a4      	movs	r1, #164	; 0xa4
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	4413      	add	r3, r2
 80075be:	3328      	adds	r3, #40	; 0x28
 80075c0:	4a46      	ldr	r2, [pc, #280]	; (80076dc <config_motors+0x624>)
 80075c2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 80075c4:	79bb      	ldrb	r3, [r7, #6]
 80075c6:	4a41      	ldr	r2, [pc, #260]	; (80076cc <config_motors+0x614>)
 80075c8:	21a4      	movs	r1, #164	; 0xa4
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	4413      	add	r3, r2
 80075d0:	332c      	adds	r3, #44	; 0x2c
 80075d2:	4a43      	ldr	r2, [pc, #268]	; (80076e0 <config_motors+0x628>)
 80075d4:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID - 1;
 80075d6:	2301      	movs	r3, #1
 80075d8:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 80075da:	79bb      	ldrb	r3, [r7, #6]
 80075dc:	4a3b      	ldr	r2, [pc, #236]	; (80076cc <config_motors+0x614>)
 80075de:	21a4      	movs	r1, #164	; 0xa4
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	3302      	adds	r3, #2
 80075e8:	2204      	movs	r2, #4
 80075ea:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80075ec:	79bb      	ldrb	r3, [r7, #6]
 80075ee:	22a4      	movs	r2, #164	; 0xa4
 80075f0:	fb02 f303 	mul.w	r3, r2, r3
 80075f4:	4a35      	ldr	r2, [pc, #212]	; (80076cc <config_motors+0x614>)
 80075f6:	4413      	add	r3, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fcfb 	bl	8006ff4 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 80075fe:	79bb      	ldrb	r3, [r7, #6]
 8007600:	4a32      	ldr	r2, [pc, #200]	; (80076cc <config_motors+0x614>)
 8007602:	21a4      	movs	r1, #164	; 0xa4
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	4413      	add	r3, r2
 800760a:	3388      	adds	r3, #136	; 0x88
 800760c:	4a38      	ldr	r2, [pc, #224]	; (80076f0 <config_motors+0x638>)
 800760e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 8007610:	79bb      	ldrb	r3, [r7, #6]
 8007612:	4a2e      	ldr	r2, [pc, #184]	; (80076cc <config_motors+0x614>)
 8007614:	21a4      	movs	r1, #164	; 0xa4
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	4413      	add	r3, r2
 800761c:	3364      	adds	r3, #100	; 0x64
 800761e:	4a35      	ldr	r2, [pc, #212]	; (80076f4 <config_motors+0x63c>)
 8007620:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 8007622:	79bb      	ldrb	r3, [r7, #6]
 8007624:	4a29      	ldr	r2, [pc, #164]	; (80076cc <config_motors+0x614>)
 8007626:	21a4      	movs	r1, #164	; 0xa4
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	4413      	add	r3, r2
 800762e:	3310      	adds	r3, #16
 8007630:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8007634:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 8007636:	79bb      	ldrb	r3, [r7, #6]
 8007638:	4a24      	ldr	r2, [pc, #144]	; (80076cc <config_motors+0x614>)
 800763a:	21a4      	movs	r1, #164	; 0xa4
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	3314      	adds	r3, #20
 8007644:	4a2c      	ldr	r2, [pc, #176]	; (80076f8 <config_motors+0x640>)
 8007646:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 8007648:	79bb      	ldrb	r3, [r7, #6]
 800764a:	4a20      	ldr	r2, [pc, #128]	; (80076cc <config_motors+0x614>)
 800764c:	21a4      	movs	r1, #164	; 0xa4
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	4413      	add	r3, r2
 8007654:	3318      	adds	r3, #24
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 800765c:	79bb      	ldrb	r3, [r7, #6]
 800765e:	4a1b      	ldr	r2, [pc, #108]	; (80076cc <config_motors+0x614>)
 8007660:	21a4      	movs	r1, #164	; 0xa4
 8007662:	fb01 f303 	mul.w	r3, r1, r3
 8007666:	4413      	add	r3, r2
 8007668:	3328      	adds	r3, #40	; 0x28
 800766a:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <config_motors+0x624>)
 800766c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 800766e:	79bb      	ldrb	r3, [r7, #6]
 8007670:	4a16      	ldr	r2, [pc, #88]	; (80076cc <config_motors+0x614>)
 8007672:	21a4      	movs	r1, #164	; 0xa4
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	4413      	add	r3, r2
 800767a:	332c      	adds	r3, #44	; 0x2c
 800767c:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8007680:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID - 1;
 8007682:	2300      	movs	r3, #0
 8007684:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 8007686:	79bb      	ldrb	r3, [r7, #6]
 8007688:	4a10      	ldr	r2, [pc, #64]	; (80076cc <config_motors+0x614>)
 800768a:	21a4      	movs	r1, #164	; 0xa4
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	4413      	add	r3, r2
 8007692:	3302      	adds	r3, #2
 8007694:	2204      	movs	r2, #4
 8007696:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 8007698:	79bb      	ldrb	r3, [r7, #6]
 800769a:	4a0c      	ldr	r2, [pc, #48]	; (80076cc <config_motors+0x614>)
 800769c:	21a4      	movs	r1, #164	; 0xa4
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	3364      	adds	r3, #100	; 0x64
 80076a6:	4a13      	ldr	r2, [pc, #76]	; (80076f4 <config_motors+0x63c>)
 80076a8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 80076aa:	79bb      	ldrb	r3, [r7, #6]
 80076ac:	4a07      	ldr	r2, [pc, #28]	; (80076cc <config_motors+0x614>)
 80076ae:	21a4      	movs	r1, #164	; 0xa4
 80076b0:	fb01 f303 	mul.w	r3, r1, r3
 80076b4:	4413      	add	r3, r2
 80076b6:	3310      	adds	r3, #16
 80076b8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80076bc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 80076be:	79bb      	ldrb	r3, [r7, #6]
 80076c0:	4a02      	ldr	r2, [pc, #8]	; (80076cc <config_motors+0x614>)
 80076c2:	21a4      	movs	r1, #164	; 0xa4
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	4413      	add	r3, r2
 80076ca:	e017      	b.n	80076fc <config_motors+0x644>
 80076cc:	2000183c 	.word	0x2000183c
 80076d0:	41200000 	.word	0x41200000
 80076d4:	3dcccccd 	.word	0x3dcccccd
 80076d8:	40a00000 	.word	0x40a00000
 80076dc:	461c4000 	.word	0x461c4000
 80076e0:	457a0000 	.word	0x457a0000
 80076e4:	40c90fdb 	.word	0x40c90fdb
 80076e8:	c0c90fdb 	.word	0xc0c90fdb
 80076ec:	40f40000 	.word	0x40f40000
 80076f0:	4199999a 	.word	0x4199999a
 80076f4:	460ca000 	.word	0x460ca000
 80076f8:	3b03126f 	.word	0x3b03126f
 80076fc:	3314      	adds	r3, #20
 80076fe:	4aba      	ldr	r2, [pc, #744]	; (80079e8 <config_motors+0x930>)
 8007700:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 8007702:	79bb      	ldrb	r3, [r7, #6]
 8007704:	4ab9      	ldr	r2, [pc, #740]	; (80079ec <config_motors+0x934>)
 8007706:	21a4      	movs	r1, #164	; 0xa4
 8007708:	fb01 f303 	mul.w	r3, r1, r3
 800770c:	4413      	add	r3, r2
 800770e:	3318      	adds	r3, #24
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 8007716:	79bb      	ldrb	r3, [r7, #6]
 8007718:	4ab4      	ldr	r2, [pc, #720]	; (80079ec <config_motors+0x934>)
 800771a:	21a4      	movs	r1, #164	; 0xa4
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	4413      	add	r3, r2
 8007722:	3328      	adds	r3, #40	; 0x28
 8007724:	4ab2      	ldr	r2, [pc, #712]	; (80079f0 <config_motors+0x938>)
 8007726:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 8007728:	79bb      	ldrb	r3, [r7, #6]
 800772a:	4ab0      	ldr	r2, [pc, #704]	; (80079ec <config_motors+0x934>)
 800772c:	21a4      	movs	r1, #164	; 0xa4
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	4413      	add	r3, r2
 8007734:	332c      	adds	r3, #44	; 0x2c
 8007736:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800773a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800773c:	79bb      	ldrb	r3, [r7, #6]
 800773e:	4aab      	ldr	r2, [pc, #684]	; (80079ec <config_motors+0x934>)
 8007740:	21a4      	movs	r1, #164	; 0xa4
 8007742:	fb01 f303 	mul.w	r3, r1, r3
 8007746:	4413      	add	r3, r2
 8007748:	3334      	adds	r3, #52	; 0x34
 800774a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800774e:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID - 1;
 8007750:	2302      	movs	r3, #2
 8007752:	71bb      	strb	r3, [r7, #6]
#ifdef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M3508_ANGLE;
#endif
#ifndef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M2006;
 8007754:	79bb      	ldrb	r3, [r7, #6]
 8007756:	4aa5      	ldr	r2, [pc, #660]	; (80079ec <config_motors+0x934>)
 8007758:	21a4      	movs	r1, #164	; 0xa4
 800775a:	fb01 f303 	mul.w	r3, r1, r3
 800775e:	4413      	add	r3, r2
 8007760:	3302      	adds	r3, #2
 8007762:	2202      	movs	r2, #2
 8007764:	701a      	strb	r2, [r3, #0]
#endif
	set_motor_config(&can_motors[motor_id]);
 8007766:	79bb      	ldrb	r3, [r7, #6]
 8007768:	22a4      	movs	r2, #164	; 0xa4
 800776a:	fb02 f303 	mul.w	r3, r2, r3
 800776e:	4a9f      	ldr	r2, [pc, #636]	; (80079ec <config_motors+0x934>)
 8007770:	4413      	add	r3, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff fc3e 	bl	8006ff4 <set_motor_config>
	can_motors[motor_id].angle_data.max_ang = PI * 5000; //so it can rotate 5000 times oops
 8007778:	79bb      	ldrb	r3, [r7, #6]
 800777a:	4a9c      	ldr	r2, [pc, #624]	; (80079ec <config_motors+0x934>)
 800777c:	21a4      	movs	r1, #164	; 0xa4
 800777e:	fb01 f303 	mul.w	r3, r1, r3
 8007782:	4413      	add	r3, r2
 8007784:	337c      	adds	r3, #124	; 0x7c
 8007786:	4a9b      	ldr	r2, [pc, #620]	; (80079f4 <config_motors+0x93c>)
 8007788:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = -PI * 5000;
 800778a:	79bb      	ldrb	r3, [r7, #6]
 800778c:	4a97      	ldr	r2, [pc, #604]	; (80079ec <config_motors+0x934>)
 800778e:	21a4      	movs	r1, #164	; 0xa4
 8007790:	fb01 f303 	mul.w	r3, r1, r3
 8007794:	4413      	add	r3, r2
 8007796:	3378      	adds	r3, #120	; 0x78
 8007798:	4a97      	ldr	r2, [pc, #604]	; (80079f8 <config_motors+0x940>)
 800779a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800779c:	79bb      	ldrb	r3, [r7, #6]
 800779e:	4a93      	ldr	r2, [pc, #588]	; (80079ec <config_motors+0x934>)
 80077a0:	21a4      	movs	r1, #164	; 0xa4
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	3384      	adds	r3, #132	; 0x84
 80077aa:	4a94      	ldr	r2, [pc, #592]	; (80079fc <config_motors+0x944>)
 80077ac:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 80077ae:	79bb      	ldrb	r3, [r7, #6]
 80077b0:	4a8e      	ldr	r2, [pc, #568]	; (80079ec <config_motors+0x934>)
 80077b2:	21a4      	movs	r1, #164	; 0xa4
 80077b4:	fb01 f303 	mul.w	r3, r1, r3
 80077b8:	4413      	add	r3, r2
 80077ba:	3380      	adds	r3, #128	; 0x80
 80077bc:	4a90      	ldr	r2, [pc, #576]	; (8007a00 <config_motors+0x948>)
 80077be:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 80077c0:	79bb      	ldrb	r3, [r7, #6]
 80077c2:	4a8a      	ldr	r2, [pc, #552]	; (80079ec <config_motors+0x934>)
 80077c4:	21a4      	movs	r1, #164	; 0xa4
 80077c6:	fb01 f303 	mul.w	r3, r1, r3
 80077ca:	4413      	add	r3, r2
 80077cc:	3394      	adds	r3, #148	; 0x94
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = FEEDER_ANGLE_KP;
 80077d4:	79bb      	ldrb	r3, [r7, #6]
 80077d6:	4a85      	ldr	r2, [pc, #532]	; (80079ec <config_motors+0x934>)
 80077d8:	21a4      	movs	r1, #164	; 0xa4
 80077da:	fb01 f303 	mul.w	r3, r1, r3
 80077de:	4413      	add	r3, r2
 80077e0:	3340      	adds	r3, #64	; 0x40
 80077e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80077e6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = FEEDER_ANGLE_KI;
 80077e8:	79bb      	ldrb	r3, [r7, #6]
 80077ea:	4a80      	ldr	r2, [pc, #512]	; (80079ec <config_motors+0x934>)
 80077ec:	21a4      	movs	r1, #164	; 0xa4
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	4413      	add	r3, r2
 80077f4:	3344      	adds	r3, #68	; 0x44
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = FEEDER_ANGLE_KD;
 80077fc:	79bb      	ldrb	r3, [r7, #6]
 80077fe:	4a7b      	ldr	r2, [pc, #492]	; (80079ec <config_motors+0x934>)
 8007800:	21a4      	movs	r1, #164	; 0xa4
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	4413      	add	r3, r2
 8007808:	3348      	adds	r3, #72	; 0x48
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = FEEDER_ANGLE_INT_MAX;
 8007810:	79bb      	ldrb	r3, [r7, #6]
 8007812:	4a76      	ldr	r2, [pc, #472]	; (80079ec <config_motors+0x934>)
 8007814:	21a4      	movs	r1, #164	; 0xa4
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	4413      	add	r3, r2
 800781c:	3358      	adds	r3, #88	; 0x58
 800781e:	f04f 0200 	mov.w	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = FEEDER_MAX_RPM;
 8007824:	79bb      	ldrb	r3, [r7, #6]
 8007826:	4a71      	ldr	r2, [pc, #452]	; (80079ec <config_motors+0x934>)
 8007828:	21a4      	movs	r1, #164	; 0xa4
 800782a:	fb01 f303 	mul.w	r3, r1, r3
 800782e:	4413      	add	r3, r2
 8007830:	335c      	adds	r3, #92	; 0x5c
 8007832:	4a74      	ldr	r2, [pc, #464]	; (8007a04 <config_motors+0x94c>)
 8007834:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FEEDER_KP;
 8007836:	79bb      	ldrb	r3, [r7, #6]
 8007838:	4a6c      	ldr	r2, [pc, #432]	; (80079ec <config_motors+0x934>)
 800783a:	21a4      	movs	r1, #164	; 0xa4
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	4413      	add	r3, r2
 8007842:	3310      	adds	r3, #16
 8007844:	4a70      	ldr	r2, [pc, #448]	; (8007a08 <config_motors+0x950>)
 8007846:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FEEDER_KI;
 8007848:	79bb      	ldrb	r3, [r7, #6]
 800784a:	4a68      	ldr	r2, [pc, #416]	; (80079ec <config_motors+0x934>)
 800784c:	21a4      	movs	r1, #164	; 0xa4
 800784e:	fb01 f303 	mul.w	r3, r1, r3
 8007852:	4413      	add	r3, r2
 8007854:	3314      	adds	r3, #20
 8007856:	4a6d      	ldr	r2, [pc, #436]	; (8007a0c <config_motors+0x954>)
 8007858:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FEEDER_KD;
 800785a:	79bb      	ldrb	r3, [r7, #6]
 800785c:	4a63      	ldr	r2, [pc, #396]	; (80079ec <config_motors+0x934>)
 800785e:	21a4      	movs	r1, #164	; 0xa4
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	4413      	add	r3, r2
 8007866:	3318      	adds	r3, #24
 8007868:	4a69      	ldr	r2, [pc, #420]	; (8007a10 <config_motors+0x958>)
 800786a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FEEDER_MAX_INT;
 800786c:	79bb      	ldrb	r3, [r7, #6]
 800786e:	4a5f      	ldr	r2, [pc, #380]	; (80079ec <config_motors+0x934>)
 8007870:	21a4      	movs	r1, #164	; 0xa4
 8007872:	fb01 f303 	mul.w	r3, r1, r3
 8007876:	4413      	add	r3, r2
 8007878:	3328      	adds	r3, #40	; 0x28
 800787a:	4a5d      	ldr	r2, [pc, #372]	; (80079f0 <config_motors+0x938>)
 800787c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FEEDER_MAX_CURRENT;
 800787e:	79bb      	ldrb	r3, [r7, #6]
 8007880:	4a5a      	ldr	r2, [pc, #360]	; (80079ec <config_motors+0x934>)
 8007882:	21a4      	movs	r1, #164	; 0xa4
 8007884:	fb01 f303 	mul.w	r3, r1, r3
 8007888:	4413      	add	r3, r2
 800788a:	332c      	adds	r3, #44	; 0x2c
 800788c:	4a58      	ldr	r2, [pc, #352]	; (80079f0 <config_motors+0x938>)
 800788e:	601a      	str	r2, [r3, #0]
#endif

#ifdef PITCH_MOTOR_ID
	motor_id = PITCH_MOTOR_ID - 1;
 8007890:	2310      	movs	r3, #16
 8007892:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8007894:	79bb      	ldrb	r3, [r7, #6]
 8007896:	4a55      	ldr	r2, [pc, #340]	; (80079ec <config_motors+0x934>)
 8007898:	21a4      	movs	r1, #164	; 0xa4
 800789a:	fb01 f303 	mul.w	r3, r1, r3
 800789e:	4413      	add	r3, r2
 80078a0:	3302      	adds	r3, #2
 80078a2:	2201      	movs	r2, #1
 80078a4:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80078a6:	79bb      	ldrb	r3, [r7, #6]
 80078a8:	22a4      	movs	r2, #164	; 0xa4
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
 80078ae:	4a4f      	ldr	r2, [pc, #316]	; (80079ec <config_motors+0x934>)
 80078b0:	4413      	add	r3, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff fb9e 	bl	8006ff4 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 80078b8:	79bb      	ldrb	r3, [r7, #6]
 80078ba:	4a4c      	ldr	r2, [pc, #304]	; (80079ec <config_motors+0x934>)
 80078bc:	21a4      	movs	r1, #164	; 0xa4
 80078be:	fb01 f303 	mul.w	r3, r1, r3
 80078c2:	4413      	add	r3, r2
 80078c4:	3388      	adds	r3, #136	; 0x88
 80078c6:	f04f 0200 	mov.w	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = PITCH_CENTER;
 80078cc:	79bb      	ldrb	r3, [r7, #6]
 80078ce:	4a47      	ldr	r2, [pc, #284]	; (80079ec <config_motors+0x934>)
 80078d0:	21a4      	movs	r1, #164	; 0xa4
 80078d2:	fb01 f303 	mul.w	r3, r1, r3
 80078d6:	4413      	add	r3, r2
 80078d8:	3374      	adds	r3, #116	; 0x74
 80078da:	f641 62dc 	movw	r2, #7900	; 0x1edc
 80078de:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = PITCH_MAX_ANG;
 80078e0:	79bb      	ldrb	r3, [r7, #6]
 80078e2:	4a42      	ldr	r2, [pc, #264]	; (80079ec <config_motors+0x934>)
 80078e4:	21a4      	movs	r1, #164	; 0xa4
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	337c      	adds	r3, #124	; 0x7c
 80078ee:	4a49      	ldr	r2, [pc, #292]	; (8007a14 <config_motors+0x95c>)
 80078f0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = PITCH_MIN_ANG;
 80078f2:	79bb      	ldrb	r3, [r7, #6]
 80078f4:	4a3d      	ldr	r2, [pc, #244]	; (80079ec <config_motors+0x934>)
 80078f6:	21a4      	movs	r1, #164	; 0xa4
 80078f8:	fb01 f303 	mul.w	r3, r1, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	3378      	adds	r3, #120	; 0x78
 8007900:	4a45      	ldr	r2, [pc, #276]	; (8007a18 <config_motors+0x960>)
 8007902:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8007904:	79bb      	ldrb	r3, [r7, #6]
 8007906:	4a39      	ldr	r2, [pc, #228]	; (80079ec <config_motors+0x934>)
 8007908:	21a4      	movs	r1, #164	; 0xa4
 800790a:	fb01 f303 	mul.w	r3, r1, r3
 800790e:	4413      	add	r3, r2
 8007910:	3384      	adds	r3, #132	; 0x84
 8007912:	4a3a      	ldr	r2, [pc, #232]	; (80079fc <config_motors+0x944>)
 8007914:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8007916:	79bb      	ldrb	r3, [r7, #6]
 8007918:	4a34      	ldr	r2, [pc, #208]	; (80079ec <config_motors+0x934>)
 800791a:	21a4      	movs	r1, #164	; 0xa4
 800791c:	fb01 f303 	mul.w	r3, r1, r3
 8007920:	4413      	add	r3, r2
 8007922:	3380      	adds	r3, #128	; 0x80
 8007924:	4a36      	ldr	r2, [pc, #216]	; (8007a00 <config_motors+0x948>)
 8007926:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8007928:	79bb      	ldrb	r3, [r7, #6]
 800792a:	4a30      	ldr	r2, [pc, #192]	; (80079ec <config_motors+0x934>)
 800792c:	21a4      	movs	r1, #164	; 0xa4
 800792e:	fb01 f303 	mul.w	r3, r1, r3
 8007932:	4413      	add	r3, r2
 8007934:	3394      	adds	r3, #148	; 0x94
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 800793c:	79bb      	ldrb	r3, [r7, #6]
 800793e:	4a2b      	ldr	r2, [pc, #172]	; (80079ec <config_motors+0x934>)
 8007940:	21a4      	movs	r1, #164	; 0xa4
 8007942:	fb01 f303 	mul.w	r3, r1, r3
 8007946:	4413      	add	r3, r2
 8007948:	3340      	adds	r3, #64	; 0x40
 800794a:	4a34      	ldr	r2, [pc, #208]	; (8007a1c <config_motors+0x964>)
 800794c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 800794e:	79bb      	ldrb	r3, [r7, #6]
 8007950:	4a26      	ldr	r2, [pc, #152]	; (80079ec <config_motors+0x934>)
 8007952:	21a4      	movs	r1, #164	; 0xa4
 8007954:	fb01 f303 	mul.w	r3, r1, r3
 8007958:	4413      	add	r3, r2
 800795a:	3344      	adds	r3, #68	; 0x44
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 8007962:	79bb      	ldrb	r3, [r7, #6]
 8007964:	4a21      	ldr	r2, [pc, #132]	; (80079ec <config_motors+0x934>)
 8007966:	21a4      	movs	r1, #164	; 0xa4
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	4413      	add	r3, r2
 800796e:	3348      	adds	r3, #72	; 0x48
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 8007976:	79bb      	ldrb	r3, [r7, #6]
 8007978:	4a1c      	ldr	r2, [pc, #112]	; (80079ec <config_motors+0x934>)
 800797a:	21a4      	movs	r1, #164	; 0xa4
 800797c:	fb01 f303 	mul.w	r3, r1, r3
 8007980:	4413      	add	r3, r2
 8007982:	3358      	adds	r3, #88	; 0x58
 8007984:	4a26      	ldr	r2, [pc, #152]	; (8007a20 <config_motors+0x968>)
 8007986:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 8007988:	79bb      	ldrb	r3, [r7, #6]
 800798a:	4a18      	ldr	r2, [pc, #96]	; (80079ec <config_motors+0x934>)
 800798c:	21a4      	movs	r1, #164	; 0xa4
 800798e:	fb01 f303 	mul.w	r3, r1, r3
 8007992:	4413      	add	r3, r2
 8007994:	335c      	adds	r3, #92	; 0x5c
 8007996:	4a21      	ldr	r2, [pc, #132]	; (8007a1c <config_motors+0x964>)
 8007998:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 800799a:	79bb      	ldrb	r3, [r7, #6]
 800799c:	4a13      	ldr	r2, [pc, #76]	; (80079ec <config_motors+0x934>)
 800799e:	21a4      	movs	r1, #164	; 0xa4
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	4413      	add	r3, r2
 80079a6:	3310      	adds	r3, #16
 80079a8:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <config_motors+0x964>)
 80079aa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 80079ac:	79bb      	ldrb	r3, [r7, #6]
 80079ae:	4a0f      	ldr	r2, [pc, #60]	; (80079ec <config_motors+0x934>)
 80079b0:	21a4      	movs	r1, #164	; 0xa4
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	4413      	add	r3, r2
 80079b8:	3314      	adds	r3, #20
 80079ba:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <config_motors+0x96c>)
 80079bc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 80079be:	79bb      	ldrb	r3, [r7, #6]
 80079c0:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <config_motors+0x934>)
 80079c2:	21a4      	movs	r1, #164	; 0xa4
 80079c4:	fb01 f303 	mul.w	r3, r1, r3
 80079c8:	4413      	add	r3, r2
 80079ca:	3318      	adds	r3, #24
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 80079d2:	79bb      	ldrb	r3, [r7, #6]
 80079d4:	4a05      	ldr	r2, [pc, #20]	; (80079ec <config_motors+0x934>)
 80079d6:	21a4      	movs	r1, #164	; 0xa4
 80079d8:	fb01 f303 	mul.w	r3, r1, r3
 80079dc:	4413      	add	r3, r2
 80079de:	3328      	adds	r3, #40	; 0x28
 80079e0:	4a03      	ldr	r2, [pc, #12]	; (80079f0 <config_motors+0x938>)
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	e020      	b.n	8007a28 <config_motors+0x970>
 80079e6:	bf00      	nop
 80079e8:	3b03126f 	.word	0x3b03126f
 80079ec:	2000183c 	.word	0x2000183c
 80079f0:	461c4000 	.word	0x461c4000
 80079f4:	46756fdb 	.word	0x46756fdb
 80079f8:	c6756fdb 	.word	0xc6756fdb
 80079fc:	40c90fdb 	.word	0x40c90fdb
 8007a00:	c0c90fdb 	.word	0xc0c90fdb
 8007a04:	42c80000 	.word	0x42c80000
 8007a08:	40e00000 	.word	0x40e00000
 8007a0c:	3ca3d70a 	.word	0x3ca3d70a
 8007a10:	40400000 	.word	0x40400000
 8007a14:	3f19999a 	.word	0x3f19999a
 8007a18:	becccccd 	.word	0xbecccccd
 8007a1c:	43480000 	.word	0x43480000
 8007a20:	447a0000 	.word	0x447a0000
 8007a24:	3dcccccd 	.word	0x3dcccccd
	can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 8007a28:	79bb      	ldrb	r3, [r7, #6]
 8007a2a:	4a5f      	ldr	r2, [pc, #380]	; (8007ba8 <config_motors+0xaf0>)
 8007a2c:	21a4      	movs	r1, #164	; 0xa4
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	332c      	adds	r3, #44	; 0x2c
 8007a36:	4a5d      	ldr	r2, [pc, #372]	; (8007bac <config_motors+0xaf4>)
 8007a38:	601a      	str	r2, [r3, #0]
#endif

#ifdef YAW_MOTOR_ID
	motor_id = YAW_MOTOR_ID - 1;
 8007a3a:	2311      	movs	r3, #17
 8007a3c:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8007a3e:	79bb      	ldrb	r3, [r7, #6]
 8007a40:	4a59      	ldr	r2, [pc, #356]	; (8007ba8 <config_motors+0xaf0>)
 8007a42:	21a4      	movs	r1, #164	; 0xa4
 8007a44:	fb01 f303 	mul.w	r3, r1, r3
 8007a48:	4413      	add	r3, r2
 8007a4a:	3302      	adds	r3, #2
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8007a50:	79bb      	ldrb	r3, [r7, #6]
 8007a52:	22a4      	movs	r2, #164	; 0xa4
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	4a53      	ldr	r2, [pc, #332]	; (8007ba8 <config_motors+0xaf0>)
 8007a5a:	4413      	add	r3, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff fac9 	bl	8006ff4 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;	//1;
 8007a62:	79bb      	ldrb	r3, [r7, #6]
 8007a64:	4a50      	ldr	r2, [pc, #320]	; (8007ba8 <config_motors+0xaf0>)
 8007a66:	21a4      	movs	r1, #164	; 0xa4
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3388      	adds	r3, #136	; 0x88
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = YAW_CENTER;
 8007a76:	79bb      	ldrb	r3, [r7, #6]
 8007a78:	4a4b      	ldr	r2, [pc, #300]	; (8007ba8 <config_motors+0xaf0>)
 8007a7a:	21a4      	movs	r1, #164	; 0xa4
 8007a7c:	fb01 f303 	mul.w	r3, r1, r3
 8007a80:	4413      	add	r3, r2
 8007a82:	3374      	adds	r3, #116	; 0x74
 8007a84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a88:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = YAW_MAX_ANG;
 8007a8a:	79bb      	ldrb	r3, [r7, #6]
 8007a8c:	4a46      	ldr	r2, [pc, #280]	; (8007ba8 <config_motors+0xaf0>)
 8007a8e:	21a4      	movs	r1, #164	; 0xa4
 8007a90:	fb01 f303 	mul.w	r3, r1, r3
 8007a94:	4413      	add	r3, r2
 8007a96:	337c      	adds	r3, #124	; 0x7c
 8007a98:	4a45      	ldr	r2, [pc, #276]	; (8007bb0 <config_motors+0xaf8>)
 8007a9a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = YAW_MIN_ANG;
 8007a9c:	79bb      	ldrb	r3, [r7, #6]
 8007a9e:	4a42      	ldr	r2, [pc, #264]	; (8007ba8 <config_motors+0xaf0>)
 8007aa0:	21a4      	movs	r1, #164	; 0xa4
 8007aa2:	fb01 f303 	mul.w	r3, r1, r3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	3378      	adds	r3, #120	; 0x78
 8007aaa:	4a42      	ldr	r2, [pc, #264]	; (8007bb4 <config_motors+0xafc>)
 8007aac:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8007aae:	79bb      	ldrb	r3, [r7, #6]
 8007ab0:	4a3d      	ldr	r2, [pc, #244]	; (8007ba8 <config_motors+0xaf0>)
 8007ab2:	21a4      	movs	r1, #164	; 0xa4
 8007ab4:	fb01 f303 	mul.w	r3, r1, r3
 8007ab8:	4413      	add	r3, r2
 8007aba:	3384      	adds	r3, #132	; 0x84
 8007abc:	4a3e      	ldr	r2, [pc, #248]	; (8007bb8 <config_motors+0xb00>)
 8007abe:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI; //angle before it overflows
 8007ac0:	79bb      	ldrb	r3, [r7, #6]
 8007ac2:	4a39      	ldr	r2, [pc, #228]	; (8007ba8 <config_motors+0xaf0>)
 8007ac4:	21a4      	movs	r1, #164	; 0xa4
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	4413      	add	r3, r2
 8007acc:	3380      	adds	r3, #128	; 0x80
 8007ace:	4a3b      	ldr	r2, [pc, #236]	; (8007bbc <config_motors+0xb04>)
 8007ad0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8007ad2:	79bb      	ldrb	r3, [r7, #6]
 8007ad4:	4a34      	ldr	r2, [pc, #208]	; (8007ba8 <config_motors+0xaf0>)
 8007ad6:	21a4      	movs	r1, #164	; 0xa4
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	4413      	add	r3, r2
 8007ade:	3394      	adds	r3, #148	; 0x94
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = YAW_ANGLE_KP;
 8007ae6:	79bb      	ldrb	r3, [r7, #6]
 8007ae8:	4a2f      	ldr	r2, [pc, #188]	; (8007ba8 <config_motors+0xaf0>)
 8007aea:	21a4      	movs	r1, #164	; 0xa4
 8007aec:	fb01 f303 	mul.w	r3, r1, r3
 8007af0:	4413      	add	r3, r2
 8007af2:	3340      	adds	r3, #64	; 0x40
 8007af4:	4a32      	ldr	r2, [pc, #200]	; (8007bc0 <config_motors+0xb08>)
 8007af6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = YAW_ANGLE_KI;
 8007af8:	79bb      	ldrb	r3, [r7, #6]
 8007afa:	4a2b      	ldr	r2, [pc, #172]	; (8007ba8 <config_motors+0xaf0>)
 8007afc:	21a4      	movs	r1, #164	; 0xa4
 8007afe:	fb01 f303 	mul.w	r3, r1, r3
 8007b02:	4413      	add	r3, r2
 8007b04:	3344      	adds	r3, #68	; 0x44
 8007b06:	f04f 0200 	mov.w	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = YAW_ANGLE_KD;
 8007b0c:	79bb      	ldrb	r3, [r7, #6]
 8007b0e:	4a26      	ldr	r2, [pc, #152]	; (8007ba8 <config_motors+0xaf0>)
 8007b10:	21a4      	movs	r1, #164	; 0xa4
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	4413      	add	r3, r2
 8007b18:	3348      	adds	r3, #72	; 0x48
 8007b1a:	f04f 0200 	mov.w	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = YAW_ANGLE_INT_MAX;
 8007b20:	79bb      	ldrb	r3, [r7, #6]
 8007b22:	4a21      	ldr	r2, [pc, #132]	; (8007ba8 <config_motors+0xaf0>)
 8007b24:	21a4      	movs	r1, #164	; 0xa4
 8007b26:	fb01 f303 	mul.w	r3, r1, r3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	3358      	adds	r3, #88	; 0x58
 8007b2e:	4a25      	ldr	r2, [pc, #148]	; (8007bc4 <config_motors+0xb0c>)
 8007b30:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = YAW_MAX_RPM;
 8007b32:	79bb      	ldrb	r3, [r7, #6]
 8007b34:	4a1c      	ldr	r2, [pc, #112]	; (8007ba8 <config_motors+0xaf0>)
 8007b36:	21a4      	movs	r1, #164	; 0xa4
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	335c      	adds	r3, #92	; 0x5c
 8007b40:	4a21      	ldr	r2, [pc, #132]	; (8007bc8 <config_motors+0xb10>)
 8007b42:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = YAWRPM_KP;
 8007b44:	79bb      	ldrb	r3, [r7, #6]
 8007b46:	4a18      	ldr	r2, [pc, #96]	; (8007ba8 <config_motors+0xaf0>)
 8007b48:	21a4      	movs	r1, #164	; 0xa4
 8007b4a:	fb01 f303 	mul.w	r3, r1, r3
 8007b4e:	4413      	add	r3, r2
 8007b50:	3310      	adds	r3, #16
 8007b52:	4a1c      	ldr	r2, [pc, #112]	; (8007bc4 <config_motors+0xb0c>)
 8007b54:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = YAWRPM_KI;
 8007b56:	79bb      	ldrb	r3, [r7, #6]
 8007b58:	4a13      	ldr	r2, [pc, #76]	; (8007ba8 <config_motors+0xaf0>)
 8007b5a:	21a4      	movs	r1, #164	; 0xa4
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	4413      	add	r3, r2
 8007b62:	3314      	adds	r3, #20
 8007b64:	4a19      	ldr	r2, [pc, #100]	; (8007bcc <config_motors+0xb14>)
 8007b66:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = YAWRPM_KD;
 8007b68:	79bb      	ldrb	r3, [r7, #6]
 8007b6a:	4a0f      	ldr	r2, [pc, #60]	; (8007ba8 <config_motors+0xaf0>)
 8007b6c:	21a4      	movs	r1, #164	; 0xa4
 8007b6e:	fb01 f303 	mul.w	r3, r1, r3
 8007b72:	4413      	add	r3, r2
 8007b74:	3318      	adds	r3, #24
 8007b76:	4a13      	ldr	r2, [pc, #76]	; (8007bc4 <config_motors+0xb0c>)
 8007b78:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = YAWRPM_INT_MAX;
 8007b7a:	79bb      	ldrb	r3, [r7, #6]
 8007b7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ba8 <config_motors+0xaf0>)
 8007b7e:	21a4      	movs	r1, #164	; 0xa4
 8007b80:	fb01 f303 	mul.w	r3, r1, r3
 8007b84:	4413      	add	r3, r2
 8007b86:	3328      	adds	r3, #40	; 0x28
 8007b88:	4a11      	ldr	r2, [pc, #68]	; (8007bd0 <config_motors+0xb18>)
 8007b8a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = YAW_MAX_CURRENT;
 8007b8c:	79bb      	ldrb	r3, [r7, #6]
 8007b8e:	4a06      	ldr	r2, [pc, #24]	; (8007ba8 <config_motors+0xaf0>)
 8007b90:	21a4      	movs	r1, #164	; 0xa4
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	4413      	add	r3, r2
 8007b98:	332c      	adds	r3, #44	; 0x2c
 8007b9a:	4a04      	ldr	r2, [pc, #16]	; (8007bac <config_motors+0xaf4>)
 8007b9c:	601a      	str	r2, [r3, #0]
#endif
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	2000183c 	.word	0x2000183c
 8007bac:	469c4000 	.word	0x469c4000
 8007bb0:	40190fdb 	.word	0x40190fdb
 8007bb4:	c0190fdb 	.word	0xc0190fdb
 8007bb8:	40c90fdb 	.word	0x40c90fdb
 8007bbc:	c0c90fdb 	.word	0xc0c90fdb
 8007bc0:	43480000 	.word	0x43480000
 8007bc4:	42c80000 	.word	0x42c80000
 8007bc8:	43c80000 	.word	0x43c80000
 8007bcc:	3ba3d70a 	.word	0x3ba3d70a
 8007bd0:	459c4000 	.word	0x459c4000

08007bd4 <check_motors>:
	}
	temp_msg = bz_debug_rest;
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
}

uint16_t check_motors() {
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
	uint16_t error = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	80fb      	strh	r3, [r7, #6]
	uint32_t curr_time = get_microseconds();
 8007bde:	f7fa fa85 	bl	80020ec <get_microseconds>
 8007be2:	6038      	str	r0, [r7, #0]
	if (curr_time - can_motors[FR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007be4:	4b38      	ldr	r3, [pc, #224]	; (8007cc8 <check_motors+0xf4>)
 8007be6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bf2:	d903      	bls.n	8007bfc <check_motors+0x28>
		error |= 1 << (0);
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[FL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007bfc:	4b32      	ldr	r3, [pc, #200]	; (8007cc8 <check_motors+0xf4>)
 8007bfe:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c0a:	d903      	bls.n	8007c14 <check_motors+0x40>
		error |= 1 << (1);
 8007c0c:	88fb      	ldrh	r3, [r7, #6]
 8007c0e:	f043 0302 	orr.w	r3, r3, #2
 8007c12:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007c14:	4b2c      	ldr	r3, [pc, #176]	; (8007cc8 <check_motors+0xf4>)
 8007c16:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c22:	d903      	bls.n	8007c2c <check_motors+0x58>
		error |= 1 << (2);
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	f043 0304 	orr.w	r3, r3, #4
 8007c2a:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007c2c:	4b26      	ldr	r3, [pc, #152]	; (8007cc8 <check_motors+0xf4>)
 8007c2e:	f8d3 3994 	ldr.w	r3, [r3, #2452]	; 0x994
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c3a:	d903      	bls.n	8007c44 <check_motors+0x70>
		error |= 1 << (3);
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	f043 0308 	orr.w	r3, r3, #8
 8007c42:	80fb      	strh	r3, [r7, #6]
	}

	if (curr_time - can_motors[LFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007c44:	4b20      	ldr	r3, [pc, #128]	; (8007cc8 <check_motors+0xf4>)
 8007c46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c52:	d903      	bls.n	8007c5c <check_motors+0x88>
		error |= 1 << (4);
 8007c54:	88fb      	ldrh	r3, [r7, #6]
 8007c56:	f043 0310 	orr.w	r3, r3, #16
 8007c5a:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[RFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007c5c:	4b1a      	ldr	r3, [pc, #104]	; (8007cc8 <check_motors+0xf4>)
 8007c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c6a:	d903      	bls.n	8007c74 <check_motors+0xa0>
		error |= 1 << (5);
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	f043 0320 	orr.w	r3, r3, #32
 8007c72:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[FEEDER_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007c74:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <check_motors+0xf4>)
 8007c76:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c82:	d903      	bls.n	8007c8c <check_motors+0xb8>
		error |= 1 << 6;
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8a:	80fb      	strh	r3, [r7, #6]

	}

	if (curr_time - can_motors[PITCH_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <check_motors+0xf4>)
 8007c8e:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	; 0xadc
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c9a:	d903      	bls.n	8007ca4 <check_motors+0xd0>
		error |= 1 << 7;
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca2:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[YAW_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 8007ca4:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <check_motors+0xf4>)
 8007ca6:	f8d3 3b80 	ldr.w	r3, [r3, #2944]	; 0xb80
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cb2:	d903      	bls.n	8007cbc <check_motors+0xe8>
		error |= 1 << 8;
 8007cb4:	88fb      	ldrh	r3, [r7, #6]
 8007cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cba:	80fb      	strh	r3, [r7, #6]

	}
	return error;
 8007cbc:	88fb      	ldrh	r3, [r7, #6]

}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	2000183c 	.word	0x2000183c

08007ccc <motor_calib_task>:

void motor_calib_task(void *argument) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4817      	ldr	r0, [pc, #92]	; (8007d38 <motor_calib_task+0x6c>)
 8007cda:	f7f9 faa1 	bl	8001220 <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4816      	ldr	r0, [pc, #88]	; (8007d3c <motor_calib_task+0x70>)
 8007ce4:	f7f9 fa9c 	bl	8001220 <can_start>
	config_motors();
 8007ce8:	f7ff f9e6 	bl	80070b8 <config_motors>
	//insert can tester?
	uint16_t error = 0b111111111;
 8007cec:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007cf0:	81fb      	strh	r3, [r7, #14]
	vTaskDelay(50);
 8007cf2:	2032      	movs	r0, #50	; 0x32
 8007cf4:	f00e fc7c 	bl	80165f0 <vTaskDelay>
	uint8_t startup = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	737b      	strb	r3, [r7, #13]
			vTaskDelay(500);
		}
	}

	uint8_t temp_msg;
	if (error == 0){
 8007cfc:	89fb      	ldrh	r3, [r7, #14]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d102      	bne.n	8007d08 <motor_calib_task+0x3c>
		temp_msg = ok;
 8007d02:	2301      	movs	r3, #1
 8007d04:	733b      	strb	r3, [r7, #12]
 8007d06:	e001      	b.n	8007d0c <motor_calib_task+0x40>
	} else {
		temp_msg = not_ok;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	733b      	strb	r3, [r7, #12]
	}
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <motor_calib_task+0x74>)
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	f107 010c 	add.w	r1, r7, #12
 8007d14:	2300      	movs	r3, #0
 8007d16:	2200      	movs	r2, #0
 8007d18:	f00d fe4a 	bl	80159b0 <xQueueGenericSend>

	while (1) {
		error = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	81fb      	strh	r3, [r7, #14]

		error = check_motors();
 8007d20:	f7ff ff58 	bl	8007bd4 <check_motors>
 8007d24:	4603      	mov	r3, r0
 8007d26:	81fb      	strh	r3, [r7, #14]
		g_motor_fault = error;
 8007d28:	4a06      	ldr	r2, [pc, #24]	; (8007d44 <motor_calib_task+0x78>)
 8007d2a:	89fb      	ldrh	r3, [r7, #14]
 8007d2c:	8013      	strh	r3, [r2, #0]
			bz_buzzer(0, 2);
			vTaskDelay(5000);
			continue;
			}
		}
		vTaskDelay(10000);
 8007d2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d32:	f00e fc5d 	bl	80165f0 <vTaskDelay>
		error = 0;
 8007d36:	e7f1      	b.n	8007d1c <motor_calib_task+0x50>
 8007d38:	200003e8 	.word	0x200003e8
 8007d3c:	20000410 	.word	0x20000410
 8007d40:	20000478 	.word	0x20000478
 8007d44:	20002886 	.word	0x20002886

08007d48 <yaw_pid>:
#include "board_lib.h"
#include "motor_control.h"
#include "robot_config.h"

//todo: clean this place
void yaw_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08e      	sub	sp, #56	; 0x38
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	ed87 0b04 	vstr	d0, [r7, #16]
 8007d52:	ed87 1b02 	vstr	d1, [r7, #8]
 8007d56:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->last_time[0] = get_microseconds();
 8007d60:	f7fa f9c4 	bl	80020ec <get_microseconds>
 8007d64:	4602      	mov	r2, r0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	629a      	str	r2, [r3, #40]	; 0x28
	if (pid->last_time[1]>= pid->last_time[0]) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	429a      	cmp	r2, r3
 8007d74:	f080 80a8 	bcs.w	8007ec8 <yaw_pid+0x180>
		return;
	}
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 8007d78:	2301      	movs	r3, #1
 8007d7a:	637b      	str	r3, [r7, #52]	; 0x34
	double Pout = 0;
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	f04f 0300 	mov.w	r3, #0
 8007d90:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[1] = pid->error[0];
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 8007da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007db0:	f7f8 fa6a 	bl	8000288 <__aeabi_dsub>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4610      	mov	r0, r2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f7f8 ff14 	bl	8000be8 <__aeabi_d2f>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	ed93 7a03 	vldr	s14, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	edd3 7a00 	vldr	s15, [r3]
 8007dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	ee07 3a90 	vmov	s15, r3
 8007ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de4:	ee17 0a90 	vmov	r0, s15
 8007de8:	f7f8 fbae 	bl	8000548 <__aeabi_f2d>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd * time_mult;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	ed93 7a03 	vldr	s14, [r3, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	edd3 7a04 	vldr	s15, [r3, #16]
 8007e00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	edd3 7a02 	vldr	s15, [r3, #8]
 8007e0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e10:	ee07 3a90 	vmov	s15, r3
 8007e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1c:	ee17 0a90 	vmov	r0, s15
 8007e20:	f7f8 fb92 	bl	8000548 <__aeabi_f2d>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->integral += pid->error[0] * pid->ki * time_mult;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	ed93 7a05 	vldr	s14, [r3, #20]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	edd3 6a03 	vldr	s13, [r3, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	edc3 7a05 	vstr	s15, [r3, #20]
	float_max(&pid->integral, pid->int_max);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f103 0214 	add.w	r2, r3, #20
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	edd3 7a06 	vldr	s15, [r3, #24]
 8007e66:	eeb0 0a67 	vmov.f32	s0, s15
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f000 fd81 	bl	8008972 <float_max>
	Iout = pid->integral;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7f8 fb67 	bl	8000548 <__aeabi_f2d>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout + Dout;
 8007e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e8a:	f7f8 f9ff 	bl	800028c <__adddf3>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e9a:	f7f8 f9f7 	bl	800028c <__adddf3>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	f7f8 fe9f 	bl	8000be8 <__aeabi_d2f>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	621a      	str	r2, [r3, #32]
	float_max(&pid->output, pid->max_out);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f103 0220 	add.w	r2, r3, #32
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	edd3 7a07 	vldr	s15, [r3, #28]
 8007ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f000 fd56 	bl	8008972 <float_max>
 8007ec6:	e000      	b.n	8007eca <yaw_pid+0x182>
		return;
 8007ec8:	bf00      	nop
}
 8007eca:	3738      	adds	r7, #56	; 0x38
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <yangle_pid>:
 * @param *motor pointer to the struct that contain the data
 * for target motor
 *
 */

void yangle_pid(double setpoint, double curr_pt, motor_data_t *motor, float imu_data, float *prev_imu_data) {
 8007ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007ed4:	b090      	sub	sp, #64	; 0x40
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	ed87 0b06 	vstr	d0, [r7, #24]
 8007edc:	ed87 1b04 	vstr	d1, [r7, #16]
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	ed87 2a02 	vstr	s4, [r7, #8]
 8007ee6:	6079      	str	r1, [r7, #4]
	double ang_diff = (setpoint - curr_pt);
 8007ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007eec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ef0:	f7f8 f9ca 	bl	8000288 <__aeabi_dsub>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if (ang_diff > PI) {
 8007efc:	a38e      	add	r3, pc, #568	; (adr r3, 8008138 <yangle_pid+0x268>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007f06:	f7f8 fe07 	bl	8000b18 <__aeabi_dcmpgt>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <yangle_pid+0x58>
		ang_diff -= 2 * PI;
 8007f10:	a38b      	add	r3, pc, #556	; (adr r3, 8008140 <yangle_pid+0x270>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007f1a:	f7f8 f9b5 	bl	8000288 <__aeabi_dsub>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007f26:	e014      	b.n	8007f52 <yangle_pid+0x82>
	} else if (ang_diff < -PI) {
 8007f28:	a387      	add	r3, pc, #540	; (adr r3, 8008148 <yangle_pid+0x278>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007f32:	f7f8 fdd3 	bl	8000adc <__aeabi_dcmplt>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <yangle_pid+0x82>
		ang_diff += 2 * PI;
 8007f3c:	a380      	add	r3, pc, #512	; (adr r3, 8008140 <yangle_pid+0x270>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007f46:	f7f8 f9a1 	bl	800028c <__adddf3>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	if (*prev_imu_data == imu_data) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	edd3 7a00 	vldr	s15, [r3]
 8007f58:	ed97 7a02 	vldr	s14, [r7, #8]
 8007f5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8007f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f64:	f000 80d8 	beq.w	8008118 <yangle_pid+0x248>
		return;}
	motor->angle_pid.last_time[1] = motor->angle_pid.last_time[0];
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	66da      	str	r2, [r3, #108]	; 0x6c
	motor->angle_pid.last_time[0] = get_microseconds();
 8007f70:	f7fa f8bc 	bl	80020ec <get_microseconds>
 8007f74:	4602      	mov	r2, r0
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	669a      	str	r2, [r3, #104]	; 0x68

	uint32_t time_mult = TIMER_FREQ * 60 /
			(float) (motor->angle_pid.last_time[0] - motor->angle_pid.last_time[1]);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	ee07 3a90 	vmov	s15, r3
 8007f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	uint32_t time_mult = TIMER_FREQ * 60 /
 8007f8c:	eddf 6a66 	vldr	s13, [pc, #408]	; 8008128 <yangle_pid+0x258>
 8007f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f98:	ee17 3a90 	vmov	r3, s15
 8007f9c:	637b      	str	r3, [r7, #52]	; 0x34
	motor->angle_pid.error[1] = motor->angle_pid.error[0];
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	651a      	str	r2, [r3, #80]	; 0x50
	motor->angle_pid.error[0] = ang_diff;
 8007fa6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007faa:	f7f8 fe1d 	bl	8000be8 <__aeabi_d2f>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	64da      	str	r2, [r3, #76]	; 0x4c
	float rpm_pOut = motor->angle_pid.kp * ang_diff;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7f8 fac5 	bl	8000548 <__aeabi_f2d>
 8007fbe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fc2:	f7f8 fb19 	bl	80005f8 <__aeabi_dmul>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4610      	mov	r0, r2
 8007fcc:	4619      	mov	r1, r3
 8007fce:	f7f8 fe0b 	bl	8000be8 <__aeabi_d2f>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	633b      	str	r3, [r7, #48]	; 0x30
	float rpm_dOut = motor->angle_pid.kd * (motor->angle_pid.error[0] - motor->angle_pid.error[1]);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007fe8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float imu_ang_diff = imu_data - *prev_imu_data;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	edd3 7a00 	vldr	s15, [r3]
 8007ffa:	ed97 7a02 	vldr	s14, [r7, #8]
 8007ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008002:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	imu_ang_diff = (imu_ang_diff > PI) ? imu_ang_diff - (2 * PI) :
 8008006:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800800a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800812c <yangle_pid+0x25c>
 800800e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008016:	dd06      	ble.n	8008026 <yangle_pid+0x156>
 8008018:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800801c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008130 <yangle_pid+0x260>
 8008020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008024:	e011      	b.n	800804a <yangle_pid+0x17a>
			((imu_ang_diff < -PI) ? imu_ang_diff + (2*PI) : imu_ang_diff);
 8008026:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800802a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8008134 <yangle_pid+0x264>
 800802e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008036:	d506      	bpl.n	8008046 <yangle_pid+0x176>
 8008038:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800803c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8008130 <yangle_pid+0x260>
 8008040:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008044:	e001      	b.n	800804a <yangle_pid+0x17a>
 8008046:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
	imu_ang_diff = (imu_ang_diff > PI) ? imu_ang_diff - (2 * PI) :
 800804a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float imu_rpm = ((imu_data - *prev_imu_data)  * time_mult)/(2 * PI);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	edd3 7a00 	vldr	s15, [r3]
 8008054:	ed97 7a02 	vldr	s14, [r7, #8]
 8008058:	ee37 7a67 	vsub.f32	s14, s14, s15
 800805c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800806a:	eddf 6a31 	vldr	s13, [pc, #196]	; 8008130 <yangle_pid+0x260>
 800806e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008072:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	*prev_imu_data = imu_data;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	601a      	str	r2, [r3, #0]

	motor->angle_pid.integral += motor->angle_pid.error[0];
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	float_max(&motor->angle_pid.integral, motor->angle_pid.int_max);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800809e:	eeb0 0a67 	vmov.f32	s0, s15
 80080a2:	4610      	mov	r0, r2
 80080a4:	f000 fc65 	bl	8008972 <float_max>
	float rpm_iOut = motor->angle_pid.ki * motor->angle_pid.integral;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80080b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b8:	edc7 7a08 	vstr	s15, [r7, #32]

	motor->angle_pid.output = rpm_pOut + rpm_dOut + rpm_iOut;
 80080bc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80080c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80080c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80080cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	float_max(&motor->angle_pid.output, motor->angle_pid.max_out);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80080e2:	eeb0 0a67 	vmov.f32	s0, s15
 80080e6:	4610      	mov	r0, r2
 80080e8:	f000 fc43 	bl	8008972 <float_max>
	yaw_pid(motor->angle_pid.output, imu_rpm, &motor->rpm_pid);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7f8 fa29 	bl	8000548 <__aeabi_f2d>
 80080f6:	4604      	mov	r4, r0
 80080f8:	460d      	mov	r5, r1
 80080fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080fc:	f7f8 fa24 	bl	8000548 <__aeabi_f2d>
 8008100:	4680      	mov	r8, r0
 8008102:	4689      	mov	r9, r1
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3310      	adds	r3, #16
 8008108:	4618      	mov	r0, r3
 800810a:	ec49 8b11 	vmov	d1, r8, r9
 800810e:	ec45 4b10 	vmov	d0, r4, r5
 8008112:	f7ff fe19 	bl	8007d48 <yaw_pid>
 8008116:	e000      	b.n	800811a <yangle_pid+0x24a>
		return;}
 8008118:	bf00      	nop
}
 800811a:	3740      	adds	r7, #64	; 0x40
 800811c:	46bd      	mov	sp, r7
 800811e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008122:	bf00      	nop
 8008124:	f3af 8000 	nop.w
 8008128:	49127c00 	.word	0x49127c00
 800812c:	40490fdb 	.word	0x40490fdb
 8008130:	40c90fdb 	.word	0x40c90fdb
 8008134:	c0490fdb 	.word	0xc0490fdb
 8008138:	60000000 	.word	0x60000000
 800813c:	400921fb 	.word	0x400921fb
 8008140:	60000000 	.word	0x60000000
 8008144:	401921fb 	.word	0x401921fb
 8008148:	60000000 	.word	0x60000000
 800814c:	c00921fb 	.word	0xc00921fb

08008150 <angle_pid>:
 * @param curr_pt current angle
 * @param *motor pointer to the struct that contain the data
 * for target motor
 *
 */
void angle_pid(double setpoint, double curr_pt, motor_data_t *motor) {
 8008150:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008154:	b08c      	sub	sp, #48	; 0x30
 8008156:	af00      	add	r7, sp, #0
 8008158:	ed87 0b04 	vstr	d0, [r7, #16]
 800815c:	ed87 1b02 	vstr	d1, [r7, #8]
 8008160:	6078      	str	r0, [r7, #4]
	double ang_diff = (setpoint - curr_pt);
 8008162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008166:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800816a:	f7f8 f88d 	bl	8000288 <__aeabi_dsub>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (ang_diff > PI) {
 8008176:	a356      	add	r3, pc, #344	; (adr r3, 80082d0 <angle_pid+0x180>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008180:	f7f8 fcca 	bl	8000b18 <__aeabi_dcmpgt>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <angle_pid+0x52>
		ang_diff -= 2 * PI;
 800818a:	a353      	add	r3, pc, #332	; (adr r3, 80082d8 <angle_pid+0x188>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008194:	f7f8 f878 	bl	8000288 <__aeabi_dsub>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80081a0:	e014      	b.n	80081cc <angle_pid+0x7c>
	} else if (ang_diff < -PI) {
 80081a2:	a34f      	add	r3, pc, #316	; (adr r3, 80082e0 <angle_pid+0x190>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80081ac:	f7f8 fc96 	bl	8000adc <__aeabi_dcmplt>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <angle_pid+0x7c>
		ang_diff += 2 * PI;
 80081b6:	a348      	add	r3, pc, #288	; (adr r3, 80082d8 <angle_pid+0x188>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80081c0:	f7f8 f864 	bl	800028c <__adddf3>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	motor->angle_pid.error[1] = motor->angle_pid.error[0];
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	651a      	str	r2, [r3, #80]	; 0x50
	motor->angle_pid.error[0] = ang_diff;
 80081d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80081d8:	f7f8 fd06 	bl	8000be8 <__aeabi_d2f>
 80081dc:	4602      	mov	r2, r0
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	64da      	str	r2, [r3, #76]	; 0x4c
	float rpm_pOut = motor->angle_pid.kp * ang_diff;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7f8 f9ae 	bl	8000548 <__aeabi_f2d>
 80081ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081f0:	f7f8 fa02 	bl	80005f8 <__aeabi_dmul>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4610      	mov	r0, r2
 80081fa:	4619      	mov	r1, r3
 80081fc:	f7f8 fcf4 	bl	8000be8 <__aeabi_d2f>
 8008200:	4603      	mov	r3, r0
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
	float rpm_dOut = motor->angle_pid.kd * (motor->angle_pid.error[0] - motor->angle_pid.error[1]);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800821a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821e:	edc7 7a08 	vstr	s15, [r7, #32]

	motor->angle_pid.integral += motor->angle_pid.error[0];
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800822e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	float_max(&motor->angle_pid.integral, motor->angle_pid.int_max);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008244:	eeb0 0a67 	vmov.f32	s0, s15
 8008248:	4610      	mov	r0, r2
 800824a:	f000 fb92 	bl	8008972 <float_max>
	float rpm_iOut = motor->angle_pid.ki * motor->angle_pid.integral;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800825a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800825e:	edc7 7a07 	vstr	s15, [r7, #28]
	motor->angle_pid.output = rpm_pOut + rpm_dOut + rpm_iOut;
 8008262:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008266:	edd7 7a08 	vldr	s15, [r7, #32]
 800826a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800826e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	float_max(&motor->angle_pid.output, motor->angle_pid.max_out);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8008288:	eeb0 0a67 	vmov.f32	s0, s15
 800828c:	4610      	mov	r0, r2
 800828e:	f000 fb70 	bl	8008972 <float_max>
	speed_pid(motor->angle_pid.output, motor->raw_data.rpm, &motor->rpm_pid);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008296:	4618      	mov	r0, r3
 8008298:	f7f8 f956 	bl	8000548 <__aeabi_f2d>
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7f8 f93c 	bl	8000524 <__aeabi_i2d>
 80082ac:	4680      	mov	r8, r0
 80082ae:	4689      	mov	r9, r1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3310      	adds	r3, #16
 80082b4:	4618      	mov	r0, r3
 80082b6:	ec49 8b11 	vmov	d1, r8, r9
 80082ba:	ec45 4b10 	vmov	d0, r4, r5
 80082be:	f000 f813 	bl	80082e8 <speed_pid>
}
 80082c2:	bf00      	nop
 80082c4:	3730      	adds	r7, #48	; 0x30
 80082c6:	46bd      	mov	sp, r7
 80082c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80082cc:	f3af 8000 	nop.w
 80082d0:	60000000 	.word	0x60000000
 80082d4:	400921fb 	.word	0x400921fb
 80082d8:	60000000 	.word	0x60000000
 80082dc:	401921fb 	.word	0x401921fb
 80082e0:	60000000 	.word	0x60000000
 80082e4:	c00921fb 	.word	0xc00921fb

080082e8 <speed_pid>:
 *
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */
void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	ed87 0b04 	vstr	d0, [r7, #16]
 80082f2:	ed87 1b02 	vstr	d1, [r7, #8]
 80082f6:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->last_time[0] = get_microseconds();
 8008300:	f7f9 fef4 	bl	80020ec <get_microseconds>
 8008304:	4602      	mov	r2, r0
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	629a      	str	r2, [r3, #40]	; 0x28
	double Pout = 0;
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	f04f 0300 	mov.w	r3, #0
 8008312:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8008316:	f04f 0200 	mov.w	r2, #0
 800831a:	f04f 0300 	mov.w	r3, #0
 800831e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8008322:	f04f 0200 	mov.w	r2, #0
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[1] = pid->error[0];
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 8008336:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800833a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800833e:	f7f7 ffa3 	bl	8000288 <__aeabi_dsub>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4610      	mov	r0, r2
 8008348:	4619      	mov	r1, r3
 800834a:	f7f8 fc4d 	bl	8000be8 <__aeabi_d2f>
 800834e:	4602      	mov	r2, r0
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	ed93 7a03 	vldr	s14, [r3, #12]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	edd3 7a00 	vldr	s15, [r3]
 8008360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008364:	ee17 0a90 	vmov	r0, s15
 8008368:	f7f8 f8ee 	bl	8000548 <__aeabi_f2d>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	ed93 7a03 	vldr	s14, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	edd3 7a02 	vldr	s15, [r3, #8]
 800838a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838e:	ee17 0a90 	vmov	r0, s15
 8008392:	f7f8 f8d9 	bl	8000548 <__aeabi_f2d>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->integral += pid->error[0] * pid->ki;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	ed93 7a05 	vldr	s14, [r3, #20]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	edd3 6a03 	vldr	s13, [r3, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80083b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	edc3 7a05 	vstr	s15, [r3, #20]
	float_max(&pid->integral, pid->int_max);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f103 0214 	add.w	r2, r3, #20
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80083ca:	eeb0 0a67 	vmov.f32	s0, s15
 80083ce:	4610      	mov	r0, r2
 80083d0:	f000 facf 	bl	8008972 <float_max>
	Iout = pid->integral;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7f8 f8b5 	bl	8000548 <__aeabi_f2d>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout + Dout;
 80083e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80083ee:	f7f7 ff4d 	bl	800028c <__adddf3>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4610      	mov	r0, r2
 80083f8:	4619      	mov	r1, r3
 80083fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083fe:	f7f7 ff45 	bl	800028c <__adddf3>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4610      	mov	r0, r2
 8008408:	4619      	mov	r1, r3
 800840a:	f7f8 fbed 	bl	8000be8 <__aeabi_d2f>
 800840e:	4602      	mov	r2, r0
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	621a      	str	r2, [r3, #32]
	float_max(&pid->output, pid->max_out);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f103 0220 	add.w	r2, r3, #32
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	edd3 7a07 	vldr	s15, [r3, #28]
 8008420:	eeb0 0a67 	vmov.f32	s0, s15
 8008424:	4610      	mov	r0, r2
 8008426:	f000 faa4 	bl	8008972 <float_max>
}
 800842a:	bf00      	nop
 800842c:	3730      	adds	r7, #48	; 0x30
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <motor_send_can>:
 */
void motor_send_can(motor_data_t motor_all[],
		uint8_t id_one,
		uint8_t id_two,
		uint8_t id_three,
		uint8_t id_four) {
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	; 0x38
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	4608      	mov	r0, r1
 800843e:	4611      	mov	r1, r2
 8008440:	461a      	mov	r2, r3
 8008442:	4603      	mov	r3, r0
 8008444:	70fb      	strb	r3, [r7, #3]
 8008446:	460b      	mov	r3, r1
 8008448:	70bb      	strb	r3, [r7, #2]
 800844a:	4613      	mov	r3, r2
 800844c:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	uint32_t temp_checker = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 8008452:	2300      	movs	r3, #0
 8008454:	623b      	str	r3, [r7, #32]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 8008456:	2300      	movs	r3, #0
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_tx_message.DLC = 0x08;
 800845a:	2308      	movs	r3, #8
 800845c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (id_one < 25 && id_one > 0) {
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	2b18      	cmp	r3, #24
 8008462:	d80b      	bhi.n	800847c <motor_send_can+0x48>
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d008      	beq.n	800847c <motor_send_can+0x48>
		temp_checker = temp_checker | 1 << (id_one - 1);
 800846a:	78fb      	ldrb	r3, [r7, #3]
 800846c:	3b01      	subs	r3, #1
 800846e:	2201      	movs	r2, #1
 8008470:	fa02 f303 	lsl.w	r3, r2, r3
 8008474:	461a      	mov	r2, r3
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	4313      	orrs	r3, r2
 800847a:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_two < 25 && id_two > 0) {
 800847c:	78bb      	ldrb	r3, [r7, #2]
 800847e:	2b18      	cmp	r3, #24
 8008480:	d80b      	bhi.n	800849a <motor_send_can+0x66>
 8008482:	78bb      	ldrb	r3, [r7, #2]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d008      	beq.n	800849a <motor_send_can+0x66>
		temp_checker = temp_checker | 1 << (id_two - 1);
 8008488:	78bb      	ldrb	r3, [r7, #2]
 800848a:	3b01      	subs	r3, #1
 800848c:	2201      	movs	r2, #1
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	461a      	mov	r2, r3
 8008494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008496:	4313      	orrs	r3, r2
 8008498:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_three < 25 && id_three > 0) {
 800849a:	787b      	ldrb	r3, [r7, #1]
 800849c:	2b18      	cmp	r3, #24
 800849e:	d80b      	bhi.n	80084b8 <motor_send_can+0x84>
 80084a0:	787b      	ldrb	r3, [r7, #1]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d008      	beq.n	80084b8 <motor_send_can+0x84>
		temp_checker = temp_checker | 1 << (id_three - 1);
 80084a6:	787b      	ldrb	r3, [r7, #1]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	2201      	movs	r2, #1
 80084ac:	fa02 f303 	lsl.w	r3, r2, r3
 80084b0:	461a      	mov	r2, r3
 80084b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b4:	4313      	orrs	r3, r2
 80084b6:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_four < 25 && id_four > 0) {
 80084b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80084bc:	2b18      	cmp	r3, #24
 80084be:	d80d      	bhi.n	80084dc <motor_send_can+0xa8>
 80084c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d009      	beq.n	80084dc <motor_send_can+0xa8>
		temp_checker = temp_checker | 1 << (id_four - 1);
 80084c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80084cc:	3b01      	subs	r3, #1
 80084ce:	2201      	movs	r2, #1
 80084d0:	fa02 f303 	lsl.w	r3, r2, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d8:	4313      	orrs	r3, r2
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (temp_checker & 0x00000F) {
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d054      	beq.n	8008590 <motor_send_can+0x15c>
		CAN_tx_message.StdId = 0x200;
 80084e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ea:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0].rpm_pid.output;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80084f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084f6:	ee17 3a90 	vmov	r3, s15
 80084fa:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 80084fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008500:	121b      	asrs	r3, r3, #8
 8008502:	b21b      	sxth	r3, r3
 8008504:	b2db      	uxtb	r3, r3
 8008506:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8008508:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800850a:	b2db      	uxtb	r3, r3
 800850c:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1].rpm_pid.output;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	33a4      	adds	r3, #164	; 0xa4
 8008512:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800851a:	ee17 3a90 	vmov	r3, s15
 800851e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8008520:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008524:	121b      	asrs	r3, r3, #8
 8008526:	b21b      	sxth	r3, r3
 8008528:	b2db      	uxtb	r3, r3
 800852a:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800852c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800852e:	b2db      	uxtb	r3, r3
 8008530:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2].rpm_pid.output;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8008538:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800853c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008540:	ee17 3a90 	vmov	r3, s15
 8008544:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8008546:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800854a:	121b      	asrs	r3, r3, #8
 800854c:	b21b      	sxth	r3, r3
 800854e:	b2db      	uxtb	r3, r3
 8008550:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8008552:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008554:	b2db      	uxtb	r3, r3
 8008556:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3].rpm_pid.output;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800855e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008566:	ee17 3a90 	vmov	r3, s15
 800856a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800856c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008570:	121b      	asrs	r3, r3, #8
 8008572:	b21b      	sxth	r3, r3
 8008574:	b2db      	uxtb	r3, r3
 8008576:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8008578:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800857a:	b2db      	uxtb	r3, r3
 800857c:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800857e:	f107 030c 	add.w	r3, r7, #12
 8008582:	f107 0210 	add.w	r2, r7, #16
 8008586:	f107 0118 	add.w	r1, r7, #24
 800858a:	48bc      	ldr	r0, [pc, #752]	; (800887c <motor_send_can+0x448>)
 800858c:	f001 fc38 	bl	8009e00 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0000F0) {
 8008590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d057      	beq.n	800864a <motor_send_can+0x216>
		CAN_tx_message.StdId = 0x1FF;
 800859a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800859e:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4].rpm_pid.output;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80085a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80085aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ae:	ee17 3a90 	vmov	r3, s15
 80085b2:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 80085b4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80085b8:	121b      	asrs	r3, r3, #8
 80085ba:	b21b      	sxth	r3, r3
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 80085c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5].rpm_pid.output;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80085cc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80085d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085d4:	ee17 3a90 	vmov	r3, s15
 80085d8:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 80085da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80085de:	121b      	asrs	r3, r3, #8
 80085e0:	b21b      	sxth	r3, r3
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 80085e6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6].rpm_pid.output;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80085f2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80085f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085fa:	ee17 3a90 	vmov	r3, s15
 80085fe:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8008600:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008604:	121b      	asrs	r3, r3, #8
 8008606:	b21b      	sxth	r3, r3
 8008608:	b2db      	uxtb	r3, r3
 800860a:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800860c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800860e:	b2db      	uxtb	r3, r3
 8008610:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7].rpm_pid.output;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8008618:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800861c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008620:	ee17 3a90 	vmov	r3, s15
 8008624:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8008626:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800862a:	121b      	asrs	r3, r3, #8
 800862c:	b21b      	sxth	r3, r3
 800862e:	b2db      	uxtb	r3, r3
 8008630:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8008632:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008634:	b2db      	uxtb	r3, r3
 8008636:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008638:	f107 030c 	add.w	r3, r7, #12
 800863c:	f107 0210 	add.w	r2, r7, #16
 8008640:	f107 0118 	add.w	r1, r7, #24
 8008644:	488d      	ldr	r0, [pc, #564]	; (800887c <motor_send_can+0x448>)
 8008646:	f001 fbdb 	bl	8009e00 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x000F00) {
 800864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008650:	2b00      	cmp	r3, #0
 8008652:	d057      	beq.n	8008704 <motor_send_can+0x2d0>
		CAN_tx_message.StdId = 0x2FF;
 8008654:	f240 23ff 	movw	r3, #767	; 0x2ff
 8008658:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8].rpm_pid.output;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8008660:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008668:	ee17 3a90 	vmov	r3, s15
 800866c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800866e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008672:	121b      	asrs	r3, r3, #8
 8008674:	b21b      	sxth	r3, r3
 8008676:	b2db      	uxtb	r3, r3
 8008678:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800867a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800867c:	b2db      	uxtb	r3, r3
 800867e:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9].rpm_pid.output;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 8008686:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800868a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800868e:	ee17 3a90 	vmov	r3, s15
 8008692:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8008694:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008698:	121b      	asrs	r3, r3, #8
 800869a:	b21b      	sxth	r3, r3
 800869c:	b2db      	uxtb	r3, r3
 800869e:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 80086a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA].rpm_pid.output;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80086ac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80086b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086b4:	ee17 3a90 	vmov	r3, s15
 80086b8:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 80086ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80086be:	121b      	asrs	r3, r3, #8
 80086c0:	b21b      	sxth	r3, r3
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 80086c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB].rpm_pid.output;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 80086d2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80086d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086da:	ee17 3a90 	vmov	r3, s15
 80086de:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 80086e0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80086e4:	121b      	asrs	r3, r3, #8
 80086e6:	b21b      	sxth	r3, r3
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 80086ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 80086f2:	f107 030c 	add.w	r3, r7, #12
 80086f6:	f107 0210 	add.w	r2, r7, #16
 80086fa:	f107 0118 	add.w	r1, r7, #24
 80086fe:	485f      	ldr	r0, [pc, #380]	; (800887c <motor_send_can+0x448>)
 8008700:	f001 fb7e 	bl	8009e00 <HAL_CAN_AddTxMessage>
	}
#ifndef CHASSIS_MCU
	if (temp_checker & 0x00F000) {
 8008704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008706:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d057      	beq.n	80087be <motor_send_can+0x38a>
		CAN_tx_message.StdId = 0x200;
 800870e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008712:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0 + 12].rpm_pid.output;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 800871a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800871e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008722:	ee17 3a90 	vmov	r3, s15
 8008726:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8008728:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800872c:	121b      	asrs	r3, r3, #8
 800872e:	b21b      	sxth	r3, r3
 8008730:	b2db      	uxtb	r3, r3
 8008732:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8008734:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008736:	b2db      	uxtb	r3, r3
 8008738:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1 + 12].rpm_pid.output;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8008740:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008748:	ee17 3a90 	vmov	r3, s15
 800874c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800874e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008752:	121b      	asrs	r3, r3, #8
 8008754:	b21b      	sxth	r3, r3
 8008756:	b2db      	uxtb	r3, r3
 8008758:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800875a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800875c:	b2db      	uxtb	r3, r3
 800875e:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2 + 12].rpm_pid.output;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f603 03f8 	addw	r3, r3, #2296	; 0x8f8
 8008766:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800876a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800876e:	ee17 3a90 	vmov	r3, s15
 8008772:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8008774:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008778:	121b      	asrs	r3, r3, #8
 800877a:	b21b      	sxth	r3, r3
 800877c:	b2db      	uxtb	r3, r3
 800877e:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8008780:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008782:	b2db      	uxtb	r3, r3
 8008784:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3 + 12].rpm_pid.output;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 800878c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008794:	ee17 3a90 	vmov	r3, s15
 8008798:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800879a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800879e:	121b      	asrs	r3, r3, #8
 80087a0:	b21b      	sxth	r3, r3
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 80087a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 80087ac:	f107 030c 	add.w	r3, r7, #12
 80087b0:	f107 0210 	add.w	r2, r7, #16
 80087b4:	f107 0118 	add.w	r1, r7, #24
 80087b8:	4831      	ldr	r0, [pc, #196]	; (8008880 <motor_send_can+0x44c>)
 80087ba:	f001 fb21 	bl	8009e00 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0F0000) {
 80087be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d05d      	beq.n	8008884 <motor_send_can+0x450>
		CAN_tx_message.StdId = 0x1FF;
 80087c8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80087cc:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4 + 12].rpm_pid.output;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 80087d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80087d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087dc:	ee17 3a90 	vmov	r3, s15
 80087e0:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 80087e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80087e6:	121b      	asrs	r3, r3, #8
 80087e8:	b21b      	sxth	r3, r3
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 80087ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5 + 12].rpm_pid.output;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f603 23e4 	addw	r3, r3, #2788	; 0xae4
 80087fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80087fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008802:	ee17 3a90 	vmov	r3, s15
 8008806:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8008808:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800880c:	121b      	asrs	r3, r3, #8
 800880e:	b21b      	sxth	r3, r3
 8008810:	b2db      	uxtb	r3, r3
 8008812:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8008814:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008816:	b2db      	uxtb	r3, r3
 8008818:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6 + 12].rpm_pid.output;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8008820:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008828:	ee17 3a90 	vmov	r3, s15
 800882c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800882e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008832:	121b      	asrs	r3, r3, #8
 8008834:	b21b      	sxth	r3, r3
 8008836:	b2db      	uxtb	r3, r3
 8008838:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800883a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800883c:	b2db      	uxtb	r3, r3
 800883e:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7 + 12].rpm_pid.output;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8008846:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800884a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800884e:	ee17 3a90 	vmov	r3, s15
 8008852:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8008854:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008858:	121b      	asrs	r3, r3, #8
 800885a:	b21b      	sxth	r3, r3
 800885c:	b2db      	uxtb	r3, r3
 800885e:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8008860:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008862:	b2db      	uxtb	r3, r3
 8008864:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8008866:	f107 030c 	add.w	r3, r7, #12
 800886a:	f107 0210 	add.w	r2, r7, #16
 800886e:	f107 0118 	add.w	r1, r7, #24
 8008872:	4803      	ldr	r0, [pc, #12]	; (8008880 <motor_send_can+0x44c>)
 8008874:	f001 fac4 	bl	8009e00 <HAL_CAN_AddTxMessage>
 8008878:	e004      	b.n	8008884 <motor_send_can+0x450>
 800887a:	bf00      	nop
 800887c:	200003e8 	.word	0x200003e8
 8008880:	20000410 	.word	0x20000410
	}
	if (temp_checker & 0xF00000) {
 8008884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008886:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d057      	beq.n	800893e <motor_send_can+0x50a>
		CAN_tx_message.StdId = 0x2FF;
 800888e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8008892:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8 + 12].rpm_pid.output;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 800889a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800889e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088a2:	ee17 3a90 	vmov	r3, s15
 80088a6:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 80088a8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80088ac:	121b      	asrs	r3, r3, #8
 80088ae:	b21b      	sxth	r3, r3
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 80088b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9 + 12].rpm_pid.output;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f603 5374 	addw	r3, r3, #3444	; 0xd74
 80088c0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80088c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088c8:	ee17 3a90 	vmov	r3, s15
 80088cc:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 80088ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80088d2:	121b      	asrs	r3, r3, #8
 80088d4:	b21b      	sxth	r3, r3
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 80088da:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA + 12].rpm_pid.output;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f603 6318 	addw	r3, r3, #3608	; 0xe18
 80088e6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80088ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088ee:	ee17 3a90 	vmov	r3, s15
 80088f2:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 80088f4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80088f8:	121b      	asrs	r3, r3, #8
 80088fa:	b21b      	sxth	r3, r3
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8008900:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008902:	b2db      	uxtb	r3, r3
 8008904:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB + 12].rpm_pid.output;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f603 63bc 	addw	r3, r3, #3772	; 0xebc
 800890c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008914:	ee17 3a90 	vmov	r3, s15
 8008918:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800891a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800891e:	121b      	asrs	r3, r3, #8
 8008920:	b21b      	sxth	r3, r3
 8008922:	b2db      	uxtb	r3, r3
 8008924:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8008926:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008928:	b2db      	uxtb	r3, r3
 800892a:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800892c:	f107 030c 	add.w	r3, r7, #12
 8008930:	f107 0210 	add.w	r2, r7, #16
 8008934:	f107 0118 	add.w	r1, r7, #24
 8008938:	4803      	ldr	r0, [pc, #12]	; (8008948 <motor_send_can+0x514>)
 800893a:	f001 fa61 	bl	8009e00 <HAL_CAN_AddTxMessage>
	}
#endif
}
 800893e:	bf00      	nop
 8008940:	3738      	adds	r7, #56	; 0x38
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20000410 	.word	0x20000410

0800894c <kill_can>:

void kill_can() {
 800894c:	b480      	push	{r7}
 800894e:	b089      	sub	sp, #36	; 0x24
 8008950:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8] = { 0, };
 8008952:	2300      	movs	r3, #0
 8008954:	603b      	str	r3, [r7, #0]
 8008956:	2300      	movs	r3, #0
 8008958:	607b      	str	r3, [r7, #4]
	uint32_t send_mail_box;
	CAN_tx_message.IDE = CAN_ID_STD;
 800895a:	2300      	movs	r3, #0
 800895c:	613b      	str	r3, [r7, #16]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]
	CAN_tx_message.DLC = 0x08;
 8008962:	2308      	movs	r3, #8
 8008964:	61bb      	str	r3, [r7, #24]
//	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
//	CAN_tx_message.StdId = 0x2FF;
//	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
//
//#endif
}
 8008966:	bf00      	nop
 8008968:	3724      	adds	r7, #36	; 0x24
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <float_max>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_max(float *motor_in, float motor_max) {
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	ed87 0a00 	vstr	s0, [r7]
	if (*motor_in > motor_max) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	edd3 7a00 	vldr	s15, [r3]
 8008984:	ed97 7a00 	vldr	s14, [r7]
 8008988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800898c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008990:	d503      	bpl.n	800899a <float_max+0x28>
		*motor_in = motor_max;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	601a      	str	r2, [r3, #0]
	} else if (*motor_in < -motor_max) {
		*motor_in = -motor_max;
	}
}
 8008998:	e013      	b.n	80089c2 <float_max+0x50>
	} else if (*motor_in < -motor_max) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	ed93 7a00 	vldr	s14, [r3]
 80089a0:	edd7 7a00 	vldr	s15, [r7]
 80089a4:	eef1 7a67 	vneg.f32	s15, s15
 80089a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b0:	d400      	bmi.n	80089b4 <float_max+0x42>
}
 80089b2:	e006      	b.n	80089c2 <float_max+0x50>
		*motor_in = -motor_max;
 80089b4:	edd7 7a00 	vldr	s15, [r7]
 80089b8:	eef1 7a67 	vneg.f32	s15, s15
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	edc3 7a00 	vstr	s15, [r3]
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <movement_control_task>:

float motor_yaw_mult[4];

extern QueueHandle_t telem_motor_queue;

void movement_control_task(void *argument) {
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af02      	add	r7, sp, #8
 80089d6:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	//initialise in an array so it's possible to for-loop it later
	motor_yaw_mult[0] = FR_YAW_MULT;
 80089d8:	4b43      	ldr	r3, [pc, #268]	; (8008ae8 <movement_control_task+0x118>)
 80089da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80089de:	601a      	str	r2, [r3, #0]
	motor_yaw_mult[1] = FL_YAW_MULT;
 80089e0:	4b41      	ldr	r3, [pc, #260]	; (8008ae8 <movement_control_task+0x118>)
 80089e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80089e6:	605a      	str	r2, [r3, #4]
	motor_yaw_mult[2] = BL_YAW_MULT;
 80089e8:	4b3f      	ldr	r3, [pc, #252]	; (8008ae8 <movement_control_task+0x118>)
 80089ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80089ee:	609a      	str	r2, [r3, #8]
	motor_yaw_mult[3] = BR_YAW_MULT;
 80089f0:	4b3d      	ldr	r3, [pc, #244]	; (8008ae8 <movement_control_task+0x118>)
 80089f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80089f6:	60da      	str	r2, [r3, #12]

#ifndef CHASSIS_MCU

		EventBits_t motor_bits;
		//wait for all motors to have updated data before PID is allowed to run
		motor_bits = xEventGroupWaitBits(chassis_event_group, 0b1111, pdTRUE,
 80089f8:	4b3c      	ldr	r3, [pc, #240]	; (8008aec <movement_control_task+0x11c>)
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	2301      	movs	r3, #1
 8008a04:	2201      	movs	r2, #1
 8008a06:	210f      	movs	r1, #15
 8008a08:	f00c fc0c 	bl	8015224 <xEventGroupWaitBits>
 8008a0c:	60f8      	str	r0, [r7, #12]
		pdTRUE,
		portMAX_DELAY);
		if (motor_bits == 0b1111) {
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b0f      	cmp	r3, #15
 8008a12:	d13b      	bne.n	8008a8c <movement_control_task+0xbc>
			status_led(3, on_led);
 8008a14:	2100      	movs	r1, #0
 8008a16:	2003      	movs	r0, #3
 8008a18:	f7f9 fa90 	bl	8001f3c <status_led>
			start_time = xTaskGetTickCount();
 8008a1c:	f00d ff38 	bl	8016890 <xTaskGetTickCount>
 8008a20:	4603      	mov	r3, r0
 8008a22:	60bb      	str	r3, [r7, #8]
			if (chassis_ctrl_data.enabled) {
 8008a24:	4b32      	ldr	r3, [pc, #200]	; (8008af0 <movement_control_task+0x120>)
 8008a26:	7d1b      	ldrb	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d006      	beq.n	8008a3a <movement_control_task+0x6a>
				chassis_motion_control(can_motors + FR_MOTOR_ID - 1,
 8008a2c:	4831      	ldr	r0, [pc, #196]	; (8008af4 <movement_control_task+0x124>)
 8008a2e:	4932      	ldr	r1, [pc, #200]	; (8008af8 <movement_control_task+0x128>)
 8008a30:	4a32      	ldr	r2, [pc, #200]	; (8008afc <movement_control_task+0x12c>)
 8008a32:	4b33      	ldr	r3, [pc, #204]	; (8008b00 <movement_control_task+0x130>)
 8008a34:	f000 f86a 	bl	8008b0c <chassis_motion_control>
 8008a38:	e023      	b.n	8008a82 <movement_control_task+0xb2>
						can_motors + FL_MOTOR_ID - 1,
						can_motors + BL_MOTOR_ID - 1,
						can_motors + BR_MOTOR_ID - 1);
			} else {
				can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;
 8008a3a:	4b32      	ldr	r3, [pc, #200]	; (8008b04 <movement_control_task+0x134>)
 8008a3c:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
				can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;
 8008a46:	4b2f      	ldr	r3, [pc, #188]	; (8008b04 <movement_control_task+0x134>)
 8008a48:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
				can_motors[BL_MOTOR_ID - 1].rpm_pid.output = 0;
 8008a52:	4b2c      	ldr	r3, [pc, #176]	; (8008b04 <movement_control_task+0x134>)
 8008a54:	f603 13cc 	addw	r3, r3, #2508	; 0x9cc
 8008a58:	f04f 0200 	mov.w	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
				can_motors[BR_MOTOR_ID - 1].rpm_pid.output = 0;
 8008a5e:	4b29      	ldr	r3, [pc, #164]	; (8008b04 <movement_control_task+0x134>)
 8008a60:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	601a      	str	r2, [r3, #0]
				g_chassis_yaw = 0;
 8008a6a:	4b27      	ldr	r3, [pc, #156]	; (8008b08 <movement_control_task+0x138>)
 8008a6c:	f04f 0200 	mov.w	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]

				//change CAN messages to a seperate task? so it doesn't fill up CAN transmitter
				motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID,
 8008a72:	230f      	movs	r3, #15
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	2310      	movs	r3, #16
 8008a78:	220d      	movs	r2, #13
 8008a7a:	210e      	movs	r1, #14
 8008a7c:	4821      	ldr	r0, [pc, #132]	; (8008b04 <movement_control_task+0x134>)
 8008a7e:	f7ff fcd9 	bl	8008434 <motor_send_can>
				BR_MOTOR_ID);
			}
#else
		chassis_MCU_send_CAN();
#endif
			status_led(3, off_led);
 8008a82:	2101      	movs	r1, #1
 8008a84:	2003      	movs	r0, #3
 8008a86:	f7f9 fa59 	bl	8001f3c <status_led>
 8008a8a:	e01f      	b.n	8008acc <movement_control_task+0xfc>
		} else {
			//motor timed out
			can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <movement_control_task+0x134>)
 8008a8e:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8008a92:	f04f 0200 	mov.w	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]
			can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;
 8008a98:	4b1a      	ldr	r3, [pc, #104]	; (8008b04 <movement_control_task+0x134>)
 8008a9a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8008a9e:	f04f 0200 	mov.w	r2, #0
 8008aa2:	601a      	str	r2, [r3, #0]
			can_motors[BL_MOTOR_ID - 1].rpm_pid.output = 0;
 8008aa4:	4b17      	ldr	r3, [pc, #92]	; (8008b04 <movement_control_task+0x134>)
 8008aa6:	f603 13cc 	addw	r3, r3, #2508	; 0x9cc
 8008aaa:	f04f 0200 	mov.w	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]
			can_motors[BR_MOTOR_ID - 1].rpm_pid.output = 0;
 8008ab0:	4b14      	ldr	r3, [pc, #80]	; (8008b04 <movement_control_task+0x134>)
 8008ab2:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8008ab6:	f04f 0200 	mov.w	r2, #0
 8008aba:	601a      	str	r2, [r3, #0]
			motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, BL_MOTOR_ID,
 8008abc:	230f      	movs	r3, #15
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	220d      	movs	r2, #13
 8008ac4:	210e      	movs	r1, #14
 8008ac6:	480f      	ldr	r0, [pc, #60]	; (8008b04 <movement_control_task+0x134>)
 8008ac8:	f7ff fcb4 	bl	8008434 <motor_send_can>
			BR_MOTOR_ID);
		}
		//clear bits if it's not already cleared
		xEventGroupClearBits(chassis_event_group, 0b1111);
 8008acc:	4b07      	ldr	r3, [pc, #28]	; (8008aec <movement_control_task+0x11c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	210f      	movs	r1, #15
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f00c fc74 	bl	80153c0 <xEventGroupClearBits>
		//delays task for other tasks to run
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 8008ad8:	f107 0308 	add.w	r3, r7, #8
 8008adc:	210a      	movs	r1, #10
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f00d fd08 	bl	80164f4 <vTaskDelayUntil>
	while (1) {
 8008ae4:	e788      	b.n	80089f8 <movement_control_task+0x28>
 8008ae6:	bf00      	nop
 8008ae8:	2000288c 	.word	0x2000288c
 8008aec:	20000460 	.word	0x20000460
 8008af0:	2000279c 	.word	0x2000279c
 8008af4:	20002090 	.word	0x20002090
 8008af8:	20001fec 	.word	0x20001fec
 8008afc:	200021d8 	.word	0x200021d8
 8008b00:	20002134 	.word	0x20002134
 8008b04:	2000183c 	.word	0x2000183c
 8008b08:	20002888 	.word	0x20002888

08008b0c <chassis_motion_control>:
	}
	osThreadTerminate(NULL);
}

void chassis_motion_control(motor_data_t *motorfr, motor_data_t *motorfl,
		motor_data_t *motorbl, motor_data_t *motorbr) {
 8008b0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008b10:	b09a      	sub	sp, #104	; 0x68
 8008b12:	af02      	add	r7, sp, #8
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
 8008b1a:	603b      	str	r3, [r7, #0]
	static uint32_t prev_time;
	//get the angle between the gun and the chassis
	//so that movement is relative to gun, not chassis
	float rel_angle = can_motors[YAW_MOTOR_ID - 1].angle_data.adj_ang;
 8008b1c:	4baf      	ldr	r3, [pc, #700]	; (8008ddc <chassis_motion_control+0x2d0>)
 8008b1e:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	64fb      	str	r3, [r7, #76]	; 0x4c
	float translation_rpm[4] = { 0, };
 8008b26:	f107 0320 	add.w	r3, r7, #32
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	605a      	str	r2, [r3, #4]
 8008b30:	609a      	str	r2, [r3, #8]
 8008b32:	60da      	str	r2, [r3, #12]
	float yaw_rpm[4] = { 0, };
 8008b34:	f107 0310 	add.w	r3, r7, #16
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	605a      	str	r2, [r3, #4]
 8008b3e:	609a      	str	r2, [r3, #8]
 8008b40:	60da      	str	r2, [r3, #12]
	float total_power = 0;
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	64bb      	str	r3, [r7, #72]	; 0x48

	int32_t chassis_rpm = LV1_MAX_SPEED;
 8008b48:	f241 1394 	movw	r3, #4500	; 0x1194
 8008b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
	int32_t chassis_current = LV1_MAX_CURRENT;
 8008b4e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008b52:	65bb      	str	r3, [r7, #88]	; 0x58
	if (referee_limiters.robot_level == 1) {
 8008b54:	4ba2      	ldr	r3, [pc, #648]	; (8008de0 <chassis_motion_control+0x2d4>)
 8008b56:	7b1b      	ldrb	r3, [r3, #12]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d106      	bne.n	8008b6a <chassis_motion_control+0x5e>
		chassis_rpm = LV1_MAX_SPEED;
 8008b5c:	f241 1394 	movw	r3, #4500	; 0x1194
 8008b60:	65fb      	str	r3, [r7, #92]	; 0x5c
		chassis_current = LV1_MAX_CURRENT;
 8008b62:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008b66:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b68:	e014      	b.n	8008b94 <chassis_motion_control+0x88>
	} else if (referee_limiters.robot_level == 2) {
 8008b6a:	4b9d      	ldr	r3, [pc, #628]	; (8008de0 <chassis_motion_control+0x2d4>)
 8008b6c:	7b1b      	ldrb	r3, [r3, #12]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d106      	bne.n	8008b80 <chassis_motion_control+0x74>
		chassis_rpm = LV2_MAX_SPEED;
 8008b72:	f241 7370 	movw	r3, #6000	; 0x1770
 8008b76:	65fb      	str	r3, [r7, #92]	; 0x5c
		chassis_current = LV2_MAX_CURRENT;
 8008b78:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b7e:	e009      	b.n	8008b94 <chassis_motion_control+0x88>
	} else if (referee_limiters.robot_level == 3) {
 8008b80:	4b97      	ldr	r3, [pc, #604]	; (8008de0 <chassis_motion_control+0x2d4>)
 8008b82:	7b1b      	ldrb	r3, [r3, #12]
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d105      	bne.n	8008b94 <chassis_motion_control+0x88>
		chassis_rpm = LV3_MAX_SPEED;
 8008b88:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8008b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
		chassis_current = LV3_MAX_CURRENT;
 8008b8e:	f241 537c 	movw	r3, #5500	; 0x157c
 8008b92:	65bb      	str	r3, [r7, #88]	; 0x58
	}
	chassis_rpm = (chassis_rpm > M3508_MAX_RPM) ? M3508_MAX_RPM : chassis_rpm;
 8008b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b96:	f242 3228 	movw	r2, #9000	; 0x2328
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	bfa8      	it	ge
 8008b9e:	4613      	movge	r3, r2
 8008ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
	//rotate angle of the movement :)
	//MA1513/MA1508E is useful!!

	float rel_forward = ((-chassis_ctrl_data.forward * sin(-rel_angle))
 8008ba2:	4b90      	ldr	r3, [pc, #576]	; (8008de4 <chassis_motion_control+0x2d8>)
 8008ba4:	edd3 7a00 	vldr	s15, [r3]
 8008ba8:	eef1 7a67 	vneg.f32	s15, s15
 8008bac:	ee17 3a90 	vmov	r3, s15
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7f7 fcc9 	bl	8000548 <__aeabi_f2d>
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	460d      	mov	r5, r1
 8008bba:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008bbe:	eef1 7a67 	vneg.f32	s15, s15
 8008bc2:	ee17 3a90 	vmov	r3, s15
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7f7 fcbe 	bl	8000548 <__aeabi_f2d>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	ec43 2b10 	vmov	d0, r2, r3
 8008bd4:	f014 fea4 	bl	801d920 <sin>
 8008bd8:	ec53 2b10 	vmov	r2, r3, d0
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	f7f7 fd0a 	bl	80005f8 <__aeabi_dmul>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4690      	mov	r8, r2
 8008bea:	4699      	mov	r9, r3
			+ (chassis_ctrl_data.horizontal * cos(-rel_angle)));
 8008bec:	4b7d      	ldr	r3, [pc, #500]	; (8008de4 <chassis_motion_control+0x2d8>)
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7f7 fca9 	bl	8000548 <__aeabi_f2d>
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008bfe:	eef1 7a67 	vneg.f32	s15, s15
 8008c02:	ee17 3a90 	vmov	r3, s15
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f7 fc9e 	bl	8000548 <__aeabi_f2d>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	ec43 2b10 	vmov	d0, r2, r3
 8008c14:	f014 fe30 	bl	801d878 <cos>
 8008c18:	ec53 2b10 	vmov	r2, r3, d0
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 fcea 	bl	80005f8 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4640      	mov	r0, r8
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	f7f7 fb2e 	bl	800028c <__adddf3>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
	float rel_forward = ((-chassis_ctrl_data.forward * sin(-rel_angle))
 8008c34:	4610      	mov	r0, r2
 8008c36:	4619      	mov	r1, r3
 8008c38:	f7f7 ffd6 	bl	8000be8 <__aeabi_d2f>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	647b      	str	r3, [r7, #68]	; 0x44
	float rel_horizontal = ((-chassis_ctrl_data.horizontal * cos(-rel_angle))
 8008c40:	4b68      	ldr	r3, [pc, #416]	; (8008de4 <chassis_motion_control+0x2d8>)
 8008c42:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c46:	eef1 7a67 	vneg.f32	s15, s15
 8008c4a:	ee17 3a90 	vmov	r3, s15
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7f7 fc7a 	bl	8000548 <__aeabi_f2d>
 8008c54:	4604      	mov	r4, r0
 8008c56:	460d      	mov	r5, r1
 8008c58:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008c5c:	eef1 7a67 	vneg.f32	s15, s15
 8008c60:	ee17 3a90 	vmov	r3, s15
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7f7 fc6f 	bl	8000548 <__aeabi_f2d>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	ec43 2b10 	vmov	d0, r2, r3
 8008c72:	f014 fe01 	bl	801d878 <cos>
 8008c76:	ec53 2b10 	vmov	r2, r3, d0
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	f7f7 fcbb 	bl	80005f8 <__aeabi_dmul>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4690      	mov	r8, r2
 8008c88:	4699      	mov	r9, r3
			+ (chassis_ctrl_data.forward * -sin(-rel_angle)));
 8008c8a:	4b56      	ldr	r3, [pc, #344]	; (8008de4 <chassis_motion_control+0x2d8>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7f7 fc5a 	bl	8000548 <__aeabi_f2d>
 8008c94:	4604      	mov	r4, r0
 8008c96:	460d      	mov	r5, r1
 8008c98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008c9a:	f7f7 fc55 	bl	8000548 <__aeabi_f2d>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	ec43 2b10 	vmov	d0, r2, r3
 8008ca6:	f014 fe3b 	bl	801d920 <sin>
 8008caa:	ec53 2b10 	vmov	r2, r3, d0
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 fca1 	bl	80005f8 <__aeabi_dmul>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4640      	mov	r0, r8
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	f7f7 fae5 	bl	800028c <__adddf3>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
	float rel_horizontal = ((-chassis_ctrl_data.horizontal * cos(-rel_angle))
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f7f7 ff8d 	bl	8000be8 <__aeabi_d2f>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	643b      	str	r3, [r7, #64]	; 0x40
	float rel_yaw = chassis_ctrl_data.yaw;
 8008cd2:	4b44      	ldr	r3, [pc, #272]	; (8008de4 <chassis_motion_control+0x2d8>)
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	63fb      	str	r3, [r7, #60]	; 0x3c

	translation_rpm[0] = ((rel_forward * FR_VY_MULT)
 8008cd8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008cdc:	eeb1 7a67 	vneg.f32	s14, s15
			+ (rel_horizontal * FR_VX_MULT));
 8008ce0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
	translation_rpm[0] = ((rel_forward * FR_VY_MULT)
 8008ce8:	edc7 7a08 	vstr	s15, [r7, #32]
	yaw_rpm[0] = rel_yaw * motor_yaw_mult[0] * CHASSIS_YAW_MAX_RPM;
 8008cec:	4b3e      	ldr	r3, [pc, #248]	; (8008de8 <chassis_motion_control+0x2dc>)
 8008cee:	ed93 7a00 	vldr	s14, [r3]
 8008cf2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfa:	edc7 7a04 	vstr	s15, [r7, #16]

	translation_rpm[1] = ((rel_forward * FL_VY_MULT)
			+ (rel_horizontal * FL_VX_MULT));
 8008cfe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008d02:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008d06:	ee77 7a67 	vsub.f32	s15, s14, s15
	translation_rpm[1] = ((rel_forward * FL_VY_MULT)
 8008d0a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	yaw_rpm[1] = rel_yaw * motor_yaw_mult[1] * CHASSIS_YAW_MAX_RPM;
 8008d0e:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <chassis_motion_control+0x2dc>)
 8008d10:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d1c:	edc7 7a05 	vstr	s15, [r7, #20]

	translation_rpm[2] = ((rel_forward * BL_VY_MULT)
			+ (rel_horizontal * BL_VX_MULT));
 8008d20:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008d24:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008d28:	ee77 7a27 	vadd.f32	s15, s14, s15
	translation_rpm[2] = ((rel_forward * BL_VY_MULT)
 8008d2c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	yaw_rpm[2] = rel_yaw * motor_yaw_mult[2] * CHASSIS_YAW_MAX_RPM;
 8008d30:	4b2d      	ldr	r3, [pc, #180]	; (8008de8 <chassis_motion_control+0x2dc>)
 8008d32:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d36:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3e:	edc7 7a06 	vstr	s15, [r7, #24]

	translation_rpm[3] = ((rel_forward * BR_VY_MULT)
			+ (rel_horizontal * BR_VX_MULT));
 8008d42:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008d46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
	translation_rpm[3] = ((rel_forward * BR_VY_MULT)
 8008d4e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	yaw_rpm[3] = rel_yaw * motor_yaw_mult[3] * CHASSIS_YAW_MAX_RPM;
 8008d52:	4b25      	ldr	r3, [pc, #148]	; (8008de8 <chassis_motion_control+0x2dc>)
 8008d54:	ed93 7a03 	vldr	s14, [r3, #12]
 8008d58:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d60:	edc7 7a07 	vstr	s15, [r7, #28]

	//if forward + horizontal + yaw > 1 for any wheel
	//scale all the RPM for all the wheels equally so that one wheel does not exceed max RPM
	float rpm_mult = 1;
 8008d64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008d68:	657b      	str	r3, [r7, #84]	; 0x54
	float yaw_scale = 1;
 8008d6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008d6e:	63bb      	str	r3, [r7, #56]	; 0x38
	float trans_scale = 1;
 8008d70:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008d74:	637b      	str	r3, [r7, #52]	; 0x34
	for (uint8_t i = 0; i < 4; i++) {
 8008d76:	2300      	movs	r3, #0
 8008d78:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008d7c:	e025      	b.n	8008dca <chassis_motion_control+0x2be>
		float abs_total = fabs(translation_rpm[i] + yaw_rpm[i]);
 8008d7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	3360      	adds	r3, #96	; 0x60
 8008d86:	443b      	add	r3, r7
 8008d88:	3b40      	subs	r3, #64	; 0x40
 8008d8a:	ed93 7a00 	vldr	s14, [r3]
 8008d8e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	3360      	adds	r3, #96	; 0x60
 8008d96:	443b      	add	r3, r7
 8008d98:	3b50      	subs	r3, #80	; 0x50
 8008d9a:	edd3 7a00 	vldr	s15, [r3]
 8008d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008da2:	eef0 7ae7 	vabs.f32	s15, s15
 8008da6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		if (abs_total > rpm_mult) {
 8008daa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008dae:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dba:	dd01      	ble.n	8008dc0 <chassis_motion_control+0x2b4>
			rpm_mult = abs_total;
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	657b      	str	r3, [r7, #84]	; 0x54
	for (uint8_t i = 0; i < 4; i++) {
 8008dc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008dca:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d9d5      	bls.n	8008d7e <chassis_motion_control+0x272>
		}
	}

	for (uint8_t j = 0; j < 4; j++) {
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8008dd8:	e032      	b.n	8008e40 <chassis_motion_control+0x334>
 8008dda:	bf00      	nop
 8008ddc:	2000183c 	.word	0x2000183c
 8008de0:	2000289c 	.word	0x2000289c
 8008de4:	2000279c 	.word	0x2000279c
 8008de8:	2000288c 	.word	0x2000288c
		translation_rpm[j] = (translation_rpm[j] + yaw_rpm[j]) * chassis_rpm
 8008dec:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	3360      	adds	r3, #96	; 0x60
 8008df4:	443b      	add	r3, r7
 8008df6:	3b40      	subs	r3, #64	; 0x40
 8008df8:	ed93 7a00 	vldr	s14, [r3]
 8008dfc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	3360      	adds	r3, #96	; 0x60
 8008e04:	443b      	add	r3, r7
 8008e06:	3b50      	subs	r3, #80	; 0x50
 8008e08:	edd3 7a00 	vldr	s15, [r3]
 8008e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008e1e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
				/ rpm_mult;
 8008e22:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
		translation_rpm[j] = (translation_rpm[j] + yaw_rpm[j]) * chassis_rpm
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	3360      	adds	r3, #96	; 0x60
 8008e2e:	443b      	add	r3, r7
 8008e30:	3b40      	subs	r3, #64	; 0x40
 8008e32:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t j = 0; j < 4; j++) {
 8008e36:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8008e40:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d9d1      	bls.n	8008dec <chassis_motion_control+0x2e0>
	}

	motorfr->rpm_pid.max_out = chassis_current;
 8008e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e4a:	ee07 3a90 	vmov	s15, r3
 8008e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motorfl->rpm_pid.max_out = chassis_current;
 8008e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motorbl->rpm_pid.max_out = chassis_current;
 8008e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motorbr->rpm_pid.max_out = chassis_current;
 8008e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	//calculate the outputs for each motor
	speed_pid(translation_rpm[0], motorfr->raw_data.rpm, &motorfr->rpm_pid);
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7f7 fb5c 	bl	8000548 <__aeabi_f2d>
 8008e90:	4604      	mov	r4, r0
 8008e92:	460d      	mov	r5, r1
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7f7 fb42 	bl	8000524 <__aeabi_i2d>
 8008ea0:	4680      	mov	r8, r0
 8008ea2:	4689      	mov	r9, r1
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3310      	adds	r3, #16
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	ec49 8b11 	vmov	d1, r8, r9
 8008eae:	ec45 4b10 	vmov	d0, r4, r5
 8008eb2:	f7ff fa19 	bl	80082e8 <speed_pid>
	total_power += fabs(motorfr->rpm_pid.output);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008ebc:	eef0 7ae7 	vabs.f32	s15, s15
 8008ec0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ec8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	speed_pid(translation_rpm[1], motorfl->raw_data.rpm, &motorfl->rpm_pid);
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f7 fb3a 	bl	8000548 <__aeabi_f2d>
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f7 fb20 	bl	8000524 <__aeabi_i2d>
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	4689      	mov	r9, r1
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	3310      	adds	r3, #16
 8008eec:	4618      	mov	r0, r3
 8008eee:	ec49 8b11 	vmov	d1, r8, r9
 8008ef2:	ec45 4b10 	vmov	d0, r4, r5
 8008ef6:	f7ff f9f7 	bl	80082e8 <speed_pid>
	total_power += fabs(motorfl->rpm_pid.output);
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008f00:	eef0 7ae7 	vabs.f32	s15, s15
 8008f04:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f0c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	speed_pid(translation_rpm[2], motorbl->raw_data.rpm, &motorbl->rpm_pid);
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7f7 fb18 	bl	8000548 <__aeabi_f2d>
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7f7 fafe 	bl	8000524 <__aeabi_i2d>
 8008f28:	4680      	mov	r8, r0
 8008f2a:	4689      	mov	r9, r1
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3310      	adds	r3, #16
 8008f30:	4618      	mov	r0, r3
 8008f32:	ec49 8b11 	vmov	d1, r8, r9
 8008f36:	ec45 4b10 	vmov	d0, r4, r5
 8008f3a:	f7ff f9d5 	bl	80082e8 <speed_pid>
	total_power += fabs(motorbl->rpm_pid.output);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008f44:	eef0 7ae7 	vabs.f32	s15, s15
 8008f48:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f50:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	speed_pid(translation_rpm[3], motorbr->raw_data.rpm, &motorbr->rpm_pid);
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7f7 faf6 	bl	8000548 <__aeabi_f2d>
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	460d      	mov	r5, r1
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7f7 fadc 	bl	8000524 <__aeabi_i2d>
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	4689      	mov	r9, r1
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	3310      	adds	r3, #16
 8008f74:	4618      	mov	r0, r3
 8008f76:	ec49 8b11 	vmov	d1, r8, r9
 8008f7a:	ec45 4b10 	vmov	d0, r4, r5
 8008f7e:	f7ff f9b3 	bl	80082e8 <speed_pid>
	total_power += fabs(motorbr->rpm_pid.output);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008f88:	eef0 7ae7 	vabs.f32	s15, s15
 8008f8c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f94:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, BL_MOTOR_ID,
 8008f98:	230f      	movs	r3, #15
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	220d      	movs	r2, #13
 8008fa0:	210e      	movs	r1, #14
 8008fa2:	4804      	ldr	r0, [pc, #16]	; (8008fb4 <chassis_motion_control+0x4a8>)
 8008fa4:	f7ff fa46 	bl	8008434 <motor_send_can>
	BR_MOTOR_ID);
}
 8008fa8:	bf00      	nop
 8008faa:	3760      	adds	r7, #96	; 0x60
 8008fac:	46bd      	mov	sp, r7
 8008fae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008fb2:	bf00      	nop
 8008fb4:	2000183c 	.word	0x2000183c

08008fb8 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8008fc2:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008fc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8008fc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	db0a      	blt.n	8008fe8 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8008fd2:	ed97 0a01 	vldr	s0, [r7, #4]
 8008fd6:	f014 fd5d 	bl	801da94 <sqrtf>
 8008fda:	eef0 7a40 	vmov.f32	s15, s0
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e005      	b.n	8008ff4 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	f04f 0200 	mov.w	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008ff0:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	0000      	movs	r0, r0
	...

08009000 <referee_processing_task>:
ref_magazine_data_t ref_mag_data;
uint32_t ref_mag_data_txno = 0;
uint8_t g_ref_tx_seq = 0;


void referee_processing_task(void *argument) {
 8009000:	b5b0      	push	{r4, r5, r7, lr}
 8009002:	b0ca      	sub	sp, #296	; 0x128
 8009004:	af00      	add	r7, sp, #0
 8009006:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800900a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800900e:	6018      	str	r0, [r3, #0]
	referee_limiters.robot_level = 0;
 8009010:	4ba0      	ldr	r3, [pc, #640]	; (8009294 <referee_processing_task+0x294>)
 8009012:	2200      	movs	r2, #0
 8009014:	731a      	strb	r2, [r3, #12]
	queue_t referee_uart_q;
	uint8_t ref_buffer[2];
	ref_processing_status_t proc_status;
	referee_limiters.feeding_speed = LV1_FEEDER;
 8009016:	4b9f      	ldr	r3, [pc, #636]	; (8009294 <referee_processing_task+0x294>)
 8009018:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800901c:	801a      	strh	r2, [r3, #0]
	referee_limiters.projectile_speed = LV1_PROJECTILE;
 800901e:	4b9d      	ldr	r3, [pc, #628]	; (8009294 <referee_processing_task+0x294>)
 8009020:	220d      	movs	r2, #13
 8009022:	805a      	strh	r2, [r3, #2]
	referee_limiters.wheel_power_limit = LV1_POWER * CHASSIS_POWER_MULT;
 8009024:	4b9b      	ldr	r3, [pc, #620]	; (8009294 <referee_processing_task+0x294>)
 8009026:	4a9c      	ldr	r2, [pc, #624]	; (8009298 <referee_processing_task+0x298>)
 8009028:	605a      	str	r2, [r3, #4]
	referee_limiters.robot_level = 1;
 800902a:	4b9a      	ldr	r3, [pc, #616]	; (8009294 <referee_processing_task+0x294>)
 800902c:	2201      	movs	r2, #1
 800902e:	731a      	strb	r2, [r3, #12]
	status_led(7, on_led);
 8009030:	2100      	movs	r1, #0
 8009032:	2007      	movs	r0, #7
 8009034:	f7f8 ff82 	bl	8001f3c <status_led>
	status_led(8, off_led);
 8009038:	2101      	movs	r1, #1
 800903a:	2008      	movs	r0, #8
 800903c:	f7f8 ff7e 	bl	8001f3c <status_led>
	uint8_t graphic_sent = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	ref_robot_data.robot_id = 0;
 8009046:	4b95      	ldr	r3, [pc, #596]	; (800929c <referee_processing_task+0x29c>)
 8009048:	2200      	movs	r2, #0
 800904a:	701a      	strb	r2, [r3, #0]
	ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800904c:	f107 030c 	add.w	r3, r7, #12
 8009050:	f107 0108 	add.w	r1, r7, #8
 8009054:	2202      	movs	r2, #2
 8009056:	4892      	ldr	r0, [pc, #584]	; (80092a0 <referee_processing_task+0x2a0>)
 8009058:	f7f9 fce8 	bl	8002a2c <ref_usart_start>
	while (1) {
//			uint32_t ref_check = ulTaskNotifyTake(pdTRUE, 5);
		status_led(5, on_led);
 800905c:	2100      	movs	r1, #0
 800905e:	2005      	movs	r0, #5
 8009060:	f7f8 ff6c 	bl	8001f3c <status_led>
		if (queue_get_size(&referee_uart_q) > 7) {
 8009064:	f107 030c 	add.w	r3, r7, #12
 8009068:	4618      	mov	r0, r3
 800906a:	f7f9 f9e6 	bl	800243a <queue_get_size>
 800906e:	4603      	mov	r3, r0
 8009070:	2b07      	cmp	r3, #7
 8009072:	f240 80c1 	bls.w	80091f8 <referee_processing_task+0x1f8>
			while (queue_get_size(&referee_uart_q) > 7) {
 8009076:	e0b4      	b.n	80091e2 <referee_processing_task+0x1e2>
				proc_status = ref_process_data(&referee_uart_q, &msg_buffer);
 8009078:	f107 030c 	add.w	r3, r7, #12
 800907c:	4989      	ldr	r1, [pc, #548]	; (80092a4 <referee_processing_task+0x2a4>)
 800907e:	4618      	mov	r0, r3
 8009080:	f7f9 f9e8 	bl	8002454 <ref_process_data>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				if (proc_status == PROCESS_SUCCESS) {
 800908a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800908e:	2b00      	cmp	r3, #0
 8009090:	f040 80a3 	bne.w	80091da <referee_processing_task+0x1da>
					switch (msg_buffer.cmd_id) {
 8009094:	4b83      	ldr	r3, [pc, #524]	; (80092a4 <referee_processing_task+0x2a4>)
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800909c:	f300 809b 	bgt.w	80091d6 <referee_processing_task+0x1d6>
 80090a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090a4:	dc04      	bgt.n	80090b0 <referee_processing_task+0xb0>
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d029      	beq.n	80090fe <referee_processing_task+0xfe>
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d073      	beq.n	8009196 <referee_processing_task+0x196>
								sizeof(ref_magazine_data_t));
						ref_mag_data_txno++;
						//add in the memcpys here
						break;
					default:
						break;
 80090ae:	e092      	b.n	80091d6 <referee_processing_task+0x1d6>
					switch (msg_buffer.cmd_id) {
 80090b0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80090b4:	2b07      	cmp	r3, #7
 80090b6:	f200 808e 	bhi.w	80091d6 <referee_processing_task+0x1d6>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <referee_processing_task+0xc0>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	08009119 	.word	0x08009119
 80090c4:	08009165 	.word	0x08009165
 80090c8:	08009147 	.word	0x08009147
 80090cc:	080091d7 	.word	0x080091d7
 80090d0:	080091d7 	.word	0x080091d7
 80090d4:	08009183 	.word	0x08009183
 80090d8:	080090e1 	.word	0x080090e1
 80090dc:	080091bd 	.word	0x080091bd
						memcpy(&ref_shoot_data, &msg_buffer.data,
 80090e0:	4a71      	ldr	r2, [pc, #452]	; (80092a8 <referee_processing_task+0x2a8>)
 80090e2:	4b70      	ldr	r3, [pc, #448]	; (80092a4 <referee_processing_task+0x2a4>)
 80090e4:	3302      	adds	r3, #2
 80090e6:	6818      	ldr	r0, [r3, #0]
 80090e8:	6010      	str	r0, [r2, #0]
 80090ea:	8899      	ldrh	r1, [r3, #4]
 80090ec:	799b      	ldrb	r3, [r3, #6]
 80090ee:	8091      	strh	r1, [r2, #4]
 80090f0:	7193      	strb	r3, [r2, #6]
						ref_shoot_data_txno++;
 80090f2:	4b6e      	ldr	r3, [pc, #440]	; (80092ac <referee_processing_task+0x2ac>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3301      	adds	r3, #1
 80090f8:	4a6c      	ldr	r2, [pc, #432]	; (80092ac <referee_processing_task+0x2ac>)
 80090fa:	6013      	str	r3, [r2, #0]
						break;
 80090fc:	e071      	b.n	80091e2 <referee_processing_task+0x1e2>
							memcpy(&ref_game_state, &msg_buffer.data,
 80090fe:	4a6c      	ldr	r2, [pc, #432]	; (80092b0 <referee_processing_task+0x2b0>)
 8009100:	4b68      	ldr	r3, [pc, #416]	; (80092a4 <referee_processing_task+0x2a4>)
 8009102:	3302      	adds	r3, #2
 8009104:	8819      	ldrh	r1, [r3, #0]
 8009106:	789b      	ldrb	r3, [r3, #2]
 8009108:	8011      	strh	r1, [r2, #0]
 800910a:	7093      	strb	r3, [r2, #2]
							ref_game_state_txno++;
 800910c:	4b69      	ldr	r3, [pc, #420]	; (80092b4 <referee_processing_task+0x2b4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	4a68      	ldr	r2, [pc, #416]	; (80092b4 <referee_processing_task+0x2b4>)
 8009114:	6013      	str	r3, [r2, #0]
							break;
 8009116:	e064      	b.n	80091e2 <referee_processing_task+0x1e2>
						memcpy(&ref_robot_data, &msg_buffer.data,
 8009118:	4a60      	ldr	r2, [pc, #384]	; (800929c <referee_processing_task+0x29c>)
 800911a:	4b62      	ldr	r3, [pc, #392]	; (80092a4 <referee_processing_task+0x2a4>)
 800911c:	4614      	mov	r4, r2
 800911e:	1c9d      	adds	r5, r3, #2
 8009120:	6828      	ldr	r0, [r5, #0]
 8009122:	6869      	ldr	r1, [r5, #4]
 8009124:	68aa      	ldr	r2, [r5, #8]
 8009126:	68eb      	ldr	r3, [r5, #12]
 8009128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800912a:	6928      	ldr	r0, [r5, #16]
 800912c:	6969      	ldr	r1, [r5, #20]
 800912e:	c403      	stmia	r4!, {r0, r1}
 8009130:	8b2b      	ldrh	r3, [r5, #24]
 8009132:	7eaa      	ldrb	r2, [r5, #26]
 8009134:	8023      	strh	r3, [r4, #0]
 8009136:	4613      	mov	r3, r2
 8009138:	70a3      	strb	r3, [r4, #2]
						ref_robot_data_txno++;
 800913a:	4b5f      	ldr	r3, [pc, #380]	; (80092b8 <referee_processing_task+0x2b8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3301      	adds	r3, #1
 8009140:	4a5d      	ldr	r2, [pc, #372]	; (80092b8 <referee_processing_task+0x2b8>)
 8009142:	6013      	str	r3, [r2, #0]
						break;
 8009144:	e04d      	b.n	80091e2 <referee_processing_task+0x1e2>
						memcpy(&ref_robot_pos, &msg_buffer.data,
 8009146:	4a5d      	ldr	r2, [pc, #372]	; (80092bc <referee_processing_task+0x2bc>)
 8009148:	4b56      	ldr	r3, [pc, #344]	; (80092a4 <referee_processing_task+0x2a4>)
 800914a:	4614      	mov	r4, r2
 800914c:	3302      	adds	r3, #2
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	6859      	ldr	r1, [r3, #4]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
						ref_robot_pos_txno++;
 8009158:	4b59      	ldr	r3, [pc, #356]	; (80092c0 <referee_processing_task+0x2c0>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3301      	adds	r3, #1
 800915e:	4a58      	ldr	r2, [pc, #352]	; (80092c0 <referee_processing_task+0x2c0>)
 8009160:	6013      	str	r3, [r2, #0]
						break;
 8009162:	e03e      	b.n	80091e2 <referee_processing_task+0x1e2>
						memcpy(&ref_power_data, &msg_buffer.data,
 8009164:	4b57      	ldr	r3, [pc, #348]	; (80092c4 <referee_processing_task+0x2c4>)
 8009166:	4a4f      	ldr	r2, [pc, #316]	; (80092a4 <referee_processing_task+0x2a4>)
 8009168:	1c94      	adds	r4, r2, #2
 800916a:	6820      	ldr	r0, [r4, #0]
 800916c:	6861      	ldr	r1, [r4, #4]
 800916e:	68a2      	ldr	r2, [r4, #8]
 8009170:	c307      	stmia	r3!, {r0, r1, r2}
 8009172:	89a2      	ldrh	r2, [r4, #12]
 8009174:	801a      	strh	r2, [r3, #0]
						ref_power_data_txno++;
 8009176:	4b54      	ldr	r3, [pc, #336]	; (80092c8 <referee_processing_task+0x2c8>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3301      	adds	r3, #1
 800917c:	4a52      	ldr	r2, [pc, #328]	; (80092c8 <referee_processing_task+0x2c8>)
 800917e:	6013      	str	r3, [r2, #0]
						break;
 8009180:	e02f      	b.n	80091e2 <referee_processing_task+0x1e2>
 8009182:	4b48      	ldr	r3, [pc, #288]	; (80092a4 <referee_processing_task+0x2a4>)
 8009184:	789a      	ldrb	r2, [r3, #2]
						memcpy(&ref_dmg_data, &msg_buffer.data,
 8009186:	4b51      	ldr	r3, [pc, #324]	; (80092cc <referee_processing_task+0x2cc>)
 8009188:	701a      	strb	r2, [r3, #0]
						ref_dmg_data_txno++;
 800918a:	4b51      	ldr	r3, [pc, #324]	; (80092d0 <referee_processing_task+0x2d0>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3301      	adds	r3, #1
 8009190:	4a4f      	ldr	r2, [pc, #316]	; (80092d0 <referee_processing_task+0x2d0>)
 8009192:	6013      	str	r3, [r2, #0]
						break;
 8009194:	e025      	b.n	80091e2 <referee_processing_task+0x1e2>
						memcpy(&ref_robot_hp, &msg_buffer.data,
 8009196:	4a4f      	ldr	r2, [pc, #316]	; (80092d4 <referee_processing_task+0x2d4>)
 8009198:	4b42      	ldr	r3, [pc, #264]	; (80092a4 <referee_processing_task+0x2a4>)
 800919a:	4614      	mov	r4, r2
 800919c:	1c9d      	adds	r5, r3, #2
 800919e:	6828      	ldr	r0, [r5, #0]
 80091a0:	6869      	ldr	r1, [r5, #4]
 80091a2:	68aa      	ldr	r2, [r5, #8]
 80091a4:	68eb      	ldr	r3, [r5, #12]
 80091a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091a8:	6928      	ldr	r0, [r5, #16]
 80091aa:	6969      	ldr	r1, [r5, #20]
 80091ac:	69aa      	ldr	r2, [r5, #24]
 80091ae:	c407      	stmia	r4!, {r0, r1, r2}
						ref_robot_hp_txno++;
 80091b0:	4b49      	ldr	r3, [pc, #292]	; (80092d8 <referee_processing_task+0x2d8>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	4a48      	ldr	r2, [pc, #288]	; (80092d8 <referee_processing_task+0x2d8>)
 80091b8:	6013      	str	r3, [r2, #0]
						break;
 80091ba:	e012      	b.n	80091e2 <referee_processing_task+0x1e2>
						memcpy(&ref_mag_data, &msg_buffer.data,
 80091bc:	4a47      	ldr	r2, [pc, #284]	; (80092dc <referee_processing_task+0x2dc>)
 80091be:	4b39      	ldr	r3, [pc, #228]	; (80092a4 <referee_processing_task+0x2a4>)
 80091c0:	3302      	adds	r3, #2
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	6010      	str	r0, [r2, #0]
 80091c6:	889b      	ldrh	r3, [r3, #4]
 80091c8:	8093      	strh	r3, [r2, #4]
						ref_mag_data_txno++;
 80091ca:	4b45      	ldr	r3, [pc, #276]	; (80092e0 <referee_processing_task+0x2e0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3301      	adds	r3, #1
 80091d0:	4a43      	ldr	r2, [pc, #268]	; (80092e0 <referee_processing_task+0x2e0>)
 80091d2:	6013      	str	r3, [r2, #0]
						break;
 80091d4:	e005      	b.n	80091e2 <referee_processing_task+0x1e2>
						break;
 80091d6:	bf00      	nop
 80091d8:	e003      	b.n	80091e2 <referee_processing_task+0x1e2>
					}
//						if (msg_buffer.cmd_id == REF_ROBOT_SHOOT_DATA_CMD_ID){
//							xQueueSend(uart_data_queue, &msg_buffer, 0);
//						}
				} else if (proc_status == INSUFFICIENT_DATA) {
 80091da:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d009      	beq.n	80091f6 <referee_processing_task+0x1f6>
			while (queue_get_size(&referee_uart_q) > 7) {
 80091e2:	f107 030c 	add.w	r3, r7, #12
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7f9 f927 	bl	800243a <queue_get_size>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b07      	cmp	r3, #7
 80091f0:	f63f af42 	bhi.w	8009078 <referee_processing_task+0x78>
 80091f4:	e000      	b.n	80091f8 <referee_processing_task+0x1f8>
					break;
 80091f6:	bf00      	nop
				}
			}
		}

		status_led(5, off_led);
 80091f8:	2101      	movs	r1, #1
 80091fa:	2005      	movs	r0, #5
 80091fc:	f7f8 fe9e 	bl	8001f3c <status_led>
		static uint32_t last_sent;

		status_led(5, on_led);
 8009200:	2100      	movs	r1, #0
 8009202:	2005      	movs	r0, #5
 8009204:	f7f8 fe9a 	bl	8001f3c <status_led>
		if (ref_robot_data.robot_level == 1) {
 8009208:	4b24      	ldr	r3, [pc, #144]	; (800929c <referee_processing_task+0x29c>)
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d112      	bne.n	8009236 <referee_processing_task+0x236>
			referee_limiters.feeding_speed = LV1_FEEDER;
 8009210:	4b20      	ldr	r3, [pc, #128]	; (8009294 <referee_processing_task+0x294>)
 8009212:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009216:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 8009218:	4b1e      	ldr	r3, [pc, #120]	; (8009294 <referee_processing_task+0x294>)
 800921a:	220d      	movs	r2, #13
 800921c:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 1;
 800921e:	4b1d      	ldr	r3, [pc, #116]	; (8009294 <referee_processing_task+0x294>)
 8009220:	2201      	movs	r2, #1
 8009222:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 8009224:	2100      	movs	r1, #0
 8009226:	2007      	movs	r0, #7
 8009228:	f7f8 fe88 	bl	8001f3c <status_led>
			status_led(8, off_led);
 800922c:	2101      	movs	r1, #1
 800922e:	2008      	movs	r0, #8
 8009230:	f7f8 fe84 	bl	8001f3c <status_led>
 8009234:	e05d      	b.n	80092f2 <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 2) {
 8009236:	4b19      	ldr	r3, [pc, #100]	; (800929c <referee_processing_task+0x29c>)
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d112      	bne.n	8009264 <referee_processing_task+0x264>
			referee_limiters.feeding_speed = LV2_FEEDER;
 800923e:	4b15      	ldr	r3, [pc, #84]	; (8009294 <referee_processing_task+0x294>)
 8009240:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009244:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV2_PROJECTILE;
 8009246:	4b13      	ldr	r3, [pc, #76]	; (8009294 <referee_processing_task+0x294>)
 8009248:	220d      	movs	r2, #13
 800924a:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 2;
 800924c:	4b11      	ldr	r3, [pc, #68]	; (8009294 <referee_processing_task+0x294>)
 800924e:	2202      	movs	r2, #2
 8009250:	731a      	strb	r2, [r3, #12]
			status_led(7, off_led);
 8009252:	2101      	movs	r1, #1
 8009254:	2007      	movs	r0, #7
 8009256:	f7f8 fe71 	bl	8001f3c <status_led>
			status_led(8, on_led);
 800925a:	2100      	movs	r1, #0
 800925c:	2008      	movs	r0, #8
 800925e:	f7f8 fe6d 	bl	8001f3c <status_led>
 8009262:	e046      	b.n	80092f2 <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 3) {
 8009264:	4b0d      	ldr	r3, [pc, #52]	; (800929c <referee_processing_task+0x29c>)
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d13b      	bne.n	80092e4 <referee_processing_task+0x2e4>
			referee_limiters.feeding_speed = LV3_FEEDER;
 800926c:	4b09      	ldr	r3, [pc, #36]	; (8009294 <referee_processing_task+0x294>)
 800926e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009272:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV3_PROJECTILE;
 8009274:	4b07      	ldr	r3, [pc, #28]	; (8009294 <referee_processing_task+0x294>)
 8009276:	220d      	movs	r2, #13
 8009278:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 3;
 800927a:	4b06      	ldr	r3, [pc, #24]	; (8009294 <referee_processing_task+0x294>)
 800927c:	2203      	movs	r2, #3
 800927e:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 8009280:	2100      	movs	r1, #0
 8009282:	2007      	movs	r0, #7
 8009284:	f7f8 fe5a 	bl	8001f3c <status_led>
			status_led(8, on_led);
 8009288:	2100      	movs	r1, #0
 800928a:	2008      	movs	r0, #8
 800928c:	f7f8 fe56 	bl	8001f3c <status_led>
 8009290:	e02f      	b.n	80092f2 <referee_processing_task+0x2f2>
 8009292:	bf00      	nop
 8009294:	2000289c 	.word	0x2000289c
 8009298:	42700000 	.word	0x42700000
 800929c:	20002920 	.word	0x20002920
 80092a0:	20001678 	.word	0x20001678
 80092a4:	200028b4 	.word	0x200028b4
 80092a8:	20002970 	.word	0x20002970
 80092ac:	20002978 	.word	0x20002978
 80092b0:	200028f8 	.word	0x200028f8
 80092b4:	200028fc 	.word	0x200028fc
 80092b8:	2000293c 	.word	0x2000293c
 80092bc:	20002954 	.word	0x20002954
 80092c0:	20002964 	.word	0x20002964
 80092c4:	20002940 	.word	0x20002940
 80092c8:	20002950 	.word	0x20002950
 80092cc:	20002968 	.word	0x20002968
 80092d0:	2000296c 	.word	0x2000296c
 80092d4:	20002900 	.word	0x20002900
 80092d8:	2000291c 	.word	0x2000291c
 80092dc:	2000297c 	.word	0x2000297c
 80092e0:	20002984 	.word	0x20002984
		} else {
			referee_limiters.feeding_speed = LV1_FEEDER;
 80092e4:	4b44      	ldr	r3, [pc, #272]	; (80093f8 <referee_processing_task+0x3f8>)
 80092e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80092ea:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 80092ec:	4b42      	ldr	r3, [pc, #264]	; (80093f8 <referee_processing_task+0x3f8>)
 80092ee:	220d      	movs	r2, #13
 80092f0:	805a      	strh	r2, [r3, #2]
		}
		if (ref_robot_data.robot_level != 0) {
 80092f2:	4b42      	ldr	r3, [pc, #264]	; (80093fc <referee_processing_task+0x3fc>)
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d06e      	beq.n	80093d8 <referee_processing_task+0x3d8>
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 80092fa:	4b41      	ldr	r3, [pc, #260]	; (8009400 <referee_processing_task+0x400>)
 80092fc:	891b      	ldrh	r3, [r3, #8]
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7a67 	vcvt.f32.u32	s15, s15
					/ 40) + 0.01);
 8009306:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8009404 <referee_processing_task+0x404>
 800930a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800930e:	ee16 0a90 	vmov	r0, s13
 8009312:	f7f7 f919 	bl	8000548 <__aeabi_f2d>
 8009316:	a336      	add	r3, pc, #216	; (adr r3, 80093f0 <referee_processing_task+0x3f0>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f6 ffb6 	bl	800028c <__adddf3>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 8009324:	4610      	mov	r0, r2
 8009326:	4619      	mov	r1, r3
 8009328:	f7f7 fc5e 	bl	8000be8 <__aeabi_d2f>
 800932c:	4603      	mov	r3, r0
 800932e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			temp_buffer = (temp_buffer > 1) ? 1 : temp_buffer;
 8009332:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8009336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800933a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800933e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009342:	dd02      	ble.n	800934a <referee_processing_task+0x34a>
 8009344:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009348:	e001      	b.n	800934e <referee_processing_task+0x34e>
 800934a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800934e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			referee_limiters.wheel_buffer_limit = temp_buffer * temp_buffer;
 8009352:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8009356:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800935a:	4b27      	ldr	r3, [pc, #156]	; (80093f8 <referee_processing_task+0x3f8>)
 800935c:	edc3 7a02 	vstr	s15, [r3, #8]
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 8009360:	4b27      	ldr	r3, [pc, #156]	; (8009400 <referee_processing_task+0x400>)
 8009362:	ed93 7a01 	vldr	s14, [r3, #4]
 8009366:	4b25      	ldr	r3, [pc, #148]	; (80093fc <referee_processing_task+0x3fc>)
 8009368:	8b1b      	ldrh	r3, [r3, #24]
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009372:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009376:	ee16 0a90 	vmov	r0, s13
 800937a:	f7f7 f8e5 	bl	8000548 <__aeabi_f2d>
					) * 0.5) + 0.5;
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	4b21      	ldr	r3, [pc, #132]	; (8009408 <referee_processing_task+0x408>)
 8009384:	f7f7 f938 	bl	80005f8 <__aeabi_dmul>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4610      	mov	r0, r2
 800938e:	4619      	mov	r1, r3
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	4b1c      	ldr	r3, [pc, #112]	; (8009408 <referee_processing_task+0x408>)
 8009396:	f7f6 ff79 	bl	800028c <__adddf3>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 800939e:	4610      	mov	r0, r2
 80093a0:	4619      	mov	r1, r3
 80093a2:	f7f7 fc21 	bl	8000be8 <__aeabi_d2f>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			temp_power = (temp_power > 1) ? 1 : temp_power;
 80093ac:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80093b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093bc:	dd02      	ble.n	80093c4 <referee_processing_task+0x3c4>
 80093be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80093c2:	e001      	b.n	80093c8 <referee_processing_task+0x3c8>
 80093c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80093c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			arm_sqrt_f32(temp_power, &referee_limiters.wheel_power_limit);
 80093cc:	480f      	ldr	r0, [pc, #60]	; (800940c <referee_processing_task+0x40c>)
 80093ce:	ed97 0a47 	vldr	s0, [r7, #284]	; 0x11c
 80093d2:	f7ff fdf1 	bl	8008fb8 <arm_sqrt_f32>
 80093d6:	e007      	b.n	80093e8 <referee_processing_task+0x3e8>
		} else {
			referee_limiters.wheel_buffer_limit = 1;
 80093d8:	4b07      	ldr	r3, [pc, #28]	; (80093f8 <referee_processing_task+0x3f8>)
 80093da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80093de:	609a      	str	r2, [r3, #8]
			referee_limiters.wheel_power_limit = 1;
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <referee_processing_task+0x3f8>)
 80093e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80093e6:	605a      	str	r2, [r3, #4]

		}
		vTaskDelay(10);
 80093e8:	200a      	movs	r0, #10
 80093ea:	f00d f901 	bl	80165f0 <vTaskDelay>
	while (1) {
 80093ee:	e635      	b.n	800905c <referee_processing_task+0x5c>
 80093f0:	47ae147b 	.word	0x47ae147b
 80093f4:	3f847ae1 	.word	0x3f847ae1
 80093f8:	2000289c 	.word	0x2000289c
 80093fc:	20002920 	.word	0x20002920
 8009400:	20002940 	.word	0x20002940
 8009404:	42200000 	.word	0x42200000
 8009408:	3fe00000 	.word	0x3fe00000
 800940c:	200028a0 	.word	0x200028a0

08009410 <startup_task>:
extern remote_cmd_t remote_cmd;
extern float pitch;
extern float yaw;
uint16_t error = 0b111111111;

void startup_task() {
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
	//todo: shift all to an actual task, reimplement motor not connected errors
	led_on();
 8009414:	f7f8 fd6c 	bl	8001ef0 <led_on>
	buzzer_init();
 8009418:	f7f7 febc 	bl	8001194 <buzzer_init>
	imu_init();
 800941c:	f7f8 fb72 	bl	8001b04 <imu_init>
	led_green_off();
 8009420:	f7f8 fd58 	bl	8001ed4 <led_green_off>
	start_micros_timer();
 8009424:	f7f8 fe4a 	bl	80020bc <start_micros_timer>
	led_toggle();
 8009428:	f7f8 fd80 	bl	8001f2c <led_toggle>

}
 800942c:	bf00      	nop
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009434:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <HAL_Init+0x40>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a0d      	ldr	r2, [pc, #52]	; (8009470 <HAL_Init+0x40>)
 800943a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800943e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009440:	4b0b      	ldr	r3, [pc, #44]	; (8009470 <HAL_Init+0x40>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a0a      	ldr	r2, [pc, #40]	; (8009470 <HAL_Init+0x40>)
 8009446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800944a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800944c:	4b08      	ldr	r3, [pc, #32]	; (8009470 <HAL_Init+0x40>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a07      	ldr	r2, [pc, #28]	; (8009470 <HAL_Init+0x40>)
 8009452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009458:	2003      	movs	r0, #3
 800945a:	f001 f9de 	bl	800a81a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800945e:	2000      	movs	r0, #0
 8009460:	f7fa fb36 	bl	8003ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009464:	f7fa fb08 	bl	8003a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	40023c00 	.word	0x40023c00

08009474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009478:	4b06      	ldr	r3, [pc, #24]	; (8009494 <HAL_IncTick+0x20>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <HAL_IncTick+0x24>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4413      	add	r3, r2
 8009484:	4a04      	ldr	r2, [pc, #16]	; (8009498 <HAL_IncTick+0x24>)
 8009486:	6013      	str	r3, [r2, #0]
}
 8009488:	bf00      	nop
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20000014 	.word	0x20000014
 8009498:	20002988 	.word	0x20002988

0800949c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
  return uwTick;
 80094a0:	4b03      	ldr	r3, [pc, #12]	; (80094b0 <HAL_GetTick+0x14>)
 80094a2:	681b      	ldr	r3, [r3, #0]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20002988 	.word	0x20002988

080094b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80094bc:	f7ff ffee 	bl	800949c <HAL_GetTick>
 80094c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094cc:	d005      	beq.n	80094da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80094ce:	4b0a      	ldr	r3, [pc, #40]	; (80094f8 <HAL_Delay+0x44>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4413      	add	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80094da:	bf00      	nop
 80094dc:	f7ff ffde 	bl	800949c <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d8f7      	bhi.n	80094dc <HAL_Delay+0x28>
  {
  }
}
 80094ec:	bf00      	nop
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000014 	.word	0x20000014

080094fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e033      	b.n	800957a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7f9 fb86 	bl	8002c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f003 0310 	and.w	r3, r3, #16
 8009536:	2b00      	cmp	r3, #0
 8009538:	d118      	bne.n	800956c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009542:	f023 0302 	bic.w	r3, r3, #2
 8009546:	f043 0202 	orr.w	r2, r3, #2
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f93a 	bl	80097c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	f043 0201 	orr.w	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	641a      	str	r2, [r3, #64]	; 0x40
 800956a:	e001      	b.n	8009570 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_ADC_ConfigChannel+0x1c>
 800959c:	2302      	movs	r3, #2
 800959e:	e105      	b.n	80097ac <HAL_ADC_ConfigChannel+0x228>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b09      	cmp	r3, #9
 80095ae:	d925      	bls.n	80095fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68d9      	ldr	r1, [r3, #12]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	4613      	mov	r3, r2
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	4413      	add	r3, r2
 80095c4:	3b1e      	subs	r3, #30
 80095c6:	2207      	movs	r2, #7
 80095c8:	fa02 f303 	lsl.w	r3, r2, r3
 80095cc:	43da      	mvns	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	400a      	ands	r2, r1
 80095d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68d9      	ldr	r1, [r3, #12]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	4618      	mov	r0, r3
 80095e8:	4603      	mov	r3, r0
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	4403      	add	r3, r0
 80095ee:	3b1e      	subs	r3, #30
 80095f0:	409a      	lsls	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	60da      	str	r2, [r3, #12]
 80095fa:	e022      	b.n	8009642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6919      	ldr	r1, [r3, #16]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	461a      	mov	r2, r3
 800960a:	4613      	mov	r3, r2
 800960c:	005b      	lsls	r3, r3, #1
 800960e:	4413      	add	r3, r2
 8009610:	2207      	movs	r2, #7
 8009612:	fa02 f303 	lsl.w	r3, r2, r3
 8009616:	43da      	mvns	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	400a      	ands	r2, r1
 800961e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6919      	ldr	r1, [r3, #16]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	b29b      	uxth	r3, r3
 8009630:	4618      	mov	r0, r3
 8009632:	4603      	mov	r3, r0
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	4403      	add	r3, r0
 8009638:	409a      	lsls	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	2b06      	cmp	r3, #6
 8009648:	d824      	bhi.n	8009694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	4613      	mov	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	3b05      	subs	r3, #5
 800965c:	221f      	movs	r2, #31
 800965e:	fa02 f303 	lsl.w	r3, r2, r3
 8009662:	43da      	mvns	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	400a      	ands	r2, r1
 800966a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	b29b      	uxth	r3, r3
 8009678:	4618      	mov	r0, r3
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	3b05      	subs	r3, #5
 8009686:	fa00 f203 	lsl.w	r2, r0, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	635a      	str	r2, [r3, #52]	; 0x34
 8009692:	e04c      	b.n	800972e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b0c      	cmp	r3, #12
 800969a:	d824      	bhi.n	80096e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	4613      	mov	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	3b23      	subs	r3, #35	; 0x23
 80096ae:	221f      	movs	r2, #31
 80096b0:	fa02 f303 	lsl.w	r3, r2, r3
 80096b4:	43da      	mvns	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	400a      	ands	r2, r1
 80096bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	4618      	mov	r0, r3
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	3b23      	subs	r3, #35	; 0x23
 80096d8:	fa00 f203 	lsl.w	r2, r0, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	631a      	str	r2, [r3, #48]	; 0x30
 80096e4:	e023      	b.n	800972e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	4613      	mov	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	3b41      	subs	r3, #65	; 0x41
 80096f8:	221f      	movs	r2, #31
 80096fa:	fa02 f303 	lsl.w	r3, r2, r3
 80096fe:	43da      	mvns	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	400a      	ands	r2, r1
 8009706:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	4618      	mov	r0, r3
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	3b41      	subs	r3, #65	; 0x41
 8009722:	fa00 f203 	lsl.w	r2, r0, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800972e:	4b22      	ldr	r3, [pc, #136]	; (80097b8 <HAL_ADC_ConfigChannel+0x234>)
 8009730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a21      	ldr	r2, [pc, #132]	; (80097bc <HAL_ADC_ConfigChannel+0x238>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d109      	bne.n	8009750 <HAL_ADC_ConfigChannel+0x1cc>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b12      	cmp	r3, #18
 8009742:	d105      	bne.n	8009750 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a19      	ldr	r2, [pc, #100]	; (80097bc <HAL_ADC_ConfigChannel+0x238>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d123      	bne.n	80097a2 <HAL_ADC_ConfigChannel+0x21e>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b10      	cmp	r3, #16
 8009760:	d003      	beq.n	800976a <HAL_ADC_ConfigChannel+0x1e6>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b11      	cmp	r3, #17
 8009768:	d11b      	bne.n	80097a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b10      	cmp	r3, #16
 800977c:	d111      	bne.n	80097a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800977e:	4b10      	ldr	r3, [pc, #64]	; (80097c0 <HAL_ADC_ConfigChannel+0x23c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a10      	ldr	r2, [pc, #64]	; (80097c4 <HAL_ADC_ConfigChannel+0x240>)
 8009784:	fba2 2303 	umull	r2, r3, r2, r3
 8009788:	0c9a      	lsrs	r2, r3, #18
 800978a:	4613      	mov	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009794:	e002      	b.n	800979c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	3b01      	subs	r3, #1
 800979a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1f9      	bne.n	8009796 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	40012300 	.word	0x40012300
 80097bc:	40012000 	.word	0x40012000
 80097c0:	20000004 	.word	0x20000004
 80097c4:	431bde83 	.word	0x431bde83

080097c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80097d0:	4b79      	ldr	r3, [pc, #484]	; (80099b8 <ADC_Init+0x1f0>)
 80097d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	431a      	orrs	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6859      	ldr	r1, [r3, #4]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	021a      	lsls	r2, r3, #8
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6859      	ldr	r1, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	689a      	ldr	r2, [r3, #8]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689a      	ldr	r2, [r3, #8]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6899      	ldr	r1, [r3, #8]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985a:	4a58      	ldr	r2, [pc, #352]	; (80099bc <ADC_Init+0x1f4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d022      	beq.n	80098a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800986e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6899      	ldr	r1, [r3, #8]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	430a      	orrs	r2, r1
 8009880:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009890:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6899      	ldr	r1, [r3, #8]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	609a      	str	r2, [r3, #8]
 80098a4:	e00f      	b.n	80098c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80098b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80098c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0202 	bic.w	r2, r2, #2
 80098d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6899      	ldr	r1, [r3, #8]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	7e1b      	ldrb	r3, [r3, #24]
 80098e0:	005a      	lsls	r2, r3, #1
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01b      	beq.n	800992c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009902:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009912:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6859      	ldr	r1, [r3, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	3b01      	subs	r3, #1
 8009920:	035a      	lsls	r2, r3, #13
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]
 800992a:	e007      	b.n	800993c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800993a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800994a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	3b01      	subs	r3, #1
 8009958:	051a      	lsls	r2, r3, #20
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	689a      	ldr	r2, [r3, #8]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6899      	ldr	r1, [r3, #8]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800997e:	025a      	lsls	r2, r3, #9
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009996:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6899      	ldr	r1, [r3, #8]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	029a      	lsls	r2, r3, #10
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	430a      	orrs	r2, r1
 80099aa:	609a      	str	r2, [r3, #8]
}
 80099ac:	bf00      	nop
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	40012300 	.word	0x40012300
 80099bc:	0f000001 	.word	0x0f000001

080099c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e0ed      	b.n	8009bae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d102      	bne.n	80099e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7f9 f9d4 	bl	8002d8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80099f4:	f7ff fd52 	bl	800949c <HAL_GetTick>
 80099f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80099fa:	e012      	b.n	8009a22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80099fc:	f7ff fd4e 	bl	800949c <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b0a      	cmp	r3, #10
 8009a08:	d90b      	bls.n	8009a22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2205      	movs	r2, #5
 8009a1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e0c5      	b.n	8009bae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0e5      	beq.n	80099fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f022 0202 	bic.w	r2, r2, #2
 8009a3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a40:	f7ff fd2c 	bl	800949c <HAL_GetTick>
 8009a44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009a46:	e012      	b.n	8009a6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009a48:	f7ff fd28 	bl	800949c <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	2b0a      	cmp	r3, #10
 8009a54:	d90b      	bls.n	8009a6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2205      	movs	r2, #5
 8009a66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e09f      	b.n	8009bae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e5      	bne.n	8009a48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	7e1b      	ldrb	r3, [r3, #24]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d108      	bne.n	8009a96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	e007      	b.n	8009aa6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009aa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7e5b      	ldrb	r3, [r3, #25]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d108      	bne.n	8009ac0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	e007      	b.n	8009ad0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ace:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	7e9b      	ldrb	r3, [r3, #26]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d108      	bne.n	8009aea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 0220 	orr.w	r2, r2, #32
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	e007      	b.n	8009afa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0220 	bic.w	r2, r2, #32
 8009af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	7edb      	ldrb	r3, [r3, #27]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d108      	bne.n	8009b14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 0210 	bic.w	r2, r2, #16
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	e007      	b.n	8009b24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0210 	orr.w	r2, r2, #16
 8009b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7f1b      	ldrb	r3, [r3, #28]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d108      	bne.n	8009b3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0208 	orr.w	r2, r2, #8
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	e007      	b.n	8009b4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0208 	bic.w	r2, r2, #8
 8009b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	7f5b      	ldrb	r3, [r3, #29]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d108      	bne.n	8009b68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f042 0204 	orr.w	r2, r2, #4
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e007      	b.n	8009b78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0204 	bic.w	r2, r2, #4
 8009b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689a      	ldr	r2, [r3, #8]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	431a      	orrs	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	431a      	orrs	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	ea42 0103 	orr.w	r1, r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	1e5a      	subs	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009bd0:	7cfb      	ldrb	r3, [r7, #19]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d003      	beq.n	8009bde <HAL_CAN_ConfigFilter+0x26>
 8009bd6:	7cfb      	ldrb	r3, [r7, #19]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	f040 80be 	bne.w	8009d5a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8009bde:	4b65      	ldr	r3, [pc, #404]	; (8009d74 <HAL_CAN_ConfigFilter+0x1bc>)
 8009be0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009be8:	f043 0201 	orr.w	r2, r3, #1
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009bf8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	f003 031f 	and.w	r3, r3, #31
 8009c1e:	2201      	movs	r2, #1
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	43db      	mvns	r3, r3
 8009c30:	401a      	ands	r2, r3
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d123      	bne.n	8009c88 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	43db      	mvns	r3, r3
 8009c4a:	401a      	ands	r2, r3
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009c62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	3248      	adds	r2, #72	; 0x48
 8009c68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009c7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009c7e:	6979      	ldr	r1, [r7, #20]
 8009c80:	3348      	adds	r3, #72	; 0x48
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	440b      	add	r3, r1
 8009c86:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d122      	bne.n	8009cd6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009cb0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	3248      	adds	r2, #72	; 0x48
 8009cb6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009cca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009ccc:	6979      	ldr	r1, [r7, #20]
 8009cce:	3348      	adds	r3, #72	; 0x48
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	440b      	add	r3, r1
 8009cd4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d109      	bne.n	8009cf2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	43db      	mvns	r3, r3
 8009ce8:	401a      	ands	r2, r3
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009cf0:	e007      	b.n	8009d02 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d109      	bne.n	8009d1e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	43db      	mvns	r3, r3
 8009d14:	401a      	ands	r2, r3
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009d1c:	e007      	b.n	8009d2e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	431a      	orrs	r2, r3
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d107      	bne.n	8009d46 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d4c:	f023 0201 	bic.w	r2, r3, #1
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e006      	b.n	8009d68 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
  }
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	371c      	adds	r7, #28
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	40006400 	.word	0x40006400

08009d78 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d12e      	bne.n	8009dea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f022 0201 	bic.w	r2, r2, #1
 8009da2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009da4:	f7ff fb7a 	bl	800949c <HAL_GetTick>
 8009da8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009daa:	e012      	b.n	8009dd2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009dac:	f7ff fb76 	bl	800949c <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	2b0a      	cmp	r3, #10
 8009db8:	d90b      	bls.n	8009dd2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2205      	movs	r2, #5
 8009dca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e012      	b.n	8009df8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e5      	bne.n	8009dac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	e006      	b.n	8009df8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
  }
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b089      	sub	sp, #36	; 0x24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009e1e:	7ffb      	ldrb	r3, [r7, #31]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d003      	beq.n	8009e2c <HAL_CAN_AddTxMessage+0x2c>
 8009e24:	7ffb      	ldrb	r3, [r7, #31]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	f040 80b8 	bne.w	8009f9c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d105      	bne.n	8009e4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 80a0 	beq.w	8009f8c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	0e1b      	lsrs	r3, r3, #24
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d907      	bls.n	8009e6c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e09e      	b.n	8009faa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	409a      	lsls	r2, r3
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10d      	bne.n	8009e9a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009e88:	68f9      	ldr	r1, [r7, #12]
 8009e8a:	6809      	ldr	r1, [r1, #0]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	3318      	adds	r3, #24
 8009e92:	011b      	lsls	r3, r3, #4
 8009e94:	440b      	add	r3, r1
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	e00f      	b.n	8009eba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009ea4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009eaa:	68f9      	ldr	r1, [r7, #12]
 8009eac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009eae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	3318      	adds	r3, #24
 8009eb4:	011b      	lsls	r3, r3, #4
 8009eb6:	440b      	add	r3, r1
 8009eb8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6819      	ldr	r1, [r3, #0]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	691a      	ldr	r2, [r3, #16]
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	3318      	adds	r3, #24
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	440b      	add	r3, r1
 8009eca:	3304      	adds	r3, #4
 8009ecc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	7d1b      	ldrb	r3, [r3, #20]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d111      	bne.n	8009efa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	3318      	adds	r3, #24
 8009ede:	011b      	lsls	r3, r3, #4
 8009ee0:	4413      	add	r3, r2
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	6811      	ldr	r1, [r2, #0]
 8009eea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	3318      	adds	r3, #24
 8009ef2:	011b      	lsls	r3, r3, #4
 8009ef4:	440b      	add	r3, r1
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3307      	adds	r3, #7
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	061a      	lsls	r2, r3, #24
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3306      	adds	r3, #6
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	041b      	lsls	r3, r3, #16
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	3305      	adds	r3, #5
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	4313      	orrs	r3, r2
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	3204      	adds	r2, #4
 8009f1a:	7812      	ldrb	r2, [r2, #0]
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	6811      	ldr	r1, [r2, #0]
 8009f22:	ea43 0200 	orr.w	r2, r3, r0
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	440b      	add	r3, r1
 8009f2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009f30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3303      	adds	r3, #3
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	061a      	lsls	r2, r3, #24
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3302      	adds	r3, #2
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	041b      	lsls	r3, r3, #16
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3301      	adds	r3, #1
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	021b      	lsls	r3, r3, #8
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	7812      	ldrb	r2, [r2, #0]
 8009f52:	4610      	mov	r0, r2
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	6811      	ldr	r1, [r2, #0]
 8009f58:	ea43 0200 	orr.w	r2, r3, r0
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	011b      	lsls	r3, r3, #4
 8009f60:	440b      	add	r3, r1
 8009f62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009f66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	3318      	adds	r3, #24
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	4413      	add	r3, r2
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	6811      	ldr	r1, [r2, #0]
 8009f7a:	f043 0201 	orr.w	r2, r3, #1
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	3318      	adds	r3, #24
 8009f82:	011b      	lsls	r3, r3, #4
 8009f84:	440b      	add	r3, r1
 8009f86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e00e      	b.n	8009faa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e006      	b.n	8009faa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
  }
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3724      	adds	r7, #36	; 0x24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b087      	sub	sp, #28
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d003      	beq.n	8009fda <HAL_CAN_GetRxMessage+0x24>
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	f040 80f3 	bne.w	800a1c0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10e      	bne.n	8009ffe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d116      	bne.n	800a01c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e0e7      	b.n	800a1ce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d107      	bne.n	800a01c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e0d8      	b.n	800a1ce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	331b      	adds	r3, #27
 800a024:	011b      	lsls	r3, r3, #4
 800a026:	4413      	add	r3, r2
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0204 	and.w	r2, r3, #4
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10c      	bne.n	800a054 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	331b      	adds	r3, #27
 800a042:	011b      	lsls	r3, r3, #4
 800a044:	4413      	add	r3, r2
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	0d5b      	lsrs	r3, r3, #21
 800a04a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	e00b      	b.n	800a06c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	331b      	adds	r3, #27
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	4413      	add	r3, r2
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	08db      	lsrs	r3, r3, #3
 800a064:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	331b      	adds	r3, #27
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	4413      	add	r3, r2
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0202 	and.w	r2, r3, #2
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	331b      	adds	r3, #27
 800a08a:	011b      	lsls	r3, r3, #4
 800a08c:	4413      	add	r3, r2
 800a08e:	3304      	adds	r3, #4
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 020f 	and.w	r2, r3, #15
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	331b      	adds	r3, #27
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	4413      	add	r3, r2
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	0a1b      	lsrs	r3, r3, #8
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	331b      	adds	r3, #27
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	4413      	add	r3, r2
 800a0be:	3304      	adds	r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	0c1b      	lsrs	r3, r3, #16
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	011b      	lsls	r3, r3, #4
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	0a1a      	lsrs	r2, r3, #8
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	4413      	add	r3, r2
 800a104:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	0c1a      	lsrs	r2, r3, #16
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	3302      	adds	r3, #2
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	011b      	lsls	r3, r3, #4
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	0e1a      	lsrs	r2, r3, #24
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	3303      	adds	r3, #3
 800a12a:	b2d2      	uxtb	r2, r2
 800a12c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	011b      	lsls	r3, r3, #4
 800a136:	4413      	add	r3, r2
 800a138:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	3304      	adds	r3, #4
 800a142:	b2d2      	uxtb	r2, r2
 800a144:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	011b      	lsls	r3, r3, #4
 800a14e:	4413      	add	r3, r2
 800a150:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	0a1a      	lsrs	r2, r3, #8
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	3305      	adds	r3, #5
 800a15c:	b2d2      	uxtb	r2, r2
 800a15e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	011b      	lsls	r3, r3, #4
 800a168:	4413      	add	r3, r2
 800a16a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	0c1a      	lsrs	r2, r3, #16
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	3306      	adds	r3, #6
 800a176:	b2d2      	uxtb	r2, r2
 800a178:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	4413      	add	r3, r2
 800a184:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	0e1a      	lsrs	r2, r3, #24
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	3307      	adds	r3, #7
 800a190:	b2d2      	uxtb	r2, r2
 800a192:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d108      	bne.n	800a1ac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68da      	ldr	r2, [r3, #12]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f042 0220 	orr.w	r2, r2, #32
 800a1a8:	60da      	str	r2, [r3, #12]
 800a1aa:	e007      	b.n	800a1bc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	691a      	ldr	r2, [r3, #16]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0220 	orr.w	r2, r2, #32
 800a1ba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	e006      	b.n	800a1ce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
  }
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	371c      	adds	r7, #28
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d002      	beq.n	800a1f8 <HAL_CAN_ActivateNotification+0x1e>
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d109      	bne.n	800a20c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6959      	ldr	r1, [r3, #20]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	e006      	b.n	800a21a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
  }
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a236:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d002      	beq.n	800a244 <HAL_CAN_DeactivateNotification+0x1e>
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
 800a240:	2b02      	cmp	r3, #2
 800a242:	d10a      	bne.n	800a25a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6959      	ldr	r1, [r3, #20]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	43da      	mvns	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	400a      	ands	r2, r1
 800a254:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	e006      	b.n	800a268 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
  }
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08a      	sub	sp, #40	; 0x28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a27c:	2300      	movs	r3, #0
 800a27e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d07c      	beq.n	800a3b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	f003 0301 	and.w	r3, r3, #1
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d023      	beq.n	800a30c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f983 	bl	800a5e2 <HAL_CAN_TxMailbox0CompleteCallback>
 800a2dc:	e016      	b.n	800a30c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f003 0304 	and.w	r3, r3, #4
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d004      	beq.n	800a2f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f0:	e00c      	b.n	800a30c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	f003 0308 	and.w	r3, r3, #8
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d004      	beq.n	800a306 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a302:	627b      	str	r3, [r7, #36]	; 0x24
 800a304:	e002      	b.n	800a30c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f989 	bl	800a61e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a312:	2b00      	cmp	r3, #0
 800a314:	d024      	beq.n	800a360 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a31e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f963 	bl	800a5f6 <HAL_CAN_TxMailbox1CompleteCallback>
 800a330:	e016      	b.n	800a360 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d004      	beq.n	800a346 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a342:	627b      	str	r3, [r7, #36]	; 0x24
 800a344:	e00c      	b.n	800a360 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
 800a358:	e002      	b.n	800a360 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f969 	bl	800a632 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d024      	beq.n	800a3b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a372:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f943 	bl	800a60a <HAL_CAN_TxMailbox2CompleteCallback>
 800a384:	e016      	b.n	800a3b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d004      	beq.n	800a39a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a396:	627b      	str	r3, [r7, #36]	; 0x24
 800a398:	e00c      	b.n	800a3b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d004      	beq.n	800a3ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ac:	e002      	b.n	800a3b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f949 	bl	800a646 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	f003 0308 	and.w	r3, r3, #8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00c      	beq.n	800a3d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f003 0310 	and.w	r3, r3, #16
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d007      	beq.n	800a3d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2210      	movs	r2, #16
 800a3d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
 800a3da:	f003 0304 	and.w	r3, r3, #4
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00b      	beq.n	800a3fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f003 0308 	and.w	r3, r3, #8
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d006      	beq.n	800a3fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f930 	bl	800a65a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d009      	beq.n	800a418 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	f003 0303 	and.w	r3, r3, #3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7f6 fecc 	bl	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00c      	beq.n	800a43c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f003 0310 	and.w	r3, r3, #16
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d007      	beq.n	800a43c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a432:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2210      	movs	r2, #16
 800a43a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00b      	beq.n	800a45e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f003 0308 	and.w	r3, r3, #8
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d006      	beq.n	800a45e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2208      	movs	r2, #8
 800a456:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f908 	bl	800a66e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	f003 0310 	and.w	r3, r3, #16
 800a464:	2b00      	cmp	r3, #0
 800a466:	d009      	beq.n	800a47c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	f003 0303 	and.w	r3, r3, #3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7f6 fea5 	bl	80011c6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00b      	beq.n	800a49e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d006      	beq.n	800a49e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2210      	movs	r2, #16
 800a496:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f8f2 	bl	800a682 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	f003 0308 	and.w	r3, r3, #8
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d006      	beq.n	800a4c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2208      	movs	r2, #8
 800a4b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f8eb 	bl	800a696 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d07b      	beq.n	800a5c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d072      	beq.n	800a5ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d008      	beq.n	800a4f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ea:	f043 0301 	orr.w	r3, r3, #1
 800a4ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a4f0:	6a3b      	ldr	r3, [r7, #32]
 800a4f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d008      	beq.n	800a50c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a500:	2b00      	cmp	r3, #0
 800a502:	d003      	beq.n	800a50c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	f043 0302 	orr.w	r3, r3, #2
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a512:	2b00      	cmp	r3, #0
 800a514:	d008      	beq.n	800a528 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d003      	beq.n	800a528 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	f043 0304 	orr.w	r3, r3, #4
 800a526:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d043      	beq.n	800a5ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d03e      	beq.n	800a5ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a542:	2b60      	cmp	r3, #96	; 0x60
 800a544:	d02b      	beq.n	800a59e <HAL_CAN_IRQHandler+0x32a>
 800a546:	2b60      	cmp	r3, #96	; 0x60
 800a548:	d82e      	bhi.n	800a5a8 <HAL_CAN_IRQHandler+0x334>
 800a54a:	2b50      	cmp	r3, #80	; 0x50
 800a54c:	d022      	beq.n	800a594 <HAL_CAN_IRQHandler+0x320>
 800a54e:	2b50      	cmp	r3, #80	; 0x50
 800a550:	d82a      	bhi.n	800a5a8 <HAL_CAN_IRQHandler+0x334>
 800a552:	2b40      	cmp	r3, #64	; 0x40
 800a554:	d019      	beq.n	800a58a <HAL_CAN_IRQHandler+0x316>
 800a556:	2b40      	cmp	r3, #64	; 0x40
 800a558:	d826      	bhi.n	800a5a8 <HAL_CAN_IRQHandler+0x334>
 800a55a:	2b30      	cmp	r3, #48	; 0x30
 800a55c:	d010      	beq.n	800a580 <HAL_CAN_IRQHandler+0x30c>
 800a55e:	2b30      	cmp	r3, #48	; 0x30
 800a560:	d822      	bhi.n	800a5a8 <HAL_CAN_IRQHandler+0x334>
 800a562:	2b10      	cmp	r3, #16
 800a564:	d002      	beq.n	800a56c <HAL_CAN_IRQHandler+0x2f8>
 800a566:	2b20      	cmp	r3, #32
 800a568:	d005      	beq.n	800a576 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a56a:	e01d      	b.n	800a5a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	f043 0308 	orr.w	r3, r3, #8
 800a572:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a574:	e019      	b.n	800a5aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a578:	f043 0310 	orr.w	r3, r3, #16
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a57e:	e014      	b.n	800a5aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	f043 0320 	orr.w	r3, r3, #32
 800a586:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a588:	e00f      	b.n	800a5aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a590:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a592:	e00a      	b.n	800a5aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a59c:	e005      	b.n	800a5aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a5a6:	e000      	b.n	800a5aa <HAL_CAN_IRQHandler+0x336>
            break;
 800a5a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	699a      	ldr	r2, [r3, #24]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a5b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2204      	movs	r2, #4
 800a5c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f868 	bl	800a6aa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a5da:	bf00      	nop
 800a5dc:	3728      	adds	r7, #40	; 0x28
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b083      	sub	sp, #12
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800a5fe:	bf00      	nop
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800a612:	bf00      	nop
 800a614:	370c      	adds	r7, #12
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a63a:	bf00      	nop
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a646:	b480      	push	{r7}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a64e:	bf00      	nop
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b083      	sub	sp, #12
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a662:	bf00      	nop
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a676:	bf00      	nop
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a68a:	bf00      	nop
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a69e:	bf00      	nop
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a6b2:	bf00      	nop
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
	...

0800a6c0 <__NVIC_SetPriorityGrouping>:
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6d0:	4b0c      	ldr	r3, [pc, #48]	; (800a704 <__NVIC_SetPriorityGrouping+0x44>)
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a6dc:	4013      	ands	r3, r2
 800a6de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a6e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a6ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a6f2:	4a04      	ldr	r2, [pc, #16]	; (800a704 <__NVIC_SetPriorityGrouping+0x44>)
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	60d3      	str	r3, [r2, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	e000ed00 	.word	0xe000ed00

0800a708 <__NVIC_GetPriorityGrouping>:
{
 800a708:	b480      	push	{r7}
 800a70a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a70c:	4b04      	ldr	r3, [pc, #16]	; (800a720 <__NVIC_GetPriorityGrouping+0x18>)
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	0a1b      	lsrs	r3, r3, #8
 800a712:	f003 0307 	and.w	r3, r3, #7
}
 800a716:	4618      	mov	r0, r3
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	e000ed00 	.word	0xe000ed00

0800a724 <__NVIC_EnableIRQ>:
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a72e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a732:	2b00      	cmp	r3, #0
 800a734:	db0b      	blt.n	800a74e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a736:	79fb      	ldrb	r3, [r7, #7]
 800a738:	f003 021f 	and.w	r2, r3, #31
 800a73c:	4907      	ldr	r1, [pc, #28]	; (800a75c <__NVIC_EnableIRQ+0x38>)
 800a73e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a742:	095b      	lsrs	r3, r3, #5
 800a744:	2001      	movs	r0, #1
 800a746:	fa00 f202 	lsl.w	r2, r0, r2
 800a74a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a74e:	bf00      	nop
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	e000e100 	.word	0xe000e100

0800a760 <__NVIC_SetPriority>:
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	4603      	mov	r3, r0
 800a768:	6039      	str	r1, [r7, #0]
 800a76a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a76c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a770:	2b00      	cmp	r3, #0
 800a772:	db0a      	blt.n	800a78a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	b2da      	uxtb	r2, r3
 800a778:	490c      	ldr	r1, [pc, #48]	; (800a7ac <__NVIC_SetPriority+0x4c>)
 800a77a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a77e:	0112      	lsls	r2, r2, #4
 800a780:	b2d2      	uxtb	r2, r2
 800a782:	440b      	add	r3, r1
 800a784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a788:	e00a      	b.n	800a7a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	4908      	ldr	r1, [pc, #32]	; (800a7b0 <__NVIC_SetPriority+0x50>)
 800a790:	79fb      	ldrb	r3, [r7, #7]
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	3b04      	subs	r3, #4
 800a798:	0112      	lsls	r2, r2, #4
 800a79a:	b2d2      	uxtb	r2, r2
 800a79c:	440b      	add	r3, r1
 800a79e:	761a      	strb	r2, [r3, #24]
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	e000e100 	.word	0xe000e100
 800a7b0:	e000ed00 	.word	0xe000ed00

0800a7b4 <NVIC_EncodePriority>:
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b089      	sub	sp, #36	; 0x24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f003 0307 	and.w	r3, r3, #7
 800a7c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	f1c3 0307 	rsb	r3, r3, #7
 800a7ce:	2b04      	cmp	r3, #4
 800a7d0:	bf28      	it	cs
 800a7d2:	2304      	movcs	r3, #4
 800a7d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	2b06      	cmp	r3, #6
 800a7dc:	d902      	bls.n	800a7e4 <NVIC_EncodePriority+0x30>
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	3b03      	subs	r3, #3
 800a7e2:	e000      	b.n	800a7e6 <NVIC_EncodePriority+0x32>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f2:	43da      	mvns	r2, r3
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	401a      	ands	r2, r3
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a7fc:	f04f 31ff 	mov.w	r1, #4294967295
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	fa01 f303 	lsl.w	r3, r1, r3
 800a806:	43d9      	mvns	r1, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a80c:	4313      	orrs	r3, r2
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3724      	adds	r7, #36	; 0x24
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b082      	sub	sp, #8
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff ff4c 	bl	800a6c0 <__NVIC_SetPriorityGrouping>
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a83e:	2300      	movs	r3, #0
 800a840:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a842:	f7ff ff61 	bl	800a708 <__NVIC_GetPriorityGrouping>
 800a846:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	68b9      	ldr	r1, [r7, #8]
 800a84c:	6978      	ldr	r0, [r7, #20]
 800a84e:	f7ff ffb1 	bl	800a7b4 <NVIC_EncodePriority>
 800a852:	4602      	mov	r2, r0
 800a854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff ff80 	bl	800a760 <__NVIC_SetPriority>
}
 800a860:	bf00      	nop
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff ff54 	bl	800a724 <__NVIC_EnableIRQ>
}
 800a87c:	bf00      	nop
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a890:	f7fe fe04 	bl	800949c <HAL_GetTick>
 800a894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e099      	b.n	800a9d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f022 0201 	bic.w	r2, r2, #1
 800a8be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8c0:	e00f      	b.n	800a8e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a8c2:	f7fe fdeb 	bl	800949c <HAL_GetTick>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	2b05      	cmp	r3, #5
 800a8ce:	d908      	bls.n	800a8e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2203      	movs	r2, #3
 800a8da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e078      	b.n	800a9d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1e8      	bne.n	800a8c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	4b38      	ldr	r3, [pc, #224]	; (800a9dc <HAL_DMA_Init+0x158>)
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a90e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a91a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	4313      	orrs	r3, r2
 800a932:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d107      	bne.n	800a94c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a944:	4313      	orrs	r3, r2
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f023 0307 	bic.w	r3, r3, #7
 800a962:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	2b04      	cmp	r3, #4
 800a974:	d117      	bne.n	800a9a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00e      	beq.n	800a9a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fb0d 	bl	800afa8 <DMA_CheckFifoParam>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d008      	beq.n	800a9a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2240      	movs	r2, #64	; 0x40
 800a998:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e016      	b.n	800a9d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fac4 	bl	800af3c <DMA_CalcBaseAndBitshift>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9bc:	223f      	movs	r2, #63	; 0x3f
 800a9be:	409a      	lsls	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	f010803f 	.word	0xf010803f

0800a9e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d101      	bne.n	800aa06 <HAL_DMA_Start_IT+0x26>
 800aa02:	2302      	movs	r3, #2
 800aa04:	e040      	b.n	800aa88 <HAL_DMA_Start_IT+0xa8>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d12f      	bne.n	800aa7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2202      	movs	r2, #2
 800aa1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	68b9      	ldr	r1, [r7, #8]
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f000 fa56 	bl	800aee0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa38:	223f      	movs	r2, #63	; 0x3f
 800aa3a:	409a      	lsls	r2, r3
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0216 	orr.w	r2, r2, #22
 800aa4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d007      	beq.n	800aa68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f042 0208 	orr.w	r2, r2, #8
 800aa66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f042 0201 	orr.w	r2, r2, #1
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	e005      	b.n	800aa86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800aa82:	2302      	movs	r3, #2
 800aa84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800aa9e:	f7fe fcfd 	bl	800949c <HAL_GetTick>
 800aaa2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d008      	beq.n	800aac2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2280      	movs	r2, #128	; 0x80
 800aab4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e052      	b.n	800ab68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 0216 	bic.w	r2, r2, #22
 800aad0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	695a      	ldr	r2, [r3, #20]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aae0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d103      	bne.n	800aaf2 <HAL_DMA_Abort+0x62>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d007      	beq.n	800ab02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f022 0208 	bic.w	r2, r2, #8
 800ab00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f022 0201 	bic.w	r2, r2, #1
 800ab10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ab12:	e013      	b.n	800ab3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ab14:	f7fe fcc2 	bl	800949c <HAL_GetTick>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	2b05      	cmp	r3, #5
 800ab20:	d90c      	bls.n	800ab3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2220      	movs	r2, #32
 800ab26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2203      	movs	r2, #3
 800ab2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e015      	b.n	800ab68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1e4      	bne.n	800ab14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab4e:	223f      	movs	r2, #63	; 0x3f
 800ab50:	409a      	lsls	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d004      	beq.n	800ab8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2280      	movs	r2, #128	; 0x80
 800ab88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e00c      	b.n	800aba8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2205      	movs	r2, #5
 800ab92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f022 0201 	bic.w	r2, r2, #1
 800aba4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800abc0:	4b8e      	ldr	r3, [pc, #568]	; (800adfc <HAL_DMA_IRQHandler+0x248>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a8e      	ldr	r2, [pc, #568]	; (800ae00 <HAL_DMA_IRQHandler+0x24c>)
 800abc6:	fba2 2303 	umull	r2, r3, r2, r3
 800abca:	0a9b      	lsrs	r3, r3, #10
 800abcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abde:	2208      	movs	r2, #8
 800abe0:	409a      	lsls	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4013      	ands	r3, r2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d01a      	beq.n	800ac20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 0304 	and.w	r3, r3, #4
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d013      	beq.n	800ac20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f022 0204 	bic.w	r2, r2, #4
 800ac06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac0c:	2208      	movs	r2, #8
 800ac0e:	409a      	lsls	r2, r3
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac18:	f043 0201 	orr.w	r2, r3, #1
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac24:	2201      	movs	r2, #1
 800ac26:	409a      	lsls	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d012      	beq.n	800ac56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00b      	beq.n	800ac56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac42:	2201      	movs	r2, #1
 800ac44:	409a      	lsls	r2, r3
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4e:	f043 0202 	orr.w	r2, r3, #2
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5a:	2204      	movs	r2, #4
 800ac5c:	409a      	lsls	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	4013      	ands	r3, r2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d012      	beq.n	800ac8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac78:	2204      	movs	r2, #4
 800ac7a:	409a      	lsls	r2, r3
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac84:	f043 0204 	orr.w	r2, r3, #4
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac90:	2210      	movs	r2, #16
 800ac92:	409a      	lsls	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	4013      	ands	r3, r2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d043      	beq.n	800ad24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0308 	and.w	r3, r3, #8
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d03c      	beq.n	800ad24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acae:	2210      	movs	r2, #16
 800acb0:	409a      	lsls	r2, r3
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d018      	beq.n	800acf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d108      	bne.n	800ace4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d024      	beq.n	800ad24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	4798      	blx	r3
 800ace2:	e01f      	b.n	800ad24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d01b      	beq.n	800ad24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	4798      	blx	r3
 800acf4:	e016      	b.n	800ad24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d107      	bne.n	800ad14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 0208 	bic.w	r2, r2, #8
 800ad12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d003      	beq.n	800ad24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad28:	2220      	movs	r2, #32
 800ad2a:	409a      	lsls	r2, r3
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 808f 	beq.w	800ae54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0310 	and.w	r3, r3, #16
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 8087 	beq.w	800ae54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	409a      	lsls	r2, r3
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b05      	cmp	r3, #5
 800ad5c:	d136      	bne.n	800adcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f022 0216 	bic.w	r2, r2, #22
 800ad6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	695a      	ldr	r2, [r3, #20]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d103      	bne.n	800ad8e <HAL_DMA_IRQHandler+0x1da>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d007      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f022 0208 	bic.w	r2, r2, #8
 800ad9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ada2:	223f      	movs	r2, #63	; 0x3f
 800ada4:	409a      	lsls	r2, r3
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d07e      	beq.n	800aec0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	4798      	blx	r3
        }
        return;
 800adca:	e079      	b.n	800aec0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01d      	beq.n	800ae16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10d      	bne.n	800ae04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adec:	2b00      	cmp	r3, #0
 800adee:	d031      	beq.n	800ae54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	4798      	blx	r3
 800adf8:	e02c      	b.n	800ae54 <HAL_DMA_IRQHandler+0x2a0>
 800adfa:	bf00      	nop
 800adfc:	20000004 	.word	0x20000004
 800ae00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d023      	beq.n	800ae54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	4798      	blx	r3
 800ae14:	e01e      	b.n	800ae54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10f      	bne.n	800ae44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f022 0210 	bic.w	r2, r2, #16
 800ae32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d032      	beq.n	800aec2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d022      	beq.n	800aeae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2205      	movs	r2, #5
 800ae6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f022 0201 	bic.w	r2, r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	3301      	adds	r3, #1
 800ae84:	60bb      	str	r3, [r7, #8]
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d307      	bcc.n	800ae9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1f2      	bne.n	800ae80 <HAL_DMA_IRQHandler+0x2cc>
 800ae9a:	e000      	b.n	800ae9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ae9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d005      	beq.n	800aec2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	4798      	blx	r3
 800aebe:	e000      	b.n	800aec2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800aec0:	bf00      	nop
    }
  }
}
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aefc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	2b40      	cmp	r3, #64	; 0x40
 800af0c:	d108      	bne.n	800af20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800af1e:	e007      	b.n	800af30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	60da      	str	r2, [r3, #12]
}
 800af30:	bf00      	nop
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	3b10      	subs	r3, #16
 800af4c:	4a14      	ldr	r2, [pc, #80]	; (800afa0 <DMA_CalcBaseAndBitshift+0x64>)
 800af4e:	fba2 2303 	umull	r2, r3, r2, r3
 800af52:	091b      	lsrs	r3, r3, #4
 800af54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af56:	4a13      	ldr	r2, [pc, #76]	; (800afa4 <DMA_CalcBaseAndBitshift+0x68>)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4413      	add	r3, r2
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b03      	cmp	r3, #3
 800af68:	d909      	bls.n	800af7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	1d1a      	adds	r2, r3, #4
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	659a      	str	r2, [r3, #88]	; 0x58
 800af7c:	e007      	b.n	800af8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af86:	f023 0303 	bic.w	r3, r3, #3
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800af92:	4618      	mov	r0, r3
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	aaaaaaab 	.word	0xaaaaaaab
 800afa4:	0801fd10 	.word	0x0801fd10

0800afa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d11f      	bne.n	800b002 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d856      	bhi.n	800b076 <DMA_CheckFifoParam+0xce>
 800afc8:	a201      	add	r2, pc, #4	; (adr r2, 800afd0 <DMA_CheckFifoParam+0x28>)
 800afca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afce:	bf00      	nop
 800afd0:	0800afe1 	.word	0x0800afe1
 800afd4:	0800aff3 	.word	0x0800aff3
 800afd8:	0800afe1 	.word	0x0800afe1
 800afdc:	0800b077 	.word	0x0800b077
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d046      	beq.n	800b07a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aff0:	e043      	b.n	800b07a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800affa:	d140      	bne.n	800b07e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b000:	e03d      	b.n	800b07e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b00a:	d121      	bne.n	800b050 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2b03      	cmp	r3, #3
 800b010:	d837      	bhi.n	800b082 <DMA_CheckFifoParam+0xda>
 800b012:	a201      	add	r2, pc, #4	; (adr r2, 800b018 <DMA_CheckFifoParam+0x70>)
 800b014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b018:	0800b029 	.word	0x0800b029
 800b01c:	0800b02f 	.word	0x0800b02f
 800b020:	0800b029 	.word	0x0800b029
 800b024:	0800b041 	.word	0x0800b041
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]
      break;
 800b02c:	e030      	b.n	800b090 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d025      	beq.n	800b086 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b03e:	e022      	b.n	800b086 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b048:	d11f      	bne.n	800b08a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b04e:	e01c      	b.n	800b08a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b02      	cmp	r3, #2
 800b054:	d903      	bls.n	800b05e <DMA_CheckFifoParam+0xb6>
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d003      	beq.n	800b064 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b05c:	e018      	b.n	800b090 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	73fb      	strb	r3, [r7, #15]
      break;
 800b062:	e015      	b.n	800b090 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00e      	beq.n	800b08e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	73fb      	strb	r3, [r7, #15]
      break;
 800b074:	e00b      	b.n	800b08e <DMA_CheckFifoParam+0xe6>
      break;
 800b076:	bf00      	nop
 800b078:	e00a      	b.n	800b090 <DMA_CheckFifoParam+0xe8>
      break;
 800b07a:	bf00      	nop
 800b07c:	e008      	b.n	800b090 <DMA_CheckFifoParam+0xe8>
      break;
 800b07e:	bf00      	nop
 800b080:	e006      	b.n	800b090 <DMA_CheckFifoParam+0xe8>
      break;
 800b082:	bf00      	nop
 800b084:	e004      	b.n	800b090 <DMA_CheckFifoParam+0xe8>
      break;
 800b086:	bf00      	nop
 800b088:	e002      	b.n	800b090 <DMA_CheckFifoParam+0xe8>
      break;   
 800b08a:	bf00      	nop
 800b08c:	e000      	b.n	800b090 <DMA_CheckFifoParam+0xe8>
      break;
 800b08e:	bf00      	nop
    }
  } 
  
  return status; 
 800b090:	7bfb      	ldrb	r3, [r7, #15]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop

0800b0a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b089      	sub	sp, #36	; 0x24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	61fb      	str	r3, [r7, #28]
 800b0ba:	e16b      	b.n	800b394 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0bc:	2201      	movs	r2, #1
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	f040 815a 	bne.w	800b38e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f003 0303 	and.w	r3, r3, #3
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d005      	beq.n	800b0f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d130      	bne.n	800b154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b102:	43db      	mvns	r3, r3
 800b104:	69ba      	ldr	r2, [r7, #24]
 800b106:	4013      	ands	r3, r2
 800b108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68da      	ldr	r2, [r3, #12]
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	005b      	lsls	r3, r3, #1
 800b112:	fa02 f303 	lsl.w	r3, r2, r3
 800b116:	69ba      	ldr	r2, [r7, #24]
 800b118:	4313      	orrs	r3, r2
 800b11a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	69ba      	ldr	r2, [r7, #24]
 800b120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b128:	2201      	movs	r2, #1
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	fa02 f303 	lsl.w	r3, r2, r3
 800b130:	43db      	mvns	r3, r3
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	4013      	ands	r3, r2
 800b136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	091b      	lsrs	r3, r3, #4
 800b13e:	f003 0201 	and.w	r2, r3, #1
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	fa02 f303 	lsl.w	r3, r2, r3
 800b148:	69ba      	ldr	r2, [r7, #24]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	f003 0303 	and.w	r3, r3, #3
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d017      	beq.n	800b190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	2203      	movs	r2, #3
 800b16c:	fa02 f303 	lsl.w	r3, r2, r3
 800b170:	43db      	mvns	r3, r3
 800b172:	69ba      	ldr	r2, [r7, #24]
 800b174:	4013      	ands	r3, r2
 800b176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	fa02 f303 	lsl.w	r3, r2, r3
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	4313      	orrs	r3, r2
 800b188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	69ba      	ldr	r2, [r7, #24]
 800b18e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f003 0303 	and.w	r3, r3, #3
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d123      	bne.n	800b1e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	08da      	lsrs	r2, r3, #3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3208      	adds	r2, #8
 800b1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	f003 0307 	and.w	r3, r3, #7
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	220f      	movs	r2, #15
 800b1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b8:	43db      	mvns	r3, r3
 800b1ba:	69ba      	ldr	r2, [r7, #24]
 800b1bc:	4013      	ands	r3, r2
 800b1be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	691a      	ldr	r2, [r3, #16]
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	f003 0307 	and.w	r3, r3, #7
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	08da      	lsrs	r2, r3, #3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3208      	adds	r2, #8
 800b1de:	69b9      	ldr	r1, [r7, #24]
 800b1e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	2203      	movs	r2, #3
 800b1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f4:	43db      	mvns	r3, r3
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	f003 0203 	and.w	r2, r3, #3
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	fa02 f303 	lsl.w	r3, r2, r3
 800b20c:	69ba      	ldr	r2, [r7, #24]
 800b20e:	4313      	orrs	r3, r2
 800b210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 80b4 	beq.w	800b38e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	4b60      	ldr	r3, [pc, #384]	; (800b3ac <HAL_GPIO_Init+0x30c>)
 800b22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b22e:	4a5f      	ldr	r2, [pc, #380]	; (800b3ac <HAL_GPIO_Init+0x30c>)
 800b230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b234:	6453      	str	r3, [r2, #68]	; 0x44
 800b236:	4b5d      	ldr	r3, [pc, #372]	; (800b3ac <HAL_GPIO_Init+0x30c>)
 800b238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b23a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b242:	4a5b      	ldr	r2, [pc, #364]	; (800b3b0 <HAL_GPIO_Init+0x310>)
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	089b      	lsrs	r3, r3, #2
 800b248:	3302      	adds	r3, #2
 800b24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b24e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	220f      	movs	r2, #15
 800b25a:	fa02 f303 	lsl.w	r3, r2, r3
 800b25e:	43db      	mvns	r3, r3
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	4013      	ands	r3, r2
 800b264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a52      	ldr	r2, [pc, #328]	; (800b3b4 <HAL_GPIO_Init+0x314>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d02b      	beq.n	800b2c6 <HAL_GPIO_Init+0x226>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a51      	ldr	r2, [pc, #324]	; (800b3b8 <HAL_GPIO_Init+0x318>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d025      	beq.n	800b2c2 <HAL_GPIO_Init+0x222>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a50      	ldr	r2, [pc, #320]	; (800b3bc <HAL_GPIO_Init+0x31c>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d01f      	beq.n	800b2be <HAL_GPIO_Init+0x21e>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a4f      	ldr	r2, [pc, #316]	; (800b3c0 <HAL_GPIO_Init+0x320>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d019      	beq.n	800b2ba <HAL_GPIO_Init+0x21a>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a4e      	ldr	r2, [pc, #312]	; (800b3c4 <HAL_GPIO_Init+0x324>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d013      	beq.n	800b2b6 <HAL_GPIO_Init+0x216>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a4d      	ldr	r2, [pc, #308]	; (800b3c8 <HAL_GPIO_Init+0x328>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00d      	beq.n	800b2b2 <HAL_GPIO_Init+0x212>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a4c      	ldr	r2, [pc, #304]	; (800b3cc <HAL_GPIO_Init+0x32c>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d007      	beq.n	800b2ae <HAL_GPIO_Init+0x20e>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a4b      	ldr	r2, [pc, #300]	; (800b3d0 <HAL_GPIO_Init+0x330>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d101      	bne.n	800b2aa <HAL_GPIO_Init+0x20a>
 800b2a6:	2307      	movs	r3, #7
 800b2a8:	e00e      	b.n	800b2c8 <HAL_GPIO_Init+0x228>
 800b2aa:	2308      	movs	r3, #8
 800b2ac:	e00c      	b.n	800b2c8 <HAL_GPIO_Init+0x228>
 800b2ae:	2306      	movs	r3, #6
 800b2b0:	e00a      	b.n	800b2c8 <HAL_GPIO_Init+0x228>
 800b2b2:	2305      	movs	r3, #5
 800b2b4:	e008      	b.n	800b2c8 <HAL_GPIO_Init+0x228>
 800b2b6:	2304      	movs	r3, #4
 800b2b8:	e006      	b.n	800b2c8 <HAL_GPIO_Init+0x228>
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e004      	b.n	800b2c8 <HAL_GPIO_Init+0x228>
 800b2be:	2302      	movs	r3, #2
 800b2c0:	e002      	b.n	800b2c8 <HAL_GPIO_Init+0x228>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e000      	b.n	800b2c8 <HAL_GPIO_Init+0x228>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	69fa      	ldr	r2, [r7, #28]
 800b2ca:	f002 0203 	and.w	r2, r2, #3
 800b2ce:	0092      	lsls	r2, r2, #2
 800b2d0:	4093      	lsls	r3, r2
 800b2d2:	69ba      	ldr	r2, [r7, #24]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2d8:	4935      	ldr	r1, [pc, #212]	; (800b3b0 <HAL_GPIO_Init+0x310>)
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	089b      	lsrs	r3, r3, #2
 800b2de:	3302      	adds	r3, #2
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b2e6:	4b3b      	ldr	r3, [pc, #236]	; (800b3d4 <HAL_GPIO_Init+0x334>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	43db      	mvns	r3, r3
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	4313      	orrs	r3, r2
 800b308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b30a:	4a32      	ldr	r2, [pc, #200]	; (800b3d4 <HAL_GPIO_Init+0x334>)
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b310:	4b30      	ldr	r3, [pc, #192]	; (800b3d4 <HAL_GPIO_Init+0x334>)
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	43db      	mvns	r3, r3
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	4013      	ands	r3, r2
 800b31e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d003      	beq.n	800b334 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b32c:	69ba      	ldr	r2, [r7, #24]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	4313      	orrs	r3, r2
 800b332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b334:	4a27      	ldr	r2, [pc, #156]	; (800b3d4 <HAL_GPIO_Init+0x334>)
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b33a:	4b26      	ldr	r3, [pc, #152]	; (800b3d4 <HAL_GPIO_Init+0x334>)
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	43db      	mvns	r3, r3
 800b344:	69ba      	ldr	r2, [r7, #24]
 800b346:	4013      	ands	r3, r2
 800b348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d003      	beq.n	800b35e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b356:	69ba      	ldr	r2, [r7, #24]
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b35e:	4a1d      	ldr	r2, [pc, #116]	; (800b3d4 <HAL_GPIO_Init+0x334>)
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b364:	4b1b      	ldr	r3, [pc, #108]	; (800b3d4 <HAL_GPIO_Init+0x334>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	43db      	mvns	r3, r3
 800b36e:	69ba      	ldr	r2, [r7, #24]
 800b370:	4013      	ands	r3, r2
 800b372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b380:	69ba      	ldr	r2, [r7, #24]
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	4313      	orrs	r3, r2
 800b386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b388:	4a12      	ldr	r2, [pc, #72]	; (800b3d4 <HAL_GPIO_Init+0x334>)
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	3301      	adds	r3, #1
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	2b0f      	cmp	r3, #15
 800b398:	f67f ae90 	bls.w	800b0bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b39c:	bf00      	nop
 800b39e:	bf00      	nop
 800b3a0:	3724      	adds	r7, #36	; 0x24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	40023800 	.word	0x40023800
 800b3b0:	40013800 	.word	0x40013800
 800b3b4:	40020000 	.word	0x40020000
 800b3b8:	40020400 	.word	0x40020400
 800b3bc:	40020800 	.word	0x40020800
 800b3c0:	40020c00 	.word	0x40020c00
 800b3c4:	40021000 	.word	0x40021000
 800b3c8:	40021400 	.word	0x40021400
 800b3cc:	40021800 	.word	0x40021800
 800b3d0:	40021c00 	.word	0x40021c00
 800b3d4:	40013c00 	.word	0x40013c00

0800b3d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	807b      	strh	r3, [r7, #2]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b3e8:	787b      	ldrb	r3, [r7, #1]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d003      	beq.n	800b3f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b3ee:	887a      	ldrh	r2, [r7, #2]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b3f4:	e003      	b.n	800b3fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b3f6:	887b      	ldrh	r3, [r7, #2]
 800b3f8:	041a      	lsls	r2, r3, #16
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	619a      	str	r2, [r3, #24]
}
 800b3fe:	bf00      	nop
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
	...

0800b40c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b416:	4b08      	ldr	r3, [pc, #32]	; (800b438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b418:	695a      	ldr	r2, [r3, #20]
 800b41a:	88fb      	ldrh	r3, [r7, #6]
 800b41c:	4013      	ands	r3, r2
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d006      	beq.n	800b430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b422:	4a05      	ldr	r2, [pc, #20]	; (800b438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b424:	88fb      	ldrh	r3, [r7, #6]
 800b426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b428:	88fb      	ldrh	r3, [r7, #6]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f6 fce4 	bl	8001df8 <HAL_GPIO_EXTI_Callback>
  }
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	40013c00 	.word	0x40013c00

0800b43c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e12b      	b.n	800b6a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b00      	cmp	r3, #0
 800b458:	d106      	bne.n	800b468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7f8 f84a 	bl	80034fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2224      	movs	r2, #36	; 0x24
 800b46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f022 0201 	bic.w	r2, r2, #1
 800b47e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b48e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b49e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b4a0:	f003 fc0c 	bl	800ecbc <HAL_RCC_GetPCLK1Freq>
 800b4a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	4a81      	ldr	r2, [pc, #516]	; (800b6b0 <HAL_I2C_Init+0x274>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d807      	bhi.n	800b4c0 <HAL_I2C_Init+0x84>
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	4a80      	ldr	r2, [pc, #512]	; (800b6b4 <HAL_I2C_Init+0x278>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	bf94      	ite	ls
 800b4b8:	2301      	movls	r3, #1
 800b4ba:	2300      	movhi	r3, #0
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	e006      	b.n	800b4ce <HAL_I2C_Init+0x92>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	4a7d      	ldr	r2, [pc, #500]	; (800b6b8 <HAL_I2C_Init+0x27c>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	bf94      	ite	ls
 800b4c8:	2301      	movls	r3, #1
 800b4ca:	2300      	movhi	r3, #0
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e0e7      	b.n	800b6a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4a78      	ldr	r2, [pc, #480]	; (800b6bc <HAL_I2C_Init+0x280>)
 800b4da:	fba2 2303 	umull	r2, r3, r2, r3
 800b4de:	0c9b      	lsrs	r3, r3, #18
 800b4e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6a1b      	ldr	r3, [r3, #32]
 800b4fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	4a6a      	ldr	r2, [pc, #424]	; (800b6b0 <HAL_I2C_Init+0x274>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d802      	bhi.n	800b510 <HAL_I2C_Init+0xd4>
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	3301      	adds	r3, #1
 800b50e:	e009      	b.n	800b524 <HAL_I2C_Init+0xe8>
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b516:	fb02 f303 	mul.w	r3, r2, r3
 800b51a:	4a69      	ldr	r2, [pc, #420]	; (800b6c0 <HAL_I2C_Init+0x284>)
 800b51c:	fba2 2303 	umull	r2, r3, r2, r3
 800b520:	099b      	lsrs	r3, r3, #6
 800b522:	3301      	adds	r3, #1
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	6812      	ldr	r2, [r2, #0]
 800b528:	430b      	orrs	r3, r1
 800b52a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	69db      	ldr	r3, [r3, #28]
 800b532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	495c      	ldr	r1, [pc, #368]	; (800b6b0 <HAL_I2C_Init+0x274>)
 800b540:	428b      	cmp	r3, r1
 800b542:	d819      	bhi.n	800b578 <HAL_I2C_Init+0x13c>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	1e59      	subs	r1, r3, #1
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b552:	1c59      	adds	r1, r3, #1
 800b554:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b558:	400b      	ands	r3, r1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00a      	beq.n	800b574 <HAL_I2C_Init+0x138>
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	1e59      	subs	r1, r3, #1
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	fbb1 f3f3 	udiv	r3, r1, r3
 800b56c:	3301      	adds	r3, #1
 800b56e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b572:	e051      	b.n	800b618 <HAL_I2C_Init+0x1dc>
 800b574:	2304      	movs	r3, #4
 800b576:	e04f      	b.n	800b618 <HAL_I2C_Init+0x1dc>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d111      	bne.n	800b5a4 <HAL_I2C_Init+0x168>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	1e58      	subs	r0, r3, #1
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6859      	ldr	r1, [r3, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	440b      	add	r3, r1
 800b58e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b592:	3301      	adds	r3, #1
 800b594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b598:	2b00      	cmp	r3, #0
 800b59a:	bf0c      	ite	eq
 800b59c:	2301      	moveq	r3, #1
 800b59e:	2300      	movne	r3, #0
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	e012      	b.n	800b5ca <HAL_I2C_Init+0x18e>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	1e58      	subs	r0, r3, #1
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6859      	ldr	r1, [r3, #4]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	440b      	add	r3, r1
 800b5b2:	0099      	lsls	r1, r3, #2
 800b5b4:	440b      	add	r3, r1
 800b5b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	bf0c      	ite	eq
 800b5c4:	2301      	moveq	r3, #1
 800b5c6:	2300      	movne	r3, #0
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <HAL_I2C_Init+0x196>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e022      	b.n	800b618 <HAL_I2C_Init+0x1dc>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10e      	bne.n	800b5f8 <HAL_I2C_Init+0x1bc>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	1e58      	subs	r0, r3, #1
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6859      	ldr	r1, [r3, #4]
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	440b      	add	r3, r1
 800b5e8:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5f6:	e00f      	b.n	800b618 <HAL_I2C_Init+0x1dc>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	1e58      	subs	r0, r3, #1
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6859      	ldr	r1, [r3, #4]
 800b600:	460b      	mov	r3, r1
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	440b      	add	r3, r1
 800b606:	0099      	lsls	r1, r3, #2
 800b608:	440b      	add	r3, r1
 800b60a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b60e:	3301      	adds	r3, #1
 800b610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b618:	6879      	ldr	r1, [r7, #4]
 800b61a:	6809      	ldr	r1, [r1, #0]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	69da      	ldr	r2, [r3, #28]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	431a      	orrs	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	430a      	orrs	r2, r1
 800b63a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	6911      	ldr	r1, [r2, #16]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	68d2      	ldr	r2, [r2, #12]
 800b652:	4311      	orrs	r1, r2
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	6812      	ldr	r2, [r2, #0]
 800b658:	430b      	orrs	r3, r1
 800b65a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	695a      	ldr	r2, [r3, #20]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	431a      	orrs	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	430a      	orrs	r2, r1
 800b676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f042 0201 	orr.w	r2, r2, #1
 800b686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2220      	movs	r2, #32
 800b692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	000186a0 	.word	0x000186a0
 800b6b4:	001e847f 	.word	0x001e847f
 800b6b8:	003d08ff 	.word	0x003d08ff
 800b6bc:	431bde83 	.word	0x431bde83
 800b6c0:	10624dd3 	.word	0x10624dd3

0800b6c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	817b      	strh	r3, [r7, #10]
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	813b      	strh	r3, [r7, #8]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6de:	f7fd fedd 	bl	800949c <HAL_GetTick>
 800b6e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b20      	cmp	r3, #32
 800b6ee:	f040 80d9 	bne.w	800b8a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	2319      	movs	r3, #25
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	496d      	ldr	r1, [pc, #436]	; (800b8b0 <HAL_I2C_Mem_Write+0x1ec>)
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f001 fa53 	bl	800cba8 <I2C_WaitOnFlagUntilTimeout>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b708:	2302      	movs	r3, #2
 800b70a:	e0cc      	b.n	800b8a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <HAL_I2C_Mem_Write+0x56>
 800b716:	2302      	movs	r3, #2
 800b718:	e0c5      	b.n	800b8a6 <HAL_I2C_Mem_Write+0x1e2>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d007      	beq.n	800b740 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f042 0201 	orr.w	r2, r2, #1
 800b73e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b74e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2221      	movs	r2, #33	; 0x21
 800b754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2240      	movs	r2, #64	; 0x40
 800b75c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6a3a      	ldr	r2, [r7, #32]
 800b76a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4a4d      	ldr	r2, [pc, #308]	; (800b8b4 <HAL_I2C_Mem_Write+0x1f0>)
 800b780:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b782:	88f8      	ldrh	r0, [r7, #6]
 800b784:	893a      	ldrh	r2, [r7, #8]
 800b786:	8979      	ldrh	r1, [r7, #10]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	9301      	str	r3, [sp, #4]
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	4603      	mov	r3, r0
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f000 fed0 	bl	800c538 <I2C_RequestMemoryWrite>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d052      	beq.n	800b844 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e081      	b.n	800b8a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f001 fad4 	bl	800cd54 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00d      	beq.n	800b7ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b6:	2b04      	cmp	r3, #4
 800b7b8:	d107      	bne.n	800b7ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e06b      	b.n	800b8a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	695b      	ldr	r3, [r3, #20]
 800b804:	f003 0304 	and.w	r3, r3, #4
 800b808:	2b04      	cmp	r3, #4
 800b80a:	d11b      	bne.n	800b844 <HAL_I2C_Mem_Write+0x180>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b810:	2b00      	cmp	r3, #0
 800b812:	d017      	beq.n	800b844 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	781a      	ldrb	r2, [r3, #0]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b82e:	3b01      	subs	r3, #1
 800b830:	b29a      	uxth	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	3b01      	subs	r3, #1
 800b83e:	b29a      	uxth	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1aa      	bne.n	800b7a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f001 fac0 	bl	800cdd6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00d      	beq.n	800b878 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b860:	2b04      	cmp	r3, #4
 800b862:	d107      	bne.n	800b874 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b872:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e016      	b.n	800b8a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2220      	movs	r2, #32
 800b88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	e000      	b.n	800b8a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b8a4:	2302      	movs	r3, #2
  }
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	00100002 	.word	0x00100002
 800b8b4:	ffff0000 	.word	0xffff0000

0800b8b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08c      	sub	sp, #48	; 0x30
 800b8bc:	af02      	add	r7, sp, #8
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	817b      	strh	r3, [r7, #10]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	813b      	strh	r3, [r7, #8]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8d2:	f7fd fde3 	bl	800949c <HAL_GetTick>
 800b8d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b20      	cmp	r3, #32
 800b8e2:	f040 8208 	bne.w	800bcf6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	2319      	movs	r3, #25
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	497b      	ldr	r1, [pc, #492]	; (800badc <HAL_I2C_Mem_Read+0x224>)
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f001 f959 	bl	800cba8 <I2C_WaitOnFlagUntilTimeout>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e1fb      	b.n	800bcf8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b906:	2b01      	cmp	r3, #1
 800b908:	d101      	bne.n	800b90e <HAL_I2C_Mem_Read+0x56>
 800b90a:	2302      	movs	r3, #2
 800b90c:	e1f4      	b.n	800bcf8 <HAL_I2C_Mem_Read+0x440>
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0301 	and.w	r3, r3, #1
 800b920:	2b01      	cmp	r3, #1
 800b922:	d007      	beq.n	800b934 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2222      	movs	r2, #34	; 0x22
 800b948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2240      	movs	r2, #64	; 0x40
 800b950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b95e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4a5b      	ldr	r2, [pc, #364]	; (800bae0 <HAL_I2C_Mem_Read+0x228>)
 800b974:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b976:	88f8      	ldrh	r0, [r7, #6]
 800b978:	893a      	ldrh	r2, [r7, #8]
 800b97a:	8979      	ldrh	r1, [r7, #10]
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	4603      	mov	r3, r0
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 fe6c 	bl	800c664 <I2C_RequestMemoryRead>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e1b0      	b.n	800bcf8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d113      	bne.n	800b9c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b99e:	2300      	movs	r3, #0
 800b9a0:	623b      	str	r3, [r7, #32]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	623b      	str	r3, [r7, #32]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	623b      	str	r3, [r7, #32]
 800b9b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	e184      	b.n	800bcd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d11b      	bne.n	800ba06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9de:	2300      	movs	r3, #0
 800b9e0:	61fb      	str	r3, [r7, #28]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	61fb      	str	r3, [r7, #28]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	61fb      	str	r3, [r7, #28]
 800b9f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	e164      	b.n	800bcd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d11b      	bne.n	800ba46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba2e:	2300      	movs	r3, #0
 800ba30:	61bb      	str	r3, [r7, #24]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	61bb      	str	r3, [r7, #24]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	61bb      	str	r3, [r7, #24]
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	e144      	b.n	800bcd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	695b      	ldr	r3, [r3, #20]
 800ba50:	617b      	str	r3, [r7, #20]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	617b      	str	r3, [r7, #20]
 800ba5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ba5c:	e138      	b.n	800bcd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	f200 80f1 	bhi.w	800bc4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d123      	bne.n	800bab8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f001 f9ef 	bl	800ce58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	e139      	b.n	800bcf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	691a      	ldr	r2, [r3, #16]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8e:	b2d2      	uxtb	r2, r2
 800ba90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa0:	3b01      	subs	r3, #1
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baac:	b29b      	uxth	r3, r3
 800baae:	3b01      	subs	r3, #1
 800bab0:	b29a      	uxth	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bab6:	e10b      	b.n	800bcd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800babc:	2b02      	cmp	r3, #2
 800babe:	d14e      	bne.n	800bb5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	2200      	movs	r2, #0
 800bac8:	4906      	ldr	r1, [pc, #24]	; (800bae4 <HAL_I2C_Mem_Read+0x22c>)
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f001 f86c 	bl	800cba8 <I2C_WaitOnFlagUntilTimeout>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d008      	beq.n	800bae8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e10e      	b.n	800bcf8 <HAL_I2C_Mem_Read+0x440>
 800bada:	bf00      	nop
 800badc:	00100002 	.word	0x00100002
 800bae0:	ffff0000 	.word	0xffff0000
 800bae4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	691a      	ldr	r2, [r3, #16]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb02:	b2d2      	uxtb	r2, r2
 800bb04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb14:	3b01      	subs	r3, #1
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	3b01      	subs	r3, #1
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691a      	ldr	r2, [r3, #16]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb34:	b2d2      	uxtb	r2, r2
 800bb36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb46:	3b01      	subs	r3, #1
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	3b01      	subs	r3, #1
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb5c:	e0b8      	b.n	800bcd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb64:	2200      	movs	r2, #0
 800bb66:	4966      	ldr	r1, [pc, #408]	; (800bd00 <HAL_I2C_Mem_Read+0x448>)
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f001 f81d 	bl	800cba8 <I2C_WaitOnFlagUntilTimeout>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e0bf      	b.n	800bcf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	691a      	ldr	r2, [r3, #16]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb92:	b2d2      	uxtb	r2, r2
 800bb94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bba4:	3b01      	subs	r3, #1
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	494f      	ldr	r1, [pc, #316]	; (800bd00 <HAL_I2C_Mem_Read+0x448>)
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f000 ffef 	bl	800cba8 <I2C_WaitOnFlagUntilTimeout>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e091      	b.n	800bcf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	b2d2      	uxtb	r2, r2
 800bbf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc00:	3b01      	subs	r3, #1
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	691a      	ldr	r2, [r3, #16]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc20:	b2d2      	uxtb	r2, r2
 800bc22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	1c5a      	adds	r2, r3, #1
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc32:	3b01      	subs	r3, #1
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	3b01      	subs	r3, #1
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc48:	e042      	b.n	800bcd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f001 f902 	bl	800ce58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e04c      	b.n	800bcf8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	691a      	ldr	r2, [r3, #16]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	b2d2      	uxtb	r2, r2
 800bc6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	f003 0304 	and.w	r3, r3, #4
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	d118      	bne.n	800bcd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	691a      	ldr	r2, [r3, #16]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	b2d2      	uxtb	r2, r2
 800bcaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f47f aec2 	bne.w	800ba5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2220      	movs	r2, #32
 800bcde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e000      	b.n	800bcf8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bcf6:	2302      	movs	r3, #2
  }
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3728      	adds	r7, #40	; 0x28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	00010004 	.word	0x00010004

0800bd04 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08c      	sub	sp, #48	; 0x30
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	4608      	mov	r0, r1
 800bd0e:	4611      	mov	r1, r2
 800bd10:	461a      	mov	r2, r3
 800bd12:	4603      	mov	r3, r0
 800bd14:	817b      	strh	r3, [r7, #10]
 800bd16:	460b      	mov	r3, r1
 800bd18:	813b      	strh	r3, [r7, #8]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bd1e:	f7fd fbbd 	bl	800949c <HAL_GetTick>
 800bd22:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800bd24:	2300      	movs	r3, #0
 800bd26:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	2b20      	cmp	r3, #32
 800bd32:	f040 8176 	bne.w	800c022 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800bd36:	4b95      	ldr	r3, [pc, #596]	; (800bf8c <HAL_I2C_Mem_Read_DMA+0x288>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	08db      	lsrs	r3, r3, #3
 800bd3c:	4a94      	ldr	r2, [pc, #592]	; (800bf90 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800bd3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd42:	0a1a      	lsrs	r2, r3, #8
 800bd44:	4613      	mov	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	009a      	lsls	r2, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d116      	bne.n	800bd8a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd76:	f043 0220 	orr.w	r2, r3, #32
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e14c      	b.n	800c024 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	f003 0302 	and.w	r3, r3, #2
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d0db      	beq.n	800bd50 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d101      	bne.n	800bda6 <HAL_I2C_Mem_Read_DMA+0xa2>
 800bda2:	2302      	movs	r3, #2
 800bda4:	e13e      	b.n	800c024 <HAL_I2C_Mem_Read_DMA+0x320>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d007      	beq.n	800bdcc <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f042 0201 	orr.w	r2, r2, #1
 800bdca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bdda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2222      	movs	r2, #34	; 0x22
 800bde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2240      	movs	r2, #64	; 0x40
 800bde8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800bdfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be02:	b29a      	uxth	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4a62      	ldr	r2, [pc, #392]	; (800bf94 <HAL_I2C_Mem_Read_DMA+0x290>)
 800be0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800be0e:	897a      	ldrh	r2, [r7, #10]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800be14:	893a      	ldrh	r2, [r7, #8]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800be1a:	88fa      	ldrh	r2, [r7, #6]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f000 80cc 	beq.w	800bfc8 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be34:	2b00      	cmp	r3, #0
 800be36:	d02d      	beq.n	800be94 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3c:	4a56      	ldr	r2, [pc, #344]	; (800bf98 <HAL_I2C_Mem_Read_DMA+0x294>)
 800be3e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be44:	4a55      	ldr	r2, [pc, #340]	; (800bf9c <HAL_I2C_Mem_Read_DMA+0x298>)
 800be46:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4c:	2200      	movs	r2, #0
 800be4e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be54:	2200      	movs	r2, #0
 800be56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5c:	2200      	movs	r2, #0
 800be5e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be64:	2200      	movs	r2, #0
 800be66:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3310      	adds	r3, #16
 800be72:	4619      	mov	r1, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	461a      	mov	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7e:	f7fe fdaf 	bl	800a9e0 <HAL_DMA_Start_IT>
 800be82:	4603      	mov	r3, r0
 800be84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800be88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f040 8087 	bne.w	800bfa0 <HAL_I2C_Mem_Read_DMA+0x29c>
 800be92:	e013      	b.n	800bebc <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2220      	movs	r2, #32
 800be98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e0b3      	b.n	800c024 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800bebc:	88f8      	ldrh	r0, [r7, #6]
 800bebe:	893a      	ldrh	r2, [r7, #8]
 800bec0:	8979      	ldrh	r1, [r7, #10]
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	2323      	movs	r3, #35	; 0x23
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	4603      	mov	r3, r0
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f000 fbc9 	bl	800c664 <I2C_RequestMemoryRead>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d023      	beq.n	800bf20 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe fe47 	bl	800ab70 <HAL_DMA_Abort_IT>
 800bee2:	4603      	mov	r3, r0
 800bee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beec:	2200      	movs	r2, #0
 800beee:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800befe:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f022 0201 	bic.w	r2, r2, #1
 800bf1a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e081      	b.n	800c024 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d108      	bne.n	800bf3a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	e007      	b.n	800bf4a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	61bb      	str	r3, [r7, #24]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	61bb      	str	r3, [r7, #24]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	61bb      	str	r3, [r7, #24]
 800bf5e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf76:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf86:	605a      	str	r2, [r3, #4]
 800bf88:	e049      	b.n	800c01e <HAL_I2C_Mem_Read_DMA+0x31a>
 800bf8a:	bf00      	nop
 800bf8c:	20000004 	.word	0x20000004
 800bf90:	14f8b589 	.word	0x14f8b589
 800bf94:	ffff0000 	.word	0xffff0000
 800bf98:	0800c835 	.word	0x0800c835
 800bf9c:	0800c9df 	.word	0x0800c9df
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb4:	f043 0210 	orr.w	r2, r3, #16
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e02d      	b.n	800c024 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800bfc8:	88f8      	ldrh	r0, [r7, #6]
 800bfca:	893a      	ldrh	r2, [r7, #8]
 800bfcc:	8979      	ldrh	r1, [r7, #10]
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	2323      	movs	r3, #35	; 0x23
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 fb43 	bl	800c664 <I2C_RequestMemoryRead>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e01d      	b.n	800c024 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bfe8:	2300      	movs	r3, #0
 800bfea:	617b      	str	r3, [r7, #20]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	617b      	str	r3, [r7, #20]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	699b      	ldr	r3, [r3, #24]
 800bffa:	617b      	str	r3, [r7, #20]
 800bffc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c00c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2220      	movs	r2, #32
 800c012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	e000      	b.n	800c024 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800c022:	2302      	movs	r3, #2
  }
}
 800c024:	4618      	mov	r0, r3
 800c026:	3728      	adds	r7, #40	; 0x28
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08a      	sub	sp, #40	; 0x28
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c044:	2300      	movs	r3, #0
 800c046:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c04e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	0a1b      	lsrs	r3, r3, #8
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00e      	beq.n	800c07a <HAL_I2C_ER_IRQHandler+0x4e>
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	0a1b      	lsrs	r3, r3, #8
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	2b00      	cmp	r3, #0
 800c066:	d008      	beq.n	800c07a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	f043 0301 	orr.w	r3, r3, #1
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c078:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	0a5b      	lsrs	r3, r3, #9
 800c07e:	f003 0301 	and.w	r3, r3, #1
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00e      	beq.n	800c0a4 <HAL_I2C_ER_IRQHandler+0x78>
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	0a1b      	lsrs	r3, r3, #8
 800c08a:	f003 0301 	and.w	r3, r3, #1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d008      	beq.n	800c0a4 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c094:	f043 0302 	orr.w	r3, r3, #2
 800c098:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800c0a2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	0a9b      	lsrs	r3, r3, #10
 800c0a8:	f003 0301 	and.w	r3, r3, #1
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d03f      	beq.n	800c130 <HAL_I2C_ER_IRQHandler+0x104>
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	0a1b      	lsrs	r3, r3, #8
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d039      	beq.n	800c130 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800c0bc:	7efb      	ldrb	r3, [r7, #27]
 800c0be:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0ce:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c0d6:	7ebb      	ldrb	r3, [r7, #26]
 800c0d8:	2b20      	cmp	r3, #32
 800c0da:	d112      	bne.n	800c102 <HAL_I2C_ER_IRQHandler+0xd6>
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10f      	bne.n	800c102 <HAL_I2C_ER_IRQHandler+0xd6>
 800c0e2:	7cfb      	ldrb	r3, [r7, #19]
 800c0e4:	2b21      	cmp	r3, #33	; 0x21
 800c0e6:	d008      	beq.n	800c0fa <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c0e8:	7cfb      	ldrb	r3, [r7, #19]
 800c0ea:	2b29      	cmp	r3, #41	; 0x29
 800c0ec:	d005      	beq.n	800c0fa <HAL_I2C_ER_IRQHandler+0xce>
 800c0ee:	7cfb      	ldrb	r3, [r7, #19]
 800c0f0:	2b28      	cmp	r3, #40	; 0x28
 800c0f2:	d106      	bne.n	800c102 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b21      	cmp	r3, #33	; 0x21
 800c0f8:	d103      	bne.n	800c102 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f87a 	bl	800c1f4 <I2C_Slave_AF>
 800c100:	e016      	b.n	800c130 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c10a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10e:	f043 0304 	orr.w	r3, r3, #4
 800c112:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c114:	7efb      	ldrb	r3, [r7, #27]
 800c116:	2b10      	cmp	r3, #16
 800c118:	d002      	beq.n	800c120 <HAL_I2C_ER_IRQHandler+0xf4>
 800c11a:	7efb      	ldrb	r3, [r7, #27]
 800c11c:	2b40      	cmp	r3, #64	; 0x40
 800c11e:	d107      	bne.n	800c130 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c12e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	0adb      	lsrs	r3, r3, #11
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00e      	beq.n	800c15a <HAL_I2C_ER_IRQHandler+0x12e>
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	0a1b      	lsrs	r3, r3, #8
 800c140:	f003 0301 	and.w	r3, r3, #1
 800c144:	2b00      	cmp	r3, #0
 800c146:	d008      	beq.n	800c15a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	f043 0308 	orr.w	r3, r3, #8
 800c14e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c158:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d008      	beq.n	800c172 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	431a      	orrs	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f8b1 	bl	800c2d4 <I2C_ITError>
  }
}
 800c172:	bf00      	nop
 800c174:	3728      	adds	r7, #40	; 0x28
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c17a:	b480      	push	{r7}
 800c17c:	b083      	sub	sp, #12
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c182:	bf00      	nop
 800c184:	370c      	adds	r7, #12
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c196:	bf00      	nop
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b083      	sub	sp, #12
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c1aa:	bf00      	nop
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b083      	sub	sp, #12
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c1d2:	bf00      	nop
 800c1d4:	370c      	adds	r7, #12
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
	...

0800c1f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c202:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c208:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b08      	cmp	r3, #8
 800c20e:	d002      	beq.n	800c216 <I2C_Slave_AF+0x22>
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	2b20      	cmp	r3, #32
 800c214:	d129      	bne.n	800c26a <I2C_Slave_AF+0x76>
 800c216:	7bfb      	ldrb	r3, [r7, #15]
 800c218:	2b28      	cmp	r3, #40	; 0x28
 800c21a:	d126      	bne.n	800c26a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a2c      	ldr	r2, [pc, #176]	; (800c2d0 <I2C_Slave_AF+0xdc>)
 800c220:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c230:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c23a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c24a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2220      	movs	r2, #32
 800c256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff ffa7 	bl	800c1b6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800c268:	e02e      	b.n	800c2c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	2b21      	cmp	r3, #33	; 0x21
 800c26e:	d126      	bne.n	800c2be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a17      	ldr	r2, [pc, #92]	; (800c2d0 <I2C_Slave_AF+0xdc>)
 800c274:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2221      	movs	r2, #33	; 0x21
 800c27a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2220      	movs	r2, #32
 800c280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c29a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c2a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff ff69 	bl	800c18e <HAL_I2C_SlaveTxCpltCallback>
}
 800c2bc:	e004      	b.n	800c2c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c2c6:	615a      	str	r2, [r3, #20]
}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	ffff0000 	.word	0xffff0000

0800c2d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c2ec:	7bbb      	ldrb	r3, [r7, #14]
 800c2ee:	2b10      	cmp	r3, #16
 800c2f0:	d002      	beq.n	800c2f8 <I2C_ITError+0x24>
 800c2f2:	7bbb      	ldrb	r3, [r7, #14]
 800c2f4:	2b40      	cmp	r3, #64	; 0x40
 800c2f6:	d10a      	bne.n	800c30e <I2C_ITError+0x3a>
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	2b22      	cmp	r3, #34	; 0x22
 800c2fc:	d107      	bne.n	800c30e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c30c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c314:	2b28      	cmp	r3, #40	; 0x28
 800c316:	d107      	bne.n	800c328 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2228      	movs	r2, #40	; 0x28
 800c322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c326:	e015      	b.n	800c354 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c336:	d00a      	beq.n	800c34e <I2C_ITError+0x7a>
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	2b60      	cmp	r3, #96	; 0x60
 800c33c:	d007      	beq.n	800c34e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2220      	movs	r2, #32
 800c342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c35e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c362:	d162      	bne.n	800c42a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c372:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d020      	beq.n	800c3c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c386:	4a6a      	ldr	r2, [pc, #424]	; (800c530 <I2C_ITError+0x25c>)
 800c388:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fbee 	bl	800ab70 <HAL_DMA_Abort_IT>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	f000 8089 	beq.w	800c4ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f022 0201 	bic.w	r2, r2, #1
 800c3aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2220      	movs	r2, #32
 800c3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c3be:	4610      	mov	r0, r2
 800c3c0:	4798      	blx	r3
 800c3c2:	e074      	b.n	800c4ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c8:	4a59      	ldr	r2, [pc, #356]	; (800c530 <I2C_ITError+0x25c>)
 800c3ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7fe fbcd 	bl	800ab70 <HAL_DMA_Abort_IT>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d068      	beq.n	800c4ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e6:	2b40      	cmp	r3, #64	; 0x40
 800c3e8:	d10b      	bne.n	800c402 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	691a      	ldr	r2, [r3, #16]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	b2d2      	uxtb	r2, r2
 800c3f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f022 0201 	bic.w	r2, r2, #1
 800c410:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2220      	movs	r2, #32
 800c416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c424:	4610      	mov	r0, r2
 800c426:	4798      	blx	r3
 800c428:	e041      	b.n	800c4ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b60      	cmp	r3, #96	; 0x60
 800c434:	d125      	bne.n	800c482 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2220      	movs	r2, #32
 800c43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c44e:	2b40      	cmp	r3, #64	; 0x40
 800c450:	d10b      	bne.n	800c46a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	691a      	ldr	r2, [r3, #16]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45c:	b2d2      	uxtb	r2, r2
 800c45e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c464:	1c5a      	adds	r2, r3, #1
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f022 0201 	bic.w	r2, r2, #1
 800c478:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7ff feaf 	bl	800c1de <HAL_I2C_AbortCpltCallback>
 800c480:	e015      	b.n	800c4ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c48c:	2b40      	cmp	r3, #64	; 0x40
 800c48e:	d10b      	bne.n	800c4a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	691a      	ldr	r2, [r3, #16]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49a:	b2d2      	uxtb	r2, r2
 800c49c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a2:	1c5a      	adds	r2, r3, #1
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7ff fe8e 	bl	800c1ca <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10e      	bne.n	800c4dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d109      	bne.n	800c4dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d104      	bne.n	800c4dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d007      	beq.n	800c4ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c4ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	2b04      	cmp	r3, #4
 800c4fe:	d113      	bne.n	800c528 <I2C_ITError+0x254>
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	2b28      	cmp	r3, #40	; 0x28
 800c504:	d110      	bne.n	800c528 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a0a      	ldr	r2, [pc, #40]	; (800c534 <I2C_ITError+0x260>)
 800c50a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2220      	movs	r2, #32
 800c516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff fe47 	bl	800c1b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c528:	bf00      	nop
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	0800ca59 	.word	0x0800ca59
 800c534:	ffff0000 	.word	0xffff0000

0800c538 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b088      	sub	sp, #32
 800c53c:	af02      	add	r7, sp, #8
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	4608      	mov	r0, r1
 800c542:	4611      	mov	r1, r2
 800c544:	461a      	mov	r2, r3
 800c546:	4603      	mov	r3, r0
 800c548:	817b      	strh	r3, [r7, #10]
 800c54a:	460b      	mov	r3, r1
 800c54c:	813b      	strh	r3, [r7, #8]
 800c54e:	4613      	mov	r3, r2
 800c550:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	2200      	movs	r2, #0
 800c56a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f000 fb1a 	bl	800cba8 <I2C_WaitOnFlagUntilTimeout>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00d      	beq.n	800c596 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c588:	d103      	bne.n	800c592 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c590:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	e05f      	b.n	800c656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c596:	897b      	ldrh	r3, [r7, #10]
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	461a      	mov	r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c5a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	6a3a      	ldr	r2, [r7, #32]
 800c5aa:	492d      	ldr	r1, [pc, #180]	; (800c660 <I2C_RequestMemoryWrite+0x128>)
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f000 fb52 	bl	800cc56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e04c      	b.n	800c656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c5bc:	2300      	movs	r3, #0
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	617b      	str	r3, [r7, #20]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	699b      	ldr	r3, [r3, #24]
 800c5ce:	617b      	str	r3, [r7, #20]
 800c5d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d4:	6a39      	ldr	r1, [r7, #32]
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f000 fbbc 	bl	800cd54 <I2C_WaitOnTXEFlagUntilTimeout>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00d      	beq.n	800c5fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e6:	2b04      	cmp	r3, #4
 800c5e8:	d107      	bne.n	800c5fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e02b      	b.n	800c656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c5fe:	88fb      	ldrh	r3, [r7, #6]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d105      	bne.n	800c610 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c604:	893b      	ldrh	r3, [r7, #8]
 800c606:	b2da      	uxtb	r2, r3
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	611a      	str	r2, [r3, #16]
 800c60e:	e021      	b.n	800c654 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c610:	893b      	ldrh	r3, [r7, #8]
 800c612:	0a1b      	lsrs	r3, r3, #8
 800c614:	b29b      	uxth	r3, r3
 800c616:	b2da      	uxtb	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c61e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c620:	6a39      	ldr	r1, [r7, #32]
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 fb96 	bl	800cd54 <I2C_WaitOnTXEFlagUntilTimeout>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00d      	beq.n	800c64a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c632:	2b04      	cmp	r3, #4
 800c634:	d107      	bne.n	800c646 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c644:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	e005      	b.n	800c656 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c64a:	893b      	ldrh	r3, [r7, #8]
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3718      	adds	r7, #24
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	00010002 	.word	0x00010002

0800c664 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af02      	add	r7, sp, #8
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	4608      	mov	r0, r1
 800c66e:	4611      	mov	r1, r2
 800c670:	461a      	mov	r2, r3
 800c672:	4603      	mov	r3, r0
 800c674:	817b      	strh	r3, [r7, #10]
 800c676:	460b      	mov	r3, r1
 800c678:	813b      	strh	r3, [r7, #8]
 800c67a:	4613      	mov	r3, r2
 800c67c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c68c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c69c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f000 fa7c 	bl	800cba8 <I2C_WaitOnFlagUntilTimeout>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00d      	beq.n	800c6d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6c4:	d103      	bne.n	800c6ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	e0aa      	b.n	800c828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c6d2:	897b      	ldrh	r3, [r7, #10]
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c6e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e4:	6a3a      	ldr	r2, [r7, #32]
 800c6e6:	4952      	ldr	r1, [pc, #328]	; (800c830 <I2C_RequestMemoryRead+0x1cc>)
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f000 fab4 	bl	800cc56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e097      	b.n	800c828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	617b      	str	r3, [r7, #20]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	695b      	ldr	r3, [r3, #20]
 800c702:	617b      	str	r3, [r7, #20]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	617b      	str	r3, [r7, #20]
 800c70c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c70e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c710:	6a39      	ldr	r1, [r7, #32]
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f000 fb1e 	bl	800cd54 <I2C_WaitOnTXEFlagUntilTimeout>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00d      	beq.n	800c73a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c722:	2b04      	cmp	r3, #4
 800c724:	d107      	bne.n	800c736 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	e076      	b.n	800c828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c73a:	88fb      	ldrh	r3, [r7, #6]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d105      	bne.n	800c74c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c740:	893b      	ldrh	r3, [r7, #8]
 800c742:	b2da      	uxtb	r2, r3
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	611a      	str	r2, [r3, #16]
 800c74a:	e021      	b.n	800c790 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c74c:	893b      	ldrh	r3, [r7, #8]
 800c74e:	0a1b      	lsrs	r3, r3, #8
 800c750:	b29b      	uxth	r3, r3
 800c752:	b2da      	uxtb	r2, r3
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c75a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c75c:	6a39      	ldr	r1, [r7, #32]
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f000 faf8 	bl	800cd54 <I2C_WaitOnTXEFlagUntilTimeout>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00d      	beq.n	800c786 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76e:	2b04      	cmp	r3, #4
 800c770:	d107      	bne.n	800c782 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	e050      	b.n	800c828 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c786:	893b      	ldrh	r3, [r7, #8]
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c792:	6a39      	ldr	r1, [r7, #32]
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f000 fadd 	bl	800cd54 <I2C_WaitOnTXEFlagUntilTimeout>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00d      	beq.n	800c7bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a4:	2b04      	cmp	r3, #4
 800c7a6:	d107      	bne.n	800c7b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e035      	b.n	800c828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 f9e5 	bl	800cba8 <I2C_WaitOnFlagUntilTimeout>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00d      	beq.n	800c800 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7f2:	d103      	bne.n	800c7fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e013      	b.n	800c828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c800:	897b      	ldrh	r3, [r7, #10]
 800c802:	b2db      	uxtb	r3, r3
 800c804:	f043 0301 	orr.w	r3, r3, #1
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	6a3a      	ldr	r2, [r7, #32]
 800c814:	4906      	ldr	r1, [pc, #24]	; (800c830 <I2C_RequestMemoryRead+0x1cc>)
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 fa1d 	bl	800cc56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c822:	2301      	movs	r3, #1
 800c824:	e000      	b.n	800c828 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3718      	adds	r7, #24
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	00010002 	.word	0x00010002

0800c834 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c840:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c848:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c850:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c856:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c866:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d003      	beq.n	800c878 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c874:	2200      	movs	r2, #0
 800c876:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c884:	2200      	movs	r2, #0
 800c886:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800c888:	7cfb      	ldrb	r3, [r7, #19]
 800c88a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800c88e:	2b21      	cmp	r3, #33	; 0x21
 800c890:	d007      	beq.n	800c8a2 <I2C_DMAXferCplt+0x6e>
 800c892:	7cfb      	ldrb	r3, [r7, #19]
 800c894:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800c898:	2b22      	cmp	r3, #34	; 0x22
 800c89a:	d131      	bne.n	800c900 <I2C_DMAXferCplt+0xcc>
 800c89c:	7cbb      	ldrb	r3, [r7, #18]
 800c89e:	2b20      	cmp	r3, #32
 800c8a0:	d12e      	bne.n	800c900 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	685a      	ldr	r2, [r3, #4]
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8b0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c8b8:	7cfb      	ldrb	r3, [r7, #19]
 800c8ba:	2b29      	cmp	r3, #41	; 0x29
 800c8bc:	d10a      	bne.n	800c8d4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	2221      	movs	r2, #33	; 0x21
 800c8c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2228      	movs	r2, #40	; 0x28
 800c8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c8cc:	6978      	ldr	r0, [r7, #20]
 800c8ce:	f7ff fc5e 	bl	800c18e <HAL_I2C_SlaveTxCpltCallback>
 800c8d2:	e00c      	b.n	800c8ee <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c8d4:	7cfb      	ldrb	r3, [r7, #19]
 800c8d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d8:	d109      	bne.n	800c8ee <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2222      	movs	r2, #34	; 0x22
 800c8de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2228      	movs	r2, #40	; 0x28
 800c8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c8e8:	6978      	ldr	r0, [r7, #20]
 800c8ea:	f7ff fc5a 	bl	800c1a2 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c8fc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c8fe:	e06a      	b.n	800c9d6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d064      	beq.n	800c9d6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c910:	b29b      	uxth	r3, r3
 800c912:	2b01      	cmp	r3, #1
 800c914:	d107      	bne.n	800c926 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c924:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c934:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c93c:	d009      	beq.n	800c952 <I2C_DMAXferCplt+0x11e>
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2b08      	cmp	r3, #8
 800c942:	d006      	beq.n	800c952 <I2C_DMAXferCplt+0x11e>
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c94a:	d002      	beq.n	800c952 <I2C_DMAXferCplt+0x11e>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2b20      	cmp	r3, #32
 800c950:	d107      	bne.n	800c962 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c960:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	685a      	ldr	r2, [r3, #4]
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c970:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c980:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	2200      	movs	r2, #0
 800c986:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d003      	beq.n	800c998 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800c990:	6978      	ldr	r0, [r7, #20]
 800c992:	f7ff fc1a 	bl	800c1ca <HAL_I2C_ErrorCallback>
}
 800c996:	e01e      	b.n	800c9d6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	2220      	movs	r2, #32
 800c99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b40      	cmp	r3, #64	; 0x40
 800c9aa:	d10a      	bne.n	800c9c2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800c9ba:	6978      	ldr	r0, [r7, #20]
 800c9bc:	f7f5 fa4e 	bl	8001e5c <HAL_I2C_MemRxCpltCallback>
}
 800c9c0:	e009      	b.n	800c9d6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2212      	movs	r2, #18
 800c9ce:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800c9d0:	6978      	ldr	r0, [r7, #20]
 800c9d2:	f7ff fbd2 	bl	800c17a <HAL_I2C_MasterRxCpltCallback>
}
 800c9d6:	bf00      	nop
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ea:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d003      	beq.n	800c9fc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d003      	beq.n	800ca0c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca08:	2200      	movs	r2, #0
 800ca0a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7fe fa5b 	bl	800aec8 <HAL_DMA_GetError>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d01b      	beq.n	800ca50 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca26:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2220      	movs	r2, #32
 800ca32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca42:	f043 0210 	orr.w	r2, r3, #16
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7ff fbbd 	bl	800c1ca <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ca50:	bf00      	nop
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca60:	2300      	movs	r3, #0
 800ca62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca70:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ca72:	4b4b      	ldr	r3, [pc, #300]	; (800cba0 <I2C_DMAAbort+0x148>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	08db      	lsrs	r3, r3, #3
 800ca78:	4a4a      	ldr	r2, [pc, #296]	; (800cba4 <I2C_DMAAbort+0x14c>)
 800ca7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7e:	0a1a      	lsrs	r2, r3, #8
 800ca80:	4613      	mov	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	00da      	lsls	r2, r3, #3
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d106      	bne.n	800caa0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca96:	f043 0220 	orr.w	r2, r3, #32
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800ca9e:	e00a      	b.n	800cab6 <I2C_DMAAbort+0x5e>
    }
    count--;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	3b01      	subs	r3, #1
 800caa4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cab4:	d0ea      	beq.n	800ca8c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac2:	2200      	movs	r2, #0
 800cac4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d003      	beq.n	800cad6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad2:	2200      	movs	r2, #0
 800cad4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cae4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2200      	movs	r2, #0
 800caea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d003      	beq.n	800cafc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf8:	2200      	movs	r2, #0
 800cafa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb08:	2200      	movs	r2, #0
 800cb0a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f022 0201 	bic.w	r2, r2, #1
 800cb1a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b60      	cmp	r3, #96	; 0x60
 800cb26:	d10e      	bne.n	800cb46 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2220      	movs	r2, #32
 800cb2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cb3e:	6978      	ldr	r0, [r7, #20]
 800cb40:	f7ff fb4d 	bl	800c1de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cb44:	e027      	b.n	800cb96 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cb46:	7cfb      	ldrb	r3, [r7, #19]
 800cb48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cb4c:	2b28      	cmp	r3, #40	; 0x28
 800cb4e:	d117      	bne.n	800cb80 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f042 0201 	orr.w	r2, r2, #1
 800cb5e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	2200      	movs	r2, #0
 800cb74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	2228      	movs	r2, #40	; 0x28
 800cb7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cb7e:	e007      	b.n	800cb90 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	2220      	movs	r2, #32
 800cb84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800cb90:	6978      	ldr	r0, [r7, #20]
 800cb92:	f7ff fb1a 	bl	800c1ca <HAL_I2C_ErrorCallback>
}
 800cb96:	bf00      	nop
 800cb98:	3718      	adds	r7, #24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20000004 	.word	0x20000004
 800cba4:	14f8b589 	.word	0x14f8b589

0800cba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	603b      	str	r3, [r7, #0]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cbb8:	e025      	b.n	800cc06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc0:	d021      	beq.n	800cc06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbc2:	f7fc fc6b 	bl	800949c <HAL_GetTick>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	1ad3      	subs	r3, r2, r3
 800cbcc:	683a      	ldr	r2, [r7, #0]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d302      	bcc.n	800cbd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d116      	bne.n	800cc06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2220      	movs	r2, #32
 800cbe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf2:	f043 0220 	orr.w	r2, r3, #32
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e023      	b.n	800cc4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	0c1b      	lsrs	r3, r3, #16
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d10d      	bne.n	800cc2c <I2C_WaitOnFlagUntilTimeout+0x84>
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	43da      	mvns	r2, r3
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	4013      	ands	r3, r2
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bf0c      	ite	eq
 800cc22:	2301      	moveq	r3, #1
 800cc24:	2300      	movne	r3, #0
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	461a      	mov	r2, r3
 800cc2a:	e00c      	b.n	800cc46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	699b      	ldr	r3, [r3, #24]
 800cc32:	43da      	mvns	r2, r3
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	4013      	ands	r3, r2
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	bf0c      	ite	eq
 800cc3e:	2301      	moveq	r3, #1
 800cc40:	2300      	movne	r3, #0
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	461a      	mov	r2, r3
 800cc46:	79fb      	ldrb	r3, [r7, #7]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d0b6      	beq.n	800cbba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b084      	sub	sp, #16
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	60b9      	str	r1, [r7, #8]
 800cc60:	607a      	str	r2, [r7, #4]
 800cc62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cc64:	e051      	b.n	800cd0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	695b      	ldr	r3, [r3, #20]
 800cc6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc74:	d123      	bne.n	800ccbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cc8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2220      	movs	r2, #32
 800cc9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccaa:	f043 0204 	orr.w	r2, r3, #4
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e046      	b.n	800cd4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc4:	d021      	beq.n	800cd0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccc6:	f7fc fbe9 	bl	800949c <HAL_GetTick>
 800ccca:	4602      	mov	r2, r0
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d302      	bcc.n	800ccdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d116      	bne.n	800cd0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2220      	movs	r2, #32
 800cce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf6:	f043 0220 	orr.w	r2, r3, #32
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	e020      	b.n	800cd4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	0c1b      	lsrs	r3, r3, #16
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d10c      	bne.n	800cd2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	43da      	mvns	r2, r3
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	4013      	ands	r3, r2
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	bf14      	ite	ne
 800cd26:	2301      	movne	r3, #1
 800cd28:	2300      	moveq	r3, #0
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	e00b      	b.n	800cd46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	43da      	mvns	r2, r3
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	4013      	ands	r3, r2
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	bf14      	ite	ne
 800cd40:	2301      	movne	r3, #1
 800cd42:	2300      	moveq	r3, #0
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d18d      	bne.n	800cc66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cd60:	e02d      	b.n	800cdbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f000 f8ce 	bl	800cf04 <I2C_IsAcknowledgeFailed>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d001      	beq.n	800cd72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e02d      	b.n	800cdce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd78:	d021      	beq.n	800cdbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd7a:	f7fc fb8f 	bl	800949c <HAL_GetTick>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d302      	bcc.n	800cd90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d116      	bne.n	800cdbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2200      	movs	r2, #0
 800cd94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2220      	movs	r2, #32
 800cd9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdaa:	f043 0220 	orr.w	r2, r3, #32
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e007      	b.n	800cdce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	695b      	ldr	r3, [r3, #20]
 800cdc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc8:	2b80      	cmp	r3, #128	; 0x80
 800cdca:	d1ca      	bne.n	800cd62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b084      	sub	sp, #16
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	60f8      	str	r0, [r7, #12]
 800cdde:	60b9      	str	r1, [r7, #8]
 800cde0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cde2:	e02d      	b.n	800ce40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f000 f88d 	bl	800cf04 <I2C_IsAcknowledgeFailed>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e02d      	b.n	800ce50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdfa:	d021      	beq.n	800ce40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdfc:	f7fc fb4e 	bl	800949c <HAL_GetTick>
 800ce00:	4602      	mov	r2, r0
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d302      	bcc.n	800ce12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d116      	bne.n	800ce40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2220      	movs	r2, #32
 800ce1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2c:	f043 0220 	orr.w	r2, r3, #32
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e007      	b.n	800ce50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	695b      	ldr	r3, [r3, #20]
 800ce46:	f003 0304 	and.w	r3, r3, #4
 800ce4a:	2b04      	cmp	r3, #4
 800ce4c:	d1ca      	bne.n	800cde4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ce64:	e042      	b.n	800ceec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	695b      	ldr	r3, [r3, #20]
 800ce6c:	f003 0310 	and.w	r3, r3, #16
 800ce70:	2b10      	cmp	r3, #16
 800ce72:	d119      	bne.n	800cea8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f06f 0210 	mvn.w	r2, #16
 800ce7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2200      	movs	r2, #0
 800ce82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2220      	movs	r2, #32
 800ce88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cea4:	2301      	movs	r3, #1
 800cea6:	e029      	b.n	800cefc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cea8:	f7fc faf8 	bl	800949c <HAL_GetTick>
 800ceac:	4602      	mov	r2, r0
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d302      	bcc.n	800cebe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d116      	bne.n	800ceec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2220      	movs	r2, #32
 800cec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced8:	f043 0220 	orr.w	r2, r3, #32
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e007      	b.n	800cefc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef6:	2b40      	cmp	r3, #64	; 0x40
 800cef8:	d1b5      	bne.n	800ce66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	695b      	ldr	r3, [r3, #20]
 800cf12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf1a:	d11b      	bne.n	800cf54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cf24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2220      	movs	r2, #32
 800cf30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf40:	f043 0204 	orr.w	r2, r3, #4
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e000      	b.n	800cf56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cf62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf64:	b08f      	sub	sp, #60	; 0x3c
 800cf66:	af0a      	add	r7, sp, #40	; 0x28
 800cf68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e10f      	b.n	800d194 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d106      	bne.n	800cf94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f00b fc50 	bl	8018834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2203      	movs	r2, #3
 800cf98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d102      	bne.n	800cfae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f004 fde1 	bl	8011b7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	603b      	str	r3, [r7, #0]
 800cfbe:	687e      	ldr	r6, [r7, #4]
 800cfc0:	466d      	mov	r5, sp
 800cfc2:	f106 0410 	add.w	r4, r6, #16
 800cfc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cfca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cfce:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cfd2:	e885 0003 	stmia.w	r5, {r0, r1}
 800cfd6:	1d33      	adds	r3, r6, #4
 800cfd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfda:	6838      	ldr	r0, [r7, #0]
 800cfdc:	f004 fcb8 	bl	8011950 <USB_CoreInit>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d005      	beq.n	800cff2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2202      	movs	r2, #2
 800cfea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e0d0      	b.n	800d194 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2100      	movs	r1, #0
 800cff8:	4618      	mov	r0, r3
 800cffa:	f004 fdcf 	bl	8011b9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cffe:	2300      	movs	r3, #0
 800d000:	73fb      	strb	r3, [r7, #15]
 800d002:	e04a      	b.n	800d09a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d004:	7bfa      	ldrb	r2, [r7, #15]
 800d006:	6879      	ldr	r1, [r7, #4]
 800d008:	4613      	mov	r3, r2
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	4413      	add	r3, r2
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	440b      	add	r3, r1
 800d012:	333d      	adds	r3, #61	; 0x3d
 800d014:	2201      	movs	r2, #1
 800d016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d018:	7bfa      	ldrb	r2, [r7, #15]
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	4613      	mov	r3, r2
 800d01e:	00db      	lsls	r3, r3, #3
 800d020:	4413      	add	r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	440b      	add	r3, r1
 800d026:	333c      	adds	r3, #60	; 0x3c
 800d028:	7bfa      	ldrb	r2, [r7, #15]
 800d02a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d02c:	7bfa      	ldrb	r2, [r7, #15]
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
 800d030:	b298      	uxth	r0, r3
 800d032:	6879      	ldr	r1, [r7, #4]
 800d034:	4613      	mov	r3, r2
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	4413      	add	r3, r2
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	440b      	add	r3, r1
 800d03e:	3344      	adds	r3, #68	; 0x44
 800d040:	4602      	mov	r2, r0
 800d042:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d044:	7bfa      	ldrb	r2, [r7, #15]
 800d046:	6879      	ldr	r1, [r7, #4]
 800d048:	4613      	mov	r3, r2
 800d04a:	00db      	lsls	r3, r3, #3
 800d04c:	4413      	add	r3, r2
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	440b      	add	r3, r1
 800d052:	3340      	adds	r3, #64	; 0x40
 800d054:	2200      	movs	r2, #0
 800d056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d058:	7bfa      	ldrb	r2, [r7, #15]
 800d05a:	6879      	ldr	r1, [r7, #4]
 800d05c:	4613      	mov	r3, r2
 800d05e:	00db      	lsls	r3, r3, #3
 800d060:	4413      	add	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	440b      	add	r3, r1
 800d066:	3348      	adds	r3, #72	; 0x48
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d06c:	7bfa      	ldrb	r2, [r7, #15]
 800d06e:	6879      	ldr	r1, [r7, #4]
 800d070:	4613      	mov	r3, r2
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	4413      	add	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	440b      	add	r3, r1
 800d07a:	334c      	adds	r3, #76	; 0x4c
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d080:	7bfa      	ldrb	r2, [r7, #15]
 800d082:	6879      	ldr	r1, [r7, #4]
 800d084:	4613      	mov	r3, r2
 800d086:	00db      	lsls	r3, r3, #3
 800d088:	4413      	add	r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	440b      	add	r3, r1
 800d08e:	3354      	adds	r3, #84	; 0x54
 800d090:	2200      	movs	r2, #0
 800d092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d094:	7bfb      	ldrb	r3, [r7, #15]
 800d096:	3301      	adds	r3, #1
 800d098:	73fb      	strb	r3, [r7, #15]
 800d09a:	7bfa      	ldrb	r2, [r7, #15]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d3af      	bcc.n	800d004 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	73fb      	strb	r3, [r7, #15]
 800d0a8:	e044      	b.n	800d134 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d0aa:	7bfa      	ldrb	r2, [r7, #15]
 800d0ac:	6879      	ldr	r1, [r7, #4]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	00db      	lsls	r3, r3, #3
 800d0b2:	4413      	add	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	440b      	add	r3, r1
 800d0b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800d0bc:	2200      	movs	r2, #0
 800d0be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d0c0:	7bfa      	ldrb	r2, [r7, #15]
 800d0c2:	6879      	ldr	r1, [r7, #4]
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	00db      	lsls	r3, r3, #3
 800d0c8:	4413      	add	r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	440b      	add	r3, r1
 800d0ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800d0d2:	7bfa      	ldrb	r2, [r7, #15]
 800d0d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d0d6:	7bfa      	ldrb	r2, [r7, #15]
 800d0d8:	6879      	ldr	r1, [r7, #4]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	00db      	lsls	r3, r3, #3
 800d0de:	4413      	add	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	440b      	add	r3, r1
 800d0e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d0ec:	7bfa      	ldrb	r2, [r7, #15]
 800d0ee:	6879      	ldr	r1, [r7, #4]
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	4413      	add	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	440b      	add	r3, r1
 800d0fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d0fe:	2200      	movs	r2, #0
 800d100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d102:	7bfa      	ldrb	r2, [r7, #15]
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	4613      	mov	r3, r2
 800d108:	00db      	lsls	r3, r3, #3
 800d10a:	4413      	add	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	440b      	add	r3, r1
 800d110:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d114:	2200      	movs	r2, #0
 800d116:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d118:	7bfa      	ldrb	r2, [r7, #15]
 800d11a:	6879      	ldr	r1, [r7, #4]
 800d11c:	4613      	mov	r3, r2
 800d11e:	00db      	lsls	r3, r3, #3
 800d120:	4413      	add	r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	440b      	add	r3, r1
 800d126:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800d12a:	2200      	movs	r2, #0
 800d12c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d12e:	7bfb      	ldrb	r3, [r7, #15]
 800d130:	3301      	adds	r3, #1
 800d132:	73fb      	strb	r3, [r7, #15]
 800d134:	7bfa      	ldrb	r2, [r7, #15]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d3b5      	bcc.n	800d0aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	603b      	str	r3, [r7, #0]
 800d144:	687e      	ldr	r6, [r7, #4]
 800d146:	466d      	mov	r5, sp
 800d148:	f106 0410 	add.w	r4, r6, #16
 800d14c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d14e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d154:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d158:	e885 0003 	stmia.w	r5, {r0, r1}
 800d15c:	1d33      	adds	r3, r6, #4
 800d15e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d160:	6838      	ldr	r0, [r7, #0]
 800d162:	f004 fd67 	bl	8011c34 <USB_DevInit>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d005      	beq.n	800d178 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800d174:	2301      	movs	r3, #1
 800d176:	e00d      	b.n	800d194 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f005 feb6 	bl	8012efe <USB_DevDisconnect>

  return HAL_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d19c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d101      	bne.n	800d1b8 <HAL_PCD_Start+0x1c>
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	e020      	b.n	800d1fa <HAL_PCD_Start+0x5e>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d109      	bne.n	800d1dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d005      	beq.n	800d1dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f004 fcb9 	bl	8011b58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f005 fe66 	bl	8012ebc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d202:	b590      	push	{r4, r7, lr}
 800d204:	b08d      	sub	sp, #52	; 0x34
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d210:	6a3b      	ldr	r3, [r7, #32]
 800d212:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4618      	mov	r0, r3
 800d21a:	f005 ff24 	bl	8013066 <USB_GetMode>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	f040 848a 	bne.w	800db3a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f005 fe88 	bl	8012f40 <USB_ReadInterrupts>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	f000 8480 	beq.w	800db38 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	0a1b      	lsrs	r3, r3, #8
 800d242:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4618      	mov	r0, r3
 800d252:	f005 fe75 	bl	8012f40 <USB_ReadInterrupts>
 800d256:	4603      	mov	r3, r0
 800d258:	f003 0302 	and.w	r3, r3, #2
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d107      	bne.n	800d270 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	695a      	ldr	r2, [r3, #20]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f002 0202 	and.w	r2, r2, #2
 800d26e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4618      	mov	r0, r3
 800d276:	f005 fe63 	bl	8012f40 <USB_ReadInterrupts>
 800d27a:	4603      	mov	r3, r0
 800d27c:	f003 0310 	and.w	r3, r3, #16
 800d280:	2b10      	cmp	r3, #16
 800d282:	d161      	bne.n	800d348 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	699a      	ldr	r2, [r3, #24]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f022 0210 	bic.w	r2, r2, #16
 800d292:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	6a1b      	ldr	r3, [r3, #32]
 800d298:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	f003 020f 	and.w	r2, r3, #15
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	00db      	lsls	r3, r3, #3
 800d2a4:	4413      	add	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	0c5b      	lsrs	r3, r3, #17
 800d2b8:	f003 030f 	and.w	r3, r3, #15
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d124      	bne.n	800d30a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d2c0:	69ba      	ldr	r2, [r7, #24]
 800d2c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800d2c6:	4013      	ands	r3, r2
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d035      	beq.n	800d338 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	091b      	lsrs	r3, r3, #4
 800d2d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d2d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	461a      	mov	r2, r3
 800d2de:	6a38      	ldr	r0, [r7, #32]
 800d2e0:	f005 fc9a 	bl	8012c18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	691a      	ldr	r2, [r3, #16]
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	091b      	lsrs	r3, r3, #4
 800d2ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d2f0:	441a      	add	r2, r3
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	6a1a      	ldr	r2, [r3, #32]
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	091b      	lsrs	r3, r3, #4
 800d2fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d302:	441a      	add	r2, r3
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	621a      	str	r2, [r3, #32]
 800d308:	e016      	b.n	800d338 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	0c5b      	lsrs	r3, r3, #17
 800d30e:	f003 030f 	and.w	r3, r3, #15
 800d312:	2b06      	cmp	r3, #6
 800d314:	d110      	bne.n	800d338 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d31c:	2208      	movs	r2, #8
 800d31e:	4619      	mov	r1, r3
 800d320:	6a38      	ldr	r0, [r7, #32]
 800d322:	f005 fc79 	bl	8012c18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	6a1a      	ldr	r2, [r3, #32]
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	091b      	lsrs	r3, r3, #4
 800d32e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d332:	441a      	add	r2, r3
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	699a      	ldr	r2, [r3, #24]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f042 0210 	orr.w	r2, r2, #16
 800d346:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f005 fdf7 	bl	8012f40 <USB_ReadInterrupts>
 800d352:	4603      	mov	r3, r0
 800d354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d358:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d35c:	f040 80a7 	bne.w	800d4ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800d360:	2300      	movs	r3, #0
 800d362:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4618      	mov	r0, r3
 800d36a:	f005 fdfc 	bl	8012f66 <USB_ReadDevAllOutEpInterrupt>
 800d36e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800d370:	e099      	b.n	800d4a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800d372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d374:	f003 0301 	and.w	r3, r3, #1
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 808e 	beq.w	800d49a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d384:	b2d2      	uxtb	r2, r2
 800d386:	4611      	mov	r1, r2
 800d388:	4618      	mov	r0, r3
 800d38a:	f005 fe20 	bl	8012fce <USB_ReadDevOutEPInterrupt>
 800d38e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	f003 0301 	and.w	r3, r3, #1
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00c      	beq.n	800d3b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39c:	015a      	lsls	r2, r3, #5
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800d3ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 fec2 	bl	800e138 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	f003 0308 	and.w	r3, r3, #8
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00c      	beq.n	800d3d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c0:	015a      	lsls	r2, r3, #5
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	2308      	movs	r3, #8
 800d3ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800d3d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 ff98 	bl	800e308 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	f003 0310 	and.w	r3, r3, #16
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d008      	beq.n	800d3f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e4:	015a      	lsls	r2, r3, #5
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	2310      	movs	r3, #16
 800d3f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	f003 0302 	and.w	r3, r3, #2
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d030      	beq.n	800d460 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800d3fe:	6a3b      	ldr	r3, [r7, #32]
 800d400:	695b      	ldr	r3, [r3, #20]
 800d402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d406:	2b80      	cmp	r3, #128	; 0x80
 800d408:	d109      	bne.n	800d41e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	69fa      	ldr	r2, [r7, #28]
 800d414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d418:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d41c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800d41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d420:	4613      	mov	r3, r2
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	4413      	add	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	4413      	add	r3, r2
 800d430:	3304      	adds	r3, #4
 800d432:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	78db      	ldrb	r3, [r3, #3]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d108      	bne.n	800d44e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	2200      	movs	r2, #0
 800d440:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	b2db      	uxtb	r3, r3
 800d446:	4619      	mov	r1, r3
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f00b faf9 	bl	8018a40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	015a      	lsls	r2, r3, #5
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	4413      	add	r3, r2
 800d456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d45a:	461a      	mov	r2, r3
 800d45c:	2302      	movs	r3, #2
 800d45e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	f003 0320 	and.w	r3, r3, #32
 800d466:	2b00      	cmp	r3, #0
 800d468:	d008      	beq.n	800d47c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	015a      	lsls	r2, r3, #5
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	4413      	add	r3, r2
 800d472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d476:	461a      	mov	r2, r3
 800d478:	2320      	movs	r3, #32
 800d47a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d482:	2b00      	cmp	r3, #0
 800d484:	d009      	beq.n	800d49a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d488:	015a      	lsls	r2, r3, #5
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	4413      	add	r3, r2
 800d48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d492:	461a      	mov	r2, r3
 800d494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d498:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	3301      	adds	r3, #1
 800d49e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a2:	085b      	lsrs	r3, r3, #1
 800d4a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f47f af62 	bne.w	800d372 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f005 fd44 	bl	8012f40 <USB_ReadInterrupts>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d4c2:	f040 80db 	bne.w	800d67c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f005 fd65 	bl	8012f9a <USB_ReadDevAllInEpInterrupt>
 800d4d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800d4d6:	e0cd      	b.n	800d674 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4da:	f003 0301 	and.w	r3, r3, #1
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 80c2 	beq.w	800d668 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ea:	b2d2      	uxtb	r2, r2
 800d4ec:	4611      	mov	r1, r2
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f005 fd8b 	bl	801300a <USB_ReadDevInEPInterrupt>
 800d4f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	f003 0301 	and.w	r3, r3, #1
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d057      	beq.n	800d5b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d502:	f003 030f 	and.w	r3, r3, #15
 800d506:	2201      	movs	r2, #1
 800d508:	fa02 f303 	lsl.w	r3, r2, r3
 800d50c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	43db      	mvns	r3, r3
 800d51a:	69f9      	ldr	r1, [r7, #28]
 800d51c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d520:	4013      	ands	r3, r2
 800d522:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	015a      	lsls	r2, r3, #5
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	4413      	add	r3, r2
 800d52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d530:	461a      	mov	r2, r3
 800d532:	2301      	movs	r3, #1
 800d534:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d132      	bne.n	800d5a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d53e:	6879      	ldr	r1, [r7, #4]
 800d540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d542:	4613      	mov	r3, r2
 800d544:	00db      	lsls	r3, r3, #3
 800d546:	4413      	add	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	440b      	add	r3, r1
 800d54c:	334c      	adds	r3, #76	; 0x4c
 800d54e:	6819      	ldr	r1, [r3, #0]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d554:	4613      	mov	r3, r2
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	4413      	add	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4403      	add	r3, r0
 800d55e:	3348      	adds	r3, #72	; 0x48
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4419      	add	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d568:	4613      	mov	r3, r2
 800d56a:	00db      	lsls	r3, r3, #3
 800d56c:	4413      	add	r3, r2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	4403      	add	r3, r0
 800d572:	334c      	adds	r3, #76	; 0x4c
 800d574:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d113      	bne.n	800d5a4 <HAL_PCD_IRQHandler+0x3a2>
 800d57c:	6879      	ldr	r1, [r7, #4]
 800d57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d580:	4613      	mov	r3, r2
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	4413      	add	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	440b      	add	r3, r1
 800d58a:	3354      	adds	r3, #84	; 0x54
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d108      	bne.n	800d5a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6818      	ldr	r0, [r3, #0]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d59c:	461a      	mov	r2, r3
 800d59e:	2101      	movs	r1, #1
 800d5a0:	f005 fd92 	bl	80130c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f00b f9c3 	bl	8018936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	f003 0308 	and.w	r3, r3, #8
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d008      	beq.n	800d5cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5bc:	015a      	lsls	r2, r3, #5
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	2308      	movs	r3, #8
 800d5ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	f003 0310 	and.w	r3, r3, #16
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d008      	beq.n	800d5e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d8:	015a      	lsls	r2, r3, #5
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	4413      	add	r3, r2
 800d5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	2310      	movs	r3, #16
 800d5e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d008      	beq.n	800d604 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f4:	015a      	lsls	r2, r3, #5
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5fe:	461a      	mov	r2, r3
 800d600:	2340      	movs	r3, #64	; 0x40
 800d602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	f003 0302 	and.w	r3, r3, #2
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d023      	beq.n	800d656 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800d60e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d610:	6a38      	ldr	r0, [r7, #32]
 800d612:	f004 fc73 	bl	8011efc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800d616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d618:	4613      	mov	r3, r2
 800d61a:	00db      	lsls	r3, r3, #3
 800d61c:	4413      	add	r3, r2
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	3338      	adds	r3, #56	; 0x38
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	4413      	add	r3, r2
 800d626:	3304      	adds	r3, #4
 800d628:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	78db      	ldrb	r3, [r3, #3]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d108      	bne.n	800d644 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2200      	movs	r2, #0
 800d636:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	4619      	mov	r1, r3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f00b fa10 	bl	8018a64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d646:	015a      	lsls	r2, r3, #5
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	4413      	add	r3, r2
 800d64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d650:	461a      	mov	r2, r3
 800d652:	2302      	movs	r3, #2
 800d654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d003      	beq.n	800d668 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 fcdb 	bl	800e01e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66a:	3301      	adds	r3, #1
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	085b      	lsrs	r3, r3, #1
 800d672:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	2b00      	cmp	r3, #0
 800d678:	f47f af2e 	bne.w	800d4d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4618      	mov	r0, r3
 800d682:	f005 fc5d 	bl	8012f40 <USB_ReadInterrupts>
 800d686:	4603      	mov	r3, r0
 800d688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d68c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d690:	d122      	bne.n	800d6d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	69fa      	ldr	r2, [r7, #28]
 800d69c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6a0:	f023 0301 	bic.w	r3, r3, #1
 800d6a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d108      	bne.n	800d6c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 fec2 	bl	800e444 <HAL_PCDEx_LPM_Callback>
 800d6c0:	e002      	b.n	800d6c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f00b f9ae 	bl	8018a24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	695a      	ldr	r2, [r3, #20]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d6d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f005 fc2f 	bl	8012f40 <USB_ReadInterrupts>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6ec:	d112      	bne.n	800d714 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d102      	bne.n	800d704 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f00b f96a 	bl	80189d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	695a      	ldr	r2, [r3, #20]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800d712:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4618      	mov	r0, r3
 800d71a:	f005 fc11 	bl	8012f40 <USB_ReadInterrupts>
 800d71e:	4603      	mov	r3, r0
 800d720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d728:	f040 80b7 	bne.w	800d89a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	69fa      	ldr	r2, [r7, #28]
 800d736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d73a:	f023 0301 	bic.w	r3, r3, #1
 800d73e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2110      	movs	r1, #16
 800d746:	4618      	mov	r0, r3
 800d748:	f004 fbd8 	bl	8011efc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d74c:	2300      	movs	r3, #0
 800d74e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d750:	e046      	b.n	800d7e0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	015a      	lsls	r2, r3, #5
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	4413      	add	r3, r2
 800d75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d75e:	461a      	mov	r2, r3
 800d760:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d764:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	015a      	lsls	r2, r3, #5
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	4413      	add	r3, r2
 800d76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d776:	0151      	lsls	r1, r2, #5
 800d778:	69fa      	ldr	r2, [r7, #28]
 800d77a:	440a      	add	r2, r1
 800d77c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d780:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d784:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d788:	015a      	lsls	r2, r3, #5
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	4413      	add	r3, r2
 800d78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d792:	461a      	mov	r2, r3
 800d794:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d798:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	015a      	lsls	r2, r3, #5
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7aa:	0151      	lsls	r1, r2, #5
 800d7ac:	69fa      	ldr	r2, [r7, #28]
 800d7ae:	440a      	add	r2, r1
 800d7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d7b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7bc:	015a      	lsls	r2, r3, #5
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7ca:	0151      	lsls	r1, r2, #5
 800d7cc:	69fa      	ldr	r2, [r7, #28]
 800d7ce:	440a      	add	r2, r1
 800d7d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d7d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	3301      	adds	r3, #1
 800d7de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d3b3      	bcc.n	800d752 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7f0:	69db      	ldr	r3, [r3, #28]
 800d7f2:	69fa      	ldr	r2, [r7, #28]
 800d7f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800d7fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d802:	2b00      	cmp	r3, #0
 800d804:	d016      	beq.n	800d834 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d80c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d810:	69fa      	ldr	r2, [r7, #28]
 800d812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d816:	f043 030b 	orr.w	r3, r3, #11
 800d81a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d826:	69fa      	ldr	r2, [r7, #28]
 800d828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d82c:	f043 030b 	orr.w	r3, r3, #11
 800d830:	6453      	str	r3, [r2, #68]	; 0x44
 800d832:	e015      	b.n	800d860 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d83a:	695b      	ldr	r3, [r3, #20]
 800d83c:	69fa      	ldr	r2, [r7, #28]
 800d83e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d846:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800d84a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	69fa      	ldr	r2, [r7, #28]
 800d856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d85a:	f043 030b 	orr.w	r3, r3, #11
 800d85e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	69fa      	ldr	r2, [r7, #28]
 800d86a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d86e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d872:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6818      	ldr	r0, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d884:	461a      	mov	r2, r3
 800d886:	f005 fc1f 	bl	80130c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	695a      	ldr	r2, [r3, #20]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f005 fb4e 	bl	8012f40 <USB_ReadInterrupts>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d8aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8ae:	d124      	bne.n	800d8fa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f005 fbe4 	bl	8013082 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f004 fb99 	bl	8011ff6 <USB_GetDevSpeed>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681c      	ldr	r4, [r3, #0]
 800d8d0:	f001 f9e8 	bl	800eca4 <HAL_RCC_GetHCLKFreq>
 800d8d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	461a      	mov	r2, r3
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f004 f898 	bl	8011a14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f00b f84e 	bl	8018986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	695a      	ldr	r2, [r3, #20]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d8f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f005 fb1e 	bl	8012f40 <USB_ReadInterrupts>
 800d904:	4603      	mov	r3, r0
 800d906:	f003 0308 	and.w	r3, r3, #8
 800d90a:	2b08      	cmp	r3, #8
 800d90c:	d10a      	bne.n	800d924 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f00b f82b 	bl	801896a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	695a      	ldr	r2, [r3, #20]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f002 0208 	and.w	r2, r2, #8
 800d922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4618      	mov	r0, r3
 800d92a:	f005 fb09 	bl	8012f40 <USB_ReadInterrupts>
 800d92e:	4603      	mov	r3, r0
 800d930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d934:	2b80      	cmp	r3, #128	; 0x80
 800d936:	d122      	bne.n	800d97e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800d938:	6a3b      	ldr	r3, [r7, #32]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d940:	6a3b      	ldr	r3, [r7, #32]
 800d942:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d944:	2301      	movs	r3, #1
 800d946:	627b      	str	r3, [r7, #36]	; 0x24
 800d948:	e014      	b.n	800d974 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d94e:	4613      	mov	r3, r2
 800d950:	00db      	lsls	r3, r3, #3
 800d952:	4413      	add	r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	440b      	add	r3, r1
 800d958:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d105      	bne.n	800d96e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800d962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d964:	b2db      	uxtb	r3, r3
 800d966:	4619      	mov	r1, r3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 fb27 	bl	800dfbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d970:	3301      	adds	r3, #1
 800d972:	627b      	str	r3, [r7, #36]	; 0x24
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d3e5      	bcc.n	800d94a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4618      	mov	r0, r3
 800d984:	f005 fadc 	bl	8012f40 <USB_ReadInterrupts>
 800d988:	4603      	mov	r3, r0
 800d98a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d98e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d992:	d13b      	bne.n	800da0c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d994:	2301      	movs	r3, #1
 800d996:	627b      	str	r3, [r7, #36]	; 0x24
 800d998:	e02b      	b.n	800d9f2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	015a      	lsls	r2, r3, #5
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d9aa:	6879      	ldr	r1, [r7, #4]
 800d9ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	4413      	add	r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	440b      	add	r3, r1
 800d9b8:	3340      	adds	r3, #64	; 0x40
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d115      	bne.n	800d9ec <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800d9c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	da12      	bge.n	800d9ec <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800d9c6:	6879      	ldr	r1, [r7, #4]
 800d9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	00db      	lsls	r3, r3, #3
 800d9ce:	4413      	add	r3, r2
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	440b      	add	r3, r1
 800d9d4:	333f      	adds	r3, #63	; 0x3f
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fae8 	bl	800dfbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	627b      	str	r3, [r7, #36]	; 0x24
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d3ce      	bcc.n	800d99a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	695a      	ldr	r2, [r3, #20]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800da0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4618      	mov	r0, r3
 800da12:	f005 fa95 	bl	8012f40 <USB_ReadInterrupts>
 800da16:	4603      	mov	r3, r0
 800da18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da20:	d155      	bne.n	800dace <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800da22:	2301      	movs	r3, #1
 800da24:	627b      	str	r3, [r7, #36]	; 0x24
 800da26:	e045      	b.n	800dab4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	015a      	lsls	r2, r3, #5
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800da38:	6879      	ldr	r1, [r7, #4]
 800da3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da3c:	4613      	mov	r3, r2
 800da3e:	00db      	lsls	r3, r3, #3
 800da40:	4413      	add	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	440b      	add	r3, r1
 800da46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d12e      	bne.n	800daae <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800da50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800da52:	2b00      	cmp	r3, #0
 800da54:	da2b      	bge.n	800daae <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800da62:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800da66:	429a      	cmp	r2, r3
 800da68:	d121      	bne.n	800daae <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800da6a:	6879      	ldr	r1, [r7, #4]
 800da6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da6e:	4613      	mov	r3, r2
 800da70:	00db      	lsls	r3, r3, #3
 800da72:	4413      	add	r3, r2
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	440b      	add	r3, r1
 800da78:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800da7c:	2201      	movs	r2, #1
 800da7e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	699b      	ldr	r3, [r3, #24]
 800da84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	695b      	ldr	r3, [r3, #20]
 800da90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10a      	bne.n	800daae <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	69fa      	ldr	r2, [r7, #28]
 800daa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800daa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800daaa:	6053      	str	r3, [r2, #4]
            break;
 800daac:	e007      	b.n	800dabe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800daae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab0:	3301      	adds	r3, #1
 800dab2:	627b      	str	r3, [r7, #36]	; 0x24
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daba:	429a      	cmp	r2, r3
 800dabc:	d3b4      	bcc.n	800da28 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	695a      	ldr	r2, [r3, #20]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800dacc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f005 fa34 	bl	8012f40 <USB_ReadInterrupts>
 800dad8:	4603      	mov	r3, r0
 800dada:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dae2:	d10a      	bne.n	800dafa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f00a ffcf 	bl	8018a88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	695a      	ldr	r2, [r3, #20]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800daf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4618      	mov	r0, r3
 800db00:	f005 fa1e 	bl	8012f40 <USB_ReadInterrupts>
 800db04:	4603      	mov	r3, r0
 800db06:	f003 0304 	and.w	r3, r3, #4
 800db0a:	2b04      	cmp	r3, #4
 800db0c:	d115      	bne.n	800db3a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	f003 0304 	and.w	r3, r3, #4
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d002      	beq.n	800db26 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f00a ffbf 	bl	8018aa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	6859      	ldr	r1, [r3, #4]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	69ba      	ldr	r2, [r7, #24]
 800db32:	430a      	orrs	r2, r1
 800db34:	605a      	str	r2, [r3, #4]
 800db36:	e000      	b.n	800db3a <HAL_PCD_IRQHandler+0x938>
      return;
 800db38:	bf00      	nop
    }
  }
}
 800db3a:	3734      	adds	r7, #52	; 0x34
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd90      	pop	{r4, r7, pc}

0800db40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800db52:	2b01      	cmp	r3, #1
 800db54:	d101      	bne.n	800db5a <HAL_PCD_SetAddress+0x1a>
 800db56:	2302      	movs	r3, #2
 800db58:	e013      	b.n	800db82 <HAL_PCD_SetAddress+0x42>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	78fa      	ldrb	r2, [r7, #3]
 800db66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	78fa      	ldrb	r2, [r7, #3]
 800db70:	4611      	mov	r1, r2
 800db72:	4618      	mov	r0, r3
 800db74:	f005 f97c 	bl	8012e70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b084      	sub	sp, #16
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	4608      	mov	r0, r1
 800db94:	4611      	mov	r1, r2
 800db96:	461a      	mov	r2, r3
 800db98:	4603      	mov	r3, r0
 800db9a:	70fb      	strb	r3, [r7, #3]
 800db9c:	460b      	mov	r3, r1
 800db9e:	803b      	strh	r3, [r7, #0]
 800dba0:	4613      	mov	r3, r2
 800dba2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800dba4:	2300      	movs	r3, #0
 800dba6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	da0f      	bge.n	800dbd0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dbb0:	78fb      	ldrb	r3, [r7, #3]
 800dbb2:	f003 020f 	and.w	r2, r3, #15
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	00db      	lsls	r3, r3, #3
 800dbba:	4413      	add	r3, r2
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	3338      	adds	r3, #56	; 0x38
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	705a      	strb	r2, [r3, #1]
 800dbce:	e00f      	b.n	800dbf0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dbd0:	78fb      	ldrb	r3, [r7, #3]
 800dbd2:	f003 020f 	and.w	r2, r3, #15
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	00db      	lsls	r3, r3, #3
 800dbda:	4413      	add	r3, r2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800dbf0:	78fb      	ldrb	r3, [r7, #3]
 800dbf2:	f003 030f 	and.w	r3, r3, #15
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800dbfc:	883a      	ldrh	r2, [r7, #0]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	78ba      	ldrb	r2, [r7, #2]
 800dc06:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	785b      	ldrb	r3, [r3, #1]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d004      	beq.n	800dc1a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800dc1a:	78bb      	ldrb	r3, [r7, #2]
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d102      	bne.n	800dc26 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d101      	bne.n	800dc34 <HAL_PCD_EP_Open+0xaa>
 800dc30:	2302      	movs	r3, #2
 800dc32:	e00e      	b.n	800dc52 <HAL_PCD_EP_Open+0xc8>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68f9      	ldr	r1, [r7, #12]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f004 f9fc 	bl	8012040 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800dc50:	7afb      	ldrb	r3, [r7, #11]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b084      	sub	sp, #16
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	460b      	mov	r3, r1
 800dc64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dc66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	da0f      	bge.n	800dc8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dc6e:	78fb      	ldrb	r3, [r7, #3]
 800dc70:	f003 020f 	and.w	r2, r3, #15
 800dc74:	4613      	mov	r3, r2
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	4413      	add	r3, r2
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	3338      	adds	r3, #56	; 0x38
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	4413      	add	r3, r2
 800dc82:	3304      	adds	r3, #4
 800dc84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	705a      	strb	r2, [r3, #1]
 800dc8c:	e00f      	b.n	800dcae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dc8e:	78fb      	ldrb	r3, [r7, #3]
 800dc90:	f003 020f 	and.w	r2, r3, #15
 800dc94:	4613      	mov	r3, r2
 800dc96:	00db      	lsls	r3, r3, #3
 800dc98:	4413      	add	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	4413      	add	r3, r2
 800dca4:	3304      	adds	r3, #4
 800dca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800dcae:	78fb      	ldrb	r3, [r7, #3]
 800dcb0:	f003 030f 	and.w	r3, r3, #15
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d101      	bne.n	800dcc8 <HAL_PCD_EP_Close+0x6e>
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	e00e      	b.n	800dce6 <HAL_PCD_EP_Close+0x8c>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2201      	movs	r2, #1
 800dccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68f9      	ldr	r1, [r7, #12]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f004 fa3a 	bl	8012150 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b086      	sub	sp, #24
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	60f8      	str	r0, [r7, #12]
 800dcf6:	607a      	str	r2, [r7, #4]
 800dcf8:	603b      	str	r3, [r7, #0]
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dcfe:	7afb      	ldrb	r3, [r7, #11]
 800dd00:	f003 020f 	and.w	r2, r3, #15
 800dd04:	4613      	mov	r3, r2
 800dd06:	00db      	lsls	r3, r3, #3
 800dd08:	4413      	add	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	4413      	add	r3, r2
 800dd14:	3304      	adds	r3, #4
 800dd16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	683a      	ldr	r2, [r7, #0]
 800dd22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	2200      	movs	r2, #0
 800dd28:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dd30:	7afb      	ldrb	r3, [r7, #11]
 800dd32:	f003 030f 	and.w	r3, r3, #15
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d102      	bne.n	800dd4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800dd4a:	7afb      	ldrb	r3, [r7, #11]
 800dd4c:	f003 030f 	and.w	r3, r3, #15
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d109      	bne.n	800dd68 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6818      	ldr	r0, [r3, #0]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	691b      	ldr	r3, [r3, #16]
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	461a      	mov	r2, r3
 800dd60:	6979      	ldr	r1, [r7, #20]
 800dd62:	f004 fd19 	bl	8012798 <USB_EP0StartXfer>
 800dd66:	e008      	b.n	800dd7a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6818      	ldr	r0, [r3, #0]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	691b      	ldr	r3, [r3, #16]
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	461a      	mov	r2, r3
 800dd74:	6979      	ldr	r1, [r7, #20]
 800dd76:	f004 fac7 	bl	8012308 <USB_EPStartXfer>
  }

  return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3718      	adds	r7, #24
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800dd90:	78fb      	ldrb	r3, [r7, #3]
 800dd92:	f003 020f 	and.w	r2, r3, #15
 800dd96:	6879      	ldr	r1, [r7, #4]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	00db      	lsls	r3, r3, #3
 800dd9c:	4413      	add	r3, r2
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	440b      	add	r3, r1
 800dda2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800dda6:	681b      	ldr	r3, [r3, #0]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	370c      	adds	r7, #12
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr

0800ddb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b086      	sub	sp, #24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	607a      	str	r2, [r7, #4]
 800ddbe:	603b      	str	r3, [r7, #0]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ddc4:	7afb      	ldrb	r3, [r7, #11]
 800ddc6:	f003 020f 	and.w	r2, r3, #15
 800ddca:	4613      	mov	r3, r2
 800ddcc:	00db      	lsls	r3, r3, #3
 800ddce:	4413      	add	r3, r2
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	3338      	adds	r3, #56	; 0x38
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	3304      	adds	r3, #4
 800ddda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	683a      	ldr	r2, [r7, #0]
 800dde6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	2200      	movs	r2, #0
 800ddec:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ddf4:	7afb      	ldrb	r3, [r7, #11]
 800ddf6:	f003 030f 	and.w	r3, r3, #15
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	691b      	ldr	r3, [r3, #16]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d102      	bne.n	800de0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800de0e:	7afb      	ldrb	r3, [r7, #11]
 800de10:	f003 030f 	and.w	r3, r3, #15
 800de14:	2b00      	cmp	r3, #0
 800de16:	d109      	bne.n	800de2c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6818      	ldr	r0, [r3, #0]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	b2db      	uxtb	r3, r3
 800de22:	461a      	mov	r2, r3
 800de24:	6979      	ldr	r1, [r7, #20]
 800de26:	f004 fcb7 	bl	8012798 <USB_EP0StartXfer>
 800de2a:	e008      	b.n	800de3e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6818      	ldr	r0, [r3, #0]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	b2db      	uxtb	r3, r3
 800de36:	461a      	mov	r2, r3
 800de38:	6979      	ldr	r1, [r7, #20]
 800de3a:	f004 fa65 	bl	8012308 <USB_EPStartXfer>
  }

  return HAL_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3718      	adds	r7, #24
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800de54:	78fb      	ldrb	r3, [r7, #3]
 800de56:	f003 020f 	and.w	r2, r3, #15
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d901      	bls.n	800de66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800de62:	2301      	movs	r3, #1
 800de64:	e050      	b.n	800df08 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800de66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	da0f      	bge.n	800de8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800de6e:	78fb      	ldrb	r3, [r7, #3]
 800de70:	f003 020f 	and.w	r2, r3, #15
 800de74:	4613      	mov	r3, r2
 800de76:	00db      	lsls	r3, r3, #3
 800de78:	4413      	add	r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	3338      	adds	r3, #56	; 0x38
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	4413      	add	r3, r2
 800de82:	3304      	adds	r3, #4
 800de84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2201      	movs	r2, #1
 800de8a:	705a      	strb	r2, [r3, #1]
 800de8c:	e00d      	b.n	800deaa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800de8e:	78fa      	ldrb	r2, [r7, #3]
 800de90:	4613      	mov	r3, r2
 800de92:	00db      	lsls	r3, r3, #3
 800de94:	4413      	add	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	4413      	add	r3, r2
 800dea0:	3304      	adds	r3, #4
 800dea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2200      	movs	r2, #0
 800dea8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2201      	movs	r2, #1
 800deae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800deb0:	78fb      	ldrb	r3, [r7, #3]
 800deb2:	f003 030f 	and.w	r3, r3, #15
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d101      	bne.n	800deca <HAL_PCD_EP_SetStall+0x82>
 800dec6:	2302      	movs	r3, #2
 800dec8:	e01e      	b.n	800df08 <HAL_PCD_EP_SetStall+0xc0>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2201      	movs	r2, #1
 800dece:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	68f9      	ldr	r1, [r7, #12]
 800ded8:	4618      	mov	r0, r3
 800deda:	f004 fef5 	bl	8012cc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800dede:	78fb      	ldrb	r3, [r7, #3]
 800dee0:	f003 030f 	and.w	r3, r3, #15
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10a      	bne.n	800defe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6818      	ldr	r0, [r3, #0]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	b2d9      	uxtb	r1, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800def8:	461a      	mov	r2, r3
 800defa:	f005 f8e5 	bl	80130c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3710      	adds	r7, #16
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800df1c:	78fb      	ldrb	r3, [r7, #3]
 800df1e:	f003 020f 	and.w	r2, r3, #15
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	429a      	cmp	r2, r3
 800df28:	d901      	bls.n	800df2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800df2a:	2301      	movs	r3, #1
 800df2c:	e042      	b.n	800dfb4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800df2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df32:	2b00      	cmp	r3, #0
 800df34:	da0f      	bge.n	800df56 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800df36:	78fb      	ldrb	r3, [r7, #3]
 800df38:	f003 020f 	and.w	r2, r3, #15
 800df3c:	4613      	mov	r3, r2
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	4413      	add	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	3338      	adds	r3, #56	; 0x38
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	4413      	add	r3, r2
 800df4a:	3304      	adds	r3, #4
 800df4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2201      	movs	r2, #1
 800df52:	705a      	strb	r2, [r3, #1]
 800df54:	e00f      	b.n	800df76 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800df56:	78fb      	ldrb	r3, [r7, #3]
 800df58:	f003 020f 	and.w	r2, r3, #15
 800df5c:	4613      	mov	r3, r2
 800df5e:	00db      	lsls	r3, r3, #3
 800df60:	4413      	add	r3, r2
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	4413      	add	r3, r2
 800df6c:	3304      	adds	r3, #4
 800df6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2200      	movs	r2, #0
 800df74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2200      	movs	r2, #0
 800df7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800df7c:	78fb      	ldrb	r3, [r7, #3]
 800df7e:	f003 030f 	and.w	r3, r3, #15
 800df82:	b2da      	uxtb	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d101      	bne.n	800df96 <HAL_PCD_EP_ClrStall+0x86>
 800df92:	2302      	movs	r3, #2
 800df94:	e00e      	b.n	800dfb4 <HAL_PCD_EP_ClrStall+0xa4>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2201      	movs	r2, #1
 800df9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68f9      	ldr	r1, [r7, #12]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f004 fefd 	bl	8012da4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800dfc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	da0c      	bge.n	800dfea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dfd0:	78fb      	ldrb	r3, [r7, #3]
 800dfd2:	f003 020f 	and.w	r2, r3, #15
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	00db      	lsls	r3, r3, #3
 800dfda:	4413      	add	r3, r2
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	3338      	adds	r3, #56	; 0x38
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	60fb      	str	r3, [r7, #12]
 800dfe8:	e00c      	b.n	800e004 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dfea:	78fb      	ldrb	r3, [r7, #3]
 800dfec:	f003 020f 	and.w	r2, r3, #15
 800dff0:	4613      	mov	r3, r2
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	4413      	add	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	4413      	add	r3, r2
 800e000:	3304      	adds	r3, #4
 800e002:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	68f9      	ldr	r1, [r7, #12]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f004 fd1c 	bl	8012a48 <USB_EPStopXfer>
 800e010:	4603      	mov	r3, r0
 800e012:	72fb      	strb	r3, [r7, #11]

  return ret;
 800e014:	7afb      	ldrb	r3, [r7, #11]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b08a      	sub	sp, #40	; 0x28
 800e022:	af02      	add	r7, sp, #8
 800e024:	6078      	str	r0, [r7, #4]
 800e026:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800e032:	683a      	ldr	r2, [r7, #0]
 800e034:	4613      	mov	r3, r2
 800e036:	00db      	lsls	r3, r3, #3
 800e038:	4413      	add	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	3338      	adds	r3, #56	; 0x38
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	4413      	add	r3, r2
 800e042:	3304      	adds	r3, #4
 800e044:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6a1a      	ldr	r2, [r3, #32]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	699b      	ldr	r3, [r3, #24]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d901      	bls.n	800e056 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	e06c      	b.n	800e130 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	699a      	ldr	r2, [r3, #24]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6a1b      	ldr	r3, [r3, #32]
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	69fa      	ldr	r2, [r7, #28]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d902      	bls.n	800e072 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	3303      	adds	r3, #3
 800e076:	089b      	lsrs	r3, r3, #2
 800e078:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e07a:	e02b      	b.n	800e0d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	699a      	ldr	r2, [r3, #24]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	6a1b      	ldr	r3, [r3, #32]
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	69fa      	ldr	r2, [r7, #28]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d902      	bls.n	800e098 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	3303      	adds	r3, #3
 800e09c:	089b      	lsrs	r3, r3, #2
 800e09e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6919      	ldr	r1, [r3, #16]
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	b2da      	uxtb	r2, r3
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	6978      	ldr	r0, [r7, #20]
 800e0b8:	f004 fd70 	bl	8012b9c <USB_WritePacket>

    ep->xfer_buff  += len;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	691a      	ldr	r2, [r3, #16]
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	441a      	add	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6a1a      	ldr	r2, [r3, #32]
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	441a      	add	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e0:	699b      	ldr	r3, [r3, #24]
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	69ba      	ldr	r2, [r7, #24]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d809      	bhi.n	800e0fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6a1a      	ldr	r2, [r3, #32]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d203      	bcs.n	800e0fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1be      	bne.n	800e07c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	699a      	ldr	r2, [r3, #24]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	429a      	cmp	r2, r3
 800e108:	d811      	bhi.n	800e12e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	f003 030f 	and.w	r3, r3, #15
 800e110:	2201      	movs	r2, #1
 800e112:	fa02 f303 	lsl.w	r3, r2, r3
 800e116:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e11e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	43db      	mvns	r3, r3
 800e124:	6939      	ldr	r1, [r7, #16]
 800e126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e12a:	4013      	ands	r3, r2
 800e12c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3720      	adds	r7, #32
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	333c      	adds	r3, #60	; 0x3c
 800e150:	3304      	adds	r3, #4
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	015a      	lsls	r2, r3, #5
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	4413      	add	r3, r2
 800e15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	691b      	ldr	r3, [r3, #16]
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d17b      	bne.n	800e266 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	f003 0308 	and.w	r3, r3, #8
 800e174:	2b00      	cmp	r3, #0
 800e176:	d015      	beq.n	800e1a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	4a61      	ldr	r2, [pc, #388]	; (800e300 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	f240 80b9 	bls.w	800e2f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f000 80b3 	beq.w	800e2f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	015a      	lsls	r2, r3, #5
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	4413      	add	r3, r2
 800e196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e19a:	461a      	mov	r2, r3
 800e19c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1a0:	6093      	str	r3, [r2, #8]
 800e1a2:	e0a7      	b.n	800e2f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	f003 0320 	and.w	r3, r3, #32
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d009      	beq.n	800e1c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	015a      	lsls	r2, r3, #5
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	2320      	movs	r3, #32
 800e1be:	6093      	str	r3, [r2, #8]
 800e1c0:	e098      	b.n	800e2f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	f040 8093 	bne.w	800e2f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	4a4b      	ldr	r2, [pc, #300]	; (800e300 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d90f      	bls.n	800e1f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00a      	beq.n	800e1f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	015a      	lsls	r2, r3, #5
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1f2:	6093      	str	r3, [r2, #8]
 800e1f4:	e07e      	b.n	800e2f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	4413      	add	r3, r2
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	4413      	add	r3, r2
 800e208:	3304      	adds	r3, #4
 800e20a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	69da      	ldr	r2, [r3, #28]
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	0159      	lsls	r1, r3, #5
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	440b      	add	r3, r1
 800e218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e222:	1ad2      	subs	r2, r2, r3
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d114      	bne.n	800e258 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d109      	bne.n	800e24a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6818      	ldr	r0, [r3, #0]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e240:	461a      	mov	r2, r3
 800e242:	2101      	movs	r1, #1
 800e244:	f004 ff40 	bl	80130c8 <USB_EP0_OutStart>
 800e248:	e006      	b.n	800e258 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	691a      	ldr	r2, [r3, #16]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6a1b      	ldr	r3, [r3, #32]
 800e252:	441a      	add	r2, r3
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	4619      	mov	r1, r3
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f00a fb4e 	bl	8018900 <HAL_PCD_DataOutStageCallback>
 800e264:	e046      	b.n	800e2f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	4a26      	ldr	r2, [pc, #152]	; (800e304 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d124      	bne.n	800e2b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00a      	beq.n	800e28e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	015a      	lsls	r2, r3, #5
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	4413      	add	r3, r2
 800e280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e284:	461a      	mov	r2, r3
 800e286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e28a:	6093      	str	r3, [r2, #8]
 800e28c:	e032      	b.n	800e2f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	f003 0320 	and.w	r3, r3, #32
 800e294:	2b00      	cmp	r3, #0
 800e296:	d008      	beq.n	800e2aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	015a      	lsls	r2, r3, #5
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	4413      	add	r3, r2
 800e2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	2320      	movs	r3, #32
 800e2a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f00a fb25 	bl	8018900 <HAL_PCD_DataOutStageCallback>
 800e2b6:	e01d      	b.n	800e2f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d114      	bne.n	800e2e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800e2be:	6879      	ldr	r1, [r7, #4]
 800e2c0:	683a      	ldr	r2, [r7, #0]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	00db      	lsls	r3, r3, #3
 800e2c6:	4413      	add	r3, r2
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	440b      	add	r3, r1
 800e2cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d108      	bne.n	800e2e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6818      	ldr	r0, [r3, #0]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	f004 fef0 	bl	80130c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f00a fb06 	bl	8018900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800e2f4:	2300      	movs	r3, #0
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3720      	adds	r7, #32
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	4f54300a 	.word	0x4f54300a
 800e304:	4f54310a 	.word	0x4f54310a

0800e308 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	333c      	adds	r3, #60	; 0x3c
 800e320:	3304      	adds	r3, #4
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	015a      	lsls	r2, r3, #5
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	4413      	add	r3, r2
 800e32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	4a15      	ldr	r2, [pc, #84]	; (800e390 <PCD_EP_OutSetupPacket_int+0x88>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d90e      	bls.n	800e35c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e344:	2b00      	cmp	r3, #0
 800e346:	d009      	beq.n	800e35c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	015a      	lsls	r2, r3, #5
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	4413      	add	r3, r2
 800e350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e354:	461a      	mov	r2, r3
 800e356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e35a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f00a fabd 	bl	80188dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	4a0a      	ldr	r2, [pc, #40]	; (800e390 <PCD_EP_OutSetupPacket_int+0x88>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d90c      	bls.n	800e384 <PCD_EP_OutSetupPacket_int+0x7c>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d108      	bne.n	800e384 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6818      	ldr	r0, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e37c:	461a      	mov	r2, r3
 800e37e:	2101      	movs	r1, #1
 800e380:	f004 fea2 	bl	80130c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	4f54300a 	.word	0x4f54300a

0800e394 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	460b      	mov	r3, r1
 800e39e:	70fb      	strb	r3, [r7, #3]
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800e3ac:	78fb      	ldrb	r3, [r7, #3]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d107      	bne.n	800e3c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e3b2:	883b      	ldrh	r3, [r7, #0]
 800e3b4:	0419      	lsls	r1, r3, #16
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	430a      	orrs	r2, r1
 800e3be:	629a      	str	r2, [r3, #40]	; 0x28
 800e3c0:	e028      	b.n	800e414 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c8:	0c1b      	lsrs	r3, r3, #16
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	73fb      	strb	r3, [r7, #15]
 800e3d4:	e00d      	b.n	800e3f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	7bfb      	ldrb	r3, [r7, #15]
 800e3dc:	3340      	adds	r3, #64	; 0x40
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	4413      	add	r3, r2
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	0c1b      	lsrs	r3, r3, #16
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	73fb      	strb	r3, [r7, #15]
 800e3f2:	7bfa      	ldrb	r2, [r7, #15]
 800e3f4:	78fb      	ldrb	r3, [r7, #3]
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d3ec      	bcc.n	800e3d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e3fc:	883b      	ldrh	r3, [r7, #0]
 800e3fe:	0418      	lsls	r0, r3, #16
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6819      	ldr	r1, [r3, #0]
 800e404:	78fb      	ldrb	r3, [r7, #3]
 800e406:	3b01      	subs	r3, #1
 800e408:	68ba      	ldr	r2, [r7, #8]
 800e40a:	4302      	orrs	r2, r0
 800e40c:	3340      	adds	r3, #64	; 0x40
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	440b      	add	r3, r1
 800e412:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3714      	adds	r7, #20
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e422:	b480      	push	{r7}
 800e424:	b083      	sub	sp, #12
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	460b      	mov	r3, r1
 800e42c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	887a      	ldrh	r2, [r7, #2]
 800e434:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	460b      	mov	r3, r1
 800e44e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e450:	bf00      	nop
 800e452:	370c      	adds	r7, #12
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b086      	sub	sp, #24
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e46a:	2301      	movs	r3, #1
 800e46c:	e267      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f003 0301 	and.w	r3, r3, #1
 800e476:	2b00      	cmp	r3, #0
 800e478:	d075      	beq.n	800e566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e47a:	4b88      	ldr	r3, [pc, #544]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	f003 030c 	and.w	r3, r3, #12
 800e482:	2b04      	cmp	r3, #4
 800e484:	d00c      	beq.n	800e4a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e486:	4b85      	ldr	r3, [pc, #532]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e48e:	2b08      	cmp	r3, #8
 800e490:	d112      	bne.n	800e4b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e492:	4b82      	ldr	r3, [pc, #520]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e49a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e49e:	d10b      	bne.n	800e4b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e4a0:	4b7e      	ldr	r3, [pc, #504]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d05b      	beq.n	800e564 <HAL_RCC_OscConfig+0x108>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d157      	bne.n	800e564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	e242      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4c0:	d106      	bne.n	800e4d0 <HAL_RCC_OscConfig+0x74>
 800e4c2:	4b76      	ldr	r3, [pc, #472]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4a75      	ldr	r2, [pc, #468]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e4c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4cc:	6013      	str	r3, [r2, #0]
 800e4ce:	e01d      	b.n	800e50c <HAL_RCC_OscConfig+0xb0>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e4d8:	d10c      	bne.n	800e4f4 <HAL_RCC_OscConfig+0x98>
 800e4da:	4b70      	ldr	r3, [pc, #448]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a6f      	ldr	r2, [pc, #444]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e4e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e4e4:	6013      	str	r3, [r2, #0]
 800e4e6:	4b6d      	ldr	r3, [pc, #436]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a6c      	ldr	r2, [pc, #432]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e4ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4f0:	6013      	str	r3, [r2, #0]
 800e4f2:	e00b      	b.n	800e50c <HAL_RCC_OscConfig+0xb0>
 800e4f4:	4b69      	ldr	r3, [pc, #420]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a68      	ldr	r2, [pc, #416]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e4fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4fe:	6013      	str	r3, [r2, #0]
 800e500:	4b66      	ldr	r3, [pc, #408]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a65      	ldr	r2, [pc, #404]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e50a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d013      	beq.n	800e53c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e514:	f7fa ffc2 	bl	800949c <HAL_GetTick>
 800e518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e51a:	e008      	b.n	800e52e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e51c:	f7fa ffbe 	bl	800949c <HAL_GetTick>
 800e520:	4602      	mov	r2, r0
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	1ad3      	subs	r3, r2, r3
 800e526:	2b64      	cmp	r3, #100	; 0x64
 800e528:	d901      	bls.n	800e52e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	e207      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e52e:	4b5b      	ldr	r3, [pc, #364]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e536:	2b00      	cmp	r3, #0
 800e538:	d0f0      	beq.n	800e51c <HAL_RCC_OscConfig+0xc0>
 800e53a:	e014      	b.n	800e566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e53c:	f7fa ffae 	bl	800949c <HAL_GetTick>
 800e540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e542:	e008      	b.n	800e556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e544:	f7fa ffaa 	bl	800949c <HAL_GetTick>
 800e548:	4602      	mov	r2, r0
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	1ad3      	subs	r3, r2, r3
 800e54e:	2b64      	cmp	r3, #100	; 0x64
 800e550:	d901      	bls.n	800e556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e552:	2303      	movs	r3, #3
 800e554:	e1f3      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e556:	4b51      	ldr	r3, [pc, #324]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d1f0      	bne.n	800e544 <HAL_RCC_OscConfig+0xe8>
 800e562:	e000      	b.n	800e566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 0302 	and.w	r3, r3, #2
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d063      	beq.n	800e63a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e572:	4b4a      	ldr	r3, [pc, #296]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	f003 030c 	and.w	r3, r3, #12
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d00b      	beq.n	800e596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e57e:	4b47      	ldr	r3, [pc, #284]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e586:	2b08      	cmp	r3, #8
 800e588:	d11c      	bne.n	800e5c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e58a:	4b44      	ldr	r3, [pc, #272]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e592:	2b00      	cmp	r3, #0
 800e594:	d116      	bne.n	800e5c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e596:	4b41      	ldr	r3, [pc, #260]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 0302 	and.w	r3, r3, #2
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d005      	beq.n	800e5ae <HAL_RCC_OscConfig+0x152>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d001      	beq.n	800e5ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e1c7      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5ae:	4b3b      	ldr	r3, [pc, #236]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	00db      	lsls	r3, r3, #3
 800e5bc:	4937      	ldr	r1, [pc, #220]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e5c2:	e03a      	b.n	800e63a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d020      	beq.n	800e60e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e5cc:	4b34      	ldr	r3, [pc, #208]	; (800e6a0 <HAL_RCC_OscConfig+0x244>)
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5d2:	f7fa ff63 	bl	800949c <HAL_GetTick>
 800e5d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e5d8:	e008      	b.n	800e5ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e5da:	f7fa ff5f 	bl	800949c <HAL_GetTick>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	1ad3      	subs	r3, r2, r3
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d901      	bls.n	800e5ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	e1a8      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e5ec:	4b2b      	ldr	r3, [pc, #172]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 0302 	and.w	r3, r3, #2
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d0f0      	beq.n	800e5da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5f8:	4b28      	ldr	r3, [pc, #160]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	00db      	lsls	r3, r3, #3
 800e606:	4925      	ldr	r1, [pc, #148]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e608:	4313      	orrs	r3, r2
 800e60a:	600b      	str	r3, [r1, #0]
 800e60c:	e015      	b.n	800e63a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e60e:	4b24      	ldr	r3, [pc, #144]	; (800e6a0 <HAL_RCC_OscConfig+0x244>)
 800e610:	2200      	movs	r2, #0
 800e612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e614:	f7fa ff42 	bl	800949c <HAL_GetTick>
 800e618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e61a:	e008      	b.n	800e62e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e61c:	f7fa ff3e 	bl	800949c <HAL_GetTick>
 800e620:	4602      	mov	r2, r0
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	2b02      	cmp	r3, #2
 800e628:	d901      	bls.n	800e62e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e62a:	2303      	movs	r3, #3
 800e62c:	e187      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e62e:	4b1b      	ldr	r3, [pc, #108]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f003 0302 	and.w	r3, r3, #2
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1f0      	bne.n	800e61c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f003 0308 	and.w	r3, r3, #8
 800e642:	2b00      	cmp	r3, #0
 800e644:	d036      	beq.n	800e6b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	695b      	ldr	r3, [r3, #20]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d016      	beq.n	800e67c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e64e:	4b15      	ldr	r3, [pc, #84]	; (800e6a4 <HAL_RCC_OscConfig+0x248>)
 800e650:	2201      	movs	r2, #1
 800e652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e654:	f7fa ff22 	bl	800949c <HAL_GetTick>
 800e658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e65a:	e008      	b.n	800e66e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e65c:	f7fa ff1e 	bl	800949c <HAL_GetTick>
 800e660:	4602      	mov	r2, r0
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	1ad3      	subs	r3, r2, r3
 800e666:	2b02      	cmp	r3, #2
 800e668:	d901      	bls.n	800e66e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e66a:	2303      	movs	r3, #3
 800e66c:	e167      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e66e:	4b0b      	ldr	r3, [pc, #44]	; (800e69c <HAL_RCC_OscConfig+0x240>)
 800e670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e672:	f003 0302 	and.w	r3, r3, #2
 800e676:	2b00      	cmp	r3, #0
 800e678:	d0f0      	beq.n	800e65c <HAL_RCC_OscConfig+0x200>
 800e67a:	e01b      	b.n	800e6b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e67c:	4b09      	ldr	r3, [pc, #36]	; (800e6a4 <HAL_RCC_OscConfig+0x248>)
 800e67e:	2200      	movs	r2, #0
 800e680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e682:	f7fa ff0b 	bl	800949c <HAL_GetTick>
 800e686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e688:	e00e      	b.n	800e6a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e68a:	f7fa ff07 	bl	800949c <HAL_GetTick>
 800e68e:	4602      	mov	r2, r0
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	1ad3      	subs	r3, r2, r3
 800e694:	2b02      	cmp	r3, #2
 800e696:	d907      	bls.n	800e6a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e698:	2303      	movs	r3, #3
 800e69a:	e150      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
 800e69c:	40023800 	.word	0x40023800
 800e6a0:	42470000 	.word	0x42470000
 800e6a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e6a8:	4b88      	ldr	r3, [pc, #544]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e6aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6ac:	f003 0302 	and.w	r3, r3, #2
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1ea      	bne.n	800e68a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f003 0304 	and.w	r3, r3, #4
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 8097 	beq.w	800e7f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e6c6:	4b81      	ldr	r3, [pc, #516]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10f      	bne.n	800e6f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	60bb      	str	r3, [r7, #8]
 800e6d6:	4b7d      	ldr	r3, [pc, #500]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6da:	4a7c      	ldr	r2, [pc, #496]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e6dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6e0:	6413      	str	r3, [r2, #64]	; 0x40
 800e6e2:	4b7a      	ldr	r3, [pc, #488]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6ea:	60bb      	str	r3, [r7, #8]
 800e6ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e6f2:	4b77      	ldr	r3, [pc, #476]	; (800e8d0 <HAL_RCC_OscConfig+0x474>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d118      	bne.n	800e730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e6fe:	4b74      	ldr	r3, [pc, #464]	; (800e8d0 <HAL_RCC_OscConfig+0x474>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a73      	ldr	r2, [pc, #460]	; (800e8d0 <HAL_RCC_OscConfig+0x474>)
 800e704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e70a:	f7fa fec7 	bl	800949c <HAL_GetTick>
 800e70e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e710:	e008      	b.n	800e724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e712:	f7fa fec3 	bl	800949c <HAL_GetTick>
 800e716:	4602      	mov	r2, r0
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d901      	bls.n	800e724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e720:	2303      	movs	r3, #3
 800e722:	e10c      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e724:	4b6a      	ldr	r3, [pc, #424]	; (800e8d0 <HAL_RCC_OscConfig+0x474>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d0f0      	beq.n	800e712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	689b      	ldr	r3, [r3, #8]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d106      	bne.n	800e746 <HAL_RCC_OscConfig+0x2ea>
 800e738:	4b64      	ldr	r3, [pc, #400]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e73a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e73c:	4a63      	ldr	r2, [pc, #396]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e73e:	f043 0301 	orr.w	r3, r3, #1
 800e742:	6713      	str	r3, [r2, #112]	; 0x70
 800e744:	e01c      	b.n	800e780 <HAL_RCC_OscConfig+0x324>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	689b      	ldr	r3, [r3, #8]
 800e74a:	2b05      	cmp	r3, #5
 800e74c:	d10c      	bne.n	800e768 <HAL_RCC_OscConfig+0x30c>
 800e74e:	4b5f      	ldr	r3, [pc, #380]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e752:	4a5e      	ldr	r2, [pc, #376]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e754:	f043 0304 	orr.w	r3, r3, #4
 800e758:	6713      	str	r3, [r2, #112]	; 0x70
 800e75a:	4b5c      	ldr	r3, [pc, #368]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e75e:	4a5b      	ldr	r2, [pc, #364]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e760:	f043 0301 	orr.w	r3, r3, #1
 800e764:	6713      	str	r3, [r2, #112]	; 0x70
 800e766:	e00b      	b.n	800e780 <HAL_RCC_OscConfig+0x324>
 800e768:	4b58      	ldr	r3, [pc, #352]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e76a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e76c:	4a57      	ldr	r2, [pc, #348]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e76e:	f023 0301 	bic.w	r3, r3, #1
 800e772:	6713      	str	r3, [r2, #112]	; 0x70
 800e774:	4b55      	ldr	r3, [pc, #340]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e778:	4a54      	ldr	r2, [pc, #336]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e77a:	f023 0304 	bic.w	r3, r3, #4
 800e77e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d015      	beq.n	800e7b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e788:	f7fa fe88 	bl	800949c <HAL_GetTick>
 800e78c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e78e:	e00a      	b.n	800e7a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e790:	f7fa fe84 	bl	800949c <HAL_GetTick>
 800e794:	4602      	mov	r2, r0
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d901      	bls.n	800e7a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e7a2:	2303      	movs	r3, #3
 800e7a4:	e0cb      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e7a6:	4b49      	ldr	r3, [pc, #292]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7aa:	f003 0302 	and.w	r3, r3, #2
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d0ee      	beq.n	800e790 <HAL_RCC_OscConfig+0x334>
 800e7b2:	e014      	b.n	800e7de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e7b4:	f7fa fe72 	bl	800949c <HAL_GetTick>
 800e7b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e7ba:	e00a      	b.n	800e7d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e7bc:	f7fa fe6e 	bl	800949c <HAL_GetTick>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	1ad3      	subs	r3, r2, r3
 800e7c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d901      	bls.n	800e7d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e7ce:	2303      	movs	r3, #3
 800e7d0:	e0b5      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e7d2:	4b3e      	ldr	r3, [pc, #248]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7d6:	f003 0302 	and.w	r3, r3, #2
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d1ee      	bne.n	800e7bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e7de:	7dfb      	ldrb	r3, [r7, #23]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d105      	bne.n	800e7f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e7e4:	4b39      	ldr	r3, [pc, #228]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e8:	4a38      	ldr	r2, [pc, #224]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e7ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	699b      	ldr	r3, [r3, #24]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f000 80a1 	beq.w	800e93c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e7fa:	4b34      	ldr	r3, [pc, #208]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e7fc:	689b      	ldr	r3, [r3, #8]
 800e7fe:	f003 030c 	and.w	r3, r3, #12
 800e802:	2b08      	cmp	r3, #8
 800e804:	d05c      	beq.n	800e8c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	699b      	ldr	r3, [r3, #24]
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	d141      	bne.n	800e892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e80e:	4b31      	ldr	r3, [pc, #196]	; (800e8d4 <HAL_RCC_OscConfig+0x478>)
 800e810:	2200      	movs	r2, #0
 800e812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e814:	f7fa fe42 	bl	800949c <HAL_GetTick>
 800e818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e81a:	e008      	b.n	800e82e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e81c:	f7fa fe3e 	bl	800949c <HAL_GetTick>
 800e820:	4602      	mov	r2, r0
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	2b02      	cmp	r3, #2
 800e828:	d901      	bls.n	800e82e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e82a:	2303      	movs	r3, #3
 800e82c:	e087      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e82e:	4b27      	ldr	r3, [pc, #156]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1f0      	bne.n	800e81c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	69da      	ldr	r2, [r3, #28]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a1b      	ldr	r3, [r3, #32]
 800e842:	431a      	orrs	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e848:	019b      	lsls	r3, r3, #6
 800e84a:	431a      	orrs	r2, r3
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e850:	085b      	lsrs	r3, r3, #1
 800e852:	3b01      	subs	r3, #1
 800e854:	041b      	lsls	r3, r3, #16
 800e856:	431a      	orrs	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85c:	061b      	lsls	r3, r3, #24
 800e85e:	491b      	ldr	r1, [pc, #108]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e860:	4313      	orrs	r3, r2
 800e862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e864:	4b1b      	ldr	r3, [pc, #108]	; (800e8d4 <HAL_RCC_OscConfig+0x478>)
 800e866:	2201      	movs	r2, #1
 800e868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e86a:	f7fa fe17 	bl	800949c <HAL_GetTick>
 800e86e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e870:	e008      	b.n	800e884 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e872:	f7fa fe13 	bl	800949c <HAL_GetTick>
 800e876:	4602      	mov	r2, r0
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	1ad3      	subs	r3, r2, r3
 800e87c:	2b02      	cmp	r3, #2
 800e87e:	d901      	bls.n	800e884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e880:	2303      	movs	r3, #3
 800e882:	e05c      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e884:	4b11      	ldr	r3, [pc, #68]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d0f0      	beq.n	800e872 <HAL_RCC_OscConfig+0x416>
 800e890:	e054      	b.n	800e93c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e892:	4b10      	ldr	r3, [pc, #64]	; (800e8d4 <HAL_RCC_OscConfig+0x478>)
 800e894:	2200      	movs	r2, #0
 800e896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e898:	f7fa fe00 	bl	800949c <HAL_GetTick>
 800e89c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e89e:	e008      	b.n	800e8b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e8a0:	f7fa fdfc 	bl	800949c <HAL_GetTick>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	1ad3      	subs	r3, r2, r3
 800e8aa:	2b02      	cmp	r3, #2
 800e8ac:	d901      	bls.n	800e8b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e8ae:	2303      	movs	r3, #3
 800e8b0:	e045      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e8b2:	4b06      	ldr	r3, [pc, #24]	; (800e8cc <HAL_RCC_OscConfig+0x470>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d1f0      	bne.n	800e8a0 <HAL_RCC_OscConfig+0x444>
 800e8be:	e03d      	b.n	800e93c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	699b      	ldr	r3, [r3, #24]
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d107      	bne.n	800e8d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e038      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
 800e8cc:	40023800 	.word	0x40023800
 800e8d0:	40007000 	.word	0x40007000
 800e8d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e8d8:	4b1b      	ldr	r3, [pc, #108]	; (800e948 <HAL_RCC_OscConfig+0x4ec>)
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d028      	beq.n	800e938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d121      	bne.n	800e938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d11a      	bne.n	800e938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e908:	4013      	ands	r3, r2
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e90e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e910:	4293      	cmp	r3, r2
 800e912:	d111      	bne.n	800e938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e91e:	085b      	lsrs	r3, r3, #1
 800e920:	3b01      	subs	r3, #1
 800e922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e924:	429a      	cmp	r2, r3
 800e926:	d107      	bne.n	800e938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e934:	429a      	cmp	r2, r3
 800e936:	d001      	beq.n	800e93c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800e938:	2301      	movs	r3, #1
 800e93a:	e000      	b.n	800e93e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3718      	adds	r7, #24
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	40023800 	.word	0x40023800

0800e94c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d101      	bne.n	800e960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e95c:	2301      	movs	r3, #1
 800e95e:	e0cc      	b.n	800eafa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e960:	4b68      	ldr	r3, [pc, #416]	; (800eb04 <HAL_RCC_ClockConfig+0x1b8>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f003 0307 	and.w	r3, r3, #7
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d90c      	bls.n	800e988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e96e:	4b65      	ldr	r3, [pc, #404]	; (800eb04 <HAL_RCC_ClockConfig+0x1b8>)
 800e970:	683a      	ldr	r2, [r7, #0]
 800e972:	b2d2      	uxtb	r2, r2
 800e974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e976:	4b63      	ldr	r3, [pc, #396]	; (800eb04 <HAL_RCC_ClockConfig+0x1b8>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f003 0307 	and.w	r3, r3, #7
 800e97e:	683a      	ldr	r2, [r7, #0]
 800e980:	429a      	cmp	r2, r3
 800e982:	d001      	beq.n	800e988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e984:	2301      	movs	r3, #1
 800e986:	e0b8      	b.n	800eafa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f003 0302 	and.w	r3, r3, #2
 800e990:	2b00      	cmp	r3, #0
 800e992:	d020      	beq.n	800e9d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f003 0304 	and.w	r3, r3, #4
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d005      	beq.n	800e9ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e9a0:	4b59      	ldr	r3, [pc, #356]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	4a58      	ldr	r2, [pc, #352]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800e9a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e9aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f003 0308 	and.w	r3, r3, #8
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d005      	beq.n	800e9c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e9b8:	4b53      	ldr	r3, [pc, #332]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	4a52      	ldr	r2, [pc, #328]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800e9be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e9c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e9c4:	4b50      	ldr	r3, [pc, #320]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	689b      	ldr	r3, [r3, #8]
 800e9d0:	494d      	ldr	r1, [pc, #308]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d044      	beq.n	800ea6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d107      	bne.n	800e9fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9ea:	4b47      	ldr	r3, [pc, #284]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d119      	bne.n	800ea2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e07f      	b.n	800eafa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d003      	beq.n	800ea0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ea06:	2b03      	cmp	r3, #3
 800ea08:	d107      	bne.n	800ea1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea0a:	4b3f      	ldr	r3, [pc, #252]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d109      	bne.n	800ea2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ea16:	2301      	movs	r3, #1
 800ea18:	e06f      	b.n	800eafa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea1a:	4b3b      	ldr	r3, [pc, #236]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f003 0302 	and.w	r3, r3, #2
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d101      	bne.n	800ea2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ea26:	2301      	movs	r3, #1
 800ea28:	e067      	b.n	800eafa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ea2a:	4b37      	ldr	r3, [pc, #220]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	f023 0203 	bic.w	r2, r3, #3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	4934      	ldr	r1, [pc, #208]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ea3c:	f7fa fd2e 	bl	800949c <HAL_GetTick>
 800ea40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea42:	e00a      	b.n	800ea5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ea44:	f7fa fd2a 	bl	800949c <HAL_GetTick>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d901      	bls.n	800ea5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ea56:	2303      	movs	r3, #3
 800ea58:	e04f      	b.n	800eafa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea5a:	4b2b      	ldr	r3, [pc, #172]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	f003 020c 	and.w	r2, r3, #12
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d1eb      	bne.n	800ea44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ea6c:	4b25      	ldr	r3, [pc, #148]	; (800eb04 <HAL_RCC_ClockConfig+0x1b8>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f003 0307 	and.w	r3, r3, #7
 800ea74:	683a      	ldr	r2, [r7, #0]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d20c      	bcs.n	800ea94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ea7a:	4b22      	ldr	r3, [pc, #136]	; (800eb04 <HAL_RCC_ClockConfig+0x1b8>)
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	b2d2      	uxtb	r2, r2
 800ea80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ea82:	4b20      	ldr	r3, [pc, #128]	; (800eb04 <HAL_RCC_ClockConfig+0x1b8>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f003 0307 	and.w	r3, r3, #7
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d001      	beq.n	800ea94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ea90:	2301      	movs	r3, #1
 800ea92:	e032      	b.n	800eafa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f003 0304 	and.w	r3, r3, #4
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d008      	beq.n	800eab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eaa0:	4b19      	ldr	r3, [pc, #100]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	4916      	ldr	r1, [pc, #88]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800eaae:	4313      	orrs	r3, r2
 800eab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f003 0308 	and.w	r3, r3, #8
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d009      	beq.n	800ead2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800eabe:	4b12      	ldr	r3, [pc, #72]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	00db      	lsls	r3, r3, #3
 800eacc:	490e      	ldr	r1, [pc, #56]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800eace:	4313      	orrs	r3, r2
 800ead0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ead2:	f000 f821 	bl	800eb18 <HAL_RCC_GetSysClockFreq>
 800ead6:	4602      	mov	r2, r0
 800ead8:	4b0b      	ldr	r3, [pc, #44]	; (800eb08 <HAL_RCC_ClockConfig+0x1bc>)
 800eada:	689b      	ldr	r3, [r3, #8]
 800eadc:	091b      	lsrs	r3, r3, #4
 800eade:	f003 030f 	and.w	r3, r3, #15
 800eae2:	490a      	ldr	r1, [pc, #40]	; (800eb0c <HAL_RCC_ClockConfig+0x1c0>)
 800eae4:	5ccb      	ldrb	r3, [r1, r3]
 800eae6:	fa22 f303 	lsr.w	r3, r2, r3
 800eaea:	4a09      	ldr	r2, [pc, #36]	; (800eb10 <HAL_RCC_ClockConfig+0x1c4>)
 800eaec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800eaee:	4b09      	ldr	r3, [pc, #36]	; (800eb14 <HAL_RCC_ClockConfig+0x1c8>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7f4 ffec 	bl	8003ad0 <HAL_InitTick>

  return HAL_OK;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	40023c00 	.word	0x40023c00
 800eb08:	40023800 	.word	0x40023800
 800eb0c:	0801fa08 	.word	0x0801fa08
 800eb10:	20000004 	.word	0x20000004
 800eb14:	20000010 	.word	0x20000010

0800eb18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eb18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb1c:	b090      	sub	sp, #64	; 0x40
 800eb1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800eb20:	2300      	movs	r3, #0
 800eb22:	637b      	str	r3, [r7, #52]	; 0x34
 800eb24:	2300      	movs	r3, #0
 800eb26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb28:	2300      	movs	r3, #0
 800eb2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eb30:	4b59      	ldr	r3, [pc, #356]	; (800ec98 <HAL_RCC_GetSysClockFreq+0x180>)
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	f003 030c 	and.w	r3, r3, #12
 800eb38:	2b08      	cmp	r3, #8
 800eb3a:	d00d      	beq.n	800eb58 <HAL_RCC_GetSysClockFreq+0x40>
 800eb3c:	2b08      	cmp	r3, #8
 800eb3e:	f200 80a1 	bhi.w	800ec84 <HAL_RCC_GetSysClockFreq+0x16c>
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d002      	beq.n	800eb4c <HAL_RCC_GetSysClockFreq+0x34>
 800eb46:	2b04      	cmp	r3, #4
 800eb48:	d003      	beq.n	800eb52 <HAL_RCC_GetSysClockFreq+0x3a>
 800eb4a:	e09b      	b.n	800ec84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800eb4c:	4b53      	ldr	r3, [pc, #332]	; (800ec9c <HAL_RCC_GetSysClockFreq+0x184>)
 800eb4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800eb50:	e09b      	b.n	800ec8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800eb52:	4b53      	ldr	r3, [pc, #332]	; (800eca0 <HAL_RCC_GetSysClockFreq+0x188>)
 800eb54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800eb56:	e098      	b.n	800ec8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800eb58:	4b4f      	ldr	r3, [pc, #316]	; (800ec98 <HAL_RCC_GetSysClockFreq+0x180>)
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800eb62:	4b4d      	ldr	r3, [pc, #308]	; (800ec98 <HAL_RCC_GetSysClockFreq+0x180>)
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d028      	beq.n	800ebc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eb6e:	4b4a      	ldr	r3, [pc, #296]	; (800ec98 <HAL_RCC_GetSysClockFreq+0x180>)
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	099b      	lsrs	r3, r3, #6
 800eb74:	2200      	movs	r2, #0
 800eb76:	623b      	str	r3, [r7, #32]
 800eb78:	627a      	str	r2, [r7, #36]	; 0x24
 800eb7a:	6a3b      	ldr	r3, [r7, #32]
 800eb7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800eb80:	2100      	movs	r1, #0
 800eb82:	4b47      	ldr	r3, [pc, #284]	; (800eca0 <HAL_RCC_GetSysClockFreq+0x188>)
 800eb84:	fb03 f201 	mul.w	r2, r3, r1
 800eb88:	2300      	movs	r3, #0
 800eb8a:	fb00 f303 	mul.w	r3, r0, r3
 800eb8e:	4413      	add	r3, r2
 800eb90:	4a43      	ldr	r2, [pc, #268]	; (800eca0 <HAL_RCC_GetSysClockFreq+0x188>)
 800eb92:	fba0 1202 	umull	r1, r2, r0, r2
 800eb96:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb98:	460a      	mov	r2, r1
 800eb9a:	62ba      	str	r2, [r7, #40]	; 0x28
 800eb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb9e:	4413      	add	r3, r2
 800eba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eba4:	2200      	movs	r2, #0
 800eba6:	61bb      	str	r3, [r7, #24]
 800eba8:	61fa      	str	r2, [r7, #28]
 800ebaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ebae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ebb2:	f7f2 f869 	bl	8000c88 <__aeabi_uldivmod>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	4613      	mov	r3, r2
 800ebbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebbe:	e053      	b.n	800ec68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ebc0:	4b35      	ldr	r3, [pc, #212]	; (800ec98 <HAL_RCC_GetSysClockFreq+0x180>)
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	099b      	lsrs	r3, r3, #6
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	613b      	str	r3, [r7, #16]
 800ebca:	617a      	str	r2, [r7, #20]
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ebd2:	f04f 0b00 	mov.w	fp, #0
 800ebd6:	4652      	mov	r2, sl
 800ebd8:	465b      	mov	r3, fp
 800ebda:	f04f 0000 	mov.w	r0, #0
 800ebde:	f04f 0100 	mov.w	r1, #0
 800ebe2:	0159      	lsls	r1, r3, #5
 800ebe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ebe8:	0150      	lsls	r0, r2, #5
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	ebb2 080a 	subs.w	r8, r2, sl
 800ebf2:	eb63 090b 	sbc.w	r9, r3, fp
 800ebf6:	f04f 0200 	mov.w	r2, #0
 800ebfa:	f04f 0300 	mov.w	r3, #0
 800ebfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ec02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ec06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ec0a:	ebb2 0408 	subs.w	r4, r2, r8
 800ec0e:	eb63 0509 	sbc.w	r5, r3, r9
 800ec12:	f04f 0200 	mov.w	r2, #0
 800ec16:	f04f 0300 	mov.w	r3, #0
 800ec1a:	00eb      	lsls	r3, r5, #3
 800ec1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ec20:	00e2      	lsls	r2, r4, #3
 800ec22:	4614      	mov	r4, r2
 800ec24:	461d      	mov	r5, r3
 800ec26:	eb14 030a 	adds.w	r3, r4, sl
 800ec2a:	603b      	str	r3, [r7, #0]
 800ec2c:	eb45 030b 	adc.w	r3, r5, fp
 800ec30:	607b      	str	r3, [r7, #4]
 800ec32:	f04f 0200 	mov.w	r2, #0
 800ec36:	f04f 0300 	mov.w	r3, #0
 800ec3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ec3e:	4629      	mov	r1, r5
 800ec40:	028b      	lsls	r3, r1, #10
 800ec42:	4621      	mov	r1, r4
 800ec44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ec48:	4621      	mov	r1, r4
 800ec4a:	028a      	lsls	r2, r1, #10
 800ec4c:	4610      	mov	r0, r2
 800ec4e:	4619      	mov	r1, r3
 800ec50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec52:	2200      	movs	r2, #0
 800ec54:	60bb      	str	r3, [r7, #8]
 800ec56:	60fa      	str	r2, [r7, #12]
 800ec58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ec5c:	f7f2 f814 	bl	8000c88 <__aeabi_uldivmod>
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	4613      	mov	r3, r2
 800ec66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ec68:	4b0b      	ldr	r3, [pc, #44]	; (800ec98 <HAL_RCC_GetSysClockFreq+0x180>)
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	0c1b      	lsrs	r3, r3, #16
 800ec6e:	f003 0303 	and.w	r3, r3, #3
 800ec72:	3301      	adds	r3, #1
 800ec74:	005b      	lsls	r3, r3, #1
 800ec76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800ec78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ec82:	e002      	b.n	800ec8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ec84:	4b05      	ldr	r3, [pc, #20]	; (800ec9c <HAL_RCC_GetSysClockFreq+0x184>)
 800ec86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ec88:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ec8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3740      	adds	r7, #64	; 0x40
 800ec90:	46bd      	mov	sp, r7
 800ec92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec96:	bf00      	nop
 800ec98:	40023800 	.word	0x40023800
 800ec9c:	00f42400 	.word	0x00f42400
 800eca0:	00b71b00 	.word	0x00b71b00

0800eca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eca4:	b480      	push	{r7}
 800eca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800eca8:	4b03      	ldr	r3, [pc, #12]	; (800ecb8 <HAL_RCC_GetHCLKFreq+0x14>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	20000004 	.word	0x20000004

0800ecbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ecc0:	f7ff fff0 	bl	800eca4 <HAL_RCC_GetHCLKFreq>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	4b05      	ldr	r3, [pc, #20]	; (800ecdc <HAL_RCC_GetPCLK1Freq+0x20>)
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	0a9b      	lsrs	r3, r3, #10
 800eccc:	f003 0307 	and.w	r3, r3, #7
 800ecd0:	4903      	ldr	r1, [pc, #12]	; (800ece0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ecd2:	5ccb      	ldrb	r3, [r1, r3]
 800ecd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	40023800 	.word	0x40023800
 800ece0:	0801fa18 	.word	0x0801fa18

0800ece4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ece8:	f7ff ffdc 	bl	800eca4 <HAL_RCC_GetHCLKFreq>
 800ecec:	4602      	mov	r2, r0
 800ecee:	4b05      	ldr	r3, [pc, #20]	; (800ed04 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	0b5b      	lsrs	r3, r3, #13
 800ecf4:	f003 0307 	and.w	r3, r3, #7
 800ecf8:	4903      	ldr	r1, [pc, #12]	; (800ed08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ecfa:	5ccb      	ldrb	r3, [r1, r3]
 800ecfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	40023800 	.word	0x40023800
 800ed08:	0801fa18 	.word	0x0801fa18

0800ed0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	220f      	movs	r2, #15
 800ed1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ed1c:	4b12      	ldr	r3, [pc, #72]	; (800ed68 <HAL_RCC_GetClockConfig+0x5c>)
 800ed1e:	689b      	ldr	r3, [r3, #8]
 800ed20:	f003 0203 	and.w	r2, r3, #3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ed28:	4b0f      	ldr	r3, [pc, #60]	; (800ed68 <HAL_RCC_GetClockConfig+0x5c>)
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ed34:	4b0c      	ldr	r3, [pc, #48]	; (800ed68 <HAL_RCC_GetClockConfig+0x5c>)
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ed40:	4b09      	ldr	r3, [pc, #36]	; (800ed68 <HAL_RCC_GetClockConfig+0x5c>)
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	08db      	lsrs	r3, r3, #3
 800ed46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ed4e:	4b07      	ldr	r3, [pc, #28]	; (800ed6c <HAL_RCC_GetClockConfig+0x60>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f003 0207 	and.w	r2, r3, #7
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	601a      	str	r2, [r3, #0]
}
 800ed5a:	bf00      	nop
 800ed5c:	370c      	adds	r7, #12
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	40023800 	.word	0x40023800
 800ed6c:	40023c00 	.word	0x40023c00

0800ed70 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d101      	bne.n	800ed82 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e01c      	b.n	800edbc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	795b      	ldrb	r3, [r3, #5]
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d105      	bne.n	800ed98 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f7f4 fd4c 	bl	8003830 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2202      	movs	r2, #2
 800ed9c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f042 0204 	orr.w	r2, r2, #4
 800edac:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2201      	movs	r2, #1
 800edb2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800edba:	2300      	movs	r3, #0
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3708      	adds	r7, #8
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d101      	bne.n	800edd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800edd2:	2301      	movs	r3, #1
 800edd4:	e07b      	b.n	800eece <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d108      	bne.n	800edf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ede6:	d009      	beq.n	800edfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	61da      	str	r2, [r3, #28]
 800edee:	e005      	b.n	800edfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2200      	movs	r2, #0
 800ee00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d106      	bne.n	800ee1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2200      	movs	r2, #0
 800ee12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7f4 fd62 	bl	80038e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2202      	movs	r2, #2
 800ee20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	689b      	ldr	r3, [r3, #8]
 800ee40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ee44:	431a      	orrs	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee4e:	431a      	orrs	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	691b      	ldr	r3, [r3, #16]
 800ee54:	f003 0302 	and.w	r3, r3, #2
 800ee58:	431a      	orrs	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	f003 0301 	and.w	r3, r3, #1
 800ee62:	431a      	orrs	r2, r3
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee6c:	431a      	orrs	r2, r3
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	69db      	ldr	r3, [r3, #28]
 800ee72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee76:	431a      	orrs	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6a1b      	ldr	r3, [r3, #32]
 800ee7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee80:	ea42 0103 	orr.w	r1, r2, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	430a      	orrs	r2, r1
 800ee92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	0c1b      	lsrs	r3, r3, #16
 800ee9a:	f003 0104 	and.w	r1, r3, #4
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea2:	f003 0210 	and.w	r2, r3, #16
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	430a      	orrs	r2, r1
 800eeac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	69da      	ldr	r2, [r3, #28]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eebc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2201      	movs	r2, #1
 800eec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b088      	sub	sp, #32
 800eeda:	af02      	add	r7, sp, #8
 800eedc:	60f8      	str	r0, [r7, #12]
 800eede:	60b9      	str	r1, [r7, #8]
 800eee0:	603b      	str	r3, [r7, #0]
 800eee2:	4613      	mov	r3, r2
 800eee4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eee6:	2300      	movs	r3, #0
 800eee8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eef2:	d112      	bne.n	800ef1a <HAL_SPI_Receive+0x44>
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10e      	bne.n	800ef1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2204      	movs	r2, #4
 800ef00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ef04:	88fa      	ldrh	r2, [r7, #6]
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	68ba      	ldr	r2, [r7, #8]
 800ef0e:	68b9      	ldr	r1, [r7, #8]
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f000 f8f1 	bl	800f0f8 <HAL_SPI_TransmitReceive>
 800ef16:	4603      	mov	r3, r0
 800ef18:	e0ea      	b.n	800f0f0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d101      	bne.n	800ef28 <HAL_SPI_Receive+0x52>
 800ef24:	2302      	movs	r3, #2
 800ef26:	e0e3      	b.n	800f0f0 <HAL_SPI_Receive+0x21a>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef30:	f7fa fab4 	bl	800949c <HAL_GetTick>
 800ef34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d002      	beq.n	800ef48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ef42:	2302      	movs	r3, #2
 800ef44:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ef46:	e0ca      	b.n	800f0de <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d002      	beq.n	800ef54 <HAL_SPI_Receive+0x7e>
 800ef4e:	88fb      	ldrh	r3, [r7, #6]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d102      	bne.n	800ef5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ef54:	2301      	movs	r3, #1
 800ef56:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ef58:	e0c1      	b.n	800f0de <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2204      	movs	r2, #4
 800ef5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2200      	movs	r2, #0
 800ef66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	88fa      	ldrh	r2, [r7, #6]
 800ef72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	88fa      	ldrh	r2, [r7, #6]
 800ef78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2200      	movs	r2, #0
 800ef84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2200      	movs	r2, #0
 800ef96:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efa0:	d10f      	bne.n	800efc2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800efc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efcc:	2b40      	cmp	r3, #64	; 0x40
 800efce:	d007      	beq.n	800efe0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800efde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	68db      	ldr	r3, [r3, #12]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d162      	bne.n	800f0ae <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800efe8:	e02e      	b.n	800f048 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	f003 0301 	and.w	r3, r3, #1
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d115      	bne.n	800f024 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f103 020c 	add.w	r2, r3, #12
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f004:	7812      	ldrb	r2, [r2, #0]
 800f006:	b2d2      	uxtb	r2, r2
 800f008:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f018:	b29b      	uxth	r3, r3
 800f01a:	3b01      	subs	r3, #1
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f022:	e011      	b.n	800f048 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f024:	f7fa fa3a 	bl	800949c <HAL_GetTick>
 800f028:	4602      	mov	r2, r0
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	429a      	cmp	r2, r3
 800f032:	d803      	bhi.n	800f03c <HAL_SPI_Receive+0x166>
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f03a:	d102      	bne.n	800f042 <HAL_SPI_Receive+0x16c>
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d102      	bne.n	800f048 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800f042:	2303      	movs	r3, #3
 800f044:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f046:	e04a      	b.n	800f0de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1cb      	bne.n	800efea <HAL_SPI_Receive+0x114>
 800f052:	e031      	b.n	800f0b8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d113      	bne.n	800f08a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	68da      	ldr	r2, [r3, #12]
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f06c:	b292      	uxth	r2, r2
 800f06e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f074:	1c9a      	adds	r2, r3, #2
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f07e:	b29b      	uxth	r3, r3
 800f080:	3b01      	subs	r3, #1
 800f082:	b29a      	uxth	r2, r3
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f088:	e011      	b.n	800f0ae <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f08a:	f7fa fa07 	bl	800949c <HAL_GetTick>
 800f08e:	4602      	mov	r2, r0
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	683a      	ldr	r2, [r7, #0]
 800f096:	429a      	cmp	r2, r3
 800f098:	d803      	bhi.n	800f0a2 <HAL_SPI_Receive+0x1cc>
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a0:	d102      	bne.n	800f0a8 <HAL_SPI_Receive+0x1d2>
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d102      	bne.n	800f0ae <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800f0a8:	2303      	movs	r3, #3
 800f0aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f0ac:	e017      	b.n	800f0de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1cd      	bne.n	800f054 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f0b8:	693a      	ldr	r2, [r7, #16]
 800f0ba:	6839      	ldr	r1, [r7, #0]
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f000 fa45 	bl	800f54c <SPI_EndRxTransaction>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d002      	beq.n	800f0ce <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2220      	movs	r2, #32
 800f0cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d002      	beq.n	800f0dc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	75fb      	strb	r3, [r7, #23]
 800f0da:	e000      	b.n	800f0de <HAL_SPI_Receive+0x208>
  }

error :
 800f0dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3718      	adds	r7, #24
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b08c      	sub	sp, #48	; 0x30
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
 800f104:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f106:	2301      	movs	r3, #1
 800f108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f116:	2b01      	cmp	r3, #1
 800f118:	d101      	bne.n	800f11e <HAL_SPI_TransmitReceive+0x26>
 800f11a:	2302      	movs	r3, #2
 800f11c:	e18a      	b.n	800f434 <HAL_SPI_TransmitReceive+0x33c>
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2201      	movs	r2, #1
 800f122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f126:	f7fa f9b9 	bl	800949c <HAL_GetTick>
 800f12a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f13c:	887b      	ldrh	r3, [r7, #2]
 800f13e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f144:	2b01      	cmp	r3, #1
 800f146:	d00f      	beq.n	800f168 <HAL_SPI_TransmitReceive+0x70>
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f14e:	d107      	bne.n	800f160 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d103      	bne.n	800f160 <HAL_SPI_TransmitReceive+0x68>
 800f158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f15c:	2b04      	cmp	r3, #4
 800f15e:	d003      	beq.n	800f168 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f160:	2302      	movs	r3, #2
 800f162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f166:	e15b      	b.n	800f420 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d005      	beq.n	800f17a <HAL_SPI_TransmitReceive+0x82>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d002      	beq.n	800f17a <HAL_SPI_TransmitReceive+0x82>
 800f174:	887b      	ldrh	r3, [r7, #2]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d103      	bne.n	800f182 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f17a:	2301      	movs	r3, #1
 800f17c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f180:	e14e      	b.n	800f420 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b04      	cmp	r3, #4
 800f18c:	d003      	beq.n	800f196 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2205      	movs	r2, #5
 800f192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2200      	movs	r2, #0
 800f19a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	887a      	ldrh	r2, [r7, #2]
 800f1a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	887a      	ldrh	r2, [r7, #2]
 800f1ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	68ba      	ldr	r2, [r7, #8]
 800f1b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	887a      	ldrh	r2, [r7, #2]
 800f1b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	887a      	ldrh	r2, [r7, #2]
 800f1be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1d6:	2b40      	cmp	r3, #64	; 0x40
 800f1d8:	d007      	beq.n	800f1ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f1f2:	d178      	bne.n	800f2e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d002      	beq.n	800f202 <HAL_SPI_TransmitReceive+0x10a>
 800f1fc:	8b7b      	ldrh	r3, [r7, #26]
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d166      	bne.n	800f2d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f206:	881a      	ldrh	r2, [r3, #0]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f212:	1c9a      	adds	r2, r3, #2
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	3b01      	subs	r3, #1
 800f220:	b29a      	uxth	r2, r3
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f226:	e053      	b.n	800f2d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	f003 0302 	and.w	r3, r3, #2
 800f232:	2b02      	cmp	r3, #2
 800f234:	d11b      	bne.n	800f26e <HAL_SPI_TransmitReceive+0x176>
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d016      	beq.n	800f26e <HAL_SPI_TransmitReceive+0x176>
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	2b01      	cmp	r3, #1
 800f244:	d113      	bne.n	800f26e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f24a:	881a      	ldrh	r2, [r3, #0]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f256:	1c9a      	adds	r2, r3, #2
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f260:	b29b      	uxth	r3, r3
 800f262:	3b01      	subs	r3, #1
 800f264:	b29a      	uxth	r2, r3
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f26a:	2300      	movs	r3, #0
 800f26c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	f003 0301 	and.w	r3, r3, #1
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d119      	bne.n	800f2b0 <HAL_SPI_TransmitReceive+0x1b8>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f280:	b29b      	uxth	r3, r3
 800f282:	2b00      	cmp	r3, #0
 800f284:	d014      	beq.n	800f2b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	68da      	ldr	r2, [r3, #12]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f290:	b292      	uxth	r2, r2
 800f292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f298:	1c9a      	adds	r2, r3, #2
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f2b0:	f7fa f8f4 	bl	800949c <HAL_GetTick>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b8:	1ad3      	subs	r3, r2, r3
 800f2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d807      	bhi.n	800f2d0 <HAL_SPI_TransmitReceive+0x1d8>
 800f2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2c6:	d003      	beq.n	800f2d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f2c8:	2303      	movs	r3, #3
 800f2ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f2ce:	e0a7      	b.n	800f420 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d1a6      	bne.n	800f228 <HAL_SPI_TransmitReceive+0x130>
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d1a1      	bne.n	800f228 <HAL_SPI_TransmitReceive+0x130>
 800f2e4:	e07c      	b.n	800f3e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d002      	beq.n	800f2f4 <HAL_SPI_TransmitReceive+0x1fc>
 800f2ee:	8b7b      	ldrh	r3, [r7, #26]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d16b      	bne.n	800f3cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	330c      	adds	r3, #12
 800f2fe:	7812      	ldrb	r2, [r2, #0]
 800f300:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f306:	1c5a      	adds	r2, r3, #1
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f310:	b29b      	uxth	r3, r3
 800f312:	3b01      	subs	r3, #1
 800f314:	b29a      	uxth	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f31a:	e057      	b.n	800f3cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	f003 0302 	and.w	r3, r3, #2
 800f326:	2b02      	cmp	r3, #2
 800f328:	d11c      	bne.n	800f364 <HAL_SPI_TransmitReceive+0x26c>
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f32e:	b29b      	uxth	r3, r3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d017      	beq.n	800f364 <HAL_SPI_TransmitReceive+0x26c>
 800f334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f336:	2b01      	cmp	r3, #1
 800f338:	d114      	bne.n	800f364 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	330c      	adds	r3, #12
 800f344:	7812      	ldrb	r2, [r2, #0]
 800f346:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f34c:	1c5a      	adds	r2, r3, #1
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f356:	b29b      	uxth	r3, r3
 800f358:	3b01      	subs	r3, #1
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f360:	2300      	movs	r3, #0
 800f362:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	f003 0301 	and.w	r3, r3, #1
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d119      	bne.n	800f3a6 <HAL_SPI_TransmitReceive+0x2ae>
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f376:	b29b      	uxth	r3, r3
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d014      	beq.n	800f3a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	68da      	ldr	r2, [r3, #12]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f386:	b2d2      	uxtb	r2, r2
 800f388:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f38e:	1c5a      	adds	r2, r3, #1
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f398:	b29b      	uxth	r3, r3
 800f39a:	3b01      	subs	r3, #1
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f3a6:	f7fa f879 	bl	800949c <HAL_GetTick>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d803      	bhi.n	800f3be <HAL_SPI_TransmitReceive+0x2c6>
 800f3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3bc:	d102      	bne.n	800f3c4 <HAL_SPI_TransmitReceive+0x2cc>
 800f3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d103      	bne.n	800f3cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f3c4:	2303      	movs	r3, #3
 800f3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f3ca:	e029      	b.n	800f420 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1a2      	bne.n	800f31c <HAL_SPI_TransmitReceive+0x224>
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d19d      	bne.n	800f31c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 f917 	bl	800f618 <SPI_EndRxTxTransaction>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d006      	beq.n	800f3fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2220      	movs	r2, #32
 800f3fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f3fc:	e010      	b.n	800f420 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	689b      	ldr	r3, [r3, #8]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d10b      	bne.n	800f41e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f406:	2300      	movs	r3, #0
 800f408:	617b      	str	r3, [r7, #20]
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	617b      	str	r3, [r7, #20]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	617b      	str	r3, [r7, #20]
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	e000      	b.n	800f420 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f41e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2201      	movs	r2, #1
 800f424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f434:	4618      	mov	r0, r3
 800f436:	3730      	adds	r7, #48	; 0x30
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b088      	sub	sp, #32
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	603b      	str	r3, [r7, #0]
 800f448:	4613      	mov	r3, r2
 800f44a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f44c:	f7fa f826 	bl	800949c <HAL_GetTick>
 800f450:	4602      	mov	r2, r0
 800f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f454:	1a9b      	subs	r3, r3, r2
 800f456:	683a      	ldr	r2, [r7, #0]
 800f458:	4413      	add	r3, r2
 800f45a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f45c:	f7fa f81e 	bl	800949c <HAL_GetTick>
 800f460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f462:	4b39      	ldr	r3, [pc, #228]	; (800f548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	015b      	lsls	r3, r3, #5
 800f468:	0d1b      	lsrs	r3, r3, #20
 800f46a:	69fa      	ldr	r2, [r7, #28]
 800f46c:	fb02 f303 	mul.w	r3, r2, r3
 800f470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f472:	e054      	b.n	800f51e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f47a:	d050      	beq.n	800f51e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f47c:	f7fa f80e 	bl	800949c <HAL_GetTick>
 800f480:	4602      	mov	r2, r0
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	69fa      	ldr	r2, [r7, #28]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d902      	bls.n	800f492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d13d      	bne.n	800f50e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	685a      	ldr	r2, [r3, #4]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f4a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f4aa:	d111      	bne.n	800f4d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4b4:	d004      	beq.n	800f4c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4be:	d107      	bne.n	800f4d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f4ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4d8:	d10f      	bne.n	800f4fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f4e8:	601a      	str	r2, [r3, #0]
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f4f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2200      	movs	r2, #0
 800f506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f50a:	2303      	movs	r3, #3
 800f50c:	e017      	b.n	800f53e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d101      	bne.n	800f518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f514:	2300      	movs	r3, #0
 800f516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	689a      	ldr	r2, [r3, #8]
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	4013      	ands	r3, r2
 800f528:	68ba      	ldr	r2, [r7, #8]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	bf0c      	ite	eq
 800f52e:	2301      	moveq	r3, #1
 800f530:	2300      	movne	r3, #0
 800f532:	b2db      	uxtb	r3, r3
 800f534:	461a      	mov	r2, r3
 800f536:	79fb      	ldrb	r3, [r7, #7]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d19b      	bne.n	800f474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f53c:	2300      	movs	r3, #0
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3720      	adds	r7, #32
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20000004 	.word	0x20000004

0800f54c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b086      	sub	sp, #24
 800f550:	af02      	add	r7, sp, #8
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f560:	d111      	bne.n	800f586 <SPI_EndRxTransaction+0x3a>
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f56a:	d004      	beq.n	800f576 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f574:	d107      	bne.n	800f586 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f584:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f58e:	d12a      	bne.n	800f5e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f598:	d012      	beq.n	800f5c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	2180      	movs	r1, #128	; 0x80
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f7ff ff49 	bl	800f43c <SPI_WaitFlagStateUntilTimeout>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d02d      	beq.n	800f60c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5b4:	f043 0220 	orr.w	r2, r3, #32
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f5bc:	2303      	movs	r3, #3
 800f5be:	e026      	b.n	800f60e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	2101      	movs	r1, #1
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f7ff ff36 	bl	800f43c <SPI_WaitFlagStateUntilTimeout>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d01a      	beq.n	800f60c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5da:	f043 0220 	orr.w	r2, r3, #32
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f5e2:	2303      	movs	r3, #3
 800f5e4:	e013      	b.n	800f60e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	2101      	movs	r1, #1
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f7ff ff23 	bl	800f43c <SPI_WaitFlagStateUntilTimeout>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d007      	beq.n	800f60c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f600:	f043 0220 	orr.w	r2, r3, #32
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f608:	2303      	movs	r3, #3
 800f60a:	e000      	b.n	800f60e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f60c:	2300      	movs	r3, #0
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
	...

0800f618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b088      	sub	sp, #32
 800f61c:	af02      	add	r7, sp, #8
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f624:	4b1b      	ldr	r3, [pc, #108]	; (800f694 <SPI_EndRxTxTransaction+0x7c>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a1b      	ldr	r2, [pc, #108]	; (800f698 <SPI_EndRxTxTransaction+0x80>)
 800f62a:	fba2 2303 	umull	r2, r3, r2, r3
 800f62e:	0d5b      	lsrs	r3, r3, #21
 800f630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f634:	fb02 f303 	mul.w	r3, r2, r3
 800f638:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f642:	d112      	bne.n	800f66a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	2200      	movs	r2, #0
 800f64c:	2180      	movs	r1, #128	; 0x80
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f7ff fef4 	bl	800f43c <SPI_WaitFlagStateUntilTimeout>
 800f654:	4603      	mov	r3, r0
 800f656:	2b00      	cmp	r3, #0
 800f658:	d016      	beq.n	800f688 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f65e:	f043 0220 	orr.w	r2, r3, #32
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f666:	2303      	movs	r3, #3
 800f668:	e00f      	b.n	800f68a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d00a      	beq.n	800f686 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	3b01      	subs	r3, #1
 800f674:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	689b      	ldr	r3, [r3, #8]
 800f67c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f680:	2b80      	cmp	r3, #128	; 0x80
 800f682:	d0f2      	beq.n	800f66a <SPI_EndRxTxTransaction+0x52>
 800f684:	e000      	b.n	800f688 <SPI_EndRxTxTransaction+0x70>
        break;
 800f686:	bf00      	nop
  }

  return HAL_OK;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3718      	adds	r7, #24
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	20000004 	.word	0x20000004
 800f698:	165e9f81 	.word	0x165e9f81

0800f69c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d101      	bne.n	800f6ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	e041      	b.n	800f732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d106      	bne.n	800f6c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f7f4 fdea 	bl	800429c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2202      	movs	r2, #2
 800f6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	3304      	adds	r3, #4
 800f6d8:	4619      	mov	r1, r3
 800f6da:	4610      	mov	r0, r2
 800f6dc:	f000 fd8c 	bl	80101f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2201      	movs	r2, #1
 800f704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2201      	movs	r2, #1
 800f70c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2201      	movs	r2, #1
 800f71c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2201      	movs	r2, #1
 800f724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2201      	movs	r2, #1
 800f72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
	...

0800f73c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d001      	beq.n	800f754 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f750:	2301      	movs	r3, #1
 800f752:	e046      	b.n	800f7e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2202      	movs	r2, #2
 800f758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a23      	ldr	r2, [pc, #140]	; (800f7f0 <HAL_TIM_Base_Start+0xb4>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d022      	beq.n	800f7ac <HAL_TIM_Base_Start+0x70>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f76e:	d01d      	beq.n	800f7ac <HAL_TIM_Base_Start+0x70>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a1f      	ldr	r2, [pc, #124]	; (800f7f4 <HAL_TIM_Base_Start+0xb8>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d018      	beq.n	800f7ac <HAL_TIM_Base_Start+0x70>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4a1e      	ldr	r2, [pc, #120]	; (800f7f8 <HAL_TIM_Base_Start+0xbc>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d013      	beq.n	800f7ac <HAL_TIM_Base_Start+0x70>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4a1c      	ldr	r2, [pc, #112]	; (800f7fc <HAL_TIM_Base_Start+0xc0>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d00e      	beq.n	800f7ac <HAL_TIM_Base_Start+0x70>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	4a1b      	ldr	r2, [pc, #108]	; (800f800 <HAL_TIM_Base_Start+0xc4>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d009      	beq.n	800f7ac <HAL_TIM_Base_Start+0x70>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a19      	ldr	r2, [pc, #100]	; (800f804 <HAL_TIM_Base_Start+0xc8>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d004      	beq.n	800f7ac <HAL_TIM_Base_Start+0x70>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a18      	ldr	r2, [pc, #96]	; (800f808 <HAL_TIM_Base_Start+0xcc>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d111      	bne.n	800f7d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	689b      	ldr	r3, [r3, #8]
 800f7b2:	f003 0307 	and.w	r3, r3, #7
 800f7b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	2b06      	cmp	r3, #6
 800f7bc:	d010      	beq.n	800f7e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f042 0201 	orr.w	r2, r2, #1
 800f7cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7ce:	e007      	b.n	800f7e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f042 0201 	orr.w	r2, r2, #1
 800f7de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop
 800f7f0:	40010000 	.word	0x40010000
 800f7f4:	40000400 	.word	0x40000400
 800f7f8:	40000800 	.word	0x40000800
 800f7fc:	40000c00 	.word	0x40000c00
 800f800:	40010400 	.word	0x40010400
 800f804:	40014000 	.word	0x40014000
 800f808:	40001800 	.word	0x40001800

0800f80c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d001      	beq.n	800f824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f820:	2301      	movs	r3, #1
 800f822:	e04e      	b.n	800f8c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2202      	movs	r2, #2
 800f828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	68da      	ldr	r2, [r3, #12]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f042 0201 	orr.w	r2, r2, #1
 800f83a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a23      	ldr	r2, [pc, #140]	; (800f8d0 <HAL_TIM_Base_Start_IT+0xc4>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d022      	beq.n	800f88c <HAL_TIM_Base_Start_IT+0x80>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f84e:	d01d      	beq.n	800f88c <HAL_TIM_Base_Start_IT+0x80>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a1f      	ldr	r2, [pc, #124]	; (800f8d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d018      	beq.n	800f88c <HAL_TIM_Base_Start_IT+0x80>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	4a1e      	ldr	r2, [pc, #120]	; (800f8d8 <HAL_TIM_Base_Start_IT+0xcc>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d013      	beq.n	800f88c <HAL_TIM_Base_Start_IT+0x80>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	4a1c      	ldr	r2, [pc, #112]	; (800f8dc <HAL_TIM_Base_Start_IT+0xd0>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d00e      	beq.n	800f88c <HAL_TIM_Base_Start_IT+0x80>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	4a1b      	ldr	r2, [pc, #108]	; (800f8e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d009      	beq.n	800f88c <HAL_TIM_Base_Start_IT+0x80>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a19      	ldr	r2, [pc, #100]	; (800f8e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d004      	beq.n	800f88c <HAL_TIM_Base_Start_IT+0x80>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4a18      	ldr	r2, [pc, #96]	; (800f8e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d111      	bne.n	800f8b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	f003 0307 	and.w	r3, r3, #7
 800f896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2b06      	cmp	r3, #6
 800f89c:	d010      	beq.n	800f8c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f042 0201 	orr.w	r2, r2, #1
 800f8ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8ae:	e007      	b.n	800f8c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f042 0201 	orr.w	r2, r2, #1
 800f8be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f8c0:	2300      	movs	r3, #0
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3714      	adds	r7, #20
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop
 800f8d0:	40010000 	.word	0x40010000
 800f8d4:	40000400 	.word	0x40000400
 800f8d8:	40000800 	.word	0x40000800
 800f8dc:	40000c00 	.word	0x40000c00
 800f8e0:	40010400 	.word	0x40010400
 800f8e4:	40014000 	.word	0x40014000
 800f8e8:	40001800 	.word	0x40001800

0800f8ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e041      	b.n	800f982 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f904:	b2db      	uxtb	r3, r3
 800f906:	2b00      	cmp	r3, #0
 800f908:	d106      	bne.n	800f918 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 f839 	bl	800f98a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2202      	movs	r2, #2
 800f91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	3304      	adds	r3, #4
 800f928:	4619      	mov	r1, r3
 800f92a:	4610      	mov	r0, r2
 800f92c:	f000 fc64 	bl	80101f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2201      	movs	r2, #1
 800f934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2201      	movs	r2, #1
 800f93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2201      	movs	r2, #1
 800f944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2201      	movs	r2, #1
 800f94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2201      	movs	r2, #1
 800f954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2201      	movs	r2, #1
 800f95c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2201      	movs	r2, #1
 800f964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2201      	movs	r2, #1
 800f96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	3708      	adds	r7, #8
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}

0800f98a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800f98a:	b480      	push	{r7}
 800f98c:	b083      	sub	sp, #12
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800f992:	bf00      	nop
 800f994:	370c      	adds	r7, #12
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr

0800f99e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b082      	sub	sp, #8
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d101      	bne.n	800f9b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e041      	b.n	800fa34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d106      	bne.n	800f9ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7f4 fc1b 	bl	8004200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2202      	movs	r2, #2
 800f9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	3304      	adds	r3, #4
 800f9da:	4619      	mov	r1, r3
 800f9dc:	4610      	mov	r0, r2
 800f9de:	f000 fc0b 	bl	80101f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2201      	movs	r2, #1
 800fa06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2201      	movs	r2, #1
 800fa16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2201      	movs	r2, #1
 800fa26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3708      	adds	r7, #8
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d109      	bne.n	800fa60 <HAL_TIM_PWM_Start+0x24>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	bf14      	ite	ne
 800fa58:	2301      	movne	r3, #1
 800fa5a:	2300      	moveq	r3, #0
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	e022      	b.n	800faa6 <HAL_TIM_PWM_Start+0x6a>
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	2b04      	cmp	r3, #4
 800fa64:	d109      	bne.n	800fa7a <HAL_TIM_PWM_Start+0x3e>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	bf14      	ite	ne
 800fa72:	2301      	movne	r3, #1
 800fa74:	2300      	moveq	r3, #0
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	e015      	b.n	800faa6 <HAL_TIM_PWM_Start+0x6a>
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	2b08      	cmp	r3, #8
 800fa7e:	d109      	bne.n	800fa94 <HAL_TIM_PWM_Start+0x58>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	bf14      	ite	ne
 800fa8c:	2301      	movne	r3, #1
 800fa8e:	2300      	moveq	r3, #0
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	e008      	b.n	800faa6 <HAL_TIM_PWM_Start+0x6a>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	bf14      	ite	ne
 800faa0:	2301      	movne	r3, #1
 800faa2:	2300      	moveq	r3, #0
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800faaa:	2301      	movs	r3, #1
 800faac:	e07c      	b.n	800fba8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d104      	bne.n	800fabe <HAL_TIM_PWM_Start+0x82>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2202      	movs	r2, #2
 800fab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fabc:	e013      	b.n	800fae6 <HAL_TIM_PWM_Start+0xaa>
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	2b04      	cmp	r3, #4
 800fac2:	d104      	bne.n	800face <HAL_TIM_PWM_Start+0x92>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2202      	movs	r2, #2
 800fac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800facc:	e00b      	b.n	800fae6 <HAL_TIM_PWM_Start+0xaa>
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	2b08      	cmp	r3, #8
 800fad2:	d104      	bne.n	800fade <HAL_TIM_PWM_Start+0xa2>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2202      	movs	r2, #2
 800fad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fadc:	e003      	b.n	800fae6 <HAL_TIM_PWM_Start+0xaa>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2202      	movs	r2, #2
 800fae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2201      	movs	r2, #1
 800faec:	6839      	ldr	r1, [r7, #0]
 800faee:	4618      	mov	r0, r3
 800faf0:	f000 fe6c 	bl	80107cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a2d      	ldr	r2, [pc, #180]	; (800fbb0 <HAL_TIM_PWM_Start+0x174>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d004      	beq.n	800fb08 <HAL_TIM_PWM_Start+0xcc>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4a2c      	ldr	r2, [pc, #176]	; (800fbb4 <HAL_TIM_PWM_Start+0x178>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d101      	bne.n	800fb0c <HAL_TIM_PWM_Start+0xd0>
 800fb08:	2301      	movs	r3, #1
 800fb0a:	e000      	b.n	800fb0e <HAL_TIM_PWM_Start+0xd2>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d007      	beq.n	800fb22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a22      	ldr	r2, [pc, #136]	; (800fbb0 <HAL_TIM_PWM_Start+0x174>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d022      	beq.n	800fb72 <HAL_TIM_PWM_Start+0x136>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb34:	d01d      	beq.n	800fb72 <HAL_TIM_PWM_Start+0x136>
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a1f      	ldr	r2, [pc, #124]	; (800fbb8 <HAL_TIM_PWM_Start+0x17c>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d018      	beq.n	800fb72 <HAL_TIM_PWM_Start+0x136>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4a1d      	ldr	r2, [pc, #116]	; (800fbbc <HAL_TIM_PWM_Start+0x180>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d013      	beq.n	800fb72 <HAL_TIM_PWM_Start+0x136>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a1c      	ldr	r2, [pc, #112]	; (800fbc0 <HAL_TIM_PWM_Start+0x184>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d00e      	beq.n	800fb72 <HAL_TIM_PWM_Start+0x136>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a16      	ldr	r2, [pc, #88]	; (800fbb4 <HAL_TIM_PWM_Start+0x178>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d009      	beq.n	800fb72 <HAL_TIM_PWM_Start+0x136>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4a18      	ldr	r2, [pc, #96]	; (800fbc4 <HAL_TIM_PWM_Start+0x188>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d004      	beq.n	800fb72 <HAL_TIM_PWM_Start+0x136>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4a16      	ldr	r2, [pc, #88]	; (800fbc8 <HAL_TIM_PWM_Start+0x18c>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d111      	bne.n	800fb96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	f003 0307 	and.w	r3, r3, #7
 800fb7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2b06      	cmp	r3, #6
 800fb82:	d010      	beq.n	800fba6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f042 0201 	orr.w	r2, r2, #1
 800fb92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb94:	e007      	b.n	800fba6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	f042 0201 	orr.w	r2, r2, #1
 800fba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fba6:	2300      	movs	r3, #0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	40010000 	.word	0x40010000
 800fbb4:	40010400 	.word	0x40010400
 800fbb8:	40000400 	.word	0x40000400
 800fbbc:	40000800 	.word	0x40000800
 800fbc0:	40000c00 	.word	0x40000c00
 800fbc4:	40014000 	.word	0x40014000
 800fbc8:	40001800 	.word	0x40001800

0800fbcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	691b      	ldr	r3, [r3, #16]
 800fbda:	f003 0302 	and.w	r3, r3, #2
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	d122      	bne.n	800fc28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	f003 0302 	and.w	r3, r3, #2
 800fbec:	2b02      	cmp	r3, #2
 800fbee:	d11b      	bne.n	800fc28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f06f 0202 	mvn.w	r2, #2
 800fbf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	699b      	ldr	r3, [r3, #24]
 800fc06:	f003 0303 	and.w	r3, r3, #3
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d003      	beq.n	800fc16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 fad3 	bl	80101ba <HAL_TIM_IC_CaptureCallback>
 800fc14:	e005      	b.n	800fc22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f000 fac5 	bl	80101a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f000 fad6 	bl	80101ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2200      	movs	r2, #0
 800fc26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	f003 0304 	and.w	r3, r3, #4
 800fc32:	2b04      	cmp	r3, #4
 800fc34:	d122      	bne.n	800fc7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	f003 0304 	and.w	r3, r3, #4
 800fc40:	2b04      	cmp	r3, #4
 800fc42:	d11b      	bne.n	800fc7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f06f 0204 	mvn.w	r2, #4
 800fc4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2202      	movs	r2, #2
 800fc52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	699b      	ldr	r3, [r3, #24]
 800fc5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d003      	beq.n	800fc6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 faa9 	bl	80101ba <HAL_TIM_IC_CaptureCallback>
 800fc68:	e005      	b.n	800fc76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fa9b 	bl	80101a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 faac 	bl	80101ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	f003 0308 	and.w	r3, r3, #8
 800fc86:	2b08      	cmp	r3, #8
 800fc88:	d122      	bne.n	800fcd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	f003 0308 	and.w	r3, r3, #8
 800fc94:	2b08      	cmp	r3, #8
 800fc96:	d11b      	bne.n	800fcd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f06f 0208 	mvn.w	r2, #8
 800fca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2204      	movs	r2, #4
 800fca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	69db      	ldr	r3, [r3, #28]
 800fcae:	f003 0303 	and.w	r3, r3, #3
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d003      	beq.n	800fcbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 fa7f 	bl	80101ba <HAL_TIM_IC_CaptureCallback>
 800fcbc:	e005      	b.n	800fcca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 fa71 	bl	80101a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 fa82 	bl	80101ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2200      	movs	r2, #0
 800fcce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	f003 0310 	and.w	r3, r3, #16
 800fcda:	2b10      	cmp	r3, #16
 800fcdc:	d122      	bne.n	800fd24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	f003 0310 	and.w	r3, r3, #16
 800fce8:	2b10      	cmp	r3, #16
 800fcea:	d11b      	bne.n	800fd24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f06f 0210 	mvn.w	r2, #16
 800fcf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2208      	movs	r2, #8
 800fcfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	69db      	ldr	r3, [r3, #28]
 800fd02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 fa55 	bl	80101ba <HAL_TIM_IC_CaptureCallback>
 800fd10:	e005      	b.n	800fd1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 fa47 	bl	80101a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fa58 	bl	80101ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	691b      	ldr	r3, [r3, #16]
 800fd2a:	f003 0301 	and.w	r3, r3, #1
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d10e      	bne.n	800fd50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	f003 0301 	and.w	r3, r3, #1
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d107      	bne.n	800fd50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f06f 0201 	mvn.w	r2, #1
 800fd48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f7f3 fd48 	bl	80037e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	691b      	ldr	r3, [r3, #16]
 800fd56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd5a:	2b80      	cmp	r3, #128	; 0x80
 800fd5c:	d10e      	bne.n	800fd7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd68:	2b80      	cmp	r3, #128	; 0x80
 800fd6a:	d107      	bne.n	800fd7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fd74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fe26 	bl	80109c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd86:	2b40      	cmp	r3, #64	; 0x40
 800fd88:	d10e      	bne.n	800fda8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd94:	2b40      	cmp	r3, #64	; 0x40
 800fd96:	d107      	bne.n	800fda8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fda0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f000 fa1d 	bl	80101e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	f003 0320 	and.w	r3, r3, #32
 800fdb2:	2b20      	cmp	r3, #32
 800fdb4:	d10e      	bne.n	800fdd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	f003 0320 	and.w	r3, r3, #32
 800fdc0:	2b20      	cmp	r3, #32
 800fdc2:	d107      	bne.n	800fdd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f06f 0220 	mvn.w	r2, #32
 800fdcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f000 fdf0 	bl	80109b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fdd4:	bf00      	nop
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b086      	sub	sp, #24
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fde8:	2300      	movs	r3, #0
 800fdea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d101      	bne.n	800fdfa <HAL_TIM_OC_ConfigChannel+0x1e>
 800fdf6:	2302      	movs	r3, #2
 800fdf8:	e048      	b.n	800fe8c <HAL_TIM_OC_ConfigChannel+0xb0>
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2b0c      	cmp	r3, #12
 800fe06:	d839      	bhi.n	800fe7c <HAL_TIM_OC_ConfigChannel+0xa0>
 800fe08:	a201      	add	r2, pc, #4	; (adr r2, 800fe10 <HAL_TIM_OC_ConfigChannel+0x34>)
 800fe0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0e:	bf00      	nop
 800fe10:	0800fe45 	.word	0x0800fe45
 800fe14:	0800fe7d 	.word	0x0800fe7d
 800fe18:	0800fe7d 	.word	0x0800fe7d
 800fe1c:	0800fe7d 	.word	0x0800fe7d
 800fe20:	0800fe53 	.word	0x0800fe53
 800fe24:	0800fe7d 	.word	0x0800fe7d
 800fe28:	0800fe7d 	.word	0x0800fe7d
 800fe2c:	0800fe7d 	.word	0x0800fe7d
 800fe30:	0800fe61 	.word	0x0800fe61
 800fe34:	0800fe7d 	.word	0x0800fe7d
 800fe38:	0800fe7d 	.word	0x0800fe7d
 800fe3c:	0800fe7d 	.word	0x0800fe7d
 800fe40:	0800fe6f 	.word	0x0800fe6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	68b9      	ldr	r1, [r7, #8]
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f000 fa74 	bl	8010338 <TIM_OC1_SetConfig>
      break;
 800fe50:	e017      	b.n	800fe82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	68b9      	ldr	r1, [r7, #8]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f000 fadd 	bl	8010418 <TIM_OC2_SetConfig>
      break;
 800fe5e:	e010      	b.n	800fe82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	68b9      	ldr	r1, [r7, #8]
 800fe66:	4618      	mov	r0, r3
 800fe68:	f000 fb4c 	bl	8010504 <TIM_OC3_SetConfig>
      break;
 800fe6c:	e009      	b.n	800fe82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	68b9      	ldr	r1, [r7, #8]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f000 fbb9 	bl	80105ec <TIM_OC4_SetConfig>
      break;
 800fe7a:	e002      	b.n	800fe82 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	75fb      	strb	r3, [r7, #23]
      break;
 800fe80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2200      	movs	r2, #0
 800fe86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fe8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3718      	adds	r7, #24
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b086      	sub	sp, #24
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fea0:	2300      	movs	r3, #0
 800fea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d101      	bne.n	800feb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800feae:	2302      	movs	r3, #2
 800feb0:	e0ae      	b.n	8010010 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2201      	movs	r2, #1
 800feb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b0c      	cmp	r3, #12
 800febe:	f200 809f 	bhi.w	8010000 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fec2:	a201      	add	r2, pc, #4	; (adr r2, 800fec8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec8:	0800fefd 	.word	0x0800fefd
 800fecc:	08010001 	.word	0x08010001
 800fed0:	08010001 	.word	0x08010001
 800fed4:	08010001 	.word	0x08010001
 800fed8:	0800ff3d 	.word	0x0800ff3d
 800fedc:	08010001 	.word	0x08010001
 800fee0:	08010001 	.word	0x08010001
 800fee4:	08010001 	.word	0x08010001
 800fee8:	0800ff7f 	.word	0x0800ff7f
 800feec:	08010001 	.word	0x08010001
 800fef0:	08010001 	.word	0x08010001
 800fef4:	08010001 	.word	0x08010001
 800fef8:	0800ffbf 	.word	0x0800ffbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	68b9      	ldr	r1, [r7, #8]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f000 fa18 	bl	8010338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	699a      	ldr	r2, [r3, #24]
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f042 0208 	orr.w	r2, r2, #8
 800ff16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	699a      	ldr	r2, [r3, #24]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f022 0204 	bic.w	r2, r2, #4
 800ff26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	6999      	ldr	r1, [r3, #24]
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	691a      	ldr	r2, [r3, #16]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	430a      	orrs	r2, r1
 800ff38:	619a      	str	r2, [r3, #24]
      break;
 800ff3a:	e064      	b.n	8010006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	68b9      	ldr	r1, [r7, #8]
 800ff42:	4618      	mov	r0, r3
 800ff44:	f000 fa68 	bl	8010418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	699a      	ldr	r2, [r3, #24]
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	699a      	ldr	r2, [r3, #24]
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	6999      	ldr	r1, [r3, #24]
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	691b      	ldr	r3, [r3, #16]
 800ff72:	021a      	lsls	r2, r3, #8
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	430a      	orrs	r2, r1
 800ff7a:	619a      	str	r2, [r3, #24]
      break;
 800ff7c:	e043      	b.n	8010006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	68b9      	ldr	r1, [r7, #8]
 800ff84:	4618      	mov	r0, r3
 800ff86:	f000 fabd 	bl	8010504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	69da      	ldr	r2, [r3, #28]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f042 0208 	orr.w	r2, r2, #8
 800ff98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	69da      	ldr	r2, [r3, #28]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f022 0204 	bic.w	r2, r2, #4
 800ffa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	69d9      	ldr	r1, [r3, #28]
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	691a      	ldr	r2, [r3, #16]
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	430a      	orrs	r2, r1
 800ffba:	61da      	str	r2, [r3, #28]
      break;
 800ffbc:	e023      	b.n	8010006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	68b9      	ldr	r1, [r7, #8]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f000 fb11 	bl	80105ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	69da      	ldr	r2, [r3, #28]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	69da      	ldr	r2, [r3, #28]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	69d9      	ldr	r1, [r3, #28]
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	691b      	ldr	r3, [r3, #16]
 800fff4:	021a      	lsls	r2, r3, #8
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	430a      	orrs	r2, r1
 800fffc:	61da      	str	r2, [r3, #28]
      break;
 800fffe:	e002      	b.n	8010006 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010000:	2301      	movs	r3, #1
 8010002:	75fb      	strb	r3, [r7, #23]
      break;
 8010004:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2200      	movs	r2, #0
 801000a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801000e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010010:	4618      	mov	r0, r3
 8010012:	3718      	adds	r7, #24
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010022:	2300      	movs	r3, #0
 8010024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801002c:	2b01      	cmp	r3, #1
 801002e:	d101      	bne.n	8010034 <HAL_TIM_ConfigClockSource+0x1c>
 8010030:	2302      	movs	r3, #2
 8010032:	e0b4      	b.n	801019e <HAL_TIM_ConfigClockSource+0x186>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2201      	movs	r2, #1
 8010038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2202      	movs	r2, #2
 8010040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801005a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68ba      	ldr	r2, [r7, #8]
 8010062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801006c:	d03e      	beq.n	80100ec <HAL_TIM_ConfigClockSource+0xd4>
 801006e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010072:	f200 8087 	bhi.w	8010184 <HAL_TIM_ConfigClockSource+0x16c>
 8010076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801007a:	f000 8086 	beq.w	801018a <HAL_TIM_ConfigClockSource+0x172>
 801007e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010082:	d87f      	bhi.n	8010184 <HAL_TIM_ConfigClockSource+0x16c>
 8010084:	2b70      	cmp	r3, #112	; 0x70
 8010086:	d01a      	beq.n	80100be <HAL_TIM_ConfigClockSource+0xa6>
 8010088:	2b70      	cmp	r3, #112	; 0x70
 801008a:	d87b      	bhi.n	8010184 <HAL_TIM_ConfigClockSource+0x16c>
 801008c:	2b60      	cmp	r3, #96	; 0x60
 801008e:	d050      	beq.n	8010132 <HAL_TIM_ConfigClockSource+0x11a>
 8010090:	2b60      	cmp	r3, #96	; 0x60
 8010092:	d877      	bhi.n	8010184 <HAL_TIM_ConfigClockSource+0x16c>
 8010094:	2b50      	cmp	r3, #80	; 0x50
 8010096:	d03c      	beq.n	8010112 <HAL_TIM_ConfigClockSource+0xfa>
 8010098:	2b50      	cmp	r3, #80	; 0x50
 801009a:	d873      	bhi.n	8010184 <HAL_TIM_ConfigClockSource+0x16c>
 801009c:	2b40      	cmp	r3, #64	; 0x40
 801009e:	d058      	beq.n	8010152 <HAL_TIM_ConfigClockSource+0x13a>
 80100a0:	2b40      	cmp	r3, #64	; 0x40
 80100a2:	d86f      	bhi.n	8010184 <HAL_TIM_ConfigClockSource+0x16c>
 80100a4:	2b30      	cmp	r3, #48	; 0x30
 80100a6:	d064      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x15a>
 80100a8:	2b30      	cmp	r3, #48	; 0x30
 80100aa:	d86b      	bhi.n	8010184 <HAL_TIM_ConfigClockSource+0x16c>
 80100ac:	2b20      	cmp	r3, #32
 80100ae:	d060      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x15a>
 80100b0:	2b20      	cmp	r3, #32
 80100b2:	d867      	bhi.n	8010184 <HAL_TIM_ConfigClockSource+0x16c>
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d05c      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x15a>
 80100b8:	2b10      	cmp	r3, #16
 80100ba:	d05a      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x15a>
 80100bc:	e062      	b.n	8010184 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6818      	ldr	r0, [r3, #0]
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	6899      	ldr	r1, [r3, #8]
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	685a      	ldr	r2, [r3, #4]
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	f000 fb5d 	bl	801078c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80100e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	68ba      	ldr	r2, [r7, #8]
 80100e8:	609a      	str	r2, [r3, #8]
      break;
 80100ea:	e04f      	b.n	801018c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6818      	ldr	r0, [r3, #0]
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	6899      	ldr	r1, [r3, #8]
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	685a      	ldr	r2, [r3, #4]
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	f000 fb46 	bl	801078c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	689a      	ldr	r2, [r3, #8]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801010e:	609a      	str	r2, [r3, #8]
      break;
 8010110:	e03c      	b.n	801018c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6818      	ldr	r0, [r3, #0]
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	6859      	ldr	r1, [r3, #4]
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	461a      	mov	r2, r3
 8010120:	f000 faba 	bl	8010698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2150      	movs	r1, #80	; 0x50
 801012a:	4618      	mov	r0, r3
 801012c:	f000 fb13 	bl	8010756 <TIM_ITRx_SetConfig>
      break;
 8010130:	e02c      	b.n	801018c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6818      	ldr	r0, [r3, #0]
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	6859      	ldr	r1, [r3, #4]
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	461a      	mov	r2, r3
 8010140:	f000 fad9 	bl	80106f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2160      	movs	r1, #96	; 0x60
 801014a:	4618      	mov	r0, r3
 801014c:	f000 fb03 	bl	8010756 <TIM_ITRx_SetConfig>
      break;
 8010150:	e01c      	b.n	801018c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6818      	ldr	r0, [r3, #0]
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	6859      	ldr	r1, [r3, #4]
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	461a      	mov	r2, r3
 8010160:	f000 fa9a 	bl	8010698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2140      	movs	r1, #64	; 0x40
 801016a:	4618      	mov	r0, r3
 801016c:	f000 faf3 	bl	8010756 <TIM_ITRx_SetConfig>
      break;
 8010170:	e00c      	b.n	801018c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4619      	mov	r1, r3
 801017c:	4610      	mov	r0, r2
 801017e:	f000 faea 	bl	8010756 <TIM_ITRx_SetConfig>
      break;
 8010182:	e003      	b.n	801018c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010184:	2301      	movs	r3, #1
 8010186:	73fb      	strb	r3, [r7, #15]
      break;
 8010188:	e000      	b.n	801018c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801018a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2201      	movs	r2, #1
 8010190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2200      	movs	r2, #0
 8010198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801019c:	7bfb      	ldrb	r3, [r7, #15]
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3710      	adds	r7, #16
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80101a6:	b480      	push	{r7}
 80101a8:	b083      	sub	sp, #12
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80101ae:	bf00      	nop
 80101b0:	370c      	adds	r7, #12
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80101ba:	b480      	push	{r7}
 80101bc:	b083      	sub	sp, #12
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80101c2:	bf00      	nop
 80101c4:	370c      	adds	r7, #12
 80101c6:	46bd      	mov	sp, r7
 80101c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101cc:	4770      	bx	lr

080101ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80101ce:	b480      	push	{r7}
 80101d0:	b083      	sub	sp, #12
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80101d6:	bf00      	nop
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80101e2:	b480      	push	{r7}
 80101e4:	b083      	sub	sp, #12
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80101ea:	bf00      	nop
 80101ec:	370c      	adds	r7, #12
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr
	...

080101f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4a40      	ldr	r2, [pc, #256]	; (801030c <TIM_Base_SetConfig+0x114>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d013      	beq.n	8010238 <TIM_Base_SetConfig+0x40>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010216:	d00f      	beq.n	8010238 <TIM_Base_SetConfig+0x40>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	4a3d      	ldr	r2, [pc, #244]	; (8010310 <TIM_Base_SetConfig+0x118>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d00b      	beq.n	8010238 <TIM_Base_SetConfig+0x40>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	4a3c      	ldr	r2, [pc, #240]	; (8010314 <TIM_Base_SetConfig+0x11c>)
 8010224:	4293      	cmp	r3, r2
 8010226:	d007      	beq.n	8010238 <TIM_Base_SetConfig+0x40>
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	4a3b      	ldr	r2, [pc, #236]	; (8010318 <TIM_Base_SetConfig+0x120>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d003      	beq.n	8010238 <TIM_Base_SetConfig+0x40>
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	4a3a      	ldr	r2, [pc, #232]	; (801031c <TIM_Base_SetConfig+0x124>)
 8010234:	4293      	cmp	r3, r2
 8010236:	d108      	bne.n	801024a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801023e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	4313      	orrs	r3, r2
 8010248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4a2f      	ldr	r2, [pc, #188]	; (801030c <TIM_Base_SetConfig+0x114>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d02b      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010258:	d027      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	4a2c      	ldr	r2, [pc, #176]	; (8010310 <TIM_Base_SetConfig+0x118>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d023      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4a2b      	ldr	r2, [pc, #172]	; (8010314 <TIM_Base_SetConfig+0x11c>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d01f      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	4a2a      	ldr	r2, [pc, #168]	; (8010318 <TIM_Base_SetConfig+0x120>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d01b      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4a29      	ldr	r2, [pc, #164]	; (801031c <TIM_Base_SetConfig+0x124>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d017      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4a28      	ldr	r2, [pc, #160]	; (8010320 <TIM_Base_SetConfig+0x128>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d013      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	4a27      	ldr	r2, [pc, #156]	; (8010324 <TIM_Base_SetConfig+0x12c>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d00f      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4a26      	ldr	r2, [pc, #152]	; (8010328 <TIM_Base_SetConfig+0x130>)
 801028e:	4293      	cmp	r3, r2
 8010290:	d00b      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	4a25      	ldr	r2, [pc, #148]	; (801032c <TIM_Base_SetConfig+0x134>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d007      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	4a24      	ldr	r2, [pc, #144]	; (8010330 <TIM_Base_SetConfig+0x138>)
 801029e:	4293      	cmp	r3, r2
 80102a0:	d003      	beq.n	80102aa <TIM_Base_SetConfig+0xb2>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	4a23      	ldr	r2, [pc, #140]	; (8010334 <TIM_Base_SetConfig+0x13c>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d108      	bne.n	80102bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80102b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	68db      	ldr	r3, [r3, #12]
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	4313      	orrs	r3, r2
 80102ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	695b      	ldr	r3, [r3, #20]
 80102c6:	4313      	orrs	r3, r2
 80102c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	689a      	ldr	r2, [r3, #8]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4a0a      	ldr	r2, [pc, #40]	; (801030c <TIM_Base_SetConfig+0x114>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d003      	beq.n	80102f0 <TIM_Base_SetConfig+0xf8>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	4a0c      	ldr	r2, [pc, #48]	; (801031c <TIM_Base_SetConfig+0x124>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d103      	bne.n	80102f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	691a      	ldr	r2, [r3, #16]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	615a      	str	r2, [r3, #20]
}
 80102fe:	bf00      	nop
 8010300:	3714      	adds	r7, #20
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr
 801030a:	bf00      	nop
 801030c:	40010000 	.word	0x40010000
 8010310:	40000400 	.word	0x40000400
 8010314:	40000800 	.word	0x40000800
 8010318:	40000c00 	.word	0x40000c00
 801031c:	40010400 	.word	0x40010400
 8010320:	40014000 	.word	0x40014000
 8010324:	40014400 	.word	0x40014400
 8010328:	40014800 	.word	0x40014800
 801032c:	40001800 	.word	0x40001800
 8010330:	40001c00 	.word	0x40001c00
 8010334:	40002000 	.word	0x40002000

08010338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010338:	b480      	push	{r7}
 801033a:	b087      	sub	sp, #28
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6a1b      	ldr	r3, [r3, #32]
 8010346:	f023 0201 	bic.w	r2, r3, #1
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6a1b      	ldr	r3, [r3, #32]
 8010352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	699b      	ldr	r3, [r3, #24]
 801035e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f023 0303 	bic.w	r3, r3, #3
 801036e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68fa      	ldr	r2, [r7, #12]
 8010376:	4313      	orrs	r3, r2
 8010378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	f023 0302 	bic.w	r3, r3, #2
 8010380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	689b      	ldr	r3, [r3, #8]
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	4313      	orrs	r3, r2
 801038a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4a20      	ldr	r2, [pc, #128]	; (8010410 <TIM_OC1_SetConfig+0xd8>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d003      	beq.n	801039c <TIM_OC1_SetConfig+0x64>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4a1f      	ldr	r2, [pc, #124]	; (8010414 <TIM_OC1_SetConfig+0xdc>)
 8010398:	4293      	cmp	r3, r2
 801039a:	d10c      	bne.n	80103b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	f023 0308 	bic.w	r3, r3, #8
 80103a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	697a      	ldr	r2, [r7, #20]
 80103aa:	4313      	orrs	r3, r2
 80103ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	f023 0304 	bic.w	r3, r3, #4
 80103b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4a15      	ldr	r2, [pc, #84]	; (8010410 <TIM_OC1_SetConfig+0xd8>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d003      	beq.n	80103c6 <TIM_OC1_SetConfig+0x8e>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a14      	ldr	r2, [pc, #80]	; (8010414 <TIM_OC1_SetConfig+0xdc>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d111      	bne.n	80103ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	693a      	ldr	r2, [r7, #16]
 80103dc:	4313      	orrs	r3, r2
 80103de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	699b      	ldr	r3, [r3, #24]
 80103e4:	693a      	ldr	r2, [r7, #16]
 80103e6:	4313      	orrs	r3, r2
 80103e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	693a      	ldr	r2, [r7, #16]
 80103ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	68fa      	ldr	r2, [r7, #12]
 80103f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	685a      	ldr	r2, [r3, #4]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	697a      	ldr	r2, [r7, #20]
 8010402:	621a      	str	r2, [r3, #32]
}
 8010404:	bf00      	nop
 8010406:	371c      	adds	r7, #28
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr
 8010410:	40010000 	.word	0x40010000
 8010414:	40010400 	.word	0x40010400

08010418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010418:	b480      	push	{r7}
 801041a:	b087      	sub	sp, #28
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6a1b      	ldr	r3, [r3, #32]
 8010426:	f023 0210 	bic.w	r2, r3, #16
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6a1b      	ldr	r3, [r3, #32]
 8010432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	699b      	ldr	r3, [r3, #24]
 801043e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801044e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	021b      	lsls	r3, r3, #8
 8010456:	68fa      	ldr	r2, [r7, #12]
 8010458:	4313      	orrs	r3, r2
 801045a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	f023 0320 	bic.w	r3, r3, #32
 8010462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	689b      	ldr	r3, [r3, #8]
 8010468:	011b      	lsls	r3, r3, #4
 801046a:	697a      	ldr	r2, [r7, #20]
 801046c:	4313      	orrs	r3, r2
 801046e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	4a22      	ldr	r2, [pc, #136]	; (80104fc <TIM_OC2_SetConfig+0xe4>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d003      	beq.n	8010480 <TIM_OC2_SetConfig+0x68>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4a21      	ldr	r2, [pc, #132]	; (8010500 <TIM_OC2_SetConfig+0xe8>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d10d      	bne.n	801049c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	011b      	lsls	r3, r3, #4
 801048e:	697a      	ldr	r2, [r7, #20]
 8010490:	4313      	orrs	r3, r2
 8010492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801049a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	4a17      	ldr	r2, [pc, #92]	; (80104fc <TIM_OC2_SetConfig+0xe4>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d003      	beq.n	80104ac <TIM_OC2_SetConfig+0x94>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4a16      	ldr	r2, [pc, #88]	; (8010500 <TIM_OC2_SetConfig+0xe8>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d113      	bne.n	80104d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80104b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	695b      	ldr	r3, [r3, #20]
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	693a      	ldr	r2, [r7, #16]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	699b      	ldr	r3, [r3, #24]
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	693a      	ldr	r2, [r7, #16]
 80104d0:	4313      	orrs	r3, r2
 80104d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	693a      	ldr	r2, [r7, #16]
 80104d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	68fa      	ldr	r2, [r7, #12]
 80104de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	685a      	ldr	r2, [r3, #4]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	621a      	str	r2, [r3, #32]
}
 80104ee:	bf00      	nop
 80104f0:	371c      	adds	r7, #28
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	40010000 	.word	0x40010000
 8010500:	40010400 	.word	0x40010400

08010504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010504:	b480      	push	{r7}
 8010506:	b087      	sub	sp, #28
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6a1b      	ldr	r3, [r3, #32]
 8010512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6a1b      	ldr	r3, [r3, #32]
 801051e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	69db      	ldr	r3, [r3, #28]
 801052a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	f023 0303 	bic.w	r3, r3, #3
 801053a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	68fa      	ldr	r2, [r7, #12]
 8010542:	4313      	orrs	r3, r2
 8010544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801054c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	689b      	ldr	r3, [r3, #8]
 8010552:	021b      	lsls	r3, r3, #8
 8010554:	697a      	ldr	r2, [r7, #20]
 8010556:	4313      	orrs	r3, r2
 8010558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4a21      	ldr	r2, [pc, #132]	; (80105e4 <TIM_OC3_SetConfig+0xe0>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d003      	beq.n	801056a <TIM_OC3_SetConfig+0x66>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4a20      	ldr	r2, [pc, #128]	; (80105e8 <TIM_OC3_SetConfig+0xe4>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d10d      	bne.n	8010586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	021b      	lsls	r3, r3, #8
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	4313      	orrs	r3, r2
 801057c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4a16      	ldr	r2, [pc, #88]	; (80105e4 <TIM_OC3_SetConfig+0xe0>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d003      	beq.n	8010596 <TIM_OC3_SetConfig+0x92>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4a15      	ldr	r2, [pc, #84]	; (80105e8 <TIM_OC3_SetConfig+0xe4>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d113      	bne.n	80105be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801059c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80105a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	695b      	ldr	r3, [r3, #20]
 80105aa:	011b      	lsls	r3, r3, #4
 80105ac:	693a      	ldr	r2, [r7, #16]
 80105ae:	4313      	orrs	r3, r2
 80105b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	699b      	ldr	r3, [r3, #24]
 80105b6:	011b      	lsls	r3, r3, #4
 80105b8:	693a      	ldr	r2, [r7, #16]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	693a      	ldr	r2, [r7, #16]
 80105c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	68fa      	ldr	r2, [r7, #12]
 80105c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	685a      	ldr	r2, [r3, #4]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	697a      	ldr	r2, [r7, #20]
 80105d6:	621a      	str	r2, [r3, #32]
}
 80105d8:	bf00      	nop
 80105da:	371c      	adds	r7, #28
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr
 80105e4:	40010000 	.word	0x40010000
 80105e8:	40010400 	.word	0x40010400

080105ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b087      	sub	sp, #28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a1b      	ldr	r3, [r3, #32]
 80105fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	69db      	ldr	r3, [r3, #28]
 8010612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801061a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	021b      	lsls	r3, r3, #8
 801062a:	68fa      	ldr	r2, [r7, #12]
 801062c:	4313      	orrs	r3, r2
 801062e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	689b      	ldr	r3, [r3, #8]
 801063c:	031b      	lsls	r3, r3, #12
 801063e:	693a      	ldr	r2, [r7, #16]
 8010640:	4313      	orrs	r3, r2
 8010642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	4a12      	ldr	r2, [pc, #72]	; (8010690 <TIM_OC4_SetConfig+0xa4>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d003      	beq.n	8010654 <TIM_OC4_SetConfig+0x68>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	4a11      	ldr	r2, [pc, #68]	; (8010694 <TIM_OC4_SetConfig+0xa8>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d109      	bne.n	8010668 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801065a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	695b      	ldr	r3, [r3, #20]
 8010660:	019b      	lsls	r3, r3, #6
 8010662:	697a      	ldr	r2, [r7, #20]
 8010664:	4313      	orrs	r3, r2
 8010666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	697a      	ldr	r2, [r7, #20]
 801066c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	68fa      	ldr	r2, [r7, #12]
 8010672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	685a      	ldr	r2, [r3, #4]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	693a      	ldr	r2, [r7, #16]
 8010680:	621a      	str	r2, [r3, #32]
}
 8010682:	bf00      	nop
 8010684:	371c      	adds	r7, #28
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	40010000 	.word	0x40010000
 8010694:	40010400 	.word	0x40010400

08010698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010698:	b480      	push	{r7}
 801069a:	b087      	sub	sp, #28
 801069c:	af00      	add	r7, sp, #0
 801069e:	60f8      	str	r0, [r7, #12]
 80106a0:	60b9      	str	r1, [r7, #8]
 80106a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	6a1b      	ldr	r3, [r3, #32]
 80106a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6a1b      	ldr	r3, [r3, #32]
 80106ae:	f023 0201 	bic.w	r2, r3, #1
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	699b      	ldr	r3, [r3, #24]
 80106ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80106c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	011b      	lsls	r3, r3, #4
 80106c8:	693a      	ldr	r2, [r7, #16]
 80106ca:	4313      	orrs	r3, r2
 80106cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	f023 030a 	bic.w	r3, r3, #10
 80106d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80106d6:	697a      	ldr	r2, [r7, #20]
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	4313      	orrs	r3, r2
 80106dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	693a      	ldr	r2, [r7, #16]
 80106e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	697a      	ldr	r2, [r7, #20]
 80106e8:	621a      	str	r2, [r3, #32]
}
 80106ea:	bf00      	nop
 80106ec:	371c      	adds	r7, #28
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr

080106f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80106f6:	b480      	push	{r7}
 80106f8:	b087      	sub	sp, #28
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	60f8      	str	r0, [r7, #12]
 80106fe:	60b9      	str	r1, [r7, #8]
 8010700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	6a1b      	ldr	r3, [r3, #32]
 8010706:	f023 0210 	bic.w	r2, r3, #16
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	699b      	ldr	r3, [r3, #24]
 8010712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	6a1b      	ldr	r3, [r3, #32]
 8010718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	031b      	lsls	r3, r3, #12
 8010726:	697a      	ldr	r2, [r7, #20]
 8010728:	4313      	orrs	r3, r2
 801072a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010732:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	011b      	lsls	r3, r3, #4
 8010738:	693a      	ldr	r2, [r7, #16]
 801073a:	4313      	orrs	r3, r2
 801073c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	697a      	ldr	r2, [r7, #20]
 8010742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	693a      	ldr	r2, [r7, #16]
 8010748:	621a      	str	r2, [r3, #32]
}
 801074a:	bf00      	nop
 801074c:	371c      	adds	r7, #28
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010756:	b480      	push	{r7}
 8010758:	b085      	sub	sp, #20
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
 801075e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	689b      	ldr	r3, [r3, #8]
 8010764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801076c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801076e:	683a      	ldr	r2, [r7, #0]
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	4313      	orrs	r3, r2
 8010774:	f043 0307 	orr.w	r3, r3, #7
 8010778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	609a      	str	r2, [r3, #8]
}
 8010780:	bf00      	nop
 8010782:	3714      	adds	r7, #20
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801078c:	b480      	push	{r7}
 801078e:	b087      	sub	sp, #28
 8010790:	af00      	add	r7, sp, #0
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
 8010798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80107a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	021a      	lsls	r2, r3, #8
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	431a      	orrs	r2, r3
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	4313      	orrs	r3, r2
 80107b4:	697a      	ldr	r2, [r7, #20]
 80107b6:	4313      	orrs	r3, r2
 80107b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	697a      	ldr	r2, [r7, #20]
 80107be:	609a      	str	r2, [r3, #8]
}
 80107c0:	bf00      	nop
 80107c2:	371c      	adds	r7, #28
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b087      	sub	sp, #28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	f003 031f 	and.w	r3, r3, #31
 80107de:	2201      	movs	r2, #1
 80107e0:	fa02 f303 	lsl.w	r3, r2, r3
 80107e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	6a1a      	ldr	r2, [r3, #32]
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	43db      	mvns	r3, r3
 80107ee:	401a      	ands	r2, r3
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6a1a      	ldr	r2, [r3, #32]
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	f003 031f 	and.w	r3, r3, #31
 80107fe:	6879      	ldr	r1, [r7, #4]
 8010800:	fa01 f303 	lsl.w	r3, r1, r3
 8010804:	431a      	orrs	r2, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	621a      	str	r2, [r3, #32]
}
 801080a:	bf00      	nop
 801080c:	371c      	adds	r7, #28
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr
	...

08010818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010818:	b480      	push	{r7}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010828:	2b01      	cmp	r3, #1
 801082a:	d101      	bne.n	8010830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801082c:	2302      	movs	r3, #2
 801082e:	e05a      	b.n	80108e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2201      	movs	r2, #1
 8010834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2202      	movs	r2, #2
 801083c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	68fa      	ldr	r2, [r7, #12]
 801085e:	4313      	orrs	r3, r2
 8010860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a21      	ldr	r2, [pc, #132]	; (80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d022      	beq.n	80108ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801087c:	d01d      	beq.n	80108ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	4a1d      	ldr	r2, [pc, #116]	; (80108f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010884:	4293      	cmp	r3, r2
 8010886:	d018      	beq.n	80108ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a1b      	ldr	r2, [pc, #108]	; (80108fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d013      	beq.n	80108ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a1a      	ldr	r2, [pc, #104]	; (8010900 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d00e      	beq.n	80108ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a18      	ldr	r2, [pc, #96]	; (8010904 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d009      	beq.n	80108ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4a17      	ldr	r2, [pc, #92]	; (8010908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d004      	beq.n	80108ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4a15      	ldr	r2, [pc, #84]	; (801090c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d10c      	bne.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	68ba      	ldr	r2, [r7, #8]
 80108c8:	4313      	orrs	r3, r2
 80108ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	68ba      	ldr	r2, [r7, #8]
 80108d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80108e4:	2300      	movs	r3, #0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3714      	adds	r7, #20
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	40010000 	.word	0x40010000
 80108f8:	40000400 	.word	0x40000400
 80108fc:	40000800 	.word	0x40000800
 8010900:	40000c00 	.word	0x40000c00
 8010904:	40010400 	.word	0x40010400
 8010908:	40014000 	.word	0x40014000
 801090c:	40001800 	.word	0x40001800

08010910 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010910:	b480      	push	{r7}
 8010912:	b085      	sub	sp, #20
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801091a:	2300      	movs	r3, #0
 801091c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010924:	2b01      	cmp	r3, #1
 8010926:	d101      	bne.n	801092c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010928:	2302      	movs	r3, #2
 801092a:	e03d      	b.n	80109a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2201      	movs	r2, #1
 8010930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	4313      	orrs	r3, r2
 8010940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	4313      	orrs	r3, r2
 801094e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	4313      	orrs	r3, r2
 801095c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	4313      	orrs	r3, r2
 801096a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	691b      	ldr	r3, [r3, #16]
 8010976:	4313      	orrs	r3, r2
 8010978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	695b      	ldr	r3, [r3, #20]
 8010984:	4313      	orrs	r3, r2
 8010986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	69db      	ldr	r3, [r3, #28]
 8010992:	4313      	orrs	r3, r2
 8010994:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2200      	movs	r2, #0
 80109a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80109a6:	2300      	movs	r3, #0
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3714      	adds	r7, #20
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80109bc:	bf00      	nop
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80109d0:	bf00      	nop
 80109d2:	370c      	adds	r7, #12
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d101      	bne.n	80109ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109ea:	2301      	movs	r3, #1
 80109ec:	e03f      	b.n	8010a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80109f4:	b2db      	uxtb	r3, r3
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d106      	bne.n	8010a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2200      	movs	r2, #0
 80109fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f7f3 fdbc 	bl	8004580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2224      	movs	r2, #36	; 0x24
 8010a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	68da      	ldr	r2, [r3, #12]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f000 fd21 	bl	8011468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	691a      	ldr	r2, [r3, #16]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	695a      	ldr	r2, [r3, #20]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	68da      	ldr	r2, [r3, #12]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2220      	movs	r2, #32
 8010a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2220      	movs	r2, #32
 8010a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010a6c:	2300      	movs	r3, #0
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3708      	adds	r7, #8
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b090      	sub	sp, #64	; 0x40
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	695b      	ldr	r3, [r3, #20]
 8010a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a8c:	2b80      	cmp	r3, #128	; 0x80
 8010a8e:	bf0c      	ite	eq
 8010a90:	2301      	moveq	r3, #1
 8010a92:	2300      	movne	r3, #0
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a9e:	b2db      	uxtb	r3, r3
 8010aa0:	2b21      	cmp	r3, #33	; 0x21
 8010aa2:	d128      	bne.n	8010af6 <HAL_UART_DMAStop+0x80>
 8010aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d025      	beq.n	8010af6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	3314      	adds	r3, #20
 8010ab0:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab4:	e853 3f00 	ldrex	r3, [r3]
 8010ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8010aba:	6a3b      	ldr	r3, [r7, #32]
 8010abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	3314      	adds	r3, #20
 8010ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010aca:	633a      	str	r2, [r7, #48]	; 0x30
 8010acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ad2:	e841 2300 	strex	r3, r2, [r1]
 8010ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d1e5      	bne.n	8010aaa <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d004      	beq.n	8010af0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7f9 ffd0 	bl	800aa90 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 faf7 	bl	80110e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	695b      	ldr	r3, [r3, #20]
 8010afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b00:	2b40      	cmp	r3, #64	; 0x40
 8010b02:	bf0c      	ite	eq
 8010b04:	2301      	moveq	r3, #1
 8010b06:	2300      	movne	r3, #0
 8010b08:	b2db      	uxtb	r3, r3
 8010b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b22      	cmp	r3, #34	; 0x22
 8010b16:	d128      	bne.n	8010b6a <HAL_UART_DMAStop+0xf4>
 8010b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d025      	beq.n	8010b6a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	3314      	adds	r3, #20
 8010b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	e853 3f00 	ldrex	r3, [r3]
 8010b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b34:	637b      	str	r3, [r7, #52]	; 0x34
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	3314      	adds	r3, #20
 8010b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b3e:	61fa      	str	r2, [r7, #28]
 8010b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b42:	69b9      	ldr	r1, [r7, #24]
 8010b44:	69fa      	ldr	r2, [r7, #28]
 8010b46:	e841 2300 	strex	r3, r2, [r1]
 8010b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d1e5      	bne.n	8010b1e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d004      	beq.n	8010b64 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7f9 ff96 	bl	800aa90 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f000 fae5 	bl	8011134 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8010b6a:	2300      	movs	r3, #0
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3740      	adds	r7, #64	; 0x40
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b0ba      	sub	sp, #232	; 0xe8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	695b      	ldr	r3, [r3, #20]
 8010b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010baa:	f003 030f 	and.w	r3, r3, #15
 8010bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d10f      	bne.n	8010bda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bbe:	f003 0320 	and.w	r3, r3, #32
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d009      	beq.n	8010bda <HAL_UART_IRQHandler+0x66>
 8010bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bca:	f003 0320 	and.w	r3, r3, #32
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d003      	beq.n	8010bda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f000 fb8d 	bl	80112f2 <UART_Receive_IT>
      return;
 8010bd8:	e256      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	f000 80de 	beq.w	8010da0 <HAL_UART_IRQHandler+0x22c>
 8010be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010be8:	f003 0301 	and.w	r3, r3, #1
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d106      	bne.n	8010bfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	f000 80d1 	beq.w	8010da0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c02:	f003 0301 	and.w	r3, r3, #1
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d00b      	beq.n	8010c22 <HAL_UART_IRQHandler+0xae>
 8010c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d005      	beq.n	8010c22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c1a:	f043 0201 	orr.w	r2, r3, #1
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c26:	f003 0304 	and.w	r3, r3, #4
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00b      	beq.n	8010c46 <HAL_UART_IRQHandler+0xd2>
 8010c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c32:	f003 0301 	and.w	r3, r3, #1
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d005      	beq.n	8010c46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c3e:	f043 0202 	orr.w	r2, r3, #2
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c4a:	f003 0302 	and.w	r3, r3, #2
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d00b      	beq.n	8010c6a <HAL_UART_IRQHandler+0xf6>
 8010c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c56:	f003 0301 	and.w	r3, r3, #1
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d005      	beq.n	8010c6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c62:	f043 0204 	orr.w	r2, r3, #4
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c6e:	f003 0308 	and.w	r3, r3, #8
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d011      	beq.n	8010c9a <HAL_UART_IRQHandler+0x126>
 8010c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c7a:	f003 0320 	and.w	r3, r3, #32
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d105      	bne.n	8010c8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c86:	f003 0301 	and.w	r3, r3, #1
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d005      	beq.n	8010c9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c92:	f043 0208 	orr.w	r2, r3, #8
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	f000 81ed 	beq.w	801107e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ca8:	f003 0320 	and.w	r3, r3, #32
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d008      	beq.n	8010cc2 <HAL_UART_IRQHandler+0x14e>
 8010cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cb4:	f003 0320 	and.w	r3, r3, #32
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d002      	beq.n	8010cc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f000 fb18 	bl	80112f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	695b      	ldr	r3, [r3, #20]
 8010cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ccc:	2b40      	cmp	r3, #64	; 0x40
 8010cce:	bf0c      	ite	eq
 8010cd0:	2301      	moveq	r3, #1
 8010cd2:	2300      	movne	r3, #0
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cde:	f003 0308 	and.w	r3, r3, #8
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d103      	bne.n	8010cee <HAL_UART_IRQHandler+0x17a>
 8010ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d04f      	beq.n	8010d8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 fa20 	bl	8011134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cfe:	2b40      	cmp	r3, #64	; 0x40
 8010d00:	d141      	bne.n	8010d86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	3314      	adds	r3, #20
 8010d08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d10:	e853 3f00 	ldrex	r3, [r3]
 8010d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	3314      	adds	r3, #20
 8010d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010d32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010d3e:	e841 2300 	strex	r3, r2, [r1]
 8010d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d1d9      	bne.n	8010d02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d013      	beq.n	8010d7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d5a:	4a7d      	ldr	r2, [pc, #500]	; (8010f50 <HAL_UART_IRQHandler+0x3dc>)
 8010d5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7f9 ff04 	bl	800ab70 <HAL_DMA_Abort_IT>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d016      	beq.n	8010d9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010d78:	4610      	mov	r0, r2
 8010d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d7c:	e00e      	b.n	8010d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 f99a 	bl	80110b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d84:	e00a      	b.n	8010d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 f996 	bl	80110b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d8c:	e006      	b.n	8010d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 f992 	bl	80110b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2200      	movs	r2, #0
 8010d98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010d9a:	e170      	b.n	801107e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d9c:	bf00      	nop
    return;
 8010d9e:	e16e      	b.n	801107e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	f040 814a 	bne.w	801103e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dae:	f003 0310 	and.w	r3, r3, #16
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f000 8143 	beq.w	801103e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dbc:	f003 0310 	and.w	r3, r3, #16
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 813c 	beq.w	801103e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	60bb      	str	r3, [r7, #8]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	60bb      	str	r3, [r7, #8]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	60bb      	str	r3, [r7, #8]
 8010dda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	695b      	ldr	r3, [r3, #20]
 8010de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010de6:	2b40      	cmp	r3, #64	; 0x40
 8010de8:	f040 80b4 	bne.w	8010f54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010df8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f000 8140 	beq.w	8011082 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	f080 8139 	bcs.w	8011082 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010e16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e1c:	69db      	ldr	r3, [r3, #28]
 8010e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e22:	f000 8088 	beq.w	8010f36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	330c      	adds	r3, #12
 8010e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e34:	e853 3f00 	ldrex	r3, [r3]
 8010e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	330c      	adds	r3, #12
 8010e4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e62:	e841 2300 	strex	r3, r2, [r1]
 8010e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1d9      	bne.n	8010e26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	3314      	adds	r3, #20
 8010e78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e7c:	e853 3f00 	ldrex	r3, [r3]
 8010e80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e84:	f023 0301 	bic.w	r3, r3, #1
 8010e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	3314      	adds	r3, #20
 8010e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010e96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010e9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010ea2:	e841 2300 	strex	r3, r2, [r1]
 8010ea6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d1e1      	bne.n	8010e72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	3314      	adds	r3, #20
 8010eb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010eb8:	e853 3f00 	ldrex	r3, [r3]
 8010ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	3314      	adds	r3, #20
 8010ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010ed2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010ed4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ed6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010eda:	e841 2300 	strex	r3, r2, [r1]
 8010ede:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d1e3      	bne.n	8010eae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2220      	movs	r2, #32
 8010eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	330c      	adds	r3, #12
 8010efa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010efe:	e853 3f00 	ldrex	r3, [r3]
 8010f02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f06:	f023 0310 	bic.w	r3, r3, #16
 8010f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	330c      	adds	r3, #12
 8010f14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010f18:	65ba      	str	r2, [r7, #88]	; 0x58
 8010f1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f20:	e841 2300 	strex	r3, r2, [r1]
 8010f24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1e3      	bne.n	8010ef4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7f9 fdad 	bl	800aa90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	1ad3      	subs	r3, r2, r3
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4619      	mov	r1, r3
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 f8c0 	bl	80110cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010f4c:	e099      	b.n	8011082 <HAL_UART_IRQHandler+0x50e>
 8010f4e:	bf00      	nop
 8010f50:	080111fb 	.word	0x080111fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f000 808b 	beq.w	8011086 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f000 8086 	beq.w	8011086 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	330c      	adds	r3, #12
 8010f80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f84:	e853 3f00 	ldrex	r3, [r3]
 8010f88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010f90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	330c      	adds	r3, #12
 8010f9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010f9e:	647a      	str	r2, [r7, #68]	; 0x44
 8010fa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fa6:	e841 2300 	strex	r3, r2, [r1]
 8010faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d1e3      	bne.n	8010f7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	3314      	adds	r3, #20
 8010fb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbc:	e853 3f00 	ldrex	r3, [r3]
 8010fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8010fc2:	6a3b      	ldr	r3, [r7, #32]
 8010fc4:	f023 0301 	bic.w	r3, r3, #1
 8010fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	3314      	adds	r3, #20
 8010fd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010fd6:	633a      	str	r2, [r7, #48]	; 0x30
 8010fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fde:	e841 2300 	strex	r3, r2, [r1]
 8010fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1e3      	bne.n	8010fb2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2220      	movs	r2, #32
 8010fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	330c      	adds	r3, #12
 8010ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	e853 3f00 	ldrex	r3, [r3]
 8011006:	60fb      	str	r3, [r7, #12]
   return(result);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f023 0310 	bic.w	r3, r3, #16
 801100e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	330c      	adds	r3, #12
 8011018:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801101c:	61fa      	str	r2, [r7, #28]
 801101e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011020:	69b9      	ldr	r1, [r7, #24]
 8011022:	69fa      	ldr	r2, [r7, #28]
 8011024:	e841 2300 	strex	r3, r2, [r1]
 8011028:	617b      	str	r3, [r7, #20]
   return(result);
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d1e3      	bne.n	8010ff8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011034:	4619      	mov	r1, r3
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 f848 	bl	80110cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801103c:	e023      	b.n	8011086 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801103e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011046:	2b00      	cmp	r3, #0
 8011048:	d009      	beq.n	801105e <HAL_UART_IRQHandler+0x4ea>
 801104a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011052:	2b00      	cmp	r3, #0
 8011054:	d003      	beq.n	801105e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 f8e3 	bl	8011222 <UART_Transmit_IT>
    return;
 801105c:	e014      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801105e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011066:	2b00      	cmp	r3, #0
 8011068:	d00e      	beq.n	8011088 <HAL_UART_IRQHandler+0x514>
 801106a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801106e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011072:	2b00      	cmp	r3, #0
 8011074:	d008      	beq.n	8011088 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 f923 	bl	80112c2 <UART_EndTransmit_IT>
    return;
 801107c:	e004      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
    return;
 801107e:	bf00      	nop
 8011080:	e002      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
      return;
 8011082:	bf00      	nop
 8011084:	e000      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
      return;
 8011086:	bf00      	nop
  }
}
 8011088:	37e8      	adds	r7, #232	; 0xe8
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
 801108e:	bf00      	nop

08011090 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011090:	b480      	push	{r7}
 8011092:	b083      	sub	sp, #12
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011098:	bf00      	nop
 801109a:	370c      	adds	r7, #12
 801109c:	46bd      	mov	sp, r7
 801109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a2:	4770      	bx	lr

080110a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b083      	sub	sp, #12
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80110ac:	bf00      	nop
 80110ae:	370c      	adds	r7, #12
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr

080110b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80110c0:	bf00      	nop
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	460b      	mov	r3, r1
 80110d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80110d8:	bf00      	nop
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b089      	sub	sp, #36	; 0x24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	330c      	adds	r3, #12
 80110f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	e853 3f00 	ldrex	r3, [r3]
 80110fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011102:	61fb      	str	r3, [r7, #28]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	330c      	adds	r3, #12
 801110a:	69fa      	ldr	r2, [r7, #28]
 801110c:	61ba      	str	r2, [r7, #24]
 801110e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011110:	6979      	ldr	r1, [r7, #20]
 8011112:	69ba      	ldr	r2, [r7, #24]
 8011114:	e841 2300 	strex	r3, r2, [r1]
 8011118:	613b      	str	r3, [r7, #16]
   return(result);
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d1e5      	bne.n	80110ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2220      	movs	r2, #32
 8011124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8011128:	bf00      	nop
 801112a:	3724      	adds	r7, #36	; 0x24
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr

08011134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011134:	b480      	push	{r7}
 8011136:	b095      	sub	sp, #84	; 0x54
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	330c      	adds	r3, #12
 8011142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011146:	e853 3f00 	ldrex	r3, [r3]
 801114a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	330c      	adds	r3, #12
 801115a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801115c:	643a      	str	r2, [r7, #64]	; 0x40
 801115e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011164:	e841 2300 	strex	r3, r2, [r1]
 8011168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801116a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1e5      	bne.n	801113c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	3314      	adds	r3, #20
 8011176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	e853 3f00 	ldrex	r3, [r3]
 801117e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	f023 0301 	bic.w	r3, r3, #1
 8011186:	64bb      	str	r3, [r7, #72]	; 0x48
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	3314      	adds	r3, #20
 801118e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011198:	e841 2300 	strex	r3, r2, [r1]
 801119c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d1e5      	bne.n	8011170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d119      	bne.n	80111e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	330c      	adds	r3, #12
 80111b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	e853 3f00 	ldrex	r3, [r3]
 80111ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	f023 0310 	bic.w	r3, r3, #16
 80111c2:	647b      	str	r3, [r7, #68]	; 0x44
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	330c      	adds	r3, #12
 80111ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111cc:	61ba      	str	r2, [r7, #24]
 80111ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d0:	6979      	ldr	r1, [r7, #20]
 80111d2:	69ba      	ldr	r2, [r7, #24]
 80111d4:	e841 2300 	strex	r3, r2, [r1]
 80111d8:	613b      	str	r3, [r7, #16]
   return(result);
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d1e5      	bne.n	80111ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2220      	movs	r2, #32
 80111e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80111ee:	bf00      	nop
 80111f0:	3754      	adds	r7, #84	; 0x54
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b084      	sub	sp, #16
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2200      	movs	r2, #0
 801120c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2200      	movs	r2, #0
 8011212:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011214:	68f8      	ldr	r0, [r7, #12]
 8011216:	f7ff ff4f 	bl	80110b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801121a:	bf00      	nop
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011222:	b480      	push	{r7}
 8011224:	b085      	sub	sp, #20
 8011226:	af00      	add	r7, sp, #0
 8011228:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011230:	b2db      	uxtb	r3, r3
 8011232:	2b21      	cmp	r3, #33	; 0x21
 8011234:	d13e      	bne.n	80112b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	689b      	ldr	r3, [r3, #8]
 801123a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801123e:	d114      	bne.n	801126a <UART_Transmit_IT+0x48>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	691b      	ldr	r3, [r3, #16]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d110      	bne.n	801126a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6a1b      	ldr	r3, [r3, #32]
 801124c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	881b      	ldrh	r3, [r3, #0]
 8011252:	461a      	mov	r2, r3
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801125c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a1b      	ldr	r3, [r3, #32]
 8011262:	1c9a      	adds	r2, r3, #2
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	621a      	str	r2, [r3, #32]
 8011268:	e008      	b.n	801127c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6a1b      	ldr	r3, [r3, #32]
 801126e:	1c59      	adds	r1, r3, #1
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	6211      	str	r1, [r2, #32]
 8011274:	781a      	ldrb	r2, [r3, #0]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011280:	b29b      	uxth	r3, r3
 8011282:	3b01      	subs	r3, #1
 8011284:	b29b      	uxth	r3, r3
 8011286:	687a      	ldr	r2, [r7, #4]
 8011288:	4619      	mov	r1, r3
 801128a:	84d1      	strh	r1, [r2, #38]	; 0x26
 801128c:	2b00      	cmp	r3, #0
 801128e:	d10f      	bne.n	80112b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	68da      	ldr	r2, [r3, #12]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801129e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	68da      	ldr	r2, [r3, #12]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80112ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80112b0:	2300      	movs	r3, #0
 80112b2:	e000      	b.n	80112b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80112b4:	2302      	movs	r3, #2
  }
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3714      	adds	r7, #20
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr

080112c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80112c2:	b580      	push	{r7, lr}
 80112c4:	b082      	sub	sp, #8
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	68da      	ldr	r2, [r3, #12]
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80112d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2220      	movs	r2, #32
 80112de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f7ff fed4 	bl	8011090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3708      	adds	r7, #8
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b08c      	sub	sp, #48	; 0x30
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011300:	b2db      	uxtb	r3, r3
 8011302:	2b22      	cmp	r3, #34	; 0x22
 8011304:	f040 80ab 	bne.w	801145e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	689b      	ldr	r3, [r3, #8]
 801130c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011310:	d117      	bne.n	8011342 <UART_Receive_IT+0x50>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	691b      	ldr	r3, [r3, #16]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d113      	bne.n	8011342 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801131a:	2300      	movs	r3, #0
 801131c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011322:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	b29b      	uxth	r3, r3
 801132c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011330:	b29a      	uxth	r2, r3
 8011332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011334:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801133a:	1c9a      	adds	r2, r3, #2
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	629a      	str	r2, [r3, #40]	; 0x28
 8011340:	e026      	b.n	8011390 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011346:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011348:	2300      	movs	r3, #0
 801134a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	689b      	ldr	r3, [r3, #8]
 8011350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011354:	d007      	beq.n	8011366 <UART_Receive_IT+0x74>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	689b      	ldr	r3, [r3, #8]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d10a      	bne.n	8011374 <UART_Receive_IT+0x82>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	691b      	ldr	r3, [r3, #16]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	b2da      	uxtb	r2, r3
 801136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011370:	701a      	strb	r2, [r3, #0]
 8011372:	e008      	b.n	8011386 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	b2db      	uxtb	r3, r3
 801137c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011380:	b2da      	uxtb	r2, r3
 8011382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011384:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801138a:	1c5a      	adds	r2, r3, #1
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011394:	b29b      	uxth	r3, r3
 8011396:	3b01      	subs	r3, #1
 8011398:	b29b      	uxth	r3, r3
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	4619      	mov	r1, r3
 801139e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d15a      	bne.n	801145a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	68da      	ldr	r2, [r3, #12]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	f022 0220 	bic.w	r2, r2, #32
 80113b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	68da      	ldr	r2, [r3, #12]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80113c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	695a      	ldr	r2, [r3, #20]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f022 0201 	bic.w	r2, r2, #1
 80113d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2220      	movs	r2, #32
 80113d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113e0:	2b01      	cmp	r3, #1
 80113e2:	d135      	bne.n	8011450 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2200      	movs	r2, #0
 80113e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	330c      	adds	r3, #12
 80113f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	e853 3f00 	ldrex	r3, [r3]
 80113f8:	613b      	str	r3, [r7, #16]
   return(result);
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	f023 0310 	bic.w	r3, r3, #16
 8011400:	627b      	str	r3, [r7, #36]	; 0x24
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	330c      	adds	r3, #12
 8011408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801140a:	623a      	str	r2, [r7, #32]
 801140c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140e:	69f9      	ldr	r1, [r7, #28]
 8011410:	6a3a      	ldr	r2, [r7, #32]
 8011412:	e841 2300 	strex	r3, r2, [r1]
 8011416:	61bb      	str	r3, [r7, #24]
   return(result);
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d1e5      	bne.n	80113ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f003 0310 	and.w	r3, r3, #16
 8011428:	2b10      	cmp	r3, #16
 801142a:	d10a      	bne.n	8011442 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801142c:	2300      	movs	r3, #0
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	60fb      	str	r3, [r7, #12]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	60fb      	str	r3, [r7, #12]
 8011440:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011446:	4619      	mov	r1, r3
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f7ff fe3f 	bl	80110cc <HAL_UARTEx_RxEventCallback>
 801144e:	e002      	b.n	8011456 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f7ff fe27 	bl	80110a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011456:	2300      	movs	r3, #0
 8011458:	e002      	b.n	8011460 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801145a:	2300      	movs	r3, #0
 801145c:	e000      	b.n	8011460 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801145e:	2302      	movs	r3, #2
  }
}
 8011460:	4618      	mov	r0, r3
 8011462:	3730      	adds	r7, #48	; 0x30
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801146c:	b0c0      	sub	sp, #256	; 0x100
 801146e:	af00      	add	r7, sp, #0
 8011470:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	691b      	ldr	r3, [r3, #16]
 801147c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011484:	68d9      	ldr	r1, [r3, #12]
 8011486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	ea40 0301 	orr.w	r3, r0, r1
 8011490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011496:	689a      	ldr	r2, [r3, #8]
 8011498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	431a      	orrs	r2, r3
 80114a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114a4:	695b      	ldr	r3, [r3, #20]
 80114a6:	431a      	orrs	r2, r3
 80114a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114ac:	69db      	ldr	r3, [r3, #28]
 80114ae:	4313      	orrs	r3, r2
 80114b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80114b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80114c0:	f021 010c 	bic.w	r1, r1, #12
 80114c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114ce:	430b      	orrs	r3, r1
 80114d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80114d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	695b      	ldr	r3, [r3, #20]
 80114da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80114de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114e2:	6999      	ldr	r1, [r3, #24]
 80114e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	ea40 0301 	orr.w	r3, r0, r1
 80114ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80114f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	4b8f      	ldr	r3, [pc, #572]	; (8011734 <UART_SetConfig+0x2cc>)
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d005      	beq.n	8011508 <UART_SetConfig+0xa0>
 80114fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	4b8d      	ldr	r3, [pc, #564]	; (8011738 <UART_SetConfig+0x2d0>)
 8011504:	429a      	cmp	r2, r3
 8011506:	d104      	bne.n	8011512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011508:	f7fd fbec 	bl	800ece4 <HAL_RCC_GetPCLK2Freq>
 801150c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8011510:	e003      	b.n	801151a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011512:	f7fd fbd3 	bl	800ecbc <HAL_RCC_GetPCLK1Freq>
 8011516:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801151a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801151e:	69db      	ldr	r3, [r3, #28]
 8011520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011524:	f040 810c 	bne.w	8011740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801152c:	2200      	movs	r2, #0
 801152e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011532:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801153a:	4622      	mov	r2, r4
 801153c:	462b      	mov	r3, r5
 801153e:	1891      	adds	r1, r2, r2
 8011540:	65b9      	str	r1, [r7, #88]	; 0x58
 8011542:	415b      	adcs	r3, r3
 8011544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801154a:	4621      	mov	r1, r4
 801154c:	eb12 0801 	adds.w	r8, r2, r1
 8011550:	4629      	mov	r1, r5
 8011552:	eb43 0901 	adc.w	r9, r3, r1
 8011556:	f04f 0200 	mov.w	r2, #0
 801155a:	f04f 0300 	mov.w	r3, #0
 801155e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801156a:	4690      	mov	r8, r2
 801156c:	4699      	mov	r9, r3
 801156e:	4623      	mov	r3, r4
 8011570:	eb18 0303 	adds.w	r3, r8, r3
 8011574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011578:	462b      	mov	r3, r5
 801157a:	eb49 0303 	adc.w	r3, r9, r3
 801157e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	2200      	movs	r2, #0
 801158a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801158e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011596:	460b      	mov	r3, r1
 8011598:	18db      	adds	r3, r3, r3
 801159a:	653b      	str	r3, [r7, #80]	; 0x50
 801159c:	4613      	mov	r3, r2
 801159e:	eb42 0303 	adc.w	r3, r2, r3
 80115a2:	657b      	str	r3, [r7, #84]	; 0x54
 80115a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80115a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80115ac:	f7ef fb6c 	bl	8000c88 <__aeabi_uldivmod>
 80115b0:	4602      	mov	r2, r0
 80115b2:	460b      	mov	r3, r1
 80115b4:	4b61      	ldr	r3, [pc, #388]	; (801173c <UART_SetConfig+0x2d4>)
 80115b6:	fba3 2302 	umull	r2, r3, r3, r2
 80115ba:	095b      	lsrs	r3, r3, #5
 80115bc:	011c      	lsls	r4, r3, #4
 80115be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80115c2:	2200      	movs	r2, #0
 80115c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80115c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80115cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80115d0:	4642      	mov	r2, r8
 80115d2:	464b      	mov	r3, r9
 80115d4:	1891      	adds	r1, r2, r2
 80115d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80115d8:	415b      	adcs	r3, r3
 80115da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80115e0:	4641      	mov	r1, r8
 80115e2:	eb12 0a01 	adds.w	sl, r2, r1
 80115e6:	4649      	mov	r1, r9
 80115e8:	eb43 0b01 	adc.w	fp, r3, r1
 80115ec:	f04f 0200 	mov.w	r2, #0
 80115f0:	f04f 0300 	mov.w	r3, #0
 80115f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80115f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80115fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011600:	4692      	mov	sl, r2
 8011602:	469b      	mov	fp, r3
 8011604:	4643      	mov	r3, r8
 8011606:	eb1a 0303 	adds.w	r3, sl, r3
 801160a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801160e:	464b      	mov	r3, r9
 8011610:	eb4b 0303 	adc.w	r3, fp, r3
 8011614:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	2200      	movs	r2, #0
 8011620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011624:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801162c:	460b      	mov	r3, r1
 801162e:	18db      	adds	r3, r3, r3
 8011630:	643b      	str	r3, [r7, #64]	; 0x40
 8011632:	4613      	mov	r3, r2
 8011634:	eb42 0303 	adc.w	r3, r2, r3
 8011638:	647b      	str	r3, [r7, #68]	; 0x44
 801163a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801163e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011642:	f7ef fb21 	bl	8000c88 <__aeabi_uldivmod>
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	4611      	mov	r1, r2
 801164c:	4b3b      	ldr	r3, [pc, #236]	; (801173c <UART_SetConfig+0x2d4>)
 801164e:	fba3 2301 	umull	r2, r3, r3, r1
 8011652:	095b      	lsrs	r3, r3, #5
 8011654:	2264      	movs	r2, #100	; 0x64
 8011656:	fb02 f303 	mul.w	r3, r2, r3
 801165a:	1acb      	subs	r3, r1, r3
 801165c:	00db      	lsls	r3, r3, #3
 801165e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011662:	4b36      	ldr	r3, [pc, #216]	; (801173c <UART_SetConfig+0x2d4>)
 8011664:	fba3 2302 	umull	r2, r3, r3, r2
 8011668:	095b      	lsrs	r3, r3, #5
 801166a:	005b      	lsls	r3, r3, #1
 801166c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011670:	441c      	add	r4, r3
 8011672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011676:	2200      	movs	r2, #0
 8011678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801167c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011684:	4642      	mov	r2, r8
 8011686:	464b      	mov	r3, r9
 8011688:	1891      	adds	r1, r2, r2
 801168a:	63b9      	str	r1, [r7, #56]	; 0x38
 801168c:	415b      	adcs	r3, r3
 801168e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011694:	4641      	mov	r1, r8
 8011696:	1851      	adds	r1, r2, r1
 8011698:	6339      	str	r1, [r7, #48]	; 0x30
 801169a:	4649      	mov	r1, r9
 801169c:	414b      	adcs	r3, r1
 801169e:	637b      	str	r3, [r7, #52]	; 0x34
 80116a0:	f04f 0200 	mov.w	r2, #0
 80116a4:	f04f 0300 	mov.w	r3, #0
 80116a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80116ac:	4659      	mov	r1, fp
 80116ae:	00cb      	lsls	r3, r1, #3
 80116b0:	4651      	mov	r1, sl
 80116b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80116b6:	4651      	mov	r1, sl
 80116b8:	00ca      	lsls	r2, r1, #3
 80116ba:	4610      	mov	r0, r2
 80116bc:	4619      	mov	r1, r3
 80116be:	4603      	mov	r3, r0
 80116c0:	4642      	mov	r2, r8
 80116c2:	189b      	adds	r3, r3, r2
 80116c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80116c8:	464b      	mov	r3, r9
 80116ca:	460a      	mov	r2, r1
 80116cc:	eb42 0303 	adc.w	r3, r2, r3
 80116d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80116d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	2200      	movs	r2, #0
 80116dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80116e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80116e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80116e8:	460b      	mov	r3, r1
 80116ea:	18db      	adds	r3, r3, r3
 80116ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80116ee:	4613      	mov	r3, r2
 80116f0:	eb42 0303 	adc.w	r3, r2, r3
 80116f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80116fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80116fe:	f7ef fac3 	bl	8000c88 <__aeabi_uldivmod>
 8011702:	4602      	mov	r2, r0
 8011704:	460b      	mov	r3, r1
 8011706:	4b0d      	ldr	r3, [pc, #52]	; (801173c <UART_SetConfig+0x2d4>)
 8011708:	fba3 1302 	umull	r1, r3, r3, r2
 801170c:	095b      	lsrs	r3, r3, #5
 801170e:	2164      	movs	r1, #100	; 0x64
 8011710:	fb01 f303 	mul.w	r3, r1, r3
 8011714:	1ad3      	subs	r3, r2, r3
 8011716:	00db      	lsls	r3, r3, #3
 8011718:	3332      	adds	r3, #50	; 0x32
 801171a:	4a08      	ldr	r2, [pc, #32]	; (801173c <UART_SetConfig+0x2d4>)
 801171c:	fba2 2303 	umull	r2, r3, r2, r3
 8011720:	095b      	lsrs	r3, r3, #5
 8011722:	f003 0207 	and.w	r2, r3, #7
 8011726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	4422      	add	r2, r4
 801172e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011730:	e105      	b.n	801193e <UART_SetConfig+0x4d6>
 8011732:	bf00      	nop
 8011734:	40011000 	.word	0x40011000
 8011738:	40011400 	.word	0x40011400
 801173c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011744:	2200      	movs	r2, #0
 8011746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801174a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801174e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011752:	4642      	mov	r2, r8
 8011754:	464b      	mov	r3, r9
 8011756:	1891      	adds	r1, r2, r2
 8011758:	6239      	str	r1, [r7, #32]
 801175a:	415b      	adcs	r3, r3
 801175c:	627b      	str	r3, [r7, #36]	; 0x24
 801175e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011762:	4641      	mov	r1, r8
 8011764:	1854      	adds	r4, r2, r1
 8011766:	4649      	mov	r1, r9
 8011768:	eb43 0501 	adc.w	r5, r3, r1
 801176c:	f04f 0200 	mov.w	r2, #0
 8011770:	f04f 0300 	mov.w	r3, #0
 8011774:	00eb      	lsls	r3, r5, #3
 8011776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801177a:	00e2      	lsls	r2, r4, #3
 801177c:	4614      	mov	r4, r2
 801177e:	461d      	mov	r5, r3
 8011780:	4643      	mov	r3, r8
 8011782:	18e3      	adds	r3, r4, r3
 8011784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011788:	464b      	mov	r3, r9
 801178a:	eb45 0303 	adc.w	r3, r5, r3
 801178e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	2200      	movs	r2, #0
 801179a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801179e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80117a2:	f04f 0200 	mov.w	r2, #0
 80117a6:	f04f 0300 	mov.w	r3, #0
 80117aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80117ae:	4629      	mov	r1, r5
 80117b0:	008b      	lsls	r3, r1, #2
 80117b2:	4621      	mov	r1, r4
 80117b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80117b8:	4621      	mov	r1, r4
 80117ba:	008a      	lsls	r2, r1, #2
 80117bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80117c0:	f7ef fa62 	bl	8000c88 <__aeabi_uldivmod>
 80117c4:	4602      	mov	r2, r0
 80117c6:	460b      	mov	r3, r1
 80117c8:	4b60      	ldr	r3, [pc, #384]	; (801194c <UART_SetConfig+0x4e4>)
 80117ca:	fba3 2302 	umull	r2, r3, r3, r2
 80117ce:	095b      	lsrs	r3, r3, #5
 80117d0:	011c      	lsls	r4, r3, #4
 80117d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80117d6:	2200      	movs	r2, #0
 80117d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80117dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80117e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80117e4:	4642      	mov	r2, r8
 80117e6:	464b      	mov	r3, r9
 80117e8:	1891      	adds	r1, r2, r2
 80117ea:	61b9      	str	r1, [r7, #24]
 80117ec:	415b      	adcs	r3, r3
 80117ee:	61fb      	str	r3, [r7, #28]
 80117f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80117f4:	4641      	mov	r1, r8
 80117f6:	1851      	adds	r1, r2, r1
 80117f8:	6139      	str	r1, [r7, #16]
 80117fa:	4649      	mov	r1, r9
 80117fc:	414b      	adcs	r3, r1
 80117fe:	617b      	str	r3, [r7, #20]
 8011800:	f04f 0200 	mov.w	r2, #0
 8011804:	f04f 0300 	mov.w	r3, #0
 8011808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801180c:	4659      	mov	r1, fp
 801180e:	00cb      	lsls	r3, r1, #3
 8011810:	4651      	mov	r1, sl
 8011812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011816:	4651      	mov	r1, sl
 8011818:	00ca      	lsls	r2, r1, #3
 801181a:	4610      	mov	r0, r2
 801181c:	4619      	mov	r1, r3
 801181e:	4603      	mov	r3, r0
 8011820:	4642      	mov	r2, r8
 8011822:	189b      	adds	r3, r3, r2
 8011824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011828:	464b      	mov	r3, r9
 801182a:	460a      	mov	r2, r1
 801182c:	eb42 0303 	adc.w	r3, r2, r3
 8011830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	2200      	movs	r2, #0
 801183c:	67bb      	str	r3, [r7, #120]	; 0x78
 801183e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011840:	f04f 0200 	mov.w	r2, #0
 8011844:	f04f 0300 	mov.w	r3, #0
 8011848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801184c:	4649      	mov	r1, r9
 801184e:	008b      	lsls	r3, r1, #2
 8011850:	4641      	mov	r1, r8
 8011852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011856:	4641      	mov	r1, r8
 8011858:	008a      	lsls	r2, r1, #2
 801185a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801185e:	f7ef fa13 	bl	8000c88 <__aeabi_uldivmod>
 8011862:	4602      	mov	r2, r0
 8011864:	460b      	mov	r3, r1
 8011866:	4b39      	ldr	r3, [pc, #228]	; (801194c <UART_SetConfig+0x4e4>)
 8011868:	fba3 1302 	umull	r1, r3, r3, r2
 801186c:	095b      	lsrs	r3, r3, #5
 801186e:	2164      	movs	r1, #100	; 0x64
 8011870:	fb01 f303 	mul.w	r3, r1, r3
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	011b      	lsls	r3, r3, #4
 8011878:	3332      	adds	r3, #50	; 0x32
 801187a:	4a34      	ldr	r2, [pc, #208]	; (801194c <UART_SetConfig+0x4e4>)
 801187c:	fba2 2303 	umull	r2, r3, r2, r3
 8011880:	095b      	lsrs	r3, r3, #5
 8011882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011886:	441c      	add	r4, r3
 8011888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801188c:	2200      	movs	r2, #0
 801188e:	673b      	str	r3, [r7, #112]	; 0x70
 8011890:	677a      	str	r2, [r7, #116]	; 0x74
 8011892:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011896:	4642      	mov	r2, r8
 8011898:	464b      	mov	r3, r9
 801189a:	1891      	adds	r1, r2, r2
 801189c:	60b9      	str	r1, [r7, #8]
 801189e:	415b      	adcs	r3, r3
 80118a0:	60fb      	str	r3, [r7, #12]
 80118a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80118a6:	4641      	mov	r1, r8
 80118a8:	1851      	adds	r1, r2, r1
 80118aa:	6039      	str	r1, [r7, #0]
 80118ac:	4649      	mov	r1, r9
 80118ae:	414b      	adcs	r3, r1
 80118b0:	607b      	str	r3, [r7, #4]
 80118b2:	f04f 0200 	mov.w	r2, #0
 80118b6:	f04f 0300 	mov.w	r3, #0
 80118ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80118be:	4659      	mov	r1, fp
 80118c0:	00cb      	lsls	r3, r1, #3
 80118c2:	4651      	mov	r1, sl
 80118c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80118c8:	4651      	mov	r1, sl
 80118ca:	00ca      	lsls	r2, r1, #3
 80118cc:	4610      	mov	r0, r2
 80118ce:	4619      	mov	r1, r3
 80118d0:	4603      	mov	r3, r0
 80118d2:	4642      	mov	r2, r8
 80118d4:	189b      	adds	r3, r3, r2
 80118d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80118d8:	464b      	mov	r3, r9
 80118da:	460a      	mov	r2, r1
 80118dc:	eb42 0303 	adc.w	r3, r2, r3
 80118e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80118e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	663b      	str	r3, [r7, #96]	; 0x60
 80118ec:	667a      	str	r2, [r7, #100]	; 0x64
 80118ee:	f04f 0200 	mov.w	r2, #0
 80118f2:	f04f 0300 	mov.w	r3, #0
 80118f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80118fa:	4649      	mov	r1, r9
 80118fc:	008b      	lsls	r3, r1, #2
 80118fe:	4641      	mov	r1, r8
 8011900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011904:	4641      	mov	r1, r8
 8011906:	008a      	lsls	r2, r1, #2
 8011908:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801190c:	f7ef f9bc 	bl	8000c88 <__aeabi_uldivmod>
 8011910:	4602      	mov	r2, r0
 8011912:	460b      	mov	r3, r1
 8011914:	4b0d      	ldr	r3, [pc, #52]	; (801194c <UART_SetConfig+0x4e4>)
 8011916:	fba3 1302 	umull	r1, r3, r3, r2
 801191a:	095b      	lsrs	r3, r3, #5
 801191c:	2164      	movs	r1, #100	; 0x64
 801191e:	fb01 f303 	mul.w	r3, r1, r3
 8011922:	1ad3      	subs	r3, r2, r3
 8011924:	011b      	lsls	r3, r3, #4
 8011926:	3332      	adds	r3, #50	; 0x32
 8011928:	4a08      	ldr	r2, [pc, #32]	; (801194c <UART_SetConfig+0x4e4>)
 801192a:	fba2 2303 	umull	r2, r3, r2, r3
 801192e:	095b      	lsrs	r3, r3, #5
 8011930:	f003 020f 	and.w	r2, r3, #15
 8011934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	4422      	add	r2, r4
 801193c:	609a      	str	r2, [r3, #8]
}
 801193e:	bf00      	nop
 8011940:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011944:	46bd      	mov	sp, r7
 8011946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801194a:	bf00      	nop
 801194c:	51eb851f 	.word	0x51eb851f

08011950 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011950:	b084      	sub	sp, #16
 8011952:	b580      	push	{r7, lr}
 8011954:	b084      	sub	sp, #16
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	f107 001c 	add.w	r0, r7, #28
 801195e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011964:	2b01      	cmp	r3, #1
 8011966:	d122      	bne.n	80119ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801196c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801197c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	68db      	ldr	r3, [r3, #12]
 8011988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011992:	2b01      	cmp	r3, #1
 8011994:	d105      	bne.n	80119a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f001 fbee 	bl	8013184 <USB_CoreReset>
 80119a8:	4603      	mov	r3, r0
 80119aa:	73fb      	strb	r3, [r7, #15]
 80119ac:	e01a      	b.n	80119e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	68db      	ldr	r3, [r3, #12]
 80119b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f001 fbe2 	bl	8013184 <USB_CoreReset>
 80119c0:	4603      	mov	r3, r0
 80119c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80119c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d106      	bne.n	80119d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	639a      	str	r2, [r3, #56]	; 0x38
 80119d6:	e005      	b.n	80119e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80119e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d10b      	bne.n	8011a02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	689b      	ldr	r3, [r3, #8]
 80119ee:	f043 0206 	orr.w	r2, r3, #6
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	689b      	ldr	r3, [r3, #8]
 80119fa:	f043 0220 	orr.w	r2, r3, #32
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3710      	adds	r7, #16
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a0e:	b004      	add	sp, #16
 8011a10:	4770      	bx	lr
	...

08011a14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b087      	sub	sp, #28
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	4613      	mov	r3, r2
 8011a20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011a22:	79fb      	ldrb	r3, [r7, #7]
 8011a24:	2b02      	cmp	r3, #2
 8011a26:	d165      	bne.n	8011af4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	4a41      	ldr	r2, [pc, #260]	; (8011b30 <USB_SetTurnaroundTime+0x11c>)
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	d906      	bls.n	8011a3e <USB_SetTurnaroundTime+0x2a>
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	4a40      	ldr	r2, [pc, #256]	; (8011b34 <USB_SetTurnaroundTime+0x120>)
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d202      	bcs.n	8011a3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011a38:	230f      	movs	r3, #15
 8011a3a:	617b      	str	r3, [r7, #20]
 8011a3c:	e062      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	4a3c      	ldr	r2, [pc, #240]	; (8011b34 <USB_SetTurnaroundTime+0x120>)
 8011a42:	4293      	cmp	r3, r2
 8011a44:	d306      	bcc.n	8011a54 <USB_SetTurnaroundTime+0x40>
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	4a3b      	ldr	r2, [pc, #236]	; (8011b38 <USB_SetTurnaroundTime+0x124>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d202      	bcs.n	8011a54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011a4e:	230e      	movs	r3, #14
 8011a50:	617b      	str	r3, [r7, #20]
 8011a52:	e057      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	4a38      	ldr	r2, [pc, #224]	; (8011b38 <USB_SetTurnaroundTime+0x124>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d306      	bcc.n	8011a6a <USB_SetTurnaroundTime+0x56>
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	4a37      	ldr	r2, [pc, #220]	; (8011b3c <USB_SetTurnaroundTime+0x128>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d202      	bcs.n	8011a6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011a64:	230d      	movs	r3, #13
 8011a66:	617b      	str	r3, [r7, #20]
 8011a68:	e04c      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	4a33      	ldr	r2, [pc, #204]	; (8011b3c <USB_SetTurnaroundTime+0x128>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d306      	bcc.n	8011a80 <USB_SetTurnaroundTime+0x6c>
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	4a32      	ldr	r2, [pc, #200]	; (8011b40 <USB_SetTurnaroundTime+0x12c>)
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d802      	bhi.n	8011a80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011a7a:	230c      	movs	r3, #12
 8011a7c:	617b      	str	r3, [r7, #20]
 8011a7e:	e041      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	4a2f      	ldr	r2, [pc, #188]	; (8011b40 <USB_SetTurnaroundTime+0x12c>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d906      	bls.n	8011a96 <USB_SetTurnaroundTime+0x82>
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	4a2e      	ldr	r2, [pc, #184]	; (8011b44 <USB_SetTurnaroundTime+0x130>)
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d802      	bhi.n	8011a96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011a90:	230b      	movs	r3, #11
 8011a92:	617b      	str	r3, [r7, #20]
 8011a94:	e036      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	4a2a      	ldr	r2, [pc, #168]	; (8011b44 <USB_SetTurnaroundTime+0x130>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d906      	bls.n	8011aac <USB_SetTurnaroundTime+0x98>
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	4a29      	ldr	r2, [pc, #164]	; (8011b48 <USB_SetTurnaroundTime+0x134>)
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d802      	bhi.n	8011aac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011aa6:	230a      	movs	r3, #10
 8011aa8:	617b      	str	r3, [r7, #20]
 8011aaa:	e02b      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	4a26      	ldr	r2, [pc, #152]	; (8011b48 <USB_SetTurnaroundTime+0x134>)
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d906      	bls.n	8011ac2 <USB_SetTurnaroundTime+0xae>
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	4a25      	ldr	r2, [pc, #148]	; (8011b4c <USB_SetTurnaroundTime+0x138>)
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d202      	bcs.n	8011ac2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011abc:	2309      	movs	r3, #9
 8011abe:	617b      	str	r3, [r7, #20]
 8011ac0:	e020      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	4a21      	ldr	r2, [pc, #132]	; (8011b4c <USB_SetTurnaroundTime+0x138>)
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d306      	bcc.n	8011ad8 <USB_SetTurnaroundTime+0xc4>
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	4a20      	ldr	r2, [pc, #128]	; (8011b50 <USB_SetTurnaroundTime+0x13c>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d802      	bhi.n	8011ad8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011ad2:	2308      	movs	r3, #8
 8011ad4:	617b      	str	r3, [r7, #20]
 8011ad6:	e015      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	4a1d      	ldr	r2, [pc, #116]	; (8011b50 <USB_SetTurnaroundTime+0x13c>)
 8011adc:	4293      	cmp	r3, r2
 8011ade:	d906      	bls.n	8011aee <USB_SetTurnaroundTime+0xda>
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	4a1c      	ldr	r2, [pc, #112]	; (8011b54 <USB_SetTurnaroundTime+0x140>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d202      	bcs.n	8011aee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011ae8:	2307      	movs	r3, #7
 8011aea:	617b      	str	r3, [r7, #20]
 8011aec:	e00a      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011aee:	2306      	movs	r3, #6
 8011af0:	617b      	str	r3, [r7, #20]
 8011af2:	e007      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011af4:	79fb      	ldrb	r3, [r7, #7]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d102      	bne.n	8011b00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011afa:	2309      	movs	r3, #9
 8011afc:	617b      	str	r3, [r7, #20]
 8011afe:	e001      	b.n	8011b04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011b00:	2309      	movs	r3, #9
 8011b02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	68da      	ldr	r2, [r3, #12]
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	029b      	lsls	r3, r3, #10
 8011b18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011b1c:	431a      	orrs	r2, r3
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011b22:	2300      	movs	r3, #0
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	371c      	adds	r7, #28
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr
 8011b30:	00d8acbf 	.word	0x00d8acbf
 8011b34:	00e4e1c0 	.word	0x00e4e1c0
 8011b38:	00f42400 	.word	0x00f42400
 8011b3c:	01067380 	.word	0x01067380
 8011b40:	011a499f 	.word	0x011a499f
 8011b44:	01312cff 	.word	0x01312cff
 8011b48:	014ca43f 	.word	0x014ca43f
 8011b4c:	016e3600 	.word	0x016e3600
 8011b50:	01a6ab1f 	.word	0x01a6ab1f
 8011b54:	01e84800 	.word	0x01e84800

08011b58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	689b      	ldr	r3, [r3, #8]
 8011b64:	f043 0201 	orr.w	r2, r3, #1
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	370c      	adds	r7, #12
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr

08011b7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011b7a:	b480      	push	{r7}
 8011b7c:	b083      	sub	sp, #12
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	f023 0201 	bic.w	r2, r3, #1
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011b8e:	2300      	movs	r3, #0
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	370c      	adds	r7, #12
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr

08011b9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	460b      	mov	r3, r1
 8011ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011bb8:	78fb      	ldrb	r3, [r7, #3]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d115      	bne.n	8011bea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	68db      	ldr	r3, [r3, #12]
 8011bc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011bca:	2001      	movs	r0, #1
 8011bcc:	f7f7 fc72 	bl	80094b4 <HAL_Delay>
      ms++;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f001 fa45 	bl	8013066 <USB_GetMode>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d01e      	beq.n	8011c20 <USB_SetCurrentMode+0x84>
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2b31      	cmp	r3, #49	; 0x31
 8011be6:	d9f0      	bls.n	8011bca <USB_SetCurrentMode+0x2e>
 8011be8:	e01a      	b.n	8011c20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011bea:	78fb      	ldrb	r3, [r7, #3]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d115      	bne.n	8011c1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011bfc:	2001      	movs	r0, #1
 8011bfe:	f7f7 fc59 	bl	80094b4 <HAL_Delay>
      ms++;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	3301      	adds	r3, #1
 8011c06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f001 fa2c 	bl	8013066 <USB_GetMode>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d005      	beq.n	8011c20 <USB_SetCurrentMode+0x84>
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2b31      	cmp	r3, #49	; 0x31
 8011c18:	d9f0      	bls.n	8011bfc <USB_SetCurrentMode+0x60>
 8011c1a:	e001      	b.n	8011c20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	e005      	b.n	8011c2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2b32      	cmp	r3, #50	; 0x32
 8011c24:	d101      	bne.n	8011c2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011c26:	2301      	movs	r3, #1
 8011c28:	e000      	b.n	8011c2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011c2a:	2300      	movs	r3, #0
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3710      	adds	r7, #16
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011c34:	b084      	sub	sp, #16
 8011c36:	b580      	push	{r7, lr}
 8011c38:	b086      	sub	sp, #24
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
 8011c3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011c46:	2300      	movs	r3, #0
 8011c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011c4e:	2300      	movs	r3, #0
 8011c50:	613b      	str	r3, [r7, #16]
 8011c52:	e009      	b.n	8011c68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	3340      	adds	r3, #64	; 0x40
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	4413      	add	r3, r2
 8011c5e:	2200      	movs	r2, #0
 8011c60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	3301      	adds	r3, #1
 8011c66:	613b      	str	r3, [r7, #16]
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	2b0e      	cmp	r3, #14
 8011c6c:	d9f2      	bls.n	8011c54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d11c      	bne.n	8011cae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	68fa      	ldr	r2, [r7, #12]
 8011c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c82:	f043 0302 	orr.w	r3, r3, #2
 8011c86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ca4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	639a      	str	r2, [r3, #56]	; 0x38
 8011cac:	e00b      	b.n	8011cc6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ccc:	461a      	mov	r2, r3
 8011cce:	2300      	movs	r3, #0
 8011cd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cd8:	4619      	mov	r1, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	680b      	ldr	r3, [r1, #0]
 8011ce4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	d10c      	bne.n	8011d06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d104      	bne.n	8011cfc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f000 f965 	bl	8011fc4 <USB_SetDevSpeed>
 8011cfa:	e008      	b.n	8011d0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011cfc:	2101      	movs	r1, #1
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f000 f960 	bl	8011fc4 <USB_SetDevSpeed>
 8011d04:	e003      	b.n	8011d0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011d06:	2103      	movs	r1, #3
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f000 f95b 	bl	8011fc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011d0e:	2110      	movs	r1, #16
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f000 f8f3 	bl	8011efc <USB_FlushTxFifo>
 8011d16:	4603      	mov	r3, r0
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d001      	beq.n	8011d20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 f91f 	bl	8011f64 <USB_FlushRxFifo>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d36:	461a      	mov	r2, r3
 8011d38:	2300      	movs	r3, #0
 8011d3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d42:	461a      	mov	r2, r3
 8011d44:	2300      	movs	r3, #0
 8011d46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d4e:	461a      	mov	r2, r3
 8011d50:	2300      	movs	r3, #0
 8011d52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011d54:	2300      	movs	r3, #0
 8011d56:	613b      	str	r3, [r7, #16]
 8011d58:	e043      	b.n	8011de2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	015a      	lsls	r2, r3, #5
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	4413      	add	r3, r2
 8011d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d70:	d118      	bne.n	8011da4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d10a      	bne.n	8011d8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	015a      	lsls	r2, r3, #5
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	4413      	add	r3, r2
 8011d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d84:	461a      	mov	r2, r3
 8011d86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011d8a:	6013      	str	r3, [r2, #0]
 8011d8c:	e013      	b.n	8011db6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	015a      	lsls	r2, r3, #5
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	4413      	add	r3, r2
 8011d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011da0:	6013      	str	r3, [r2, #0]
 8011da2:	e008      	b.n	8011db6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	015a      	lsls	r2, r3, #5
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	4413      	add	r3, r2
 8011dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011db0:	461a      	mov	r2, r3
 8011db2:	2300      	movs	r3, #0
 8011db4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	015a      	lsls	r2, r3, #5
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	015a      	lsls	r2, r3, #5
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	4413      	add	r3, r2
 8011dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011dda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	3301      	adds	r3, #1
 8011de0:	613b      	str	r3, [r7, #16]
 8011de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de4:	693a      	ldr	r2, [r7, #16]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d3b7      	bcc.n	8011d5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011dea:	2300      	movs	r3, #0
 8011dec:	613b      	str	r3, [r7, #16]
 8011dee:	e043      	b.n	8011e78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	015a      	lsls	r2, r3, #5
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	4413      	add	r3, r2
 8011df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e06:	d118      	bne.n	8011e3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d10a      	bne.n	8011e24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	015a      	lsls	r2, r3, #5
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	4413      	add	r3, r2
 8011e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011e20:	6013      	str	r3, [r2, #0]
 8011e22:	e013      	b.n	8011e4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	015a      	lsls	r2, r3, #5
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	4413      	add	r3, r2
 8011e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e30:	461a      	mov	r2, r3
 8011e32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011e36:	6013      	str	r3, [r2, #0]
 8011e38:	e008      	b.n	8011e4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	015a      	lsls	r2, r3, #5
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	4413      	add	r3, r2
 8011e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e46:	461a      	mov	r2, r3
 8011e48:	2300      	movs	r3, #0
 8011e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	015a      	lsls	r2, r3, #5
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	4413      	add	r3, r2
 8011e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e58:	461a      	mov	r2, r3
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	015a      	lsls	r2, r3, #5
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	4413      	add	r3, r2
 8011e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011e70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	3301      	adds	r3, #1
 8011e76:	613b      	str	r3, [r7, #16]
 8011e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7a:	693a      	ldr	r2, [r7, #16]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d3b7      	bcc.n	8011df0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e86:	691b      	ldr	r3, [r3, #16]
 8011e88:	68fa      	ldr	r2, [r7, #12]
 8011e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2200      	movs	r2, #0
 8011e98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011ea0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d105      	bne.n	8011eb4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	699b      	ldr	r3, [r3, #24]
 8011eac:	f043 0210 	orr.w	r2, r3, #16
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	699a      	ldr	r2, [r3, #24]
 8011eb8:	4b0f      	ldr	r3, [pc, #60]	; (8011ef8 <USB_DevInit+0x2c4>)
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	687a      	ldr	r2, [r7, #4]
 8011ebe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d005      	beq.n	8011ed2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	699b      	ldr	r3, [r3, #24]
 8011eca:	f043 0208 	orr.w	r2, r3, #8
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d107      	bne.n	8011ee8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	699b      	ldr	r3, [r3, #24]
 8011edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ee0:	f043 0304 	orr.w	r3, r3, #4
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3718      	adds	r7, #24
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ef4:	b004      	add	sp, #16
 8011ef6:	4770      	bx	lr
 8011ef8:	803c3800 	.word	0x803c3800

08011efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011efc:	b480      	push	{r7}
 8011efe:	b085      	sub	sp, #20
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011f06:	2300      	movs	r3, #0
 8011f08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	4a13      	ldr	r2, [pc, #76]	; (8011f60 <USB_FlushTxFifo+0x64>)
 8011f14:	4293      	cmp	r3, r2
 8011f16:	d901      	bls.n	8011f1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011f18:	2303      	movs	r3, #3
 8011f1a:	e01b      	b.n	8011f54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	691b      	ldr	r3, [r3, #16]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	daf2      	bge.n	8011f0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011f24:	2300      	movs	r3, #0
 8011f26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	019b      	lsls	r3, r3, #6
 8011f2c:	f043 0220 	orr.w	r2, r3, #32
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	3301      	adds	r3, #1
 8011f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	4a08      	ldr	r2, [pc, #32]	; (8011f60 <USB_FlushTxFifo+0x64>)
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d901      	bls.n	8011f46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011f42:	2303      	movs	r3, #3
 8011f44:	e006      	b.n	8011f54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	691b      	ldr	r3, [r3, #16]
 8011f4a:	f003 0320 	and.w	r3, r3, #32
 8011f4e:	2b20      	cmp	r3, #32
 8011f50:	d0f0      	beq.n	8011f34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011f52:	2300      	movs	r3, #0
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3714      	adds	r7, #20
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr
 8011f60:	00030d40 	.word	0x00030d40

08011f64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b085      	sub	sp, #20
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	3301      	adds	r3, #1
 8011f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	4a11      	ldr	r2, [pc, #68]	; (8011fc0 <USB_FlushRxFifo+0x5c>)
 8011f7a:	4293      	cmp	r3, r2
 8011f7c:	d901      	bls.n	8011f82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011f7e:	2303      	movs	r3, #3
 8011f80:	e018      	b.n	8011fb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	691b      	ldr	r3, [r3, #16]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	daf2      	bge.n	8011f70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2210      	movs	r2, #16
 8011f92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	3301      	adds	r3, #1
 8011f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	4a08      	ldr	r2, [pc, #32]	; (8011fc0 <USB_FlushRxFifo+0x5c>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d901      	bls.n	8011fa6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011fa2:	2303      	movs	r3, #3
 8011fa4:	e006      	b.n	8011fb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	691b      	ldr	r3, [r3, #16]
 8011faa:	f003 0310 	and.w	r3, r3, #16
 8011fae:	2b10      	cmp	r3, #16
 8011fb0:	d0f0      	beq.n	8011f94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011fb2:	2300      	movs	r3, #0
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr
 8011fc0:	00030d40 	.word	0x00030d40

08011fc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b085      	sub	sp, #20
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	460b      	mov	r3, r1
 8011fce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	78fb      	ldrb	r3, [r7, #3]
 8011fde:	68f9      	ldr	r1, [r7, #12]
 8011fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011fe4:	4313      	orrs	r3, r2
 8011fe6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011fe8:	2300      	movs	r3, #0
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3714      	adds	r7, #20
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr

08011ff6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011ff6:	b480      	push	{r7}
 8011ff8:	b087      	sub	sp, #28
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012008:	689b      	ldr	r3, [r3, #8]
 801200a:	f003 0306 	and.w	r3, r3, #6
 801200e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d102      	bne.n	801201c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012016:	2300      	movs	r3, #0
 8012018:	75fb      	strb	r3, [r7, #23]
 801201a:	e00a      	b.n	8012032 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2b02      	cmp	r3, #2
 8012020:	d002      	beq.n	8012028 <USB_GetDevSpeed+0x32>
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2b06      	cmp	r3, #6
 8012026:	d102      	bne.n	801202e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012028:	2302      	movs	r3, #2
 801202a:	75fb      	strb	r3, [r7, #23]
 801202c:	e001      	b.n	8012032 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801202e:	230f      	movs	r3, #15
 8012030:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012032:	7dfb      	ldrb	r3, [r7, #23]
}
 8012034:	4618      	mov	r0, r3
 8012036:	371c      	adds	r7, #28
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr

08012040 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012040:	b480      	push	{r7}
 8012042:	b085      	sub	sp, #20
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	785b      	ldrb	r3, [r3, #1]
 8012058:	2b01      	cmp	r3, #1
 801205a:	d13a      	bne.n	80120d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012062:	69da      	ldr	r2, [r3, #28]
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	f003 030f 	and.w	r3, r3, #15
 801206c:	2101      	movs	r1, #1
 801206e:	fa01 f303 	lsl.w	r3, r1, r3
 8012072:	b29b      	uxth	r3, r3
 8012074:	68f9      	ldr	r1, [r7, #12]
 8012076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801207a:	4313      	orrs	r3, r2
 801207c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	015a      	lsls	r2, r3, #5
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	4413      	add	r3, r2
 8012086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012090:	2b00      	cmp	r3, #0
 8012092:	d155      	bne.n	8012140 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	015a      	lsls	r2, r3, #5
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	4413      	add	r3, r2
 801209c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	68db      	ldr	r3, [r3, #12]
 80120a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	791b      	ldrb	r3, [r3, #4]
 80120ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80120b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	059b      	lsls	r3, r3, #22
 80120b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80120b8:	4313      	orrs	r3, r2
 80120ba:	68ba      	ldr	r2, [r7, #8]
 80120bc:	0151      	lsls	r1, r2, #5
 80120be:	68fa      	ldr	r2, [r7, #12]
 80120c0:	440a      	add	r2, r1
 80120c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80120ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120ce:	6013      	str	r3, [r2, #0]
 80120d0:	e036      	b.n	8012140 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120d8:	69da      	ldr	r2, [r3, #28]
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	f003 030f 	and.w	r3, r3, #15
 80120e2:	2101      	movs	r1, #1
 80120e4:	fa01 f303 	lsl.w	r3, r1, r3
 80120e8:	041b      	lsls	r3, r3, #16
 80120ea:	68f9      	ldr	r1, [r7, #12]
 80120ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80120f0:	4313      	orrs	r3, r2
 80120f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	015a      	lsls	r2, r3, #5
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	4413      	add	r3, r2
 80120fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012106:	2b00      	cmp	r3, #0
 8012108:	d11a      	bne.n	8012140 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	015a      	lsls	r2, r3, #5
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	4413      	add	r3, r2
 8012112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	791b      	ldrb	r3, [r3, #4]
 8012124:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012126:	430b      	orrs	r3, r1
 8012128:	4313      	orrs	r3, r2
 801212a:	68ba      	ldr	r2, [r7, #8]
 801212c:	0151      	lsls	r1, r2, #5
 801212e:	68fa      	ldr	r2, [r7, #12]
 8012130:	440a      	add	r2, r1
 8012132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801213a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801213e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012140:	2300      	movs	r3, #0
}
 8012142:	4618      	mov	r0, r3
 8012144:	3714      	adds	r7, #20
 8012146:	46bd      	mov	sp, r7
 8012148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214c:	4770      	bx	lr
	...

08012150 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	785b      	ldrb	r3, [r3, #1]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d161      	bne.n	8012230 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	015a      	lsls	r2, r3, #5
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	4413      	add	r3, r2
 8012174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801217e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012182:	d11f      	bne.n	80121c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	015a      	lsls	r2, r3, #5
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	4413      	add	r3, r2
 801218c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	68ba      	ldr	r2, [r7, #8]
 8012194:	0151      	lsls	r1, r2, #5
 8012196:	68fa      	ldr	r2, [r7, #12]
 8012198:	440a      	add	r2, r1
 801219a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801219e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80121a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	015a      	lsls	r2, r3, #5
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	4413      	add	r3, r2
 80121ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	68ba      	ldr	r2, [r7, #8]
 80121b4:	0151      	lsls	r1, r2, #5
 80121b6:	68fa      	ldr	r2, [r7, #12]
 80121b8:	440a      	add	r2, r1
 80121ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80121c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	f003 030f 	and.w	r3, r3, #15
 80121d4:	2101      	movs	r1, #1
 80121d6:	fa01 f303 	lsl.w	r3, r1, r3
 80121da:	b29b      	uxth	r3, r3
 80121dc:	43db      	mvns	r3, r3
 80121de:	68f9      	ldr	r1, [r7, #12]
 80121e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121e4:	4013      	ands	r3, r2
 80121e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ee:	69da      	ldr	r2, [r3, #28]
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	f003 030f 	and.w	r3, r3, #15
 80121f8:	2101      	movs	r1, #1
 80121fa:	fa01 f303 	lsl.w	r3, r1, r3
 80121fe:	b29b      	uxth	r3, r3
 8012200:	43db      	mvns	r3, r3
 8012202:	68f9      	ldr	r1, [r7, #12]
 8012204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012208:	4013      	ands	r3, r2
 801220a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	015a      	lsls	r2, r3, #5
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	4413      	add	r3, r2
 8012214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012218:	681a      	ldr	r2, [r3, #0]
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	0159      	lsls	r1, r3, #5
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	440b      	add	r3, r1
 8012222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012226:	4619      	mov	r1, r3
 8012228:	4b35      	ldr	r3, [pc, #212]	; (8012300 <USB_DeactivateEndpoint+0x1b0>)
 801222a:	4013      	ands	r3, r2
 801222c:	600b      	str	r3, [r1, #0]
 801222e:	e060      	b.n	80122f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	015a      	lsls	r2, r3, #5
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	4413      	add	r3, r2
 8012238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012246:	d11f      	bne.n	8012288 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	015a      	lsls	r2, r3, #5
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	4413      	add	r3, r2
 8012250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	68ba      	ldr	r2, [r7, #8]
 8012258:	0151      	lsls	r1, r2, #5
 801225a:	68fa      	ldr	r2, [r7, #12]
 801225c:	440a      	add	r2, r1
 801225e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012262:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012266:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012268:	68bb      	ldr	r3, [r7, #8]
 801226a:	015a      	lsls	r2, r3, #5
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	4413      	add	r3, r2
 8012270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	68ba      	ldr	r2, [r7, #8]
 8012278:	0151      	lsls	r1, r2, #5
 801227a:	68fa      	ldr	r2, [r7, #12]
 801227c:	440a      	add	r2, r1
 801227e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012282:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012286:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801228e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	f003 030f 	and.w	r3, r3, #15
 8012298:	2101      	movs	r1, #1
 801229a:	fa01 f303 	lsl.w	r3, r1, r3
 801229e:	041b      	lsls	r3, r3, #16
 80122a0:	43db      	mvns	r3, r3
 80122a2:	68f9      	ldr	r1, [r7, #12]
 80122a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122a8:	4013      	ands	r3, r2
 80122aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122b2:	69da      	ldr	r2, [r3, #28]
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	f003 030f 	and.w	r3, r3, #15
 80122bc:	2101      	movs	r1, #1
 80122be:	fa01 f303 	lsl.w	r3, r1, r3
 80122c2:	041b      	lsls	r3, r3, #16
 80122c4:	43db      	mvns	r3, r3
 80122c6:	68f9      	ldr	r1, [r7, #12]
 80122c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122cc:	4013      	ands	r3, r2
 80122ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	015a      	lsls	r2, r3, #5
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	4413      	add	r3, r2
 80122d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	0159      	lsls	r1, r3, #5
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	440b      	add	r3, r1
 80122e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122ea:	4619      	mov	r1, r3
 80122ec:	4b05      	ldr	r3, [pc, #20]	; (8012304 <USB_DeactivateEndpoint+0x1b4>)
 80122ee:	4013      	ands	r3, r2
 80122f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80122f2:	2300      	movs	r3, #0
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3714      	adds	r7, #20
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr
 8012300:	ec337800 	.word	0xec337800
 8012304:	eff37800 	.word	0xeff37800

08012308 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b08a      	sub	sp, #40	; 0x28
 801230c:	af02      	add	r7, sp, #8
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	60b9      	str	r1, [r7, #8]
 8012312:	4613      	mov	r3, r2
 8012314:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	785b      	ldrb	r3, [r3, #1]
 8012324:	2b01      	cmp	r3, #1
 8012326:	f040 815c 	bne.w	80125e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	699b      	ldr	r3, [r3, #24]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d132      	bne.n	8012398 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	015a      	lsls	r2, r3, #5
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	4413      	add	r3, r2
 801233a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801233e:	691b      	ldr	r3, [r3, #16]
 8012340:	69ba      	ldr	r2, [r7, #24]
 8012342:	0151      	lsls	r1, r2, #5
 8012344:	69fa      	ldr	r2, [r7, #28]
 8012346:	440a      	add	r2, r1
 8012348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801234c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012350:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	015a      	lsls	r2, r3, #5
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	4413      	add	r3, r2
 801235e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	69ba      	ldr	r2, [r7, #24]
 8012366:	0151      	lsls	r1, r2, #5
 8012368:	69fa      	ldr	r2, [r7, #28]
 801236a:	440a      	add	r2, r1
 801236c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012376:	69bb      	ldr	r3, [r7, #24]
 8012378:	015a      	lsls	r2, r3, #5
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	4413      	add	r3, r2
 801237e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012382:	691b      	ldr	r3, [r3, #16]
 8012384:	69ba      	ldr	r2, [r7, #24]
 8012386:	0151      	lsls	r1, r2, #5
 8012388:	69fa      	ldr	r2, [r7, #28]
 801238a:	440a      	add	r2, r1
 801238c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012390:	0cdb      	lsrs	r3, r3, #19
 8012392:	04db      	lsls	r3, r3, #19
 8012394:	6113      	str	r3, [r2, #16]
 8012396:	e074      	b.n	8012482 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012398:	69bb      	ldr	r3, [r7, #24]
 801239a:	015a      	lsls	r2, r3, #5
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	4413      	add	r3, r2
 80123a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123a4:	691b      	ldr	r3, [r3, #16]
 80123a6:	69ba      	ldr	r2, [r7, #24]
 80123a8:	0151      	lsls	r1, r2, #5
 80123aa:	69fa      	ldr	r2, [r7, #28]
 80123ac:	440a      	add	r2, r1
 80123ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123b2:	0cdb      	lsrs	r3, r3, #19
 80123b4:	04db      	lsls	r3, r3, #19
 80123b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	015a      	lsls	r2, r3, #5
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	4413      	add	r3, r2
 80123c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123c4:	691b      	ldr	r3, [r3, #16]
 80123c6:	69ba      	ldr	r2, [r7, #24]
 80123c8:	0151      	lsls	r1, r2, #5
 80123ca:	69fa      	ldr	r2, [r7, #28]
 80123cc:	440a      	add	r2, r1
 80123ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80123d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80123da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80123dc:	69bb      	ldr	r3, [r7, #24]
 80123de:	015a      	lsls	r2, r3, #5
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	4413      	add	r3, r2
 80123e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	6999      	ldr	r1, [r3, #24]
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	68db      	ldr	r3, [r3, #12]
 80123f2:	440b      	add	r3, r1
 80123f4:	1e59      	subs	r1, r3, #1
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80123fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012400:	4b9d      	ldr	r3, [pc, #628]	; (8012678 <USB_EPStartXfer+0x370>)
 8012402:	400b      	ands	r3, r1
 8012404:	69b9      	ldr	r1, [r7, #24]
 8012406:	0148      	lsls	r0, r1, #5
 8012408:	69f9      	ldr	r1, [r7, #28]
 801240a:	4401      	add	r1, r0
 801240c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012410:	4313      	orrs	r3, r2
 8012412:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012414:	69bb      	ldr	r3, [r7, #24]
 8012416:	015a      	lsls	r2, r3, #5
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	4413      	add	r3, r2
 801241c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012420:	691a      	ldr	r2, [r3, #16]
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	699b      	ldr	r3, [r3, #24]
 8012426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801242a:	69b9      	ldr	r1, [r7, #24]
 801242c:	0148      	lsls	r0, r1, #5
 801242e:	69f9      	ldr	r1, [r7, #28]
 8012430:	4401      	add	r1, r0
 8012432:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012436:	4313      	orrs	r3, r2
 8012438:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	791b      	ldrb	r3, [r3, #4]
 801243e:	2b01      	cmp	r3, #1
 8012440:	d11f      	bne.n	8012482 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	015a      	lsls	r2, r3, #5
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	4413      	add	r3, r2
 801244a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801244e:	691b      	ldr	r3, [r3, #16]
 8012450:	69ba      	ldr	r2, [r7, #24]
 8012452:	0151      	lsls	r1, r2, #5
 8012454:	69fa      	ldr	r2, [r7, #28]
 8012456:	440a      	add	r2, r1
 8012458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801245c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012460:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012462:	69bb      	ldr	r3, [r7, #24]
 8012464:	015a      	lsls	r2, r3, #5
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	4413      	add	r3, r2
 801246a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801246e:	691b      	ldr	r3, [r3, #16]
 8012470:	69ba      	ldr	r2, [r7, #24]
 8012472:	0151      	lsls	r1, r2, #5
 8012474:	69fa      	ldr	r2, [r7, #28]
 8012476:	440a      	add	r2, r1
 8012478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801247c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012480:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012482:	79fb      	ldrb	r3, [r7, #7]
 8012484:	2b01      	cmp	r3, #1
 8012486:	d14b      	bne.n	8012520 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	695b      	ldr	r3, [r3, #20]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d009      	beq.n	80124a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	015a      	lsls	r2, r3, #5
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	4413      	add	r3, r2
 8012498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801249c:	461a      	mov	r2, r3
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	695b      	ldr	r3, [r3, #20]
 80124a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	791b      	ldrb	r3, [r3, #4]
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	d128      	bne.n	80124fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80124ac:	69fb      	ldr	r3, [r7, #28]
 80124ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124b2:	689b      	ldr	r3, [r3, #8]
 80124b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d110      	bne.n	80124de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	015a      	lsls	r2, r3, #5
 80124c0:	69fb      	ldr	r3, [r7, #28]
 80124c2:	4413      	add	r3, r2
 80124c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	69ba      	ldr	r2, [r7, #24]
 80124cc:	0151      	lsls	r1, r2, #5
 80124ce:	69fa      	ldr	r2, [r7, #28]
 80124d0:	440a      	add	r2, r1
 80124d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80124da:	6013      	str	r3, [r2, #0]
 80124dc:	e00f      	b.n	80124fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	015a      	lsls	r2, r3, #5
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	4413      	add	r3, r2
 80124e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	69ba      	ldr	r2, [r7, #24]
 80124ee:	0151      	lsls	r1, r2, #5
 80124f0:	69fa      	ldr	r2, [r7, #28]
 80124f2:	440a      	add	r2, r1
 80124f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80124fe:	69bb      	ldr	r3, [r7, #24]
 8012500:	015a      	lsls	r2, r3, #5
 8012502:	69fb      	ldr	r3, [r7, #28]
 8012504:	4413      	add	r3, r2
 8012506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	69ba      	ldr	r2, [r7, #24]
 801250e:	0151      	lsls	r1, r2, #5
 8012510:	69fa      	ldr	r2, [r7, #28]
 8012512:	440a      	add	r2, r1
 8012514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012518:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801251c:	6013      	str	r3, [r2, #0]
 801251e:	e133      	b.n	8012788 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	015a      	lsls	r2, r3, #5
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	4413      	add	r3, r2
 8012528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	69ba      	ldr	r2, [r7, #24]
 8012530:	0151      	lsls	r1, r2, #5
 8012532:	69fa      	ldr	r2, [r7, #28]
 8012534:	440a      	add	r2, r1
 8012536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801253a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801253e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	791b      	ldrb	r3, [r3, #4]
 8012544:	2b01      	cmp	r3, #1
 8012546:	d015      	beq.n	8012574 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	699b      	ldr	r3, [r3, #24]
 801254c:	2b00      	cmp	r3, #0
 801254e:	f000 811b 	beq.w	8012788 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	f003 030f 	and.w	r3, r3, #15
 8012562:	2101      	movs	r1, #1
 8012564:	fa01 f303 	lsl.w	r3, r1, r3
 8012568:	69f9      	ldr	r1, [r7, #28]
 801256a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801256e:	4313      	orrs	r3, r2
 8012570:	634b      	str	r3, [r1, #52]	; 0x34
 8012572:	e109      	b.n	8012788 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801257a:	689b      	ldr	r3, [r3, #8]
 801257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012580:	2b00      	cmp	r3, #0
 8012582:	d110      	bne.n	80125a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	015a      	lsls	r2, r3, #5
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	4413      	add	r3, r2
 801258c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	69ba      	ldr	r2, [r7, #24]
 8012594:	0151      	lsls	r1, r2, #5
 8012596:	69fa      	ldr	r2, [r7, #28]
 8012598:	440a      	add	r2, r1
 801259a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801259e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80125a2:	6013      	str	r3, [r2, #0]
 80125a4:	e00f      	b.n	80125c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	015a      	lsls	r2, r3, #5
 80125aa:	69fb      	ldr	r3, [r7, #28]
 80125ac:	4413      	add	r3, r2
 80125ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	69ba      	ldr	r2, [r7, #24]
 80125b6:	0151      	lsls	r1, r2, #5
 80125b8:	69fa      	ldr	r2, [r7, #28]
 80125ba:	440a      	add	r2, r1
 80125bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80125c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	6919      	ldr	r1, [r3, #16]
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	781a      	ldrb	r2, [r3, #0]
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	699b      	ldr	r3, [r3, #24]
 80125d2:	b298      	uxth	r0, r3
 80125d4:	79fb      	ldrb	r3, [r7, #7]
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	4603      	mov	r3, r0
 80125da:	68f8      	ldr	r0, [r7, #12]
 80125dc:	f000 fade 	bl	8012b9c <USB_WritePacket>
 80125e0:	e0d2      	b.n	8012788 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80125e2:	69bb      	ldr	r3, [r7, #24]
 80125e4:	015a      	lsls	r2, r3, #5
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	4413      	add	r3, r2
 80125ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125ee:	691b      	ldr	r3, [r3, #16]
 80125f0:	69ba      	ldr	r2, [r7, #24]
 80125f2:	0151      	lsls	r1, r2, #5
 80125f4:	69fa      	ldr	r2, [r7, #28]
 80125f6:	440a      	add	r2, r1
 80125f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125fc:	0cdb      	lsrs	r3, r3, #19
 80125fe:	04db      	lsls	r3, r3, #19
 8012600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	015a      	lsls	r2, r3, #5
 8012606:	69fb      	ldr	r3, [r7, #28]
 8012608:	4413      	add	r3, r2
 801260a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	69ba      	ldr	r2, [r7, #24]
 8012612:	0151      	lsls	r1, r2, #5
 8012614:	69fa      	ldr	r2, [r7, #28]
 8012616:	440a      	add	r2, r1
 8012618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801261c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012620:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012624:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	699b      	ldr	r3, [r3, #24]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d126      	bne.n	801267c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	015a      	lsls	r2, r3, #5
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	4413      	add	r3, r2
 8012636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801263a:	691a      	ldr	r2, [r3, #16]
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012644:	69b9      	ldr	r1, [r7, #24]
 8012646:	0148      	lsls	r0, r1, #5
 8012648:	69f9      	ldr	r1, [r7, #28]
 801264a:	4401      	add	r1, r0
 801264c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012650:	4313      	orrs	r3, r2
 8012652:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012654:	69bb      	ldr	r3, [r7, #24]
 8012656:	015a      	lsls	r2, r3, #5
 8012658:	69fb      	ldr	r3, [r7, #28]
 801265a:	4413      	add	r3, r2
 801265c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012660:	691b      	ldr	r3, [r3, #16]
 8012662:	69ba      	ldr	r2, [r7, #24]
 8012664:	0151      	lsls	r1, r2, #5
 8012666:	69fa      	ldr	r2, [r7, #28]
 8012668:	440a      	add	r2, r1
 801266a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801266e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012672:	6113      	str	r3, [r2, #16]
 8012674:	e03a      	b.n	80126ec <USB_EPStartXfer+0x3e4>
 8012676:	bf00      	nop
 8012678:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	699a      	ldr	r2, [r3, #24]
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	68db      	ldr	r3, [r3, #12]
 8012684:	4413      	add	r3, r2
 8012686:	1e5a      	subs	r2, r3, #1
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	68db      	ldr	r3, [r3, #12]
 801268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012690:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	68db      	ldr	r3, [r3, #12]
 8012696:	8afa      	ldrh	r2, [r7, #22]
 8012698:	fb03 f202 	mul.w	r2, r3, r2
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80126a0:	69bb      	ldr	r3, [r7, #24]
 80126a2:	015a      	lsls	r2, r3, #5
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	4413      	add	r3, r2
 80126a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126ac:	691a      	ldr	r2, [r3, #16]
 80126ae:	8afb      	ldrh	r3, [r7, #22]
 80126b0:	04d9      	lsls	r1, r3, #19
 80126b2:	4b38      	ldr	r3, [pc, #224]	; (8012794 <USB_EPStartXfer+0x48c>)
 80126b4:	400b      	ands	r3, r1
 80126b6:	69b9      	ldr	r1, [r7, #24]
 80126b8:	0148      	lsls	r0, r1, #5
 80126ba:	69f9      	ldr	r1, [r7, #28]
 80126bc:	4401      	add	r1, r0
 80126be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80126c2:	4313      	orrs	r3, r2
 80126c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80126c6:	69bb      	ldr	r3, [r7, #24]
 80126c8:	015a      	lsls	r2, r3, #5
 80126ca:	69fb      	ldr	r3, [r7, #28]
 80126cc:	4413      	add	r3, r2
 80126ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126d2:	691a      	ldr	r2, [r3, #16]
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	69db      	ldr	r3, [r3, #28]
 80126d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80126dc:	69b9      	ldr	r1, [r7, #24]
 80126de:	0148      	lsls	r0, r1, #5
 80126e0:	69f9      	ldr	r1, [r7, #28]
 80126e2:	4401      	add	r1, r0
 80126e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80126e8:	4313      	orrs	r3, r2
 80126ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80126ec:	79fb      	ldrb	r3, [r7, #7]
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d10d      	bne.n	801270e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	691b      	ldr	r3, [r3, #16]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d009      	beq.n	801270e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	6919      	ldr	r1, [r3, #16]
 80126fe:	69bb      	ldr	r3, [r7, #24]
 8012700:	015a      	lsls	r2, r3, #5
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	4413      	add	r3, r2
 8012706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801270a:	460a      	mov	r2, r1
 801270c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	791b      	ldrb	r3, [r3, #4]
 8012712:	2b01      	cmp	r3, #1
 8012714:	d128      	bne.n	8012768 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801271c:	689b      	ldr	r3, [r3, #8]
 801271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012722:	2b00      	cmp	r3, #0
 8012724:	d110      	bne.n	8012748 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012726:	69bb      	ldr	r3, [r7, #24]
 8012728:	015a      	lsls	r2, r3, #5
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	4413      	add	r3, r2
 801272e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	69ba      	ldr	r2, [r7, #24]
 8012736:	0151      	lsls	r1, r2, #5
 8012738:	69fa      	ldr	r2, [r7, #28]
 801273a:	440a      	add	r2, r1
 801273c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012740:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012744:	6013      	str	r3, [r2, #0]
 8012746:	e00f      	b.n	8012768 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012748:	69bb      	ldr	r3, [r7, #24]
 801274a:	015a      	lsls	r2, r3, #5
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	4413      	add	r3, r2
 8012750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	69ba      	ldr	r2, [r7, #24]
 8012758:	0151      	lsls	r1, r2, #5
 801275a:	69fa      	ldr	r2, [r7, #28]
 801275c:	440a      	add	r2, r1
 801275e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012766:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012768:	69bb      	ldr	r3, [r7, #24]
 801276a:	015a      	lsls	r2, r3, #5
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	4413      	add	r3, r2
 8012770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	69ba      	ldr	r2, [r7, #24]
 8012778:	0151      	lsls	r1, r2, #5
 801277a:	69fa      	ldr	r2, [r7, #28]
 801277c:	440a      	add	r2, r1
 801277e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012788:	2300      	movs	r3, #0
}
 801278a:	4618      	mov	r0, r3
 801278c:	3720      	adds	r7, #32
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	1ff80000 	.word	0x1ff80000

08012798 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012798:	b480      	push	{r7}
 801279a:	b087      	sub	sp, #28
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	4613      	mov	r3, r2
 80127a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	785b      	ldrb	r3, [r3, #1]
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	f040 80ce 	bne.w	8012956 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	699b      	ldr	r3, [r3, #24]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d132      	bne.n	8012828 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	015a      	lsls	r2, r3, #5
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	4413      	add	r3, r2
 80127ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127ce:	691b      	ldr	r3, [r3, #16]
 80127d0:	693a      	ldr	r2, [r7, #16]
 80127d2:	0151      	lsls	r1, r2, #5
 80127d4:	697a      	ldr	r2, [r7, #20]
 80127d6:	440a      	add	r2, r1
 80127d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80127e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80127e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	015a      	lsls	r2, r3, #5
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	4413      	add	r3, r2
 80127ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127f2:	691b      	ldr	r3, [r3, #16]
 80127f4:	693a      	ldr	r2, [r7, #16]
 80127f6:	0151      	lsls	r1, r2, #5
 80127f8:	697a      	ldr	r2, [r7, #20]
 80127fa:	440a      	add	r2, r1
 80127fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	015a      	lsls	r2, r3, #5
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	4413      	add	r3, r2
 801280e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	693a      	ldr	r2, [r7, #16]
 8012816:	0151      	lsls	r1, r2, #5
 8012818:	697a      	ldr	r2, [r7, #20]
 801281a:	440a      	add	r2, r1
 801281c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012820:	0cdb      	lsrs	r3, r3, #19
 8012822:	04db      	lsls	r3, r3, #19
 8012824:	6113      	str	r3, [r2, #16]
 8012826:	e04e      	b.n	80128c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012828:	693b      	ldr	r3, [r7, #16]
 801282a:	015a      	lsls	r2, r3, #5
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	4413      	add	r3, r2
 8012830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012834:	691b      	ldr	r3, [r3, #16]
 8012836:	693a      	ldr	r2, [r7, #16]
 8012838:	0151      	lsls	r1, r2, #5
 801283a:	697a      	ldr	r2, [r7, #20]
 801283c:	440a      	add	r2, r1
 801283e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012842:	0cdb      	lsrs	r3, r3, #19
 8012844:	04db      	lsls	r3, r3, #19
 8012846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	015a      	lsls	r2, r3, #5
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	4413      	add	r3, r2
 8012850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012854:	691b      	ldr	r3, [r3, #16]
 8012856:	693a      	ldr	r2, [r7, #16]
 8012858:	0151      	lsls	r1, r2, #5
 801285a:	697a      	ldr	r2, [r7, #20]
 801285c:	440a      	add	r2, r1
 801285e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012862:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012866:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801286a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	699a      	ldr	r2, [r3, #24]
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	429a      	cmp	r2, r3
 8012876:	d903      	bls.n	8012880 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	68da      	ldr	r2, [r3, #12]
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	015a      	lsls	r2, r3, #5
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	4413      	add	r3, r2
 8012888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801288c:	691b      	ldr	r3, [r3, #16]
 801288e:	693a      	ldr	r2, [r7, #16]
 8012890:	0151      	lsls	r1, r2, #5
 8012892:	697a      	ldr	r2, [r7, #20]
 8012894:	440a      	add	r2, r1
 8012896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801289a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801289e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	015a      	lsls	r2, r3, #5
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	4413      	add	r3, r2
 80128a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128ac:	691a      	ldr	r2, [r3, #16]
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	699b      	ldr	r3, [r3, #24]
 80128b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128b6:	6939      	ldr	r1, [r7, #16]
 80128b8:	0148      	lsls	r0, r1, #5
 80128ba:	6979      	ldr	r1, [r7, #20]
 80128bc:	4401      	add	r1, r0
 80128be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80128c2:	4313      	orrs	r3, r2
 80128c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80128c6:	79fb      	ldrb	r3, [r7, #7]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d11e      	bne.n	801290a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	695b      	ldr	r3, [r3, #20]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d009      	beq.n	80128e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	015a      	lsls	r2, r3, #5
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	4413      	add	r3, r2
 80128dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128e0:	461a      	mov	r2, r3
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	695b      	ldr	r3, [r3, #20]
 80128e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	015a      	lsls	r2, r3, #5
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	4413      	add	r3, r2
 80128f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	693a      	ldr	r2, [r7, #16]
 80128f8:	0151      	lsls	r1, r2, #5
 80128fa:	697a      	ldr	r2, [r7, #20]
 80128fc:	440a      	add	r2, r1
 80128fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012902:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012906:	6013      	str	r3, [r2, #0]
 8012908:	e097      	b.n	8012a3a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	015a      	lsls	r2, r3, #5
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	4413      	add	r3, r2
 8012912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	693a      	ldr	r2, [r7, #16]
 801291a:	0151      	lsls	r1, r2, #5
 801291c:	697a      	ldr	r2, [r7, #20]
 801291e:	440a      	add	r2, r1
 8012920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012924:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012928:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	699b      	ldr	r3, [r3, #24]
 801292e:	2b00      	cmp	r3, #0
 8012930:	f000 8083 	beq.w	8012a3a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801293a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	f003 030f 	and.w	r3, r3, #15
 8012944:	2101      	movs	r1, #1
 8012946:	fa01 f303 	lsl.w	r3, r1, r3
 801294a:	6979      	ldr	r1, [r7, #20]
 801294c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012950:	4313      	orrs	r3, r2
 8012952:	634b      	str	r3, [r1, #52]	; 0x34
 8012954:	e071      	b.n	8012a3a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	015a      	lsls	r2, r3, #5
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	4413      	add	r3, r2
 801295e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012962:	691b      	ldr	r3, [r3, #16]
 8012964:	693a      	ldr	r2, [r7, #16]
 8012966:	0151      	lsls	r1, r2, #5
 8012968:	697a      	ldr	r2, [r7, #20]
 801296a:	440a      	add	r2, r1
 801296c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012970:	0cdb      	lsrs	r3, r3, #19
 8012972:	04db      	lsls	r3, r3, #19
 8012974:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	015a      	lsls	r2, r3, #5
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	4413      	add	r3, r2
 801297e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012982:	691b      	ldr	r3, [r3, #16]
 8012984:	693a      	ldr	r2, [r7, #16]
 8012986:	0151      	lsls	r1, r2, #5
 8012988:	697a      	ldr	r2, [r7, #20]
 801298a:	440a      	add	r2, r1
 801298c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012998:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	699b      	ldr	r3, [r3, #24]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d003      	beq.n	80129aa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	68da      	ldr	r2, [r3, #12]
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	68da      	ldr	r2, [r3, #12]
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	015a      	lsls	r2, r3, #5
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	4413      	add	r3, r2
 80129ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129be:	691b      	ldr	r3, [r3, #16]
 80129c0:	693a      	ldr	r2, [r7, #16]
 80129c2:	0151      	lsls	r1, r2, #5
 80129c4:	697a      	ldr	r2, [r7, #20]
 80129c6:	440a      	add	r2, r1
 80129c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80129cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80129d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	015a      	lsls	r2, r3, #5
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	4413      	add	r3, r2
 80129da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129de:	691a      	ldr	r2, [r3, #16]
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	69db      	ldr	r3, [r3, #28]
 80129e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80129e8:	6939      	ldr	r1, [r7, #16]
 80129ea:	0148      	lsls	r0, r1, #5
 80129ec:	6979      	ldr	r1, [r7, #20]
 80129ee:	4401      	add	r1, r0
 80129f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80129f4:	4313      	orrs	r3, r2
 80129f6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80129f8:	79fb      	ldrb	r3, [r7, #7]
 80129fa:	2b01      	cmp	r3, #1
 80129fc:	d10d      	bne.n	8012a1a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	691b      	ldr	r3, [r3, #16]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d009      	beq.n	8012a1a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	6919      	ldr	r1, [r3, #16]
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	015a      	lsls	r2, r3, #5
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	4413      	add	r3, r2
 8012a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a16:	460a      	mov	r2, r1
 8012a18:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	015a      	lsls	r2, r3, #5
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	4413      	add	r3, r2
 8012a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	693a      	ldr	r2, [r7, #16]
 8012a2a:	0151      	lsls	r1, r2, #5
 8012a2c:	697a      	ldr	r2, [r7, #20]
 8012a2e:	440a      	add	r2, r1
 8012a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012a3a:	2300      	movs	r3, #0
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	371c      	adds	r7, #28
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr

08012a48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b087      	sub	sp, #28
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012a52:	2300      	movs	r3, #0
 8012a54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012a56:	2300      	movs	r3, #0
 8012a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	785b      	ldrb	r3, [r3, #1]
 8012a62:	2b01      	cmp	r3, #1
 8012a64:	d14a      	bne.n	8012afc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	015a      	lsls	r2, r3, #5
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	4413      	add	r3, r2
 8012a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a7e:	f040 8086 	bne.w	8012b8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	015a      	lsls	r2, r3, #5
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	683a      	ldr	r2, [r7, #0]
 8012a94:	7812      	ldrb	r2, [r2, #0]
 8012a96:	0151      	lsls	r1, r2, #5
 8012a98:	693a      	ldr	r2, [r7, #16]
 8012a9a:	440a      	add	r2, r1
 8012a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012aa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012aa4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	015a      	lsls	r2, r3, #5
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	4413      	add	r3, r2
 8012ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	683a      	ldr	r2, [r7, #0]
 8012ab8:	7812      	ldrb	r2, [r2, #0]
 8012aba:	0151      	lsls	r1, r2, #5
 8012abc:	693a      	ldr	r2, [r7, #16]
 8012abe:	440a      	add	r2, r1
 8012ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012ac8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	3301      	adds	r3, #1
 8012ace:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f242 7210 	movw	r2, #10000	; 0x2710
 8012ad6:	4293      	cmp	r3, r2
 8012ad8:	d902      	bls.n	8012ae0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012ada:	2301      	movs	r3, #1
 8012adc:	75fb      	strb	r3, [r7, #23]
          break;
 8012ade:	e056      	b.n	8012b8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	015a      	lsls	r2, r3, #5
 8012ae6:	693b      	ldr	r3, [r7, #16]
 8012ae8:	4413      	add	r3, r2
 8012aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012af8:	d0e7      	beq.n	8012aca <USB_EPStopXfer+0x82>
 8012afa:	e048      	b.n	8012b8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	015a      	lsls	r2, r3, #5
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	4413      	add	r3, r2
 8012b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b14:	d13b      	bne.n	8012b8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	015a      	lsls	r2, r3, #5
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	4413      	add	r3, r2
 8012b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	683a      	ldr	r2, [r7, #0]
 8012b28:	7812      	ldrb	r2, [r2, #0]
 8012b2a:	0151      	lsls	r1, r2, #5
 8012b2c:	693a      	ldr	r2, [r7, #16]
 8012b2e:	440a      	add	r2, r1
 8012b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012b38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	015a      	lsls	r2, r3, #5
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	4413      	add	r3, r2
 8012b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	683a      	ldr	r2, [r7, #0]
 8012b4c:	7812      	ldrb	r2, [r2, #0]
 8012b4e:	0151      	lsls	r1, r2, #5
 8012b50:	693a      	ldr	r2, [r7, #16]
 8012b52:	440a      	add	r2, r1
 8012b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	3301      	adds	r3, #1
 8012b62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	f242 7210 	movw	r2, #10000	; 0x2710
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d902      	bls.n	8012b74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012b6e:	2301      	movs	r3, #1
 8012b70:	75fb      	strb	r3, [r7, #23]
          break;
 8012b72:	e00c      	b.n	8012b8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	015a      	lsls	r2, r3, #5
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	4413      	add	r3, r2
 8012b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b8c:	d0e7      	beq.n	8012b5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	371c      	adds	r7, #28
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b089      	sub	sp, #36	; 0x24
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	60f8      	str	r0, [r7, #12]
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	4611      	mov	r1, r2
 8012ba8:	461a      	mov	r2, r3
 8012baa:	460b      	mov	r3, r1
 8012bac:	71fb      	strb	r3, [r7, #7]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d123      	bne.n	8012c0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012bc2:	88bb      	ldrh	r3, [r7, #4]
 8012bc4:	3303      	adds	r3, #3
 8012bc6:	089b      	lsrs	r3, r3, #2
 8012bc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012bca:	2300      	movs	r3, #0
 8012bcc:	61bb      	str	r3, [r7, #24]
 8012bce:	e018      	b.n	8012c02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012bd0:	79fb      	ldrb	r3, [r7, #7]
 8012bd2:	031a      	lsls	r2, r3, #12
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012bdc:	461a      	mov	r2, r3
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	3301      	adds	r3, #1
 8012be8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	3301      	adds	r3, #1
 8012bee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	61bb      	str	r3, [r7, #24]
 8012c02:	69ba      	ldr	r2, [r7, #24]
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d3e2      	bcc.n	8012bd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012c0a:	2300      	movs	r3, #0
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3724      	adds	r7, #36	; 0x24
 8012c10:	46bd      	mov	sp, r7
 8012c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c16:	4770      	bx	lr

08012c18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b08b      	sub	sp, #44	; 0x2c
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	60b9      	str	r1, [r7, #8]
 8012c22:	4613      	mov	r3, r2
 8012c24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012c2e:	88fb      	ldrh	r3, [r7, #6]
 8012c30:	089b      	lsrs	r3, r3, #2
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012c36:	88fb      	ldrh	r3, [r7, #6]
 8012c38:	f003 0303 	and.w	r3, r3, #3
 8012c3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012c3e:	2300      	movs	r3, #0
 8012c40:	623b      	str	r3, [r7, #32]
 8012c42:	e014      	b.n	8012c6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012c44:	69bb      	ldr	r3, [r7, #24]
 8012c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	3301      	adds	r3, #1
 8012c54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c58:	3301      	adds	r3, #1
 8012c5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5e:	3301      	adds	r3, #1
 8012c60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c64:	3301      	adds	r3, #1
 8012c66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012c68:	6a3b      	ldr	r3, [r7, #32]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	623b      	str	r3, [r7, #32]
 8012c6e:	6a3a      	ldr	r2, [r7, #32]
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d3e6      	bcc.n	8012c44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012c76:	8bfb      	ldrh	r3, [r7, #30]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d01e      	beq.n	8012cba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c86:	461a      	mov	r2, r3
 8012c88:	f107 0310 	add.w	r3, r7, #16
 8012c8c:	6812      	ldr	r2, [r2, #0]
 8012c8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012c90:	693a      	ldr	r2, [r7, #16]
 8012c92:	6a3b      	ldr	r3, [r7, #32]
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	00db      	lsls	r3, r3, #3
 8012c98:	fa22 f303 	lsr.w	r3, r2, r3
 8012c9c:	b2da      	uxtb	r2, r3
 8012c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca0:	701a      	strb	r2, [r3, #0]
      i++;
 8012ca2:	6a3b      	ldr	r3, [r7, #32]
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	623b      	str	r3, [r7, #32]
      pDest++;
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012caa:	3301      	adds	r3, #1
 8012cac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8012cae:	8bfb      	ldrh	r3, [r7, #30]
 8012cb0:	3b01      	subs	r3, #1
 8012cb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012cb4:	8bfb      	ldrh	r3, [r7, #30]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d1ea      	bne.n	8012c90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	372c      	adds	r7, #44	; 0x2c
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc6:	4770      	bx	lr

08012cc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	785b      	ldrb	r3, [r3, #1]
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	d12c      	bne.n	8012d3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	015a      	lsls	r2, r3, #5
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	4413      	add	r3, r2
 8012cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	db12      	blt.n	8012d1c <USB_EPSetStall+0x54>
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d00f      	beq.n	8012d1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	015a      	lsls	r2, r3, #5
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	4413      	add	r3, r2
 8012d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	68ba      	ldr	r2, [r7, #8]
 8012d0c:	0151      	lsls	r1, r2, #5
 8012d0e:	68fa      	ldr	r2, [r7, #12]
 8012d10:	440a      	add	r2, r1
 8012d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	015a      	lsls	r2, r3, #5
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	4413      	add	r3, r2
 8012d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	68ba      	ldr	r2, [r7, #8]
 8012d2c:	0151      	lsls	r1, r2, #5
 8012d2e:	68fa      	ldr	r2, [r7, #12]
 8012d30:	440a      	add	r2, r1
 8012d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d3a:	6013      	str	r3, [r2, #0]
 8012d3c:	e02b      	b.n	8012d96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	015a      	lsls	r2, r3, #5
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	4413      	add	r3, r2
 8012d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	db12      	blt.n	8012d76 <USB_EPSetStall+0xae>
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00f      	beq.n	8012d76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	015a      	lsls	r2, r3, #5
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	68ba      	ldr	r2, [r7, #8]
 8012d66:	0151      	lsls	r1, r2, #5
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	440a      	add	r2, r1
 8012d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	015a      	lsls	r2, r3, #5
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	68ba      	ldr	r2, [r7, #8]
 8012d86:	0151      	lsls	r1, r2, #5
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	440a      	add	r2, r1
 8012d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012d96:	2300      	movs	r3, #0
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3714      	adds	r7, #20
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da2:	4770      	bx	lr

08012da4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	785b      	ldrb	r3, [r3, #1]
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	d128      	bne.n	8012e12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	015a      	lsls	r2, r3, #5
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	4413      	add	r3, r2
 8012dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	68ba      	ldr	r2, [r7, #8]
 8012dd0:	0151      	lsls	r1, r2, #5
 8012dd2:	68fa      	ldr	r2, [r7, #12]
 8012dd4:	440a      	add	r2, r1
 8012dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012dde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	791b      	ldrb	r3, [r3, #4]
 8012de4:	2b03      	cmp	r3, #3
 8012de6:	d003      	beq.n	8012df0 <USB_EPClearStall+0x4c>
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	791b      	ldrb	r3, [r3, #4]
 8012dec:	2b02      	cmp	r3, #2
 8012dee:	d138      	bne.n	8012e62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	015a      	lsls	r2, r3, #5
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	4413      	add	r3, r2
 8012df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	68ba      	ldr	r2, [r7, #8]
 8012e00:	0151      	lsls	r1, r2, #5
 8012e02:	68fa      	ldr	r2, [r7, #12]
 8012e04:	440a      	add	r2, r1
 8012e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e0e:	6013      	str	r3, [r2, #0]
 8012e10:	e027      	b.n	8012e62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	015a      	lsls	r2, r3, #5
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	4413      	add	r3, r2
 8012e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	68ba      	ldr	r2, [r7, #8]
 8012e22:	0151      	lsls	r1, r2, #5
 8012e24:	68fa      	ldr	r2, [r7, #12]
 8012e26:	440a      	add	r2, r1
 8012e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	791b      	ldrb	r3, [r3, #4]
 8012e36:	2b03      	cmp	r3, #3
 8012e38:	d003      	beq.n	8012e42 <USB_EPClearStall+0x9e>
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	791b      	ldrb	r3, [r3, #4]
 8012e3e:	2b02      	cmp	r3, #2
 8012e40:	d10f      	bne.n	8012e62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	015a      	lsls	r2, r3, #5
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	4413      	add	r3, r2
 8012e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	68ba      	ldr	r2, [r7, #8]
 8012e52:	0151      	lsls	r1, r2, #5
 8012e54:	68fa      	ldr	r2, [r7, #12]
 8012e56:	440a      	add	r2, r1
 8012e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012e62:	2300      	movs	r3, #0
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3714      	adds	r7, #20
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6e:	4770      	bx	lr

08012e70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b085      	sub	sp, #20
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	460b      	mov	r3, r1
 8012e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	68fa      	ldr	r2, [r7, #12]
 8012e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012e92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	78fb      	ldrb	r3, [r7, #3]
 8012e9e:	011b      	lsls	r3, r3, #4
 8012ea0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012ea4:	68f9      	ldr	r1, [r7, #12]
 8012ea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012eae:	2300      	movs	r3, #0
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3714      	adds	r7, #20
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eba:	4770      	bx	lr

08012ebc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b085      	sub	sp, #20
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	68fa      	ldr	r2, [r7, #12]
 8012ed2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012ed6:	f023 0303 	bic.w	r3, r3, #3
 8012eda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012eea:	f023 0302 	bic.w	r3, r3, #2
 8012eee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3714      	adds	r7, #20
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efc:	4770      	bx	lr

08012efe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012efe:	b480      	push	{r7}
 8012f00:	b085      	sub	sp, #20
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	68fa      	ldr	r2, [r7, #12]
 8012f14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012f18:	f023 0303 	bic.w	r3, r3, #3
 8012f1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f24:	685b      	ldr	r3, [r3, #4]
 8012f26:	68fa      	ldr	r2, [r7, #12]
 8012f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f2c:	f043 0302 	orr.w	r3, r3, #2
 8012f30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012f32:	2300      	movs	r3, #0
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3714      	adds	r7, #20
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr

08012f40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b085      	sub	sp, #20
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	695b      	ldr	r3, [r3, #20]
 8012f4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	699b      	ldr	r3, [r3, #24]
 8012f52:	68fa      	ldr	r2, [r7, #12]
 8012f54:	4013      	ands	r3, r2
 8012f56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f58:	68fb      	ldr	r3, [r7, #12]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3714      	adds	r7, #20
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr

08012f66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f66:	b480      	push	{r7}
 8012f68:	b085      	sub	sp, #20
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f78:	699b      	ldr	r3, [r3, #24]
 8012f7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f82:	69db      	ldr	r3, [r3, #28]
 8012f84:	68ba      	ldr	r2, [r7, #8]
 8012f86:	4013      	ands	r3, r2
 8012f88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	0c1b      	lsrs	r3, r3, #16
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3714      	adds	r7, #20
 8012f92:	46bd      	mov	sp, r7
 8012f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f98:	4770      	bx	lr

08012f9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f9a:	b480      	push	{r7}
 8012f9c:	b085      	sub	sp, #20
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fac:	699b      	ldr	r3, [r3, #24]
 8012fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fb6:	69db      	ldr	r3, [r3, #28]
 8012fb8:	68ba      	ldr	r2, [r7, #8]
 8012fba:	4013      	ands	r3, r2
 8012fbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	b29b      	uxth	r3, r3
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3714      	adds	r7, #20
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fcc:	4770      	bx	lr

08012fce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012fce:	b480      	push	{r7}
 8012fd0:	b085      	sub	sp, #20
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	6078      	str	r0, [r7, #4]
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012fde:	78fb      	ldrb	r3, [r7, #3]
 8012fe0:	015a      	lsls	r2, r3, #5
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ff4:	695b      	ldr	r3, [r3, #20]
 8012ff6:	68ba      	ldr	r2, [r7, #8]
 8012ff8:	4013      	ands	r3, r2
 8012ffa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3714      	adds	r7, #20
 8013002:	46bd      	mov	sp, r7
 8013004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013008:	4770      	bx	lr

0801300a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801300a:	b480      	push	{r7}
 801300c:	b087      	sub	sp, #28
 801300e:	af00      	add	r7, sp, #0
 8013010:	6078      	str	r0, [r7, #4]
 8013012:	460b      	mov	r3, r1
 8013014:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013020:	691b      	ldr	r3, [r3, #16]
 8013022:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801302a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801302c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801302e:	78fb      	ldrb	r3, [r7, #3]
 8013030:	f003 030f 	and.w	r3, r3, #15
 8013034:	68fa      	ldr	r2, [r7, #12]
 8013036:	fa22 f303 	lsr.w	r3, r2, r3
 801303a:	01db      	lsls	r3, r3, #7
 801303c:	b2db      	uxtb	r3, r3
 801303e:	693a      	ldr	r2, [r7, #16]
 8013040:	4313      	orrs	r3, r2
 8013042:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013044:	78fb      	ldrb	r3, [r7, #3]
 8013046:	015a      	lsls	r2, r3, #5
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	4413      	add	r3, r2
 801304c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013050:	689b      	ldr	r3, [r3, #8]
 8013052:	693a      	ldr	r2, [r7, #16]
 8013054:	4013      	ands	r3, r2
 8013056:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013058:	68bb      	ldr	r3, [r7, #8]
}
 801305a:	4618      	mov	r0, r3
 801305c:	371c      	adds	r7, #28
 801305e:	46bd      	mov	sp, r7
 8013060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013064:	4770      	bx	lr

08013066 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013066:	b480      	push	{r7}
 8013068:	b083      	sub	sp, #12
 801306a:	af00      	add	r7, sp, #0
 801306c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	695b      	ldr	r3, [r3, #20]
 8013072:	f003 0301 	and.w	r3, r3, #1
}
 8013076:	4618      	mov	r0, r3
 8013078:	370c      	adds	r7, #12
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr

08013082 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013082:	b480      	push	{r7}
 8013084:	b085      	sub	sp, #20
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	68fa      	ldr	r2, [r7, #12]
 8013098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801309c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80130a0:	f023 0307 	bic.w	r3, r3, #7
 80130a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	68fa      	ldr	r2, [r7, #12]
 80130b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80130b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80130ba:	2300      	movs	r3, #0
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3714      	adds	r7, #20
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr

080130c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80130c8:	b480      	push	{r7}
 80130ca:	b087      	sub	sp, #28
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	460b      	mov	r3, r1
 80130d2:	607a      	str	r2, [r7, #4]
 80130d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	333c      	adds	r3, #60	; 0x3c
 80130de:	3304      	adds	r3, #4
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	4a26      	ldr	r2, [pc, #152]	; (8013180 <USB_EP0_OutStart+0xb8>)
 80130e8:	4293      	cmp	r3, r2
 80130ea:	d90a      	bls.n	8013102 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80130fc:	d101      	bne.n	8013102 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80130fe:	2300      	movs	r3, #0
 8013100:	e037      	b.n	8013172 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013108:	461a      	mov	r2, r3
 801310a:	2300      	movs	r3, #0
 801310c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013114:	691b      	ldr	r3, [r3, #16]
 8013116:	697a      	ldr	r2, [r7, #20]
 8013118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801311c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013120:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013128:	691b      	ldr	r3, [r3, #16]
 801312a:	697a      	ldr	r2, [r7, #20]
 801312c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013130:	f043 0318 	orr.w	r3, r3, #24
 8013134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	697a      	ldr	r2, [r7, #20]
 8013140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013144:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013148:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801314a:	7afb      	ldrb	r3, [r7, #11]
 801314c:	2b01      	cmp	r3, #1
 801314e:	d10f      	bne.n	8013170 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013156:	461a      	mov	r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	697a      	ldr	r2, [r7, #20]
 8013166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801316a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801316e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013170:	2300      	movs	r3, #0
}
 8013172:	4618      	mov	r0, r3
 8013174:	371c      	adds	r7, #28
 8013176:	46bd      	mov	sp, r7
 8013178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317c:	4770      	bx	lr
 801317e:	bf00      	nop
 8013180:	4f54300a 	.word	0x4f54300a

08013184 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013184:	b480      	push	{r7}
 8013186:	b085      	sub	sp, #20
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801318c:	2300      	movs	r3, #0
 801318e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	3301      	adds	r3, #1
 8013194:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	4a13      	ldr	r2, [pc, #76]	; (80131e8 <USB_CoreReset+0x64>)
 801319a:	4293      	cmp	r3, r2
 801319c:	d901      	bls.n	80131a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801319e:	2303      	movs	r3, #3
 80131a0:	e01b      	b.n	80131da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	691b      	ldr	r3, [r3, #16]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	daf2      	bge.n	8013190 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80131aa:	2300      	movs	r3, #0
 80131ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	691b      	ldr	r3, [r3, #16]
 80131b2:	f043 0201 	orr.w	r2, r3, #1
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	3301      	adds	r3, #1
 80131be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	4a09      	ldr	r2, [pc, #36]	; (80131e8 <USB_CoreReset+0x64>)
 80131c4:	4293      	cmp	r3, r2
 80131c6:	d901      	bls.n	80131cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80131c8:	2303      	movs	r3, #3
 80131ca:	e006      	b.n	80131da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	691b      	ldr	r3, [r3, #16]
 80131d0:	f003 0301 	and.w	r3, r3, #1
 80131d4:	2b01      	cmp	r3, #1
 80131d6:	d0f0      	beq.n	80131ba <USB_CoreReset+0x36>

  return HAL_OK;
 80131d8:	2300      	movs	r3, #0
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3714      	adds	r7, #20
 80131de:	46bd      	mov	sp, r7
 80131e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop
 80131e8:	00030d40 	.word	0x00030d40

080131ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	460b      	mov	r3, r1
 80131f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80131f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80131fc:	f005 fdea 	bl	8018dd4 <USBD_static_malloc>
 8013200:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d109      	bne.n	801321c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	32b0      	adds	r2, #176	; 0xb0
 8013212:	2100      	movs	r1, #0
 8013214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013218:	2302      	movs	r3, #2
 801321a:	e0d4      	b.n	80133c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801321c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8013220:	2100      	movs	r1, #0
 8013222:	68f8      	ldr	r0, [r7, #12]
 8013224:	f005 ff45 	bl	80190b2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	32b0      	adds	r2, #176	; 0xb0
 8013232:	68f9      	ldr	r1, [r7, #12]
 8013234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	32b0      	adds	r2, #176	; 0xb0
 8013242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	7c1b      	ldrb	r3, [r3, #16]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d138      	bne.n	80132c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013254:	4b5e      	ldr	r3, [pc, #376]	; (80133d0 <USBD_CDC_Init+0x1e4>)
 8013256:	7819      	ldrb	r1, [r3, #0]
 8013258:	f44f 7300 	mov.w	r3, #512	; 0x200
 801325c:	2202      	movs	r2, #2
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f005 fc95 	bl	8018b8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013264:	4b5a      	ldr	r3, [pc, #360]	; (80133d0 <USBD_CDC_Init+0x1e4>)
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	f003 020f 	and.w	r2, r3, #15
 801326c:	6879      	ldr	r1, [r7, #4]
 801326e:	4613      	mov	r3, r2
 8013270:	009b      	lsls	r3, r3, #2
 8013272:	4413      	add	r3, r2
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	440b      	add	r3, r1
 8013278:	3324      	adds	r3, #36	; 0x24
 801327a:	2201      	movs	r2, #1
 801327c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801327e:	4b55      	ldr	r3, [pc, #340]	; (80133d4 <USBD_CDC_Init+0x1e8>)
 8013280:	7819      	ldrb	r1, [r3, #0]
 8013282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013286:	2202      	movs	r2, #2
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f005 fc80 	bl	8018b8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801328e:	4b51      	ldr	r3, [pc, #324]	; (80133d4 <USBD_CDC_Init+0x1e8>)
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	f003 020f 	and.w	r2, r3, #15
 8013296:	6879      	ldr	r1, [r7, #4]
 8013298:	4613      	mov	r3, r2
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	4413      	add	r3, r2
 801329e:	009b      	lsls	r3, r3, #2
 80132a0:	440b      	add	r3, r1
 80132a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80132a6:	2201      	movs	r2, #1
 80132a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80132aa:	4b4b      	ldr	r3, [pc, #300]	; (80133d8 <USBD_CDC_Init+0x1ec>)
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	f003 020f 	and.w	r2, r3, #15
 80132b2:	6879      	ldr	r1, [r7, #4]
 80132b4:	4613      	mov	r3, r2
 80132b6:	009b      	lsls	r3, r3, #2
 80132b8:	4413      	add	r3, r2
 80132ba:	009b      	lsls	r3, r3, #2
 80132bc:	440b      	add	r3, r1
 80132be:	3326      	adds	r3, #38	; 0x26
 80132c0:	2210      	movs	r2, #16
 80132c2:	801a      	strh	r2, [r3, #0]
 80132c4:	e035      	b.n	8013332 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80132c6:	4b42      	ldr	r3, [pc, #264]	; (80133d0 <USBD_CDC_Init+0x1e4>)
 80132c8:	7819      	ldrb	r1, [r3, #0]
 80132ca:	2340      	movs	r3, #64	; 0x40
 80132cc:	2202      	movs	r2, #2
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f005 fc5d 	bl	8018b8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80132d4:	4b3e      	ldr	r3, [pc, #248]	; (80133d0 <USBD_CDC_Init+0x1e4>)
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	f003 020f 	and.w	r2, r3, #15
 80132dc:	6879      	ldr	r1, [r7, #4]
 80132de:	4613      	mov	r3, r2
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	4413      	add	r3, r2
 80132e4:	009b      	lsls	r3, r3, #2
 80132e6:	440b      	add	r3, r1
 80132e8:	3324      	adds	r3, #36	; 0x24
 80132ea:	2201      	movs	r2, #1
 80132ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80132ee:	4b39      	ldr	r3, [pc, #228]	; (80133d4 <USBD_CDC_Init+0x1e8>)
 80132f0:	7819      	ldrb	r1, [r3, #0]
 80132f2:	2340      	movs	r3, #64	; 0x40
 80132f4:	2202      	movs	r2, #2
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f005 fc49 	bl	8018b8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80132fc:	4b35      	ldr	r3, [pc, #212]	; (80133d4 <USBD_CDC_Init+0x1e8>)
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	f003 020f 	and.w	r2, r3, #15
 8013304:	6879      	ldr	r1, [r7, #4]
 8013306:	4613      	mov	r3, r2
 8013308:	009b      	lsls	r3, r3, #2
 801330a:	4413      	add	r3, r2
 801330c:	009b      	lsls	r3, r3, #2
 801330e:	440b      	add	r3, r1
 8013310:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013314:	2201      	movs	r2, #1
 8013316:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013318:	4b2f      	ldr	r3, [pc, #188]	; (80133d8 <USBD_CDC_Init+0x1ec>)
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	f003 020f 	and.w	r2, r3, #15
 8013320:	6879      	ldr	r1, [r7, #4]
 8013322:	4613      	mov	r3, r2
 8013324:	009b      	lsls	r3, r3, #2
 8013326:	4413      	add	r3, r2
 8013328:	009b      	lsls	r3, r3, #2
 801332a:	440b      	add	r3, r1
 801332c:	3326      	adds	r3, #38	; 0x26
 801332e:	2210      	movs	r2, #16
 8013330:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013332:	4b29      	ldr	r3, [pc, #164]	; (80133d8 <USBD_CDC_Init+0x1ec>)
 8013334:	7819      	ldrb	r1, [r3, #0]
 8013336:	2308      	movs	r3, #8
 8013338:	2203      	movs	r2, #3
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f005 fc27 	bl	8018b8e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013340:	4b25      	ldr	r3, [pc, #148]	; (80133d8 <USBD_CDC_Init+0x1ec>)
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	f003 020f 	and.w	r2, r3, #15
 8013348:	6879      	ldr	r1, [r7, #4]
 801334a:	4613      	mov	r3, r2
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	4413      	add	r3, r2
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	440b      	add	r3, r1
 8013354:	3324      	adds	r3, #36	; 0x24
 8013356:	2201      	movs	r2, #1
 8013358:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	2200      	movs	r2, #0
 801335e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	33b0      	adds	r3, #176	; 0xb0
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	4413      	add	r3, r2
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	2200      	movs	r2, #0
 801337a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2200      	movs	r2, #0
 8013382:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801338c:	2b00      	cmp	r3, #0
 801338e:	d101      	bne.n	8013394 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013390:	2302      	movs	r3, #2
 8013392:	e018      	b.n	80133c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	7c1b      	ldrb	r3, [r3, #16]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d10a      	bne.n	80133b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801339c:	4b0d      	ldr	r3, [pc, #52]	; (80133d4 <USBD_CDC_Init+0x1e8>)
 801339e:	7819      	ldrb	r1, [r3, #0]
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80133a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f005 fcde 	bl	8018d6c <USBD_LL_PrepareReceive>
 80133b0:	e008      	b.n	80133c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80133b2:	4b08      	ldr	r3, [pc, #32]	; (80133d4 <USBD_CDC_Init+0x1e8>)
 80133b4:	7819      	ldrb	r1, [r3, #0]
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80133bc:	2340      	movs	r3, #64	; 0x40
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f005 fcd4 	bl	8018d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80133c4:	2300      	movs	r3, #0
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3710      	adds	r7, #16
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	2000009f 	.word	0x2000009f
 80133d4:	200000a0 	.word	0x200000a0
 80133d8:	200000a1 	.word	0x200000a1

080133dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	460b      	mov	r3, r1
 80133e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80133e8:	4b3a      	ldr	r3, [pc, #232]	; (80134d4 <USBD_CDC_DeInit+0xf8>)
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	4619      	mov	r1, r3
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f005 fbf3 	bl	8018bda <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80133f4:	4b37      	ldr	r3, [pc, #220]	; (80134d4 <USBD_CDC_DeInit+0xf8>)
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	f003 020f 	and.w	r2, r3, #15
 80133fc:	6879      	ldr	r1, [r7, #4]
 80133fe:	4613      	mov	r3, r2
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	4413      	add	r3, r2
 8013404:	009b      	lsls	r3, r3, #2
 8013406:	440b      	add	r3, r1
 8013408:	3324      	adds	r3, #36	; 0x24
 801340a:	2200      	movs	r2, #0
 801340c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801340e:	4b32      	ldr	r3, [pc, #200]	; (80134d8 <USBD_CDC_DeInit+0xfc>)
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	4619      	mov	r1, r3
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f005 fbe0 	bl	8018bda <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801341a:	4b2f      	ldr	r3, [pc, #188]	; (80134d8 <USBD_CDC_DeInit+0xfc>)
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	f003 020f 	and.w	r2, r3, #15
 8013422:	6879      	ldr	r1, [r7, #4]
 8013424:	4613      	mov	r3, r2
 8013426:	009b      	lsls	r3, r3, #2
 8013428:	4413      	add	r3, r2
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	440b      	add	r3, r1
 801342e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013432:	2200      	movs	r2, #0
 8013434:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013436:	4b29      	ldr	r3, [pc, #164]	; (80134dc <USBD_CDC_DeInit+0x100>)
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	4619      	mov	r1, r3
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f005 fbcc 	bl	8018bda <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8013442:	4b26      	ldr	r3, [pc, #152]	; (80134dc <USBD_CDC_DeInit+0x100>)
 8013444:	781b      	ldrb	r3, [r3, #0]
 8013446:	f003 020f 	and.w	r2, r3, #15
 801344a:	6879      	ldr	r1, [r7, #4]
 801344c:	4613      	mov	r3, r2
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	4413      	add	r3, r2
 8013452:	009b      	lsls	r3, r3, #2
 8013454:	440b      	add	r3, r1
 8013456:	3324      	adds	r3, #36	; 0x24
 8013458:	2200      	movs	r2, #0
 801345a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801345c:	4b1f      	ldr	r3, [pc, #124]	; (80134dc <USBD_CDC_DeInit+0x100>)
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	f003 020f 	and.w	r2, r3, #15
 8013464:	6879      	ldr	r1, [r7, #4]
 8013466:	4613      	mov	r3, r2
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	4413      	add	r3, r2
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	440b      	add	r3, r1
 8013470:	3326      	adds	r3, #38	; 0x26
 8013472:	2200      	movs	r2, #0
 8013474:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	32b0      	adds	r2, #176	; 0xb0
 8013480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d01f      	beq.n	80134c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	33b0      	adds	r3, #176	; 0xb0
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	4413      	add	r3, r2
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	32b0      	adds	r2, #176	; 0xb0
 80134a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134aa:	4618      	mov	r0, r3
 80134ac:	f005 fca0 	bl	8018df0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	32b0      	adds	r2, #176	; 0xb0
 80134ba:	2100      	movs	r1, #0
 80134bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2200      	movs	r2, #0
 80134c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80134c8:	2300      	movs	r3, #0
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3708      	adds	r7, #8
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	2000009f 	.word	0x2000009f
 80134d8:	200000a0 	.word	0x200000a0
 80134dc:	200000a1 	.word	0x200000a1

080134e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b086      	sub	sp, #24
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	32b0      	adds	r2, #176	; 0xb0
 80134f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80134fa:	2300      	movs	r3, #0
 80134fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80134fe:	2300      	movs	r3, #0
 8013500:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013502:	2300      	movs	r3, #0
 8013504:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d101      	bne.n	8013510 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801350c:	2303      	movs	r3, #3
 801350e:	e0bf      	b.n	8013690 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013518:	2b00      	cmp	r3, #0
 801351a:	d050      	beq.n	80135be <USBD_CDC_Setup+0xde>
 801351c:	2b20      	cmp	r3, #32
 801351e:	f040 80af 	bne.w	8013680 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	88db      	ldrh	r3, [r3, #6]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d03a      	beq.n	80135a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	b25b      	sxtb	r3, r3
 8013530:	2b00      	cmp	r3, #0
 8013532:	da1b      	bge.n	801356c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801353a:	687a      	ldr	r2, [r7, #4]
 801353c:	33b0      	adds	r3, #176	; 0xb0
 801353e:	009b      	lsls	r3, r3, #2
 8013540:	4413      	add	r3, r2
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	683a      	ldr	r2, [r7, #0]
 8013548:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801354a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801354c:	683a      	ldr	r2, [r7, #0]
 801354e:	88d2      	ldrh	r2, [r2, #6]
 8013550:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	88db      	ldrh	r3, [r3, #6]
 8013556:	2b07      	cmp	r3, #7
 8013558:	bf28      	it	cs
 801355a:	2307      	movcs	r3, #7
 801355c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	89fa      	ldrh	r2, [r7, #14]
 8013562:	4619      	mov	r1, r3
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f001 fd43 	bl	8014ff0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801356a:	e090      	b.n	801368e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	785a      	ldrb	r2, [r3, #1]
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	88db      	ldrh	r3, [r3, #6]
 801357a:	2b3f      	cmp	r3, #63	; 0x3f
 801357c:	d803      	bhi.n	8013586 <USBD_CDC_Setup+0xa6>
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	88db      	ldrh	r3, [r3, #6]
 8013582:	b2da      	uxtb	r2, r3
 8013584:	e000      	b.n	8013588 <USBD_CDC_Setup+0xa8>
 8013586:	2240      	movs	r2, #64	; 0x40
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801358e:	6939      	ldr	r1, [r7, #16]
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013596:	461a      	mov	r2, r3
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f001 fd55 	bl	8015048 <USBD_CtlPrepareRx>
      break;
 801359e:	e076      	b.n	801368e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	33b0      	adds	r3, #176	; 0xb0
 80135aa:	009b      	lsls	r3, r3, #2
 80135ac:	4413      	add	r3, r2
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	689b      	ldr	r3, [r3, #8]
 80135b2:	683a      	ldr	r2, [r7, #0]
 80135b4:	7850      	ldrb	r0, [r2, #1]
 80135b6:	2200      	movs	r2, #0
 80135b8:	6839      	ldr	r1, [r7, #0]
 80135ba:	4798      	blx	r3
      break;
 80135bc:	e067      	b.n	801368e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	785b      	ldrb	r3, [r3, #1]
 80135c2:	2b0b      	cmp	r3, #11
 80135c4:	d851      	bhi.n	801366a <USBD_CDC_Setup+0x18a>
 80135c6:	a201      	add	r2, pc, #4	; (adr r2, 80135cc <USBD_CDC_Setup+0xec>)
 80135c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135cc:	080135fd 	.word	0x080135fd
 80135d0:	08013679 	.word	0x08013679
 80135d4:	0801366b 	.word	0x0801366b
 80135d8:	0801366b 	.word	0x0801366b
 80135dc:	0801366b 	.word	0x0801366b
 80135e0:	0801366b 	.word	0x0801366b
 80135e4:	0801366b 	.word	0x0801366b
 80135e8:	0801366b 	.word	0x0801366b
 80135ec:	0801366b 	.word	0x0801366b
 80135f0:	0801366b 	.word	0x0801366b
 80135f4:	08013627 	.word	0x08013627
 80135f8:	08013651 	.word	0x08013651
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013602:	b2db      	uxtb	r3, r3
 8013604:	2b03      	cmp	r3, #3
 8013606:	d107      	bne.n	8013618 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013608:	f107 030a 	add.w	r3, r7, #10
 801360c:	2202      	movs	r2, #2
 801360e:	4619      	mov	r1, r3
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f001 fced 	bl	8014ff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013616:	e032      	b.n	801367e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013618:	6839      	ldr	r1, [r7, #0]
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f001 fc77 	bl	8014f0e <USBD_CtlError>
            ret = USBD_FAIL;
 8013620:	2303      	movs	r3, #3
 8013622:	75fb      	strb	r3, [r7, #23]
          break;
 8013624:	e02b      	b.n	801367e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801362c:	b2db      	uxtb	r3, r3
 801362e:	2b03      	cmp	r3, #3
 8013630:	d107      	bne.n	8013642 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013632:	f107 030d 	add.w	r3, r7, #13
 8013636:	2201      	movs	r2, #1
 8013638:	4619      	mov	r1, r3
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f001 fcd8 	bl	8014ff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013640:	e01d      	b.n	801367e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013642:	6839      	ldr	r1, [r7, #0]
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f001 fc62 	bl	8014f0e <USBD_CtlError>
            ret = USBD_FAIL;
 801364a:	2303      	movs	r3, #3
 801364c:	75fb      	strb	r3, [r7, #23]
          break;
 801364e:	e016      	b.n	801367e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013656:	b2db      	uxtb	r3, r3
 8013658:	2b03      	cmp	r3, #3
 801365a:	d00f      	beq.n	801367c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801365c:	6839      	ldr	r1, [r7, #0]
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f001 fc55 	bl	8014f0e <USBD_CtlError>
            ret = USBD_FAIL;
 8013664:	2303      	movs	r3, #3
 8013666:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013668:	e008      	b.n	801367c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801366a:	6839      	ldr	r1, [r7, #0]
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f001 fc4e 	bl	8014f0e <USBD_CtlError>
          ret = USBD_FAIL;
 8013672:	2303      	movs	r3, #3
 8013674:	75fb      	strb	r3, [r7, #23]
          break;
 8013676:	e002      	b.n	801367e <USBD_CDC_Setup+0x19e>
          break;
 8013678:	bf00      	nop
 801367a:	e008      	b.n	801368e <USBD_CDC_Setup+0x1ae>
          break;
 801367c:	bf00      	nop
      }
      break;
 801367e:	e006      	b.n	801368e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013680:	6839      	ldr	r1, [r7, #0]
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f001 fc43 	bl	8014f0e <USBD_CtlError>
      ret = USBD_FAIL;
 8013688:	2303      	movs	r3, #3
 801368a:	75fb      	strb	r3, [r7, #23]
      break;
 801368c:	bf00      	nop
  }

  return (uint8_t)ret;
 801368e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013690:	4618      	mov	r0, r3
 8013692:	3718      	adds	r7, #24
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}

08013698 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b084      	sub	sp, #16
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	460b      	mov	r3, r1
 80136a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80136aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	32b0      	adds	r2, #176	; 0xb0
 80136b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d101      	bne.n	80136c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80136be:	2303      	movs	r3, #3
 80136c0:	e065      	b.n	801378e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	32b0      	adds	r2, #176	; 0xb0
 80136cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80136d2:	78fb      	ldrb	r3, [r7, #3]
 80136d4:	f003 020f 	and.w	r2, r3, #15
 80136d8:	6879      	ldr	r1, [r7, #4]
 80136da:	4613      	mov	r3, r2
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	4413      	add	r3, r2
 80136e0:	009b      	lsls	r3, r3, #2
 80136e2:	440b      	add	r3, r1
 80136e4:	3318      	adds	r3, #24
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d02f      	beq.n	801374c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80136ec:	78fb      	ldrb	r3, [r7, #3]
 80136ee:	f003 020f 	and.w	r2, r3, #15
 80136f2:	6879      	ldr	r1, [r7, #4]
 80136f4:	4613      	mov	r3, r2
 80136f6:	009b      	lsls	r3, r3, #2
 80136f8:	4413      	add	r3, r2
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	440b      	add	r3, r1
 80136fe:	3318      	adds	r3, #24
 8013700:	681a      	ldr	r2, [r3, #0]
 8013702:	78fb      	ldrb	r3, [r7, #3]
 8013704:	f003 010f 	and.w	r1, r3, #15
 8013708:	68f8      	ldr	r0, [r7, #12]
 801370a:	460b      	mov	r3, r1
 801370c:	00db      	lsls	r3, r3, #3
 801370e:	440b      	add	r3, r1
 8013710:	009b      	lsls	r3, r3, #2
 8013712:	4403      	add	r3, r0
 8013714:	3348      	adds	r3, #72	; 0x48
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	fbb2 f1f3 	udiv	r1, r2, r3
 801371c:	fb01 f303 	mul.w	r3, r1, r3
 8013720:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013722:	2b00      	cmp	r3, #0
 8013724:	d112      	bne.n	801374c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013726:	78fb      	ldrb	r3, [r7, #3]
 8013728:	f003 020f 	and.w	r2, r3, #15
 801372c:	6879      	ldr	r1, [r7, #4]
 801372e:	4613      	mov	r3, r2
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	4413      	add	r3, r2
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	440b      	add	r3, r1
 8013738:	3318      	adds	r3, #24
 801373a:	2200      	movs	r2, #0
 801373c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801373e:	78f9      	ldrb	r1, [r7, #3]
 8013740:	2300      	movs	r3, #0
 8013742:	2200      	movs	r2, #0
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f005 faf0 	bl	8018d2a <USBD_LL_Transmit>
 801374a:	e01f      	b.n	801378c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	2200      	movs	r2, #0
 8013750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	33b0      	adds	r3, #176	; 0xb0
 801375e:	009b      	lsls	r3, r3, #2
 8013760:	4413      	add	r3, r2
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	691b      	ldr	r3, [r3, #16]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d010      	beq.n	801378c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	33b0      	adds	r3, #176	; 0xb0
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4413      	add	r3, r2
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	691b      	ldr	r3, [r3, #16]
 801377c:	68ba      	ldr	r2, [r7, #8]
 801377e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013782:	68ba      	ldr	r2, [r7, #8]
 8013784:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013788:	78fa      	ldrb	r2, [r7, #3]
 801378a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801378c:	2300      	movs	r3, #0
}
 801378e:	4618      	mov	r0, r3
 8013790:	3710      	adds	r7, #16
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}

08013796 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013796:	b580      	push	{r7, lr}
 8013798:	b084      	sub	sp, #16
 801379a:	af00      	add	r7, sp, #0
 801379c:	6078      	str	r0, [r7, #4]
 801379e:	460b      	mov	r3, r1
 80137a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	32b0      	adds	r2, #176	; 0xb0
 80137ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	32b0      	adds	r2, #176	; 0xb0
 80137bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d101      	bne.n	80137c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80137c4:	2303      	movs	r3, #3
 80137c6:	e01a      	b.n	80137fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80137c8:	78fb      	ldrb	r3, [r7, #3]
 80137ca:	4619      	mov	r1, r3
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f005 faee 	bl	8018dae <USBD_LL_GetRxDataSize>
 80137d2:	4602      	mov	r2, r0
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	33b0      	adds	r3, #176	; 0xb0
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	4413      	add	r3, r2
 80137e8:	685b      	ldr	r3, [r3, #4]
 80137ea:	68db      	ldr	r3, [r3, #12]
 80137ec:	68fa      	ldr	r2, [r7, #12]
 80137ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80137f2:	68fa      	ldr	r2, [r7, #12]
 80137f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80137f8:	4611      	mov	r1, r2
 80137fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80137fc:	2300      	movs	r3, #0
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3710      	adds	r7, #16
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}

08013806 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013806:	b580      	push	{r7, lr}
 8013808:	b084      	sub	sp, #16
 801380a:	af00      	add	r7, sp, #0
 801380c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	32b0      	adds	r2, #176	; 0xb0
 8013818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801381c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d101      	bne.n	8013828 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013824:	2303      	movs	r3, #3
 8013826:	e025      	b.n	8013874 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	33b0      	adds	r3, #176	; 0xb0
 8013832:	009b      	lsls	r3, r3, #2
 8013834:	4413      	add	r3, r2
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d01a      	beq.n	8013872 <USBD_CDC_EP0_RxReady+0x6c>
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013842:	2bff      	cmp	r3, #255	; 0xff
 8013844:	d015      	beq.n	8013872 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	33b0      	adds	r3, #176	; 0xb0
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	4413      	add	r3, r2
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	68fa      	ldr	r2, [r7, #12]
 801385a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801385e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013860:	68fa      	ldr	r2, [r7, #12]
 8013862:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013866:	b292      	uxth	r2, r2
 8013868:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	22ff      	movs	r2, #255	; 0xff
 801386e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013872:	2300      	movs	r3, #0
}
 8013874:	4618      	mov	r0, r3
 8013876:	3710      	adds	r7, #16
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b086      	sub	sp, #24
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013884:	2182      	movs	r1, #130	; 0x82
 8013886:	4818      	ldr	r0, [pc, #96]	; (80138e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013888:	f000 fd09 	bl	801429e <USBD_GetEpDesc>
 801388c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801388e:	2101      	movs	r1, #1
 8013890:	4815      	ldr	r0, [pc, #84]	; (80138e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013892:	f000 fd04 	bl	801429e <USBD_GetEpDesc>
 8013896:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013898:	2181      	movs	r1, #129	; 0x81
 801389a:	4813      	ldr	r0, [pc, #76]	; (80138e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801389c:	f000 fcff 	bl	801429e <USBD_GetEpDesc>
 80138a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d002      	beq.n	80138ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	2210      	movs	r2, #16
 80138ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d006      	beq.n	80138c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	2200      	movs	r2, #0
 80138b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80138bc:	711a      	strb	r2, [r3, #4]
 80138be:	2200      	movs	r2, #0
 80138c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d006      	beq.n	80138d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2200      	movs	r2, #0
 80138cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80138d0:	711a      	strb	r2, [r3, #4]
 80138d2:	2200      	movs	r2, #0
 80138d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2243      	movs	r2, #67	; 0x43
 80138da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80138dc:	4b02      	ldr	r3, [pc, #8]	; (80138e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3718      	adds	r7, #24
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	2000005c 	.word	0x2000005c

080138ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b086      	sub	sp, #24
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80138f4:	2182      	movs	r1, #130	; 0x82
 80138f6:	4818      	ldr	r0, [pc, #96]	; (8013958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80138f8:	f000 fcd1 	bl	801429e <USBD_GetEpDesc>
 80138fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80138fe:	2101      	movs	r1, #1
 8013900:	4815      	ldr	r0, [pc, #84]	; (8013958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013902:	f000 fccc 	bl	801429e <USBD_GetEpDesc>
 8013906:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013908:	2181      	movs	r1, #129	; 0x81
 801390a:	4813      	ldr	r0, [pc, #76]	; (8013958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801390c:	f000 fcc7 	bl	801429e <USBD_GetEpDesc>
 8013910:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d002      	beq.n	801391e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	2210      	movs	r2, #16
 801391c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801391e:	693b      	ldr	r3, [r7, #16]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d006      	beq.n	8013932 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	2200      	movs	r2, #0
 8013928:	711a      	strb	r2, [r3, #4]
 801392a:	2200      	movs	r2, #0
 801392c:	f042 0202 	orr.w	r2, r2, #2
 8013930:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d006      	beq.n	8013946 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2200      	movs	r2, #0
 801393c:	711a      	strb	r2, [r3, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	f042 0202 	orr.w	r2, r2, #2
 8013944:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2243      	movs	r2, #67	; 0x43
 801394a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801394c:	4b02      	ldr	r3, [pc, #8]	; (8013958 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801394e:	4618      	mov	r0, r3
 8013950:	3718      	adds	r7, #24
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}
 8013956:	bf00      	nop
 8013958:	2000005c 	.word	0x2000005c

0801395c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b086      	sub	sp, #24
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013964:	2182      	movs	r1, #130	; 0x82
 8013966:	4818      	ldr	r0, [pc, #96]	; (80139c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013968:	f000 fc99 	bl	801429e <USBD_GetEpDesc>
 801396c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801396e:	2101      	movs	r1, #1
 8013970:	4815      	ldr	r0, [pc, #84]	; (80139c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013972:	f000 fc94 	bl	801429e <USBD_GetEpDesc>
 8013976:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013978:	2181      	movs	r1, #129	; 0x81
 801397a:	4813      	ldr	r0, [pc, #76]	; (80139c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801397c:	f000 fc8f 	bl	801429e <USBD_GetEpDesc>
 8013980:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d002      	beq.n	801398e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013988:	697b      	ldr	r3, [r7, #20]
 801398a:	2210      	movs	r2, #16
 801398c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d006      	beq.n	80139a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	2200      	movs	r2, #0
 8013998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801399c:	711a      	strb	r2, [r3, #4]
 801399e:	2200      	movs	r2, #0
 80139a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d006      	beq.n	80139b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2200      	movs	r2, #0
 80139ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139b0:	711a      	strb	r2, [r3, #4]
 80139b2:	2200      	movs	r2, #0
 80139b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2243      	movs	r2, #67	; 0x43
 80139ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80139bc:	4b02      	ldr	r3, [pc, #8]	; (80139c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3718      	adds	r7, #24
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
 80139c6:	bf00      	nop
 80139c8:	2000005c 	.word	0x2000005c

080139cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80139cc:	b480      	push	{r7}
 80139ce:	b083      	sub	sp, #12
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	220a      	movs	r2, #10
 80139d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80139da:	4b03      	ldr	r3, [pc, #12]	; (80139e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80139dc:	4618      	mov	r0, r3
 80139de:	370c      	adds	r7, #12
 80139e0:	46bd      	mov	sp, r7
 80139e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e6:	4770      	bx	lr
 80139e8:	20000018 	.word	0x20000018

080139ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80139fc:	2303      	movs	r3, #3
 80139fe:	e009      	b.n	8013a14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	33b0      	adds	r3, #176	; 0xb0
 8013a0a:	009b      	lsls	r3, r3, #2
 8013a0c:	4413      	add	r3, r2
 8013a0e:	683a      	ldr	r2, [r7, #0]
 8013a10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013a12:	2300      	movs	r3, #0
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	370c      	adds	r7, #12
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr

08013a20 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b087      	sub	sp, #28
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	32b0      	adds	r2, #176	; 0xb0
 8013a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a3a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013a42:	2303      	movs	r3, #3
 8013a44:	e008      	b.n	8013a58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	68ba      	ldr	r2, [r7, #8]
 8013a4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	687a      	ldr	r2, [r7, #4]
 8013a52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013a56:	2300      	movs	r3, #0
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	371c      	adds	r7, #28
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a62:	4770      	bx	lr

08013a64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013a64:	b480      	push	{r7}
 8013a66:	b085      	sub	sp, #20
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	32b0      	adds	r2, #176	; 0xb0
 8013a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d101      	bne.n	8013a88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013a84:	2303      	movs	r3, #3
 8013a86:	e004      	b.n	8013a92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	683a      	ldr	r2, [r7, #0]
 8013a8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013a90:	2300      	movs	r3, #0
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3714      	adds	r7, #20
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr
	...

08013aa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	32b0      	adds	r2, #176	; 0xb0
 8013ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ab6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	32b0      	adds	r2, #176	; 0xb0
 8013ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d101      	bne.n	8013ace <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013aca:	2303      	movs	r3, #3
 8013acc:	e018      	b.n	8013b00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	7c1b      	ldrb	r3, [r3, #16]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d10a      	bne.n	8013aec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013ad6:	4b0c      	ldr	r3, [pc, #48]	; (8013b08 <USBD_CDC_ReceivePacket+0x68>)
 8013ad8:	7819      	ldrb	r1, [r3, #0]
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f005 f941 	bl	8018d6c <USBD_LL_PrepareReceive>
 8013aea:	e008      	b.n	8013afe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013aec:	4b06      	ldr	r3, [pc, #24]	; (8013b08 <USBD_CDC_ReceivePacket+0x68>)
 8013aee:	7819      	ldrb	r1, [r3, #0]
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013af6:	2340      	movs	r3, #64	; 0x40
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f005 f937 	bl	8018d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013afe:	2300      	movs	r3, #0
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3710      	adds	r7, #16
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	200000a0 	.word	0x200000a0

08013b0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b086      	sub	sp, #24
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	4613      	mov	r3, r2
 8013b18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d101      	bne.n	8013b24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013b20:	2303      	movs	r3, #3
 8013b22:	e01f      	b.n	8013b64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	2200      	movs	r2, #0
 8013b28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	2200      	movs	r2, #0
 8013b38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d003      	beq.n	8013b4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	68ba      	ldr	r2, [r7, #8]
 8013b46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	79fa      	ldrb	r2, [r7, #7]
 8013b56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013b58:	68f8      	ldr	r0, [r7, #12]
 8013b5a:	f004 ffb1 	bl	8018ac0 <USBD_LL_Init>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3718      	adds	r7, #24
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013b76:	2300      	movs	r3, #0
 8013b78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d101      	bne.n	8013b84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013b80:	2303      	movs	r3, #3
 8013b82:	e025      	b.n	8013bd0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	683a      	ldr	r2, [r7, #0]
 8013b88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	32ae      	adds	r2, #174	; 0xae
 8013b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d00f      	beq.n	8013bc0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	32ae      	adds	r2, #174	; 0xae
 8013baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bb0:	f107 020e 	add.w	r2, r7, #14
 8013bb4:	4610      	mov	r0, r2
 8013bb6:	4798      	blx	r3
 8013bb8:	4602      	mov	r2, r0
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013bc6:	1c5a      	adds	r2, r3, #1
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013bce:	2300      	movs	r3, #0
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3710      	adds	r7, #16
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f004 ffb9 	bl	8018b58 <USBD_LL_Start>
 8013be6:	4603      	mov	r3, r0
}
 8013be8:	4618      	mov	r0, r3
 8013bea:	3708      	adds	r7, #8
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}

08013bf0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b083      	sub	sp, #12
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013bf8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	370c      	adds	r7, #12
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr

08013c06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c06:	b580      	push	{r7, lr}
 8013c08:	b084      	sub	sp, #16
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
 8013c0e:	460b      	mov	r3, r1
 8013c10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c12:	2300      	movs	r3, #0
 8013c14:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d009      	beq.n	8013c34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	78fa      	ldrb	r2, [r7, #3]
 8013c2a:	4611      	mov	r1, r2
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	4798      	blx	r3
 8013c30:	4603      	mov	r3, r0
 8013c32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3710      	adds	r7, #16
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}

08013c3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c3e:	b580      	push	{r7, lr}
 8013c40:	b084      	sub	sp, #16
 8013c42:	af00      	add	r7, sp, #0
 8013c44:	6078      	str	r0, [r7, #4]
 8013c46:	460b      	mov	r3, r1
 8013c48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c54:	685b      	ldr	r3, [r3, #4]
 8013c56:	78fa      	ldrb	r2, [r7, #3]
 8013c58:	4611      	mov	r1, r2
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	4798      	blx	r3
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d001      	beq.n	8013c68 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013c64:	2303      	movs	r3, #3
 8013c66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3710      	adds	r7, #16
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}

08013c72 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013c72:	b580      	push	{r7, lr}
 8013c74:	b084      	sub	sp, #16
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	6078      	str	r0, [r7, #4]
 8013c7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c82:	6839      	ldr	r1, [r7, #0]
 8013c84:	4618      	mov	r0, r3
 8013c86:	f001 f908 	bl	8014e9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013c98:	461a      	mov	r2, r3
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013ca6:	f003 031f 	and.w	r3, r3, #31
 8013caa:	2b02      	cmp	r3, #2
 8013cac:	d01a      	beq.n	8013ce4 <USBD_LL_SetupStage+0x72>
 8013cae:	2b02      	cmp	r3, #2
 8013cb0:	d822      	bhi.n	8013cf8 <USBD_LL_SetupStage+0x86>
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d002      	beq.n	8013cbc <USBD_LL_SetupStage+0x4a>
 8013cb6:	2b01      	cmp	r3, #1
 8013cb8:	d00a      	beq.n	8013cd0 <USBD_LL_SetupStage+0x5e>
 8013cba:	e01d      	b.n	8013cf8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f000 fb5f 	bl	8014388 <USBD_StdDevReq>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8013cce:	e020      	b.n	8013d12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 fbc7 	bl	801446c <USBD_StdItfReq>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8013ce2:	e016      	b.n	8013d12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013cea:	4619      	mov	r1, r3
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f000 fc29 	bl	8014544 <USBD_StdEPReq>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8013cf6:	e00c      	b.n	8013d12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013cfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013d02:	b2db      	uxtb	r3, r3
 8013d04:	4619      	mov	r1, r3
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f004 ff86 	bl	8018c18 <USBD_LL_StallEP>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8013d10:	bf00      	nop
  }

  return ret;
 8013d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3710      	adds	r7, #16
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b086      	sub	sp, #24
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	60f8      	str	r0, [r7, #12]
 8013d24:	460b      	mov	r3, r1
 8013d26:	607a      	str	r2, [r7, #4]
 8013d28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013d2e:	7afb      	ldrb	r3, [r7, #11]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d16e      	bne.n	8013e12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013d3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013d42:	2b03      	cmp	r3, #3
 8013d44:	f040 8098 	bne.w	8013e78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	689a      	ldr	r2, [r3, #8]
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	68db      	ldr	r3, [r3, #12]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d913      	bls.n	8013d7c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013d54:	693b      	ldr	r3, [r7, #16]
 8013d56:	689a      	ldr	r2, [r3, #8]
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	1ad2      	subs	r2, r2, r3
 8013d5e:	693b      	ldr	r3, [r7, #16]
 8013d60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	68da      	ldr	r2, [r3, #12]
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	689b      	ldr	r3, [r3, #8]
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	bf28      	it	cs
 8013d6e:	4613      	movcs	r3, r2
 8013d70:	461a      	mov	r2, r3
 8013d72:	6879      	ldr	r1, [r7, #4]
 8013d74:	68f8      	ldr	r0, [r7, #12]
 8013d76:	f001 f984 	bl	8015082 <USBD_CtlContinueRx>
 8013d7a:	e07d      	b.n	8013e78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d82:	f003 031f 	and.w	r3, r3, #31
 8013d86:	2b02      	cmp	r3, #2
 8013d88:	d014      	beq.n	8013db4 <USBD_LL_DataOutStage+0x98>
 8013d8a:	2b02      	cmp	r3, #2
 8013d8c:	d81d      	bhi.n	8013dca <USBD_LL_DataOutStage+0xae>
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d002      	beq.n	8013d98 <USBD_LL_DataOutStage+0x7c>
 8013d92:	2b01      	cmp	r3, #1
 8013d94:	d003      	beq.n	8013d9e <USBD_LL_DataOutStage+0x82>
 8013d96:	e018      	b.n	8013dca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	75bb      	strb	r3, [r7, #22]
            break;
 8013d9c:	e018      	b.n	8013dd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013da4:	b2db      	uxtb	r3, r3
 8013da6:	4619      	mov	r1, r3
 8013da8:	68f8      	ldr	r0, [r7, #12]
 8013daa:	f000 fa5e 	bl	801426a <USBD_CoreFindIF>
 8013dae:	4603      	mov	r3, r0
 8013db0:	75bb      	strb	r3, [r7, #22]
            break;
 8013db2:	e00d      	b.n	8013dd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013dba:	b2db      	uxtb	r3, r3
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	68f8      	ldr	r0, [r7, #12]
 8013dc0:	f000 fa60 	bl	8014284 <USBD_CoreFindEP>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	75bb      	strb	r3, [r7, #22]
            break;
 8013dc8:	e002      	b.n	8013dd0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	75bb      	strb	r3, [r7, #22]
            break;
 8013dce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013dd0:	7dbb      	ldrb	r3, [r7, #22]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d119      	bne.n	8013e0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ddc:	b2db      	uxtb	r3, r3
 8013dde:	2b03      	cmp	r3, #3
 8013de0:	d113      	bne.n	8013e0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013de2:	7dba      	ldrb	r2, [r7, #22]
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	32ae      	adds	r2, #174	; 0xae
 8013de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dec:	691b      	ldr	r3, [r3, #16]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00b      	beq.n	8013e0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013df2:	7dba      	ldrb	r2, [r7, #22]
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013dfa:	7dba      	ldrb	r2, [r7, #22]
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	32ae      	adds	r2, #174	; 0xae
 8013e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e04:	691b      	ldr	r3, [r3, #16]
 8013e06:	68f8      	ldr	r0, [r7, #12]
 8013e08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013e0a:	68f8      	ldr	r0, [r7, #12]
 8013e0c:	f001 f94a 	bl	80150a4 <USBD_CtlSendStatus>
 8013e10:	e032      	b.n	8013e78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013e12:	7afb      	ldrb	r3, [r7, #11]
 8013e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e18:	b2db      	uxtb	r3, r3
 8013e1a:	4619      	mov	r1, r3
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f000 fa31 	bl	8014284 <USBD_CoreFindEP>
 8013e22:	4603      	mov	r3, r0
 8013e24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013e26:	7dbb      	ldrb	r3, [r7, #22]
 8013e28:	2bff      	cmp	r3, #255	; 0xff
 8013e2a:	d025      	beq.n	8013e78 <USBD_LL_DataOutStage+0x15c>
 8013e2c:	7dbb      	ldrb	r3, [r7, #22]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d122      	bne.n	8013e78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e38:	b2db      	uxtb	r3, r3
 8013e3a:	2b03      	cmp	r3, #3
 8013e3c:	d117      	bne.n	8013e6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013e3e:	7dba      	ldrb	r2, [r7, #22]
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	32ae      	adds	r2, #174	; 0xae
 8013e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e48:	699b      	ldr	r3, [r3, #24]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d00f      	beq.n	8013e6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013e4e:	7dba      	ldrb	r2, [r7, #22]
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013e56:	7dba      	ldrb	r2, [r7, #22]
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	32ae      	adds	r2, #174	; 0xae
 8013e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e60:	699b      	ldr	r3, [r3, #24]
 8013e62:	7afa      	ldrb	r2, [r7, #11]
 8013e64:	4611      	mov	r1, r2
 8013e66:	68f8      	ldr	r0, [r7, #12]
 8013e68:	4798      	blx	r3
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013e6e:	7dfb      	ldrb	r3, [r7, #23]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d001      	beq.n	8013e78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013e74:	7dfb      	ldrb	r3, [r7, #23]
 8013e76:	e000      	b.n	8013e7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013e78:	2300      	movs	r3, #0
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3718      	adds	r7, #24
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}

08013e82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013e82:	b580      	push	{r7, lr}
 8013e84:	b086      	sub	sp, #24
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	60f8      	str	r0, [r7, #12]
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	607a      	str	r2, [r7, #4]
 8013e8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013e90:	7afb      	ldrb	r3, [r7, #11]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d16f      	bne.n	8013f76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	3314      	adds	r3, #20
 8013e9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013ea2:	2b02      	cmp	r3, #2
 8013ea4:	d15a      	bne.n	8013f5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	689a      	ldr	r2, [r3, #8]
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	68db      	ldr	r3, [r3, #12]
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d914      	bls.n	8013edc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	689a      	ldr	r2, [r3, #8]
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	68db      	ldr	r3, [r3, #12]
 8013eba:	1ad2      	subs	r2, r2, r3
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	689b      	ldr	r3, [r3, #8]
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	6879      	ldr	r1, [r7, #4]
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f001 f8ac 	bl	8015026 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013ece:	2300      	movs	r3, #0
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	2100      	movs	r1, #0
 8013ed4:	68f8      	ldr	r0, [r7, #12]
 8013ed6:	f004 ff49 	bl	8018d6c <USBD_LL_PrepareReceive>
 8013eda:	e03f      	b.n	8013f5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013edc:	693b      	ldr	r3, [r7, #16]
 8013ede:	68da      	ldr	r2, [r3, #12]
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	689b      	ldr	r3, [r3, #8]
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d11c      	bne.n	8013f22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	685a      	ldr	r2, [r3, #4]
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d316      	bcc.n	8013f22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	685a      	ldr	r2, [r3, #4]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d20f      	bcs.n	8013f22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013f02:	2200      	movs	r2, #0
 8013f04:	2100      	movs	r1, #0
 8013f06:	68f8      	ldr	r0, [r7, #12]
 8013f08:	f001 f88d 	bl	8015026 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f14:	2300      	movs	r3, #0
 8013f16:	2200      	movs	r2, #0
 8013f18:	2100      	movs	r1, #0
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	f004 ff26 	bl	8018d6c <USBD_LL_PrepareReceive>
 8013f20:	e01c      	b.n	8013f5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f28:	b2db      	uxtb	r3, r3
 8013f2a:	2b03      	cmp	r3, #3
 8013f2c:	d10f      	bne.n	8013f4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f34:	68db      	ldr	r3, [r3, #12]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d009      	beq.n	8013f4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	68f8      	ldr	r0, [r7, #12]
 8013f4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013f4e:	2180      	movs	r1, #128	; 0x80
 8013f50:	68f8      	ldr	r0, [r7, #12]
 8013f52:	f004 fe61 	bl	8018c18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013f56:	68f8      	ldr	r0, [r7, #12]
 8013f58:	f001 f8b7 	bl	80150ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d03a      	beq.n	8013fdc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013f66:	68f8      	ldr	r0, [r7, #12]
 8013f68:	f7ff fe42 	bl	8013bf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013f74:	e032      	b.n	8013fdc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013f76:	7afb      	ldrb	r3, [r7, #11]
 8013f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013f7c:	b2db      	uxtb	r3, r3
 8013f7e:	4619      	mov	r1, r3
 8013f80:	68f8      	ldr	r0, [r7, #12]
 8013f82:	f000 f97f 	bl	8014284 <USBD_CoreFindEP>
 8013f86:	4603      	mov	r3, r0
 8013f88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f8a:	7dfb      	ldrb	r3, [r7, #23]
 8013f8c:	2bff      	cmp	r3, #255	; 0xff
 8013f8e:	d025      	beq.n	8013fdc <USBD_LL_DataInStage+0x15a>
 8013f90:	7dfb      	ldrb	r3, [r7, #23]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d122      	bne.n	8013fdc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	2b03      	cmp	r3, #3
 8013fa0:	d11c      	bne.n	8013fdc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013fa2:	7dfa      	ldrb	r2, [r7, #23]
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	32ae      	adds	r2, #174	; 0xae
 8013fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fac:	695b      	ldr	r3, [r3, #20]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d014      	beq.n	8013fdc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013fb2:	7dfa      	ldrb	r2, [r7, #23]
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013fba:	7dfa      	ldrb	r2, [r7, #23]
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	32ae      	adds	r2, #174	; 0xae
 8013fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fc4:	695b      	ldr	r3, [r3, #20]
 8013fc6:	7afa      	ldrb	r2, [r7, #11]
 8013fc8:	4611      	mov	r1, r2
 8013fca:	68f8      	ldr	r0, [r7, #12]
 8013fcc:	4798      	blx	r3
 8013fce:	4603      	mov	r3, r0
 8013fd0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013fd2:	7dbb      	ldrb	r3, [r7, #22]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d001      	beq.n	8013fdc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013fd8:	7dbb      	ldrb	r3, [r7, #22]
 8013fda:	e000      	b.n	8013fde <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013fdc:	2300      	movs	r3, #0
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3718      	adds	r7, #24
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}

08013fe6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013fe6:	b580      	push	{r7, lr}
 8013fe8:	b084      	sub	sp, #16
 8013fea:	af00      	add	r7, sp, #0
 8013fec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2201      	movs	r2, #1
 8013ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2200      	movs	r2, #0
 8014006:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2200      	movs	r2, #0
 801400c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2200      	movs	r2, #0
 8014014:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801401e:	2b00      	cmp	r3, #0
 8014020:	d014      	beq.n	801404c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d00e      	beq.n	801404c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014034:	685b      	ldr	r3, [r3, #4]
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	6852      	ldr	r2, [r2, #4]
 801403a:	b2d2      	uxtb	r2, r2
 801403c:	4611      	mov	r1, r2
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	4798      	blx	r3
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d001      	beq.n	801404c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014048:	2303      	movs	r3, #3
 801404a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801404c:	2340      	movs	r3, #64	; 0x40
 801404e:	2200      	movs	r2, #0
 8014050:	2100      	movs	r1, #0
 8014052:	6878      	ldr	r0, [r7, #4]
 8014054:	f004 fd9b 	bl	8018b8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2201      	movs	r2, #1
 801405c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2240      	movs	r2, #64	; 0x40
 8014064:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014068:	2340      	movs	r3, #64	; 0x40
 801406a:	2200      	movs	r2, #0
 801406c:	2180      	movs	r1, #128	; 0x80
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f004 fd8d 	bl	8018b8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2201      	movs	r2, #1
 8014078:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2240      	movs	r2, #64	; 0x40
 801407e:	621a      	str	r2, [r3, #32]

  return ret;
 8014080:	7bfb      	ldrb	r3, [r7, #15]
}
 8014082:	4618      	mov	r0, r3
 8014084:	3710      	adds	r7, #16
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801408a:	b480      	push	{r7}
 801408c:	b083      	sub	sp, #12
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
 8014092:	460b      	mov	r3, r1
 8014094:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	78fa      	ldrb	r2, [r7, #3]
 801409a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801409c:	2300      	movs	r3, #0
}
 801409e:	4618      	mov	r0, r3
 80140a0:	370c      	adds	r7, #12
 80140a2:	46bd      	mov	sp, r7
 80140a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a8:	4770      	bx	lr

080140aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80140aa:	b480      	push	{r7}
 80140ac:	b083      	sub	sp, #12
 80140ae:	af00      	add	r7, sp, #0
 80140b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140b8:	b2da      	uxtb	r2, r3
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2204      	movs	r2, #4
 80140c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80140c8:	2300      	movs	r3, #0
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	370c      	adds	r7, #12
 80140ce:	46bd      	mov	sp, r7
 80140d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d4:	4770      	bx	lr

080140d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80140d6:	b480      	push	{r7}
 80140d8:	b083      	sub	sp, #12
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	2b04      	cmp	r3, #4
 80140e8:	d106      	bne.n	80140f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80140f0:	b2da      	uxtb	r2, r3
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80140f8:	2300      	movs	r3, #0
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	370c      	adds	r7, #12
 80140fe:	46bd      	mov	sp, r7
 8014100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014104:	4770      	bx	lr

08014106 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014106:	b580      	push	{r7, lr}
 8014108:	b082      	sub	sp, #8
 801410a:	af00      	add	r7, sp, #0
 801410c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014114:	b2db      	uxtb	r3, r3
 8014116:	2b03      	cmp	r3, #3
 8014118:	d110      	bne.n	801413c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014120:	2b00      	cmp	r3, #0
 8014122:	d00b      	beq.n	801413c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801412a:	69db      	ldr	r3, [r3, #28]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d005      	beq.n	801413c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014136:	69db      	ldr	r3, [r3, #28]
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801413c:	2300      	movs	r3, #0
}
 801413e:	4618      	mov	r0, r3
 8014140:	3708      	adds	r7, #8
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}

08014146 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014146:	b580      	push	{r7, lr}
 8014148:	b082      	sub	sp, #8
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
 801414e:	460b      	mov	r3, r1
 8014150:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	32ae      	adds	r2, #174	; 0xae
 801415c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d101      	bne.n	8014168 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014164:	2303      	movs	r3, #3
 8014166:	e01c      	b.n	80141a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801416e:	b2db      	uxtb	r3, r3
 8014170:	2b03      	cmp	r3, #3
 8014172:	d115      	bne.n	80141a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	32ae      	adds	r2, #174	; 0xae
 801417e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014182:	6a1b      	ldr	r3, [r3, #32]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d00b      	beq.n	80141a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	32ae      	adds	r2, #174	; 0xae
 8014192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014196:	6a1b      	ldr	r3, [r3, #32]
 8014198:	78fa      	ldrb	r2, [r7, #3]
 801419a:	4611      	mov	r1, r2
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80141a0:	2300      	movs	r3, #0
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}

080141aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80141aa:	b580      	push	{r7, lr}
 80141ac:	b082      	sub	sp, #8
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	6078      	str	r0, [r7, #4]
 80141b2:	460b      	mov	r3, r1
 80141b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	32ae      	adds	r2, #174	; 0xae
 80141c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d101      	bne.n	80141cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80141c8:	2303      	movs	r3, #3
 80141ca:	e01c      	b.n	8014206 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	2b03      	cmp	r3, #3
 80141d6:	d115      	bne.n	8014204 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	32ae      	adds	r2, #174	; 0xae
 80141e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d00b      	beq.n	8014204 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	32ae      	adds	r2, #174	; 0xae
 80141f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141fc:	78fa      	ldrb	r2, [r7, #3]
 80141fe:	4611      	mov	r1, r2
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}

0801420e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801420e:	b480      	push	{r7}
 8014210:	b083      	sub	sp, #12
 8014212:	af00      	add	r7, sp, #0
 8014214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014216:	2300      	movs	r3, #0
}
 8014218:	4618      	mov	r0, r3
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801422c:	2300      	movs	r3, #0
 801422e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2201      	movs	r2, #1
 8014234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801423e:	2b00      	cmp	r3, #0
 8014240:	d00e      	beq.n	8014260 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014248:	685b      	ldr	r3, [r3, #4]
 801424a:	687a      	ldr	r2, [r7, #4]
 801424c:	6852      	ldr	r2, [r2, #4]
 801424e:	b2d2      	uxtb	r2, r2
 8014250:	4611      	mov	r1, r2
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	4798      	blx	r3
 8014256:	4603      	mov	r3, r0
 8014258:	2b00      	cmp	r3, #0
 801425a:	d001      	beq.n	8014260 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801425c:	2303      	movs	r3, #3
 801425e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014260:	7bfb      	ldrb	r3, [r7, #15]
}
 8014262:	4618      	mov	r0, r3
 8014264:	3710      	adds	r7, #16
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}

0801426a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801426a:	b480      	push	{r7}
 801426c:	b083      	sub	sp, #12
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
 8014272:	460b      	mov	r3, r1
 8014274:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014276:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014278:	4618      	mov	r0, r3
 801427a:	370c      	adds	r7, #12
 801427c:	46bd      	mov	sp, r7
 801427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014282:	4770      	bx	lr

08014284 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014284:	b480      	push	{r7}
 8014286:	b083      	sub	sp, #12
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	460b      	mov	r3, r1
 801428e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014290:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014292:	4618      	mov	r0, r3
 8014294:	370c      	adds	r7, #12
 8014296:	46bd      	mov	sp, r7
 8014298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429c:	4770      	bx	lr

0801429e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801429e:	b580      	push	{r7, lr}
 80142a0:	b086      	sub	sp, #24
 80142a2:	af00      	add	r7, sp, #0
 80142a4:	6078      	str	r0, [r7, #4]
 80142a6:	460b      	mov	r3, r1
 80142a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80142b2:	2300      	movs	r3, #0
 80142b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	885b      	ldrh	r3, [r3, #2]
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d920      	bls.n	8014308 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80142ce:	e013      	b.n	80142f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80142d0:	f107 030a 	add.w	r3, r7, #10
 80142d4:	4619      	mov	r1, r3
 80142d6:	6978      	ldr	r0, [r7, #20]
 80142d8:	f000 f81b 	bl	8014312 <USBD_GetNextDesc>
 80142dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	785b      	ldrb	r3, [r3, #1]
 80142e2:	2b05      	cmp	r3, #5
 80142e4:	d108      	bne.n	80142f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	789b      	ldrb	r3, [r3, #2]
 80142ee:	78fa      	ldrb	r2, [r7, #3]
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d008      	beq.n	8014306 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80142f4:	2300      	movs	r3, #0
 80142f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	885b      	ldrh	r3, [r3, #2]
 80142fc:	b29a      	uxth	r2, r3
 80142fe:	897b      	ldrh	r3, [r7, #10]
 8014300:	429a      	cmp	r2, r3
 8014302:	d8e5      	bhi.n	80142d0 <USBD_GetEpDesc+0x32>
 8014304:	e000      	b.n	8014308 <USBD_GetEpDesc+0x6a>
          break;
 8014306:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014308:	693b      	ldr	r3, [r7, #16]
}
 801430a:	4618      	mov	r0, r3
 801430c:	3718      	adds	r7, #24
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}

08014312 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014312:	b480      	push	{r7}
 8014314:	b085      	sub	sp, #20
 8014316:	af00      	add	r7, sp, #0
 8014318:	6078      	str	r0, [r7, #4]
 801431a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	881a      	ldrh	r2, [r3, #0]
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	b29b      	uxth	r3, r3
 801432a:	4413      	add	r3, r2
 801432c:	b29a      	uxth	r2, r3
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	461a      	mov	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	4413      	add	r3, r2
 801433c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801433e:	68fb      	ldr	r3, [r7, #12]
}
 8014340:	4618      	mov	r0, r3
 8014342:	3714      	adds	r7, #20
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr

0801434c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801434c:	b480      	push	{r7}
 801434e:	b087      	sub	sp, #28
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	3301      	adds	r3, #1
 8014362:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801436a:	8a3b      	ldrh	r3, [r7, #16]
 801436c:	021b      	lsls	r3, r3, #8
 801436e:	b21a      	sxth	r2, r3
 8014370:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014374:	4313      	orrs	r3, r2
 8014376:	b21b      	sxth	r3, r3
 8014378:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801437a:	89fb      	ldrh	r3, [r7, #14]
}
 801437c:	4618      	mov	r0, r3
 801437e:	371c      	adds	r7, #28
 8014380:	46bd      	mov	sp, r7
 8014382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014386:	4770      	bx	lr

08014388 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b084      	sub	sp, #16
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014392:	2300      	movs	r3, #0
 8014394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801439e:	2b40      	cmp	r3, #64	; 0x40
 80143a0:	d005      	beq.n	80143ae <USBD_StdDevReq+0x26>
 80143a2:	2b40      	cmp	r3, #64	; 0x40
 80143a4:	d857      	bhi.n	8014456 <USBD_StdDevReq+0xce>
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d00f      	beq.n	80143ca <USBD_StdDevReq+0x42>
 80143aa:	2b20      	cmp	r3, #32
 80143ac:	d153      	bne.n	8014456 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	32ae      	adds	r2, #174	; 0xae
 80143b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143bc:	689b      	ldr	r3, [r3, #8]
 80143be:	6839      	ldr	r1, [r7, #0]
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	4798      	blx	r3
 80143c4:	4603      	mov	r3, r0
 80143c6:	73fb      	strb	r3, [r7, #15]
      break;
 80143c8:	e04a      	b.n	8014460 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	785b      	ldrb	r3, [r3, #1]
 80143ce:	2b09      	cmp	r3, #9
 80143d0:	d83b      	bhi.n	801444a <USBD_StdDevReq+0xc2>
 80143d2:	a201      	add	r2, pc, #4	; (adr r2, 80143d8 <USBD_StdDevReq+0x50>)
 80143d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143d8:	0801442d 	.word	0x0801442d
 80143dc:	08014441 	.word	0x08014441
 80143e0:	0801444b 	.word	0x0801444b
 80143e4:	08014437 	.word	0x08014437
 80143e8:	0801444b 	.word	0x0801444b
 80143ec:	0801440b 	.word	0x0801440b
 80143f0:	08014401 	.word	0x08014401
 80143f4:	0801444b 	.word	0x0801444b
 80143f8:	08014423 	.word	0x08014423
 80143fc:	08014415 	.word	0x08014415
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014400:	6839      	ldr	r1, [r7, #0]
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f000 fa3c 	bl	8014880 <USBD_GetDescriptor>
          break;
 8014408:	e024      	b.n	8014454 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801440a:	6839      	ldr	r1, [r7, #0]
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f000 fba1 	bl	8014b54 <USBD_SetAddress>
          break;
 8014412:	e01f      	b.n	8014454 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014414:	6839      	ldr	r1, [r7, #0]
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	f000 fbe0 	bl	8014bdc <USBD_SetConfig>
 801441c:	4603      	mov	r3, r0
 801441e:	73fb      	strb	r3, [r7, #15]
          break;
 8014420:	e018      	b.n	8014454 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014422:	6839      	ldr	r1, [r7, #0]
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f000 fc83 	bl	8014d30 <USBD_GetConfig>
          break;
 801442a:	e013      	b.n	8014454 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801442c:	6839      	ldr	r1, [r7, #0]
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f000 fcb4 	bl	8014d9c <USBD_GetStatus>
          break;
 8014434:	e00e      	b.n	8014454 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014436:	6839      	ldr	r1, [r7, #0]
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f000 fce3 	bl	8014e04 <USBD_SetFeature>
          break;
 801443e:	e009      	b.n	8014454 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014440:	6839      	ldr	r1, [r7, #0]
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f000 fd07 	bl	8014e56 <USBD_ClrFeature>
          break;
 8014448:	e004      	b.n	8014454 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801444a:	6839      	ldr	r1, [r7, #0]
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f000 fd5e 	bl	8014f0e <USBD_CtlError>
          break;
 8014452:	bf00      	nop
      }
      break;
 8014454:	e004      	b.n	8014460 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014456:	6839      	ldr	r1, [r7, #0]
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f000 fd58 	bl	8014f0e <USBD_CtlError>
      break;
 801445e:	bf00      	nop
  }

  return ret;
 8014460:	7bfb      	ldrb	r3, [r7, #15]
}
 8014462:	4618      	mov	r0, r3
 8014464:	3710      	adds	r7, #16
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop

0801446c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b084      	sub	sp, #16
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014476:	2300      	movs	r3, #0
 8014478:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014482:	2b40      	cmp	r3, #64	; 0x40
 8014484:	d005      	beq.n	8014492 <USBD_StdItfReq+0x26>
 8014486:	2b40      	cmp	r3, #64	; 0x40
 8014488:	d852      	bhi.n	8014530 <USBD_StdItfReq+0xc4>
 801448a:	2b00      	cmp	r3, #0
 801448c:	d001      	beq.n	8014492 <USBD_StdItfReq+0x26>
 801448e:	2b20      	cmp	r3, #32
 8014490:	d14e      	bne.n	8014530 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014498:	b2db      	uxtb	r3, r3
 801449a:	3b01      	subs	r3, #1
 801449c:	2b02      	cmp	r3, #2
 801449e:	d840      	bhi.n	8014522 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	889b      	ldrh	r3, [r3, #4]
 80144a4:	b2db      	uxtb	r3, r3
 80144a6:	2b01      	cmp	r3, #1
 80144a8:	d836      	bhi.n	8014518 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	889b      	ldrh	r3, [r3, #4]
 80144ae:	b2db      	uxtb	r3, r3
 80144b0:	4619      	mov	r1, r3
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f7ff fed9 	bl	801426a <USBD_CoreFindIF>
 80144b8:	4603      	mov	r3, r0
 80144ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80144bc:	7bbb      	ldrb	r3, [r7, #14]
 80144be:	2bff      	cmp	r3, #255	; 0xff
 80144c0:	d01d      	beq.n	80144fe <USBD_StdItfReq+0x92>
 80144c2:	7bbb      	ldrb	r3, [r7, #14]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d11a      	bne.n	80144fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80144c8:	7bba      	ldrb	r2, [r7, #14]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	32ae      	adds	r2, #174	; 0xae
 80144ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144d2:	689b      	ldr	r3, [r3, #8]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00f      	beq.n	80144f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80144d8:	7bba      	ldrb	r2, [r7, #14]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80144e0:	7bba      	ldrb	r2, [r7, #14]
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	32ae      	adds	r2, #174	; 0xae
 80144e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144ea:	689b      	ldr	r3, [r3, #8]
 80144ec:	6839      	ldr	r1, [r7, #0]
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	4798      	blx	r3
 80144f2:	4603      	mov	r3, r0
 80144f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80144f6:	e004      	b.n	8014502 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80144f8:	2303      	movs	r3, #3
 80144fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80144fc:	e001      	b.n	8014502 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80144fe:	2303      	movs	r3, #3
 8014500:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	88db      	ldrh	r3, [r3, #6]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d110      	bne.n	801452c <USBD_StdItfReq+0xc0>
 801450a:	7bfb      	ldrb	r3, [r7, #15]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d10d      	bne.n	801452c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f000 fdc7 	bl	80150a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014516:	e009      	b.n	801452c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014518:	6839      	ldr	r1, [r7, #0]
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f000 fcf7 	bl	8014f0e <USBD_CtlError>
          break;
 8014520:	e004      	b.n	801452c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014522:	6839      	ldr	r1, [r7, #0]
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f000 fcf2 	bl	8014f0e <USBD_CtlError>
          break;
 801452a:	e000      	b.n	801452e <USBD_StdItfReq+0xc2>
          break;
 801452c:	bf00      	nop
      }
      break;
 801452e:	e004      	b.n	801453a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014530:	6839      	ldr	r1, [r7, #0]
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f000 fceb 	bl	8014f0e <USBD_CtlError>
      break;
 8014538:	bf00      	nop
  }

  return ret;
 801453a:	7bfb      	ldrb	r3, [r7, #15]
}
 801453c:	4618      	mov	r0, r3
 801453e:	3710      	adds	r7, #16
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}

08014544 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b084      	sub	sp, #16
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801454e:	2300      	movs	r3, #0
 8014550:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	889b      	ldrh	r3, [r3, #4]
 8014556:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014560:	2b40      	cmp	r3, #64	; 0x40
 8014562:	d007      	beq.n	8014574 <USBD_StdEPReq+0x30>
 8014564:	2b40      	cmp	r3, #64	; 0x40
 8014566:	f200 817f 	bhi.w	8014868 <USBD_StdEPReq+0x324>
 801456a:	2b00      	cmp	r3, #0
 801456c:	d02a      	beq.n	80145c4 <USBD_StdEPReq+0x80>
 801456e:	2b20      	cmp	r3, #32
 8014570:	f040 817a 	bne.w	8014868 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014574:	7bbb      	ldrb	r3, [r7, #14]
 8014576:	4619      	mov	r1, r3
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f7ff fe83 	bl	8014284 <USBD_CoreFindEP>
 801457e:	4603      	mov	r3, r0
 8014580:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014582:	7b7b      	ldrb	r3, [r7, #13]
 8014584:	2bff      	cmp	r3, #255	; 0xff
 8014586:	f000 8174 	beq.w	8014872 <USBD_StdEPReq+0x32e>
 801458a:	7b7b      	ldrb	r3, [r7, #13]
 801458c:	2b00      	cmp	r3, #0
 801458e:	f040 8170 	bne.w	8014872 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014592:	7b7a      	ldrb	r2, [r7, #13]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801459a:	7b7a      	ldrb	r2, [r7, #13]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	32ae      	adds	r2, #174	; 0xae
 80145a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	f000 8163 	beq.w	8014872 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80145ac:	7b7a      	ldrb	r2, [r7, #13]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	32ae      	adds	r2, #174	; 0xae
 80145b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145b6:	689b      	ldr	r3, [r3, #8]
 80145b8:	6839      	ldr	r1, [r7, #0]
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	4798      	blx	r3
 80145be:	4603      	mov	r3, r0
 80145c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80145c2:	e156      	b.n	8014872 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	785b      	ldrb	r3, [r3, #1]
 80145c8:	2b03      	cmp	r3, #3
 80145ca:	d008      	beq.n	80145de <USBD_StdEPReq+0x9a>
 80145cc:	2b03      	cmp	r3, #3
 80145ce:	f300 8145 	bgt.w	801485c <USBD_StdEPReq+0x318>
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	f000 809b 	beq.w	801470e <USBD_StdEPReq+0x1ca>
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d03c      	beq.n	8014656 <USBD_StdEPReq+0x112>
 80145dc:	e13e      	b.n	801485c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	2b02      	cmp	r3, #2
 80145e8:	d002      	beq.n	80145f0 <USBD_StdEPReq+0xac>
 80145ea:	2b03      	cmp	r3, #3
 80145ec:	d016      	beq.n	801461c <USBD_StdEPReq+0xd8>
 80145ee:	e02c      	b.n	801464a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80145f0:	7bbb      	ldrb	r3, [r7, #14]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d00d      	beq.n	8014612 <USBD_StdEPReq+0xce>
 80145f6:	7bbb      	ldrb	r3, [r7, #14]
 80145f8:	2b80      	cmp	r3, #128	; 0x80
 80145fa:	d00a      	beq.n	8014612 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80145fc:	7bbb      	ldrb	r3, [r7, #14]
 80145fe:	4619      	mov	r1, r3
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f004 fb09 	bl	8018c18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014606:	2180      	movs	r1, #128	; 0x80
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f004 fb05 	bl	8018c18 <USBD_LL_StallEP>
 801460e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014610:	e020      	b.n	8014654 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014612:	6839      	ldr	r1, [r7, #0]
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f000 fc7a 	bl	8014f0e <USBD_CtlError>
              break;
 801461a:	e01b      	b.n	8014654 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	885b      	ldrh	r3, [r3, #2]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d10e      	bne.n	8014642 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014624:	7bbb      	ldrb	r3, [r7, #14]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d00b      	beq.n	8014642 <USBD_StdEPReq+0xfe>
 801462a:	7bbb      	ldrb	r3, [r7, #14]
 801462c:	2b80      	cmp	r3, #128	; 0x80
 801462e:	d008      	beq.n	8014642 <USBD_StdEPReq+0xfe>
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	88db      	ldrh	r3, [r3, #6]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d104      	bne.n	8014642 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014638:	7bbb      	ldrb	r3, [r7, #14]
 801463a:	4619      	mov	r1, r3
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f004 faeb 	bl	8018c18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f000 fd2e 	bl	80150a4 <USBD_CtlSendStatus>

              break;
 8014648:	e004      	b.n	8014654 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801464a:	6839      	ldr	r1, [r7, #0]
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f000 fc5e 	bl	8014f0e <USBD_CtlError>
              break;
 8014652:	bf00      	nop
          }
          break;
 8014654:	e107      	b.n	8014866 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801465c:	b2db      	uxtb	r3, r3
 801465e:	2b02      	cmp	r3, #2
 8014660:	d002      	beq.n	8014668 <USBD_StdEPReq+0x124>
 8014662:	2b03      	cmp	r3, #3
 8014664:	d016      	beq.n	8014694 <USBD_StdEPReq+0x150>
 8014666:	e04b      	b.n	8014700 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014668:	7bbb      	ldrb	r3, [r7, #14]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d00d      	beq.n	801468a <USBD_StdEPReq+0x146>
 801466e:	7bbb      	ldrb	r3, [r7, #14]
 8014670:	2b80      	cmp	r3, #128	; 0x80
 8014672:	d00a      	beq.n	801468a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014674:	7bbb      	ldrb	r3, [r7, #14]
 8014676:	4619      	mov	r1, r3
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f004 facd 	bl	8018c18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801467e:	2180      	movs	r1, #128	; 0x80
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f004 fac9 	bl	8018c18 <USBD_LL_StallEP>
 8014686:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014688:	e040      	b.n	801470c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801468a:	6839      	ldr	r1, [r7, #0]
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f000 fc3e 	bl	8014f0e <USBD_CtlError>
              break;
 8014692:	e03b      	b.n	801470c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	885b      	ldrh	r3, [r3, #2]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d136      	bne.n	801470a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801469c:	7bbb      	ldrb	r3, [r7, #14]
 801469e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d004      	beq.n	80146b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80146a6:	7bbb      	ldrb	r3, [r7, #14]
 80146a8:	4619      	mov	r1, r3
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f004 fad3 	bl	8018c56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f000 fcf7 	bl	80150a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80146b6:	7bbb      	ldrb	r3, [r7, #14]
 80146b8:	4619      	mov	r1, r3
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f7ff fde2 	bl	8014284 <USBD_CoreFindEP>
 80146c0:	4603      	mov	r3, r0
 80146c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80146c4:	7b7b      	ldrb	r3, [r7, #13]
 80146c6:	2bff      	cmp	r3, #255	; 0xff
 80146c8:	d01f      	beq.n	801470a <USBD_StdEPReq+0x1c6>
 80146ca:	7b7b      	ldrb	r3, [r7, #13]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d11c      	bne.n	801470a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80146d0:	7b7a      	ldrb	r2, [r7, #13]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80146d8:	7b7a      	ldrb	r2, [r7, #13]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	32ae      	adds	r2, #174	; 0xae
 80146de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146e2:	689b      	ldr	r3, [r3, #8]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d010      	beq.n	801470a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80146e8:	7b7a      	ldrb	r2, [r7, #13]
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	32ae      	adds	r2, #174	; 0xae
 80146ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146f2:	689b      	ldr	r3, [r3, #8]
 80146f4:	6839      	ldr	r1, [r7, #0]
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	4798      	blx	r3
 80146fa:	4603      	mov	r3, r0
 80146fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80146fe:	e004      	b.n	801470a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014700:	6839      	ldr	r1, [r7, #0]
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f000 fc03 	bl	8014f0e <USBD_CtlError>
              break;
 8014708:	e000      	b.n	801470c <USBD_StdEPReq+0x1c8>
              break;
 801470a:	bf00      	nop
          }
          break;
 801470c:	e0ab      	b.n	8014866 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014714:	b2db      	uxtb	r3, r3
 8014716:	2b02      	cmp	r3, #2
 8014718:	d002      	beq.n	8014720 <USBD_StdEPReq+0x1dc>
 801471a:	2b03      	cmp	r3, #3
 801471c:	d032      	beq.n	8014784 <USBD_StdEPReq+0x240>
 801471e:	e097      	b.n	8014850 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014720:	7bbb      	ldrb	r3, [r7, #14]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d007      	beq.n	8014736 <USBD_StdEPReq+0x1f2>
 8014726:	7bbb      	ldrb	r3, [r7, #14]
 8014728:	2b80      	cmp	r3, #128	; 0x80
 801472a:	d004      	beq.n	8014736 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801472c:	6839      	ldr	r1, [r7, #0]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f000 fbed 	bl	8014f0e <USBD_CtlError>
                break;
 8014734:	e091      	b.n	801485a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801473a:	2b00      	cmp	r3, #0
 801473c:	da0b      	bge.n	8014756 <USBD_StdEPReq+0x212>
 801473e:	7bbb      	ldrb	r3, [r7, #14]
 8014740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014744:	4613      	mov	r3, r2
 8014746:	009b      	lsls	r3, r3, #2
 8014748:	4413      	add	r3, r2
 801474a:	009b      	lsls	r3, r3, #2
 801474c:	3310      	adds	r3, #16
 801474e:	687a      	ldr	r2, [r7, #4]
 8014750:	4413      	add	r3, r2
 8014752:	3304      	adds	r3, #4
 8014754:	e00b      	b.n	801476e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014756:	7bbb      	ldrb	r3, [r7, #14]
 8014758:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801475c:	4613      	mov	r3, r2
 801475e:	009b      	lsls	r3, r3, #2
 8014760:	4413      	add	r3, r2
 8014762:	009b      	lsls	r3, r3, #2
 8014764:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	4413      	add	r3, r2
 801476c:	3304      	adds	r3, #4
 801476e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	2200      	movs	r2, #0
 8014774:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	2202      	movs	r2, #2
 801477a:	4619      	mov	r1, r3
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 fc37 	bl	8014ff0 <USBD_CtlSendData>
              break;
 8014782:	e06a      	b.n	801485a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014788:	2b00      	cmp	r3, #0
 801478a:	da11      	bge.n	80147b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801478c:	7bbb      	ldrb	r3, [r7, #14]
 801478e:	f003 020f 	and.w	r2, r3, #15
 8014792:	6879      	ldr	r1, [r7, #4]
 8014794:	4613      	mov	r3, r2
 8014796:	009b      	lsls	r3, r3, #2
 8014798:	4413      	add	r3, r2
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	440b      	add	r3, r1
 801479e:	3324      	adds	r3, #36	; 0x24
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d117      	bne.n	80147d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80147a6:	6839      	ldr	r1, [r7, #0]
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f000 fbb0 	bl	8014f0e <USBD_CtlError>
                  break;
 80147ae:	e054      	b.n	801485a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80147b0:	7bbb      	ldrb	r3, [r7, #14]
 80147b2:	f003 020f 	and.w	r2, r3, #15
 80147b6:	6879      	ldr	r1, [r7, #4]
 80147b8:	4613      	mov	r3, r2
 80147ba:	009b      	lsls	r3, r3, #2
 80147bc:	4413      	add	r3, r2
 80147be:	009b      	lsls	r3, r3, #2
 80147c0:	440b      	add	r3, r1
 80147c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80147c6:	881b      	ldrh	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d104      	bne.n	80147d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80147cc:	6839      	ldr	r1, [r7, #0]
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f000 fb9d 	bl	8014f0e <USBD_CtlError>
                  break;
 80147d4:	e041      	b.n	801485a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80147d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	da0b      	bge.n	80147f6 <USBD_StdEPReq+0x2b2>
 80147de:	7bbb      	ldrb	r3, [r7, #14]
 80147e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80147e4:	4613      	mov	r3, r2
 80147e6:	009b      	lsls	r3, r3, #2
 80147e8:	4413      	add	r3, r2
 80147ea:	009b      	lsls	r3, r3, #2
 80147ec:	3310      	adds	r3, #16
 80147ee:	687a      	ldr	r2, [r7, #4]
 80147f0:	4413      	add	r3, r2
 80147f2:	3304      	adds	r3, #4
 80147f4:	e00b      	b.n	801480e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80147f6:	7bbb      	ldrb	r3, [r7, #14]
 80147f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80147fc:	4613      	mov	r3, r2
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	4413      	add	r3, r2
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014808:	687a      	ldr	r2, [r7, #4]
 801480a:	4413      	add	r3, r2
 801480c:	3304      	adds	r3, #4
 801480e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014810:	7bbb      	ldrb	r3, [r7, #14]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d002      	beq.n	801481c <USBD_StdEPReq+0x2d8>
 8014816:	7bbb      	ldrb	r3, [r7, #14]
 8014818:	2b80      	cmp	r3, #128	; 0x80
 801481a:	d103      	bne.n	8014824 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	2200      	movs	r2, #0
 8014820:	601a      	str	r2, [r3, #0]
 8014822:	e00e      	b.n	8014842 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014824:	7bbb      	ldrb	r3, [r7, #14]
 8014826:	4619      	mov	r1, r3
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f004 fa33 	bl	8018c94 <USBD_LL_IsStallEP>
 801482e:	4603      	mov	r3, r0
 8014830:	2b00      	cmp	r3, #0
 8014832:	d003      	beq.n	801483c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	2201      	movs	r2, #1
 8014838:	601a      	str	r2, [r3, #0]
 801483a:	e002      	b.n	8014842 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	2200      	movs	r2, #0
 8014840:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	2202      	movs	r2, #2
 8014846:	4619      	mov	r1, r3
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f000 fbd1 	bl	8014ff0 <USBD_CtlSendData>
              break;
 801484e:	e004      	b.n	801485a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014850:	6839      	ldr	r1, [r7, #0]
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 fb5b 	bl	8014f0e <USBD_CtlError>
              break;
 8014858:	bf00      	nop
          }
          break;
 801485a:	e004      	b.n	8014866 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801485c:	6839      	ldr	r1, [r7, #0]
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f000 fb55 	bl	8014f0e <USBD_CtlError>
          break;
 8014864:	bf00      	nop
      }
      break;
 8014866:	e005      	b.n	8014874 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014868:	6839      	ldr	r1, [r7, #0]
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f000 fb4f 	bl	8014f0e <USBD_CtlError>
      break;
 8014870:	e000      	b.n	8014874 <USBD_StdEPReq+0x330>
      break;
 8014872:	bf00      	nop
  }

  return ret;
 8014874:	7bfb      	ldrb	r3, [r7, #15]
}
 8014876:	4618      	mov	r0, r3
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
	...

08014880 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b084      	sub	sp, #16
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
 8014888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801488a:	2300      	movs	r3, #0
 801488c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801488e:	2300      	movs	r3, #0
 8014890:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014892:	2300      	movs	r3, #0
 8014894:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	885b      	ldrh	r3, [r3, #2]
 801489a:	0a1b      	lsrs	r3, r3, #8
 801489c:	b29b      	uxth	r3, r3
 801489e:	3b01      	subs	r3, #1
 80148a0:	2b06      	cmp	r3, #6
 80148a2:	f200 8128 	bhi.w	8014af6 <USBD_GetDescriptor+0x276>
 80148a6:	a201      	add	r2, pc, #4	; (adr r2, 80148ac <USBD_GetDescriptor+0x2c>)
 80148a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148ac:	080148c9 	.word	0x080148c9
 80148b0:	080148e1 	.word	0x080148e1
 80148b4:	08014921 	.word	0x08014921
 80148b8:	08014af7 	.word	0x08014af7
 80148bc:	08014af7 	.word	0x08014af7
 80148c0:	08014a97 	.word	0x08014a97
 80148c4:	08014ac3 	.word	0x08014ac3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	687a      	ldr	r2, [r7, #4]
 80148d2:	7c12      	ldrb	r2, [r2, #16]
 80148d4:	f107 0108 	add.w	r1, r7, #8
 80148d8:	4610      	mov	r0, r2
 80148da:	4798      	blx	r3
 80148dc:	60f8      	str	r0, [r7, #12]
      break;
 80148de:	e112      	b.n	8014b06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	7c1b      	ldrb	r3, [r3, #16]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d10d      	bne.n	8014904 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148f0:	f107 0208 	add.w	r2, r7, #8
 80148f4:	4610      	mov	r0, r2
 80148f6:	4798      	blx	r3
 80148f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	3301      	adds	r3, #1
 80148fe:	2202      	movs	r2, #2
 8014900:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014902:	e100      	b.n	8014b06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801490c:	f107 0208 	add.w	r2, r7, #8
 8014910:	4610      	mov	r0, r2
 8014912:	4798      	blx	r3
 8014914:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	3301      	adds	r3, #1
 801491a:	2202      	movs	r2, #2
 801491c:	701a      	strb	r2, [r3, #0]
      break;
 801491e:	e0f2      	b.n	8014b06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	885b      	ldrh	r3, [r3, #2]
 8014924:	b2db      	uxtb	r3, r3
 8014926:	2b05      	cmp	r3, #5
 8014928:	f200 80ac 	bhi.w	8014a84 <USBD_GetDescriptor+0x204>
 801492c:	a201      	add	r2, pc, #4	; (adr r2, 8014934 <USBD_GetDescriptor+0xb4>)
 801492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014932:	bf00      	nop
 8014934:	0801494d 	.word	0x0801494d
 8014938:	08014981 	.word	0x08014981
 801493c:	080149b5 	.word	0x080149b5
 8014940:	080149e9 	.word	0x080149e9
 8014944:	08014a1d 	.word	0x08014a1d
 8014948:	08014a51 	.word	0x08014a51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d00b      	beq.n	8014970 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	7c12      	ldrb	r2, [r2, #16]
 8014964:	f107 0108 	add.w	r1, r7, #8
 8014968:	4610      	mov	r0, r2
 801496a:	4798      	blx	r3
 801496c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801496e:	e091      	b.n	8014a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014970:	6839      	ldr	r1, [r7, #0]
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f000 facb 	bl	8014f0e <USBD_CtlError>
            err++;
 8014978:	7afb      	ldrb	r3, [r7, #11]
 801497a:	3301      	adds	r3, #1
 801497c:	72fb      	strb	r3, [r7, #11]
          break;
 801497e:	e089      	b.n	8014a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014986:	689b      	ldr	r3, [r3, #8]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d00b      	beq.n	80149a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014992:	689b      	ldr	r3, [r3, #8]
 8014994:	687a      	ldr	r2, [r7, #4]
 8014996:	7c12      	ldrb	r2, [r2, #16]
 8014998:	f107 0108 	add.w	r1, r7, #8
 801499c:	4610      	mov	r0, r2
 801499e:	4798      	blx	r3
 80149a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149a2:	e077      	b.n	8014a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80149a4:	6839      	ldr	r1, [r7, #0]
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f000 fab1 	bl	8014f0e <USBD_CtlError>
            err++;
 80149ac:	7afb      	ldrb	r3, [r7, #11]
 80149ae:	3301      	adds	r3, #1
 80149b0:	72fb      	strb	r3, [r7, #11]
          break;
 80149b2:	e06f      	b.n	8014a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d00b      	beq.n	80149d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149c6:	68db      	ldr	r3, [r3, #12]
 80149c8:	687a      	ldr	r2, [r7, #4]
 80149ca:	7c12      	ldrb	r2, [r2, #16]
 80149cc:	f107 0108 	add.w	r1, r7, #8
 80149d0:	4610      	mov	r0, r2
 80149d2:	4798      	blx	r3
 80149d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149d6:	e05d      	b.n	8014a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80149d8:	6839      	ldr	r1, [r7, #0]
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f000 fa97 	bl	8014f0e <USBD_CtlError>
            err++;
 80149e0:	7afb      	ldrb	r3, [r7, #11]
 80149e2:	3301      	adds	r3, #1
 80149e4:	72fb      	strb	r3, [r7, #11]
          break;
 80149e6:	e055      	b.n	8014a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149ee:	691b      	ldr	r3, [r3, #16]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d00b      	beq.n	8014a0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149fa:	691b      	ldr	r3, [r3, #16]
 80149fc:	687a      	ldr	r2, [r7, #4]
 80149fe:	7c12      	ldrb	r2, [r2, #16]
 8014a00:	f107 0108 	add.w	r1, r7, #8
 8014a04:	4610      	mov	r0, r2
 8014a06:	4798      	blx	r3
 8014a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a0a:	e043      	b.n	8014a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014a0c:	6839      	ldr	r1, [r7, #0]
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f000 fa7d 	bl	8014f0e <USBD_CtlError>
            err++;
 8014a14:	7afb      	ldrb	r3, [r7, #11]
 8014a16:	3301      	adds	r3, #1
 8014a18:	72fb      	strb	r3, [r7, #11]
          break;
 8014a1a:	e03b      	b.n	8014a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a22:	695b      	ldr	r3, [r3, #20]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d00b      	beq.n	8014a40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a2e:	695b      	ldr	r3, [r3, #20]
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	7c12      	ldrb	r2, [r2, #16]
 8014a34:	f107 0108 	add.w	r1, r7, #8
 8014a38:	4610      	mov	r0, r2
 8014a3a:	4798      	blx	r3
 8014a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a3e:	e029      	b.n	8014a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014a40:	6839      	ldr	r1, [r7, #0]
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 fa63 	bl	8014f0e <USBD_CtlError>
            err++;
 8014a48:	7afb      	ldrb	r3, [r7, #11]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8014a4e:	e021      	b.n	8014a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a56:	699b      	ldr	r3, [r3, #24]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d00b      	beq.n	8014a74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a62:	699b      	ldr	r3, [r3, #24]
 8014a64:	687a      	ldr	r2, [r7, #4]
 8014a66:	7c12      	ldrb	r2, [r2, #16]
 8014a68:	f107 0108 	add.w	r1, r7, #8
 8014a6c:	4610      	mov	r0, r2
 8014a6e:	4798      	blx	r3
 8014a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a72:	e00f      	b.n	8014a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f000 fa49 	bl	8014f0e <USBD_CtlError>
            err++;
 8014a7c:	7afb      	ldrb	r3, [r7, #11]
 8014a7e:	3301      	adds	r3, #1
 8014a80:	72fb      	strb	r3, [r7, #11]
          break;
 8014a82:	e007      	b.n	8014a94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014a84:	6839      	ldr	r1, [r7, #0]
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 fa41 	bl	8014f0e <USBD_CtlError>
          err++;
 8014a8c:	7afb      	ldrb	r3, [r7, #11]
 8014a8e:	3301      	adds	r3, #1
 8014a90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014a92:	bf00      	nop
      }
      break;
 8014a94:	e037      	b.n	8014b06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	7c1b      	ldrb	r3, [r3, #16]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d109      	bne.n	8014ab2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014aa6:	f107 0208 	add.w	r2, r7, #8
 8014aaa:	4610      	mov	r0, r2
 8014aac:	4798      	blx	r3
 8014aae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014ab0:	e029      	b.n	8014b06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014ab2:	6839      	ldr	r1, [r7, #0]
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	f000 fa2a 	bl	8014f0e <USBD_CtlError>
        err++;
 8014aba:	7afb      	ldrb	r3, [r7, #11]
 8014abc:	3301      	adds	r3, #1
 8014abe:	72fb      	strb	r3, [r7, #11]
      break;
 8014ac0:	e021      	b.n	8014b06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	7c1b      	ldrb	r3, [r3, #16]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d10d      	bne.n	8014ae6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ad2:	f107 0208 	add.w	r2, r7, #8
 8014ad6:	4610      	mov	r0, r2
 8014ad8:	4798      	blx	r3
 8014ada:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	3301      	adds	r3, #1
 8014ae0:	2207      	movs	r2, #7
 8014ae2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014ae4:	e00f      	b.n	8014b06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014ae6:	6839      	ldr	r1, [r7, #0]
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f000 fa10 	bl	8014f0e <USBD_CtlError>
        err++;
 8014aee:	7afb      	ldrb	r3, [r7, #11]
 8014af0:	3301      	adds	r3, #1
 8014af2:	72fb      	strb	r3, [r7, #11]
      break;
 8014af4:	e007      	b.n	8014b06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014af6:	6839      	ldr	r1, [r7, #0]
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 fa08 	bl	8014f0e <USBD_CtlError>
      err++;
 8014afe:	7afb      	ldrb	r3, [r7, #11]
 8014b00:	3301      	adds	r3, #1
 8014b02:	72fb      	strb	r3, [r7, #11]
      break;
 8014b04:	bf00      	nop
  }

  if (err != 0U)
 8014b06:	7afb      	ldrb	r3, [r7, #11]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d11e      	bne.n	8014b4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	88db      	ldrh	r3, [r3, #6]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d016      	beq.n	8014b42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014b14:	893b      	ldrh	r3, [r7, #8]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d00e      	beq.n	8014b38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	88da      	ldrh	r2, [r3, #6]
 8014b1e:	893b      	ldrh	r3, [r7, #8]
 8014b20:	4293      	cmp	r3, r2
 8014b22:	bf28      	it	cs
 8014b24:	4613      	movcs	r3, r2
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014b2a:	893b      	ldrh	r3, [r7, #8]
 8014b2c:	461a      	mov	r2, r3
 8014b2e:	68f9      	ldr	r1, [r7, #12]
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f000 fa5d 	bl	8014ff0 <USBD_CtlSendData>
 8014b36:	e009      	b.n	8014b4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014b38:	6839      	ldr	r1, [r7, #0]
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f000 f9e7 	bl	8014f0e <USBD_CtlError>
 8014b40:	e004      	b.n	8014b4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 faae 	bl	80150a4 <USBD_CtlSendStatus>
 8014b48:	e000      	b.n	8014b4c <USBD_GetDescriptor+0x2cc>
    return;
 8014b4a:	bf00      	nop
  }
}
 8014b4c:	3710      	adds	r7, #16
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop

08014b54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b084      	sub	sp, #16
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
 8014b5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014b5e:	683b      	ldr	r3, [r7, #0]
 8014b60:	889b      	ldrh	r3, [r3, #4]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d131      	bne.n	8014bca <USBD_SetAddress+0x76>
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	88db      	ldrh	r3, [r3, #6]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d12d      	bne.n	8014bca <USBD_SetAddress+0x76>
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	885b      	ldrh	r3, [r3, #2]
 8014b72:	2b7f      	cmp	r3, #127	; 0x7f
 8014b74:	d829      	bhi.n	8014bca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	885b      	ldrh	r3, [r3, #2]
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	2b03      	cmp	r3, #3
 8014b8c:	d104      	bne.n	8014b98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014b8e:	6839      	ldr	r1, [r7, #0]
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f000 f9bc 	bl	8014f0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b96:	e01d      	b.n	8014bd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	7bfa      	ldrb	r2, [r7, #15]
 8014b9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014ba0:	7bfb      	ldrb	r3, [r7, #15]
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f004 f8a1 	bl	8018cec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f000 fa7a 	bl	80150a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014bb0:	7bfb      	ldrb	r3, [r7, #15]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d004      	beq.n	8014bc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2202      	movs	r2, #2
 8014bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bbe:	e009      	b.n	8014bd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2201      	movs	r2, #1
 8014bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bc8:	e004      	b.n	8014bd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014bca:	6839      	ldr	r1, [r7, #0]
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f000 f99e 	bl	8014f0e <USBD_CtlError>
  }
}
 8014bd2:	bf00      	nop
 8014bd4:	bf00      	nop
 8014bd6:	3710      	adds	r7, #16
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}

08014bdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b084      	sub	sp, #16
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014be6:	2300      	movs	r3, #0
 8014be8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	885b      	ldrh	r3, [r3, #2]
 8014bee:	b2da      	uxtb	r2, r3
 8014bf0:	4b4e      	ldr	r3, [pc, #312]	; (8014d2c <USBD_SetConfig+0x150>)
 8014bf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014bf4:	4b4d      	ldr	r3, [pc, #308]	; (8014d2c <USBD_SetConfig+0x150>)
 8014bf6:	781b      	ldrb	r3, [r3, #0]
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d905      	bls.n	8014c08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014bfc:	6839      	ldr	r1, [r7, #0]
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f000 f985 	bl	8014f0e <USBD_CtlError>
    return USBD_FAIL;
 8014c04:	2303      	movs	r3, #3
 8014c06:	e08c      	b.n	8014d22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c0e:	b2db      	uxtb	r3, r3
 8014c10:	2b02      	cmp	r3, #2
 8014c12:	d002      	beq.n	8014c1a <USBD_SetConfig+0x3e>
 8014c14:	2b03      	cmp	r3, #3
 8014c16:	d029      	beq.n	8014c6c <USBD_SetConfig+0x90>
 8014c18:	e075      	b.n	8014d06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014c1a:	4b44      	ldr	r3, [pc, #272]	; (8014d2c <USBD_SetConfig+0x150>)
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d020      	beq.n	8014c64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014c22:	4b42      	ldr	r3, [pc, #264]	; (8014d2c <USBD_SetConfig+0x150>)
 8014c24:	781b      	ldrb	r3, [r3, #0]
 8014c26:	461a      	mov	r2, r3
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014c2c:	4b3f      	ldr	r3, [pc, #252]	; (8014d2c <USBD_SetConfig+0x150>)
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	4619      	mov	r1, r3
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f7fe ffe7 	bl	8013c06 <USBD_SetClassConfig>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014c3c:	7bfb      	ldrb	r3, [r7, #15]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d008      	beq.n	8014c54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014c42:	6839      	ldr	r1, [r7, #0]
 8014c44:	6878      	ldr	r0, [r7, #4]
 8014c46:	f000 f962 	bl	8014f0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2202      	movs	r2, #2
 8014c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014c52:	e065      	b.n	8014d20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f000 fa25 	bl	80150a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2203      	movs	r2, #3
 8014c5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014c62:	e05d      	b.n	8014d20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f000 fa1d 	bl	80150a4 <USBD_CtlSendStatus>
      break;
 8014c6a:	e059      	b.n	8014d20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014c6c:	4b2f      	ldr	r3, [pc, #188]	; (8014d2c <USBD_SetConfig+0x150>)
 8014c6e:	781b      	ldrb	r3, [r3, #0]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d112      	bne.n	8014c9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2202      	movs	r2, #2
 8014c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014c7c:	4b2b      	ldr	r3, [pc, #172]	; (8014d2c <USBD_SetConfig+0x150>)
 8014c7e:	781b      	ldrb	r3, [r3, #0]
 8014c80:	461a      	mov	r2, r3
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014c86:	4b29      	ldr	r3, [pc, #164]	; (8014d2c <USBD_SetConfig+0x150>)
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f7fe ffd6 	bl	8013c3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f000 fa06 	bl	80150a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014c98:	e042      	b.n	8014d20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014c9a:	4b24      	ldr	r3, [pc, #144]	; (8014d2c <USBD_SetConfig+0x150>)
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d02a      	beq.n	8014cfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	b2db      	uxtb	r3, r3
 8014cae:	4619      	mov	r1, r3
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f7fe ffc4 	bl	8013c3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014cb6:	4b1d      	ldr	r3, [pc, #116]	; (8014d2c <USBD_SetConfig+0x150>)
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	461a      	mov	r2, r3
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014cc0:	4b1a      	ldr	r3, [pc, #104]	; (8014d2c <USBD_SetConfig+0x150>)
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	4619      	mov	r1, r3
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f7fe ff9d 	bl	8013c06 <USBD_SetClassConfig>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014cd0:	7bfb      	ldrb	r3, [r7, #15]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d00f      	beq.n	8014cf6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014cd6:	6839      	ldr	r1, [r7, #0]
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f000 f918 	bl	8014f0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	b2db      	uxtb	r3, r3
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f7fe ffa9 	bl	8013c3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2202      	movs	r2, #2
 8014cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014cf4:	e014      	b.n	8014d20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f000 f9d4 	bl	80150a4 <USBD_CtlSendStatus>
      break;
 8014cfc:	e010      	b.n	8014d20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f000 f9d0 	bl	80150a4 <USBD_CtlSendStatus>
      break;
 8014d04:	e00c      	b.n	8014d20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014d06:	6839      	ldr	r1, [r7, #0]
 8014d08:	6878      	ldr	r0, [r7, #4]
 8014d0a:	f000 f900 	bl	8014f0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014d0e:	4b07      	ldr	r3, [pc, #28]	; (8014d2c <USBD_SetConfig+0x150>)
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	4619      	mov	r1, r3
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f7fe ff92 	bl	8013c3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014d1a:	2303      	movs	r3, #3
 8014d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8014d1e:	bf00      	nop
  }

  return ret;
 8014d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	2000298c 	.word	0x2000298c

08014d30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b082      	sub	sp, #8
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014d3a:	683b      	ldr	r3, [r7, #0]
 8014d3c:	88db      	ldrh	r3, [r3, #6]
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d004      	beq.n	8014d4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014d42:	6839      	ldr	r1, [r7, #0]
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f000 f8e2 	bl	8014f0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014d4a:	e023      	b.n	8014d94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d52:	b2db      	uxtb	r3, r3
 8014d54:	2b02      	cmp	r3, #2
 8014d56:	dc02      	bgt.n	8014d5e <USBD_GetConfig+0x2e>
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	dc03      	bgt.n	8014d64 <USBD_GetConfig+0x34>
 8014d5c:	e015      	b.n	8014d8a <USBD_GetConfig+0x5a>
 8014d5e:	2b03      	cmp	r3, #3
 8014d60:	d00b      	beq.n	8014d7a <USBD_GetConfig+0x4a>
 8014d62:	e012      	b.n	8014d8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2200      	movs	r2, #0
 8014d68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	3308      	adds	r3, #8
 8014d6e:	2201      	movs	r2, #1
 8014d70:	4619      	mov	r1, r3
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 f93c 	bl	8014ff0 <USBD_CtlSendData>
        break;
 8014d78:	e00c      	b.n	8014d94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	3304      	adds	r3, #4
 8014d7e:	2201      	movs	r2, #1
 8014d80:	4619      	mov	r1, r3
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f000 f934 	bl	8014ff0 <USBD_CtlSendData>
        break;
 8014d88:	e004      	b.n	8014d94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014d8a:	6839      	ldr	r1, [r7, #0]
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f000 f8be 	bl	8014f0e <USBD_CtlError>
        break;
 8014d92:	bf00      	nop
}
 8014d94:	bf00      	nop
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014dac:	b2db      	uxtb	r3, r3
 8014dae:	3b01      	subs	r3, #1
 8014db0:	2b02      	cmp	r3, #2
 8014db2:	d81e      	bhi.n	8014df2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	88db      	ldrh	r3, [r3, #6]
 8014db8:	2b02      	cmp	r3, #2
 8014dba:	d004      	beq.n	8014dc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014dbc:	6839      	ldr	r1, [r7, #0]
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f000 f8a5 	bl	8014f0e <USBD_CtlError>
        break;
 8014dc4:	e01a      	b.n	8014dfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2201      	movs	r2, #1
 8014dca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d005      	beq.n	8014de2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	68db      	ldr	r3, [r3, #12]
 8014dda:	f043 0202 	orr.w	r2, r3, #2
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	330c      	adds	r3, #12
 8014de6:	2202      	movs	r2, #2
 8014de8:	4619      	mov	r1, r3
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f000 f900 	bl	8014ff0 <USBD_CtlSendData>
      break;
 8014df0:	e004      	b.n	8014dfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014df2:	6839      	ldr	r1, [r7, #0]
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f000 f88a 	bl	8014f0e <USBD_CtlError>
      break;
 8014dfa:	bf00      	nop
  }
}
 8014dfc:	bf00      	nop
 8014dfe:	3708      	adds	r7, #8
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}

08014e04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	885b      	ldrh	r3, [r3, #2]
 8014e12:	2b01      	cmp	r3, #1
 8014e14:	d107      	bne.n	8014e26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2201      	movs	r2, #1
 8014e1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f000 f940 	bl	80150a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014e24:	e013      	b.n	8014e4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	885b      	ldrh	r3, [r3, #2]
 8014e2a:	2b02      	cmp	r3, #2
 8014e2c:	d10b      	bne.n	8014e46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	889b      	ldrh	r3, [r3, #4]
 8014e32:	0a1b      	lsrs	r3, r3, #8
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	b2da      	uxtb	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f000 f930 	bl	80150a4 <USBD_CtlSendStatus>
}
 8014e44:	e003      	b.n	8014e4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014e46:	6839      	ldr	r1, [r7, #0]
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f000 f860 	bl	8014f0e <USBD_CtlError>
}
 8014e4e:	bf00      	nop
 8014e50:	3708      	adds	r7, #8
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}

08014e56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e56:	b580      	push	{r7, lr}
 8014e58:	b082      	sub	sp, #8
 8014e5a:	af00      	add	r7, sp, #0
 8014e5c:	6078      	str	r0, [r7, #4]
 8014e5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	3b01      	subs	r3, #1
 8014e6a:	2b02      	cmp	r3, #2
 8014e6c:	d80b      	bhi.n	8014e86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	885b      	ldrh	r3, [r3, #2]
 8014e72:	2b01      	cmp	r3, #1
 8014e74:	d10c      	bne.n	8014e90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f000 f910 	bl	80150a4 <USBD_CtlSendStatus>
      }
      break;
 8014e84:	e004      	b.n	8014e90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014e86:	6839      	ldr	r1, [r7, #0]
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f000 f840 	bl	8014f0e <USBD_CtlError>
      break;
 8014e8e:	e000      	b.n	8014e92 <USBD_ClrFeature+0x3c>
      break;
 8014e90:	bf00      	nop
  }
}
 8014e92:	bf00      	nop
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}

08014e9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014e9a:	b580      	push	{r7, lr}
 8014e9c:	b084      	sub	sp, #16
 8014e9e:	af00      	add	r7, sp, #0
 8014ea0:	6078      	str	r0, [r7, #4]
 8014ea2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	781a      	ldrb	r2, [r3, #0]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	3301      	adds	r3, #1
 8014eb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	781a      	ldrb	r2, [r3, #0]
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f7ff fa41 	bl	801434c <SWAPBYTE>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	461a      	mov	r2, r3
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	3301      	adds	r3, #1
 8014edc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014ede:	68f8      	ldr	r0, [r7, #12]
 8014ee0:	f7ff fa34 	bl	801434c <SWAPBYTE>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	461a      	mov	r2, r3
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	3301      	adds	r3, #1
 8014ef0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	3301      	adds	r3, #1
 8014ef6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014ef8:	68f8      	ldr	r0, [r7, #12]
 8014efa:	f7ff fa27 	bl	801434c <SWAPBYTE>
 8014efe:	4603      	mov	r3, r0
 8014f00:	461a      	mov	r2, r3
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	80da      	strh	r2, [r3, #6]
}
 8014f06:	bf00      	nop
 8014f08:	3710      	adds	r7, #16
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}

08014f0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f0e:	b580      	push	{r7, lr}
 8014f10:	b082      	sub	sp, #8
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
 8014f16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014f18:	2180      	movs	r1, #128	; 0x80
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f003 fe7c 	bl	8018c18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014f20:	2100      	movs	r1, #0
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f003 fe78 	bl	8018c18 <USBD_LL_StallEP>
}
 8014f28:	bf00      	nop
 8014f2a:	3708      	adds	r7, #8
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}

08014f30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b086      	sub	sp, #24
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	60f8      	str	r0, [r7, #12]
 8014f38:	60b9      	str	r1, [r7, #8]
 8014f3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d036      	beq.n	8014fb4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014f4a:	6938      	ldr	r0, [r7, #16]
 8014f4c:	f000 f836 	bl	8014fbc <USBD_GetLen>
 8014f50:	4603      	mov	r3, r0
 8014f52:	3301      	adds	r3, #1
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	005b      	lsls	r3, r3, #1
 8014f58:	b29a      	uxth	r2, r3
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014f5e:	7dfb      	ldrb	r3, [r7, #23]
 8014f60:	68ba      	ldr	r2, [r7, #8]
 8014f62:	4413      	add	r3, r2
 8014f64:	687a      	ldr	r2, [r7, #4]
 8014f66:	7812      	ldrb	r2, [r2, #0]
 8014f68:	701a      	strb	r2, [r3, #0]
  idx++;
 8014f6a:	7dfb      	ldrb	r3, [r7, #23]
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014f70:	7dfb      	ldrb	r3, [r7, #23]
 8014f72:	68ba      	ldr	r2, [r7, #8]
 8014f74:	4413      	add	r3, r2
 8014f76:	2203      	movs	r2, #3
 8014f78:	701a      	strb	r2, [r3, #0]
  idx++;
 8014f7a:	7dfb      	ldrb	r3, [r7, #23]
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014f80:	e013      	b.n	8014faa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014f82:	7dfb      	ldrb	r3, [r7, #23]
 8014f84:	68ba      	ldr	r2, [r7, #8]
 8014f86:	4413      	add	r3, r2
 8014f88:	693a      	ldr	r2, [r7, #16]
 8014f8a:	7812      	ldrb	r2, [r2, #0]
 8014f8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	3301      	adds	r3, #1
 8014f92:	613b      	str	r3, [r7, #16]
    idx++;
 8014f94:	7dfb      	ldrb	r3, [r7, #23]
 8014f96:	3301      	adds	r3, #1
 8014f98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014f9a:	7dfb      	ldrb	r3, [r7, #23]
 8014f9c:	68ba      	ldr	r2, [r7, #8]
 8014f9e:	4413      	add	r3, r2
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	701a      	strb	r2, [r3, #0]
    idx++;
 8014fa4:	7dfb      	ldrb	r3, [r7, #23]
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	781b      	ldrb	r3, [r3, #0]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d1e7      	bne.n	8014f82 <USBD_GetString+0x52>
 8014fb2:	e000      	b.n	8014fb6 <USBD_GetString+0x86>
    return;
 8014fb4:	bf00      	nop
  }
}
 8014fb6:	3718      	adds	r7, #24
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}

08014fbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	b085      	sub	sp, #20
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014fcc:	e005      	b.n	8014fda <USBD_GetLen+0x1e>
  {
    len++;
 8014fce:	7bfb      	ldrb	r3, [r7, #15]
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	3301      	adds	r3, #1
 8014fd8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d1f5      	bne.n	8014fce <USBD_GetLen+0x12>
  }

  return len;
 8014fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3714      	adds	r7, #20
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fee:	4770      	bx	lr

08014ff0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b084      	sub	sp, #16
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	60b9      	str	r1, [r7, #8]
 8014ffa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	2202      	movs	r2, #2
 8015000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	687a      	ldr	r2, [r7, #4]
 8015008:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	687a      	ldr	r2, [r7, #4]
 801500e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	68ba      	ldr	r2, [r7, #8]
 8015014:	2100      	movs	r1, #0
 8015016:	68f8      	ldr	r0, [r7, #12]
 8015018:	f003 fe87 	bl	8018d2a <USBD_LL_Transmit>

  return USBD_OK;
 801501c:	2300      	movs	r3, #0
}
 801501e:	4618      	mov	r0, r3
 8015020:	3710      	adds	r7, #16
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}

08015026 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015026:	b580      	push	{r7, lr}
 8015028:	b084      	sub	sp, #16
 801502a:	af00      	add	r7, sp, #0
 801502c:	60f8      	str	r0, [r7, #12]
 801502e:	60b9      	str	r1, [r7, #8]
 8015030:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	68ba      	ldr	r2, [r7, #8]
 8015036:	2100      	movs	r1, #0
 8015038:	68f8      	ldr	r0, [r7, #12]
 801503a:	f003 fe76 	bl	8018d2a <USBD_LL_Transmit>

  return USBD_OK;
 801503e:	2300      	movs	r3, #0
}
 8015040:	4618      	mov	r0, r3
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b084      	sub	sp, #16
 801504c:	af00      	add	r7, sp, #0
 801504e:	60f8      	str	r0, [r7, #12]
 8015050:	60b9      	str	r1, [r7, #8]
 8015052:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	2203      	movs	r2, #3
 8015058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	68ba      	ldr	r2, [r7, #8]
 8015070:	2100      	movs	r1, #0
 8015072:	68f8      	ldr	r0, [r7, #12]
 8015074:	f003 fe7a 	bl	8018d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015078:	2300      	movs	r3, #0
}
 801507a:	4618      	mov	r0, r3
 801507c:	3710      	adds	r7, #16
 801507e:	46bd      	mov	sp, r7
 8015080:	bd80      	pop	{r7, pc}

08015082 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015082:	b580      	push	{r7, lr}
 8015084:	b084      	sub	sp, #16
 8015086:	af00      	add	r7, sp, #0
 8015088:	60f8      	str	r0, [r7, #12]
 801508a:	60b9      	str	r1, [r7, #8]
 801508c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	68ba      	ldr	r2, [r7, #8]
 8015092:	2100      	movs	r1, #0
 8015094:	68f8      	ldr	r0, [r7, #12]
 8015096:	f003 fe69 	bl	8018d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801509a:	2300      	movs	r3, #0
}
 801509c:	4618      	mov	r0, r3
 801509e:	3710      	adds	r7, #16
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}

080150a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b082      	sub	sp, #8
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2204      	movs	r2, #4
 80150b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80150b4:	2300      	movs	r3, #0
 80150b6:	2200      	movs	r2, #0
 80150b8:	2100      	movs	r1, #0
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f003 fe35 	bl	8018d2a <USBD_LL_Transmit>

  return USBD_OK;
 80150c0:	2300      	movs	r3, #0
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3708      	adds	r7, #8
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}

080150ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b082      	sub	sp, #8
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2205      	movs	r2, #5
 80150d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80150da:	2300      	movs	r3, #0
 80150dc:	2200      	movs	r2, #0
 80150de:	2100      	movs	r1, #0
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	f003 fe43 	bl	8018d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80150e6:	2300      	movs	r3, #0
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3708      	adds	r7, #8
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b085      	sub	sp, #20
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	4603      	mov	r3, r0
 80150f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80150fa:	2300      	movs	r3, #0
 80150fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80150fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015102:	2b84      	cmp	r3, #132	; 0x84
 8015104:	d005      	beq.n	8015112 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8015106:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	4413      	add	r3, r2
 801510e:	3303      	adds	r3, #3
 8015110:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015112:	68fb      	ldr	r3, [r7, #12]
}
 8015114:	4618      	mov	r0, r3
 8015116:	3714      	adds	r7, #20
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr

08015120 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8015124:	f001 fa98 	bl	8016658 <vTaskStartScheduler>
  
  return osOK;
 8015128:	2300      	movs	r3, #0
}
 801512a:	4618      	mov	r0, r3
 801512c:	bd80      	pop	{r7, pc}

0801512e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801512e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015130:	b089      	sub	sp, #36	; 0x24
 8015132:	af04      	add	r7, sp, #16
 8015134:	6078      	str	r0, [r7, #4]
 8015136:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	695b      	ldr	r3, [r3, #20]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d020      	beq.n	8015182 <osThreadCreate+0x54>
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	699b      	ldr	r3, [r3, #24]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d01c      	beq.n	8015182 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	685c      	ldr	r4, [r3, #4]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	681d      	ldr	r5, [r3, #0]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	691e      	ldr	r6, [r3, #16]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801515a:	4618      	mov	r0, r3
 801515c:	f7ff ffc8 	bl	80150f0 <makeFreeRtosPriority>
 8015160:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	695b      	ldr	r3, [r3, #20]
 8015166:	687a      	ldr	r2, [r7, #4]
 8015168:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801516a:	9202      	str	r2, [sp, #8]
 801516c:	9301      	str	r3, [sp, #4]
 801516e:	9100      	str	r1, [sp, #0]
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	4632      	mov	r2, r6
 8015174:	4629      	mov	r1, r5
 8015176:	4620      	mov	r0, r4
 8015178:	f001 f802 	bl	8016180 <xTaskCreateStatic>
 801517c:	4603      	mov	r3, r0
 801517e:	60fb      	str	r3, [r7, #12]
 8015180:	e01c      	b.n	80151bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	685c      	ldr	r4, [r3, #4]
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801518e:	b29e      	uxth	r6, r3
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015196:	4618      	mov	r0, r3
 8015198:	f7ff ffaa 	bl	80150f0 <makeFreeRtosPriority>
 801519c:	4602      	mov	r2, r0
 801519e:	f107 030c 	add.w	r3, r7, #12
 80151a2:	9301      	str	r3, [sp, #4]
 80151a4:	9200      	str	r2, [sp, #0]
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	4632      	mov	r2, r6
 80151aa:	4629      	mov	r1, r5
 80151ac:	4620      	mov	r0, r4
 80151ae:	f001 f844 	bl	801623a <xTaskCreate>
 80151b2:	4603      	mov	r3, r0
 80151b4:	2b01      	cmp	r3, #1
 80151b6:	d001      	beq.n	80151bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80151b8:	2300      	movs	r3, #0
 80151ba:	e000      	b.n	80151be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80151bc:	68fb      	ldr	r3, [r7, #12]
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3714      	adds	r7, #20
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080151c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80151c6:	b580      	push	{r7, lr}
 80151c8:	b084      	sub	sp, #16
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d001      	beq.n	80151dc <osDelay+0x16>
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	e000      	b.n	80151de <osDelay+0x18>
 80151dc:	2301      	movs	r3, #1
 80151de:	4618      	mov	r0, r3
 80151e0:	f001 fa06 	bl	80165f0 <vTaskDelay>
  
  return osOK;
 80151e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3710      	adds	r7, #16
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}

080151ee <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80151ee:	b580      	push	{r7, lr}
 80151f0:	b082      	sub	sp, #8
 80151f2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80151f4:	2020      	movs	r0, #32
 80151f6:	f002 ff0f 	bl	8018018 <pvPortMalloc>
 80151fa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d00a      	beq.n	8015218 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2200      	movs	r2, #0
 8015206:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	3304      	adds	r3, #4
 801520c:	4618      	mov	r0, r3
 801520e:	f000 f9dd 	bl	80155cc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2200      	movs	r2, #0
 8015216:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8015218:	687b      	ldr	r3, [r7, #4]
	}
 801521a:	4618      	mov	r0, r3
 801521c:	3708      	adds	r7, #8
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
	...

08015224 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b090      	sub	sp, #64	; 0x40
 8015228:	af00      	add	r7, sp, #0
 801522a:	60f8      	str	r0, [r7, #12]
 801522c:	60b9      	str	r1, [r7, #8]
 801522e:	607a      	str	r2, [r7, #4]
 8015230:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8015236:	2300      	movs	r3, #0
 8015238:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801523a:	2300      	movs	r3, #0
 801523c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d10a      	bne.n	801525a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015248:	f383 8811 	msr	BASEPRI, r3
 801524c:	f3bf 8f6f 	isb	sy
 8015250:	f3bf 8f4f 	dsb	sy
 8015254:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015256:	bf00      	nop
 8015258:	e7fe      	b.n	8015258 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015260:	2b00      	cmp	r3, #0
 8015262:	d00a      	beq.n	801527a <xEventGroupWaitBits+0x56>
	__asm volatile
 8015264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015268:	f383 8811 	msr	BASEPRI, r3
 801526c:	f3bf 8f6f 	isb	sy
 8015270:	f3bf 8f4f 	dsb	sy
 8015274:	61fb      	str	r3, [r7, #28]
}
 8015276:	bf00      	nop
 8015278:	e7fe      	b.n	8015278 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d10a      	bne.n	8015296 <xEventGroupWaitBits+0x72>
	__asm volatile
 8015280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015284:	f383 8811 	msr	BASEPRI, r3
 8015288:	f3bf 8f6f 	isb	sy
 801528c:	f3bf 8f4f 	dsb	sy
 8015290:	61bb      	str	r3, [r7, #24]
}
 8015292:	bf00      	nop
 8015294:	e7fe      	b.n	8015294 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015296:	f001 feff 	bl	8017098 <xTaskGetSchedulerState>
 801529a:	4603      	mov	r3, r0
 801529c:	2b00      	cmp	r3, #0
 801529e:	d102      	bne.n	80152a6 <xEventGroupWaitBits+0x82>
 80152a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d101      	bne.n	80152aa <xEventGroupWaitBits+0x86>
 80152a6:	2301      	movs	r3, #1
 80152a8:	e000      	b.n	80152ac <xEventGroupWaitBits+0x88>
 80152aa:	2300      	movs	r3, #0
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d10a      	bne.n	80152c6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80152b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b4:	f383 8811 	msr	BASEPRI, r3
 80152b8:	f3bf 8f6f 	isb	sy
 80152bc:	f3bf 8f4f 	dsb	sy
 80152c0:	617b      	str	r3, [r7, #20]
}
 80152c2:	bf00      	nop
 80152c4:	e7fe      	b.n	80152c4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80152c6:	f001 fa39 	bl	801673c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80152ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80152d0:	683a      	ldr	r2, [r7, #0]
 80152d2:	68b9      	ldr	r1, [r7, #8]
 80152d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152d6:	f000 f943 	bl	8015560 <prvTestWaitCondition>
 80152da:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80152dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d00e      	beq.n	8015300 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80152e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80152e6:	2300      	movs	r3, #0
 80152e8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d028      	beq.n	8015342 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80152f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	43db      	mvns	r3, r3
 80152f8:	401a      	ands	r2, r3
 80152fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152fc:	601a      	str	r2, [r3, #0]
 80152fe:	e020      	b.n	8015342 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8015300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015302:	2b00      	cmp	r3, #0
 8015304:	d104      	bne.n	8015310 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8015306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015308:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801530a:	2301      	movs	r3, #1
 801530c:	633b      	str	r3, [r7, #48]	; 0x30
 801530e:	e018      	b.n	8015342 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d003      	beq.n	801531e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8015316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015318:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801531c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d003      	beq.n	801532c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8015324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015326:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801532a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801532e:	1d18      	adds	r0, r3, #4
 8015330:	68ba      	ldr	r2, [r7, #8]
 8015332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015334:	4313      	orrs	r3, r2
 8015336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015338:	4619      	mov	r1, r3
 801533a:	f001 fc23 	bl	8016b84 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801533e:	2300      	movs	r3, #0
 8015340:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8015342:	f001 fa09 	bl	8016758 <xTaskResumeAll>
 8015346:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8015348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801534a:	2b00      	cmp	r3, #0
 801534c:	d031      	beq.n	80153b2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015350:	2b00      	cmp	r3, #0
 8015352:	d107      	bne.n	8015364 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8015354:	4b19      	ldr	r3, [pc, #100]	; (80153bc <xEventGroupWaitBits+0x198>)
 8015356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801535a:	601a      	str	r2, [r3, #0]
 801535c:	f3bf 8f4f 	dsb	sy
 8015360:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8015364:	f001 ff3c 	bl	80171e0 <uxTaskResetEventItemValue>
 8015368:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801536a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015370:	2b00      	cmp	r3, #0
 8015372:	d11a      	bne.n	80153aa <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8015374:	f002 fd2e 	bl	8017dd4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8015378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801537e:	683a      	ldr	r2, [r7, #0]
 8015380:	68b9      	ldr	r1, [r7, #8]
 8015382:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015384:	f000 f8ec 	bl	8015560 <prvTestWaitCondition>
 8015388:	4603      	mov	r3, r0
 801538a:	2b00      	cmp	r3, #0
 801538c:	d009      	beq.n	80153a2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d006      	beq.n	80153a2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8015394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	43db      	mvns	r3, r3
 801539c:	401a      	ands	r2, r3
 801539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153a0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80153a2:	2301      	movs	r3, #1
 80153a4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80153a6:	f002 fd45 	bl	8017e34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80153aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80153b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80153b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	3740      	adds	r7, #64	; 0x40
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	e000ed04 	.word	0xe000ed04

080153c0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b086      	sub	sp, #24
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
 80153c8:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d10a      	bne.n	80153ea <xEventGroupClearBits+0x2a>
	__asm volatile
 80153d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d8:	f383 8811 	msr	BASEPRI, r3
 80153dc:	f3bf 8f6f 	isb	sy
 80153e0:	f3bf 8f4f 	dsb	sy
 80153e4:	60fb      	str	r3, [r7, #12]
}
 80153e6:	bf00      	nop
 80153e8:	e7fe      	b.n	80153e8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d00a      	beq.n	801540a <xEventGroupClearBits+0x4a>
	__asm volatile
 80153f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153f8:	f383 8811 	msr	BASEPRI, r3
 80153fc:	f3bf 8f6f 	isb	sy
 8015400:	f3bf 8f4f 	dsb	sy
 8015404:	60bb      	str	r3, [r7, #8]
}
 8015406:	bf00      	nop
 8015408:	e7fe      	b.n	8015408 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801540a:	f002 fce3 	bl	8017dd4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8015414:	697b      	ldr	r3, [r7, #20]
 8015416:	681a      	ldr	r2, [r3, #0]
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	43db      	mvns	r3, r3
 801541c:	401a      	ands	r2, r3
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8015422:	f002 fd07 	bl	8017e34 <vPortExitCritical>

	return uxReturn;
 8015426:	693b      	ldr	r3, [r7, #16]
}
 8015428:	4618      	mov	r0, r3
 801542a:	3718      	adds	r7, #24
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b08e      	sub	sp, #56	; 0x38
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801543a:	2300      	movs	r3, #0
 801543c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8015442:	2300      	movs	r3, #0
 8015444:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d10a      	bne.n	8015462 <xEventGroupSetBits+0x32>
	__asm volatile
 801544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015450:	f383 8811 	msr	BASEPRI, r3
 8015454:	f3bf 8f6f 	isb	sy
 8015458:	f3bf 8f4f 	dsb	sy
 801545c:	613b      	str	r3, [r7, #16]
}
 801545e:	bf00      	nop
 8015460:	e7fe      	b.n	8015460 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015468:	2b00      	cmp	r3, #0
 801546a:	d00a      	beq.n	8015482 <xEventGroupSetBits+0x52>
	__asm volatile
 801546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015470:	f383 8811 	msr	BASEPRI, r3
 8015474:	f3bf 8f6f 	isb	sy
 8015478:	f3bf 8f4f 	dsb	sy
 801547c:	60fb      	str	r3, [r7, #12]
}
 801547e:	bf00      	nop
 8015480:	e7fe      	b.n	8015480 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8015482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015484:	3304      	adds	r3, #4
 8015486:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548a:	3308      	adds	r3, #8
 801548c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801548e:	f001 f955 	bl	801673c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8015492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015494:	68db      	ldr	r3, [r3, #12]
 8015496:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8015498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801549a:	681a      	ldr	r2, [r3, #0]
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	431a      	orrs	r2, r3
 80154a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154a2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80154a4:	e03c      	b.n	8015520 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80154a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80154ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80154b2:	2300      	movs	r3, #0
 80154b4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80154b6:	69bb      	ldr	r3, [r7, #24]
 80154b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80154bc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80154be:	69bb      	ldr	r3, [r7, #24]
 80154c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80154c4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d108      	bne.n	80154e2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80154d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	69bb      	ldr	r3, [r7, #24]
 80154d6:	4013      	ands	r3, r2
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d00b      	beq.n	80154f4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80154dc:	2301      	movs	r3, #1
 80154de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154e0:	e008      	b.n	80154f4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80154e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e4:	681a      	ldr	r2, [r3, #0]
 80154e6:	69bb      	ldr	r3, [r7, #24]
 80154e8:	4013      	ands	r3, r2
 80154ea:	69ba      	ldr	r2, [r7, #24]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d101      	bne.n	80154f4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80154f0:	2301      	movs	r3, #1
 80154f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80154f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d010      	beq.n	801551c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80154fa:	697b      	ldr	r3, [r7, #20]
 80154fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015500:	2b00      	cmp	r3, #0
 8015502:	d003      	beq.n	801550c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8015504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015506:	69bb      	ldr	r3, [r7, #24]
 8015508:	4313      	orrs	r3, r2
 801550a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015514:	4619      	mov	r1, r3
 8015516:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015518:	f001 fbfe 	bl	8016d18 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8015520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015522:	6a3b      	ldr	r3, [r7, #32]
 8015524:	429a      	cmp	r2, r3
 8015526:	d1be      	bne.n	80154a6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8015528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801552a:	681a      	ldr	r2, [r3, #0]
 801552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801552e:	43db      	mvns	r3, r3
 8015530:	401a      	ands	r2, r3
 8015532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015534:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8015536:	f001 f90f 	bl	8016758 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801553c:	681b      	ldr	r3, [r3, #0]
}
 801553e:	4618      	mov	r0, r3
 8015540:	3738      	adds	r7, #56	; 0x38
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}

08015546 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8015546:	b580      	push	{r7, lr}
 8015548:	b082      	sub	sp, #8
 801554a:	af00      	add	r7, sp, #0
 801554c:	6078      	str	r0, [r7, #4]
 801554e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8015550:	6839      	ldr	r1, [r7, #0]
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	f7ff ff6c 	bl	8015430 <xEventGroupSetBits>
}
 8015558:	bf00      	nop
 801555a:	3708      	adds	r7, #8
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}

08015560 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8015560:	b480      	push	{r7}
 8015562:	b087      	sub	sp, #28
 8015564:	af00      	add	r7, sp, #0
 8015566:	60f8      	str	r0, [r7, #12]
 8015568:	60b9      	str	r1, [r7, #8]
 801556a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801556c:	2300      	movs	r3, #0
 801556e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d107      	bne.n	8015586 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8015576:	68fa      	ldr	r2, [r7, #12]
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	4013      	ands	r3, r2
 801557c:	2b00      	cmp	r3, #0
 801557e:	d00a      	beq.n	8015596 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8015580:	2301      	movs	r3, #1
 8015582:	617b      	str	r3, [r7, #20]
 8015584:	e007      	b.n	8015596 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8015586:	68fa      	ldr	r2, [r7, #12]
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	4013      	ands	r3, r2
 801558c:	68ba      	ldr	r2, [r7, #8]
 801558e:	429a      	cmp	r2, r3
 8015590:	d101      	bne.n	8015596 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8015592:	2301      	movs	r3, #1
 8015594:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8015596:	697b      	ldr	r3, [r7, #20]
}
 8015598:	4618      	mov	r0, r3
 801559a:	371c      	adds	r7, #28
 801559c:	46bd      	mov	sp, r7
 801559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a2:	4770      	bx	lr

080155a4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b086      	sub	sp, #24
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	60f8      	str	r0, [r7, #12]
 80155ac:	60b9      	str	r1, [r7, #8]
 80155ae:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	68ba      	ldr	r2, [r7, #8]
 80155b4:	68f9      	ldr	r1, [r7, #12]
 80155b6:	4804      	ldr	r0, [pc, #16]	; (80155c8 <xEventGroupSetBitsFromISR+0x24>)
 80155b8:	f002 fabe 	bl	8017b38 <xTimerPendFunctionCallFromISR>
 80155bc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80155be:	697b      	ldr	r3, [r7, #20]
	}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3718      	adds	r7, #24
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}
 80155c8:	08015547 	.word	0x08015547

080155cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80155cc:	b480      	push	{r7}
 80155ce:	b083      	sub	sp, #12
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f103 0208 	add.w	r2, r3, #8
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f04f 32ff 	mov.w	r2, #4294967295
 80155e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f103 0208 	add.w	r2, r3, #8
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f103 0208 	add.w	r2, r3, #8
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	2200      	movs	r2, #0
 80155fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015600:	bf00      	nop
 8015602:	370c      	adds	r7, #12
 8015604:	46bd      	mov	sp, r7
 8015606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560a:	4770      	bx	lr

0801560c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801560c:	b480      	push	{r7}
 801560e:	b083      	sub	sp, #12
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2200      	movs	r2, #0
 8015618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801561a:	bf00      	nop
 801561c:	370c      	adds	r7, #12
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr

08015626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015626:	b480      	push	{r7}
 8015628:	b085      	sub	sp, #20
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
 801562e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	685b      	ldr	r3, [r3, #4]
 8015634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	68fa      	ldr	r2, [r7, #12]
 801563a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	689a      	ldr	r2, [r3, #8]
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	689b      	ldr	r3, [r3, #8]
 8015648:	683a      	ldr	r2, [r7, #0]
 801564a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	683a      	ldr	r2, [r7, #0]
 8015650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	687a      	ldr	r2, [r7, #4]
 8015656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	1c5a      	adds	r2, r3, #1
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	601a      	str	r2, [r3, #0]
}
 8015662:	bf00      	nop
 8015664:	3714      	adds	r7, #20
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr

0801566e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801566e:	b480      	push	{r7}
 8015670:	b085      	sub	sp, #20
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
 8015676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015684:	d103      	bne.n	801568e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	691b      	ldr	r3, [r3, #16]
 801568a:	60fb      	str	r3, [r7, #12]
 801568c:	e00c      	b.n	80156a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	3308      	adds	r3, #8
 8015692:	60fb      	str	r3, [r7, #12]
 8015694:	e002      	b.n	801569c <vListInsert+0x2e>
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	685b      	ldr	r3, [r3, #4]
 801569a:	60fb      	str	r3, [r7, #12]
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	685b      	ldr	r3, [r3, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	68ba      	ldr	r2, [r7, #8]
 80156a4:	429a      	cmp	r2, r3
 80156a6:	d2f6      	bcs.n	8015696 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	685a      	ldr	r2, [r3, #4]
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	683a      	ldr	r2, [r7, #0]
 80156b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	68fa      	ldr	r2, [r7, #12]
 80156bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	683a      	ldr	r2, [r7, #0]
 80156c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	687a      	ldr	r2, [r7, #4]
 80156c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	1c5a      	adds	r2, r3, #1
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	601a      	str	r2, [r3, #0]
}
 80156d4:	bf00      	nop
 80156d6:	3714      	adds	r7, #20
 80156d8:	46bd      	mov	sp, r7
 80156da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156de:	4770      	bx	lr

080156e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80156e0:	b480      	push	{r7}
 80156e2:	b085      	sub	sp, #20
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	691b      	ldr	r3, [r3, #16]
 80156ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	685b      	ldr	r3, [r3, #4]
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	6892      	ldr	r2, [r2, #8]
 80156f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	689b      	ldr	r3, [r3, #8]
 80156fc:	687a      	ldr	r2, [r7, #4]
 80156fe:	6852      	ldr	r2, [r2, #4]
 8015700:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	687a      	ldr	r2, [r7, #4]
 8015708:	429a      	cmp	r2, r3
 801570a:	d103      	bne.n	8015714 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	689a      	ldr	r2, [r3, #8]
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2200      	movs	r2, #0
 8015718:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	1e5a      	subs	r2, r3, #1
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	681b      	ldr	r3, [r3, #0]
}
 8015728:	4618      	mov	r0, r3
 801572a:	3714      	adds	r7, #20
 801572c:	46bd      	mov	sp, r7
 801572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015732:	4770      	bx	lr

08015734 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b084      	sub	sp, #16
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d10a      	bne.n	801575e <xQueueGenericReset+0x2a>
	__asm volatile
 8015748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801574c:	f383 8811 	msr	BASEPRI, r3
 8015750:	f3bf 8f6f 	isb	sy
 8015754:	f3bf 8f4f 	dsb	sy
 8015758:	60bb      	str	r3, [r7, #8]
}
 801575a:	bf00      	nop
 801575c:	e7fe      	b.n	801575c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801575e:	f002 fb39 	bl	8017dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	681a      	ldr	r2, [r3, #0]
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801576a:	68f9      	ldr	r1, [r7, #12]
 801576c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801576e:	fb01 f303 	mul.w	r3, r1, r3
 8015772:	441a      	add	r2, r3
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	2200      	movs	r2, #0
 801577c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	681a      	ldr	r2, [r3, #0]
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681a      	ldr	r2, [r3, #0]
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801578e:	3b01      	subs	r3, #1
 8015790:	68f9      	ldr	r1, [r7, #12]
 8015792:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015794:	fb01 f303 	mul.w	r3, r1, r3
 8015798:	441a      	add	r2, r3
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	22ff      	movs	r2, #255	; 0xff
 80157a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	22ff      	movs	r2, #255	; 0xff
 80157aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d114      	bne.n	80157de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	691b      	ldr	r3, [r3, #16]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d01a      	beq.n	80157f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	3310      	adds	r3, #16
 80157c0:	4618      	mov	r0, r3
 80157c2:	f001 fa47 	bl	8016c54 <xTaskRemoveFromEventList>
 80157c6:	4603      	mov	r3, r0
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d012      	beq.n	80157f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80157cc:	4b0c      	ldr	r3, [pc, #48]	; (8015800 <xQueueGenericReset+0xcc>)
 80157ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157d2:	601a      	str	r2, [r3, #0]
 80157d4:	f3bf 8f4f 	dsb	sy
 80157d8:	f3bf 8f6f 	isb	sy
 80157dc:	e009      	b.n	80157f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	3310      	adds	r3, #16
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7ff fef2 	bl	80155cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	3324      	adds	r3, #36	; 0x24
 80157ec:	4618      	mov	r0, r3
 80157ee:	f7ff feed 	bl	80155cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80157f2:	f002 fb1f 	bl	8017e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80157f6:	2301      	movs	r3, #1
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	3710      	adds	r7, #16
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}
 8015800:	e000ed04 	.word	0xe000ed04

08015804 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015804:	b580      	push	{r7, lr}
 8015806:	b08e      	sub	sp, #56	; 0x38
 8015808:	af02      	add	r7, sp, #8
 801580a:	60f8      	str	r0, [r7, #12]
 801580c:	60b9      	str	r1, [r7, #8]
 801580e:	607a      	str	r2, [r7, #4]
 8015810:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d10a      	bne.n	801582e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801581c:	f383 8811 	msr	BASEPRI, r3
 8015820:	f3bf 8f6f 	isb	sy
 8015824:	f3bf 8f4f 	dsb	sy
 8015828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801582a:	bf00      	nop
 801582c:	e7fe      	b.n	801582c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d10a      	bne.n	801584a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015838:	f383 8811 	msr	BASEPRI, r3
 801583c:	f3bf 8f6f 	isb	sy
 8015840:	f3bf 8f4f 	dsb	sy
 8015844:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015846:	bf00      	nop
 8015848:	e7fe      	b.n	8015848 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d002      	beq.n	8015856 <xQueueGenericCreateStatic+0x52>
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d001      	beq.n	801585a <xQueueGenericCreateStatic+0x56>
 8015856:	2301      	movs	r3, #1
 8015858:	e000      	b.n	801585c <xQueueGenericCreateStatic+0x58>
 801585a:	2300      	movs	r3, #0
 801585c:	2b00      	cmp	r3, #0
 801585e:	d10a      	bne.n	8015876 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015864:	f383 8811 	msr	BASEPRI, r3
 8015868:	f3bf 8f6f 	isb	sy
 801586c:	f3bf 8f4f 	dsb	sy
 8015870:	623b      	str	r3, [r7, #32]
}
 8015872:	bf00      	nop
 8015874:	e7fe      	b.n	8015874 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d102      	bne.n	8015882 <xQueueGenericCreateStatic+0x7e>
 801587c:	68bb      	ldr	r3, [r7, #8]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d101      	bne.n	8015886 <xQueueGenericCreateStatic+0x82>
 8015882:	2301      	movs	r3, #1
 8015884:	e000      	b.n	8015888 <xQueueGenericCreateStatic+0x84>
 8015886:	2300      	movs	r3, #0
 8015888:	2b00      	cmp	r3, #0
 801588a:	d10a      	bne.n	80158a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015890:	f383 8811 	msr	BASEPRI, r3
 8015894:	f3bf 8f6f 	isb	sy
 8015898:	f3bf 8f4f 	dsb	sy
 801589c:	61fb      	str	r3, [r7, #28]
}
 801589e:	bf00      	nop
 80158a0:	e7fe      	b.n	80158a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80158a2:	2350      	movs	r3, #80	; 0x50
 80158a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	2b50      	cmp	r3, #80	; 0x50
 80158aa:	d00a      	beq.n	80158c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80158ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b0:	f383 8811 	msr	BASEPRI, r3
 80158b4:	f3bf 8f6f 	isb	sy
 80158b8:	f3bf 8f4f 	dsb	sy
 80158bc:	61bb      	str	r3, [r7, #24]
}
 80158be:	bf00      	nop
 80158c0:	e7fe      	b.n	80158c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80158c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80158c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d00d      	beq.n	80158ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80158ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d0:	2201      	movs	r2, #1
 80158d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80158d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80158da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158dc:	9300      	str	r3, [sp, #0]
 80158de:	4613      	mov	r3, r2
 80158e0:	687a      	ldr	r2, [r7, #4]
 80158e2:	68b9      	ldr	r1, [r7, #8]
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f000 f83f 	bl	8015968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80158ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3730      	adds	r7, #48	; 0x30
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}

080158f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b08a      	sub	sp, #40	; 0x28
 80158f8:	af02      	add	r7, sp, #8
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	4613      	mov	r3, r2
 8015900:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d10a      	bne.n	801591e <xQueueGenericCreate+0x2a>
	__asm volatile
 8015908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801590c:	f383 8811 	msr	BASEPRI, r3
 8015910:	f3bf 8f6f 	isb	sy
 8015914:	f3bf 8f4f 	dsb	sy
 8015918:	613b      	str	r3, [r7, #16]
}
 801591a:	bf00      	nop
 801591c:	e7fe      	b.n	801591c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	68ba      	ldr	r2, [r7, #8]
 8015922:	fb02 f303 	mul.w	r3, r2, r3
 8015926:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015928:	69fb      	ldr	r3, [r7, #28]
 801592a:	3350      	adds	r3, #80	; 0x50
 801592c:	4618      	mov	r0, r3
 801592e:	f002 fb73 	bl	8018018 <pvPortMalloc>
 8015932:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015934:	69bb      	ldr	r3, [r7, #24]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d011      	beq.n	801595e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801593a:	69bb      	ldr	r3, [r7, #24]
 801593c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	3350      	adds	r3, #80	; 0x50
 8015942:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015944:	69bb      	ldr	r3, [r7, #24]
 8015946:	2200      	movs	r2, #0
 8015948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801594c:	79fa      	ldrb	r2, [r7, #7]
 801594e:	69bb      	ldr	r3, [r7, #24]
 8015950:	9300      	str	r3, [sp, #0]
 8015952:	4613      	mov	r3, r2
 8015954:	697a      	ldr	r2, [r7, #20]
 8015956:	68b9      	ldr	r1, [r7, #8]
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f000 f805 	bl	8015968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801595e:	69bb      	ldr	r3, [r7, #24]
	}
 8015960:	4618      	mov	r0, r3
 8015962:	3720      	adds	r7, #32
 8015964:	46bd      	mov	sp, r7
 8015966:	bd80      	pop	{r7, pc}

08015968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b084      	sub	sp, #16
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
 8015974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d103      	bne.n	8015984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801597c:	69bb      	ldr	r3, [r7, #24]
 801597e:	69ba      	ldr	r2, [r7, #24]
 8015980:	601a      	str	r2, [r3, #0]
 8015982:	e002      	b.n	801598a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015984:	69bb      	ldr	r3, [r7, #24]
 8015986:	687a      	ldr	r2, [r7, #4]
 8015988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801598a:	69bb      	ldr	r3, [r7, #24]
 801598c:	68fa      	ldr	r2, [r7, #12]
 801598e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015990:	69bb      	ldr	r3, [r7, #24]
 8015992:	68ba      	ldr	r2, [r7, #8]
 8015994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015996:	2101      	movs	r1, #1
 8015998:	69b8      	ldr	r0, [r7, #24]
 801599a:	f7ff fecb 	bl	8015734 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	78fa      	ldrb	r2, [r7, #3]
 80159a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80159a6:	bf00      	nop
 80159a8:	3710      	adds	r7, #16
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}
	...

080159b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b08e      	sub	sp, #56	; 0x38
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	60f8      	str	r0, [r7, #12]
 80159b8:	60b9      	str	r1, [r7, #8]
 80159ba:	607a      	str	r2, [r7, #4]
 80159bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80159be:	2300      	movs	r3, #0
 80159c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80159c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d10a      	bne.n	80159e2 <xQueueGenericSend+0x32>
	__asm volatile
 80159cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d0:	f383 8811 	msr	BASEPRI, r3
 80159d4:	f3bf 8f6f 	isb	sy
 80159d8:	f3bf 8f4f 	dsb	sy
 80159dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80159de:	bf00      	nop
 80159e0:	e7fe      	b.n	80159e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d103      	bne.n	80159f0 <xQueueGenericSend+0x40>
 80159e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <xQueueGenericSend+0x44>
 80159f0:	2301      	movs	r3, #1
 80159f2:	e000      	b.n	80159f6 <xQueueGenericSend+0x46>
 80159f4:	2300      	movs	r3, #0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d10a      	bne.n	8015a10 <xQueueGenericSend+0x60>
	__asm volatile
 80159fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159fe:	f383 8811 	msr	BASEPRI, r3
 8015a02:	f3bf 8f6f 	isb	sy
 8015a06:	f3bf 8f4f 	dsb	sy
 8015a0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015a0c:	bf00      	nop
 8015a0e:	e7fe      	b.n	8015a0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	2b02      	cmp	r3, #2
 8015a14:	d103      	bne.n	8015a1e <xQueueGenericSend+0x6e>
 8015a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a1a:	2b01      	cmp	r3, #1
 8015a1c:	d101      	bne.n	8015a22 <xQueueGenericSend+0x72>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	e000      	b.n	8015a24 <xQueueGenericSend+0x74>
 8015a22:	2300      	movs	r3, #0
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d10a      	bne.n	8015a3e <xQueueGenericSend+0x8e>
	__asm volatile
 8015a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a2c:	f383 8811 	msr	BASEPRI, r3
 8015a30:	f3bf 8f6f 	isb	sy
 8015a34:	f3bf 8f4f 	dsb	sy
 8015a38:	623b      	str	r3, [r7, #32]
}
 8015a3a:	bf00      	nop
 8015a3c:	e7fe      	b.n	8015a3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a3e:	f001 fb2b 	bl	8017098 <xTaskGetSchedulerState>
 8015a42:	4603      	mov	r3, r0
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d102      	bne.n	8015a4e <xQueueGenericSend+0x9e>
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d101      	bne.n	8015a52 <xQueueGenericSend+0xa2>
 8015a4e:	2301      	movs	r3, #1
 8015a50:	e000      	b.n	8015a54 <xQueueGenericSend+0xa4>
 8015a52:	2300      	movs	r3, #0
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d10a      	bne.n	8015a6e <xQueueGenericSend+0xbe>
	__asm volatile
 8015a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a5c:	f383 8811 	msr	BASEPRI, r3
 8015a60:	f3bf 8f6f 	isb	sy
 8015a64:	f3bf 8f4f 	dsb	sy
 8015a68:	61fb      	str	r3, [r7, #28]
}
 8015a6a:	bf00      	nop
 8015a6c:	e7fe      	b.n	8015a6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015a6e:	f002 f9b1 	bl	8017dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d302      	bcc.n	8015a84 <xQueueGenericSend+0xd4>
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	2b02      	cmp	r3, #2
 8015a82:	d129      	bne.n	8015ad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015a84:	683a      	ldr	r2, [r7, #0]
 8015a86:	68b9      	ldr	r1, [r7, #8]
 8015a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a8a:	f000 fa0b 	bl	8015ea4 <prvCopyDataToQueue>
 8015a8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d010      	beq.n	8015aba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9a:	3324      	adds	r3, #36	; 0x24
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f001 f8d9 	bl	8016c54 <xTaskRemoveFromEventList>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d013      	beq.n	8015ad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015aa8:	4b3f      	ldr	r3, [pc, #252]	; (8015ba8 <xQueueGenericSend+0x1f8>)
 8015aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015aae:	601a      	str	r2, [r3, #0]
 8015ab0:	f3bf 8f4f 	dsb	sy
 8015ab4:	f3bf 8f6f 	isb	sy
 8015ab8:	e00a      	b.n	8015ad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d007      	beq.n	8015ad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015ac0:	4b39      	ldr	r3, [pc, #228]	; (8015ba8 <xQueueGenericSend+0x1f8>)
 8015ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ac6:	601a      	str	r2, [r3, #0]
 8015ac8:	f3bf 8f4f 	dsb	sy
 8015acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015ad0:	f002 f9b0 	bl	8017e34 <vPortExitCritical>
				return pdPASS;
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	e063      	b.n	8015ba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d103      	bne.n	8015ae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015ade:	f002 f9a9 	bl	8017e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	e05c      	b.n	8015ba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d106      	bne.n	8015afa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015aec:	f107 0314 	add.w	r3, r7, #20
 8015af0:	4618      	mov	r0, r3
 8015af2:	f001 f973 	bl	8016ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015af6:	2301      	movs	r3, #1
 8015af8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015afa:	f002 f99b 	bl	8017e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015afe:	f000 fe1d 	bl	801673c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b02:	f002 f967 	bl	8017dd4 <vPortEnterCritical>
 8015b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b0c:	b25b      	sxtb	r3, r3
 8015b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b12:	d103      	bne.n	8015b1c <xQueueGenericSend+0x16c>
 8015b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b16:	2200      	movs	r2, #0
 8015b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b22:	b25b      	sxtb	r3, r3
 8015b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b28:	d103      	bne.n	8015b32 <xQueueGenericSend+0x182>
 8015b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015b32:	f002 f97f 	bl	8017e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b36:	1d3a      	adds	r2, r7, #4
 8015b38:	f107 0314 	add.w	r3, r7, #20
 8015b3c:	4611      	mov	r1, r2
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f001 f962 	bl	8016e08 <xTaskCheckForTimeOut>
 8015b44:	4603      	mov	r3, r0
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d124      	bne.n	8015b94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b4c:	f000 faa2 	bl	8016094 <prvIsQueueFull>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d018      	beq.n	8015b88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b58:	3310      	adds	r3, #16
 8015b5a:	687a      	ldr	r2, [r7, #4]
 8015b5c:	4611      	mov	r1, r2
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f000 ffec 	bl	8016b3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b66:	f000 fa2d 	bl	8015fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015b6a:	f000 fdf5 	bl	8016758 <xTaskResumeAll>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	f47f af7c 	bne.w	8015a6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015b76:	4b0c      	ldr	r3, [pc, #48]	; (8015ba8 <xQueueGenericSend+0x1f8>)
 8015b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b7c:	601a      	str	r2, [r3, #0]
 8015b7e:	f3bf 8f4f 	dsb	sy
 8015b82:	f3bf 8f6f 	isb	sy
 8015b86:	e772      	b.n	8015a6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b8a:	f000 fa1b 	bl	8015fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015b8e:	f000 fde3 	bl	8016758 <xTaskResumeAll>
 8015b92:	e76c      	b.n	8015a6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b96:	f000 fa15 	bl	8015fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015b9a:	f000 fddd 	bl	8016758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3738      	adds	r7, #56	; 0x38
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}
 8015ba8:	e000ed04 	.word	0xe000ed04

08015bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b090      	sub	sp, #64	; 0x40
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d10a      	bne.n	8015bda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc8:	f383 8811 	msr	BASEPRI, r3
 8015bcc:	f3bf 8f6f 	isb	sy
 8015bd0:	f3bf 8f4f 	dsb	sy
 8015bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015bd6:	bf00      	nop
 8015bd8:	e7fe      	b.n	8015bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d103      	bne.n	8015be8 <xQueueGenericSendFromISR+0x3c>
 8015be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d101      	bne.n	8015bec <xQueueGenericSendFromISR+0x40>
 8015be8:	2301      	movs	r3, #1
 8015bea:	e000      	b.n	8015bee <xQueueGenericSendFromISR+0x42>
 8015bec:	2300      	movs	r3, #0
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d10a      	bne.n	8015c08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf6:	f383 8811 	msr	BASEPRI, r3
 8015bfa:	f3bf 8f6f 	isb	sy
 8015bfe:	f3bf 8f4f 	dsb	sy
 8015c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015c04:	bf00      	nop
 8015c06:	e7fe      	b.n	8015c06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	d103      	bne.n	8015c16 <xQueueGenericSendFromISR+0x6a>
 8015c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d101      	bne.n	8015c1a <xQueueGenericSendFromISR+0x6e>
 8015c16:	2301      	movs	r3, #1
 8015c18:	e000      	b.n	8015c1c <xQueueGenericSendFromISR+0x70>
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d10a      	bne.n	8015c36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c24:	f383 8811 	msr	BASEPRI, r3
 8015c28:	f3bf 8f6f 	isb	sy
 8015c2c:	f3bf 8f4f 	dsb	sy
 8015c30:	623b      	str	r3, [r7, #32]
}
 8015c32:	bf00      	nop
 8015c34:	e7fe      	b.n	8015c34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c36:	f002 f9af 	bl	8017f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8015c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c42:	f383 8811 	msr	BASEPRI, r3
 8015c46:	f3bf 8f6f 	isb	sy
 8015c4a:	f3bf 8f4f 	dsb	sy
 8015c4e:	61fa      	str	r2, [r7, #28]
 8015c50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015c52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c5e:	429a      	cmp	r2, r3
 8015c60:	d302      	bcc.n	8015c68 <xQueueGenericSendFromISR+0xbc>
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	2b02      	cmp	r3, #2
 8015c66:	d12f      	bne.n	8015cc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015c78:	683a      	ldr	r2, [r7, #0]
 8015c7a:	68b9      	ldr	r1, [r7, #8]
 8015c7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015c7e:	f000 f911 	bl	8015ea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015c82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c8a:	d112      	bne.n	8015cb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d016      	beq.n	8015cc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c96:	3324      	adds	r3, #36	; 0x24
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f000 ffdb 	bl	8016c54 <xTaskRemoveFromEventList>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d00e      	beq.n	8015cc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d00b      	beq.n	8015cc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	2201      	movs	r2, #1
 8015cae:	601a      	str	r2, [r3, #0]
 8015cb0:	e007      	b.n	8015cc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	b25a      	sxtb	r2, r3
 8015cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015cc6:	e001      	b.n	8015ccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015cd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3740      	adds	r7, #64	; 0x40
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
	...

08015ce4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b08c      	sub	sp, #48	; 0x30
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d10a      	bne.n	8015d14 <xQueueReceive+0x30>
	__asm volatile
 8015cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d02:	f383 8811 	msr	BASEPRI, r3
 8015d06:	f3bf 8f6f 	isb	sy
 8015d0a:	f3bf 8f4f 	dsb	sy
 8015d0e:	623b      	str	r3, [r7, #32]
}
 8015d10:	bf00      	nop
 8015d12:	e7fe      	b.n	8015d12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d14:	68bb      	ldr	r3, [r7, #8]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d103      	bne.n	8015d22 <xQueueReceive+0x3e>
 8015d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d101      	bne.n	8015d26 <xQueueReceive+0x42>
 8015d22:	2301      	movs	r3, #1
 8015d24:	e000      	b.n	8015d28 <xQueueReceive+0x44>
 8015d26:	2300      	movs	r3, #0
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d10a      	bne.n	8015d42 <xQueueReceive+0x5e>
	__asm volatile
 8015d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d30:	f383 8811 	msr	BASEPRI, r3
 8015d34:	f3bf 8f6f 	isb	sy
 8015d38:	f3bf 8f4f 	dsb	sy
 8015d3c:	61fb      	str	r3, [r7, #28]
}
 8015d3e:	bf00      	nop
 8015d40:	e7fe      	b.n	8015d40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d42:	f001 f9a9 	bl	8017098 <xTaskGetSchedulerState>
 8015d46:	4603      	mov	r3, r0
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d102      	bne.n	8015d52 <xQueueReceive+0x6e>
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d101      	bne.n	8015d56 <xQueueReceive+0x72>
 8015d52:	2301      	movs	r3, #1
 8015d54:	e000      	b.n	8015d58 <xQueueReceive+0x74>
 8015d56:	2300      	movs	r3, #0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10a      	bne.n	8015d72 <xQueueReceive+0x8e>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d60:	f383 8811 	msr	BASEPRI, r3
 8015d64:	f3bf 8f6f 	isb	sy
 8015d68:	f3bf 8f4f 	dsb	sy
 8015d6c:	61bb      	str	r3, [r7, #24]
}
 8015d6e:	bf00      	nop
 8015d70:	e7fe      	b.n	8015d70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015d72:	f002 f82f 	bl	8017dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d01f      	beq.n	8015dc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015d82:	68b9      	ldr	r1, [r7, #8]
 8015d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d86:	f000 f8f7 	bl	8015f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8c:	1e5a      	subs	r2, r3, #1
 8015d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d94:	691b      	ldr	r3, [r3, #16]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d00f      	beq.n	8015dba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9c:	3310      	adds	r3, #16
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f000 ff58 	bl	8016c54 <xTaskRemoveFromEventList>
 8015da4:	4603      	mov	r3, r0
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d007      	beq.n	8015dba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015daa:	4b3d      	ldr	r3, [pc, #244]	; (8015ea0 <xQueueReceive+0x1bc>)
 8015dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015db0:	601a      	str	r2, [r3, #0]
 8015db2:	f3bf 8f4f 	dsb	sy
 8015db6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015dba:	f002 f83b 	bl	8017e34 <vPortExitCritical>
				return pdPASS;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	e069      	b.n	8015e96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d103      	bne.n	8015dd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015dc8:	f002 f834 	bl	8017e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	e062      	b.n	8015e96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d106      	bne.n	8015de4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015dd6:	f107 0310 	add.w	r3, r7, #16
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f000 fffe 	bl	8016ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015de0:	2301      	movs	r3, #1
 8015de2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015de4:	f002 f826 	bl	8017e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015de8:	f000 fca8 	bl	801673c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015dec:	f001 fff2 	bl	8017dd4 <vPortEnterCritical>
 8015df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015df6:	b25b      	sxtb	r3, r3
 8015df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dfc:	d103      	bne.n	8015e06 <xQueueReceive+0x122>
 8015dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e00:	2200      	movs	r2, #0
 8015e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e0c:	b25b      	sxtb	r3, r3
 8015e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e12:	d103      	bne.n	8015e1c <xQueueReceive+0x138>
 8015e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e16:	2200      	movs	r2, #0
 8015e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015e1c:	f002 f80a 	bl	8017e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015e20:	1d3a      	adds	r2, r7, #4
 8015e22:	f107 0310 	add.w	r3, r7, #16
 8015e26:	4611      	mov	r1, r2
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f000 ffed 	bl	8016e08 <xTaskCheckForTimeOut>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d123      	bne.n	8015e7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e36:	f000 f917 	bl	8016068 <prvIsQueueEmpty>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d017      	beq.n	8015e70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e42:	3324      	adds	r3, #36	; 0x24
 8015e44:	687a      	ldr	r2, [r7, #4]
 8015e46:	4611      	mov	r1, r2
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f000 fe77 	bl	8016b3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e50:	f000 f8b8 	bl	8015fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015e54:	f000 fc80 	bl	8016758 <xTaskResumeAll>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d189      	bne.n	8015d72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015e5e:	4b10      	ldr	r3, [pc, #64]	; (8015ea0 <xQueueReceive+0x1bc>)
 8015e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e64:	601a      	str	r2, [r3, #0]
 8015e66:	f3bf 8f4f 	dsb	sy
 8015e6a:	f3bf 8f6f 	isb	sy
 8015e6e:	e780      	b.n	8015d72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e72:	f000 f8a7 	bl	8015fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e76:	f000 fc6f 	bl	8016758 <xTaskResumeAll>
 8015e7a:	e77a      	b.n	8015d72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e7e:	f000 f8a1 	bl	8015fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e82:	f000 fc69 	bl	8016758 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e88:	f000 f8ee 	bl	8016068 <prvIsQueueEmpty>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	f43f af6f 	beq.w	8015d72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015e94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	3730      	adds	r7, #48	; 0x30
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
 8015e9e:	bf00      	nop
 8015ea0:	e000ed04 	.word	0xe000ed04

08015ea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b086      	sub	sp, #24
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	60b9      	str	r1, [r7, #8]
 8015eae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015eb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d10d      	bne.n	8015ede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d14d      	bne.n	8015f66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	689b      	ldr	r3, [r3, #8]
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f001 f900 	bl	80170d4 <xTaskPriorityDisinherit>
 8015ed4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	2200      	movs	r2, #0
 8015eda:	609a      	str	r2, [r3, #8]
 8015edc:	e043      	b.n	8015f66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d119      	bne.n	8015f18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	6858      	ldr	r0, [r3, #4]
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eec:	461a      	mov	r2, r3
 8015eee:	68b9      	ldr	r1, [r7, #8]
 8015ef0:	f003 f8d1 	bl	8019096 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	685a      	ldr	r2, [r3, #4]
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015efc:	441a      	add	r2, r3
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	685a      	ldr	r2, [r3, #4]
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	689b      	ldr	r3, [r3, #8]
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	d32b      	bcc.n	8015f66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	681a      	ldr	r2, [r3, #0]
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	605a      	str	r2, [r3, #4]
 8015f16:	e026      	b.n	8015f66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	68d8      	ldr	r0, [r3, #12]
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f20:	461a      	mov	r2, r3
 8015f22:	68b9      	ldr	r1, [r7, #8]
 8015f24:	f003 f8b7 	bl	8019096 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	68da      	ldr	r2, [r3, #12]
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f30:	425b      	negs	r3, r3
 8015f32:	441a      	add	r2, r3
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	68da      	ldr	r2, [r3, #12]
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d207      	bcs.n	8015f54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	689a      	ldr	r2, [r3, #8]
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f4c:	425b      	negs	r3, r3
 8015f4e:	441a      	add	r2, r3
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2b02      	cmp	r3, #2
 8015f58:	d105      	bne.n	8015f66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f5a:	693b      	ldr	r3, [r7, #16]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d002      	beq.n	8015f66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	3b01      	subs	r3, #1
 8015f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	1c5a      	adds	r2, r3, #1
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015f6e:	697b      	ldr	r3, [r7, #20]
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	3718      	adds	r7, #24
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}

08015f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b082      	sub	sp, #8
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d018      	beq.n	8015fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	68da      	ldr	r2, [r3, #12]
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f92:	441a      	add	r2, r3
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	68da      	ldr	r2, [r3, #12]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	689b      	ldr	r3, [r3, #8]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d303      	bcc.n	8015fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681a      	ldr	r2, [r3, #0]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	68d9      	ldr	r1, [r3, #12]
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	6838      	ldr	r0, [r7, #0]
 8015fb8:	f003 f86d 	bl	8019096 <memcpy>
	}
}
 8015fbc:	bf00      	nop
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b084      	sub	sp, #16
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015fcc:	f001 ff02 	bl	8017dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015fd8:	e011      	b.n	8015ffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d012      	beq.n	8016008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	3324      	adds	r3, #36	; 0x24
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f000 fe34 	bl	8016c54 <xTaskRemoveFromEventList>
 8015fec:	4603      	mov	r3, r0
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d001      	beq.n	8015ff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015ff2:	f000 ff6b 	bl	8016ecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015ff6:	7bfb      	ldrb	r3, [r7, #15]
 8015ff8:	3b01      	subs	r3, #1
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016002:	2b00      	cmp	r3, #0
 8016004:	dce9      	bgt.n	8015fda <prvUnlockQueue+0x16>
 8016006:	e000      	b.n	801600a <prvUnlockQueue+0x46>
					break;
 8016008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	22ff      	movs	r2, #255	; 0xff
 801600e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016012:	f001 ff0f 	bl	8017e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016016:	f001 fedd 	bl	8017dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016022:	e011      	b.n	8016048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	691b      	ldr	r3, [r3, #16]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d012      	beq.n	8016052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	3310      	adds	r3, #16
 8016030:	4618      	mov	r0, r3
 8016032:	f000 fe0f 	bl	8016c54 <xTaskRemoveFromEventList>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d001      	beq.n	8016040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801603c:	f000 ff46 	bl	8016ecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016040:	7bbb      	ldrb	r3, [r7, #14]
 8016042:	3b01      	subs	r3, #1
 8016044:	b2db      	uxtb	r3, r3
 8016046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801604c:	2b00      	cmp	r3, #0
 801604e:	dce9      	bgt.n	8016024 <prvUnlockQueue+0x60>
 8016050:	e000      	b.n	8016054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	22ff      	movs	r2, #255	; 0xff
 8016058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801605c:	f001 feea 	bl	8017e34 <vPortExitCritical>
}
 8016060:	bf00      	nop
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016070:	f001 feb0 	bl	8017dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016078:	2b00      	cmp	r3, #0
 801607a:	d102      	bne.n	8016082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801607c:	2301      	movs	r3, #1
 801607e:	60fb      	str	r3, [r7, #12]
 8016080:	e001      	b.n	8016086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016082:	2300      	movs	r3, #0
 8016084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016086:	f001 fed5 	bl	8017e34 <vPortExitCritical>

	return xReturn;
 801608a:	68fb      	ldr	r3, [r7, #12]
}
 801608c:	4618      	mov	r0, r3
 801608e:	3710      	adds	r7, #16
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}

08016094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b084      	sub	sp, #16
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801609c:	f001 fe9a 	bl	8017dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d102      	bne.n	80160b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80160ac:	2301      	movs	r3, #1
 80160ae:	60fb      	str	r3, [r7, #12]
 80160b0:	e001      	b.n	80160b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80160b2:	2300      	movs	r3, #0
 80160b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80160b6:	f001 febd 	bl	8017e34 <vPortExitCritical>

	return xReturn;
 80160ba:	68fb      	ldr	r3, [r7, #12]
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3710      	adds	r7, #16
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80160c4:	b480      	push	{r7}
 80160c6:	b085      	sub	sp, #20
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160ce:	2300      	movs	r3, #0
 80160d0:	60fb      	str	r3, [r7, #12]
 80160d2:	e014      	b.n	80160fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80160d4:	4a0f      	ldr	r2, [pc, #60]	; (8016114 <vQueueAddToRegistry+0x50>)
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d10b      	bne.n	80160f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80160e0:	490c      	ldr	r1, [pc, #48]	; (8016114 <vQueueAddToRegistry+0x50>)
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	683a      	ldr	r2, [r7, #0]
 80160e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80160ea:	4a0a      	ldr	r2, [pc, #40]	; (8016114 <vQueueAddToRegistry+0x50>)
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	00db      	lsls	r3, r3, #3
 80160f0:	4413      	add	r3, r2
 80160f2:	687a      	ldr	r2, [r7, #4]
 80160f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80160f6:	e006      	b.n	8016106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	3301      	adds	r3, #1
 80160fc:	60fb      	str	r3, [r7, #12]
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	2b07      	cmp	r3, #7
 8016102:	d9e7      	bls.n	80160d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016104:	bf00      	nop
 8016106:	bf00      	nop
 8016108:	3714      	adds	r7, #20
 801610a:	46bd      	mov	sp, r7
 801610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016110:	4770      	bx	lr
 8016112:	bf00      	nop
 8016114:	20002990 	.word	0x20002990

08016118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016118:	b580      	push	{r7, lr}
 801611a:	b086      	sub	sp, #24
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016128:	f001 fe54 	bl	8017dd4 <vPortEnterCritical>
 801612c:	697b      	ldr	r3, [r7, #20]
 801612e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016132:	b25b      	sxtb	r3, r3
 8016134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016138:	d103      	bne.n	8016142 <vQueueWaitForMessageRestricted+0x2a>
 801613a:	697b      	ldr	r3, [r7, #20]
 801613c:	2200      	movs	r2, #0
 801613e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016142:	697b      	ldr	r3, [r7, #20]
 8016144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016148:	b25b      	sxtb	r3, r3
 801614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801614e:	d103      	bne.n	8016158 <vQueueWaitForMessageRestricted+0x40>
 8016150:	697b      	ldr	r3, [r7, #20]
 8016152:	2200      	movs	r2, #0
 8016154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016158:	f001 fe6c 	bl	8017e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801615c:	697b      	ldr	r3, [r7, #20]
 801615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016160:	2b00      	cmp	r3, #0
 8016162:	d106      	bne.n	8016172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	3324      	adds	r3, #36	; 0x24
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	68b9      	ldr	r1, [r7, #8]
 801616c:	4618      	mov	r0, r3
 801616e:	f000 fd45 	bl	8016bfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016172:	6978      	ldr	r0, [r7, #20]
 8016174:	f7ff ff26 	bl	8015fc4 <prvUnlockQueue>
	}
 8016178:	bf00      	nop
 801617a:	3718      	adds	r7, #24
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}

08016180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016180:	b580      	push	{r7, lr}
 8016182:	b08e      	sub	sp, #56	; 0x38
 8016184:	af04      	add	r7, sp, #16
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	60b9      	str	r1, [r7, #8]
 801618a:	607a      	str	r2, [r7, #4]
 801618c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016190:	2b00      	cmp	r3, #0
 8016192:	d10a      	bne.n	80161aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8016194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016198:	f383 8811 	msr	BASEPRI, r3
 801619c:	f3bf 8f6f 	isb	sy
 80161a0:	f3bf 8f4f 	dsb	sy
 80161a4:	623b      	str	r3, [r7, #32]
}
 80161a6:	bf00      	nop
 80161a8:	e7fe      	b.n	80161a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80161aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d10a      	bne.n	80161c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80161b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b4:	f383 8811 	msr	BASEPRI, r3
 80161b8:	f3bf 8f6f 	isb	sy
 80161bc:	f3bf 8f4f 	dsb	sy
 80161c0:	61fb      	str	r3, [r7, #28]
}
 80161c2:	bf00      	nop
 80161c4:	e7fe      	b.n	80161c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80161c6:	23c0      	movs	r3, #192	; 0xc0
 80161c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	2bc0      	cmp	r3, #192	; 0xc0
 80161ce:	d00a      	beq.n	80161e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80161d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d4:	f383 8811 	msr	BASEPRI, r3
 80161d8:	f3bf 8f6f 	isb	sy
 80161dc:	f3bf 8f4f 	dsb	sy
 80161e0:	61bb      	str	r3, [r7, #24]
}
 80161e2:	bf00      	nop
 80161e4:	e7fe      	b.n	80161e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80161e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80161e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d01e      	beq.n	801622c <xTaskCreateStatic+0xac>
 80161ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d01b      	beq.n	801622c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80161f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80161f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80161fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80161fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016200:	2202      	movs	r2, #2
 8016202:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016206:	2300      	movs	r3, #0
 8016208:	9303      	str	r3, [sp, #12]
 801620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620c:	9302      	str	r3, [sp, #8]
 801620e:	f107 0314 	add.w	r3, r7, #20
 8016212:	9301      	str	r3, [sp, #4]
 8016214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016216:	9300      	str	r3, [sp, #0]
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	68b9      	ldr	r1, [r7, #8]
 801621e:	68f8      	ldr	r0, [r7, #12]
 8016220:	f000 f850 	bl	80162c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016226:	f000 f8f7 	bl	8016418 <prvAddNewTaskToReadyList>
 801622a:	e001      	b.n	8016230 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801622c:	2300      	movs	r3, #0
 801622e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016230:	697b      	ldr	r3, [r7, #20]
	}
 8016232:	4618      	mov	r0, r3
 8016234:	3728      	adds	r7, #40	; 0x28
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}

0801623a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801623a:	b580      	push	{r7, lr}
 801623c:	b08c      	sub	sp, #48	; 0x30
 801623e:	af04      	add	r7, sp, #16
 8016240:	60f8      	str	r0, [r7, #12]
 8016242:	60b9      	str	r1, [r7, #8]
 8016244:	603b      	str	r3, [r7, #0]
 8016246:	4613      	mov	r3, r2
 8016248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801624a:	88fb      	ldrh	r3, [r7, #6]
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	4618      	mov	r0, r3
 8016250:	f001 fee2 	bl	8018018 <pvPortMalloc>
 8016254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016256:	697b      	ldr	r3, [r7, #20]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d00e      	beq.n	801627a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801625c:	20c0      	movs	r0, #192	; 0xc0
 801625e:	f001 fedb 	bl	8018018 <pvPortMalloc>
 8016262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016264:	69fb      	ldr	r3, [r7, #28]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d003      	beq.n	8016272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801626a:	69fb      	ldr	r3, [r7, #28]
 801626c:	697a      	ldr	r2, [r7, #20]
 801626e:	631a      	str	r2, [r3, #48]	; 0x30
 8016270:	e005      	b.n	801627e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016272:	6978      	ldr	r0, [r7, #20]
 8016274:	f001 ff9c 	bl	80181b0 <vPortFree>
 8016278:	e001      	b.n	801627e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801627a:	2300      	movs	r3, #0
 801627c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801627e:	69fb      	ldr	r3, [r7, #28]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d017      	beq.n	80162b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	2200      	movs	r2, #0
 8016288:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801628c:	88fa      	ldrh	r2, [r7, #6]
 801628e:	2300      	movs	r3, #0
 8016290:	9303      	str	r3, [sp, #12]
 8016292:	69fb      	ldr	r3, [r7, #28]
 8016294:	9302      	str	r3, [sp, #8]
 8016296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016298:	9301      	str	r3, [sp, #4]
 801629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801629c:	9300      	str	r3, [sp, #0]
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	68b9      	ldr	r1, [r7, #8]
 80162a2:	68f8      	ldr	r0, [r7, #12]
 80162a4:	f000 f80e 	bl	80162c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80162a8:	69f8      	ldr	r0, [r7, #28]
 80162aa:	f000 f8b5 	bl	8016418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80162ae:	2301      	movs	r3, #1
 80162b0:	61bb      	str	r3, [r7, #24]
 80162b2:	e002      	b.n	80162ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80162b4:	f04f 33ff 	mov.w	r3, #4294967295
 80162b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80162ba:	69bb      	ldr	r3, [r7, #24]
	}
 80162bc:	4618      	mov	r0, r3
 80162be:	3720      	adds	r7, #32
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}

080162c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b088      	sub	sp, #32
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	607a      	str	r2, [r7, #4]
 80162d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80162d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	461a      	mov	r2, r3
 80162dc:	21a5      	movs	r1, #165	; 0xa5
 80162de:	f002 fee8 	bl	80190b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80162e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80162ec:	3b01      	subs	r3, #1
 80162ee:	009b      	lsls	r3, r3, #2
 80162f0:	4413      	add	r3, r2
 80162f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80162f4:	69bb      	ldr	r3, [r7, #24]
 80162f6:	f023 0307 	bic.w	r3, r3, #7
 80162fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80162fc:	69bb      	ldr	r3, [r7, #24]
 80162fe:	f003 0307 	and.w	r3, r3, #7
 8016302:	2b00      	cmp	r3, #0
 8016304:	d00a      	beq.n	801631c <prvInitialiseNewTask+0x58>
	__asm volatile
 8016306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801630a:	f383 8811 	msr	BASEPRI, r3
 801630e:	f3bf 8f6f 	isb	sy
 8016312:	f3bf 8f4f 	dsb	sy
 8016316:	617b      	str	r3, [r7, #20]
}
 8016318:	bf00      	nop
 801631a:	e7fe      	b.n	801631a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d01f      	beq.n	8016362 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016322:	2300      	movs	r3, #0
 8016324:	61fb      	str	r3, [r7, #28]
 8016326:	e012      	b.n	801634e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016328:	68ba      	ldr	r2, [r7, #8]
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	4413      	add	r3, r2
 801632e:	7819      	ldrb	r1, [r3, #0]
 8016330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	4413      	add	r3, r2
 8016336:	3334      	adds	r3, #52	; 0x34
 8016338:	460a      	mov	r2, r1
 801633a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801633c:	68ba      	ldr	r2, [r7, #8]
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	4413      	add	r3, r2
 8016342:	781b      	ldrb	r3, [r3, #0]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d006      	beq.n	8016356 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	3301      	adds	r3, #1
 801634c:	61fb      	str	r3, [r7, #28]
 801634e:	69fb      	ldr	r3, [r7, #28]
 8016350:	2b0f      	cmp	r3, #15
 8016352:	d9e9      	bls.n	8016328 <prvInitialiseNewTask+0x64>
 8016354:	e000      	b.n	8016358 <prvInitialiseNewTask+0x94>
			{
				break;
 8016356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635a:	2200      	movs	r2, #0
 801635c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016360:	e003      	b.n	801636a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016364:	2200      	movs	r2, #0
 8016366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636c:	2b0e      	cmp	r3, #14
 801636e:	d901      	bls.n	8016374 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016370:	230e      	movs	r3, #14
 8016372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801637c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801637e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016382:	2200      	movs	r2, #0
 8016384:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016388:	3304      	adds	r3, #4
 801638a:	4618      	mov	r0, r3
 801638c:	f7ff f93e 	bl	801560c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016392:	3318      	adds	r3, #24
 8016394:	4618      	mov	r0, r3
 8016396:	f7ff f939 	bl	801560c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801639e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a2:	f1c3 020f 	rsb	r2, r3, #15
 80163a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80163aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80163b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b2:	2200      	movs	r2, #0
 80163b4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80163b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b8:	2200      	movs	r2, #0
 80163ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80163be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c0:	2200      	movs	r2, #0
 80163c2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80163c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c8:	3358      	adds	r3, #88	; 0x58
 80163ca:	2260      	movs	r2, #96	; 0x60
 80163cc:	2100      	movs	r1, #0
 80163ce:	4618      	mov	r0, r3
 80163d0:	f002 fe6f 	bl	80190b2 <memset>
 80163d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d6:	4a0d      	ldr	r2, [pc, #52]	; (801640c <prvInitialiseNewTask+0x148>)
 80163d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80163da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163dc:	4a0c      	ldr	r2, [pc, #48]	; (8016410 <prvInitialiseNewTask+0x14c>)
 80163de:	661a      	str	r2, [r3, #96]	; 0x60
 80163e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e2:	4a0c      	ldr	r2, [pc, #48]	; (8016414 <prvInitialiseNewTask+0x150>)
 80163e4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80163e6:	683a      	ldr	r2, [r7, #0]
 80163e8:	68f9      	ldr	r1, [r7, #12]
 80163ea:	69b8      	ldr	r0, [r7, #24]
 80163ec:	f001 fbc4 	bl	8017b78 <pxPortInitialiseStack>
 80163f0:	4602      	mov	r2, r0
 80163f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80163f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d002      	beq.n	8016402 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80163fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016402:	bf00      	nop
 8016404:	3720      	adds	r7, #32
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}
 801640a:	bf00      	nop
 801640c:	0801fd38 	.word	0x0801fd38
 8016410:	0801fd58 	.word	0x0801fd58
 8016414:	0801fd18 	.word	0x0801fd18

08016418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016420:	f001 fcd8 	bl	8017dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016424:	4b2c      	ldr	r3, [pc, #176]	; (80164d8 <prvAddNewTaskToReadyList+0xc0>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	3301      	adds	r3, #1
 801642a:	4a2b      	ldr	r2, [pc, #172]	; (80164d8 <prvAddNewTaskToReadyList+0xc0>)
 801642c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801642e:	4b2b      	ldr	r3, [pc, #172]	; (80164dc <prvAddNewTaskToReadyList+0xc4>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d109      	bne.n	801644a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016436:	4a29      	ldr	r2, [pc, #164]	; (80164dc <prvAddNewTaskToReadyList+0xc4>)
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801643c:	4b26      	ldr	r3, [pc, #152]	; (80164d8 <prvAddNewTaskToReadyList+0xc0>)
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	2b01      	cmp	r3, #1
 8016442:	d110      	bne.n	8016466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016444:	f000 fd66 	bl	8016f14 <prvInitialiseTaskLists>
 8016448:	e00d      	b.n	8016466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801644a:	4b25      	ldr	r3, [pc, #148]	; (80164e0 <prvAddNewTaskToReadyList+0xc8>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d109      	bne.n	8016466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016452:	4b22      	ldr	r3, [pc, #136]	; (80164dc <prvAddNewTaskToReadyList+0xc4>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801645c:	429a      	cmp	r2, r3
 801645e:	d802      	bhi.n	8016466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016460:	4a1e      	ldr	r2, [pc, #120]	; (80164dc <prvAddNewTaskToReadyList+0xc4>)
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016466:	4b1f      	ldr	r3, [pc, #124]	; (80164e4 <prvAddNewTaskToReadyList+0xcc>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	3301      	adds	r3, #1
 801646c:	4a1d      	ldr	r2, [pc, #116]	; (80164e4 <prvAddNewTaskToReadyList+0xcc>)
 801646e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016470:	4b1c      	ldr	r3, [pc, #112]	; (80164e4 <prvAddNewTaskToReadyList+0xcc>)
 8016472:	681a      	ldr	r2, [r3, #0]
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801647c:	2201      	movs	r2, #1
 801647e:	409a      	lsls	r2, r3
 8016480:	4b19      	ldr	r3, [pc, #100]	; (80164e8 <prvAddNewTaskToReadyList+0xd0>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	4313      	orrs	r3, r2
 8016486:	4a18      	ldr	r2, [pc, #96]	; (80164e8 <prvAddNewTaskToReadyList+0xd0>)
 8016488:	6013      	str	r3, [r2, #0]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801648e:	4613      	mov	r3, r2
 8016490:	009b      	lsls	r3, r3, #2
 8016492:	4413      	add	r3, r2
 8016494:	009b      	lsls	r3, r3, #2
 8016496:	4a15      	ldr	r2, [pc, #84]	; (80164ec <prvAddNewTaskToReadyList+0xd4>)
 8016498:	441a      	add	r2, r3
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	3304      	adds	r3, #4
 801649e:	4619      	mov	r1, r3
 80164a0:	4610      	mov	r0, r2
 80164a2:	f7ff f8c0 	bl	8015626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80164a6:	f001 fcc5 	bl	8017e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80164aa:	4b0d      	ldr	r3, [pc, #52]	; (80164e0 <prvAddNewTaskToReadyList+0xc8>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d00e      	beq.n	80164d0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80164b2:	4b0a      	ldr	r3, [pc, #40]	; (80164dc <prvAddNewTaskToReadyList+0xc4>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164bc:	429a      	cmp	r2, r3
 80164be:	d207      	bcs.n	80164d0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80164c0:	4b0b      	ldr	r3, [pc, #44]	; (80164f0 <prvAddNewTaskToReadyList+0xd8>)
 80164c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164c6:	601a      	str	r2, [r3, #0]
 80164c8:	f3bf 8f4f 	dsb	sy
 80164cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80164d0:	bf00      	nop
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	20002b70 	.word	0x20002b70
 80164dc:	200029d0 	.word	0x200029d0
 80164e0:	20002b7c 	.word	0x20002b7c
 80164e4:	20002b8c 	.word	0x20002b8c
 80164e8:	20002b78 	.word	0x20002b78
 80164ec:	200029d4 	.word	0x200029d4
 80164f0:	e000ed04 	.word	0xe000ed04

080164f4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b08a      	sub	sp, #40	; 0x28
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80164fe:	2300      	movs	r3, #0
 8016500:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d10a      	bne.n	801651e <vTaskDelayUntil+0x2a>
	__asm volatile
 8016508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801650c:	f383 8811 	msr	BASEPRI, r3
 8016510:	f3bf 8f6f 	isb	sy
 8016514:	f3bf 8f4f 	dsb	sy
 8016518:	617b      	str	r3, [r7, #20]
}
 801651a:	bf00      	nop
 801651c:	e7fe      	b.n	801651c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d10a      	bne.n	801653a <vTaskDelayUntil+0x46>
	__asm volatile
 8016524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016528:	f383 8811 	msr	BASEPRI, r3
 801652c:	f3bf 8f6f 	isb	sy
 8016530:	f3bf 8f4f 	dsb	sy
 8016534:	613b      	str	r3, [r7, #16]
}
 8016536:	bf00      	nop
 8016538:	e7fe      	b.n	8016538 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801653a:	4b2a      	ldr	r3, [pc, #168]	; (80165e4 <vTaskDelayUntil+0xf0>)
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d00a      	beq.n	8016558 <vTaskDelayUntil+0x64>
	__asm volatile
 8016542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016546:	f383 8811 	msr	BASEPRI, r3
 801654a:	f3bf 8f6f 	isb	sy
 801654e:	f3bf 8f4f 	dsb	sy
 8016552:	60fb      	str	r3, [r7, #12]
}
 8016554:	bf00      	nop
 8016556:	e7fe      	b.n	8016556 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8016558:	f000 f8f0 	bl	801673c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801655c:	4b22      	ldr	r3, [pc, #136]	; (80165e8 <vTaskDelayUntil+0xf4>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	683a      	ldr	r2, [r7, #0]
 8016568:	4413      	add	r3, r2
 801656a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	6a3a      	ldr	r2, [r7, #32]
 8016572:	429a      	cmp	r2, r3
 8016574:	d20b      	bcs.n	801658e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	69fa      	ldr	r2, [r7, #28]
 801657c:	429a      	cmp	r2, r3
 801657e:	d211      	bcs.n	80165a4 <vTaskDelayUntil+0xb0>
 8016580:	69fa      	ldr	r2, [r7, #28]
 8016582:	6a3b      	ldr	r3, [r7, #32]
 8016584:	429a      	cmp	r2, r3
 8016586:	d90d      	bls.n	80165a4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016588:	2301      	movs	r3, #1
 801658a:	627b      	str	r3, [r7, #36]	; 0x24
 801658c:	e00a      	b.n	80165a4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	69fa      	ldr	r2, [r7, #28]
 8016594:	429a      	cmp	r2, r3
 8016596:	d303      	bcc.n	80165a0 <vTaskDelayUntil+0xac>
 8016598:	69fa      	ldr	r2, [r7, #28]
 801659a:	6a3b      	ldr	r3, [r7, #32]
 801659c:	429a      	cmp	r2, r3
 801659e:	d901      	bls.n	80165a4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80165a0:	2301      	movs	r3, #1
 80165a2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	69fa      	ldr	r2, [r7, #28]
 80165a8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80165aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d006      	beq.n	80165be <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80165b0:	69fa      	ldr	r2, [r7, #28]
 80165b2:	6a3b      	ldr	r3, [r7, #32]
 80165b4:	1ad3      	subs	r3, r2, r3
 80165b6:	2100      	movs	r1, #0
 80165b8:	4618      	mov	r0, r3
 80165ba:	f000 ff09 	bl	80173d0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80165be:	f000 f8cb 	bl	8016758 <xTaskResumeAll>
 80165c2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80165c4:	69bb      	ldr	r3, [r7, #24]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d107      	bne.n	80165da <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80165ca:	4b08      	ldr	r3, [pc, #32]	; (80165ec <vTaskDelayUntil+0xf8>)
 80165cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165d0:	601a      	str	r2, [r3, #0]
 80165d2:	f3bf 8f4f 	dsb	sy
 80165d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80165da:	bf00      	nop
 80165dc:	3728      	adds	r7, #40	; 0x28
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}
 80165e2:	bf00      	nop
 80165e4:	20002b98 	.word	0x20002b98
 80165e8:	20002b74 	.word	0x20002b74
 80165ec:	e000ed04 	.word	0xe000ed04

080165f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b084      	sub	sp, #16
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80165f8:	2300      	movs	r3, #0
 80165fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d017      	beq.n	8016632 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016602:	4b13      	ldr	r3, [pc, #76]	; (8016650 <vTaskDelay+0x60>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d00a      	beq.n	8016620 <vTaskDelay+0x30>
	__asm volatile
 801660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801660e:	f383 8811 	msr	BASEPRI, r3
 8016612:	f3bf 8f6f 	isb	sy
 8016616:	f3bf 8f4f 	dsb	sy
 801661a:	60bb      	str	r3, [r7, #8]
}
 801661c:	bf00      	nop
 801661e:	e7fe      	b.n	801661e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016620:	f000 f88c 	bl	801673c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016624:	2100      	movs	r1, #0
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f000 fed2 	bl	80173d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801662c:	f000 f894 	bl	8016758 <xTaskResumeAll>
 8016630:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d107      	bne.n	8016648 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016638:	4b06      	ldr	r3, [pc, #24]	; (8016654 <vTaskDelay+0x64>)
 801663a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801663e:	601a      	str	r2, [r3, #0]
 8016640:	f3bf 8f4f 	dsb	sy
 8016644:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016648:	bf00      	nop
 801664a:	3710      	adds	r7, #16
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}
 8016650:	20002b98 	.word	0x20002b98
 8016654:	e000ed04 	.word	0xe000ed04

08016658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b08a      	sub	sp, #40	; 0x28
 801665c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801665e:	2300      	movs	r3, #0
 8016660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016662:	2300      	movs	r3, #0
 8016664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016666:	463a      	mov	r2, r7
 8016668:	1d39      	adds	r1, r7, #4
 801666a:	f107 0308 	add.w	r3, r7, #8
 801666e:	4618      	mov	r0, r3
 8016670:	f7ec fccc 	bl	800300c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016674:	6839      	ldr	r1, [r7, #0]
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	68ba      	ldr	r2, [r7, #8]
 801667a:	9202      	str	r2, [sp, #8]
 801667c:	9301      	str	r3, [sp, #4]
 801667e:	2300      	movs	r3, #0
 8016680:	9300      	str	r3, [sp, #0]
 8016682:	2300      	movs	r3, #0
 8016684:	460a      	mov	r2, r1
 8016686:	4925      	ldr	r1, [pc, #148]	; (801671c <vTaskStartScheduler+0xc4>)
 8016688:	4825      	ldr	r0, [pc, #148]	; (8016720 <vTaskStartScheduler+0xc8>)
 801668a:	f7ff fd79 	bl	8016180 <xTaskCreateStatic>
 801668e:	4603      	mov	r3, r0
 8016690:	4a24      	ldr	r2, [pc, #144]	; (8016724 <vTaskStartScheduler+0xcc>)
 8016692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016694:	4b23      	ldr	r3, [pc, #140]	; (8016724 <vTaskStartScheduler+0xcc>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d002      	beq.n	80166a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801669c:	2301      	movs	r3, #1
 801669e:	617b      	str	r3, [r7, #20]
 80166a0:	e001      	b.n	80166a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80166a2:	2300      	movs	r3, #0
 80166a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80166a6:	697b      	ldr	r3, [r7, #20]
 80166a8:	2b01      	cmp	r3, #1
 80166aa:	d102      	bne.n	80166b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80166ac:	f000 fef6 	bl	801749c <xTimerCreateTimerTask>
 80166b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	2b01      	cmp	r3, #1
 80166b6:	d11d      	bne.n	80166f4 <vTaskStartScheduler+0x9c>
	__asm volatile
 80166b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166bc:	f383 8811 	msr	BASEPRI, r3
 80166c0:	f3bf 8f6f 	isb	sy
 80166c4:	f3bf 8f4f 	dsb	sy
 80166c8:	613b      	str	r3, [r7, #16]
}
 80166ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80166cc:	4b16      	ldr	r3, [pc, #88]	; (8016728 <vTaskStartScheduler+0xd0>)
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	3358      	adds	r3, #88	; 0x58
 80166d2:	4a16      	ldr	r2, [pc, #88]	; (801672c <vTaskStartScheduler+0xd4>)
 80166d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80166d6:	4b16      	ldr	r3, [pc, #88]	; (8016730 <vTaskStartScheduler+0xd8>)
 80166d8:	f04f 32ff 	mov.w	r2, #4294967295
 80166dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80166de:	4b15      	ldr	r3, [pc, #84]	; (8016734 <vTaskStartScheduler+0xdc>)
 80166e0:	2201      	movs	r2, #1
 80166e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80166e4:	4b14      	ldr	r3, [pc, #80]	; (8016738 <vTaskStartScheduler+0xe0>)
 80166e6:	2200      	movs	r2, #0
 80166e8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80166ea:	f7ec fc75 	bl	8002fd8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80166ee:	f001 facf 	bl	8017c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80166f2:	e00e      	b.n	8016712 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80166f4:	697b      	ldr	r3, [r7, #20]
 80166f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166fa:	d10a      	bne.n	8016712 <vTaskStartScheduler+0xba>
	__asm volatile
 80166fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016700:	f383 8811 	msr	BASEPRI, r3
 8016704:	f3bf 8f6f 	isb	sy
 8016708:	f3bf 8f4f 	dsb	sy
 801670c:	60fb      	str	r3, [r7, #12]
}
 801670e:	bf00      	nop
 8016710:	e7fe      	b.n	8016710 <vTaskStartScheduler+0xb8>
}
 8016712:	bf00      	nop
 8016714:	3718      	adds	r7, #24
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}
 801671a:	bf00      	nop
 801671c:	0801f680 	.word	0x0801f680
 8016720:	08016ee5 	.word	0x08016ee5
 8016724:	20002b94 	.word	0x20002b94
 8016728:	200029d0 	.word	0x200029d0
 801672c:	2000010c 	.word	0x2000010c
 8016730:	20002b90 	.word	0x20002b90
 8016734:	20002b7c 	.word	0x20002b7c
 8016738:	20002b74 	.word	0x20002b74

0801673c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801673c:	b480      	push	{r7}
 801673e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016740:	4b04      	ldr	r3, [pc, #16]	; (8016754 <vTaskSuspendAll+0x18>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	3301      	adds	r3, #1
 8016746:	4a03      	ldr	r2, [pc, #12]	; (8016754 <vTaskSuspendAll+0x18>)
 8016748:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801674a:	bf00      	nop
 801674c:	46bd      	mov	sp, r7
 801674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016752:	4770      	bx	lr
 8016754:	20002b98 	.word	0x20002b98

08016758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b084      	sub	sp, #16
 801675c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801675e:	2300      	movs	r3, #0
 8016760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016762:	2300      	movs	r3, #0
 8016764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016766:	4b41      	ldr	r3, [pc, #260]	; (801686c <xTaskResumeAll+0x114>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d10a      	bne.n	8016784 <xTaskResumeAll+0x2c>
	__asm volatile
 801676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016772:	f383 8811 	msr	BASEPRI, r3
 8016776:	f3bf 8f6f 	isb	sy
 801677a:	f3bf 8f4f 	dsb	sy
 801677e:	603b      	str	r3, [r7, #0]
}
 8016780:	bf00      	nop
 8016782:	e7fe      	b.n	8016782 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016784:	f001 fb26 	bl	8017dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016788:	4b38      	ldr	r3, [pc, #224]	; (801686c <xTaskResumeAll+0x114>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	3b01      	subs	r3, #1
 801678e:	4a37      	ldr	r2, [pc, #220]	; (801686c <xTaskResumeAll+0x114>)
 8016790:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016792:	4b36      	ldr	r3, [pc, #216]	; (801686c <xTaskResumeAll+0x114>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d161      	bne.n	801685e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801679a:	4b35      	ldr	r3, [pc, #212]	; (8016870 <xTaskResumeAll+0x118>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d05d      	beq.n	801685e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80167a2:	e02e      	b.n	8016802 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167a4:	4b33      	ldr	r3, [pc, #204]	; (8016874 <xTaskResumeAll+0x11c>)
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	68db      	ldr	r3, [r3, #12]
 80167aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	3318      	adds	r3, #24
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7fe ff95 	bl	80156e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	3304      	adds	r3, #4
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7fe ff90 	bl	80156e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167c4:	2201      	movs	r2, #1
 80167c6:	409a      	lsls	r2, r3
 80167c8:	4b2b      	ldr	r3, [pc, #172]	; (8016878 <xTaskResumeAll+0x120>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	4313      	orrs	r3, r2
 80167ce:	4a2a      	ldr	r2, [pc, #168]	; (8016878 <xTaskResumeAll+0x120>)
 80167d0:	6013      	str	r3, [r2, #0]
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167d6:	4613      	mov	r3, r2
 80167d8:	009b      	lsls	r3, r3, #2
 80167da:	4413      	add	r3, r2
 80167dc:	009b      	lsls	r3, r3, #2
 80167de:	4a27      	ldr	r2, [pc, #156]	; (801687c <xTaskResumeAll+0x124>)
 80167e0:	441a      	add	r2, r3
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	3304      	adds	r3, #4
 80167e6:	4619      	mov	r1, r3
 80167e8:	4610      	mov	r0, r2
 80167ea:	f7fe ff1c 	bl	8015626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167f2:	4b23      	ldr	r3, [pc, #140]	; (8016880 <xTaskResumeAll+0x128>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d302      	bcc.n	8016802 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80167fc:	4b21      	ldr	r3, [pc, #132]	; (8016884 <xTaskResumeAll+0x12c>)
 80167fe:	2201      	movs	r2, #1
 8016800:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016802:	4b1c      	ldr	r3, [pc, #112]	; (8016874 <xTaskResumeAll+0x11c>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d1cc      	bne.n	80167a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d001      	beq.n	8016814 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016810:	f000 fc22 	bl	8017058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016814:	4b1c      	ldr	r3, [pc, #112]	; (8016888 <xTaskResumeAll+0x130>)
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d010      	beq.n	8016842 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016820:	f000 f846 	bl	80168b0 <xTaskIncrementTick>
 8016824:	4603      	mov	r3, r0
 8016826:	2b00      	cmp	r3, #0
 8016828:	d002      	beq.n	8016830 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801682a:	4b16      	ldr	r3, [pc, #88]	; (8016884 <xTaskResumeAll+0x12c>)
 801682c:	2201      	movs	r2, #1
 801682e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	3b01      	subs	r3, #1
 8016834:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d1f1      	bne.n	8016820 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801683c:	4b12      	ldr	r3, [pc, #72]	; (8016888 <xTaskResumeAll+0x130>)
 801683e:	2200      	movs	r2, #0
 8016840:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016842:	4b10      	ldr	r3, [pc, #64]	; (8016884 <xTaskResumeAll+0x12c>)
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d009      	beq.n	801685e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801684a:	2301      	movs	r3, #1
 801684c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801684e:	4b0f      	ldr	r3, [pc, #60]	; (801688c <xTaskResumeAll+0x134>)
 8016850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016854:	601a      	str	r2, [r3, #0]
 8016856:	f3bf 8f4f 	dsb	sy
 801685a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801685e:	f001 fae9 	bl	8017e34 <vPortExitCritical>

	return xAlreadyYielded;
 8016862:	68bb      	ldr	r3, [r7, #8]
}
 8016864:	4618      	mov	r0, r3
 8016866:	3710      	adds	r7, #16
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}
 801686c:	20002b98 	.word	0x20002b98
 8016870:	20002b70 	.word	0x20002b70
 8016874:	20002b30 	.word	0x20002b30
 8016878:	20002b78 	.word	0x20002b78
 801687c:	200029d4 	.word	0x200029d4
 8016880:	200029d0 	.word	0x200029d0
 8016884:	20002b84 	.word	0x20002b84
 8016888:	20002b80 	.word	0x20002b80
 801688c:	e000ed04 	.word	0xe000ed04

08016890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016890:	b480      	push	{r7}
 8016892:	b083      	sub	sp, #12
 8016894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016896:	4b05      	ldr	r3, [pc, #20]	; (80168ac <xTaskGetTickCount+0x1c>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801689c:	687b      	ldr	r3, [r7, #4]
}
 801689e:	4618      	mov	r0, r3
 80168a0:	370c      	adds	r7, #12
 80168a2:	46bd      	mov	sp, r7
 80168a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a8:	4770      	bx	lr
 80168aa:	bf00      	nop
 80168ac:	20002b74 	.word	0x20002b74

080168b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b086      	sub	sp, #24
 80168b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80168b6:	2300      	movs	r3, #0
 80168b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80168ba:	4b4e      	ldr	r3, [pc, #312]	; (80169f4 <xTaskIncrementTick+0x144>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	f040 808e 	bne.w	80169e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80168c4:	4b4c      	ldr	r3, [pc, #304]	; (80169f8 <xTaskIncrementTick+0x148>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	3301      	adds	r3, #1
 80168ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80168cc:	4a4a      	ldr	r2, [pc, #296]	; (80169f8 <xTaskIncrementTick+0x148>)
 80168ce:	693b      	ldr	r3, [r7, #16]
 80168d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d120      	bne.n	801691a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80168d8:	4b48      	ldr	r3, [pc, #288]	; (80169fc <xTaskIncrementTick+0x14c>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d00a      	beq.n	80168f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80168e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e6:	f383 8811 	msr	BASEPRI, r3
 80168ea:	f3bf 8f6f 	isb	sy
 80168ee:	f3bf 8f4f 	dsb	sy
 80168f2:	603b      	str	r3, [r7, #0]
}
 80168f4:	bf00      	nop
 80168f6:	e7fe      	b.n	80168f6 <xTaskIncrementTick+0x46>
 80168f8:	4b40      	ldr	r3, [pc, #256]	; (80169fc <xTaskIncrementTick+0x14c>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	60fb      	str	r3, [r7, #12]
 80168fe:	4b40      	ldr	r3, [pc, #256]	; (8016a00 <xTaskIncrementTick+0x150>)
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	4a3e      	ldr	r2, [pc, #248]	; (80169fc <xTaskIncrementTick+0x14c>)
 8016904:	6013      	str	r3, [r2, #0]
 8016906:	4a3e      	ldr	r2, [pc, #248]	; (8016a00 <xTaskIncrementTick+0x150>)
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	6013      	str	r3, [r2, #0]
 801690c:	4b3d      	ldr	r3, [pc, #244]	; (8016a04 <xTaskIncrementTick+0x154>)
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	3301      	adds	r3, #1
 8016912:	4a3c      	ldr	r2, [pc, #240]	; (8016a04 <xTaskIncrementTick+0x154>)
 8016914:	6013      	str	r3, [r2, #0]
 8016916:	f000 fb9f 	bl	8017058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801691a:	4b3b      	ldr	r3, [pc, #236]	; (8016a08 <xTaskIncrementTick+0x158>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	693a      	ldr	r2, [r7, #16]
 8016920:	429a      	cmp	r2, r3
 8016922:	d348      	bcc.n	80169b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016924:	4b35      	ldr	r3, [pc, #212]	; (80169fc <xTaskIncrementTick+0x14c>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d104      	bne.n	8016938 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801692e:	4b36      	ldr	r3, [pc, #216]	; (8016a08 <xTaskIncrementTick+0x158>)
 8016930:	f04f 32ff 	mov.w	r2, #4294967295
 8016934:	601a      	str	r2, [r3, #0]
					break;
 8016936:	e03e      	b.n	80169b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016938:	4b30      	ldr	r3, [pc, #192]	; (80169fc <xTaskIncrementTick+0x14c>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	68db      	ldr	r3, [r3, #12]
 801693e:	68db      	ldr	r3, [r3, #12]
 8016940:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016948:	693a      	ldr	r2, [r7, #16]
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	429a      	cmp	r2, r3
 801694e:	d203      	bcs.n	8016958 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016950:	4a2d      	ldr	r2, [pc, #180]	; (8016a08 <xTaskIncrementTick+0x158>)
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016956:	e02e      	b.n	80169b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	3304      	adds	r3, #4
 801695c:	4618      	mov	r0, r3
 801695e:	f7fe febf 	bl	80156e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016966:	2b00      	cmp	r3, #0
 8016968:	d004      	beq.n	8016974 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801696a:	68bb      	ldr	r3, [r7, #8]
 801696c:	3318      	adds	r3, #24
 801696e:	4618      	mov	r0, r3
 8016970:	f7fe feb6 	bl	80156e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016978:	2201      	movs	r2, #1
 801697a:	409a      	lsls	r2, r3
 801697c:	4b23      	ldr	r3, [pc, #140]	; (8016a0c <xTaskIncrementTick+0x15c>)
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	4313      	orrs	r3, r2
 8016982:	4a22      	ldr	r2, [pc, #136]	; (8016a0c <xTaskIncrementTick+0x15c>)
 8016984:	6013      	str	r3, [r2, #0]
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801698a:	4613      	mov	r3, r2
 801698c:	009b      	lsls	r3, r3, #2
 801698e:	4413      	add	r3, r2
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	4a1f      	ldr	r2, [pc, #124]	; (8016a10 <xTaskIncrementTick+0x160>)
 8016994:	441a      	add	r2, r3
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	3304      	adds	r3, #4
 801699a:	4619      	mov	r1, r3
 801699c:	4610      	mov	r0, r2
 801699e:	f7fe fe42 	bl	8015626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169a6:	4b1b      	ldr	r3, [pc, #108]	; (8016a14 <xTaskIncrementTick+0x164>)
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d3b9      	bcc.n	8016924 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80169b0:	2301      	movs	r3, #1
 80169b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80169b4:	e7b6      	b.n	8016924 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80169b6:	4b17      	ldr	r3, [pc, #92]	; (8016a14 <xTaskIncrementTick+0x164>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169bc:	4914      	ldr	r1, [pc, #80]	; (8016a10 <xTaskIncrementTick+0x160>)
 80169be:	4613      	mov	r3, r2
 80169c0:	009b      	lsls	r3, r3, #2
 80169c2:	4413      	add	r3, r2
 80169c4:	009b      	lsls	r3, r3, #2
 80169c6:	440b      	add	r3, r1
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d901      	bls.n	80169d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80169ce:	2301      	movs	r3, #1
 80169d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80169d2:	4b11      	ldr	r3, [pc, #68]	; (8016a18 <xTaskIncrementTick+0x168>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d007      	beq.n	80169ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80169da:	2301      	movs	r3, #1
 80169dc:	617b      	str	r3, [r7, #20]
 80169de:	e004      	b.n	80169ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80169e0:	4b0e      	ldr	r3, [pc, #56]	; (8016a1c <xTaskIncrementTick+0x16c>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	3301      	adds	r3, #1
 80169e6:	4a0d      	ldr	r2, [pc, #52]	; (8016a1c <xTaskIncrementTick+0x16c>)
 80169e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80169ea:	697b      	ldr	r3, [r7, #20]
}
 80169ec:	4618      	mov	r0, r3
 80169ee:	3718      	adds	r7, #24
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}
 80169f4:	20002b98 	.word	0x20002b98
 80169f8:	20002b74 	.word	0x20002b74
 80169fc:	20002b28 	.word	0x20002b28
 8016a00:	20002b2c 	.word	0x20002b2c
 8016a04:	20002b88 	.word	0x20002b88
 8016a08:	20002b90 	.word	0x20002b90
 8016a0c:	20002b78 	.word	0x20002b78
 8016a10:	200029d4 	.word	0x200029d4
 8016a14:	200029d0 	.word	0x200029d0
 8016a18:	20002b84 	.word	0x20002b84
 8016a1c:	20002b80 	.word	0x20002b80

08016a20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b086      	sub	sp, #24
 8016a24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016a26:	4b3d      	ldr	r3, [pc, #244]	; (8016b1c <vTaskSwitchContext+0xfc>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d003      	beq.n	8016a36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016a2e:	4b3c      	ldr	r3, [pc, #240]	; (8016b20 <vTaskSwitchContext+0x100>)
 8016a30:	2201      	movs	r2, #1
 8016a32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016a34:	e06e      	b.n	8016b14 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8016a36:	4b3a      	ldr	r3, [pc, #232]	; (8016b20 <vTaskSwitchContext+0x100>)
 8016a38:	2200      	movs	r2, #0
 8016a3a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8016a3c:	f7ec fad3 	bl	8002fe6 <getRunTimeCounterValue>
 8016a40:	4603      	mov	r3, r0
 8016a42:	4a38      	ldr	r2, [pc, #224]	; (8016b24 <vTaskSwitchContext+0x104>)
 8016a44:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8016a46:	4b37      	ldr	r3, [pc, #220]	; (8016b24 <vTaskSwitchContext+0x104>)
 8016a48:	681a      	ldr	r2, [r3, #0]
 8016a4a:	4b37      	ldr	r3, [pc, #220]	; (8016b28 <vTaskSwitchContext+0x108>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d909      	bls.n	8016a66 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8016a52:	4b36      	ldr	r3, [pc, #216]	; (8016b2c <vTaskSwitchContext+0x10c>)
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016a58:	4a32      	ldr	r2, [pc, #200]	; (8016b24 <vTaskSwitchContext+0x104>)
 8016a5a:	6810      	ldr	r0, [r2, #0]
 8016a5c:	4a32      	ldr	r2, [pc, #200]	; (8016b28 <vTaskSwitchContext+0x108>)
 8016a5e:	6812      	ldr	r2, [r2, #0]
 8016a60:	1a82      	subs	r2, r0, r2
 8016a62:	440a      	add	r2, r1
 8016a64:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8016a66:	4b2f      	ldr	r3, [pc, #188]	; (8016b24 <vTaskSwitchContext+0x104>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	4a2f      	ldr	r2, [pc, #188]	; (8016b28 <vTaskSwitchContext+0x108>)
 8016a6c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016a6e:	4b2f      	ldr	r3, [pc, #188]	; (8016b2c <vTaskSwitchContext+0x10c>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	681a      	ldr	r2, [r3, #0]
 8016a74:	4b2d      	ldr	r3, [pc, #180]	; (8016b2c <vTaskSwitchContext+0x10c>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a7a:	429a      	cmp	r2, r3
 8016a7c:	d808      	bhi.n	8016a90 <vTaskSwitchContext+0x70>
 8016a7e:	4b2b      	ldr	r3, [pc, #172]	; (8016b2c <vTaskSwitchContext+0x10c>)
 8016a80:	681a      	ldr	r2, [r3, #0]
 8016a82:	4b2a      	ldr	r3, [pc, #168]	; (8016b2c <vTaskSwitchContext+0x10c>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	3334      	adds	r3, #52	; 0x34
 8016a88:	4619      	mov	r1, r3
 8016a8a:	4610      	mov	r0, r2
 8016a8c:	f7ec fab3 	bl	8002ff6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a90:	4b27      	ldr	r3, [pc, #156]	; (8016b30 <vTaskSwitchContext+0x110>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	fab3 f383 	clz	r3, r3
 8016a9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016a9e:	7afb      	ldrb	r3, [r7, #11]
 8016aa0:	f1c3 031f 	rsb	r3, r3, #31
 8016aa4:	617b      	str	r3, [r7, #20]
 8016aa6:	4923      	ldr	r1, [pc, #140]	; (8016b34 <vTaskSwitchContext+0x114>)
 8016aa8:	697a      	ldr	r2, [r7, #20]
 8016aaa:	4613      	mov	r3, r2
 8016aac:	009b      	lsls	r3, r3, #2
 8016aae:	4413      	add	r3, r2
 8016ab0:	009b      	lsls	r3, r3, #2
 8016ab2:	440b      	add	r3, r1
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d10a      	bne.n	8016ad0 <vTaskSwitchContext+0xb0>
	__asm volatile
 8016aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016abe:	f383 8811 	msr	BASEPRI, r3
 8016ac2:	f3bf 8f6f 	isb	sy
 8016ac6:	f3bf 8f4f 	dsb	sy
 8016aca:	607b      	str	r3, [r7, #4]
}
 8016acc:	bf00      	nop
 8016ace:	e7fe      	b.n	8016ace <vTaskSwitchContext+0xae>
 8016ad0:	697a      	ldr	r2, [r7, #20]
 8016ad2:	4613      	mov	r3, r2
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	4413      	add	r3, r2
 8016ad8:	009b      	lsls	r3, r3, #2
 8016ada:	4a16      	ldr	r2, [pc, #88]	; (8016b34 <vTaskSwitchContext+0x114>)
 8016adc:	4413      	add	r3, r2
 8016ade:	613b      	str	r3, [r7, #16]
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	685b      	ldr	r3, [r3, #4]
 8016ae4:	685a      	ldr	r2, [r3, #4]
 8016ae6:	693b      	ldr	r3, [r7, #16]
 8016ae8:	605a      	str	r2, [r3, #4]
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	685a      	ldr	r2, [r3, #4]
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	3308      	adds	r3, #8
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d104      	bne.n	8016b00 <vTaskSwitchContext+0xe0>
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	685b      	ldr	r3, [r3, #4]
 8016afa:	685a      	ldr	r2, [r3, #4]
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	605a      	str	r2, [r3, #4]
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	685b      	ldr	r3, [r3, #4]
 8016b04:	68db      	ldr	r3, [r3, #12]
 8016b06:	4a09      	ldr	r2, [pc, #36]	; (8016b2c <vTaskSwitchContext+0x10c>)
 8016b08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016b0a:	4b08      	ldr	r3, [pc, #32]	; (8016b2c <vTaskSwitchContext+0x10c>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	3358      	adds	r3, #88	; 0x58
 8016b10:	4a09      	ldr	r2, [pc, #36]	; (8016b38 <vTaskSwitchContext+0x118>)
 8016b12:	6013      	str	r3, [r2, #0]
}
 8016b14:	bf00      	nop
 8016b16:	3718      	adds	r7, #24
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}
 8016b1c:	20002b98 	.word	0x20002b98
 8016b20:	20002b84 	.word	0x20002b84
 8016b24:	20002ba0 	.word	0x20002ba0
 8016b28:	20002b9c 	.word	0x20002b9c
 8016b2c:	200029d0 	.word	0x200029d0
 8016b30:	20002b78 	.word	0x20002b78
 8016b34:	200029d4 	.word	0x200029d4
 8016b38:	2000010c 	.word	0x2000010c

08016b3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b084      	sub	sp, #16
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
 8016b44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d10a      	bne.n	8016b62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b50:	f383 8811 	msr	BASEPRI, r3
 8016b54:	f3bf 8f6f 	isb	sy
 8016b58:	f3bf 8f4f 	dsb	sy
 8016b5c:	60fb      	str	r3, [r7, #12]
}
 8016b5e:	bf00      	nop
 8016b60:	e7fe      	b.n	8016b60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b62:	4b07      	ldr	r3, [pc, #28]	; (8016b80 <vTaskPlaceOnEventList+0x44>)
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	3318      	adds	r3, #24
 8016b68:	4619      	mov	r1, r3
 8016b6a:	6878      	ldr	r0, [r7, #4]
 8016b6c:	f7fe fd7f 	bl	801566e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016b70:	2101      	movs	r1, #1
 8016b72:	6838      	ldr	r0, [r7, #0]
 8016b74:	f000 fc2c 	bl	80173d0 <prvAddCurrentTaskToDelayedList>
}
 8016b78:	bf00      	nop
 8016b7a:	3710      	adds	r7, #16
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}
 8016b80:	200029d0 	.word	0x200029d0

08016b84 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b086      	sub	sp, #24
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	60f8      	str	r0, [r7, #12]
 8016b8c:	60b9      	str	r1, [r7, #8]
 8016b8e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d10a      	bne.n	8016bac <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8016b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b9a:	f383 8811 	msr	BASEPRI, r3
 8016b9e:	f3bf 8f6f 	isb	sy
 8016ba2:	f3bf 8f4f 	dsb	sy
 8016ba6:	617b      	str	r3, [r7, #20]
}
 8016ba8:	bf00      	nop
 8016baa:	e7fe      	b.n	8016baa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8016bac:	4b11      	ldr	r3, [pc, #68]	; (8016bf4 <vTaskPlaceOnUnorderedEventList+0x70>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d10a      	bne.n	8016bca <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8016bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb8:	f383 8811 	msr	BASEPRI, r3
 8016bbc:	f3bf 8f6f 	isb	sy
 8016bc0:	f3bf 8f4f 	dsb	sy
 8016bc4:	613b      	str	r3, [r7, #16]
}
 8016bc6:	bf00      	nop
 8016bc8:	e7fe      	b.n	8016bc8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016bca:	4b0b      	ldr	r3, [pc, #44]	; (8016bf8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	68ba      	ldr	r2, [r7, #8]
 8016bd0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8016bd4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016bd6:	4b08      	ldr	r3, [pc, #32]	; (8016bf8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	3318      	adds	r3, #24
 8016bdc:	4619      	mov	r1, r3
 8016bde:	68f8      	ldr	r0, [r7, #12]
 8016be0:	f7fe fd21 	bl	8015626 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016be4:	2101      	movs	r1, #1
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f000 fbf2 	bl	80173d0 <prvAddCurrentTaskToDelayedList>
}
 8016bec:	bf00      	nop
 8016bee:	3718      	adds	r7, #24
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}
 8016bf4:	20002b98 	.word	0x20002b98
 8016bf8:	200029d0 	.word	0x200029d0

08016bfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b086      	sub	sp, #24
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	60b9      	str	r1, [r7, #8]
 8016c06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d10a      	bne.n	8016c24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c12:	f383 8811 	msr	BASEPRI, r3
 8016c16:	f3bf 8f6f 	isb	sy
 8016c1a:	f3bf 8f4f 	dsb	sy
 8016c1e:	617b      	str	r3, [r7, #20]
}
 8016c20:	bf00      	nop
 8016c22:	e7fe      	b.n	8016c22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016c24:	4b0a      	ldr	r3, [pc, #40]	; (8016c50 <vTaskPlaceOnEventListRestricted+0x54>)
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	3318      	adds	r3, #24
 8016c2a:	4619      	mov	r1, r3
 8016c2c:	68f8      	ldr	r0, [r7, #12]
 8016c2e:	f7fe fcfa 	bl	8015626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d002      	beq.n	8016c3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016c38:	f04f 33ff 	mov.w	r3, #4294967295
 8016c3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016c3e:	6879      	ldr	r1, [r7, #4]
 8016c40:	68b8      	ldr	r0, [r7, #8]
 8016c42:	f000 fbc5 	bl	80173d0 <prvAddCurrentTaskToDelayedList>
	}
 8016c46:	bf00      	nop
 8016c48:	3718      	adds	r7, #24
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd80      	pop	{r7, pc}
 8016c4e:	bf00      	nop
 8016c50:	200029d0 	.word	0x200029d0

08016c54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	68db      	ldr	r3, [r3, #12]
 8016c60:	68db      	ldr	r3, [r3, #12]
 8016c62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016c64:	693b      	ldr	r3, [r7, #16]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d10a      	bne.n	8016c80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c6e:	f383 8811 	msr	BASEPRI, r3
 8016c72:	f3bf 8f6f 	isb	sy
 8016c76:	f3bf 8f4f 	dsb	sy
 8016c7a:	60fb      	str	r3, [r7, #12]
}
 8016c7c:	bf00      	nop
 8016c7e:	e7fe      	b.n	8016c7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016c80:	693b      	ldr	r3, [r7, #16]
 8016c82:	3318      	adds	r3, #24
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7fe fd2b 	bl	80156e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c8a:	4b1d      	ldr	r3, [pc, #116]	; (8016d00 <xTaskRemoveFromEventList+0xac>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d11c      	bne.n	8016ccc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	3304      	adds	r3, #4
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7fe fd22 	bl	80156e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016c9c:	693b      	ldr	r3, [r7, #16]
 8016c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ca0:	2201      	movs	r2, #1
 8016ca2:	409a      	lsls	r2, r3
 8016ca4:	4b17      	ldr	r3, [pc, #92]	; (8016d04 <xTaskRemoveFromEventList+0xb0>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	4313      	orrs	r3, r2
 8016caa:	4a16      	ldr	r2, [pc, #88]	; (8016d04 <xTaskRemoveFromEventList+0xb0>)
 8016cac:	6013      	str	r3, [r2, #0]
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cb2:	4613      	mov	r3, r2
 8016cb4:	009b      	lsls	r3, r3, #2
 8016cb6:	4413      	add	r3, r2
 8016cb8:	009b      	lsls	r3, r3, #2
 8016cba:	4a13      	ldr	r2, [pc, #76]	; (8016d08 <xTaskRemoveFromEventList+0xb4>)
 8016cbc:	441a      	add	r2, r3
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	3304      	adds	r3, #4
 8016cc2:	4619      	mov	r1, r3
 8016cc4:	4610      	mov	r0, r2
 8016cc6:	f7fe fcae 	bl	8015626 <vListInsertEnd>
 8016cca:	e005      	b.n	8016cd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	3318      	adds	r3, #24
 8016cd0:	4619      	mov	r1, r3
 8016cd2:	480e      	ldr	r0, [pc, #56]	; (8016d0c <xTaskRemoveFromEventList+0xb8>)
 8016cd4:	f7fe fca7 	bl	8015626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016cd8:	693b      	ldr	r3, [r7, #16]
 8016cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cdc:	4b0c      	ldr	r3, [pc, #48]	; (8016d10 <xTaskRemoveFromEventList+0xbc>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d905      	bls.n	8016cf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016ce6:	2301      	movs	r3, #1
 8016ce8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016cea:	4b0a      	ldr	r3, [pc, #40]	; (8016d14 <xTaskRemoveFromEventList+0xc0>)
 8016cec:	2201      	movs	r2, #1
 8016cee:	601a      	str	r2, [r3, #0]
 8016cf0:	e001      	b.n	8016cf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016cf6:	697b      	ldr	r3, [r7, #20]
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3718      	adds	r7, #24
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}
 8016d00:	20002b98 	.word	0x20002b98
 8016d04:	20002b78 	.word	0x20002b78
 8016d08:	200029d4 	.word	0x200029d4
 8016d0c:	20002b30 	.word	0x20002b30
 8016d10:	200029d0 	.word	0x200029d0
 8016d14:	20002b84 	.word	0x20002b84

08016d18 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b086      	sub	sp, #24
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
 8016d20:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8016d22:	4b29      	ldr	r3, [pc, #164]	; (8016dc8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d10a      	bne.n	8016d40 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8016d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d2e:	f383 8811 	msr	BASEPRI, r3
 8016d32:	f3bf 8f6f 	isb	sy
 8016d36:	f3bf 8f4f 	dsb	sy
 8016d3a:	613b      	str	r3, [r7, #16]
}
 8016d3c:	bf00      	nop
 8016d3e:	e7fe      	b.n	8016d3e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	68db      	ldr	r3, [r3, #12]
 8016d4e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8016d50:	697b      	ldr	r3, [r7, #20]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d10a      	bne.n	8016d6c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8016d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d5a:	f383 8811 	msr	BASEPRI, r3
 8016d5e:	f3bf 8f6f 	isb	sy
 8016d62:	f3bf 8f4f 	dsb	sy
 8016d66:	60fb      	str	r3, [r7, #12]
}
 8016d68:	bf00      	nop
 8016d6a:	e7fe      	b.n	8016d6a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f7fe fcb7 	bl	80156e0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	3304      	adds	r3, #4
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7fe fcb2 	bl	80156e0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8016d7c:	697b      	ldr	r3, [r7, #20]
 8016d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d80:	2201      	movs	r2, #1
 8016d82:	409a      	lsls	r2, r3
 8016d84:	4b11      	ldr	r3, [pc, #68]	; (8016dcc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	4313      	orrs	r3, r2
 8016d8a:	4a10      	ldr	r2, [pc, #64]	; (8016dcc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016d8c:	6013      	str	r3, [r2, #0]
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d92:	4613      	mov	r3, r2
 8016d94:	009b      	lsls	r3, r3, #2
 8016d96:	4413      	add	r3, r2
 8016d98:	009b      	lsls	r3, r3, #2
 8016d9a:	4a0d      	ldr	r2, [pc, #52]	; (8016dd0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8016d9c:	441a      	add	r2, r3
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	3304      	adds	r3, #4
 8016da2:	4619      	mov	r1, r3
 8016da4:	4610      	mov	r0, r2
 8016da6:	f7fe fc3e 	bl	8015626 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016daa:	697b      	ldr	r3, [r7, #20]
 8016dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dae:	4b09      	ldr	r3, [pc, #36]	; (8016dd4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016db4:	429a      	cmp	r2, r3
 8016db6:	d902      	bls.n	8016dbe <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8016db8:	4b07      	ldr	r3, [pc, #28]	; (8016dd8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8016dba:	2201      	movs	r2, #1
 8016dbc:	601a      	str	r2, [r3, #0]
	}
}
 8016dbe:	bf00      	nop
 8016dc0:	3718      	adds	r7, #24
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bd80      	pop	{r7, pc}
 8016dc6:	bf00      	nop
 8016dc8:	20002b98 	.word	0x20002b98
 8016dcc:	20002b78 	.word	0x20002b78
 8016dd0:	200029d4 	.word	0x200029d4
 8016dd4:	200029d0 	.word	0x200029d0
 8016dd8:	20002b84 	.word	0x20002b84

08016ddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b083      	sub	sp, #12
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016de4:	4b06      	ldr	r3, [pc, #24]	; (8016e00 <vTaskInternalSetTimeOutState+0x24>)
 8016de6:	681a      	ldr	r2, [r3, #0]
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016dec:	4b05      	ldr	r3, [pc, #20]	; (8016e04 <vTaskInternalSetTimeOutState+0x28>)
 8016dee:	681a      	ldr	r2, [r3, #0]
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	605a      	str	r2, [r3, #4]
}
 8016df4:	bf00      	nop
 8016df6:	370c      	adds	r7, #12
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfe:	4770      	bx	lr
 8016e00:	20002b88 	.word	0x20002b88
 8016e04:	20002b74 	.word	0x20002b74

08016e08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b088      	sub	sp, #32
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
 8016e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d10a      	bne.n	8016e2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e1c:	f383 8811 	msr	BASEPRI, r3
 8016e20:	f3bf 8f6f 	isb	sy
 8016e24:	f3bf 8f4f 	dsb	sy
 8016e28:	613b      	str	r3, [r7, #16]
}
 8016e2a:	bf00      	nop
 8016e2c:	e7fe      	b.n	8016e2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d10a      	bne.n	8016e4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e38:	f383 8811 	msr	BASEPRI, r3
 8016e3c:	f3bf 8f6f 	isb	sy
 8016e40:	f3bf 8f4f 	dsb	sy
 8016e44:	60fb      	str	r3, [r7, #12]
}
 8016e46:	bf00      	nop
 8016e48:	e7fe      	b.n	8016e48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016e4a:	f000 ffc3 	bl	8017dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016e4e:	4b1d      	ldr	r3, [pc, #116]	; (8016ec4 <xTaskCheckForTimeOut+0xbc>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	685b      	ldr	r3, [r3, #4]
 8016e58:	69ba      	ldr	r2, [r7, #24]
 8016e5a:	1ad3      	subs	r3, r2, r3
 8016e5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e66:	d102      	bne.n	8016e6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016e68:	2300      	movs	r3, #0
 8016e6a:	61fb      	str	r3, [r7, #28]
 8016e6c:	e023      	b.n	8016eb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681a      	ldr	r2, [r3, #0]
 8016e72:	4b15      	ldr	r3, [pc, #84]	; (8016ec8 <xTaskCheckForTimeOut+0xc0>)
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	429a      	cmp	r2, r3
 8016e78:	d007      	beq.n	8016e8a <xTaskCheckForTimeOut+0x82>
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	69ba      	ldr	r2, [r7, #24]
 8016e80:	429a      	cmp	r2, r3
 8016e82:	d302      	bcc.n	8016e8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016e84:	2301      	movs	r3, #1
 8016e86:	61fb      	str	r3, [r7, #28]
 8016e88:	e015      	b.n	8016eb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	697a      	ldr	r2, [r7, #20]
 8016e90:	429a      	cmp	r2, r3
 8016e92:	d20b      	bcs.n	8016eac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	681a      	ldr	r2, [r3, #0]
 8016e98:	697b      	ldr	r3, [r7, #20]
 8016e9a:	1ad2      	subs	r2, r2, r3
 8016e9c:	683b      	ldr	r3, [r7, #0]
 8016e9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f7ff ff9b 	bl	8016ddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	61fb      	str	r3, [r7, #28]
 8016eaa:	e004      	b.n	8016eb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016eac:	683b      	ldr	r3, [r7, #0]
 8016eae:	2200      	movs	r2, #0
 8016eb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016eb2:	2301      	movs	r3, #1
 8016eb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016eb6:	f000 ffbd 	bl	8017e34 <vPortExitCritical>

	return xReturn;
 8016eba:	69fb      	ldr	r3, [r7, #28]
}
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	3720      	adds	r7, #32
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}
 8016ec4:	20002b74 	.word	0x20002b74
 8016ec8:	20002b88 	.word	0x20002b88

08016ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016ecc:	b480      	push	{r7}
 8016ece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016ed0:	4b03      	ldr	r3, [pc, #12]	; (8016ee0 <vTaskMissedYield+0x14>)
 8016ed2:	2201      	movs	r2, #1
 8016ed4:	601a      	str	r2, [r3, #0]
}
 8016ed6:	bf00      	nop
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ede:	4770      	bx	lr
 8016ee0:	20002b84 	.word	0x20002b84

08016ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b082      	sub	sp, #8
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016eec:	f000 f852 	bl	8016f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016ef0:	4b06      	ldr	r3, [pc, #24]	; (8016f0c <prvIdleTask+0x28>)
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	2b01      	cmp	r3, #1
 8016ef6:	d9f9      	bls.n	8016eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8016ef8:	4b05      	ldr	r3, [pc, #20]	; (8016f10 <prvIdleTask+0x2c>)
 8016efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016efe:	601a      	str	r2, [r3, #0]
 8016f00:	f3bf 8f4f 	dsb	sy
 8016f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016f08:	e7f0      	b.n	8016eec <prvIdleTask+0x8>
 8016f0a:	bf00      	nop
 8016f0c:	200029d4 	.word	0x200029d4
 8016f10:	e000ed04 	.word	0xe000ed04

08016f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b082      	sub	sp, #8
 8016f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	607b      	str	r3, [r7, #4]
 8016f1e:	e00c      	b.n	8016f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016f20:	687a      	ldr	r2, [r7, #4]
 8016f22:	4613      	mov	r3, r2
 8016f24:	009b      	lsls	r3, r3, #2
 8016f26:	4413      	add	r3, r2
 8016f28:	009b      	lsls	r3, r3, #2
 8016f2a:	4a12      	ldr	r2, [pc, #72]	; (8016f74 <prvInitialiseTaskLists+0x60>)
 8016f2c:	4413      	add	r3, r2
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7fe fb4c 	bl	80155cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	3301      	adds	r3, #1
 8016f38:	607b      	str	r3, [r7, #4]
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	2b0e      	cmp	r3, #14
 8016f3e:	d9ef      	bls.n	8016f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016f40:	480d      	ldr	r0, [pc, #52]	; (8016f78 <prvInitialiseTaskLists+0x64>)
 8016f42:	f7fe fb43 	bl	80155cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016f46:	480d      	ldr	r0, [pc, #52]	; (8016f7c <prvInitialiseTaskLists+0x68>)
 8016f48:	f7fe fb40 	bl	80155cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016f4c:	480c      	ldr	r0, [pc, #48]	; (8016f80 <prvInitialiseTaskLists+0x6c>)
 8016f4e:	f7fe fb3d 	bl	80155cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016f52:	480c      	ldr	r0, [pc, #48]	; (8016f84 <prvInitialiseTaskLists+0x70>)
 8016f54:	f7fe fb3a 	bl	80155cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016f58:	480b      	ldr	r0, [pc, #44]	; (8016f88 <prvInitialiseTaskLists+0x74>)
 8016f5a:	f7fe fb37 	bl	80155cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016f5e:	4b0b      	ldr	r3, [pc, #44]	; (8016f8c <prvInitialiseTaskLists+0x78>)
 8016f60:	4a05      	ldr	r2, [pc, #20]	; (8016f78 <prvInitialiseTaskLists+0x64>)
 8016f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016f64:	4b0a      	ldr	r3, [pc, #40]	; (8016f90 <prvInitialiseTaskLists+0x7c>)
 8016f66:	4a05      	ldr	r2, [pc, #20]	; (8016f7c <prvInitialiseTaskLists+0x68>)
 8016f68:	601a      	str	r2, [r3, #0]
}
 8016f6a:	bf00      	nop
 8016f6c:	3708      	adds	r7, #8
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}
 8016f72:	bf00      	nop
 8016f74:	200029d4 	.word	0x200029d4
 8016f78:	20002b00 	.word	0x20002b00
 8016f7c:	20002b14 	.word	0x20002b14
 8016f80:	20002b30 	.word	0x20002b30
 8016f84:	20002b44 	.word	0x20002b44
 8016f88:	20002b5c 	.word	0x20002b5c
 8016f8c:	20002b28 	.word	0x20002b28
 8016f90:	20002b2c 	.word	0x20002b2c

08016f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b082      	sub	sp, #8
 8016f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016f9a:	e019      	b.n	8016fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016f9c:	f000 ff1a 	bl	8017dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fa0:	4b10      	ldr	r3, [pc, #64]	; (8016fe4 <prvCheckTasksWaitingTermination+0x50>)
 8016fa2:	68db      	ldr	r3, [r3, #12]
 8016fa4:	68db      	ldr	r3, [r3, #12]
 8016fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	3304      	adds	r3, #4
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7fe fb97 	bl	80156e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016fb2:	4b0d      	ldr	r3, [pc, #52]	; (8016fe8 <prvCheckTasksWaitingTermination+0x54>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	3b01      	subs	r3, #1
 8016fb8:	4a0b      	ldr	r2, [pc, #44]	; (8016fe8 <prvCheckTasksWaitingTermination+0x54>)
 8016fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016fbc:	4b0b      	ldr	r3, [pc, #44]	; (8016fec <prvCheckTasksWaitingTermination+0x58>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	3b01      	subs	r3, #1
 8016fc2:	4a0a      	ldr	r2, [pc, #40]	; (8016fec <prvCheckTasksWaitingTermination+0x58>)
 8016fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016fc6:	f000 ff35 	bl	8017e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	f000 f810 	bl	8016ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016fd0:	4b06      	ldr	r3, [pc, #24]	; (8016fec <prvCheckTasksWaitingTermination+0x58>)
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d1e1      	bne.n	8016f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016fd8:	bf00      	nop
 8016fda:	bf00      	nop
 8016fdc:	3708      	adds	r7, #8
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	20002b44 	.word	0x20002b44
 8016fe8:	20002b70 	.word	0x20002b70
 8016fec:	20002b58 	.word	0x20002b58

08016ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b084      	sub	sp, #16
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	3358      	adds	r3, #88	; 0x58
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f002 ff7d 	bl	8019efc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8017008:	2b00      	cmp	r3, #0
 801700a:	d108      	bne.n	801701e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017010:	4618      	mov	r0, r3
 8017012:	f001 f8cd 	bl	80181b0 <vPortFree>
				vPortFree( pxTCB );
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f001 f8ca 	bl	80181b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801701c:	e018      	b.n	8017050 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8017024:	2b01      	cmp	r3, #1
 8017026:	d103      	bne.n	8017030 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f001 f8c1 	bl	80181b0 <vPortFree>
	}
 801702e:	e00f      	b.n	8017050 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8017036:	2b02      	cmp	r3, #2
 8017038:	d00a      	beq.n	8017050 <prvDeleteTCB+0x60>
	__asm volatile
 801703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801703e:	f383 8811 	msr	BASEPRI, r3
 8017042:	f3bf 8f6f 	isb	sy
 8017046:	f3bf 8f4f 	dsb	sy
 801704a:	60fb      	str	r3, [r7, #12]
}
 801704c:	bf00      	nop
 801704e:	e7fe      	b.n	801704e <prvDeleteTCB+0x5e>
	}
 8017050:	bf00      	nop
 8017052:	3710      	adds	r7, #16
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}

08017058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017058:	b480      	push	{r7}
 801705a:	b083      	sub	sp, #12
 801705c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801705e:	4b0c      	ldr	r3, [pc, #48]	; (8017090 <prvResetNextTaskUnblockTime+0x38>)
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d104      	bne.n	8017072 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017068:	4b0a      	ldr	r3, [pc, #40]	; (8017094 <prvResetNextTaskUnblockTime+0x3c>)
 801706a:	f04f 32ff 	mov.w	r2, #4294967295
 801706e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017070:	e008      	b.n	8017084 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017072:	4b07      	ldr	r3, [pc, #28]	; (8017090 <prvResetNextTaskUnblockTime+0x38>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	68db      	ldr	r3, [r3, #12]
 8017078:	68db      	ldr	r3, [r3, #12]
 801707a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	685b      	ldr	r3, [r3, #4]
 8017080:	4a04      	ldr	r2, [pc, #16]	; (8017094 <prvResetNextTaskUnblockTime+0x3c>)
 8017082:	6013      	str	r3, [r2, #0]
}
 8017084:	bf00      	nop
 8017086:	370c      	adds	r7, #12
 8017088:	46bd      	mov	sp, r7
 801708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708e:	4770      	bx	lr
 8017090:	20002b28 	.word	0x20002b28
 8017094:	20002b90 	.word	0x20002b90

08017098 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017098:	b480      	push	{r7}
 801709a:	b083      	sub	sp, #12
 801709c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801709e:	4b0b      	ldr	r3, [pc, #44]	; (80170cc <xTaskGetSchedulerState+0x34>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d102      	bne.n	80170ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80170a6:	2301      	movs	r3, #1
 80170a8:	607b      	str	r3, [r7, #4]
 80170aa:	e008      	b.n	80170be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80170ac:	4b08      	ldr	r3, [pc, #32]	; (80170d0 <xTaskGetSchedulerState+0x38>)
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d102      	bne.n	80170ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80170b4:	2302      	movs	r3, #2
 80170b6:	607b      	str	r3, [r7, #4]
 80170b8:	e001      	b.n	80170be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80170ba:	2300      	movs	r3, #0
 80170bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80170be:	687b      	ldr	r3, [r7, #4]
	}
 80170c0:	4618      	mov	r0, r3
 80170c2:	370c      	adds	r7, #12
 80170c4:	46bd      	mov	sp, r7
 80170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ca:	4770      	bx	lr
 80170cc:	20002b7c 	.word	0x20002b7c
 80170d0:	20002b98 	.word	0x20002b98

080170d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b086      	sub	sp, #24
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80170e0:	2300      	movs	r3, #0
 80170e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d06e      	beq.n	80171c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80170ea:	4b3a      	ldr	r3, [pc, #232]	; (80171d4 <xTaskPriorityDisinherit+0x100>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	693a      	ldr	r2, [r7, #16]
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d00a      	beq.n	801710a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80170f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f8:	f383 8811 	msr	BASEPRI, r3
 80170fc:	f3bf 8f6f 	isb	sy
 8017100:	f3bf 8f4f 	dsb	sy
 8017104:	60fb      	str	r3, [r7, #12]
}
 8017106:	bf00      	nop
 8017108:	e7fe      	b.n	8017108 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801710a:	693b      	ldr	r3, [r7, #16]
 801710c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801710e:	2b00      	cmp	r3, #0
 8017110:	d10a      	bne.n	8017128 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017116:	f383 8811 	msr	BASEPRI, r3
 801711a:	f3bf 8f6f 	isb	sy
 801711e:	f3bf 8f4f 	dsb	sy
 8017122:	60bb      	str	r3, [r7, #8]
}
 8017124:	bf00      	nop
 8017126:	e7fe      	b.n	8017126 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017128:	693b      	ldr	r3, [r7, #16]
 801712a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801712c:	1e5a      	subs	r2, r3, #1
 801712e:	693b      	ldr	r3, [r7, #16]
 8017130:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017136:	693b      	ldr	r3, [r7, #16]
 8017138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801713a:	429a      	cmp	r2, r3
 801713c:	d044      	beq.n	80171c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801713e:	693b      	ldr	r3, [r7, #16]
 8017140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017142:	2b00      	cmp	r3, #0
 8017144:	d140      	bne.n	80171c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	3304      	adds	r3, #4
 801714a:	4618      	mov	r0, r3
 801714c:	f7fe fac8 	bl	80156e0 <uxListRemove>
 8017150:	4603      	mov	r3, r0
 8017152:	2b00      	cmp	r3, #0
 8017154:	d115      	bne.n	8017182 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017156:	693b      	ldr	r3, [r7, #16]
 8017158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801715a:	491f      	ldr	r1, [pc, #124]	; (80171d8 <xTaskPriorityDisinherit+0x104>)
 801715c:	4613      	mov	r3, r2
 801715e:	009b      	lsls	r3, r3, #2
 8017160:	4413      	add	r3, r2
 8017162:	009b      	lsls	r3, r3, #2
 8017164:	440b      	add	r3, r1
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d10a      	bne.n	8017182 <xTaskPriorityDisinherit+0xae>
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017170:	2201      	movs	r2, #1
 8017172:	fa02 f303 	lsl.w	r3, r2, r3
 8017176:	43da      	mvns	r2, r3
 8017178:	4b18      	ldr	r3, [pc, #96]	; (80171dc <xTaskPriorityDisinherit+0x108>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	4013      	ands	r3, r2
 801717e:	4a17      	ldr	r2, [pc, #92]	; (80171dc <xTaskPriorityDisinherit+0x108>)
 8017180:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017186:	693b      	ldr	r3, [r7, #16]
 8017188:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801718e:	f1c3 020f 	rsb	r2, r3, #15
 8017192:	693b      	ldr	r3, [r7, #16]
 8017194:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801719a:	2201      	movs	r2, #1
 801719c:	409a      	lsls	r2, r3
 801719e:	4b0f      	ldr	r3, [pc, #60]	; (80171dc <xTaskPriorityDisinherit+0x108>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	4313      	orrs	r3, r2
 80171a4:	4a0d      	ldr	r2, [pc, #52]	; (80171dc <xTaskPriorityDisinherit+0x108>)
 80171a6:	6013      	str	r3, [r2, #0]
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171ac:	4613      	mov	r3, r2
 80171ae:	009b      	lsls	r3, r3, #2
 80171b0:	4413      	add	r3, r2
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	4a08      	ldr	r2, [pc, #32]	; (80171d8 <xTaskPriorityDisinherit+0x104>)
 80171b6:	441a      	add	r2, r3
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	3304      	adds	r3, #4
 80171bc:	4619      	mov	r1, r3
 80171be:	4610      	mov	r0, r2
 80171c0:	f7fe fa31 	bl	8015626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80171c4:	2301      	movs	r3, #1
 80171c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80171c8:	697b      	ldr	r3, [r7, #20]
	}
 80171ca:	4618      	mov	r0, r3
 80171cc:	3718      	adds	r7, #24
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}
 80171d2:	bf00      	nop
 80171d4:	200029d0 	.word	0x200029d0
 80171d8:	200029d4 	.word	0x200029d4
 80171dc:	20002b78 	.word	0x20002b78

080171e0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80171e0:	b480      	push	{r7}
 80171e2:	b083      	sub	sp, #12
 80171e4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80171e6:	4b09      	ldr	r3, [pc, #36]	; (801720c <uxTaskResetEventItemValue+0x2c>)
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	699b      	ldr	r3, [r3, #24]
 80171ec:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80171ee:	4b07      	ldr	r3, [pc, #28]	; (801720c <uxTaskResetEventItemValue+0x2c>)
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171f4:	4b05      	ldr	r3, [pc, #20]	; (801720c <uxTaskResetEventItemValue+0x2c>)
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	f1c2 020f 	rsb	r2, r2, #15
 80171fc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80171fe:	687b      	ldr	r3, [r7, #4]
}
 8017200:	4618      	mov	r0, r3
 8017202:	370c      	adds	r7, #12
 8017204:	46bd      	mov	sp, r7
 8017206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720a:	4770      	bx	lr
 801720c:	200029d0 	.word	0x200029d0

08017210 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8017210:	b580      	push	{r7, lr}
 8017212:	b084      	sub	sp, #16
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
 8017218:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801721a:	f000 fddb 	bl	8017dd4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801721e:	4b20      	ldr	r3, [pc, #128]	; (80172a0 <ulTaskNotifyTake+0x90>)
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017226:	2b00      	cmp	r3, #0
 8017228:	d113      	bne.n	8017252 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801722a:	4b1d      	ldr	r3, [pc, #116]	; (80172a0 <ulTaskNotifyTake+0x90>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	2201      	movs	r2, #1
 8017230:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d00b      	beq.n	8017252 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801723a:	2101      	movs	r1, #1
 801723c:	6838      	ldr	r0, [r7, #0]
 801723e:	f000 f8c7 	bl	80173d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8017242:	4b18      	ldr	r3, [pc, #96]	; (80172a4 <ulTaskNotifyTake+0x94>)
 8017244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017248:	601a      	str	r2, [r3, #0]
 801724a:	f3bf 8f4f 	dsb	sy
 801724e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017252:	f000 fdef 	bl	8017e34 <vPortExitCritical>

		taskENTER_CRITICAL();
 8017256:	f000 fdbd 	bl	8017dd4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801725a:	4b11      	ldr	r3, [pc, #68]	; (80172a0 <ulTaskNotifyTake+0x90>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017262:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d00e      	beq.n	8017288 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d005      	beq.n	801727c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8017270:	4b0b      	ldr	r3, [pc, #44]	; (80172a0 <ulTaskNotifyTake+0x90>)
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	2200      	movs	r2, #0
 8017276:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801727a:	e005      	b.n	8017288 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801727c:	4b08      	ldr	r3, [pc, #32]	; (80172a0 <ulTaskNotifyTake+0x90>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	68fa      	ldr	r2, [r7, #12]
 8017282:	3a01      	subs	r2, #1
 8017284:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017288:	4b05      	ldr	r3, [pc, #20]	; (80172a0 <ulTaskNotifyTake+0x90>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	2200      	movs	r2, #0
 801728e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8017292:	f000 fdcf 	bl	8017e34 <vPortExitCritical>

		return ulReturn;
 8017296:	68fb      	ldr	r3, [r7, #12]
	}
 8017298:	4618      	mov	r0, r3
 801729a:	3710      	adds	r7, #16
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}
 80172a0:	200029d0 	.word	0x200029d0
 80172a4:	e000ed04 	.word	0xe000ed04

080172a8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b08a      	sub	sp, #40	; 0x28
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d10a      	bne.n	80172ce <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 80172b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172bc:	f383 8811 	msr	BASEPRI, r3
 80172c0:	f3bf 8f6f 	isb	sy
 80172c4:	f3bf 8f4f 	dsb	sy
 80172c8:	61bb      	str	r3, [r7, #24]
}
 80172ca:	bf00      	nop
 80172cc:	e7fe      	b.n	80172cc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80172ce:	f000 fe63 	bl	8017f98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80172d6:	f3ef 8211 	mrs	r2, BASEPRI
 80172da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172de:	f383 8811 	msr	BASEPRI, r3
 80172e2:	f3bf 8f6f 	isb	sy
 80172e6:	f3bf 8f4f 	dsb	sy
 80172ea:	617a      	str	r2, [r7, #20]
 80172ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80172ee:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80172f0:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80172f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80172f8:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80172fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172fc:	2202      	movs	r2, #2
 80172fe:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8017302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017304:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017308:	1c5a      	adds	r2, r3, #1
 801730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801730c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017310:	7ffb      	ldrb	r3, [r7, #31]
 8017312:	2b01      	cmp	r3, #1
 8017314:	d145      	bne.n	80173a2 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801731a:	2b00      	cmp	r3, #0
 801731c:	d00a      	beq.n	8017334 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 801731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017322:	f383 8811 	msr	BASEPRI, r3
 8017326:	f3bf 8f6f 	isb	sy
 801732a:	f3bf 8f4f 	dsb	sy
 801732e:	60fb      	str	r3, [r7, #12]
}
 8017330:	bf00      	nop
 8017332:	e7fe      	b.n	8017332 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017334:	4b20      	ldr	r3, [pc, #128]	; (80173b8 <vTaskNotifyGiveFromISR+0x110>)
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d11c      	bne.n	8017376 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801733e:	3304      	adds	r3, #4
 8017340:	4618      	mov	r0, r3
 8017342:	f7fe f9cd 	bl	80156e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801734a:	2201      	movs	r2, #1
 801734c:	409a      	lsls	r2, r3
 801734e:	4b1b      	ldr	r3, [pc, #108]	; (80173bc <vTaskNotifyGiveFromISR+0x114>)
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	4313      	orrs	r3, r2
 8017354:	4a19      	ldr	r2, [pc, #100]	; (80173bc <vTaskNotifyGiveFromISR+0x114>)
 8017356:	6013      	str	r3, [r2, #0]
 8017358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801735a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801735c:	4613      	mov	r3, r2
 801735e:	009b      	lsls	r3, r3, #2
 8017360:	4413      	add	r3, r2
 8017362:	009b      	lsls	r3, r3, #2
 8017364:	4a16      	ldr	r2, [pc, #88]	; (80173c0 <vTaskNotifyGiveFromISR+0x118>)
 8017366:	441a      	add	r2, r3
 8017368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801736a:	3304      	adds	r3, #4
 801736c:	4619      	mov	r1, r3
 801736e:	4610      	mov	r0, r2
 8017370:	f7fe f959 	bl	8015626 <vListInsertEnd>
 8017374:	e005      	b.n	8017382 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017378:	3318      	adds	r3, #24
 801737a:	4619      	mov	r1, r3
 801737c:	4811      	ldr	r0, [pc, #68]	; (80173c4 <vTaskNotifyGiveFromISR+0x11c>)
 801737e:	f7fe f952 	bl	8015626 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017386:	4b10      	ldr	r3, [pc, #64]	; (80173c8 <vTaskNotifyGiveFromISR+0x120>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801738c:	429a      	cmp	r2, r3
 801738e:	d908      	bls.n	80173a2 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d002      	beq.n	801739c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	2201      	movs	r2, #1
 801739a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801739c:	4b0b      	ldr	r3, [pc, #44]	; (80173cc <vTaskNotifyGiveFromISR+0x124>)
 801739e:	2201      	movs	r2, #1
 80173a0:	601a      	str	r2, [r3, #0]
 80173a2:	6a3b      	ldr	r3, [r7, #32]
 80173a4:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80173a6:	68bb      	ldr	r3, [r7, #8]
 80173a8:	f383 8811 	msr	BASEPRI, r3
}
 80173ac:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80173ae:	bf00      	nop
 80173b0:	3728      	adds	r7, #40	; 0x28
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}
 80173b6:	bf00      	nop
 80173b8:	20002b98 	.word	0x20002b98
 80173bc:	20002b78 	.word	0x20002b78
 80173c0:	200029d4 	.word	0x200029d4
 80173c4:	20002b30 	.word	0x20002b30
 80173c8:	200029d0 	.word	0x200029d0
 80173cc:	20002b84 	.word	0x20002b84

080173d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80173da:	4b29      	ldr	r3, [pc, #164]	; (8017480 <prvAddCurrentTaskToDelayedList+0xb0>)
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80173e0:	4b28      	ldr	r3, [pc, #160]	; (8017484 <prvAddCurrentTaskToDelayedList+0xb4>)
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	3304      	adds	r3, #4
 80173e6:	4618      	mov	r0, r3
 80173e8:	f7fe f97a 	bl	80156e0 <uxListRemove>
 80173ec:	4603      	mov	r3, r0
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d10b      	bne.n	801740a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80173f2:	4b24      	ldr	r3, [pc, #144]	; (8017484 <prvAddCurrentTaskToDelayedList+0xb4>)
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173f8:	2201      	movs	r2, #1
 80173fa:	fa02 f303 	lsl.w	r3, r2, r3
 80173fe:	43da      	mvns	r2, r3
 8017400:	4b21      	ldr	r3, [pc, #132]	; (8017488 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	4013      	ands	r3, r2
 8017406:	4a20      	ldr	r2, [pc, #128]	; (8017488 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017408:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017410:	d10a      	bne.n	8017428 <prvAddCurrentTaskToDelayedList+0x58>
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d007      	beq.n	8017428 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017418:	4b1a      	ldr	r3, [pc, #104]	; (8017484 <prvAddCurrentTaskToDelayedList+0xb4>)
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	3304      	adds	r3, #4
 801741e:	4619      	mov	r1, r3
 8017420:	481a      	ldr	r0, [pc, #104]	; (801748c <prvAddCurrentTaskToDelayedList+0xbc>)
 8017422:	f7fe f900 	bl	8015626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017426:	e026      	b.n	8017476 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017428:	68fa      	ldr	r2, [r7, #12]
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	4413      	add	r3, r2
 801742e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017430:	4b14      	ldr	r3, [pc, #80]	; (8017484 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	68ba      	ldr	r2, [r7, #8]
 8017436:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017438:	68ba      	ldr	r2, [r7, #8]
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	429a      	cmp	r2, r3
 801743e:	d209      	bcs.n	8017454 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017440:	4b13      	ldr	r3, [pc, #76]	; (8017490 <prvAddCurrentTaskToDelayedList+0xc0>)
 8017442:	681a      	ldr	r2, [r3, #0]
 8017444:	4b0f      	ldr	r3, [pc, #60]	; (8017484 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	3304      	adds	r3, #4
 801744a:	4619      	mov	r1, r3
 801744c:	4610      	mov	r0, r2
 801744e:	f7fe f90e 	bl	801566e <vListInsert>
}
 8017452:	e010      	b.n	8017476 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017454:	4b0f      	ldr	r3, [pc, #60]	; (8017494 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017456:	681a      	ldr	r2, [r3, #0]
 8017458:	4b0a      	ldr	r3, [pc, #40]	; (8017484 <prvAddCurrentTaskToDelayedList+0xb4>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	3304      	adds	r3, #4
 801745e:	4619      	mov	r1, r3
 8017460:	4610      	mov	r0, r2
 8017462:	f7fe f904 	bl	801566e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017466:	4b0c      	ldr	r3, [pc, #48]	; (8017498 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	68ba      	ldr	r2, [r7, #8]
 801746c:	429a      	cmp	r2, r3
 801746e:	d202      	bcs.n	8017476 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017470:	4a09      	ldr	r2, [pc, #36]	; (8017498 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017472:	68bb      	ldr	r3, [r7, #8]
 8017474:	6013      	str	r3, [r2, #0]
}
 8017476:	bf00      	nop
 8017478:	3710      	adds	r7, #16
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}
 801747e:	bf00      	nop
 8017480:	20002b74 	.word	0x20002b74
 8017484:	200029d0 	.word	0x200029d0
 8017488:	20002b78 	.word	0x20002b78
 801748c:	20002b5c 	.word	0x20002b5c
 8017490:	20002b2c 	.word	0x20002b2c
 8017494:	20002b28 	.word	0x20002b28
 8017498:	20002b90 	.word	0x20002b90

0801749c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b08a      	sub	sp, #40	; 0x28
 80174a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80174a2:	2300      	movs	r3, #0
 80174a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80174a6:	f000 fb07 	bl	8017ab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80174aa:	4b1c      	ldr	r3, [pc, #112]	; (801751c <xTimerCreateTimerTask+0x80>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d021      	beq.n	80174f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80174b2:	2300      	movs	r3, #0
 80174b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80174b6:	2300      	movs	r3, #0
 80174b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80174ba:	1d3a      	adds	r2, r7, #4
 80174bc:	f107 0108 	add.w	r1, r7, #8
 80174c0:	f107 030c 	add.w	r3, r7, #12
 80174c4:	4618      	mov	r0, r3
 80174c6:	f7eb fdbb 	bl	8003040 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80174ca:	6879      	ldr	r1, [r7, #4]
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	68fa      	ldr	r2, [r7, #12]
 80174d0:	9202      	str	r2, [sp, #8]
 80174d2:	9301      	str	r3, [sp, #4]
 80174d4:	2302      	movs	r3, #2
 80174d6:	9300      	str	r3, [sp, #0]
 80174d8:	2300      	movs	r3, #0
 80174da:	460a      	mov	r2, r1
 80174dc:	4910      	ldr	r1, [pc, #64]	; (8017520 <xTimerCreateTimerTask+0x84>)
 80174de:	4811      	ldr	r0, [pc, #68]	; (8017524 <xTimerCreateTimerTask+0x88>)
 80174e0:	f7fe fe4e 	bl	8016180 <xTaskCreateStatic>
 80174e4:	4603      	mov	r3, r0
 80174e6:	4a10      	ldr	r2, [pc, #64]	; (8017528 <xTimerCreateTimerTask+0x8c>)
 80174e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80174ea:	4b0f      	ldr	r3, [pc, #60]	; (8017528 <xTimerCreateTimerTask+0x8c>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d001      	beq.n	80174f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80174f2:	2301      	movs	r3, #1
 80174f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80174f6:	697b      	ldr	r3, [r7, #20]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d10a      	bne.n	8017512 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80174fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017500:	f383 8811 	msr	BASEPRI, r3
 8017504:	f3bf 8f6f 	isb	sy
 8017508:	f3bf 8f4f 	dsb	sy
 801750c:	613b      	str	r3, [r7, #16]
}
 801750e:	bf00      	nop
 8017510:	e7fe      	b.n	8017510 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017512:	697b      	ldr	r3, [r7, #20]
}
 8017514:	4618      	mov	r0, r3
 8017516:	3718      	adds	r7, #24
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}
 801751c:	20002bd4 	.word	0x20002bd4
 8017520:	0801f6b0 	.word	0x0801f6b0
 8017524:	08017661 	.word	0x08017661
 8017528:	20002bd8 	.word	0x20002bd8

0801752c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b08a      	sub	sp, #40	; 0x28
 8017530:	af00      	add	r7, sp, #0
 8017532:	60f8      	str	r0, [r7, #12]
 8017534:	60b9      	str	r1, [r7, #8]
 8017536:	607a      	str	r2, [r7, #4]
 8017538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801753a:	2300      	movs	r3, #0
 801753c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d10a      	bne.n	801755a <xTimerGenericCommand+0x2e>
	__asm volatile
 8017544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017548:	f383 8811 	msr	BASEPRI, r3
 801754c:	f3bf 8f6f 	isb	sy
 8017550:	f3bf 8f4f 	dsb	sy
 8017554:	623b      	str	r3, [r7, #32]
}
 8017556:	bf00      	nop
 8017558:	e7fe      	b.n	8017558 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801755a:	4b1a      	ldr	r3, [pc, #104]	; (80175c4 <xTimerGenericCommand+0x98>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d02a      	beq.n	80175b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017562:	68bb      	ldr	r3, [r7, #8]
 8017564:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801756e:	68bb      	ldr	r3, [r7, #8]
 8017570:	2b05      	cmp	r3, #5
 8017572:	dc18      	bgt.n	80175a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017574:	f7ff fd90 	bl	8017098 <xTaskGetSchedulerState>
 8017578:	4603      	mov	r3, r0
 801757a:	2b02      	cmp	r3, #2
 801757c:	d109      	bne.n	8017592 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801757e:	4b11      	ldr	r3, [pc, #68]	; (80175c4 <xTimerGenericCommand+0x98>)
 8017580:	6818      	ldr	r0, [r3, #0]
 8017582:	f107 0110 	add.w	r1, r7, #16
 8017586:	2300      	movs	r3, #0
 8017588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801758a:	f7fe fa11 	bl	80159b0 <xQueueGenericSend>
 801758e:	6278      	str	r0, [r7, #36]	; 0x24
 8017590:	e012      	b.n	80175b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017592:	4b0c      	ldr	r3, [pc, #48]	; (80175c4 <xTimerGenericCommand+0x98>)
 8017594:	6818      	ldr	r0, [r3, #0]
 8017596:	f107 0110 	add.w	r1, r7, #16
 801759a:	2300      	movs	r3, #0
 801759c:	2200      	movs	r2, #0
 801759e:	f7fe fa07 	bl	80159b0 <xQueueGenericSend>
 80175a2:	6278      	str	r0, [r7, #36]	; 0x24
 80175a4:	e008      	b.n	80175b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80175a6:	4b07      	ldr	r3, [pc, #28]	; (80175c4 <xTimerGenericCommand+0x98>)
 80175a8:	6818      	ldr	r0, [r3, #0]
 80175aa:	f107 0110 	add.w	r1, r7, #16
 80175ae:	2300      	movs	r3, #0
 80175b0:	683a      	ldr	r2, [r7, #0]
 80175b2:	f7fe fafb 	bl	8015bac <xQueueGenericSendFromISR>
 80175b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80175b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80175ba:	4618      	mov	r0, r3
 80175bc:	3728      	adds	r7, #40	; 0x28
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	bf00      	nop
 80175c4:	20002bd4 	.word	0x20002bd4

080175c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b088      	sub	sp, #32
 80175cc:	af02      	add	r7, sp, #8
 80175ce:	6078      	str	r0, [r7, #4]
 80175d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175d2:	4b22      	ldr	r3, [pc, #136]	; (801765c <prvProcessExpiredTimer+0x94>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	68db      	ldr	r3, [r3, #12]
 80175d8:	68db      	ldr	r3, [r3, #12]
 80175da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80175dc:	697b      	ldr	r3, [r7, #20]
 80175de:	3304      	adds	r3, #4
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7fe f87d 	bl	80156e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175ec:	f003 0304 	and.w	r3, r3, #4
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d022      	beq.n	801763a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80175f4:	697b      	ldr	r3, [r7, #20]
 80175f6:	699a      	ldr	r2, [r3, #24]
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	18d1      	adds	r1, r2, r3
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	683a      	ldr	r2, [r7, #0]
 8017600:	6978      	ldr	r0, [r7, #20]
 8017602:	f000 f8d1 	bl	80177a8 <prvInsertTimerInActiveList>
 8017606:	4603      	mov	r3, r0
 8017608:	2b00      	cmp	r3, #0
 801760a:	d01f      	beq.n	801764c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801760c:	2300      	movs	r3, #0
 801760e:	9300      	str	r3, [sp, #0]
 8017610:	2300      	movs	r3, #0
 8017612:	687a      	ldr	r2, [r7, #4]
 8017614:	2100      	movs	r1, #0
 8017616:	6978      	ldr	r0, [r7, #20]
 8017618:	f7ff ff88 	bl	801752c <xTimerGenericCommand>
 801761c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801761e:	693b      	ldr	r3, [r7, #16]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d113      	bne.n	801764c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017628:	f383 8811 	msr	BASEPRI, r3
 801762c:	f3bf 8f6f 	isb	sy
 8017630:	f3bf 8f4f 	dsb	sy
 8017634:	60fb      	str	r3, [r7, #12]
}
 8017636:	bf00      	nop
 8017638:	e7fe      	b.n	8017638 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017640:	f023 0301 	bic.w	r3, r3, #1
 8017644:	b2da      	uxtb	r2, r3
 8017646:	697b      	ldr	r3, [r7, #20]
 8017648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801764c:	697b      	ldr	r3, [r7, #20]
 801764e:	6a1b      	ldr	r3, [r3, #32]
 8017650:	6978      	ldr	r0, [r7, #20]
 8017652:	4798      	blx	r3
}
 8017654:	bf00      	nop
 8017656:	3718      	adds	r7, #24
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	20002bcc 	.word	0x20002bcc

08017660 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b084      	sub	sp, #16
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017668:	f107 0308 	add.w	r3, r7, #8
 801766c:	4618      	mov	r0, r3
 801766e:	f000 f857 	bl	8017720 <prvGetNextExpireTime>
 8017672:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	4619      	mov	r1, r3
 8017678:	68f8      	ldr	r0, [r7, #12]
 801767a:	f000 f803 	bl	8017684 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801767e:	f000 f8d5 	bl	801782c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017682:	e7f1      	b.n	8017668 <prvTimerTask+0x8>

08017684 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b084      	sub	sp, #16
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
 801768c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801768e:	f7ff f855 	bl	801673c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017692:	f107 0308 	add.w	r3, r7, #8
 8017696:	4618      	mov	r0, r3
 8017698:	f000 f866 	bl	8017768 <prvSampleTimeNow>
 801769c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801769e:	68bb      	ldr	r3, [r7, #8]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d130      	bne.n	8017706 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80176a4:	683b      	ldr	r3, [r7, #0]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d10a      	bne.n	80176c0 <prvProcessTimerOrBlockTask+0x3c>
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	429a      	cmp	r2, r3
 80176b0:	d806      	bhi.n	80176c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80176b2:	f7ff f851 	bl	8016758 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80176b6:	68f9      	ldr	r1, [r7, #12]
 80176b8:	6878      	ldr	r0, [r7, #4]
 80176ba:	f7ff ff85 	bl	80175c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80176be:	e024      	b.n	801770a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d008      	beq.n	80176d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80176c6:	4b13      	ldr	r3, [pc, #76]	; (8017714 <prvProcessTimerOrBlockTask+0x90>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d101      	bne.n	80176d4 <prvProcessTimerOrBlockTask+0x50>
 80176d0:	2301      	movs	r3, #1
 80176d2:	e000      	b.n	80176d6 <prvProcessTimerOrBlockTask+0x52>
 80176d4:	2300      	movs	r3, #0
 80176d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80176d8:	4b0f      	ldr	r3, [pc, #60]	; (8017718 <prvProcessTimerOrBlockTask+0x94>)
 80176da:	6818      	ldr	r0, [r3, #0]
 80176dc:	687a      	ldr	r2, [r7, #4]
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	1ad3      	subs	r3, r2, r3
 80176e2:	683a      	ldr	r2, [r7, #0]
 80176e4:	4619      	mov	r1, r3
 80176e6:	f7fe fd17 	bl	8016118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80176ea:	f7ff f835 	bl	8016758 <xTaskResumeAll>
 80176ee:	4603      	mov	r3, r0
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d10a      	bne.n	801770a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80176f4:	4b09      	ldr	r3, [pc, #36]	; (801771c <prvProcessTimerOrBlockTask+0x98>)
 80176f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176fa:	601a      	str	r2, [r3, #0]
 80176fc:	f3bf 8f4f 	dsb	sy
 8017700:	f3bf 8f6f 	isb	sy
}
 8017704:	e001      	b.n	801770a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017706:	f7ff f827 	bl	8016758 <xTaskResumeAll>
}
 801770a:	bf00      	nop
 801770c:	3710      	adds	r7, #16
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}
 8017712:	bf00      	nop
 8017714:	20002bd0 	.word	0x20002bd0
 8017718:	20002bd4 	.word	0x20002bd4
 801771c:	e000ed04 	.word	0xe000ed04

08017720 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017720:	b480      	push	{r7}
 8017722:	b085      	sub	sp, #20
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017728:	4b0e      	ldr	r3, [pc, #56]	; (8017764 <prvGetNextExpireTime+0x44>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d101      	bne.n	8017736 <prvGetNextExpireTime+0x16>
 8017732:	2201      	movs	r2, #1
 8017734:	e000      	b.n	8017738 <prvGetNextExpireTime+0x18>
 8017736:	2200      	movs	r2, #0
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d105      	bne.n	8017750 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017744:	4b07      	ldr	r3, [pc, #28]	; (8017764 <prvGetNextExpireTime+0x44>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	68db      	ldr	r3, [r3, #12]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	60fb      	str	r3, [r7, #12]
 801774e:	e001      	b.n	8017754 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017750:	2300      	movs	r3, #0
 8017752:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017754:	68fb      	ldr	r3, [r7, #12]
}
 8017756:	4618      	mov	r0, r3
 8017758:	3714      	adds	r7, #20
 801775a:	46bd      	mov	sp, r7
 801775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017760:	4770      	bx	lr
 8017762:	bf00      	nop
 8017764:	20002bcc 	.word	0x20002bcc

08017768 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017770:	f7ff f88e 	bl	8016890 <xTaskGetTickCount>
 8017774:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017776:	4b0b      	ldr	r3, [pc, #44]	; (80177a4 <prvSampleTimeNow+0x3c>)
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	68fa      	ldr	r2, [r7, #12]
 801777c:	429a      	cmp	r2, r3
 801777e:	d205      	bcs.n	801778c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017780:	f000 f936 	bl	80179f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	2201      	movs	r2, #1
 8017788:	601a      	str	r2, [r3, #0]
 801778a:	e002      	b.n	8017792 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2200      	movs	r2, #0
 8017790:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017792:	4a04      	ldr	r2, [pc, #16]	; (80177a4 <prvSampleTimeNow+0x3c>)
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017798:	68fb      	ldr	r3, [r7, #12]
}
 801779a:	4618      	mov	r0, r3
 801779c:	3710      	adds	r7, #16
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd80      	pop	{r7, pc}
 80177a2:	bf00      	nop
 80177a4:	20002bdc 	.word	0x20002bdc

080177a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b086      	sub	sp, #24
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	60f8      	str	r0, [r7, #12]
 80177b0:	60b9      	str	r1, [r7, #8]
 80177b2:	607a      	str	r2, [r7, #4]
 80177b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80177b6:	2300      	movs	r3, #0
 80177b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	68ba      	ldr	r2, [r7, #8]
 80177be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	68fa      	ldr	r2, [r7, #12]
 80177c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80177c6:	68ba      	ldr	r2, [r7, #8]
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d812      	bhi.n	80177f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80177ce:	687a      	ldr	r2, [r7, #4]
 80177d0:	683b      	ldr	r3, [r7, #0]
 80177d2:	1ad2      	subs	r2, r2, r3
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	699b      	ldr	r3, [r3, #24]
 80177d8:	429a      	cmp	r2, r3
 80177da:	d302      	bcc.n	80177e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80177dc:	2301      	movs	r3, #1
 80177de:	617b      	str	r3, [r7, #20]
 80177e0:	e01b      	b.n	801781a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80177e2:	4b10      	ldr	r3, [pc, #64]	; (8017824 <prvInsertTimerInActiveList+0x7c>)
 80177e4:	681a      	ldr	r2, [r3, #0]
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	3304      	adds	r3, #4
 80177ea:	4619      	mov	r1, r3
 80177ec:	4610      	mov	r0, r2
 80177ee:	f7fd ff3e 	bl	801566e <vListInsert>
 80177f2:	e012      	b.n	801781a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80177f4:	687a      	ldr	r2, [r7, #4]
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d206      	bcs.n	801780a <prvInsertTimerInActiveList+0x62>
 80177fc:	68ba      	ldr	r2, [r7, #8]
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	429a      	cmp	r2, r3
 8017802:	d302      	bcc.n	801780a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017804:	2301      	movs	r3, #1
 8017806:	617b      	str	r3, [r7, #20]
 8017808:	e007      	b.n	801781a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801780a:	4b07      	ldr	r3, [pc, #28]	; (8017828 <prvInsertTimerInActiveList+0x80>)
 801780c:	681a      	ldr	r2, [r3, #0]
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	3304      	adds	r3, #4
 8017812:	4619      	mov	r1, r3
 8017814:	4610      	mov	r0, r2
 8017816:	f7fd ff2a 	bl	801566e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801781a:	697b      	ldr	r3, [r7, #20]
}
 801781c:	4618      	mov	r0, r3
 801781e:	3718      	adds	r7, #24
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}
 8017824:	20002bd0 	.word	0x20002bd0
 8017828:	20002bcc 	.word	0x20002bcc

0801782c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b08e      	sub	sp, #56	; 0x38
 8017830:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017832:	e0ca      	b.n	80179ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	2b00      	cmp	r3, #0
 8017838:	da18      	bge.n	801786c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801783a:	1d3b      	adds	r3, r7, #4
 801783c:	3304      	adds	r3, #4
 801783e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017842:	2b00      	cmp	r3, #0
 8017844:	d10a      	bne.n	801785c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801784a:	f383 8811 	msr	BASEPRI, r3
 801784e:	f3bf 8f6f 	isb	sy
 8017852:	f3bf 8f4f 	dsb	sy
 8017856:	61fb      	str	r3, [r7, #28]
}
 8017858:	bf00      	nop
 801785a:	e7fe      	b.n	801785a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017862:	6850      	ldr	r0, [r2, #4]
 8017864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017866:	6892      	ldr	r2, [r2, #8]
 8017868:	4611      	mov	r1, r2
 801786a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	2b00      	cmp	r3, #0
 8017870:	f2c0 80aa 	blt.w	80179c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787a:	695b      	ldr	r3, [r3, #20]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d004      	beq.n	801788a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017882:	3304      	adds	r3, #4
 8017884:	4618      	mov	r0, r3
 8017886:	f7fd ff2b 	bl	80156e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801788a:	463b      	mov	r3, r7
 801788c:	4618      	mov	r0, r3
 801788e:	f7ff ff6b 	bl	8017768 <prvSampleTimeNow>
 8017892:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	2b09      	cmp	r3, #9
 8017898:	f200 8097 	bhi.w	80179ca <prvProcessReceivedCommands+0x19e>
 801789c:	a201      	add	r2, pc, #4	; (adr r2, 80178a4 <prvProcessReceivedCommands+0x78>)
 801789e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178a2:	bf00      	nop
 80178a4:	080178cd 	.word	0x080178cd
 80178a8:	080178cd 	.word	0x080178cd
 80178ac:	080178cd 	.word	0x080178cd
 80178b0:	08017941 	.word	0x08017941
 80178b4:	08017955 	.word	0x08017955
 80178b8:	0801799f 	.word	0x0801799f
 80178bc:	080178cd 	.word	0x080178cd
 80178c0:	080178cd 	.word	0x080178cd
 80178c4:	08017941 	.word	0x08017941
 80178c8:	08017955 	.word	0x08017955
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80178cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80178d2:	f043 0301 	orr.w	r3, r3, #1
 80178d6:	b2da      	uxtb	r2, r3
 80178d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80178de:	68ba      	ldr	r2, [r7, #8]
 80178e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e2:	699b      	ldr	r3, [r3, #24]
 80178e4:	18d1      	adds	r1, r2, r3
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80178ec:	f7ff ff5c 	bl	80177a8 <prvInsertTimerInActiveList>
 80178f0:	4603      	mov	r3, r0
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d069      	beq.n	80179ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80178f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178f8:	6a1b      	ldr	r3, [r3, #32]
 80178fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80178fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80178fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017904:	f003 0304 	and.w	r3, r3, #4
 8017908:	2b00      	cmp	r3, #0
 801790a:	d05e      	beq.n	80179ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801790c:	68ba      	ldr	r2, [r7, #8]
 801790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017910:	699b      	ldr	r3, [r3, #24]
 8017912:	441a      	add	r2, r3
 8017914:	2300      	movs	r3, #0
 8017916:	9300      	str	r3, [sp, #0]
 8017918:	2300      	movs	r3, #0
 801791a:	2100      	movs	r1, #0
 801791c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801791e:	f7ff fe05 	bl	801752c <xTimerGenericCommand>
 8017922:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017924:	6a3b      	ldr	r3, [r7, #32]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d14f      	bne.n	80179ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801792e:	f383 8811 	msr	BASEPRI, r3
 8017932:	f3bf 8f6f 	isb	sy
 8017936:	f3bf 8f4f 	dsb	sy
 801793a:	61bb      	str	r3, [r7, #24]
}
 801793c:	bf00      	nop
 801793e:	e7fe      	b.n	801793e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017946:	f023 0301 	bic.w	r3, r3, #1
 801794a:	b2da      	uxtb	r2, r3
 801794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801794e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017952:	e03a      	b.n	80179ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801795a:	f043 0301 	orr.w	r3, r3, #1
 801795e:	b2da      	uxtb	r2, r3
 8017960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017966:	68ba      	ldr	r2, [r7, #8]
 8017968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801796a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801796e:	699b      	ldr	r3, [r3, #24]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d10a      	bne.n	801798a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017978:	f383 8811 	msr	BASEPRI, r3
 801797c:	f3bf 8f6f 	isb	sy
 8017980:	f3bf 8f4f 	dsb	sy
 8017984:	617b      	str	r3, [r7, #20]
}
 8017986:	bf00      	nop
 8017988:	e7fe      	b.n	8017988 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801798c:	699a      	ldr	r2, [r3, #24]
 801798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017990:	18d1      	adds	r1, r2, r3
 8017992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017998:	f7ff ff06 	bl	80177a8 <prvInsertTimerInActiveList>
					break;
 801799c:	e015      	b.n	80179ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179a4:	f003 0302 	and.w	r3, r3, #2
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d103      	bne.n	80179b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80179ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179ae:	f000 fbff 	bl	80181b0 <vPortFree>
 80179b2:	e00a      	b.n	80179ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80179b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179ba:	f023 0301 	bic.w	r3, r3, #1
 80179be:	b2da      	uxtb	r2, r3
 80179c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80179c6:	e000      	b.n	80179ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80179c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80179ca:	4b08      	ldr	r3, [pc, #32]	; (80179ec <prvProcessReceivedCommands+0x1c0>)
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	1d39      	adds	r1, r7, #4
 80179d0:	2200      	movs	r2, #0
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7fe f986 	bl	8015ce4 <xQueueReceive>
 80179d8:	4603      	mov	r3, r0
 80179da:	2b00      	cmp	r3, #0
 80179dc:	f47f af2a 	bne.w	8017834 <prvProcessReceivedCommands+0x8>
	}
}
 80179e0:	bf00      	nop
 80179e2:	bf00      	nop
 80179e4:	3730      	adds	r7, #48	; 0x30
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}
 80179ea:	bf00      	nop
 80179ec:	20002bd4 	.word	0x20002bd4

080179f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b088      	sub	sp, #32
 80179f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80179f6:	e048      	b.n	8017a8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80179f8:	4b2d      	ldr	r3, [pc, #180]	; (8017ab0 <prvSwitchTimerLists+0xc0>)
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	68db      	ldr	r3, [r3, #12]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a02:	4b2b      	ldr	r3, [pc, #172]	; (8017ab0 <prvSwitchTimerLists+0xc0>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	68db      	ldr	r3, [r3, #12]
 8017a08:	68db      	ldr	r3, [r3, #12]
 8017a0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	3304      	adds	r3, #4
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7fd fe65 	bl	80156e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	6a1b      	ldr	r3, [r3, #32]
 8017a1a:	68f8      	ldr	r0, [r7, #12]
 8017a1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017a24:	f003 0304 	and.w	r3, r3, #4
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d02e      	beq.n	8017a8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	699b      	ldr	r3, [r3, #24]
 8017a30:	693a      	ldr	r2, [r7, #16]
 8017a32:	4413      	add	r3, r2
 8017a34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017a36:	68ba      	ldr	r2, [r7, #8]
 8017a38:	693b      	ldr	r3, [r7, #16]
 8017a3a:	429a      	cmp	r2, r3
 8017a3c:	d90e      	bls.n	8017a5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	68ba      	ldr	r2, [r7, #8]
 8017a42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	68fa      	ldr	r2, [r7, #12]
 8017a48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017a4a:	4b19      	ldr	r3, [pc, #100]	; (8017ab0 <prvSwitchTimerLists+0xc0>)
 8017a4c:	681a      	ldr	r2, [r3, #0]
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	3304      	adds	r3, #4
 8017a52:	4619      	mov	r1, r3
 8017a54:	4610      	mov	r0, r2
 8017a56:	f7fd fe0a 	bl	801566e <vListInsert>
 8017a5a:	e016      	b.n	8017a8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	9300      	str	r3, [sp, #0]
 8017a60:	2300      	movs	r3, #0
 8017a62:	693a      	ldr	r2, [r7, #16]
 8017a64:	2100      	movs	r1, #0
 8017a66:	68f8      	ldr	r0, [r7, #12]
 8017a68:	f7ff fd60 	bl	801752c <xTimerGenericCommand>
 8017a6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d10a      	bne.n	8017a8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a78:	f383 8811 	msr	BASEPRI, r3
 8017a7c:	f3bf 8f6f 	isb	sy
 8017a80:	f3bf 8f4f 	dsb	sy
 8017a84:	603b      	str	r3, [r7, #0]
}
 8017a86:	bf00      	nop
 8017a88:	e7fe      	b.n	8017a88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017a8a:	4b09      	ldr	r3, [pc, #36]	; (8017ab0 <prvSwitchTimerLists+0xc0>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d1b1      	bne.n	80179f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017a94:	4b06      	ldr	r3, [pc, #24]	; (8017ab0 <prvSwitchTimerLists+0xc0>)
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017a9a:	4b06      	ldr	r3, [pc, #24]	; (8017ab4 <prvSwitchTimerLists+0xc4>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	4a04      	ldr	r2, [pc, #16]	; (8017ab0 <prvSwitchTimerLists+0xc0>)
 8017aa0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017aa2:	4a04      	ldr	r2, [pc, #16]	; (8017ab4 <prvSwitchTimerLists+0xc4>)
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	6013      	str	r3, [r2, #0]
}
 8017aa8:	bf00      	nop
 8017aaa:	3718      	adds	r7, #24
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}
 8017ab0:	20002bcc 	.word	0x20002bcc
 8017ab4:	20002bd0 	.word	0x20002bd0

08017ab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b082      	sub	sp, #8
 8017abc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017abe:	f000 f989 	bl	8017dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017ac2:	4b15      	ldr	r3, [pc, #84]	; (8017b18 <prvCheckForValidListAndQueue+0x60>)
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d120      	bne.n	8017b0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017aca:	4814      	ldr	r0, [pc, #80]	; (8017b1c <prvCheckForValidListAndQueue+0x64>)
 8017acc:	f7fd fd7e 	bl	80155cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017ad0:	4813      	ldr	r0, [pc, #76]	; (8017b20 <prvCheckForValidListAndQueue+0x68>)
 8017ad2:	f7fd fd7b 	bl	80155cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017ad6:	4b13      	ldr	r3, [pc, #76]	; (8017b24 <prvCheckForValidListAndQueue+0x6c>)
 8017ad8:	4a10      	ldr	r2, [pc, #64]	; (8017b1c <prvCheckForValidListAndQueue+0x64>)
 8017ada:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017adc:	4b12      	ldr	r3, [pc, #72]	; (8017b28 <prvCheckForValidListAndQueue+0x70>)
 8017ade:	4a10      	ldr	r2, [pc, #64]	; (8017b20 <prvCheckForValidListAndQueue+0x68>)
 8017ae0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	9300      	str	r3, [sp, #0]
 8017ae6:	4b11      	ldr	r3, [pc, #68]	; (8017b2c <prvCheckForValidListAndQueue+0x74>)
 8017ae8:	4a11      	ldr	r2, [pc, #68]	; (8017b30 <prvCheckForValidListAndQueue+0x78>)
 8017aea:	2110      	movs	r1, #16
 8017aec:	200a      	movs	r0, #10
 8017aee:	f7fd fe89 	bl	8015804 <xQueueGenericCreateStatic>
 8017af2:	4603      	mov	r3, r0
 8017af4:	4a08      	ldr	r2, [pc, #32]	; (8017b18 <prvCheckForValidListAndQueue+0x60>)
 8017af6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017af8:	4b07      	ldr	r3, [pc, #28]	; (8017b18 <prvCheckForValidListAndQueue+0x60>)
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d005      	beq.n	8017b0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017b00:	4b05      	ldr	r3, [pc, #20]	; (8017b18 <prvCheckForValidListAndQueue+0x60>)
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	490b      	ldr	r1, [pc, #44]	; (8017b34 <prvCheckForValidListAndQueue+0x7c>)
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7fe fadc 	bl	80160c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017b0c:	f000 f992 	bl	8017e34 <vPortExitCritical>
}
 8017b10:	bf00      	nop
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd80      	pop	{r7, pc}
 8017b16:	bf00      	nop
 8017b18:	20002bd4 	.word	0x20002bd4
 8017b1c:	20002ba4 	.word	0x20002ba4
 8017b20:	20002bb8 	.word	0x20002bb8
 8017b24:	20002bcc 	.word	0x20002bcc
 8017b28:	20002bd0 	.word	0x20002bd0
 8017b2c:	20002c80 	.word	0x20002c80
 8017b30:	20002be0 	.word	0x20002be0
 8017b34:	0801f6b8 	.word	0x0801f6b8

08017b38 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b08a      	sub	sp, #40	; 0x28
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	60f8      	str	r0, [r7, #12]
 8017b40:	60b9      	str	r1, [r7, #8]
 8017b42:	607a      	str	r2, [r7, #4]
 8017b44:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8017b46:	f06f 0301 	mvn.w	r3, #1
 8017b4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8017b50:	68bb      	ldr	r3, [r7, #8]
 8017b52:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017b58:	4b06      	ldr	r3, [pc, #24]	; (8017b74 <xTimerPendFunctionCallFromISR+0x3c>)
 8017b5a:	6818      	ldr	r0, [r3, #0]
 8017b5c:	f107 0114 	add.w	r1, r7, #20
 8017b60:	2300      	movs	r3, #0
 8017b62:	683a      	ldr	r2, [r7, #0]
 8017b64:	f7fe f822 	bl	8015bac <xQueueGenericSendFromISR>
 8017b68:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8017b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	3728      	adds	r7, #40	; 0x28
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}
 8017b74:	20002bd4 	.word	0x20002bd4

08017b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017b78:	b480      	push	{r7}
 8017b7a:	b085      	sub	sp, #20
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	60f8      	str	r0, [r7, #12]
 8017b80:	60b9      	str	r1, [r7, #8]
 8017b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	3b04      	subs	r3, #4
 8017b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	3b04      	subs	r3, #4
 8017b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017b98:	68bb      	ldr	r3, [r7, #8]
 8017b9a:	f023 0201 	bic.w	r2, r3, #1
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	3b04      	subs	r3, #4
 8017ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017ba8:	4a0c      	ldr	r2, [pc, #48]	; (8017bdc <pxPortInitialiseStack+0x64>)
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	3b14      	subs	r3, #20
 8017bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017bb4:	687a      	ldr	r2, [r7, #4]
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	3b04      	subs	r3, #4
 8017bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	f06f 0202 	mvn.w	r2, #2
 8017bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	3b20      	subs	r3, #32
 8017bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017bce:	68fb      	ldr	r3, [r7, #12]
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	3714      	adds	r7, #20
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bda:	4770      	bx	lr
 8017bdc:	08017be1 	.word	0x08017be1

08017be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017be0:	b480      	push	{r7}
 8017be2:	b085      	sub	sp, #20
 8017be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017be6:	2300      	movs	r3, #0
 8017be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017bea:	4b12      	ldr	r3, [pc, #72]	; (8017c34 <prvTaskExitError+0x54>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bf2:	d00a      	beq.n	8017c0a <prvTaskExitError+0x2a>
	__asm volatile
 8017bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bf8:	f383 8811 	msr	BASEPRI, r3
 8017bfc:	f3bf 8f6f 	isb	sy
 8017c00:	f3bf 8f4f 	dsb	sy
 8017c04:	60fb      	str	r3, [r7, #12]
}
 8017c06:	bf00      	nop
 8017c08:	e7fe      	b.n	8017c08 <prvTaskExitError+0x28>
	__asm volatile
 8017c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c0e:	f383 8811 	msr	BASEPRI, r3
 8017c12:	f3bf 8f6f 	isb	sy
 8017c16:	f3bf 8f4f 	dsb	sy
 8017c1a:	60bb      	str	r3, [r7, #8]
}
 8017c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017c1e:	bf00      	nop
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d0fc      	beq.n	8017c20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017c26:	bf00      	nop
 8017c28:	bf00      	nop
 8017c2a:	3714      	adds	r7, #20
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c32:	4770      	bx	lr
 8017c34:	200000a4 	.word	0x200000a4
	...

08017c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017c40:	4b07      	ldr	r3, [pc, #28]	; (8017c60 <pxCurrentTCBConst2>)
 8017c42:	6819      	ldr	r1, [r3, #0]
 8017c44:	6808      	ldr	r0, [r1, #0]
 8017c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c4a:	f380 8809 	msr	PSP, r0
 8017c4e:	f3bf 8f6f 	isb	sy
 8017c52:	f04f 0000 	mov.w	r0, #0
 8017c56:	f380 8811 	msr	BASEPRI, r0
 8017c5a:	4770      	bx	lr
 8017c5c:	f3af 8000 	nop.w

08017c60 <pxCurrentTCBConst2>:
 8017c60:	200029d0 	.word	0x200029d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017c64:	bf00      	nop
 8017c66:	bf00      	nop

08017c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017c68:	4808      	ldr	r0, [pc, #32]	; (8017c8c <prvPortStartFirstTask+0x24>)
 8017c6a:	6800      	ldr	r0, [r0, #0]
 8017c6c:	6800      	ldr	r0, [r0, #0]
 8017c6e:	f380 8808 	msr	MSP, r0
 8017c72:	f04f 0000 	mov.w	r0, #0
 8017c76:	f380 8814 	msr	CONTROL, r0
 8017c7a:	b662      	cpsie	i
 8017c7c:	b661      	cpsie	f
 8017c7e:	f3bf 8f4f 	dsb	sy
 8017c82:	f3bf 8f6f 	isb	sy
 8017c86:	df00      	svc	0
 8017c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017c8a:	bf00      	nop
 8017c8c:	e000ed08 	.word	0xe000ed08

08017c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b086      	sub	sp, #24
 8017c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017c96:	4b46      	ldr	r3, [pc, #280]	; (8017db0 <xPortStartScheduler+0x120>)
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	4a46      	ldr	r2, [pc, #280]	; (8017db4 <xPortStartScheduler+0x124>)
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	d10a      	bne.n	8017cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8017ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ca4:	f383 8811 	msr	BASEPRI, r3
 8017ca8:	f3bf 8f6f 	isb	sy
 8017cac:	f3bf 8f4f 	dsb	sy
 8017cb0:	613b      	str	r3, [r7, #16]
}
 8017cb2:	bf00      	nop
 8017cb4:	e7fe      	b.n	8017cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017cb6:	4b3e      	ldr	r3, [pc, #248]	; (8017db0 <xPortStartScheduler+0x120>)
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4a3f      	ldr	r2, [pc, #252]	; (8017db8 <xPortStartScheduler+0x128>)
 8017cbc:	4293      	cmp	r3, r2
 8017cbe:	d10a      	bne.n	8017cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8017cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cc4:	f383 8811 	msr	BASEPRI, r3
 8017cc8:	f3bf 8f6f 	isb	sy
 8017ccc:	f3bf 8f4f 	dsb	sy
 8017cd0:	60fb      	str	r3, [r7, #12]
}
 8017cd2:	bf00      	nop
 8017cd4:	e7fe      	b.n	8017cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017cd6:	4b39      	ldr	r3, [pc, #228]	; (8017dbc <xPortStartScheduler+0x12c>)
 8017cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017cda:	697b      	ldr	r3, [r7, #20]
 8017cdc:	781b      	ldrb	r3, [r3, #0]
 8017cde:	b2db      	uxtb	r3, r3
 8017ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	22ff      	movs	r2, #255	; 0xff
 8017ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017ce8:	697b      	ldr	r3, [r7, #20]
 8017cea:	781b      	ldrb	r3, [r3, #0]
 8017cec:	b2db      	uxtb	r3, r3
 8017cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017cf0:	78fb      	ldrb	r3, [r7, #3]
 8017cf2:	b2db      	uxtb	r3, r3
 8017cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017cf8:	b2da      	uxtb	r2, r3
 8017cfa:	4b31      	ldr	r3, [pc, #196]	; (8017dc0 <xPortStartScheduler+0x130>)
 8017cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017cfe:	4b31      	ldr	r3, [pc, #196]	; (8017dc4 <xPortStartScheduler+0x134>)
 8017d00:	2207      	movs	r2, #7
 8017d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017d04:	e009      	b.n	8017d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017d06:	4b2f      	ldr	r3, [pc, #188]	; (8017dc4 <xPortStartScheduler+0x134>)
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	3b01      	subs	r3, #1
 8017d0c:	4a2d      	ldr	r2, [pc, #180]	; (8017dc4 <xPortStartScheduler+0x134>)
 8017d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017d10:	78fb      	ldrb	r3, [r7, #3]
 8017d12:	b2db      	uxtb	r3, r3
 8017d14:	005b      	lsls	r3, r3, #1
 8017d16:	b2db      	uxtb	r3, r3
 8017d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017d1a:	78fb      	ldrb	r3, [r7, #3]
 8017d1c:	b2db      	uxtb	r3, r3
 8017d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017d22:	2b80      	cmp	r3, #128	; 0x80
 8017d24:	d0ef      	beq.n	8017d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017d26:	4b27      	ldr	r3, [pc, #156]	; (8017dc4 <xPortStartScheduler+0x134>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	f1c3 0307 	rsb	r3, r3, #7
 8017d2e:	2b04      	cmp	r3, #4
 8017d30:	d00a      	beq.n	8017d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8017d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d36:	f383 8811 	msr	BASEPRI, r3
 8017d3a:	f3bf 8f6f 	isb	sy
 8017d3e:	f3bf 8f4f 	dsb	sy
 8017d42:	60bb      	str	r3, [r7, #8]
}
 8017d44:	bf00      	nop
 8017d46:	e7fe      	b.n	8017d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017d48:	4b1e      	ldr	r3, [pc, #120]	; (8017dc4 <xPortStartScheduler+0x134>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	021b      	lsls	r3, r3, #8
 8017d4e:	4a1d      	ldr	r2, [pc, #116]	; (8017dc4 <xPortStartScheduler+0x134>)
 8017d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017d52:	4b1c      	ldr	r3, [pc, #112]	; (8017dc4 <xPortStartScheduler+0x134>)
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017d5a:	4a1a      	ldr	r2, [pc, #104]	; (8017dc4 <xPortStartScheduler+0x134>)
 8017d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	b2da      	uxtb	r2, r3
 8017d62:	697b      	ldr	r3, [r7, #20]
 8017d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017d66:	4b18      	ldr	r3, [pc, #96]	; (8017dc8 <xPortStartScheduler+0x138>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	4a17      	ldr	r2, [pc, #92]	; (8017dc8 <xPortStartScheduler+0x138>)
 8017d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017d72:	4b15      	ldr	r3, [pc, #84]	; (8017dc8 <xPortStartScheduler+0x138>)
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	4a14      	ldr	r2, [pc, #80]	; (8017dc8 <xPortStartScheduler+0x138>)
 8017d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017d7e:	f000 f8dd 	bl	8017f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017d82:	4b12      	ldr	r3, [pc, #72]	; (8017dcc <xPortStartScheduler+0x13c>)
 8017d84:	2200      	movs	r2, #0
 8017d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017d88:	f000 f8fc 	bl	8017f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017d8c:	4b10      	ldr	r3, [pc, #64]	; (8017dd0 <xPortStartScheduler+0x140>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	4a0f      	ldr	r2, [pc, #60]	; (8017dd0 <xPortStartScheduler+0x140>)
 8017d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017d98:	f7ff ff66 	bl	8017c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017d9c:	f7fe fe40 	bl	8016a20 <vTaskSwitchContext>
	prvTaskExitError();
 8017da0:	f7ff ff1e 	bl	8017be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017da4:	2300      	movs	r3, #0
}
 8017da6:	4618      	mov	r0, r3
 8017da8:	3718      	adds	r7, #24
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd80      	pop	{r7, pc}
 8017dae:	bf00      	nop
 8017db0:	e000ed00 	.word	0xe000ed00
 8017db4:	410fc271 	.word	0x410fc271
 8017db8:	410fc270 	.word	0x410fc270
 8017dbc:	e000e400 	.word	0xe000e400
 8017dc0:	20002cd0 	.word	0x20002cd0
 8017dc4:	20002cd4 	.word	0x20002cd4
 8017dc8:	e000ed20 	.word	0xe000ed20
 8017dcc:	200000a4 	.word	0x200000a4
 8017dd0:	e000ef34 	.word	0xe000ef34

08017dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017dd4:	b480      	push	{r7}
 8017dd6:	b083      	sub	sp, #12
 8017dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8017dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dde:	f383 8811 	msr	BASEPRI, r3
 8017de2:	f3bf 8f6f 	isb	sy
 8017de6:	f3bf 8f4f 	dsb	sy
 8017dea:	607b      	str	r3, [r7, #4]
}
 8017dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017dee:	4b0f      	ldr	r3, [pc, #60]	; (8017e2c <vPortEnterCritical+0x58>)
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	3301      	adds	r3, #1
 8017df4:	4a0d      	ldr	r2, [pc, #52]	; (8017e2c <vPortEnterCritical+0x58>)
 8017df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017df8:	4b0c      	ldr	r3, [pc, #48]	; (8017e2c <vPortEnterCritical+0x58>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	2b01      	cmp	r3, #1
 8017dfe:	d10f      	bne.n	8017e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017e00:	4b0b      	ldr	r3, [pc, #44]	; (8017e30 <vPortEnterCritical+0x5c>)
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	b2db      	uxtb	r3, r3
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d00a      	beq.n	8017e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8017e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e0e:	f383 8811 	msr	BASEPRI, r3
 8017e12:	f3bf 8f6f 	isb	sy
 8017e16:	f3bf 8f4f 	dsb	sy
 8017e1a:	603b      	str	r3, [r7, #0]
}
 8017e1c:	bf00      	nop
 8017e1e:	e7fe      	b.n	8017e1e <vPortEnterCritical+0x4a>
	}
}
 8017e20:	bf00      	nop
 8017e22:	370c      	adds	r7, #12
 8017e24:	46bd      	mov	sp, r7
 8017e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2a:	4770      	bx	lr
 8017e2c:	200000a4 	.word	0x200000a4
 8017e30:	e000ed04 	.word	0xe000ed04

08017e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017e34:	b480      	push	{r7}
 8017e36:	b083      	sub	sp, #12
 8017e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017e3a:	4b12      	ldr	r3, [pc, #72]	; (8017e84 <vPortExitCritical+0x50>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d10a      	bne.n	8017e58 <vPortExitCritical+0x24>
	__asm volatile
 8017e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e46:	f383 8811 	msr	BASEPRI, r3
 8017e4a:	f3bf 8f6f 	isb	sy
 8017e4e:	f3bf 8f4f 	dsb	sy
 8017e52:	607b      	str	r3, [r7, #4]
}
 8017e54:	bf00      	nop
 8017e56:	e7fe      	b.n	8017e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017e58:	4b0a      	ldr	r3, [pc, #40]	; (8017e84 <vPortExitCritical+0x50>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	3b01      	subs	r3, #1
 8017e5e:	4a09      	ldr	r2, [pc, #36]	; (8017e84 <vPortExitCritical+0x50>)
 8017e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017e62:	4b08      	ldr	r3, [pc, #32]	; (8017e84 <vPortExitCritical+0x50>)
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d105      	bne.n	8017e76 <vPortExitCritical+0x42>
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017e6e:	683b      	ldr	r3, [r7, #0]
 8017e70:	f383 8811 	msr	BASEPRI, r3
}
 8017e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017e76:	bf00      	nop
 8017e78:	370c      	adds	r7, #12
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e80:	4770      	bx	lr
 8017e82:	bf00      	nop
 8017e84:	200000a4 	.word	0x200000a4
	...

08017e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017e90:	f3ef 8009 	mrs	r0, PSP
 8017e94:	f3bf 8f6f 	isb	sy
 8017e98:	4b15      	ldr	r3, [pc, #84]	; (8017ef0 <pxCurrentTCBConst>)
 8017e9a:	681a      	ldr	r2, [r3, #0]
 8017e9c:	f01e 0f10 	tst.w	lr, #16
 8017ea0:	bf08      	it	eq
 8017ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eaa:	6010      	str	r0, [r2, #0]
 8017eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017eb4:	f380 8811 	msr	BASEPRI, r0
 8017eb8:	f3bf 8f4f 	dsb	sy
 8017ebc:	f3bf 8f6f 	isb	sy
 8017ec0:	f7fe fdae 	bl	8016a20 <vTaskSwitchContext>
 8017ec4:	f04f 0000 	mov.w	r0, #0
 8017ec8:	f380 8811 	msr	BASEPRI, r0
 8017ecc:	bc09      	pop	{r0, r3}
 8017ece:	6819      	ldr	r1, [r3, #0]
 8017ed0:	6808      	ldr	r0, [r1, #0]
 8017ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed6:	f01e 0f10 	tst.w	lr, #16
 8017eda:	bf08      	it	eq
 8017edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017ee0:	f380 8809 	msr	PSP, r0
 8017ee4:	f3bf 8f6f 	isb	sy
 8017ee8:	4770      	bx	lr
 8017eea:	bf00      	nop
 8017eec:	f3af 8000 	nop.w

08017ef0 <pxCurrentTCBConst>:
 8017ef0:	200029d0 	.word	0x200029d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017ef4:	bf00      	nop
 8017ef6:	bf00      	nop

08017ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b082      	sub	sp, #8
 8017efc:	af00      	add	r7, sp, #0
	__asm volatile
 8017efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f02:	f383 8811 	msr	BASEPRI, r3
 8017f06:	f3bf 8f6f 	isb	sy
 8017f0a:	f3bf 8f4f 	dsb	sy
 8017f0e:	607b      	str	r3, [r7, #4]
}
 8017f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017f12:	f7fe fccd 	bl	80168b0 <xTaskIncrementTick>
 8017f16:	4603      	mov	r3, r0
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d003      	beq.n	8017f24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017f1c:	4b06      	ldr	r3, [pc, #24]	; (8017f38 <SysTick_Handler+0x40>)
 8017f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f22:	601a      	str	r2, [r3, #0]
 8017f24:	2300      	movs	r3, #0
 8017f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	f383 8811 	msr	BASEPRI, r3
}
 8017f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017f30:	bf00      	nop
 8017f32:	3708      	adds	r7, #8
 8017f34:	46bd      	mov	sp, r7
 8017f36:	bd80      	pop	{r7, pc}
 8017f38:	e000ed04 	.word	0xe000ed04

08017f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017f3c:	b480      	push	{r7}
 8017f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017f40:	4b0b      	ldr	r3, [pc, #44]	; (8017f70 <vPortSetupTimerInterrupt+0x34>)
 8017f42:	2200      	movs	r2, #0
 8017f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017f46:	4b0b      	ldr	r3, [pc, #44]	; (8017f74 <vPortSetupTimerInterrupt+0x38>)
 8017f48:	2200      	movs	r2, #0
 8017f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017f4c:	4b0a      	ldr	r3, [pc, #40]	; (8017f78 <vPortSetupTimerInterrupt+0x3c>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	4a0a      	ldr	r2, [pc, #40]	; (8017f7c <vPortSetupTimerInterrupt+0x40>)
 8017f52:	fba2 2303 	umull	r2, r3, r2, r3
 8017f56:	099b      	lsrs	r3, r3, #6
 8017f58:	4a09      	ldr	r2, [pc, #36]	; (8017f80 <vPortSetupTimerInterrupt+0x44>)
 8017f5a:	3b01      	subs	r3, #1
 8017f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017f5e:	4b04      	ldr	r3, [pc, #16]	; (8017f70 <vPortSetupTimerInterrupt+0x34>)
 8017f60:	2207      	movs	r2, #7
 8017f62:	601a      	str	r2, [r3, #0]
}
 8017f64:	bf00      	nop
 8017f66:	46bd      	mov	sp, r7
 8017f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f6c:	4770      	bx	lr
 8017f6e:	bf00      	nop
 8017f70:	e000e010 	.word	0xe000e010
 8017f74:	e000e018 	.word	0xe000e018
 8017f78:	20000004 	.word	0x20000004
 8017f7c:	10624dd3 	.word	0x10624dd3
 8017f80:	e000e014 	.word	0xe000e014

08017f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017f94 <vPortEnableVFP+0x10>
 8017f88:	6801      	ldr	r1, [r0, #0]
 8017f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017f8e:	6001      	str	r1, [r0, #0]
 8017f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017f92:	bf00      	nop
 8017f94:	e000ed88 	.word	0xe000ed88

08017f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017f98:	b480      	push	{r7}
 8017f9a:	b085      	sub	sp, #20
 8017f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017f9e:	f3ef 8305 	mrs	r3, IPSR
 8017fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	2b0f      	cmp	r3, #15
 8017fa8:	d914      	bls.n	8017fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017faa:	4a17      	ldr	r2, [pc, #92]	; (8018008 <vPortValidateInterruptPriority+0x70>)
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	4413      	add	r3, r2
 8017fb0:	781b      	ldrb	r3, [r3, #0]
 8017fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017fb4:	4b15      	ldr	r3, [pc, #84]	; (801800c <vPortValidateInterruptPriority+0x74>)
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	7afa      	ldrb	r2, [r7, #11]
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	d20a      	bcs.n	8017fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fc2:	f383 8811 	msr	BASEPRI, r3
 8017fc6:	f3bf 8f6f 	isb	sy
 8017fca:	f3bf 8f4f 	dsb	sy
 8017fce:	607b      	str	r3, [r7, #4]
}
 8017fd0:	bf00      	nop
 8017fd2:	e7fe      	b.n	8017fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017fd4:	4b0e      	ldr	r3, [pc, #56]	; (8018010 <vPortValidateInterruptPriority+0x78>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017fdc:	4b0d      	ldr	r3, [pc, #52]	; (8018014 <vPortValidateInterruptPriority+0x7c>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	d90a      	bls.n	8017ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fe8:	f383 8811 	msr	BASEPRI, r3
 8017fec:	f3bf 8f6f 	isb	sy
 8017ff0:	f3bf 8f4f 	dsb	sy
 8017ff4:	603b      	str	r3, [r7, #0]
}
 8017ff6:	bf00      	nop
 8017ff8:	e7fe      	b.n	8017ff8 <vPortValidateInterruptPriority+0x60>
	}
 8017ffa:	bf00      	nop
 8017ffc:	3714      	adds	r7, #20
 8017ffe:	46bd      	mov	sp, r7
 8018000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018004:	4770      	bx	lr
 8018006:	bf00      	nop
 8018008:	e000e3f0 	.word	0xe000e3f0
 801800c:	20002cd0 	.word	0x20002cd0
 8018010:	e000ed0c 	.word	0xe000ed0c
 8018014:	20002cd4 	.word	0x20002cd4

08018018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b08a      	sub	sp, #40	; 0x28
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018020:	2300      	movs	r3, #0
 8018022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018024:	f7fe fb8a 	bl	801673c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018028:	4b5b      	ldr	r3, [pc, #364]	; (8018198 <pvPortMalloc+0x180>)
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d101      	bne.n	8018034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018030:	f000 f920 	bl	8018274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018034:	4b59      	ldr	r3, [pc, #356]	; (801819c <pvPortMalloc+0x184>)
 8018036:	681a      	ldr	r2, [r3, #0]
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	4013      	ands	r3, r2
 801803c:	2b00      	cmp	r3, #0
 801803e:	f040 8093 	bne.w	8018168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d01d      	beq.n	8018084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018048:	2208      	movs	r2, #8
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	4413      	add	r3, r2
 801804e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	f003 0307 	and.w	r3, r3, #7
 8018056:	2b00      	cmp	r3, #0
 8018058:	d014      	beq.n	8018084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	f023 0307 	bic.w	r3, r3, #7
 8018060:	3308      	adds	r3, #8
 8018062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	f003 0307 	and.w	r3, r3, #7
 801806a:	2b00      	cmp	r3, #0
 801806c:	d00a      	beq.n	8018084 <pvPortMalloc+0x6c>
	__asm volatile
 801806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018072:	f383 8811 	msr	BASEPRI, r3
 8018076:	f3bf 8f6f 	isb	sy
 801807a:	f3bf 8f4f 	dsb	sy
 801807e:	617b      	str	r3, [r7, #20]
}
 8018080:	bf00      	nop
 8018082:	e7fe      	b.n	8018082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d06e      	beq.n	8018168 <pvPortMalloc+0x150>
 801808a:	4b45      	ldr	r3, [pc, #276]	; (80181a0 <pvPortMalloc+0x188>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	687a      	ldr	r2, [r7, #4]
 8018090:	429a      	cmp	r2, r3
 8018092:	d869      	bhi.n	8018168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018094:	4b43      	ldr	r3, [pc, #268]	; (80181a4 <pvPortMalloc+0x18c>)
 8018096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018098:	4b42      	ldr	r3, [pc, #264]	; (80181a4 <pvPortMalloc+0x18c>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801809e:	e004      	b.n	80180aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80180a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80180a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80180aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ac:	685b      	ldr	r3, [r3, #4]
 80180ae:	687a      	ldr	r2, [r7, #4]
 80180b0:	429a      	cmp	r2, r3
 80180b2:	d903      	bls.n	80180bc <pvPortMalloc+0xa4>
 80180b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d1f1      	bne.n	80180a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80180bc:	4b36      	ldr	r3, [pc, #216]	; (8018198 <pvPortMalloc+0x180>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180c2:	429a      	cmp	r2, r3
 80180c4:	d050      	beq.n	8018168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80180c6:	6a3b      	ldr	r3, [r7, #32]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	2208      	movs	r2, #8
 80180cc:	4413      	add	r3, r2
 80180ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80180d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d2:	681a      	ldr	r2, [r3, #0]
 80180d4:	6a3b      	ldr	r3, [r7, #32]
 80180d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80180d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180da:	685a      	ldr	r2, [r3, #4]
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	1ad2      	subs	r2, r2, r3
 80180e0:	2308      	movs	r3, #8
 80180e2:	005b      	lsls	r3, r3, #1
 80180e4:	429a      	cmp	r2, r3
 80180e6:	d91f      	bls.n	8018128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80180e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	4413      	add	r3, r2
 80180ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80180f0:	69bb      	ldr	r3, [r7, #24]
 80180f2:	f003 0307 	and.w	r3, r3, #7
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d00a      	beq.n	8018110 <pvPortMalloc+0xf8>
	__asm volatile
 80180fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180fe:	f383 8811 	msr	BASEPRI, r3
 8018102:	f3bf 8f6f 	isb	sy
 8018106:	f3bf 8f4f 	dsb	sy
 801810a:	613b      	str	r3, [r7, #16]
}
 801810c:	bf00      	nop
 801810e:	e7fe      	b.n	801810e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018112:	685a      	ldr	r2, [r3, #4]
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	1ad2      	subs	r2, r2, r3
 8018118:	69bb      	ldr	r3, [r7, #24]
 801811a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801811e:	687a      	ldr	r2, [r7, #4]
 8018120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018122:	69b8      	ldr	r0, [r7, #24]
 8018124:	f000 f908 	bl	8018338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018128:	4b1d      	ldr	r3, [pc, #116]	; (80181a0 <pvPortMalloc+0x188>)
 801812a:	681a      	ldr	r2, [r3, #0]
 801812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801812e:	685b      	ldr	r3, [r3, #4]
 8018130:	1ad3      	subs	r3, r2, r3
 8018132:	4a1b      	ldr	r2, [pc, #108]	; (80181a0 <pvPortMalloc+0x188>)
 8018134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018136:	4b1a      	ldr	r3, [pc, #104]	; (80181a0 <pvPortMalloc+0x188>)
 8018138:	681a      	ldr	r2, [r3, #0]
 801813a:	4b1b      	ldr	r3, [pc, #108]	; (80181a8 <pvPortMalloc+0x190>)
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	429a      	cmp	r2, r3
 8018140:	d203      	bcs.n	801814a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018142:	4b17      	ldr	r3, [pc, #92]	; (80181a0 <pvPortMalloc+0x188>)
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	4a18      	ldr	r2, [pc, #96]	; (80181a8 <pvPortMalloc+0x190>)
 8018148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801814c:	685a      	ldr	r2, [r3, #4]
 801814e:	4b13      	ldr	r3, [pc, #76]	; (801819c <pvPortMalloc+0x184>)
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	431a      	orrs	r2, r3
 8018154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801815a:	2200      	movs	r2, #0
 801815c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801815e:	4b13      	ldr	r3, [pc, #76]	; (80181ac <pvPortMalloc+0x194>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	3301      	adds	r3, #1
 8018164:	4a11      	ldr	r2, [pc, #68]	; (80181ac <pvPortMalloc+0x194>)
 8018166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018168:	f7fe faf6 	bl	8016758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801816c:	69fb      	ldr	r3, [r7, #28]
 801816e:	f003 0307 	and.w	r3, r3, #7
 8018172:	2b00      	cmp	r3, #0
 8018174:	d00a      	beq.n	801818c <pvPortMalloc+0x174>
	__asm volatile
 8018176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801817a:	f383 8811 	msr	BASEPRI, r3
 801817e:	f3bf 8f6f 	isb	sy
 8018182:	f3bf 8f4f 	dsb	sy
 8018186:	60fb      	str	r3, [r7, #12]
}
 8018188:	bf00      	nop
 801818a:	e7fe      	b.n	801818a <pvPortMalloc+0x172>
	return pvReturn;
 801818c:	69fb      	ldr	r3, [r7, #28]
}
 801818e:	4618      	mov	r0, r3
 8018190:	3728      	adds	r7, #40	; 0x28
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}
 8018196:	bf00      	nop
 8018198:	2000c920 	.word	0x2000c920
 801819c:	2000c934 	.word	0x2000c934
 80181a0:	2000c924 	.word	0x2000c924
 80181a4:	2000c918 	.word	0x2000c918
 80181a8:	2000c928 	.word	0x2000c928
 80181ac:	2000c92c 	.word	0x2000c92c

080181b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b086      	sub	sp, #24
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d04d      	beq.n	801825e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80181c2:	2308      	movs	r3, #8
 80181c4:	425b      	negs	r3, r3
 80181c6:	697a      	ldr	r2, [r7, #20]
 80181c8:	4413      	add	r3, r2
 80181ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80181d0:	693b      	ldr	r3, [r7, #16]
 80181d2:	685a      	ldr	r2, [r3, #4]
 80181d4:	4b24      	ldr	r3, [pc, #144]	; (8018268 <vPortFree+0xb8>)
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	4013      	ands	r3, r2
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d10a      	bne.n	80181f4 <vPortFree+0x44>
	__asm volatile
 80181de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181e2:	f383 8811 	msr	BASEPRI, r3
 80181e6:	f3bf 8f6f 	isb	sy
 80181ea:	f3bf 8f4f 	dsb	sy
 80181ee:	60fb      	str	r3, [r7, #12]
}
 80181f0:	bf00      	nop
 80181f2:	e7fe      	b.n	80181f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80181f4:	693b      	ldr	r3, [r7, #16]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d00a      	beq.n	8018212 <vPortFree+0x62>
	__asm volatile
 80181fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018200:	f383 8811 	msr	BASEPRI, r3
 8018204:	f3bf 8f6f 	isb	sy
 8018208:	f3bf 8f4f 	dsb	sy
 801820c:	60bb      	str	r3, [r7, #8]
}
 801820e:	bf00      	nop
 8018210:	e7fe      	b.n	8018210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018212:	693b      	ldr	r3, [r7, #16]
 8018214:	685a      	ldr	r2, [r3, #4]
 8018216:	4b14      	ldr	r3, [pc, #80]	; (8018268 <vPortFree+0xb8>)
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	4013      	ands	r3, r2
 801821c:	2b00      	cmp	r3, #0
 801821e:	d01e      	beq.n	801825e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018220:	693b      	ldr	r3, [r7, #16]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d11a      	bne.n	801825e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018228:	693b      	ldr	r3, [r7, #16]
 801822a:	685a      	ldr	r2, [r3, #4]
 801822c:	4b0e      	ldr	r3, [pc, #56]	; (8018268 <vPortFree+0xb8>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	43db      	mvns	r3, r3
 8018232:	401a      	ands	r2, r3
 8018234:	693b      	ldr	r3, [r7, #16]
 8018236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018238:	f7fe fa80 	bl	801673c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801823c:	693b      	ldr	r3, [r7, #16]
 801823e:	685a      	ldr	r2, [r3, #4]
 8018240:	4b0a      	ldr	r3, [pc, #40]	; (801826c <vPortFree+0xbc>)
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	4413      	add	r3, r2
 8018246:	4a09      	ldr	r2, [pc, #36]	; (801826c <vPortFree+0xbc>)
 8018248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801824a:	6938      	ldr	r0, [r7, #16]
 801824c:	f000 f874 	bl	8018338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018250:	4b07      	ldr	r3, [pc, #28]	; (8018270 <vPortFree+0xc0>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	3301      	adds	r3, #1
 8018256:	4a06      	ldr	r2, [pc, #24]	; (8018270 <vPortFree+0xc0>)
 8018258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801825a:	f7fe fa7d 	bl	8016758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801825e:	bf00      	nop
 8018260:	3718      	adds	r7, #24
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}
 8018266:	bf00      	nop
 8018268:	2000c934 	.word	0x2000c934
 801826c:	2000c924 	.word	0x2000c924
 8018270:	2000c930 	.word	0x2000c930

08018274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018274:	b480      	push	{r7}
 8018276:	b085      	sub	sp, #20
 8018278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801827a:	f649 4340 	movw	r3, #40000	; 0x9c40
 801827e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018280:	4b27      	ldr	r3, [pc, #156]	; (8018320 <prvHeapInit+0xac>)
 8018282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	f003 0307 	and.w	r3, r3, #7
 801828a:	2b00      	cmp	r3, #0
 801828c:	d00c      	beq.n	80182a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	3307      	adds	r3, #7
 8018292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	f023 0307 	bic.w	r3, r3, #7
 801829a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801829c:	68ba      	ldr	r2, [r7, #8]
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	1ad3      	subs	r3, r2, r3
 80182a2:	4a1f      	ldr	r2, [pc, #124]	; (8018320 <prvHeapInit+0xac>)
 80182a4:	4413      	add	r3, r2
 80182a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80182ac:	4a1d      	ldr	r2, [pc, #116]	; (8018324 <prvHeapInit+0xb0>)
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80182b2:	4b1c      	ldr	r3, [pc, #112]	; (8018324 <prvHeapInit+0xb0>)
 80182b4:	2200      	movs	r2, #0
 80182b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	68ba      	ldr	r2, [r7, #8]
 80182bc:	4413      	add	r3, r2
 80182be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80182c0:	2208      	movs	r2, #8
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	1a9b      	subs	r3, r3, r2
 80182c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	f023 0307 	bic.w	r3, r3, #7
 80182ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	4a15      	ldr	r2, [pc, #84]	; (8018328 <prvHeapInit+0xb4>)
 80182d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80182d6:	4b14      	ldr	r3, [pc, #80]	; (8018328 <prvHeapInit+0xb4>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	2200      	movs	r2, #0
 80182dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80182de:	4b12      	ldr	r3, [pc, #72]	; (8018328 <prvHeapInit+0xb4>)
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	2200      	movs	r2, #0
 80182e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	68fa      	ldr	r2, [r7, #12]
 80182ee:	1ad2      	subs	r2, r2, r3
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80182f4:	4b0c      	ldr	r3, [pc, #48]	; (8018328 <prvHeapInit+0xb4>)
 80182f6:	681a      	ldr	r2, [r3, #0]
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	685b      	ldr	r3, [r3, #4]
 8018300:	4a0a      	ldr	r2, [pc, #40]	; (801832c <prvHeapInit+0xb8>)
 8018302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018304:	683b      	ldr	r3, [r7, #0]
 8018306:	685b      	ldr	r3, [r3, #4]
 8018308:	4a09      	ldr	r2, [pc, #36]	; (8018330 <prvHeapInit+0xbc>)
 801830a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801830c:	4b09      	ldr	r3, [pc, #36]	; (8018334 <prvHeapInit+0xc0>)
 801830e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018312:	601a      	str	r2, [r3, #0]
}
 8018314:	bf00      	nop
 8018316:	3714      	adds	r7, #20
 8018318:	46bd      	mov	sp, r7
 801831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831e:	4770      	bx	lr
 8018320:	20002cd8 	.word	0x20002cd8
 8018324:	2000c918 	.word	0x2000c918
 8018328:	2000c920 	.word	0x2000c920
 801832c:	2000c928 	.word	0x2000c928
 8018330:	2000c924 	.word	0x2000c924
 8018334:	2000c934 	.word	0x2000c934

08018338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018338:	b480      	push	{r7}
 801833a:	b085      	sub	sp, #20
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018340:	4b28      	ldr	r3, [pc, #160]	; (80183e4 <prvInsertBlockIntoFreeList+0xac>)
 8018342:	60fb      	str	r3, [r7, #12]
 8018344:	e002      	b.n	801834c <prvInsertBlockIntoFreeList+0x14>
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	60fb      	str	r3, [r7, #12]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	429a      	cmp	r2, r3
 8018354:	d8f7      	bhi.n	8018346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	685b      	ldr	r3, [r3, #4]
 801835e:	68ba      	ldr	r2, [r7, #8]
 8018360:	4413      	add	r3, r2
 8018362:	687a      	ldr	r2, [r7, #4]
 8018364:	429a      	cmp	r2, r3
 8018366:	d108      	bne.n	801837a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	685a      	ldr	r2, [r3, #4]
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	685b      	ldr	r3, [r3, #4]
 8018370:	441a      	add	r2, r3
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	685b      	ldr	r3, [r3, #4]
 8018382:	68ba      	ldr	r2, [r7, #8]
 8018384:	441a      	add	r2, r3
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	429a      	cmp	r2, r3
 801838c:	d118      	bne.n	80183c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	681a      	ldr	r2, [r3, #0]
 8018392:	4b15      	ldr	r3, [pc, #84]	; (80183e8 <prvInsertBlockIntoFreeList+0xb0>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	429a      	cmp	r2, r3
 8018398:	d00d      	beq.n	80183b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	685a      	ldr	r2, [r3, #4]
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	685b      	ldr	r3, [r3, #4]
 80183a4:	441a      	add	r2, r3
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	681a      	ldr	r2, [r3, #0]
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	601a      	str	r2, [r3, #0]
 80183b4:	e008      	b.n	80183c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80183b6:	4b0c      	ldr	r3, [pc, #48]	; (80183e8 <prvInsertBlockIntoFreeList+0xb0>)
 80183b8:	681a      	ldr	r2, [r3, #0]
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	601a      	str	r2, [r3, #0]
 80183be:	e003      	b.n	80183c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	681a      	ldr	r2, [r3, #0]
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80183c8:	68fa      	ldr	r2, [r7, #12]
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d002      	beq.n	80183d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	687a      	ldr	r2, [r7, #4]
 80183d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80183d6:	bf00      	nop
 80183d8:	3714      	adds	r7, #20
 80183da:	46bd      	mov	sp, r7
 80183dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e0:	4770      	bx	lr
 80183e2:	bf00      	nop
 80183e4:	2000c918 	.word	0x2000c918
 80183e8:	2000c920 	.word	0x2000c920

080183ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80183f0:	2200      	movs	r2, #0
 80183f2:	4912      	ldr	r1, [pc, #72]	; (801843c <MX_USB_DEVICE_Init+0x50>)
 80183f4:	4812      	ldr	r0, [pc, #72]	; (8018440 <MX_USB_DEVICE_Init+0x54>)
 80183f6:	f7fb fb89 	bl	8013b0c <USBD_Init>
 80183fa:	4603      	mov	r3, r0
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d001      	beq.n	8018404 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018400:	f7eb f9fd 	bl	80037fe <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018404:	490f      	ldr	r1, [pc, #60]	; (8018444 <MX_USB_DEVICE_Init+0x58>)
 8018406:	480e      	ldr	r0, [pc, #56]	; (8018440 <MX_USB_DEVICE_Init+0x54>)
 8018408:	f7fb fbb0 	bl	8013b6c <USBD_RegisterClass>
 801840c:	4603      	mov	r3, r0
 801840e:	2b00      	cmp	r3, #0
 8018410:	d001      	beq.n	8018416 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018412:	f7eb f9f4 	bl	80037fe <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018416:	490c      	ldr	r1, [pc, #48]	; (8018448 <MX_USB_DEVICE_Init+0x5c>)
 8018418:	4809      	ldr	r0, [pc, #36]	; (8018440 <MX_USB_DEVICE_Init+0x54>)
 801841a:	f7fb fae7 	bl	80139ec <USBD_CDC_RegisterInterface>
 801841e:	4603      	mov	r3, r0
 8018420:	2b00      	cmp	r3, #0
 8018422:	d001      	beq.n	8018428 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018424:	f7eb f9eb 	bl	80037fe <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018428:	4805      	ldr	r0, [pc, #20]	; (8018440 <MX_USB_DEVICE_Init+0x54>)
 801842a:	f7fb fbd5 	bl	8013bd8 <USBD_Start>
 801842e:	4603      	mov	r3, r0
 8018430:	2b00      	cmp	r3, #0
 8018432:	d001      	beq.n	8018438 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018434:	f7eb f9e3 	bl	80037fe <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018438:	bf00      	nop
 801843a:	bd80      	pop	{r7, pc}
 801843c:	200000bc 	.word	0x200000bc
 8018440:	2000c938 	.word	0x2000c938
 8018444:	20000024 	.word	0x20000024
 8018448:	200000a8 	.word	0x200000a8

0801844c <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 801844c:	b580      	push	{r7, lr}
 801844e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018450:	2200      	movs	r2, #0
 8018452:	4905      	ldr	r1, [pc, #20]	; (8018468 <CDC_Init_FS+0x1c>)
 8018454:	4805      	ldr	r0, [pc, #20]	; (801846c <CDC_Init_FS+0x20>)
 8018456:	f7fb fae3 	bl	8013a20 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801845a:	4905      	ldr	r1, [pc, #20]	; (8018470 <CDC_Init_FS+0x24>)
 801845c:	4803      	ldr	r0, [pc, #12]	; (801846c <CDC_Init_FS+0x20>)
 801845e:	f7fb fb01 	bl	8013a64 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8018462:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8018464:	4618      	mov	r0, r3
 8018466:	bd80      	pop	{r7, pc}
 8018468:	2000d41c 	.word	0x2000d41c
 801846c:	2000c938 	.word	0x2000c938
 8018470:	2000cc1c 	.word	0x2000cc1c

08018474 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8018474:	b480      	push	{r7}
 8018476:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8018478:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 801847a:	4618      	mov	r0, r3
 801847c:	46bd      	mov	sp, r7
 801847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018482:	4770      	bx	lr

08018484 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8018484:	b480      	push	{r7}
 8018486:	b083      	sub	sp, #12
 8018488:	af00      	add	r7, sp, #0
 801848a:	4603      	mov	r3, r0
 801848c:	6039      	str	r1, [r7, #0]
 801848e:	71fb      	strb	r3, [r7, #7]
 8018490:	4613      	mov	r3, r2
 8018492:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8018494:	79fb      	ldrb	r3, [r7, #7]
 8018496:	2b23      	cmp	r3, #35	; 0x23
 8018498:	f200 808c 	bhi.w	80185b4 <CDC_Control_FS+0x130>
 801849c:	a201      	add	r2, pc, #4	; (adr r2, 80184a4 <CDC_Control_FS+0x20>)
 801849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184a2:	bf00      	nop
 80184a4:	080185b5 	.word	0x080185b5
 80184a8:	080185b5 	.word	0x080185b5
 80184ac:	080185b5 	.word	0x080185b5
 80184b0:	080185b5 	.word	0x080185b5
 80184b4:	080185b5 	.word	0x080185b5
 80184b8:	080185b5 	.word	0x080185b5
 80184bc:	080185b5 	.word	0x080185b5
 80184c0:	080185b5 	.word	0x080185b5
 80184c4:	080185b5 	.word	0x080185b5
 80184c8:	080185b5 	.word	0x080185b5
 80184cc:	080185b5 	.word	0x080185b5
 80184d0:	080185b5 	.word	0x080185b5
 80184d4:	080185b5 	.word	0x080185b5
 80184d8:	080185b5 	.word	0x080185b5
 80184dc:	080185b5 	.word	0x080185b5
 80184e0:	080185b5 	.word	0x080185b5
 80184e4:	080185b5 	.word	0x080185b5
 80184e8:	080185b5 	.word	0x080185b5
 80184ec:	080185b5 	.word	0x080185b5
 80184f0:	080185b5 	.word	0x080185b5
 80184f4:	080185b5 	.word	0x080185b5
 80184f8:	080185b5 	.word	0x080185b5
 80184fc:	080185b5 	.word	0x080185b5
 8018500:	080185b5 	.word	0x080185b5
 8018504:	080185b5 	.word	0x080185b5
 8018508:	080185b5 	.word	0x080185b5
 801850c:	080185b5 	.word	0x080185b5
 8018510:	080185b5 	.word	0x080185b5
 8018514:	080185b5 	.word	0x080185b5
 8018518:	080185b5 	.word	0x080185b5
 801851c:	080185b5 	.word	0x080185b5
 8018520:	080185b5 	.word	0x080185b5
 8018524:	08018535 	.word	0x08018535
 8018528:	0801856f 	.word	0x0801856f
 801852c:	080185b5 	.word	0x080185b5
 8018530:	080185b5 	.word	0x080185b5
		/*                                        3 - Mark                             */
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/
	case CDC_SET_LINE_CODING:
		tempbuf[0] = pbuf[0];
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	781a      	ldrb	r2, [r3, #0]
 8018538:	4b22      	ldr	r3, [pc, #136]	; (80185c4 <CDC_Control_FS+0x140>)
 801853a:	701a      	strb	r2, [r3, #0]
		tempbuf[1] = pbuf[1];
 801853c:	683b      	ldr	r3, [r7, #0]
 801853e:	785a      	ldrb	r2, [r3, #1]
 8018540:	4b20      	ldr	r3, [pc, #128]	; (80185c4 <CDC_Control_FS+0x140>)
 8018542:	705a      	strb	r2, [r3, #1]
		tempbuf[2] = pbuf[2];
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	789a      	ldrb	r2, [r3, #2]
 8018548:	4b1e      	ldr	r3, [pc, #120]	; (80185c4 <CDC_Control_FS+0x140>)
 801854a:	709a      	strb	r2, [r3, #2]
		tempbuf[3] = pbuf[3];
 801854c:	683b      	ldr	r3, [r7, #0]
 801854e:	78da      	ldrb	r2, [r3, #3]
 8018550:	4b1c      	ldr	r3, [pc, #112]	; (80185c4 <CDC_Control_FS+0x140>)
 8018552:	70da      	strb	r2, [r3, #3]
		tempbuf[4] = pbuf[4];
 8018554:	683b      	ldr	r3, [r7, #0]
 8018556:	791a      	ldrb	r2, [r3, #4]
 8018558:	4b1a      	ldr	r3, [pc, #104]	; (80185c4 <CDC_Control_FS+0x140>)
 801855a:	711a      	strb	r2, [r3, #4]
		tempbuf[5] = pbuf[5];
 801855c:	683b      	ldr	r3, [r7, #0]
 801855e:	795a      	ldrb	r2, [r3, #5]
 8018560:	4b18      	ldr	r3, [pc, #96]	; (80185c4 <CDC_Control_FS+0x140>)
 8018562:	715a      	strb	r2, [r3, #5]
		tempbuf[6] = pbuf[6];
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	799a      	ldrb	r2, [r3, #6]
 8018568:	4b16      	ldr	r3, [pc, #88]	; (80185c4 <CDC_Control_FS+0x140>)
 801856a:	719a      	strb	r2, [r3, #6]
		break;
 801856c:	e023      	b.n	80185b6 <CDC_Control_FS+0x132>

	case CDC_GET_LINE_CODING:
		pbuf[0] = tempbuf[0];
 801856e:	4b15      	ldr	r3, [pc, #84]	; (80185c4 <CDC_Control_FS+0x140>)
 8018570:	781a      	ldrb	r2, [r3, #0]
 8018572:	683b      	ldr	r3, [r7, #0]
 8018574:	701a      	strb	r2, [r3, #0]
		pbuf[1] = tempbuf[1];
 8018576:	683b      	ldr	r3, [r7, #0]
 8018578:	3301      	adds	r3, #1
 801857a:	4a12      	ldr	r2, [pc, #72]	; (80185c4 <CDC_Control_FS+0x140>)
 801857c:	7852      	ldrb	r2, [r2, #1]
 801857e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = tempbuf[2];
 8018580:	683b      	ldr	r3, [r7, #0]
 8018582:	3302      	adds	r3, #2
 8018584:	4a0f      	ldr	r2, [pc, #60]	; (80185c4 <CDC_Control_FS+0x140>)
 8018586:	7892      	ldrb	r2, [r2, #2]
 8018588:	701a      	strb	r2, [r3, #0]
		pbuf[3] = tempbuf[3];
 801858a:	683b      	ldr	r3, [r7, #0]
 801858c:	3303      	adds	r3, #3
 801858e:	4a0d      	ldr	r2, [pc, #52]	; (80185c4 <CDC_Control_FS+0x140>)
 8018590:	78d2      	ldrb	r2, [r2, #3]
 8018592:	701a      	strb	r2, [r3, #0]
		pbuf[4] = tempbuf[4];
 8018594:	683b      	ldr	r3, [r7, #0]
 8018596:	3304      	adds	r3, #4
 8018598:	4a0a      	ldr	r2, [pc, #40]	; (80185c4 <CDC_Control_FS+0x140>)
 801859a:	7912      	ldrb	r2, [r2, #4]
 801859c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = tempbuf[5];
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	3305      	adds	r3, #5
 80185a2:	4a08      	ldr	r2, [pc, #32]	; (80185c4 <CDC_Control_FS+0x140>)
 80185a4:	7952      	ldrb	r2, [r2, #5]
 80185a6:	701a      	strb	r2, [r3, #0]
		pbuf[6] = tempbuf[6];
 80185a8:	683b      	ldr	r3, [r7, #0]
 80185aa:	3306      	adds	r3, #6
 80185ac:	4a05      	ldr	r2, [pc, #20]	; (80185c4 <CDC_Control_FS+0x140>)
 80185ae:	7992      	ldrb	r2, [r2, #6]
 80185b0:	701a      	strb	r2, [r3, #0]
		break;
 80185b2:	e000      	b.n	80185b6 <CDC_Control_FS+0x132>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80185b4:	bf00      	nop
	}

	return (USBD_OK);
 80185b6:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 80185b8:	4618      	mov	r0, r3
 80185ba:	370c      	adds	r7, #12
 80185bc:	46bd      	mov	sp, r7
 80185be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c2:	4770      	bx	lr
 80185c4:	2000cc14 	.word	0x2000cc14

080185c8 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b082      	sub	sp, #8
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80185d2:	6879      	ldr	r1, [r7, #4]
 80185d4:	4805      	ldr	r0, [pc, #20]	; (80185ec <CDC_Receive_FS+0x24>)
 80185d6:	f7fb fa45 	bl	8013a64 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80185da:	4804      	ldr	r0, [pc, #16]	; (80185ec <CDC_Receive_FS+0x24>)
 80185dc:	f7fb fa60 	bl	8013aa0 <USBD_CDC_ReceivePacket>
//  usb_vcp_processing(Buf, Len);
	return (USBD_OK);
 80185e0:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	3708      	adds	r7, #8
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}
 80185ea:	bf00      	nop
 80185ec:	2000c938 	.word	0x2000c938

080185f0 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 80185f0:	b480      	push	{r7}
 80185f2:	b087      	sub	sp, #28
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	60f8      	str	r0, [r7, #12]
 80185f8:	60b9      	str	r1, [r7, #8]
 80185fa:	4613      	mov	r3, r2
 80185fc:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 80185fe:	2300      	movs	r3, #0
 8018600:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8018602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018606:	4618      	mov	r0, r3
 8018608:	371c      	adds	r7, #28
 801860a:	46bd      	mov	sp, r7
 801860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018610:	4770      	bx	lr
	...

08018614 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018614:	b480      	push	{r7}
 8018616:	b083      	sub	sp, #12
 8018618:	af00      	add	r7, sp, #0
 801861a:	4603      	mov	r3, r0
 801861c:	6039      	str	r1, [r7, #0]
 801861e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	2212      	movs	r2, #18
 8018624:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018626:	4b03      	ldr	r3, [pc, #12]	; (8018634 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018628:	4618      	mov	r0, r3
 801862a:	370c      	adds	r7, #12
 801862c:	46bd      	mov	sp, r7
 801862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018632:	4770      	bx	lr
 8018634:	200000d8 	.word	0x200000d8

08018638 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018638:	b480      	push	{r7}
 801863a:	b083      	sub	sp, #12
 801863c:	af00      	add	r7, sp, #0
 801863e:	4603      	mov	r3, r0
 8018640:	6039      	str	r1, [r7, #0]
 8018642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018644:	683b      	ldr	r3, [r7, #0]
 8018646:	2204      	movs	r2, #4
 8018648:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801864a:	4b03      	ldr	r3, [pc, #12]	; (8018658 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801864c:	4618      	mov	r0, r3
 801864e:	370c      	adds	r7, #12
 8018650:	46bd      	mov	sp, r7
 8018652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018656:	4770      	bx	lr
 8018658:	200000ec 	.word	0x200000ec

0801865c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b082      	sub	sp, #8
 8018660:	af00      	add	r7, sp, #0
 8018662:	4603      	mov	r3, r0
 8018664:	6039      	str	r1, [r7, #0]
 8018666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018668:	79fb      	ldrb	r3, [r7, #7]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d105      	bne.n	801867a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801866e:	683a      	ldr	r2, [r7, #0]
 8018670:	4907      	ldr	r1, [pc, #28]	; (8018690 <USBD_FS_ProductStrDescriptor+0x34>)
 8018672:	4808      	ldr	r0, [pc, #32]	; (8018694 <USBD_FS_ProductStrDescriptor+0x38>)
 8018674:	f7fc fc5c 	bl	8014f30 <USBD_GetString>
 8018678:	e004      	b.n	8018684 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801867a:	683a      	ldr	r2, [r7, #0]
 801867c:	4904      	ldr	r1, [pc, #16]	; (8018690 <USBD_FS_ProductStrDescriptor+0x34>)
 801867e:	4805      	ldr	r0, [pc, #20]	; (8018694 <USBD_FS_ProductStrDescriptor+0x38>)
 8018680:	f7fc fc56 	bl	8014f30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018684:	4b02      	ldr	r3, [pc, #8]	; (8018690 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018686:	4618      	mov	r0, r3
 8018688:	3708      	adds	r7, #8
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	2000dc1c 	.word	0x2000dc1c
 8018694:	0801f6c0 	.word	0x0801f6c0

08018698 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b082      	sub	sp, #8
 801869c:	af00      	add	r7, sp, #0
 801869e:	4603      	mov	r3, r0
 80186a0:	6039      	str	r1, [r7, #0]
 80186a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80186a4:	683a      	ldr	r2, [r7, #0]
 80186a6:	4904      	ldr	r1, [pc, #16]	; (80186b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80186a8:	4804      	ldr	r0, [pc, #16]	; (80186bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80186aa:	f7fc fc41 	bl	8014f30 <USBD_GetString>
  return USBD_StrDesc;
 80186ae:	4b02      	ldr	r3, [pc, #8]	; (80186b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3708      	adds	r7, #8
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}
 80186b8:	2000dc1c 	.word	0x2000dc1c
 80186bc:	0801f6d8 	.word	0x0801f6d8

080186c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b082      	sub	sp, #8
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	4603      	mov	r3, r0
 80186c8:	6039      	str	r1, [r7, #0]
 80186ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	221a      	movs	r2, #26
 80186d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80186d2:	f000 f843 	bl	801875c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80186d6:	4b02      	ldr	r3, [pc, #8]	; (80186e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80186d8:	4618      	mov	r0, r3
 80186da:	3708      	adds	r7, #8
 80186dc:	46bd      	mov	sp, r7
 80186de:	bd80      	pop	{r7, pc}
 80186e0:	200000f0 	.word	0x200000f0

080186e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b082      	sub	sp, #8
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	4603      	mov	r3, r0
 80186ec:	6039      	str	r1, [r7, #0]
 80186ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80186f0:	79fb      	ldrb	r3, [r7, #7]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d105      	bne.n	8018702 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80186f6:	683a      	ldr	r2, [r7, #0]
 80186f8:	4907      	ldr	r1, [pc, #28]	; (8018718 <USBD_FS_ConfigStrDescriptor+0x34>)
 80186fa:	4808      	ldr	r0, [pc, #32]	; (801871c <USBD_FS_ConfigStrDescriptor+0x38>)
 80186fc:	f7fc fc18 	bl	8014f30 <USBD_GetString>
 8018700:	e004      	b.n	801870c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018702:	683a      	ldr	r2, [r7, #0]
 8018704:	4904      	ldr	r1, [pc, #16]	; (8018718 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018706:	4805      	ldr	r0, [pc, #20]	; (801871c <USBD_FS_ConfigStrDescriptor+0x38>)
 8018708:	f7fc fc12 	bl	8014f30 <USBD_GetString>
  }
  return USBD_StrDesc;
 801870c:	4b02      	ldr	r3, [pc, #8]	; (8018718 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801870e:	4618      	mov	r0, r3
 8018710:	3708      	adds	r7, #8
 8018712:	46bd      	mov	sp, r7
 8018714:	bd80      	pop	{r7, pc}
 8018716:	bf00      	nop
 8018718:	2000dc1c 	.word	0x2000dc1c
 801871c:	0801f6ec 	.word	0x0801f6ec

08018720 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b082      	sub	sp, #8
 8018724:	af00      	add	r7, sp, #0
 8018726:	4603      	mov	r3, r0
 8018728:	6039      	str	r1, [r7, #0]
 801872a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801872c:	79fb      	ldrb	r3, [r7, #7]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d105      	bne.n	801873e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018732:	683a      	ldr	r2, [r7, #0]
 8018734:	4907      	ldr	r1, [pc, #28]	; (8018754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018736:	4808      	ldr	r0, [pc, #32]	; (8018758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018738:	f7fc fbfa 	bl	8014f30 <USBD_GetString>
 801873c:	e004      	b.n	8018748 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801873e:	683a      	ldr	r2, [r7, #0]
 8018740:	4904      	ldr	r1, [pc, #16]	; (8018754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018742:	4805      	ldr	r0, [pc, #20]	; (8018758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018744:	f7fc fbf4 	bl	8014f30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018748:	4b02      	ldr	r3, [pc, #8]	; (8018754 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801874a:	4618      	mov	r0, r3
 801874c:	3708      	adds	r7, #8
 801874e:	46bd      	mov	sp, r7
 8018750:	bd80      	pop	{r7, pc}
 8018752:	bf00      	nop
 8018754:	2000dc1c 	.word	0x2000dc1c
 8018758:	0801f6f8 	.word	0x0801f6f8

0801875c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b084      	sub	sp, #16
 8018760:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018762:	4b0f      	ldr	r3, [pc, #60]	; (80187a0 <Get_SerialNum+0x44>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018768:	4b0e      	ldr	r3, [pc, #56]	; (80187a4 <Get_SerialNum+0x48>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801876e:	4b0e      	ldr	r3, [pc, #56]	; (80187a8 <Get_SerialNum+0x4c>)
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018774:	68fa      	ldr	r2, [r7, #12]
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	4413      	add	r3, r2
 801877a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d009      	beq.n	8018796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018782:	2208      	movs	r2, #8
 8018784:	4909      	ldr	r1, [pc, #36]	; (80187ac <Get_SerialNum+0x50>)
 8018786:	68f8      	ldr	r0, [r7, #12]
 8018788:	f000 f814 	bl	80187b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801878c:	2204      	movs	r2, #4
 801878e:	4908      	ldr	r1, [pc, #32]	; (80187b0 <Get_SerialNum+0x54>)
 8018790:	68b8      	ldr	r0, [r7, #8]
 8018792:	f000 f80f 	bl	80187b4 <IntToUnicode>
  }
}
 8018796:	bf00      	nop
 8018798:	3710      	adds	r7, #16
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}
 801879e:	bf00      	nop
 80187a0:	1fff7a10 	.word	0x1fff7a10
 80187a4:	1fff7a14 	.word	0x1fff7a14
 80187a8:	1fff7a18 	.word	0x1fff7a18
 80187ac:	200000f2 	.word	0x200000f2
 80187b0:	20000102 	.word	0x20000102

080187b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80187b4:	b480      	push	{r7}
 80187b6:	b087      	sub	sp, #28
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	60f8      	str	r0, [r7, #12]
 80187bc:	60b9      	str	r1, [r7, #8]
 80187be:	4613      	mov	r3, r2
 80187c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80187c2:	2300      	movs	r3, #0
 80187c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80187c6:	2300      	movs	r3, #0
 80187c8:	75fb      	strb	r3, [r7, #23]
 80187ca:	e027      	b.n	801881c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	0f1b      	lsrs	r3, r3, #28
 80187d0:	2b09      	cmp	r3, #9
 80187d2:	d80b      	bhi.n	80187ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	0f1b      	lsrs	r3, r3, #28
 80187d8:	b2da      	uxtb	r2, r3
 80187da:	7dfb      	ldrb	r3, [r7, #23]
 80187dc:	005b      	lsls	r3, r3, #1
 80187de:	4619      	mov	r1, r3
 80187e0:	68bb      	ldr	r3, [r7, #8]
 80187e2:	440b      	add	r3, r1
 80187e4:	3230      	adds	r2, #48	; 0x30
 80187e6:	b2d2      	uxtb	r2, r2
 80187e8:	701a      	strb	r2, [r3, #0]
 80187ea:	e00a      	b.n	8018802 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	0f1b      	lsrs	r3, r3, #28
 80187f0:	b2da      	uxtb	r2, r3
 80187f2:	7dfb      	ldrb	r3, [r7, #23]
 80187f4:	005b      	lsls	r3, r3, #1
 80187f6:	4619      	mov	r1, r3
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	440b      	add	r3, r1
 80187fc:	3237      	adds	r2, #55	; 0x37
 80187fe:	b2d2      	uxtb	r2, r2
 8018800:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	011b      	lsls	r3, r3, #4
 8018806:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018808:	7dfb      	ldrb	r3, [r7, #23]
 801880a:	005b      	lsls	r3, r3, #1
 801880c:	3301      	adds	r3, #1
 801880e:	68ba      	ldr	r2, [r7, #8]
 8018810:	4413      	add	r3, r2
 8018812:	2200      	movs	r2, #0
 8018814:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018816:	7dfb      	ldrb	r3, [r7, #23]
 8018818:	3301      	adds	r3, #1
 801881a:	75fb      	strb	r3, [r7, #23]
 801881c:	7dfa      	ldrb	r2, [r7, #23]
 801881e:	79fb      	ldrb	r3, [r7, #7]
 8018820:	429a      	cmp	r2, r3
 8018822:	d3d3      	bcc.n	80187cc <IntToUnicode+0x18>
  }
}
 8018824:	bf00      	nop
 8018826:	bf00      	nop
 8018828:	371c      	adds	r7, #28
 801882a:	46bd      	mov	sp, r7
 801882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018830:	4770      	bx	lr
	...

08018834 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b08a      	sub	sp, #40	; 0x28
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801883c:	f107 0314 	add.w	r3, r7, #20
 8018840:	2200      	movs	r2, #0
 8018842:	601a      	str	r2, [r3, #0]
 8018844:	605a      	str	r2, [r3, #4]
 8018846:	609a      	str	r2, [r3, #8]
 8018848:	60da      	str	r2, [r3, #12]
 801884a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018854:	d13a      	bne.n	80188cc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018856:	2300      	movs	r3, #0
 8018858:	613b      	str	r3, [r7, #16]
 801885a:	4b1e      	ldr	r3, [pc, #120]	; (80188d4 <HAL_PCD_MspInit+0xa0>)
 801885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801885e:	4a1d      	ldr	r2, [pc, #116]	; (80188d4 <HAL_PCD_MspInit+0xa0>)
 8018860:	f043 0301 	orr.w	r3, r3, #1
 8018864:	6313      	str	r3, [r2, #48]	; 0x30
 8018866:	4b1b      	ldr	r3, [pc, #108]	; (80188d4 <HAL_PCD_MspInit+0xa0>)
 8018868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801886a:	f003 0301 	and.w	r3, r3, #1
 801886e:	613b      	str	r3, [r7, #16]
 8018870:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8018872:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018878:	2302      	movs	r3, #2
 801887a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801887c:	2300      	movs	r3, #0
 801887e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018880:	2303      	movs	r3, #3
 8018882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018884:	230a      	movs	r3, #10
 8018886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018888:	f107 0314 	add.w	r3, r7, #20
 801888c:	4619      	mov	r1, r3
 801888e:	4812      	ldr	r0, [pc, #72]	; (80188d8 <HAL_PCD_MspInit+0xa4>)
 8018890:	f7f2 fc06 	bl	800b0a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018894:	4b0f      	ldr	r3, [pc, #60]	; (80188d4 <HAL_PCD_MspInit+0xa0>)
 8018896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018898:	4a0e      	ldr	r2, [pc, #56]	; (80188d4 <HAL_PCD_MspInit+0xa0>)
 801889a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801889e:	6353      	str	r3, [r2, #52]	; 0x34
 80188a0:	2300      	movs	r3, #0
 80188a2:	60fb      	str	r3, [r7, #12]
 80188a4:	4b0b      	ldr	r3, [pc, #44]	; (80188d4 <HAL_PCD_MspInit+0xa0>)
 80188a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188a8:	4a0a      	ldr	r2, [pc, #40]	; (80188d4 <HAL_PCD_MspInit+0xa0>)
 80188aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80188ae:	6453      	str	r3, [r2, #68]	; 0x44
 80188b0:	4b08      	ldr	r3, [pc, #32]	; (80188d4 <HAL_PCD_MspInit+0xa0>)
 80188b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80188b8:	60fb      	str	r3, [r7, #12]
 80188ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80188bc:	2200      	movs	r2, #0
 80188be:	2105      	movs	r1, #5
 80188c0:	2043      	movs	r0, #67	; 0x43
 80188c2:	f7f1 ffb5 	bl	800a830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80188c6:	2043      	movs	r0, #67	; 0x43
 80188c8:	f7f1 ffce 	bl	800a868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80188cc:	bf00      	nop
 80188ce:	3728      	adds	r7, #40	; 0x28
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd80      	pop	{r7, pc}
 80188d4:	40023800 	.word	0x40023800
 80188d8:	40020000 	.word	0x40020000

080188dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b082      	sub	sp, #8
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80188f0:	4619      	mov	r1, r3
 80188f2:	4610      	mov	r0, r2
 80188f4:	f7fb f9bd 	bl	8013c72 <USBD_LL_SetupStage>
}
 80188f8:	bf00      	nop
 80188fa:	3708      	adds	r7, #8
 80188fc:	46bd      	mov	sp, r7
 80188fe:	bd80      	pop	{r7, pc}

08018900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
 8018908:	460b      	mov	r3, r1
 801890a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018912:	78fa      	ldrb	r2, [r7, #3]
 8018914:	6879      	ldr	r1, [r7, #4]
 8018916:	4613      	mov	r3, r2
 8018918:	00db      	lsls	r3, r3, #3
 801891a:	4413      	add	r3, r2
 801891c:	009b      	lsls	r3, r3, #2
 801891e:	440b      	add	r3, r1
 8018920:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018924:	681a      	ldr	r2, [r3, #0]
 8018926:	78fb      	ldrb	r3, [r7, #3]
 8018928:	4619      	mov	r1, r3
 801892a:	f7fb f9f7 	bl	8013d1c <USBD_LL_DataOutStage>
}
 801892e:	bf00      	nop
 8018930:	3708      	adds	r7, #8
 8018932:	46bd      	mov	sp, r7
 8018934:	bd80      	pop	{r7, pc}

08018936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018936:	b580      	push	{r7, lr}
 8018938:	b082      	sub	sp, #8
 801893a:	af00      	add	r7, sp, #0
 801893c:	6078      	str	r0, [r7, #4]
 801893e:	460b      	mov	r3, r1
 8018940:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018948:	78fa      	ldrb	r2, [r7, #3]
 801894a:	6879      	ldr	r1, [r7, #4]
 801894c:	4613      	mov	r3, r2
 801894e:	00db      	lsls	r3, r3, #3
 8018950:	4413      	add	r3, r2
 8018952:	009b      	lsls	r3, r3, #2
 8018954:	440b      	add	r3, r1
 8018956:	334c      	adds	r3, #76	; 0x4c
 8018958:	681a      	ldr	r2, [r3, #0]
 801895a:	78fb      	ldrb	r3, [r7, #3]
 801895c:	4619      	mov	r1, r3
 801895e:	f7fb fa90 	bl	8013e82 <USBD_LL_DataInStage>
}
 8018962:	bf00      	nop
 8018964:	3708      	adds	r7, #8
 8018966:	46bd      	mov	sp, r7
 8018968:	bd80      	pop	{r7, pc}

0801896a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801896a:	b580      	push	{r7, lr}
 801896c:	b082      	sub	sp, #8
 801896e:	af00      	add	r7, sp, #0
 8018970:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018978:	4618      	mov	r0, r3
 801897a:	f7fb fbc4 	bl	8014106 <USBD_LL_SOF>
}
 801897e:	bf00      	nop
 8018980:	3708      	adds	r7, #8
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}

08018986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018986:	b580      	push	{r7, lr}
 8018988:	b084      	sub	sp, #16
 801898a:	af00      	add	r7, sp, #0
 801898c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801898e:	2301      	movs	r3, #1
 8018990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	68db      	ldr	r3, [r3, #12]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d102      	bne.n	80189a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801899a:	2300      	movs	r3, #0
 801899c:	73fb      	strb	r3, [r7, #15]
 801899e:	e008      	b.n	80189b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	68db      	ldr	r3, [r3, #12]
 80189a4:	2b02      	cmp	r3, #2
 80189a6:	d102      	bne.n	80189ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80189a8:	2301      	movs	r3, #1
 80189aa:	73fb      	strb	r3, [r7, #15]
 80189ac:	e001      	b.n	80189b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80189ae:	f7ea ff26 	bl	80037fe <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80189b8:	7bfa      	ldrb	r2, [r7, #15]
 80189ba:	4611      	mov	r1, r2
 80189bc:	4618      	mov	r0, r3
 80189be:	f7fb fb64 	bl	801408a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80189c8:	4618      	mov	r0, r3
 80189ca:	f7fb fb0c 	bl	8013fe6 <USBD_LL_Reset>
}
 80189ce:	bf00      	nop
 80189d0:	3710      	adds	r7, #16
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}
	...

080189d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b082      	sub	sp, #8
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80189e6:	4618      	mov	r0, r3
 80189e8:	f7fb fb5f 	bl	80140aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	687a      	ldr	r2, [r7, #4]
 80189f8:	6812      	ldr	r2, [r2, #0]
 80189fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80189fe:	f043 0301 	orr.w	r3, r3, #1
 8018a02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6a1b      	ldr	r3, [r3, #32]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d005      	beq.n	8018a18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018a0c:	4b04      	ldr	r3, [pc, #16]	; (8018a20 <HAL_PCD_SuspendCallback+0x48>)
 8018a0e:	691b      	ldr	r3, [r3, #16]
 8018a10:	4a03      	ldr	r2, [pc, #12]	; (8018a20 <HAL_PCD_SuspendCallback+0x48>)
 8018a12:	f043 0306 	orr.w	r3, r3, #6
 8018a16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018a18:	bf00      	nop
 8018a1a:	3708      	adds	r7, #8
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	bd80      	pop	{r7, pc}
 8018a20:	e000ed00 	.word	0xe000ed00

08018a24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b082      	sub	sp, #8
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018a32:	4618      	mov	r0, r3
 8018a34:	f7fb fb4f 	bl	80140d6 <USBD_LL_Resume>
}
 8018a38:	bf00      	nop
 8018a3a:	3708      	adds	r7, #8
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	bd80      	pop	{r7, pc}

08018a40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b082      	sub	sp, #8
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
 8018a48:	460b      	mov	r3, r1
 8018a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018a52:	78fa      	ldrb	r2, [r7, #3]
 8018a54:	4611      	mov	r1, r2
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7fb fba7 	bl	80141aa <USBD_LL_IsoOUTIncomplete>
}
 8018a5c:	bf00      	nop
 8018a5e:	3708      	adds	r7, #8
 8018a60:	46bd      	mov	sp, r7
 8018a62:	bd80      	pop	{r7, pc}

08018a64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b082      	sub	sp, #8
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
 8018a6c:	460b      	mov	r3, r1
 8018a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018a76:	78fa      	ldrb	r2, [r7, #3]
 8018a78:	4611      	mov	r1, r2
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f7fb fb63 	bl	8014146 <USBD_LL_IsoINIncomplete>
}
 8018a80:	bf00      	nop
 8018a82:	3708      	adds	r7, #8
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}

08018a88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b082      	sub	sp, #8
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018a96:	4618      	mov	r0, r3
 8018a98:	f7fb fbb9 	bl	801420e <USBD_LL_DevConnected>
}
 8018a9c:	bf00      	nop
 8018a9e:	3708      	adds	r7, #8
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}

08018aa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b082      	sub	sp, #8
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f7fb fbb6 	bl	8014224 <USBD_LL_DevDisconnected>
}
 8018ab8:	bf00      	nop
 8018aba:	3708      	adds	r7, #8
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}

08018ac0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b082      	sub	sp, #8
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	781b      	ldrb	r3, [r3, #0]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d13c      	bne.n	8018b4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018ad0:	4a20      	ldr	r2, [pc, #128]	; (8018b54 <USBD_LL_Init+0x94>)
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	4a1e      	ldr	r2, [pc, #120]	; (8018b54 <USBD_LL_Init+0x94>)
 8018adc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018ae0:	4b1c      	ldr	r3, [pc, #112]	; (8018b54 <USBD_LL_Init+0x94>)
 8018ae2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018ae6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018ae8:	4b1a      	ldr	r3, [pc, #104]	; (8018b54 <USBD_LL_Init+0x94>)
 8018aea:	2204      	movs	r2, #4
 8018aec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018aee:	4b19      	ldr	r3, [pc, #100]	; (8018b54 <USBD_LL_Init+0x94>)
 8018af0:	2202      	movs	r2, #2
 8018af2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018af4:	4b17      	ldr	r3, [pc, #92]	; (8018b54 <USBD_LL_Init+0x94>)
 8018af6:	2200      	movs	r2, #0
 8018af8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018afa:	4b16      	ldr	r3, [pc, #88]	; (8018b54 <USBD_LL_Init+0x94>)
 8018afc:	2202      	movs	r2, #2
 8018afe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018b00:	4b14      	ldr	r3, [pc, #80]	; (8018b54 <USBD_LL_Init+0x94>)
 8018b02:	2200      	movs	r2, #0
 8018b04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018b06:	4b13      	ldr	r3, [pc, #76]	; (8018b54 <USBD_LL_Init+0x94>)
 8018b08:	2200      	movs	r2, #0
 8018b0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018b0c:	4b11      	ldr	r3, [pc, #68]	; (8018b54 <USBD_LL_Init+0x94>)
 8018b0e:	2200      	movs	r2, #0
 8018b10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018b12:	4b10      	ldr	r3, [pc, #64]	; (8018b54 <USBD_LL_Init+0x94>)
 8018b14:	2200      	movs	r2, #0
 8018b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018b18:	4b0e      	ldr	r3, [pc, #56]	; (8018b54 <USBD_LL_Init+0x94>)
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018b1e:	480d      	ldr	r0, [pc, #52]	; (8018b54 <USBD_LL_Init+0x94>)
 8018b20:	f7f4 fa1f 	bl	800cf62 <HAL_PCD_Init>
 8018b24:	4603      	mov	r3, r0
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d001      	beq.n	8018b2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018b2a:	f7ea fe68 	bl	80037fe <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018b2e:	2180      	movs	r1, #128	; 0x80
 8018b30:	4808      	ldr	r0, [pc, #32]	; (8018b54 <USBD_LL_Init+0x94>)
 8018b32:	f7f5 fc76 	bl	800e422 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018b36:	2240      	movs	r2, #64	; 0x40
 8018b38:	2100      	movs	r1, #0
 8018b3a:	4806      	ldr	r0, [pc, #24]	; (8018b54 <USBD_LL_Init+0x94>)
 8018b3c:	f7f5 fc2a 	bl	800e394 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018b40:	2280      	movs	r2, #128	; 0x80
 8018b42:	2101      	movs	r1, #1
 8018b44:	4803      	ldr	r0, [pc, #12]	; (8018b54 <USBD_LL_Init+0x94>)
 8018b46:	f7f5 fc25 	bl	800e394 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018b4a:	2300      	movs	r3, #0
}
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	3708      	adds	r7, #8
 8018b50:	46bd      	mov	sp, r7
 8018b52:	bd80      	pop	{r7, pc}
 8018b54:	2000de1c 	.word	0x2000de1c

08018b58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b084      	sub	sp, #16
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b60:	2300      	movs	r3, #0
 8018b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b64:	2300      	movs	r3, #0
 8018b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f7f4 fb14 	bl	800d19c <HAL_PCD_Start>
 8018b74:	4603      	mov	r3, r0
 8018b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b78:	7bfb      	ldrb	r3, [r7, #15]
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	f000 f942 	bl	8018e04 <USBD_Get_USB_Status>
 8018b80:	4603      	mov	r3, r0
 8018b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b86:	4618      	mov	r0, r3
 8018b88:	3710      	adds	r7, #16
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	bd80      	pop	{r7, pc}

08018b8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018b8e:	b580      	push	{r7, lr}
 8018b90:	b084      	sub	sp, #16
 8018b92:	af00      	add	r7, sp, #0
 8018b94:	6078      	str	r0, [r7, #4]
 8018b96:	4608      	mov	r0, r1
 8018b98:	4611      	mov	r1, r2
 8018b9a:	461a      	mov	r2, r3
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	70fb      	strb	r3, [r7, #3]
 8018ba0:	460b      	mov	r3, r1
 8018ba2:	70bb      	strb	r3, [r7, #2]
 8018ba4:	4613      	mov	r3, r2
 8018ba6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ba8:	2300      	movs	r3, #0
 8018baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018bac:	2300      	movs	r3, #0
 8018bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018bb6:	78bb      	ldrb	r3, [r7, #2]
 8018bb8:	883a      	ldrh	r2, [r7, #0]
 8018bba:	78f9      	ldrb	r1, [r7, #3]
 8018bbc:	f7f4 ffe5 	bl	800db8a <HAL_PCD_EP_Open>
 8018bc0:	4603      	mov	r3, r0
 8018bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018bc4:	7bfb      	ldrb	r3, [r7, #15]
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f000 f91c 	bl	8018e04 <USBD_Get_USB_Status>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	3710      	adds	r7, #16
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd80      	pop	{r7, pc}

08018bda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018bda:	b580      	push	{r7, lr}
 8018bdc:	b084      	sub	sp, #16
 8018bde:	af00      	add	r7, sp, #0
 8018be0:	6078      	str	r0, [r7, #4]
 8018be2:	460b      	mov	r3, r1
 8018be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018be6:	2300      	movs	r3, #0
 8018be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018bea:	2300      	movs	r3, #0
 8018bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018bf4:	78fa      	ldrb	r2, [r7, #3]
 8018bf6:	4611      	mov	r1, r2
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	f7f5 f82e 	bl	800dc5a <HAL_PCD_EP_Close>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c02:	7bfb      	ldrb	r3, [r7, #15]
 8018c04:	4618      	mov	r0, r3
 8018c06:	f000 f8fd 	bl	8018e04 <USBD_Get_USB_Status>
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c10:	4618      	mov	r0, r3
 8018c12:	3710      	adds	r7, #16
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd80      	pop	{r7, pc}

08018c18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b084      	sub	sp, #16
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
 8018c20:	460b      	mov	r3, r1
 8018c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c24:	2300      	movs	r3, #0
 8018c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018c32:	78fa      	ldrb	r2, [r7, #3]
 8018c34:	4611      	mov	r1, r2
 8018c36:	4618      	mov	r0, r3
 8018c38:	f7f5 f906 	bl	800de48 <HAL_PCD_EP_SetStall>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c40:	7bfb      	ldrb	r3, [r7, #15]
 8018c42:	4618      	mov	r0, r3
 8018c44:	f000 f8de 	bl	8018e04 <USBD_Get_USB_Status>
 8018c48:	4603      	mov	r3, r0
 8018c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c4e:	4618      	mov	r0, r3
 8018c50:	3710      	adds	r7, #16
 8018c52:	46bd      	mov	sp, r7
 8018c54:	bd80      	pop	{r7, pc}

08018c56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c56:	b580      	push	{r7, lr}
 8018c58:	b084      	sub	sp, #16
 8018c5a:	af00      	add	r7, sp, #0
 8018c5c:	6078      	str	r0, [r7, #4]
 8018c5e:	460b      	mov	r3, r1
 8018c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c62:	2300      	movs	r3, #0
 8018c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c66:	2300      	movs	r3, #0
 8018c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018c70:	78fa      	ldrb	r2, [r7, #3]
 8018c72:	4611      	mov	r1, r2
 8018c74:	4618      	mov	r0, r3
 8018c76:	f7f5 f94b 	bl	800df10 <HAL_PCD_EP_ClrStall>
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c7e:	7bfb      	ldrb	r3, [r7, #15]
 8018c80:	4618      	mov	r0, r3
 8018c82:	f000 f8bf 	bl	8018e04 <USBD_Get_USB_Status>
 8018c86:	4603      	mov	r3, r0
 8018c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3710      	adds	r7, #16
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bd80      	pop	{r7, pc}

08018c94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c94:	b480      	push	{r7}
 8018c96:	b085      	sub	sp, #20
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
 8018c9c:	460b      	mov	r3, r1
 8018c9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018ca6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	da0b      	bge.n	8018cc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018cb0:	78fb      	ldrb	r3, [r7, #3]
 8018cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018cb6:	68f9      	ldr	r1, [r7, #12]
 8018cb8:	4613      	mov	r3, r2
 8018cba:	00db      	lsls	r3, r3, #3
 8018cbc:	4413      	add	r3, r2
 8018cbe:	009b      	lsls	r3, r3, #2
 8018cc0:	440b      	add	r3, r1
 8018cc2:	333e      	adds	r3, #62	; 0x3e
 8018cc4:	781b      	ldrb	r3, [r3, #0]
 8018cc6:	e00b      	b.n	8018ce0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018cc8:	78fb      	ldrb	r3, [r7, #3]
 8018cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018cce:	68f9      	ldr	r1, [r7, #12]
 8018cd0:	4613      	mov	r3, r2
 8018cd2:	00db      	lsls	r3, r3, #3
 8018cd4:	4413      	add	r3, r2
 8018cd6:	009b      	lsls	r3, r3, #2
 8018cd8:	440b      	add	r3, r1
 8018cda:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018cde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3714      	adds	r7, #20
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cea:	4770      	bx	lr

08018cec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b084      	sub	sp, #16
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	460b      	mov	r3, r1
 8018cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018d06:	78fa      	ldrb	r2, [r7, #3]
 8018d08:	4611      	mov	r1, r2
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7f4 ff18 	bl	800db40 <HAL_PCD_SetAddress>
 8018d10:	4603      	mov	r3, r0
 8018d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d14:	7bfb      	ldrb	r3, [r7, #15]
 8018d16:	4618      	mov	r0, r3
 8018d18:	f000 f874 	bl	8018e04 <USBD_Get_USB_Status>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d22:	4618      	mov	r0, r3
 8018d24:	3710      	adds	r7, #16
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}

08018d2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018d2a:	b580      	push	{r7, lr}
 8018d2c:	b086      	sub	sp, #24
 8018d2e:	af00      	add	r7, sp, #0
 8018d30:	60f8      	str	r0, [r7, #12]
 8018d32:	607a      	str	r2, [r7, #4]
 8018d34:	603b      	str	r3, [r7, #0]
 8018d36:	460b      	mov	r3, r1
 8018d38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018d48:	7af9      	ldrb	r1, [r7, #11]
 8018d4a:	683b      	ldr	r3, [r7, #0]
 8018d4c:	687a      	ldr	r2, [r7, #4]
 8018d4e:	f7f5 f831 	bl	800ddb4 <HAL_PCD_EP_Transmit>
 8018d52:	4603      	mov	r3, r0
 8018d54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d56:	7dfb      	ldrb	r3, [r7, #23]
 8018d58:	4618      	mov	r0, r3
 8018d5a:	f000 f853 	bl	8018e04 <USBD_Get_USB_Status>
 8018d5e:	4603      	mov	r3, r0
 8018d60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018d62:	7dbb      	ldrb	r3, [r7, #22]
}
 8018d64:	4618      	mov	r0, r3
 8018d66:	3718      	adds	r7, #24
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd80      	pop	{r7, pc}

08018d6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b086      	sub	sp, #24
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	60f8      	str	r0, [r7, #12]
 8018d74:	607a      	str	r2, [r7, #4]
 8018d76:	603b      	str	r3, [r7, #0]
 8018d78:	460b      	mov	r3, r1
 8018d7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d80:	2300      	movs	r3, #0
 8018d82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018d8a:	7af9      	ldrb	r1, [r7, #11]
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	687a      	ldr	r2, [r7, #4]
 8018d90:	f7f4 ffad 	bl	800dcee <HAL_PCD_EP_Receive>
 8018d94:	4603      	mov	r3, r0
 8018d96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d98:	7dfb      	ldrb	r3, [r7, #23]
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f000 f832 	bl	8018e04 <USBD_Get_USB_Status>
 8018da0:	4603      	mov	r3, r0
 8018da2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018da4:	7dbb      	ldrb	r3, [r7, #22]
}
 8018da6:	4618      	mov	r0, r3
 8018da8:	3718      	adds	r7, #24
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd80      	pop	{r7, pc}

08018dae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018dae:	b580      	push	{r7, lr}
 8018db0:	b082      	sub	sp, #8
 8018db2:	af00      	add	r7, sp, #0
 8018db4:	6078      	str	r0, [r7, #4]
 8018db6:	460b      	mov	r3, r1
 8018db8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018dc0:	78fa      	ldrb	r2, [r7, #3]
 8018dc2:	4611      	mov	r1, r2
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	f7f4 ffdd 	bl	800dd84 <HAL_PCD_EP_GetRxCount>
 8018dca:	4603      	mov	r3, r0
}
 8018dcc:	4618      	mov	r0, r3
 8018dce:	3708      	adds	r7, #8
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	bd80      	pop	{r7, pc}

08018dd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018dd4:	b480      	push	{r7}
 8018dd6:	b083      	sub	sp, #12
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018ddc:	4b03      	ldr	r3, [pc, #12]	; (8018dec <USBD_static_malloc+0x18>)
}
 8018dde:	4618      	mov	r0, r3
 8018de0:	370c      	adds	r7, #12
 8018de2:	46bd      	mov	sp, r7
 8018de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de8:	4770      	bx	lr
 8018dea:	bf00      	nop
 8018dec:	2000e328 	.word	0x2000e328

08018df0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018df0:	b480      	push	{r7}
 8018df2:	b083      	sub	sp, #12
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]

}
 8018df8:	bf00      	nop
 8018dfa:	370c      	adds	r7, #12
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e02:	4770      	bx	lr

08018e04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018e04:	b480      	push	{r7}
 8018e06:	b085      	sub	sp, #20
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e0e:	2300      	movs	r3, #0
 8018e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018e12:	79fb      	ldrb	r3, [r7, #7]
 8018e14:	2b03      	cmp	r3, #3
 8018e16:	d817      	bhi.n	8018e48 <USBD_Get_USB_Status+0x44>
 8018e18:	a201      	add	r2, pc, #4	; (adr r2, 8018e20 <USBD_Get_USB_Status+0x1c>)
 8018e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e1e:	bf00      	nop
 8018e20:	08018e31 	.word	0x08018e31
 8018e24:	08018e37 	.word	0x08018e37
 8018e28:	08018e3d 	.word	0x08018e3d
 8018e2c:	08018e43 	.word	0x08018e43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018e30:	2300      	movs	r3, #0
 8018e32:	73fb      	strb	r3, [r7, #15]
    break;
 8018e34:	e00b      	b.n	8018e4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018e36:	2303      	movs	r3, #3
 8018e38:	73fb      	strb	r3, [r7, #15]
    break;
 8018e3a:	e008      	b.n	8018e4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018e3c:	2301      	movs	r3, #1
 8018e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8018e40:	e005      	b.n	8018e4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018e42:	2303      	movs	r3, #3
 8018e44:	73fb      	strb	r3, [r7, #15]
    break;
 8018e46:	e002      	b.n	8018e4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018e48:	2303      	movs	r3, #3
 8018e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8018e4c:	bf00      	nop
  }
  return usb_status;
 8018e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e50:	4618      	mov	r0, r3
 8018e52:	3714      	adds	r7, #20
 8018e54:	46bd      	mov	sp, r7
 8018e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5a:	4770      	bx	lr

08018e5c <std>:
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	b510      	push	{r4, lr}
 8018e60:	4604      	mov	r4, r0
 8018e62:	e9c0 3300 	strd	r3, r3, [r0]
 8018e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018e6a:	6083      	str	r3, [r0, #8]
 8018e6c:	8181      	strh	r1, [r0, #12]
 8018e6e:	6643      	str	r3, [r0, #100]	; 0x64
 8018e70:	81c2      	strh	r2, [r0, #14]
 8018e72:	6183      	str	r3, [r0, #24]
 8018e74:	4619      	mov	r1, r3
 8018e76:	2208      	movs	r2, #8
 8018e78:	305c      	adds	r0, #92	; 0x5c
 8018e7a:	f000 f91a 	bl	80190b2 <memset>
 8018e7e:	4b05      	ldr	r3, [pc, #20]	; (8018e94 <std+0x38>)
 8018e80:	6263      	str	r3, [r4, #36]	; 0x24
 8018e82:	4b05      	ldr	r3, [pc, #20]	; (8018e98 <std+0x3c>)
 8018e84:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e86:	4b05      	ldr	r3, [pc, #20]	; (8018e9c <std+0x40>)
 8018e88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e8a:	4b05      	ldr	r3, [pc, #20]	; (8018ea0 <std+0x44>)
 8018e8c:	6224      	str	r4, [r4, #32]
 8018e8e:	6323      	str	r3, [r4, #48]	; 0x30
 8018e90:	bd10      	pop	{r4, pc}
 8018e92:	bf00      	nop
 8018e94:	0801a021 	.word	0x0801a021
 8018e98:	0801a043 	.word	0x0801a043
 8018e9c:	0801a07b 	.word	0x0801a07b
 8018ea0:	0801a09f 	.word	0x0801a09f

08018ea4 <_cleanup_r>:
 8018ea4:	4901      	ldr	r1, [pc, #4]	; (8018eac <_cleanup_r+0x8>)
 8018ea6:	f000 b8af 	b.w	8019008 <_fwalk_reent>
 8018eaa:	bf00      	nop
 8018eac:	0801bc55 	.word	0x0801bc55

08018eb0 <__sfmoreglue>:
 8018eb0:	b570      	push	{r4, r5, r6, lr}
 8018eb2:	2268      	movs	r2, #104	; 0x68
 8018eb4:	1e4d      	subs	r5, r1, #1
 8018eb6:	4355      	muls	r5, r2
 8018eb8:	460e      	mov	r6, r1
 8018eba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018ebe:	f000 f921 	bl	8019104 <_malloc_r>
 8018ec2:	4604      	mov	r4, r0
 8018ec4:	b140      	cbz	r0, 8018ed8 <__sfmoreglue+0x28>
 8018ec6:	2100      	movs	r1, #0
 8018ec8:	e9c0 1600 	strd	r1, r6, [r0]
 8018ecc:	300c      	adds	r0, #12
 8018ece:	60a0      	str	r0, [r4, #8]
 8018ed0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018ed4:	f000 f8ed 	bl	80190b2 <memset>
 8018ed8:	4620      	mov	r0, r4
 8018eda:	bd70      	pop	{r4, r5, r6, pc}

08018edc <__sfp_lock_acquire>:
 8018edc:	4801      	ldr	r0, [pc, #4]	; (8018ee4 <__sfp_lock_acquire+0x8>)
 8018ede:	f000 b8d8 	b.w	8019092 <__retarget_lock_acquire_recursive>
 8018ee2:	bf00      	nop
 8018ee4:	2000e549 	.word	0x2000e549

08018ee8 <__sfp_lock_release>:
 8018ee8:	4801      	ldr	r0, [pc, #4]	; (8018ef0 <__sfp_lock_release+0x8>)
 8018eea:	f000 b8d3 	b.w	8019094 <__retarget_lock_release_recursive>
 8018eee:	bf00      	nop
 8018ef0:	2000e549 	.word	0x2000e549

08018ef4 <__sinit_lock_acquire>:
 8018ef4:	4801      	ldr	r0, [pc, #4]	; (8018efc <__sinit_lock_acquire+0x8>)
 8018ef6:	f000 b8cc 	b.w	8019092 <__retarget_lock_acquire_recursive>
 8018efa:	bf00      	nop
 8018efc:	2000e54a 	.word	0x2000e54a

08018f00 <__sinit_lock_release>:
 8018f00:	4801      	ldr	r0, [pc, #4]	; (8018f08 <__sinit_lock_release+0x8>)
 8018f02:	f000 b8c7 	b.w	8019094 <__retarget_lock_release_recursive>
 8018f06:	bf00      	nop
 8018f08:	2000e54a 	.word	0x2000e54a

08018f0c <__sinit>:
 8018f0c:	b510      	push	{r4, lr}
 8018f0e:	4604      	mov	r4, r0
 8018f10:	f7ff fff0 	bl	8018ef4 <__sinit_lock_acquire>
 8018f14:	69a3      	ldr	r3, [r4, #24]
 8018f16:	b11b      	cbz	r3, 8018f20 <__sinit+0x14>
 8018f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f1c:	f7ff bff0 	b.w	8018f00 <__sinit_lock_release>
 8018f20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018f24:	6523      	str	r3, [r4, #80]	; 0x50
 8018f26:	4b13      	ldr	r3, [pc, #76]	; (8018f74 <__sinit+0x68>)
 8018f28:	4a13      	ldr	r2, [pc, #76]	; (8018f78 <__sinit+0x6c>)
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8018f2e:	42a3      	cmp	r3, r4
 8018f30:	bf04      	itt	eq
 8018f32:	2301      	moveq	r3, #1
 8018f34:	61a3      	streq	r3, [r4, #24]
 8018f36:	4620      	mov	r0, r4
 8018f38:	f000 f820 	bl	8018f7c <__sfp>
 8018f3c:	6060      	str	r0, [r4, #4]
 8018f3e:	4620      	mov	r0, r4
 8018f40:	f000 f81c 	bl	8018f7c <__sfp>
 8018f44:	60a0      	str	r0, [r4, #8]
 8018f46:	4620      	mov	r0, r4
 8018f48:	f000 f818 	bl	8018f7c <__sfp>
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	60e0      	str	r0, [r4, #12]
 8018f50:	2104      	movs	r1, #4
 8018f52:	6860      	ldr	r0, [r4, #4]
 8018f54:	f7ff ff82 	bl	8018e5c <std>
 8018f58:	68a0      	ldr	r0, [r4, #8]
 8018f5a:	2201      	movs	r2, #1
 8018f5c:	2109      	movs	r1, #9
 8018f5e:	f7ff ff7d 	bl	8018e5c <std>
 8018f62:	68e0      	ldr	r0, [r4, #12]
 8018f64:	2202      	movs	r2, #2
 8018f66:	2112      	movs	r1, #18
 8018f68:	f7ff ff78 	bl	8018e5c <std>
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	61a3      	str	r3, [r4, #24]
 8018f70:	e7d2      	b.n	8018f18 <__sinit+0xc>
 8018f72:	bf00      	nop
 8018f74:	0801fd78 	.word	0x0801fd78
 8018f78:	08018ea5 	.word	0x08018ea5

08018f7c <__sfp>:
 8018f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f7e:	4607      	mov	r7, r0
 8018f80:	f7ff ffac 	bl	8018edc <__sfp_lock_acquire>
 8018f84:	4b1e      	ldr	r3, [pc, #120]	; (8019000 <__sfp+0x84>)
 8018f86:	681e      	ldr	r6, [r3, #0]
 8018f88:	69b3      	ldr	r3, [r6, #24]
 8018f8a:	b913      	cbnz	r3, 8018f92 <__sfp+0x16>
 8018f8c:	4630      	mov	r0, r6
 8018f8e:	f7ff ffbd 	bl	8018f0c <__sinit>
 8018f92:	3648      	adds	r6, #72	; 0x48
 8018f94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018f98:	3b01      	subs	r3, #1
 8018f9a:	d503      	bpl.n	8018fa4 <__sfp+0x28>
 8018f9c:	6833      	ldr	r3, [r6, #0]
 8018f9e:	b30b      	cbz	r3, 8018fe4 <__sfp+0x68>
 8018fa0:	6836      	ldr	r6, [r6, #0]
 8018fa2:	e7f7      	b.n	8018f94 <__sfp+0x18>
 8018fa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018fa8:	b9d5      	cbnz	r5, 8018fe0 <__sfp+0x64>
 8018faa:	4b16      	ldr	r3, [pc, #88]	; (8019004 <__sfp+0x88>)
 8018fac:	60e3      	str	r3, [r4, #12]
 8018fae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018fb2:	6665      	str	r5, [r4, #100]	; 0x64
 8018fb4:	f000 f86c 	bl	8019090 <__retarget_lock_init_recursive>
 8018fb8:	f7ff ff96 	bl	8018ee8 <__sfp_lock_release>
 8018fbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018fc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018fc4:	6025      	str	r5, [r4, #0]
 8018fc6:	61a5      	str	r5, [r4, #24]
 8018fc8:	2208      	movs	r2, #8
 8018fca:	4629      	mov	r1, r5
 8018fcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018fd0:	f000 f86f 	bl	80190b2 <memset>
 8018fd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018fd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018fdc:	4620      	mov	r0, r4
 8018fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fe0:	3468      	adds	r4, #104	; 0x68
 8018fe2:	e7d9      	b.n	8018f98 <__sfp+0x1c>
 8018fe4:	2104      	movs	r1, #4
 8018fe6:	4638      	mov	r0, r7
 8018fe8:	f7ff ff62 	bl	8018eb0 <__sfmoreglue>
 8018fec:	4604      	mov	r4, r0
 8018fee:	6030      	str	r0, [r6, #0]
 8018ff0:	2800      	cmp	r0, #0
 8018ff2:	d1d5      	bne.n	8018fa0 <__sfp+0x24>
 8018ff4:	f7ff ff78 	bl	8018ee8 <__sfp_lock_release>
 8018ff8:	230c      	movs	r3, #12
 8018ffa:	603b      	str	r3, [r7, #0]
 8018ffc:	e7ee      	b.n	8018fdc <__sfp+0x60>
 8018ffe:	bf00      	nop
 8019000:	0801fd78 	.word	0x0801fd78
 8019004:	ffff0001 	.word	0xffff0001

08019008 <_fwalk_reent>:
 8019008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801900c:	4606      	mov	r6, r0
 801900e:	4688      	mov	r8, r1
 8019010:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019014:	2700      	movs	r7, #0
 8019016:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801901a:	f1b9 0901 	subs.w	r9, r9, #1
 801901e:	d505      	bpl.n	801902c <_fwalk_reent+0x24>
 8019020:	6824      	ldr	r4, [r4, #0]
 8019022:	2c00      	cmp	r4, #0
 8019024:	d1f7      	bne.n	8019016 <_fwalk_reent+0xe>
 8019026:	4638      	mov	r0, r7
 8019028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801902c:	89ab      	ldrh	r3, [r5, #12]
 801902e:	2b01      	cmp	r3, #1
 8019030:	d907      	bls.n	8019042 <_fwalk_reent+0x3a>
 8019032:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019036:	3301      	adds	r3, #1
 8019038:	d003      	beq.n	8019042 <_fwalk_reent+0x3a>
 801903a:	4629      	mov	r1, r5
 801903c:	4630      	mov	r0, r6
 801903e:	47c0      	blx	r8
 8019040:	4307      	orrs	r7, r0
 8019042:	3568      	adds	r5, #104	; 0x68
 8019044:	e7e9      	b.n	801901a <_fwalk_reent+0x12>
	...

08019048 <__libc_init_array>:
 8019048:	b570      	push	{r4, r5, r6, lr}
 801904a:	4d0d      	ldr	r5, [pc, #52]	; (8019080 <__libc_init_array+0x38>)
 801904c:	4c0d      	ldr	r4, [pc, #52]	; (8019084 <__libc_init_array+0x3c>)
 801904e:	1b64      	subs	r4, r4, r5
 8019050:	10a4      	asrs	r4, r4, #2
 8019052:	2600      	movs	r6, #0
 8019054:	42a6      	cmp	r6, r4
 8019056:	d109      	bne.n	801906c <__libc_init_array+0x24>
 8019058:	4d0b      	ldr	r5, [pc, #44]	; (8019088 <__libc_init_array+0x40>)
 801905a:	4c0c      	ldr	r4, [pc, #48]	; (801908c <__libc_init_array+0x44>)
 801905c:	f006 fab6 	bl	801f5cc <_init>
 8019060:	1b64      	subs	r4, r4, r5
 8019062:	10a4      	asrs	r4, r4, #2
 8019064:	2600      	movs	r6, #0
 8019066:	42a6      	cmp	r6, r4
 8019068:	d105      	bne.n	8019076 <__libc_init_array+0x2e>
 801906a:	bd70      	pop	{r4, r5, r6, pc}
 801906c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019070:	4798      	blx	r3
 8019072:	3601      	adds	r6, #1
 8019074:	e7ee      	b.n	8019054 <__libc_init_array+0xc>
 8019076:	f855 3b04 	ldr.w	r3, [r5], #4
 801907a:	4798      	blx	r3
 801907c:	3601      	adds	r6, #1
 801907e:	e7f2      	b.n	8019066 <__libc_init_array+0x1e>
 8019080:	08020410 	.word	0x08020410
 8019084:	08020410 	.word	0x08020410
 8019088:	08020410 	.word	0x08020410
 801908c:	08020414 	.word	0x08020414

08019090 <__retarget_lock_init_recursive>:
 8019090:	4770      	bx	lr

08019092 <__retarget_lock_acquire_recursive>:
 8019092:	4770      	bx	lr

08019094 <__retarget_lock_release_recursive>:
 8019094:	4770      	bx	lr

08019096 <memcpy>:
 8019096:	440a      	add	r2, r1
 8019098:	4291      	cmp	r1, r2
 801909a:	f100 33ff 	add.w	r3, r0, #4294967295
 801909e:	d100      	bne.n	80190a2 <memcpy+0xc>
 80190a0:	4770      	bx	lr
 80190a2:	b510      	push	{r4, lr}
 80190a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80190a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80190ac:	4291      	cmp	r1, r2
 80190ae:	d1f9      	bne.n	80190a4 <memcpy+0xe>
 80190b0:	bd10      	pop	{r4, pc}

080190b2 <memset>:
 80190b2:	4402      	add	r2, r0
 80190b4:	4603      	mov	r3, r0
 80190b6:	4293      	cmp	r3, r2
 80190b8:	d100      	bne.n	80190bc <memset+0xa>
 80190ba:	4770      	bx	lr
 80190bc:	f803 1b01 	strb.w	r1, [r3], #1
 80190c0:	e7f9      	b.n	80190b6 <memset+0x4>
	...

080190c4 <sbrk_aligned>:
 80190c4:	b570      	push	{r4, r5, r6, lr}
 80190c6:	4e0e      	ldr	r6, [pc, #56]	; (8019100 <sbrk_aligned+0x3c>)
 80190c8:	460c      	mov	r4, r1
 80190ca:	6831      	ldr	r1, [r6, #0]
 80190cc:	4605      	mov	r5, r0
 80190ce:	b911      	cbnz	r1, 80190d6 <sbrk_aligned+0x12>
 80190d0:	f000 ff70 	bl	8019fb4 <_sbrk_r>
 80190d4:	6030      	str	r0, [r6, #0]
 80190d6:	4621      	mov	r1, r4
 80190d8:	4628      	mov	r0, r5
 80190da:	f000 ff6b 	bl	8019fb4 <_sbrk_r>
 80190de:	1c43      	adds	r3, r0, #1
 80190e0:	d00a      	beq.n	80190f8 <sbrk_aligned+0x34>
 80190e2:	1cc4      	adds	r4, r0, #3
 80190e4:	f024 0403 	bic.w	r4, r4, #3
 80190e8:	42a0      	cmp	r0, r4
 80190ea:	d007      	beq.n	80190fc <sbrk_aligned+0x38>
 80190ec:	1a21      	subs	r1, r4, r0
 80190ee:	4628      	mov	r0, r5
 80190f0:	f000 ff60 	bl	8019fb4 <_sbrk_r>
 80190f4:	3001      	adds	r0, #1
 80190f6:	d101      	bne.n	80190fc <sbrk_aligned+0x38>
 80190f8:	f04f 34ff 	mov.w	r4, #4294967295
 80190fc:	4620      	mov	r0, r4
 80190fe:	bd70      	pop	{r4, r5, r6, pc}
 8019100:	2000e550 	.word	0x2000e550

08019104 <_malloc_r>:
 8019104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019108:	1ccd      	adds	r5, r1, #3
 801910a:	f025 0503 	bic.w	r5, r5, #3
 801910e:	3508      	adds	r5, #8
 8019110:	2d0c      	cmp	r5, #12
 8019112:	bf38      	it	cc
 8019114:	250c      	movcc	r5, #12
 8019116:	2d00      	cmp	r5, #0
 8019118:	4607      	mov	r7, r0
 801911a:	db01      	blt.n	8019120 <_malloc_r+0x1c>
 801911c:	42a9      	cmp	r1, r5
 801911e:	d905      	bls.n	801912c <_malloc_r+0x28>
 8019120:	230c      	movs	r3, #12
 8019122:	603b      	str	r3, [r7, #0]
 8019124:	2600      	movs	r6, #0
 8019126:	4630      	mov	r0, r6
 8019128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801912c:	4e2e      	ldr	r6, [pc, #184]	; (80191e8 <_malloc_r+0xe4>)
 801912e:	f003 f96d 	bl	801c40c <__malloc_lock>
 8019132:	6833      	ldr	r3, [r6, #0]
 8019134:	461c      	mov	r4, r3
 8019136:	bb34      	cbnz	r4, 8019186 <_malloc_r+0x82>
 8019138:	4629      	mov	r1, r5
 801913a:	4638      	mov	r0, r7
 801913c:	f7ff ffc2 	bl	80190c4 <sbrk_aligned>
 8019140:	1c43      	adds	r3, r0, #1
 8019142:	4604      	mov	r4, r0
 8019144:	d14d      	bne.n	80191e2 <_malloc_r+0xde>
 8019146:	6834      	ldr	r4, [r6, #0]
 8019148:	4626      	mov	r6, r4
 801914a:	2e00      	cmp	r6, #0
 801914c:	d140      	bne.n	80191d0 <_malloc_r+0xcc>
 801914e:	6823      	ldr	r3, [r4, #0]
 8019150:	4631      	mov	r1, r6
 8019152:	4638      	mov	r0, r7
 8019154:	eb04 0803 	add.w	r8, r4, r3
 8019158:	f000 ff2c 	bl	8019fb4 <_sbrk_r>
 801915c:	4580      	cmp	r8, r0
 801915e:	d13a      	bne.n	80191d6 <_malloc_r+0xd2>
 8019160:	6821      	ldr	r1, [r4, #0]
 8019162:	3503      	adds	r5, #3
 8019164:	1a6d      	subs	r5, r5, r1
 8019166:	f025 0503 	bic.w	r5, r5, #3
 801916a:	3508      	adds	r5, #8
 801916c:	2d0c      	cmp	r5, #12
 801916e:	bf38      	it	cc
 8019170:	250c      	movcc	r5, #12
 8019172:	4629      	mov	r1, r5
 8019174:	4638      	mov	r0, r7
 8019176:	f7ff ffa5 	bl	80190c4 <sbrk_aligned>
 801917a:	3001      	adds	r0, #1
 801917c:	d02b      	beq.n	80191d6 <_malloc_r+0xd2>
 801917e:	6823      	ldr	r3, [r4, #0]
 8019180:	442b      	add	r3, r5
 8019182:	6023      	str	r3, [r4, #0]
 8019184:	e00e      	b.n	80191a4 <_malloc_r+0xa0>
 8019186:	6822      	ldr	r2, [r4, #0]
 8019188:	1b52      	subs	r2, r2, r5
 801918a:	d41e      	bmi.n	80191ca <_malloc_r+0xc6>
 801918c:	2a0b      	cmp	r2, #11
 801918e:	d916      	bls.n	80191be <_malloc_r+0xba>
 8019190:	1961      	adds	r1, r4, r5
 8019192:	42a3      	cmp	r3, r4
 8019194:	6025      	str	r5, [r4, #0]
 8019196:	bf18      	it	ne
 8019198:	6059      	strne	r1, [r3, #4]
 801919a:	6863      	ldr	r3, [r4, #4]
 801919c:	bf08      	it	eq
 801919e:	6031      	streq	r1, [r6, #0]
 80191a0:	5162      	str	r2, [r4, r5]
 80191a2:	604b      	str	r3, [r1, #4]
 80191a4:	4638      	mov	r0, r7
 80191a6:	f104 060b 	add.w	r6, r4, #11
 80191aa:	f003 f935 	bl	801c418 <__malloc_unlock>
 80191ae:	f026 0607 	bic.w	r6, r6, #7
 80191b2:	1d23      	adds	r3, r4, #4
 80191b4:	1af2      	subs	r2, r6, r3
 80191b6:	d0b6      	beq.n	8019126 <_malloc_r+0x22>
 80191b8:	1b9b      	subs	r3, r3, r6
 80191ba:	50a3      	str	r3, [r4, r2]
 80191bc:	e7b3      	b.n	8019126 <_malloc_r+0x22>
 80191be:	6862      	ldr	r2, [r4, #4]
 80191c0:	42a3      	cmp	r3, r4
 80191c2:	bf0c      	ite	eq
 80191c4:	6032      	streq	r2, [r6, #0]
 80191c6:	605a      	strne	r2, [r3, #4]
 80191c8:	e7ec      	b.n	80191a4 <_malloc_r+0xa0>
 80191ca:	4623      	mov	r3, r4
 80191cc:	6864      	ldr	r4, [r4, #4]
 80191ce:	e7b2      	b.n	8019136 <_malloc_r+0x32>
 80191d0:	4634      	mov	r4, r6
 80191d2:	6876      	ldr	r6, [r6, #4]
 80191d4:	e7b9      	b.n	801914a <_malloc_r+0x46>
 80191d6:	230c      	movs	r3, #12
 80191d8:	603b      	str	r3, [r7, #0]
 80191da:	4638      	mov	r0, r7
 80191dc:	f003 f91c 	bl	801c418 <__malloc_unlock>
 80191e0:	e7a1      	b.n	8019126 <_malloc_r+0x22>
 80191e2:	6025      	str	r5, [r4, #0]
 80191e4:	e7de      	b.n	80191a4 <_malloc_r+0xa0>
 80191e6:	bf00      	nop
 80191e8:	2000e54c 	.word	0x2000e54c

080191ec <__cvt>:
 80191ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80191f0:	ec55 4b10 	vmov	r4, r5, d0
 80191f4:	2d00      	cmp	r5, #0
 80191f6:	460e      	mov	r6, r1
 80191f8:	4619      	mov	r1, r3
 80191fa:	462b      	mov	r3, r5
 80191fc:	bfbb      	ittet	lt
 80191fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019202:	461d      	movlt	r5, r3
 8019204:	2300      	movge	r3, #0
 8019206:	232d      	movlt	r3, #45	; 0x2d
 8019208:	700b      	strb	r3, [r1, #0]
 801920a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801920c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019210:	4691      	mov	r9, r2
 8019212:	f023 0820 	bic.w	r8, r3, #32
 8019216:	bfbc      	itt	lt
 8019218:	4622      	movlt	r2, r4
 801921a:	4614      	movlt	r4, r2
 801921c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019220:	d005      	beq.n	801922e <__cvt+0x42>
 8019222:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019226:	d100      	bne.n	801922a <__cvt+0x3e>
 8019228:	3601      	adds	r6, #1
 801922a:	2102      	movs	r1, #2
 801922c:	e000      	b.n	8019230 <__cvt+0x44>
 801922e:	2103      	movs	r1, #3
 8019230:	ab03      	add	r3, sp, #12
 8019232:	9301      	str	r3, [sp, #4]
 8019234:	ab02      	add	r3, sp, #8
 8019236:	9300      	str	r3, [sp, #0]
 8019238:	ec45 4b10 	vmov	d0, r4, r5
 801923c:	4653      	mov	r3, sl
 801923e:	4632      	mov	r2, r6
 8019240:	f001 fe8e 	bl	801af60 <_dtoa_r>
 8019244:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019248:	4607      	mov	r7, r0
 801924a:	d102      	bne.n	8019252 <__cvt+0x66>
 801924c:	f019 0f01 	tst.w	r9, #1
 8019250:	d022      	beq.n	8019298 <__cvt+0xac>
 8019252:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019256:	eb07 0906 	add.w	r9, r7, r6
 801925a:	d110      	bne.n	801927e <__cvt+0x92>
 801925c:	783b      	ldrb	r3, [r7, #0]
 801925e:	2b30      	cmp	r3, #48	; 0x30
 8019260:	d10a      	bne.n	8019278 <__cvt+0x8c>
 8019262:	2200      	movs	r2, #0
 8019264:	2300      	movs	r3, #0
 8019266:	4620      	mov	r0, r4
 8019268:	4629      	mov	r1, r5
 801926a:	f7e7 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 801926e:	b918      	cbnz	r0, 8019278 <__cvt+0x8c>
 8019270:	f1c6 0601 	rsb	r6, r6, #1
 8019274:	f8ca 6000 	str.w	r6, [sl]
 8019278:	f8da 3000 	ldr.w	r3, [sl]
 801927c:	4499      	add	r9, r3
 801927e:	2200      	movs	r2, #0
 8019280:	2300      	movs	r3, #0
 8019282:	4620      	mov	r0, r4
 8019284:	4629      	mov	r1, r5
 8019286:	f7e7 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 801928a:	b108      	cbz	r0, 8019290 <__cvt+0xa4>
 801928c:	f8cd 900c 	str.w	r9, [sp, #12]
 8019290:	2230      	movs	r2, #48	; 0x30
 8019292:	9b03      	ldr	r3, [sp, #12]
 8019294:	454b      	cmp	r3, r9
 8019296:	d307      	bcc.n	80192a8 <__cvt+0xbc>
 8019298:	9b03      	ldr	r3, [sp, #12]
 801929a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801929c:	1bdb      	subs	r3, r3, r7
 801929e:	4638      	mov	r0, r7
 80192a0:	6013      	str	r3, [r2, #0]
 80192a2:	b004      	add	sp, #16
 80192a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192a8:	1c59      	adds	r1, r3, #1
 80192aa:	9103      	str	r1, [sp, #12]
 80192ac:	701a      	strb	r2, [r3, #0]
 80192ae:	e7f0      	b.n	8019292 <__cvt+0xa6>

080192b0 <__exponent>:
 80192b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192b2:	4603      	mov	r3, r0
 80192b4:	2900      	cmp	r1, #0
 80192b6:	bfb8      	it	lt
 80192b8:	4249      	neglt	r1, r1
 80192ba:	f803 2b02 	strb.w	r2, [r3], #2
 80192be:	bfb4      	ite	lt
 80192c0:	222d      	movlt	r2, #45	; 0x2d
 80192c2:	222b      	movge	r2, #43	; 0x2b
 80192c4:	2909      	cmp	r1, #9
 80192c6:	7042      	strb	r2, [r0, #1]
 80192c8:	dd2a      	ble.n	8019320 <__exponent+0x70>
 80192ca:	f10d 0407 	add.w	r4, sp, #7
 80192ce:	46a4      	mov	ip, r4
 80192d0:	270a      	movs	r7, #10
 80192d2:	46a6      	mov	lr, r4
 80192d4:	460a      	mov	r2, r1
 80192d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80192da:	fb07 1516 	mls	r5, r7, r6, r1
 80192de:	3530      	adds	r5, #48	; 0x30
 80192e0:	2a63      	cmp	r2, #99	; 0x63
 80192e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80192e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80192ea:	4631      	mov	r1, r6
 80192ec:	dcf1      	bgt.n	80192d2 <__exponent+0x22>
 80192ee:	3130      	adds	r1, #48	; 0x30
 80192f0:	f1ae 0502 	sub.w	r5, lr, #2
 80192f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80192f8:	1c44      	adds	r4, r0, #1
 80192fa:	4629      	mov	r1, r5
 80192fc:	4561      	cmp	r1, ip
 80192fe:	d30a      	bcc.n	8019316 <__exponent+0x66>
 8019300:	f10d 0209 	add.w	r2, sp, #9
 8019304:	eba2 020e 	sub.w	r2, r2, lr
 8019308:	4565      	cmp	r5, ip
 801930a:	bf88      	it	hi
 801930c:	2200      	movhi	r2, #0
 801930e:	4413      	add	r3, r2
 8019310:	1a18      	subs	r0, r3, r0
 8019312:	b003      	add	sp, #12
 8019314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019316:	f811 2b01 	ldrb.w	r2, [r1], #1
 801931a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801931e:	e7ed      	b.n	80192fc <__exponent+0x4c>
 8019320:	2330      	movs	r3, #48	; 0x30
 8019322:	3130      	adds	r1, #48	; 0x30
 8019324:	7083      	strb	r3, [r0, #2]
 8019326:	70c1      	strb	r1, [r0, #3]
 8019328:	1d03      	adds	r3, r0, #4
 801932a:	e7f1      	b.n	8019310 <__exponent+0x60>

0801932c <_printf_float>:
 801932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019330:	ed2d 8b02 	vpush	{d8}
 8019334:	b08d      	sub	sp, #52	; 0x34
 8019336:	460c      	mov	r4, r1
 8019338:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801933c:	4616      	mov	r6, r2
 801933e:	461f      	mov	r7, r3
 8019340:	4605      	mov	r5, r0
 8019342:	f003 f833 	bl	801c3ac <_localeconv_r>
 8019346:	f8d0 a000 	ldr.w	sl, [r0]
 801934a:	4650      	mov	r0, sl
 801934c:	f7e6 ff40 	bl	80001d0 <strlen>
 8019350:	2300      	movs	r3, #0
 8019352:	930a      	str	r3, [sp, #40]	; 0x28
 8019354:	6823      	ldr	r3, [r4, #0]
 8019356:	9305      	str	r3, [sp, #20]
 8019358:	f8d8 3000 	ldr.w	r3, [r8]
 801935c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019360:	3307      	adds	r3, #7
 8019362:	f023 0307 	bic.w	r3, r3, #7
 8019366:	f103 0208 	add.w	r2, r3, #8
 801936a:	f8c8 2000 	str.w	r2, [r8]
 801936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019372:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019376:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801937a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801937e:	9307      	str	r3, [sp, #28]
 8019380:	f8cd 8018 	str.w	r8, [sp, #24]
 8019384:	ee08 0a10 	vmov	s16, r0
 8019388:	4b9f      	ldr	r3, [pc, #636]	; (8019608 <_printf_float+0x2dc>)
 801938a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801938e:	f04f 32ff 	mov.w	r2, #4294967295
 8019392:	f7e7 fbcb 	bl	8000b2c <__aeabi_dcmpun>
 8019396:	bb88      	cbnz	r0, 80193fc <_printf_float+0xd0>
 8019398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801939c:	4b9a      	ldr	r3, [pc, #616]	; (8019608 <_printf_float+0x2dc>)
 801939e:	f04f 32ff 	mov.w	r2, #4294967295
 80193a2:	f7e7 fba5 	bl	8000af0 <__aeabi_dcmple>
 80193a6:	bb48      	cbnz	r0, 80193fc <_printf_float+0xd0>
 80193a8:	2200      	movs	r2, #0
 80193aa:	2300      	movs	r3, #0
 80193ac:	4640      	mov	r0, r8
 80193ae:	4649      	mov	r1, r9
 80193b0:	f7e7 fb94 	bl	8000adc <__aeabi_dcmplt>
 80193b4:	b110      	cbz	r0, 80193bc <_printf_float+0x90>
 80193b6:	232d      	movs	r3, #45	; 0x2d
 80193b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80193bc:	4b93      	ldr	r3, [pc, #588]	; (801960c <_printf_float+0x2e0>)
 80193be:	4894      	ldr	r0, [pc, #592]	; (8019610 <_printf_float+0x2e4>)
 80193c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80193c4:	bf94      	ite	ls
 80193c6:	4698      	movls	r8, r3
 80193c8:	4680      	movhi	r8, r0
 80193ca:	2303      	movs	r3, #3
 80193cc:	6123      	str	r3, [r4, #16]
 80193ce:	9b05      	ldr	r3, [sp, #20]
 80193d0:	f023 0204 	bic.w	r2, r3, #4
 80193d4:	6022      	str	r2, [r4, #0]
 80193d6:	f04f 0900 	mov.w	r9, #0
 80193da:	9700      	str	r7, [sp, #0]
 80193dc:	4633      	mov	r3, r6
 80193de:	aa0b      	add	r2, sp, #44	; 0x2c
 80193e0:	4621      	mov	r1, r4
 80193e2:	4628      	mov	r0, r5
 80193e4:	f000 f9d8 	bl	8019798 <_printf_common>
 80193e8:	3001      	adds	r0, #1
 80193ea:	f040 8090 	bne.w	801950e <_printf_float+0x1e2>
 80193ee:	f04f 30ff 	mov.w	r0, #4294967295
 80193f2:	b00d      	add	sp, #52	; 0x34
 80193f4:	ecbd 8b02 	vpop	{d8}
 80193f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193fc:	4642      	mov	r2, r8
 80193fe:	464b      	mov	r3, r9
 8019400:	4640      	mov	r0, r8
 8019402:	4649      	mov	r1, r9
 8019404:	f7e7 fb92 	bl	8000b2c <__aeabi_dcmpun>
 8019408:	b140      	cbz	r0, 801941c <_printf_float+0xf0>
 801940a:	464b      	mov	r3, r9
 801940c:	2b00      	cmp	r3, #0
 801940e:	bfbc      	itt	lt
 8019410:	232d      	movlt	r3, #45	; 0x2d
 8019412:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019416:	487f      	ldr	r0, [pc, #508]	; (8019614 <_printf_float+0x2e8>)
 8019418:	4b7f      	ldr	r3, [pc, #508]	; (8019618 <_printf_float+0x2ec>)
 801941a:	e7d1      	b.n	80193c0 <_printf_float+0x94>
 801941c:	6863      	ldr	r3, [r4, #4]
 801941e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019422:	9206      	str	r2, [sp, #24]
 8019424:	1c5a      	adds	r2, r3, #1
 8019426:	d13f      	bne.n	80194a8 <_printf_float+0x17c>
 8019428:	2306      	movs	r3, #6
 801942a:	6063      	str	r3, [r4, #4]
 801942c:	9b05      	ldr	r3, [sp, #20]
 801942e:	6861      	ldr	r1, [r4, #4]
 8019430:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019434:	2300      	movs	r3, #0
 8019436:	9303      	str	r3, [sp, #12]
 8019438:	ab0a      	add	r3, sp, #40	; 0x28
 801943a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801943e:	ab09      	add	r3, sp, #36	; 0x24
 8019440:	ec49 8b10 	vmov	d0, r8, r9
 8019444:	9300      	str	r3, [sp, #0]
 8019446:	6022      	str	r2, [r4, #0]
 8019448:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801944c:	4628      	mov	r0, r5
 801944e:	f7ff fecd 	bl	80191ec <__cvt>
 8019452:	9b06      	ldr	r3, [sp, #24]
 8019454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019456:	2b47      	cmp	r3, #71	; 0x47
 8019458:	4680      	mov	r8, r0
 801945a:	d108      	bne.n	801946e <_printf_float+0x142>
 801945c:	1cc8      	adds	r0, r1, #3
 801945e:	db02      	blt.n	8019466 <_printf_float+0x13a>
 8019460:	6863      	ldr	r3, [r4, #4]
 8019462:	4299      	cmp	r1, r3
 8019464:	dd41      	ble.n	80194ea <_printf_float+0x1be>
 8019466:	f1ab 0b02 	sub.w	fp, fp, #2
 801946a:	fa5f fb8b 	uxtb.w	fp, fp
 801946e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019472:	d820      	bhi.n	80194b6 <_printf_float+0x18a>
 8019474:	3901      	subs	r1, #1
 8019476:	465a      	mov	r2, fp
 8019478:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801947c:	9109      	str	r1, [sp, #36]	; 0x24
 801947e:	f7ff ff17 	bl	80192b0 <__exponent>
 8019482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019484:	1813      	adds	r3, r2, r0
 8019486:	2a01      	cmp	r2, #1
 8019488:	4681      	mov	r9, r0
 801948a:	6123      	str	r3, [r4, #16]
 801948c:	dc02      	bgt.n	8019494 <_printf_float+0x168>
 801948e:	6822      	ldr	r2, [r4, #0]
 8019490:	07d2      	lsls	r2, r2, #31
 8019492:	d501      	bpl.n	8019498 <_printf_float+0x16c>
 8019494:	3301      	adds	r3, #1
 8019496:	6123      	str	r3, [r4, #16]
 8019498:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801949c:	2b00      	cmp	r3, #0
 801949e:	d09c      	beq.n	80193da <_printf_float+0xae>
 80194a0:	232d      	movs	r3, #45	; 0x2d
 80194a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194a6:	e798      	b.n	80193da <_printf_float+0xae>
 80194a8:	9a06      	ldr	r2, [sp, #24]
 80194aa:	2a47      	cmp	r2, #71	; 0x47
 80194ac:	d1be      	bne.n	801942c <_printf_float+0x100>
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d1bc      	bne.n	801942c <_printf_float+0x100>
 80194b2:	2301      	movs	r3, #1
 80194b4:	e7b9      	b.n	801942a <_printf_float+0xfe>
 80194b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80194ba:	d118      	bne.n	80194ee <_printf_float+0x1c2>
 80194bc:	2900      	cmp	r1, #0
 80194be:	6863      	ldr	r3, [r4, #4]
 80194c0:	dd0b      	ble.n	80194da <_printf_float+0x1ae>
 80194c2:	6121      	str	r1, [r4, #16]
 80194c4:	b913      	cbnz	r3, 80194cc <_printf_float+0x1a0>
 80194c6:	6822      	ldr	r2, [r4, #0]
 80194c8:	07d0      	lsls	r0, r2, #31
 80194ca:	d502      	bpl.n	80194d2 <_printf_float+0x1a6>
 80194cc:	3301      	adds	r3, #1
 80194ce:	440b      	add	r3, r1
 80194d0:	6123      	str	r3, [r4, #16]
 80194d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80194d4:	f04f 0900 	mov.w	r9, #0
 80194d8:	e7de      	b.n	8019498 <_printf_float+0x16c>
 80194da:	b913      	cbnz	r3, 80194e2 <_printf_float+0x1b6>
 80194dc:	6822      	ldr	r2, [r4, #0]
 80194de:	07d2      	lsls	r2, r2, #31
 80194e0:	d501      	bpl.n	80194e6 <_printf_float+0x1ba>
 80194e2:	3302      	adds	r3, #2
 80194e4:	e7f4      	b.n	80194d0 <_printf_float+0x1a4>
 80194e6:	2301      	movs	r3, #1
 80194e8:	e7f2      	b.n	80194d0 <_printf_float+0x1a4>
 80194ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80194ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80194f0:	4299      	cmp	r1, r3
 80194f2:	db05      	blt.n	8019500 <_printf_float+0x1d4>
 80194f4:	6823      	ldr	r3, [r4, #0]
 80194f6:	6121      	str	r1, [r4, #16]
 80194f8:	07d8      	lsls	r0, r3, #31
 80194fa:	d5ea      	bpl.n	80194d2 <_printf_float+0x1a6>
 80194fc:	1c4b      	adds	r3, r1, #1
 80194fe:	e7e7      	b.n	80194d0 <_printf_float+0x1a4>
 8019500:	2900      	cmp	r1, #0
 8019502:	bfd4      	ite	le
 8019504:	f1c1 0202 	rsble	r2, r1, #2
 8019508:	2201      	movgt	r2, #1
 801950a:	4413      	add	r3, r2
 801950c:	e7e0      	b.n	80194d0 <_printf_float+0x1a4>
 801950e:	6823      	ldr	r3, [r4, #0]
 8019510:	055a      	lsls	r2, r3, #21
 8019512:	d407      	bmi.n	8019524 <_printf_float+0x1f8>
 8019514:	6923      	ldr	r3, [r4, #16]
 8019516:	4642      	mov	r2, r8
 8019518:	4631      	mov	r1, r6
 801951a:	4628      	mov	r0, r5
 801951c:	47b8      	blx	r7
 801951e:	3001      	adds	r0, #1
 8019520:	d12c      	bne.n	801957c <_printf_float+0x250>
 8019522:	e764      	b.n	80193ee <_printf_float+0xc2>
 8019524:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019528:	f240 80e0 	bls.w	80196ec <_printf_float+0x3c0>
 801952c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019530:	2200      	movs	r2, #0
 8019532:	2300      	movs	r3, #0
 8019534:	f7e7 fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8019538:	2800      	cmp	r0, #0
 801953a:	d034      	beq.n	80195a6 <_printf_float+0x27a>
 801953c:	4a37      	ldr	r2, [pc, #220]	; (801961c <_printf_float+0x2f0>)
 801953e:	2301      	movs	r3, #1
 8019540:	4631      	mov	r1, r6
 8019542:	4628      	mov	r0, r5
 8019544:	47b8      	blx	r7
 8019546:	3001      	adds	r0, #1
 8019548:	f43f af51 	beq.w	80193ee <_printf_float+0xc2>
 801954c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019550:	429a      	cmp	r2, r3
 8019552:	db02      	blt.n	801955a <_printf_float+0x22e>
 8019554:	6823      	ldr	r3, [r4, #0]
 8019556:	07d8      	lsls	r0, r3, #31
 8019558:	d510      	bpl.n	801957c <_printf_float+0x250>
 801955a:	ee18 3a10 	vmov	r3, s16
 801955e:	4652      	mov	r2, sl
 8019560:	4631      	mov	r1, r6
 8019562:	4628      	mov	r0, r5
 8019564:	47b8      	blx	r7
 8019566:	3001      	adds	r0, #1
 8019568:	f43f af41 	beq.w	80193ee <_printf_float+0xc2>
 801956c:	f04f 0800 	mov.w	r8, #0
 8019570:	f104 091a 	add.w	r9, r4, #26
 8019574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019576:	3b01      	subs	r3, #1
 8019578:	4543      	cmp	r3, r8
 801957a:	dc09      	bgt.n	8019590 <_printf_float+0x264>
 801957c:	6823      	ldr	r3, [r4, #0]
 801957e:	079b      	lsls	r3, r3, #30
 8019580:	f100 8105 	bmi.w	801978e <_printf_float+0x462>
 8019584:	68e0      	ldr	r0, [r4, #12]
 8019586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019588:	4298      	cmp	r0, r3
 801958a:	bfb8      	it	lt
 801958c:	4618      	movlt	r0, r3
 801958e:	e730      	b.n	80193f2 <_printf_float+0xc6>
 8019590:	2301      	movs	r3, #1
 8019592:	464a      	mov	r2, r9
 8019594:	4631      	mov	r1, r6
 8019596:	4628      	mov	r0, r5
 8019598:	47b8      	blx	r7
 801959a:	3001      	adds	r0, #1
 801959c:	f43f af27 	beq.w	80193ee <_printf_float+0xc2>
 80195a0:	f108 0801 	add.w	r8, r8, #1
 80195a4:	e7e6      	b.n	8019574 <_printf_float+0x248>
 80195a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	dc39      	bgt.n	8019620 <_printf_float+0x2f4>
 80195ac:	4a1b      	ldr	r2, [pc, #108]	; (801961c <_printf_float+0x2f0>)
 80195ae:	2301      	movs	r3, #1
 80195b0:	4631      	mov	r1, r6
 80195b2:	4628      	mov	r0, r5
 80195b4:	47b8      	blx	r7
 80195b6:	3001      	adds	r0, #1
 80195b8:	f43f af19 	beq.w	80193ee <_printf_float+0xc2>
 80195bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80195c0:	4313      	orrs	r3, r2
 80195c2:	d102      	bne.n	80195ca <_printf_float+0x29e>
 80195c4:	6823      	ldr	r3, [r4, #0]
 80195c6:	07d9      	lsls	r1, r3, #31
 80195c8:	d5d8      	bpl.n	801957c <_printf_float+0x250>
 80195ca:	ee18 3a10 	vmov	r3, s16
 80195ce:	4652      	mov	r2, sl
 80195d0:	4631      	mov	r1, r6
 80195d2:	4628      	mov	r0, r5
 80195d4:	47b8      	blx	r7
 80195d6:	3001      	adds	r0, #1
 80195d8:	f43f af09 	beq.w	80193ee <_printf_float+0xc2>
 80195dc:	f04f 0900 	mov.w	r9, #0
 80195e0:	f104 0a1a 	add.w	sl, r4, #26
 80195e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195e6:	425b      	negs	r3, r3
 80195e8:	454b      	cmp	r3, r9
 80195ea:	dc01      	bgt.n	80195f0 <_printf_float+0x2c4>
 80195ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195ee:	e792      	b.n	8019516 <_printf_float+0x1ea>
 80195f0:	2301      	movs	r3, #1
 80195f2:	4652      	mov	r2, sl
 80195f4:	4631      	mov	r1, r6
 80195f6:	4628      	mov	r0, r5
 80195f8:	47b8      	blx	r7
 80195fa:	3001      	adds	r0, #1
 80195fc:	f43f aef7 	beq.w	80193ee <_printf_float+0xc2>
 8019600:	f109 0901 	add.w	r9, r9, #1
 8019604:	e7ee      	b.n	80195e4 <_printf_float+0x2b8>
 8019606:	bf00      	nop
 8019608:	7fefffff 	.word	0x7fefffff
 801960c:	0801fd7c 	.word	0x0801fd7c
 8019610:	0801fd80 	.word	0x0801fd80
 8019614:	0801fd88 	.word	0x0801fd88
 8019618:	0801fd84 	.word	0x0801fd84
 801961c:	0801fd8c 	.word	0x0801fd8c
 8019620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019624:	429a      	cmp	r2, r3
 8019626:	bfa8      	it	ge
 8019628:	461a      	movge	r2, r3
 801962a:	2a00      	cmp	r2, #0
 801962c:	4691      	mov	r9, r2
 801962e:	dc37      	bgt.n	80196a0 <_printf_float+0x374>
 8019630:	f04f 0b00 	mov.w	fp, #0
 8019634:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019638:	f104 021a 	add.w	r2, r4, #26
 801963c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801963e:	9305      	str	r3, [sp, #20]
 8019640:	eba3 0309 	sub.w	r3, r3, r9
 8019644:	455b      	cmp	r3, fp
 8019646:	dc33      	bgt.n	80196b0 <_printf_float+0x384>
 8019648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801964c:	429a      	cmp	r2, r3
 801964e:	db3b      	blt.n	80196c8 <_printf_float+0x39c>
 8019650:	6823      	ldr	r3, [r4, #0]
 8019652:	07da      	lsls	r2, r3, #31
 8019654:	d438      	bmi.n	80196c8 <_printf_float+0x39c>
 8019656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019658:	9a05      	ldr	r2, [sp, #20]
 801965a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801965c:	1a9a      	subs	r2, r3, r2
 801965e:	eba3 0901 	sub.w	r9, r3, r1
 8019662:	4591      	cmp	r9, r2
 8019664:	bfa8      	it	ge
 8019666:	4691      	movge	r9, r2
 8019668:	f1b9 0f00 	cmp.w	r9, #0
 801966c:	dc35      	bgt.n	80196da <_printf_float+0x3ae>
 801966e:	f04f 0800 	mov.w	r8, #0
 8019672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019676:	f104 0a1a 	add.w	sl, r4, #26
 801967a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801967e:	1a9b      	subs	r3, r3, r2
 8019680:	eba3 0309 	sub.w	r3, r3, r9
 8019684:	4543      	cmp	r3, r8
 8019686:	f77f af79 	ble.w	801957c <_printf_float+0x250>
 801968a:	2301      	movs	r3, #1
 801968c:	4652      	mov	r2, sl
 801968e:	4631      	mov	r1, r6
 8019690:	4628      	mov	r0, r5
 8019692:	47b8      	blx	r7
 8019694:	3001      	adds	r0, #1
 8019696:	f43f aeaa 	beq.w	80193ee <_printf_float+0xc2>
 801969a:	f108 0801 	add.w	r8, r8, #1
 801969e:	e7ec      	b.n	801967a <_printf_float+0x34e>
 80196a0:	4613      	mov	r3, r2
 80196a2:	4631      	mov	r1, r6
 80196a4:	4642      	mov	r2, r8
 80196a6:	4628      	mov	r0, r5
 80196a8:	47b8      	blx	r7
 80196aa:	3001      	adds	r0, #1
 80196ac:	d1c0      	bne.n	8019630 <_printf_float+0x304>
 80196ae:	e69e      	b.n	80193ee <_printf_float+0xc2>
 80196b0:	2301      	movs	r3, #1
 80196b2:	4631      	mov	r1, r6
 80196b4:	4628      	mov	r0, r5
 80196b6:	9205      	str	r2, [sp, #20]
 80196b8:	47b8      	blx	r7
 80196ba:	3001      	adds	r0, #1
 80196bc:	f43f ae97 	beq.w	80193ee <_printf_float+0xc2>
 80196c0:	9a05      	ldr	r2, [sp, #20]
 80196c2:	f10b 0b01 	add.w	fp, fp, #1
 80196c6:	e7b9      	b.n	801963c <_printf_float+0x310>
 80196c8:	ee18 3a10 	vmov	r3, s16
 80196cc:	4652      	mov	r2, sl
 80196ce:	4631      	mov	r1, r6
 80196d0:	4628      	mov	r0, r5
 80196d2:	47b8      	blx	r7
 80196d4:	3001      	adds	r0, #1
 80196d6:	d1be      	bne.n	8019656 <_printf_float+0x32a>
 80196d8:	e689      	b.n	80193ee <_printf_float+0xc2>
 80196da:	9a05      	ldr	r2, [sp, #20]
 80196dc:	464b      	mov	r3, r9
 80196de:	4442      	add	r2, r8
 80196e0:	4631      	mov	r1, r6
 80196e2:	4628      	mov	r0, r5
 80196e4:	47b8      	blx	r7
 80196e6:	3001      	adds	r0, #1
 80196e8:	d1c1      	bne.n	801966e <_printf_float+0x342>
 80196ea:	e680      	b.n	80193ee <_printf_float+0xc2>
 80196ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196ee:	2a01      	cmp	r2, #1
 80196f0:	dc01      	bgt.n	80196f6 <_printf_float+0x3ca>
 80196f2:	07db      	lsls	r3, r3, #31
 80196f4:	d538      	bpl.n	8019768 <_printf_float+0x43c>
 80196f6:	2301      	movs	r3, #1
 80196f8:	4642      	mov	r2, r8
 80196fa:	4631      	mov	r1, r6
 80196fc:	4628      	mov	r0, r5
 80196fe:	47b8      	blx	r7
 8019700:	3001      	adds	r0, #1
 8019702:	f43f ae74 	beq.w	80193ee <_printf_float+0xc2>
 8019706:	ee18 3a10 	vmov	r3, s16
 801970a:	4652      	mov	r2, sl
 801970c:	4631      	mov	r1, r6
 801970e:	4628      	mov	r0, r5
 8019710:	47b8      	blx	r7
 8019712:	3001      	adds	r0, #1
 8019714:	f43f ae6b 	beq.w	80193ee <_printf_float+0xc2>
 8019718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801971c:	2200      	movs	r2, #0
 801971e:	2300      	movs	r3, #0
 8019720:	f7e7 f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8019724:	b9d8      	cbnz	r0, 801975e <_printf_float+0x432>
 8019726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019728:	f108 0201 	add.w	r2, r8, #1
 801972c:	3b01      	subs	r3, #1
 801972e:	4631      	mov	r1, r6
 8019730:	4628      	mov	r0, r5
 8019732:	47b8      	blx	r7
 8019734:	3001      	adds	r0, #1
 8019736:	d10e      	bne.n	8019756 <_printf_float+0x42a>
 8019738:	e659      	b.n	80193ee <_printf_float+0xc2>
 801973a:	2301      	movs	r3, #1
 801973c:	4652      	mov	r2, sl
 801973e:	4631      	mov	r1, r6
 8019740:	4628      	mov	r0, r5
 8019742:	47b8      	blx	r7
 8019744:	3001      	adds	r0, #1
 8019746:	f43f ae52 	beq.w	80193ee <_printf_float+0xc2>
 801974a:	f108 0801 	add.w	r8, r8, #1
 801974e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019750:	3b01      	subs	r3, #1
 8019752:	4543      	cmp	r3, r8
 8019754:	dcf1      	bgt.n	801973a <_printf_float+0x40e>
 8019756:	464b      	mov	r3, r9
 8019758:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801975c:	e6dc      	b.n	8019518 <_printf_float+0x1ec>
 801975e:	f04f 0800 	mov.w	r8, #0
 8019762:	f104 0a1a 	add.w	sl, r4, #26
 8019766:	e7f2      	b.n	801974e <_printf_float+0x422>
 8019768:	2301      	movs	r3, #1
 801976a:	4642      	mov	r2, r8
 801976c:	e7df      	b.n	801972e <_printf_float+0x402>
 801976e:	2301      	movs	r3, #1
 8019770:	464a      	mov	r2, r9
 8019772:	4631      	mov	r1, r6
 8019774:	4628      	mov	r0, r5
 8019776:	47b8      	blx	r7
 8019778:	3001      	adds	r0, #1
 801977a:	f43f ae38 	beq.w	80193ee <_printf_float+0xc2>
 801977e:	f108 0801 	add.w	r8, r8, #1
 8019782:	68e3      	ldr	r3, [r4, #12]
 8019784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019786:	1a5b      	subs	r3, r3, r1
 8019788:	4543      	cmp	r3, r8
 801978a:	dcf0      	bgt.n	801976e <_printf_float+0x442>
 801978c:	e6fa      	b.n	8019584 <_printf_float+0x258>
 801978e:	f04f 0800 	mov.w	r8, #0
 8019792:	f104 0919 	add.w	r9, r4, #25
 8019796:	e7f4      	b.n	8019782 <_printf_float+0x456>

08019798 <_printf_common>:
 8019798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801979c:	4616      	mov	r6, r2
 801979e:	4699      	mov	r9, r3
 80197a0:	688a      	ldr	r2, [r1, #8]
 80197a2:	690b      	ldr	r3, [r1, #16]
 80197a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80197a8:	4293      	cmp	r3, r2
 80197aa:	bfb8      	it	lt
 80197ac:	4613      	movlt	r3, r2
 80197ae:	6033      	str	r3, [r6, #0]
 80197b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80197b4:	4607      	mov	r7, r0
 80197b6:	460c      	mov	r4, r1
 80197b8:	b10a      	cbz	r2, 80197be <_printf_common+0x26>
 80197ba:	3301      	adds	r3, #1
 80197bc:	6033      	str	r3, [r6, #0]
 80197be:	6823      	ldr	r3, [r4, #0]
 80197c0:	0699      	lsls	r1, r3, #26
 80197c2:	bf42      	ittt	mi
 80197c4:	6833      	ldrmi	r3, [r6, #0]
 80197c6:	3302      	addmi	r3, #2
 80197c8:	6033      	strmi	r3, [r6, #0]
 80197ca:	6825      	ldr	r5, [r4, #0]
 80197cc:	f015 0506 	ands.w	r5, r5, #6
 80197d0:	d106      	bne.n	80197e0 <_printf_common+0x48>
 80197d2:	f104 0a19 	add.w	sl, r4, #25
 80197d6:	68e3      	ldr	r3, [r4, #12]
 80197d8:	6832      	ldr	r2, [r6, #0]
 80197da:	1a9b      	subs	r3, r3, r2
 80197dc:	42ab      	cmp	r3, r5
 80197de:	dc26      	bgt.n	801982e <_printf_common+0x96>
 80197e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80197e4:	1e13      	subs	r3, r2, #0
 80197e6:	6822      	ldr	r2, [r4, #0]
 80197e8:	bf18      	it	ne
 80197ea:	2301      	movne	r3, #1
 80197ec:	0692      	lsls	r2, r2, #26
 80197ee:	d42b      	bmi.n	8019848 <_printf_common+0xb0>
 80197f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80197f4:	4649      	mov	r1, r9
 80197f6:	4638      	mov	r0, r7
 80197f8:	47c0      	blx	r8
 80197fa:	3001      	adds	r0, #1
 80197fc:	d01e      	beq.n	801983c <_printf_common+0xa4>
 80197fe:	6823      	ldr	r3, [r4, #0]
 8019800:	68e5      	ldr	r5, [r4, #12]
 8019802:	6832      	ldr	r2, [r6, #0]
 8019804:	f003 0306 	and.w	r3, r3, #6
 8019808:	2b04      	cmp	r3, #4
 801980a:	bf08      	it	eq
 801980c:	1aad      	subeq	r5, r5, r2
 801980e:	68a3      	ldr	r3, [r4, #8]
 8019810:	6922      	ldr	r2, [r4, #16]
 8019812:	bf0c      	ite	eq
 8019814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019818:	2500      	movne	r5, #0
 801981a:	4293      	cmp	r3, r2
 801981c:	bfc4      	itt	gt
 801981e:	1a9b      	subgt	r3, r3, r2
 8019820:	18ed      	addgt	r5, r5, r3
 8019822:	2600      	movs	r6, #0
 8019824:	341a      	adds	r4, #26
 8019826:	42b5      	cmp	r5, r6
 8019828:	d11a      	bne.n	8019860 <_printf_common+0xc8>
 801982a:	2000      	movs	r0, #0
 801982c:	e008      	b.n	8019840 <_printf_common+0xa8>
 801982e:	2301      	movs	r3, #1
 8019830:	4652      	mov	r2, sl
 8019832:	4649      	mov	r1, r9
 8019834:	4638      	mov	r0, r7
 8019836:	47c0      	blx	r8
 8019838:	3001      	adds	r0, #1
 801983a:	d103      	bne.n	8019844 <_printf_common+0xac>
 801983c:	f04f 30ff 	mov.w	r0, #4294967295
 8019840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019844:	3501      	adds	r5, #1
 8019846:	e7c6      	b.n	80197d6 <_printf_common+0x3e>
 8019848:	18e1      	adds	r1, r4, r3
 801984a:	1c5a      	adds	r2, r3, #1
 801984c:	2030      	movs	r0, #48	; 0x30
 801984e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019852:	4422      	add	r2, r4
 8019854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801985c:	3302      	adds	r3, #2
 801985e:	e7c7      	b.n	80197f0 <_printf_common+0x58>
 8019860:	2301      	movs	r3, #1
 8019862:	4622      	mov	r2, r4
 8019864:	4649      	mov	r1, r9
 8019866:	4638      	mov	r0, r7
 8019868:	47c0      	blx	r8
 801986a:	3001      	adds	r0, #1
 801986c:	d0e6      	beq.n	801983c <_printf_common+0xa4>
 801986e:	3601      	adds	r6, #1
 8019870:	e7d9      	b.n	8019826 <_printf_common+0x8e>
	...

08019874 <_printf_i>:
 8019874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019878:	7e0f      	ldrb	r7, [r1, #24]
 801987a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801987c:	2f78      	cmp	r7, #120	; 0x78
 801987e:	4691      	mov	r9, r2
 8019880:	4680      	mov	r8, r0
 8019882:	460c      	mov	r4, r1
 8019884:	469a      	mov	sl, r3
 8019886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801988a:	d807      	bhi.n	801989c <_printf_i+0x28>
 801988c:	2f62      	cmp	r7, #98	; 0x62
 801988e:	d80a      	bhi.n	80198a6 <_printf_i+0x32>
 8019890:	2f00      	cmp	r7, #0
 8019892:	f000 80d8 	beq.w	8019a46 <_printf_i+0x1d2>
 8019896:	2f58      	cmp	r7, #88	; 0x58
 8019898:	f000 80a3 	beq.w	80199e2 <_printf_i+0x16e>
 801989c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80198a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80198a4:	e03a      	b.n	801991c <_printf_i+0xa8>
 80198a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80198aa:	2b15      	cmp	r3, #21
 80198ac:	d8f6      	bhi.n	801989c <_printf_i+0x28>
 80198ae:	a101      	add	r1, pc, #4	; (adr r1, 80198b4 <_printf_i+0x40>)
 80198b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80198b4:	0801990d 	.word	0x0801990d
 80198b8:	08019921 	.word	0x08019921
 80198bc:	0801989d 	.word	0x0801989d
 80198c0:	0801989d 	.word	0x0801989d
 80198c4:	0801989d 	.word	0x0801989d
 80198c8:	0801989d 	.word	0x0801989d
 80198cc:	08019921 	.word	0x08019921
 80198d0:	0801989d 	.word	0x0801989d
 80198d4:	0801989d 	.word	0x0801989d
 80198d8:	0801989d 	.word	0x0801989d
 80198dc:	0801989d 	.word	0x0801989d
 80198e0:	08019a2d 	.word	0x08019a2d
 80198e4:	08019951 	.word	0x08019951
 80198e8:	08019a0f 	.word	0x08019a0f
 80198ec:	0801989d 	.word	0x0801989d
 80198f0:	0801989d 	.word	0x0801989d
 80198f4:	08019a4f 	.word	0x08019a4f
 80198f8:	0801989d 	.word	0x0801989d
 80198fc:	08019951 	.word	0x08019951
 8019900:	0801989d 	.word	0x0801989d
 8019904:	0801989d 	.word	0x0801989d
 8019908:	08019a17 	.word	0x08019a17
 801990c:	682b      	ldr	r3, [r5, #0]
 801990e:	1d1a      	adds	r2, r3, #4
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	602a      	str	r2, [r5, #0]
 8019914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801991c:	2301      	movs	r3, #1
 801991e:	e0a3      	b.n	8019a68 <_printf_i+0x1f4>
 8019920:	6820      	ldr	r0, [r4, #0]
 8019922:	6829      	ldr	r1, [r5, #0]
 8019924:	0606      	lsls	r6, r0, #24
 8019926:	f101 0304 	add.w	r3, r1, #4
 801992a:	d50a      	bpl.n	8019942 <_printf_i+0xce>
 801992c:	680e      	ldr	r6, [r1, #0]
 801992e:	602b      	str	r3, [r5, #0]
 8019930:	2e00      	cmp	r6, #0
 8019932:	da03      	bge.n	801993c <_printf_i+0xc8>
 8019934:	232d      	movs	r3, #45	; 0x2d
 8019936:	4276      	negs	r6, r6
 8019938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801993c:	485e      	ldr	r0, [pc, #376]	; (8019ab8 <_printf_i+0x244>)
 801993e:	230a      	movs	r3, #10
 8019940:	e019      	b.n	8019976 <_printf_i+0x102>
 8019942:	680e      	ldr	r6, [r1, #0]
 8019944:	602b      	str	r3, [r5, #0]
 8019946:	f010 0f40 	tst.w	r0, #64	; 0x40
 801994a:	bf18      	it	ne
 801994c:	b236      	sxthne	r6, r6
 801994e:	e7ef      	b.n	8019930 <_printf_i+0xbc>
 8019950:	682b      	ldr	r3, [r5, #0]
 8019952:	6820      	ldr	r0, [r4, #0]
 8019954:	1d19      	adds	r1, r3, #4
 8019956:	6029      	str	r1, [r5, #0]
 8019958:	0601      	lsls	r1, r0, #24
 801995a:	d501      	bpl.n	8019960 <_printf_i+0xec>
 801995c:	681e      	ldr	r6, [r3, #0]
 801995e:	e002      	b.n	8019966 <_printf_i+0xf2>
 8019960:	0646      	lsls	r6, r0, #25
 8019962:	d5fb      	bpl.n	801995c <_printf_i+0xe8>
 8019964:	881e      	ldrh	r6, [r3, #0]
 8019966:	4854      	ldr	r0, [pc, #336]	; (8019ab8 <_printf_i+0x244>)
 8019968:	2f6f      	cmp	r7, #111	; 0x6f
 801996a:	bf0c      	ite	eq
 801996c:	2308      	moveq	r3, #8
 801996e:	230a      	movne	r3, #10
 8019970:	2100      	movs	r1, #0
 8019972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019976:	6865      	ldr	r5, [r4, #4]
 8019978:	60a5      	str	r5, [r4, #8]
 801997a:	2d00      	cmp	r5, #0
 801997c:	bfa2      	ittt	ge
 801997e:	6821      	ldrge	r1, [r4, #0]
 8019980:	f021 0104 	bicge.w	r1, r1, #4
 8019984:	6021      	strge	r1, [r4, #0]
 8019986:	b90e      	cbnz	r6, 801998c <_printf_i+0x118>
 8019988:	2d00      	cmp	r5, #0
 801998a:	d04d      	beq.n	8019a28 <_printf_i+0x1b4>
 801998c:	4615      	mov	r5, r2
 801998e:	fbb6 f1f3 	udiv	r1, r6, r3
 8019992:	fb03 6711 	mls	r7, r3, r1, r6
 8019996:	5dc7      	ldrb	r7, [r0, r7]
 8019998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801999c:	4637      	mov	r7, r6
 801999e:	42bb      	cmp	r3, r7
 80199a0:	460e      	mov	r6, r1
 80199a2:	d9f4      	bls.n	801998e <_printf_i+0x11a>
 80199a4:	2b08      	cmp	r3, #8
 80199a6:	d10b      	bne.n	80199c0 <_printf_i+0x14c>
 80199a8:	6823      	ldr	r3, [r4, #0]
 80199aa:	07de      	lsls	r6, r3, #31
 80199ac:	d508      	bpl.n	80199c0 <_printf_i+0x14c>
 80199ae:	6923      	ldr	r3, [r4, #16]
 80199b0:	6861      	ldr	r1, [r4, #4]
 80199b2:	4299      	cmp	r1, r3
 80199b4:	bfde      	ittt	le
 80199b6:	2330      	movle	r3, #48	; 0x30
 80199b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80199bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80199c0:	1b52      	subs	r2, r2, r5
 80199c2:	6122      	str	r2, [r4, #16]
 80199c4:	f8cd a000 	str.w	sl, [sp]
 80199c8:	464b      	mov	r3, r9
 80199ca:	aa03      	add	r2, sp, #12
 80199cc:	4621      	mov	r1, r4
 80199ce:	4640      	mov	r0, r8
 80199d0:	f7ff fee2 	bl	8019798 <_printf_common>
 80199d4:	3001      	adds	r0, #1
 80199d6:	d14c      	bne.n	8019a72 <_printf_i+0x1fe>
 80199d8:	f04f 30ff 	mov.w	r0, #4294967295
 80199dc:	b004      	add	sp, #16
 80199de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199e2:	4835      	ldr	r0, [pc, #212]	; (8019ab8 <_printf_i+0x244>)
 80199e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80199e8:	6829      	ldr	r1, [r5, #0]
 80199ea:	6823      	ldr	r3, [r4, #0]
 80199ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80199f0:	6029      	str	r1, [r5, #0]
 80199f2:	061d      	lsls	r5, r3, #24
 80199f4:	d514      	bpl.n	8019a20 <_printf_i+0x1ac>
 80199f6:	07df      	lsls	r7, r3, #31
 80199f8:	bf44      	itt	mi
 80199fa:	f043 0320 	orrmi.w	r3, r3, #32
 80199fe:	6023      	strmi	r3, [r4, #0]
 8019a00:	b91e      	cbnz	r6, 8019a0a <_printf_i+0x196>
 8019a02:	6823      	ldr	r3, [r4, #0]
 8019a04:	f023 0320 	bic.w	r3, r3, #32
 8019a08:	6023      	str	r3, [r4, #0]
 8019a0a:	2310      	movs	r3, #16
 8019a0c:	e7b0      	b.n	8019970 <_printf_i+0xfc>
 8019a0e:	6823      	ldr	r3, [r4, #0]
 8019a10:	f043 0320 	orr.w	r3, r3, #32
 8019a14:	6023      	str	r3, [r4, #0]
 8019a16:	2378      	movs	r3, #120	; 0x78
 8019a18:	4828      	ldr	r0, [pc, #160]	; (8019abc <_printf_i+0x248>)
 8019a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019a1e:	e7e3      	b.n	80199e8 <_printf_i+0x174>
 8019a20:	0659      	lsls	r1, r3, #25
 8019a22:	bf48      	it	mi
 8019a24:	b2b6      	uxthmi	r6, r6
 8019a26:	e7e6      	b.n	80199f6 <_printf_i+0x182>
 8019a28:	4615      	mov	r5, r2
 8019a2a:	e7bb      	b.n	80199a4 <_printf_i+0x130>
 8019a2c:	682b      	ldr	r3, [r5, #0]
 8019a2e:	6826      	ldr	r6, [r4, #0]
 8019a30:	6961      	ldr	r1, [r4, #20]
 8019a32:	1d18      	adds	r0, r3, #4
 8019a34:	6028      	str	r0, [r5, #0]
 8019a36:	0635      	lsls	r5, r6, #24
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	d501      	bpl.n	8019a40 <_printf_i+0x1cc>
 8019a3c:	6019      	str	r1, [r3, #0]
 8019a3e:	e002      	b.n	8019a46 <_printf_i+0x1d2>
 8019a40:	0670      	lsls	r0, r6, #25
 8019a42:	d5fb      	bpl.n	8019a3c <_printf_i+0x1c8>
 8019a44:	8019      	strh	r1, [r3, #0]
 8019a46:	2300      	movs	r3, #0
 8019a48:	6123      	str	r3, [r4, #16]
 8019a4a:	4615      	mov	r5, r2
 8019a4c:	e7ba      	b.n	80199c4 <_printf_i+0x150>
 8019a4e:	682b      	ldr	r3, [r5, #0]
 8019a50:	1d1a      	adds	r2, r3, #4
 8019a52:	602a      	str	r2, [r5, #0]
 8019a54:	681d      	ldr	r5, [r3, #0]
 8019a56:	6862      	ldr	r2, [r4, #4]
 8019a58:	2100      	movs	r1, #0
 8019a5a:	4628      	mov	r0, r5
 8019a5c:	f7e6 fbc0 	bl	80001e0 <memchr>
 8019a60:	b108      	cbz	r0, 8019a66 <_printf_i+0x1f2>
 8019a62:	1b40      	subs	r0, r0, r5
 8019a64:	6060      	str	r0, [r4, #4]
 8019a66:	6863      	ldr	r3, [r4, #4]
 8019a68:	6123      	str	r3, [r4, #16]
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a70:	e7a8      	b.n	80199c4 <_printf_i+0x150>
 8019a72:	6923      	ldr	r3, [r4, #16]
 8019a74:	462a      	mov	r2, r5
 8019a76:	4649      	mov	r1, r9
 8019a78:	4640      	mov	r0, r8
 8019a7a:	47d0      	blx	sl
 8019a7c:	3001      	adds	r0, #1
 8019a7e:	d0ab      	beq.n	80199d8 <_printf_i+0x164>
 8019a80:	6823      	ldr	r3, [r4, #0]
 8019a82:	079b      	lsls	r3, r3, #30
 8019a84:	d413      	bmi.n	8019aae <_printf_i+0x23a>
 8019a86:	68e0      	ldr	r0, [r4, #12]
 8019a88:	9b03      	ldr	r3, [sp, #12]
 8019a8a:	4298      	cmp	r0, r3
 8019a8c:	bfb8      	it	lt
 8019a8e:	4618      	movlt	r0, r3
 8019a90:	e7a4      	b.n	80199dc <_printf_i+0x168>
 8019a92:	2301      	movs	r3, #1
 8019a94:	4632      	mov	r2, r6
 8019a96:	4649      	mov	r1, r9
 8019a98:	4640      	mov	r0, r8
 8019a9a:	47d0      	blx	sl
 8019a9c:	3001      	adds	r0, #1
 8019a9e:	d09b      	beq.n	80199d8 <_printf_i+0x164>
 8019aa0:	3501      	adds	r5, #1
 8019aa2:	68e3      	ldr	r3, [r4, #12]
 8019aa4:	9903      	ldr	r1, [sp, #12]
 8019aa6:	1a5b      	subs	r3, r3, r1
 8019aa8:	42ab      	cmp	r3, r5
 8019aaa:	dcf2      	bgt.n	8019a92 <_printf_i+0x21e>
 8019aac:	e7eb      	b.n	8019a86 <_printf_i+0x212>
 8019aae:	2500      	movs	r5, #0
 8019ab0:	f104 0619 	add.w	r6, r4, #25
 8019ab4:	e7f5      	b.n	8019aa2 <_printf_i+0x22e>
 8019ab6:	bf00      	nop
 8019ab8:	0801fd8e 	.word	0x0801fd8e
 8019abc:	0801fd9f 	.word	0x0801fd9f

08019ac0 <_scanf_float>:
 8019ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac4:	b087      	sub	sp, #28
 8019ac6:	4617      	mov	r7, r2
 8019ac8:	9303      	str	r3, [sp, #12]
 8019aca:	688b      	ldr	r3, [r1, #8]
 8019acc:	1e5a      	subs	r2, r3, #1
 8019ace:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019ad2:	bf83      	ittte	hi
 8019ad4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019ad8:	195b      	addhi	r3, r3, r5
 8019ada:	9302      	strhi	r3, [sp, #8]
 8019adc:	2300      	movls	r3, #0
 8019ade:	bf86      	itte	hi
 8019ae0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019ae4:	608b      	strhi	r3, [r1, #8]
 8019ae6:	9302      	strls	r3, [sp, #8]
 8019ae8:	680b      	ldr	r3, [r1, #0]
 8019aea:	468b      	mov	fp, r1
 8019aec:	2500      	movs	r5, #0
 8019aee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019af2:	f84b 3b1c 	str.w	r3, [fp], #28
 8019af6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019afa:	4680      	mov	r8, r0
 8019afc:	460c      	mov	r4, r1
 8019afe:	465e      	mov	r6, fp
 8019b00:	46aa      	mov	sl, r5
 8019b02:	46a9      	mov	r9, r5
 8019b04:	9501      	str	r5, [sp, #4]
 8019b06:	68a2      	ldr	r2, [r4, #8]
 8019b08:	b152      	cbz	r2, 8019b20 <_scanf_float+0x60>
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	781b      	ldrb	r3, [r3, #0]
 8019b0e:	2b4e      	cmp	r3, #78	; 0x4e
 8019b10:	d864      	bhi.n	8019bdc <_scanf_float+0x11c>
 8019b12:	2b40      	cmp	r3, #64	; 0x40
 8019b14:	d83c      	bhi.n	8019b90 <_scanf_float+0xd0>
 8019b16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019b1a:	b2c8      	uxtb	r0, r1
 8019b1c:	280e      	cmp	r0, #14
 8019b1e:	d93a      	bls.n	8019b96 <_scanf_float+0xd6>
 8019b20:	f1b9 0f00 	cmp.w	r9, #0
 8019b24:	d003      	beq.n	8019b2e <_scanf_float+0x6e>
 8019b26:	6823      	ldr	r3, [r4, #0]
 8019b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019b2c:	6023      	str	r3, [r4, #0]
 8019b2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019b32:	f1ba 0f01 	cmp.w	sl, #1
 8019b36:	f200 8113 	bhi.w	8019d60 <_scanf_float+0x2a0>
 8019b3a:	455e      	cmp	r6, fp
 8019b3c:	f200 8105 	bhi.w	8019d4a <_scanf_float+0x28a>
 8019b40:	2501      	movs	r5, #1
 8019b42:	4628      	mov	r0, r5
 8019b44:	b007      	add	sp, #28
 8019b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019b4e:	2a0d      	cmp	r2, #13
 8019b50:	d8e6      	bhi.n	8019b20 <_scanf_float+0x60>
 8019b52:	a101      	add	r1, pc, #4	; (adr r1, 8019b58 <_scanf_float+0x98>)
 8019b54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019b58:	08019c97 	.word	0x08019c97
 8019b5c:	08019b21 	.word	0x08019b21
 8019b60:	08019b21 	.word	0x08019b21
 8019b64:	08019b21 	.word	0x08019b21
 8019b68:	08019cf7 	.word	0x08019cf7
 8019b6c:	08019ccf 	.word	0x08019ccf
 8019b70:	08019b21 	.word	0x08019b21
 8019b74:	08019b21 	.word	0x08019b21
 8019b78:	08019ca5 	.word	0x08019ca5
 8019b7c:	08019b21 	.word	0x08019b21
 8019b80:	08019b21 	.word	0x08019b21
 8019b84:	08019b21 	.word	0x08019b21
 8019b88:	08019b21 	.word	0x08019b21
 8019b8c:	08019c5d 	.word	0x08019c5d
 8019b90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019b94:	e7db      	b.n	8019b4e <_scanf_float+0x8e>
 8019b96:	290e      	cmp	r1, #14
 8019b98:	d8c2      	bhi.n	8019b20 <_scanf_float+0x60>
 8019b9a:	a001      	add	r0, pc, #4	; (adr r0, 8019ba0 <_scanf_float+0xe0>)
 8019b9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019ba0:	08019c4f 	.word	0x08019c4f
 8019ba4:	08019b21 	.word	0x08019b21
 8019ba8:	08019c4f 	.word	0x08019c4f
 8019bac:	08019ce3 	.word	0x08019ce3
 8019bb0:	08019b21 	.word	0x08019b21
 8019bb4:	08019bfd 	.word	0x08019bfd
 8019bb8:	08019c39 	.word	0x08019c39
 8019bbc:	08019c39 	.word	0x08019c39
 8019bc0:	08019c39 	.word	0x08019c39
 8019bc4:	08019c39 	.word	0x08019c39
 8019bc8:	08019c39 	.word	0x08019c39
 8019bcc:	08019c39 	.word	0x08019c39
 8019bd0:	08019c39 	.word	0x08019c39
 8019bd4:	08019c39 	.word	0x08019c39
 8019bd8:	08019c39 	.word	0x08019c39
 8019bdc:	2b6e      	cmp	r3, #110	; 0x6e
 8019bde:	d809      	bhi.n	8019bf4 <_scanf_float+0x134>
 8019be0:	2b60      	cmp	r3, #96	; 0x60
 8019be2:	d8b2      	bhi.n	8019b4a <_scanf_float+0x8a>
 8019be4:	2b54      	cmp	r3, #84	; 0x54
 8019be6:	d077      	beq.n	8019cd8 <_scanf_float+0x218>
 8019be8:	2b59      	cmp	r3, #89	; 0x59
 8019bea:	d199      	bne.n	8019b20 <_scanf_float+0x60>
 8019bec:	2d07      	cmp	r5, #7
 8019bee:	d197      	bne.n	8019b20 <_scanf_float+0x60>
 8019bf0:	2508      	movs	r5, #8
 8019bf2:	e029      	b.n	8019c48 <_scanf_float+0x188>
 8019bf4:	2b74      	cmp	r3, #116	; 0x74
 8019bf6:	d06f      	beq.n	8019cd8 <_scanf_float+0x218>
 8019bf8:	2b79      	cmp	r3, #121	; 0x79
 8019bfa:	e7f6      	b.n	8019bea <_scanf_float+0x12a>
 8019bfc:	6821      	ldr	r1, [r4, #0]
 8019bfe:	05c8      	lsls	r0, r1, #23
 8019c00:	d51a      	bpl.n	8019c38 <_scanf_float+0x178>
 8019c02:	9b02      	ldr	r3, [sp, #8]
 8019c04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019c08:	6021      	str	r1, [r4, #0]
 8019c0a:	f109 0901 	add.w	r9, r9, #1
 8019c0e:	b11b      	cbz	r3, 8019c18 <_scanf_float+0x158>
 8019c10:	3b01      	subs	r3, #1
 8019c12:	3201      	adds	r2, #1
 8019c14:	9302      	str	r3, [sp, #8]
 8019c16:	60a2      	str	r2, [r4, #8]
 8019c18:	68a3      	ldr	r3, [r4, #8]
 8019c1a:	3b01      	subs	r3, #1
 8019c1c:	60a3      	str	r3, [r4, #8]
 8019c1e:	6923      	ldr	r3, [r4, #16]
 8019c20:	3301      	adds	r3, #1
 8019c22:	6123      	str	r3, [r4, #16]
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	3b01      	subs	r3, #1
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	607b      	str	r3, [r7, #4]
 8019c2c:	f340 8084 	ble.w	8019d38 <_scanf_float+0x278>
 8019c30:	683b      	ldr	r3, [r7, #0]
 8019c32:	3301      	adds	r3, #1
 8019c34:	603b      	str	r3, [r7, #0]
 8019c36:	e766      	b.n	8019b06 <_scanf_float+0x46>
 8019c38:	eb1a 0f05 	cmn.w	sl, r5
 8019c3c:	f47f af70 	bne.w	8019b20 <_scanf_float+0x60>
 8019c40:	6822      	ldr	r2, [r4, #0]
 8019c42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8019c46:	6022      	str	r2, [r4, #0]
 8019c48:	f806 3b01 	strb.w	r3, [r6], #1
 8019c4c:	e7e4      	b.n	8019c18 <_scanf_float+0x158>
 8019c4e:	6822      	ldr	r2, [r4, #0]
 8019c50:	0610      	lsls	r0, r2, #24
 8019c52:	f57f af65 	bpl.w	8019b20 <_scanf_float+0x60>
 8019c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019c5a:	e7f4      	b.n	8019c46 <_scanf_float+0x186>
 8019c5c:	f1ba 0f00 	cmp.w	sl, #0
 8019c60:	d10e      	bne.n	8019c80 <_scanf_float+0x1c0>
 8019c62:	f1b9 0f00 	cmp.w	r9, #0
 8019c66:	d10e      	bne.n	8019c86 <_scanf_float+0x1c6>
 8019c68:	6822      	ldr	r2, [r4, #0]
 8019c6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019c6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019c72:	d108      	bne.n	8019c86 <_scanf_float+0x1c6>
 8019c74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019c78:	6022      	str	r2, [r4, #0]
 8019c7a:	f04f 0a01 	mov.w	sl, #1
 8019c7e:	e7e3      	b.n	8019c48 <_scanf_float+0x188>
 8019c80:	f1ba 0f02 	cmp.w	sl, #2
 8019c84:	d055      	beq.n	8019d32 <_scanf_float+0x272>
 8019c86:	2d01      	cmp	r5, #1
 8019c88:	d002      	beq.n	8019c90 <_scanf_float+0x1d0>
 8019c8a:	2d04      	cmp	r5, #4
 8019c8c:	f47f af48 	bne.w	8019b20 <_scanf_float+0x60>
 8019c90:	3501      	adds	r5, #1
 8019c92:	b2ed      	uxtb	r5, r5
 8019c94:	e7d8      	b.n	8019c48 <_scanf_float+0x188>
 8019c96:	f1ba 0f01 	cmp.w	sl, #1
 8019c9a:	f47f af41 	bne.w	8019b20 <_scanf_float+0x60>
 8019c9e:	f04f 0a02 	mov.w	sl, #2
 8019ca2:	e7d1      	b.n	8019c48 <_scanf_float+0x188>
 8019ca4:	b97d      	cbnz	r5, 8019cc6 <_scanf_float+0x206>
 8019ca6:	f1b9 0f00 	cmp.w	r9, #0
 8019caa:	f47f af3c 	bne.w	8019b26 <_scanf_float+0x66>
 8019cae:	6822      	ldr	r2, [r4, #0]
 8019cb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019cb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019cb8:	f47f af39 	bne.w	8019b2e <_scanf_float+0x6e>
 8019cbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019cc0:	6022      	str	r2, [r4, #0]
 8019cc2:	2501      	movs	r5, #1
 8019cc4:	e7c0      	b.n	8019c48 <_scanf_float+0x188>
 8019cc6:	2d03      	cmp	r5, #3
 8019cc8:	d0e2      	beq.n	8019c90 <_scanf_float+0x1d0>
 8019cca:	2d05      	cmp	r5, #5
 8019ccc:	e7de      	b.n	8019c8c <_scanf_float+0x1cc>
 8019cce:	2d02      	cmp	r5, #2
 8019cd0:	f47f af26 	bne.w	8019b20 <_scanf_float+0x60>
 8019cd4:	2503      	movs	r5, #3
 8019cd6:	e7b7      	b.n	8019c48 <_scanf_float+0x188>
 8019cd8:	2d06      	cmp	r5, #6
 8019cda:	f47f af21 	bne.w	8019b20 <_scanf_float+0x60>
 8019cde:	2507      	movs	r5, #7
 8019ce0:	e7b2      	b.n	8019c48 <_scanf_float+0x188>
 8019ce2:	6822      	ldr	r2, [r4, #0]
 8019ce4:	0591      	lsls	r1, r2, #22
 8019ce6:	f57f af1b 	bpl.w	8019b20 <_scanf_float+0x60>
 8019cea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8019cee:	6022      	str	r2, [r4, #0]
 8019cf0:	f8cd 9004 	str.w	r9, [sp, #4]
 8019cf4:	e7a8      	b.n	8019c48 <_scanf_float+0x188>
 8019cf6:	6822      	ldr	r2, [r4, #0]
 8019cf8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8019cfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019d00:	d006      	beq.n	8019d10 <_scanf_float+0x250>
 8019d02:	0550      	lsls	r0, r2, #21
 8019d04:	f57f af0c 	bpl.w	8019b20 <_scanf_float+0x60>
 8019d08:	f1b9 0f00 	cmp.w	r9, #0
 8019d0c:	f43f af0f 	beq.w	8019b2e <_scanf_float+0x6e>
 8019d10:	0591      	lsls	r1, r2, #22
 8019d12:	bf58      	it	pl
 8019d14:	9901      	ldrpl	r1, [sp, #4]
 8019d16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019d1a:	bf58      	it	pl
 8019d1c:	eba9 0101 	subpl.w	r1, r9, r1
 8019d20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019d24:	bf58      	it	pl
 8019d26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019d2a:	6022      	str	r2, [r4, #0]
 8019d2c:	f04f 0900 	mov.w	r9, #0
 8019d30:	e78a      	b.n	8019c48 <_scanf_float+0x188>
 8019d32:	f04f 0a03 	mov.w	sl, #3
 8019d36:	e787      	b.n	8019c48 <_scanf_float+0x188>
 8019d38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019d3c:	4639      	mov	r1, r7
 8019d3e:	4640      	mov	r0, r8
 8019d40:	4798      	blx	r3
 8019d42:	2800      	cmp	r0, #0
 8019d44:	f43f aedf 	beq.w	8019b06 <_scanf_float+0x46>
 8019d48:	e6ea      	b.n	8019b20 <_scanf_float+0x60>
 8019d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019d52:	463a      	mov	r2, r7
 8019d54:	4640      	mov	r0, r8
 8019d56:	4798      	blx	r3
 8019d58:	6923      	ldr	r3, [r4, #16]
 8019d5a:	3b01      	subs	r3, #1
 8019d5c:	6123      	str	r3, [r4, #16]
 8019d5e:	e6ec      	b.n	8019b3a <_scanf_float+0x7a>
 8019d60:	1e6b      	subs	r3, r5, #1
 8019d62:	2b06      	cmp	r3, #6
 8019d64:	d825      	bhi.n	8019db2 <_scanf_float+0x2f2>
 8019d66:	2d02      	cmp	r5, #2
 8019d68:	d836      	bhi.n	8019dd8 <_scanf_float+0x318>
 8019d6a:	455e      	cmp	r6, fp
 8019d6c:	f67f aee8 	bls.w	8019b40 <_scanf_float+0x80>
 8019d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019d78:	463a      	mov	r2, r7
 8019d7a:	4640      	mov	r0, r8
 8019d7c:	4798      	blx	r3
 8019d7e:	6923      	ldr	r3, [r4, #16]
 8019d80:	3b01      	subs	r3, #1
 8019d82:	6123      	str	r3, [r4, #16]
 8019d84:	e7f1      	b.n	8019d6a <_scanf_float+0x2aa>
 8019d86:	9802      	ldr	r0, [sp, #8]
 8019d88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019d90:	9002      	str	r0, [sp, #8]
 8019d92:	463a      	mov	r2, r7
 8019d94:	4640      	mov	r0, r8
 8019d96:	4798      	blx	r3
 8019d98:	6923      	ldr	r3, [r4, #16]
 8019d9a:	3b01      	subs	r3, #1
 8019d9c:	6123      	str	r3, [r4, #16]
 8019d9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019da2:	fa5f fa8a 	uxtb.w	sl, sl
 8019da6:	f1ba 0f02 	cmp.w	sl, #2
 8019daa:	d1ec      	bne.n	8019d86 <_scanf_float+0x2c6>
 8019dac:	3d03      	subs	r5, #3
 8019dae:	b2ed      	uxtb	r5, r5
 8019db0:	1b76      	subs	r6, r6, r5
 8019db2:	6823      	ldr	r3, [r4, #0]
 8019db4:	05da      	lsls	r2, r3, #23
 8019db6:	d52f      	bpl.n	8019e18 <_scanf_float+0x358>
 8019db8:	055b      	lsls	r3, r3, #21
 8019dba:	d510      	bpl.n	8019dde <_scanf_float+0x31e>
 8019dbc:	455e      	cmp	r6, fp
 8019dbe:	f67f aebf 	bls.w	8019b40 <_scanf_float+0x80>
 8019dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019dc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019dca:	463a      	mov	r2, r7
 8019dcc:	4640      	mov	r0, r8
 8019dce:	4798      	blx	r3
 8019dd0:	6923      	ldr	r3, [r4, #16]
 8019dd2:	3b01      	subs	r3, #1
 8019dd4:	6123      	str	r3, [r4, #16]
 8019dd6:	e7f1      	b.n	8019dbc <_scanf_float+0x2fc>
 8019dd8:	46aa      	mov	sl, r5
 8019dda:	9602      	str	r6, [sp, #8]
 8019ddc:	e7df      	b.n	8019d9e <_scanf_float+0x2de>
 8019dde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019de2:	6923      	ldr	r3, [r4, #16]
 8019de4:	2965      	cmp	r1, #101	; 0x65
 8019de6:	f103 33ff 	add.w	r3, r3, #4294967295
 8019dea:	f106 35ff 	add.w	r5, r6, #4294967295
 8019dee:	6123      	str	r3, [r4, #16]
 8019df0:	d00c      	beq.n	8019e0c <_scanf_float+0x34c>
 8019df2:	2945      	cmp	r1, #69	; 0x45
 8019df4:	d00a      	beq.n	8019e0c <_scanf_float+0x34c>
 8019df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019dfa:	463a      	mov	r2, r7
 8019dfc:	4640      	mov	r0, r8
 8019dfe:	4798      	blx	r3
 8019e00:	6923      	ldr	r3, [r4, #16]
 8019e02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019e06:	3b01      	subs	r3, #1
 8019e08:	1eb5      	subs	r5, r6, #2
 8019e0a:	6123      	str	r3, [r4, #16]
 8019e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e10:	463a      	mov	r2, r7
 8019e12:	4640      	mov	r0, r8
 8019e14:	4798      	blx	r3
 8019e16:	462e      	mov	r6, r5
 8019e18:	6825      	ldr	r5, [r4, #0]
 8019e1a:	f015 0510 	ands.w	r5, r5, #16
 8019e1e:	d159      	bne.n	8019ed4 <_scanf_float+0x414>
 8019e20:	7035      	strb	r5, [r6, #0]
 8019e22:	6823      	ldr	r3, [r4, #0]
 8019e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019e2c:	d11b      	bne.n	8019e66 <_scanf_float+0x3a6>
 8019e2e:	9b01      	ldr	r3, [sp, #4]
 8019e30:	454b      	cmp	r3, r9
 8019e32:	eba3 0209 	sub.w	r2, r3, r9
 8019e36:	d123      	bne.n	8019e80 <_scanf_float+0x3c0>
 8019e38:	2200      	movs	r2, #0
 8019e3a:	4659      	mov	r1, fp
 8019e3c:	4640      	mov	r0, r8
 8019e3e:	f000 ff55 	bl	801acec <_strtod_r>
 8019e42:	6822      	ldr	r2, [r4, #0]
 8019e44:	9b03      	ldr	r3, [sp, #12]
 8019e46:	f012 0f02 	tst.w	r2, #2
 8019e4a:	ec57 6b10 	vmov	r6, r7, d0
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	d021      	beq.n	8019e96 <_scanf_float+0x3d6>
 8019e52:	9903      	ldr	r1, [sp, #12]
 8019e54:	1d1a      	adds	r2, r3, #4
 8019e56:	600a      	str	r2, [r1, #0]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	e9c3 6700 	strd	r6, r7, [r3]
 8019e5e:	68e3      	ldr	r3, [r4, #12]
 8019e60:	3301      	adds	r3, #1
 8019e62:	60e3      	str	r3, [r4, #12]
 8019e64:	e66d      	b.n	8019b42 <_scanf_float+0x82>
 8019e66:	9b04      	ldr	r3, [sp, #16]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d0e5      	beq.n	8019e38 <_scanf_float+0x378>
 8019e6c:	9905      	ldr	r1, [sp, #20]
 8019e6e:	230a      	movs	r3, #10
 8019e70:	462a      	mov	r2, r5
 8019e72:	3101      	adds	r1, #1
 8019e74:	4640      	mov	r0, r8
 8019e76:	f000 ffc1 	bl	801adfc <_strtol_r>
 8019e7a:	9b04      	ldr	r3, [sp, #16]
 8019e7c:	9e05      	ldr	r6, [sp, #20]
 8019e7e:	1ac2      	subs	r2, r0, r3
 8019e80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019e84:	429e      	cmp	r6, r3
 8019e86:	bf28      	it	cs
 8019e88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019e8c:	4912      	ldr	r1, [pc, #72]	; (8019ed8 <_scanf_float+0x418>)
 8019e8e:	4630      	mov	r0, r6
 8019e90:	f000 f8a6 	bl	8019fe0 <siprintf>
 8019e94:	e7d0      	b.n	8019e38 <_scanf_float+0x378>
 8019e96:	9903      	ldr	r1, [sp, #12]
 8019e98:	f012 0f04 	tst.w	r2, #4
 8019e9c:	f103 0204 	add.w	r2, r3, #4
 8019ea0:	600a      	str	r2, [r1, #0]
 8019ea2:	d1d9      	bne.n	8019e58 <_scanf_float+0x398>
 8019ea4:	f8d3 8000 	ldr.w	r8, [r3]
 8019ea8:	ee10 2a10 	vmov	r2, s0
 8019eac:	ee10 0a10 	vmov	r0, s0
 8019eb0:	463b      	mov	r3, r7
 8019eb2:	4639      	mov	r1, r7
 8019eb4:	f7e6 fe3a 	bl	8000b2c <__aeabi_dcmpun>
 8019eb8:	b128      	cbz	r0, 8019ec6 <_scanf_float+0x406>
 8019eba:	4808      	ldr	r0, [pc, #32]	; (8019edc <_scanf_float+0x41c>)
 8019ebc:	f000 f88a 	bl	8019fd4 <nanf>
 8019ec0:	ed88 0a00 	vstr	s0, [r8]
 8019ec4:	e7cb      	b.n	8019e5e <_scanf_float+0x39e>
 8019ec6:	4630      	mov	r0, r6
 8019ec8:	4639      	mov	r1, r7
 8019eca:	f7e6 fe8d 	bl	8000be8 <__aeabi_d2f>
 8019ece:	f8c8 0000 	str.w	r0, [r8]
 8019ed2:	e7c4      	b.n	8019e5e <_scanf_float+0x39e>
 8019ed4:	2500      	movs	r5, #0
 8019ed6:	e634      	b.n	8019b42 <_scanf_float+0x82>
 8019ed8:	0801fdb0 	.word	0x0801fdb0
 8019edc:	080201b8 	.word	0x080201b8

08019ee0 <cleanup_glue>:
 8019ee0:	b538      	push	{r3, r4, r5, lr}
 8019ee2:	460c      	mov	r4, r1
 8019ee4:	6809      	ldr	r1, [r1, #0]
 8019ee6:	4605      	mov	r5, r0
 8019ee8:	b109      	cbz	r1, 8019eee <cleanup_glue+0xe>
 8019eea:	f7ff fff9 	bl	8019ee0 <cleanup_glue>
 8019eee:	4621      	mov	r1, r4
 8019ef0:	4628      	mov	r0, r5
 8019ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ef6:	f002 bf6d 	b.w	801cdd4 <_free_r>
	...

08019efc <_reclaim_reent>:
 8019efc:	4b2c      	ldr	r3, [pc, #176]	; (8019fb0 <_reclaim_reent+0xb4>)
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	4283      	cmp	r3, r0
 8019f02:	b570      	push	{r4, r5, r6, lr}
 8019f04:	4604      	mov	r4, r0
 8019f06:	d051      	beq.n	8019fac <_reclaim_reent+0xb0>
 8019f08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019f0a:	b143      	cbz	r3, 8019f1e <_reclaim_reent+0x22>
 8019f0c:	68db      	ldr	r3, [r3, #12]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d14a      	bne.n	8019fa8 <_reclaim_reent+0xac>
 8019f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f14:	6819      	ldr	r1, [r3, #0]
 8019f16:	b111      	cbz	r1, 8019f1e <_reclaim_reent+0x22>
 8019f18:	4620      	mov	r0, r4
 8019f1a:	f002 ff5b 	bl	801cdd4 <_free_r>
 8019f1e:	6961      	ldr	r1, [r4, #20]
 8019f20:	b111      	cbz	r1, 8019f28 <_reclaim_reent+0x2c>
 8019f22:	4620      	mov	r0, r4
 8019f24:	f002 ff56 	bl	801cdd4 <_free_r>
 8019f28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019f2a:	b111      	cbz	r1, 8019f32 <_reclaim_reent+0x36>
 8019f2c:	4620      	mov	r0, r4
 8019f2e:	f002 ff51 	bl	801cdd4 <_free_r>
 8019f32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019f34:	b111      	cbz	r1, 8019f3c <_reclaim_reent+0x40>
 8019f36:	4620      	mov	r0, r4
 8019f38:	f002 ff4c 	bl	801cdd4 <_free_r>
 8019f3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019f3e:	b111      	cbz	r1, 8019f46 <_reclaim_reent+0x4a>
 8019f40:	4620      	mov	r0, r4
 8019f42:	f002 ff47 	bl	801cdd4 <_free_r>
 8019f46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019f48:	b111      	cbz	r1, 8019f50 <_reclaim_reent+0x54>
 8019f4a:	4620      	mov	r0, r4
 8019f4c:	f002 ff42 	bl	801cdd4 <_free_r>
 8019f50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019f52:	b111      	cbz	r1, 8019f5a <_reclaim_reent+0x5e>
 8019f54:	4620      	mov	r0, r4
 8019f56:	f002 ff3d 	bl	801cdd4 <_free_r>
 8019f5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019f5c:	b111      	cbz	r1, 8019f64 <_reclaim_reent+0x68>
 8019f5e:	4620      	mov	r0, r4
 8019f60:	f002 ff38 	bl	801cdd4 <_free_r>
 8019f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f66:	b111      	cbz	r1, 8019f6e <_reclaim_reent+0x72>
 8019f68:	4620      	mov	r0, r4
 8019f6a:	f002 ff33 	bl	801cdd4 <_free_r>
 8019f6e:	69a3      	ldr	r3, [r4, #24]
 8019f70:	b1e3      	cbz	r3, 8019fac <_reclaim_reent+0xb0>
 8019f72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019f74:	4620      	mov	r0, r4
 8019f76:	4798      	blx	r3
 8019f78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019f7a:	b1b9      	cbz	r1, 8019fac <_reclaim_reent+0xb0>
 8019f7c:	4620      	mov	r0, r4
 8019f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f82:	f7ff bfad 	b.w	8019ee0 <cleanup_glue>
 8019f86:	5949      	ldr	r1, [r1, r5]
 8019f88:	b941      	cbnz	r1, 8019f9c <_reclaim_reent+0xa0>
 8019f8a:	3504      	adds	r5, #4
 8019f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f8e:	2d80      	cmp	r5, #128	; 0x80
 8019f90:	68d9      	ldr	r1, [r3, #12]
 8019f92:	d1f8      	bne.n	8019f86 <_reclaim_reent+0x8a>
 8019f94:	4620      	mov	r0, r4
 8019f96:	f002 ff1d 	bl	801cdd4 <_free_r>
 8019f9a:	e7ba      	b.n	8019f12 <_reclaim_reent+0x16>
 8019f9c:	680e      	ldr	r6, [r1, #0]
 8019f9e:	4620      	mov	r0, r4
 8019fa0:	f002 ff18 	bl	801cdd4 <_free_r>
 8019fa4:	4631      	mov	r1, r6
 8019fa6:	e7ef      	b.n	8019f88 <_reclaim_reent+0x8c>
 8019fa8:	2500      	movs	r5, #0
 8019faa:	e7ef      	b.n	8019f8c <_reclaim_reent+0x90>
 8019fac:	bd70      	pop	{r4, r5, r6, pc}
 8019fae:	bf00      	nop
 8019fb0:	2000010c 	.word	0x2000010c

08019fb4 <_sbrk_r>:
 8019fb4:	b538      	push	{r3, r4, r5, lr}
 8019fb6:	4d06      	ldr	r5, [pc, #24]	; (8019fd0 <_sbrk_r+0x1c>)
 8019fb8:	2300      	movs	r3, #0
 8019fba:	4604      	mov	r4, r0
 8019fbc:	4608      	mov	r0, r1
 8019fbe:	602b      	str	r3, [r5, #0]
 8019fc0:	f005 faec 	bl	801f59c <_sbrk>
 8019fc4:	1c43      	adds	r3, r0, #1
 8019fc6:	d102      	bne.n	8019fce <_sbrk_r+0x1a>
 8019fc8:	682b      	ldr	r3, [r5, #0]
 8019fca:	b103      	cbz	r3, 8019fce <_sbrk_r+0x1a>
 8019fcc:	6023      	str	r3, [r4, #0]
 8019fce:	bd38      	pop	{r3, r4, r5, pc}
 8019fd0:	2000e554 	.word	0x2000e554

08019fd4 <nanf>:
 8019fd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019fdc <nanf+0x8>
 8019fd8:	4770      	bx	lr
 8019fda:	bf00      	nop
 8019fdc:	7fc00000 	.word	0x7fc00000

08019fe0 <siprintf>:
 8019fe0:	b40e      	push	{r1, r2, r3}
 8019fe2:	b500      	push	{lr}
 8019fe4:	b09c      	sub	sp, #112	; 0x70
 8019fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8019fe8:	9002      	str	r0, [sp, #8]
 8019fea:	9006      	str	r0, [sp, #24]
 8019fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019ff0:	4809      	ldr	r0, [pc, #36]	; (801a018 <siprintf+0x38>)
 8019ff2:	9107      	str	r1, [sp, #28]
 8019ff4:	9104      	str	r1, [sp, #16]
 8019ff6:	4909      	ldr	r1, [pc, #36]	; (801a01c <siprintf+0x3c>)
 8019ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ffc:	9105      	str	r1, [sp, #20]
 8019ffe:	6800      	ldr	r0, [r0, #0]
 801a000:	9301      	str	r3, [sp, #4]
 801a002:	a902      	add	r1, sp, #8
 801a004:	f002 ff8e 	bl	801cf24 <_svfiprintf_r>
 801a008:	9b02      	ldr	r3, [sp, #8]
 801a00a:	2200      	movs	r2, #0
 801a00c:	701a      	strb	r2, [r3, #0]
 801a00e:	b01c      	add	sp, #112	; 0x70
 801a010:	f85d eb04 	ldr.w	lr, [sp], #4
 801a014:	b003      	add	sp, #12
 801a016:	4770      	bx	lr
 801a018:	2000010c 	.word	0x2000010c
 801a01c:	ffff0208 	.word	0xffff0208

0801a020 <__sread>:
 801a020:	b510      	push	{r4, lr}
 801a022:	460c      	mov	r4, r1
 801a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a028:	f003 f87c 	bl	801d124 <_read_r>
 801a02c:	2800      	cmp	r0, #0
 801a02e:	bfab      	itete	ge
 801a030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a032:	89a3      	ldrhlt	r3, [r4, #12]
 801a034:	181b      	addge	r3, r3, r0
 801a036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a03a:	bfac      	ite	ge
 801a03c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a03e:	81a3      	strhlt	r3, [r4, #12]
 801a040:	bd10      	pop	{r4, pc}

0801a042 <__swrite>:
 801a042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a046:	461f      	mov	r7, r3
 801a048:	898b      	ldrh	r3, [r1, #12]
 801a04a:	05db      	lsls	r3, r3, #23
 801a04c:	4605      	mov	r5, r0
 801a04e:	460c      	mov	r4, r1
 801a050:	4616      	mov	r6, r2
 801a052:	d505      	bpl.n	801a060 <__swrite+0x1e>
 801a054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a058:	2302      	movs	r3, #2
 801a05a:	2200      	movs	r2, #0
 801a05c:	f002 f9aa 	bl	801c3b4 <_lseek_r>
 801a060:	89a3      	ldrh	r3, [r4, #12]
 801a062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a06a:	81a3      	strh	r3, [r4, #12]
 801a06c:	4632      	mov	r2, r6
 801a06e:	463b      	mov	r3, r7
 801a070:	4628      	mov	r0, r5
 801a072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a076:	f000 bec3 	b.w	801ae00 <_write_r>

0801a07a <__sseek>:
 801a07a:	b510      	push	{r4, lr}
 801a07c:	460c      	mov	r4, r1
 801a07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a082:	f002 f997 	bl	801c3b4 <_lseek_r>
 801a086:	1c43      	adds	r3, r0, #1
 801a088:	89a3      	ldrh	r3, [r4, #12]
 801a08a:	bf15      	itete	ne
 801a08c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a08e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a096:	81a3      	strheq	r3, [r4, #12]
 801a098:	bf18      	it	ne
 801a09a:	81a3      	strhne	r3, [r4, #12]
 801a09c:	bd10      	pop	{r4, pc}

0801a09e <__sclose>:
 801a09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0a2:	f000 bebf 	b.w	801ae24 <_close_r>

0801a0a6 <sulp>:
 801a0a6:	b570      	push	{r4, r5, r6, lr}
 801a0a8:	4604      	mov	r4, r0
 801a0aa:	460d      	mov	r5, r1
 801a0ac:	ec45 4b10 	vmov	d0, r4, r5
 801a0b0:	4616      	mov	r6, r2
 801a0b2:	f002 fd29 	bl	801cb08 <__ulp>
 801a0b6:	ec51 0b10 	vmov	r0, r1, d0
 801a0ba:	b17e      	cbz	r6, 801a0dc <sulp+0x36>
 801a0bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a0c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	dd09      	ble.n	801a0dc <sulp+0x36>
 801a0c8:	051b      	lsls	r3, r3, #20
 801a0ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a0ce:	2400      	movs	r4, #0
 801a0d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a0d4:	4622      	mov	r2, r4
 801a0d6:	462b      	mov	r3, r5
 801a0d8:	f7e6 fa8e 	bl	80005f8 <__aeabi_dmul>
 801a0dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a0e0 <_strtod_l>:
 801a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e4:	ed2d 8b02 	vpush	{d8}
 801a0e8:	b09d      	sub	sp, #116	; 0x74
 801a0ea:	461f      	mov	r7, r3
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	9318      	str	r3, [sp, #96]	; 0x60
 801a0f0:	4ba2      	ldr	r3, [pc, #648]	; (801a37c <_strtod_l+0x29c>)
 801a0f2:	9213      	str	r2, [sp, #76]	; 0x4c
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	9305      	str	r3, [sp, #20]
 801a0f8:	4604      	mov	r4, r0
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	4688      	mov	r8, r1
 801a0fe:	f7e6 f867 	bl	80001d0 <strlen>
 801a102:	f04f 0a00 	mov.w	sl, #0
 801a106:	4605      	mov	r5, r0
 801a108:	f04f 0b00 	mov.w	fp, #0
 801a10c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a112:	781a      	ldrb	r2, [r3, #0]
 801a114:	2a2b      	cmp	r2, #43	; 0x2b
 801a116:	d04e      	beq.n	801a1b6 <_strtod_l+0xd6>
 801a118:	d83b      	bhi.n	801a192 <_strtod_l+0xb2>
 801a11a:	2a0d      	cmp	r2, #13
 801a11c:	d834      	bhi.n	801a188 <_strtod_l+0xa8>
 801a11e:	2a08      	cmp	r2, #8
 801a120:	d834      	bhi.n	801a18c <_strtod_l+0xac>
 801a122:	2a00      	cmp	r2, #0
 801a124:	d03e      	beq.n	801a1a4 <_strtod_l+0xc4>
 801a126:	2300      	movs	r3, #0
 801a128:	930a      	str	r3, [sp, #40]	; 0x28
 801a12a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a12c:	7833      	ldrb	r3, [r6, #0]
 801a12e:	2b30      	cmp	r3, #48	; 0x30
 801a130:	f040 80b0 	bne.w	801a294 <_strtod_l+0x1b4>
 801a134:	7873      	ldrb	r3, [r6, #1]
 801a136:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a13a:	2b58      	cmp	r3, #88	; 0x58
 801a13c:	d168      	bne.n	801a210 <_strtod_l+0x130>
 801a13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a140:	9301      	str	r3, [sp, #4]
 801a142:	ab18      	add	r3, sp, #96	; 0x60
 801a144:	9702      	str	r7, [sp, #8]
 801a146:	9300      	str	r3, [sp, #0]
 801a148:	4a8d      	ldr	r2, [pc, #564]	; (801a380 <_strtod_l+0x2a0>)
 801a14a:	ab19      	add	r3, sp, #100	; 0x64
 801a14c:	a917      	add	r1, sp, #92	; 0x5c
 801a14e:	4620      	mov	r0, r4
 801a150:	f001 fe24 	bl	801bd9c <__gethex>
 801a154:	f010 0707 	ands.w	r7, r0, #7
 801a158:	4605      	mov	r5, r0
 801a15a:	d005      	beq.n	801a168 <_strtod_l+0x88>
 801a15c:	2f06      	cmp	r7, #6
 801a15e:	d12c      	bne.n	801a1ba <_strtod_l+0xda>
 801a160:	3601      	adds	r6, #1
 801a162:	2300      	movs	r3, #0
 801a164:	9617      	str	r6, [sp, #92]	; 0x5c
 801a166:	930a      	str	r3, [sp, #40]	; 0x28
 801a168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	f040 8590 	bne.w	801ac90 <_strtod_l+0xbb0>
 801a170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a172:	b1eb      	cbz	r3, 801a1b0 <_strtod_l+0xd0>
 801a174:	4652      	mov	r2, sl
 801a176:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a17a:	ec43 2b10 	vmov	d0, r2, r3
 801a17e:	b01d      	add	sp, #116	; 0x74
 801a180:	ecbd 8b02 	vpop	{d8}
 801a184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a188:	2a20      	cmp	r2, #32
 801a18a:	d1cc      	bne.n	801a126 <_strtod_l+0x46>
 801a18c:	3301      	adds	r3, #1
 801a18e:	9317      	str	r3, [sp, #92]	; 0x5c
 801a190:	e7be      	b.n	801a110 <_strtod_l+0x30>
 801a192:	2a2d      	cmp	r2, #45	; 0x2d
 801a194:	d1c7      	bne.n	801a126 <_strtod_l+0x46>
 801a196:	2201      	movs	r2, #1
 801a198:	920a      	str	r2, [sp, #40]	; 0x28
 801a19a:	1c5a      	adds	r2, r3, #1
 801a19c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a19e:	785b      	ldrb	r3, [r3, #1]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d1c2      	bne.n	801a12a <_strtod_l+0x4a>
 801a1a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a1a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	f040 856e 	bne.w	801ac8c <_strtod_l+0xbac>
 801a1b0:	4652      	mov	r2, sl
 801a1b2:	465b      	mov	r3, fp
 801a1b4:	e7e1      	b.n	801a17a <_strtod_l+0x9a>
 801a1b6:	2200      	movs	r2, #0
 801a1b8:	e7ee      	b.n	801a198 <_strtod_l+0xb8>
 801a1ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a1bc:	b13a      	cbz	r2, 801a1ce <_strtod_l+0xee>
 801a1be:	2135      	movs	r1, #53	; 0x35
 801a1c0:	a81a      	add	r0, sp, #104	; 0x68
 801a1c2:	f002 fdac 	bl	801cd1e <__copybits>
 801a1c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a1c8:	4620      	mov	r0, r4
 801a1ca:	f002 f96b 	bl	801c4a4 <_Bfree>
 801a1ce:	3f01      	subs	r7, #1
 801a1d0:	2f04      	cmp	r7, #4
 801a1d2:	d806      	bhi.n	801a1e2 <_strtod_l+0x102>
 801a1d4:	e8df f007 	tbb	[pc, r7]
 801a1d8:	1714030a 	.word	0x1714030a
 801a1dc:	0a          	.byte	0x0a
 801a1dd:	00          	.byte	0x00
 801a1de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a1e2:	0728      	lsls	r0, r5, #28
 801a1e4:	d5c0      	bpl.n	801a168 <_strtod_l+0x88>
 801a1e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a1ea:	e7bd      	b.n	801a168 <_strtod_l+0x88>
 801a1ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a1f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a1f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a1f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a1fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a1fe:	e7f0      	b.n	801a1e2 <_strtod_l+0x102>
 801a200:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a384 <_strtod_l+0x2a4>
 801a204:	e7ed      	b.n	801a1e2 <_strtod_l+0x102>
 801a206:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a20a:	f04f 3aff 	mov.w	sl, #4294967295
 801a20e:	e7e8      	b.n	801a1e2 <_strtod_l+0x102>
 801a210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a212:	1c5a      	adds	r2, r3, #1
 801a214:	9217      	str	r2, [sp, #92]	; 0x5c
 801a216:	785b      	ldrb	r3, [r3, #1]
 801a218:	2b30      	cmp	r3, #48	; 0x30
 801a21a:	d0f9      	beq.n	801a210 <_strtod_l+0x130>
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d0a3      	beq.n	801a168 <_strtod_l+0x88>
 801a220:	2301      	movs	r3, #1
 801a222:	f04f 0900 	mov.w	r9, #0
 801a226:	9304      	str	r3, [sp, #16]
 801a228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a22a:	9308      	str	r3, [sp, #32]
 801a22c:	f8cd 901c 	str.w	r9, [sp, #28]
 801a230:	464f      	mov	r7, r9
 801a232:	220a      	movs	r2, #10
 801a234:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a236:	7806      	ldrb	r6, [r0, #0]
 801a238:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a23c:	b2d9      	uxtb	r1, r3
 801a23e:	2909      	cmp	r1, #9
 801a240:	d92a      	bls.n	801a298 <_strtod_l+0x1b8>
 801a242:	9905      	ldr	r1, [sp, #20]
 801a244:	462a      	mov	r2, r5
 801a246:	f002 ff87 	bl	801d158 <strncmp>
 801a24a:	b398      	cbz	r0, 801a2b4 <_strtod_l+0x1d4>
 801a24c:	2000      	movs	r0, #0
 801a24e:	4632      	mov	r2, r6
 801a250:	463d      	mov	r5, r7
 801a252:	9005      	str	r0, [sp, #20]
 801a254:	4603      	mov	r3, r0
 801a256:	2a65      	cmp	r2, #101	; 0x65
 801a258:	d001      	beq.n	801a25e <_strtod_l+0x17e>
 801a25a:	2a45      	cmp	r2, #69	; 0x45
 801a25c:	d118      	bne.n	801a290 <_strtod_l+0x1b0>
 801a25e:	b91d      	cbnz	r5, 801a268 <_strtod_l+0x188>
 801a260:	9a04      	ldr	r2, [sp, #16]
 801a262:	4302      	orrs	r2, r0
 801a264:	d09e      	beq.n	801a1a4 <_strtod_l+0xc4>
 801a266:	2500      	movs	r5, #0
 801a268:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a26c:	f108 0201 	add.w	r2, r8, #1
 801a270:	9217      	str	r2, [sp, #92]	; 0x5c
 801a272:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a276:	2a2b      	cmp	r2, #43	; 0x2b
 801a278:	d075      	beq.n	801a366 <_strtod_l+0x286>
 801a27a:	2a2d      	cmp	r2, #45	; 0x2d
 801a27c:	d07b      	beq.n	801a376 <_strtod_l+0x296>
 801a27e:	f04f 0c00 	mov.w	ip, #0
 801a282:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a286:	2909      	cmp	r1, #9
 801a288:	f240 8082 	bls.w	801a390 <_strtod_l+0x2b0>
 801a28c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a290:	2600      	movs	r6, #0
 801a292:	e09d      	b.n	801a3d0 <_strtod_l+0x2f0>
 801a294:	2300      	movs	r3, #0
 801a296:	e7c4      	b.n	801a222 <_strtod_l+0x142>
 801a298:	2f08      	cmp	r7, #8
 801a29a:	bfd8      	it	le
 801a29c:	9907      	ldrle	r1, [sp, #28]
 801a29e:	f100 0001 	add.w	r0, r0, #1
 801a2a2:	bfda      	itte	le
 801a2a4:	fb02 3301 	mlale	r3, r2, r1, r3
 801a2a8:	9307      	strle	r3, [sp, #28]
 801a2aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a2ae:	3701      	adds	r7, #1
 801a2b0:	9017      	str	r0, [sp, #92]	; 0x5c
 801a2b2:	e7bf      	b.n	801a234 <_strtod_l+0x154>
 801a2b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a2b6:	195a      	adds	r2, r3, r5
 801a2b8:	9217      	str	r2, [sp, #92]	; 0x5c
 801a2ba:	5d5a      	ldrb	r2, [r3, r5]
 801a2bc:	2f00      	cmp	r7, #0
 801a2be:	d037      	beq.n	801a330 <_strtod_l+0x250>
 801a2c0:	9005      	str	r0, [sp, #20]
 801a2c2:	463d      	mov	r5, r7
 801a2c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a2c8:	2b09      	cmp	r3, #9
 801a2ca:	d912      	bls.n	801a2f2 <_strtod_l+0x212>
 801a2cc:	2301      	movs	r3, #1
 801a2ce:	e7c2      	b.n	801a256 <_strtod_l+0x176>
 801a2d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a2d2:	1c5a      	adds	r2, r3, #1
 801a2d4:	9217      	str	r2, [sp, #92]	; 0x5c
 801a2d6:	785a      	ldrb	r2, [r3, #1]
 801a2d8:	3001      	adds	r0, #1
 801a2da:	2a30      	cmp	r2, #48	; 0x30
 801a2dc:	d0f8      	beq.n	801a2d0 <_strtod_l+0x1f0>
 801a2de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a2e2:	2b08      	cmp	r3, #8
 801a2e4:	f200 84d9 	bhi.w	801ac9a <_strtod_l+0xbba>
 801a2e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a2ea:	9005      	str	r0, [sp, #20]
 801a2ec:	2000      	movs	r0, #0
 801a2ee:	9308      	str	r3, [sp, #32]
 801a2f0:	4605      	mov	r5, r0
 801a2f2:	3a30      	subs	r2, #48	; 0x30
 801a2f4:	f100 0301 	add.w	r3, r0, #1
 801a2f8:	d014      	beq.n	801a324 <_strtod_l+0x244>
 801a2fa:	9905      	ldr	r1, [sp, #20]
 801a2fc:	4419      	add	r1, r3
 801a2fe:	9105      	str	r1, [sp, #20]
 801a300:	462b      	mov	r3, r5
 801a302:	eb00 0e05 	add.w	lr, r0, r5
 801a306:	210a      	movs	r1, #10
 801a308:	4573      	cmp	r3, lr
 801a30a:	d113      	bne.n	801a334 <_strtod_l+0x254>
 801a30c:	182b      	adds	r3, r5, r0
 801a30e:	2b08      	cmp	r3, #8
 801a310:	f105 0501 	add.w	r5, r5, #1
 801a314:	4405      	add	r5, r0
 801a316:	dc1c      	bgt.n	801a352 <_strtod_l+0x272>
 801a318:	9907      	ldr	r1, [sp, #28]
 801a31a:	230a      	movs	r3, #10
 801a31c:	fb03 2301 	mla	r3, r3, r1, r2
 801a320:	9307      	str	r3, [sp, #28]
 801a322:	2300      	movs	r3, #0
 801a324:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a326:	1c51      	adds	r1, r2, #1
 801a328:	9117      	str	r1, [sp, #92]	; 0x5c
 801a32a:	7852      	ldrb	r2, [r2, #1]
 801a32c:	4618      	mov	r0, r3
 801a32e:	e7c9      	b.n	801a2c4 <_strtod_l+0x1e4>
 801a330:	4638      	mov	r0, r7
 801a332:	e7d2      	b.n	801a2da <_strtod_l+0x1fa>
 801a334:	2b08      	cmp	r3, #8
 801a336:	dc04      	bgt.n	801a342 <_strtod_l+0x262>
 801a338:	9e07      	ldr	r6, [sp, #28]
 801a33a:	434e      	muls	r6, r1
 801a33c:	9607      	str	r6, [sp, #28]
 801a33e:	3301      	adds	r3, #1
 801a340:	e7e2      	b.n	801a308 <_strtod_l+0x228>
 801a342:	f103 0c01 	add.w	ip, r3, #1
 801a346:	f1bc 0f10 	cmp.w	ip, #16
 801a34a:	bfd8      	it	le
 801a34c:	fb01 f909 	mulle.w	r9, r1, r9
 801a350:	e7f5      	b.n	801a33e <_strtod_l+0x25e>
 801a352:	2d10      	cmp	r5, #16
 801a354:	bfdc      	itt	le
 801a356:	230a      	movle	r3, #10
 801a358:	fb03 2909 	mlale	r9, r3, r9, r2
 801a35c:	e7e1      	b.n	801a322 <_strtod_l+0x242>
 801a35e:	2300      	movs	r3, #0
 801a360:	9305      	str	r3, [sp, #20]
 801a362:	2301      	movs	r3, #1
 801a364:	e77c      	b.n	801a260 <_strtod_l+0x180>
 801a366:	f04f 0c00 	mov.w	ip, #0
 801a36a:	f108 0202 	add.w	r2, r8, #2
 801a36e:	9217      	str	r2, [sp, #92]	; 0x5c
 801a370:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a374:	e785      	b.n	801a282 <_strtod_l+0x1a2>
 801a376:	f04f 0c01 	mov.w	ip, #1
 801a37a:	e7f6      	b.n	801a36a <_strtod_l+0x28a>
 801a37c:	08020000 	.word	0x08020000
 801a380:	0801fdb8 	.word	0x0801fdb8
 801a384:	7ff00000 	.word	0x7ff00000
 801a388:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a38a:	1c51      	adds	r1, r2, #1
 801a38c:	9117      	str	r1, [sp, #92]	; 0x5c
 801a38e:	7852      	ldrb	r2, [r2, #1]
 801a390:	2a30      	cmp	r2, #48	; 0x30
 801a392:	d0f9      	beq.n	801a388 <_strtod_l+0x2a8>
 801a394:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a398:	2908      	cmp	r1, #8
 801a39a:	f63f af79 	bhi.w	801a290 <_strtod_l+0x1b0>
 801a39e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a3a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a3a4:	9206      	str	r2, [sp, #24]
 801a3a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a3a8:	1c51      	adds	r1, r2, #1
 801a3aa:	9117      	str	r1, [sp, #92]	; 0x5c
 801a3ac:	7852      	ldrb	r2, [r2, #1]
 801a3ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a3b2:	2e09      	cmp	r6, #9
 801a3b4:	d937      	bls.n	801a426 <_strtod_l+0x346>
 801a3b6:	9e06      	ldr	r6, [sp, #24]
 801a3b8:	1b89      	subs	r1, r1, r6
 801a3ba:	2908      	cmp	r1, #8
 801a3bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a3c0:	dc02      	bgt.n	801a3c8 <_strtod_l+0x2e8>
 801a3c2:	4576      	cmp	r6, lr
 801a3c4:	bfa8      	it	ge
 801a3c6:	4676      	movge	r6, lr
 801a3c8:	f1bc 0f00 	cmp.w	ip, #0
 801a3cc:	d000      	beq.n	801a3d0 <_strtod_l+0x2f0>
 801a3ce:	4276      	negs	r6, r6
 801a3d0:	2d00      	cmp	r5, #0
 801a3d2:	d14d      	bne.n	801a470 <_strtod_l+0x390>
 801a3d4:	9904      	ldr	r1, [sp, #16]
 801a3d6:	4301      	orrs	r1, r0
 801a3d8:	f47f aec6 	bne.w	801a168 <_strtod_l+0x88>
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	f47f aee1 	bne.w	801a1a4 <_strtod_l+0xc4>
 801a3e2:	2a69      	cmp	r2, #105	; 0x69
 801a3e4:	d027      	beq.n	801a436 <_strtod_l+0x356>
 801a3e6:	dc24      	bgt.n	801a432 <_strtod_l+0x352>
 801a3e8:	2a49      	cmp	r2, #73	; 0x49
 801a3ea:	d024      	beq.n	801a436 <_strtod_l+0x356>
 801a3ec:	2a4e      	cmp	r2, #78	; 0x4e
 801a3ee:	f47f aed9 	bne.w	801a1a4 <_strtod_l+0xc4>
 801a3f2:	499f      	ldr	r1, [pc, #636]	; (801a670 <_strtod_l+0x590>)
 801a3f4:	a817      	add	r0, sp, #92	; 0x5c
 801a3f6:	f001 ff29 	bl	801c24c <__match>
 801a3fa:	2800      	cmp	r0, #0
 801a3fc:	f43f aed2 	beq.w	801a1a4 <_strtod_l+0xc4>
 801a400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a402:	781b      	ldrb	r3, [r3, #0]
 801a404:	2b28      	cmp	r3, #40	; 0x28
 801a406:	d12d      	bne.n	801a464 <_strtod_l+0x384>
 801a408:	499a      	ldr	r1, [pc, #616]	; (801a674 <_strtod_l+0x594>)
 801a40a:	aa1a      	add	r2, sp, #104	; 0x68
 801a40c:	a817      	add	r0, sp, #92	; 0x5c
 801a40e:	f001 ff31 	bl	801c274 <__hexnan>
 801a412:	2805      	cmp	r0, #5
 801a414:	d126      	bne.n	801a464 <_strtod_l+0x384>
 801a416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a418:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a41c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a420:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a424:	e6a0      	b.n	801a168 <_strtod_l+0x88>
 801a426:	210a      	movs	r1, #10
 801a428:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a42c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a430:	e7b9      	b.n	801a3a6 <_strtod_l+0x2c6>
 801a432:	2a6e      	cmp	r2, #110	; 0x6e
 801a434:	e7db      	b.n	801a3ee <_strtod_l+0x30e>
 801a436:	4990      	ldr	r1, [pc, #576]	; (801a678 <_strtod_l+0x598>)
 801a438:	a817      	add	r0, sp, #92	; 0x5c
 801a43a:	f001 ff07 	bl	801c24c <__match>
 801a43e:	2800      	cmp	r0, #0
 801a440:	f43f aeb0 	beq.w	801a1a4 <_strtod_l+0xc4>
 801a444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a446:	498d      	ldr	r1, [pc, #564]	; (801a67c <_strtod_l+0x59c>)
 801a448:	3b01      	subs	r3, #1
 801a44a:	a817      	add	r0, sp, #92	; 0x5c
 801a44c:	9317      	str	r3, [sp, #92]	; 0x5c
 801a44e:	f001 fefd 	bl	801c24c <__match>
 801a452:	b910      	cbnz	r0, 801a45a <_strtod_l+0x37a>
 801a454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a456:	3301      	adds	r3, #1
 801a458:	9317      	str	r3, [sp, #92]	; 0x5c
 801a45a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801a68c <_strtod_l+0x5ac>
 801a45e:	f04f 0a00 	mov.w	sl, #0
 801a462:	e681      	b.n	801a168 <_strtod_l+0x88>
 801a464:	4886      	ldr	r0, [pc, #536]	; (801a680 <_strtod_l+0x5a0>)
 801a466:	f002 fe6f 	bl	801d148 <nan>
 801a46a:	ec5b ab10 	vmov	sl, fp, d0
 801a46e:	e67b      	b.n	801a168 <_strtod_l+0x88>
 801a470:	9b05      	ldr	r3, [sp, #20]
 801a472:	9807      	ldr	r0, [sp, #28]
 801a474:	1af3      	subs	r3, r6, r3
 801a476:	2f00      	cmp	r7, #0
 801a478:	bf08      	it	eq
 801a47a:	462f      	moveq	r7, r5
 801a47c:	2d10      	cmp	r5, #16
 801a47e:	9306      	str	r3, [sp, #24]
 801a480:	46a8      	mov	r8, r5
 801a482:	bfa8      	it	ge
 801a484:	f04f 0810 	movge.w	r8, #16
 801a488:	f7e6 f83c 	bl	8000504 <__aeabi_ui2d>
 801a48c:	2d09      	cmp	r5, #9
 801a48e:	4682      	mov	sl, r0
 801a490:	468b      	mov	fp, r1
 801a492:	dd13      	ble.n	801a4bc <_strtod_l+0x3dc>
 801a494:	4b7b      	ldr	r3, [pc, #492]	; (801a684 <_strtod_l+0x5a4>)
 801a496:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a49a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a49e:	f7e6 f8ab 	bl	80005f8 <__aeabi_dmul>
 801a4a2:	4682      	mov	sl, r0
 801a4a4:	4648      	mov	r0, r9
 801a4a6:	468b      	mov	fp, r1
 801a4a8:	f7e6 f82c 	bl	8000504 <__aeabi_ui2d>
 801a4ac:	4602      	mov	r2, r0
 801a4ae:	460b      	mov	r3, r1
 801a4b0:	4650      	mov	r0, sl
 801a4b2:	4659      	mov	r1, fp
 801a4b4:	f7e5 feea 	bl	800028c <__adddf3>
 801a4b8:	4682      	mov	sl, r0
 801a4ba:	468b      	mov	fp, r1
 801a4bc:	2d0f      	cmp	r5, #15
 801a4be:	dc38      	bgt.n	801a532 <_strtod_l+0x452>
 801a4c0:	9b06      	ldr	r3, [sp, #24]
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	f43f ae50 	beq.w	801a168 <_strtod_l+0x88>
 801a4c8:	dd24      	ble.n	801a514 <_strtod_l+0x434>
 801a4ca:	2b16      	cmp	r3, #22
 801a4cc:	dc0b      	bgt.n	801a4e6 <_strtod_l+0x406>
 801a4ce:	496d      	ldr	r1, [pc, #436]	; (801a684 <_strtod_l+0x5a4>)
 801a4d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a4d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4d8:	4652      	mov	r2, sl
 801a4da:	465b      	mov	r3, fp
 801a4dc:	f7e6 f88c 	bl	80005f8 <__aeabi_dmul>
 801a4e0:	4682      	mov	sl, r0
 801a4e2:	468b      	mov	fp, r1
 801a4e4:	e640      	b.n	801a168 <_strtod_l+0x88>
 801a4e6:	9a06      	ldr	r2, [sp, #24]
 801a4e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a4ec:	4293      	cmp	r3, r2
 801a4ee:	db20      	blt.n	801a532 <_strtod_l+0x452>
 801a4f0:	4c64      	ldr	r4, [pc, #400]	; (801a684 <_strtod_l+0x5a4>)
 801a4f2:	f1c5 050f 	rsb	r5, r5, #15
 801a4f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a4fa:	4652      	mov	r2, sl
 801a4fc:	465b      	mov	r3, fp
 801a4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a502:	f7e6 f879 	bl	80005f8 <__aeabi_dmul>
 801a506:	9b06      	ldr	r3, [sp, #24]
 801a508:	1b5d      	subs	r5, r3, r5
 801a50a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a50e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a512:	e7e3      	b.n	801a4dc <_strtod_l+0x3fc>
 801a514:	9b06      	ldr	r3, [sp, #24]
 801a516:	3316      	adds	r3, #22
 801a518:	db0b      	blt.n	801a532 <_strtod_l+0x452>
 801a51a:	9b05      	ldr	r3, [sp, #20]
 801a51c:	1b9e      	subs	r6, r3, r6
 801a51e:	4b59      	ldr	r3, [pc, #356]	; (801a684 <_strtod_l+0x5a4>)
 801a520:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a524:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a528:	4650      	mov	r0, sl
 801a52a:	4659      	mov	r1, fp
 801a52c:	f7e6 f98e 	bl	800084c <__aeabi_ddiv>
 801a530:	e7d6      	b.n	801a4e0 <_strtod_l+0x400>
 801a532:	9b06      	ldr	r3, [sp, #24]
 801a534:	eba5 0808 	sub.w	r8, r5, r8
 801a538:	4498      	add	r8, r3
 801a53a:	f1b8 0f00 	cmp.w	r8, #0
 801a53e:	dd74      	ble.n	801a62a <_strtod_l+0x54a>
 801a540:	f018 030f 	ands.w	r3, r8, #15
 801a544:	d00a      	beq.n	801a55c <_strtod_l+0x47c>
 801a546:	494f      	ldr	r1, [pc, #316]	; (801a684 <_strtod_l+0x5a4>)
 801a548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a54c:	4652      	mov	r2, sl
 801a54e:	465b      	mov	r3, fp
 801a550:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a554:	f7e6 f850 	bl	80005f8 <__aeabi_dmul>
 801a558:	4682      	mov	sl, r0
 801a55a:	468b      	mov	fp, r1
 801a55c:	f038 080f 	bics.w	r8, r8, #15
 801a560:	d04f      	beq.n	801a602 <_strtod_l+0x522>
 801a562:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a566:	dd22      	ble.n	801a5ae <_strtod_l+0x4ce>
 801a568:	2500      	movs	r5, #0
 801a56a:	462e      	mov	r6, r5
 801a56c:	9507      	str	r5, [sp, #28]
 801a56e:	9505      	str	r5, [sp, #20]
 801a570:	2322      	movs	r3, #34	; 0x22
 801a572:	f8df b118 	ldr.w	fp, [pc, #280]	; 801a68c <_strtod_l+0x5ac>
 801a576:	6023      	str	r3, [r4, #0]
 801a578:	f04f 0a00 	mov.w	sl, #0
 801a57c:	9b07      	ldr	r3, [sp, #28]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	f43f adf2 	beq.w	801a168 <_strtod_l+0x88>
 801a584:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a586:	4620      	mov	r0, r4
 801a588:	f001 ff8c 	bl	801c4a4 <_Bfree>
 801a58c:	9905      	ldr	r1, [sp, #20]
 801a58e:	4620      	mov	r0, r4
 801a590:	f001 ff88 	bl	801c4a4 <_Bfree>
 801a594:	4631      	mov	r1, r6
 801a596:	4620      	mov	r0, r4
 801a598:	f001 ff84 	bl	801c4a4 <_Bfree>
 801a59c:	9907      	ldr	r1, [sp, #28]
 801a59e:	4620      	mov	r0, r4
 801a5a0:	f001 ff80 	bl	801c4a4 <_Bfree>
 801a5a4:	4629      	mov	r1, r5
 801a5a6:	4620      	mov	r0, r4
 801a5a8:	f001 ff7c 	bl	801c4a4 <_Bfree>
 801a5ac:	e5dc      	b.n	801a168 <_strtod_l+0x88>
 801a5ae:	4b36      	ldr	r3, [pc, #216]	; (801a688 <_strtod_l+0x5a8>)
 801a5b0:	9304      	str	r3, [sp, #16]
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a5b8:	4650      	mov	r0, sl
 801a5ba:	4659      	mov	r1, fp
 801a5bc:	4699      	mov	r9, r3
 801a5be:	f1b8 0f01 	cmp.w	r8, #1
 801a5c2:	dc21      	bgt.n	801a608 <_strtod_l+0x528>
 801a5c4:	b10b      	cbz	r3, 801a5ca <_strtod_l+0x4ea>
 801a5c6:	4682      	mov	sl, r0
 801a5c8:	468b      	mov	fp, r1
 801a5ca:	4b2f      	ldr	r3, [pc, #188]	; (801a688 <_strtod_l+0x5a8>)
 801a5cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a5d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a5d4:	4652      	mov	r2, sl
 801a5d6:	465b      	mov	r3, fp
 801a5d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a5dc:	f7e6 f80c 	bl	80005f8 <__aeabi_dmul>
 801a5e0:	4b2a      	ldr	r3, [pc, #168]	; (801a68c <_strtod_l+0x5ac>)
 801a5e2:	460a      	mov	r2, r1
 801a5e4:	400b      	ands	r3, r1
 801a5e6:	492a      	ldr	r1, [pc, #168]	; (801a690 <_strtod_l+0x5b0>)
 801a5e8:	428b      	cmp	r3, r1
 801a5ea:	4682      	mov	sl, r0
 801a5ec:	d8bc      	bhi.n	801a568 <_strtod_l+0x488>
 801a5ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a5f2:	428b      	cmp	r3, r1
 801a5f4:	bf86      	itte	hi
 801a5f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801a694 <_strtod_l+0x5b4>
 801a5fa:	f04f 3aff 	movhi.w	sl, #4294967295
 801a5fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a602:	2300      	movs	r3, #0
 801a604:	9304      	str	r3, [sp, #16]
 801a606:	e084      	b.n	801a712 <_strtod_l+0x632>
 801a608:	f018 0f01 	tst.w	r8, #1
 801a60c:	d005      	beq.n	801a61a <_strtod_l+0x53a>
 801a60e:	9b04      	ldr	r3, [sp, #16]
 801a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a614:	f7e5 fff0 	bl	80005f8 <__aeabi_dmul>
 801a618:	2301      	movs	r3, #1
 801a61a:	9a04      	ldr	r2, [sp, #16]
 801a61c:	3208      	adds	r2, #8
 801a61e:	f109 0901 	add.w	r9, r9, #1
 801a622:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a626:	9204      	str	r2, [sp, #16]
 801a628:	e7c9      	b.n	801a5be <_strtod_l+0x4de>
 801a62a:	d0ea      	beq.n	801a602 <_strtod_l+0x522>
 801a62c:	f1c8 0800 	rsb	r8, r8, #0
 801a630:	f018 020f 	ands.w	r2, r8, #15
 801a634:	d00a      	beq.n	801a64c <_strtod_l+0x56c>
 801a636:	4b13      	ldr	r3, [pc, #76]	; (801a684 <_strtod_l+0x5a4>)
 801a638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a63c:	4650      	mov	r0, sl
 801a63e:	4659      	mov	r1, fp
 801a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a644:	f7e6 f902 	bl	800084c <__aeabi_ddiv>
 801a648:	4682      	mov	sl, r0
 801a64a:	468b      	mov	fp, r1
 801a64c:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a650:	d0d7      	beq.n	801a602 <_strtod_l+0x522>
 801a652:	f1b8 0f1f 	cmp.w	r8, #31
 801a656:	dd1f      	ble.n	801a698 <_strtod_l+0x5b8>
 801a658:	2500      	movs	r5, #0
 801a65a:	462e      	mov	r6, r5
 801a65c:	9507      	str	r5, [sp, #28]
 801a65e:	9505      	str	r5, [sp, #20]
 801a660:	2322      	movs	r3, #34	; 0x22
 801a662:	f04f 0a00 	mov.w	sl, #0
 801a666:	f04f 0b00 	mov.w	fp, #0
 801a66a:	6023      	str	r3, [r4, #0]
 801a66c:	e786      	b.n	801a57c <_strtod_l+0x49c>
 801a66e:	bf00      	nop
 801a670:	0801fd89 	.word	0x0801fd89
 801a674:	0801fdcc 	.word	0x0801fdcc
 801a678:	0801fd81 	.word	0x0801fd81
 801a67c:	0801ff0c 	.word	0x0801ff0c
 801a680:	080201b8 	.word	0x080201b8
 801a684:	08020098 	.word	0x08020098
 801a688:	08020070 	.word	0x08020070
 801a68c:	7ff00000 	.word	0x7ff00000
 801a690:	7ca00000 	.word	0x7ca00000
 801a694:	7fefffff 	.word	0x7fefffff
 801a698:	f018 0310 	ands.w	r3, r8, #16
 801a69c:	bf18      	it	ne
 801a69e:	236a      	movne	r3, #106	; 0x6a
 801a6a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801aa50 <_strtod_l+0x970>
 801a6a4:	9304      	str	r3, [sp, #16]
 801a6a6:	4650      	mov	r0, sl
 801a6a8:	4659      	mov	r1, fp
 801a6aa:	2300      	movs	r3, #0
 801a6ac:	f018 0f01 	tst.w	r8, #1
 801a6b0:	d004      	beq.n	801a6bc <_strtod_l+0x5dc>
 801a6b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a6b6:	f7e5 ff9f 	bl	80005f8 <__aeabi_dmul>
 801a6ba:	2301      	movs	r3, #1
 801a6bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 801a6c0:	f109 0908 	add.w	r9, r9, #8
 801a6c4:	d1f2      	bne.n	801a6ac <_strtod_l+0x5cc>
 801a6c6:	b10b      	cbz	r3, 801a6cc <_strtod_l+0x5ec>
 801a6c8:	4682      	mov	sl, r0
 801a6ca:	468b      	mov	fp, r1
 801a6cc:	9b04      	ldr	r3, [sp, #16]
 801a6ce:	b1c3      	cbz	r3, 801a702 <_strtod_l+0x622>
 801a6d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801a6d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	4659      	mov	r1, fp
 801a6dc:	dd11      	ble.n	801a702 <_strtod_l+0x622>
 801a6de:	2b1f      	cmp	r3, #31
 801a6e0:	f340 8124 	ble.w	801a92c <_strtod_l+0x84c>
 801a6e4:	2b34      	cmp	r3, #52	; 0x34
 801a6e6:	bfde      	ittt	le
 801a6e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801a6ec:	f04f 33ff 	movle.w	r3, #4294967295
 801a6f0:	fa03 f202 	lslle.w	r2, r3, r2
 801a6f4:	f04f 0a00 	mov.w	sl, #0
 801a6f8:	bfcc      	ite	gt
 801a6fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a6fe:	ea02 0b01 	andle.w	fp, r2, r1
 801a702:	2200      	movs	r2, #0
 801a704:	2300      	movs	r3, #0
 801a706:	4650      	mov	r0, sl
 801a708:	4659      	mov	r1, fp
 801a70a:	f7e6 f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 801a70e:	2800      	cmp	r0, #0
 801a710:	d1a2      	bne.n	801a658 <_strtod_l+0x578>
 801a712:	9b07      	ldr	r3, [sp, #28]
 801a714:	9300      	str	r3, [sp, #0]
 801a716:	9908      	ldr	r1, [sp, #32]
 801a718:	462b      	mov	r3, r5
 801a71a:	463a      	mov	r2, r7
 801a71c:	4620      	mov	r0, r4
 801a71e:	f001 ff29 	bl	801c574 <__s2b>
 801a722:	9007      	str	r0, [sp, #28]
 801a724:	2800      	cmp	r0, #0
 801a726:	f43f af1f 	beq.w	801a568 <_strtod_l+0x488>
 801a72a:	9b05      	ldr	r3, [sp, #20]
 801a72c:	1b9e      	subs	r6, r3, r6
 801a72e:	9b06      	ldr	r3, [sp, #24]
 801a730:	2b00      	cmp	r3, #0
 801a732:	bfb4      	ite	lt
 801a734:	4633      	movlt	r3, r6
 801a736:	2300      	movge	r3, #0
 801a738:	930c      	str	r3, [sp, #48]	; 0x30
 801a73a:	9b06      	ldr	r3, [sp, #24]
 801a73c:	2500      	movs	r5, #0
 801a73e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a742:	9312      	str	r3, [sp, #72]	; 0x48
 801a744:	462e      	mov	r6, r5
 801a746:	9b07      	ldr	r3, [sp, #28]
 801a748:	4620      	mov	r0, r4
 801a74a:	6859      	ldr	r1, [r3, #4]
 801a74c:	f001 fe6a 	bl	801c424 <_Balloc>
 801a750:	9005      	str	r0, [sp, #20]
 801a752:	2800      	cmp	r0, #0
 801a754:	f43f af0c 	beq.w	801a570 <_strtod_l+0x490>
 801a758:	9b07      	ldr	r3, [sp, #28]
 801a75a:	691a      	ldr	r2, [r3, #16]
 801a75c:	3202      	adds	r2, #2
 801a75e:	f103 010c 	add.w	r1, r3, #12
 801a762:	0092      	lsls	r2, r2, #2
 801a764:	300c      	adds	r0, #12
 801a766:	f7fe fc96 	bl	8019096 <memcpy>
 801a76a:	ec4b ab10 	vmov	d0, sl, fp
 801a76e:	aa1a      	add	r2, sp, #104	; 0x68
 801a770:	a919      	add	r1, sp, #100	; 0x64
 801a772:	4620      	mov	r0, r4
 801a774:	f002 fa44 	bl	801cc00 <__d2b>
 801a778:	ec4b ab18 	vmov	d8, sl, fp
 801a77c:	9018      	str	r0, [sp, #96]	; 0x60
 801a77e:	2800      	cmp	r0, #0
 801a780:	f43f aef6 	beq.w	801a570 <_strtod_l+0x490>
 801a784:	2101      	movs	r1, #1
 801a786:	4620      	mov	r0, r4
 801a788:	f001 ff8e 	bl	801c6a8 <__i2b>
 801a78c:	4606      	mov	r6, r0
 801a78e:	2800      	cmp	r0, #0
 801a790:	f43f aeee 	beq.w	801a570 <_strtod_l+0x490>
 801a794:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a796:	9904      	ldr	r1, [sp, #16]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	bfab      	itete	ge
 801a79c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801a79e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801a7a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801a7a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801a7a6:	bfac      	ite	ge
 801a7a8:	eb03 0902 	addge.w	r9, r3, r2
 801a7ac:	1ad7      	sublt	r7, r2, r3
 801a7ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a7b0:	eba3 0801 	sub.w	r8, r3, r1
 801a7b4:	4490      	add	r8, r2
 801a7b6:	4ba1      	ldr	r3, [pc, #644]	; (801aa3c <_strtod_l+0x95c>)
 801a7b8:	f108 38ff 	add.w	r8, r8, #4294967295
 801a7bc:	4598      	cmp	r8, r3
 801a7be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a7c2:	f280 80c7 	bge.w	801a954 <_strtod_l+0x874>
 801a7c6:	eba3 0308 	sub.w	r3, r3, r8
 801a7ca:	2b1f      	cmp	r3, #31
 801a7cc:	eba2 0203 	sub.w	r2, r2, r3
 801a7d0:	f04f 0101 	mov.w	r1, #1
 801a7d4:	f300 80b1 	bgt.w	801a93a <_strtod_l+0x85a>
 801a7d8:	fa01 f303 	lsl.w	r3, r1, r3
 801a7dc:	930d      	str	r3, [sp, #52]	; 0x34
 801a7de:	2300      	movs	r3, #0
 801a7e0:	9308      	str	r3, [sp, #32]
 801a7e2:	eb09 0802 	add.w	r8, r9, r2
 801a7e6:	9b04      	ldr	r3, [sp, #16]
 801a7e8:	45c1      	cmp	r9, r8
 801a7ea:	4417      	add	r7, r2
 801a7ec:	441f      	add	r7, r3
 801a7ee:	464b      	mov	r3, r9
 801a7f0:	bfa8      	it	ge
 801a7f2:	4643      	movge	r3, r8
 801a7f4:	42bb      	cmp	r3, r7
 801a7f6:	bfa8      	it	ge
 801a7f8:	463b      	movge	r3, r7
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	bfc2      	ittt	gt
 801a7fe:	eba8 0803 	subgt.w	r8, r8, r3
 801a802:	1aff      	subgt	r7, r7, r3
 801a804:	eba9 0903 	subgt.w	r9, r9, r3
 801a808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	dd17      	ble.n	801a83e <_strtod_l+0x75e>
 801a80e:	4631      	mov	r1, r6
 801a810:	461a      	mov	r2, r3
 801a812:	4620      	mov	r0, r4
 801a814:	f002 f808 	bl	801c828 <__pow5mult>
 801a818:	4606      	mov	r6, r0
 801a81a:	2800      	cmp	r0, #0
 801a81c:	f43f aea8 	beq.w	801a570 <_strtod_l+0x490>
 801a820:	4601      	mov	r1, r0
 801a822:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a824:	4620      	mov	r0, r4
 801a826:	f001 ff55 	bl	801c6d4 <__multiply>
 801a82a:	900b      	str	r0, [sp, #44]	; 0x2c
 801a82c:	2800      	cmp	r0, #0
 801a82e:	f43f ae9f 	beq.w	801a570 <_strtod_l+0x490>
 801a832:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a834:	4620      	mov	r0, r4
 801a836:	f001 fe35 	bl	801c4a4 <_Bfree>
 801a83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a83c:	9318      	str	r3, [sp, #96]	; 0x60
 801a83e:	f1b8 0f00 	cmp.w	r8, #0
 801a842:	f300 808c 	bgt.w	801a95e <_strtod_l+0x87e>
 801a846:	9b06      	ldr	r3, [sp, #24]
 801a848:	2b00      	cmp	r3, #0
 801a84a:	dd08      	ble.n	801a85e <_strtod_l+0x77e>
 801a84c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a84e:	9905      	ldr	r1, [sp, #20]
 801a850:	4620      	mov	r0, r4
 801a852:	f001 ffe9 	bl	801c828 <__pow5mult>
 801a856:	9005      	str	r0, [sp, #20]
 801a858:	2800      	cmp	r0, #0
 801a85a:	f43f ae89 	beq.w	801a570 <_strtod_l+0x490>
 801a85e:	2f00      	cmp	r7, #0
 801a860:	dd08      	ble.n	801a874 <_strtod_l+0x794>
 801a862:	9905      	ldr	r1, [sp, #20]
 801a864:	463a      	mov	r2, r7
 801a866:	4620      	mov	r0, r4
 801a868:	f002 f838 	bl	801c8dc <__lshift>
 801a86c:	9005      	str	r0, [sp, #20]
 801a86e:	2800      	cmp	r0, #0
 801a870:	f43f ae7e 	beq.w	801a570 <_strtod_l+0x490>
 801a874:	f1b9 0f00 	cmp.w	r9, #0
 801a878:	dd08      	ble.n	801a88c <_strtod_l+0x7ac>
 801a87a:	4631      	mov	r1, r6
 801a87c:	464a      	mov	r2, r9
 801a87e:	4620      	mov	r0, r4
 801a880:	f002 f82c 	bl	801c8dc <__lshift>
 801a884:	4606      	mov	r6, r0
 801a886:	2800      	cmp	r0, #0
 801a888:	f43f ae72 	beq.w	801a570 <_strtod_l+0x490>
 801a88c:	9a05      	ldr	r2, [sp, #20]
 801a88e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a890:	4620      	mov	r0, r4
 801a892:	f002 f8af 	bl	801c9f4 <__mdiff>
 801a896:	4605      	mov	r5, r0
 801a898:	2800      	cmp	r0, #0
 801a89a:	f43f ae69 	beq.w	801a570 <_strtod_l+0x490>
 801a89e:	68c3      	ldr	r3, [r0, #12]
 801a8a0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	60c3      	str	r3, [r0, #12]
 801a8a6:	4631      	mov	r1, r6
 801a8a8:	f002 f888 	bl	801c9bc <__mcmp>
 801a8ac:	2800      	cmp	r0, #0
 801a8ae:	da60      	bge.n	801a972 <_strtod_l+0x892>
 801a8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8b2:	ea53 030a 	orrs.w	r3, r3, sl
 801a8b6:	f040 8082 	bne.w	801a9be <_strtod_l+0x8de>
 801a8ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d17d      	bne.n	801a9be <_strtod_l+0x8de>
 801a8c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a8c6:	0d1b      	lsrs	r3, r3, #20
 801a8c8:	051b      	lsls	r3, r3, #20
 801a8ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a8ce:	d976      	bls.n	801a9be <_strtod_l+0x8de>
 801a8d0:	696b      	ldr	r3, [r5, #20]
 801a8d2:	b913      	cbnz	r3, 801a8da <_strtod_l+0x7fa>
 801a8d4:	692b      	ldr	r3, [r5, #16]
 801a8d6:	2b01      	cmp	r3, #1
 801a8d8:	dd71      	ble.n	801a9be <_strtod_l+0x8de>
 801a8da:	4629      	mov	r1, r5
 801a8dc:	2201      	movs	r2, #1
 801a8de:	4620      	mov	r0, r4
 801a8e0:	f001 fffc 	bl	801c8dc <__lshift>
 801a8e4:	4631      	mov	r1, r6
 801a8e6:	4605      	mov	r5, r0
 801a8e8:	f002 f868 	bl	801c9bc <__mcmp>
 801a8ec:	2800      	cmp	r0, #0
 801a8ee:	dd66      	ble.n	801a9be <_strtod_l+0x8de>
 801a8f0:	9904      	ldr	r1, [sp, #16]
 801a8f2:	4a53      	ldr	r2, [pc, #332]	; (801aa40 <_strtod_l+0x960>)
 801a8f4:	465b      	mov	r3, fp
 801a8f6:	2900      	cmp	r1, #0
 801a8f8:	f000 8081 	beq.w	801a9fe <_strtod_l+0x91e>
 801a8fc:	ea02 010b 	and.w	r1, r2, fp
 801a900:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a904:	dc7b      	bgt.n	801a9fe <_strtod_l+0x91e>
 801a906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a90a:	f77f aea9 	ble.w	801a660 <_strtod_l+0x580>
 801a90e:	4b4d      	ldr	r3, [pc, #308]	; (801aa44 <_strtod_l+0x964>)
 801a910:	4650      	mov	r0, sl
 801a912:	4659      	mov	r1, fp
 801a914:	2200      	movs	r2, #0
 801a916:	f7e5 fe6f 	bl	80005f8 <__aeabi_dmul>
 801a91a:	460b      	mov	r3, r1
 801a91c:	4303      	orrs	r3, r0
 801a91e:	bf08      	it	eq
 801a920:	2322      	moveq	r3, #34	; 0x22
 801a922:	4682      	mov	sl, r0
 801a924:	468b      	mov	fp, r1
 801a926:	bf08      	it	eq
 801a928:	6023      	streq	r3, [r4, #0]
 801a92a:	e62b      	b.n	801a584 <_strtod_l+0x4a4>
 801a92c:	f04f 32ff 	mov.w	r2, #4294967295
 801a930:	fa02 f303 	lsl.w	r3, r2, r3
 801a934:	ea03 0a0a 	and.w	sl, r3, sl
 801a938:	e6e3      	b.n	801a702 <_strtod_l+0x622>
 801a93a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801a93e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801a942:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801a946:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801a94a:	fa01 f308 	lsl.w	r3, r1, r8
 801a94e:	9308      	str	r3, [sp, #32]
 801a950:	910d      	str	r1, [sp, #52]	; 0x34
 801a952:	e746      	b.n	801a7e2 <_strtod_l+0x702>
 801a954:	2300      	movs	r3, #0
 801a956:	9308      	str	r3, [sp, #32]
 801a958:	2301      	movs	r3, #1
 801a95a:	930d      	str	r3, [sp, #52]	; 0x34
 801a95c:	e741      	b.n	801a7e2 <_strtod_l+0x702>
 801a95e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a960:	4642      	mov	r2, r8
 801a962:	4620      	mov	r0, r4
 801a964:	f001 ffba 	bl	801c8dc <__lshift>
 801a968:	9018      	str	r0, [sp, #96]	; 0x60
 801a96a:	2800      	cmp	r0, #0
 801a96c:	f47f af6b 	bne.w	801a846 <_strtod_l+0x766>
 801a970:	e5fe      	b.n	801a570 <_strtod_l+0x490>
 801a972:	465f      	mov	r7, fp
 801a974:	d16e      	bne.n	801aa54 <_strtod_l+0x974>
 801a976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a978:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a97c:	b342      	cbz	r2, 801a9d0 <_strtod_l+0x8f0>
 801a97e:	4a32      	ldr	r2, [pc, #200]	; (801aa48 <_strtod_l+0x968>)
 801a980:	4293      	cmp	r3, r2
 801a982:	d128      	bne.n	801a9d6 <_strtod_l+0x8f6>
 801a984:	9b04      	ldr	r3, [sp, #16]
 801a986:	4651      	mov	r1, sl
 801a988:	b1eb      	cbz	r3, 801a9c6 <_strtod_l+0x8e6>
 801a98a:	4b2d      	ldr	r3, [pc, #180]	; (801aa40 <_strtod_l+0x960>)
 801a98c:	403b      	ands	r3, r7
 801a98e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a992:	f04f 32ff 	mov.w	r2, #4294967295
 801a996:	d819      	bhi.n	801a9cc <_strtod_l+0x8ec>
 801a998:	0d1b      	lsrs	r3, r3, #20
 801a99a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a99e:	fa02 f303 	lsl.w	r3, r2, r3
 801a9a2:	4299      	cmp	r1, r3
 801a9a4:	d117      	bne.n	801a9d6 <_strtod_l+0x8f6>
 801a9a6:	4b29      	ldr	r3, [pc, #164]	; (801aa4c <_strtod_l+0x96c>)
 801a9a8:	429f      	cmp	r7, r3
 801a9aa:	d102      	bne.n	801a9b2 <_strtod_l+0x8d2>
 801a9ac:	3101      	adds	r1, #1
 801a9ae:	f43f addf 	beq.w	801a570 <_strtod_l+0x490>
 801a9b2:	4b23      	ldr	r3, [pc, #140]	; (801aa40 <_strtod_l+0x960>)
 801a9b4:	403b      	ands	r3, r7
 801a9b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a9ba:	f04f 0a00 	mov.w	sl, #0
 801a9be:	9b04      	ldr	r3, [sp, #16]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d1a4      	bne.n	801a90e <_strtod_l+0x82e>
 801a9c4:	e5de      	b.n	801a584 <_strtod_l+0x4a4>
 801a9c6:	f04f 33ff 	mov.w	r3, #4294967295
 801a9ca:	e7ea      	b.n	801a9a2 <_strtod_l+0x8c2>
 801a9cc:	4613      	mov	r3, r2
 801a9ce:	e7e8      	b.n	801a9a2 <_strtod_l+0x8c2>
 801a9d0:	ea53 030a 	orrs.w	r3, r3, sl
 801a9d4:	d08c      	beq.n	801a8f0 <_strtod_l+0x810>
 801a9d6:	9b08      	ldr	r3, [sp, #32]
 801a9d8:	b1db      	cbz	r3, 801aa12 <_strtod_l+0x932>
 801a9da:	423b      	tst	r3, r7
 801a9dc:	d0ef      	beq.n	801a9be <_strtod_l+0x8de>
 801a9de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9e0:	9a04      	ldr	r2, [sp, #16]
 801a9e2:	4650      	mov	r0, sl
 801a9e4:	4659      	mov	r1, fp
 801a9e6:	b1c3      	cbz	r3, 801aa1a <_strtod_l+0x93a>
 801a9e8:	f7ff fb5d 	bl	801a0a6 <sulp>
 801a9ec:	4602      	mov	r2, r0
 801a9ee:	460b      	mov	r3, r1
 801a9f0:	ec51 0b18 	vmov	r0, r1, d8
 801a9f4:	f7e5 fc4a 	bl	800028c <__adddf3>
 801a9f8:	4682      	mov	sl, r0
 801a9fa:	468b      	mov	fp, r1
 801a9fc:	e7df      	b.n	801a9be <_strtod_l+0x8de>
 801a9fe:	4013      	ands	r3, r2
 801aa00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801aa04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801aa08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801aa0c:	f04f 3aff 	mov.w	sl, #4294967295
 801aa10:	e7d5      	b.n	801a9be <_strtod_l+0x8de>
 801aa12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa14:	ea13 0f0a 	tst.w	r3, sl
 801aa18:	e7e0      	b.n	801a9dc <_strtod_l+0x8fc>
 801aa1a:	f7ff fb44 	bl	801a0a6 <sulp>
 801aa1e:	4602      	mov	r2, r0
 801aa20:	460b      	mov	r3, r1
 801aa22:	ec51 0b18 	vmov	r0, r1, d8
 801aa26:	f7e5 fc2f 	bl	8000288 <__aeabi_dsub>
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	4682      	mov	sl, r0
 801aa30:	468b      	mov	fp, r1
 801aa32:	f7e6 f849 	bl	8000ac8 <__aeabi_dcmpeq>
 801aa36:	2800      	cmp	r0, #0
 801aa38:	d0c1      	beq.n	801a9be <_strtod_l+0x8de>
 801aa3a:	e611      	b.n	801a660 <_strtod_l+0x580>
 801aa3c:	fffffc02 	.word	0xfffffc02
 801aa40:	7ff00000 	.word	0x7ff00000
 801aa44:	39500000 	.word	0x39500000
 801aa48:	000fffff 	.word	0x000fffff
 801aa4c:	7fefffff 	.word	0x7fefffff
 801aa50:	0801fde0 	.word	0x0801fde0
 801aa54:	4631      	mov	r1, r6
 801aa56:	4628      	mov	r0, r5
 801aa58:	f002 f92e 	bl	801ccb8 <__ratio>
 801aa5c:	ec59 8b10 	vmov	r8, r9, d0
 801aa60:	ee10 0a10 	vmov	r0, s0
 801aa64:	2200      	movs	r2, #0
 801aa66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801aa6a:	4649      	mov	r1, r9
 801aa6c:	f7e6 f840 	bl	8000af0 <__aeabi_dcmple>
 801aa70:	2800      	cmp	r0, #0
 801aa72:	d07a      	beq.n	801ab6a <_strtod_l+0xa8a>
 801aa74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d04a      	beq.n	801ab10 <_strtod_l+0xa30>
 801aa7a:	4b95      	ldr	r3, [pc, #596]	; (801acd0 <_strtod_l+0xbf0>)
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aa82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801acd0 <_strtod_l+0xbf0>
 801aa86:	f04f 0800 	mov.w	r8, #0
 801aa8a:	4b92      	ldr	r3, [pc, #584]	; (801acd4 <_strtod_l+0xbf4>)
 801aa8c:	403b      	ands	r3, r7
 801aa8e:	930d      	str	r3, [sp, #52]	; 0x34
 801aa90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aa92:	4b91      	ldr	r3, [pc, #580]	; (801acd8 <_strtod_l+0xbf8>)
 801aa94:	429a      	cmp	r2, r3
 801aa96:	f040 80b0 	bne.w	801abfa <_strtod_l+0xb1a>
 801aa9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801aa9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801aaa2:	ec4b ab10 	vmov	d0, sl, fp
 801aaa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aaaa:	f002 f82d 	bl	801cb08 <__ulp>
 801aaae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801aab2:	ec53 2b10 	vmov	r2, r3, d0
 801aab6:	f7e5 fd9f 	bl	80005f8 <__aeabi_dmul>
 801aaba:	4652      	mov	r2, sl
 801aabc:	465b      	mov	r3, fp
 801aabe:	f7e5 fbe5 	bl	800028c <__adddf3>
 801aac2:	460b      	mov	r3, r1
 801aac4:	4983      	ldr	r1, [pc, #524]	; (801acd4 <_strtod_l+0xbf4>)
 801aac6:	4a85      	ldr	r2, [pc, #532]	; (801acdc <_strtod_l+0xbfc>)
 801aac8:	4019      	ands	r1, r3
 801aaca:	4291      	cmp	r1, r2
 801aacc:	4682      	mov	sl, r0
 801aace:	d960      	bls.n	801ab92 <_strtod_l+0xab2>
 801aad0:	ee18 3a90 	vmov	r3, s17
 801aad4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801aad8:	4293      	cmp	r3, r2
 801aada:	d104      	bne.n	801aae6 <_strtod_l+0xa06>
 801aadc:	ee18 3a10 	vmov	r3, s16
 801aae0:	3301      	adds	r3, #1
 801aae2:	f43f ad45 	beq.w	801a570 <_strtod_l+0x490>
 801aae6:	f8df b200 	ldr.w	fp, [pc, #512]	; 801ace8 <_strtod_l+0xc08>
 801aaea:	f04f 3aff 	mov.w	sl, #4294967295
 801aaee:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aaf0:	4620      	mov	r0, r4
 801aaf2:	f001 fcd7 	bl	801c4a4 <_Bfree>
 801aaf6:	9905      	ldr	r1, [sp, #20]
 801aaf8:	4620      	mov	r0, r4
 801aafa:	f001 fcd3 	bl	801c4a4 <_Bfree>
 801aafe:	4631      	mov	r1, r6
 801ab00:	4620      	mov	r0, r4
 801ab02:	f001 fccf 	bl	801c4a4 <_Bfree>
 801ab06:	4629      	mov	r1, r5
 801ab08:	4620      	mov	r0, r4
 801ab0a:	f001 fccb 	bl	801c4a4 <_Bfree>
 801ab0e:	e61a      	b.n	801a746 <_strtod_l+0x666>
 801ab10:	f1ba 0f00 	cmp.w	sl, #0
 801ab14:	d11b      	bne.n	801ab4e <_strtod_l+0xa6e>
 801ab16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ab1a:	b9f3      	cbnz	r3, 801ab5a <_strtod_l+0xa7a>
 801ab1c:	4b6c      	ldr	r3, [pc, #432]	; (801acd0 <_strtod_l+0xbf0>)
 801ab1e:	2200      	movs	r2, #0
 801ab20:	4640      	mov	r0, r8
 801ab22:	4649      	mov	r1, r9
 801ab24:	f7e5 ffda 	bl	8000adc <__aeabi_dcmplt>
 801ab28:	b9d0      	cbnz	r0, 801ab60 <_strtod_l+0xa80>
 801ab2a:	4640      	mov	r0, r8
 801ab2c:	4649      	mov	r1, r9
 801ab2e:	4b6c      	ldr	r3, [pc, #432]	; (801ace0 <_strtod_l+0xc00>)
 801ab30:	2200      	movs	r2, #0
 801ab32:	f7e5 fd61 	bl	80005f8 <__aeabi_dmul>
 801ab36:	4680      	mov	r8, r0
 801ab38:	4689      	mov	r9, r1
 801ab3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ab3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801ab42:	9315      	str	r3, [sp, #84]	; 0x54
 801ab44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801ab48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ab4c:	e79d      	b.n	801aa8a <_strtod_l+0x9aa>
 801ab4e:	f1ba 0f01 	cmp.w	sl, #1
 801ab52:	d102      	bne.n	801ab5a <_strtod_l+0xa7a>
 801ab54:	2f00      	cmp	r7, #0
 801ab56:	f43f ad83 	beq.w	801a660 <_strtod_l+0x580>
 801ab5a:	4b62      	ldr	r3, [pc, #392]	; (801ace4 <_strtod_l+0xc04>)
 801ab5c:	2200      	movs	r2, #0
 801ab5e:	e78e      	b.n	801aa7e <_strtod_l+0x99e>
 801ab60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801ace0 <_strtod_l+0xc00>
 801ab64:	f04f 0800 	mov.w	r8, #0
 801ab68:	e7e7      	b.n	801ab3a <_strtod_l+0xa5a>
 801ab6a:	4b5d      	ldr	r3, [pc, #372]	; (801ace0 <_strtod_l+0xc00>)
 801ab6c:	4640      	mov	r0, r8
 801ab6e:	4649      	mov	r1, r9
 801ab70:	2200      	movs	r2, #0
 801ab72:	f7e5 fd41 	bl	80005f8 <__aeabi_dmul>
 801ab76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab78:	4680      	mov	r8, r0
 801ab7a:	4689      	mov	r9, r1
 801ab7c:	b933      	cbnz	r3, 801ab8c <_strtod_l+0xaac>
 801ab7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ab82:	900e      	str	r0, [sp, #56]	; 0x38
 801ab84:	930f      	str	r3, [sp, #60]	; 0x3c
 801ab86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ab8a:	e7dd      	b.n	801ab48 <_strtod_l+0xa68>
 801ab8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801ab90:	e7f9      	b.n	801ab86 <_strtod_l+0xaa6>
 801ab92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801ab96:	9b04      	ldr	r3, [sp, #16]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d1a8      	bne.n	801aaee <_strtod_l+0xa0e>
 801ab9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801aba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aba2:	0d1b      	lsrs	r3, r3, #20
 801aba4:	051b      	lsls	r3, r3, #20
 801aba6:	429a      	cmp	r2, r3
 801aba8:	d1a1      	bne.n	801aaee <_strtod_l+0xa0e>
 801abaa:	4640      	mov	r0, r8
 801abac:	4649      	mov	r1, r9
 801abae:	f7e6 f883 	bl	8000cb8 <__aeabi_d2lz>
 801abb2:	f7e5 fcf3 	bl	800059c <__aeabi_l2d>
 801abb6:	4602      	mov	r2, r0
 801abb8:	460b      	mov	r3, r1
 801abba:	4640      	mov	r0, r8
 801abbc:	4649      	mov	r1, r9
 801abbe:	f7e5 fb63 	bl	8000288 <__aeabi_dsub>
 801abc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801abc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801abc8:	ea43 030a 	orr.w	r3, r3, sl
 801abcc:	4313      	orrs	r3, r2
 801abce:	4680      	mov	r8, r0
 801abd0:	4689      	mov	r9, r1
 801abd2:	d055      	beq.n	801ac80 <_strtod_l+0xba0>
 801abd4:	a336      	add	r3, pc, #216	; (adr r3, 801acb0 <_strtod_l+0xbd0>)
 801abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abda:	f7e5 ff7f 	bl	8000adc <__aeabi_dcmplt>
 801abde:	2800      	cmp	r0, #0
 801abe0:	f47f acd0 	bne.w	801a584 <_strtod_l+0x4a4>
 801abe4:	a334      	add	r3, pc, #208	; (adr r3, 801acb8 <_strtod_l+0xbd8>)
 801abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abea:	4640      	mov	r0, r8
 801abec:	4649      	mov	r1, r9
 801abee:	f7e5 ff93 	bl	8000b18 <__aeabi_dcmpgt>
 801abf2:	2800      	cmp	r0, #0
 801abf4:	f43f af7b 	beq.w	801aaee <_strtod_l+0xa0e>
 801abf8:	e4c4      	b.n	801a584 <_strtod_l+0x4a4>
 801abfa:	9b04      	ldr	r3, [sp, #16]
 801abfc:	b333      	cbz	r3, 801ac4c <_strtod_l+0xb6c>
 801abfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ac04:	d822      	bhi.n	801ac4c <_strtod_l+0xb6c>
 801ac06:	a32e      	add	r3, pc, #184	; (adr r3, 801acc0 <_strtod_l+0xbe0>)
 801ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0c:	4640      	mov	r0, r8
 801ac0e:	4649      	mov	r1, r9
 801ac10:	f7e5 ff6e 	bl	8000af0 <__aeabi_dcmple>
 801ac14:	b1a0      	cbz	r0, 801ac40 <_strtod_l+0xb60>
 801ac16:	4649      	mov	r1, r9
 801ac18:	4640      	mov	r0, r8
 801ac1a:	f7e5 ffc5 	bl	8000ba8 <__aeabi_d2uiz>
 801ac1e:	2801      	cmp	r0, #1
 801ac20:	bf38      	it	cc
 801ac22:	2001      	movcc	r0, #1
 801ac24:	f7e5 fc6e 	bl	8000504 <__aeabi_ui2d>
 801ac28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac2a:	4680      	mov	r8, r0
 801ac2c:	4689      	mov	r9, r1
 801ac2e:	bb23      	cbnz	r3, 801ac7a <_strtod_l+0xb9a>
 801ac30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac34:	9010      	str	r0, [sp, #64]	; 0x40
 801ac36:	9311      	str	r3, [sp, #68]	; 0x44
 801ac38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ac3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ac40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801ac48:	1a9b      	subs	r3, r3, r2
 801ac4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ac4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ac50:	eeb0 0a48 	vmov.f32	s0, s16
 801ac54:	eef0 0a68 	vmov.f32	s1, s17
 801ac58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ac5c:	f001 ff54 	bl	801cb08 <__ulp>
 801ac60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ac64:	ec53 2b10 	vmov	r2, r3, d0
 801ac68:	f7e5 fcc6 	bl	80005f8 <__aeabi_dmul>
 801ac6c:	ec53 2b18 	vmov	r2, r3, d8
 801ac70:	f7e5 fb0c 	bl	800028c <__adddf3>
 801ac74:	4682      	mov	sl, r0
 801ac76:	468b      	mov	fp, r1
 801ac78:	e78d      	b.n	801ab96 <_strtod_l+0xab6>
 801ac7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801ac7e:	e7db      	b.n	801ac38 <_strtod_l+0xb58>
 801ac80:	a311      	add	r3, pc, #68	; (adr r3, 801acc8 <_strtod_l+0xbe8>)
 801ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac86:	f7e5 ff29 	bl	8000adc <__aeabi_dcmplt>
 801ac8a:	e7b2      	b.n	801abf2 <_strtod_l+0xb12>
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	930a      	str	r3, [sp, #40]	; 0x28
 801ac90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ac92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ac94:	6013      	str	r3, [r2, #0]
 801ac96:	f7ff ba6b 	b.w	801a170 <_strtod_l+0x90>
 801ac9a:	2a65      	cmp	r2, #101	; 0x65
 801ac9c:	f43f ab5f 	beq.w	801a35e <_strtod_l+0x27e>
 801aca0:	2a45      	cmp	r2, #69	; 0x45
 801aca2:	f43f ab5c 	beq.w	801a35e <_strtod_l+0x27e>
 801aca6:	2301      	movs	r3, #1
 801aca8:	f7ff bb94 	b.w	801a3d4 <_strtod_l+0x2f4>
 801acac:	f3af 8000 	nop.w
 801acb0:	94a03595 	.word	0x94a03595
 801acb4:	3fdfffff 	.word	0x3fdfffff
 801acb8:	35afe535 	.word	0x35afe535
 801acbc:	3fe00000 	.word	0x3fe00000
 801acc0:	ffc00000 	.word	0xffc00000
 801acc4:	41dfffff 	.word	0x41dfffff
 801acc8:	94a03595 	.word	0x94a03595
 801accc:	3fcfffff 	.word	0x3fcfffff
 801acd0:	3ff00000 	.word	0x3ff00000
 801acd4:	7ff00000 	.word	0x7ff00000
 801acd8:	7fe00000 	.word	0x7fe00000
 801acdc:	7c9fffff 	.word	0x7c9fffff
 801ace0:	3fe00000 	.word	0x3fe00000
 801ace4:	bff00000 	.word	0xbff00000
 801ace8:	7fefffff 	.word	0x7fefffff

0801acec <_strtod_r>:
 801acec:	4b01      	ldr	r3, [pc, #4]	; (801acf4 <_strtod_r+0x8>)
 801acee:	f7ff b9f7 	b.w	801a0e0 <_strtod_l>
 801acf2:	bf00      	nop
 801acf4:	20000174 	.word	0x20000174

0801acf8 <_strtol_l.constprop.0>:
 801acf8:	2b01      	cmp	r3, #1
 801acfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acfe:	d001      	beq.n	801ad04 <_strtol_l.constprop.0+0xc>
 801ad00:	2b24      	cmp	r3, #36	; 0x24
 801ad02:	d906      	bls.n	801ad12 <_strtol_l.constprop.0+0x1a>
 801ad04:	f000 ff1a 	bl	801bb3c <__errno>
 801ad08:	2316      	movs	r3, #22
 801ad0a:	6003      	str	r3, [r0, #0]
 801ad0c:	2000      	movs	r0, #0
 801ad0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801adf8 <_strtol_l.constprop.0+0x100>
 801ad16:	460d      	mov	r5, r1
 801ad18:	462e      	mov	r6, r5
 801ad1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801ad22:	f017 0708 	ands.w	r7, r7, #8
 801ad26:	d1f7      	bne.n	801ad18 <_strtol_l.constprop.0+0x20>
 801ad28:	2c2d      	cmp	r4, #45	; 0x2d
 801ad2a:	d132      	bne.n	801ad92 <_strtol_l.constprop.0+0x9a>
 801ad2c:	782c      	ldrb	r4, [r5, #0]
 801ad2e:	2701      	movs	r7, #1
 801ad30:	1cb5      	adds	r5, r6, #2
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d05b      	beq.n	801adee <_strtol_l.constprop.0+0xf6>
 801ad36:	2b10      	cmp	r3, #16
 801ad38:	d109      	bne.n	801ad4e <_strtol_l.constprop.0+0x56>
 801ad3a:	2c30      	cmp	r4, #48	; 0x30
 801ad3c:	d107      	bne.n	801ad4e <_strtol_l.constprop.0+0x56>
 801ad3e:	782c      	ldrb	r4, [r5, #0]
 801ad40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ad44:	2c58      	cmp	r4, #88	; 0x58
 801ad46:	d14d      	bne.n	801ade4 <_strtol_l.constprop.0+0xec>
 801ad48:	786c      	ldrb	r4, [r5, #1]
 801ad4a:	2310      	movs	r3, #16
 801ad4c:	3502      	adds	r5, #2
 801ad4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801ad52:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad56:	f04f 0c00 	mov.w	ip, #0
 801ad5a:	fbb8 f9f3 	udiv	r9, r8, r3
 801ad5e:	4666      	mov	r6, ip
 801ad60:	fb03 8a19 	mls	sl, r3, r9, r8
 801ad64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801ad68:	f1be 0f09 	cmp.w	lr, #9
 801ad6c:	d816      	bhi.n	801ad9c <_strtol_l.constprop.0+0xa4>
 801ad6e:	4674      	mov	r4, lr
 801ad70:	42a3      	cmp	r3, r4
 801ad72:	dd24      	ble.n	801adbe <_strtol_l.constprop.0+0xc6>
 801ad74:	f1bc 0f00 	cmp.w	ip, #0
 801ad78:	db1e      	blt.n	801adb8 <_strtol_l.constprop.0+0xc0>
 801ad7a:	45b1      	cmp	r9, r6
 801ad7c:	d31c      	bcc.n	801adb8 <_strtol_l.constprop.0+0xc0>
 801ad7e:	d101      	bne.n	801ad84 <_strtol_l.constprop.0+0x8c>
 801ad80:	45a2      	cmp	sl, r4
 801ad82:	db19      	blt.n	801adb8 <_strtol_l.constprop.0+0xc0>
 801ad84:	fb06 4603 	mla	r6, r6, r3, r4
 801ad88:	f04f 0c01 	mov.w	ip, #1
 801ad8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad90:	e7e8      	b.n	801ad64 <_strtol_l.constprop.0+0x6c>
 801ad92:	2c2b      	cmp	r4, #43	; 0x2b
 801ad94:	bf04      	itt	eq
 801ad96:	782c      	ldrbeq	r4, [r5, #0]
 801ad98:	1cb5      	addeq	r5, r6, #2
 801ad9a:	e7ca      	b.n	801ad32 <_strtol_l.constprop.0+0x3a>
 801ad9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801ada0:	f1be 0f19 	cmp.w	lr, #25
 801ada4:	d801      	bhi.n	801adaa <_strtol_l.constprop.0+0xb2>
 801ada6:	3c37      	subs	r4, #55	; 0x37
 801ada8:	e7e2      	b.n	801ad70 <_strtol_l.constprop.0+0x78>
 801adaa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801adae:	f1be 0f19 	cmp.w	lr, #25
 801adb2:	d804      	bhi.n	801adbe <_strtol_l.constprop.0+0xc6>
 801adb4:	3c57      	subs	r4, #87	; 0x57
 801adb6:	e7db      	b.n	801ad70 <_strtol_l.constprop.0+0x78>
 801adb8:	f04f 3cff 	mov.w	ip, #4294967295
 801adbc:	e7e6      	b.n	801ad8c <_strtol_l.constprop.0+0x94>
 801adbe:	f1bc 0f00 	cmp.w	ip, #0
 801adc2:	da05      	bge.n	801add0 <_strtol_l.constprop.0+0xd8>
 801adc4:	2322      	movs	r3, #34	; 0x22
 801adc6:	6003      	str	r3, [r0, #0]
 801adc8:	4646      	mov	r6, r8
 801adca:	b942      	cbnz	r2, 801adde <_strtol_l.constprop.0+0xe6>
 801adcc:	4630      	mov	r0, r6
 801adce:	e79e      	b.n	801ad0e <_strtol_l.constprop.0+0x16>
 801add0:	b107      	cbz	r7, 801add4 <_strtol_l.constprop.0+0xdc>
 801add2:	4276      	negs	r6, r6
 801add4:	2a00      	cmp	r2, #0
 801add6:	d0f9      	beq.n	801adcc <_strtol_l.constprop.0+0xd4>
 801add8:	f1bc 0f00 	cmp.w	ip, #0
 801addc:	d000      	beq.n	801ade0 <_strtol_l.constprop.0+0xe8>
 801adde:	1e69      	subs	r1, r5, #1
 801ade0:	6011      	str	r1, [r2, #0]
 801ade2:	e7f3      	b.n	801adcc <_strtol_l.constprop.0+0xd4>
 801ade4:	2430      	movs	r4, #48	; 0x30
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d1b1      	bne.n	801ad4e <_strtol_l.constprop.0+0x56>
 801adea:	2308      	movs	r3, #8
 801adec:	e7af      	b.n	801ad4e <_strtol_l.constprop.0+0x56>
 801adee:	2c30      	cmp	r4, #48	; 0x30
 801adf0:	d0a5      	beq.n	801ad3e <_strtol_l.constprop.0+0x46>
 801adf2:	230a      	movs	r3, #10
 801adf4:	e7ab      	b.n	801ad4e <_strtol_l.constprop.0+0x56>
 801adf6:	bf00      	nop
 801adf8:	0801fe09 	.word	0x0801fe09

0801adfc <_strtol_r>:
 801adfc:	f7ff bf7c 	b.w	801acf8 <_strtol_l.constprop.0>

0801ae00 <_write_r>:
 801ae00:	b538      	push	{r3, r4, r5, lr}
 801ae02:	4d07      	ldr	r5, [pc, #28]	; (801ae20 <_write_r+0x20>)
 801ae04:	4604      	mov	r4, r0
 801ae06:	4608      	mov	r0, r1
 801ae08:	4611      	mov	r1, r2
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	602a      	str	r2, [r5, #0]
 801ae0e:	461a      	mov	r2, r3
 801ae10:	f004 fbd2 	bl	801f5b8 <_write>
 801ae14:	1c43      	adds	r3, r0, #1
 801ae16:	d102      	bne.n	801ae1e <_write_r+0x1e>
 801ae18:	682b      	ldr	r3, [r5, #0]
 801ae1a:	b103      	cbz	r3, 801ae1e <_write_r+0x1e>
 801ae1c:	6023      	str	r3, [r4, #0]
 801ae1e:	bd38      	pop	{r3, r4, r5, pc}
 801ae20:	2000e554 	.word	0x2000e554

0801ae24 <_close_r>:
 801ae24:	b538      	push	{r3, r4, r5, lr}
 801ae26:	4d06      	ldr	r5, [pc, #24]	; (801ae40 <_close_r+0x1c>)
 801ae28:	2300      	movs	r3, #0
 801ae2a:	4604      	mov	r4, r0
 801ae2c:	4608      	mov	r0, r1
 801ae2e:	602b      	str	r3, [r5, #0]
 801ae30:	f004 fb7c 	bl	801f52c <_close>
 801ae34:	1c43      	adds	r3, r0, #1
 801ae36:	d102      	bne.n	801ae3e <_close_r+0x1a>
 801ae38:	682b      	ldr	r3, [r5, #0]
 801ae3a:	b103      	cbz	r3, 801ae3e <_close_r+0x1a>
 801ae3c:	6023      	str	r3, [r4, #0]
 801ae3e:	bd38      	pop	{r3, r4, r5, pc}
 801ae40:	2000e554 	.word	0x2000e554

0801ae44 <quorem>:
 801ae44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae48:	6903      	ldr	r3, [r0, #16]
 801ae4a:	690c      	ldr	r4, [r1, #16]
 801ae4c:	42a3      	cmp	r3, r4
 801ae4e:	4607      	mov	r7, r0
 801ae50:	f2c0 8081 	blt.w	801af56 <quorem+0x112>
 801ae54:	3c01      	subs	r4, #1
 801ae56:	f101 0814 	add.w	r8, r1, #20
 801ae5a:	f100 0514 	add.w	r5, r0, #20
 801ae5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ae62:	9301      	str	r3, [sp, #4]
 801ae64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ae68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ae6c:	3301      	adds	r3, #1
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ae74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ae78:	fbb2 f6f3 	udiv	r6, r2, r3
 801ae7c:	d331      	bcc.n	801aee2 <quorem+0x9e>
 801ae7e:	f04f 0e00 	mov.w	lr, #0
 801ae82:	4640      	mov	r0, r8
 801ae84:	46ac      	mov	ip, r5
 801ae86:	46f2      	mov	sl, lr
 801ae88:	f850 2b04 	ldr.w	r2, [r0], #4
 801ae8c:	b293      	uxth	r3, r2
 801ae8e:	fb06 e303 	mla	r3, r6, r3, lr
 801ae92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ae96:	b29b      	uxth	r3, r3
 801ae98:	ebaa 0303 	sub.w	r3, sl, r3
 801ae9c:	f8dc a000 	ldr.w	sl, [ip]
 801aea0:	0c12      	lsrs	r2, r2, #16
 801aea2:	fa13 f38a 	uxtah	r3, r3, sl
 801aea6:	fb06 e202 	mla	r2, r6, r2, lr
 801aeaa:	9300      	str	r3, [sp, #0]
 801aeac:	9b00      	ldr	r3, [sp, #0]
 801aeae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801aeb2:	b292      	uxth	r2, r2
 801aeb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801aeb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801aebc:	f8bd 3000 	ldrh.w	r3, [sp]
 801aec0:	4581      	cmp	r9, r0
 801aec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aec6:	f84c 3b04 	str.w	r3, [ip], #4
 801aeca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801aece:	d2db      	bcs.n	801ae88 <quorem+0x44>
 801aed0:	f855 300b 	ldr.w	r3, [r5, fp]
 801aed4:	b92b      	cbnz	r3, 801aee2 <quorem+0x9e>
 801aed6:	9b01      	ldr	r3, [sp, #4]
 801aed8:	3b04      	subs	r3, #4
 801aeda:	429d      	cmp	r5, r3
 801aedc:	461a      	mov	r2, r3
 801aede:	d32e      	bcc.n	801af3e <quorem+0xfa>
 801aee0:	613c      	str	r4, [r7, #16]
 801aee2:	4638      	mov	r0, r7
 801aee4:	f001 fd6a 	bl	801c9bc <__mcmp>
 801aee8:	2800      	cmp	r0, #0
 801aeea:	db24      	blt.n	801af36 <quorem+0xf2>
 801aeec:	3601      	adds	r6, #1
 801aeee:	4628      	mov	r0, r5
 801aef0:	f04f 0c00 	mov.w	ip, #0
 801aef4:	f858 2b04 	ldr.w	r2, [r8], #4
 801aef8:	f8d0 e000 	ldr.w	lr, [r0]
 801aefc:	b293      	uxth	r3, r2
 801aefe:	ebac 0303 	sub.w	r3, ip, r3
 801af02:	0c12      	lsrs	r2, r2, #16
 801af04:	fa13 f38e 	uxtah	r3, r3, lr
 801af08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801af0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801af10:	b29b      	uxth	r3, r3
 801af12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801af16:	45c1      	cmp	r9, r8
 801af18:	f840 3b04 	str.w	r3, [r0], #4
 801af1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801af20:	d2e8      	bcs.n	801aef4 <quorem+0xb0>
 801af22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801af26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801af2a:	b922      	cbnz	r2, 801af36 <quorem+0xf2>
 801af2c:	3b04      	subs	r3, #4
 801af2e:	429d      	cmp	r5, r3
 801af30:	461a      	mov	r2, r3
 801af32:	d30a      	bcc.n	801af4a <quorem+0x106>
 801af34:	613c      	str	r4, [r7, #16]
 801af36:	4630      	mov	r0, r6
 801af38:	b003      	add	sp, #12
 801af3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af3e:	6812      	ldr	r2, [r2, #0]
 801af40:	3b04      	subs	r3, #4
 801af42:	2a00      	cmp	r2, #0
 801af44:	d1cc      	bne.n	801aee0 <quorem+0x9c>
 801af46:	3c01      	subs	r4, #1
 801af48:	e7c7      	b.n	801aeda <quorem+0x96>
 801af4a:	6812      	ldr	r2, [r2, #0]
 801af4c:	3b04      	subs	r3, #4
 801af4e:	2a00      	cmp	r2, #0
 801af50:	d1f0      	bne.n	801af34 <quorem+0xf0>
 801af52:	3c01      	subs	r4, #1
 801af54:	e7eb      	b.n	801af2e <quorem+0xea>
 801af56:	2000      	movs	r0, #0
 801af58:	e7ee      	b.n	801af38 <quorem+0xf4>
 801af5a:	0000      	movs	r0, r0
 801af5c:	0000      	movs	r0, r0
	...

0801af60 <_dtoa_r>:
 801af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af64:	ed2d 8b04 	vpush	{d8-d9}
 801af68:	ec57 6b10 	vmov	r6, r7, d0
 801af6c:	b093      	sub	sp, #76	; 0x4c
 801af6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801af70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801af74:	9106      	str	r1, [sp, #24]
 801af76:	ee10 aa10 	vmov	sl, s0
 801af7a:	4604      	mov	r4, r0
 801af7c:	9209      	str	r2, [sp, #36]	; 0x24
 801af7e:	930c      	str	r3, [sp, #48]	; 0x30
 801af80:	46bb      	mov	fp, r7
 801af82:	b975      	cbnz	r5, 801afa2 <_dtoa_r+0x42>
 801af84:	2010      	movs	r0, #16
 801af86:	f001 fa27 	bl	801c3d8 <malloc>
 801af8a:	4602      	mov	r2, r0
 801af8c:	6260      	str	r0, [r4, #36]	; 0x24
 801af8e:	b920      	cbnz	r0, 801af9a <_dtoa_r+0x3a>
 801af90:	4ba7      	ldr	r3, [pc, #668]	; (801b230 <_dtoa_r+0x2d0>)
 801af92:	21ea      	movs	r1, #234	; 0xea
 801af94:	48a7      	ldr	r0, [pc, #668]	; (801b234 <_dtoa_r+0x2d4>)
 801af96:	f002 f901 	bl	801d19c <__assert_func>
 801af9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801af9e:	6005      	str	r5, [r0, #0]
 801afa0:	60c5      	str	r5, [r0, #12]
 801afa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afa4:	6819      	ldr	r1, [r3, #0]
 801afa6:	b151      	cbz	r1, 801afbe <_dtoa_r+0x5e>
 801afa8:	685a      	ldr	r2, [r3, #4]
 801afaa:	604a      	str	r2, [r1, #4]
 801afac:	2301      	movs	r3, #1
 801afae:	4093      	lsls	r3, r2
 801afb0:	608b      	str	r3, [r1, #8]
 801afb2:	4620      	mov	r0, r4
 801afb4:	f001 fa76 	bl	801c4a4 <_Bfree>
 801afb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afba:	2200      	movs	r2, #0
 801afbc:	601a      	str	r2, [r3, #0]
 801afbe:	1e3b      	subs	r3, r7, #0
 801afc0:	bfaa      	itet	ge
 801afc2:	2300      	movge	r3, #0
 801afc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801afc8:	f8c8 3000 	strge.w	r3, [r8]
 801afcc:	4b9a      	ldr	r3, [pc, #616]	; (801b238 <_dtoa_r+0x2d8>)
 801afce:	bfbc      	itt	lt
 801afd0:	2201      	movlt	r2, #1
 801afd2:	f8c8 2000 	strlt.w	r2, [r8]
 801afd6:	ea33 030b 	bics.w	r3, r3, fp
 801afda:	d11b      	bne.n	801b014 <_dtoa_r+0xb4>
 801afdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801afde:	f242 730f 	movw	r3, #9999	; 0x270f
 801afe2:	6013      	str	r3, [r2, #0]
 801afe4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801afe8:	4333      	orrs	r3, r6
 801afea:	f000 8592 	beq.w	801bb12 <_dtoa_r+0xbb2>
 801afee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aff0:	b963      	cbnz	r3, 801b00c <_dtoa_r+0xac>
 801aff2:	4b92      	ldr	r3, [pc, #584]	; (801b23c <_dtoa_r+0x2dc>)
 801aff4:	e022      	b.n	801b03c <_dtoa_r+0xdc>
 801aff6:	4b92      	ldr	r3, [pc, #584]	; (801b240 <_dtoa_r+0x2e0>)
 801aff8:	9301      	str	r3, [sp, #4]
 801affa:	3308      	adds	r3, #8
 801affc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801affe:	6013      	str	r3, [r2, #0]
 801b000:	9801      	ldr	r0, [sp, #4]
 801b002:	b013      	add	sp, #76	; 0x4c
 801b004:	ecbd 8b04 	vpop	{d8-d9}
 801b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b00c:	4b8b      	ldr	r3, [pc, #556]	; (801b23c <_dtoa_r+0x2dc>)
 801b00e:	9301      	str	r3, [sp, #4]
 801b010:	3303      	adds	r3, #3
 801b012:	e7f3      	b.n	801affc <_dtoa_r+0x9c>
 801b014:	2200      	movs	r2, #0
 801b016:	2300      	movs	r3, #0
 801b018:	4650      	mov	r0, sl
 801b01a:	4659      	mov	r1, fp
 801b01c:	f7e5 fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 801b020:	ec4b ab19 	vmov	d9, sl, fp
 801b024:	4680      	mov	r8, r0
 801b026:	b158      	cbz	r0, 801b040 <_dtoa_r+0xe0>
 801b028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b02a:	2301      	movs	r3, #1
 801b02c:	6013      	str	r3, [r2, #0]
 801b02e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b030:	2b00      	cmp	r3, #0
 801b032:	f000 856b 	beq.w	801bb0c <_dtoa_r+0xbac>
 801b036:	4883      	ldr	r0, [pc, #524]	; (801b244 <_dtoa_r+0x2e4>)
 801b038:	6018      	str	r0, [r3, #0]
 801b03a:	1e43      	subs	r3, r0, #1
 801b03c:	9301      	str	r3, [sp, #4]
 801b03e:	e7df      	b.n	801b000 <_dtoa_r+0xa0>
 801b040:	ec4b ab10 	vmov	d0, sl, fp
 801b044:	aa10      	add	r2, sp, #64	; 0x40
 801b046:	a911      	add	r1, sp, #68	; 0x44
 801b048:	4620      	mov	r0, r4
 801b04a:	f001 fdd9 	bl	801cc00 <__d2b>
 801b04e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b052:	ee08 0a10 	vmov	s16, r0
 801b056:	2d00      	cmp	r5, #0
 801b058:	f000 8084 	beq.w	801b164 <_dtoa_r+0x204>
 801b05c:	ee19 3a90 	vmov	r3, s19
 801b060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b064:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b068:	4656      	mov	r6, sl
 801b06a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b06e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b072:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b076:	4b74      	ldr	r3, [pc, #464]	; (801b248 <_dtoa_r+0x2e8>)
 801b078:	2200      	movs	r2, #0
 801b07a:	4630      	mov	r0, r6
 801b07c:	4639      	mov	r1, r7
 801b07e:	f7e5 f903 	bl	8000288 <__aeabi_dsub>
 801b082:	a365      	add	r3, pc, #404	; (adr r3, 801b218 <_dtoa_r+0x2b8>)
 801b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b088:	f7e5 fab6 	bl	80005f8 <__aeabi_dmul>
 801b08c:	a364      	add	r3, pc, #400	; (adr r3, 801b220 <_dtoa_r+0x2c0>)
 801b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b092:	f7e5 f8fb 	bl	800028c <__adddf3>
 801b096:	4606      	mov	r6, r0
 801b098:	4628      	mov	r0, r5
 801b09a:	460f      	mov	r7, r1
 801b09c:	f7e5 fa42 	bl	8000524 <__aeabi_i2d>
 801b0a0:	a361      	add	r3, pc, #388	; (adr r3, 801b228 <_dtoa_r+0x2c8>)
 801b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0a6:	f7e5 faa7 	bl	80005f8 <__aeabi_dmul>
 801b0aa:	4602      	mov	r2, r0
 801b0ac:	460b      	mov	r3, r1
 801b0ae:	4630      	mov	r0, r6
 801b0b0:	4639      	mov	r1, r7
 801b0b2:	f7e5 f8eb 	bl	800028c <__adddf3>
 801b0b6:	4606      	mov	r6, r0
 801b0b8:	460f      	mov	r7, r1
 801b0ba:	f7e5 fd4d 	bl	8000b58 <__aeabi_d2iz>
 801b0be:	2200      	movs	r2, #0
 801b0c0:	9000      	str	r0, [sp, #0]
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	4630      	mov	r0, r6
 801b0c6:	4639      	mov	r1, r7
 801b0c8:	f7e5 fd08 	bl	8000adc <__aeabi_dcmplt>
 801b0cc:	b150      	cbz	r0, 801b0e4 <_dtoa_r+0x184>
 801b0ce:	9800      	ldr	r0, [sp, #0]
 801b0d0:	f7e5 fa28 	bl	8000524 <__aeabi_i2d>
 801b0d4:	4632      	mov	r2, r6
 801b0d6:	463b      	mov	r3, r7
 801b0d8:	f7e5 fcf6 	bl	8000ac8 <__aeabi_dcmpeq>
 801b0dc:	b910      	cbnz	r0, 801b0e4 <_dtoa_r+0x184>
 801b0de:	9b00      	ldr	r3, [sp, #0]
 801b0e0:	3b01      	subs	r3, #1
 801b0e2:	9300      	str	r3, [sp, #0]
 801b0e4:	9b00      	ldr	r3, [sp, #0]
 801b0e6:	2b16      	cmp	r3, #22
 801b0e8:	d85a      	bhi.n	801b1a0 <_dtoa_r+0x240>
 801b0ea:	9a00      	ldr	r2, [sp, #0]
 801b0ec:	4b57      	ldr	r3, [pc, #348]	; (801b24c <_dtoa_r+0x2ec>)
 801b0ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f6:	ec51 0b19 	vmov	r0, r1, d9
 801b0fa:	f7e5 fcef 	bl	8000adc <__aeabi_dcmplt>
 801b0fe:	2800      	cmp	r0, #0
 801b100:	d050      	beq.n	801b1a4 <_dtoa_r+0x244>
 801b102:	9b00      	ldr	r3, [sp, #0]
 801b104:	3b01      	subs	r3, #1
 801b106:	9300      	str	r3, [sp, #0]
 801b108:	2300      	movs	r3, #0
 801b10a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b10c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b10e:	1b5d      	subs	r5, r3, r5
 801b110:	1e6b      	subs	r3, r5, #1
 801b112:	9305      	str	r3, [sp, #20]
 801b114:	bf45      	ittet	mi
 801b116:	f1c5 0301 	rsbmi	r3, r5, #1
 801b11a:	9304      	strmi	r3, [sp, #16]
 801b11c:	2300      	movpl	r3, #0
 801b11e:	2300      	movmi	r3, #0
 801b120:	bf4c      	ite	mi
 801b122:	9305      	strmi	r3, [sp, #20]
 801b124:	9304      	strpl	r3, [sp, #16]
 801b126:	9b00      	ldr	r3, [sp, #0]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	db3d      	blt.n	801b1a8 <_dtoa_r+0x248>
 801b12c:	9b05      	ldr	r3, [sp, #20]
 801b12e:	9a00      	ldr	r2, [sp, #0]
 801b130:	920a      	str	r2, [sp, #40]	; 0x28
 801b132:	4413      	add	r3, r2
 801b134:	9305      	str	r3, [sp, #20]
 801b136:	2300      	movs	r3, #0
 801b138:	9307      	str	r3, [sp, #28]
 801b13a:	9b06      	ldr	r3, [sp, #24]
 801b13c:	2b09      	cmp	r3, #9
 801b13e:	f200 8089 	bhi.w	801b254 <_dtoa_r+0x2f4>
 801b142:	2b05      	cmp	r3, #5
 801b144:	bfc4      	itt	gt
 801b146:	3b04      	subgt	r3, #4
 801b148:	9306      	strgt	r3, [sp, #24]
 801b14a:	9b06      	ldr	r3, [sp, #24]
 801b14c:	f1a3 0302 	sub.w	r3, r3, #2
 801b150:	bfcc      	ite	gt
 801b152:	2500      	movgt	r5, #0
 801b154:	2501      	movle	r5, #1
 801b156:	2b03      	cmp	r3, #3
 801b158:	f200 8087 	bhi.w	801b26a <_dtoa_r+0x30a>
 801b15c:	e8df f003 	tbb	[pc, r3]
 801b160:	59383a2d 	.word	0x59383a2d
 801b164:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b168:	441d      	add	r5, r3
 801b16a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b16e:	2b20      	cmp	r3, #32
 801b170:	bfc1      	itttt	gt
 801b172:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b176:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b17a:	fa0b f303 	lslgt.w	r3, fp, r3
 801b17e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b182:	bfda      	itte	le
 801b184:	f1c3 0320 	rsble	r3, r3, #32
 801b188:	fa06 f003 	lslle.w	r0, r6, r3
 801b18c:	4318      	orrgt	r0, r3
 801b18e:	f7e5 f9b9 	bl	8000504 <__aeabi_ui2d>
 801b192:	2301      	movs	r3, #1
 801b194:	4606      	mov	r6, r0
 801b196:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b19a:	3d01      	subs	r5, #1
 801b19c:	930e      	str	r3, [sp, #56]	; 0x38
 801b19e:	e76a      	b.n	801b076 <_dtoa_r+0x116>
 801b1a0:	2301      	movs	r3, #1
 801b1a2:	e7b2      	b.n	801b10a <_dtoa_r+0x1aa>
 801b1a4:	900b      	str	r0, [sp, #44]	; 0x2c
 801b1a6:	e7b1      	b.n	801b10c <_dtoa_r+0x1ac>
 801b1a8:	9b04      	ldr	r3, [sp, #16]
 801b1aa:	9a00      	ldr	r2, [sp, #0]
 801b1ac:	1a9b      	subs	r3, r3, r2
 801b1ae:	9304      	str	r3, [sp, #16]
 801b1b0:	4253      	negs	r3, r2
 801b1b2:	9307      	str	r3, [sp, #28]
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	930a      	str	r3, [sp, #40]	; 0x28
 801b1b8:	e7bf      	b.n	801b13a <_dtoa_r+0x1da>
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	9308      	str	r3, [sp, #32]
 801b1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	dc55      	bgt.n	801b270 <_dtoa_r+0x310>
 801b1c4:	2301      	movs	r3, #1
 801b1c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b1ca:	461a      	mov	r2, r3
 801b1cc:	9209      	str	r2, [sp, #36]	; 0x24
 801b1ce:	e00c      	b.n	801b1ea <_dtoa_r+0x28a>
 801b1d0:	2301      	movs	r3, #1
 801b1d2:	e7f3      	b.n	801b1bc <_dtoa_r+0x25c>
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1d8:	9308      	str	r3, [sp, #32]
 801b1da:	9b00      	ldr	r3, [sp, #0]
 801b1dc:	4413      	add	r3, r2
 801b1de:	9302      	str	r3, [sp, #8]
 801b1e0:	3301      	adds	r3, #1
 801b1e2:	2b01      	cmp	r3, #1
 801b1e4:	9303      	str	r3, [sp, #12]
 801b1e6:	bfb8      	it	lt
 801b1e8:	2301      	movlt	r3, #1
 801b1ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b1ec:	2200      	movs	r2, #0
 801b1ee:	6042      	str	r2, [r0, #4]
 801b1f0:	2204      	movs	r2, #4
 801b1f2:	f102 0614 	add.w	r6, r2, #20
 801b1f6:	429e      	cmp	r6, r3
 801b1f8:	6841      	ldr	r1, [r0, #4]
 801b1fa:	d93d      	bls.n	801b278 <_dtoa_r+0x318>
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	f001 f911 	bl	801c424 <_Balloc>
 801b202:	9001      	str	r0, [sp, #4]
 801b204:	2800      	cmp	r0, #0
 801b206:	d13b      	bne.n	801b280 <_dtoa_r+0x320>
 801b208:	4b11      	ldr	r3, [pc, #68]	; (801b250 <_dtoa_r+0x2f0>)
 801b20a:	4602      	mov	r2, r0
 801b20c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b210:	e6c0      	b.n	801af94 <_dtoa_r+0x34>
 801b212:	2301      	movs	r3, #1
 801b214:	e7df      	b.n	801b1d6 <_dtoa_r+0x276>
 801b216:	bf00      	nop
 801b218:	636f4361 	.word	0x636f4361
 801b21c:	3fd287a7 	.word	0x3fd287a7
 801b220:	8b60c8b3 	.word	0x8b60c8b3
 801b224:	3fc68a28 	.word	0x3fc68a28
 801b228:	509f79fb 	.word	0x509f79fb
 801b22c:	3fd34413 	.word	0x3fd34413
 801b230:	0801ff16 	.word	0x0801ff16
 801b234:	0801ff2d 	.word	0x0801ff2d
 801b238:	7ff00000 	.word	0x7ff00000
 801b23c:	0801ff12 	.word	0x0801ff12
 801b240:	0801ff09 	.word	0x0801ff09
 801b244:	0801fd8d 	.word	0x0801fd8d
 801b248:	3ff80000 	.word	0x3ff80000
 801b24c:	08020098 	.word	0x08020098
 801b250:	0801ff88 	.word	0x0801ff88
 801b254:	2501      	movs	r5, #1
 801b256:	2300      	movs	r3, #0
 801b258:	9306      	str	r3, [sp, #24]
 801b25a:	9508      	str	r5, [sp, #32]
 801b25c:	f04f 33ff 	mov.w	r3, #4294967295
 801b260:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b264:	2200      	movs	r2, #0
 801b266:	2312      	movs	r3, #18
 801b268:	e7b0      	b.n	801b1cc <_dtoa_r+0x26c>
 801b26a:	2301      	movs	r3, #1
 801b26c:	9308      	str	r3, [sp, #32]
 801b26e:	e7f5      	b.n	801b25c <_dtoa_r+0x2fc>
 801b270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b272:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b276:	e7b8      	b.n	801b1ea <_dtoa_r+0x28a>
 801b278:	3101      	adds	r1, #1
 801b27a:	6041      	str	r1, [r0, #4]
 801b27c:	0052      	lsls	r2, r2, #1
 801b27e:	e7b8      	b.n	801b1f2 <_dtoa_r+0x292>
 801b280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b282:	9a01      	ldr	r2, [sp, #4]
 801b284:	601a      	str	r2, [r3, #0]
 801b286:	9b03      	ldr	r3, [sp, #12]
 801b288:	2b0e      	cmp	r3, #14
 801b28a:	f200 809d 	bhi.w	801b3c8 <_dtoa_r+0x468>
 801b28e:	2d00      	cmp	r5, #0
 801b290:	f000 809a 	beq.w	801b3c8 <_dtoa_r+0x468>
 801b294:	9b00      	ldr	r3, [sp, #0]
 801b296:	2b00      	cmp	r3, #0
 801b298:	dd32      	ble.n	801b300 <_dtoa_r+0x3a0>
 801b29a:	4ab7      	ldr	r2, [pc, #732]	; (801b578 <_dtoa_r+0x618>)
 801b29c:	f003 030f 	and.w	r3, r3, #15
 801b2a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b2a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b2a8:	9b00      	ldr	r3, [sp, #0]
 801b2aa:	05d8      	lsls	r0, r3, #23
 801b2ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b2b0:	d516      	bpl.n	801b2e0 <_dtoa_r+0x380>
 801b2b2:	4bb2      	ldr	r3, [pc, #712]	; (801b57c <_dtoa_r+0x61c>)
 801b2b4:	ec51 0b19 	vmov	r0, r1, d9
 801b2b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b2bc:	f7e5 fac6 	bl	800084c <__aeabi_ddiv>
 801b2c0:	f007 070f 	and.w	r7, r7, #15
 801b2c4:	4682      	mov	sl, r0
 801b2c6:	468b      	mov	fp, r1
 801b2c8:	2503      	movs	r5, #3
 801b2ca:	4eac      	ldr	r6, [pc, #688]	; (801b57c <_dtoa_r+0x61c>)
 801b2cc:	b957      	cbnz	r7, 801b2e4 <_dtoa_r+0x384>
 801b2ce:	4642      	mov	r2, r8
 801b2d0:	464b      	mov	r3, r9
 801b2d2:	4650      	mov	r0, sl
 801b2d4:	4659      	mov	r1, fp
 801b2d6:	f7e5 fab9 	bl	800084c <__aeabi_ddiv>
 801b2da:	4682      	mov	sl, r0
 801b2dc:	468b      	mov	fp, r1
 801b2de:	e028      	b.n	801b332 <_dtoa_r+0x3d2>
 801b2e0:	2502      	movs	r5, #2
 801b2e2:	e7f2      	b.n	801b2ca <_dtoa_r+0x36a>
 801b2e4:	07f9      	lsls	r1, r7, #31
 801b2e6:	d508      	bpl.n	801b2fa <_dtoa_r+0x39a>
 801b2e8:	4640      	mov	r0, r8
 801b2ea:	4649      	mov	r1, r9
 801b2ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b2f0:	f7e5 f982 	bl	80005f8 <__aeabi_dmul>
 801b2f4:	3501      	adds	r5, #1
 801b2f6:	4680      	mov	r8, r0
 801b2f8:	4689      	mov	r9, r1
 801b2fa:	107f      	asrs	r7, r7, #1
 801b2fc:	3608      	adds	r6, #8
 801b2fe:	e7e5      	b.n	801b2cc <_dtoa_r+0x36c>
 801b300:	f000 809b 	beq.w	801b43a <_dtoa_r+0x4da>
 801b304:	9b00      	ldr	r3, [sp, #0]
 801b306:	4f9d      	ldr	r7, [pc, #628]	; (801b57c <_dtoa_r+0x61c>)
 801b308:	425e      	negs	r6, r3
 801b30a:	4b9b      	ldr	r3, [pc, #620]	; (801b578 <_dtoa_r+0x618>)
 801b30c:	f006 020f 	and.w	r2, r6, #15
 801b310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b318:	ec51 0b19 	vmov	r0, r1, d9
 801b31c:	f7e5 f96c 	bl	80005f8 <__aeabi_dmul>
 801b320:	1136      	asrs	r6, r6, #4
 801b322:	4682      	mov	sl, r0
 801b324:	468b      	mov	fp, r1
 801b326:	2300      	movs	r3, #0
 801b328:	2502      	movs	r5, #2
 801b32a:	2e00      	cmp	r6, #0
 801b32c:	d17a      	bne.n	801b424 <_dtoa_r+0x4c4>
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d1d3      	bne.n	801b2da <_dtoa_r+0x37a>
 801b332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b334:	2b00      	cmp	r3, #0
 801b336:	f000 8082 	beq.w	801b43e <_dtoa_r+0x4de>
 801b33a:	4b91      	ldr	r3, [pc, #580]	; (801b580 <_dtoa_r+0x620>)
 801b33c:	2200      	movs	r2, #0
 801b33e:	4650      	mov	r0, sl
 801b340:	4659      	mov	r1, fp
 801b342:	f7e5 fbcb 	bl	8000adc <__aeabi_dcmplt>
 801b346:	2800      	cmp	r0, #0
 801b348:	d079      	beq.n	801b43e <_dtoa_r+0x4de>
 801b34a:	9b03      	ldr	r3, [sp, #12]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d076      	beq.n	801b43e <_dtoa_r+0x4de>
 801b350:	9b02      	ldr	r3, [sp, #8]
 801b352:	2b00      	cmp	r3, #0
 801b354:	dd36      	ble.n	801b3c4 <_dtoa_r+0x464>
 801b356:	9b00      	ldr	r3, [sp, #0]
 801b358:	4650      	mov	r0, sl
 801b35a:	4659      	mov	r1, fp
 801b35c:	1e5f      	subs	r7, r3, #1
 801b35e:	2200      	movs	r2, #0
 801b360:	4b88      	ldr	r3, [pc, #544]	; (801b584 <_dtoa_r+0x624>)
 801b362:	f7e5 f949 	bl	80005f8 <__aeabi_dmul>
 801b366:	9e02      	ldr	r6, [sp, #8]
 801b368:	4682      	mov	sl, r0
 801b36a:	468b      	mov	fp, r1
 801b36c:	3501      	adds	r5, #1
 801b36e:	4628      	mov	r0, r5
 801b370:	f7e5 f8d8 	bl	8000524 <__aeabi_i2d>
 801b374:	4652      	mov	r2, sl
 801b376:	465b      	mov	r3, fp
 801b378:	f7e5 f93e 	bl	80005f8 <__aeabi_dmul>
 801b37c:	4b82      	ldr	r3, [pc, #520]	; (801b588 <_dtoa_r+0x628>)
 801b37e:	2200      	movs	r2, #0
 801b380:	f7e4 ff84 	bl	800028c <__adddf3>
 801b384:	46d0      	mov	r8, sl
 801b386:	46d9      	mov	r9, fp
 801b388:	4682      	mov	sl, r0
 801b38a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b38e:	2e00      	cmp	r6, #0
 801b390:	d158      	bne.n	801b444 <_dtoa_r+0x4e4>
 801b392:	4b7e      	ldr	r3, [pc, #504]	; (801b58c <_dtoa_r+0x62c>)
 801b394:	2200      	movs	r2, #0
 801b396:	4640      	mov	r0, r8
 801b398:	4649      	mov	r1, r9
 801b39a:	f7e4 ff75 	bl	8000288 <__aeabi_dsub>
 801b39e:	4652      	mov	r2, sl
 801b3a0:	465b      	mov	r3, fp
 801b3a2:	4680      	mov	r8, r0
 801b3a4:	4689      	mov	r9, r1
 801b3a6:	f7e5 fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 801b3aa:	2800      	cmp	r0, #0
 801b3ac:	f040 8295 	bne.w	801b8da <_dtoa_r+0x97a>
 801b3b0:	4652      	mov	r2, sl
 801b3b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b3b6:	4640      	mov	r0, r8
 801b3b8:	4649      	mov	r1, r9
 801b3ba:	f7e5 fb8f 	bl	8000adc <__aeabi_dcmplt>
 801b3be:	2800      	cmp	r0, #0
 801b3c0:	f040 8289 	bne.w	801b8d6 <_dtoa_r+0x976>
 801b3c4:	ec5b ab19 	vmov	sl, fp, d9
 801b3c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	f2c0 8148 	blt.w	801b660 <_dtoa_r+0x700>
 801b3d0:	9a00      	ldr	r2, [sp, #0]
 801b3d2:	2a0e      	cmp	r2, #14
 801b3d4:	f300 8144 	bgt.w	801b660 <_dtoa_r+0x700>
 801b3d8:	4b67      	ldr	r3, [pc, #412]	; (801b578 <_dtoa_r+0x618>)
 801b3da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b3de:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	f280 80d5 	bge.w	801b594 <_dtoa_r+0x634>
 801b3ea:	9b03      	ldr	r3, [sp, #12]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	f300 80d1 	bgt.w	801b594 <_dtoa_r+0x634>
 801b3f2:	f040 826f 	bne.w	801b8d4 <_dtoa_r+0x974>
 801b3f6:	4b65      	ldr	r3, [pc, #404]	; (801b58c <_dtoa_r+0x62c>)
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	4640      	mov	r0, r8
 801b3fc:	4649      	mov	r1, r9
 801b3fe:	f7e5 f8fb 	bl	80005f8 <__aeabi_dmul>
 801b402:	4652      	mov	r2, sl
 801b404:	465b      	mov	r3, fp
 801b406:	f7e5 fb7d 	bl	8000b04 <__aeabi_dcmpge>
 801b40a:	9e03      	ldr	r6, [sp, #12]
 801b40c:	4637      	mov	r7, r6
 801b40e:	2800      	cmp	r0, #0
 801b410:	f040 8245 	bne.w	801b89e <_dtoa_r+0x93e>
 801b414:	9d01      	ldr	r5, [sp, #4]
 801b416:	2331      	movs	r3, #49	; 0x31
 801b418:	f805 3b01 	strb.w	r3, [r5], #1
 801b41c:	9b00      	ldr	r3, [sp, #0]
 801b41e:	3301      	adds	r3, #1
 801b420:	9300      	str	r3, [sp, #0]
 801b422:	e240      	b.n	801b8a6 <_dtoa_r+0x946>
 801b424:	07f2      	lsls	r2, r6, #31
 801b426:	d505      	bpl.n	801b434 <_dtoa_r+0x4d4>
 801b428:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b42c:	f7e5 f8e4 	bl	80005f8 <__aeabi_dmul>
 801b430:	3501      	adds	r5, #1
 801b432:	2301      	movs	r3, #1
 801b434:	1076      	asrs	r6, r6, #1
 801b436:	3708      	adds	r7, #8
 801b438:	e777      	b.n	801b32a <_dtoa_r+0x3ca>
 801b43a:	2502      	movs	r5, #2
 801b43c:	e779      	b.n	801b332 <_dtoa_r+0x3d2>
 801b43e:	9f00      	ldr	r7, [sp, #0]
 801b440:	9e03      	ldr	r6, [sp, #12]
 801b442:	e794      	b.n	801b36e <_dtoa_r+0x40e>
 801b444:	9901      	ldr	r1, [sp, #4]
 801b446:	4b4c      	ldr	r3, [pc, #304]	; (801b578 <_dtoa_r+0x618>)
 801b448:	4431      	add	r1, r6
 801b44a:	910d      	str	r1, [sp, #52]	; 0x34
 801b44c:	9908      	ldr	r1, [sp, #32]
 801b44e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b452:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b456:	2900      	cmp	r1, #0
 801b458:	d043      	beq.n	801b4e2 <_dtoa_r+0x582>
 801b45a:	494d      	ldr	r1, [pc, #308]	; (801b590 <_dtoa_r+0x630>)
 801b45c:	2000      	movs	r0, #0
 801b45e:	f7e5 f9f5 	bl	800084c <__aeabi_ddiv>
 801b462:	4652      	mov	r2, sl
 801b464:	465b      	mov	r3, fp
 801b466:	f7e4 ff0f 	bl	8000288 <__aeabi_dsub>
 801b46a:	9d01      	ldr	r5, [sp, #4]
 801b46c:	4682      	mov	sl, r0
 801b46e:	468b      	mov	fp, r1
 801b470:	4649      	mov	r1, r9
 801b472:	4640      	mov	r0, r8
 801b474:	f7e5 fb70 	bl	8000b58 <__aeabi_d2iz>
 801b478:	4606      	mov	r6, r0
 801b47a:	f7e5 f853 	bl	8000524 <__aeabi_i2d>
 801b47e:	4602      	mov	r2, r0
 801b480:	460b      	mov	r3, r1
 801b482:	4640      	mov	r0, r8
 801b484:	4649      	mov	r1, r9
 801b486:	f7e4 feff 	bl	8000288 <__aeabi_dsub>
 801b48a:	3630      	adds	r6, #48	; 0x30
 801b48c:	f805 6b01 	strb.w	r6, [r5], #1
 801b490:	4652      	mov	r2, sl
 801b492:	465b      	mov	r3, fp
 801b494:	4680      	mov	r8, r0
 801b496:	4689      	mov	r9, r1
 801b498:	f7e5 fb20 	bl	8000adc <__aeabi_dcmplt>
 801b49c:	2800      	cmp	r0, #0
 801b49e:	d163      	bne.n	801b568 <_dtoa_r+0x608>
 801b4a0:	4642      	mov	r2, r8
 801b4a2:	464b      	mov	r3, r9
 801b4a4:	4936      	ldr	r1, [pc, #216]	; (801b580 <_dtoa_r+0x620>)
 801b4a6:	2000      	movs	r0, #0
 801b4a8:	f7e4 feee 	bl	8000288 <__aeabi_dsub>
 801b4ac:	4652      	mov	r2, sl
 801b4ae:	465b      	mov	r3, fp
 801b4b0:	f7e5 fb14 	bl	8000adc <__aeabi_dcmplt>
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	f040 80b5 	bne.w	801b624 <_dtoa_r+0x6c4>
 801b4ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4bc:	429d      	cmp	r5, r3
 801b4be:	d081      	beq.n	801b3c4 <_dtoa_r+0x464>
 801b4c0:	4b30      	ldr	r3, [pc, #192]	; (801b584 <_dtoa_r+0x624>)
 801b4c2:	2200      	movs	r2, #0
 801b4c4:	4650      	mov	r0, sl
 801b4c6:	4659      	mov	r1, fp
 801b4c8:	f7e5 f896 	bl	80005f8 <__aeabi_dmul>
 801b4cc:	4b2d      	ldr	r3, [pc, #180]	; (801b584 <_dtoa_r+0x624>)
 801b4ce:	4682      	mov	sl, r0
 801b4d0:	468b      	mov	fp, r1
 801b4d2:	4640      	mov	r0, r8
 801b4d4:	4649      	mov	r1, r9
 801b4d6:	2200      	movs	r2, #0
 801b4d8:	f7e5 f88e 	bl	80005f8 <__aeabi_dmul>
 801b4dc:	4680      	mov	r8, r0
 801b4de:	4689      	mov	r9, r1
 801b4e0:	e7c6      	b.n	801b470 <_dtoa_r+0x510>
 801b4e2:	4650      	mov	r0, sl
 801b4e4:	4659      	mov	r1, fp
 801b4e6:	f7e5 f887 	bl	80005f8 <__aeabi_dmul>
 801b4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4ec:	9d01      	ldr	r5, [sp, #4]
 801b4ee:	930f      	str	r3, [sp, #60]	; 0x3c
 801b4f0:	4682      	mov	sl, r0
 801b4f2:	468b      	mov	fp, r1
 801b4f4:	4649      	mov	r1, r9
 801b4f6:	4640      	mov	r0, r8
 801b4f8:	f7e5 fb2e 	bl	8000b58 <__aeabi_d2iz>
 801b4fc:	4606      	mov	r6, r0
 801b4fe:	f7e5 f811 	bl	8000524 <__aeabi_i2d>
 801b502:	3630      	adds	r6, #48	; 0x30
 801b504:	4602      	mov	r2, r0
 801b506:	460b      	mov	r3, r1
 801b508:	4640      	mov	r0, r8
 801b50a:	4649      	mov	r1, r9
 801b50c:	f7e4 febc 	bl	8000288 <__aeabi_dsub>
 801b510:	f805 6b01 	strb.w	r6, [r5], #1
 801b514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b516:	429d      	cmp	r5, r3
 801b518:	4680      	mov	r8, r0
 801b51a:	4689      	mov	r9, r1
 801b51c:	f04f 0200 	mov.w	r2, #0
 801b520:	d124      	bne.n	801b56c <_dtoa_r+0x60c>
 801b522:	4b1b      	ldr	r3, [pc, #108]	; (801b590 <_dtoa_r+0x630>)
 801b524:	4650      	mov	r0, sl
 801b526:	4659      	mov	r1, fp
 801b528:	f7e4 feb0 	bl	800028c <__adddf3>
 801b52c:	4602      	mov	r2, r0
 801b52e:	460b      	mov	r3, r1
 801b530:	4640      	mov	r0, r8
 801b532:	4649      	mov	r1, r9
 801b534:	f7e5 faf0 	bl	8000b18 <__aeabi_dcmpgt>
 801b538:	2800      	cmp	r0, #0
 801b53a:	d173      	bne.n	801b624 <_dtoa_r+0x6c4>
 801b53c:	4652      	mov	r2, sl
 801b53e:	465b      	mov	r3, fp
 801b540:	4913      	ldr	r1, [pc, #76]	; (801b590 <_dtoa_r+0x630>)
 801b542:	2000      	movs	r0, #0
 801b544:	f7e4 fea0 	bl	8000288 <__aeabi_dsub>
 801b548:	4602      	mov	r2, r0
 801b54a:	460b      	mov	r3, r1
 801b54c:	4640      	mov	r0, r8
 801b54e:	4649      	mov	r1, r9
 801b550:	f7e5 fac4 	bl	8000adc <__aeabi_dcmplt>
 801b554:	2800      	cmp	r0, #0
 801b556:	f43f af35 	beq.w	801b3c4 <_dtoa_r+0x464>
 801b55a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b55c:	1e6b      	subs	r3, r5, #1
 801b55e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b560:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b564:	2b30      	cmp	r3, #48	; 0x30
 801b566:	d0f8      	beq.n	801b55a <_dtoa_r+0x5fa>
 801b568:	9700      	str	r7, [sp, #0]
 801b56a:	e049      	b.n	801b600 <_dtoa_r+0x6a0>
 801b56c:	4b05      	ldr	r3, [pc, #20]	; (801b584 <_dtoa_r+0x624>)
 801b56e:	f7e5 f843 	bl	80005f8 <__aeabi_dmul>
 801b572:	4680      	mov	r8, r0
 801b574:	4689      	mov	r9, r1
 801b576:	e7bd      	b.n	801b4f4 <_dtoa_r+0x594>
 801b578:	08020098 	.word	0x08020098
 801b57c:	08020070 	.word	0x08020070
 801b580:	3ff00000 	.word	0x3ff00000
 801b584:	40240000 	.word	0x40240000
 801b588:	401c0000 	.word	0x401c0000
 801b58c:	40140000 	.word	0x40140000
 801b590:	3fe00000 	.word	0x3fe00000
 801b594:	9d01      	ldr	r5, [sp, #4]
 801b596:	4656      	mov	r6, sl
 801b598:	465f      	mov	r7, fp
 801b59a:	4642      	mov	r2, r8
 801b59c:	464b      	mov	r3, r9
 801b59e:	4630      	mov	r0, r6
 801b5a0:	4639      	mov	r1, r7
 801b5a2:	f7e5 f953 	bl	800084c <__aeabi_ddiv>
 801b5a6:	f7e5 fad7 	bl	8000b58 <__aeabi_d2iz>
 801b5aa:	4682      	mov	sl, r0
 801b5ac:	f7e4 ffba 	bl	8000524 <__aeabi_i2d>
 801b5b0:	4642      	mov	r2, r8
 801b5b2:	464b      	mov	r3, r9
 801b5b4:	f7e5 f820 	bl	80005f8 <__aeabi_dmul>
 801b5b8:	4602      	mov	r2, r0
 801b5ba:	460b      	mov	r3, r1
 801b5bc:	4630      	mov	r0, r6
 801b5be:	4639      	mov	r1, r7
 801b5c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801b5c4:	f7e4 fe60 	bl	8000288 <__aeabi_dsub>
 801b5c8:	f805 6b01 	strb.w	r6, [r5], #1
 801b5cc:	9e01      	ldr	r6, [sp, #4]
 801b5ce:	9f03      	ldr	r7, [sp, #12]
 801b5d0:	1bae      	subs	r6, r5, r6
 801b5d2:	42b7      	cmp	r7, r6
 801b5d4:	4602      	mov	r2, r0
 801b5d6:	460b      	mov	r3, r1
 801b5d8:	d135      	bne.n	801b646 <_dtoa_r+0x6e6>
 801b5da:	f7e4 fe57 	bl	800028c <__adddf3>
 801b5de:	4642      	mov	r2, r8
 801b5e0:	464b      	mov	r3, r9
 801b5e2:	4606      	mov	r6, r0
 801b5e4:	460f      	mov	r7, r1
 801b5e6:	f7e5 fa97 	bl	8000b18 <__aeabi_dcmpgt>
 801b5ea:	b9d0      	cbnz	r0, 801b622 <_dtoa_r+0x6c2>
 801b5ec:	4642      	mov	r2, r8
 801b5ee:	464b      	mov	r3, r9
 801b5f0:	4630      	mov	r0, r6
 801b5f2:	4639      	mov	r1, r7
 801b5f4:	f7e5 fa68 	bl	8000ac8 <__aeabi_dcmpeq>
 801b5f8:	b110      	cbz	r0, 801b600 <_dtoa_r+0x6a0>
 801b5fa:	f01a 0f01 	tst.w	sl, #1
 801b5fe:	d110      	bne.n	801b622 <_dtoa_r+0x6c2>
 801b600:	4620      	mov	r0, r4
 801b602:	ee18 1a10 	vmov	r1, s16
 801b606:	f000 ff4d 	bl	801c4a4 <_Bfree>
 801b60a:	2300      	movs	r3, #0
 801b60c:	9800      	ldr	r0, [sp, #0]
 801b60e:	702b      	strb	r3, [r5, #0]
 801b610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b612:	3001      	adds	r0, #1
 801b614:	6018      	str	r0, [r3, #0]
 801b616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b618:	2b00      	cmp	r3, #0
 801b61a:	f43f acf1 	beq.w	801b000 <_dtoa_r+0xa0>
 801b61e:	601d      	str	r5, [r3, #0]
 801b620:	e4ee      	b.n	801b000 <_dtoa_r+0xa0>
 801b622:	9f00      	ldr	r7, [sp, #0]
 801b624:	462b      	mov	r3, r5
 801b626:	461d      	mov	r5, r3
 801b628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b62c:	2a39      	cmp	r2, #57	; 0x39
 801b62e:	d106      	bne.n	801b63e <_dtoa_r+0x6de>
 801b630:	9a01      	ldr	r2, [sp, #4]
 801b632:	429a      	cmp	r2, r3
 801b634:	d1f7      	bne.n	801b626 <_dtoa_r+0x6c6>
 801b636:	9901      	ldr	r1, [sp, #4]
 801b638:	2230      	movs	r2, #48	; 0x30
 801b63a:	3701      	adds	r7, #1
 801b63c:	700a      	strb	r2, [r1, #0]
 801b63e:	781a      	ldrb	r2, [r3, #0]
 801b640:	3201      	adds	r2, #1
 801b642:	701a      	strb	r2, [r3, #0]
 801b644:	e790      	b.n	801b568 <_dtoa_r+0x608>
 801b646:	4ba6      	ldr	r3, [pc, #664]	; (801b8e0 <_dtoa_r+0x980>)
 801b648:	2200      	movs	r2, #0
 801b64a:	f7e4 ffd5 	bl	80005f8 <__aeabi_dmul>
 801b64e:	2200      	movs	r2, #0
 801b650:	2300      	movs	r3, #0
 801b652:	4606      	mov	r6, r0
 801b654:	460f      	mov	r7, r1
 801b656:	f7e5 fa37 	bl	8000ac8 <__aeabi_dcmpeq>
 801b65a:	2800      	cmp	r0, #0
 801b65c:	d09d      	beq.n	801b59a <_dtoa_r+0x63a>
 801b65e:	e7cf      	b.n	801b600 <_dtoa_r+0x6a0>
 801b660:	9a08      	ldr	r2, [sp, #32]
 801b662:	2a00      	cmp	r2, #0
 801b664:	f000 80d7 	beq.w	801b816 <_dtoa_r+0x8b6>
 801b668:	9a06      	ldr	r2, [sp, #24]
 801b66a:	2a01      	cmp	r2, #1
 801b66c:	f300 80ba 	bgt.w	801b7e4 <_dtoa_r+0x884>
 801b670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b672:	2a00      	cmp	r2, #0
 801b674:	f000 80b2 	beq.w	801b7dc <_dtoa_r+0x87c>
 801b678:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b67c:	9e07      	ldr	r6, [sp, #28]
 801b67e:	9d04      	ldr	r5, [sp, #16]
 801b680:	9a04      	ldr	r2, [sp, #16]
 801b682:	441a      	add	r2, r3
 801b684:	9204      	str	r2, [sp, #16]
 801b686:	9a05      	ldr	r2, [sp, #20]
 801b688:	2101      	movs	r1, #1
 801b68a:	441a      	add	r2, r3
 801b68c:	4620      	mov	r0, r4
 801b68e:	9205      	str	r2, [sp, #20]
 801b690:	f001 f80a 	bl	801c6a8 <__i2b>
 801b694:	4607      	mov	r7, r0
 801b696:	2d00      	cmp	r5, #0
 801b698:	dd0c      	ble.n	801b6b4 <_dtoa_r+0x754>
 801b69a:	9b05      	ldr	r3, [sp, #20]
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	dd09      	ble.n	801b6b4 <_dtoa_r+0x754>
 801b6a0:	42ab      	cmp	r3, r5
 801b6a2:	9a04      	ldr	r2, [sp, #16]
 801b6a4:	bfa8      	it	ge
 801b6a6:	462b      	movge	r3, r5
 801b6a8:	1ad2      	subs	r2, r2, r3
 801b6aa:	9204      	str	r2, [sp, #16]
 801b6ac:	9a05      	ldr	r2, [sp, #20]
 801b6ae:	1aed      	subs	r5, r5, r3
 801b6b0:	1ad3      	subs	r3, r2, r3
 801b6b2:	9305      	str	r3, [sp, #20]
 801b6b4:	9b07      	ldr	r3, [sp, #28]
 801b6b6:	b31b      	cbz	r3, 801b700 <_dtoa_r+0x7a0>
 801b6b8:	9b08      	ldr	r3, [sp, #32]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	f000 80af 	beq.w	801b81e <_dtoa_r+0x8be>
 801b6c0:	2e00      	cmp	r6, #0
 801b6c2:	dd13      	ble.n	801b6ec <_dtoa_r+0x78c>
 801b6c4:	4639      	mov	r1, r7
 801b6c6:	4632      	mov	r2, r6
 801b6c8:	4620      	mov	r0, r4
 801b6ca:	f001 f8ad 	bl	801c828 <__pow5mult>
 801b6ce:	ee18 2a10 	vmov	r2, s16
 801b6d2:	4601      	mov	r1, r0
 801b6d4:	4607      	mov	r7, r0
 801b6d6:	4620      	mov	r0, r4
 801b6d8:	f000 fffc 	bl	801c6d4 <__multiply>
 801b6dc:	ee18 1a10 	vmov	r1, s16
 801b6e0:	4680      	mov	r8, r0
 801b6e2:	4620      	mov	r0, r4
 801b6e4:	f000 fede 	bl	801c4a4 <_Bfree>
 801b6e8:	ee08 8a10 	vmov	s16, r8
 801b6ec:	9b07      	ldr	r3, [sp, #28]
 801b6ee:	1b9a      	subs	r2, r3, r6
 801b6f0:	d006      	beq.n	801b700 <_dtoa_r+0x7a0>
 801b6f2:	ee18 1a10 	vmov	r1, s16
 801b6f6:	4620      	mov	r0, r4
 801b6f8:	f001 f896 	bl	801c828 <__pow5mult>
 801b6fc:	ee08 0a10 	vmov	s16, r0
 801b700:	2101      	movs	r1, #1
 801b702:	4620      	mov	r0, r4
 801b704:	f000 ffd0 	bl	801c6a8 <__i2b>
 801b708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	4606      	mov	r6, r0
 801b70e:	f340 8088 	ble.w	801b822 <_dtoa_r+0x8c2>
 801b712:	461a      	mov	r2, r3
 801b714:	4601      	mov	r1, r0
 801b716:	4620      	mov	r0, r4
 801b718:	f001 f886 	bl	801c828 <__pow5mult>
 801b71c:	9b06      	ldr	r3, [sp, #24]
 801b71e:	2b01      	cmp	r3, #1
 801b720:	4606      	mov	r6, r0
 801b722:	f340 8081 	ble.w	801b828 <_dtoa_r+0x8c8>
 801b726:	f04f 0800 	mov.w	r8, #0
 801b72a:	6933      	ldr	r3, [r6, #16]
 801b72c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b730:	6918      	ldr	r0, [r3, #16]
 801b732:	f000 ff69 	bl	801c608 <__hi0bits>
 801b736:	f1c0 0020 	rsb	r0, r0, #32
 801b73a:	9b05      	ldr	r3, [sp, #20]
 801b73c:	4418      	add	r0, r3
 801b73e:	f010 001f 	ands.w	r0, r0, #31
 801b742:	f000 8092 	beq.w	801b86a <_dtoa_r+0x90a>
 801b746:	f1c0 0320 	rsb	r3, r0, #32
 801b74a:	2b04      	cmp	r3, #4
 801b74c:	f340 808a 	ble.w	801b864 <_dtoa_r+0x904>
 801b750:	f1c0 001c 	rsb	r0, r0, #28
 801b754:	9b04      	ldr	r3, [sp, #16]
 801b756:	4403      	add	r3, r0
 801b758:	9304      	str	r3, [sp, #16]
 801b75a:	9b05      	ldr	r3, [sp, #20]
 801b75c:	4403      	add	r3, r0
 801b75e:	4405      	add	r5, r0
 801b760:	9305      	str	r3, [sp, #20]
 801b762:	9b04      	ldr	r3, [sp, #16]
 801b764:	2b00      	cmp	r3, #0
 801b766:	dd07      	ble.n	801b778 <_dtoa_r+0x818>
 801b768:	ee18 1a10 	vmov	r1, s16
 801b76c:	461a      	mov	r2, r3
 801b76e:	4620      	mov	r0, r4
 801b770:	f001 f8b4 	bl	801c8dc <__lshift>
 801b774:	ee08 0a10 	vmov	s16, r0
 801b778:	9b05      	ldr	r3, [sp, #20]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	dd05      	ble.n	801b78a <_dtoa_r+0x82a>
 801b77e:	4631      	mov	r1, r6
 801b780:	461a      	mov	r2, r3
 801b782:	4620      	mov	r0, r4
 801b784:	f001 f8aa 	bl	801c8dc <__lshift>
 801b788:	4606      	mov	r6, r0
 801b78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d06e      	beq.n	801b86e <_dtoa_r+0x90e>
 801b790:	ee18 0a10 	vmov	r0, s16
 801b794:	4631      	mov	r1, r6
 801b796:	f001 f911 	bl	801c9bc <__mcmp>
 801b79a:	2800      	cmp	r0, #0
 801b79c:	da67      	bge.n	801b86e <_dtoa_r+0x90e>
 801b79e:	9b00      	ldr	r3, [sp, #0]
 801b7a0:	3b01      	subs	r3, #1
 801b7a2:	ee18 1a10 	vmov	r1, s16
 801b7a6:	9300      	str	r3, [sp, #0]
 801b7a8:	220a      	movs	r2, #10
 801b7aa:	2300      	movs	r3, #0
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	f000 fe9b 	bl	801c4e8 <__multadd>
 801b7b2:	9b08      	ldr	r3, [sp, #32]
 801b7b4:	ee08 0a10 	vmov	s16, r0
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	f000 81b1 	beq.w	801bb20 <_dtoa_r+0xbc0>
 801b7be:	2300      	movs	r3, #0
 801b7c0:	4639      	mov	r1, r7
 801b7c2:	220a      	movs	r2, #10
 801b7c4:	4620      	mov	r0, r4
 801b7c6:	f000 fe8f 	bl	801c4e8 <__multadd>
 801b7ca:	9b02      	ldr	r3, [sp, #8]
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	4607      	mov	r7, r0
 801b7d0:	f300 808e 	bgt.w	801b8f0 <_dtoa_r+0x990>
 801b7d4:	9b06      	ldr	r3, [sp, #24]
 801b7d6:	2b02      	cmp	r3, #2
 801b7d8:	dc51      	bgt.n	801b87e <_dtoa_r+0x91e>
 801b7da:	e089      	b.n	801b8f0 <_dtoa_r+0x990>
 801b7dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b7de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b7e2:	e74b      	b.n	801b67c <_dtoa_r+0x71c>
 801b7e4:	9b03      	ldr	r3, [sp, #12]
 801b7e6:	1e5e      	subs	r6, r3, #1
 801b7e8:	9b07      	ldr	r3, [sp, #28]
 801b7ea:	42b3      	cmp	r3, r6
 801b7ec:	bfbf      	itttt	lt
 801b7ee:	9b07      	ldrlt	r3, [sp, #28]
 801b7f0:	9607      	strlt	r6, [sp, #28]
 801b7f2:	1af2      	sublt	r2, r6, r3
 801b7f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801b7f6:	bfb6      	itet	lt
 801b7f8:	189b      	addlt	r3, r3, r2
 801b7fa:	1b9e      	subge	r6, r3, r6
 801b7fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801b7fe:	9b03      	ldr	r3, [sp, #12]
 801b800:	bfb8      	it	lt
 801b802:	2600      	movlt	r6, #0
 801b804:	2b00      	cmp	r3, #0
 801b806:	bfb7      	itett	lt
 801b808:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801b80c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801b810:	1a9d      	sublt	r5, r3, r2
 801b812:	2300      	movlt	r3, #0
 801b814:	e734      	b.n	801b680 <_dtoa_r+0x720>
 801b816:	9e07      	ldr	r6, [sp, #28]
 801b818:	9d04      	ldr	r5, [sp, #16]
 801b81a:	9f08      	ldr	r7, [sp, #32]
 801b81c:	e73b      	b.n	801b696 <_dtoa_r+0x736>
 801b81e:	9a07      	ldr	r2, [sp, #28]
 801b820:	e767      	b.n	801b6f2 <_dtoa_r+0x792>
 801b822:	9b06      	ldr	r3, [sp, #24]
 801b824:	2b01      	cmp	r3, #1
 801b826:	dc18      	bgt.n	801b85a <_dtoa_r+0x8fa>
 801b828:	f1ba 0f00 	cmp.w	sl, #0
 801b82c:	d115      	bne.n	801b85a <_dtoa_r+0x8fa>
 801b82e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b832:	b993      	cbnz	r3, 801b85a <_dtoa_r+0x8fa>
 801b834:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b838:	0d1b      	lsrs	r3, r3, #20
 801b83a:	051b      	lsls	r3, r3, #20
 801b83c:	b183      	cbz	r3, 801b860 <_dtoa_r+0x900>
 801b83e:	9b04      	ldr	r3, [sp, #16]
 801b840:	3301      	adds	r3, #1
 801b842:	9304      	str	r3, [sp, #16]
 801b844:	9b05      	ldr	r3, [sp, #20]
 801b846:	3301      	adds	r3, #1
 801b848:	9305      	str	r3, [sp, #20]
 801b84a:	f04f 0801 	mov.w	r8, #1
 801b84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b850:	2b00      	cmp	r3, #0
 801b852:	f47f af6a 	bne.w	801b72a <_dtoa_r+0x7ca>
 801b856:	2001      	movs	r0, #1
 801b858:	e76f      	b.n	801b73a <_dtoa_r+0x7da>
 801b85a:	f04f 0800 	mov.w	r8, #0
 801b85e:	e7f6      	b.n	801b84e <_dtoa_r+0x8ee>
 801b860:	4698      	mov	r8, r3
 801b862:	e7f4      	b.n	801b84e <_dtoa_r+0x8ee>
 801b864:	f43f af7d 	beq.w	801b762 <_dtoa_r+0x802>
 801b868:	4618      	mov	r0, r3
 801b86a:	301c      	adds	r0, #28
 801b86c:	e772      	b.n	801b754 <_dtoa_r+0x7f4>
 801b86e:	9b03      	ldr	r3, [sp, #12]
 801b870:	2b00      	cmp	r3, #0
 801b872:	dc37      	bgt.n	801b8e4 <_dtoa_r+0x984>
 801b874:	9b06      	ldr	r3, [sp, #24]
 801b876:	2b02      	cmp	r3, #2
 801b878:	dd34      	ble.n	801b8e4 <_dtoa_r+0x984>
 801b87a:	9b03      	ldr	r3, [sp, #12]
 801b87c:	9302      	str	r3, [sp, #8]
 801b87e:	9b02      	ldr	r3, [sp, #8]
 801b880:	b96b      	cbnz	r3, 801b89e <_dtoa_r+0x93e>
 801b882:	4631      	mov	r1, r6
 801b884:	2205      	movs	r2, #5
 801b886:	4620      	mov	r0, r4
 801b888:	f000 fe2e 	bl	801c4e8 <__multadd>
 801b88c:	4601      	mov	r1, r0
 801b88e:	4606      	mov	r6, r0
 801b890:	ee18 0a10 	vmov	r0, s16
 801b894:	f001 f892 	bl	801c9bc <__mcmp>
 801b898:	2800      	cmp	r0, #0
 801b89a:	f73f adbb 	bgt.w	801b414 <_dtoa_r+0x4b4>
 801b89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8a0:	9d01      	ldr	r5, [sp, #4]
 801b8a2:	43db      	mvns	r3, r3
 801b8a4:	9300      	str	r3, [sp, #0]
 801b8a6:	f04f 0800 	mov.w	r8, #0
 801b8aa:	4631      	mov	r1, r6
 801b8ac:	4620      	mov	r0, r4
 801b8ae:	f000 fdf9 	bl	801c4a4 <_Bfree>
 801b8b2:	2f00      	cmp	r7, #0
 801b8b4:	f43f aea4 	beq.w	801b600 <_dtoa_r+0x6a0>
 801b8b8:	f1b8 0f00 	cmp.w	r8, #0
 801b8bc:	d005      	beq.n	801b8ca <_dtoa_r+0x96a>
 801b8be:	45b8      	cmp	r8, r7
 801b8c0:	d003      	beq.n	801b8ca <_dtoa_r+0x96a>
 801b8c2:	4641      	mov	r1, r8
 801b8c4:	4620      	mov	r0, r4
 801b8c6:	f000 fded 	bl	801c4a4 <_Bfree>
 801b8ca:	4639      	mov	r1, r7
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	f000 fde9 	bl	801c4a4 <_Bfree>
 801b8d2:	e695      	b.n	801b600 <_dtoa_r+0x6a0>
 801b8d4:	2600      	movs	r6, #0
 801b8d6:	4637      	mov	r7, r6
 801b8d8:	e7e1      	b.n	801b89e <_dtoa_r+0x93e>
 801b8da:	9700      	str	r7, [sp, #0]
 801b8dc:	4637      	mov	r7, r6
 801b8de:	e599      	b.n	801b414 <_dtoa_r+0x4b4>
 801b8e0:	40240000 	.word	0x40240000
 801b8e4:	9b08      	ldr	r3, [sp, #32]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	f000 80ca 	beq.w	801ba80 <_dtoa_r+0xb20>
 801b8ec:	9b03      	ldr	r3, [sp, #12]
 801b8ee:	9302      	str	r3, [sp, #8]
 801b8f0:	2d00      	cmp	r5, #0
 801b8f2:	dd05      	ble.n	801b900 <_dtoa_r+0x9a0>
 801b8f4:	4639      	mov	r1, r7
 801b8f6:	462a      	mov	r2, r5
 801b8f8:	4620      	mov	r0, r4
 801b8fa:	f000 ffef 	bl	801c8dc <__lshift>
 801b8fe:	4607      	mov	r7, r0
 801b900:	f1b8 0f00 	cmp.w	r8, #0
 801b904:	d05b      	beq.n	801b9be <_dtoa_r+0xa5e>
 801b906:	6879      	ldr	r1, [r7, #4]
 801b908:	4620      	mov	r0, r4
 801b90a:	f000 fd8b 	bl	801c424 <_Balloc>
 801b90e:	4605      	mov	r5, r0
 801b910:	b928      	cbnz	r0, 801b91e <_dtoa_r+0x9be>
 801b912:	4b87      	ldr	r3, [pc, #540]	; (801bb30 <_dtoa_r+0xbd0>)
 801b914:	4602      	mov	r2, r0
 801b916:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b91a:	f7ff bb3b 	b.w	801af94 <_dtoa_r+0x34>
 801b91e:	693a      	ldr	r2, [r7, #16]
 801b920:	3202      	adds	r2, #2
 801b922:	0092      	lsls	r2, r2, #2
 801b924:	f107 010c 	add.w	r1, r7, #12
 801b928:	300c      	adds	r0, #12
 801b92a:	f7fd fbb4 	bl	8019096 <memcpy>
 801b92e:	2201      	movs	r2, #1
 801b930:	4629      	mov	r1, r5
 801b932:	4620      	mov	r0, r4
 801b934:	f000 ffd2 	bl	801c8dc <__lshift>
 801b938:	9b01      	ldr	r3, [sp, #4]
 801b93a:	f103 0901 	add.w	r9, r3, #1
 801b93e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b942:	4413      	add	r3, r2
 801b944:	9305      	str	r3, [sp, #20]
 801b946:	f00a 0301 	and.w	r3, sl, #1
 801b94a:	46b8      	mov	r8, r7
 801b94c:	9304      	str	r3, [sp, #16]
 801b94e:	4607      	mov	r7, r0
 801b950:	4631      	mov	r1, r6
 801b952:	ee18 0a10 	vmov	r0, s16
 801b956:	f7ff fa75 	bl	801ae44 <quorem>
 801b95a:	4641      	mov	r1, r8
 801b95c:	9002      	str	r0, [sp, #8]
 801b95e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b962:	ee18 0a10 	vmov	r0, s16
 801b966:	f001 f829 	bl	801c9bc <__mcmp>
 801b96a:	463a      	mov	r2, r7
 801b96c:	9003      	str	r0, [sp, #12]
 801b96e:	4631      	mov	r1, r6
 801b970:	4620      	mov	r0, r4
 801b972:	f001 f83f 	bl	801c9f4 <__mdiff>
 801b976:	68c2      	ldr	r2, [r0, #12]
 801b978:	f109 3bff 	add.w	fp, r9, #4294967295
 801b97c:	4605      	mov	r5, r0
 801b97e:	bb02      	cbnz	r2, 801b9c2 <_dtoa_r+0xa62>
 801b980:	4601      	mov	r1, r0
 801b982:	ee18 0a10 	vmov	r0, s16
 801b986:	f001 f819 	bl	801c9bc <__mcmp>
 801b98a:	4602      	mov	r2, r0
 801b98c:	4629      	mov	r1, r5
 801b98e:	4620      	mov	r0, r4
 801b990:	9207      	str	r2, [sp, #28]
 801b992:	f000 fd87 	bl	801c4a4 <_Bfree>
 801b996:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b99a:	ea43 0102 	orr.w	r1, r3, r2
 801b99e:	9b04      	ldr	r3, [sp, #16]
 801b9a0:	430b      	orrs	r3, r1
 801b9a2:	464d      	mov	r5, r9
 801b9a4:	d10f      	bne.n	801b9c6 <_dtoa_r+0xa66>
 801b9a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b9aa:	d02a      	beq.n	801ba02 <_dtoa_r+0xaa2>
 801b9ac:	9b03      	ldr	r3, [sp, #12]
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	dd02      	ble.n	801b9b8 <_dtoa_r+0xa58>
 801b9b2:	9b02      	ldr	r3, [sp, #8]
 801b9b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801b9b8:	f88b a000 	strb.w	sl, [fp]
 801b9bc:	e775      	b.n	801b8aa <_dtoa_r+0x94a>
 801b9be:	4638      	mov	r0, r7
 801b9c0:	e7ba      	b.n	801b938 <_dtoa_r+0x9d8>
 801b9c2:	2201      	movs	r2, #1
 801b9c4:	e7e2      	b.n	801b98c <_dtoa_r+0xa2c>
 801b9c6:	9b03      	ldr	r3, [sp, #12]
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	db04      	blt.n	801b9d6 <_dtoa_r+0xa76>
 801b9cc:	9906      	ldr	r1, [sp, #24]
 801b9ce:	430b      	orrs	r3, r1
 801b9d0:	9904      	ldr	r1, [sp, #16]
 801b9d2:	430b      	orrs	r3, r1
 801b9d4:	d122      	bne.n	801ba1c <_dtoa_r+0xabc>
 801b9d6:	2a00      	cmp	r2, #0
 801b9d8:	ddee      	ble.n	801b9b8 <_dtoa_r+0xa58>
 801b9da:	ee18 1a10 	vmov	r1, s16
 801b9de:	2201      	movs	r2, #1
 801b9e0:	4620      	mov	r0, r4
 801b9e2:	f000 ff7b 	bl	801c8dc <__lshift>
 801b9e6:	4631      	mov	r1, r6
 801b9e8:	ee08 0a10 	vmov	s16, r0
 801b9ec:	f000 ffe6 	bl	801c9bc <__mcmp>
 801b9f0:	2800      	cmp	r0, #0
 801b9f2:	dc03      	bgt.n	801b9fc <_dtoa_r+0xa9c>
 801b9f4:	d1e0      	bne.n	801b9b8 <_dtoa_r+0xa58>
 801b9f6:	f01a 0f01 	tst.w	sl, #1
 801b9fa:	d0dd      	beq.n	801b9b8 <_dtoa_r+0xa58>
 801b9fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ba00:	d1d7      	bne.n	801b9b2 <_dtoa_r+0xa52>
 801ba02:	2339      	movs	r3, #57	; 0x39
 801ba04:	f88b 3000 	strb.w	r3, [fp]
 801ba08:	462b      	mov	r3, r5
 801ba0a:	461d      	mov	r5, r3
 801ba0c:	3b01      	subs	r3, #1
 801ba0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ba12:	2a39      	cmp	r2, #57	; 0x39
 801ba14:	d071      	beq.n	801bafa <_dtoa_r+0xb9a>
 801ba16:	3201      	adds	r2, #1
 801ba18:	701a      	strb	r2, [r3, #0]
 801ba1a:	e746      	b.n	801b8aa <_dtoa_r+0x94a>
 801ba1c:	2a00      	cmp	r2, #0
 801ba1e:	dd07      	ble.n	801ba30 <_dtoa_r+0xad0>
 801ba20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ba24:	d0ed      	beq.n	801ba02 <_dtoa_r+0xaa2>
 801ba26:	f10a 0301 	add.w	r3, sl, #1
 801ba2a:	f88b 3000 	strb.w	r3, [fp]
 801ba2e:	e73c      	b.n	801b8aa <_dtoa_r+0x94a>
 801ba30:	9b05      	ldr	r3, [sp, #20]
 801ba32:	f809 ac01 	strb.w	sl, [r9, #-1]
 801ba36:	4599      	cmp	r9, r3
 801ba38:	d047      	beq.n	801baca <_dtoa_r+0xb6a>
 801ba3a:	ee18 1a10 	vmov	r1, s16
 801ba3e:	2300      	movs	r3, #0
 801ba40:	220a      	movs	r2, #10
 801ba42:	4620      	mov	r0, r4
 801ba44:	f000 fd50 	bl	801c4e8 <__multadd>
 801ba48:	45b8      	cmp	r8, r7
 801ba4a:	ee08 0a10 	vmov	s16, r0
 801ba4e:	f04f 0300 	mov.w	r3, #0
 801ba52:	f04f 020a 	mov.w	r2, #10
 801ba56:	4641      	mov	r1, r8
 801ba58:	4620      	mov	r0, r4
 801ba5a:	d106      	bne.n	801ba6a <_dtoa_r+0xb0a>
 801ba5c:	f000 fd44 	bl	801c4e8 <__multadd>
 801ba60:	4680      	mov	r8, r0
 801ba62:	4607      	mov	r7, r0
 801ba64:	f109 0901 	add.w	r9, r9, #1
 801ba68:	e772      	b.n	801b950 <_dtoa_r+0x9f0>
 801ba6a:	f000 fd3d 	bl	801c4e8 <__multadd>
 801ba6e:	4639      	mov	r1, r7
 801ba70:	4680      	mov	r8, r0
 801ba72:	2300      	movs	r3, #0
 801ba74:	220a      	movs	r2, #10
 801ba76:	4620      	mov	r0, r4
 801ba78:	f000 fd36 	bl	801c4e8 <__multadd>
 801ba7c:	4607      	mov	r7, r0
 801ba7e:	e7f1      	b.n	801ba64 <_dtoa_r+0xb04>
 801ba80:	9b03      	ldr	r3, [sp, #12]
 801ba82:	9302      	str	r3, [sp, #8]
 801ba84:	9d01      	ldr	r5, [sp, #4]
 801ba86:	ee18 0a10 	vmov	r0, s16
 801ba8a:	4631      	mov	r1, r6
 801ba8c:	f7ff f9da 	bl	801ae44 <quorem>
 801ba90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801ba94:	9b01      	ldr	r3, [sp, #4]
 801ba96:	f805 ab01 	strb.w	sl, [r5], #1
 801ba9a:	1aea      	subs	r2, r5, r3
 801ba9c:	9b02      	ldr	r3, [sp, #8]
 801ba9e:	4293      	cmp	r3, r2
 801baa0:	dd09      	ble.n	801bab6 <_dtoa_r+0xb56>
 801baa2:	ee18 1a10 	vmov	r1, s16
 801baa6:	2300      	movs	r3, #0
 801baa8:	220a      	movs	r2, #10
 801baaa:	4620      	mov	r0, r4
 801baac:	f000 fd1c 	bl	801c4e8 <__multadd>
 801bab0:	ee08 0a10 	vmov	s16, r0
 801bab4:	e7e7      	b.n	801ba86 <_dtoa_r+0xb26>
 801bab6:	9b02      	ldr	r3, [sp, #8]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	bfc8      	it	gt
 801babc:	461d      	movgt	r5, r3
 801babe:	9b01      	ldr	r3, [sp, #4]
 801bac0:	bfd8      	it	le
 801bac2:	2501      	movle	r5, #1
 801bac4:	441d      	add	r5, r3
 801bac6:	f04f 0800 	mov.w	r8, #0
 801baca:	ee18 1a10 	vmov	r1, s16
 801bace:	2201      	movs	r2, #1
 801bad0:	4620      	mov	r0, r4
 801bad2:	f000 ff03 	bl	801c8dc <__lshift>
 801bad6:	4631      	mov	r1, r6
 801bad8:	ee08 0a10 	vmov	s16, r0
 801badc:	f000 ff6e 	bl	801c9bc <__mcmp>
 801bae0:	2800      	cmp	r0, #0
 801bae2:	dc91      	bgt.n	801ba08 <_dtoa_r+0xaa8>
 801bae4:	d102      	bne.n	801baec <_dtoa_r+0xb8c>
 801bae6:	f01a 0f01 	tst.w	sl, #1
 801baea:	d18d      	bne.n	801ba08 <_dtoa_r+0xaa8>
 801baec:	462b      	mov	r3, r5
 801baee:	461d      	mov	r5, r3
 801baf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801baf4:	2a30      	cmp	r2, #48	; 0x30
 801baf6:	d0fa      	beq.n	801baee <_dtoa_r+0xb8e>
 801baf8:	e6d7      	b.n	801b8aa <_dtoa_r+0x94a>
 801bafa:	9a01      	ldr	r2, [sp, #4]
 801bafc:	429a      	cmp	r2, r3
 801bafe:	d184      	bne.n	801ba0a <_dtoa_r+0xaaa>
 801bb00:	9b00      	ldr	r3, [sp, #0]
 801bb02:	3301      	adds	r3, #1
 801bb04:	9300      	str	r3, [sp, #0]
 801bb06:	2331      	movs	r3, #49	; 0x31
 801bb08:	7013      	strb	r3, [r2, #0]
 801bb0a:	e6ce      	b.n	801b8aa <_dtoa_r+0x94a>
 801bb0c:	4b09      	ldr	r3, [pc, #36]	; (801bb34 <_dtoa_r+0xbd4>)
 801bb0e:	f7ff ba95 	b.w	801b03c <_dtoa_r+0xdc>
 801bb12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	f47f aa6e 	bne.w	801aff6 <_dtoa_r+0x96>
 801bb1a:	4b07      	ldr	r3, [pc, #28]	; (801bb38 <_dtoa_r+0xbd8>)
 801bb1c:	f7ff ba8e 	b.w	801b03c <_dtoa_r+0xdc>
 801bb20:	9b02      	ldr	r3, [sp, #8]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	dcae      	bgt.n	801ba84 <_dtoa_r+0xb24>
 801bb26:	9b06      	ldr	r3, [sp, #24]
 801bb28:	2b02      	cmp	r3, #2
 801bb2a:	f73f aea8 	bgt.w	801b87e <_dtoa_r+0x91e>
 801bb2e:	e7a9      	b.n	801ba84 <_dtoa_r+0xb24>
 801bb30:	0801ff88 	.word	0x0801ff88
 801bb34:	0801fd8c 	.word	0x0801fd8c
 801bb38:	0801ff09 	.word	0x0801ff09

0801bb3c <__errno>:
 801bb3c:	4b01      	ldr	r3, [pc, #4]	; (801bb44 <__errno+0x8>)
 801bb3e:	6818      	ldr	r0, [r3, #0]
 801bb40:	4770      	bx	lr
 801bb42:	bf00      	nop
 801bb44:	2000010c 	.word	0x2000010c

0801bb48 <__sflush_r>:
 801bb48:	898a      	ldrh	r2, [r1, #12]
 801bb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb4e:	4605      	mov	r5, r0
 801bb50:	0710      	lsls	r0, r2, #28
 801bb52:	460c      	mov	r4, r1
 801bb54:	d458      	bmi.n	801bc08 <__sflush_r+0xc0>
 801bb56:	684b      	ldr	r3, [r1, #4]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	dc05      	bgt.n	801bb68 <__sflush_r+0x20>
 801bb5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	dc02      	bgt.n	801bb68 <__sflush_r+0x20>
 801bb62:	2000      	movs	r0, #0
 801bb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb6a:	2e00      	cmp	r6, #0
 801bb6c:	d0f9      	beq.n	801bb62 <__sflush_r+0x1a>
 801bb6e:	2300      	movs	r3, #0
 801bb70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bb74:	682f      	ldr	r7, [r5, #0]
 801bb76:	602b      	str	r3, [r5, #0]
 801bb78:	d032      	beq.n	801bbe0 <__sflush_r+0x98>
 801bb7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bb7c:	89a3      	ldrh	r3, [r4, #12]
 801bb7e:	075a      	lsls	r2, r3, #29
 801bb80:	d505      	bpl.n	801bb8e <__sflush_r+0x46>
 801bb82:	6863      	ldr	r3, [r4, #4]
 801bb84:	1ac0      	subs	r0, r0, r3
 801bb86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bb88:	b10b      	cbz	r3, 801bb8e <__sflush_r+0x46>
 801bb8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bb8c:	1ac0      	subs	r0, r0, r3
 801bb8e:	2300      	movs	r3, #0
 801bb90:	4602      	mov	r2, r0
 801bb92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb94:	6a21      	ldr	r1, [r4, #32]
 801bb96:	4628      	mov	r0, r5
 801bb98:	47b0      	blx	r6
 801bb9a:	1c43      	adds	r3, r0, #1
 801bb9c:	89a3      	ldrh	r3, [r4, #12]
 801bb9e:	d106      	bne.n	801bbae <__sflush_r+0x66>
 801bba0:	6829      	ldr	r1, [r5, #0]
 801bba2:	291d      	cmp	r1, #29
 801bba4:	d82c      	bhi.n	801bc00 <__sflush_r+0xb8>
 801bba6:	4a2a      	ldr	r2, [pc, #168]	; (801bc50 <__sflush_r+0x108>)
 801bba8:	40ca      	lsrs	r2, r1
 801bbaa:	07d6      	lsls	r6, r2, #31
 801bbac:	d528      	bpl.n	801bc00 <__sflush_r+0xb8>
 801bbae:	2200      	movs	r2, #0
 801bbb0:	6062      	str	r2, [r4, #4]
 801bbb2:	04d9      	lsls	r1, r3, #19
 801bbb4:	6922      	ldr	r2, [r4, #16]
 801bbb6:	6022      	str	r2, [r4, #0]
 801bbb8:	d504      	bpl.n	801bbc4 <__sflush_r+0x7c>
 801bbba:	1c42      	adds	r2, r0, #1
 801bbbc:	d101      	bne.n	801bbc2 <__sflush_r+0x7a>
 801bbbe:	682b      	ldr	r3, [r5, #0]
 801bbc0:	b903      	cbnz	r3, 801bbc4 <__sflush_r+0x7c>
 801bbc2:	6560      	str	r0, [r4, #84]	; 0x54
 801bbc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bbc6:	602f      	str	r7, [r5, #0]
 801bbc8:	2900      	cmp	r1, #0
 801bbca:	d0ca      	beq.n	801bb62 <__sflush_r+0x1a>
 801bbcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bbd0:	4299      	cmp	r1, r3
 801bbd2:	d002      	beq.n	801bbda <__sflush_r+0x92>
 801bbd4:	4628      	mov	r0, r5
 801bbd6:	f001 f8fd 	bl	801cdd4 <_free_r>
 801bbda:	2000      	movs	r0, #0
 801bbdc:	6360      	str	r0, [r4, #52]	; 0x34
 801bbde:	e7c1      	b.n	801bb64 <__sflush_r+0x1c>
 801bbe0:	6a21      	ldr	r1, [r4, #32]
 801bbe2:	2301      	movs	r3, #1
 801bbe4:	4628      	mov	r0, r5
 801bbe6:	47b0      	blx	r6
 801bbe8:	1c41      	adds	r1, r0, #1
 801bbea:	d1c7      	bne.n	801bb7c <__sflush_r+0x34>
 801bbec:	682b      	ldr	r3, [r5, #0]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d0c4      	beq.n	801bb7c <__sflush_r+0x34>
 801bbf2:	2b1d      	cmp	r3, #29
 801bbf4:	d001      	beq.n	801bbfa <__sflush_r+0xb2>
 801bbf6:	2b16      	cmp	r3, #22
 801bbf8:	d101      	bne.n	801bbfe <__sflush_r+0xb6>
 801bbfa:	602f      	str	r7, [r5, #0]
 801bbfc:	e7b1      	b.n	801bb62 <__sflush_r+0x1a>
 801bbfe:	89a3      	ldrh	r3, [r4, #12]
 801bc00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc04:	81a3      	strh	r3, [r4, #12]
 801bc06:	e7ad      	b.n	801bb64 <__sflush_r+0x1c>
 801bc08:	690f      	ldr	r7, [r1, #16]
 801bc0a:	2f00      	cmp	r7, #0
 801bc0c:	d0a9      	beq.n	801bb62 <__sflush_r+0x1a>
 801bc0e:	0793      	lsls	r3, r2, #30
 801bc10:	680e      	ldr	r6, [r1, #0]
 801bc12:	bf08      	it	eq
 801bc14:	694b      	ldreq	r3, [r1, #20]
 801bc16:	600f      	str	r7, [r1, #0]
 801bc18:	bf18      	it	ne
 801bc1a:	2300      	movne	r3, #0
 801bc1c:	eba6 0807 	sub.w	r8, r6, r7
 801bc20:	608b      	str	r3, [r1, #8]
 801bc22:	f1b8 0f00 	cmp.w	r8, #0
 801bc26:	dd9c      	ble.n	801bb62 <__sflush_r+0x1a>
 801bc28:	6a21      	ldr	r1, [r4, #32]
 801bc2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bc2c:	4643      	mov	r3, r8
 801bc2e:	463a      	mov	r2, r7
 801bc30:	4628      	mov	r0, r5
 801bc32:	47b0      	blx	r6
 801bc34:	2800      	cmp	r0, #0
 801bc36:	dc06      	bgt.n	801bc46 <__sflush_r+0xfe>
 801bc38:	89a3      	ldrh	r3, [r4, #12]
 801bc3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc3e:	81a3      	strh	r3, [r4, #12]
 801bc40:	f04f 30ff 	mov.w	r0, #4294967295
 801bc44:	e78e      	b.n	801bb64 <__sflush_r+0x1c>
 801bc46:	4407      	add	r7, r0
 801bc48:	eba8 0800 	sub.w	r8, r8, r0
 801bc4c:	e7e9      	b.n	801bc22 <__sflush_r+0xda>
 801bc4e:	bf00      	nop
 801bc50:	20400001 	.word	0x20400001

0801bc54 <_fflush_r>:
 801bc54:	b538      	push	{r3, r4, r5, lr}
 801bc56:	690b      	ldr	r3, [r1, #16]
 801bc58:	4605      	mov	r5, r0
 801bc5a:	460c      	mov	r4, r1
 801bc5c:	b913      	cbnz	r3, 801bc64 <_fflush_r+0x10>
 801bc5e:	2500      	movs	r5, #0
 801bc60:	4628      	mov	r0, r5
 801bc62:	bd38      	pop	{r3, r4, r5, pc}
 801bc64:	b118      	cbz	r0, 801bc6e <_fflush_r+0x1a>
 801bc66:	6983      	ldr	r3, [r0, #24]
 801bc68:	b90b      	cbnz	r3, 801bc6e <_fflush_r+0x1a>
 801bc6a:	f7fd f94f 	bl	8018f0c <__sinit>
 801bc6e:	4b14      	ldr	r3, [pc, #80]	; (801bcc0 <_fflush_r+0x6c>)
 801bc70:	429c      	cmp	r4, r3
 801bc72:	d11b      	bne.n	801bcac <_fflush_r+0x58>
 801bc74:	686c      	ldr	r4, [r5, #4]
 801bc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d0ef      	beq.n	801bc5e <_fflush_r+0xa>
 801bc7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bc80:	07d0      	lsls	r0, r2, #31
 801bc82:	d404      	bmi.n	801bc8e <_fflush_r+0x3a>
 801bc84:	0599      	lsls	r1, r3, #22
 801bc86:	d402      	bmi.n	801bc8e <_fflush_r+0x3a>
 801bc88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bc8a:	f7fd fa02 	bl	8019092 <__retarget_lock_acquire_recursive>
 801bc8e:	4628      	mov	r0, r5
 801bc90:	4621      	mov	r1, r4
 801bc92:	f7ff ff59 	bl	801bb48 <__sflush_r>
 801bc96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bc98:	07da      	lsls	r2, r3, #31
 801bc9a:	4605      	mov	r5, r0
 801bc9c:	d4e0      	bmi.n	801bc60 <_fflush_r+0xc>
 801bc9e:	89a3      	ldrh	r3, [r4, #12]
 801bca0:	059b      	lsls	r3, r3, #22
 801bca2:	d4dd      	bmi.n	801bc60 <_fflush_r+0xc>
 801bca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bca6:	f7fd f9f5 	bl	8019094 <__retarget_lock_release_recursive>
 801bcaa:	e7d9      	b.n	801bc60 <_fflush_r+0xc>
 801bcac:	4b05      	ldr	r3, [pc, #20]	; (801bcc4 <_fflush_r+0x70>)
 801bcae:	429c      	cmp	r4, r3
 801bcb0:	d101      	bne.n	801bcb6 <_fflush_r+0x62>
 801bcb2:	68ac      	ldr	r4, [r5, #8]
 801bcb4:	e7df      	b.n	801bc76 <_fflush_r+0x22>
 801bcb6:	4b04      	ldr	r3, [pc, #16]	; (801bcc8 <_fflush_r+0x74>)
 801bcb8:	429c      	cmp	r4, r3
 801bcba:	bf08      	it	eq
 801bcbc:	68ec      	ldreq	r4, [r5, #12]
 801bcbe:	e7da      	b.n	801bc76 <_fflush_r+0x22>
 801bcc0:	0801fd38 	.word	0x0801fd38
 801bcc4:	0801fd58 	.word	0x0801fd58
 801bcc8:	0801fd18 	.word	0x0801fd18

0801bccc <rshift>:
 801bccc:	6903      	ldr	r3, [r0, #16]
 801bcce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801bcd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bcd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801bcda:	f100 0414 	add.w	r4, r0, #20
 801bcde:	dd45      	ble.n	801bd6c <rshift+0xa0>
 801bce0:	f011 011f 	ands.w	r1, r1, #31
 801bce4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801bce8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801bcec:	d10c      	bne.n	801bd08 <rshift+0x3c>
 801bcee:	f100 0710 	add.w	r7, r0, #16
 801bcf2:	4629      	mov	r1, r5
 801bcf4:	42b1      	cmp	r1, r6
 801bcf6:	d334      	bcc.n	801bd62 <rshift+0x96>
 801bcf8:	1a9b      	subs	r3, r3, r2
 801bcfa:	009b      	lsls	r3, r3, #2
 801bcfc:	1eea      	subs	r2, r5, #3
 801bcfe:	4296      	cmp	r6, r2
 801bd00:	bf38      	it	cc
 801bd02:	2300      	movcc	r3, #0
 801bd04:	4423      	add	r3, r4
 801bd06:	e015      	b.n	801bd34 <rshift+0x68>
 801bd08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801bd0c:	f1c1 0820 	rsb	r8, r1, #32
 801bd10:	40cf      	lsrs	r7, r1
 801bd12:	f105 0e04 	add.w	lr, r5, #4
 801bd16:	46a1      	mov	r9, r4
 801bd18:	4576      	cmp	r6, lr
 801bd1a:	46f4      	mov	ip, lr
 801bd1c:	d815      	bhi.n	801bd4a <rshift+0x7e>
 801bd1e:	1a9a      	subs	r2, r3, r2
 801bd20:	0092      	lsls	r2, r2, #2
 801bd22:	3a04      	subs	r2, #4
 801bd24:	3501      	adds	r5, #1
 801bd26:	42ae      	cmp	r6, r5
 801bd28:	bf38      	it	cc
 801bd2a:	2200      	movcc	r2, #0
 801bd2c:	18a3      	adds	r3, r4, r2
 801bd2e:	50a7      	str	r7, [r4, r2]
 801bd30:	b107      	cbz	r7, 801bd34 <rshift+0x68>
 801bd32:	3304      	adds	r3, #4
 801bd34:	1b1a      	subs	r2, r3, r4
 801bd36:	42a3      	cmp	r3, r4
 801bd38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801bd3c:	bf08      	it	eq
 801bd3e:	2300      	moveq	r3, #0
 801bd40:	6102      	str	r2, [r0, #16]
 801bd42:	bf08      	it	eq
 801bd44:	6143      	streq	r3, [r0, #20]
 801bd46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd4a:	f8dc c000 	ldr.w	ip, [ip]
 801bd4e:	fa0c fc08 	lsl.w	ip, ip, r8
 801bd52:	ea4c 0707 	orr.w	r7, ip, r7
 801bd56:	f849 7b04 	str.w	r7, [r9], #4
 801bd5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bd5e:	40cf      	lsrs	r7, r1
 801bd60:	e7da      	b.n	801bd18 <rshift+0x4c>
 801bd62:	f851 cb04 	ldr.w	ip, [r1], #4
 801bd66:	f847 cf04 	str.w	ip, [r7, #4]!
 801bd6a:	e7c3      	b.n	801bcf4 <rshift+0x28>
 801bd6c:	4623      	mov	r3, r4
 801bd6e:	e7e1      	b.n	801bd34 <rshift+0x68>

0801bd70 <__hexdig_fun>:
 801bd70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801bd74:	2b09      	cmp	r3, #9
 801bd76:	d802      	bhi.n	801bd7e <__hexdig_fun+0xe>
 801bd78:	3820      	subs	r0, #32
 801bd7a:	b2c0      	uxtb	r0, r0
 801bd7c:	4770      	bx	lr
 801bd7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801bd82:	2b05      	cmp	r3, #5
 801bd84:	d801      	bhi.n	801bd8a <__hexdig_fun+0x1a>
 801bd86:	3847      	subs	r0, #71	; 0x47
 801bd88:	e7f7      	b.n	801bd7a <__hexdig_fun+0xa>
 801bd8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801bd8e:	2b05      	cmp	r3, #5
 801bd90:	d801      	bhi.n	801bd96 <__hexdig_fun+0x26>
 801bd92:	3827      	subs	r0, #39	; 0x27
 801bd94:	e7f1      	b.n	801bd7a <__hexdig_fun+0xa>
 801bd96:	2000      	movs	r0, #0
 801bd98:	4770      	bx	lr
	...

0801bd9c <__gethex>:
 801bd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bda0:	ed2d 8b02 	vpush	{d8}
 801bda4:	b089      	sub	sp, #36	; 0x24
 801bda6:	ee08 0a10 	vmov	s16, r0
 801bdaa:	9304      	str	r3, [sp, #16]
 801bdac:	4bb4      	ldr	r3, [pc, #720]	; (801c080 <__gethex+0x2e4>)
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	9301      	str	r3, [sp, #4]
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	468b      	mov	fp, r1
 801bdb6:	4690      	mov	r8, r2
 801bdb8:	f7e4 fa0a 	bl	80001d0 <strlen>
 801bdbc:	9b01      	ldr	r3, [sp, #4]
 801bdbe:	f8db 2000 	ldr.w	r2, [fp]
 801bdc2:	4403      	add	r3, r0
 801bdc4:	4682      	mov	sl, r0
 801bdc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801bdca:	9305      	str	r3, [sp, #20]
 801bdcc:	1c93      	adds	r3, r2, #2
 801bdce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801bdd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801bdd6:	32fe      	adds	r2, #254	; 0xfe
 801bdd8:	18d1      	adds	r1, r2, r3
 801bdda:	461f      	mov	r7, r3
 801bddc:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bde0:	9100      	str	r1, [sp, #0]
 801bde2:	2830      	cmp	r0, #48	; 0x30
 801bde4:	d0f8      	beq.n	801bdd8 <__gethex+0x3c>
 801bde6:	f7ff ffc3 	bl	801bd70 <__hexdig_fun>
 801bdea:	4604      	mov	r4, r0
 801bdec:	2800      	cmp	r0, #0
 801bdee:	d13a      	bne.n	801be66 <__gethex+0xca>
 801bdf0:	9901      	ldr	r1, [sp, #4]
 801bdf2:	4652      	mov	r2, sl
 801bdf4:	4638      	mov	r0, r7
 801bdf6:	f001 f9af 	bl	801d158 <strncmp>
 801bdfa:	4605      	mov	r5, r0
 801bdfc:	2800      	cmp	r0, #0
 801bdfe:	d168      	bne.n	801bed2 <__gethex+0x136>
 801be00:	f817 000a 	ldrb.w	r0, [r7, sl]
 801be04:	eb07 060a 	add.w	r6, r7, sl
 801be08:	f7ff ffb2 	bl	801bd70 <__hexdig_fun>
 801be0c:	2800      	cmp	r0, #0
 801be0e:	d062      	beq.n	801bed6 <__gethex+0x13a>
 801be10:	4633      	mov	r3, r6
 801be12:	7818      	ldrb	r0, [r3, #0]
 801be14:	2830      	cmp	r0, #48	; 0x30
 801be16:	461f      	mov	r7, r3
 801be18:	f103 0301 	add.w	r3, r3, #1
 801be1c:	d0f9      	beq.n	801be12 <__gethex+0x76>
 801be1e:	f7ff ffa7 	bl	801bd70 <__hexdig_fun>
 801be22:	2301      	movs	r3, #1
 801be24:	fab0 f480 	clz	r4, r0
 801be28:	0964      	lsrs	r4, r4, #5
 801be2a:	4635      	mov	r5, r6
 801be2c:	9300      	str	r3, [sp, #0]
 801be2e:	463a      	mov	r2, r7
 801be30:	4616      	mov	r6, r2
 801be32:	3201      	adds	r2, #1
 801be34:	7830      	ldrb	r0, [r6, #0]
 801be36:	f7ff ff9b 	bl	801bd70 <__hexdig_fun>
 801be3a:	2800      	cmp	r0, #0
 801be3c:	d1f8      	bne.n	801be30 <__gethex+0x94>
 801be3e:	9901      	ldr	r1, [sp, #4]
 801be40:	4652      	mov	r2, sl
 801be42:	4630      	mov	r0, r6
 801be44:	f001 f988 	bl	801d158 <strncmp>
 801be48:	b980      	cbnz	r0, 801be6c <__gethex+0xd0>
 801be4a:	b94d      	cbnz	r5, 801be60 <__gethex+0xc4>
 801be4c:	eb06 050a 	add.w	r5, r6, sl
 801be50:	462a      	mov	r2, r5
 801be52:	4616      	mov	r6, r2
 801be54:	3201      	adds	r2, #1
 801be56:	7830      	ldrb	r0, [r6, #0]
 801be58:	f7ff ff8a 	bl	801bd70 <__hexdig_fun>
 801be5c:	2800      	cmp	r0, #0
 801be5e:	d1f8      	bne.n	801be52 <__gethex+0xb6>
 801be60:	1bad      	subs	r5, r5, r6
 801be62:	00ad      	lsls	r5, r5, #2
 801be64:	e004      	b.n	801be70 <__gethex+0xd4>
 801be66:	2400      	movs	r4, #0
 801be68:	4625      	mov	r5, r4
 801be6a:	e7e0      	b.n	801be2e <__gethex+0x92>
 801be6c:	2d00      	cmp	r5, #0
 801be6e:	d1f7      	bne.n	801be60 <__gethex+0xc4>
 801be70:	7833      	ldrb	r3, [r6, #0]
 801be72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801be76:	2b50      	cmp	r3, #80	; 0x50
 801be78:	d13b      	bne.n	801bef2 <__gethex+0x156>
 801be7a:	7873      	ldrb	r3, [r6, #1]
 801be7c:	2b2b      	cmp	r3, #43	; 0x2b
 801be7e:	d02c      	beq.n	801beda <__gethex+0x13e>
 801be80:	2b2d      	cmp	r3, #45	; 0x2d
 801be82:	d02e      	beq.n	801bee2 <__gethex+0x146>
 801be84:	1c71      	adds	r1, r6, #1
 801be86:	f04f 0900 	mov.w	r9, #0
 801be8a:	7808      	ldrb	r0, [r1, #0]
 801be8c:	f7ff ff70 	bl	801bd70 <__hexdig_fun>
 801be90:	1e43      	subs	r3, r0, #1
 801be92:	b2db      	uxtb	r3, r3
 801be94:	2b18      	cmp	r3, #24
 801be96:	d82c      	bhi.n	801bef2 <__gethex+0x156>
 801be98:	f1a0 0210 	sub.w	r2, r0, #16
 801be9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801bea0:	f7ff ff66 	bl	801bd70 <__hexdig_fun>
 801bea4:	1e43      	subs	r3, r0, #1
 801bea6:	b2db      	uxtb	r3, r3
 801bea8:	2b18      	cmp	r3, #24
 801beaa:	d91d      	bls.n	801bee8 <__gethex+0x14c>
 801beac:	f1b9 0f00 	cmp.w	r9, #0
 801beb0:	d000      	beq.n	801beb4 <__gethex+0x118>
 801beb2:	4252      	negs	r2, r2
 801beb4:	4415      	add	r5, r2
 801beb6:	f8cb 1000 	str.w	r1, [fp]
 801beba:	b1e4      	cbz	r4, 801bef6 <__gethex+0x15a>
 801bebc:	9b00      	ldr	r3, [sp, #0]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	bf14      	ite	ne
 801bec2:	2700      	movne	r7, #0
 801bec4:	2706      	moveq	r7, #6
 801bec6:	4638      	mov	r0, r7
 801bec8:	b009      	add	sp, #36	; 0x24
 801beca:	ecbd 8b02 	vpop	{d8}
 801bece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bed2:	463e      	mov	r6, r7
 801bed4:	4625      	mov	r5, r4
 801bed6:	2401      	movs	r4, #1
 801bed8:	e7ca      	b.n	801be70 <__gethex+0xd4>
 801beda:	f04f 0900 	mov.w	r9, #0
 801bede:	1cb1      	adds	r1, r6, #2
 801bee0:	e7d3      	b.n	801be8a <__gethex+0xee>
 801bee2:	f04f 0901 	mov.w	r9, #1
 801bee6:	e7fa      	b.n	801bede <__gethex+0x142>
 801bee8:	230a      	movs	r3, #10
 801beea:	fb03 0202 	mla	r2, r3, r2, r0
 801beee:	3a10      	subs	r2, #16
 801bef0:	e7d4      	b.n	801be9c <__gethex+0x100>
 801bef2:	4631      	mov	r1, r6
 801bef4:	e7df      	b.n	801beb6 <__gethex+0x11a>
 801bef6:	1bf3      	subs	r3, r6, r7
 801bef8:	3b01      	subs	r3, #1
 801befa:	4621      	mov	r1, r4
 801befc:	2b07      	cmp	r3, #7
 801befe:	dc0b      	bgt.n	801bf18 <__gethex+0x17c>
 801bf00:	ee18 0a10 	vmov	r0, s16
 801bf04:	f000 fa8e 	bl	801c424 <_Balloc>
 801bf08:	4604      	mov	r4, r0
 801bf0a:	b940      	cbnz	r0, 801bf1e <__gethex+0x182>
 801bf0c:	4b5d      	ldr	r3, [pc, #372]	; (801c084 <__gethex+0x2e8>)
 801bf0e:	4602      	mov	r2, r0
 801bf10:	21de      	movs	r1, #222	; 0xde
 801bf12:	485d      	ldr	r0, [pc, #372]	; (801c088 <__gethex+0x2ec>)
 801bf14:	f001 f942 	bl	801d19c <__assert_func>
 801bf18:	3101      	adds	r1, #1
 801bf1a:	105b      	asrs	r3, r3, #1
 801bf1c:	e7ee      	b.n	801befc <__gethex+0x160>
 801bf1e:	f100 0914 	add.w	r9, r0, #20
 801bf22:	f04f 0b00 	mov.w	fp, #0
 801bf26:	f1ca 0301 	rsb	r3, sl, #1
 801bf2a:	f8cd 9008 	str.w	r9, [sp, #8]
 801bf2e:	f8cd b000 	str.w	fp, [sp]
 801bf32:	9306      	str	r3, [sp, #24]
 801bf34:	42b7      	cmp	r7, r6
 801bf36:	d340      	bcc.n	801bfba <__gethex+0x21e>
 801bf38:	9802      	ldr	r0, [sp, #8]
 801bf3a:	9b00      	ldr	r3, [sp, #0]
 801bf3c:	f840 3b04 	str.w	r3, [r0], #4
 801bf40:	eba0 0009 	sub.w	r0, r0, r9
 801bf44:	1080      	asrs	r0, r0, #2
 801bf46:	0146      	lsls	r6, r0, #5
 801bf48:	6120      	str	r0, [r4, #16]
 801bf4a:	4618      	mov	r0, r3
 801bf4c:	f000 fb5c 	bl	801c608 <__hi0bits>
 801bf50:	1a30      	subs	r0, r6, r0
 801bf52:	f8d8 6000 	ldr.w	r6, [r8]
 801bf56:	42b0      	cmp	r0, r6
 801bf58:	dd63      	ble.n	801c022 <__gethex+0x286>
 801bf5a:	1b87      	subs	r7, r0, r6
 801bf5c:	4639      	mov	r1, r7
 801bf5e:	4620      	mov	r0, r4
 801bf60:	f000 ff00 	bl	801cd64 <__any_on>
 801bf64:	4682      	mov	sl, r0
 801bf66:	b1a8      	cbz	r0, 801bf94 <__gethex+0x1f8>
 801bf68:	1e7b      	subs	r3, r7, #1
 801bf6a:	1159      	asrs	r1, r3, #5
 801bf6c:	f003 021f 	and.w	r2, r3, #31
 801bf70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801bf74:	f04f 0a01 	mov.w	sl, #1
 801bf78:	fa0a f202 	lsl.w	r2, sl, r2
 801bf7c:	420a      	tst	r2, r1
 801bf7e:	d009      	beq.n	801bf94 <__gethex+0x1f8>
 801bf80:	4553      	cmp	r3, sl
 801bf82:	dd05      	ble.n	801bf90 <__gethex+0x1f4>
 801bf84:	1eb9      	subs	r1, r7, #2
 801bf86:	4620      	mov	r0, r4
 801bf88:	f000 feec 	bl	801cd64 <__any_on>
 801bf8c:	2800      	cmp	r0, #0
 801bf8e:	d145      	bne.n	801c01c <__gethex+0x280>
 801bf90:	f04f 0a02 	mov.w	sl, #2
 801bf94:	4639      	mov	r1, r7
 801bf96:	4620      	mov	r0, r4
 801bf98:	f7ff fe98 	bl	801bccc <rshift>
 801bf9c:	443d      	add	r5, r7
 801bf9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bfa2:	42ab      	cmp	r3, r5
 801bfa4:	da4c      	bge.n	801c040 <__gethex+0x2a4>
 801bfa6:	ee18 0a10 	vmov	r0, s16
 801bfaa:	4621      	mov	r1, r4
 801bfac:	f000 fa7a 	bl	801c4a4 <_Bfree>
 801bfb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bfb2:	2300      	movs	r3, #0
 801bfb4:	6013      	str	r3, [r2, #0]
 801bfb6:	27a3      	movs	r7, #163	; 0xa3
 801bfb8:	e785      	b.n	801bec6 <__gethex+0x12a>
 801bfba:	1e73      	subs	r3, r6, #1
 801bfbc:	9a05      	ldr	r2, [sp, #20]
 801bfbe:	9303      	str	r3, [sp, #12]
 801bfc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bfc4:	4293      	cmp	r3, r2
 801bfc6:	d019      	beq.n	801bffc <__gethex+0x260>
 801bfc8:	f1bb 0f20 	cmp.w	fp, #32
 801bfcc:	d107      	bne.n	801bfde <__gethex+0x242>
 801bfce:	9b02      	ldr	r3, [sp, #8]
 801bfd0:	9a00      	ldr	r2, [sp, #0]
 801bfd2:	f843 2b04 	str.w	r2, [r3], #4
 801bfd6:	9302      	str	r3, [sp, #8]
 801bfd8:	2300      	movs	r3, #0
 801bfda:	9300      	str	r3, [sp, #0]
 801bfdc:	469b      	mov	fp, r3
 801bfde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801bfe2:	f7ff fec5 	bl	801bd70 <__hexdig_fun>
 801bfe6:	9b00      	ldr	r3, [sp, #0]
 801bfe8:	f000 000f 	and.w	r0, r0, #15
 801bfec:	fa00 f00b 	lsl.w	r0, r0, fp
 801bff0:	4303      	orrs	r3, r0
 801bff2:	9300      	str	r3, [sp, #0]
 801bff4:	f10b 0b04 	add.w	fp, fp, #4
 801bff8:	9b03      	ldr	r3, [sp, #12]
 801bffa:	e00d      	b.n	801c018 <__gethex+0x27c>
 801bffc:	9b03      	ldr	r3, [sp, #12]
 801bffe:	9a06      	ldr	r2, [sp, #24]
 801c000:	4413      	add	r3, r2
 801c002:	42bb      	cmp	r3, r7
 801c004:	d3e0      	bcc.n	801bfc8 <__gethex+0x22c>
 801c006:	4618      	mov	r0, r3
 801c008:	9901      	ldr	r1, [sp, #4]
 801c00a:	9307      	str	r3, [sp, #28]
 801c00c:	4652      	mov	r2, sl
 801c00e:	f001 f8a3 	bl	801d158 <strncmp>
 801c012:	9b07      	ldr	r3, [sp, #28]
 801c014:	2800      	cmp	r0, #0
 801c016:	d1d7      	bne.n	801bfc8 <__gethex+0x22c>
 801c018:	461e      	mov	r6, r3
 801c01a:	e78b      	b.n	801bf34 <__gethex+0x198>
 801c01c:	f04f 0a03 	mov.w	sl, #3
 801c020:	e7b8      	b.n	801bf94 <__gethex+0x1f8>
 801c022:	da0a      	bge.n	801c03a <__gethex+0x29e>
 801c024:	1a37      	subs	r7, r6, r0
 801c026:	4621      	mov	r1, r4
 801c028:	ee18 0a10 	vmov	r0, s16
 801c02c:	463a      	mov	r2, r7
 801c02e:	f000 fc55 	bl	801c8dc <__lshift>
 801c032:	1bed      	subs	r5, r5, r7
 801c034:	4604      	mov	r4, r0
 801c036:	f100 0914 	add.w	r9, r0, #20
 801c03a:	f04f 0a00 	mov.w	sl, #0
 801c03e:	e7ae      	b.n	801bf9e <__gethex+0x202>
 801c040:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c044:	42a8      	cmp	r0, r5
 801c046:	dd72      	ble.n	801c12e <__gethex+0x392>
 801c048:	1b45      	subs	r5, r0, r5
 801c04a:	42ae      	cmp	r6, r5
 801c04c:	dc36      	bgt.n	801c0bc <__gethex+0x320>
 801c04e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c052:	2b02      	cmp	r3, #2
 801c054:	d02a      	beq.n	801c0ac <__gethex+0x310>
 801c056:	2b03      	cmp	r3, #3
 801c058:	d02c      	beq.n	801c0b4 <__gethex+0x318>
 801c05a:	2b01      	cmp	r3, #1
 801c05c:	d11c      	bne.n	801c098 <__gethex+0x2fc>
 801c05e:	42ae      	cmp	r6, r5
 801c060:	d11a      	bne.n	801c098 <__gethex+0x2fc>
 801c062:	2e01      	cmp	r6, #1
 801c064:	d112      	bne.n	801c08c <__gethex+0x2f0>
 801c066:	9a04      	ldr	r2, [sp, #16]
 801c068:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c06c:	6013      	str	r3, [r2, #0]
 801c06e:	2301      	movs	r3, #1
 801c070:	6123      	str	r3, [r4, #16]
 801c072:	f8c9 3000 	str.w	r3, [r9]
 801c076:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c078:	2762      	movs	r7, #98	; 0x62
 801c07a:	601c      	str	r4, [r3, #0]
 801c07c:	e723      	b.n	801bec6 <__gethex+0x12a>
 801c07e:	bf00      	nop
 801c080:	08020000 	.word	0x08020000
 801c084:	0801ff88 	.word	0x0801ff88
 801c088:	0801ff99 	.word	0x0801ff99
 801c08c:	1e71      	subs	r1, r6, #1
 801c08e:	4620      	mov	r0, r4
 801c090:	f000 fe68 	bl	801cd64 <__any_on>
 801c094:	2800      	cmp	r0, #0
 801c096:	d1e6      	bne.n	801c066 <__gethex+0x2ca>
 801c098:	ee18 0a10 	vmov	r0, s16
 801c09c:	4621      	mov	r1, r4
 801c09e:	f000 fa01 	bl	801c4a4 <_Bfree>
 801c0a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	6013      	str	r3, [r2, #0]
 801c0a8:	2750      	movs	r7, #80	; 0x50
 801c0aa:	e70c      	b.n	801bec6 <__gethex+0x12a>
 801c0ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d1f2      	bne.n	801c098 <__gethex+0x2fc>
 801c0b2:	e7d8      	b.n	801c066 <__gethex+0x2ca>
 801c0b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d1d5      	bne.n	801c066 <__gethex+0x2ca>
 801c0ba:	e7ed      	b.n	801c098 <__gethex+0x2fc>
 801c0bc:	1e6f      	subs	r7, r5, #1
 801c0be:	f1ba 0f00 	cmp.w	sl, #0
 801c0c2:	d131      	bne.n	801c128 <__gethex+0x38c>
 801c0c4:	b127      	cbz	r7, 801c0d0 <__gethex+0x334>
 801c0c6:	4639      	mov	r1, r7
 801c0c8:	4620      	mov	r0, r4
 801c0ca:	f000 fe4b 	bl	801cd64 <__any_on>
 801c0ce:	4682      	mov	sl, r0
 801c0d0:	117b      	asrs	r3, r7, #5
 801c0d2:	2101      	movs	r1, #1
 801c0d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c0d8:	f007 071f 	and.w	r7, r7, #31
 801c0dc:	fa01 f707 	lsl.w	r7, r1, r7
 801c0e0:	421f      	tst	r7, r3
 801c0e2:	4629      	mov	r1, r5
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	bf18      	it	ne
 801c0e8:	f04a 0a02 	orrne.w	sl, sl, #2
 801c0ec:	1b76      	subs	r6, r6, r5
 801c0ee:	f7ff fded 	bl	801bccc <rshift>
 801c0f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c0f6:	2702      	movs	r7, #2
 801c0f8:	f1ba 0f00 	cmp.w	sl, #0
 801c0fc:	d048      	beq.n	801c190 <__gethex+0x3f4>
 801c0fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c102:	2b02      	cmp	r3, #2
 801c104:	d015      	beq.n	801c132 <__gethex+0x396>
 801c106:	2b03      	cmp	r3, #3
 801c108:	d017      	beq.n	801c13a <__gethex+0x39e>
 801c10a:	2b01      	cmp	r3, #1
 801c10c:	d109      	bne.n	801c122 <__gethex+0x386>
 801c10e:	f01a 0f02 	tst.w	sl, #2
 801c112:	d006      	beq.n	801c122 <__gethex+0x386>
 801c114:	f8d9 0000 	ldr.w	r0, [r9]
 801c118:	ea4a 0a00 	orr.w	sl, sl, r0
 801c11c:	f01a 0f01 	tst.w	sl, #1
 801c120:	d10e      	bne.n	801c140 <__gethex+0x3a4>
 801c122:	f047 0710 	orr.w	r7, r7, #16
 801c126:	e033      	b.n	801c190 <__gethex+0x3f4>
 801c128:	f04f 0a01 	mov.w	sl, #1
 801c12c:	e7d0      	b.n	801c0d0 <__gethex+0x334>
 801c12e:	2701      	movs	r7, #1
 801c130:	e7e2      	b.n	801c0f8 <__gethex+0x35c>
 801c132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c134:	f1c3 0301 	rsb	r3, r3, #1
 801c138:	9315      	str	r3, [sp, #84]	; 0x54
 801c13a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d0f0      	beq.n	801c122 <__gethex+0x386>
 801c140:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c144:	f104 0314 	add.w	r3, r4, #20
 801c148:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c14c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c150:	f04f 0c00 	mov.w	ip, #0
 801c154:	4618      	mov	r0, r3
 801c156:	f853 2b04 	ldr.w	r2, [r3], #4
 801c15a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c15e:	d01c      	beq.n	801c19a <__gethex+0x3fe>
 801c160:	3201      	adds	r2, #1
 801c162:	6002      	str	r2, [r0, #0]
 801c164:	2f02      	cmp	r7, #2
 801c166:	f104 0314 	add.w	r3, r4, #20
 801c16a:	d13f      	bne.n	801c1ec <__gethex+0x450>
 801c16c:	f8d8 2000 	ldr.w	r2, [r8]
 801c170:	3a01      	subs	r2, #1
 801c172:	42b2      	cmp	r2, r6
 801c174:	d10a      	bne.n	801c18c <__gethex+0x3f0>
 801c176:	1171      	asrs	r1, r6, #5
 801c178:	2201      	movs	r2, #1
 801c17a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c17e:	f006 061f 	and.w	r6, r6, #31
 801c182:	fa02 f606 	lsl.w	r6, r2, r6
 801c186:	421e      	tst	r6, r3
 801c188:	bf18      	it	ne
 801c18a:	4617      	movne	r7, r2
 801c18c:	f047 0720 	orr.w	r7, r7, #32
 801c190:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c192:	601c      	str	r4, [r3, #0]
 801c194:	9b04      	ldr	r3, [sp, #16]
 801c196:	601d      	str	r5, [r3, #0]
 801c198:	e695      	b.n	801bec6 <__gethex+0x12a>
 801c19a:	4299      	cmp	r1, r3
 801c19c:	f843 cc04 	str.w	ip, [r3, #-4]
 801c1a0:	d8d8      	bhi.n	801c154 <__gethex+0x3b8>
 801c1a2:	68a3      	ldr	r3, [r4, #8]
 801c1a4:	459b      	cmp	fp, r3
 801c1a6:	db19      	blt.n	801c1dc <__gethex+0x440>
 801c1a8:	6861      	ldr	r1, [r4, #4]
 801c1aa:	ee18 0a10 	vmov	r0, s16
 801c1ae:	3101      	adds	r1, #1
 801c1b0:	f000 f938 	bl	801c424 <_Balloc>
 801c1b4:	4681      	mov	r9, r0
 801c1b6:	b918      	cbnz	r0, 801c1c0 <__gethex+0x424>
 801c1b8:	4b1a      	ldr	r3, [pc, #104]	; (801c224 <__gethex+0x488>)
 801c1ba:	4602      	mov	r2, r0
 801c1bc:	2184      	movs	r1, #132	; 0x84
 801c1be:	e6a8      	b.n	801bf12 <__gethex+0x176>
 801c1c0:	6922      	ldr	r2, [r4, #16]
 801c1c2:	3202      	adds	r2, #2
 801c1c4:	f104 010c 	add.w	r1, r4, #12
 801c1c8:	0092      	lsls	r2, r2, #2
 801c1ca:	300c      	adds	r0, #12
 801c1cc:	f7fc ff63 	bl	8019096 <memcpy>
 801c1d0:	4621      	mov	r1, r4
 801c1d2:	ee18 0a10 	vmov	r0, s16
 801c1d6:	f000 f965 	bl	801c4a4 <_Bfree>
 801c1da:	464c      	mov	r4, r9
 801c1dc:	6923      	ldr	r3, [r4, #16]
 801c1de:	1c5a      	adds	r2, r3, #1
 801c1e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c1e4:	6122      	str	r2, [r4, #16]
 801c1e6:	2201      	movs	r2, #1
 801c1e8:	615a      	str	r2, [r3, #20]
 801c1ea:	e7bb      	b.n	801c164 <__gethex+0x3c8>
 801c1ec:	6922      	ldr	r2, [r4, #16]
 801c1ee:	455a      	cmp	r2, fp
 801c1f0:	dd0b      	ble.n	801c20a <__gethex+0x46e>
 801c1f2:	2101      	movs	r1, #1
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	f7ff fd69 	bl	801bccc <rshift>
 801c1fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c1fe:	3501      	adds	r5, #1
 801c200:	42ab      	cmp	r3, r5
 801c202:	f6ff aed0 	blt.w	801bfa6 <__gethex+0x20a>
 801c206:	2701      	movs	r7, #1
 801c208:	e7c0      	b.n	801c18c <__gethex+0x3f0>
 801c20a:	f016 061f 	ands.w	r6, r6, #31
 801c20e:	d0fa      	beq.n	801c206 <__gethex+0x46a>
 801c210:	4453      	add	r3, sl
 801c212:	f1c6 0620 	rsb	r6, r6, #32
 801c216:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c21a:	f000 f9f5 	bl	801c608 <__hi0bits>
 801c21e:	42b0      	cmp	r0, r6
 801c220:	dbe7      	blt.n	801c1f2 <__gethex+0x456>
 801c222:	e7f0      	b.n	801c206 <__gethex+0x46a>
 801c224:	0801ff88 	.word	0x0801ff88

0801c228 <L_shift>:
 801c228:	f1c2 0208 	rsb	r2, r2, #8
 801c22c:	0092      	lsls	r2, r2, #2
 801c22e:	b570      	push	{r4, r5, r6, lr}
 801c230:	f1c2 0620 	rsb	r6, r2, #32
 801c234:	6843      	ldr	r3, [r0, #4]
 801c236:	6804      	ldr	r4, [r0, #0]
 801c238:	fa03 f506 	lsl.w	r5, r3, r6
 801c23c:	432c      	orrs	r4, r5
 801c23e:	40d3      	lsrs	r3, r2
 801c240:	6004      	str	r4, [r0, #0]
 801c242:	f840 3f04 	str.w	r3, [r0, #4]!
 801c246:	4288      	cmp	r0, r1
 801c248:	d3f4      	bcc.n	801c234 <L_shift+0xc>
 801c24a:	bd70      	pop	{r4, r5, r6, pc}

0801c24c <__match>:
 801c24c:	b530      	push	{r4, r5, lr}
 801c24e:	6803      	ldr	r3, [r0, #0]
 801c250:	3301      	adds	r3, #1
 801c252:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c256:	b914      	cbnz	r4, 801c25e <__match+0x12>
 801c258:	6003      	str	r3, [r0, #0]
 801c25a:	2001      	movs	r0, #1
 801c25c:	bd30      	pop	{r4, r5, pc}
 801c25e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c262:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c266:	2d19      	cmp	r5, #25
 801c268:	bf98      	it	ls
 801c26a:	3220      	addls	r2, #32
 801c26c:	42a2      	cmp	r2, r4
 801c26e:	d0f0      	beq.n	801c252 <__match+0x6>
 801c270:	2000      	movs	r0, #0
 801c272:	e7f3      	b.n	801c25c <__match+0x10>

0801c274 <__hexnan>:
 801c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c278:	680b      	ldr	r3, [r1, #0]
 801c27a:	115e      	asrs	r6, r3, #5
 801c27c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c280:	f013 031f 	ands.w	r3, r3, #31
 801c284:	b087      	sub	sp, #28
 801c286:	bf18      	it	ne
 801c288:	3604      	addne	r6, #4
 801c28a:	2500      	movs	r5, #0
 801c28c:	1f37      	subs	r7, r6, #4
 801c28e:	4690      	mov	r8, r2
 801c290:	6802      	ldr	r2, [r0, #0]
 801c292:	9301      	str	r3, [sp, #4]
 801c294:	4682      	mov	sl, r0
 801c296:	f846 5c04 	str.w	r5, [r6, #-4]
 801c29a:	46b9      	mov	r9, r7
 801c29c:	463c      	mov	r4, r7
 801c29e:	9502      	str	r5, [sp, #8]
 801c2a0:	46ab      	mov	fp, r5
 801c2a2:	7851      	ldrb	r1, [r2, #1]
 801c2a4:	1c53      	adds	r3, r2, #1
 801c2a6:	9303      	str	r3, [sp, #12]
 801c2a8:	b341      	cbz	r1, 801c2fc <__hexnan+0x88>
 801c2aa:	4608      	mov	r0, r1
 801c2ac:	9205      	str	r2, [sp, #20]
 801c2ae:	9104      	str	r1, [sp, #16]
 801c2b0:	f7ff fd5e 	bl	801bd70 <__hexdig_fun>
 801c2b4:	2800      	cmp	r0, #0
 801c2b6:	d14f      	bne.n	801c358 <__hexnan+0xe4>
 801c2b8:	9904      	ldr	r1, [sp, #16]
 801c2ba:	9a05      	ldr	r2, [sp, #20]
 801c2bc:	2920      	cmp	r1, #32
 801c2be:	d818      	bhi.n	801c2f2 <__hexnan+0x7e>
 801c2c0:	9b02      	ldr	r3, [sp, #8]
 801c2c2:	459b      	cmp	fp, r3
 801c2c4:	dd13      	ble.n	801c2ee <__hexnan+0x7a>
 801c2c6:	454c      	cmp	r4, r9
 801c2c8:	d206      	bcs.n	801c2d8 <__hexnan+0x64>
 801c2ca:	2d07      	cmp	r5, #7
 801c2cc:	dc04      	bgt.n	801c2d8 <__hexnan+0x64>
 801c2ce:	462a      	mov	r2, r5
 801c2d0:	4649      	mov	r1, r9
 801c2d2:	4620      	mov	r0, r4
 801c2d4:	f7ff ffa8 	bl	801c228 <L_shift>
 801c2d8:	4544      	cmp	r4, r8
 801c2da:	d950      	bls.n	801c37e <__hexnan+0x10a>
 801c2dc:	2300      	movs	r3, #0
 801c2de:	f1a4 0904 	sub.w	r9, r4, #4
 801c2e2:	f844 3c04 	str.w	r3, [r4, #-4]
 801c2e6:	f8cd b008 	str.w	fp, [sp, #8]
 801c2ea:	464c      	mov	r4, r9
 801c2ec:	461d      	mov	r5, r3
 801c2ee:	9a03      	ldr	r2, [sp, #12]
 801c2f0:	e7d7      	b.n	801c2a2 <__hexnan+0x2e>
 801c2f2:	2929      	cmp	r1, #41	; 0x29
 801c2f4:	d156      	bne.n	801c3a4 <__hexnan+0x130>
 801c2f6:	3202      	adds	r2, #2
 801c2f8:	f8ca 2000 	str.w	r2, [sl]
 801c2fc:	f1bb 0f00 	cmp.w	fp, #0
 801c300:	d050      	beq.n	801c3a4 <__hexnan+0x130>
 801c302:	454c      	cmp	r4, r9
 801c304:	d206      	bcs.n	801c314 <__hexnan+0xa0>
 801c306:	2d07      	cmp	r5, #7
 801c308:	dc04      	bgt.n	801c314 <__hexnan+0xa0>
 801c30a:	462a      	mov	r2, r5
 801c30c:	4649      	mov	r1, r9
 801c30e:	4620      	mov	r0, r4
 801c310:	f7ff ff8a 	bl	801c228 <L_shift>
 801c314:	4544      	cmp	r4, r8
 801c316:	d934      	bls.n	801c382 <__hexnan+0x10e>
 801c318:	f1a8 0204 	sub.w	r2, r8, #4
 801c31c:	4623      	mov	r3, r4
 801c31e:	f853 1b04 	ldr.w	r1, [r3], #4
 801c322:	f842 1f04 	str.w	r1, [r2, #4]!
 801c326:	429f      	cmp	r7, r3
 801c328:	d2f9      	bcs.n	801c31e <__hexnan+0xaa>
 801c32a:	1b3b      	subs	r3, r7, r4
 801c32c:	f023 0303 	bic.w	r3, r3, #3
 801c330:	3304      	adds	r3, #4
 801c332:	3401      	adds	r4, #1
 801c334:	3e03      	subs	r6, #3
 801c336:	42b4      	cmp	r4, r6
 801c338:	bf88      	it	hi
 801c33a:	2304      	movhi	r3, #4
 801c33c:	4443      	add	r3, r8
 801c33e:	2200      	movs	r2, #0
 801c340:	f843 2b04 	str.w	r2, [r3], #4
 801c344:	429f      	cmp	r7, r3
 801c346:	d2fb      	bcs.n	801c340 <__hexnan+0xcc>
 801c348:	683b      	ldr	r3, [r7, #0]
 801c34a:	b91b      	cbnz	r3, 801c354 <__hexnan+0xe0>
 801c34c:	4547      	cmp	r7, r8
 801c34e:	d127      	bne.n	801c3a0 <__hexnan+0x12c>
 801c350:	2301      	movs	r3, #1
 801c352:	603b      	str	r3, [r7, #0]
 801c354:	2005      	movs	r0, #5
 801c356:	e026      	b.n	801c3a6 <__hexnan+0x132>
 801c358:	3501      	adds	r5, #1
 801c35a:	2d08      	cmp	r5, #8
 801c35c:	f10b 0b01 	add.w	fp, fp, #1
 801c360:	dd06      	ble.n	801c370 <__hexnan+0xfc>
 801c362:	4544      	cmp	r4, r8
 801c364:	d9c3      	bls.n	801c2ee <__hexnan+0x7a>
 801c366:	2300      	movs	r3, #0
 801c368:	f844 3c04 	str.w	r3, [r4, #-4]
 801c36c:	2501      	movs	r5, #1
 801c36e:	3c04      	subs	r4, #4
 801c370:	6822      	ldr	r2, [r4, #0]
 801c372:	f000 000f 	and.w	r0, r0, #15
 801c376:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c37a:	6022      	str	r2, [r4, #0]
 801c37c:	e7b7      	b.n	801c2ee <__hexnan+0x7a>
 801c37e:	2508      	movs	r5, #8
 801c380:	e7b5      	b.n	801c2ee <__hexnan+0x7a>
 801c382:	9b01      	ldr	r3, [sp, #4]
 801c384:	2b00      	cmp	r3, #0
 801c386:	d0df      	beq.n	801c348 <__hexnan+0xd4>
 801c388:	f04f 32ff 	mov.w	r2, #4294967295
 801c38c:	f1c3 0320 	rsb	r3, r3, #32
 801c390:	fa22 f303 	lsr.w	r3, r2, r3
 801c394:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c398:	401a      	ands	r2, r3
 801c39a:	f846 2c04 	str.w	r2, [r6, #-4]
 801c39e:	e7d3      	b.n	801c348 <__hexnan+0xd4>
 801c3a0:	3f04      	subs	r7, #4
 801c3a2:	e7d1      	b.n	801c348 <__hexnan+0xd4>
 801c3a4:	2004      	movs	r0, #4
 801c3a6:	b007      	add	sp, #28
 801c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3ac <_localeconv_r>:
 801c3ac:	4800      	ldr	r0, [pc, #0]	; (801c3b0 <_localeconv_r+0x4>)
 801c3ae:	4770      	bx	lr
 801c3b0:	20000264 	.word	0x20000264

0801c3b4 <_lseek_r>:
 801c3b4:	b538      	push	{r3, r4, r5, lr}
 801c3b6:	4d07      	ldr	r5, [pc, #28]	; (801c3d4 <_lseek_r+0x20>)
 801c3b8:	4604      	mov	r4, r0
 801c3ba:	4608      	mov	r0, r1
 801c3bc:	4611      	mov	r1, r2
 801c3be:	2200      	movs	r2, #0
 801c3c0:	602a      	str	r2, [r5, #0]
 801c3c2:	461a      	mov	r2, r3
 801c3c4:	f003 f8da 	bl	801f57c <_lseek>
 801c3c8:	1c43      	adds	r3, r0, #1
 801c3ca:	d102      	bne.n	801c3d2 <_lseek_r+0x1e>
 801c3cc:	682b      	ldr	r3, [r5, #0]
 801c3ce:	b103      	cbz	r3, 801c3d2 <_lseek_r+0x1e>
 801c3d0:	6023      	str	r3, [r4, #0]
 801c3d2:	bd38      	pop	{r3, r4, r5, pc}
 801c3d4:	2000e554 	.word	0x2000e554

0801c3d8 <malloc>:
 801c3d8:	4b02      	ldr	r3, [pc, #8]	; (801c3e4 <malloc+0xc>)
 801c3da:	4601      	mov	r1, r0
 801c3dc:	6818      	ldr	r0, [r3, #0]
 801c3de:	f7fc be91 	b.w	8019104 <_malloc_r>
 801c3e2:	bf00      	nop
 801c3e4:	2000010c 	.word	0x2000010c

0801c3e8 <__ascii_mbtowc>:
 801c3e8:	b082      	sub	sp, #8
 801c3ea:	b901      	cbnz	r1, 801c3ee <__ascii_mbtowc+0x6>
 801c3ec:	a901      	add	r1, sp, #4
 801c3ee:	b142      	cbz	r2, 801c402 <__ascii_mbtowc+0x1a>
 801c3f0:	b14b      	cbz	r3, 801c406 <__ascii_mbtowc+0x1e>
 801c3f2:	7813      	ldrb	r3, [r2, #0]
 801c3f4:	600b      	str	r3, [r1, #0]
 801c3f6:	7812      	ldrb	r2, [r2, #0]
 801c3f8:	1e10      	subs	r0, r2, #0
 801c3fa:	bf18      	it	ne
 801c3fc:	2001      	movne	r0, #1
 801c3fe:	b002      	add	sp, #8
 801c400:	4770      	bx	lr
 801c402:	4610      	mov	r0, r2
 801c404:	e7fb      	b.n	801c3fe <__ascii_mbtowc+0x16>
 801c406:	f06f 0001 	mvn.w	r0, #1
 801c40a:	e7f8      	b.n	801c3fe <__ascii_mbtowc+0x16>

0801c40c <__malloc_lock>:
 801c40c:	4801      	ldr	r0, [pc, #4]	; (801c414 <__malloc_lock+0x8>)
 801c40e:	f7fc be40 	b.w	8019092 <__retarget_lock_acquire_recursive>
 801c412:	bf00      	nop
 801c414:	2000e548 	.word	0x2000e548

0801c418 <__malloc_unlock>:
 801c418:	4801      	ldr	r0, [pc, #4]	; (801c420 <__malloc_unlock+0x8>)
 801c41a:	f7fc be3b 	b.w	8019094 <__retarget_lock_release_recursive>
 801c41e:	bf00      	nop
 801c420:	2000e548 	.word	0x2000e548

0801c424 <_Balloc>:
 801c424:	b570      	push	{r4, r5, r6, lr}
 801c426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c428:	4604      	mov	r4, r0
 801c42a:	460d      	mov	r5, r1
 801c42c:	b976      	cbnz	r6, 801c44c <_Balloc+0x28>
 801c42e:	2010      	movs	r0, #16
 801c430:	f7ff ffd2 	bl	801c3d8 <malloc>
 801c434:	4602      	mov	r2, r0
 801c436:	6260      	str	r0, [r4, #36]	; 0x24
 801c438:	b920      	cbnz	r0, 801c444 <_Balloc+0x20>
 801c43a:	4b18      	ldr	r3, [pc, #96]	; (801c49c <_Balloc+0x78>)
 801c43c:	4818      	ldr	r0, [pc, #96]	; (801c4a0 <_Balloc+0x7c>)
 801c43e:	2166      	movs	r1, #102	; 0x66
 801c440:	f000 feac 	bl	801d19c <__assert_func>
 801c444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c448:	6006      	str	r6, [r0, #0]
 801c44a:	60c6      	str	r6, [r0, #12]
 801c44c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c44e:	68f3      	ldr	r3, [r6, #12]
 801c450:	b183      	cbz	r3, 801c474 <_Balloc+0x50>
 801c452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c454:	68db      	ldr	r3, [r3, #12]
 801c456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c45a:	b9b8      	cbnz	r0, 801c48c <_Balloc+0x68>
 801c45c:	2101      	movs	r1, #1
 801c45e:	fa01 f605 	lsl.w	r6, r1, r5
 801c462:	1d72      	adds	r2, r6, #5
 801c464:	0092      	lsls	r2, r2, #2
 801c466:	4620      	mov	r0, r4
 801c468:	f000 fc9d 	bl	801cda6 <_calloc_r>
 801c46c:	b160      	cbz	r0, 801c488 <_Balloc+0x64>
 801c46e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c472:	e00e      	b.n	801c492 <_Balloc+0x6e>
 801c474:	2221      	movs	r2, #33	; 0x21
 801c476:	2104      	movs	r1, #4
 801c478:	4620      	mov	r0, r4
 801c47a:	f000 fc94 	bl	801cda6 <_calloc_r>
 801c47e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c480:	60f0      	str	r0, [r6, #12]
 801c482:	68db      	ldr	r3, [r3, #12]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d1e4      	bne.n	801c452 <_Balloc+0x2e>
 801c488:	2000      	movs	r0, #0
 801c48a:	bd70      	pop	{r4, r5, r6, pc}
 801c48c:	6802      	ldr	r2, [r0, #0]
 801c48e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c492:	2300      	movs	r3, #0
 801c494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c498:	e7f7      	b.n	801c48a <_Balloc+0x66>
 801c49a:	bf00      	nop
 801c49c:	0801ff16 	.word	0x0801ff16
 801c4a0:	08020014 	.word	0x08020014

0801c4a4 <_Bfree>:
 801c4a4:	b570      	push	{r4, r5, r6, lr}
 801c4a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c4a8:	4605      	mov	r5, r0
 801c4aa:	460c      	mov	r4, r1
 801c4ac:	b976      	cbnz	r6, 801c4cc <_Bfree+0x28>
 801c4ae:	2010      	movs	r0, #16
 801c4b0:	f7ff ff92 	bl	801c3d8 <malloc>
 801c4b4:	4602      	mov	r2, r0
 801c4b6:	6268      	str	r0, [r5, #36]	; 0x24
 801c4b8:	b920      	cbnz	r0, 801c4c4 <_Bfree+0x20>
 801c4ba:	4b09      	ldr	r3, [pc, #36]	; (801c4e0 <_Bfree+0x3c>)
 801c4bc:	4809      	ldr	r0, [pc, #36]	; (801c4e4 <_Bfree+0x40>)
 801c4be:	218a      	movs	r1, #138	; 0x8a
 801c4c0:	f000 fe6c 	bl	801d19c <__assert_func>
 801c4c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c4c8:	6006      	str	r6, [r0, #0]
 801c4ca:	60c6      	str	r6, [r0, #12]
 801c4cc:	b13c      	cbz	r4, 801c4de <_Bfree+0x3a>
 801c4ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c4d0:	6862      	ldr	r2, [r4, #4]
 801c4d2:	68db      	ldr	r3, [r3, #12]
 801c4d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c4d8:	6021      	str	r1, [r4, #0]
 801c4da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c4de:	bd70      	pop	{r4, r5, r6, pc}
 801c4e0:	0801ff16 	.word	0x0801ff16
 801c4e4:	08020014 	.word	0x08020014

0801c4e8 <__multadd>:
 801c4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4ec:	690d      	ldr	r5, [r1, #16]
 801c4ee:	4607      	mov	r7, r0
 801c4f0:	460c      	mov	r4, r1
 801c4f2:	461e      	mov	r6, r3
 801c4f4:	f101 0c14 	add.w	ip, r1, #20
 801c4f8:	2000      	movs	r0, #0
 801c4fa:	f8dc 3000 	ldr.w	r3, [ip]
 801c4fe:	b299      	uxth	r1, r3
 801c500:	fb02 6101 	mla	r1, r2, r1, r6
 801c504:	0c1e      	lsrs	r6, r3, #16
 801c506:	0c0b      	lsrs	r3, r1, #16
 801c508:	fb02 3306 	mla	r3, r2, r6, r3
 801c50c:	b289      	uxth	r1, r1
 801c50e:	3001      	adds	r0, #1
 801c510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c514:	4285      	cmp	r5, r0
 801c516:	f84c 1b04 	str.w	r1, [ip], #4
 801c51a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c51e:	dcec      	bgt.n	801c4fa <__multadd+0x12>
 801c520:	b30e      	cbz	r6, 801c566 <__multadd+0x7e>
 801c522:	68a3      	ldr	r3, [r4, #8]
 801c524:	42ab      	cmp	r3, r5
 801c526:	dc19      	bgt.n	801c55c <__multadd+0x74>
 801c528:	6861      	ldr	r1, [r4, #4]
 801c52a:	4638      	mov	r0, r7
 801c52c:	3101      	adds	r1, #1
 801c52e:	f7ff ff79 	bl	801c424 <_Balloc>
 801c532:	4680      	mov	r8, r0
 801c534:	b928      	cbnz	r0, 801c542 <__multadd+0x5a>
 801c536:	4602      	mov	r2, r0
 801c538:	4b0c      	ldr	r3, [pc, #48]	; (801c56c <__multadd+0x84>)
 801c53a:	480d      	ldr	r0, [pc, #52]	; (801c570 <__multadd+0x88>)
 801c53c:	21b5      	movs	r1, #181	; 0xb5
 801c53e:	f000 fe2d 	bl	801d19c <__assert_func>
 801c542:	6922      	ldr	r2, [r4, #16]
 801c544:	3202      	adds	r2, #2
 801c546:	f104 010c 	add.w	r1, r4, #12
 801c54a:	0092      	lsls	r2, r2, #2
 801c54c:	300c      	adds	r0, #12
 801c54e:	f7fc fda2 	bl	8019096 <memcpy>
 801c552:	4621      	mov	r1, r4
 801c554:	4638      	mov	r0, r7
 801c556:	f7ff ffa5 	bl	801c4a4 <_Bfree>
 801c55a:	4644      	mov	r4, r8
 801c55c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c560:	3501      	adds	r5, #1
 801c562:	615e      	str	r6, [r3, #20]
 801c564:	6125      	str	r5, [r4, #16]
 801c566:	4620      	mov	r0, r4
 801c568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c56c:	0801ff88 	.word	0x0801ff88
 801c570:	08020014 	.word	0x08020014

0801c574 <__s2b>:
 801c574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c578:	460c      	mov	r4, r1
 801c57a:	4615      	mov	r5, r2
 801c57c:	461f      	mov	r7, r3
 801c57e:	2209      	movs	r2, #9
 801c580:	3308      	adds	r3, #8
 801c582:	4606      	mov	r6, r0
 801c584:	fb93 f3f2 	sdiv	r3, r3, r2
 801c588:	2100      	movs	r1, #0
 801c58a:	2201      	movs	r2, #1
 801c58c:	429a      	cmp	r2, r3
 801c58e:	db09      	blt.n	801c5a4 <__s2b+0x30>
 801c590:	4630      	mov	r0, r6
 801c592:	f7ff ff47 	bl	801c424 <_Balloc>
 801c596:	b940      	cbnz	r0, 801c5aa <__s2b+0x36>
 801c598:	4602      	mov	r2, r0
 801c59a:	4b19      	ldr	r3, [pc, #100]	; (801c600 <__s2b+0x8c>)
 801c59c:	4819      	ldr	r0, [pc, #100]	; (801c604 <__s2b+0x90>)
 801c59e:	21ce      	movs	r1, #206	; 0xce
 801c5a0:	f000 fdfc 	bl	801d19c <__assert_func>
 801c5a4:	0052      	lsls	r2, r2, #1
 801c5a6:	3101      	adds	r1, #1
 801c5a8:	e7f0      	b.n	801c58c <__s2b+0x18>
 801c5aa:	9b08      	ldr	r3, [sp, #32]
 801c5ac:	6143      	str	r3, [r0, #20]
 801c5ae:	2d09      	cmp	r5, #9
 801c5b0:	f04f 0301 	mov.w	r3, #1
 801c5b4:	6103      	str	r3, [r0, #16]
 801c5b6:	dd16      	ble.n	801c5e6 <__s2b+0x72>
 801c5b8:	f104 0909 	add.w	r9, r4, #9
 801c5bc:	46c8      	mov	r8, r9
 801c5be:	442c      	add	r4, r5
 801c5c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c5c4:	4601      	mov	r1, r0
 801c5c6:	3b30      	subs	r3, #48	; 0x30
 801c5c8:	220a      	movs	r2, #10
 801c5ca:	4630      	mov	r0, r6
 801c5cc:	f7ff ff8c 	bl	801c4e8 <__multadd>
 801c5d0:	45a0      	cmp	r8, r4
 801c5d2:	d1f5      	bne.n	801c5c0 <__s2b+0x4c>
 801c5d4:	f1a5 0408 	sub.w	r4, r5, #8
 801c5d8:	444c      	add	r4, r9
 801c5da:	1b2d      	subs	r5, r5, r4
 801c5dc:	1963      	adds	r3, r4, r5
 801c5de:	42bb      	cmp	r3, r7
 801c5e0:	db04      	blt.n	801c5ec <__s2b+0x78>
 801c5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c5e6:	340a      	adds	r4, #10
 801c5e8:	2509      	movs	r5, #9
 801c5ea:	e7f6      	b.n	801c5da <__s2b+0x66>
 801c5ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c5f0:	4601      	mov	r1, r0
 801c5f2:	3b30      	subs	r3, #48	; 0x30
 801c5f4:	220a      	movs	r2, #10
 801c5f6:	4630      	mov	r0, r6
 801c5f8:	f7ff ff76 	bl	801c4e8 <__multadd>
 801c5fc:	e7ee      	b.n	801c5dc <__s2b+0x68>
 801c5fe:	bf00      	nop
 801c600:	0801ff88 	.word	0x0801ff88
 801c604:	08020014 	.word	0x08020014

0801c608 <__hi0bits>:
 801c608:	0c03      	lsrs	r3, r0, #16
 801c60a:	041b      	lsls	r3, r3, #16
 801c60c:	b9d3      	cbnz	r3, 801c644 <__hi0bits+0x3c>
 801c60e:	0400      	lsls	r0, r0, #16
 801c610:	2310      	movs	r3, #16
 801c612:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c616:	bf04      	itt	eq
 801c618:	0200      	lsleq	r0, r0, #8
 801c61a:	3308      	addeq	r3, #8
 801c61c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c620:	bf04      	itt	eq
 801c622:	0100      	lsleq	r0, r0, #4
 801c624:	3304      	addeq	r3, #4
 801c626:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c62a:	bf04      	itt	eq
 801c62c:	0080      	lsleq	r0, r0, #2
 801c62e:	3302      	addeq	r3, #2
 801c630:	2800      	cmp	r0, #0
 801c632:	db05      	blt.n	801c640 <__hi0bits+0x38>
 801c634:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c638:	f103 0301 	add.w	r3, r3, #1
 801c63c:	bf08      	it	eq
 801c63e:	2320      	moveq	r3, #32
 801c640:	4618      	mov	r0, r3
 801c642:	4770      	bx	lr
 801c644:	2300      	movs	r3, #0
 801c646:	e7e4      	b.n	801c612 <__hi0bits+0xa>

0801c648 <__lo0bits>:
 801c648:	6803      	ldr	r3, [r0, #0]
 801c64a:	f013 0207 	ands.w	r2, r3, #7
 801c64e:	4601      	mov	r1, r0
 801c650:	d00b      	beq.n	801c66a <__lo0bits+0x22>
 801c652:	07da      	lsls	r2, r3, #31
 801c654:	d423      	bmi.n	801c69e <__lo0bits+0x56>
 801c656:	0798      	lsls	r0, r3, #30
 801c658:	bf49      	itett	mi
 801c65a:	085b      	lsrmi	r3, r3, #1
 801c65c:	089b      	lsrpl	r3, r3, #2
 801c65e:	2001      	movmi	r0, #1
 801c660:	600b      	strmi	r3, [r1, #0]
 801c662:	bf5c      	itt	pl
 801c664:	600b      	strpl	r3, [r1, #0]
 801c666:	2002      	movpl	r0, #2
 801c668:	4770      	bx	lr
 801c66a:	b298      	uxth	r0, r3
 801c66c:	b9a8      	cbnz	r0, 801c69a <__lo0bits+0x52>
 801c66e:	0c1b      	lsrs	r3, r3, #16
 801c670:	2010      	movs	r0, #16
 801c672:	b2da      	uxtb	r2, r3
 801c674:	b90a      	cbnz	r2, 801c67a <__lo0bits+0x32>
 801c676:	3008      	adds	r0, #8
 801c678:	0a1b      	lsrs	r3, r3, #8
 801c67a:	071a      	lsls	r2, r3, #28
 801c67c:	bf04      	itt	eq
 801c67e:	091b      	lsreq	r3, r3, #4
 801c680:	3004      	addeq	r0, #4
 801c682:	079a      	lsls	r2, r3, #30
 801c684:	bf04      	itt	eq
 801c686:	089b      	lsreq	r3, r3, #2
 801c688:	3002      	addeq	r0, #2
 801c68a:	07da      	lsls	r2, r3, #31
 801c68c:	d403      	bmi.n	801c696 <__lo0bits+0x4e>
 801c68e:	085b      	lsrs	r3, r3, #1
 801c690:	f100 0001 	add.w	r0, r0, #1
 801c694:	d005      	beq.n	801c6a2 <__lo0bits+0x5a>
 801c696:	600b      	str	r3, [r1, #0]
 801c698:	4770      	bx	lr
 801c69a:	4610      	mov	r0, r2
 801c69c:	e7e9      	b.n	801c672 <__lo0bits+0x2a>
 801c69e:	2000      	movs	r0, #0
 801c6a0:	4770      	bx	lr
 801c6a2:	2020      	movs	r0, #32
 801c6a4:	4770      	bx	lr
	...

0801c6a8 <__i2b>:
 801c6a8:	b510      	push	{r4, lr}
 801c6aa:	460c      	mov	r4, r1
 801c6ac:	2101      	movs	r1, #1
 801c6ae:	f7ff feb9 	bl	801c424 <_Balloc>
 801c6b2:	4602      	mov	r2, r0
 801c6b4:	b928      	cbnz	r0, 801c6c2 <__i2b+0x1a>
 801c6b6:	4b05      	ldr	r3, [pc, #20]	; (801c6cc <__i2b+0x24>)
 801c6b8:	4805      	ldr	r0, [pc, #20]	; (801c6d0 <__i2b+0x28>)
 801c6ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c6be:	f000 fd6d 	bl	801d19c <__assert_func>
 801c6c2:	2301      	movs	r3, #1
 801c6c4:	6144      	str	r4, [r0, #20]
 801c6c6:	6103      	str	r3, [r0, #16]
 801c6c8:	bd10      	pop	{r4, pc}
 801c6ca:	bf00      	nop
 801c6cc:	0801ff88 	.word	0x0801ff88
 801c6d0:	08020014 	.word	0x08020014

0801c6d4 <__multiply>:
 801c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6d8:	4691      	mov	r9, r2
 801c6da:	690a      	ldr	r2, [r1, #16]
 801c6dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c6e0:	429a      	cmp	r2, r3
 801c6e2:	bfb8      	it	lt
 801c6e4:	460b      	movlt	r3, r1
 801c6e6:	460c      	mov	r4, r1
 801c6e8:	bfbc      	itt	lt
 801c6ea:	464c      	movlt	r4, r9
 801c6ec:	4699      	movlt	r9, r3
 801c6ee:	6927      	ldr	r7, [r4, #16]
 801c6f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c6f4:	68a3      	ldr	r3, [r4, #8]
 801c6f6:	6861      	ldr	r1, [r4, #4]
 801c6f8:	eb07 060a 	add.w	r6, r7, sl
 801c6fc:	42b3      	cmp	r3, r6
 801c6fe:	b085      	sub	sp, #20
 801c700:	bfb8      	it	lt
 801c702:	3101      	addlt	r1, #1
 801c704:	f7ff fe8e 	bl	801c424 <_Balloc>
 801c708:	b930      	cbnz	r0, 801c718 <__multiply+0x44>
 801c70a:	4602      	mov	r2, r0
 801c70c:	4b44      	ldr	r3, [pc, #272]	; (801c820 <__multiply+0x14c>)
 801c70e:	4845      	ldr	r0, [pc, #276]	; (801c824 <__multiply+0x150>)
 801c710:	f240 115d 	movw	r1, #349	; 0x15d
 801c714:	f000 fd42 	bl	801d19c <__assert_func>
 801c718:	f100 0514 	add.w	r5, r0, #20
 801c71c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c720:	462b      	mov	r3, r5
 801c722:	2200      	movs	r2, #0
 801c724:	4543      	cmp	r3, r8
 801c726:	d321      	bcc.n	801c76c <__multiply+0x98>
 801c728:	f104 0314 	add.w	r3, r4, #20
 801c72c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c730:	f109 0314 	add.w	r3, r9, #20
 801c734:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c738:	9202      	str	r2, [sp, #8]
 801c73a:	1b3a      	subs	r2, r7, r4
 801c73c:	3a15      	subs	r2, #21
 801c73e:	f022 0203 	bic.w	r2, r2, #3
 801c742:	3204      	adds	r2, #4
 801c744:	f104 0115 	add.w	r1, r4, #21
 801c748:	428f      	cmp	r7, r1
 801c74a:	bf38      	it	cc
 801c74c:	2204      	movcc	r2, #4
 801c74e:	9201      	str	r2, [sp, #4]
 801c750:	9a02      	ldr	r2, [sp, #8]
 801c752:	9303      	str	r3, [sp, #12]
 801c754:	429a      	cmp	r2, r3
 801c756:	d80c      	bhi.n	801c772 <__multiply+0x9e>
 801c758:	2e00      	cmp	r6, #0
 801c75a:	dd03      	ble.n	801c764 <__multiply+0x90>
 801c75c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c760:	2b00      	cmp	r3, #0
 801c762:	d05a      	beq.n	801c81a <__multiply+0x146>
 801c764:	6106      	str	r6, [r0, #16]
 801c766:	b005      	add	sp, #20
 801c768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c76c:	f843 2b04 	str.w	r2, [r3], #4
 801c770:	e7d8      	b.n	801c724 <__multiply+0x50>
 801c772:	f8b3 a000 	ldrh.w	sl, [r3]
 801c776:	f1ba 0f00 	cmp.w	sl, #0
 801c77a:	d024      	beq.n	801c7c6 <__multiply+0xf2>
 801c77c:	f104 0e14 	add.w	lr, r4, #20
 801c780:	46a9      	mov	r9, r5
 801c782:	f04f 0c00 	mov.w	ip, #0
 801c786:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c78a:	f8d9 1000 	ldr.w	r1, [r9]
 801c78e:	fa1f fb82 	uxth.w	fp, r2
 801c792:	b289      	uxth	r1, r1
 801c794:	fb0a 110b 	mla	r1, sl, fp, r1
 801c798:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c79c:	f8d9 2000 	ldr.w	r2, [r9]
 801c7a0:	4461      	add	r1, ip
 801c7a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c7a6:	fb0a c20b 	mla	r2, sl, fp, ip
 801c7aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c7ae:	b289      	uxth	r1, r1
 801c7b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c7b4:	4577      	cmp	r7, lr
 801c7b6:	f849 1b04 	str.w	r1, [r9], #4
 801c7ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c7be:	d8e2      	bhi.n	801c786 <__multiply+0xb2>
 801c7c0:	9a01      	ldr	r2, [sp, #4]
 801c7c2:	f845 c002 	str.w	ip, [r5, r2]
 801c7c6:	9a03      	ldr	r2, [sp, #12]
 801c7c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c7cc:	3304      	adds	r3, #4
 801c7ce:	f1b9 0f00 	cmp.w	r9, #0
 801c7d2:	d020      	beq.n	801c816 <__multiply+0x142>
 801c7d4:	6829      	ldr	r1, [r5, #0]
 801c7d6:	f104 0c14 	add.w	ip, r4, #20
 801c7da:	46ae      	mov	lr, r5
 801c7dc:	f04f 0a00 	mov.w	sl, #0
 801c7e0:	f8bc b000 	ldrh.w	fp, [ip]
 801c7e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c7e8:	fb09 220b 	mla	r2, r9, fp, r2
 801c7ec:	4492      	add	sl, r2
 801c7ee:	b289      	uxth	r1, r1
 801c7f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c7f4:	f84e 1b04 	str.w	r1, [lr], #4
 801c7f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c7fc:	f8be 1000 	ldrh.w	r1, [lr]
 801c800:	0c12      	lsrs	r2, r2, #16
 801c802:	fb09 1102 	mla	r1, r9, r2, r1
 801c806:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801c80a:	4567      	cmp	r7, ip
 801c80c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c810:	d8e6      	bhi.n	801c7e0 <__multiply+0x10c>
 801c812:	9a01      	ldr	r2, [sp, #4]
 801c814:	50a9      	str	r1, [r5, r2]
 801c816:	3504      	adds	r5, #4
 801c818:	e79a      	b.n	801c750 <__multiply+0x7c>
 801c81a:	3e01      	subs	r6, #1
 801c81c:	e79c      	b.n	801c758 <__multiply+0x84>
 801c81e:	bf00      	nop
 801c820:	0801ff88 	.word	0x0801ff88
 801c824:	08020014 	.word	0x08020014

0801c828 <__pow5mult>:
 801c828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c82c:	4615      	mov	r5, r2
 801c82e:	f012 0203 	ands.w	r2, r2, #3
 801c832:	4606      	mov	r6, r0
 801c834:	460f      	mov	r7, r1
 801c836:	d007      	beq.n	801c848 <__pow5mult+0x20>
 801c838:	4c25      	ldr	r4, [pc, #148]	; (801c8d0 <__pow5mult+0xa8>)
 801c83a:	3a01      	subs	r2, #1
 801c83c:	2300      	movs	r3, #0
 801c83e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c842:	f7ff fe51 	bl	801c4e8 <__multadd>
 801c846:	4607      	mov	r7, r0
 801c848:	10ad      	asrs	r5, r5, #2
 801c84a:	d03d      	beq.n	801c8c8 <__pow5mult+0xa0>
 801c84c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c84e:	b97c      	cbnz	r4, 801c870 <__pow5mult+0x48>
 801c850:	2010      	movs	r0, #16
 801c852:	f7ff fdc1 	bl	801c3d8 <malloc>
 801c856:	4602      	mov	r2, r0
 801c858:	6270      	str	r0, [r6, #36]	; 0x24
 801c85a:	b928      	cbnz	r0, 801c868 <__pow5mult+0x40>
 801c85c:	4b1d      	ldr	r3, [pc, #116]	; (801c8d4 <__pow5mult+0xac>)
 801c85e:	481e      	ldr	r0, [pc, #120]	; (801c8d8 <__pow5mult+0xb0>)
 801c860:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c864:	f000 fc9a 	bl	801d19c <__assert_func>
 801c868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c86c:	6004      	str	r4, [r0, #0]
 801c86e:	60c4      	str	r4, [r0, #12]
 801c870:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c878:	b94c      	cbnz	r4, 801c88e <__pow5mult+0x66>
 801c87a:	f240 2171 	movw	r1, #625	; 0x271
 801c87e:	4630      	mov	r0, r6
 801c880:	f7ff ff12 	bl	801c6a8 <__i2b>
 801c884:	2300      	movs	r3, #0
 801c886:	f8c8 0008 	str.w	r0, [r8, #8]
 801c88a:	4604      	mov	r4, r0
 801c88c:	6003      	str	r3, [r0, #0]
 801c88e:	f04f 0900 	mov.w	r9, #0
 801c892:	07eb      	lsls	r3, r5, #31
 801c894:	d50a      	bpl.n	801c8ac <__pow5mult+0x84>
 801c896:	4639      	mov	r1, r7
 801c898:	4622      	mov	r2, r4
 801c89a:	4630      	mov	r0, r6
 801c89c:	f7ff ff1a 	bl	801c6d4 <__multiply>
 801c8a0:	4639      	mov	r1, r7
 801c8a2:	4680      	mov	r8, r0
 801c8a4:	4630      	mov	r0, r6
 801c8a6:	f7ff fdfd 	bl	801c4a4 <_Bfree>
 801c8aa:	4647      	mov	r7, r8
 801c8ac:	106d      	asrs	r5, r5, #1
 801c8ae:	d00b      	beq.n	801c8c8 <__pow5mult+0xa0>
 801c8b0:	6820      	ldr	r0, [r4, #0]
 801c8b2:	b938      	cbnz	r0, 801c8c4 <__pow5mult+0x9c>
 801c8b4:	4622      	mov	r2, r4
 801c8b6:	4621      	mov	r1, r4
 801c8b8:	4630      	mov	r0, r6
 801c8ba:	f7ff ff0b 	bl	801c6d4 <__multiply>
 801c8be:	6020      	str	r0, [r4, #0]
 801c8c0:	f8c0 9000 	str.w	r9, [r0]
 801c8c4:	4604      	mov	r4, r0
 801c8c6:	e7e4      	b.n	801c892 <__pow5mult+0x6a>
 801c8c8:	4638      	mov	r0, r7
 801c8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c8ce:	bf00      	nop
 801c8d0:	08020160 	.word	0x08020160
 801c8d4:	0801ff16 	.word	0x0801ff16
 801c8d8:	08020014 	.word	0x08020014

0801c8dc <__lshift>:
 801c8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8e0:	460c      	mov	r4, r1
 801c8e2:	6849      	ldr	r1, [r1, #4]
 801c8e4:	6923      	ldr	r3, [r4, #16]
 801c8e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c8ea:	68a3      	ldr	r3, [r4, #8]
 801c8ec:	4607      	mov	r7, r0
 801c8ee:	4691      	mov	r9, r2
 801c8f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c8f4:	f108 0601 	add.w	r6, r8, #1
 801c8f8:	42b3      	cmp	r3, r6
 801c8fa:	db0b      	blt.n	801c914 <__lshift+0x38>
 801c8fc:	4638      	mov	r0, r7
 801c8fe:	f7ff fd91 	bl	801c424 <_Balloc>
 801c902:	4605      	mov	r5, r0
 801c904:	b948      	cbnz	r0, 801c91a <__lshift+0x3e>
 801c906:	4602      	mov	r2, r0
 801c908:	4b2a      	ldr	r3, [pc, #168]	; (801c9b4 <__lshift+0xd8>)
 801c90a:	482b      	ldr	r0, [pc, #172]	; (801c9b8 <__lshift+0xdc>)
 801c90c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c910:	f000 fc44 	bl	801d19c <__assert_func>
 801c914:	3101      	adds	r1, #1
 801c916:	005b      	lsls	r3, r3, #1
 801c918:	e7ee      	b.n	801c8f8 <__lshift+0x1c>
 801c91a:	2300      	movs	r3, #0
 801c91c:	f100 0114 	add.w	r1, r0, #20
 801c920:	f100 0210 	add.w	r2, r0, #16
 801c924:	4618      	mov	r0, r3
 801c926:	4553      	cmp	r3, sl
 801c928:	db37      	blt.n	801c99a <__lshift+0xbe>
 801c92a:	6920      	ldr	r0, [r4, #16]
 801c92c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c930:	f104 0314 	add.w	r3, r4, #20
 801c934:	f019 091f 	ands.w	r9, r9, #31
 801c938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c93c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c940:	d02f      	beq.n	801c9a2 <__lshift+0xc6>
 801c942:	f1c9 0e20 	rsb	lr, r9, #32
 801c946:	468a      	mov	sl, r1
 801c948:	f04f 0c00 	mov.w	ip, #0
 801c94c:	681a      	ldr	r2, [r3, #0]
 801c94e:	fa02 f209 	lsl.w	r2, r2, r9
 801c952:	ea42 020c 	orr.w	r2, r2, ip
 801c956:	f84a 2b04 	str.w	r2, [sl], #4
 801c95a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c95e:	4298      	cmp	r0, r3
 801c960:	fa22 fc0e 	lsr.w	ip, r2, lr
 801c964:	d8f2      	bhi.n	801c94c <__lshift+0x70>
 801c966:	1b03      	subs	r3, r0, r4
 801c968:	3b15      	subs	r3, #21
 801c96a:	f023 0303 	bic.w	r3, r3, #3
 801c96e:	3304      	adds	r3, #4
 801c970:	f104 0215 	add.w	r2, r4, #21
 801c974:	4290      	cmp	r0, r2
 801c976:	bf38      	it	cc
 801c978:	2304      	movcc	r3, #4
 801c97a:	f841 c003 	str.w	ip, [r1, r3]
 801c97e:	f1bc 0f00 	cmp.w	ip, #0
 801c982:	d001      	beq.n	801c988 <__lshift+0xac>
 801c984:	f108 0602 	add.w	r6, r8, #2
 801c988:	3e01      	subs	r6, #1
 801c98a:	4638      	mov	r0, r7
 801c98c:	612e      	str	r6, [r5, #16]
 801c98e:	4621      	mov	r1, r4
 801c990:	f7ff fd88 	bl	801c4a4 <_Bfree>
 801c994:	4628      	mov	r0, r5
 801c996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c99a:	f842 0f04 	str.w	r0, [r2, #4]!
 801c99e:	3301      	adds	r3, #1
 801c9a0:	e7c1      	b.n	801c926 <__lshift+0x4a>
 801c9a2:	3904      	subs	r1, #4
 801c9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 801c9a8:	f841 2f04 	str.w	r2, [r1, #4]!
 801c9ac:	4298      	cmp	r0, r3
 801c9ae:	d8f9      	bhi.n	801c9a4 <__lshift+0xc8>
 801c9b0:	e7ea      	b.n	801c988 <__lshift+0xac>
 801c9b2:	bf00      	nop
 801c9b4:	0801ff88 	.word	0x0801ff88
 801c9b8:	08020014 	.word	0x08020014

0801c9bc <__mcmp>:
 801c9bc:	b530      	push	{r4, r5, lr}
 801c9be:	6902      	ldr	r2, [r0, #16]
 801c9c0:	690c      	ldr	r4, [r1, #16]
 801c9c2:	1b12      	subs	r2, r2, r4
 801c9c4:	d10e      	bne.n	801c9e4 <__mcmp+0x28>
 801c9c6:	f100 0314 	add.w	r3, r0, #20
 801c9ca:	3114      	adds	r1, #20
 801c9cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c9d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c9d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c9d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c9dc:	42a5      	cmp	r5, r4
 801c9de:	d003      	beq.n	801c9e8 <__mcmp+0x2c>
 801c9e0:	d305      	bcc.n	801c9ee <__mcmp+0x32>
 801c9e2:	2201      	movs	r2, #1
 801c9e4:	4610      	mov	r0, r2
 801c9e6:	bd30      	pop	{r4, r5, pc}
 801c9e8:	4283      	cmp	r3, r0
 801c9ea:	d3f3      	bcc.n	801c9d4 <__mcmp+0x18>
 801c9ec:	e7fa      	b.n	801c9e4 <__mcmp+0x28>
 801c9ee:	f04f 32ff 	mov.w	r2, #4294967295
 801c9f2:	e7f7      	b.n	801c9e4 <__mcmp+0x28>

0801c9f4 <__mdiff>:
 801c9f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9f8:	460c      	mov	r4, r1
 801c9fa:	4606      	mov	r6, r0
 801c9fc:	4611      	mov	r1, r2
 801c9fe:	4620      	mov	r0, r4
 801ca00:	4690      	mov	r8, r2
 801ca02:	f7ff ffdb 	bl	801c9bc <__mcmp>
 801ca06:	1e05      	subs	r5, r0, #0
 801ca08:	d110      	bne.n	801ca2c <__mdiff+0x38>
 801ca0a:	4629      	mov	r1, r5
 801ca0c:	4630      	mov	r0, r6
 801ca0e:	f7ff fd09 	bl	801c424 <_Balloc>
 801ca12:	b930      	cbnz	r0, 801ca22 <__mdiff+0x2e>
 801ca14:	4b3a      	ldr	r3, [pc, #232]	; (801cb00 <__mdiff+0x10c>)
 801ca16:	4602      	mov	r2, r0
 801ca18:	f240 2132 	movw	r1, #562	; 0x232
 801ca1c:	4839      	ldr	r0, [pc, #228]	; (801cb04 <__mdiff+0x110>)
 801ca1e:	f000 fbbd 	bl	801d19c <__assert_func>
 801ca22:	2301      	movs	r3, #1
 801ca24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ca28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca2c:	bfa4      	itt	ge
 801ca2e:	4643      	movge	r3, r8
 801ca30:	46a0      	movge	r8, r4
 801ca32:	4630      	mov	r0, r6
 801ca34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ca38:	bfa6      	itte	ge
 801ca3a:	461c      	movge	r4, r3
 801ca3c:	2500      	movge	r5, #0
 801ca3e:	2501      	movlt	r5, #1
 801ca40:	f7ff fcf0 	bl	801c424 <_Balloc>
 801ca44:	b920      	cbnz	r0, 801ca50 <__mdiff+0x5c>
 801ca46:	4b2e      	ldr	r3, [pc, #184]	; (801cb00 <__mdiff+0x10c>)
 801ca48:	4602      	mov	r2, r0
 801ca4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ca4e:	e7e5      	b.n	801ca1c <__mdiff+0x28>
 801ca50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ca54:	6926      	ldr	r6, [r4, #16]
 801ca56:	60c5      	str	r5, [r0, #12]
 801ca58:	f104 0914 	add.w	r9, r4, #20
 801ca5c:	f108 0514 	add.w	r5, r8, #20
 801ca60:	f100 0e14 	add.w	lr, r0, #20
 801ca64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ca68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ca6c:	f108 0210 	add.w	r2, r8, #16
 801ca70:	46f2      	mov	sl, lr
 801ca72:	2100      	movs	r1, #0
 801ca74:	f859 3b04 	ldr.w	r3, [r9], #4
 801ca78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ca7c:	fa1f f883 	uxth.w	r8, r3
 801ca80:	fa11 f18b 	uxtah	r1, r1, fp
 801ca84:	0c1b      	lsrs	r3, r3, #16
 801ca86:	eba1 0808 	sub.w	r8, r1, r8
 801ca8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ca8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ca92:	fa1f f888 	uxth.w	r8, r8
 801ca96:	1419      	asrs	r1, r3, #16
 801ca98:	454e      	cmp	r6, r9
 801ca9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ca9e:	f84a 3b04 	str.w	r3, [sl], #4
 801caa2:	d8e7      	bhi.n	801ca74 <__mdiff+0x80>
 801caa4:	1b33      	subs	r3, r6, r4
 801caa6:	3b15      	subs	r3, #21
 801caa8:	f023 0303 	bic.w	r3, r3, #3
 801caac:	3304      	adds	r3, #4
 801caae:	3415      	adds	r4, #21
 801cab0:	42a6      	cmp	r6, r4
 801cab2:	bf38      	it	cc
 801cab4:	2304      	movcc	r3, #4
 801cab6:	441d      	add	r5, r3
 801cab8:	4473      	add	r3, lr
 801caba:	469e      	mov	lr, r3
 801cabc:	462e      	mov	r6, r5
 801cabe:	4566      	cmp	r6, ip
 801cac0:	d30e      	bcc.n	801cae0 <__mdiff+0xec>
 801cac2:	f10c 0203 	add.w	r2, ip, #3
 801cac6:	1b52      	subs	r2, r2, r5
 801cac8:	f022 0203 	bic.w	r2, r2, #3
 801cacc:	3d03      	subs	r5, #3
 801cace:	45ac      	cmp	ip, r5
 801cad0:	bf38      	it	cc
 801cad2:	2200      	movcc	r2, #0
 801cad4:	441a      	add	r2, r3
 801cad6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cada:	b17b      	cbz	r3, 801cafc <__mdiff+0x108>
 801cadc:	6107      	str	r7, [r0, #16]
 801cade:	e7a3      	b.n	801ca28 <__mdiff+0x34>
 801cae0:	f856 8b04 	ldr.w	r8, [r6], #4
 801cae4:	fa11 f288 	uxtah	r2, r1, r8
 801cae8:	1414      	asrs	r4, r2, #16
 801caea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801caee:	b292      	uxth	r2, r2
 801caf0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801caf4:	f84e 2b04 	str.w	r2, [lr], #4
 801caf8:	1421      	asrs	r1, r4, #16
 801cafa:	e7e0      	b.n	801cabe <__mdiff+0xca>
 801cafc:	3f01      	subs	r7, #1
 801cafe:	e7ea      	b.n	801cad6 <__mdiff+0xe2>
 801cb00:	0801ff88 	.word	0x0801ff88
 801cb04:	08020014 	.word	0x08020014

0801cb08 <__ulp>:
 801cb08:	b082      	sub	sp, #8
 801cb0a:	ed8d 0b00 	vstr	d0, [sp]
 801cb0e:	9b01      	ldr	r3, [sp, #4]
 801cb10:	4912      	ldr	r1, [pc, #72]	; (801cb5c <__ulp+0x54>)
 801cb12:	4019      	ands	r1, r3
 801cb14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801cb18:	2900      	cmp	r1, #0
 801cb1a:	dd05      	ble.n	801cb28 <__ulp+0x20>
 801cb1c:	2200      	movs	r2, #0
 801cb1e:	460b      	mov	r3, r1
 801cb20:	ec43 2b10 	vmov	d0, r2, r3
 801cb24:	b002      	add	sp, #8
 801cb26:	4770      	bx	lr
 801cb28:	4249      	negs	r1, r1
 801cb2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801cb2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801cb32:	f04f 0200 	mov.w	r2, #0
 801cb36:	f04f 0300 	mov.w	r3, #0
 801cb3a:	da04      	bge.n	801cb46 <__ulp+0x3e>
 801cb3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cb40:	fa41 f300 	asr.w	r3, r1, r0
 801cb44:	e7ec      	b.n	801cb20 <__ulp+0x18>
 801cb46:	f1a0 0114 	sub.w	r1, r0, #20
 801cb4a:	291e      	cmp	r1, #30
 801cb4c:	bfda      	itte	le
 801cb4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801cb52:	fa20 f101 	lsrle.w	r1, r0, r1
 801cb56:	2101      	movgt	r1, #1
 801cb58:	460a      	mov	r2, r1
 801cb5a:	e7e1      	b.n	801cb20 <__ulp+0x18>
 801cb5c:	7ff00000 	.word	0x7ff00000

0801cb60 <__b2d>:
 801cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb62:	6905      	ldr	r5, [r0, #16]
 801cb64:	f100 0714 	add.w	r7, r0, #20
 801cb68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801cb6c:	1f2e      	subs	r6, r5, #4
 801cb6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801cb72:	4620      	mov	r0, r4
 801cb74:	f7ff fd48 	bl	801c608 <__hi0bits>
 801cb78:	f1c0 0320 	rsb	r3, r0, #32
 801cb7c:	280a      	cmp	r0, #10
 801cb7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cbfc <__b2d+0x9c>
 801cb82:	600b      	str	r3, [r1, #0]
 801cb84:	dc14      	bgt.n	801cbb0 <__b2d+0x50>
 801cb86:	f1c0 0e0b 	rsb	lr, r0, #11
 801cb8a:	fa24 f10e 	lsr.w	r1, r4, lr
 801cb8e:	42b7      	cmp	r7, r6
 801cb90:	ea41 030c 	orr.w	r3, r1, ip
 801cb94:	bf34      	ite	cc
 801cb96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cb9a:	2100      	movcs	r1, #0
 801cb9c:	3015      	adds	r0, #21
 801cb9e:	fa04 f000 	lsl.w	r0, r4, r0
 801cba2:	fa21 f10e 	lsr.w	r1, r1, lr
 801cba6:	ea40 0201 	orr.w	r2, r0, r1
 801cbaa:	ec43 2b10 	vmov	d0, r2, r3
 801cbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cbb0:	42b7      	cmp	r7, r6
 801cbb2:	bf3a      	itte	cc
 801cbb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cbb8:	f1a5 0608 	subcc.w	r6, r5, #8
 801cbbc:	2100      	movcs	r1, #0
 801cbbe:	380b      	subs	r0, #11
 801cbc0:	d017      	beq.n	801cbf2 <__b2d+0x92>
 801cbc2:	f1c0 0c20 	rsb	ip, r0, #32
 801cbc6:	fa04 f500 	lsl.w	r5, r4, r0
 801cbca:	42be      	cmp	r6, r7
 801cbcc:	fa21 f40c 	lsr.w	r4, r1, ip
 801cbd0:	ea45 0504 	orr.w	r5, r5, r4
 801cbd4:	bf8c      	ite	hi
 801cbd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cbda:	2400      	movls	r4, #0
 801cbdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cbe0:	fa01 f000 	lsl.w	r0, r1, r0
 801cbe4:	fa24 f40c 	lsr.w	r4, r4, ip
 801cbe8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cbec:	ea40 0204 	orr.w	r2, r0, r4
 801cbf0:	e7db      	b.n	801cbaa <__b2d+0x4a>
 801cbf2:	ea44 030c 	orr.w	r3, r4, ip
 801cbf6:	460a      	mov	r2, r1
 801cbf8:	e7d7      	b.n	801cbaa <__b2d+0x4a>
 801cbfa:	bf00      	nop
 801cbfc:	3ff00000 	.word	0x3ff00000

0801cc00 <__d2b>:
 801cc00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cc04:	4689      	mov	r9, r1
 801cc06:	2101      	movs	r1, #1
 801cc08:	ec57 6b10 	vmov	r6, r7, d0
 801cc0c:	4690      	mov	r8, r2
 801cc0e:	f7ff fc09 	bl	801c424 <_Balloc>
 801cc12:	4604      	mov	r4, r0
 801cc14:	b930      	cbnz	r0, 801cc24 <__d2b+0x24>
 801cc16:	4602      	mov	r2, r0
 801cc18:	4b25      	ldr	r3, [pc, #148]	; (801ccb0 <__d2b+0xb0>)
 801cc1a:	4826      	ldr	r0, [pc, #152]	; (801ccb4 <__d2b+0xb4>)
 801cc1c:	f240 310a 	movw	r1, #778	; 0x30a
 801cc20:	f000 fabc 	bl	801d19c <__assert_func>
 801cc24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cc28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cc2c:	bb35      	cbnz	r5, 801cc7c <__d2b+0x7c>
 801cc2e:	2e00      	cmp	r6, #0
 801cc30:	9301      	str	r3, [sp, #4]
 801cc32:	d028      	beq.n	801cc86 <__d2b+0x86>
 801cc34:	4668      	mov	r0, sp
 801cc36:	9600      	str	r6, [sp, #0]
 801cc38:	f7ff fd06 	bl	801c648 <__lo0bits>
 801cc3c:	9900      	ldr	r1, [sp, #0]
 801cc3e:	b300      	cbz	r0, 801cc82 <__d2b+0x82>
 801cc40:	9a01      	ldr	r2, [sp, #4]
 801cc42:	f1c0 0320 	rsb	r3, r0, #32
 801cc46:	fa02 f303 	lsl.w	r3, r2, r3
 801cc4a:	430b      	orrs	r3, r1
 801cc4c:	40c2      	lsrs	r2, r0
 801cc4e:	6163      	str	r3, [r4, #20]
 801cc50:	9201      	str	r2, [sp, #4]
 801cc52:	9b01      	ldr	r3, [sp, #4]
 801cc54:	61a3      	str	r3, [r4, #24]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	bf14      	ite	ne
 801cc5a:	2202      	movne	r2, #2
 801cc5c:	2201      	moveq	r2, #1
 801cc5e:	6122      	str	r2, [r4, #16]
 801cc60:	b1d5      	cbz	r5, 801cc98 <__d2b+0x98>
 801cc62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cc66:	4405      	add	r5, r0
 801cc68:	f8c9 5000 	str.w	r5, [r9]
 801cc6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cc70:	f8c8 0000 	str.w	r0, [r8]
 801cc74:	4620      	mov	r0, r4
 801cc76:	b003      	add	sp, #12
 801cc78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cc80:	e7d5      	b.n	801cc2e <__d2b+0x2e>
 801cc82:	6161      	str	r1, [r4, #20]
 801cc84:	e7e5      	b.n	801cc52 <__d2b+0x52>
 801cc86:	a801      	add	r0, sp, #4
 801cc88:	f7ff fcde 	bl	801c648 <__lo0bits>
 801cc8c:	9b01      	ldr	r3, [sp, #4]
 801cc8e:	6163      	str	r3, [r4, #20]
 801cc90:	2201      	movs	r2, #1
 801cc92:	6122      	str	r2, [r4, #16]
 801cc94:	3020      	adds	r0, #32
 801cc96:	e7e3      	b.n	801cc60 <__d2b+0x60>
 801cc98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cc9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cca0:	f8c9 0000 	str.w	r0, [r9]
 801cca4:	6918      	ldr	r0, [r3, #16]
 801cca6:	f7ff fcaf 	bl	801c608 <__hi0bits>
 801ccaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ccae:	e7df      	b.n	801cc70 <__d2b+0x70>
 801ccb0:	0801ff88 	.word	0x0801ff88
 801ccb4:	08020014 	.word	0x08020014

0801ccb8 <__ratio>:
 801ccb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccbc:	4688      	mov	r8, r1
 801ccbe:	4669      	mov	r1, sp
 801ccc0:	4681      	mov	r9, r0
 801ccc2:	f7ff ff4d 	bl	801cb60 <__b2d>
 801ccc6:	a901      	add	r1, sp, #4
 801ccc8:	4640      	mov	r0, r8
 801ccca:	ec55 4b10 	vmov	r4, r5, d0
 801ccce:	f7ff ff47 	bl	801cb60 <__b2d>
 801ccd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ccd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ccda:	eba3 0c02 	sub.w	ip, r3, r2
 801ccde:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cce2:	1a9b      	subs	r3, r3, r2
 801cce4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801cce8:	ec51 0b10 	vmov	r0, r1, d0
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	bfd6      	itet	le
 801ccf0:	460a      	movle	r2, r1
 801ccf2:	462a      	movgt	r2, r5
 801ccf4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ccf8:	468b      	mov	fp, r1
 801ccfa:	462f      	mov	r7, r5
 801ccfc:	bfd4      	ite	le
 801ccfe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801cd02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801cd06:	4620      	mov	r0, r4
 801cd08:	ee10 2a10 	vmov	r2, s0
 801cd0c:	465b      	mov	r3, fp
 801cd0e:	4639      	mov	r1, r7
 801cd10:	f7e3 fd9c 	bl	800084c <__aeabi_ddiv>
 801cd14:	ec41 0b10 	vmov	d0, r0, r1
 801cd18:	b003      	add	sp, #12
 801cd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd1e <__copybits>:
 801cd1e:	3901      	subs	r1, #1
 801cd20:	b570      	push	{r4, r5, r6, lr}
 801cd22:	1149      	asrs	r1, r1, #5
 801cd24:	6914      	ldr	r4, [r2, #16]
 801cd26:	3101      	adds	r1, #1
 801cd28:	f102 0314 	add.w	r3, r2, #20
 801cd2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801cd30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801cd34:	1f05      	subs	r5, r0, #4
 801cd36:	42a3      	cmp	r3, r4
 801cd38:	d30c      	bcc.n	801cd54 <__copybits+0x36>
 801cd3a:	1aa3      	subs	r3, r4, r2
 801cd3c:	3b11      	subs	r3, #17
 801cd3e:	f023 0303 	bic.w	r3, r3, #3
 801cd42:	3211      	adds	r2, #17
 801cd44:	42a2      	cmp	r2, r4
 801cd46:	bf88      	it	hi
 801cd48:	2300      	movhi	r3, #0
 801cd4a:	4418      	add	r0, r3
 801cd4c:	2300      	movs	r3, #0
 801cd4e:	4288      	cmp	r0, r1
 801cd50:	d305      	bcc.n	801cd5e <__copybits+0x40>
 801cd52:	bd70      	pop	{r4, r5, r6, pc}
 801cd54:	f853 6b04 	ldr.w	r6, [r3], #4
 801cd58:	f845 6f04 	str.w	r6, [r5, #4]!
 801cd5c:	e7eb      	b.n	801cd36 <__copybits+0x18>
 801cd5e:	f840 3b04 	str.w	r3, [r0], #4
 801cd62:	e7f4      	b.n	801cd4e <__copybits+0x30>

0801cd64 <__any_on>:
 801cd64:	f100 0214 	add.w	r2, r0, #20
 801cd68:	6900      	ldr	r0, [r0, #16]
 801cd6a:	114b      	asrs	r3, r1, #5
 801cd6c:	4298      	cmp	r0, r3
 801cd6e:	b510      	push	{r4, lr}
 801cd70:	db11      	blt.n	801cd96 <__any_on+0x32>
 801cd72:	dd0a      	ble.n	801cd8a <__any_on+0x26>
 801cd74:	f011 011f 	ands.w	r1, r1, #31
 801cd78:	d007      	beq.n	801cd8a <__any_on+0x26>
 801cd7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801cd7e:	fa24 f001 	lsr.w	r0, r4, r1
 801cd82:	fa00 f101 	lsl.w	r1, r0, r1
 801cd86:	428c      	cmp	r4, r1
 801cd88:	d10b      	bne.n	801cda2 <__any_on+0x3e>
 801cd8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cd8e:	4293      	cmp	r3, r2
 801cd90:	d803      	bhi.n	801cd9a <__any_on+0x36>
 801cd92:	2000      	movs	r0, #0
 801cd94:	bd10      	pop	{r4, pc}
 801cd96:	4603      	mov	r3, r0
 801cd98:	e7f7      	b.n	801cd8a <__any_on+0x26>
 801cd9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cd9e:	2900      	cmp	r1, #0
 801cda0:	d0f5      	beq.n	801cd8e <__any_on+0x2a>
 801cda2:	2001      	movs	r0, #1
 801cda4:	e7f6      	b.n	801cd94 <__any_on+0x30>

0801cda6 <_calloc_r>:
 801cda6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cda8:	fba1 2402 	umull	r2, r4, r1, r2
 801cdac:	b94c      	cbnz	r4, 801cdc2 <_calloc_r+0x1c>
 801cdae:	4611      	mov	r1, r2
 801cdb0:	9201      	str	r2, [sp, #4]
 801cdb2:	f7fc f9a7 	bl	8019104 <_malloc_r>
 801cdb6:	9a01      	ldr	r2, [sp, #4]
 801cdb8:	4605      	mov	r5, r0
 801cdba:	b930      	cbnz	r0, 801cdca <_calloc_r+0x24>
 801cdbc:	4628      	mov	r0, r5
 801cdbe:	b003      	add	sp, #12
 801cdc0:	bd30      	pop	{r4, r5, pc}
 801cdc2:	220c      	movs	r2, #12
 801cdc4:	6002      	str	r2, [r0, #0]
 801cdc6:	2500      	movs	r5, #0
 801cdc8:	e7f8      	b.n	801cdbc <_calloc_r+0x16>
 801cdca:	4621      	mov	r1, r4
 801cdcc:	f7fc f971 	bl	80190b2 <memset>
 801cdd0:	e7f4      	b.n	801cdbc <_calloc_r+0x16>
	...

0801cdd4 <_free_r>:
 801cdd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cdd6:	2900      	cmp	r1, #0
 801cdd8:	d044      	beq.n	801ce64 <_free_r+0x90>
 801cdda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cdde:	9001      	str	r0, [sp, #4]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	f1a1 0404 	sub.w	r4, r1, #4
 801cde6:	bfb8      	it	lt
 801cde8:	18e4      	addlt	r4, r4, r3
 801cdea:	f7ff fb0f 	bl	801c40c <__malloc_lock>
 801cdee:	4a1e      	ldr	r2, [pc, #120]	; (801ce68 <_free_r+0x94>)
 801cdf0:	9801      	ldr	r0, [sp, #4]
 801cdf2:	6813      	ldr	r3, [r2, #0]
 801cdf4:	b933      	cbnz	r3, 801ce04 <_free_r+0x30>
 801cdf6:	6063      	str	r3, [r4, #4]
 801cdf8:	6014      	str	r4, [r2, #0]
 801cdfa:	b003      	add	sp, #12
 801cdfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ce00:	f7ff bb0a 	b.w	801c418 <__malloc_unlock>
 801ce04:	42a3      	cmp	r3, r4
 801ce06:	d908      	bls.n	801ce1a <_free_r+0x46>
 801ce08:	6825      	ldr	r5, [r4, #0]
 801ce0a:	1961      	adds	r1, r4, r5
 801ce0c:	428b      	cmp	r3, r1
 801ce0e:	bf01      	itttt	eq
 801ce10:	6819      	ldreq	r1, [r3, #0]
 801ce12:	685b      	ldreq	r3, [r3, #4]
 801ce14:	1949      	addeq	r1, r1, r5
 801ce16:	6021      	streq	r1, [r4, #0]
 801ce18:	e7ed      	b.n	801cdf6 <_free_r+0x22>
 801ce1a:	461a      	mov	r2, r3
 801ce1c:	685b      	ldr	r3, [r3, #4]
 801ce1e:	b10b      	cbz	r3, 801ce24 <_free_r+0x50>
 801ce20:	42a3      	cmp	r3, r4
 801ce22:	d9fa      	bls.n	801ce1a <_free_r+0x46>
 801ce24:	6811      	ldr	r1, [r2, #0]
 801ce26:	1855      	adds	r5, r2, r1
 801ce28:	42a5      	cmp	r5, r4
 801ce2a:	d10b      	bne.n	801ce44 <_free_r+0x70>
 801ce2c:	6824      	ldr	r4, [r4, #0]
 801ce2e:	4421      	add	r1, r4
 801ce30:	1854      	adds	r4, r2, r1
 801ce32:	42a3      	cmp	r3, r4
 801ce34:	6011      	str	r1, [r2, #0]
 801ce36:	d1e0      	bne.n	801cdfa <_free_r+0x26>
 801ce38:	681c      	ldr	r4, [r3, #0]
 801ce3a:	685b      	ldr	r3, [r3, #4]
 801ce3c:	6053      	str	r3, [r2, #4]
 801ce3e:	4421      	add	r1, r4
 801ce40:	6011      	str	r1, [r2, #0]
 801ce42:	e7da      	b.n	801cdfa <_free_r+0x26>
 801ce44:	d902      	bls.n	801ce4c <_free_r+0x78>
 801ce46:	230c      	movs	r3, #12
 801ce48:	6003      	str	r3, [r0, #0]
 801ce4a:	e7d6      	b.n	801cdfa <_free_r+0x26>
 801ce4c:	6825      	ldr	r5, [r4, #0]
 801ce4e:	1961      	adds	r1, r4, r5
 801ce50:	428b      	cmp	r3, r1
 801ce52:	bf04      	itt	eq
 801ce54:	6819      	ldreq	r1, [r3, #0]
 801ce56:	685b      	ldreq	r3, [r3, #4]
 801ce58:	6063      	str	r3, [r4, #4]
 801ce5a:	bf04      	itt	eq
 801ce5c:	1949      	addeq	r1, r1, r5
 801ce5e:	6021      	streq	r1, [r4, #0]
 801ce60:	6054      	str	r4, [r2, #4]
 801ce62:	e7ca      	b.n	801cdfa <_free_r+0x26>
 801ce64:	b003      	add	sp, #12
 801ce66:	bd30      	pop	{r4, r5, pc}
 801ce68:	2000e54c 	.word	0x2000e54c

0801ce6c <__ssputs_r>:
 801ce6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce70:	688e      	ldr	r6, [r1, #8]
 801ce72:	429e      	cmp	r6, r3
 801ce74:	4682      	mov	sl, r0
 801ce76:	460c      	mov	r4, r1
 801ce78:	4690      	mov	r8, r2
 801ce7a:	461f      	mov	r7, r3
 801ce7c:	d838      	bhi.n	801cef0 <__ssputs_r+0x84>
 801ce7e:	898a      	ldrh	r2, [r1, #12]
 801ce80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ce84:	d032      	beq.n	801ceec <__ssputs_r+0x80>
 801ce86:	6825      	ldr	r5, [r4, #0]
 801ce88:	6909      	ldr	r1, [r1, #16]
 801ce8a:	eba5 0901 	sub.w	r9, r5, r1
 801ce8e:	6965      	ldr	r5, [r4, #20]
 801ce90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ce98:	3301      	adds	r3, #1
 801ce9a:	444b      	add	r3, r9
 801ce9c:	106d      	asrs	r5, r5, #1
 801ce9e:	429d      	cmp	r5, r3
 801cea0:	bf38      	it	cc
 801cea2:	461d      	movcc	r5, r3
 801cea4:	0553      	lsls	r3, r2, #21
 801cea6:	d531      	bpl.n	801cf0c <__ssputs_r+0xa0>
 801cea8:	4629      	mov	r1, r5
 801ceaa:	f7fc f92b 	bl	8019104 <_malloc_r>
 801ceae:	4606      	mov	r6, r0
 801ceb0:	b950      	cbnz	r0, 801cec8 <__ssputs_r+0x5c>
 801ceb2:	230c      	movs	r3, #12
 801ceb4:	f8ca 3000 	str.w	r3, [sl]
 801ceb8:	89a3      	ldrh	r3, [r4, #12]
 801ceba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cebe:	81a3      	strh	r3, [r4, #12]
 801cec0:	f04f 30ff 	mov.w	r0, #4294967295
 801cec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cec8:	6921      	ldr	r1, [r4, #16]
 801ceca:	464a      	mov	r2, r9
 801cecc:	f7fc f8e3 	bl	8019096 <memcpy>
 801ced0:	89a3      	ldrh	r3, [r4, #12]
 801ced2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ced6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ceda:	81a3      	strh	r3, [r4, #12]
 801cedc:	6126      	str	r6, [r4, #16]
 801cede:	6165      	str	r5, [r4, #20]
 801cee0:	444e      	add	r6, r9
 801cee2:	eba5 0509 	sub.w	r5, r5, r9
 801cee6:	6026      	str	r6, [r4, #0]
 801cee8:	60a5      	str	r5, [r4, #8]
 801ceea:	463e      	mov	r6, r7
 801ceec:	42be      	cmp	r6, r7
 801ceee:	d900      	bls.n	801cef2 <__ssputs_r+0x86>
 801cef0:	463e      	mov	r6, r7
 801cef2:	6820      	ldr	r0, [r4, #0]
 801cef4:	4632      	mov	r2, r6
 801cef6:	4641      	mov	r1, r8
 801cef8:	f000 f980 	bl	801d1fc <memmove>
 801cefc:	68a3      	ldr	r3, [r4, #8]
 801cefe:	1b9b      	subs	r3, r3, r6
 801cf00:	60a3      	str	r3, [r4, #8]
 801cf02:	6823      	ldr	r3, [r4, #0]
 801cf04:	4433      	add	r3, r6
 801cf06:	6023      	str	r3, [r4, #0]
 801cf08:	2000      	movs	r0, #0
 801cf0a:	e7db      	b.n	801cec4 <__ssputs_r+0x58>
 801cf0c:	462a      	mov	r2, r5
 801cf0e:	f000 f98f 	bl	801d230 <_realloc_r>
 801cf12:	4606      	mov	r6, r0
 801cf14:	2800      	cmp	r0, #0
 801cf16:	d1e1      	bne.n	801cedc <__ssputs_r+0x70>
 801cf18:	6921      	ldr	r1, [r4, #16]
 801cf1a:	4650      	mov	r0, sl
 801cf1c:	f7ff ff5a 	bl	801cdd4 <_free_r>
 801cf20:	e7c7      	b.n	801ceb2 <__ssputs_r+0x46>
	...

0801cf24 <_svfiprintf_r>:
 801cf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf28:	4698      	mov	r8, r3
 801cf2a:	898b      	ldrh	r3, [r1, #12]
 801cf2c:	061b      	lsls	r3, r3, #24
 801cf2e:	b09d      	sub	sp, #116	; 0x74
 801cf30:	4607      	mov	r7, r0
 801cf32:	460d      	mov	r5, r1
 801cf34:	4614      	mov	r4, r2
 801cf36:	d50e      	bpl.n	801cf56 <_svfiprintf_r+0x32>
 801cf38:	690b      	ldr	r3, [r1, #16]
 801cf3a:	b963      	cbnz	r3, 801cf56 <_svfiprintf_r+0x32>
 801cf3c:	2140      	movs	r1, #64	; 0x40
 801cf3e:	f7fc f8e1 	bl	8019104 <_malloc_r>
 801cf42:	6028      	str	r0, [r5, #0]
 801cf44:	6128      	str	r0, [r5, #16]
 801cf46:	b920      	cbnz	r0, 801cf52 <_svfiprintf_r+0x2e>
 801cf48:	230c      	movs	r3, #12
 801cf4a:	603b      	str	r3, [r7, #0]
 801cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 801cf50:	e0d1      	b.n	801d0f6 <_svfiprintf_r+0x1d2>
 801cf52:	2340      	movs	r3, #64	; 0x40
 801cf54:	616b      	str	r3, [r5, #20]
 801cf56:	2300      	movs	r3, #0
 801cf58:	9309      	str	r3, [sp, #36]	; 0x24
 801cf5a:	2320      	movs	r3, #32
 801cf5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cf60:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf64:	2330      	movs	r3, #48	; 0x30
 801cf66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d110 <_svfiprintf_r+0x1ec>
 801cf6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cf6e:	f04f 0901 	mov.w	r9, #1
 801cf72:	4623      	mov	r3, r4
 801cf74:	469a      	mov	sl, r3
 801cf76:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf7a:	b10a      	cbz	r2, 801cf80 <_svfiprintf_r+0x5c>
 801cf7c:	2a25      	cmp	r2, #37	; 0x25
 801cf7e:	d1f9      	bne.n	801cf74 <_svfiprintf_r+0x50>
 801cf80:	ebba 0b04 	subs.w	fp, sl, r4
 801cf84:	d00b      	beq.n	801cf9e <_svfiprintf_r+0x7a>
 801cf86:	465b      	mov	r3, fp
 801cf88:	4622      	mov	r2, r4
 801cf8a:	4629      	mov	r1, r5
 801cf8c:	4638      	mov	r0, r7
 801cf8e:	f7ff ff6d 	bl	801ce6c <__ssputs_r>
 801cf92:	3001      	adds	r0, #1
 801cf94:	f000 80aa 	beq.w	801d0ec <_svfiprintf_r+0x1c8>
 801cf98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cf9a:	445a      	add	r2, fp
 801cf9c:	9209      	str	r2, [sp, #36]	; 0x24
 801cf9e:	f89a 3000 	ldrb.w	r3, [sl]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	f000 80a2 	beq.w	801d0ec <_svfiprintf_r+0x1c8>
 801cfa8:	2300      	movs	r3, #0
 801cfaa:	f04f 32ff 	mov.w	r2, #4294967295
 801cfae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cfb2:	f10a 0a01 	add.w	sl, sl, #1
 801cfb6:	9304      	str	r3, [sp, #16]
 801cfb8:	9307      	str	r3, [sp, #28]
 801cfba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cfbe:	931a      	str	r3, [sp, #104]	; 0x68
 801cfc0:	4654      	mov	r4, sl
 801cfc2:	2205      	movs	r2, #5
 801cfc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfc8:	4851      	ldr	r0, [pc, #324]	; (801d110 <_svfiprintf_r+0x1ec>)
 801cfca:	f7e3 f909 	bl	80001e0 <memchr>
 801cfce:	9a04      	ldr	r2, [sp, #16]
 801cfd0:	b9d8      	cbnz	r0, 801d00a <_svfiprintf_r+0xe6>
 801cfd2:	06d0      	lsls	r0, r2, #27
 801cfd4:	bf44      	itt	mi
 801cfd6:	2320      	movmi	r3, #32
 801cfd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cfdc:	0711      	lsls	r1, r2, #28
 801cfde:	bf44      	itt	mi
 801cfe0:	232b      	movmi	r3, #43	; 0x2b
 801cfe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cfe6:	f89a 3000 	ldrb.w	r3, [sl]
 801cfea:	2b2a      	cmp	r3, #42	; 0x2a
 801cfec:	d015      	beq.n	801d01a <_svfiprintf_r+0xf6>
 801cfee:	9a07      	ldr	r2, [sp, #28]
 801cff0:	4654      	mov	r4, sl
 801cff2:	2000      	movs	r0, #0
 801cff4:	f04f 0c0a 	mov.w	ip, #10
 801cff8:	4621      	mov	r1, r4
 801cffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cffe:	3b30      	subs	r3, #48	; 0x30
 801d000:	2b09      	cmp	r3, #9
 801d002:	d94e      	bls.n	801d0a2 <_svfiprintf_r+0x17e>
 801d004:	b1b0      	cbz	r0, 801d034 <_svfiprintf_r+0x110>
 801d006:	9207      	str	r2, [sp, #28]
 801d008:	e014      	b.n	801d034 <_svfiprintf_r+0x110>
 801d00a:	eba0 0308 	sub.w	r3, r0, r8
 801d00e:	fa09 f303 	lsl.w	r3, r9, r3
 801d012:	4313      	orrs	r3, r2
 801d014:	9304      	str	r3, [sp, #16]
 801d016:	46a2      	mov	sl, r4
 801d018:	e7d2      	b.n	801cfc0 <_svfiprintf_r+0x9c>
 801d01a:	9b03      	ldr	r3, [sp, #12]
 801d01c:	1d19      	adds	r1, r3, #4
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	9103      	str	r1, [sp, #12]
 801d022:	2b00      	cmp	r3, #0
 801d024:	bfbb      	ittet	lt
 801d026:	425b      	neglt	r3, r3
 801d028:	f042 0202 	orrlt.w	r2, r2, #2
 801d02c:	9307      	strge	r3, [sp, #28]
 801d02e:	9307      	strlt	r3, [sp, #28]
 801d030:	bfb8      	it	lt
 801d032:	9204      	strlt	r2, [sp, #16]
 801d034:	7823      	ldrb	r3, [r4, #0]
 801d036:	2b2e      	cmp	r3, #46	; 0x2e
 801d038:	d10c      	bne.n	801d054 <_svfiprintf_r+0x130>
 801d03a:	7863      	ldrb	r3, [r4, #1]
 801d03c:	2b2a      	cmp	r3, #42	; 0x2a
 801d03e:	d135      	bne.n	801d0ac <_svfiprintf_r+0x188>
 801d040:	9b03      	ldr	r3, [sp, #12]
 801d042:	1d1a      	adds	r2, r3, #4
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	9203      	str	r2, [sp, #12]
 801d048:	2b00      	cmp	r3, #0
 801d04a:	bfb8      	it	lt
 801d04c:	f04f 33ff 	movlt.w	r3, #4294967295
 801d050:	3402      	adds	r4, #2
 801d052:	9305      	str	r3, [sp, #20]
 801d054:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d120 <_svfiprintf_r+0x1fc>
 801d058:	7821      	ldrb	r1, [r4, #0]
 801d05a:	2203      	movs	r2, #3
 801d05c:	4650      	mov	r0, sl
 801d05e:	f7e3 f8bf 	bl	80001e0 <memchr>
 801d062:	b140      	cbz	r0, 801d076 <_svfiprintf_r+0x152>
 801d064:	2340      	movs	r3, #64	; 0x40
 801d066:	eba0 000a 	sub.w	r0, r0, sl
 801d06a:	fa03 f000 	lsl.w	r0, r3, r0
 801d06e:	9b04      	ldr	r3, [sp, #16]
 801d070:	4303      	orrs	r3, r0
 801d072:	3401      	adds	r4, #1
 801d074:	9304      	str	r3, [sp, #16]
 801d076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d07a:	4826      	ldr	r0, [pc, #152]	; (801d114 <_svfiprintf_r+0x1f0>)
 801d07c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d080:	2206      	movs	r2, #6
 801d082:	f7e3 f8ad 	bl	80001e0 <memchr>
 801d086:	2800      	cmp	r0, #0
 801d088:	d038      	beq.n	801d0fc <_svfiprintf_r+0x1d8>
 801d08a:	4b23      	ldr	r3, [pc, #140]	; (801d118 <_svfiprintf_r+0x1f4>)
 801d08c:	bb1b      	cbnz	r3, 801d0d6 <_svfiprintf_r+0x1b2>
 801d08e:	9b03      	ldr	r3, [sp, #12]
 801d090:	3307      	adds	r3, #7
 801d092:	f023 0307 	bic.w	r3, r3, #7
 801d096:	3308      	adds	r3, #8
 801d098:	9303      	str	r3, [sp, #12]
 801d09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d09c:	4433      	add	r3, r6
 801d09e:	9309      	str	r3, [sp, #36]	; 0x24
 801d0a0:	e767      	b.n	801cf72 <_svfiprintf_r+0x4e>
 801d0a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801d0a6:	460c      	mov	r4, r1
 801d0a8:	2001      	movs	r0, #1
 801d0aa:	e7a5      	b.n	801cff8 <_svfiprintf_r+0xd4>
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	3401      	adds	r4, #1
 801d0b0:	9305      	str	r3, [sp, #20]
 801d0b2:	4619      	mov	r1, r3
 801d0b4:	f04f 0c0a 	mov.w	ip, #10
 801d0b8:	4620      	mov	r0, r4
 801d0ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d0be:	3a30      	subs	r2, #48	; 0x30
 801d0c0:	2a09      	cmp	r2, #9
 801d0c2:	d903      	bls.n	801d0cc <_svfiprintf_r+0x1a8>
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d0c5      	beq.n	801d054 <_svfiprintf_r+0x130>
 801d0c8:	9105      	str	r1, [sp, #20]
 801d0ca:	e7c3      	b.n	801d054 <_svfiprintf_r+0x130>
 801d0cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801d0d0:	4604      	mov	r4, r0
 801d0d2:	2301      	movs	r3, #1
 801d0d4:	e7f0      	b.n	801d0b8 <_svfiprintf_r+0x194>
 801d0d6:	ab03      	add	r3, sp, #12
 801d0d8:	9300      	str	r3, [sp, #0]
 801d0da:	462a      	mov	r2, r5
 801d0dc:	4b0f      	ldr	r3, [pc, #60]	; (801d11c <_svfiprintf_r+0x1f8>)
 801d0de:	a904      	add	r1, sp, #16
 801d0e0:	4638      	mov	r0, r7
 801d0e2:	f7fc f923 	bl	801932c <_printf_float>
 801d0e6:	1c42      	adds	r2, r0, #1
 801d0e8:	4606      	mov	r6, r0
 801d0ea:	d1d6      	bne.n	801d09a <_svfiprintf_r+0x176>
 801d0ec:	89ab      	ldrh	r3, [r5, #12]
 801d0ee:	065b      	lsls	r3, r3, #25
 801d0f0:	f53f af2c 	bmi.w	801cf4c <_svfiprintf_r+0x28>
 801d0f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d0f6:	b01d      	add	sp, #116	; 0x74
 801d0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0fc:	ab03      	add	r3, sp, #12
 801d0fe:	9300      	str	r3, [sp, #0]
 801d100:	462a      	mov	r2, r5
 801d102:	4b06      	ldr	r3, [pc, #24]	; (801d11c <_svfiprintf_r+0x1f8>)
 801d104:	a904      	add	r1, sp, #16
 801d106:	4638      	mov	r0, r7
 801d108:	f7fc fbb4 	bl	8019874 <_printf_i>
 801d10c:	e7eb      	b.n	801d0e6 <_svfiprintf_r+0x1c2>
 801d10e:	bf00      	nop
 801d110:	0802016c 	.word	0x0802016c
 801d114:	08020176 	.word	0x08020176
 801d118:	0801932d 	.word	0x0801932d
 801d11c:	0801ce6d 	.word	0x0801ce6d
 801d120:	08020172 	.word	0x08020172

0801d124 <_read_r>:
 801d124:	b538      	push	{r3, r4, r5, lr}
 801d126:	4d07      	ldr	r5, [pc, #28]	; (801d144 <_read_r+0x20>)
 801d128:	4604      	mov	r4, r0
 801d12a:	4608      	mov	r0, r1
 801d12c:	4611      	mov	r1, r2
 801d12e:	2200      	movs	r2, #0
 801d130:	602a      	str	r2, [r5, #0]
 801d132:	461a      	mov	r2, r3
 801d134:	f002 fa2a 	bl	801f58c <_read>
 801d138:	1c43      	adds	r3, r0, #1
 801d13a:	d102      	bne.n	801d142 <_read_r+0x1e>
 801d13c:	682b      	ldr	r3, [r5, #0]
 801d13e:	b103      	cbz	r3, 801d142 <_read_r+0x1e>
 801d140:	6023      	str	r3, [r4, #0]
 801d142:	bd38      	pop	{r3, r4, r5, pc}
 801d144:	2000e554 	.word	0x2000e554

0801d148 <nan>:
 801d148:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d150 <nan+0x8>
 801d14c:	4770      	bx	lr
 801d14e:	bf00      	nop
 801d150:	00000000 	.word	0x00000000
 801d154:	7ff80000 	.word	0x7ff80000

0801d158 <strncmp>:
 801d158:	b510      	push	{r4, lr}
 801d15a:	b17a      	cbz	r2, 801d17c <strncmp+0x24>
 801d15c:	4603      	mov	r3, r0
 801d15e:	3901      	subs	r1, #1
 801d160:	1884      	adds	r4, r0, r2
 801d162:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d166:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d16a:	4290      	cmp	r0, r2
 801d16c:	d101      	bne.n	801d172 <strncmp+0x1a>
 801d16e:	42a3      	cmp	r3, r4
 801d170:	d101      	bne.n	801d176 <strncmp+0x1e>
 801d172:	1a80      	subs	r0, r0, r2
 801d174:	bd10      	pop	{r4, pc}
 801d176:	2800      	cmp	r0, #0
 801d178:	d1f3      	bne.n	801d162 <strncmp+0xa>
 801d17a:	e7fa      	b.n	801d172 <strncmp+0x1a>
 801d17c:	4610      	mov	r0, r2
 801d17e:	e7f9      	b.n	801d174 <strncmp+0x1c>

0801d180 <__ascii_wctomb>:
 801d180:	b149      	cbz	r1, 801d196 <__ascii_wctomb+0x16>
 801d182:	2aff      	cmp	r2, #255	; 0xff
 801d184:	bf85      	ittet	hi
 801d186:	238a      	movhi	r3, #138	; 0x8a
 801d188:	6003      	strhi	r3, [r0, #0]
 801d18a:	700a      	strbls	r2, [r1, #0]
 801d18c:	f04f 30ff 	movhi.w	r0, #4294967295
 801d190:	bf98      	it	ls
 801d192:	2001      	movls	r0, #1
 801d194:	4770      	bx	lr
 801d196:	4608      	mov	r0, r1
 801d198:	4770      	bx	lr
	...

0801d19c <__assert_func>:
 801d19c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d19e:	4614      	mov	r4, r2
 801d1a0:	461a      	mov	r2, r3
 801d1a2:	4b09      	ldr	r3, [pc, #36]	; (801d1c8 <__assert_func+0x2c>)
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	4605      	mov	r5, r0
 801d1a8:	68d8      	ldr	r0, [r3, #12]
 801d1aa:	b14c      	cbz	r4, 801d1c0 <__assert_func+0x24>
 801d1ac:	4b07      	ldr	r3, [pc, #28]	; (801d1cc <__assert_func+0x30>)
 801d1ae:	9100      	str	r1, [sp, #0]
 801d1b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d1b4:	4906      	ldr	r1, [pc, #24]	; (801d1d0 <__assert_func+0x34>)
 801d1b6:	462b      	mov	r3, r5
 801d1b8:	f000 f80e 	bl	801d1d8 <fiprintf>
 801d1bc:	f000 fa80 	bl	801d6c0 <abort>
 801d1c0:	4b04      	ldr	r3, [pc, #16]	; (801d1d4 <__assert_func+0x38>)
 801d1c2:	461c      	mov	r4, r3
 801d1c4:	e7f3      	b.n	801d1ae <__assert_func+0x12>
 801d1c6:	bf00      	nop
 801d1c8:	2000010c 	.word	0x2000010c
 801d1cc:	0802017d 	.word	0x0802017d
 801d1d0:	0802018a 	.word	0x0802018a
 801d1d4:	080201b8 	.word	0x080201b8

0801d1d8 <fiprintf>:
 801d1d8:	b40e      	push	{r1, r2, r3}
 801d1da:	b503      	push	{r0, r1, lr}
 801d1dc:	4601      	mov	r1, r0
 801d1de:	ab03      	add	r3, sp, #12
 801d1e0:	4805      	ldr	r0, [pc, #20]	; (801d1f8 <fiprintf+0x20>)
 801d1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1e6:	6800      	ldr	r0, [r0, #0]
 801d1e8:	9301      	str	r3, [sp, #4]
 801d1ea:	f000 f879 	bl	801d2e0 <_vfiprintf_r>
 801d1ee:	b002      	add	sp, #8
 801d1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1f4:	b003      	add	sp, #12
 801d1f6:	4770      	bx	lr
 801d1f8:	2000010c 	.word	0x2000010c

0801d1fc <memmove>:
 801d1fc:	4288      	cmp	r0, r1
 801d1fe:	b510      	push	{r4, lr}
 801d200:	eb01 0402 	add.w	r4, r1, r2
 801d204:	d902      	bls.n	801d20c <memmove+0x10>
 801d206:	4284      	cmp	r4, r0
 801d208:	4623      	mov	r3, r4
 801d20a:	d807      	bhi.n	801d21c <memmove+0x20>
 801d20c:	1e43      	subs	r3, r0, #1
 801d20e:	42a1      	cmp	r1, r4
 801d210:	d008      	beq.n	801d224 <memmove+0x28>
 801d212:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d216:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d21a:	e7f8      	b.n	801d20e <memmove+0x12>
 801d21c:	4402      	add	r2, r0
 801d21e:	4601      	mov	r1, r0
 801d220:	428a      	cmp	r2, r1
 801d222:	d100      	bne.n	801d226 <memmove+0x2a>
 801d224:	bd10      	pop	{r4, pc}
 801d226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d22a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d22e:	e7f7      	b.n	801d220 <memmove+0x24>

0801d230 <_realloc_r>:
 801d230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d234:	4680      	mov	r8, r0
 801d236:	4614      	mov	r4, r2
 801d238:	460e      	mov	r6, r1
 801d23a:	b921      	cbnz	r1, 801d246 <_realloc_r+0x16>
 801d23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d240:	4611      	mov	r1, r2
 801d242:	f7fb bf5f 	b.w	8019104 <_malloc_r>
 801d246:	b92a      	cbnz	r2, 801d254 <_realloc_r+0x24>
 801d248:	f7ff fdc4 	bl	801cdd4 <_free_r>
 801d24c:	4625      	mov	r5, r4
 801d24e:	4628      	mov	r0, r5
 801d250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d254:	f000 faa0 	bl	801d798 <_malloc_usable_size_r>
 801d258:	4284      	cmp	r4, r0
 801d25a:	4607      	mov	r7, r0
 801d25c:	d802      	bhi.n	801d264 <_realloc_r+0x34>
 801d25e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d262:	d812      	bhi.n	801d28a <_realloc_r+0x5a>
 801d264:	4621      	mov	r1, r4
 801d266:	4640      	mov	r0, r8
 801d268:	f7fb ff4c 	bl	8019104 <_malloc_r>
 801d26c:	4605      	mov	r5, r0
 801d26e:	2800      	cmp	r0, #0
 801d270:	d0ed      	beq.n	801d24e <_realloc_r+0x1e>
 801d272:	42bc      	cmp	r4, r7
 801d274:	4622      	mov	r2, r4
 801d276:	4631      	mov	r1, r6
 801d278:	bf28      	it	cs
 801d27a:	463a      	movcs	r2, r7
 801d27c:	f7fb ff0b 	bl	8019096 <memcpy>
 801d280:	4631      	mov	r1, r6
 801d282:	4640      	mov	r0, r8
 801d284:	f7ff fda6 	bl	801cdd4 <_free_r>
 801d288:	e7e1      	b.n	801d24e <_realloc_r+0x1e>
 801d28a:	4635      	mov	r5, r6
 801d28c:	e7df      	b.n	801d24e <_realloc_r+0x1e>

0801d28e <__sfputc_r>:
 801d28e:	6893      	ldr	r3, [r2, #8]
 801d290:	3b01      	subs	r3, #1
 801d292:	2b00      	cmp	r3, #0
 801d294:	b410      	push	{r4}
 801d296:	6093      	str	r3, [r2, #8]
 801d298:	da08      	bge.n	801d2ac <__sfputc_r+0x1e>
 801d29a:	6994      	ldr	r4, [r2, #24]
 801d29c:	42a3      	cmp	r3, r4
 801d29e:	db01      	blt.n	801d2a4 <__sfputc_r+0x16>
 801d2a0:	290a      	cmp	r1, #10
 801d2a2:	d103      	bne.n	801d2ac <__sfputc_r+0x1e>
 801d2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d2a8:	f000 b94a 	b.w	801d540 <__swbuf_r>
 801d2ac:	6813      	ldr	r3, [r2, #0]
 801d2ae:	1c58      	adds	r0, r3, #1
 801d2b0:	6010      	str	r0, [r2, #0]
 801d2b2:	7019      	strb	r1, [r3, #0]
 801d2b4:	4608      	mov	r0, r1
 801d2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d2ba:	4770      	bx	lr

0801d2bc <__sfputs_r>:
 801d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2be:	4606      	mov	r6, r0
 801d2c0:	460f      	mov	r7, r1
 801d2c2:	4614      	mov	r4, r2
 801d2c4:	18d5      	adds	r5, r2, r3
 801d2c6:	42ac      	cmp	r4, r5
 801d2c8:	d101      	bne.n	801d2ce <__sfputs_r+0x12>
 801d2ca:	2000      	movs	r0, #0
 801d2cc:	e007      	b.n	801d2de <__sfputs_r+0x22>
 801d2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2d2:	463a      	mov	r2, r7
 801d2d4:	4630      	mov	r0, r6
 801d2d6:	f7ff ffda 	bl	801d28e <__sfputc_r>
 801d2da:	1c43      	adds	r3, r0, #1
 801d2dc:	d1f3      	bne.n	801d2c6 <__sfputs_r+0xa>
 801d2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d2e0 <_vfiprintf_r>:
 801d2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2e4:	460d      	mov	r5, r1
 801d2e6:	b09d      	sub	sp, #116	; 0x74
 801d2e8:	4614      	mov	r4, r2
 801d2ea:	4698      	mov	r8, r3
 801d2ec:	4606      	mov	r6, r0
 801d2ee:	b118      	cbz	r0, 801d2f8 <_vfiprintf_r+0x18>
 801d2f0:	6983      	ldr	r3, [r0, #24]
 801d2f2:	b90b      	cbnz	r3, 801d2f8 <_vfiprintf_r+0x18>
 801d2f4:	f7fb fe0a 	bl	8018f0c <__sinit>
 801d2f8:	4b89      	ldr	r3, [pc, #548]	; (801d520 <_vfiprintf_r+0x240>)
 801d2fa:	429d      	cmp	r5, r3
 801d2fc:	d11b      	bne.n	801d336 <_vfiprintf_r+0x56>
 801d2fe:	6875      	ldr	r5, [r6, #4]
 801d300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d302:	07d9      	lsls	r1, r3, #31
 801d304:	d405      	bmi.n	801d312 <_vfiprintf_r+0x32>
 801d306:	89ab      	ldrh	r3, [r5, #12]
 801d308:	059a      	lsls	r2, r3, #22
 801d30a:	d402      	bmi.n	801d312 <_vfiprintf_r+0x32>
 801d30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d30e:	f7fb fec0 	bl	8019092 <__retarget_lock_acquire_recursive>
 801d312:	89ab      	ldrh	r3, [r5, #12]
 801d314:	071b      	lsls	r3, r3, #28
 801d316:	d501      	bpl.n	801d31c <_vfiprintf_r+0x3c>
 801d318:	692b      	ldr	r3, [r5, #16]
 801d31a:	b9eb      	cbnz	r3, 801d358 <_vfiprintf_r+0x78>
 801d31c:	4629      	mov	r1, r5
 801d31e:	4630      	mov	r0, r6
 801d320:	f000 f960 	bl	801d5e4 <__swsetup_r>
 801d324:	b1c0      	cbz	r0, 801d358 <_vfiprintf_r+0x78>
 801d326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d328:	07dc      	lsls	r4, r3, #31
 801d32a:	d50e      	bpl.n	801d34a <_vfiprintf_r+0x6a>
 801d32c:	f04f 30ff 	mov.w	r0, #4294967295
 801d330:	b01d      	add	sp, #116	; 0x74
 801d332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d336:	4b7b      	ldr	r3, [pc, #492]	; (801d524 <_vfiprintf_r+0x244>)
 801d338:	429d      	cmp	r5, r3
 801d33a:	d101      	bne.n	801d340 <_vfiprintf_r+0x60>
 801d33c:	68b5      	ldr	r5, [r6, #8]
 801d33e:	e7df      	b.n	801d300 <_vfiprintf_r+0x20>
 801d340:	4b79      	ldr	r3, [pc, #484]	; (801d528 <_vfiprintf_r+0x248>)
 801d342:	429d      	cmp	r5, r3
 801d344:	bf08      	it	eq
 801d346:	68f5      	ldreq	r5, [r6, #12]
 801d348:	e7da      	b.n	801d300 <_vfiprintf_r+0x20>
 801d34a:	89ab      	ldrh	r3, [r5, #12]
 801d34c:	0598      	lsls	r0, r3, #22
 801d34e:	d4ed      	bmi.n	801d32c <_vfiprintf_r+0x4c>
 801d350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d352:	f7fb fe9f 	bl	8019094 <__retarget_lock_release_recursive>
 801d356:	e7e9      	b.n	801d32c <_vfiprintf_r+0x4c>
 801d358:	2300      	movs	r3, #0
 801d35a:	9309      	str	r3, [sp, #36]	; 0x24
 801d35c:	2320      	movs	r3, #32
 801d35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d362:	f8cd 800c 	str.w	r8, [sp, #12]
 801d366:	2330      	movs	r3, #48	; 0x30
 801d368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d52c <_vfiprintf_r+0x24c>
 801d36c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d370:	f04f 0901 	mov.w	r9, #1
 801d374:	4623      	mov	r3, r4
 801d376:	469a      	mov	sl, r3
 801d378:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d37c:	b10a      	cbz	r2, 801d382 <_vfiprintf_r+0xa2>
 801d37e:	2a25      	cmp	r2, #37	; 0x25
 801d380:	d1f9      	bne.n	801d376 <_vfiprintf_r+0x96>
 801d382:	ebba 0b04 	subs.w	fp, sl, r4
 801d386:	d00b      	beq.n	801d3a0 <_vfiprintf_r+0xc0>
 801d388:	465b      	mov	r3, fp
 801d38a:	4622      	mov	r2, r4
 801d38c:	4629      	mov	r1, r5
 801d38e:	4630      	mov	r0, r6
 801d390:	f7ff ff94 	bl	801d2bc <__sfputs_r>
 801d394:	3001      	adds	r0, #1
 801d396:	f000 80aa 	beq.w	801d4ee <_vfiprintf_r+0x20e>
 801d39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d39c:	445a      	add	r2, fp
 801d39e:	9209      	str	r2, [sp, #36]	; 0x24
 801d3a0:	f89a 3000 	ldrb.w	r3, [sl]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	f000 80a2 	beq.w	801d4ee <_vfiprintf_r+0x20e>
 801d3aa:	2300      	movs	r3, #0
 801d3ac:	f04f 32ff 	mov.w	r2, #4294967295
 801d3b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d3b4:	f10a 0a01 	add.w	sl, sl, #1
 801d3b8:	9304      	str	r3, [sp, #16]
 801d3ba:	9307      	str	r3, [sp, #28]
 801d3bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d3c0:	931a      	str	r3, [sp, #104]	; 0x68
 801d3c2:	4654      	mov	r4, sl
 801d3c4:	2205      	movs	r2, #5
 801d3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3ca:	4858      	ldr	r0, [pc, #352]	; (801d52c <_vfiprintf_r+0x24c>)
 801d3cc:	f7e2 ff08 	bl	80001e0 <memchr>
 801d3d0:	9a04      	ldr	r2, [sp, #16]
 801d3d2:	b9d8      	cbnz	r0, 801d40c <_vfiprintf_r+0x12c>
 801d3d4:	06d1      	lsls	r1, r2, #27
 801d3d6:	bf44      	itt	mi
 801d3d8:	2320      	movmi	r3, #32
 801d3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d3de:	0713      	lsls	r3, r2, #28
 801d3e0:	bf44      	itt	mi
 801d3e2:	232b      	movmi	r3, #43	; 0x2b
 801d3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d3e8:	f89a 3000 	ldrb.w	r3, [sl]
 801d3ec:	2b2a      	cmp	r3, #42	; 0x2a
 801d3ee:	d015      	beq.n	801d41c <_vfiprintf_r+0x13c>
 801d3f0:	9a07      	ldr	r2, [sp, #28]
 801d3f2:	4654      	mov	r4, sl
 801d3f4:	2000      	movs	r0, #0
 801d3f6:	f04f 0c0a 	mov.w	ip, #10
 801d3fa:	4621      	mov	r1, r4
 801d3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d400:	3b30      	subs	r3, #48	; 0x30
 801d402:	2b09      	cmp	r3, #9
 801d404:	d94e      	bls.n	801d4a4 <_vfiprintf_r+0x1c4>
 801d406:	b1b0      	cbz	r0, 801d436 <_vfiprintf_r+0x156>
 801d408:	9207      	str	r2, [sp, #28]
 801d40a:	e014      	b.n	801d436 <_vfiprintf_r+0x156>
 801d40c:	eba0 0308 	sub.w	r3, r0, r8
 801d410:	fa09 f303 	lsl.w	r3, r9, r3
 801d414:	4313      	orrs	r3, r2
 801d416:	9304      	str	r3, [sp, #16]
 801d418:	46a2      	mov	sl, r4
 801d41a:	e7d2      	b.n	801d3c2 <_vfiprintf_r+0xe2>
 801d41c:	9b03      	ldr	r3, [sp, #12]
 801d41e:	1d19      	adds	r1, r3, #4
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	9103      	str	r1, [sp, #12]
 801d424:	2b00      	cmp	r3, #0
 801d426:	bfbb      	ittet	lt
 801d428:	425b      	neglt	r3, r3
 801d42a:	f042 0202 	orrlt.w	r2, r2, #2
 801d42e:	9307      	strge	r3, [sp, #28]
 801d430:	9307      	strlt	r3, [sp, #28]
 801d432:	bfb8      	it	lt
 801d434:	9204      	strlt	r2, [sp, #16]
 801d436:	7823      	ldrb	r3, [r4, #0]
 801d438:	2b2e      	cmp	r3, #46	; 0x2e
 801d43a:	d10c      	bne.n	801d456 <_vfiprintf_r+0x176>
 801d43c:	7863      	ldrb	r3, [r4, #1]
 801d43e:	2b2a      	cmp	r3, #42	; 0x2a
 801d440:	d135      	bne.n	801d4ae <_vfiprintf_r+0x1ce>
 801d442:	9b03      	ldr	r3, [sp, #12]
 801d444:	1d1a      	adds	r2, r3, #4
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	9203      	str	r2, [sp, #12]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	bfb8      	it	lt
 801d44e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d452:	3402      	adds	r4, #2
 801d454:	9305      	str	r3, [sp, #20]
 801d456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d53c <_vfiprintf_r+0x25c>
 801d45a:	7821      	ldrb	r1, [r4, #0]
 801d45c:	2203      	movs	r2, #3
 801d45e:	4650      	mov	r0, sl
 801d460:	f7e2 febe 	bl	80001e0 <memchr>
 801d464:	b140      	cbz	r0, 801d478 <_vfiprintf_r+0x198>
 801d466:	2340      	movs	r3, #64	; 0x40
 801d468:	eba0 000a 	sub.w	r0, r0, sl
 801d46c:	fa03 f000 	lsl.w	r0, r3, r0
 801d470:	9b04      	ldr	r3, [sp, #16]
 801d472:	4303      	orrs	r3, r0
 801d474:	3401      	adds	r4, #1
 801d476:	9304      	str	r3, [sp, #16]
 801d478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d47c:	482c      	ldr	r0, [pc, #176]	; (801d530 <_vfiprintf_r+0x250>)
 801d47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d482:	2206      	movs	r2, #6
 801d484:	f7e2 feac 	bl	80001e0 <memchr>
 801d488:	2800      	cmp	r0, #0
 801d48a:	d03f      	beq.n	801d50c <_vfiprintf_r+0x22c>
 801d48c:	4b29      	ldr	r3, [pc, #164]	; (801d534 <_vfiprintf_r+0x254>)
 801d48e:	bb1b      	cbnz	r3, 801d4d8 <_vfiprintf_r+0x1f8>
 801d490:	9b03      	ldr	r3, [sp, #12]
 801d492:	3307      	adds	r3, #7
 801d494:	f023 0307 	bic.w	r3, r3, #7
 801d498:	3308      	adds	r3, #8
 801d49a:	9303      	str	r3, [sp, #12]
 801d49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d49e:	443b      	add	r3, r7
 801d4a0:	9309      	str	r3, [sp, #36]	; 0x24
 801d4a2:	e767      	b.n	801d374 <_vfiprintf_r+0x94>
 801d4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d4a8:	460c      	mov	r4, r1
 801d4aa:	2001      	movs	r0, #1
 801d4ac:	e7a5      	b.n	801d3fa <_vfiprintf_r+0x11a>
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	3401      	adds	r4, #1
 801d4b2:	9305      	str	r3, [sp, #20]
 801d4b4:	4619      	mov	r1, r3
 801d4b6:	f04f 0c0a 	mov.w	ip, #10
 801d4ba:	4620      	mov	r0, r4
 801d4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d4c0:	3a30      	subs	r2, #48	; 0x30
 801d4c2:	2a09      	cmp	r2, #9
 801d4c4:	d903      	bls.n	801d4ce <_vfiprintf_r+0x1ee>
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d0c5      	beq.n	801d456 <_vfiprintf_r+0x176>
 801d4ca:	9105      	str	r1, [sp, #20]
 801d4cc:	e7c3      	b.n	801d456 <_vfiprintf_r+0x176>
 801d4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801d4d2:	4604      	mov	r4, r0
 801d4d4:	2301      	movs	r3, #1
 801d4d6:	e7f0      	b.n	801d4ba <_vfiprintf_r+0x1da>
 801d4d8:	ab03      	add	r3, sp, #12
 801d4da:	9300      	str	r3, [sp, #0]
 801d4dc:	462a      	mov	r2, r5
 801d4de:	4b16      	ldr	r3, [pc, #88]	; (801d538 <_vfiprintf_r+0x258>)
 801d4e0:	a904      	add	r1, sp, #16
 801d4e2:	4630      	mov	r0, r6
 801d4e4:	f7fb ff22 	bl	801932c <_printf_float>
 801d4e8:	4607      	mov	r7, r0
 801d4ea:	1c78      	adds	r0, r7, #1
 801d4ec:	d1d6      	bne.n	801d49c <_vfiprintf_r+0x1bc>
 801d4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d4f0:	07d9      	lsls	r1, r3, #31
 801d4f2:	d405      	bmi.n	801d500 <_vfiprintf_r+0x220>
 801d4f4:	89ab      	ldrh	r3, [r5, #12]
 801d4f6:	059a      	lsls	r2, r3, #22
 801d4f8:	d402      	bmi.n	801d500 <_vfiprintf_r+0x220>
 801d4fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d4fc:	f7fb fdca 	bl	8019094 <__retarget_lock_release_recursive>
 801d500:	89ab      	ldrh	r3, [r5, #12]
 801d502:	065b      	lsls	r3, r3, #25
 801d504:	f53f af12 	bmi.w	801d32c <_vfiprintf_r+0x4c>
 801d508:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d50a:	e711      	b.n	801d330 <_vfiprintf_r+0x50>
 801d50c:	ab03      	add	r3, sp, #12
 801d50e:	9300      	str	r3, [sp, #0]
 801d510:	462a      	mov	r2, r5
 801d512:	4b09      	ldr	r3, [pc, #36]	; (801d538 <_vfiprintf_r+0x258>)
 801d514:	a904      	add	r1, sp, #16
 801d516:	4630      	mov	r0, r6
 801d518:	f7fc f9ac 	bl	8019874 <_printf_i>
 801d51c:	e7e4      	b.n	801d4e8 <_vfiprintf_r+0x208>
 801d51e:	bf00      	nop
 801d520:	0801fd38 	.word	0x0801fd38
 801d524:	0801fd58 	.word	0x0801fd58
 801d528:	0801fd18 	.word	0x0801fd18
 801d52c:	0802016c 	.word	0x0802016c
 801d530:	08020176 	.word	0x08020176
 801d534:	0801932d 	.word	0x0801932d
 801d538:	0801d2bd 	.word	0x0801d2bd
 801d53c:	08020172 	.word	0x08020172

0801d540 <__swbuf_r>:
 801d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d542:	460e      	mov	r6, r1
 801d544:	4614      	mov	r4, r2
 801d546:	4605      	mov	r5, r0
 801d548:	b118      	cbz	r0, 801d552 <__swbuf_r+0x12>
 801d54a:	6983      	ldr	r3, [r0, #24]
 801d54c:	b90b      	cbnz	r3, 801d552 <__swbuf_r+0x12>
 801d54e:	f7fb fcdd 	bl	8018f0c <__sinit>
 801d552:	4b21      	ldr	r3, [pc, #132]	; (801d5d8 <__swbuf_r+0x98>)
 801d554:	429c      	cmp	r4, r3
 801d556:	d12b      	bne.n	801d5b0 <__swbuf_r+0x70>
 801d558:	686c      	ldr	r4, [r5, #4]
 801d55a:	69a3      	ldr	r3, [r4, #24]
 801d55c:	60a3      	str	r3, [r4, #8]
 801d55e:	89a3      	ldrh	r3, [r4, #12]
 801d560:	071a      	lsls	r2, r3, #28
 801d562:	d52f      	bpl.n	801d5c4 <__swbuf_r+0x84>
 801d564:	6923      	ldr	r3, [r4, #16]
 801d566:	b36b      	cbz	r3, 801d5c4 <__swbuf_r+0x84>
 801d568:	6923      	ldr	r3, [r4, #16]
 801d56a:	6820      	ldr	r0, [r4, #0]
 801d56c:	1ac0      	subs	r0, r0, r3
 801d56e:	6963      	ldr	r3, [r4, #20]
 801d570:	b2f6      	uxtb	r6, r6
 801d572:	4283      	cmp	r3, r0
 801d574:	4637      	mov	r7, r6
 801d576:	dc04      	bgt.n	801d582 <__swbuf_r+0x42>
 801d578:	4621      	mov	r1, r4
 801d57a:	4628      	mov	r0, r5
 801d57c:	f7fe fb6a 	bl	801bc54 <_fflush_r>
 801d580:	bb30      	cbnz	r0, 801d5d0 <__swbuf_r+0x90>
 801d582:	68a3      	ldr	r3, [r4, #8]
 801d584:	3b01      	subs	r3, #1
 801d586:	60a3      	str	r3, [r4, #8]
 801d588:	6823      	ldr	r3, [r4, #0]
 801d58a:	1c5a      	adds	r2, r3, #1
 801d58c:	6022      	str	r2, [r4, #0]
 801d58e:	701e      	strb	r6, [r3, #0]
 801d590:	6963      	ldr	r3, [r4, #20]
 801d592:	3001      	adds	r0, #1
 801d594:	4283      	cmp	r3, r0
 801d596:	d004      	beq.n	801d5a2 <__swbuf_r+0x62>
 801d598:	89a3      	ldrh	r3, [r4, #12]
 801d59a:	07db      	lsls	r3, r3, #31
 801d59c:	d506      	bpl.n	801d5ac <__swbuf_r+0x6c>
 801d59e:	2e0a      	cmp	r6, #10
 801d5a0:	d104      	bne.n	801d5ac <__swbuf_r+0x6c>
 801d5a2:	4621      	mov	r1, r4
 801d5a4:	4628      	mov	r0, r5
 801d5a6:	f7fe fb55 	bl	801bc54 <_fflush_r>
 801d5aa:	b988      	cbnz	r0, 801d5d0 <__swbuf_r+0x90>
 801d5ac:	4638      	mov	r0, r7
 801d5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d5b0:	4b0a      	ldr	r3, [pc, #40]	; (801d5dc <__swbuf_r+0x9c>)
 801d5b2:	429c      	cmp	r4, r3
 801d5b4:	d101      	bne.n	801d5ba <__swbuf_r+0x7a>
 801d5b6:	68ac      	ldr	r4, [r5, #8]
 801d5b8:	e7cf      	b.n	801d55a <__swbuf_r+0x1a>
 801d5ba:	4b09      	ldr	r3, [pc, #36]	; (801d5e0 <__swbuf_r+0xa0>)
 801d5bc:	429c      	cmp	r4, r3
 801d5be:	bf08      	it	eq
 801d5c0:	68ec      	ldreq	r4, [r5, #12]
 801d5c2:	e7ca      	b.n	801d55a <__swbuf_r+0x1a>
 801d5c4:	4621      	mov	r1, r4
 801d5c6:	4628      	mov	r0, r5
 801d5c8:	f000 f80c 	bl	801d5e4 <__swsetup_r>
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	d0cb      	beq.n	801d568 <__swbuf_r+0x28>
 801d5d0:	f04f 37ff 	mov.w	r7, #4294967295
 801d5d4:	e7ea      	b.n	801d5ac <__swbuf_r+0x6c>
 801d5d6:	bf00      	nop
 801d5d8:	0801fd38 	.word	0x0801fd38
 801d5dc:	0801fd58 	.word	0x0801fd58
 801d5e0:	0801fd18 	.word	0x0801fd18

0801d5e4 <__swsetup_r>:
 801d5e4:	4b32      	ldr	r3, [pc, #200]	; (801d6b0 <__swsetup_r+0xcc>)
 801d5e6:	b570      	push	{r4, r5, r6, lr}
 801d5e8:	681d      	ldr	r5, [r3, #0]
 801d5ea:	4606      	mov	r6, r0
 801d5ec:	460c      	mov	r4, r1
 801d5ee:	b125      	cbz	r5, 801d5fa <__swsetup_r+0x16>
 801d5f0:	69ab      	ldr	r3, [r5, #24]
 801d5f2:	b913      	cbnz	r3, 801d5fa <__swsetup_r+0x16>
 801d5f4:	4628      	mov	r0, r5
 801d5f6:	f7fb fc89 	bl	8018f0c <__sinit>
 801d5fa:	4b2e      	ldr	r3, [pc, #184]	; (801d6b4 <__swsetup_r+0xd0>)
 801d5fc:	429c      	cmp	r4, r3
 801d5fe:	d10f      	bne.n	801d620 <__swsetup_r+0x3c>
 801d600:	686c      	ldr	r4, [r5, #4]
 801d602:	89a3      	ldrh	r3, [r4, #12]
 801d604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d608:	0719      	lsls	r1, r3, #28
 801d60a:	d42c      	bmi.n	801d666 <__swsetup_r+0x82>
 801d60c:	06dd      	lsls	r5, r3, #27
 801d60e:	d411      	bmi.n	801d634 <__swsetup_r+0x50>
 801d610:	2309      	movs	r3, #9
 801d612:	6033      	str	r3, [r6, #0]
 801d614:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d618:	81a3      	strh	r3, [r4, #12]
 801d61a:	f04f 30ff 	mov.w	r0, #4294967295
 801d61e:	e03e      	b.n	801d69e <__swsetup_r+0xba>
 801d620:	4b25      	ldr	r3, [pc, #148]	; (801d6b8 <__swsetup_r+0xd4>)
 801d622:	429c      	cmp	r4, r3
 801d624:	d101      	bne.n	801d62a <__swsetup_r+0x46>
 801d626:	68ac      	ldr	r4, [r5, #8]
 801d628:	e7eb      	b.n	801d602 <__swsetup_r+0x1e>
 801d62a:	4b24      	ldr	r3, [pc, #144]	; (801d6bc <__swsetup_r+0xd8>)
 801d62c:	429c      	cmp	r4, r3
 801d62e:	bf08      	it	eq
 801d630:	68ec      	ldreq	r4, [r5, #12]
 801d632:	e7e6      	b.n	801d602 <__swsetup_r+0x1e>
 801d634:	0758      	lsls	r0, r3, #29
 801d636:	d512      	bpl.n	801d65e <__swsetup_r+0x7a>
 801d638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d63a:	b141      	cbz	r1, 801d64e <__swsetup_r+0x6a>
 801d63c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d640:	4299      	cmp	r1, r3
 801d642:	d002      	beq.n	801d64a <__swsetup_r+0x66>
 801d644:	4630      	mov	r0, r6
 801d646:	f7ff fbc5 	bl	801cdd4 <_free_r>
 801d64a:	2300      	movs	r3, #0
 801d64c:	6363      	str	r3, [r4, #52]	; 0x34
 801d64e:	89a3      	ldrh	r3, [r4, #12]
 801d650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d654:	81a3      	strh	r3, [r4, #12]
 801d656:	2300      	movs	r3, #0
 801d658:	6063      	str	r3, [r4, #4]
 801d65a:	6923      	ldr	r3, [r4, #16]
 801d65c:	6023      	str	r3, [r4, #0]
 801d65e:	89a3      	ldrh	r3, [r4, #12]
 801d660:	f043 0308 	orr.w	r3, r3, #8
 801d664:	81a3      	strh	r3, [r4, #12]
 801d666:	6923      	ldr	r3, [r4, #16]
 801d668:	b94b      	cbnz	r3, 801d67e <__swsetup_r+0x9a>
 801d66a:	89a3      	ldrh	r3, [r4, #12]
 801d66c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d674:	d003      	beq.n	801d67e <__swsetup_r+0x9a>
 801d676:	4621      	mov	r1, r4
 801d678:	4630      	mov	r0, r6
 801d67a:	f000 f84d 	bl	801d718 <__smakebuf_r>
 801d67e:	89a0      	ldrh	r0, [r4, #12]
 801d680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d684:	f010 0301 	ands.w	r3, r0, #1
 801d688:	d00a      	beq.n	801d6a0 <__swsetup_r+0xbc>
 801d68a:	2300      	movs	r3, #0
 801d68c:	60a3      	str	r3, [r4, #8]
 801d68e:	6963      	ldr	r3, [r4, #20]
 801d690:	425b      	negs	r3, r3
 801d692:	61a3      	str	r3, [r4, #24]
 801d694:	6923      	ldr	r3, [r4, #16]
 801d696:	b943      	cbnz	r3, 801d6aa <__swsetup_r+0xc6>
 801d698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d69c:	d1ba      	bne.n	801d614 <__swsetup_r+0x30>
 801d69e:	bd70      	pop	{r4, r5, r6, pc}
 801d6a0:	0781      	lsls	r1, r0, #30
 801d6a2:	bf58      	it	pl
 801d6a4:	6963      	ldrpl	r3, [r4, #20]
 801d6a6:	60a3      	str	r3, [r4, #8]
 801d6a8:	e7f4      	b.n	801d694 <__swsetup_r+0xb0>
 801d6aa:	2000      	movs	r0, #0
 801d6ac:	e7f7      	b.n	801d69e <__swsetup_r+0xba>
 801d6ae:	bf00      	nop
 801d6b0:	2000010c 	.word	0x2000010c
 801d6b4:	0801fd38 	.word	0x0801fd38
 801d6b8:	0801fd58 	.word	0x0801fd58
 801d6bc:	0801fd18 	.word	0x0801fd18

0801d6c0 <abort>:
 801d6c0:	b508      	push	{r3, lr}
 801d6c2:	2006      	movs	r0, #6
 801d6c4:	f000 f898 	bl	801d7f8 <raise>
 801d6c8:	2001      	movs	r0, #1
 801d6ca:	f001 ff7d 	bl	801f5c8 <_exit>

0801d6ce <__swhatbuf_r>:
 801d6ce:	b570      	push	{r4, r5, r6, lr}
 801d6d0:	460e      	mov	r6, r1
 801d6d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6d6:	2900      	cmp	r1, #0
 801d6d8:	b096      	sub	sp, #88	; 0x58
 801d6da:	4614      	mov	r4, r2
 801d6dc:	461d      	mov	r5, r3
 801d6de:	da08      	bge.n	801d6f2 <__swhatbuf_r+0x24>
 801d6e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d6e4:	2200      	movs	r2, #0
 801d6e6:	602a      	str	r2, [r5, #0]
 801d6e8:	061a      	lsls	r2, r3, #24
 801d6ea:	d410      	bmi.n	801d70e <__swhatbuf_r+0x40>
 801d6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d6f0:	e00e      	b.n	801d710 <__swhatbuf_r+0x42>
 801d6f2:	466a      	mov	r2, sp
 801d6f4:	f000 f89c 	bl	801d830 <_fstat_r>
 801d6f8:	2800      	cmp	r0, #0
 801d6fa:	dbf1      	blt.n	801d6e0 <__swhatbuf_r+0x12>
 801d6fc:	9a01      	ldr	r2, [sp, #4]
 801d6fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d702:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d706:	425a      	negs	r2, r3
 801d708:	415a      	adcs	r2, r3
 801d70a:	602a      	str	r2, [r5, #0]
 801d70c:	e7ee      	b.n	801d6ec <__swhatbuf_r+0x1e>
 801d70e:	2340      	movs	r3, #64	; 0x40
 801d710:	2000      	movs	r0, #0
 801d712:	6023      	str	r3, [r4, #0]
 801d714:	b016      	add	sp, #88	; 0x58
 801d716:	bd70      	pop	{r4, r5, r6, pc}

0801d718 <__smakebuf_r>:
 801d718:	898b      	ldrh	r3, [r1, #12]
 801d71a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d71c:	079d      	lsls	r5, r3, #30
 801d71e:	4606      	mov	r6, r0
 801d720:	460c      	mov	r4, r1
 801d722:	d507      	bpl.n	801d734 <__smakebuf_r+0x1c>
 801d724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d728:	6023      	str	r3, [r4, #0]
 801d72a:	6123      	str	r3, [r4, #16]
 801d72c:	2301      	movs	r3, #1
 801d72e:	6163      	str	r3, [r4, #20]
 801d730:	b002      	add	sp, #8
 801d732:	bd70      	pop	{r4, r5, r6, pc}
 801d734:	ab01      	add	r3, sp, #4
 801d736:	466a      	mov	r2, sp
 801d738:	f7ff ffc9 	bl	801d6ce <__swhatbuf_r>
 801d73c:	9900      	ldr	r1, [sp, #0]
 801d73e:	4605      	mov	r5, r0
 801d740:	4630      	mov	r0, r6
 801d742:	f7fb fcdf 	bl	8019104 <_malloc_r>
 801d746:	b948      	cbnz	r0, 801d75c <__smakebuf_r+0x44>
 801d748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d74c:	059a      	lsls	r2, r3, #22
 801d74e:	d4ef      	bmi.n	801d730 <__smakebuf_r+0x18>
 801d750:	f023 0303 	bic.w	r3, r3, #3
 801d754:	f043 0302 	orr.w	r3, r3, #2
 801d758:	81a3      	strh	r3, [r4, #12]
 801d75a:	e7e3      	b.n	801d724 <__smakebuf_r+0xc>
 801d75c:	4b0d      	ldr	r3, [pc, #52]	; (801d794 <__smakebuf_r+0x7c>)
 801d75e:	62b3      	str	r3, [r6, #40]	; 0x28
 801d760:	89a3      	ldrh	r3, [r4, #12]
 801d762:	6020      	str	r0, [r4, #0]
 801d764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d768:	81a3      	strh	r3, [r4, #12]
 801d76a:	9b00      	ldr	r3, [sp, #0]
 801d76c:	6163      	str	r3, [r4, #20]
 801d76e:	9b01      	ldr	r3, [sp, #4]
 801d770:	6120      	str	r0, [r4, #16]
 801d772:	b15b      	cbz	r3, 801d78c <__smakebuf_r+0x74>
 801d774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d778:	4630      	mov	r0, r6
 801d77a:	f000 f86b 	bl	801d854 <_isatty_r>
 801d77e:	b128      	cbz	r0, 801d78c <__smakebuf_r+0x74>
 801d780:	89a3      	ldrh	r3, [r4, #12]
 801d782:	f023 0303 	bic.w	r3, r3, #3
 801d786:	f043 0301 	orr.w	r3, r3, #1
 801d78a:	81a3      	strh	r3, [r4, #12]
 801d78c:	89a0      	ldrh	r0, [r4, #12]
 801d78e:	4305      	orrs	r5, r0
 801d790:	81a5      	strh	r5, [r4, #12]
 801d792:	e7cd      	b.n	801d730 <__smakebuf_r+0x18>
 801d794:	08018ea5 	.word	0x08018ea5

0801d798 <_malloc_usable_size_r>:
 801d798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d79c:	1f18      	subs	r0, r3, #4
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	bfbc      	itt	lt
 801d7a2:	580b      	ldrlt	r3, [r1, r0]
 801d7a4:	18c0      	addlt	r0, r0, r3
 801d7a6:	4770      	bx	lr

0801d7a8 <_raise_r>:
 801d7a8:	291f      	cmp	r1, #31
 801d7aa:	b538      	push	{r3, r4, r5, lr}
 801d7ac:	4604      	mov	r4, r0
 801d7ae:	460d      	mov	r5, r1
 801d7b0:	d904      	bls.n	801d7bc <_raise_r+0x14>
 801d7b2:	2316      	movs	r3, #22
 801d7b4:	6003      	str	r3, [r0, #0]
 801d7b6:	f04f 30ff 	mov.w	r0, #4294967295
 801d7ba:	bd38      	pop	{r3, r4, r5, pc}
 801d7bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d7be:	b112      	cbz	r2, 801d7c6 <_raise_r+0x1e>
 801d7c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d7c4:	b94b      	cbnz	r3, 801d7da <_raise_r+0x32>
 801d7c6:	4620      	mov	r0, r4
 801d7c8:	f000 f830 	bl	801d82c <_getpid_r>
 801d7cc:	462a      	mov	r2, r5
 801d7ce:	4601      	mov	r1, r0
 801d7d0:	4620      	mov	r0, r4
 801d7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d7d6:	f000 b817 	b.w	801d808 <_kill_r>
 801d7da:	2b01      	cmp	r3, #1
 801d7dc:	d00a      	beq.n	801d7f4 <_raise_r+0x4c>
 801d7de:	1c59      	adds	r1, r3, #1
 801d7e0:	d103      	bne.n	801d7ea <_raise_r+0x42>
 801d7e2:	2316      	movs	r3, #22
 801d7e4:	6003      	str	r3, [r0, #0]
 801d7e6:	2001      	movs	r0, #1
 801d7e8:	e7e7      	b.n	801d7ba <_raise_r+0x12>
 801d7ea:	2400      	movs	r4, #0
 801d7ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d7f0:	4628      	mov	r0, r5
 801d7f2:	4798      	blx	r3
 801d7f4:	2000      	movs	r0, #0
 801d7f6:	e7e0      	b.n	801d7ba <_raise_r+0x12>

0801d7f8 <raise>:
 801d7f8:	4b02      	ldr	r3, [pc, #8]	; (801d804 <raise+0xc>)
 801d7fa:	4601      	mov	r1, r0
 801d7fc:	6818      	ldr	r0, [r3, #0]
 801d7fe:	f7ff bfd3 	b.w	801d7a8 <_raise_r>
 801d802:	bf00      	nop
 801d804:	2000010c 	.word	0x2000010c

0801d808 <_kill_r>:
 801d808:	b538      	push	{r3, r4, r5, lr}
 801d80a:	4d07      	ldr	r5, [pc, #28]	; (801d828 <_kill_r+0x20>)
 801d80c:	2300      	movs	r3, #0
 801d80e:	4604      	mov	r4, r0
 801d810:	4608      	mov	r0, r1
 801d812:	4611      	mov	r1, r2
 801d814:	602b      	str	r3, [r5, #0]
 801d816:	f001 fea9 	bl	801f56c <_kill>
 801d81a:	1c43      	adds	r3, r0, #1
 801d81c:	d102      	bne.n	801d824 <_kill_r+0x1c>
 801d81e:	682b      	ldr	r3, [r5, #0]
 801d820:	b103      	cbz	r3, 801d824 <_kill_r+0x1c>
 801d822:	6023      	str	r3, [r4, #0]
 801d824:	bd38      	pop	{r3, r4, r5, pc}
 801d826:	bf00      	nop
 801d828:	2000e554 	.word	0x2000e554

0801d82c <_getpid_r>:
 801d82c:	f001 be8e 	b.w	801f54c <_getpid>

0801d830 <_fstat_r>:
 801d830:	b538      	push	{r3, r4, r5, lr}
 801d832:	4d07      	ldr	r5, [pc, #28]	; (801d850 <_fstat_r+0x20>)
 801d834:	2300      	movs	r3, #0
 801d836:	4604      	mov	r4, r0
 801d838:	4608      	mov	r0, r1
 801d83a:	4611      	mov	r1, r2
 801d83c:	602b      	str	r3, [r5, #0]
 801d83e:	f001 fe7d 	bl	801f53c <_fstat>
 801d842:	1c43      	adds	r3, r0, #1
 801d844:	d102      	bne.n	801d84c <_fstat_r+0x1c>
 801d846:	682b      	ldr	r3, [r5, #0]
 801d848:	b103      	cbz	r3, 801d84c <_fstat_r+0x1c>
 801d84a:	6023      	str	r3, [r4, #0]
 801d84c:	bd38      	pop	{r3, r4, r5, pc}
 801d84e:	bf00      	nop
 801d850:	2000e554 	.word	0x2000e554

0801d854 <_isatty_r>:
 801d854:	b538      	push	{r3, r4, r5, lr}
 801d856:	4d06      	ldr	r5, [pc, #24]	; (801d870 <_isatty_r+0x1c>)
 801d858:	2300      	movs	r3, #0
 801d85a:	4604      	mov	r4, r0
 801d85c:	4608      	mov	r0, r1
 801d85e:	602b      	str	r3, [r5, #0]
 801d860:	f001 fe7c 	bl	801f55c <_isatty>
 801d864:	1c43      	adds	r3, r0, #1
 801d866:	d102      	bne.n	801d86e <_isatty_r+0x1a>
 801d868:	682b      	ldr	r3, [r5, #0]
 801d86a:	b103      	cbz	r3, 801d86e <_isatty_r+0x1a>
 801d86c:	6023      	str	r3, [r4, #0]
 801d86e:	bd38      	pop	{r3, r4, r5, pc}
 801d870:	2000e554 	.word	0x2000e554
 801d874:	00000000 	.word	0x00000000

0801d878 <cos>:
 801d878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d87a:	ec53 2b10 	vmov	r2, r3, d0
 801d87e:	4826      	ldr	r0, [pc, #152]	; (801d918 <cos+0xa0>)
 801d880:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d884:	4281      	cmp	r1, r0
 801d886:	dc06      	bgt.n	801d896 <cos+0x1e>
 801d888:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801d910 <cos+0x98>
 801d88c:	b005      	add	sp, #20
 801d88e:	f85d eb04 	ldr.w	lr, [sp], #4
 801d892:	f000 bec1 	b.w	801e618 <__kernel_cos>
 801d896:	4821      	ldr	r0, [pc, #132]	; (801d91c <cos+0xa4>)
 801d898:	4281      	cmp	r1, r0
 801d89a:	dd09      	ble.n	801d8b0 <cos+0x38>
 801d89c:	ee10 0a10 	vmov	r0, s0
 801d8a0:	4619      	mov	r1, r3
 801d8a2:	f7e2 fcf1 	bl	8000288 <__aeabi_dsub>
 801d8a6:	ec41 0b10 	vmov	d0, r0, r1
 801d8aa:	b005      	add	sp, #20
 801d8ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801d8b0:	4668      	mov	r0, sp
 801d8b2:	f000 fbed 	bl	801e090 <__ieee754_rem_pio2>
 801d8b6:	f000 0003 	and.w	r0, r0, #3
 801d8ba:	2801      	cmp	r0, #1
 801d8bc:	d00b      	beq.n	801d8d6 <cos+0x5e>
 801d8be:	2802      	cmp	r0, #2
 801d8c0:	d016      	beq.n	801d8f0 <cos+0x78>
 801d8c2:	b9e0      	cbnz	r0, 801d8fe <cos+0x86>
 801d8c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d8c8:	ed9d 0b00 	vldr	d0, [sp]
 801d8cc:	f000 fea4 	bl	801e618 <__kernel_cos>
 801d8d0:	ec51 0b10 	vmov	r0, r1, d0
 801d8d4:	e7e7      	b.n	801d8a6 <cos+0x2e>
 801d8d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d8da:	ed9d 0b00 	vldr	d0, [sp]
 801d8de:	f001 fab3 	bl	801ee48 <__kernel_sin>
 801d8e2:	ec53 2b10 	vmov	r2, r3, d0
 801d8e6:	ee10 0a10 	vmov	r0, s0
 801d8ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d8ee:	e7da      	b.n	801d8a6 <cos+0x2e>
 801d8f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d8f4:	ed9d 0b00 	vldr	d0, [sp]
 801d8f8:	f000 fe8e 	bl	801e618 <__kernel_cos>
 801d8fc:	e7f1      	b.n	801d8e2 <cos+0x6a>
 801d8fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d902:	ed9d 0b00 	vldr	d0, [sp]
 801d906:	2001      	movs	r0, #1
 801d908:	f001 fa9e 	bl	801ee48 <__kernel_sin>
 801d90c:	e7e0      	b.n	801d8d0 <cos+0x58>
 801d90e:	bf00      	nop
	...
 801d918:	3fe921fb 	.word	0x3fe921fb
 801d91c:	7fefffff 	.word	0x7fefffff

0801d920 <sin>:
 801d920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d922:	ec53 2b10 	vmov	r2, r3, d0
 801d926:	4828      	ldr	r0, [pc, #160]	; (801d9c8 <sin+0xa8>)
 801d928:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d92c:	4281      	cmp	r1, r0
 801d92e:	dc07      	bgt.n	801d940 <sin+0x20>
 801d930:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801d9c0 <sin+0xa0>
 801d934:	2000      	movs	r0, #0
 801d936:	b005      	add	sp, #20
 801d938:	f85d eb04 	ldr.w	lr, [sp], #4
 801d93c:	f001 ba84 	b.w	801ee48 <__kernel_sin>
 801d940:	4822      	ldr	r0, [pc, #136]	; (801d9cc <sin+0xac>)
 801d942:	4281      	cmp	r1, r0
 801d944:	dd09      	ble.n	801d95a <sin+0x3a>
 801d946:	ee10 0a10 	vmov	r0, s0
 801d94a:	4619      	mov	r1, r3
 801d94c:	f7e2 fc9c 	bl	8000288 <__aeabi_dsub>
 801d950:	ec41 0b10 	vmov	d0, r0, r1
 801d954:	b005      	add	sp, #20
 801d956:	f85d fb04 	ldr.w	pc, [sp], #4
 801d95a:	4668      	mov	r0, sp
 801d95c:	f000 fb98 	bl	801e090 <__ieee754_rem_pio2>
 801d960:	f000 0003 	and.w	r0, r0, #3
 801d964:	2801      	cmp	r0, #1
 801d966:	d00c      	beq.n	801d982 <sin+0x62>
 801d968:	2802      	cmp	r0, #2
 801d96a:	d011      	beq.n	801d990 <sin+0x70>
 801d96c:	b9f0      	cbnz	r0, 801d9ac <sin+0x8c>
 801d96e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d972:	ed9d 0b00 	vldr	d0, [sp]
 801d976:	2001      	movs	r0, #1
 801d978:	f001 fa66 	bl	801ee48 <__kernel_sin>
 801d97c:	ec51 0b10 	vmov	r0, r1, d0
 801d980:	e7e6      	b.n	801d950 <sin+0x30>
 801d982:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d986:	ed9d 0b00 	vldr	d0, [sp]
 801d98a:	f000 fe45 	bl	801e618 <__kernel_cos>
 801d98e:	e7f5      	b.n	801d97c <sin+0x5c>
 801d990:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d994:	ed9d 0b00 	vldr	d0, [sp]
 801d998:	2001      	movs	r0, #1
 801d99a:	f001 fa55 	bl	801ee48 <__kernel_sin>
 801d99e:	ec53 2b10 	vmov	r2, r3, d0
 801d9a2:	ee10 0a10 	vmov	r0, s0
 801d9a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d9aa:	e7d1      	b.n	801d950 <sin+0x30>
 801d9ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d9b0:	ed9d 0b00 	vldr	d0, [sp]
 801d9b4:	f000 fe30 	bl	801e618 <__kernel_cos>
 801d9b8:	e7f1      	b.n	801d99e <sin+0x7e>
 801d9ba:	bf00      	nop
 801d9bc:	f3af 8000 	nop.w
	...
 801d9c8:	3fe921fb 	.word	0x3fe921fb
 801d9cc:	7fefffff 	.word	0x7fefffff

0801d9d0 <asin>:
 801d9d0:	b538      	push	{r3, r4, r5, lr}
 801d9d2:	ed2d 8b02 	vpush	{d8}
 801d9d6:	ec55 4b10 	vmov	r4, r5, d0
 801d9da:	f000 f879 	bl	801dad0 <__ieee754_asin>
 801d9de:	4622      	mov	r2, r4
 801d9e0:	462b      	mov	r3, r5
 801d9e2:	4620      	mov	r0, r4
 801d9e4:	4629      	mov	r1, r5
 801d9e6:	eeb0 8a40 	vmov.f32	s16, s0
 801d9ea:	eef0 8a60 	vmov.f32	s17, s1
 801d9ee:	f7e3 f89d 	bl	8000b2c <__aeabi_dcmpun>
 801d9f2:	b9a8      	cbnz	r0, 801da20 <asin+0x50>
 801d9f4:	ec45 4b10 	vmov	d0, r4, r5
 801d9f8:	f001 fc86 	bl	801f308 <fabs>
 801d9fc:	4b0c      	ldr	r3, [pc, #48]	; (801da30 <asin+0x60>)
 801d9fe:	ec51 0b10 	vmov	r0, r1, d0
 801da02:	2200      	movs	r2, #0
 801da04:	f7e3 f888 	bl	8000b18 <__aeabi_dcmpgt>
 801da08:	b150      	cbz	r0, 801da20 <asin+0x50>
 801da0a:	f7fe f897 	bl	801bb3c <__errno>
 801da0e:	ecbd 8b02 	vpop	{d8}
 801da12:	2321      	movs	r3, #33	; 0x21
 801da14:	6003      	str	r3, [r0, #0]
 801da16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da1a:	4806      	ldr	r0, [pc, #24]	; (801da34 <asin+0x64>)
 801da1c:	f7ff bb94 	b.w	801d148 <nan>
 801da20:	eeb0 0a48 	vmov.f32	s0, s16
 801da24:	eef0 0a68 	vmov.f32	s1, s17
 801da28:	ecbd 8b02 	vpop	{d8}
 801da2c:	bd38      	pop	{r3, r4, r5, pc}
 801da2e:	bf00      	nop
 801da30:	3ff00000 	.word	0x3ff00000
 801da34:	080201b8 	.word	0x080201b8

0801da38 <atan2>:
 801da38:	f000 ba5e 	b.w	801def8 <__ieee754_atan2>

0801da3c <sqrt>:
 801da3c:	b538      	push	{r3, r4, r5, lr}
 801da3e:	ed2d 8b02 	vpush	{d8}
 801da42:	ec55 4b10 	vmov	r4, r5, d0
 801da46:	f000 fd2f 	bl	801e4a8 <__ieee754_sqrt>
 801da4a:	4622      	mov	r2, r4
 801da4c:	462b      	mov	r3, r5
 801da4e:	4620      	mov	r0, r4
 801da50:	4629      	mov	r1, r5
 801da52:	eeb0 8a40 	vmov.f32	s16, s0
 801da56:	eef0 8a60 	vmov.f32	s17, s1
 801da5a:	f7e3 f867 	bl	8000b2c <__aeabi_dcmpun>
 801da5e:	b990      	cbnz	r0, 801da86 <sqrt+0x4a>
 801da60:	2200      	movs	r2, #0
 801da62:	2300      	movs	r3, #0
 801da64:	4620      	mov	r0, r4
 801da66:	4629      	mov	r1, r5
 801da68:	f7e3 f838 	bl	8000adc <__aeabi_dcmplt>
 801da6c:	b158      	cbz	r0, 801da86 <sqrt+0x4a>
 801da6e:	f7fe f865 	bl	801bb3c <__errno>
 801da72:	2321      	movs	r3, #33	; 0x21
 801da74:	6003      	str	r3, [r0, #0]
 801da76:	2200      	movs	r2, #0
 801da78:	2300      	movs	r3, #0
 801da7a:	4610      	mov	r0, r2
 801da7c:	4619      	mov	r1, r3
 801da7e:	f7e2 fee5 	bl	800084c <__aeabi_ddiv>
 801da82:	ec41 0b18 	vmov	d8, r0, r1
 801da86:	eeb0 0a48 	vmov.f32	s0, s16
 801da8a:	eef0 0a68 	vmov.f32	s1, s17
 801da8e:	ecbd 8b02 	vpop	{d8}
 801da92:	bd38      	pop	{r3, r4, r5, pc}

0801da94 <sqrtf>:
 801da94:	b508      	push	{r3, lr}
 801da96:	ed2d 8b02 	vpush	{d8}
 801da9a:	eeb0 8a40 	vmov.f32	s16, s0
 801da9e:	f000 fdb5 	bl	801e60c <__ieee754_sqrtf>
 801daa2:	eeb4 8a48 	vcmp.f32	s16, s16
 801daa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daaa:	d60c      	bvs.n	801dac6 <sqrtf+0x32>
 801daac:	eddf 8a07 	vldr	s17, [pc, #28]	; 801dacc <sqrtf+0x38>
 801dab0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801dab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dab8:	d505      	bpl.n	801dac6 <sqrtf+0x32>
 801daba:	f7fe f83f 	bl	801bb3c <__errno>
 801dabe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801dac2:	2321      	movs	r3, #33	; 0x21
 801dac4:	6003      	str	r3, [r0, #0]
 801dac6:	ecbd 8b02 	vpop	{d8}
 801daca:	bd08      	pop	{r3, pc}
 801dacc:	00000000 	.word	0x00000000

0801dad0 <__ieee754_asin>:
 801dad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dad4:	ed2d 8b04 	vpush	{d8-d9}
 801dad8:	ec55 4b10 	vmov	r4, r5, d0
 801dadc:	4bcc      	ldr	r3, [pc, #816]	; (801de10 <__ieee754_asin+0x340>)
 801dade:	b083      	sub	sp, #12
 801dae0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801dae4:	4598      	cmp	r8, r3
 801dae6:	9501      	str	r5, [sp, #4]
 801dae8:	dd35      	ble.n	801db56 <__ieee754_asin+0x86>
 801daea:	ee10 3a10 	vmov	r3, s0
 801daee:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801daf2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801daf6:	ea58 0303 	orrs.w	r3, r8, r3
 801dafa:	d117      	bne.n	801db2c <__ieee754_asin+0x5c>
 801dafc:	a3aa      	add	r3, pc, #680	; (adr r3, 801dda8 <__ieee754_asin+0x2d8>)
 801dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db02:	ee10 0a10 	vmov	r0, s0
 801db06:	4629      	mov	r1, r5
 801db08:	f7e2 fd76 	bl	80005f8 <__aeabi_dmul>
 801db0c:	a3a8      	add	r3, pc, #672	; (adr r3, 801ddb0 <__ieee754_asin+0x2e0>)
 801db0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db12:	4606      	mov	r6, r0
 801db14:	460f      	mov	r7, r1
 801db16:	4620      	mov	r0, r4
 801db18:	4629      	mov	r1, r5
 801db1a:	f7e2 fd6d 	bl	80005f8 <__aeabi_dmul>
 801db1e:	4602      	mov	r2, r0
 801db20:	460b      	mov	r3, r1
 801db22:	4630      	mov	r0, r6
 801db24:	4639      	mov	r1, r7
 801db26:	f7e2 fbb1 	bl	800028c <__adddf3>
 801db2a:	e00b      	b.n	801db44 <__ieee754_asin+0x74>
 801db2c:	ee10 2a10 	vmov	r2, s0
 801db30:	462b      	mov	r3, r5
 801db32:	ee10 0a10 	vmov	r0, s0
 801db36:	4629      	mov	r1, r5
 801db38:	f7e2 fba6 	bl	8000288 <__aeabi_dsub>
 801db3c:	4602      	mov	r2, r0
 801db3e:	460b      	mov	r3, r1
 801db40:	f7e2 fe84 	bl	800084c <__aeabi_ddiv>
 801db44:	4604      	mov	r4, r0
 801db46:	460d      	mov	r5, r1
 801db48:	ec45 4b10 	vmov	d0, r4, r5
 801db4c:	b003      	add	sp, #12
 801db4e:	ecbd 8b04 	vpop	{d8-d9}
 801db52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db56:	4baf      	ldr	r3, [pc, #700]	; (801de14 <__ieee754_asin+0x344>)
 801db58:	4598      	cmp	r8, r3
 801db5a:	dc11      	bgt.n	801db80 <__ieee754_asin+0xb0>
 801db5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801db60:	f280 80ae 	bge.w	801dcc0 <__ieee754_asin+0x1f0>
 801db64:	a394      	add	r3, pc, #592	; (adr r3, 801ddb8 <__ieee754_asin+0x2e8>)
 801db66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db6a:	ee10 0a10 	vmov	r0, s0
 801db6e:	4629      	mov	r1, r5
 801db70:	f7e2 fb8c 	bl	800028c <__adddf3>
 801db74:	4ba8      	ldr	r3, [pc, #672]	; (801de18 <__ieee754_asin+0x348>)
 801db76:	2200      	movs	r2, #0
 801db78:	f7e2 ffce 	bl	8000b18 <__aeabi_dcmpgt>
 801db7c:	2800      	cmp	r0, #0
 801db7e:	d1e3      	bne.n	801db48 <__ieee754_asin+0x78>
 801db80:	ec45 4b10 	vmov	d0, r4, r5
 801db84:	f001 fbc0 	bl	801f308 <fabs>
 801db88:	49a3      	ldr	r1, [pc, #652]	; (801de18 <__ieee754_asin+0x348>)
 801db8a:	ec53 2b10 	vmov	r2, r3, d0
 801db8e:	2000      	movs	r0, #0
 801db90:	f7e2 fb7a 	bl	8000288 <__aeabi_dsub>
 801db94:	4ba1      	ldr	r3, [pc, #644]	; (801de1c <__ieee754_asin+0x34c>)
 801db96:	2200      	movs	r2, #0
 801db98:	f7e2 fd2e 	bl	80005f8 <__aeabi_dmul>
 801db9c:	a388      	add	r3, pc, #544	; (adr r3, 801ddc0 <__ieee754_asin+0x2f0>)
 801db9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dba2:	4604      	mov	r4, r0
 801dba4:	460d      	mov	r5, r1
 801dba6:	f7e2 fd27 	bl	80005f8 <__aeabi_dmul>
 801dbaa:	a387      	add	r3, pc, #540	; (adr r3, 801ddc8 <__ieee754_asin+0x2f8>)
 801dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbb0:	f7e2 fb6c 	bl	800028c <__adddf3>
 801dbb4:	4622      	mov	r2, r4
 801dbb6:	462b      	mov	r3, r5
 801dbb8:	f7e2 fd1e 	bl	80005f8 <__aeabi_dmul>
 801dbbc:	a384      	add	r3, pc, #528	; (adr r3, 801ddd0 <__ieee754_asin+0x300>)
 801dbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbc2:	f7e2 fb61 	bl	8000288 <__aeabi_dsub>
 801dbc6:	4622      	mov	r2, r4
 801dbc8:	462b      	mov	r3, r5
 801dbca:	f7e2 fd15 	bl	80005f8 <__aeabi_dmul>
 801dbce:	a382      	add	r3, pc, #520	; (adr r3, 801ddd8 <__ieee754_asin+0x308>)
 801dbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbd4:	f7e2 fb5a 	bl	800028c <__adddf3>
 801dbd8:	4622      	mov	r2, r4
 801dbda:	462b      	mov	r3, r5
 801dbdc:	f7e2 fd0c 	bl	80005f8 <__aeabi_dmul>
 801dbe0:	a37f      	add	r3, pc, #508	; (adr r3, 801dde0 <__ieee754_asin+0x310>)
 801dbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbe6:	f7e2 fb4f 	bl	8000288 <__aeabi_dsub>
 801dbea:	4622      	mov	r2, r4
 801dbec:	462b      	mov	r3, r5
 801dbee:	f7e2 fd03 	bl	80005f8 <__aeabi_dmul>
 801dbf2:	a37d      	add	r3, pc, #500	; (adr r3, 801dde8 <__ieee754_asin+0x318>)
 801dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbf8:	f7e2 fb48 	bl	800028c <__adddf3>
 801dbfc:	4622      	mov	r2, r4
 801dbfe:	462b      	mov	r3, r5
 801dc00:	f7e2 fcfa 	bl	80005f8 <__aeabi_dmul>
 801dc04:	a37a      	add	r3, pc, #488	; (adr r3, 801ddf0 <__ieee754_asin+0x320>)
 801dc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc0a:	ec41 0b18 	vmov	d8, r0, r1
 801dc0e:	4620      	mov	r0, r4
 801dc10:	4629      	mov	r1, r5
 801dc12:	f7e2 fcf1 	bl	80005f8 <__aeabi_dmul>
 801dc16:	a378      	add	r3, pc, #480	; (adr r3, 801ddf8 <__ieee754_asin+0x328>)
 801dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc1c:	f7e2 fb34 	bl	8000288 <__aeabi_dsub>
 801dc20:	4622      	mov	r2, r4
 801dc22:	462b      	mov	r3, r5
 801dc24:	f7e2 fce8 	bl	80005f8 <__aeabi_dmul>
 801dc28:	a375      	add	r3, pc, #468	; (adr r3, 801de00 <__ieee754_asin+0x330>)
 801dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc2e:	f7e2 fb2d 	bl	800028c <__adddf3>
 801dc32:	4622      	mov	r2, r4
 801dc34:	462b      	mov	r3, r5
 801dc36:	f7e2 fcdf 	bl	80005f8 <__aeabi_dmul>
 801dc3a:	a373      	add	r3, pc, #460	; (adr r3, 801de08 <__ieee754_asin+0x338>)
 801dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc40:	f7e2 fb22 	bl	8000288 <__aeabi_dsub>
 801dc44:	4622      	mov	r2, r4
 801dc46:	462b      	mov	r3, r5
 801dc48:	f7e2 fcd6 	bl	80005f8 <__aeabi_dmul>
 801dc4c:	4b72      	ldr	r3, [pc, #456]	; (801de18 <__ieee754_asin+0x348>)
 801dc4e:	2200      	movs	r2, #0
 801dc50:	f7e2 fb1c 	bl	800028c <__adddf3>
 801dc54:	ec45 4b10 	vmov	d0, r4, r5
 801dc58:	4606      	mov	r6, r0
 801dc5a:	460f      	mov	r7, r1
 801dc5c:	f000 fc24 	bl	801e4a8 <__ieee754_sqrt>
 801dc60:	4b6f      	ldr	r3, [pc, #444]	; (801de20 <__ieee754_asin+0x350>)
 801dc62:	4598      	cmp	r8, r3
 801dc64:	ec5b ab10 	vmov	sl, fp, d0
 801dc68:	f340 80dc 	ble.w	801de24 <__ieee754_asin+0x354>
 801dc6c:	4632      	mov	r2, r6
 801dc6e:	463b      	mov	r3, r7
 801dc70:	ec51 0b18 	vmov	r0, r1, d8
 801dc74:	f7e2 fdea 	bl	800084c <__aeabi_ddiv>
 801dc78:	4652      	mov	r2, sl
 801dc7a:	465b      	mov	r3, fp
 801dc7c:	f7e2 fcbc 	bl	80005f8 <__aeabi_dmul>
 801dc80:	4652      	mov	r2, sl
 801dc82:	465b      	mov	r3, fp
 801dc84:	f7e2 fb02 	bl	800028c <__adddf3>
 801dc88:	4602      	mov	r2, r0
 801dc8a:	460b      	mov	r3, r1
 801dc8c:	f7e2 fafe 	bl	800028c <__adddf3>
 801dc90:	a347      	add	r3, pc, #284	; (adr r3, 801ddb0 <__ieee754_asin+0x2e0>)
 801dc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc96:	f7e2 faf7 	bl	8000288 <__aeabi_dsub>
 801dc9a:	4602      	mov	r2, r0
 801dc9c:	460b      	mov	r3, r1
 801dc9e:	a142      	add	r1, pc, #264	; (adr r1, 801dda8 <__ieee754_asin+0x2d8>)
 801dca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dca4:	f7e2 faf0 	bl	8000288 <__aeabi_dsub>
 801dca8:	9b01      	ldr	r3, [sp, #4]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	bfdc      	itt	le
 801dcae:	4602      	movle	r2, r0
 801dcb0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801dcb4:	4604      	mov	r4, r0
 801dcb6:	460d      	mov	r5, r1
 801dcb8:	bfdc      	itt	le
 801dcba:	4614      	movle	r4, r2
 801dcbc:	461d      	movle	r5, r3
 801dcbe:	e743      	b.n	801db48 <__ieee754_asin+0x78>
 801dcc0:	ee10 2a10 	vmov	r2, s0
 801dcc4:	ee10 0a10 	vmov	r0, s0
 801dcc8:	462b      	mov	r3, r5
 801dcca:	4629      	mov	r1, r5
 801dccc:	f7e2 fc94 	bl	80005f8 <__aeabi_dmul>
 801dcd0:	a33b      	add	r3, pc, #236	; (adr r3, 801ddc0 <__ieee754_asin+0x2f0>)
 801dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcd6:	4606      	mov	r6, r0
 801dcd8:	460f      	mov	r7, r1
 801dcda:	f7e2 fc8d 	bl	80005f8 <__aeabi_dmul>
 801dcde:	a33a      	add	r3, pc, #232	; (adr r3, 801ddc8 <__ieee754_asin+0x2f8>)
 801dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dce4:	f7e2 fad2 	bl	800028c <__adddf3>
 801dce8:	4632      	mov	r2, r6
 801dcea:	463b      	mov	r3, r7
 801dcec:	f7e2 fc84 	bl	80005f8 <__aeabi_dmul>
 801dcf0:	a337      	add	r3, pc, #220	; (adr r3, 801ddd0 <__ieee754_asin+0x300>)
 801dcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcf6:	f7e2 fac7 	bl	8000288 <__aeabi_dsub>
 801dcfa:	4632      	mov	r2, r6
 801dcfc:	463b      	mov	r3, r7
 801dcfe:	f7e2 fc7b 	bl	80005f8 <__aeabi_dmul>
 801dd02:	a335      	add	r3, pc, #212	; (adr r3, 801ddd8 <__ieee754_asin+0x308>)
 801dd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd08:	f7e2 fac0 	bl	800028c <__adddf3>
 801dd0c:	4632      	mov	r2, r6
 801dd0e:	463b      	mov	r3, r7
 801dd10:	f7e2 fc72 	bl	80005f8 <__aeabi_dmul>
 801dd14:	a332      	add	r3, pc, #200	; (adr r3, 801dde0 <__ieee754_asin+0x310>)
 801dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd1a:	f7e2 fab5 	bl	8000288 <__aeabi_dsub>
 801dd1e:	4632      	mov	r2, r6
 801dd20:	463b      	mov	r3, r7
 801dd22:	f7e2 fc69 	bl	80005f8 <__aeabi_dmul>
 801dd26:	a330      	add	r3, pc, #192	; (adr r3, 801dde8 <__ieee754_asin+0x318>)
 801dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd2c:	f7e2 faae 	bl	800028c <__adddf3>
 801dd30:	4632      	mov	r2, r6
 801dd32:	463b      	mov	r3, r7
 801dd34:	f7e2 fc60 	bl	80005f8 <__aeabi_dmul>
 801dd38:	a32d      	add	r3, pc, #180	; (adr r3, 801ddf0 <__ieee754_asin+0x320>)
 801dd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd3e:	4680      	mov	r8, r0
 801dd40:	4689      	mov	r9, r1
 801dd42:	4630      	mov	r0, r6
 801dd44:	4639      	mov	r1, r7
 801dd46:	f7e2 fc57 	bl	80005f8 <__aeabi_dmul>
 801dd4a:	a32b      	add	r3, pc, #172	; (adr r3, 801ddf8 <__ieee754_asin+0x328>)
 801dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd50:	f7e2 fa9a 	bl	8000288 <__aeabi_dsub>
 801dd54:	4632      	mov	r2, r6
 801dd56:	463b      	mov	r3, r7
 801dd58:	f7e2 fc4e 	bl	80005f8 <__aeabi_dmul>
 801dd5c:	a328      	add	r3, pc, #160	; (adr r3, 801de00 <__ieee754_asin+0x330>)
 801dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd62:	f7e2 fa93 	bl	800028c <__adddf3>
 801dd66:	4632      	mov	r2, r6
 801dd68:	463b      	mov	r3, r7
 801dd6a:	f7e2 fc45 	bl	80005f8 <__aeabi_dmul>
 801dd6e:	a326      	add	r3, pc, #152	; (adr r3, 801de08 <__ieee754_asin+0x338>)
 801dd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd74:	f7e2 fa88 	bl	8000288 <__aeabi_dsub>
 801dd78:	4632      	mov	r2, r6
 801dd7a:	463b      	mov	r3, r7
 801dd7c:	f7e2 fc3c 	bl	80005f8 <__aeabi_dmul>
 801dd80:	4b25      	ldr	r3, [pc, #148]	; (801de18 <__ieee754_asin+0x348>)
 801dd82:	2200      	movs	r2, #0
 801dd84:	f7e2 fa82 	bl	800028c <__adddf3>
 801dd88:	4602      	mov	r2, r0
 801dd8a:	460b      	mov	r3, r1
 801dd8c:	4640      	mov	r0, r8
 801dd8e:	4649      	mov	r1, r9
 801dd90:	f7e2 fd5c 	bl	800084c <__aeabi_ddiv>
 801dd94:	4622      	mov	r2, r4
 801dd96:	462b      	mov	r3, r5
 801dd98:	f7e2 fc2e 	bl	80005f8 <__aeabi_dmul>
 801dd9c:	4602      	mov	r2, r0
 801dd9e:	460b      	mov	r3, r1
 801dda0:	4620      	mov	r0, r4
 801dda2:	4629      	mov	r1, r5
 801dda4:	e6bf      	b.n	801db26 <__ieee754_asin+0x56>
 801dda6:	bf00      	nop
 801dda8:	54442d18 	.word	0x54442d18
 801ddac:	3ff921fb 	.word	0x3ff921fb
 801ddb0:	33145c07 	.word	0x33145c07
 801ddb4:	3c91a626 	.word	0x3c91a626
 801ddb8:	8800759c 	.word	0x8800759c
 801ddbc:	7e37e43c 	.word	0x7e37e43c
 801ddc0:	0dfdf709 	.word	0x0dfdf709
 801ddc4:	3f023de1 	.word	0x3f023de1
 801ddc8:	7501b288 	.word	0x7501b288
 801ddcc:	3f49efe0 	.word	0x3f49efe0
 801ddd0:	b5688f3b 	.word	0xb5688f3b
 801ddd4:	3fa48228 	.word	0x3fa48228
 801ddd8:	0e884455 	.word	0x0e884455
 801dddc:	3fc9c155 	.word	0x3fc9c155
 801dde0:	03eb6f7d 	.word	0x03eb6f7d
 801dde4:	3fd4d612 	.word	0x3fd4d612
 801dde8:	55555555 	.word	0x55555555
 801ddec:	3fc55555 	.word	0x3fc55555
 801ddf0:	b12e9282 	.word	0xb12e9282
 801ddf4:	3fb3b8c5 	.word	0x3fb3b8c5
 801ddf8:	1b8d0159 	.word	0x1b8d0159
 801ddfc:	3fe6066c 	.word	0x3fe6066c
 801de00:	9c598ac8 	.word	0x9c598ac8
 801de04:	40002ae5 	.word	0x40002ae5
 801de08:	1c8a2d4b 	.word	0x1c8a2d4b
 801de0c:	40033a27 	.word	0x40033a27
 801de10:	3fefffff 	.word	0x3fefffff
 801de14:	3fdfffff 	.word	0x3fdfffff
 801de18:	3ff00000 	.word	0x3ff00000
 801de1c:	3fe00000 	.word	0x3fe00000
 801de20:	3fef3332 	.word	0x3fef3332
 801de24:	ee10 2a10 	vmov	r2, s0
 801de28:	ee10 0a10 	vmov	r0, s0
 801de2c:	465b      	mov	r3, fp
 801de2e:	4659      	mov	r1, fp
 801de30:	f7e2 fa2c 	bl	800028c <__adddf3>
 801de34:	4632      	mov	r2, r6
 801de36:	463b      	mov	r3, r7
 801de38:	ec41 0b19 	vmov	d9, r0, r1
 801de3c:	ec51 0b18 	vmov	r0, r1, d8
 801de40:	f7e2 fd04 	bl	800084c <__aeabi_ddiv>
 801de44:	4602      	mov	r2, r0
 801de46:	460b      	mov	r3, r1
 801de48:	ec51 0b19 	vmov	r0, r1, d9
 801de4c:	f7e2 fbd4 	bl	80005f8 <__aeabi_dmul>
 801de50:	f04f 0800 	mov.w	r8, #0
 801de54:	4606      	mov	r6, r0
 801de56:	460f      	mov	r7, r1
 801de58:	4642      	mov	r2, r8
 801de5a:	465b      	mov	r3, fp
 801de5c:	4640      	mov	r0, r8
 801de5e:	4659      	mov	r1, fp
 801de60:	f7e2 fbca 	bl	80005f8 <__aeabi_dmul>
 801de64:	4602      	mov	r2, r0
 801de66:	460b      	mov	r3, r1
 801de68:	4620      	mov	r0, r4
 801de6a:	4629      	mov	r1, r5
 801de6c:	f7e2 fa0c 	bl	8000288 <__aeabi_dsub>
 801de70:	4642      	mov	r2, r8
 801de72:	4604      	mov	r4, r0
 801de74:	460d      	mov	r5, r1
 801de76:	465b      	mov	r3, fp
 801de78:	4650      	mov	r0, sl
 801de7a:	4659      	mov	r1, fp
 801de7c:	f7e2 fa06 	bl	800028c <__adddf3>
 801de80:	4602      	mov	r2, r0
 801de82:	460b      	mov	r3, r1
 801de84:	4620      	mov	r0, r4
 801de86:	4629      	mov	r1, r5
 801de88:	f7e2 fce0 	bl	800084c <__aeabi_ddiv>
 801de8c:	4602      	mov	r2, r0
 801de8e:	460b      	mov	r3, r1
 801de90:	f7e2 f9fc 	bl	800028c <__adddf3>
 801de94:	4602      	mov	r2, r0
 801de96:	460b      	mov	r3, r1
 801de98:	a113      	add	r1, pc, #76	; (adr r1, 801dee8 <__ieee754_asin+0x418>)
 801de9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de9e:	f7e2 f9f3 	bl	8000288 <__aeabi_dsub>
 801dea2:	4602      	mov	r2, r0
 801dea4:	460b      	mov	r3, r1
 801dea6:	4630      	mov	r0, r6
 801dea8:	4639      	mov	r1, r7
 801deaa:	f7e2 f9ed 	bl	8000288 <__aeabi_dsub>
 801deae:	4642      	mov	r2, r8
 801deb0:	4604      	mov	r4, r0
 801deb2:	460d      	mov	r5, r1
 801deb4:	465b      	mov	r3, fp
 801deb6:	4640      	mov	r0, r8
 801deb8:	4659      	mov	r1, fp
 801deba:	f7e2 f9e7 	bl	800028c <__adddf3>
 801debe:	4602      	mov	r2, r0
 801dec0:	460b      	mov	r3, r1
 801dec2:	a10b      	add	r1, pc, #44	; (adr r1, 801def0 <__ieee754_asin+0x420>)
 801dec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dec8:	f7e2 f9de 	bl	8000288 <__aeabi_dsub>
 801decc:	4602      	mov	r2, r0
 801dece:	460b      	mov	r3, r1
 801ded0:	4620      	mov	r0, r4
 801ded2:	4629      	mov	r1, r5
 801ded4:	f7e2 f9d8 	bl	8000288 <__aeabi_dsub>
 801ded8:	4602      	mov	r2, r0
 801deda:	460b      	mov	r3, r1
 801dedc:	a104      	add	r1, pc, #16	; (adr r1, 801def0 <__ieee754_asin+0x420>)
 801dede:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dee2:	e6df      	b.n	801dca4 <__ieee754_asin+0x1d4>
 801dee4:	f3af 8000 	nop.w
 801dee8:	33145c07 	.word	0x33145c07
 801deec:	3c91a626 	.word	0x3c91a626
 801def0:	54442d18 	.word	0x54442d18
 801def4:	3fe921fb 	.word	0x3fe921fb

0801def8 <__ieee754_atan2>:
 801def8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801defc:	ec57 6b11 	vmov	r6, r7, d1
 801df00:	4273      	negs	r3, r6
 801df02:	f8df e184 	ldr.w	lr, [pc, #388]	; 801e088 <__ieee754_atan2+0x190>
 801df06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801df0a:	4333      	orrs	r3, r6
 801df0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801df10:	4573      	cmp	r3, lr
 801df12:	ec51 0b10 	vmov	r0, r1, d0
 801df16:	ee11 8a10 	vmov	r8, s2
 801df1a:	d80a      	bhi.n	801df32 <__ieee754_atan2+0x3a>
 801df1c:	4244      	negs	r4, r0
 801df1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801df22:	4304      	orrs	r4, r0
 801df24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801df28:	4574      	cmp	r4, lr
 801df2a:	ee10 9a10 	vmov	r9, s0
 801df2e:	468c      	mov	ip, r1
 801df30:	d907      	bls.n	801df42 <__ieee754_atan2+0x4a>
 801df32:	4632      	mov	r2, r6
 801df34:	463b      	mov	r3, r7
 801df36:	f7e2 f9a9 	bl	800028c <__adddf3>
 801df3a:	ec41 0b10 	vmov	d0, r0, r1
 801df3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801df46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801df4a:	4334      	orrs	r4, r6
 801df4c:	d103      	bne.n	801df56 <__ieee754_atan2+0x5e>
 801df4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df52:	f001 b839 	b.w	801efc8 <atan>
 801df56:	17bc      	asrs	r4, r7, #30
 801df58:	f004 0402 	and.w	r4, r4, #2
 801df5c:	ea53 0909 	orrs.w	r9, r3, r9
 801df60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801df64:	d107      	bne.n	801df76 <__ieee754_atan2+0x7e>
 801df66:	2c02      	cmp	r4, #2
 801df68:	d060      	beq.n	801e02c <__ieee754_atan2+0x134>
 801df6a:	2c03      	cmp	r4, #3
 801df6c:	d1e5      	bne.n	801df3a <__ieee754_atan2+0x42>
 801df6e:	a142      	add	r1, pc, #264	; (adr r1, 801e078 <__ieee754_atan2+0x180>)
 801df70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801df74:	e7e1      	b.n	801df3a <__ieee754_atan2+0x42>
 801df76:	ea52 0808 	orrs.w	r8, r2, r8
 801df7a:	d106      	bne.n	801df8a <__ieee754_atan2+0x92>
 801df7c:	f1bc 0f00 	cmp.w	ip, #0
 801df80:	da5f      	bge.n	801e042 <__ieee754_atan2+0x14a>
 801df82:	a13f      	add	r1, pc, #252	; (adr r1, 801e080 <__ieee754_atan2+0x188>)
 801df84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801df88:	e7d7      	b.n	801df3a <__ieee754_atan2+0x42>
 801df8a:	4572      	cmp	r2, lr
 801df8c:	d10f      	bne.n	801dfae <__ieee754_atan2+0xb6>
 801df8e:	4293      	cmp	r3, r2
 801df90:	f104 34ff 	add.w	r4, r4, #4294967295
 801df94:	d107      	bne.n	801dfa6 <__ieee754_atan2+0xae>
 801df96:	2c02      	cmp	r4, #2
 801df98:	d84c      	bhi.n	801e034 <__ieee754_atan2+0x13c>
 801df9a:	4b35      	ldr	r3, [pc, #212]	; (801e070 <__ieee754_atan2+0x178>)
 801df9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801dfa0:	e9d4 0100 	ldrd	r0, r1, [r4]
 801dfa4:	e7c9      	b.n	801df3a <__ieee754_atan2+0x42>
 801dfa6:	2c02      	cmp	r4, #2
 801dfa8:	d848      	bhi.n	801e03c <__ieee754_atan2+0x144>
 801dfaa:	4b32      	ldr	r3, [pc, #200]	; (801e074 <__ieee754_atan2+0x17c>)
 801dfac:	e7f6      	b.n	801df9c <__ieee754_atan2+0xa4>
 801dfae:	4573      	cmp	r3, lr
 801dfb0:	d0e4      	beq.n	801df7c <__ieee754_atan2+0x84>
 801dfb2:	1a9b      	subs	r3, r3, r2
 801dfb4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801dfb8:	ea4f 5223 	mov.w	r2, r3, asr #20
 801dfbc:	da1e      	bge.n	801dffc <__ieee754_atan2+0x104>
 801dfbe:	2f00      	cmp	r7, #0
 801dfc0:	da01      	bge.n	801dfc6 <__ieee754_atan2+0xce>
 801dfc2:	323c      	adds	r2, #60	; 0x3c
 801dfc4:	db1e      	blt.n	801e004 <__ieee754_atan2+0x10c>
 801dfc6:	4632      	mov	r2, r6
 801dfc8:	463b      	mov	r3, r7
 801dfca:	f7e2 fc3f 	bl	800084c <__aeabi_ddiv>
 801dfce:	ec41 0b10 	vmov	d0, r0, r1
 801dfd2:	f001 f999 	bl	801f308 <fabs>
 801dfd6:	f000 fff7 	bl	801efc8 <atan>
 801dfda:	ec51 0b10 	vmov	r0, r1, d0
 801dfde:	2c01      	cmp	r4, #1
 801dfe0:	d013      	beq.n	801e00a <__ieee754_atan2+0x112>
 801dfe2:	2c02      	cmp	r4, #2
 801dfe4:	d015      	beq.n	801e012 <__ieee754_atan2+0x11a>
 801dfe6:	2c00      	cmp	r4, #0
 801dfe8:	d0a7      	beq.n	801df3a <__ieee754_atan2+0x42>
 801dfea:	a319      	add	r3, pc, #100	; (adr r3, 801e050 <__ieee754_atan2+0x158>)
 801dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dff0:	f7e2 f94a 	bl	8000288 <__aeabi_dsub>
 801dff4:	a318      	add	r3, pc, #96	; (adr r3, 801e058 <__ieee754_atan2+0x160>)
 801dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dffa:	e014      	b.n	801e026 <__ieee754_atan2+0x12e>
 801dffc:	a118      	add	r1, pc, #96	; (adr r1, 801e060 <__ieee754_atan2+0x168>)
 801dffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e002:	e7ec      	b.n	801dfde <__ieee754_atan2+0xe6>
 801e004:	2000      	movs	r0, #0
 801e006:	2100      	movs	r1, #0
 801e008:	e7e9      	b.n	801dfde <__ieee754_atan2+0xe6>
 801e00a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e00e:	4619      	mov	r1, r3
 801e010:	e793      	b.n	801df3a <__ieee754_atan2+0x42>
 801e012:	a30f      	add	r3, pc, #60	; (adr r3, 801e050 <__ieee754_atan2+0x158>)
 801e014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e018:	f7e2 f936 	bl	8000288 <__aeabi_dsub>
 801e01c:	4602      	mov	r2, r0
 801e01e:	460b      	mov	r3, r1
 801e020:	a10d      	add	r1, pc, #52	; (adr r1, 801e058 <__ieee754_atan2+0x160>)
 801e022:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e026:	f7e2 f92f 	bl	8000288 <__aeabi_dsub>
 801e02a:	e786      	b.n	801df3a <__ieee754_atan2+0x42>
 801e02c:	a10a      	add	r1, pc, #40	; (adr r1, 801e058 <__ieee754_atan2+0x160>)
 801e02e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e032:	e782      	b.n	801df3a <__ieee754_atan2+0x42>
 801e034:	a10c      	add	r1, pc, #48	; (adr r1, 801e068 <__ieee754_atan2+0x170>)
 801e036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e03a:	e77e      	b.n	801df3a <__ieee754_atan2+0x42>
 801e03c:	2000      	movs	r0, #0
 801e03e:	2100      	movs	r1, #0
 801e040:	e77b      	b.n	801df3a <__ieee754_atan2+0x42>
 801e042:	a107      	add	r1, pc, #28	; (adr r1, 801e060 <__ieee754_atan2+0x168>)
 801e044:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e048:	e777      	b.n	801df3a <__ieee754_atan2+0x42>
 801e04a:	bf00      	nop
 801e04c:	f3af 8000 	nop.w
 801e050:	33145c07 	.word	0x33145c07
 801e054:	3ca1a626 	.word	0x3ca1a626
 801e058:	54442d18 	.word	0x54442d18
 801e05c:	400921fb 	.word	0x400921fb
 801e060:	54442d18 	.word	0x54442d18
 801e064:	3ff921fb 	.word	0x3ff921fb
 801e068:	54442d18 	.word	0x54442d18
 801e06c:	3fe921fb 	.word	0x3fe921fb
 801e070:	080201c0 	.word	0x080201c0
 801e074:	080201d8 	.word	0x080201d8
 801e078:	54442d18 	.word	0x54442d18
 801e07c:	c00921fb 	.word	0xc00921fb
 801e080:	54442d18 	.word	0x54442d18
 801e084:	bff921fb 	.word	0xbff921fb
 801e088:	7ff00000 	.word	0x7ff00000
 801e08c:	00000000 	.word	0x00000000

0801e090 <__ieee754_rem_pio2>:
 801e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e094:	ed2d 8b02 	vpush	{d8}
 801e098:	ec55 4b10 	vmov	r4, r5, d0
 801e09c:	4bca      	ldr	r3, [pc, #808]	; (801e3c8 <__ieee754_rem_pio2+0x338>)
 801e09e:	b08b      	sub	sp, #44	; 0x2c
 801e0a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801e0a4:	4598      	cmp	r8, r3
 801e0a6:	4682      	mov	sl, r0
 801e0a8:	9502      	str	r5, [sp, #8]
 801e0aa:	dc08      	bgt.n	801e0be <__ieee754_rem_pio2+0x2e>
 801e0ac:	2200      	movs	r2, #0
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	ed80 0b00 	vstr	d0, [r0]
 801e0b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e0b8:	f04f 0b00 	mov.w	fp, #0
 801e0bc:	e028      	b.n	801e110 <__ieee754_rem_pio2+0x80>
 801e0be:	4bc3      	ldr	r3, [pc, #780]	; (801e3cc <__ieee754_rem_pio2+0x33c>)
 801e0c0:	4598      	cmp	r8, r3
 801e0c2:	dc78      	bgt.n	801e1b6 <__ieee754_rem_pio2+0x126>
 801e0c4:	9b02      	ldr	r3, [sp, #8]
 801e0c6:	4ec2      	ldr	r6, [pc, #776]	; (801e3d0 <__ieee754_rem_pio2+0x340>)
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	ee10 0a10 	vmov	r0, s0
 801e0ce:	a3b0      	add	r3, pc, #704	; (adr r3, 801e390 <__ieee754_rem_pio2+0x300>)
 801e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0d4:	4629      	mov	r1, r5
 801e0d6:	dd39      	ble.n	801e14c <__ieee754_rem_pio2+0xbc>
 801e0d8:	f7e2 f8d6 	bl	8000288 <__aeabi_dsub>
 801e0dc:	45b0      	cmp	r8, r6
 801e0de:	4604      	mov	r4, r0
 801e0e0:	460d      	mov	r5, r1
 801e0e2:	d01b      	beq.n	801e11c <__ieee754_rem_pio2+0x8c>
 801e0e4:	a3ac      	add	r3, pc, #688	; (adr r3, 801e398 <__ieee754_rem_pio2+0x308>)
 801e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0ea:	f7e2 f8cd 	bl	8000288 <__aeabi_dsub>
 801e0ee:	4602      	mov	r2, r0
 801e0f0:	460b      	mov	r3, r1
 801e0f2:	e9ca 2300 	strd	r2, r3, [sl]
 801e0f6:	4620      	mov	r0, r4
 801e0f8:	4629      	mov	r1, r5
 801e0fa:	f7e2 f8c5 	bl	8000288 <__aeabi_dsub>
 801e0fe:	a3a6      	add	r3, pc, #664	; (adr r3, 801e398 <__ieee754_rem_pio2+0x308>)
 801e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e104:	f7e2 f8c0 	bl	8000288 <__aeabi_dsub>
 801e108:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e10c:	f04f 0b01 	mov.w	fp, #1
 801e110:	4658      	mov	r0, fp
 801e112:	b00b      	add	sp, #44	; 0x2c
 801e114:	ecbd 8b02 	vpop	{d8}
 801e118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e11c:	a3a0      	add	r3, pc, #640	; (adr r3, 801e3a0 <__ieee754_rem_pio2+0x310>)
 801e11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e122:	f7e2 f8b1 	bl	8000288 <__aeabi_dsub>
 801e126:	a3a0      	add	r3, pc, #640	; (adr r3, 801e3a8 <__ieee754_rem_pio2+0x318>)
 801e128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e12c:	4604      	mov	r4, r0
 801e12e:	460d      	mov	r5, r1
 801e130:	f7e2 f8aa 	bl	8000288 <__aeabi_dsub>
 801e134:	4602      	mov	r2, r0
 801e136:	460b      	mov	r3, r1
 801e138:	e9ca 2300 	strd	r2, r3, [sl]
 801e13c:	4620      	mov	r0, r4
 801e13e:	4629      	mov	r1, r5
 801e140:	f7e2 f8a2 	bl	8000288 <__aeabi_dsub>
 801e144:	a398      	add	r3, pc, #608	; (adr r3, 801e3a8 <__ieee754_rem_pio2+0x318>)
 801e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e14a:	e7db      	b.n	801e104 <__ieee754_rem_pio2+0x74>
 801e14c:	f7e2 f89e 	bl	800028c <__adddf3>
 801e150:	45b0      	cmp	r8, r6
 801e152:	4604      	mov	r4, r0
 801e154:	460d      	mov	r5, r1
 801e156:	d016      	beq.n	801e186 <__ieee754_rem_pio2+0xf6>
 801e158:	a38f      	add	r3, pc, #572	; (adr r3, 801e398 <__ieee754_rem_pio2+0x308>)
 801e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e15e:	f7e2 f895 	bl	800028c <__adddf3>
 801e162:	4602      	mov	r2, r0
 801e164:	460b      	mov	r3, r1
 801e166:	e9ca 2300 	strd	r2, r3, [sl]
 801e16a:	4620      	mov	r0, r4
 801e16c:	4629      	mov	r1, r5
 801e16e:	f7e2 f88b 	bl	8000288 <__aeabi_dsub>
 801e172:	a389      	add	r3, pc, #548	; (adr r3, 801e398 <__ieee754_rem_pio2+0x308>)
 801e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e178:	f7e2 f888 	bl	800028c <__adddf3>
 801e17c:	f04f 3bff 	mov.w	fp, #4294967295
 801e180:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e184:	e7c4      	b.n	801e110 <__ieee754_rem_pio2+0x80>
 801e186:	a386      	add	r3, pc, #536	; (adr r3, 801e3a0 <__ieee754_rem_pio2+0x310>)
 801e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e18c:	f7e2 f87e 	bl	800028c <__adddf3>
 801e190:	a385      	add	r3, pc, #532	; (adr r3, 801e3a8 <__ieee754_rem_pio2+0x318>)
 801e192:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e196:	4604      	mov	r4, r0
 801e198:	460d      	mov	r5, r1
 801e19a:	f7e2 f877 	bl	800028c <__adddf3>
 801e19e:	4602      	mov	r2, r0
 801e1a0:	460b      	mov	r3, r1
 801e1a2:	e9ca 2300 	strd	r2, r3, [sl]
 801e1a6:	4620      	mov	r0, r4
 801e1a8:	4629      	mov	r1, r5
 801e1aa:	f7e2 f86d 	bl	8000288 <__aeabi_dsub>
 801e1ae:	a37e      	add	r3, pc, #504	; (adr r3, 801e3a8 <__ieee754_rem_pio2+0x318>)
 801e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1b4:	e7e0      	b.n	801e178 <__ieee754_rem_pio2+0xe8>
 801e1b6:	4b87      	ldr	r3, [pc, #540]	; (801e3d4 <__ieee754_rem_pio2+0x344>)
 801e1b8:	4598      	cmp	r8, r3
 801e1ba:	f300 80d9 	bgt.w	801e370 <__ieee754_rem_pio2+0x2e0>
 801e1be:	f001 f8a3 	bl	801f308 <fabs>
 801e1c2:	ec55 4b10 	vmov	r4, r5, d0
 801e1c6:	ee10 0a10 	vmov	r0, s0
 801e1ca:	a379      	add	r3, pc, #484	; (adr r3, 801e3b0 <__ieee754_rem_pio2+0x320>)
 801e1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1d0:	4629      	mov	r1, r5
 801e1d2:	f7e2 fa11 	bl	80005f8 <__aeabi_dmul>
 801e1d6:	4b80      	ldr	r3, [pc, #512]	; (801e3d8 <__ieee754_rem_pio2+0x348>)
 801e1d8:	2200      	movs	r2, #0
 801e1da:	f7e2 f857 	bl	800028c <__adddf3>
 801e1de:	f7e2 fcbb 	bl	8000b58 <__aeabi_d2iz>
 801e1e2:	4683      	mov	fp, r0
 801e1e4:	f7e2 f99e 	bl	8000524 <__aeabi_i2d>
 801e1e8:	4602      	mov	r2, r0
 801e1ea:	460b      	mov	r3, r1
 801e1ec:	ec43 2b18 	vmov	d8, r2, r3
 801e1f0:	a367      	add	r3, pc, #412	; (adr r3, 801e390 <__ieee754_rem_pio2+0x300>)
 801e1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1f6:	f7e2 f9ff 	bl	80005f8 <__aeabi_dmul>
 801e1fa:	4602      	mov	r2, r0
 801e1fc:	460b      	mov	r3, r1
 801e1fe:	4620      	mov	r0, r4
 801e200:	4629      	mov	r1, r5
 801e202:	f7e2 f841 	bl	8000288 <__aeabi_dsub>
 801e206:	a364      	add	r3, pc, #400	; (adr r3, 801e398 <__ieee754_rem_pio2+0x308>)
 801e208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e20c:	4606      	mov	r6, r0
 801e20e:	460f      	mov	r7, r1
 801e210:	ec51 0b18 	vmov	r0, r1, d8
 801e214:	f7e2 f9f0 	bl	80005f8 <__aeabi_dmul>
 801e218:	f1bb 0f1f 	cmp.w	fp, #31
 801e21c:	4604      	mov	r4, r0
 801e21e:	460d      	mov	r5, r1
 801e220:	dc0d      	bgt.n	801e23e <__ieee754_rem_pio2+0x1ae>
 801e222:	4b6e      	ldr	r3, [pc, #440]	; (801e3dc <__ieee754_rem_pio2+0x34c>)
 801e224:	f10b 32ff 	add.w	r2, fp, #4294967295
 801e228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e22c:	4543      	cmp	r3, r8
 801e22e:	d006      	beq.n	801e23e <__ieee754_rem_pio2+0x1ae>
 801e230:	4622      	mov	r2, r4
 801e232:	462b      	mov	r3, r5
 801e234:	4630      	mov	r0, r6
 801e236:	4639      	mov	r1, r7
 801e238:	f7e2 f826 	bl	8000288 <__aeabi_dsub>
 801e23c:	e00f      	b.n	801e25e <__ieee754_rem_pio2+0x1ce>
 801e23e:	462b      	mov	r3, r5
 801e240:	4622      	mov	r2, r4
 801e242:	4630      	mov	r0, r6
 801e244:	4639      	mov	r1, r7
 801e246:	f7e2 f81f 	bl	8000288 <__aeabi_dsub>
 801e24a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e24e:	9303      	str	r3, [sp, #12]
 801e250:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e254:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801e258:	f1b8 0f10 	cmp.w	r8, #16
 801e25c:	dc02      	bgt.n	801e264 <__ieee754_rem_pio2+0x1d4>
 801e25e:	e9ca 0100 	strd	r0, r1, [sl]
 801e262:	e039      	b.n	801e2d8 <__ieee754_rem_pio2+0x248>
 801e264:	a34e      	add	r3, pc, #312	; (adr r3, 801e3a0 <__ieee754_rem_pio2+0x310>)
 801e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e26a:	ec51 0b18 	vmov	r0, r1, d8
 801e26e:	f7e2 f9c3 	bl	80005f8 <__aeabi_dmul>
 801e272:	4604      	mov	r4, r0
 801e274:	460d      	mov	r5, r1
 801e276:	4602      	mov	r2, r0
 801e278:	460b      	mov	r3, r1
 801e27a:	4630      	mov	r0, r6
 801e27c:	4639      	mov	r1, r7
 801e27e:	f7e2 f803 	bl	8000288 <__aeabi_dsub>
 801e282:	4602      	mov	r2, r0
 801e284:	460b      	mov	r3, r1
 801e286:	4680      	mov	r8, r0
 801e288:	4689      	mov	r9, r1
 801e28a:	4630      	mov	r0, r6
 801e28c:	4639      	mov	r1, r7
 801e28e:	f7e1 fffb 	bl	8000288 <__aeabi_dsub>
 801e292:	4622      	mov	r2, r4
 801e294:	462b      	mov	r3, r5
 801e296:	f7e1 fff7 	bl	8000288 <__aeabi_dsub>
 801e29a:	a343      	add	r3, pc, #268	; (adr r3, 801e3a8 <__ieee754_rem_pio2+0x318>)
 801e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2a0:	4604      	mov	r4, r0
 801e2a2:	460d      	mov	r5, r1
 801e2a4:	ec51 0b18 	vmov	r0, r1, d8
 801e2a8:	f7e2 f9a6 	bl	80005f8 <__aeabi_dmul>
 801e2ac:	4622      	mov	r2, r4
 801e2ae:	462b      	mov	r3, r5
 801e2b0:	f7e1 ffea 	bl	8000288 <__aeabi_dsub>
 801e2b4:	4602      	mov	r2, r0
 801e2b6:	460b      	mov	r3, r1
 801e2b8:	4604      	mov	r4, r0
 801e2ba:	460d      	mov	r5, r1
 801e2bc:	4640      	mov	r0, r8
 801e2be:	4649      	mov	r1, r9
 801e2c0:	f7e1 ffe2 	bl	8000288 <__aeabi_dsub>
 801e2c4:	9a03      	ldr	r2, [sp, #12]
 801e2c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e2ca:	1ad3      	subs	r3, r2, r3
 801e2cc:	2b31      	cmp	r3, #49	; 0x31
 801e2ce:	dc24      	bgt.n	801e31a <__ieee754_rem_pio2+0x28a>
 801e2d0:	e9ca 0100 	strd	r0, r1, [sl]
 801e2d4:	4646      	mov	r6, r8
 801e2d6:	464f      	mov	r7, r9
 801e2d8:	e9da 8900 	ldrd	r8, r9, [sl]
 801e2dc:	4630      	mov	r0, r6
 801e2de:	4642      	mov	r2, r8
 801e2e0:	464b      	mov	r3, r9
 801e2e2:	4639      	mov	r1, r7
 801e2e4:	f7e1 ffd0 	bl	8000288 <__aeabi_dsub>
 801e2e8:	462b      	mov	r3, r5
 801e2ea:	4622      	mov	r2, r4
 801e2ec:	f7e1 ffcc 	bl	8000288 <__aeabi_dsub>
 801e2f0:	9b02      	ldr	r3, [sp, #8]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e2f8:	f6bf af0a 	bge.w	801e110 <__ieee754_rem_pio2+0x80>
 801e2fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e300:	f8ca 3004 	str.w	r3, [sl, #4]
 801e304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e308:	f8ca 8000 	str.w	r8, [sl]
 801e30c:	f8ca 0008 	str.w	r0, [sl, #8]
 801e310:	f8ca 300c 	str.w	r3, [sl, #12]
 801e314:	f1cb 0b00 	rsb	fp, fp, #0
 801e318:	e6fa      	b.n	801e110 <__ieee754_rem_pio2+0x80>
 801e31a:	a327      	add	r3, pc, #156	; (adr r3, 801e3b8 <__ieee754_rem_pio2+0x328>)
 801e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e320:	ec51 0b18 	vmov	r0, r1, d8
 801e324:	f7e2 f968 	bl	80005f8 <__aeabi_dmul>
 801e328:	4604      	mov	r4, r0
 801e32a:	460d      	mov	r5, r1
 801e32c:	4602      	mov	r2, r0
 801e32e:	460b      	mov	r3, r1
 801e330:	4640      	mov	r0, r8
 801e332:	4649      	mov	r1, r9
 801e334:	f7e1 ffa8 	bl	8000288 <__aeabi_dsub>
 801e338:	4602      	mov	r2, r0
 801e33a:	460b      	mov	r3, r1
 801e33c:	4606      	mov	r6, r0
 801e33e:	460f      	mov	r7, r1
 801e340:	4640      	mov	r0, r8
 801e342:	4649      	mov	r1, r9
 801e344:	f7e1 ffa0 	bl	8000288 <__aeabi_dsub>
 801e348:	4622      	mov	r2, r4
 801e34a:	462b      	mov	r3, r5
 801e34c:	f7e1 ff9c 	bl	8000288 <__aeabi_dsub>
 801e350:	a31b      	add	r3, pc, #108	; (adr r3, 801e3c0 <__ieee754_rem_pio2+0x330>)
 801e352:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e356:	4604      	mov	r4, r0
 801e358:	460d      	mov	r5, r1
 801e35a:	ec51 0b18 	vmov	r0, r1, d8
 801e35e:	f7e2 f94b 	bl	80005f8 <__aeabi_dmul>
 801e362:	4622      	mov	r2, r4
 801e364:	462b      	mov	r3, r5
 801e366:	f7e1 ff8f 	bl	8000288 <__aeabi_dsub>
 801e36a:	4604      	mov	r4, r0
 801e36c:	460d      	mov	r5, r1
 801e36e:	e75f      	b.n	801e230 <__ieee754_rem_pio2+0x1a0>
 801e370:	4b1b      	ldr	r3, [pc, #108]	; (801e3e0 <__ieee754_rem_pio2+0x350>)
 801e372:	4598      	cmp	r8, r3
 801e374:	dd36      	ble.n	801e3e4 <__ieee754_rem_pio2+0x354>
 801e376:	ee10 2a10 	vmov	r2, s0
 801e37a:	462b      	mov	r3, r5
 801e37c:	4620      	mov	r0, r4
 801e37e:	4629      	mov	r1, r5
 801e380:	f7e1 ff82 	bl	8000288 <__aeabi_dsub>
 801e384:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e388:	e9ca 0100 	strd	r0, r1, [sl]
 801e38c:	e694      	b.n	801e0b8 <__ieee754_rem_pio2+0x28>
 801e38e:	bf00      	nop
 801e390:	54400000 	.word	0x54400000
 801e394:	3ff921fb 	.word	0x3ff921fb
 801e398:	1a626331 	.word	0x1a626331
 801e39c:	3dd0b461 	.word	0x3dd0b461
 801e3a0:	1a600000 	.word	0x1a600000
 801e3a4:	3dd0b461 	.word	0x3dd0b461
 801e3a8:	2e037073 	.word	0x2e037073
 801e3ac:	3ba3198a 	.word	0x3ba3198a
 801e3b0:	6dc9c883 	.word	0x6dc9c883
 801e3b4:	3fe45f30 	.word	0x3fe45f30
 801e3b8:	2e000000 	.word	0x2e000000
 801e3bc:	3ba3198a 	.word	0x3ba3198a
 801e3c0:	252049c1 	.word	0x252049c1
 801e3c4:	397b839a 	.word	0x397b839a
 801e3c8:	3fe921fb 	.word	0x3fe921fb
 801e3cc:	4002d97b 	.word	0x4002d97b
 801e3d0:	3ff921fb 	.word	0x3ff921fb
 801e3d4:	413921fb 	.word	0x413921fb
 801e3d8:	3fe00000 	.word	0x3fe00000
 801e3dc:	080201f0 	.word	0x080201f0
 801e3e0:	7fefffff 	.word	0x7fefffff
 801e3e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 801e3e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801e3ec:	ee10 0a10 	vmov	r0, s0
 801e3f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801e3f4:	ee10 6a10 	vmov	r6, s0
 801e3f8:	460f      	mov	r7, r1
 801e3fa:	f7e2 fbad 	bl	8000b58 <__aeabi_d2iz>
 801e3fe:	f7e2 f891 	bl	8000524 <__aeabi_i2d>
 801e402:	4602      	mov	r2, r0
 801e404:	460b      	mov	r3, r1
 801e406:	4630      	mov	r0, r6
 801e408:	4639      	mov	r1, r7
 801e40a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e40e:	f7e1 ff3b 	bl	8000288 <__aeabi_dsub>
 801e412:	4b23      	ldr	r3, [pc, #140]	; (801e4a0 <__ieee754_rem_pio2+0x410>)
 801e414:	2200      	movs	r2, #0
 801e416:	f7e2 f8ef 	bl	80005f8 <__aeabi_dmul>
 801e41a:	460f      	mov	r7, r1
 801e41c:	4606      	mov	r6, r0
 801e41e:	f7e2 fb9b 	bl	8000b58 <__aeabi_d2iz>
 801e422:	f7e2 f87f 	bl	8000524 <__aeabi_i2d>
 801e426:	4602      	mov	r2, r0
 801e428:	460b      	mov	r3, r1
 801e42a:	4630      	mov	r0, r6
 801e42c:	4639      	mov	r1, r7
 801e42e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e432:	f7e1 ff29 	bl	8000288 <__aeabi_dsub>
 801e436:	4b1a      	ldr	r3, [pc, #104]	; (801e4a0 <__ieee754_rem_pio2+0x410>)
 801e438:	2200      	movs	r2, #0
 801e43a:	f7e2 f8dd 	bl	80005f8 <__aeabi_dmul>
 801e43e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801e442:	ad04      	add	r5, sp, #16
 801e444:	f04f 0803 	mov.w	r8, #3
 801e448:	46a9      	mov	r9, r5
 801e44a:	2600      	movs	r6, #0
 801e44c:	2700      	movs	r7, #0
 801e44e:	4632      	mov	r2, r6
 801e450:	463b      	mov	r3, r7
 801e452:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801e456:	46c3      	mov	fp, r8
 801e458:	3d08      	subs	r5, #8
 801e45a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e45e:	f7e2 fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 801e462:	2800      	cmp	r0, #0
 801e464:	d1f3      	bne.n	801e44e <__ieee754_rem_pio2+0x3be>
 801e466:	4b0f      	ldr	r3, [pc, #60]	; (801e4a4 <__ieee754_rem_pio2+0x414>)
 801e468:	9301      	str	r3, [sp, #4]
 801e46a:	2302      	movs	r3, #2
 801e46c:	9300      	str	r3, [sp, #0]
 801e46e:	4622      	mov	r2, r4
 801e470:	465b      	mov	r3, fp
 801e472:	4651      	mov	r1, sl
 801e474:	4648      	mov	r0, r9
 801e476:	f000 f997 	bl	801e7a8 <__kernel_rem_pio2>
 801e47a:	9b02      	ldr	r3, [sp, #8]
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	4683      	mov	fp, r0
 801e480:	f6bf ae46 	bge.w	801e110 <__ieee754_rem_pio2+0x80>
 801e484:	e9da 2100 	ldrd	r2, r1, [sl]
 801e488:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e48c:	e9ca 2300 	strd	r2, r3, [sl]
 801e490:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801e494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e498:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801e49c:	e73a      	b.n	801e314 <__ieee754_rem_pio2+0x284>
 801e49e:	bf00      	nop
 801e4a0:	41700000 	.word	0x41700000
 801e4a4:	08020270 	.word	0x08020270

0801e4a8 <__ieee754_sqrt>:
 801e4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4ac:	ec55 4b10 	vmov	r4, r5, d0
 801e4b0:	4e55      	ldr	r6, [pc, #340]	; (801e608 <__ieee754_sqrt+0x160>)
 801e4b2:	43ae      	bics	r6, r5
 801e4b4:	ee10 0a10 	vmov	r0, s0
 801e4b8:	ee10 3a10 	vmov	r3, s0
 801e4bc:	462a      	mov	r2, r5
 801e4be:	4629      	mov	r1, r5
 801e4c0:	d110      	bne.n	801e4e4 <__ieee754_sqrt+0x3c>
 801e4c2:	ee10 2a10 	vmov	r2, s0
 801e4c6:	462b      	mov	r3, r5
 801e4c8:	f7e2 f896 	bl	80005f8 <__aeabi_dmul>
 801e4cc:	4602      	mov	r2, r0
 801e4ce:	460b      	mov	r3, r1
 801e4d0:	4620      	mov	r0, r4
 801e4d2:	4629      	mov	r1, r5
 801e4d4:	f7e1 feda 	bl	800028c <__adddf3>
 801e4d8:	4604      	mov	r4, r0
 801e4da:	460d      	mov	r5, r1
 801e4dc:	ec45 4b10 	vmov	d0, r4, r5
 801e4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4e4:	2d00      	cmp	r5, #0
 801e4e6:	dc10      	bgt.n	801e50a <__ieee754_sqrt+0x62>
 801e4e8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e4ec:	4330      	orrs	r0, r6
 801e4ee:	d0f5      	beq.n	801e4dc <__ieee754_sqrt+0x34>
 801e4f0:	b15d      	cbz	r5, 801e50a <__ieee754_sqrt+0x62>
 801e4f2:	ee10 2a10 	vmov	r2, s0
 801e4f6:	462b      	mov	r3, r5
 801e4f8:	ee10 0a10 	vmov	r0, s0
 801e4fc:	f7e1 fec4 	bl	8000288 <__aeabi_dsub>
 801e500:	4602      	mov	r2, r0
 801e502:	460b      	mov	r3, r1
 801e504:	f7e2 f9a2 	bl	800084c <__aeabi_ddiv>
 801e508:	e7e6      	b.n	801e4d8 <__ieee754_sqrt+0x30>
 801e50a:	1512      	asrs	r2, r2, #20
 801e50c:	d074      	beq.n	801e5f8 <__ieee754_sqrt+0x150>
 801e50e:	07d4      	lsls	r4, r2, #31
 801e510:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801e514:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801e518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801e51c:	bf5e      	ittt	pl
 801e51e:	0fda      	lsrpl	r2, r3, #31
 801e520:	005b      	lslpl	r3, r3, #1
 801e522:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801e526:	2400      	movs	r4, #0
 801e528:	0fda      	lsrs	r2, r3, #31
 801e52a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801e52e:	107f      	asrs	r7, r7, #1
 801e530:	005b      	lsls	r3, r3, #1
 801e532:	2516      	movs	r5, #22
 801e534:	4620      	mov	r0, r4
 801e536:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801e53a:	1886      	adds	r6, r0, r2
 801e53c:	428e      	cmp	r6, r1
 801e53e:	bfde      	ittt	le
 801e540:	1b89      	suble	r1, r1, r6
 801e542:	18b0      	addle	r0, r6, r2
 801e544:	18a4      	addle	r4, r4, r2
 801e546:	0049      	lsls	r1, r1, #1
 801e548:	3d01      	subs	r5, #1
 801e54a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801e54e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801e552:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e556:	d1f0      	bne.n	801e53a <__ieee754_sqrt+0x92>
 801e558:	462a      	mov	r2, r5
 801e55a:	f04f 0e20 	mov.w	lr, #32
 801e55e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e562:	4281      	cmp	r1, r0
 801e564:	eb06 0c05 	add.w	ip, r6, r5
 801e568:	dc02      	bgt.n	801e570 <__ieee754_sqrt+0xc8>
 801e56a:	d113      	bne.n	801e594 <__ieee754_sqrt+0xec>
 801e56c:	459c      	cmp	ip, r3
 801e56e:	d811      	bhi.n	801e594 <__ieee754_sqrt+0xec>
 801e570:	f1bc 0f00 	cmp.w	ip, #0
 801e574:	eb0c 0506 	add.w	r5, ip, r6
 801e578:	da43      	bge.n	801e602 <__ieee754_sqrt+0x15a>
 801e57a:	2d00      	cmp	r5, #0
 801e57c:	db41      	blt.n	801e602 <__ieee754_sqrt+0x15a>
 801e57e:	f100 0801 	add.w	r8, r0, #1
 801e582:	1a09      	subs	r1, r1, r0
 801e584:	459c      	cmp	ip, r3
 801e586:	bf88      	it	hi
 801e588:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801e58c:	eba3 030c 	sub.w	r3, r3, ip
 801e590:	4432      	add	r2, r6
 801e592:	4640      	mov	r0, r8
 801e594:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801e598:	f1be 0e01 	subs.w	lr, lr, #1
 801e59c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801e5a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e5a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801e5a8:	d1db      	bne.n	801e562 <__ieee754_sqrt+0xba>
 801e5aa:	430b      	orrs	r3, r1
 801e5ac:	d006      	beq.n	801e5bc <__ieee754_sqrt+0x114>
 801e5ae:	1c50      	adds	r0, r2, #1
 801e5b0:	bf13      	iteet	ne
 801e5b2:	3201      	addne	r2, #1
 801e5b4:	3401      	addeq	r4, #1
 801e5b6:	4672      	moveq	r2, lr
 801e5b8:	f022 0201 	bicne.w	r2, r2, #1
 801e5bc:	1063      	asrs	r3, r4, #1
 801e5be:	0852      	lsrs	r2, r2, #1
 801e5c0:	07e1      	lsls	r1, r4, #31
 801e5c2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801e5c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801e5ca:	bf48      	it	mi
 801e5cc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801e5d0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801e5d4:	4614      	mov	r4, r2
 801e5d6:	e781      	b.n	801e4dc <__ieee754_sqrt+0x34>
 801e5d8:	0ad9      	lsrs	r1, r3, #11
 801e5da:	3815      	subs	r0, #21
 801e5dc:	055b      	lsls	r3, r3, #21
 801e5de:	2900      	cmp	r1, #0
 801e5e0:	d0fa      	beq.n	801e5d8 <__ieee754_sqrt+0x130>
 801e5e2:	02cd      	lsls	r5, r1, #11
 801e5e4:	d50a      	bpl.n	801e5fc <__ieee754_sqrt+0x154>
 801e5e6:	f1c2 0420 	rsb	r4, r2, #32
 801e5ea:	fa23 f404 	lsr.w	r4, r3, r4
 801e5ee:	1e55      	subs	r5, r2, #1
 801e5f0:	4093      	lsls	r3, r2
 801e5f2:	4321      	orrs	r1, r4
 801e5f4:	1b42      	subs	r2, r0, r5
 801e5f6:	e78a      	b.n	801e50e <__ieee754_sqrt+0x66>
 801e5f8:	4610      	mov	r0, r2
 801e5fa:	e7f0      	b.n	801e5de <__ieee754_sqrt+0x136>
 801e5fc:	0049      	lsls	r1, r1, #1
 801e5fe:	3201      	adds	r2, #1
 801e600:	e7ef      	b.n	801e5e2 <__ieee754_sqrt+0x13a>
 801e602:	4680      	mov	r8, r0
 801e604:	e7bd      	b.n	801e582 <__ieee754_sqrt+0xda>
 801e606:	bf00      	nop
 801e608:	7ff00000 	.word	0x7ff00000

0801e60c <__ieee754_sqrtf>:
 801e60c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e610:	4770      	bx	lr
 801e612:	0000      	movs	r0, r0
 801e614:	0000      	movs	r0, r0
	...

0801e618 <__kernel_cos>:
 801e618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e61c:	ec57 6b10 	vmov	r6, r7, d0
 801e620:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801e624:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801e628:	ed8d 1b00 	vstr	d1, [sp]
 801e62c:	da07      	bge.n	801e63e <__kernel_cos+0x26>
 801e62e:	ee10 0a10 	vmov	r0, s0
 801e632:	4639      	mov	r1, r7
 801e634:	f7e2 fa90 	bl	8000b58 <__aeabi_d2iz>
 801e638:	2800      	cmp	r0, #0
 801e63a:	f000 8088 	beq.w	801e74e <__kernel_cos+0x136>
 801e63e:	4632      	mov	r2, r6
 801e640:	463b      	mov	r3, r7
 801e642:	4630      	mov	r0, r6
 801e644:	4639      	mov	r1, r7
 801e646:	f7e1 ffd7 	bl	80005f8 <__aeabi_dmul>
 801e64a:	4b51      	ldr	r3, [pc, #324]	; (801e790 <__kernel_cos+0x178>)
 801e64c:	2200      	movs	r2, #0
 801e64e:	4604      	mov	r4, r0
 801e650:	460d      	mov	r5, r1
 801e652:	f7e1 ffd1 	bl	80005f8 <__aeabi_dmul>
 801e656:	a340      	add	r3, pc, #256	; (adr r3, 801e758 <__kernel_cos+0x140>)
 801e658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e65c:	4682      	mov	sl, r0
 801e65e:	468b      	mov	fp, r1
 801e660:	4620      	mov	r0, r4
 801e662:	4629      	mov	r1, r5
 801e664:	f7e1 ffc8 	bl	80005f8 <__aeabi_dmul>
 801e668:	a33d      	add	r3, pc, #244	; (adr r3, 801e760 <__kernel_cos+0x148>)
 801e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e66e:	f7e1 fe0d 	bl	800028c <__adddf3>
 801e672:	4622      	mov	r2, r4
 801e674:	462b      	mov	r3, r5
 801e676:	f7e1 ffbf 	bl	80005f8 <__aeabi_dmul>
 801e67a:	a33b      	add	r3, pc, #236	; (adr r3, 801e768 <__kernel_cos+0x150>)
 801e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e680:	f7e1 fe02 	bl	8000288 <__aeabi_dsub>
 801e684:	4622      	mov	r2, r4
 801e686:	462b      	mov	r3, r5
 801e688:	f7e1 ffb6 	bl	80005f8 <__aeabi_dmul>
 801e68c:	a338      	add	r3, pc, #224	; (adr r3, 801e770 <__kernel_cos+0x158>)
 801e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e692:	f7e1 fdfb 	bl	800028c <__adddf3>
 801e696:	4622      	mov	r2, r4
 801e698:	462b      	mov	r3, r5
 801e69a:	f7e1 ffad 	bl	80005f8 <__aeabi_dmul>
 801e69e:	a336      	add	r3, pc, #216	; (adr r3, 801e778 <__kernel_cos+0x160>)
 801e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a4:	f7e1 fdf0 	bl	8000288 <__aeabi_dsub>
 801e6a8:	4622      	mov	r2, r4
 801e6aa:	462b      	mov	r3, r5
 801e6ac:	f7e1 ffa4 	bl	80005f8 <__aeabi_dmul>
 801e6b0:	a333      	add	r3, pc, #204	; (adr r3, 801e780 <__kernel_cos+0x168>)
 801e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6b6:	f7e1 fde9 	bl	800028c <__adddf3>
 801e6ba:	4622      	mov	r2, r4
 801e6bc:	462b      	mov	r3, r5
 801e6be:	f7e1 ff9b 	bl	80005f8 <__aeabi_dmul>
 801e6c2:	4622      	mov	r2, r4
 801e6c4:	462b      	mov	r3, r5
 801e6c6:	f7e1 ff97 	bl	80005f8 <__aeabi_dmul>
 801e6ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e6ce:	4604      	mov	r4, r0
 801e6d0:	460d      	mov	r5, r1
 801e6d2:	4630      	mov	r0, r6
 801e6d4:	4639      	mov	r1, r7
 801e6d6:	f7e1 ff8f 	bl	80005f8 <__aeabi_dmul>
 801e6da:	460b      	mov	r3, r1
 801e6dc:	4602      	mov	r2, r0
 801e6de:	4629      	mov	r1, r5
 801e6e0:	4620      	mov	r0, r4
 801e6e2:	f7e1 fdd1 	bl	8000288 <__aeabi_dsub>
 801e6e6:	4b2b      	ldr	r3, [pc, #172]	; (801e794 <__kernel_cos+0x17c>)
 801e6e8:	4598      	cmp	r8, r3
 801e6ea:	4606      	mov	r6, r0
 801e6ec:	460f      	mov	r7, r1
 801e6ee:	dc10      	bgt.n	801e712 <__kernel_cos+0xfa>
 801e6f0:	4602      	mov	r2, r0
 801e6f2:	460b      	mov	r3, r1
 801e6f4:	4650      	mov	r0, sl
 801e6f6:	4659      	mov	r1, fp
 801e6f8:	f7e1 fdc6 	bl	8000288 <__aeabi_dsub>
 801e6fc:	460b      	mov	r3, r1
 801e6fe:	4926      	ldr	r1, [pc, #152]	; (801e798 <__kernel_cos+0x180>)
 801e700:	4602      	mov	r2, r0
 801e702:	2000      	movs	r0, #0
 801e704:	f7e1 fdc0 	bl	8000288 <__aeabi_dsub>
 801e708:	ec41 0b10 	vmov	d0, r0, r1
 801e70c:	b003      	add	sp, #12
 801e70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e712:	4b22      	ldr	r3, [pc, #136]	; (801e79c <__kernel_cos+0x184>)
 801e714:	4920      	ldr	r1, [pc, #128]	; (801e798 <__kernel_cos+0x180>)
 801e716:	4598      	cmp	r8, r3
 801e718:	bfcc      	ite	gt
 801e71a:	4d21      	ldrgt	r5, [pc, #132]	; (801e7a0 <__kernel_cos+0x188>)
 801e71c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801e720:	2400      	movs	r4, #0
 801e722:	4622      	mov	r2, r4
 801e724:	462b      	mov	r3, r5
 801e726:	2000      	movs	r0, #0
 801e728:	f7e1 fdae 	bl	8000288 <__aeabi_dsub>
 801e72c:	4622      	mov	r2, r4
 801e72e:	4680      	mov	r8, r0
 801e730:	4689      	mov	r9, r1
 801e732:	462b      	mov	r3, r5
 801e734:	4650      	mov	r0, sl
 801e736:	4659      	mov	r1, fp
 801e738:	f7e1 fda6 	bl	8000288 <__aeabi_dsub>
 801e73c:	4632      	mov	r2, r6
 801e73e:	463b      	mov	r3, r7
 801e740:	f7e1 fda2 	bl	8000288 <__aeabi_dsub>
 801e744:	4602      	mov	r2, r0
 801e746:	460b      	mov	r3, r1
 801e748:	4640      	mov	r0, r8
 801e74a:	4649      	mov	r1, r9
 801e74c:	e7da      	b.n	801e704 <__kernel_cos+0xec>
 801e74e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801e788 <__kernel_cos+0x170>
 801e752:	e7db      	b.n	801e70c <__kernel_cos+0xf4>
 801e754:	f3af 8000 	nop.w
 801e758:	be8838d4 	.word	0xbe8838d4
 801e75c:	bda8fae9 	.word	0xbda8fae9
 801e760:	bdb4b1c4 	.word	0xbdb4b1c4
 801e764:	3e21ee9e 	.word	0x3e21ee9e
 801e768:	809c52ad 	.word	0x809c52ad
 801e76c:	3e927e4f 	.word	0x3e927e4f
 801e770:	19cb1590 	.word	0x19cb1590
 801e774:	3efa01a0 	.word	0x3efa01a0
 801e778:	16c15177 	.word	0x16c15177
 801e77c:	3f56c16c 	.word	0x3f56c16c
 801e780:	5555554c 	.word	0x5555554c
 801e784:	3fa55555 	.word	0x3fa55555
 801e788:	00000000 	.word	0x00000000
 801e78c:	3ff00000 	.word	0x3ff00000
 801e790:	3fe00000 	.word	0x3fe00000
 801e794:	3fd33332 	.word	0x3fd33332
 801e798:	3ff00000 	.word	0x3ff00000
 801e79c:	3fe90000 	.word	0x3fe90000
 801e7a0:	3fd20000 	.word	0x3fd20000
 801e7a4:	00000000 	.word	0x00000000

0801e7a8 <__kernel_rem_pio2>:
 801e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7ac:	ed2d 8b02 	vpush	{d8}
 801e7b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801e7b4:	f112 0f14 	cmn.w	r2, #20
 801e7b8:	9308      	str	r3, [sp, #32]
 801e7ba:	9101      	str	r1, [sp, #4]
 801e7bc:	4bc4      	ldr	r3, [pc, #784]	; (801ead0 <__kernel_rem_pio2+0x328>)
 801e7be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801e7c0:	900b      	str	r0, [sp, #44]	; 0x2c
 801e7c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e7c6:	9302      	str	r3, [sp, #8]
 801e7c8:	9b08      	ldr	r3, [sp, #32]
 801e7ca:	f103 33ff 	add.w	r3, r3, #4294967295
 801e7ce:	bfa8      	it	ge
 801e7d0:	1ed4      	subge	r4, r2, #3
 801e7d2:	9306      	str	r3, [sp, #24]
 801e7d4:	bfb2      	itee	lt
 801e7d6:	2400      	movlt	r4, #0
 801e7d8:	2318      	movge	r3, #24
 801e7da:	fb94 f4f3 	sdivge	r4, r4, r3
 801e7de:	f06f 0317 	mvn.w	r3, #23
 801e7e2:	fb04 3303 	mla	r3, r4, r3, r3
 801e7e6:	eb03 0a02 	add.w	sl, r3, r2
 801e7ea:	9b02      	ldr	r3, [sp, #8]
 801e7ec:	9a06      	ldr	r2, [sp, #24]
 801e7ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801eac0 <__kernel_rem_pio2+0x318>
 801e7f2:	eb03 0802 	add.w	r8, r3, r2
 801e7f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801e7f8:	1aa7      	subs	r7, r4, r2
 801e7fa:	ae22      	add	r6, sp, #136	; 0x88
 801e7fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801e800:	2500      	movs	r5, #0
 801e802:	4545      	cmp	r5, r8
 801e804:	dd13      	ble.n	801e82e <__kernel_rem_pio2+0x86>
 801e806:	9b08      	ldr	r3, [sp, #32]
 801e808:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801eac0 <__kernel_rem_pio2+0x318>
 801e80c:	aa22      	add	r2, sp, #136	; 0x88
 801e80e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801e812:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801e816:	f04f 0800 	mov.w	r8, #0
 801e81a:	9b02      	ldr	r3, [sp, #8]
 801e81c:	4598      	cmp	r8, r3
 801e81e:	dc2f      	bgt.n	801e880 <__kernel_rem_pio2+0xd8>
 801e820:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e824:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801e828:	462f      	mov	r7, r5
 801e82a:	2600      	movs	r6, #0
 801e82c:	e01b      	b.n	801e866 <__kernel_rem_pio2+0xbe>
 801e82e:	42ef      	cmn	r7, r5
 801e830:	d407      	bmi.n	801e842 <__kernel_rem_pio2+0x9a>
 801e832:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801e836:	f7e1 fe75 	bl	8000524 <__aeabi_i2d>
 801e83a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801e83e:	3501      	adds	r5, #1
 801e840:	e7df      	b.n	801e802 <__kernel_rem_pio2+0x5a>
 801e842:	ec51 0b18 	vmov	r0, r1, d8
 801e846:	e7f8      	b.n	801e83a <__kernel_rem_pio2+0x92>
 801e848:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e84c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801e850:	f7e1 fed2 	bl	80005f8 <__aeabi_dmul>
 801e854:	4602      	mov	r2, r0
 801e856:	460b      	mov	r3, r1
 801e858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e85c:	f7e1 fd16 	bl	800028c <__adddf3>
 801e860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e864:	3601      	adds	r6, #1
 801e866:	9b06      	ldr	r3, [sp, #24]
 801e868:	429e      	cmp	r6, r3
 801e86a:	f1a7 0708 	sub.w	r7, r7, #8
 801e86e:	ddeb      	ble.n	801e848 <__kernel_rem_pio2+0xa0>
 801e870:	ed9d 7b04 	vldr	d7, [sp, #16]
 801e874:	f108 0801 	add.w	r8, r8, #1
 801e878:	ecab 7b02 	vstmia	fp!, {d7}
 801e87c:	3508      	adds	r5, #8
 801e87e:	e7cc      	b.n	801e81a <__kernel_rem_pio2+0x72>
 801e880:	9b02      	ldr	r3, [sp, #8]
 801e882:	aa0e      	add	r2, sp, #56	; 0x38
 801e884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e888:	930d      	str	r3, [sp, #52]	; 0x34
 801e88a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801e88c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801e890:	9c02      	ldr	r4, [sp, #8]
 801e892:	930c      	str	r3, [sp, #48]	; 0x30
 801e894:	00e3      	lsls	r3, r4, #3
 801e896:	930a      	str	r3, [sp, #40]	; 0x28
 801e898:	ab9a      	add	r3, sp, #616	; 0x268
 801e89a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e89e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801e8a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801e8a6:	ab72      	add	r3, sp, #456	; 0x1c8
 801e8a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801e8ac:	46c3      	mov	fp, r8
 801e8ae:	46a1      	mov	r9, r4
 801e8b0:	f1b9 0f00 	cmp.w	r9, #0
 801e8b4:	f1a5 0508 	sub.w	r5, r5, #8
 801e8b8:	dc77      	bgt.n	801e9aa <__kernel_rem_pio2+0x202>
 801e8ba:	ec47 6b10 	vmov	d0, r6, r7
 801e8be:	4650      	mov	r0, sl
 801e8c0:	f000 fdae 	bl	801f420 <scalbn>
 801e8c4:	ec57 6b10 	vmov	r6, r7, d0
 801e8c8:	2200      	movs	r2, #0
 801e8ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801e8ce:	ee10 0a10 	vmov	r0, s0
 801e8d2:	4639      	mov	r1, r7
 801e8d4:	f7e1 fe90 	bl	80005f8 <__aeabi_dmul>
 801e8d8:	ec41 0b10 	vmov	d0, r0, r1
 801e8dc:	f000 fd20 	bl	801f320 <floor>
 801e8e0:	4b7c      	ldr	r3, [pc, #496]	; (801ead4 <__kernel_rem_pio2+0x32c>)
 801e8e2:	ec51 0b10 	vmov	r0, r1, d0
 801e8e6:	2200      	movs	r2, #0
 801e8e8:	f7e1 fe86 	bl	80005f8 <__aeabi_dmul>
 801e8ec:	4602      	mov	r2, r0
 801e8ee:	460b      	mov	r3, r1
 801e8f0:	4630      	mov	r0, r6
 801e8f2:	4639      	mov	r1, r7
 801e8f4:	f7e1 fcc8 	bl	8000288 <__aeabi_dsub>
 801e8f8:	460f      	mov	r7, r1
 801e8fa:	4606      	mov	r6, r0
 801e8fc:	f7e2 f92c 	bl	8000b58 <__aeabi_d2iz>
 801e900:	9004      	str	r0, [sp, #16]
 801e902:	f7e1 fe0f 	bl	8000524 <__aeabi_i2d>
 801e906:	4602      	mov	r2, r0
 801e908:	460b      	mov	r3, r1
 801e90a:	4630      	mov	r0, r6
 801e90c:	4639      	mov	r1, r7
 801e90e:	f7e1 fcbb 	bl	8000288 <__aeabi_dsub>
 801e912:	f1ba 0f00 	cmp.w	sl, #0
 801e916:	4606      	mov	r6, r0
 801e918:	460f      	mov	r7, r1
 801e91a:	dd6d      	ble.n	801e9f8 <__kernel_rem_pio2+0x250>
 801e91c:	1e62      	subs	r2, r4, #1
 801e91e:	ab0e      	add	r3, sp, #56	; 0x38
 801e920:	9d04      	ldr	r5, [sp, #16]
 801e922:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e926:	f1ca 0118 	rsb	r1, sl, #24
 801e92a:	fa40 f301 	asr.w	r3, r0, r1
 801e92e:	441d      	add	r5, r3
 801e930:	408b      	lsls	r3, r1
 801e932:	1ac0      	subs	r0, r0, r3
 801e934:	ab0e      	add	r3, sp, #56	; 0x38
 801e936:	9504      	str	r5, [sp, #16]
 801e938:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801e93c:	f1ca 0317 	rsb	r3, sl, #23
 801e940:	fa40 fb03 	asr.w	fp, r0, r3
 801e944:	f1bb 0f00 	cmp.w	fp, #0
 801e948:	dd65      	ble.n	801ea16 <__kernel_rem_pio2+0x26e>
 801e94a:	9b04      	ldr	r3, [sp, #16]
 801e94c:	2200      	movs	r2, #0
 801e94e:	3301      	adds	r3, #1
 801e950:	9304      	str	r3, [sp, #16]
 801e952:	4615      	mov	r5, r2
 801e954:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801e958:	4294      	cmp	r4, r2
 801e95a:	f300 809c 	bgt.w	801ea96 <__kernel_rem_pio2+0x2ee>
 801e95e:	f1ba 0f00 	cmp.w	sl, #0
 801e962:	dd07      	ble.n	801e974 <__kernel_rem_pio2+0x1cc>
 801e964:	f1ba 0f01 	cmp.w	sl, #1
 801e968:	f000 80c0 	beq.w	801eaec <__kernel_rem_pio2+0x344>
 801e96c:	f1ba 0f02 	cmp.w	sl, #2
 801e970:	f000 80c6 	beq.w	801eb00 <__kernel_rem_pio2+0x358>
 801e974:	f1bb 0f02 	cmp.w	fp, #2
 801e978:	d14d      	bne.n	801ea16 <__kernel_rem_pio2+0x26e>
 801e97a:	4632      	mov	r2, r6
 801e97c:	463b      	mov	r3, r7
 801e97e:	4956      	ldr	r1, [pc, #344]	; (801ead8 <__kernel_rem_pio2+0x330>)
 801e980:	2000      	movs	r0, #0
 801e982:	f7e1 fc81 	bl	8000288 <__aeabi_dsub>
 801e986:	4606      	mov	r6, r0
 801e988:	460f      	mov	r7, r1
 801e98a:	2d00      	cmp	r5, #0
 801e98c:	d043      	beq.n	801ea16 <__kernel_rem_pio2+0x26e>
 801e98e:	4650      	mov	r0, sl
 801e990:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801eac8 <__kernel_rem_pio2+0x320>
 801e994:	f000 fd44 	bl	801f420 <scalbn>
 801e998:	4630      	mov	r0, r6
 801e99a:	4639      	mov	r1, r7
 801e99c:	ec53 2b10 	vmov	r2, r3, d0
 801e9a0:	f7e1 fc72 	bl	8000288 <__aeabi_dsub>
 801e9a4:	4606      	mov	r6, r0
 801e9a6:	460f      	mov	r7, r1
 801e9a8:	e035      	b.n	801ea16 <__kernel_rem_pio2+0x26e>
 801e9aa:	4b4c      	ldr	r3, [pc, #304]	; (801eadc <__kernel_rem_pio2+0x334>)
 801e9ac:	2200      	movs	r2, #0
 801e9ae:	4630      	mov	r0, r6
 801e9b0:	4639      	mov	r1, r7
 801e9b2:	f7e1 fe21 	bl	80005f8 <__aeabi_dmul>
 801e9b6:	f7e2 f8cf 	bl	8000b58 <__aeabi_d2iz>
 801e9ba:	f7e1 fdb3 	bl	8000524 <__aeabi_i2d>
 801e9be:	4602      	mov	r2, r0
 801e9c0:	460b      	mov	r3, r1
 801e9c2:	ec43 2b18 	vmov	d8, r2, r3
 801e9c6:	4b46      	ldr	r3, [pc, #280]	; (801eae0 <__kernel_rem_pio2+0x338>)
 801e9c8:	2200      	movs	r2, #0
 801e9ca:	f7e1 fe15 	bl	80005f8 <__aeabi_dmul>
 801e9ce:	4602      	mov	r2, r0
 801e9d0:	460b      	mov	r3, r1
 801e9d2:	4630      	mov	r0, r6
 801e9d4:	4639      	mov	r1, r7
 801e9d6:	f7e1 fc57 	bl	8000288 <__aeabi_dsub>
 801e9da:	f7e2 f8bd 	bl	8000b58 <__aeabi_d2iz>
 801e9de:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e9e2:	f84b 0b04 	str.w	r0, [fp], #4
 801e9e6:	ec51 0b18 	vmov	r0, r1, d8
 801e9ea:	f7e1 fc4f 	bl	800028c <__adddf3>
 801e9ee:	f109 39ff 	add.w	r9, r9, #4294967295
 801e9f2:	4606      	mov	r6, r0
 801e9f4:	460f      	mov	r7, r1
 801e9f6:	e75b      	b.n	801e8b0 <__kernel_rem_pio2+0x108>
 801e9f8:	d106      	bne.n	801ea08 <__kernel_rem_pio2+0x260>
 801e9fa:	1e63      	subs	r3, r4, #1
 801e9fc:	aa0e      	add	r2, sp, #56	; 0x38
 801e9fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ea02:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801ea06:	e79d      	b.n	801e944 <__kernel_rem_pio2+0x19c>
 801ea08:	4b36      	ldr	r3, [pc, #216]	; (801eae4 <__kernel_rem_pio2+0x33c>)
 801ea0a:	2200      	movs	r2, #0
 801ea0c:	f7e2 f87a 	bl	8000b04 <__aeabi_dcmpge>
 801ea10:	2800      	cmp	r0, #0
 801ea12:	d13d      	bne.n	801ea90 <__kernel_rem_pio2+0x2e8>
 801ea14:	4683      	mov	fp, r0
 801ea16:	2200      	movs	r2, #0
 801ea18:	2300      	movs	r3, #0
 801ea1a:	4630      	mov	r0, r6
 801ea1c:	4639      	mov	r1, r7
 801ea1e:	f7e2 f853 	bl	8000ac8 <__aeabi_dcmpeq>
 801ea22:	2800      	cmp	r0, #0
 801ea24:	f000 80c0 	beq.w	801eba8 <__kernel_rem_pio2+0x400>
 801ea28:	1e65      	subs	r5, r4, #1
 801ea2a:	462b      	mov	r3, r5
 801ea2c:	2200      	movs	r2, #0
 801ea2e:	9902      	ldr	r1, [sp, #8]
 801ea30:	428b      	cmp	r3, r1
 801ea32:	da6c      	bge.n	801eb0e <__kernel_rem_pio2+0x366>
 801ea34:	2a00      	cmp	r2, #0
 801ea36:	f000 8089 	beq.w	801eb4c <__kernel_rem_pio2+0x3a4>
 801ea3a:	ab0e      	add	r3, sp, #56	; 0x38
 801ea3c:	f1aa 0a18 	sub.w	sl, sl, #24
 801ea40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	f000 80ad 	beq.w	801eba4 <__kernel_rem_pio2+0x3fc>
 801ea4a:	4650      	mov	r0, sl
 801ea4c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801eac8 <__kernel_rem_pio2+0x320>
 801ea50:	f000 fce6 	bl	801f420 <scalbn>
 801ea54:	ab9a      	add	r3, sp, #616	; 0x268
 801ea56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ea5a:	ec57 6b10 	vmov	r6, r7, d0
 801ea5e:	00ec      	lsls	r4, r5, #3
 801ea60:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801ea64:	46aa      	mov	sl, r5
 801ea66:	f1ba 0f00 	cmp.w	sl, #0
 801ea6a:	f280 80d6 	bge.w	801ec1a <__kernel_rem_pio2+0x472>
 801ea6e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801eac0 <__kernel_rem_pio2+0x318>
 801ea72:	462e      	mov	r6, r5
 801ea74:	2e00      	cmp	r6, #0
 801ea76:	f2c0 8104 	blt.w	801ec82 <__kernel_rem_pio2+0x4da>
 801ea7a:	ab72      	add	r3, sp, #456	; 0x1c8
 801ea7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 801ea80:	f8df a064 	ldr.w	sl, [pc, #100]	; 801eae8 <__kernel_rem_pio2+0x340>
 801ea84:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801ea88:	f04f 0800 	mov.w	r8, #0
 801ea8c:	1baf      	subs	r7, r5, r6
 801ea8e:	e0ea      	b.n	801ec66 <__kernel_rem_pio2+0x4be>
 801ea90:	f04f 0b02 	mov.w	fp, #2
 801ea94:	e759      	b.n	801e94a <__kernel_rem_pio2+0x1a2>
 801ea96:	f8d8 3000 	ldr.w	r3, [r8]
 801ea9a:	b955      	cbnz	r5, 801eab2 <__kernel_rem_pio2+0x30a>
 801ea9c:	b123      	cbz	r3, 801eaa8 <__kernel_rem_pio2+0x300>
 801ea9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801eaa2:	f8c8 3000 	str.w	r3, [r8]
 801eaa6:	2301      	movs	r3, #1
 801eaa8:	3201      	adds	r2, #1
 801eaaa:	f108 0804 	add.w	r8, r8, #4
 801eaae:	461d      	mov	r5, r3
 801eab0:	e752      	b.n	801e958 <__kernel_rem_pio2+0x1b0>
 801eab2:	1acb      	subs	r3, r1, r3
 801eab4:	f8c8 3000 	str.w	r3, [r8]
 801eab8:	462b      	mov	r3, r5
 801eaba:	e7f5      	b.n	801eaa8 <__kernel_rem_pio2+0x300>
 801eabc:	f3af 8000 	nop.w
	...
 801eacc:	3ff00000 	.word	0x3ff00000
 801ead0:	080203b8 	.word	0x080203b8
 801ead4:	40200000 	.word	0x40200000
 801ead8:	3ff00000 	.word	0x3ff00000
 801eadc:	3e700000 	.word	0x3e700000
 801eae0:	41700000 	.word	0x41700000
 801eae4:	3fe00000 	.word	0x3fe00000
 801eae8:	08020378 	.word	0x08020378
 801eaec:	1e62      	subs	r2, r4, #1
 801eaee:	ab0e      	add	r3, sp, #56	; 0x38
 801eaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eaf4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801eaf8:	a90e      	add	r1, sp, #56	; 0x38
 801eafa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801eafe:	e739      	b.n	801e974 <__kernel_rem_pio2+0x1cc>
 801eb00:	1e62      	subs	r2, r4, #1
 801eb02:	ab0e      	add	r3, sp, #56	; 0x38
 801eb04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eb08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801eb0c:	e7f4      	b.n	801eaf8 <__kernel_rem_pio2+0x350>
 801eb0e:	a90e      	add	r1, sp, #56	; 0x38
 801eb10:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801eb14:	3b01      	subs	r3, #1
 801eb16:	430a      	orrs	r2, r1
 801eb18:	e789      	b.n	801ea2e <__kernel_rem_pio2+0x286>
 801eb1a:	3301      	adds	r3, #1
 801eb1c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801eb20:	2900      	cmp	r1, #0
 801eb22:	d0fa      	beq.n	801eb1a <__kernel_rem_pio2+0x372>
 801eb24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb26:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801eb2a:	446a      	add	r2, sp
 801eb2c:	3a98      	subs	r2, #152	; 0x98
 801eb2e:	920a      	str	r2, [sp, #40]	; 0x28
 801eb30:	9a08      	ldr	r2, [sp, #32]
 801eb32:	18e3      	adds	r3, r4, r3
 801eb34:	18a5      	adds	r5, r4, r2
 801eb36:	aa22      	add	r2, sp, #136	; 0x88
 801eb38:	f104 0801 	add.w	r8, r4, #1
 801eb3c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801eb40:	9304      	str	r3, [sp, #16]
 801eb42:	9b04      	ldr	r3, [sp, #16]
 801eb44:	4543      	cmp	r3, r8
 801eb46:	da04      	bge.n	801eb52 <__kernel_rem_pio2+0x3aa>
 801eb48:	461c      	mov	r4, r3
 801eb4a:	e6a3      	b.n	801e894 <__kernel_rem_pio2+0xec>
 801eb4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb4e:	2301      	movs	r3, #1
 801eb50:	e7e4      	b.n	801eb1c <__kernel_rem_pio2+0x374>
 801eb52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb54:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801eb58:	f7e1 fce4 	bl	8000524 <__aeabi_i2d>
 801eb5c:	e8e5 0102 	strd	r0, r1, [r5], #8
 801eb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb62:	46ab      	mov	fp, r5
 801eb64:	461c      	mov	r4, r3
 801eb66:	f04f 0900 	mov.w	r9, #0
 801eb6a:	2600      	movs	r6, #0
 801eb6c:	2700      	movs	r7, #0
 801eb6e:	9b06      	ldr	r3, [sp, #24]
 801eb70:	4599      	cmp	r9, r3
 801eb72:	dd06      	ble.n	801eb82 <__kernel_rem_pio2+0x3da>
 801eb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb76:	e8e3 6702 	strd	r6, r7, [r3], #8
 801eb7a:	f108 0801 	add.w	r8, r8, #1
 801eb7e:	930a      	str	r3, [sp, #40]	; 0x28
 801eb80:	e7df      	b.n	801eb42 <__kernel_rem_pio2+0x39a>
 801eb82:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801eb86:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801eb8a:	f7e1 fd35 	bl	80005f8 <__aeabi_dmul>
 801eb8e:	4602      	mov	r2, r0
 801eb90:	460b      	mov	r3, r1
 801eb92:	4630      	mov	r0, r6
 801eb94:	4639      	mov	r1, r7
 801eb96:	f7e1 fb79 	bl	800028c <__adddf3>
 801eb9a:	f109 0901 	add.w	r9, r9, #1
 801eb9e:	4606      	mov	r6, r0
 801eba0:	460f      	mov	r7, r1
 801eba2:	e7e4      	b.n	801eb6e <__kernel_rem_pio2+0x3c6>
 801eba4:	3d01      	subs	r5, #1
 801eba6:	e748      	b.n	801ea3a <__kernel_rem_pio2+0x292>
 801eba8:	ec47 6b10 	vmov	d0, r6, r7
 801ebac:	f1ca 0000 	rsb	r0, sl, #0
 801ebb0:	f000 fc36 	bl	801f420 <scalbn>
 801ebb4:	ec57 6b10 	vmov	r6, r7, d0
 801ebb8:	4ba0      	ldr	r3, [pc, #640]	; (801ee3c <__kernel_rem_pio2+0x694>)
 801ebba:	ee10 0a10 	vmov	r0, s0
 801ebbe:	2200      	movs	r2, #0
 801ebc0:	4639      	mov	r1, r7
 801ebc2:	f7e1 ff9f 	bl	8000b04 <__aeabi_dcmpge>
 801ebc6:	b1f8      	cbz	r0, 801ec08 <__kernel_rem_pio2+0x460>
 801ebc8:	4b9d      	ldr	r3, [pc, #628]	; (801ee40 <__kernel_rem_pio2+0x698>)
 801ebca:	2200      	movs	r2, #0
 801ebcc:	4630      	mov	r0, r6
 801ebce:	4639      	mov	r1, r7
 801ebd0:	f7e1 fd12 	bl	80005f8 <__aeabi_dmul>
 801ebd4:	f7e1 ffc0 	bl	8000b58 <__aeabi_d2iz>
 801ebd8:	4680      	mov	r8, r0
 801ebda:	f7e1 fca3 	bl	8000524 <__aeabi_i2d>
 801ebde:	4b97      	ldr	r3, [pc, #604]	; (801ee3c <__kernel_rem_pio2+0x694>)
 801ebe0:	2200      	movs	r2, #0
 801ebe2:	f7e1 fd09 	bl	80005f8 <__aeabi_dmul>
 801ebe6:	460b      	mov	r3, r1
 801ebe8:	4602      	mov	r2, r0
 801ebea:	4639      	mov	r1, r7
 801ebec:	4630      	mov	r0, r6
 801ebee:	f7e1 fb4b 	bl	8000288 <__aeabi_dsub>
 801ebf2:	f7e1 ffb1 	bl	8000b58 <__aeabi_d2iz>
 801ebf6:	1c65      	adds	r5, r4, #1
 801ebf8:	ab0e      	add	r3, sp, #56	; 0x38
 801ebfa:	f10a 0a18 	add.w	sl, sl, #24
 801ebfe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ec02:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801ec06:	e720      	b.n	801ea4a <__kernel_rem_pio2+0x2a2>
 801ec08:	4630      	mov	r0, r6
 801ec0a:	4639      	mov	r1, r7
 801ec0c:	f7e1 ffa4 	bl	8000b58 <__aeabi_d2iz>
 801ec10:	ab0e      	add	r3, sp, #56	; 0x38
 801ec12:	4625      	mov	r5, r4
 801ec14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ec18:	e717      	b.n	801ea4a <__kernel_rem_pio2+0x2a2>
 801ec1a:	ab0e      	add	r3, sp, #56	; 0x38
 801ec1c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801ec20:	f7e1 fc80 	bl	8000524 <__aeabi_i2d>
 801ec24:	4632      	mov	r2, r6
 801ec26:	463b      	mov	r3, r7
 801ec28:	f7e1 fce6 	bl	80005f8 <__aeabi_dmul>
 801ec2c:	4b84      	ldr	r3, [pc, #528]	; (801ee40 <__kernel_rem_pio2+0x698>)
 801ec2e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801ec32:	2200      	movs	r2, #0
 801ec34:	4630      	mov	r0, r6
 801ec36:	4639      	mov	r1, r7
 801ec38:	f7e1 fcde 	bl	80005f8 <__aeabi_dmul>
 801ec3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec40:	4606      	mov	r6, r0
 801ec42:	460f      	mov	r7, r1
 801ec44:	e70f      	b.n	801ea66 <__kernel_rem_pio2+0x2be>
 801ec46:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801ec4a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801ec4e:	f7e1 fcd3 	bl	80005f8 <__aeabi_dmul>
 801ec52:	4602      	mov	r2, r0
 801ec54:	460b      	mov	r3, r1
 801ec56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ec5a:	f7e1 fb17 	bl	800028c <__adddf3>
 801ec5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ec62:	f108 0801 	add.w	r8, r8, #1
 801ec66:	9b02      	ldr	r3, [sp, #8]
 801ec68:	4598      	cmp	r8, r3
 801ec6a:	dc01      	bgt.n	801ec70 <__kernel_rem_pio2+0x4c8>
 801ec6c:	45b8      	cmp	r8, r7
 801ec6e:	ddea      	ble.n	801ec46 <__kernel_rem_pio2+0x49e>
 801ec70:	ed9d 7b06 	vldr	d7, [sp, #24]
 801ec74:	ab4a      	add	r3, sp, #296	; 0x128
 801ec76:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801ec7a:	ed87 7b00 	vstr	d7, [r7]
 801ec7e:	3e01      	subs	r6, #1
 801ec80:	e6f8      	b.n	801ea74 <__kernel_rem_pio2+0x2cc>
 801ec82:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801ec84:	2b02      	cmp	r3, #2
 801ec86:	dc0b      	bgt.n	801eca0 <__kernel_rem_pio2+0x4f8>
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	dc35      	bgt.n	801ecf8 <__kernel_rem_pio2+0x550>
 801ec8c:	d059      	beq.n	801ed42 <__kernel_rem_pio2+0x59a>
 801ec8e:	9b04      	ldr	r3, [sp, #16]
 801ec90:	f003 0007 	and.w	r0, r3, #7
 801ec94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801ec98:	ecbd 8b02 	vpop	{d8}
 801ec9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eca0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801eca2:	2b03      	cmp	r3, #3
 801eca4:	d1f3      	bne.n	801ec8e <__kernel_rem_pio2+0x4e6>
 801eca6:	ab4a      	add	r3, sp, #296	; 0x128
 801eca8:	4423      	add	r3, r4
 801ecaa:	9306      	str	r3, [sp, #24]
 801ecac:	461c      	mov	r4, r3
 801ecae:	469a      	mov	sl, r3
 801ecb0:	9502      	str	r5, [sp, #8]
 801ecb2:	9b02      	ldr	r3, [sp, #8]
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	f1aa 0a08 	sub.w	sl, sl, #8
 801ecba:	dc6b      	bgt.n	801ed94 <__kernel_rem_pio2+0x5ec>
 801ecbc:	46aa      	mov	sl, r5
 801ecbe:	f1ba 0f01 	cmp.w	sl, #1
 801ecc2:	f1a4 0408 	sub.w	r4, r4, #8
 801ecc6:	f300 8085 	bgt.w	801edd4 <__kernel_rem_pio2+0x62c>
 801ecca:	9c06      	ldr	r4, [sp, #24]
 801eccc:	2000      	movs	r0, #0
 801ecce:	3408      	adds	r4, #8
 801ecd0:	2100      	movs	r1, #0
 801ecd2:	2d01      	cmp	r5, #1
 801ecd4:	f300 809d 	bgt.w	801ee12 <__kernel_rem_pio2+0x66a>
 801ecd8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801ecdc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801ece0:	f1bb 0f00 	cmp.w	fp, #0
 801ece4:	f040 809b 	bne.w	801ee1e <__kernel_rem_pio2+0x676>
 801ece8:	9b01      	ldr	r3, [sp, #4]
 801ecea:	e9c3 5600 	strd	r5, r6, [r3]
 801ecee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801ecf2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ecf6:	e7ca      	b.n	801ec8e <__kernel_rem_pio2+0x4e6>
 801ecf8:	3408      	adds	r4, #8
 801ecfa:	ab4a      	add	r3, sp, #296	; 0x128
 801ecfc:	441c      	add	r4, r3
 801ecfe:	462e      	mov	r6, r5
 801ed00:	2000      	movs	r0, #0
 801ed02:	2100      	movs	r1, #0
 801ed04:	2e00      	cmp	r6, #0
 801ed06:	da36      	bge.n	801ed76 <__kernel_rem_pio2+0x5ce>
 801ed08:	f1bb 0f00 	cmp.w	fp, #0
 801ed0c:	d039      	beq.n	801ed82 <__kernel_rem_pio2+0x5da>
 801ed0e:	4602      	mov	r2, r0
 801ed10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ed14:	9c01      	ldr	r4, [sp, #4]
 801ed16:	e9c4 2300 	strd	r2, r3, [r4]
 801ed1a:	4602      	mov	r2, r0
 801ed1c:	460b      	mov	r3, r1
 801ed1e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801ed22:	f7e1 fab1 	bl	8000288 <__aeabi_dsub>
 801ed26:	ae4c      	add	r6, sp, #304	; 0x130
 801ed28:	2401      	movs	r4, #1
 801ed2a:	42a5      	cmp	r5, r4
 801ed2c:	da2c      	bge.n	801ed88 <__kernel_rem_pio2+0x5e0>
 801ed2e:	f1bb 0f00 	cmp.w	fp, #0
 801ed32:	d002      	beq.n	801ed3a <__kernel_rem_pio2+0x592>
 801ed34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ed38:	4619      	mov	r1, r3
 801ed3a:	9b01      	ldr	r3, [sp, #4]
 801ed3c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ed40:	e7a5      	b.n	801ec8e <__kernel_rem_pio2+0x4e6>
 801ed42:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801ed46:	eb0d 0403 	add.w	r4, sp, r3
 801ed4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ed4e:	2000      	movs	r0, #0
 801ed50:	2100      	movs	r1, #0
 801ed52:	2d00      	cmp	r5, #0
 801ed54:	da09      	bge.n	801ed6a <__kernel_rem_pio2+0x5c2>
 801ed56:	f1bb 0f00 	cmp.w	fp, #0
 801ed5a:	d002      	beq.n	801ed62 <__kernel_rem_pio2+0x5ba>
 801ed5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ed60:	4619      	mov	r1, r3
 801ed62:	9b01      	ldr	r3, [sp, #4]
 801ed64:	e9c3 0100 	strd	r0, r1, [r3]
 801ed68:	e791      	b.n	801ec8e <__kernel_rem_pio2+0x4e6>
 801ed6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ed6e:	f7e1 fa8d 	bl	800028c <__adddf3>
 801ed72:	3d01      	subs	r5, #1
 801ed74:	e7ed      	b.n	801ed52 <__kernel_rem_pio2+0x5aa>
 801ed76:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ed7a:	f7e1 fa87 	bl	800028c <__adddf3>
 801ed7e:	3e01      	subs	r6, #1
 801ed80:	e7c0      	b.n	801ed04 <__kernel_rem_pio2+0x55c>
 801ed82:	4602      	mov	r2, r0
 801ed84:	460b      	mov	r3, r1
 801ed86:	e7c5      	b.n	801ed14 <__kernel_rem_pio2+0x56c>
 801ed88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801ed8c:	f7e1 fa7e 	bl	800028c <__adddf3>
 801ed90:	3401      	adds	r4, #1
 801ed92:	e7ca      	b.n	801ed2a <__kernel_rem_pio2+0x582>
 801ed94:	e9da 8900 	ldrd	r8, r9, [sl]
 801ed98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801ed9c:	9b02      	ldr	r3, [sp, #8]
 801ed9e:	3b01      	subs	r3, #1
 801eda0:	9302      	str	r3, [sp, #8]
 801eda2:	4632      	mov	r2, r6
 801eda4:	463b      	mov	r3, r7
 801eda6:	4640      	mov	r0, r8
 801eda8:	4649      	mov	r1, r9
 801edaa:	f7e1 fa6f 	bl	800028c <__adddf3>
 801edae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801edb2:	4602      	mov	r2, r0
 801edb4:	460b      	mov	r3, r1
 801edb6:	4640      	mov	r0, r8
 801edb8:	4649      	mov	r1, r9
 801edba:	f7e1 fa65 	bl	8000288 <__aeabi_dsub>
 801edbe:	4632      	mov	r2, r6
 801edc0:	463b      	mov	r3, r7
 801edc2:	f7e1 fa63 	bl	800028c <__adddf3>
 801edc6:	ed9d 7b08 	vldr	d7, [sp, #32]
 801edca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801edce:	ed8a 7b00 	vstr	d7, [sl]
 801edd2:	e76e      	b.n	801ecb2 <__kernel_rem_pio2+0x50a>
 801edd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 801edd8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801eddc:	4640      	mov	r0, r8
 801edde:	4632      	mov	r2, r6
 801ede0:	463b      	mov	r3, r7
 801ede2:	4649      	mov	r1, r9
 801ede4:	f7e1 fa52 	bl	800028c <__adddf3>
 801ede8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801edec:	4602      	mov	r2, r0
 801edee:	460b      	mov	r3, r1
 801edf0:	4640      	mov	r0, r8
 801edf2:	4649      	mov	r1, r9
 801edf4:	f7e1 fa48 	bl	8000288 <__aeabi_dsub>
 801edf8:	4632      	mov	r2, r6
 801edfa:	463b      	mov	r3, r7
 801edfc:	f7e1 fa46 	bl	800028c <__adddf3>
 801ee00:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ee08:	ed84 7b00 	vstr	d7, [r4]
 801ee0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ee10:	e755      	b.n	801ecbe <__kernel_rem_pio2+0x516>
 801ee12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ee16:	f7e1 fa39 	bl	800028c <__adddf3>
 801ee1a:	3d01      	subs	r5, #1
 801ee1c:	e759      	b.n	801ecd2 <__kernel_rem_pio2+0x52a>
 801ee1e:	9b01      	ldr	r3, [sp, #4]
 801ee20:	9a01      	ldr	r2, [sp, #4]
 801ee22:	601d      	str	r5, [r3, #0]
 801ee24:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801ee28:	605c      	str	r4, [r3, #4]
 801ee2a:	609f      	str	r7, [r3, #8]
 801ee2c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801ee30:	60d3      	str	r3, [r2, #12]
 801ee32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ee36:	6110      	str	r0, [r2, #16]
 801ee38:	6153      	str	r3, [r2, #20]
 801ee3a:	e728      	b.n	801ec8e <__kernel_rem_pio2+0x4e6>
 801ee3c:	41700000 	.word	0x41700000
 801ee40:	3e700000 	.word	0x3e700000
 801ee44:	00000000 	.word	0x00000000

0801ee48 <__kernel_sin>:
 801ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee4c:	ed2d 8b04 	vpush	{d8-d9}
 801ee50:	eeb0 8a41 	vmov.f32	s16, s2
 801ee54:	eef0 8a61 	vmov.f32	s17, s3
 801ee58:	ec55 4b10 	vmov	r4, r5, d0
 801ee5c:	b083      	sub	sp, #12
 801ee5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ee62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ee66:	9001      	str	r0, [sp, #4]
 801ee68:	da06      	bge.n	801ee78 <__kernel_sin+0x30>
 801ee6a:	ee10 0a10 	vmov	r0, s0
 801ee6e:	4629      	mov	r1, r5
 801ee70:	f7e1 fe72 	bl	8000b58 <__aeabi_d2iz>
 801ee74:	2800      	cmp	r0, #0
 801ee76:	d051      	beq.n	801ef1c <__kernel_sin+0xd4>
 801ee78:	4622      	mov	r2, r4
 801ee7a:	462b      	mov	r3, r5
 801ee7c:	4620      	mov	r0, r4
 801ee7e:	4629      	mov	r1, r5
 801ee80:	f7e1 fbba 	bl	80005f8 <__aeabi_dmul>
 801ee84:	4682      	mov	sl, r0
 801ee86:	468b      	mov	fp, r1
 801ee88:	4602      	mov	r2, r0
 801ee8a:	460b      	mov	r3, r1
 801ee8c:	4620      	mov	r0, r4
 801ee8e:	4629      	mov	r1, r5
 801ee90:	f7e1 fbb2 	bl	80005f8 <__aeabi_dmul>
 801ee94:	a341      	add	r3, pc, #260	; (adr r3, 801ef9c <__kernel_sin+0x154>)
 801ee96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee9a:	4680      	mov	r8, r0
 801ee9c:	4689      	mov	r9, r1
 801ee9e:	4650      	mov	r0, sl
 801eea0:	4659      	mov	r1, fp
 801eea2:	f7e1 fba9 	bl	80005f8 <__aeabi_dmul>
 801eea6:	a33f      	add	r3, pc, #252	; (adr r3, 801efa4 <__kernel_sin+0x15c>)
 801eea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeac:	f7e1 f9ec 	bl	8000288 <__aeabi_dsub>
 801eeb0:	4652      	mov	r2, sl
 801eeb2:	465b      	mov	r3, fp
 801eeb4:	f7e1 fba0 	bl	80005f8 <__aeabi_dmul>
 801eeb8:	a33c      	add	r3, pc, #240	; (adr r3, 801efac <__kernel_sin+0x164>)
 801eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eebe:	f7e1 f9e5 	bl	800028c <__adddf3>
 801eec2:	4652      	mov	r2, sl
 801eec4:	465b      	mov	r3, fp
 801eec6:	f7e1 fb97 	bl	80005f8 <__aeabi_dmul>
 801eeca:	a33a      	add	r3, pc, #232	; (adr r3, 801efb4 <__kernel_sin+0x16c>)
 801eecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eed0:	f7e1 f9da 	bl	8000288 <__aeabi_dsub>
 801eed4:	4652      	mov	r2, sl
 801eed6:	465b      	mov	r3, fp
 801eed8:	f7e1 fb8e 	bl	80005f8 <__aeabi_dmul>
 801eedc:	a337      	add	r3, pc, #220	; (adr r3, 801efbc <__kernel_sin+0x174>)
 801eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eee2:	f7e1 f9d3 	bl	800028c <__adddf3>
 801eee6:	9b01      	ldr	r3, [sp, #4]
 801eee8:	4606      	mov	r6, r0
 801eeea:	460f      	mov	r7, r1
 801eeec:	b9eb      	cbnz	r3, 801ef2a <__kernel_sin+0xe2>
 801eeee:	4602      	mov	r2, r0
 801eef0:	460b      	mov	r3, r1
 801eef2:	4650      	mov	r0, sl
 801eef4:	4659      	mov	r1, fp
 801eef6:	f7e1 fb7f 	bl	80005f8 <__aeabi_dmul>
 801eefa:	a325      	add	r3, pc, #148	; (adr r3, 801ef90 <__kernel_sin+0x148>)
 801eefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef00:	f7e1 f9c2 	bl	8000288 <__aeabi_dsub>
 801ef04:	4642      	mov	r2, r8
 801ef06:	464b      	mov	r3, r9
 801ef08:	f7e1 fb76 	bl	80005f8 <__aeabi_dmul>
 801ef0c:	4602      	mov	r2, r0
 801ef0e:	460b      	mov	r3, r1
 801ef10:	4620      	mov	r0, r4
 801ef12:	4629      	mov	r1, r5
 801ef14:	f7e1 f9ba 	bl	800028c <__adddf3>
 801ef18:	4604      	mov	r4, r0
 801ef1a:	460d      	mov	r5, r1
 801ef1c:	ec45 4b10 	vmov	d0, r4, r5
 801ef20:	b003      	add	sp, #12
 801ef22:	ecbd 8b04 	vpop	{d8-d9}
 801ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef2a:	4b1b      	ldr	r3, [pc, #108]	; (801ef98 <__kernel_sin+0x150>)
 801ef2c:	ec51 0b18 	vmov	r0, r1, d8
 801ef30:	2200      	movs	r2, #0
 801ef32:	f7e1 fb61 	bl	80005f8 <__aeabi_dmul>
 801ef36:	4632      	mov	r2, r6
 801ef38:	ec41 0b19 	vmov	d9, r0, r1
 801ef3c:	463b      	mov	r3, r7
 801ef3e:	4640      	mov	r0, r8
 801ef40:	4649      	mov	r1, r9
 801ef42:	f7e1 fb59 	bl	80005f8 <__aeabi_dmul>
 801ef46:	4602      	mov	r2, r0
 801ef48:	460b      	mov	r3, r1
 801ef4a:	ec51 0b19 	vmov	r0, r1, d9
 801ef4e:	f7e1 f99b 	bl	8000288 <__aeabi_dsub>
 801ef52:	4652      	mov	r2, sl
 801ef54:	465b      	mov	r3, fp
 801ef56:	f7e1 fb4f 	bl	80005f8 <__aeabi_dmul>
 801ef5a:	ec53 2b18 	vmov	r2, r3, d8
 801ef5e:	f7e1 f993 	bl	8000288 <__aeabi_dsub>
 801ef62:	a30b      	add	r3, pc, #44	; (adr r3, 801ef90 <__kernel_sin+0x148>)
 801ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef68:	4606      	mov	r6, r0
 801ef6a:	460f      	mov	r7, r1
 801ef6c:	4640      	mov	r0, r8
 801ef6e:	4649      	mov	r1, r9
 801ef70:	f7e1 fb42 	bl	80005f8 <__aeabi_dmul>
 801ef74:	4602      	mov	r2, r0
 801ef76:	460b      	mov	r3, r1
 801ef78:	4630      	mov	r0, r6
 801ef7a:	4639      	mov	r1, r7
 801ef7c:	f7e1 f986 	bl	800028c <__adddf3>
 801ef80:	4602      	mov	r2, r0
 801ef82:	460b      	mov	r3, r1
 801ef84:	4620      	mov	r0, r4
 801ef86:	4629      	mov	r1, r5
 801ef88:	f7e1 f97e 	bl	8000288 <__aeabi_dsub>
 801ef8c:	e7c4      	b.n	801ef18 <__kernel_sin+0xd0>
 801ef8e:	bf00      	nop
 801ef90:	55555549 	.word	0x55555549
 801ef94:	3fc55555 	.word	0x3fc55555
 801ef98:	3fe00000 	.word	0x3fe00000
 801ef9c:	5acfd57c 	.word	0x5acfd57c
 801efa0:	3de5d93a 	.word	0x3de5d93a
 801efa4:	8a2b9ceb 	.word	0x8a2b9ceb
 801efa8:	3e5ae5e6 	.word	0x3e5ae5e6
 801efac:	57b1fe7d 	.word	0x57b1fe7d
 801efb0:	3ec71de3 	.word	0x3ec71de3
 801efb4:	19c161d5 	.word	0x19c161d5
 801efb8:	3f2a01a0 	.word	0x3f2a01a0
 801efbc:	1110f8a6 	.word	0x1110f8a6
 801efc0:	3f811111 	.word	0x3f811111
 801efc4:	00000000 	.word	0x00000000

0801efc8 <atan>:
 801efc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efcc:	ec55 4b10 	vmov	r4, r5, d0
 801efd0:	4bc3      	ldr	r3, [pc, #780]	; (801f2e0 <atan+0x318>)
 801efd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801efd6:	429e      	cmp	r6, r3
 801efd8:	46ab      	mov	fp, r5
 801efda:	dd18      	ble.n	801f00e <atan+0x46>
 801efdc:	4bc1      	ldr	r3, [pc, #772]	; (801f2e4 <atan+0x31c>)
 801efde:	429e      	cmp	r6, r3
 801efe0:	dc01      	bgt.n	801efe6 <atan+0x1e>
 801efe2:	d109      	bne.n	801eff8 <atan+0x30>
 801efe4:	b144      	cbz	r4, 801eff8 <atan+0x30>
 801efe6:	4622      	mov	r2, r4
 801efe8:	462b      	mov	r3, r5
 801efea:	4620      	mov	r0, r4
 801efec:	4629      	mov	r1, r5
 801efee:	f7e1 f94d 	bl	800028c <__adddf3>
 801eff2:	4604      	mov	r4, r0
 801eff4:	460d      	mov	r5, r1
 801eff6:	e006      	b.n	801f006 <atan+0x3e>
 801eff8:	f1bb 0f00 	cmp.w	fp, #0
 801effc:	f300 8131 	bgt.w	801f262 <atan+0x29a>
 801f000:	a59b      	add	r5, pc, #620	; (adr r5, 801f270 <atan+0x2a8>)
 801f002:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f006:	ec45 4b10 	vmov	d0, r4, r5
 801f00a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f00e:	4bb6      	ldr	r3, [pc, #728]	; (801f2e8 <atan+0x320>)
 801f010:	429e      	cmp	r6, r3
 801f012:	dc14      	bgt.n	801f03e <atan+0x76>
 801f014:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801f018:	429e      	cmp	r6, r3
 801f01a:	dc0d      	bgt.n	801f038 <atan+0x70>
 801f01c:	a396      	add	r3, pc, #600	; (adr r3, 801f278 <atan+0x2b0>)
 801f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f022:	ee10 0a10 	vmov	r0, s0
 801f026:	4629      	mov	r1, r5
 801f028:	f7e1 f930 	bl	800028c <__adddf3>
 801f02c:	4baf      	ldr	r3, [pc, #700]	; (801f2ec <atan+0x324>)
 801f02e:	2200      	movs	r2, #0
 801f030:	f7e1 fd72 	bl	8000b18 <__aeabi_dcmpgt>
 801f034:	2800      	cmp	r0, #0
 801f036:	d1e6      	bne.n	801f006 <atan+0x3e>
 801f038:	f04f 3aff 	mov.w	sl, #4294967295
 801f03c:	e02b      	b.n	801f096 <atan+0xce>
 801f03e:	f000 f963 	bl	801f308 <fabs>
 801f042:	4bab      	ldr	r3, [pc, #684]	; (801f2f0 <atan+0x328>)
 801f044:	429e      	cmp	r6, r3
 801f046:	ec55 4b10 	vmov	r4, r5, d0
 801f04a:	f300 80bf 	bgt.w	801f1cc <atan+0x204>
 801f04e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801f052:	429e      	cmp	r6, r3
 801f054:	f300 80a0 	bgt.w	801f198 <atan+0x1d0>
 801f058:	ee10 2a10 	vmov	r2, s0
 801f05c:	ee10 0a10 	vmov	r0, s0
 801f060:	462b      	mov	r3, r5
 801f062:	4629      	mov	r1, r5
 801f064:	f7e1 f912 	bl	800028c <__adddf3>
 801f068:	4ba0      	ldr	r3, [pc, #640]	; (801f2ec <atan+0x324>)
 801f06a:	2200      	movs	r2, #0
 801f06c:	f7e1 f90c 	bl	8000288 <__aeabi_dsub>
 801f070:	2200      	movs	r2, #0
 801f072:	4606      	mov	r6, r0
 801f074:	460f      	mov	r7, r1
 801f076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f07a:	4620      	mov	r0, r4
 801f07c:	4629      	mov	r1, r5
 801f07e:	f7e1 f905 	bl	800028c <__adddf3>
 801f082:	4602      	mov	r2, r0
 801f084:	460b      	mov	r3, r1
 801f086:	4630      	mov	r0, r6
 801f088:	4639      	mov	r1, r7
 801f08a:	f7e1 fbdf 	bl	800084c <__aeabi_ddiv>
 801f08e:	f04f 0a00 	mov.w	sl, #0
 801f092:	4604      	mov	r4, r0
 801f094:	460d      	mov	r5, r1
 801f096:	4622      	mov	r2, r4
 801f098:	462b      	mov	r3, r5
 801f09a:	4620      	mov	r0, r4
 801f09c:	4629      	mov	r1, r5
 801f09e:	f7e1 faab 	bl	80005f8 <__aeabi_dmul>
 801f0a2:	4602      	mov	r2, r0
 801f0a4:	460b      	mov	r3, r1
 801f0a6:	4680      	mov	r8, r0
 801f0a8:	4689      	mov	r9, r1
 801f0aa:	f7e1 faa5 	bl	80005f8 <__aeabi_dmul>
 801f0ae:	a374      	add	r3, pc, #464	; (adr r3, 801f280 <atan+0x2b8>)
 801f0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0b4:	4606      	mov	r6, r0
 801f0b6:	460f      	mov	r7, r1
 801f0b8:	f7e1 fa9e 	bl	80005f8 <__aeabi_dmul>
 801f0bc:	a372      	add	r3, pc, #456	; (adr r3, 801f288 <atan+0x2c0>)
 801f0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0c2:	f7e1 f8e3 	bl	800028c <__adddf3>
 801f0c6:	4632      	mov	r2, r6
 801f0c8:	463b      	mov	r3, r7
 801f0ca:	f7e1 fa95 	bl	80005f8 <__aeabi_dmul>
 801f0ce:	a370      	add	r3, pc, #448	; (adr r3, 801f290 <atan+0x2c8>)
 801f0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0d4:	f7e1 f8da 	bl	800028c <__adddf3>
 801f0d8:	4632      	mov	r2, r6
 801f0da:	463b      	mov	r3, r7
 801f0dc:	f7e1 fa8c 	bl	80005f8 <__aeabi_dmul>
 801f0e0:	a36d      	add	r3, pc, #436	; (adr r3, 801f298 <atan+0x2d0>)
 801f0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0e6:	f7e1 f8d1 	bl	800028c <__adddf3>
 801f0ea:	4632      	mov	r2, r6
 801f0ec:	463b      	mov	r3, r7
 801f0ee:	f7e1 fa83 	bl	80005f8 <__aeabi_dmul>
 801f0f2:	a36b      	add	r3, pc, #428	; (adr r3, 801f2a0 <atan+0x2d8>)
 801f0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0f8:	f7e1 f8c8 	bl	800028c <__adddf3>
 801f0fc:	4632      	mov	r2, r6
 801f0fe:	463b      	mov	r3, r7
 801f100:	f7e1 fa7a 	bl	80005f8 <__aeabi_dmul>
 801f104:	a368      	add	r3, pc, #416	; (adr r3, 801f2a8 <atan+0x2e0>)
 801f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f10a:	f7e1 f8bf 	bl	800028c <__adddf3>
 801f10e:	4642      	mov	r2, r8
 801f110:	464b      	mov	r3, r9
 801f112:	f7e1 fa71 	bl	80005f8 <__aeabi_dmul>
 801f116:	a366      	add	r3, pc, #408	; (adr r3, 801f2b0 <atan+0x2e8>)
 801f118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f11c:	4680      	mov	r8, r0
 801f11e:	4689      	mov	r9, r1
 801f120:	4630      	mov	r0, r6
 801f122:	4639      	mov	r1, r7
 801f124:	f7e1 fa68 	bl	80005f8 <__aeabi_dmul>
 801f128:	a363      	add	r3, pc, #396	; (adr r3, 801f2b8 <atan+0x2f0>)
 801f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f12e:	f7e1 f8ab 	bl	8000288 <__aeabi_dsub>
 801f132:	4632      	mov	r2, r6
 801f134:	463b      	mov	r3, r7
 801f136:	f7e1 fa5f 	bl	80005f8 <__aeabi_dmul>
 801f13a:	a361      	add	r3, pc, #388	; (adr r3, 801f2c0 <atan+0x2f8>)
 801f13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f140:	f7e1 f8a2 	bl	8000288 <__aeabi_dsub>
 801f144:	4632      	mov	r2, r6
 801f146:	463b      	mov	r3, r7
 801f148:	f7e1 fa56 	bl	80005f8 <__aeabi_dmul>
 801f14c:	a35e      	add	r3, pc, #376	; (adr r3, 801f2c8 <atan+0x300>)
 801f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f152:	f7e1 f899 	bl	8000288 <__aeabi_dsub>
 801f156:	4632      	mov	r2, r6
 801f158:	463b      	mov	r3, r7
 801f15a:	f7e1 fa4d 	bl	80005f8 <__aeabi_dmul>
 801f15e:	a35c      	add	r3, pc, #368	; (adr r3, 801f2d0 <atan+0x308>)
 801f160:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f164:	f7e1 f890 	bl	8000288 <__aeabi_dsub>
 801f168:	4632      	mov	r2, r6
 801f16a:	463b      	mov	r3, r7
 801f16c:	f7e1 fa44 	bl	80005f8 <__aeabi_dmul>
 801f170:	4602      	mov	r2, r0
 801f172:	460b      	mov	r3, r1
 801f174:	4640      	mov	r0, r8
 801f176:	4649      	mov	r1, r9
 801f178:	f7e1 f888 	bl	800028c <__adddf3>
 801f17c:	4622      	mov	r2, r4
 801f17e:	462b      	mov	r3, r5
 801f180:	f7e1 fa3a 	bl	80005f8 <__aeabi_dmul>
 801f184:	f1ba 3fff 	cmp.w	sl, #4294967295
 801f188:	4602      	mov	r2, r0
 801f18a:	460b      	mov	r3, r1
 801f18c:	d14b      	bne.n	801f226 <atan+0x25e>
 801f18e:	4620      	mov	r0, r4
 801f190:	4629      	mov	r1, r5
 801f192:	f7e1 f879 	bl	8000288 <__aeabi_dsub>
 801f196:	e72c      	b.n	801eff2 <atan+0x2a>
 801f198:	ee10 0a10 	vmov	r0, s0
 801f19c:	4b53      	ldr	r3, [pc, #332]	; (801f2ec <atan+0x324>)
 801f19e:	2200      	movs	r2, #0
 801f1a0:	4629      	mov	r1, r5
 801f1a2:	f7e1 f871 	bl	8000288 <__aeabi_dsub>
 801f1a6:	4b51      	ldr	r3, [pc, #324]	; (801f2ec <atan+0x324>)
 801f1a8:	4606      	mov	r6, r0
 801f1aa:	460f      	mov	r7, r1
 801f1ac:	2200      	movs	r2, #0
 801f1ae:	4620      	mov	r0, r4
 801f1b0:	4629      	mov	r1, r5
 801f1b2:	f7e1 f86b 	bl	800028c <__adddf3>
 801f1b6:	4602      	mov	r2, r0
 801f1b8:	460b      	mov	r3, r1
 801f1ba:	4630      	mov	r0, r6
 801f1bc:	4639      	mov	r1, r7
 801f1be:	f7e1 fb45 	bl	800084c <__aeabi_ddiv>
 801f1c2:	f04f 0a01 	mov.w	sl, #1
 801f1c6:	4604      	mov	r4, r0
 801f1c8:	460d      	mov	r5, r1
 801f1ca:	e764      	b.n	801f096 <atan+0xce>
 801f1cc:	4b49      	ldr	r3, [pc, #292]	; (801f2f4 <atan+0x32c>)
 801f1ce:	429e      	cmp	r6, r3
 801f1d0:	da1d      	bge.n	801f20e <atan+0x246>
 801f1d2:	ee10 0a10 	vmov	r0, s0
 801f1d6:	4b48      	ldr	r3, [pc, #288]	; (801f2f8 <atan+0x330>)
 801f1d8:	2200      	movs	r2, #0
 801f1da:	4629      	mov	r1, r5
 801f1dc:	f7e1 f854 	bl	8000288 <__aeabi_dsub>
 801f1e0:	4b45      	ldr	r3, [pc, #276]	; (801f2f8 <atan+0x330>)
 801f1e2:	4606      	mov	r6, r0
 801f1e4:	460f      	mov	r7, r1
 801f1e6:	2200      	movs	r2, #0
 801f1e8:	4620      	mov	r0, r4
 801f1ea:	4629      	mov	r1, r5
 801f1ec:	f7e1 fa04 	bl	80005f8 <__aeabi_dmul>
 801f1f0:	4b3e      	ldr	r3, [pc, #248]	; (801f2ec <atan+0x324>)
 801f1f2:	2200      	movs	r2, #0
 801f1f4:	f7e1 f84a 	bl	800028c <__adddf3>
 801f1f8:	4602      	mov	r2, r0
 801f1fa:	460b      	mov	r3, r1
 801f1fc:	4630      	mov	r0, r6
 801f1fe:	4639      	mov	r1, r7
 801f200:	f7e1 fb24 	bl	800084c <__aeabi_ddiv>
 801f204:	f04f 0a02 	mov.w	sl, #2
 801f208:	4604      	mov	r4, r0
 801f20a:	460d      	mov	r5, r1
 801f20c:	e743      	b.n	801f096 <atan+0xce>
 801f20e:	462b      	mov	r3, r5
 801f210:	ee10 2a10 	vmov	r2, s0
 801f214:	4939      	ldr	r1, [pc, #228]	; (801f2fc <atan+0x334>)
 801f216:	2000      	movs	r0, #0
 801f218:	f7e1 fb18 	bl	800084c <__aeabi_ddiv>
 801f21c:	f04f 0a03 	mov.w	sl, #3
 801f220:	4604      	mov	r4, r0
 801f222:	460d      	mov	r5, r1
 801f224:	e737      	b.n	801f096 <atan+0xce>
 801f226:	4b36      	ldr	r3, [pc, #216]	; (801f300 <atan+0x338>)
 801f228:	4e36      	ldr	r6, [pc, #216]	; (801f304 <atan+0x33c>)
 801f22a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801f22e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801f232:	e9da 2300 	ldrd	r2, r3, [sl]
 801f236:	f7e1 f827 	bl	8000288 <__aeabi_dsub>
 801f23a:	4622      	mov	r2, r4
 801f23c:	462b      	mov	r3, r5
 801f23e:	f7e1 f823 	bl	8000288 <__aeabi_dsub>
 801f242:	4602      	mov	r2, r0
 801f244:	460b      	mov	r3, r1
 801f246:	e9d6 0100 	ldrd	r0, r1, [r6]
 801f24a:	f7e1 f81d 	bl	8000288 <__aeabi_dsub>
 801f24e:	f1bb 0f00 	cmp.w	fp, #0
 801f252:	4604      	mov	r4, r0
 801f254:	460d      	mov	r5, r1
 801f256:	f6bf aed6 	bge.w	801f006 <atan+0x3e>
 801f25a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f25e:	461d      	mov	r5, r3
 801f260:	e6d1      	b.n	801f006 <atan+0x3e>
 801f262:	a51d      	add	r5, pc, #116	; (adr r5, 801f2d8 <atan+0x310>)
 801f264:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f268:	e6cd      	b.n	801f006 <atan+0x3e>
 801f26a:	bf00      	nop
 801f26c:	f3af 8000 	nop.w
 801f270:	54442d18 	.word	0x54442d18
 801f274:	bff921fb 	.word	0xbff921fb
 801f278:	8800759c 	.word	0x8800759c
 801f27c:	7e37e43c 	.word	0x7e37e43c
 801f280:	e322da11 	.word	0xe322da11
 801f284:	3f90ad3a 	.word	0x3f90ad3a
 801f288:	24760deb 	.word	0x24760deb
 801f28c:	3fa97b4b 	.word	0x3fa97b4b
 801f290:	a0d03d51 	.word	0xa0d03d51
 801f294:	3fb10d66 	.word	0x3fb10d66
 801f298:	c54c206e 	.word	0xc54c206e
 801f29c:	3fb745cd 	.word	0x3fb745cd
 801f2a0:	920083ff 	.word	0x920083ff
 801f2a4:	3fc24924 	.word	0x3fc24924
 801f2a8:	5555550d 	.word	0x5555550d
 801f2ac:	3fd55555 	.word	0x3fd55555
 801f2b0:	2c6a6c2f 	.word	0x2c6a6c2f
 801f2b4:	bfa2b444 	.word	0xbfa2b444
 801f2b8:	52defd9a 	.word	0x52defd9a
 801f2bc:	3fadde2d 	.word	0x3fadde2d
 801f2c0:	af749a6d 	.word	0xaf749a6d
 801f2c4:	3fb3b0f2 	.word	0x3fb3b0f2
 801f2c8:	fe231671 	.word	0xfe231671
 801f2cc:	3fbc71c6 	.word	0x3fbc71c6
 801f2d0:	9998ebc4 	.word	0x9998ebc4
 801f2d4:	3fc99999 	.word	0x3fc99999
 801f2d8:	54442d18 	.word	0x54442d18
 801f2dc:	3ff921fb 	.word	0x3ff921fb
 801f2e0:	440fffff 	.word	0x440fffff
 801f2e4:	7ff00000 	.word	0x7ff00000
 801f2e8:	3fdbffff 	.word	0x3fdbffff
 801f2ec:	3ff00000 	.word	0x3ff00000
 801f2f0:	3ff2ffff 	.word	0x3ff2ffff
 801f2f4:	40038000 	.word	0x40038000
 801f2f8:	3ff80000 	.word	0x3ff80000
 801f2fc:	bff00000 	.word	0xbff00000
 801f300:	080203e8 	.word	0x080203e8
 801f304:	080203c8 	.word	0x080203c8

0801f308 <fabs>:
 801f308:	ec51 0b10 	vmov	r0, r1, d0
 801f30c:	ee10 2a10 	vmov	r2, s0
 801f310:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f314:	ec43 2b10 	vmov	d0, r2, r3
 801f318:	4770      	bx	lr
 801f31a:	0000      	movs	r0, r0
 801f31c:	0000      	movs	r0, r0
	...

0801f320 <floor>:
 801f320:	ec51 0b10 	vmov	r0, r1, d0
 801f324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f328:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801f32c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801f330:	2e13      	cmp	r6, #19
 801f332:	ee10 5a10 	vmov	r5, s0
 801f336:	ee10 8a10 	vmov	r8, s0
 801f33a:	460c      	mov	r4, r1
 801f33c:	dc32      	bgt.n	801f3a4 <floor+0x84>
 801f33e:	2e00      	cmp	r6, #0
 801f340:	da14      	bge.n	801f36c <floor+0x4c>
 801f342:	a333      	add	r3, pc, #204	; (adr r3, 801f410 <floor+0xf0>)
 801f344:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f348:	f7e0 ffa0 	bl	800028c <__adddf3>
 801f34c:	2200      	movs	r2, #0
 801f34e:	2300      	movs	r3, #0
 801f350:	f7e1 fbe2 	bl	8000b18 <__aeabi_dcmpgt>
 801f354:	b138      	cbz	r0, 801f366 <floor+0x46>
 801f356:	2c00      	cmp	r4, #0
 801f358:	da57      	bge.n	801f40a <floor+0xea>
 801f35a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801f35e:	431d      	orrs	r5, r3
 801f360:	d001      	beq.n	801f366 <floor+0x46>
 801f362:	4c2d      	ldr	r4, [pc, #180]	; (801f418 <floor+0xf8>)
 801f364:	2500      	movs	r5, #0
 801f366:	4621      	mov	r1, r4
 801f368:	4628      	mov	r0, r5
 801f36a:	e025      	b.n	801f3b8 <floor+0x98>
 801f36c:	4f2b      	ldr	r7, [pc, #172]	; (801f41c <floor+0xfc>)
 801f36e:	4137      	asrs	r7, r6
 801f370:	ea01 0307 	and.w	r3, r1, r7
 801f374:	4303      	orrs	r3, r0
 801f376:	d01f      	beq.n	801f3b8 <floor+0x98>
 801f378:	a325      	add	r3, pc, #148	; (adr r3, 801f410 <floor+0xf0>)
 801f37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f37e:	f7e0 ff85 	bl	800028c <__adddf3>
 801f382:	2200      	movs	r2, #0
 801f384:	2300      	movs	r3, #0
 801f386:	f7e1 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 801f38a:	2800      	cmp	r0, #0
 801f38c:	d0eb      	beq.n	801f366 <floor+0x46>
 801f38e:	2c00      	cmp	r4, #0
 801f390:	bfbe      	ittt	lt
 801f392:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801f396:	fa43 f606 	asrlt.w	r6, r3, r6
 801f39a:	19a4      	addlt	r4, r4, r6
 801f39c:	ea24 0407 	bic.w	r4, r4, r7
 801f3a0:	2500      	movs	r5, #0
 801f3a2:	e7e0      	b.n	801f366 <floor+0x46>
 801f3a4:	2e33      	cmp	r6, #51	; 0x33
 801f3a6:	dd0b      	ble.n	801f3c0 <floor+0xa0>
 801f3a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f3ac:	d104      	bne.n	801f3b8 <floor+0x98>
 801f3ae:	ee10 2a10 	vmov	r2, s0
 801f3b2:	460b      	mov	r3, r1
 801f3b4:	f7e0 ff6a 	bl	800028c <__adddf3>
 801f3b8:	ec41 0b10 	vmov	d0, r0, r1
 801f3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801f3c4:	f04f 33ff 	mov.w	r3, #4294967295
 801f3c8:	fa23 f707 	lsr.w	r7, r3, r7
 801f3cc:	4207      	tst	r7, r0
 801f3ce:	d0f3      	beq.n	801f3b8 <floor+0x98>
 801f3d0:	a30f      	add	r3, pc, #60	; (adr r3, 801f410 <floor+0xf0>)
 801f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3d6:	f7e0 ff59 	bl	800028c <__adddf3>
 801f3da:	2200      	movs	r2, #0
 801f3dc:	2300      	movs	r3, #0
 801f3de:	f7e1 fb9b 	bl	8000b18 <__aeabi_dcmpgt>
 801f3e2:	2800      	cmp	r0, #0
 801f3e4:	d0bf      	beq.n	801f366 <floor+0x46>
 801f3e6:	2c00      	cmp	r4, #0
 801f3e8:	da02      	bge.n	801f3f0 <floor+0xd0>
 801f3ea:	2e14      	cmp	r6, #20
 801f3ec:	d103      	bne.n	801f3f6 <floor+0xd6>
 801f3ee:	3401      	adds	r4, #1
 801f3f0:	ea25 0507 	bic.w	r5, r5, r7
 801f3f4:	e7b7      	b.n	801f366 <floor+0x46>
 801f3f6:	2301      	movs	r3, #1
 801f3f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801f3fc:	fa03 f606 	lsl.w	r6, r3, r6
 801f400:	4435      	add	r5, r6
 801f402:	4545      	cmp	r5, r8
 801f404:	bf38      	it	cc
 801f406:	18e4      	addcc	r4, r4, r3
 801f408:	e7f2      	b.n	801f3f0 <floor+0xd0>
 801f40a:	2500      	movs	r5, #0
 801f40c:	462c      	mov	r4, r5
 801f40e:	e7aa      	b.n	801f366 <floor+0x46>
 801f410:	8800759c 	.word	0x8800759c
 801f414:	7e37e43c 	.word	0x7e37e43c
 801f418:	bff00000 	.word	0xbff00000
 801f41c:	000fffff 	.word	0x000fffff

0801f420 <scalbn>:
 801f420:	b570      	push	{r4, r5, r6, lr}
 801f422:	ec55 4b10 	vmov	r4, r5, d0
 801f426:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f42a:	4606      	mov	r6, r0
 801f42c:	462b      	mov	r3, r5
 801f42e:	b99a      	cbnz	r2, 801f458 <scalbn+0x38>
 801f430:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f434:	4323      	orrs	r3, r4
 801f436:	d036      	beq.n	801f4a6 <scalbn+0x86>
 801f438:	4b39      	ldr	r3, [pc, #228]	; (801f520 <scalbn+0x100>)
 801f43a:	4629      	mov	r1, r5
 801f43c:	ee10 0a10 	vmov	r0, s0
 801f440:	2200      	movs	r2, #0
 801f442:	f7e1 f8d9 	bl	80005f8 <__aeabi_dmul>
 801f446:	4b37      	ldr	r3, [pc, #220]	; (801f524 <scalbn+0x104>)
 801f448:	429e      	cmp	r6, r3
 801f44a:	4604      	mov	r4, r0
 801f44c:	460d      	mov	r5, r1
 801f44e:	da10      	bge.n	801f472 <scalbn+0x52>
 801f450:	a32b      	add	r3, pc, #172	; (adr r3, 801f500 <scalbn+0xe0>)
 801f452:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f456:	e03a      	b.n	801f4ce <scalbn+0xae>
 801f458:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f45c:	428a      	cmp	r2, r1
 801f45e:	d10c      	bne.n	801f47a <scalbn+0x5a>
 801f460:	ee10 2a10 	vmov	r2, s0
 801f464:	4620      	mov	r0, r4
 801f466:	4629      	mov	r1, r5
 801f468:	f7e0 ff10 	bl	800028c <__adddf3>
 801f46c:	4604      	mov	r4, r0
 801f46e:	460d      	mov	r5, r1
 801f470:	e019      	b.n	801f4a6 <scalbn+0x86>
 801f472:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f476:	460b      	mov	r3, r1
 801f478:	3a36      	subs	r2, #54	; 0x36
 801f47a:	4432      	add	r2, r6
 801f47c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f480:	428a      	cmp	r2, r1
 801f482:	dd08      	ble.n	801f496 <scalbn+0x76>
 801f484:	2d00      	cmp	r5, #0
 801f486:	a120      	add	r1, pc, #128	; (adr r1, 801f508 <scalbn+0xe8>)
 801f488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f48c:	da1c      	bge.n	801f4c8 <scalbn+0xa8>
 801f48e:	a120      	add	r1, pc, #128	; (adr r1, 801f510 <scalbn+0xf0>)
 801f490:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f494:	e018      	b.n	801f4c8 <scalbn+0xa8>
 801f496:	2a00      	cmp	r2, #0
 801f498:	dd08      	ble.n	801f4ac <scalbn+0x8c>
 801f49a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f49e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f4a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f4a6:	ec45 4b10 	vmov	d0, r4, r5
 801f4aa:	bd70      	pop	{r4, r5, r6, pc}
 801f4ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f4b0:	da19      	bge.n	801f4e6 <scalbn+0xc6>
 801f4b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f4b6:	429e      	cmp	r6, r3
 801f4b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801f4bc:	dd0a      	ble.n	801f4d4 <scalbn+0xb4>
 801f4be:	a112      	add	r1, pc, #72	; (adr r1, 801f508 <scalbn+0xe8>)
 801f4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d1e2      	bne.n	801f48e <scalbn+0x6e>
 801f4c8:	a30f      	add	r3, pc, #60	; (adr r3, 801f508 <scalbn+0xe8>)
 801f4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4ce:	f7e1 f893 	bl	80005f8 <__aeabi_dmul>
 801f4d2:	e7cb      	b.n	801f46c <scalbn+0x4c>
 801f4d4:	a10a      	add	r1, pc, #40	; (adr r1, 801f500 <scalbn+0xe0>)
 801f4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d0b8      	beq.n	801f450 <scalbn+0x30>
 801f4de:	a10e      	add	r1, pc, #56	; (adr r1, 801f518 <scalbn+0xf8>)
 801f4e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f4e4:	e7b4      	b.n	801f450 <scalbn+0x30>
 801f4e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f4ea:	3236      	adds	r2, #54	; 0x36
 801f4ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f4f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f4f4:	4620      	mov	r0, r4
 801f4f6:	4b0c      	ldr	r3, [pc, #48]	; (801f528 <scalbn+0x108>)
 801f4f8:	2200      	movs	r2, #0
 801f4fa:	e7e8      	b.n	801f4ce <scalbn+0xae>
 801f4fc:	f3af 8000 	nop.w
 801f500:	c2f8f359 	.word	0xc2f8f359
 801f504:	01a56e1f 	.word	0x01a56e1f
 801f508:	8800759c 	.word	0x8800759c
 801f50c:	7e37e43c 	.word	0x7e37e43c
 801f510:	8800759c 	.word	0x8800759c
 801f514:	fe37e43c 	.word	0xfe37e43c
 801f518:	c2f8f359 	.word	0xc2f8f359
 801f51c:	81a56e1f 	.word	0x81a56e1f
 801f520:	43500000 	.word	0x43500000
 801f524:	ffff3cb0 	.word	0xffff3cb0
 801f528:	3c900000 	.word	0x3c900000

0801f52c <_close>:
 801f52c:	4b02      	ldr	r3, [pc, #8]	; (801f538 <_close+0xc>)
 801f52e:	2258      	movs	r2, #88	; 0x58
 801f530:	601a      	str	r2, [r3, #0]
 801f532:	f04f 30ff 	mov.w	r0, #4294967295
 801f536:	4770      	bx	lr
 801f538:	2000e554 	.word	0x2000e554

0801f53c <_fstat>:
 801f53c:	4b02      	ldr	r3, [pc, #8]	; (801f548 <_fstat+0xc>)
 801f53e:	2258      	movs	r2, #88	; 0x58
 801f540:	601a      	str	r2, [r3, #0]
 801f542:	f04f 30ff 	mov.w	r0, #4294967295
 801f546:	4770      	bx	lr
 801f548:	2000e554 	.word	0x2000e554

0801f54c <_getpid>:
 801f54c:	4b02      	ldr	r3, [pc, #8]	; (801f558 <_getpid+0xc>)
 801f54e:	2258      	movs	r2, #88	; 0x58
 801f550:	601a      	str	r2, [r3, #0]
 801f552:	f04f 30ff 	mov.w	r0, #4294967295
 801f556:	4770      	bx	lr
 801f558:	2000e554 	.word	0x2000e554

0801f55c <_isatty>:
 801f55c:	4b02      	ldr	r3, [pc, #8]	; (801f568 <_isatty+0xc>)
 801f55e:	2258      	movs	r2, #88	; 0x58
 801f560:	601a      	str	r2, [r3, #0]
 801f562:	2000      	movs	r0, #0
 801f564:	4770      	bx	lr
 801f566:	bf00      	nop
 801f568:	2000e554 	.word	0x2000e554

0801f56c <_kill>:
 801f56c:	4b02      	ldr	r3, [pc, #8]	; (801f578 <_kill+0xc>)
 801f56e:	2258      	movs	r2, #88	; 0x58
 801f570:	601a      	str	r2, [r3, #0]
 801f572:	f04f 30ff 	mov.w	r0, #4294967295
 801f576:	4770      	bx	lr
 801f578:	2000e554 	.word	0x2000e554

0801f57c <_lseek>:
 801f57c:	4b02      	ldr	r3, [pc, #8]	; (801f588 <_lseek+0xc>)
 801f57e:	2258      	movs	r2, #88	; 0x58
 801f580:	601a      	str	r2, [r3, #0]
 801f582:	f04f 30ff 	mov.w	r0, #4294967295
 801f586:	4770      	bx	lr
 801f588:	2000e554 	.word	0x2000e554

0801f58c <_read>:
 801f58c:	4b02      	ldr	r3, [pc, #8]	; (801f598 <_read+0xc>)
 801f58e:	2258      	movs	r2, #88	; 0x58
 801f590:	601a      	str	r2, [r3, #0]
 801f592:	f04f 30ff 	mov.w	r0, #4294967295
 801f596:	4770      	bx	lr
 801f598:	2000e554 	.word	0x2000e554

0801f59c <_sbrk>:
 801f59c:	4a04      	ldr	r2, [pc, #16]	; (801f5b0 <_sbrk+0x14>)
 801f59e:	6811      	ldr	r1, [r2, #0]
 801f5a0:	4603      	mov	r3, r0
 801f5a2:	b909      	cbnz	r1, 801f5a8 <_sbrk+0xc>
 801f5a4:	4903      	ldr	r1, [pc, #12]	; (801f5b4 <_sbrk+0x18>)
 801f5a6:	6011      	str	r1, [r2, #0]
 801f5a8:	6810      	ldr	r0, [r2, #0]
 801f5aa:	4403      	add	r3, r0
 801f5ac:	6013      	str	r3, [r2, #0]
 801f5ae:	4770      	bx	lr
 801f5b0:	2000e558 	.word	0x2000e558
 801f5b4:	2000e560 	.word	0x2000e560

0801f5b8 <_write>:
 801f5b8:	4b02      	ldr	r3, [pc, #8]	; (801f5c4 <_write+0xc>)
 801f5ba:	2258      	movs	r2, #88	; 0x58
 801f5bc:	601a      	str	r2, [r3, #0]
 801f5be:	f04f 30ff 	mov.w	r0, #4294967295
 801f5c2:	4770      	bx	lr
 801f5c4:	2000e554 	.word	0x2000e554

0801f5c8 <_exit>:
 801f5c8:	e7fe      	b.n	801f5c8 <_exit>
	...

0801f5cc <_init>:
 801f5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5ce:	bf00      	nop
 801f5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f5d2:	bc08      	pop	{r3}
 801f5d4:	469e      	mov	lr, r3
 801f5d6:	4770      	bx	lr

0801f5d8 <_fini>:
 801f5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5da:	bf00      	nop
 801f5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f5de:	bc08      	pop	{r3}
 801f5e0:	469e      	mov	lr, r3
 801f5e2:	4770      	bx	lr
